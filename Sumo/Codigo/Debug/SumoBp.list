
SumoBp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004720  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800482c  0800482c  0001482c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800484c  0800484c  000200bc  2**0
                  CONTENTS
  4 .ARM          00000000  0800484c  0800484c  000200bc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800484c  0800484c  000200bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800484c  0800484c  0001484c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004850  08004850  00014850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  08004854  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000380  200000bc  08004910  000200bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000043c  08004910  0002043c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b31f  00000000  00000000  000200e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002420  00000000  00000000  0002b404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c20  00000000  00000000  0002d828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ae8  00000000  00000000  0002e448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000189e6  00000000  00000000  0002ef30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ec60  00000000  00000000  00047916  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cd83  00000000  00000000  00056576  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e32f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033e4  00000000  00000000  000e334c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000bc 	.word	0x200000bc
 8000128:	00000000 	.word	0x00000000
 800012c:	08004814 	.word	0x08004814

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000c0 	.word	0x200000c0
 8000148:	08004814 	.word	0x08004814

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2iz>:
 80006f4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80006fc:	d30f      	bcc.n	800071e <__aeabi_f2iz+0x2a>
 80006fe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000702:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000706:	d90d      	bls.n	8000724 <__aeabi_f2iz+0x30>
 8000708:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800070c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000710:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000714:	fa23 f002 	lsr.w	r0, r3, r2
 8000718:	bf18      	it	ne
 800071a:	4240      	negne	r0, r0
 800071c:	4770      	bx	lr
 800071e:	f04f 0000 	mov.w	r0, #0
 8000722:	4770      	bx	lr
 8000724:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000728:	d101      	bne.n	800072e <__aeabi_f2iz+0x3a>
 800072a:	0242      	lsls	r2, r0, #9
 800072c:	d105      	bne.n	800073a <__aeabi_f2iz+0x46>
 800072e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000732:	bf08      	it	eq
 8000734:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000738:	4770      	bx	lr
 800073a:	f04f 0000 	mov.w	r0, #0
 800073e:	4770      	bx	lr

08000740 <showModeNumber>:
 *      Author: jore
 */
#include "stm32f1xx_hal.h"
#include "main.h"

void showModeNumber(int number) {
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(L4, number % 2);
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	2b00      	cmp	r3, #0
 800074c:	f003 0301 	and.w	r3, r3, #1
 8000750:	bfb8      	it	lt
 8000752:	425b      	neglt	r3, r3
 8000754:	b2db      	uxtb	r3, r3
 8000756:	461a      	mov	r2, r3
 8000758:	2140      	movs	r1, #64	; 0x40
 800075a:	481e      	ldr	r0, [pc, #120]	; (80007d4 <showModeNumber+0x94>)
 800075c:	f002 fc97 	bl	800308e <HAL_GPIO_WritePin>
	number /= 2;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	0fda      	lsrs	r2, r3, #31
 8000764:	4413      	add	r3, r2
 8000766:	105b      	asrs	r3, r3, #1
 8000768:	607b      	str	r3, [r7, #4]
	HAL_GPIO_WritePin(L3, number % 2);
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	2b00      	cmp	r3, #0
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	bfb8      	it	lt
 8000774:	425b      	neglt	r3, r3
 8000776:	b2db      	uxtb	r3, r3
 8000778:	461a      	mov	r2, r3
 800077a:	2180      	movs	r1, #128	; 0x80
 800077c:	4815      	ldr	r0, [pc, #84]	; (80007d4 <showModeNumber+0x94>)
 800077e:	f002 fc86 	bl	800308e <HAL_GPIO_WritePin>
	number /= 2;
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	0fda      	lsrs	r2, r3, #31
 8000786:	4413      	add	r3, r2
 8000788:	105b      	asrs	r3, r3, #1
 800078a:	607b      	str	r3, [r7, #4]
	HAL_GPIO_WritePin(L2, number % 2);
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	2b00      	cmp	r3, #0
 8000790:	f003 0301 	and.w	r3, r3, #1
 8000794:	bfb8      	it	lt
 8000796:	425b      	neglt	r3, r3
 8000798:	b2db      	uxtb	r3, r3
 800079a:	461a      	mov	r2, r3
 800079c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007a0:	480c      	ldr	r0, [pc, #48]	; (80007d4 <showModeNumber+0x94>)
 80007a2:	f002 fc74 	bl	800308e <HAL_GPIO_WritePin>
	number /= 2;
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	0fda      	lsrs	r2, r3, #31
 80007aa:	4413      	add	r3, r2
 80007ac:	105b      	asrs	r3, r3, #1
 80007ae:	607b      	str	r3, [r7, #4]
	HAL_GPIO_WritePin(L1, number % 2);
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	f003 0301 	and.w	r3, r3, #1
 80007b8:	bfb8      	it	lt
 80007ba:	425b      	neglt	r3, r3
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	461a      	mov	r2, r3
 80007c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007c4:	4803      	ldr	r0, [pc, #12]	; (80007d4 <showModeNumber+0x94>)
 80007c6:	f002 fc62 	bl	800308e <HAL_GPIO_WritePin>
}
 80007ca:	bf00      	nop
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40010c00 	.word	0x40010c00

080007d8 <MAP>:
#include "main.h"
int ticks = 0;
int lecturaBtn = 0;

uint32_t MAP(uint32_t au32_IN, uint32_t au32_INmin, uint32_t au32_INmax,
		uint32_t au32_OUTmin, uint32_t au32_OUTmax) {
 80007d8:	b480      	push	{r7}
 80007da:	b085      	sub	sp, #20
 80007dc:	af00      	add	r7, sp, #0
 80007de:	60f8      	str	r0, [r7, #12]
 80007e0:	60b9      	str	r1, [r7, #8]
 80007e2:	607a      	str	r2, [r7, #4]
 80007e4:	603b      	str	r3, [r7, #0]
	return ((((au32_IN - au32_INmin) * (au32_OUTmax - au32_OUTmin))
 80007e6:	68fa      	ldr	r2, [r7, #12]
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	1ad3      	subs	r3, r2, r3
 80007ec:	69b9      	ldr	r1, [r7, #24]
 80007ee:	683a      	ldr	r2, [r7, #0]
 80007f0:	1a8a      	subs	r2, r1, r2
 80007f2:	fb03 f202 	mul.w	r2, r3, r2
			/ (au32_INmax - au32_INmin)) + au32_OUTmin);
 80007f6:	6879      	ldr	r1, [r7, #4]
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	1acb      	subs	r3, r1, r3
 80007fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	4413      	add	r3, r2
}
 8000804:	4618      	mov	r0, r3
 8000806:	3714      	adds	r7, #20
 8000808:	46bd      	mov	sp, r7
 800080a:	bc80      	pop	{r7}
 800080c:	4770      	bx	lr

0800080e <constrain>:

int constrain(int x, int a, int b) {
 800080e:	b480      	push	{r7}
 8000810:	b085      	sub	sp, #20
 8000812:	af00      	add	r7, sp, #0
 8000814:	60f8      	str	r0, [r7, #12]
 8000816:	60b9      	str	r1, [r7, #8]
 8000818:	607a      	str	r2, [r7, #4]
	if (x < a) {
 800081a:	68fa      	ldr	r2, [r7, #12]
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	429a      	cmp	r2, r3
 8000820:	da01      	bge.n	8000826 <constrain+0x18>
		return a;
 8000822:	68bb      	ldr	r3, [r7, #8]
 8000824:	e006      	b.n	8000834 <constrain+0x26>
	} else if (b < x) {
 8000826:	687a      	ldr	r2, [r7, #4]
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	429a      	cmp	r2, r3
 800082c:	da01      	bge.n	8000832 <constrain+0x24>
		return b;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	e000      	b.n	8000834 <constrain+0x26>
	} else
		return x;
 8000832:	68fb      	ldr	r3, [r7, #12]
}
 8000834:	4618      	mov	r0, r3
 8000836:	3714      	adds	r7, #20
 8000838:	46bd      	mov	sp, r7
 800083a:	bc80      	pop	{r7}
 800083c:	4770      	bx	lr
	...

08000840 <btnMachine>:


void btnMachine(button* btn) {
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
	switch (btn->estado) {
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	689b      	ldr	r3, [r3, #8]
 800084c:	2b02      	cmp	r3, #2
 800084e:	d04a      	beq.n	80008e6 <btnMachine+0xa6>
 8000850:	2b02      	cmp	r3, #2
 8000852:	dc64      	bgt.n	800091e <btnMachine+0xde>
 8000854:	2b00      	cmp	r3, #0
 8000856:	d002      	beq.n	800085e <btnMachine+0x1e>
 8000858:	2b01      	cmp	r3, #1
 800085a:	d01d      	beq.n	8000898 <btnMachine+0x58>
			(*btn).flag = 1;
			(*btn).estado = ESPERA;
		}
		break;
	}
}
 800085c:	e05f      	b.n	800091e <btnMachine+0xde>
		(*btn).flag = 0;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	2200      	movs	r2, #0
 8000862:	60da      	str	r2, [r3, #12]
		lecturaBtn = HAL_GPIO_ReadPin((*btn).PIN.Port, (*btn).PIN.pin);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681a      	ldr	r2, [r3, #0]
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	889b      	ldrh	r3, [r3, #4]
 800086c:	4619      	mov	r1, r3
 800086e:	4610      	mov	r0, r2
 8000870:	f002 fbf6 	bl	8003060 <HAL_GPIO_ReadPin>
 8000874:	4603      	mov	r3, r0
 8000876:	461a      	mov	r2, r3
 8000878:	4b2b      	ldr	r3, [pc, #172]	; (8000928 <btnMachine+0xe8>)
 800087a:	601a      	str	r2, [r3, #0]
		if (lecturaBtn == 0) {
 800087c:	4b2a      	ldr	r3, [pc, #168]	; (8000928 <btnMachine+0xe8>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d147      	bne.n	8000914 <btnMachine+0xd4>
			ticks = HAL_GetTick();
 8000884:	f001 fb7c 	bl	8001f80 <HAL_GetTick>
 8000888:	4603      	mov	r3, r0
 800088a:	461a      	mov	r2, r3
 800088c:	4b27      	ldr	r3, [pc, #156]	; (800092c <btnMachine+0xec>)
 800088e:	601a      	str	r2, [r3, #0]
			(*btn).estado = CONFIRMACION;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	2201      	movs	r2, #1
 8000894:	609a      	str	r2, [r3, #8]
		break;
 8000896:	e03d      	b.n	8000914 <btnMachine+0xd4>
		lecturaBtn = HAL_GPIO_ReadPin((*btn).PIN.Port, (*btn).PIN.pin);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681a      	ldr	r2, [r3, #0]
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	889b      	ldrh	r3, [r3, #4]
 80008a0:	4619      	mov	r1, r3
 80008a2:	4610      	mov	r0, r2
 80008a4:	f002 fbdc 	bl	8003060 <HAL_GPIO_ReadPin>
 80008a8:	4603      	mov	r3, r0
 80008aa:	461a      	mov	r2, r3
 80008ac:	4b1e      	ldr	r3, [pc, #120]	; (8000928 <btnMachine+0xe8>)
 80008ae:	601a      	str	r2, [r3, #0]
		if (lecturaBtn == 0 && HAL_GetTick() >= ticks + TICKS_BTN) {
 80008b0:	4b1d      	ldr	r3, [pc, #116]	; (8000928 <btnMachine+0xe8>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d10a      	bne.n	80008ce <btnMachine+0x8e>
 80008b8:	f001 fb62 	bl	8001f80 <HAL_GetTick>
 80008bc:	4602      	mov	r2, r0
 80008be:	4b1b      	ldr	r3, [pc, #108]	; (800092c <btnMachine+0xec>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	3319      	adds	r3, #25
 80008c4:	429a      	cmp	r2, r3
 80008c6:	d302      	bcc.n	80008ce <btnMachine+0x8e>
			(*btn).estado = LIBERACION;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	2202      	movs	r2, #2
 80008cc:	609a      	str	r2, [r3, #8]
		if (lecturaBtn == 1 && ticks < TICKS_BTN) {
 80008ce:	4b16      	ldr	r3, [pc, #88]	; (8000928 <btnMachine+0xe8>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	2b01      	cmp	r3, #1
 80008d4:	d120      	bne.n	8000918 <btnMachine+0xd8>
 80008d6:	4b15      	ldr	r3, [pc, #84]	; (800092c <btnMachine+0xec>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	2b18      	cmp	r3, #24
 80008dc:	dc1c      	bgt.n	8000918 <btnMachine+0xd8>
			(*btn).estado = ESPERA;
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
		break;
 80008e4:	e018      	b.n	8000918 <btnMachine+0xd8>
		lecturaBtn = HAL_GPIO_ReadPin((*btn).PIN.Port, (*btn).PIN.pin);
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681a      	ldr	r2, [r3, #0]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	889b      	ldrh	r3, [r3, #4]
 80008ee:	4619      	mov	r1, r3
 80008f0:	4610      	mov	r0, r2
 80008f2:	f002 fbb5 	bl	8003060 <HAL_GPIO_ReadPin>
 80008f6:	4603      	mov	r3, r0
 80008f8:	461a      	mov	r2, r3
 80008fa:	4b0b      	ldr	r3, [pc, #44]	; (8000928 <btnMachine+0xe8>)
 80008fc:	601a      	str	r2, [r3, #0]
		if (lecturaBtn == 1) {
 80008fe:	4b0a      	ldr	r3, [pc, #40]	; (8000928 <btnMachine+0xe8>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	2b01      	cmp	r3, #1
 8000904:	d10a      	bne.n	800091c <btnMachine+0xdc>
			(*btn).flag = 1;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	2201      	movs	r2, #1
 800090a:	60da      	str	r2, [r3, #12]
			(*btn).estado = ESPERA;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	2200      	movs	r2, #0
 8000910:	609a      	str	r2, [r3, #8]
		break;
 8000912:	e003      	b.n	800091c <btnMachine+0xdc>
		break;
 8000914:	bf00      	nop
 8000916:	e002      	b.n	800091e <btnMachine+0xde>
		break;
 8000918:	bf00      	nop
 800091a:	e000      	b.n	800091e <btnMachine+0xde>
		break;
 800091c:	bf00      	nop
}
 800091e:	bf00      	nop
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	200000dc 	.word	0x200000dc
 800092c:	200000d8 	.word	0x200000d8

08000930 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000934:	f001 facc 	bl	8001ed0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000938:	f000 f8a8 	bl	8000a8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800093c:	f000 faea 	bl	8000f14 <MX_GPIO_Init>
  MX_DMA_Init();
 8000940:	f000 faca 	bl	8000ed8 <MX_DMA_Init>
  MX_TIM1_Init();
 8000944:	f000 f93c 	bl	8000bc0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000948:	f000 f9da 	bl	8000d00 <MX_TIM2_Init>
  MX_TIM3_Init();
 800094c:	f000 fa4e 	bl	8000dec <MX_TIM3_Init>
  MX_ADC1_Init();
 8000950:	f000 f8f8 	bl	8000b44 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
	btns[0].PIN.Port = B1_GPIO_Port;
 8000954:	4b3e      	ldr	r3, [pc, #248]	; (8000a50 <main+0x120>)
 8000956:	4a3f      	ldr	r2, [pc, #252]	; (8000a54 <main+0x124>)
 8000958:	601a      	str	r2, [r3, #0]
	btns[0].PIN.pin = B1_Pin;
 800095a:	4b3d      	ldr	r3, [pc, #244]	; (8000a50 <main+0x120>)
 800095c:	2220      	movs	r2, #32
 800095e:	809a      	strh	r2, [r3, #4]
	btns[0].estado = ESPERA;
 8000960:	4b3b      	ldr	r3, [pc, #236]	; (8000a50 <main+0x120>)
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
	btns[0].flag = 0;
 8000966:	4b3a      	ldr	r3, [pc, #232]	; (8000a50 <main+0x120>)
 8000968:	2200      	movs	r2, #0
 800096a:	60da      	str	r2, [r3, #12]
	btns[1].PIN.Port = B2_GPIO_Port;
 800096c:	4b38      	ldr	r3, [pc, #224]	; (8000a50 <main+0x120>)
 800096e:	4a39      	ldr	r2, [pc, #228]	; (8000a54 <main+0x124>)
 8000970:	611a      	str	r2, [r3, #16]
	btns[1].PIN.pin = B2_Pin;
 8000972:	4b37      	ldr	r3, [pc, #220]	; (8000a50 <main+0x120>)
 8000974:	2210      	movs	r2, #16
 8000976:	829a      	strh	r2, [r3, #20]
	btns[1].estado = ESPERA;
 8000978:	4b35      	ldr	r3, [pc, #212]	; (8000a50 <main+0x120>)
 800097a:	2200      	movs	r2, #0
 800097c:	619a      	str	r2, [r3, #24]
	btns[1].flag = 0;
 800097e:	4b34      	ldr	r3, [pc, #208]	; (8000a50 <main+0x120>)
 8000980:	2200      	movs	r2, #0
 8000982:	61da      	str	r2, [r3, #28]
	btns[2].PIN.Port = B3_GPIO_Port;
 8000984:	4b32      	ldr	r3, [pc, #200]	; (8000a50 <main+0x120>)
 8000986:	4a33      	ldr	r2, [pc, #204]	; (8000a54 <main+0x124>)
 8000988:	621a      	str	r2, [r3, #32]
	btns[2].PIN.pin = B3_Pin;
 800098a:	4b31      	ldr	r3, [pc, #196]	; (8000a50 <main+0x120>)
 800098c:	2208      	movs	r2, #8
 800098e:	849a      	strh	r2, [r3, #36]	; 0x24
	btns[2].estado = ESPERA;
 8000990:	4b2f      	ldr	r3, [pc, #188]	; (8000a50 <main+0x120>)
 8000992:	2200      	movs	r2, #0
 8000994:	629a      	str	r2, [r3, #40]	; 0x28
	btns[2].flag = 0;
 8000996:	4b2e      	ldr	r3, [pc, #184]	; (8000a50 <main+0x120>)
 8000998:	2200      	movs	r2, #0
 800099a:	62da      	str	r2, [r3, #44]	; 0x2c
	btns[3].PIN.Port = B4_GPIO_Port;
 800099c:	4b2c      	ldr	r3, [pc, #176]	; (8000a50 <main+0x120>)
 800099e:	4a2e      	ldr	r2, [pc, #184]	; (8000a58 <main+0x128>)
 80009a0:	631a      	str	r2, [r3, #48]	; 0x30
	btns[3].PIN.pin = B4_Pin;
 80009a2:	4b2b      	ldr	r3, [pc, #172]	; (8000a50 <main+0x120>)
 80009a4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80009a8:	869a      	strh	r2, [r3, #52]	; 0x34
	btns[3].estado = ESPERA;
 80009aa:	4b29      	ldr	r3, [pc, #164]	; (8000a50 <main+0x120>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	639a      	str	r2, [r3, #56]	; 0x38
	btns[3].flag = 0;
 80009b0:	4b27      	ldr	r3, [pc, #156]	; (8000a50 <main+0x120>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	63da      	str	r2, [r3, #60]	; 0x3c
	Motors[0].IN1.Port = INA1_GPIO_Port;
 80009b6:	4b29      	ldr	r3, [pc, #164]	; (8000a5c <main+0x12c>)
 80009b8:	4a26      	ldr	r2, [pc, #152]	; (8000a54 <main+0x124>)
 80009ba:	609a      	str	r2, [r3, #8]
	Motors[0].IN2.Port = INA2_GPIO_Port;
 80009bc:	4b27      	ldr	r3, [pc, #156]	; (8000a5c <main+0x12c>)
 80009be:	4a26      	ldr	r2, [pc, #152]	; (8000a58 <main+0x128>)
 80009c0:	601a      	str	r2, [r3, #0]
	Motors[0].IN1.pin = INA1_Pin;
 80009c2:	4b26      	ldr	r3, [pc, #152]	; (8000a5c <main+0x12c>)
 80009c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80009c8:	819a      	strh	r2, [r3, #12]
	Motors[0].IN2.pin = INA2_Pin;
 80009ca:	4b24      	ldr	r3, [pc, #144]	; (8000a5c <main+0x12c>)
 80009cc:	2280      	movs	r2, #128	; 0x80
 80009ce:	809a      	strh	r2, [r3, #4]
	Motors[1].IN1.Port = INB1_GPIO_Port;
 80009d0:	4b22      	ldr	r3, [pc, #136]	; (8000a5c <main+0x12c>)
 80009d2:	4a21      	ldr	r2, [pc, #132]	; (8000a58 <main+0x128>)
 80009d4:	621a      	str	r2, [r3, #32]
	Motors[1].IN2.Port = INB2_GPIO_Port;
 80009d6:	4b21      	ldr	r3, [pc, #132]	; (8000a5c <main+0x12c>)
 80009d8:	4a1e      	ldr	r2, [pc, #120]	; (8000a54 <main+0x124>)
 80009da:	619a      	str	r2, [r3, #24]
	Motors[1].IN1.pin = INB1_Pin;
 80009dc:	4b1f      	ldr	r3, [pc, #124]	; (8000a5c <main+0x12c>)
 80009de:	2240      	movs	r2, #64	; 0x40
 80009e0:	849a      	strh	r2, [r3, #36]	; 0x24
	Motors[1].IN2.pin = INB2_Pin;
 80009e2:	4b1e      	ldr	r3, [pc, #120]	; (8000a5c <main+0x12c>)
 80009e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009e8:	839a      	strh	r2, [r3, #28]

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80009ea:	210c      	movs	r1, #12
 80009ec:	481c      	ldr	r0, [pc, #112]	; (8000a60 <main+0x130>)
 80009ee:	f003 f8ad 	bl	8003b4c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80009f2:	2100      	movs	r1, #0
 80009f4:	481b      	ldr	r0, [pc, #108]	; (8000a64 <main+0x134>)
 80009f6:	f003 f8a9 	bl	8003b4c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80009fa:	2100      	movs	r1, #0
 80009fc:	481a      	ldr	r0, [pc, #104]	; (8000a68 <main+0x138>)
 80009fe:	f003 f8a5 	bl	8003b4c <HAL_TIM_PWM_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_buf, ADC_BUF_LEN);
 8000a02:	2228      	movs	r2, #40	; 0x28
 8000a04:	4919      	ldr	r1, [pc, #100]	; (8000a6c <main+0x13c>)
 8000a06:	481a      	ldr	r0, [pc, #104]	; (8000a70 <main+0x140>)
 8000a08:	f001 fbc0 	bl	800218c <HAL_ADC_Start_DMA>
	TIM3->CCR4 = 65535;
 8000a0c:	4b19      	ldr	r3, [pc, #100]	; (8000a74 <main+0x144>)
 8000a0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a12:	641a      	str	r2, [r3, #64]	; 0x40
	TIM2->CCR1 = 65535;
 8000a14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a1c:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR1 = 50000;
 8000a1e:	4b16      	ldr	r3, [pc, #88]	; (8000a78 <main+0x148>)
 8000a20:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000a24:	635a      	str	r2, [r3, #52]	; 0x34
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		btnMachine(&btns[0]);
 8000a26:	480a      	ldr	r0, [pc, #40]	; (8000a50 <main+0x120>)
 8000a28:	f7ff ff0a 	bl	8000840 <btnMachine>
		btnMachine(&btns[1]);
 8000a2c:	4813      	ldr	r0, [pc, #76]	; (8000a7c <main+0x14c>)
 8000a2e:	f7ff ff07 	bl	8000840 <btnMachine>
		btnMachine(&btns[2]);
 8000a32:	4813      	ldr	r0, [pc, #76]	; (8000a80 <main+0x150>)
 8000a34:	f7ff ff04 	bl	8000840 <btnMachine>
		btnMachine(&btns[3]);
 8000a38:	4812      	ldr	r0, [pc, #72]	; (8000a84 <main+0x154>)
 8000a3a:	f7ff ff01 	bl	8000840 <btnMachine>
		/*HAL_GPIO_WritePin(INA1, GPIO_PIN_SET);
		 HAL_GPIO_WritePin(INA2, GPIO_PIN_RESET);*/
		mainMachine();
 8000a3e:	f000 fb07 	bl	8001050 <mainMachine>
		 showModeNumber(Sensors[3]);
 8000a42:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <main+0x158>)
 8000a44:	68db      	ldr	r3, [r3, #12]
 8000a46:	4618      	mov	r0, r3
 8000a48:	f7ff fe7a 	bl	8000740 <showModeNumber>
		btnMachine(&btns[0]);
 8000a4c:	e7eb      	b.n	8000a26 <main+0xf6>
 8000a4e:	bf00      	nop
 8000a50:	20000384 	.word	0x20000384
 8000a54:	40010c00 	.word	0x40010c00
 8000a58:	40010800 	.word	0x40010800
 8000a5c:	200003c4 	.word	0x200003c4
 8000a60:	200001e4 	.word	0x200001e4
 8000a64:	2000019c 	.word	0x2000019c
 8000a68:	20000154 	.word	0x20000154
 8000a6c:	20000240 	.word	0x20000240
 8000a70:	200000e0 	.word	0x200000e0
 8000a74:	40000400 	.word	0x40000400
 8000a78:	40012c00 	.word	0x40012c00
 8000a7c:	20000394 	.word	0x20000394
 8000a80:	200003a4 	.word	0x200003a4
 8000a84:	200003b4 	.word	0x200003b4
 8000a88:	2000022c 	.word	0x2000022c

08000a8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b094      	sub	sp, #80	; 0x50
 8000a90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a96:	2228      	movs	r2, #40	; 0x28
 8000a98:	2100      	movs	r1, #0
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f003 fe00 	bl	80046a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aa0:	f107 0314 	add.w	r3, r7, #20
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]
 8000aae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ab0:	1d3b      	adds	r3, r7, #4
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	605a      	str	r2, [r3, #4]
 8000ab8:	609a      	str	r2, [r3, #8]
 8000aba:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000abc:	2301      	movs	r3, #1
 8000abe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ac0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aca:	2301      	movs	r3, #1
 8000acc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ad2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ad6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000ad8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000adc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ade:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f002 faec 	bl	80030c0 <HAL_RCC_OscConfig>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000aee:	f000 fc09 	bl	8001304 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000af2:	230f      	movs	r3, #15
 8000af4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000af6:	2302      	movs	r3, #2
 8000af8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000afe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b02:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b04:	2300      	movs	r3, #0
 8000b06:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b08:	f107 0314 	add.w	r3, r7, #20
 8000b0c:	2102      	movs	r1, #2
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f002 fd58 	bl	80035c4 <HAL_RCC_ClockConfig>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000b1a:	f000 fbf3 	bl	8001304 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000b22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b26:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b28:	1d3b      	adds	r3, r7, #4
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f002 feb0 	bl	8003890 <HAL_RCCEx_PeriphCLKConfig>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000b36:	f000 fbe5 	bl	8001304 <Error_Handler>
  }
}
 8000b3a:	bf00      	nop
 8000b3c:	3750      	adds	r7, #80	; 0x50
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
	...

08000b44 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b4a:	1d3b      	adds	r3, r7, #4
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b54:	4b18      	ldr	r3, [pc, #96]	; (8000bb8 <MX_ADC1_Init+0x74>)
 8000b56:	4a19      	ldr	r2, [pc, #100]	; (8000bbc <MX_ADC1_Init+0x78>)
 8000b58:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b5a:	4b17      	ldr	r3, [pc, #92]	; (8000bb8 <MX_ADC1_Init+0x74>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b60:	4b15      	ldr	r3, [pc, #84]	; (8000bb8 <MX_ADC1_Init+0x74>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b66:	4b14      	ldr	r3, [pc, #80]	; (8000bb8 <MX_ADC1_Init+0x74>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b6c:	4b12      	ldr	r3, [pc, #72]	; (8000bb8 <MX_ADC1_Init+0x74>)
 8000b6e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000b72:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b74:	4b10      	ldr	r3, [pc, #64]	; (8000bb8 <MX_ADC1_Init+0x74>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000b7a:	4b0f      	ldr	r3, [pc, #60]	; (8000bb8 <MX_ADC1_Init+0x74>)
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b80:	480d      	ldr	r0, [pc, #52]	; (8000bb8 <MX_ADC1_Init+0x74>)
 8000b82:	f001 fa2b 	bl	8001fdc <HAL_ADC_Init>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000b8c:	f000 fbba 	bl	8001304 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000b90:	2301      	movs	r3, #1
 8000b92:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b94:	2301      	movs	r3, #1
 8000b96:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b9c:	1d3b      	adds	r3, r7, #4
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4805      	ldr	r0, [pc, #20]	; (8000bb8 <MX_ADC1_Init+0x74>)
 8000ba2:	f001 fbe3 	bl	800236c <HAL_ADC_ConfigChannel>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000bac:	f000 fbaa 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bb0:	bf00      	nop
 8000bb2:	3710      	adds	r7, #16
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	200000e0 	.word	0x200000e0
 8000bbc:	40012400 	.word	0x40012400

08000bc0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b096      	sub	sp, #88	; 0x58
 8000bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bc6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	605a      	str	r2, [r3, #4]
 8000bd0:	609a      	str	r2, [r3, #8]
 8000bd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bd4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	605a      	str	r2, [r3, #4]
 8000be8:	609a      	str	r2, [r3, #8]
 8000bea:	60da      	str	r2, [r3, #12]
 8000bec:	611a      	str	r2, [r3, #16]
 8000bee:	615a      	str	r2, [r3, #20]
 8000bf0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000bf2:	1d3b      	adds	r3, r7, #4
 8000bf4:	2220      	movs	r2, #32
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f003 fd51 	bl	80046a0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bfe:	4b3e      	ldr	r3, [pc, #248]	; (8000cf8 <MX_TIM1_Init+0x138>)
 8000c00:	4a3e      	ldr	r2, [pc, #248]	; (8000cfc <MX_TIM1_Init+0x13c>)
 8000c02:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000c04:	4b3c      	ldr	r3, [pc, #240]	; (8000cf8 <MX_TIM1_Init+0x138>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c0a:	4b3b      	ldr	r3, [pc, #236]	; (8000cf8 <MX_TIM1_Init+0x138>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1895;
 8000c10:	4b39      	ldr	r3, [pc, #228]	; (8000cf8 <MX_TIM1_Init+0x138>)
 8000c12:	f240 7267 	movw	r2, #1895	; 0x767
 8000c16:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c18:	4b37      	ldr	r3, [pc, #220]	; (8000cf8 <MX_TIM1_Init+0x138>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c1e:	4b36      	ldr	r3, [pc, #216]	; (8000cf8 <MX_TIM1_Init+0x138>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c24:	4b34      	ldr	r3, [pc, #208]	; (8000cf8 <MX_TIM1_Init+0x138>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c2a:	4833      	ldr	r0, [pc, #204]	; (8000cf8 <MX_TIM1_Init+0x138>)
 8000c2c:	f002 fee6 	bl	80039fc <HAL_TIM_Base_Init>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000c36:	f000 fb65 	bl	8001304 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c3e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c40:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000c44:	4619      	mov	r1, r3
 8000c46:	482c      	ldr	r0, [pc, #176]	; (8000cf8 <MX_TIM1_Init+0x138>)
 8000c48:	f003 f8e0 	bl	8003e0c <HAL_TIM_ConfigClockSource>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000c52:	f000 fb57 	bl	8001304 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c56:	4828      	ldr	r0, [pc, #160]	; (8000cf8 <MX_TIM1_Init+0x138>)
 8000c58:	f002 ff1f 	bl	8003a9a <HAL_TIM_PWM_Init>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000c62:	f000 fb4f 	bl	8001304 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c66:	2300      	movs	r3, #0
 8000c68:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c6e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c72:	4619      	mov	r1, r3
 8000c74:	4820      	ldr	r0, [pc, #128]	; (8000cf8 <MX_TIM1_Init+0x138>)
 8000c76:	f003 fc31 	bl	80044dc <HAL_TIMEx_MasterConfigSynchronization>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000c80:	f000 fb40 	bl	8001304 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c84:	2360      	movs	r3, #96	; 0x60
 8000c86:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c90:	2300      	movs	r3, #0
 8000c92:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c94:	2300      	movs	r3, #0
 8000c96:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ca0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4813      	ldr	r0, [pc, #76]	; (8000cf8 <MX_TIM1_Init+0x138>)
 8000caa:	f002 fff1 	bl	8003c90 <HAL_TIM_PWM_ConfigChannel>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000cb4:	f000 fb26 	bl	8001304 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ccc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cd0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000cd6:	1d3b      	adds	r3, r7, #4
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4807      	ldr	r0, [pc, #28]	; (8000cf8 <MX_TIM1_Init+0x138>)
 8000cdc:	f003 fc5c 	bl	8004598 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000ce6:	f000 fb0d 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000cea:	4803      	ldr	r0, [pc, #12]	; (8000cf8 <MX_TIM1_Init+0x138>)
 8000cec:	f000 fc98 	bl	8001620 <HAL_TIM_MspPostInit>

}
 8000cf0:	bf00      	nop
 8000cf2:	3758      	adds	r7, #88	; 0x58
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	20000154 	.word	0x20000154
 8000cfc:	40012c00 	.word	0x40012c00

08000d00 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08e      	sub	sp, #56	; 0x38
 8000d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]
 8000d10:	609a      	str	r2, [r3, #8]
 8000d12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d14:	f107 0320 	add.w	r3, r7, #32
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d1e:	1d3b      	adds	r3, r7, #4
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]
 8000d2a:	611a      	str	r2, [r3, #16]
 8000d2c:	615a      	str	r2, [r3, #20]
 8000d2e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d30:	4b2d      	ldr	r3, [pc, #180]	; (8000de8 <MX_TIM2_Init+0xe8>)
 8000d32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d36:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000d38:	4b2b      	ldr	r3, [pc, #172]	; (8000de8 <MX_TIM2_Init+0xe8>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d3e:	4b2a      	ldr	r3, [pc, #168]	; (8000de8 <MX_TIM2_Init+0xe8>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000d44:	4b28      	ldr	r3, [pc, #160]	; (8000de8 <MX_TIM2_Init+0xe8>)
 8000d46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d4a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d4c:	4b26      	ldr	r3, [pc, #152]	; (8000de8 <MX_TIM2_Init+0xe8>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d52:	4b25      	ldr	r3, [pc, #148]	; (8000de8 <MX_TIM2_Init+0xe8>)
 8000d54:	2280      	movs	r2, #128	; 0x80
 8000d56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d58:	4823      	ldr	r0, [pc, #140]	; (8000de8 <MX_TIM2_Init+0xe8>)
 8000d5a:	f002 fe4f 	bl	80039fc <HAL_TIM_Base_Init>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000d64:	f000 face 	bl	8001304 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d6c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d72:	4619      	mov	r1, r3
 8000d74:	481c      	ldr	r0, [pc, #112]	; (8000de8 <MX_TIM2_Init+0xe8>)
 8000d76:	f003 f849 	bl	8003e0c <HAL_TIM_ConfigClockSource>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000d80:	f000 fac0 	bl	8001304 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d84:	4818      	ldr	r0, [pc, #96]	; (8000de8 <MX_TIM2_Init+0xe8>)
 8000d86:	f002 fe88 	bl	8003a9a <HAL_TIM_PWM_Init>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000d90:	f000 fab8 	bl	8001304 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d94:	2300      	movs	r3, #0
 8000d96:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d9c:	f107 0320 	add.w	r3, r7, #32
 8000da0:	4619      	mov	r1, r3
 8000da2:	4811      	ldr	r0, [pc, #68]	; (8000de8 <MX_TIM2_Init+0xe8>)
 8000da4:	f003 fb9a 	bl	80044dc <HAL_TIMEx_MasterConfigSynchronization>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000dae:	f000 faa9 	bl	8001304 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000db2:	2360      	movs	r3, #96	; 0x60
 8000db4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000db6:	2300      	movs	r3, #0
 8000db8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dc2:	1d3b      	adds	r3, r7, #4
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4807      	ldr	r0, [pc, #28]	; (8000de8 <MX_TIM2_Init+0xe8>)
 8000dca:	f002 ff61 	bl	8003c90 <HAL_TIM_PWM_ConfigChannel>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000dd4:	f000 fa96 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000dd8:	4803      	ldr	r0, [pc, #12]	; (8000de8 <MX_TIM2_Init+0xe8>)
 8000dda:	f000 fc21 	bl	8001620 <HAL_TIM_MspPostInit>

}
 8000dde:	bf00      	nop
 8000de0:	3738      	adds	r7, #56	; 0x38
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	2000019c 	.word	0x2000019c

08000dec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b08e      	sub	sp, #56	; 0x38
 8000df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000df2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000df6:	2200      	movs	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]
 8000dfa:	605a      	str	r2, [r3, #4]
 8000dfc:	609a      	str	r2, [r3, #8]
 8000dfe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e00:	f107 0320 	add.w	r3, r7, #32
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e0a:	1d3b      	adds	r3, r7, #4
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
 8000e16:	611a      	str	r2, [r3, #16]
 8000e18:	615a      	str	r2, [r3, #20]
 8000e1a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e1c:	4b2c      	ldr	r3, [pc, #176]	; (8000ed0 <MX_TIM3_Init+0xe4>)
 8000e1e:	4a2d      	ldr	r2, [pc, #180]	; (8000ed4 <MX_TIM3_Init+0xe8>)
 8000e20:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000e22:	4b2b      	ldr	r3, [pc, #172]	; (8000ed0 <MX_TIM3_Init+0xe4>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e28:	4b29      	ldr	r3, [pc, #164]	; (8000ed0 <MX_TIM3_Init+0xe4>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000e2e:	4b28      	ldr	r3, [pc, #160]	; (8000ed0 <MX_TIM3_Init+0xe4>)
 8000e30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e34:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e36:	4b26      	ldr	r3, [pc, #152]	; (8000ed0 <MX_TIM3_Init+0xe4>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e3c:	4b24      	ldr	r3, [pc, #144]	; (8000ed0 <MX_TIM3_Init+0xe4>)
 8000e3e:	2280      	movs	r2, #128	; 0x80
 8000e40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e42:	4823      	ldr	r0, [pc, #140]	; (8000ed0 <MX_TIM3_Init+0xe4>)
 8000e44:	f002 fdda 	bl	80039fc <HAL_TIM_Base_Init>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000e4e:	f000 fa59 	bl	8001304 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e56:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e58:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	481c      	ldr	r0, [pc, #112]	; (8000ed0 <MX_TIM3_Init+0xe4>)
 8000e60:	f002 ffd4 	bl	8003e0c <HAL_TIM_ConfigClockSource>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000e6a:	f000 fa4b 	bl	8001304 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e6e:	4818      	ldr	r0, [pc, #96]	; (8000ed0 <MX_TIM3_Init+0xe4>)
 8000e70:	f002 fe13 	bl	8003a9a <HAL_TIM_PWM_Init>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000e7a:	f000 fa43 	bl	8001304 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e82:	2300      	movs	r3, #0
 8000e84:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e86:	f107 0320 	add.w	r3, r7, #32
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4810      	ldr	r0, [pc, #64]	; (8000ed0 <MX_TIM3_Init+0xe4>)
 8000e8e:	f003 fb25 	bl	80044dc <HAL_TIMEx_MasterConfigSynchronization>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000e98:	f000 fa34 	bl	8001304 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e9c:	2360      	movs	r3, #96	; 0x60
 8000e9e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000eac:	1d3b      	adds	r3, r7, #4
 8000eae:	220c      	movs	r2, #12
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4807      	ldr	r0, [pc, #28]	; (8000ed0 <MX_TIM3_Init+0xe4>)
 8000eb4:	f002 feec 	bl	8003c90 <HAL_TIM_PWM_ConfigChannel>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000ebe:	f000 fa21 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ec2:	4803      	ldr	r0, [pc, #12]	; (8000ed0 <MX_TIM3_Init+0xe4>)
 8000ec4:	f000 fbac 	bl	8001620 <HAL_TIM_MspPostInit>

}
 8000ec8:	bf00      	nop
 8000eca:	3738      	adds	r7, #56	; 0x38
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	200001e4 	.word	0x200001e4
 8000ed4:	40000400 	.word	0x40000400

08000ed8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ede:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <MX_DMA_Init+0x38>)
 8000ee0:	695b      	ldr	r3, [r3, #20]
 8000ee2:	4a0b      	ldr	r2, [pc, #44]	; (8000f10 <MX_DMA_Init+0x38>)
 8000ee4:	f043 0301 	orr.w	r3, r3, #1
 8000ee8:	6153      	str	r3, [r2, #20]
 8000eea:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <MX_DMA_Init+0x38>)
 8000eec:	695b      	ldr	r3, [r3, #20]
 8000eee:	f003 0301 	and.w	r3, r3, #1
 8000ef2:	607b      	str	r3, [r7, #4]
 8000ef4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2100      	movs	r1, #0
 8000efa:	200b      	movs	r0, #11
 8000efc:	f001 fd07 	bl	800290e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000f00:	200b      	movs	r0, #11
 8000f02:	f001 fd20 	bl	8002946 <HAL_NVIC_EnableIRQ>

}
 8000f06:	bf00      	nop
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40021000 	.word	0x40021000

08000f14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b088      	sub	sp, #32
 8000f18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1a:	f107 0310 	add.w	r3, r7, #16
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	605a      	str	r2, [r3, #4]
 8000f24:	609a      	str	r2, [r3, #8]
 8000f26:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f28:	4b45      	ldr	r3, [pc, #276]	; (8001040 <MX_GPIO_Init+0x12c>)
 8000f2a:	699b      	ldr	r3, [r3, #24]
 8000f2c:	4a44      	ldr	r2, [pc, #272]	; (8001040 <MX_GPIO_Init+0x12c>)
 8000f2e:	f043 0310 	orr.w	r3, r3, #16
 8000f32:	6193      	str	r3, [r2, #24]
 8000f34:	4b42      	ldr	r3, [pc, #264]	; (8001040 <MX_GPIO_Init+0x12c>)
 8000f36:	699b      	ldr	r3, [r3, #24]
 8000f38:	f003 0310 	and.w	r3, r3, #16
 8000f3c:	60fb      	str	r3, [r7, #12]
 8000f3e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f40:	4b3f      	ldr	r3, [pc, #252]	; (8001040 <MX_GPIO_Init+0x12c>)
 8000f42:	699b      	ldr	r3, [r3, #24]
 8000f44:	4a3e      	ldr	r2, [pc, #248]	; (8001040 <MX_GPIO_Init+0x12c>)
 8000f46:	f043 0320 	orr.w	r3, r3, #32
 8000f4a:	6193      	str	r3, [r2, #24]
 8000f4c:	4b3c      	ldr	r3, [pc, #240]	; (8001040 <MX_GPIO_Init+0x12c>)
 8000f4e:	699b      	ldr	r3, [r3, #24]
 8000f50:	f003 0320 	and.w	r3, r3, #32
 8000f54:	60bb      	str	r3, [r7, #8]
 8000f56:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f58:	4b39      	ldr	r3, [pc, #228]	; (8001040 <MX_GPIO_Init+0x12c>)
 8000f5a:	699b      	ldr	r3, [r3, #24]
 8000f5c:	4a38      	ldr	r2, [pc, #224]	; (8001040 <MX_GPIO_Init+0x12c>)
 8000f5e:	f043 0304 	orr.w	r3, r3, #4
 8000f62:	6193      	str	r3, [r2, #24]
 8000f64:	4b36      	ldr	r3, [pc, #216]	; (8001040 <MX_GPIO_Init+0x12c>)
 8000f66:	699b      	ldr	r3, [r3, #24]
 8000f68:	f003 0304 	and.w	r3, r3, #4
 8000f6c:	607b      	str	r3, [r7, #4]
 8000f6e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f70:	4b33      	ldr	r3, [pc, #204]	; (8001040 <MX_GPIO_Init+0x12c>)
 8000f72:	699b      	ldr	r3, [r3, #24]
 8000f74:	4a32      	ldr	r2, [pc, #200]	; (8001040 <MX_GPIO_Init+0x12c>)
 8000f76:	f043 0308 	orr.w	r3, r3, #8
 8000f7a:	6193      	str	r3, [r2, #24]
 8000f7c:	4b30      	ldr	r3, [pc, #192]	; (8001040 <MX_GPIO_Init+0x12c>)
 8000f7e:	699b      	ldr	r3, [r3, #24]
 8000f80:	f003 0308 	and.w	r3, r3, #8
 8000f84:	603b      	str	r3, [r7, #0]
 8000f86:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f8e:	482d      	ldr	r0, [pc, #180]	; (8001044 <MX_GPIO_Init+0x130>)
 8000f90:	f002 f87d 	bl	800308e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN1_Pin|INB1_Pin|INA2_Pin, GPIO_PIN_RESET);
 8000f94:	2200      	movs	r2, #0
 8000f96:	21e0      	movs	r1, #224	; 0xe0
 8000f98:	482b      	ldr	r0, [pc, #172]	; (8001048 <MX_GPIO_Init+0x134>)
 8000f9a:	f002 f878 	bl	800308e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN2_Pin|INB2_Pin|INA1_Pin|L4_Pin
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	f640 71c1 	movw	r1, #4033	; 0xfc1
 8000fa4:	4829      	ldr	r0, [pc, #164]	; (800104c <MX_GPIO_Init+0x138>)
 8000fa6:	f002 f872 	bl	800308e <HAL_GPIO_WritePin>
                          |L3_Pin|L2_Pin|L1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000faa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fbc:	f107 0310 	add.w	r3, r7, #16
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4820      	ldr	r0, [pc, #128]	; (8001044 <MX_GPIO_Init+0x130>)
 8000fc4:	f001 fec8 	bl	8002d58 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN1_Pin INB1_Pin INA2_Pin */
  GPIO_InitStruct.Pin = EN1_Pin|INB1_Pin|INA2_Pin;
 8000fc8:	23e0      	movs	r3, #224	; 0xe0
 8000fca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd8:	f107 0310 	add.w	r3, r7, #16
 8000fdc:	4619      	mov	r1, r3
 8000fde:	481a      	ldr	r0, [pc, #104]	; (8001048 <MX_GPIO_Init+0x134>)
 8000fe0:	f001 feba 	bl	8002d58 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN2_Pin INB2_Pin INA1_Pin L4_Pin
                           L3_Pin L2_Pin L1_Pin */
  GPIO_InitStruct.Pin = EN2_Pin|INB2_Pin|INA1_Pin|L4_Pin
 8000fe4:	f640 73c1 	movw	r3, #4033	; 0xfc1
 8000fe8:	613b      	str	r3, [r7, #16]
                          |L3_Pin|L2_Pin|L1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fea:	2301      	movs	r3, #1
 8000fec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff6:	f107 0310 	add.w	r3, r7, #16
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4813      	ldr	r0, [pc, #76]	; (800104c <MX_GPIO_Init+0x138>)
 8000ffe:	f001 feab 	bl	8002d58 <HAL_GPIO_Init>

  /*Configure GPIO pins : S4_Pin S3_Pin S2_Pin S1_Pin
                           B3_Pin B2_Pin B1_Pin */
  GPIO_InitStruct.Pin = S4_Pin|S3_Pin|S2_Pin|S1_Pin
 8001002:	f24f 0338 	movw	r3, #61496	; 0xf038
 8001006:	613b      	str	r3, [r7, #16]
                          |B3_Pin|B2_Pin|B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	2300      	movs	r3, #0
 800100e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001010:	f107 0310 	add.w	r3, r7, #16
 8001014:	4619      	mov	r1, r3
 8001016:	480d      	ldr	r0, [pc, #52]	; (800104c <MX_GPIO_Init+0x138>)
 8001018:	f001 fe9e 	bl	8002d58 <HAL_GPIO_Init>

  /*Configure GPIO pins : S5_Pin S6_Pin S7_Pin S8_Pin
                           B4_Pin */
  GPIO_InitStruct.Pin = S5_Pin|S6_Pin|S7_Pin|S8_Pin
 800101c:	f44f 431e 	mov.w	r3, #40448	; 0x9e00
 8001020:	613b      	str	r3, [r7, #16]
                          |B4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102a:	f107 0310 	add.w	r3, r7, #16
 800102e:	4619      	mov	r1, r3
 8001030:	4805      	ldr	r0, [pc, #20]	; (8001048 <MX_GPIO_Init+0x134>)
 8001032:	f001 fe91 	bl	8002d58 <HAL_GPIO_Init>

}
 8001036:	bf00      	nop
 8001038:	3720      	adds	r7, #32
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40021000 	.word	0x40021000
 8001044:	40011000 	.word	0x40011000
 8001048:	40010800 	.word	0x40010800
 800104c:	40010c00 	.word	0x40010c00

08001050 <mainMachine>:

/* USER CODE BEGIN 4 */
void mainMachine() {
 8001050:	b5b0      	push	{r4, r5, r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af04      	add	r7, sp, #16
	switch (mainState) {
 8001056:	4b72      	ldr	r3, [pc, #456]	; (8001220 <mainMachine+0x1d0>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	2b02      	cmp	r3, #2
 800105c:	d044      	beq.n	80010e8 <mainMachine+0x98>
 800105e:	2b02      	cmp	r3, #2
 8001060:	f300 80da 	bgt.w	8001218 <mainMachine+0x1c8>
 8001064:	2b00      	cmp	r3, #0
 8001066:	d003      	beq.n	8001070 <mainMachine+0x20>
 8001068:	2b01      	cmp	r3, #1
 800106a:	f000 8097 	beq.w	800119c <mainMachine+0x14c>
			runMotor(ATRAS, Motors[DERECHA]);
			runMotor(ATRAS, Motors[IZQUIERDA]);
		}
		break;
	}
}
 800106e:	e0d3      	b.n	8001218 <mainMachine+0x1c8>
		if (btns[1].flag == 1) {
 8001070:	4b6c      	ldr	r3, [pc, #432]	; (8001224 <mainMachine+0x1d4>)
 8001072:	69db      	ldr	r3, [r3, #28]
 8001074:	2b01      	cmp	r3, #1
 8001076:	d104      	bne.n	8001082 <mainMachine+0x32>
			count--;
 8001078:	4b6b      	ldr	r3, [pc, #428]	; (8001228 <mainMachine+0x1d8>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	3b01      	subs	r3, #1
 800107e:	4a6a      	ldr	r2, [pc, #424]	; (8001228 <mainMachine+0x1d8>)
 8001080:	6013      	str	r3, [r2, #0]
		if (btns[2].flag == 1) {
 8001082:	4b68      	ldr	r3, [pc, #416]	; (8001224 <mainMachine+0x1d4>)
 8001084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001086:	2b01      	cmp	r3, #1
 8001088:	d104      	bne.n	8001094 <mainMachine+0x44>
			count++;
 800108a:	4b67      	ldr	r3, [pc, #412]	; (8001228 <mainMachine+0x1d8>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	3301      	adds	r3, #1
 8001090:	4a65      	ldr	r2, [pc, #404]	; (8001228 <mainMachine+0x1d8>)
 8001092:	6013      	str	r3, [r2, #0]
		if (btns[3].flag == 1) {
 8001094:	4b63      	ldr	r3, [pc, #396]	; (8001224 <mainMachine+0x1d4>)
 8001096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001098:	2b01      	cmp	r3, #1
 800109a:	d102      	bne.n	80010a2 <mainMachine+0x52>
			count = 0;
 800109c:	4b62      	ldr	r3, [pc, #392]	; (8001228 <mainMachine+0x1d8>)
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
		if (count >= 16 || count <= 0) {
 80010a2:	4b61      	ldr	r3, [pc, #388]	; (8001228 <mainMachine+0x1d8>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	2b0f      	cmp	r3, #15
 80010a8:	dc03      	bgt.n	80010b2 <mainMachine+0x62>
 80010aa:	4b5f      	ldr	r3, [pc, #380]	; (8001228 <mainMachine+0x1d8>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	dc02      	bgt.n	80010b8 <mainMachine+0x68>
			count = 0;
 80010b2:	4b5d      	ldr	r3, [pc, #372]	; (8001228 <mainMachine+0x1d8>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
		showModeNumber(count);
 80010b8:	4b5b      	ldr	r3, [pc, #364]	; (8001228 <mainMachine+0x1d8>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff fb3f 	bl	8000740 <showModeNumber>
		if (btns[0].flag == 1) {
 80010c2:	4b58      	ldr	r3, [pc, #352]	; (8001224 <mainMachine+0x1d4>)
 80010c4:	68db      	ldr	r3, [r3, #12]
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	f040 80a5 	bne.w	8001216 <mainMachine+0x1c6>
			mainState = SECUENCIA_INICIO;
 80010cc:	4b54      	ldr	r3, [pc, #336]	; (8001220 <mainMachine+0x1d0>)
 80010ce:	2202      	movs	r2, #2
 80010d0:	601a      	str	r2, [r3, #0]
			showModeNumber(0);
 80010d2:	2000      	movs	r0, #0
 80010d4:	f7ff fb34 	bl	8000740 <showModeNumber>
			HAL_Delay(5000);
 80010d8:	f241 3088 	movw	r0, #5000	; 0x1388
 80010dc:	f000 ff5a 	bl	8001f94 <HAL_Delay>
			showModeNumber(15);
 80010e0:	200f      	movs	r0, #15
 80010e2:	f7ff fb2d 	bl	8000740 <showModeNumber>
		break;
 80010e6:	e096      	b.n	8001216 <mainMachine+0x1c6>
		angulo = (360 / 16) * count;
 80010e8:	4b4f      	ldr	r3, [pc, #316]	; (8001228 <mainMachine+0x1d8>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2216      	movs	r2, #22
 80010ee:	fb02 f303 	mul.w	r3, r2, r3
 80010f2:	4a4e      	ldr	r2, [pc, #312]	; (800122c <mainMachine+0x1dc>)
 80010f4:	6013      	str	r3, [r2, #0]
		if (angulo <= 180 && angulo > 0) {
 80010f6:	4b4d      	ldr	r3, [pc, #308]	; (800122c <mainMachine+0x1dc>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	2bb4      	cmp	r3, #180	; 0xb4
 80010fc:	dc26      	bgt.n	800114c <mainMachine+0xfc>
 80010fe:	4b4b      	ldr	r3, [pc, #300]	; (800122c <mainMachine+0x1dc>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2b00      	cmp	r3, #0
 8001104:	dd22      	ble.n	800114c <mainMachine+0xfc>
			runMotor(ATRAS, Motors[DERECHA]);
 8001106:	4b4a      	ldr	r3, [pc, #296]	; (8001230 <mainMachine+0x1e0>)
 8001108:	466c      	mov	r4, sp
 800110a:	f103 020c 	add.w	r2, r3, #12
 800110e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001110:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001114:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001116:	2001      	movs	r0, #1
 8001118:	f000 f8f9 	bl	800130e <runMotor>
			runMotor(ADELANTE, Motors[IZQUIERDA]);
 800111c:	4d44      	ldr	r5, [pc, #272]	; (8001230 <mainMachine+0x1e0>)
 800111e:	466c      	mov	r4, sp
 8001120:	f105 0324 	add.w	r3, r5, #36	; 0x24
 8001124:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001128:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800112c:	f105 0318 	add.w	r3, r5, #24
 8001130:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001132:	2000      	movs	r0, #0
 8001134:	f000 f8eb 	bl	800130e <runMotor>
			HAL_Delay(count * TIEMPO_VUELTA);
 8001138:	4b3b      	ldr	r3, [pc, #236]	; (8001228 <mainMachine+0x1d8>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001140:	fb02 f303 	mul.w	r3, r2, r3
 8001144:	4618      	mov	r0, r3
 8001146:	f000 ff25 	bl	8001f94 <HAL_Delay>
 800114a:	e023      	b.n	8001194 <mainMachine+0x144>
			runMotor(ADELANTE, Motors[DERECHA]);
 800114c:	4b38      	ldr	r3, [pc, #224]	; (8001230 <mainMachine+0x1e0>)
 800114e:	466c      	mov	r4, sp
 8001150:	f103 020c 	add.w	r2, r3, #12
 8001154:	ca07      	ldmia	r2, {r0, r1, r2}
 8001156:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800115a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800115c:	2000      	movs	r0, #0
 800115e:	f000 f8d6 	bl	800130e <runMotor>
			runMotor(ATRAS, Motors[IZQUIERDA]);
 8001162:	4d33      	ldr	r5, [pc, #204]	; (8001230 <mainMachine+0x1e0>)
 8001164:	466c      	mov	r4, sp
 8001166:	f105 0324 	add.w	r3, r5, #36	; 0x24
 800116a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800116e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001172:	f105 0318 	add.w	r3, r5, #24
 8001176:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001178:	2001      	movs	r0, #1
 800117a:	f000 f8c8 	bl	800130e <runMotor>
			HAL_Delay((-count + 17) * TIEMPO_VUELTA);
 800117e:	4b2a      	ldr	r3, [pc, #168]	; (8001228 <mainMachine+0x1d8>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f1c3 0311 	rsb	r3, r3, #17
 8001186:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800118a:	fb02 f303 	mul.w	r3, r2, r3
 800118e:	4618      	mov	r0, r3
 8001190:	f000 ff00 	bl	8001f94 <HAL_Delay>
		mainState = MAIN;
 8001194:	4b22      	ldr	r3, [pc, #136]	; (8001220 <mainMachine+0x1d0>)
 8001196:	2201      	movs	r2, #1
 8001198:	601a      	str	r2, [r3, #0]
		break;
 800119a:	e03d      	b.n	8001218 <mainMachine+0x1c8>
		inicio = 1;
 800119c:	4b25      	ldr	r3, [pc, #148]	; (8001234 <mainMachine+0x1e4>)
 800119e:	2201      	movs	r2, #1
 80011a0:	601a      	str	r2, [r3, #0]
		if (linePosition(Sensors) != 0) {
 80011a2:	4825      	ldr	r0, [pc, #148]	; (8001238 <mainMachine+0x1e8>)
 80011a4:	f000 fb96 	bl	80018d4 <linePosition>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d019      	beq.n	80011e2 <mainMachine+0x192>
			runMotor(ADELANTE, Motors[DERECHA]);
 80011ae:	4b20      	ldr	r3, [pc, #128]	; (8001230 <mainMachine+0x1e0>)
 80011b0:	466c      	mov	r4, sp
 80011b2:	f103 020c 	add.w	r2, r3, #12
 80011b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80011b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80011bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011be:	2000      	movs	r0, #0
 80011c0:	f000 f8a5 	bl	800130e <runMotor>
			runMotor(ADELANTE, Motors[IZQUIERDA]);
 80011c4:	4d1a      	ldr	r5, [pc, #104]	; (8001230 <mainMachine+0x1e0>)
 80011c6:	466c      	mov	r4, sp
 80011c8:	f105 0324 	add.w	r3, r5, #36	; 0x24
 80011cc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80011d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80011d4:	f105 0318 	add.w	r3, r5, #24
 80011d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011da:	2000      	movs	r0, #0
 80011dc:	f000 f897 	bl	800130e <runMotor>
		break;
 80011e0:	e01a      	b.n	8001218 <mainMachine+0x1c8>
			runMotor(ATRAS, Motors[DERECHA]);
 80011e2:	4b13      	ldr	r3, [pc, #76]	; (8001230 <mainMachine+0x1e0>)
 80011e4:	466c      	mov	r4, sp
 80011e6:	f103 020c 	add.w	r2, r3, #12
 80011ea:	ca07      	ldmia	r2, {r0, r1, r2}
 80011ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80011f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011f2:	2001      	movs	r0, #1
 80011f4:	f000 f88b 	bl	800130e <runMotor>
			runMotor(ATRAS, Motors[IZQUIERDA]);
 80011f8:	4d0d      	ldr	r5, [pc, #52]	; (8001230 <mainMachine+0x1e0>)
 80011fa:	466c      	mov	r4, sp
 80011fc:	f105 0324 	add.w	r3, r5, #36	; 0x24
 8001200:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001204:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001208:	f105 0318 	add.w	r3, r5, #24
 800120c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800120e:	2001      	movs	r0, #1
 8001210:	f000 f87d 	bl	800130e <runMotor>
		break;
 8001214:	e000      	b.n	8001218 <mainMachine+0x1c8>
		break;
 8001216:	bf00      	nop
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	bdb0      	pop	{r4, r5, r7, pc}
 800121e:	bf00      	nop
 8001220:	200003f8 	.word	0x200003f8
 8001224:	20000384 	.word	0x20000384
 8001228:	200003f4 	.word	0x200003f4
 800122c:	20000380 	.word	0x20000380
 8001230:	200003c4 	.word	0x200003c4
 8001234:	2000023c 	.word	0x2000023c
 8001238:	2000022c 	.word	0x2000022c

0800123c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 10; i++) {
 8001244:	2300      	movs	r3, #0
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	e029      	b.n	800129e <HAL_ADC_ConvCpltCallback+0x62>
		CNY70_1[i] = adc_buf[i * 4];
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	4a27      	ldr	r2, [pc, #156]	; (80012ec <HAL_ADC_ConvCpltCallback+0xb0>)
 8001250:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001254:	4926      	ldr	r1, [pc, #152]	; (80012f0 <HAL_ADC_ConvCpltCallback+0xb4>)
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		CNY70_2[i] = adc_buf[i * 4 + 1];
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	3301      	adds	r3, #1
 8001262:	4a22      	ldr	r2, [pc, #136]	; (80012ec <HAL_ADC_ConvCpltCallback+0xb0>)
 8001264:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001268:	4922      	ldr	r1, [pc, #136]	; (80012f4 <HAL_ADC_ConvCpltCallback+0xb8>)
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		CNY70_3[i] = adc_buf[i * 4 + 2];
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	3302      	adds	r3, #2
 8001276:	4a1d      	ldr	r2, [pc, #116]	; (80012ec <HAL_ADC_ConvCpltCallback+0xb0>)
 8001278:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800127c:	491e      	ldr	r1, [pc, #120]	; (80012f8 <HAL_ADC_ConvCpltCallback+0xbc>)
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		CNY70_4[i] = adc_buf[i * 4 + 3];
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	3303      	adds	r3, #3
 800128a:	4a18      	ldr	r2, [pc, #96]	; (80012ec <HAL_ADC_ConvCpltCallback+0xb0>)
 800128c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001290:	491a      	ldr	r1, [pc, #104]	; (80012fc <HAL_ADC_ConvCpltCallback+0xc0>)
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < 10; i++) {
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	3301      	adds	r3, #1
 800129c:	60fb      	str	r3, [r7, #12]
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	2b09      	cmp	r3, #9
 80012a2:	ddd2      	ble.n	800124a <HAL_ADC_ConvCpltCallback+0xe>
	}
	Sensors[0] = lecturaCNY70(10, CNY70_1);
 80012a4:	4912      	ldr	r1, [pc, #72]	; (80012f0 <HAL_ADC_ConvCpltCallback+0xb4>)
 80012a6:	200a      	movs	r0, #10
 80012a8:	f000 f8af 	bl	800140a <lecturaCNY70>
 80012ac:	4603      	mov	r3, r0
 80012ae:	4a14      	ldr	r2, [pc, #80]	; (8001300 <HAL_ADC_ConvCpltCallback+0xc4>)
 80012b0:	6013      	str	r3, [r2, #0]
	Sensors[1] = lecturaCNY70(10, CNY70_2);
 80012b2:	4910      	ldr	r1, [pc, #64]	; (80012f4 <HAL_ADC_ConvCpltCallback+0xb8>)
 80012b4:	200a      	movs	r0, #10
 80012b6:	f000 f8a8 	bl	800140a <lecturaCNY70>
 80012ba:	4603      	mov	r3, r0
 80012bc:	4a10      	ldr	r2, [pc, #64]	; (8001300 <HAL_ADC_ConvCpltCallback+0xc4>)
 80012be:	6053      	str	r3, [r2, #4]
	Sensors[2] = lecturaCNY70(10, CNY70_3);
 80012c0:	490d      	ldr	r1, [pc, #52]	; (80012f8 <HAL_ADC_ConvCpltCallback+0xbc>)
 80012c2:	200a      	movs	r0, #10
 80012c4:	f000 f8a1 	bl	800140a <lecturaCNY70>
 80012c8:	4603      	mov	r3, r0
 80012ca:	4a0d      	ldr	r2, [pc, #52]	; (8001300 <HAL_ADC_ConvCpltCallback+0xc4>)
 80012cc:	6093      	str	r3, [r2, #8]
	Sensors[3] = lecturaCNY70(10, CNY70_4);
 80012ce:	490b      	ldr	r1, [pc, #44]	; (80012fc <HAL_ADC_ConvCpltCallback+0xc0>)
 80012d0:	200a      	movs	r0, #10
 80012d2:	f000 f89a 	bl	800140a <lecturaCNY70>
 80012d6:	4603      	mov	r3, r0
 80012d8:	4a09      	ldr	r2, [pc, #36]	; (8001300 <HAL_ADC_ConvCpltCallback+0xc4>)
 80012da:	60d3      	str	r3, [r2, #12]
	showModeNumber(8);
 80012dc:	2008      	movs	r0, #8
 80012de:	f7ff fa2f 	bl	8000740 <showModeNumber>

}
 80012e2:	bf00      	nop
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000240 	.word	0x20000240
 80012f0:	200002e0 	.word	0x200002e0
 80012f4:	20000308 	.word	0x20000308
 80012f8:	20000330 	.word	0x20000330
 80012fc:	20000358 	.word	0x20000358
 8001300:	2000022c 	.word	0x2000022c

08001304 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001308:	b672      	cpsid	i
}
 800130a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800130c:	e7fe      	b.n	800130c <Error_Handler+0x8>

0800130e <runMotor>:
 *  Created on: Jul 24, 2023
 *      Author: jore
 */

#include "motors.h"
void runMotor(int dir, motor motor) {
 800130e:	b084      	sub	sp, #16
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	f107 0014 	add.w	r0, r7, #20
 800131c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	switch (dir) {
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2b02      	cmp	r3, #2
 8001324:	d023      	beq.n	800136e <runMotor+0x60>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2b02      	cmp	r3, #2
 800132a:	dc2d      	bgt.n	8001388 <runMotor+0x7a>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d003      	beq.n	800133a <runMotor+0x2c>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2b01      	cmp	r3, #1
 8001336:	d00d      	beq.n	8001354 <runMotor+0x46>
	case OFF:
		HAL_GPIO_WritePin(motor.IN1.Port,motor.IN1.pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(motor.IN2.Port,motor.IN2.pin, GPIO_PIN_RESET);
		break;
	}
}
 8001338:	e026      	b.n	8001388 <runMotor+0x7a>
		HAL_GPIO_WritePin(motor.IN1.Port,motor.IN1.pin, GPIO_PIN_SET);
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	8c39      	ldrh	r1, [r7, #32]
 800133e:	2201      	movs	r2, #1
 8001340:	4618      	mov	r0, r3
 8001342:	f001 fea4 	bl	800308e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor.IN2.Port,motor.IN2.pin, GPIO_PIN_RESET);
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	8b39      	ldrh	r1, [r7, #24]
 800134a:	2200      	movs	r2, #0
 800134c:	4618      	mov	r0, r3
 800134e:	f001 fe9e 	bl	800308e <HAL_GPIO_WritePin>
		break;
 8001352:	e019      	b.n	8001388 <runMotor+0x7a>
		HAL_GPIO_WritePin(motor.IN1.Port,motor.IN1.pin, GPIO_PIN_RESET);
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	8c39      	ldrh	r1, [r7, #32]
 8001358:	2200      	movs	r2, #0
 800135a:	4618      	mov	r0, r3
 800135c:	f001 fe97 	bl	800308e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor.IN2.Port,motor.IN2.pin, GPIO_PIN_SET);
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	8b39      	ldrh	r1, [r7, #24]
 8001364:	2201      	movs	r2, #1
 8001366:	4618      	mov	r0, r3
 8001368:	f001 fe91 	bl	800308e <HAL_GPIO_WritePin>
		break;
 800136c:	e00c      	b.n	8001388 <runMotor+0x7a>
		HAL_GPIO_WritePin(motor.IN1.Port,motor.IN1.pin, GPIO_PIN_RESET);
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	8c39      	ldrh	r1, [r7, #32]
 8001372:	2200      	movs	r2, #0
 8001374:	4618      	mov	r0, r3
 8001376:	f001 fe8a 	bl	800308e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor.IN2.Port,motor.IN2.pin, GPIO_PIN_RESET);
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	8b39      	ldrh	r1, [r7, #24]
 800137e:	2200      	movs	r2, #0
 8001380:	4618      	mov	r0, r3
 8001382:	f001 fe84 	bl	800308e <HAL_GPIO_WritePin>
		break;
 8001386:	bf00      	nop
}
 8001388:	bf00      	nop
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001392:	b004      	add	sp, #16
 8001394:	4770      	bx	lr

08001396 <readSensor>:
#include "sensor.h"
#include "stdlib.h"
#include "main.h"


int readSensor(pin sensor) {
 8001396:	b580      	push	{r7, lr}
 8001398:	b082      	sub	sp, #8
 800139a:	af00      	add	r7, sp, #0
 800139c:	463b      	mov	r3, r7
 800139e:	e883 0003 	stmia.w	r3, {r0, r1}
	return HAL_GPIO_ReadPin(sensor.Port, sensor.pin);
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	88ba      	ldrh	r2, [r7, #4]
 80013a6:	4611      	mov	r1, r2
 80013a8:	4618      	mov	r0, r3
 80013aa:	f001 fe59 	bl	8003060 <HAL_GPIO_ReadPin>
 80013ae:	4603      	mov	r3, r0
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <readSensorsArray>:

int* readSensorsArray(pin *sensors, int cuantity) {
 80013b8:	b590      	push	{r4, r7, lr}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	6039      	str	r1, [r7, #0]
	int *S = (int*) malloc(sizeof(int) * cuantity);
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	4618      	mov	r0, r3
 80013c8:	f003 f962 	bl	8004690 <malloc>
 80013cc:	4603      	mov	r3, r0
 80013ce:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < cuantity; i++) {
 80013d0:	2300      	movs	r3, #0
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	e010      	b.n	80013f8 <readSensorsArray+0x40>
		S[i] = readSensor(sensors[i]);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	00db      	lsls	r3, r3, #3
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	4413      	add	r3, r2
 80013de:	68fa      	ldr	r2, [r7, #12]
 80013e0:	0092      	lsls	r2, r2, #2
 80013e2:	68b9      	ldr	r1, [r7, #8]
 80013e4:	188c      	adds	r4, r1, r2
 80013e6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80013ea:	f7ff ffd4 	bl	8001396 <readSensor>
 80013ee:	4603      	mov	r3, r0
 80013f0:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < cuantity; i++) {
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	3301      	adds	r3, #1
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	68fa      	ldr	r2, [r7, #12]
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	dbea      	blt.n	80013d6 <readSensorsArray+0x1e>
	}
	return S;
 8001400:	68bb      	ldr	r3, [r7, #8]
}
 8001402:	4618      	mov	r0, r3
 8001404:	3714      	adds	r7, #20
 8001406:	46bd      	mov	sp, r7
 8001408:	bd90      	pop	{r4, r7, pc}

0800140a <lecturaCNY70>:

int lecturaCNY70(int n, uint32_t values[10]) {
 800140a:	b480      	push	{r7}
 800140c:	b087      	sub	sp, #28
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
 8001412:	6039      	str	r1, [r7, #0]
	long suma = 0;
 8001414:	2300      	movs	r3, #0
 8001416:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < n; i++) {
 8001418:	2300      	movs	r3, #0
 800141a:	613b      	str	r3, [r7, #16]
 800141c:	e00a      	b.n	8001434 <lecturaCNY70+0x2a>
		suma = suma + values[i];
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	683a      	ldr	r2, [r7, #0]
 8001424:	4413      	add	r3, r2
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	4413      	add	r3, r2
 800142c:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < n; i++) {
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	3301      	adds	r3, #1
 8001432:	613b      	str	r3, [r7, #16]
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	429a      	cmp	r2, r3
 800143a:	dbf0      	blt.n	800141e <lecturaCNY70+0x14>
	}
	int adc = (suma / n);
 800143c:	697a      	ldr	r2, [r7, #20]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	fb92 f3f3 	sdiv	r3, r2, r3
 8001444:	60fb      	str	r3, [r7, #12]
	if (adc < 400) {
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800144c:	da01      	bge.n	8001452 <lecturaCNY70+0x48>
		return BLANCO;
 800144e:	2300      	movs	r3, #0
 8001450:	e000      	b.n	8001454 <lecturaCNY70+0x4a>
	} else {
		return NEGRO;
 8001452:	2301      	movs	r3, #1
	}
}
 8001454:	4618      	mov	r0, r3
 8001456:	371c      	adds	r7, #28
 8001458:	46bd      	mov	sp, r7
 800145a:	bc80      	pop	{r7}
 800145c:	4770      	bx	lr
	...

08001460 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001466:	4b15      	ldr	r3, [pc, #84]	; (80014bc <HAL_MspInit+0x5c>)
 8001468:	699b      	ldr	r3, [r3, #24]
 800146a:	4a14      	ldr	r2, [pc, #80]	; (80014bc <HAL_MspInit+0x5c>)
 800146c:	f043 0301 	orr.w	r3, r3, #1
 8001470:	6193      	str	r3, [r2, #24]
 8001472:	4b12      	ldr	r3, [pc, #72]	; (80014bc <HAL_MspInit+0x5c>)
 8001474:	699b      	ldr	r3, [r3, #24]
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	60bb      	str	r3, [r7, #8]
 800147c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800147e:	4b0f      	ldr	r3, [pc, #60]	; (80014bc <HAL_MspInit+0x5c>)
 8001480:	69db      	ldr	r3, [r3, #28]
 8001482:	4a0e      	ldr	r2, [pc, #56]	; (80014bc <HAL_MspInit+0x5c>)
 8001484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001488:	61d3      	str	r3, [r2, #28]
 800148a:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <HAL_MspInit+0x5c>)
 800148c:	69db      	ldr	r3, [r3, #28]
 800148e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001492:	607b      	str	r3, [r7, #4]
 8001494:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001496:	4b0a      	ldr	r3, [pc, #40]	; (80014c0 <HAL_MspInit+0x60>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	4a04      	ldr	r2, [pc, #16]	; (80014c0 <HAL_MspInit+0x60>)
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014b2:	bf00      	nop
 80014b4:	3714      	adds	r7, #20
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bc80      	pop	{r7}
 80014ba:	4770      	bx	lr
 80014bc:	40021000 	.word	0x40021000
 80014c0:	40010000 	.word	0x40010000

080014c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b088      	sub	sp, #32
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014cc:	f107 0310 	add.w	r3, r7, #16
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	609a      	str	r2, [r3, #8]
 80014d8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a29      	ldr	r2, [pc, #164]	; (8001584 <HAL_ADC_MspInit+0xc0>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d14a      	bne.n	800157a <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014e4:	4b28      	ldr	r3, [pc, #160]	; (8001588 <HAL_ADC_MspInit+0xc4>)
 80014e6:	699b      	ldr	r3, [r3, #24]
 80014e8:	4a27      	ldr	r2, [pc, #156]	; (8001588 <HAL_ADC_MspInit+0xc4>)
 80014ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014ee:	6193      	str	r3, [r2, #24]
 80014f0:	4b25      	ldr	r3, [pc, #148]	; (8001588 <HAL_ADC_MspInit+0xc4>)
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014f8:	60fb      	str	r3, [r7, #12]
 80014fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fc:	4b22      	ldr	r3, [pc, #136]	; (8001588 <HAL_ADC_MspInit+0xc4>)
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	4a21      	ldr	r2, [pc, #132]	; (8001588 <HAL_ADC_MspInit+0xc4>)
 8001502:	f043 0304 	orr.w	r3, r3, #4
 8001506:	6193      	str	r3, [r2, #24]
 8001508:	4b1f      	ldr	r3, [pc, #124]	; (8001588 <HAL_ADC_MspInit+0xc4>)
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	f003 0304 	and.w	r3, r3, #4
 8001510:	60bb      	str	r3, [r7, #8]
 8001512:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = P1_Pin|P2_Pin|P3_Pin|P4_Pin;
 8001514:	231e      	movs	r3, #30
 8001516:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001518:	2303      	movs	r3, #3
 800151a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151c:	f107 0310 	add.w	r3, r7, #16
 8001520:	4619      	mov	r1, r3
 8001522:	481a      	ldr	r0, [pc, #104]	; (800158c <HAL_ADC_MspInit+0xc8>)
 8001524:	f001 fc18 	bl	8002d58 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001528:	4b19      	ldr	r3, [pc, #100]	; (8001590 <HAL_ADC_MspInit+0xcc>)
 800152a:	4a1a      	ldr	r2, [pc, #104]	; (8001594 <HAL_ADC_MspInit+0xd0>)
 800152c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800152e:	4b18      	ldr	r3, [pc, #96]	; (8001590 <HAL_ADC_MspInit+0xcc>)
 8001530:	2200      	movs	r2, #0
 8001532:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001534:	4b16      	ldr	r3, [pc, #88]	; (8001590 <HAL_ADC_MspInit+0xcc>)
 8001536:	2200      	movs	r2, #0
 8001538:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800153a:	4b15      	ldr	r3, [pc, #84]	; (8001590 <HAL_ADC_MspInit+0xcc>)
 800153c:	2280      	movs	r2, #128	; 0x80
 800153e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001540:	4b13      	ldr	r3, [pc, #76]	; (8001590 <HAL_ADC_MspInit+0xcc>)
 8001542:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001546:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001548:	4b11      	ldr	r3, [pc, #68]	; (8001590 <HAL_ADC_MspInit+0xcc>)
 800154a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800154e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001550:	4b0f      	ldr	r3, [pc, #60]	; (8001590 <HAL_ADC_MspInit+0xcc>)
 8001552:	2220      	movs	r2, #32
 8001554:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001556:	4b0e      	ldr	r3, [pc, #56]	; (8001590 <HAL_ADC_MspInit+0xcc>)
 8001558:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800155c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800155e:	480c      	ldr	r0, [pc, #48]	; (8001590 <HAL_ADC_MspInit+0xcc>)
 8001560:	f001 fa0c 	bl	800297c <HAL_DMA_Init>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 800156a:	f7ff fecb 	bl	8001304 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a07      	ldr	r2, [pc, #28]	; (8001590 <HAL_ADC_MspInit+0xcc>)
 8001572:	621a      	str	r2, [r3, #32]
 8001574:	4a06      	ldr	r2, [pc, #24]	; (8001590 <HAL_ADC_MspInit+0xcc>)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800157a:	bf00      	nop
 800157c:	3720      	adds	r7, #32
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40012400 	.word	0x40012400
 8001588:	40021000 	.word	0x40021000
 800158c:	40010800 	.word	0x40010800
 8001590:	20000110 	.word	0x20000110
 8001594:	40020008 	.word	0x40020008

08001598 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001598:	b480      	push	{r7}
 800159a:	b087      	sub	sp, #28
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a1b      	ldr	r2, [pc, #108]	; (8001614 <HAL_TIM_Base_MspInit+0x7c>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d10c      	bne.n	80015c4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015aa:	4b1b      	ldr	r3, [pc, #108]	; (8001618 <HAL_TIM_Base_MspInit+0x80>)
 80015ac:	699b      	ldr	r3, [r3, #24]
 80015ae:	4a1a      	ldr	r2, [pc, #104]	; (8001618 <HAL_TIM_Base_MspInit+0x80>)
 80015b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015b4:	6193      	str	r3, [r2, #24]
 80015b6:	4b18      	ldr	r3, [pc, #96]	; (8001618 <HAL_TIM_Base_MspInit+0x80>)
 80015b8:	699b      	ldr	r3, [r3, #24]
 80015ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015be:	617b      	str	r3, [r7, #20]
 80015c0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80015c2:	e022      	b.n	800160a <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM2)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015cc:	d10c      	bne.n	80015e8 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015ce:	4b12      	ldr	r3, [pc, #72]	; (8001618 <HAL_TIM_Base_MspInit+0x80>)
 80015d0:	69db      	ldr	r3, [r3, #28]
 80015d2:	4a11      	ldr	r2, [pc, #68]	; (8001618 <HAL_TIM_Base_MspInit+0x80>)
 80015d4:	f043 0301 	orr.w	r3, r3, #1
 80015d8:	61d3      	str	r3, [r2, #28]
 80015da:	4b0f      	ldr	r3, [pc, #60]	; (8001618 <HAL_TIM_Base_MspInit+0x80>)
 80015dc:	69db      	ldr	r3, [r3, #28]
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	613b      	str	r3, [r7, #16]
 80015e4:	693b      	ldr	r3, [r7, #16]
}
 80015e6:	e010      	b.n	800160a <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM3)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a0b      	ldr	r2, [pc, #44]	; (800161c <HAL_TIM_Base_MspInit+0x84>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d10b      	bne.n	800160a <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80015f2:	4b09      	ldr	r3, [pc, #36]	; (8001618 <HAL_TIM_Base_MspInit+0x80>)
 80015f4:	69db      	ldr	r3, [r3, #28]
 80015f6:	4a08      	ldr	r2, [pc, #32]	; (8001618 <HAL_TIM_Base_MspInit+0x80>)
 80015f8:	f043 0302 	orr.w	r3, r3, #2
 80015fc:	61d3      	str	r3, [r2, #28]
 80015fe:	4b06      	ldr	r3, [pc, #24]	; (8001618 <HAL_TIM_Base_MspInit+0x80>)
 8001600:	69db      	ldr	r3, [r3, #28]
 8001602:	f003 0302 	and.w	r3, r3, #2
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	68fb      	ldr	r3, [r7, #12]
}
 800160a:	bf00      	nop
 800160c:	371c      	adds	r7, #28
 800160e:	46bd      	mov	sp, r7
 8001610:	bc80      	pop	{r7}
 8001612:	4770      	bx	lr
 8001614:	40012c00 	.word	0x40012c00
 8001618:	40021000 	.word	0x40021000
 800161c:	40000400 	.word	0x40000400

08001620 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b08a      	sub	sp, #40	; 0x28
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001628:	f107 0318 	add.w	r3, r7, #24
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	605a      	str	r2, [r3, #4]
 8001632:	609a      	str	r2, [r3, #8]
 8001634:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a2e      	ldr	r2, [pc, #184]	; (80016f4 <HAL_TIM_MspPostInit+0xd4>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d119      	bne.n	8001674 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001640:	4b2d      	ldr	r3, [pc, #180]	; (80016f8 <HAL_TIM_MspPostInit+0xd8>)
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	4a2c      	ldr	r2, [pc, #176]	; (80016f8 <HAL_TIM_MspPostInit+0xd8>)
 8001646:	f043 0304 	orr.w	r3, r3, #4
 800164a:	6193      	str	r3, [r2, #24]
 800164c:	4b2a      	ldr	r3, [pc, #168]	; (80016f8 <HAL_TIM_MspPostInit+0xd8>)
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	f003 0304 	and.w	r3, r3, #4
 8001654:	617b      	str	r3, [r7, #20]
 8001656:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = S38kh_Pin;
 8001658:	f44f 7380 	mov.w	r3, #256	; 0x100
 800165c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165e:	2302      	movs	r3, #2
 8001660:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001662:	2302      	movs	r3, #2
 8001664:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(S38kh_GPIO_Port, &GPIO_InitStruct);
 8001666:	f107 0318 	add.w	r3, r7, #24
 800166a:	4619      	mov	r1, r3
 800166c:	4823      	ldr	r0, [pc, #140]	; (80016fc <HAL_TIM_MspPostInit+0xdc>)
 800166e:	f001 fb73 	bl	8002d58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001672:	e03a      	b.n	80016ea <HAL_TIM_MspPostInit+0xca>
  else if(htim->Instance==TIM2)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800167c:	d118      	bne.n	80016b0 <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800167e:	4b1e      	ldr	r3, [pc, #120]	; (80016f8 <HAL_TIM_MspPostInit+0xd8>)
 8001680:	699b      	ldr	r3, [r3, #24]
 8001682:	4a1d      	ldr	r2, [pc, #116]	; (80016f8 <HAL_TIM_MspPostInit+0xd8>)
 8001684:	f043 0304 	orr.w	r3, r3, #4
 8001688:	6193      	str	r3, [r2, #24]
 800168a:	4b1b      	ldr	r3, [pc, #108]	; (80016f8 <HAL_TIM_MspPostInit+0xd8>)
 800168c:	699b      	ldr	r3, [r3, #24]
 800168e:	f003 0304 	and.w	r3, r3, #4
 8001692:	613b      	str	r3, [r7, #16]
 8001694:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001696:	2301      	movs	r3, #1
 8001698:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169a:	2302      	movs	r3, #2
 800169c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169e:	2302      	movs	r3, #2
 80016a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a2:	f107 0318 	add.w	r3, r7, #24
 80016a6:	4619      	mov	r1, r3
 80016a8:	4814      	ldr	r0, [pc, #80]	; (80016fc <HAL_TIM_MspPostInit+0xdc>)
 80016aa:	f001 fb55 	bl	8002d58 <HAL_GPIO_Init>
}
 80016ae:	e01c      	b.n	80016ea <HAL_TIM_MspPostInit+0xca>
  else if(htim->Instance==TIM3)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a12      	ldr	r2, [pc, #72]	; (8001700 <HAL_TIM_MspPostInit+0xe0>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d117      	bne.n	80016ea <HAL_TIM_MspPostInit+0xca>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ba:	4b0f      	ldr	r3, [pc, #60]	; (80016f8 <HAL_TIM_MspPostInit+0xd8>)
 80016bc:	699b      	ldr	r3, [r3, #24]
 80016be:	4a0e      	ldr	r2, [pc, #56]	; (80016f8 <HAL_TIM_MspPostInit+0xd8>)
 80016c0:	f043 0308 	orr.w	r3, r3, #8
 80016c4:	6193      	str	r3, [r2, #24]
 80016c6:	4b0c      	ldr	r3, [pc, #48]	; (80016f8 <HAL_TIM_MspPostInit+0xd8>)
 80016c8:	699b      	ldr	r3, [r3, #24]
 80016ca:	f003 0308 	and.w	r3, r3, #8
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80016d2:	2302      	movs	r3, #2
 80016d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d6:	2302      	movs	r3, #2
 80016d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016da:	2302      	movs	r3, #2
 80016dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016de:	f107 0318 	add.w	r3, r7, #24
 80016e2:	4619      	mov	r1, r3
 80016e4:	4807      	ldr	r0, [pc, #28]	; (8001704 <HAL_TIM_MspPostInit+0xe4>)
 80016e6:	f001 fb37 	bl	8002d58 <HAL_GPIO_Init>
}
 80016ea:	bf00      	nop
 80016ec:	3728      	adds	r7, #40	; 0x28
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	40012c00 	.word	0x40012c00
 80016f8:	40021000 	.word	0x40021000
 80016fc:	40010800 	.word	0x40010800
 8001700:	40000400 	.word	0x40000400
 8001704:	40010c00 	.word	0x40010c00

08001708 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 800170c:	e7fe      	b.n	800170c <NMI_Handler+0x4>

0800170e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800170e:	b480      	push	{r7}
 8001710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001712:	e7fe      	b.n	8001712 <HardFault_Handler+0x4>

08001714 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001718:	e7fe      	b.n	8001718 <MemManage_Handler+0x4>

0800171a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800171a:	b480      	push	{r7}
 800171c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800171e:	e7fe      	b.n	800171e <BusFault_Handler+0x4>

08001720 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001724:	e7fe      	b.n	8001724 <UsageFault_Handler+0x4>

08001726 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001726:	b480      	push	{r7}
 8001728:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800172a:	bf00      	nop
 800172c:	46bd      	mov	sp, r7
 800172e:	bc80      	pop	{r7}
 8001730:	4770      	bx	lr

08001732 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001732:	b480      	push	{r7}
 8001734:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	46bd      	mov	sp, r7
 800173a:	bc80      	pop	{r7}
 800173c:	4770      	bx	lr

0800173e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800173e:	b480      	push	{r7}
 8001740:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	46bd      	mov	sp, r7
 8001746:	bc80      	pop	{r7}
 8001748:	4770      	bx	lr
	...

0800174c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if (inicio != 1) {
 8001752:	4b11      	ldr	r3, [pc, #68]	; (8001798 <SysTick_Handler+0x4c>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d017      	beq.n	800178a <SysTick_Handler+0x3e>
		int posicionLinea = linePosition(Sensors);
 800175a:	4810      	ldr	r0, [pc, #64]	; (800179c <SysTick_Handler+0x50>)
 800175c:	f000 f8ba 	bl	80018d4 <linePosition>
 8001760:	60f8      	str	r0, [r7, #12]
		int *mediciones = readSensorsArray(pinS, 7);
 8001762:	2107      	movs	r1, #7
 8001764:	480e      	ldr	r0, [pc, #56]	; (80017a0 <SysTick_Handler+0x54>)
 8001766:	f7ff fe27 	bl	80013b8 <readSensorsArray>
 800176a:	60b8      	str	r0, [r7, #8]
		int posicionObjetivo = targetPosition(mediciones);
 800176c:	68b8      	ldr	r0, [r7, #8]
 800176e:	f000 f85f 	bl	8001830 <targetPosition>
 8001772:	6078      	str	r0, [r7, #4]
		if (posicionLinea == -1) {
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800177a:	d103      	bne.n	8001784 <SysTick_Handler+0x38>
			targetTracking(posicionObjetivo);
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f000 f8e5 	bl	800194c <targetTracking>
 8001782:	e002      	b.n	800178a <SysTick_Handler+0x3e>
		} else {
			lineTracking(posicionLinea);
 8001784:	68f8      	ldr	r0, [r7, #12]
 8001786:	f000 fa31 	bl	8001bec <lineTracking>
		}
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800178a:	f000 fbe7 	bl	8001f5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	2000023c 	.word	0x2000023c
 800179c:	2000022c 	.word	0x2000022c
 80017a0:	20000000 	.word	0x20000000

080017a4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80017a8:	4802      	ldr	r0, [pc, #8]	; (80017b4 <DMA1_Channel1_IRQHandler+0x10>)
 80017aa:	f001 f9a1 	bl	8002af0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20000110 	.word	0x20000110

080017b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b086      	sub	sp, #24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017c0:	4a14      	ldr	r2, [pc, #80]	; (8001814 <_sbrk+0x5c>)
 80017c2:	4b15      	ldr	r3, [pc, #84]	; (8001818 <_sbrk+0x60>)
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017cc:	4b13      	ldr	r3, [pc, #76]	; (800181c <_sbrk+0x64>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d102      	bne.n	80017da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017d4:	4b11      	ldr	r3, [pc, #68]	; (800181c <_sbrk+0x64>)
 80017d6:	4a12      	ldr	r2, [pc, #72]	; (8001820 <_sbrk+0x68>)
 80017d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017da:	4b10      	ldr	r3, [pc, #64]	; (800181c <_sbrk+0x64>)
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4413      	add	r3, r2
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d207      	bcs.n	80017f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017e8:	f002 ff28 	bl	800463c <__errno>
 80017ec:	4603      	mov	r3, r0
 80017ee:	220c      	movs	r2, #12
 80017f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017f2:	f04f 33ff 	mov.w	r3, #4294967295
 80017f6:	e009      	b.n	800180c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017f8:	4b08      	ldr	r3, [pc, #32]	; (800181c <_sbrk+0x64>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017fe:	4b07      	ldr	r3, [pc, #28]	; (800181c <_sbrk+0x64>)
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4413      	add	r3, r2
 8001806:	4a05      	ldr	r2, [pc, #20]	; (800181c <_sbrk+0x64>)
 8001808:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800180a:	68fb      	ldr	r3, [r7, #12]
}
 800180c:	4618      	mov	r0, r3
 800180e:	3718      	adds	r7, #24
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	20005000 	.word	0x20005000
 8001818:	00000400 	.word	0x00000400
 800181c:	200003fc 	.word	0x200003fc
 8001820:	20000440 	.word	0x20000440

08001824 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001828:	bf00      	nop
 800182a:	46bd      	mov	sp, r7
 800182c:	bc80      	pop	{r7}
 800182e:	4770      	bx	lr

08001830 <targetPosition>:
float KDT = 1;
float KPL = 1;
float KDL = 1;
int xSpeed;

int targetPosition(int *mediciones) {
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
	return (mediciones[0] + mediciones[1] + mediciones[2] + mediciones[3]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	3304      	adds	r3, #4
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	441a      	add	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	3308      	adds	r3, #8
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	441a      	add	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	330c      	adds	r3, #12
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	441a      	add	r2, r3
			+ mediciones[4]) != 0 ?
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	3310      	adds	r3, #16
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4413      	add	r3, r2
			((4000 * mediciones[0] + 3000 * mediciones[1] + 2000 * mediciones[2]
					+ 1000 * mediciones[3] + 0 * mediciones[4])
					/ (mediciones[0] + mediciones[1] + mediciones[2]
							+ mediciones[3] + mediciones[4])) :
 800185c:	2b00      	cmp	r3, #0
 800185e:	d032      	beq.n	80018c6 <targetPosition+0x96>
			((4000 * mediciones[0] + 3000 * mediciones[1] + 2000 * mediciones[2]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001868:	fb03 f202 	mul.w	r2, r3, r2
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	3304      	adds	r3, #4
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8001876:	fb01 f303 	mul.w	r3, r1, r3
 800187a:	441a      	add	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	3308      	adds	r3, #8
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001886:	fb01 f303 	mul.w	r3, r1, r3
 800188a:	441a      	add	r2, r3
					+ 1000 * mediciones[3] + 0 * mediciones[4])
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	330c      	adds	r3, #12
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001896:	fb01 f303 	mul.w	r3, r1, r3
 800189a:	441a      	add	r2, r3
					/ (mediciones[0] + mediciones[1] + mediciones[2]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6819      	ldr	r1, [r3, #0]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	3304      	adds	r3, #4
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4419      	add	r1, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3308      	adds	r3, #8
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4419      	add	r1, r3
							+ mediciones[3] + mediciones[4])) :
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	330c      	adds	r3, #12
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4419      	add	r1, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	3310      	adds	r3, #16
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	440b      	add	r3, r1
 80018c0:	fb92 f3f3 	sdiv	r3, r2, r3
 80018c4:	e001      	b.n	80018ca <targetPosition+0x9a>
 80018c6:	f04f 33ff 	mov.w	r3, #4294967295
			-1;
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr

080018d4 <linePosition>:

int linePosition(int *mediciones) {
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
	return (mediciones[0] + mediciones[1] + mediciones[2] + mediciones[3])
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	3304      	adds	r3, #4
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	441a      	add	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	3308      	adds	r3, #8
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	441a      	add	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	330c      	adds	r3, #12
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4413      	add	r3, r2
			!= 0 ?
			((-1000 * mediciones[0] - 2000 * mediciones[1]
					+ 2000 * mediciones[2] + 1000 * mediciones[3])) :
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d01c      	beq.n	8001936 <linePosition+0x62>
			((-1000 * mediciones[0] - 2000 * mediciones[1]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a10      	ldr	r2, [pc, #64]	; (8001944 <linePosition+0x70>)
 8001902:	fb03 f202 	mul.w	r2, r3, r2
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	3304      	adds	r3, #4
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	490e      	ldr	r1, [pc, #56]	; (8001948 <linePosition+0x74>)
 800190e:	fb01 f303 	mul.w	r3, r1, r3
 8001912:	441a      	add	r2, r3
					+ 2000 * mediciones[2] + 1000 * mediciones[3])) :
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	3308      	adds	r3, #8
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800191e:	fb01 f303 	mul.w	r3, r1, r3
 8001922:	441a      	add	r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	330c      	adds	r3, #12
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800192e:	fb01 f303 	mul.w	r3, r1, r3
 8001932:	4413      	add	r3, r2
 8001934:	e001      	b.n	800193a <linePosition+0x66>
 8001936:	f04f 33ff 	mov.w	r3, #4294967295
			-1;
}
 800193a:	4618      	mov	r0, r3
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	bc80      	pop	{r7}
 8001942:	4770      	bx	lr
 8001944:	fffffc18 	.word	0xfffffc18
 8001948:	fffff830 	.word	0xfffff830

0800194c <targetTracking>:

void targetTracking(int position) {
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af02      	add	r7, sp, #8
 8001952:	6078      	str	r0, [r7, #4]
	errorP = position - 2000;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 800195a:	4618      	mov	r0, r3
 800195c:	f7fe fcb0 	bl	80002c0 <__aeabi_i2f>
 8001960:	4603      	mov	r3, r0
 8001962:	4a92      	ldr	r2, [pc, #584]	; (8001bac <targetTracking+0x260>)
 8001964:	6013      	str	r3, [r2, #0]
	timePrevP = timeNowP;
 8001966:	4b92      	ldr	r3, [pc, #584]	; (8001bb0 <targetTracking+0x264>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a92      	ldr	r2, [pc, #584]	; (8001bb4 <targetTracking+0x268>)
 800196c:	6013      	str	r3, [r2, #0]
	timeNowP = HAL_GetTick();
 800196e:	f000 fb07 	bl	8001f80 <HAL_GetTick>
 8001972:	4603      	mov	r3, r0
 8001974:	4618      	mov	r0, r3
 8001976:	f7fe fc9f 	bl	80002b8 <__aeabi_ui2f>
 800197a:	4603      	mov	r3, r0
 800197c:	4a8c      	ldr	r2, [pc, #560]	; (8001bb0 <targetTracking+0x264>)
 800197e:	6013      	str	r3, [r2, #0]
	elapsedTime = (timeNowP - timePrevP) / 1000;
 8001980:	4b8b      	ldr	r3, [pc, #556]	; (8001bb0 <targetTracking+0x264>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a8b      	ldr	r2, [pc, #556]	; (8001bb4 <targetTracking+0x268>)
 8001986:	6812      	ldr	r2, [r2, #0]
 8001988:	4611      	mov	r1, r2
 800198a:	4618      	mov	r0, r3
 800198c:	f7fe fbe2 	bl	8000154 <__aeabi_fsub>
 8001990:	4603      	mov	r3, r0
 8001992:	4989      	ldr	r1, [pc, #548]	; (8001bb8 <targetTracking+0x26c>)
 8001994:	4618      	mov	r0, r3
 8001996:	f7fe fd9b 	bl	80004d0 <__aeabi_fdiv>
 800199a:	4603      	mov	r3, r0
 800199c:	461a      	mov	r2, r3
 800199e:	4b87      	ldr	r3, [pc, #540]	; (8001bbc <targetTracking+0x270>)
 80019a0:	601a      	str	r2, [r3, #0]
	pidD = KDT * ((errorP - previousErrorP) / elapsedTime);
 80019a2:	4b82      	ldr	r3, [pc, #520]	; (8001bac <targetTracking+0x260>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a86      	ldr	r2, [pc, #536]	; (8001bc0 <targetTracking+0x274>)
 80019a8:	6812      	ldr	r2, [r2, #0]
 80019aa:	4611      	mov	r1, r2
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7fe fbd1 	bl	8000154 <__aeabi_fsub>
 80019b2:	4603      	mov	r3, r0
 80019b4:	461a      	mov	r2, r3
 80019b6:	4b81      	ldr	r3, [pc, #516]	; (8001bbc <targetTracking+0x270>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4619      	mov	r1, r3
 80019bc:	4610      	mov	r0, r2
 80019be:	f7fe fd87 	bl	80004d0 <__aeabi_fdiv>
 80019c2:	4603      	mov	r3, r0
 80019c4:	461a      	mov	r2, r3
 80019c6:	4b7f      	ldr	r3, [pc, #508]	; (8001bc4 <targetTracking+0x278>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4619      	mov	r1, r3
 80019cc:	4610      	mov	r0, r2
 80019ce:	f7fe fccb 	bl	8000368 <__aeabi_fmul>
 80019d2:	4603      	mov	r3, r0
 80019d4:	461a      	mov	r2, r3
 80019d6:	4b7c      	ldr	r3, [pc, #496]	; (8001bc8 <targetTracking+0x27c>)
 80019d8:	601a      	str	r2, [r3, #0]
	pidP = KPT * errorP;
 80019da:	4b7c      	ldr	r3, [pc, #496]	; (8001bcc <targetTracking+0x280>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a73      	ldr	r2, [pc, #460]	; (8001bac <targetTracking+0x260>)
 80019e0:	6812      	ldr	r2, [r2, #0]
 80019e2:	4611      	mov	r1, r2
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7fe fcbf 	bl	8000368 <__aeabi_fmul>
 80019ea:	4603      	mov	r3, r0
 80019ec:	461a      	mov	r2, r3
 80019ee:	4b78      	ldr	r3, [pc, #480]	; (8001bd0 <targetTracking+0x284>)
 80019f0:	601a      	str	r2, [r3, #0]
	pid = pidP + pidD;
 80019f2:	4b77      	ldr	r3, [pc, #476]	; (8001bd0 <targetTracking+0x284>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a74      	ldr	r2, [pc, #464]	; (8001bc8 <targetTracking+0x27c>)
 80019f8:	6812      	ldr	r2, [r2, #0]
 80019fa:	4611      	mov	r1, r2
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7fe fbab 	bl	8000158 <__addsf3>
 8001a02:	4603      	mov	r3, r0
 8001a04:	461a      	mov	r2, r3
 8001a06:	4b73      	ldr	r3, [pc, #460]	; (8001bd4 <targetTracking+0x288>)
 8001a08:	601a      	str	r2, [r3, #0]
	if (pid > velocity) {
 8001a0a:	4b73      	ldr	r3, [pc, #460]	; (8001bd8 <targetTracking+0x28c>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7fe fc56 	bl	80002c0 <__aeabi_i2f>
 8001a14:	4602      	mov	r2, r0
 8001a16:	4b6f      	ldr	r3, [pc, #444]	; (8001bd4 <targetTracking+0x288>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4610      	mov	r0, r2
 8001a1e:	f7fe fe41 	bl	80006a4 <__aeabi_fcmplt>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d007      	beq.n	8001a38 <targetTracking+0xec>
		//intUartSend(1);
		pid = velocity;
 8001a28:	4b6b      	ldr	r3, [pc, #428]	; (8001bd8 <targetTracking+0x28c>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7fe fc47 	bl	80002c0 <__aeabi_i2f>
 8001a32:	4603      	mov	r3, r0
 8001a34:	4a67      	ldr	r2, [pc, #412]	; (8001bd4 <targetTracking+0x288>)
 8001a36:	6013      	str	r3, [r2, #0]
	}
	if (pid < -velocity) {
 8001a38:	4b67      	ldr	r3, [pc, #412]	; (8001bd8 <targetTracking+0x28c>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	425b      	negs	r3, r3
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7fe fc3e 	bl	80002c0 <__aeabi_i2f>
 8001a44:	4602      	mov	r2, r0
 8001a46:	4b63      	ldr	r3, [pc, #396]	; (8001bd4 <targetTracking+0x288>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4610      	mov	r0, r2
 8001a4e:	f7fe fe47 	bl	80006e0 <__aeabi_fcmpgt>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d008      	beq.n	8001a6a <targetTracking+0x11e>
		//intUartSend(0);
		pid = -velocity;
 8001a58:	4b5f      	ldr	r3, [pc, #380]	; (8001bd8 <targetTracking+0x28c>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	425b      	negs	r3, r3
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7fe fc2e 	bl	80002c0 <__aeabi_i2f>
 8001a64:	4603      	mov	r3, r0
 8001a66:	4a5b      	ldr	r2, [pc, #364]	; (8001bd4 <targetTracking+0x288>)
 8001a68:	6013      	str	r3, [r2, #0]
	}
	motLeft = velocity - pid;
 8001a6a:	4b5b      	ldr	r3, [pc, #364]	; (8001bd8 <targetTracking+0x28c>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7fe fc26 	bl	80002c0 <__aeabi_i2f>
 8001a74:	4602      	mov	r2, r0
 8001a76:	4b57      	ldr	r3, [pc, #348]	; (8001bd4 <targetTracking+0x288>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4610      	mov	r0, r2
 8001a7e:	f7fe fb69 	bl	8000154 <__aeabi_fsub>
 8001a82:	4603      	mov	r3, r0
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7fe fe35 	bl	80006f4 <__aeabi_f2iz>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	4a53      	ldr	r2, [pc, #332]	; (8001bdc <targetTracking+0x290>)
 8001a8e:	6013      	str	r3, [r2, #0]
	motRight = velocity + pid;
 8001a90:	4b51      	ldr	r3, [pc, #324]	; (8001bd8 <targetTracking+0x28c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7fe fc13 	bl	80002c0 <__aeabi_i2f>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	4b4d      	ldr	r3, [pc, #308]	; (8001bd4 <targetTracking+0x288>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4610      	mov	r0, r2
 8001aa4:	f7fe fb58 	bl	8000158 <__addsf3>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7fe fe22 	bl	80006f4 <__aeabi_f2iz>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	4a4b      	ldr	r2, [pc, #300]	; (8001be0 <targetTracking+0x294>)
 8001ab4:	6013      	str	r3, [r2, #0]
	if (motLeft < -1000) {
 8001ab6:	4b49      	ldr	r3, [pc, #292]	; (8001bdc <targetTracking+0x290>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8001abe:	da02      	bge.n	8001ac6 <targetTracking+0x17a>
		motLeft = -1000;
 8001ac0:	4b46      	ldr	r3, [pc, #280]	; (8001bdc <targetTracking+0x290>)
 8001ac2:	4a48      	ldr	r2, [pc, #288]	; (8001be4 <targetTracking+0x298>)
 8001ac4:	601a      	str	r2, [r3, #0]
	}
	if (motRight < -1000) {
 8001ac6:	4b46      	ldr	r3, [pc, #280]	; (8001be0 <targetTracking+0x294>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8001ace:	da02      	bge.n	8001ad6 <targetTracking+0x18a>
		motRight = -1000;
 8001ad0:	4b43      	ldr	r3, [pc, #268]	; (8001be0 <targetTracking+0x294>)
 8001ad2:	4a44      	ldr	r2, [pc, #272]	; (8001be4 <targetTracking+0x298>)
 8001ad4:	601a      	str	r2, [r3, #0]
	}

	previousErrorP = errorP;
 8001ad6:	4b35      	ldr	r3, [pc, #212]	; (8001bac <targetTracking+0x260>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a39      	ldr	r2, [pc, #228]	; (8001bc0 <targetTracking+0x274>)
 8001adc:	6013      	str	r3, [r2, #0]
	motRight = constrain(motRight, -1000, 1000);
 8001ade:	4b40      	ldr	r3, [pc, #256]	; (8001be0 <targetTracking+0x294>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ae6:	493f      	ldr	r1, [pc, #252]	; (8001be4 <targetTracking+0x298>)
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7fe fe90 	bl	800080e <constrain>
 8001aee:	4603      	mov	r3, r0
 8001af0:	4a3b      	ldr	r2, [pc, #236]	; (8001be0 <targetTracking+0x294>)
 8001af2:	6013      	str	r3, [r2, #0]
	motLeft = constrain(motLeft, -1000, 1000);
 8001af4:	4b39      	ldr	r3, [pc, #228]	; (8001bdc <targetTracking+0x290>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001afc:	4939      	ldr	r1, [pc, #228]	; (8001be4 <targetTracking+0x298>)
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7fe fe85 	bl	800080e <constrain>
 8001b04:	4603      	mov	r3, r0
 8001b06:	4a35      	ldr	r2, [pc, #212]	; (8001bdc <targetTracking+0x290>)
 8001b08:	6013      	str	r3, [r2, #0]

	motRight = MAP(motRight, -1000, 1000, MINVELOCITY, MAXVELOCITY);
 8001b0a:	4b35      	ldr	r3, [pc, #212]	; (8001be0 <targetTracking+0x294>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b14:	9300      	str	r3, [sp, #0]
 8001b16:	f649 4340 	movw	r3, #40000	; 0x9c40
 8001b1a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b1e:	4931      	ldr	r1, [pc, #196]	; (8001be4 <targetTracking+0x298>)
 8001b20:	f7fe fe5a 	bl	80007d8 <MAP>
 8001b24:	4603      	mov	r3, r0
 8001b26:	461a      	mov	r2, r3
 8001b28:	4b2d      	ldr	r3, [pc, #180]	; (8001be0 <targetTracking+0x294>)
 8001b2a:	601a      	str	r2, [r3, #0]
	motLeft = MAP(motLeft, -1000, 1000, MINVELOCITY, MAXVELOCITY);
 8001b2c:	4b2b      	ldr	r3, [pc, #172]	; (8001bdc <targetTracking+0x290>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b36:	9300      	str	r3, [sp, #0]
 8001b38:	f649 4340 	movw	r3, #40000	; 0x9c40
 8001b3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b40:	4928      	ldr	r1, [pc, #160]	; (8001be4 <targetTracking+0x298>)
 8001b42:	f7fe fe49 	bl	80007d8 <MAP>
 8001b46:	4603      	mov	r3, r0
 8001b48:	461a      	mov	r2, r3
 8001b4a:	4b24      	ldr	r3, [pc, #144]	; (8001bdc <targetTracking+0x290>)
 8001b4c:	601a      	str	r2, [r3, #0]

	if (motRight < MINVELOCITY) {
 8001b4e:	4b24      	ldr	r3, [pc, #144]	; (8001be0 <targetTracking+0x294>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8001b56:	4293      	cmp	r3, r2
 8001b58:	dc03      	bgt.n	8001b62 <targetTracking+0x216>
		motRight = MINVELOCITY;
 8001b5a:	4b21      	ldr	r3, [pc, #132]	; (8001be0 <targetTracking+0x294>)
 8001b5c:	f649 4240 	movw	r2, #40000	; 0x9c40
 8001b60:	601a      	str	r2, [r3, #0]
	}

	if (motLeft < MINVELOCITY) {
 8001b62:	4b1e      	ldr	r3, [pc, #120]	; (8001bdc <targetTracking+0x290>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	dc03      	bgt.n	8001b76 <targetTracking+0x22a>
		motLeft = MINVELOCITY;
 8001b6e:	4b1b      	ldr	r3, [pc, #108]	; (8001bdc <targetTracking+0x290>)
 8001b70:	f649 4240 	movw	r2, #40000	; 0x9c40
 8001b74:	601a      	str	r2, [r3, #0]
	}
	if (position != -1) {
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b7c:	d009      	beq.n	8001b92 <targetTracking+0x246>
		TIM3->CCR4 = motRight;
 8001b7e:	4b18      	ldr	r3, [pc, #96]	; (8001be0 <targetTracking+0x294>)
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	4b19      	ldr	r3, [pc, #100]	; (8001be8 <targetTracking+0x29c>)
 8001b84:	641a      	str	r2, [r3, #64]	; 0x40
		TIM2->CCR1 = motLeft;
 8001b86:	4b15      	ldr	r3, [pc, #84]	; (8001bdc <targetTracking+0x290>)
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b8e:	635a      	str	r2, [r3, #52]	; 0x34
	} else {
		TIM3->CCR4 = 60535;
		TIM2->CCR1 = 65535;
	}
}
 8001b90:	e008      	b.n	8001ba4 <targetTracking+0x258>
		TIM3->CCR4 = 60535;
 8001b92:	4b15      	ldr	r3, [pc, #84]	; (8001be8 <targetTracking+0x29c>)
 8001b94:	f64e 4277 	movw	r2, #60535	; 0xec77
 8001b98:	641a      	str	r2, [r3, #64]	; 0x40
		TIM2->CCR1 = 65535;
 8001b9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ba2:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001ba4:	bf00      	nop
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	20000410 	.word	0x20000410
 8001bb0:	20000414 	.word	0x20000414
 8001bb4:	20000418 	.word	0x20000418
 8001bb8:	447a0000 	.word	0x447a0000
 8001bbc:	20000404 	.word	0x20000404
 8001bc0:	2000041c 	.word	0x2000041c
 8001bc4:	20000044 	.word	0x20000044
 8001bc8:	2000040c 	.word	0x2000040c
 8001bcc:	20000040 	.word	0x20000040
 8001bd0:	20000408 	.word	0x20000408
 8001bd4:	20000400 	.word	0x20000400
 8001bd8:	2000003c 	.word	0x2000003c
 8001bdc:	20000420 	.word	0x20000420
 8001be0:	20000424 	.word	0x20000424
 8001be4:	fffffc18 	.word	0xfffffc18
 8001be8:	40000400 	.word	0x40000400

08001bec <lineTracking>:

void lineTracking(int position) {
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af02      	add	r7, sp, #8
 8001bf2:	6078      	str	r0, [r7, #4]

	errorP = position;
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f7fe fb63 	bl	80002c0 <__aeabi_i2f>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	4a91      	ldr	r2, [pc, #580]	; (8001e44 <lineTracking+0x258>)
 8001bfe:	6013      	str	r3, [r2, #0]

	timePrevP = timeNowP;
 8001c00:	4b91      	ldr	r3, [pc, #580]	; (8001e48 <lineTracking+0x25c>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a91      	ldr	r2, [pc, #580]	; (8001e4c <lineTracking+0x260>)
 8001c06:	6013      	str	r3, [r2, #0]
	timeNowP = HAL_GetTick();
 8001c08:	f000 f9ba 	bl	8001f80 <HAL_GetTick>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7fe fb52 	bl	80002b8 <__aeabi_ui2f>
 8001c14:	4603      	mov	r3, r0
 8001c16:	4a8c      	ldr	r2, [pc, #560]	; (8001e48 <lineTracking+0x25c>)
 8001c18:	6013      	str	r3, [r2, #0]
	elapsedTime = (timeNowP - timePrevP) / 1000;
 8001c1a:	4b8b      	ldr	r3, [pc, #556]	; (8001e48 <lineTracking+0x25c>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a8b      	ldr	r2, [pc, #556]	; (8001e4c <lineTracking+0x260>)
 8001c20:	6812      	ldr	r2, [r2, #0]
 8001c22:	4611      	mov	r1, r2
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7fe fa95 	bl	8000154 <__aeabi_fsub>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	4988      	ldr	r1, [pc, #544]	; (8001e50 <lineTracking+0x264>)
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7fe fc4e 	bl	80004d0 <__aeabi_fdiv>
 8001c34:	4603      	mov	r3, r0
 8001c36:	461a      	mov	r2, r3
 8001c38:	4b86      	ldr	r3, [pc, #536]	; (8001e54 <lineTracking+0x268>)
 8001c3a:	601a      	str	r2, [r3, #0]
	pidD = KDL * ((errorP - previousErrorP) / elapsedTime);
 8001c3c:	4b81      	ldr	r3, [pc, #516]	; (8001e44 <lineTracking+0x258>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a85      	ldr	r2, [pc, #532]	; (8001e58 <lineTracking+0x26c>)
 8001c42:	6812      	ldr	r2, [r2, #0]
 8001c44:	4611      	mov	r1, r2
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7fe fa84 	bl	8000154 <__aeabi_fsub>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	461a      	mov	r2, r3
 8001c50:	4b80      	ldr	r3, [pc, #512]	; (8001e54 <lineTracking+0x268>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4619      	mov	r1, r3
 8001c56:	4610      	mov	r0, r2
 8001c58:	f7fe fc3a 	bl	80004d0 <__aeabi_fdiv>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	461a      	mov	r2, r3
 8001c60:	4b7e      	ldr	r3, [pc, #504]	; (8001e5c <lineTracking+0x270>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4619      	mov	r1, r3
 8001c66:	4610      	mov	r0, r2
 8001c68:	f7fe fb7e 	bl	8000368 <__aeabi_fmul>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	461a      	mov	r2, r3
 8001c70:	4b7b      	ldr	r3, [pc, #492]	; (8001e60 <lineTracking+0x274>)
 8001c72:	601a      	str	r2, [r3, #0]
	pidP = KPL * errorP;
 8001c74:	4b7b      	ldr	r3, [pc, #492]	; (8001e64 <lineTracking+0x278>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a72      	ldr	r2, [pc, #456]	; (8001e44 <lineTracking+0x258>)
 8001c7a:	6812      	ldr	r2, [r2, #0]
 8001c7c:	4611      	mov	r1, r2
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7fe fb72 	bl	8000368 <__aeabi_fmul>
 8001c84:	4603      	mov	r3, r0
 8001c86:	461a      	mov	r2, r3
 8001c88:	4b77      	ldr	r3, [pc, #476]	; (8001e68 <lineTracking+0x27c>)
 8001c8a:	601a      	str	r2, [r3, #0]
	pid = pidP + pidD;
 8001c8c:	4b76      	ldr	r3, [pc, #472]	; (8001e68 <lineTracking+0x27c>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a73      	ldr	r2, [pc, #460]	; (8001e60 <lineTracking+0x274>)
 8001c92:	6812      	ldr	r2, [r2, #0]
 8001c94:	4611      	mov	r1, r2
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7fe fa5e 	bl	8000158 <__addsf3>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	4b72      	ldr	r3, [pc, #456]	; (8001e6c <lineTracking+0x280>)
 8001ca2:	601a      	str	r2, [r3, #0]
	if (pid > velocity) {
 8001ca4:	4b72      	ldr	r3, [pc, #456]	; (8001e70 <lineTracking+0x284>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7fe fb09 	bl	80002c0 <__aeabi_i2f>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	4b6e      	ldr	r3, [pc, #440]	; (8001e6c <lineTracking+0x280>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4610      	mov	r0, r2
 8001cb8:	f7fe fcf4 	bl	80006a4 <__aeabi_fcmplt>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d007      	beq.n	8001cd2 <lineTracking+0xe6>
		//intUartSend(1);
		pid = velocity;
 8001cc2:	4b6b      	ldr	r3, [pc, #428]	; (8001e70 <lineTracking+0x284>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7fe fafa 	bl	80002c0 <__aeabi_i2f>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	4a67      	ldr	r2, [pc, #412]	; (8001e6c <lineTracking+0x280>)
 8001cd0:	6013      	str	r3, [r2, #0]
	}
	if (pid < -velocity) {
 8001cd2:	4b67      	ldr	r3, [pc, #412]	; (8001e70 <lineTracking+0x284>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	425b      	negs	r3, r3
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7fe faf1 	bl	80002c0 <__aeabi_i2f>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	4b62      	ldr	r3, [pc, #392]	; (8001e6c <lineTracking+0x280>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4610      	mov	r0, r2
 8001ce8:	f7fe fcfa 	bl	80006e0 <__aeabi_fcmpgt>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d008      	beq.n	8001d04 <lineTracking+0x118>
		//intUartSend(0);
		pid = -velocity;
 8001cf2:	4b5f      	ldr	r3, [pc, #380]	; (8001e70 <lineTracking+0x284>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	425b      	negs	r3, r3
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7fe fae1 	bl	80002c0 <__aeabi_i2f>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	4a5a      	ldr	r2, [pc, #360]	; (8001e6c <lineTracking+0x280>)
 8001d02:	6013      	str	r3, [r2, #0]
	}
	motLeft = velocity - pid;
 8001d04:	4b5a      	ldr	r3, [pc, #360]	; (8001e70 <lineTracking+0x284>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7fe fad9 	bl	80002c0 <__aeabi_i2f>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	4b56      	ldr	r3, [pc, #344]	; (8001e6c <lineTracking+0x280>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4619      	mov	r1, r3
 8001d16:	4610      	mov	r0, r2
 8001d18:	f7fe fa1c 	bl	8000154 <__aeabi_fsub>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7fe fce8 	bl	80006f4 <__aeabi_f2iz>
 8001d24:	4603      	mov	r3, r0
 8001d26:	4a53      	ldr	r2, [pc, #332]	; (8001e74 <lineTracking+0x288>)
 8001d28:	6013      	str	r3, [r2, #0]
	motRight = velocity + pid;
 8001d2a:	4b51      	ldr	r3, [pc, #324]	; (8001e70 <lineTracking+0x284>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7fe fac6 	bl	80002c0 <__aeabi_i2f>
 8001d34:	4602      	mov	r2, r0
 8001d36:	4b4d      	ldr	r3, [pc, #308]	; (8001e6c <lineTracking+0x280>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	4610      	mov	r0, r2
 8001d3e:	f7fe fa0b 	bl	8000158 <__addsf3>
 8001d42:	4603      	mov	r3, r0
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7fe fcd5 	bl	80006f4 <__aeabi_f2iz>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	4a4a      	ldr	r2, [pc, #296]	; (8001e78 <lineTracking+0x28c>)
 8001d4e:	6013      	str	r3, [r2, #0]
	if (motLeft < -1000) {
 8001d50:	4b48      	ldr	r3, [pc, #288]	; (8001e74 <lineTracking+0x288>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8001d58:	da02      	bge.n	8001d60 <lineTracking+0x174>
		motLeft = -1000;
 8001d5a:	4b46      	ldr	r3, [pc, #280]	; (8001e74 <lineTracking+0x288>)
 8001d5c:	4a47      	ldr	r2, [pc, #284]	; (8001e7c <lineTracking+0x290>)
 8001d5e:	601a      	str	r2, [r3, #0]
	}
	if (motRight < -1000) {
 8001d60:	4b45      	ldr	r3, [pc, #276]	; (8001e78 <lineTracking+0x28c>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8001d68:	da02      	bge.n	8001d70 <lineTracking+0x184>
		motRight = -1000;
 8001d6a:	4b43      	ldr	r3, [pc, #268]	; (8001e78 <lineTracking+0x28c>)
 8001d6c:	4a43      	ldr	r2, [pc, #268]	; (8001e7c <lineTracking+0x290>)
 8001d6e:	601a      	str	r2, [r3, #0]
	}

	previousErrorP = errorP;
 8001d70:	4b34      	ldr	r3, [pc, #208]	; (8001e44 <lineTracking+0x258>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a38      	ldr	r2, [pc, #224]	; (8001e58 <lineTracking+0x26c>)
 8001d76:	6013      	str	r3, [r2, #0]
	motRight = constrain(motRight, -1000, 1000);
 8001d78:	4b3f      	ldr	r3, [pc, #252]	; (8001e78 <lineTracking+0x28c>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d80:	493e      	ldr	r1, [pc, #248]	; (8001e7c <lineTracking+0x290>)
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7fe fd43 	bl	800080e <constrain>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	4a3b      	ldr	r2, [pc, #236]	; (8001e78 <lineTracking+0x28c>)
 8001d8c:	6013      	str	r3, [r2, #0]
	motLeft = constrain(motLeft, -1000, 1000);
 8001d8e:	4b39      	ldr	r3, [pc, #228]	; (8001e74 <lineTracking+0x288>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d96:	4939      	ldr	r1, [pc, #228]	; (8001e7c <lineTracking+0x290>)
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7fe fd38 	bl	800080e <constrain>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	4a34      	ldr	r2, [pc, #208]	; (8001e74 <lineTracking+0x288>)
 8001da2:	6013      	str	r3, [r2, #0]

	motRight = MAP(motRight, -1000, 1000, MINVELOCITY, MAXVELOCITY);
 8001da4:	4b34      	ldr	r3, [pc, #208]	; (8001e78 <lineTracking+0x28c>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001dae:	9300      	str	r3, [sp, #0]
 8001db0:	f649 4340 	movw	r3, #40000	; 0x9c40
 8001db4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001db8:	4930      	ldr	r1, [pc, #192]	; (8001e7c <lineTracking+0x290>)
 8001dba:	f7fe fd0d 	bl	80007d8 <MAP>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	4b2d      	ldr	r3, [pc, #180]	; (8001e78 <lineTracking+0x28c>)
 8001dc4:	601a      	str	r2, [r3, #0]
	motLeft = MAP(motLeft, -1000, 1000, MINVELOCITY, MAXVELOCITY);
 8001dc6:	4b2b      	ldr	r3, [pc, #172]	; (8001e74 <lineTracking+0x288>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001dd0:	9300      	str	r3, [sp, #0]
 8001dd2:	f649 4340 	movw	r3, #40000	; 0x9c40
 8001dd6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001dda:	4928      	ldr	r1, [pc, #160]	; (8001e7c <lineTracking+0x290>)
 8001ddc:	f7fe fcfc 	bl	80007d8 <MAP>
 8001de0:	4603      	mov	r3, r0
 8001de2:	461a      	mov	r2, r3
 8001de4:	4b23      	ldr	r3, [pc, #140]	; (8001e74 <lineTracking+0x288>)
 8001de6:	601a      	str	r2, [r3, #0]

	if (motRight < MINVELOCITY) {
 8001de8:	4b23      	ldr	r3, [pc, #140]	; (8001e78 <lineTracking+0x28c>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8001df0:	4293      	cmp	r3, r2
 8001df2:	dc03      	bgt.n	8001dfc <lineTracking+0x210>
		motRight = MINVELOCITY;
 8001df4:	4b20      	ldr	r3, [pc, #128]	; (8001e78 <lineTracking+0x28c>)
 8001df6:	f649 4240 	movw	r2, #40000	; 0x9c40
 8001dfa:	601a      	str	r2, [r3, #0]
	}

	if (motLeft < MINVELOCITY) {
 8001dfc:	4b1d      	ldr	r3, [pc, #116]	; (8001e74 <lineTracking+0x288>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8001e04:	4293      	cmp	r3, r2
 8001e06:	dc03      	bgt.n	8001e10 <lineTracking+0x224>
		motLeft = MINVELOCITY;
 8001e08:	4b1a      	ldr	r3, [pc, #104]	; (8001e74 <lineTracking+0x288>)
 8001e0a:	f649 4240 	movw	r2, #40000	; 0x9c40
 8001e0e:	601a      	str	r2, [r3, #0]
	}
	if (position != 0) {
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d009      	beq.n	8001e2a <lineTracking+0x23e>
		TIM3->CCR4 = motRight;
 8001e16:	4b18      	ldr	r3, [pc, #96]	; (8001e78 <lineTracking+0x28c>)
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	4b19      	ldr	r3, [pc, #100]	; (8001e80 <lineTracking+0x294>)
 8001e1c:	641a      	str	r2, [r3, #64]	; 0x40
		TIM2->CCR1 = motLeft;
 8001e1e:	4b15      	ldr	r3, [pc, #84]	; (8001e74 <lineTracking+0x288>)
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e26:	635a      	str	r2, [r3, #52]	; 0x34
	} else {
		TIM3->CCR4 = 65535;
		TIM2->CCR1 = 60000;
	}

}
 8001e28:	e008      	b.n	8001e3c <lineTracking+0x250>
		TIM3->CCR4 = 65535;
 8001e2a:	4b15      	ldr	r3, [pc, #84]	; (8001e80 <lineTracking+0x294>)
 8001e2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e30:	641a      	str	r2, [r3, #64]	; 0x40
		TIM2->CCR1 = 60000;
 8001e32:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e36:	f64e 2260 	movw	r2, #60000	; 0xea60
 8001e3a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001e3c:	bf00      	nop
 8001e3e:	3708      	adds	r7, #8
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	20000410 	.word	0x20000410
 8001e48:	20000414 	.word	0x20000414
 8001e4c:	20000418 	.word	0x20000418
 8001e50:	447a0000 	.word	0x447a0000
 8001e54:	20000404 	.word	0x20000404
 8001e58:	2000041c 	.word	0x2000041c
 8001e5c:	2000004c 	.word	0x2000004c
 8001e60:	2000040c 	.word	0x2000040c
 8001e64:	20000048 	.word	0x20000048
 8001e68:	20000408 	.word	0x20000408
 8001e6c:	20000400 	.word	0x20000400
 8001e70:	2000003c 	.word	0x2000003c
 8001e74:	20000420 	.word	0x20000420
 8001e78:	20000424 	.word	0x20000424
 8001e7c:	fffffc18 	.word	0xfffffc18
 8001e80:	40000400 	.word	0x40000400

08001e84 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e84:	480c      	ldr	r0, [pc, #48]	; (8001eb8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e86:	490d      	ldr	r1, [pc, #52]	; (8001ebc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e88:	4a0d      	ldr	r2, [pc, #52]	; (8001ec0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e8c:	e002      	b.n	8001e94 <LoopCopyDataInit>

08001e8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e92:	3304      	adds	r3, #4

08001e94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e98:	d3f9      	bcc.n	8001e8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e9a:	4a0a      	ldr	r2, [pc, #40]	; (8001ec4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e9c:	4c0a      	ldr	r4, [pc, #40]	; (8001ec8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ea0:	e001      	b.n	8001ea6 <LoopFillZerobss>

08001ea2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ea2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ea4:	3204      	adds	r2, #4

08001ea6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ea6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ea8:	d3fb      	bcc.n	8001ea2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001eaa:	f7ff fcbb 	bl	8001824 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001eae:	f002 fbcb 	bl	8004648 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001eb2:	f7fe fd3d 	bl	8000930 <main>
  bx lr
 8001eb6:	4770      	bx	lr
  ldr r0, =_sdata
 8001eb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ebc:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 8001ec0:	08004854 	.word	0x08004854
  ldr r2, =_sbss
 8001ec4:	200000bc 	.word	0x200000bc
  ldr r4, =_ebss
 8001ec8:	2000043c 	.word	0x2000043c

08001ecc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ecc:	e7fe      	b.n	8001ecc <ADC1_2_IRQHandler>
	...

08001ed0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ed4:	4b08      	ldr	r3, [pc, #32]	; (8001ef8 <HAL_Init+0x28>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a07      	ldr	r2, [pc, #28]	; (8001ef8 <HAL_Init+0x28>)
 8001eda:	f043 0310 	orr.w	r3, r3, #16
 8001ede:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ee0:	2003      	movs	r0, #3
 8001ee2:	f000 fd09 	bl	80028f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ee6:	200f      	movs	r0, #15
 8001ee8:	f000 f808 	bl	8001efc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001eec:	f7ff fab8 	bl	8001460 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	40022000 	.word	0x40022000

08001efc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f04:	4b12      	ldr	r3, [pc, #72]	; (8001f50 <HAL_InitTick+0x54>)
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	4b12      	ldr	r3, [pc, #72]	; (8001f54 <HAL_InitTick+0x58>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f12:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f000 fd21 	bl	8002962 <HAL_SYSTICK_Config>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e00e      	b.n	8001f48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2b0f      	cmp	r3, #15
 8001f2e:	d80a      	bhi.n	8001f46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f30:	2200      	movs	r2, #0
 8001f32:	6879      	ldr	r1, [r7, #4]
 8001f34:	f04f 30ff 	mov.w	r0, #4294967295
 8001f38:	f000 fce9 	bl	800290e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f3c:	4a06      	ldr	r2, [pc, #24]	; (8001f58 <HAL_InitTick+0x5c>)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f42:	2300      	movs	r3, #0
 8001f44:	e000      	b.n	8001f48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	20000038 	.word	0x20000038
 8001f54:	20000054 	.word	0x20000054
 8001f58:	20000050 	.word	0x20000050

08001f5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f60:	4b05      	ldr	r3, [pc, #20]	; (8001f78 <HAL_IncTick+0x1c>)
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	461a      	mov	r2, r3
 8001f66:	4b05      	ldr	r3, [pc, #20]	; (8001f7c <HAL_IncTick+0x20>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	4a03      	ldr	r2, [pc, #12]	; (8001f7c <HAL_IncTick+0x20>)
 8001f6e:	6013      	str	r3, [r2, #0]
}
 8001f70:	bf00      	nop
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bc80      	pop	{r7}
 8001f76:	4770      	bx	lr
 8001f78:	20000054 	.word	0x20000054
 8001f7c:	20000428 	.word	0x20000428

08001f80 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  return uwTick;
 8001f84:	4b02      	ldr	r3, [pc, #8]	; (8001f90 <HAL_GetTick+0x10>)
 8001f86:	681b      	ldr	r3, [r3, #0]
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bc80      	pop	{r7}
 8001f8e:	4770      	bx	lr
 8001f90:	20000428 	.word	0x20000428

08001f94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f9c:	f7ff fff0 	bl	8001f80 <HAL_GetTick>
 8001fa0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fac:	d005      	beq.n	8001fba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fae:	4b0a      	ldr	r3, [pc, #40]	; (8001fd8 <HAL_Delay+0x44>)
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fba:	bf00      	nop
 8001fbc:	f7ff ffe0 	bl	8001f80 <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	68fa      	ldr	r2, [r7, #12]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d8f7      	bhi.n	8001fbc <HAL_Delay+0x28>
  {
  }
}
 8001fcc:	bf00      	nop
 8001fce:	bf00      	nop
 8001fd0:	3710      	adds	r7, #16
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	20000054 	.word	0x20000054

08001fdc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b086      	sub	sp, #24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001fec:	2300      	movs	r3, #0
 8001fee:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d101      	bne.n	8001ffe <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e0be      	b.n	800217c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002008:	2b00      	cmp	r3, #0
 800200a:	d109      	bne.n	8002020 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f7ff fa52 	bl	80014c4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f000 faf5 	bl	8002610 <ADC_ConversionStop_Disable>
 8002026:	4603      	mov	r3, r0
 8002028:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800202e:	f003 0310 	and.w	r3, r3, #16
 8002032:	2b00      	cmp	r3, #0
 8002034:	f040 8099 	bne.w	800216a <HAL_ADC_Init+0x18e>
 8002038:	7dfb      	ldrb	r3, [r7, #23]
 800203a:	2b00      	cmp	r3, #0
 800203c:	f040 8095 	bne.w	800216a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002044:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002048:	f023 0302 	bic.w	r3, r3, #2
 800204c:	f043 0202 	orr.w	r2, r3, #2
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800205c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	7b1b      	ldrb	r3, [r3, #12]
 8002062:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002064:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002066:	68ba      	ldr	r2, [r7, #8]
 8002068:	4313      	orrs	r3, r2
 800206a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002074:	d003      	beq.n	800207e <HAL_ADC_Init+0xa2>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	2b01      	cmp	r3, #1
 800207c:	d102      	bne.n	8002084 <HAL_ADC_Init+0xa8>
 800207e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002082:	e000      	b.n	8002086 <HAL_ADC_Init+0xaa>
 8002084:	2300      	movs	r3, #0
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	4313      	orrs	r3, r2
 800208a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	7d1b      	ldrb	r3, [r3, #20]
 8002090:	2b01      	cmp	r3, #1
 8002092:	d119      	bne.n	80020c8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	7b1b      	ldrb	r3, [r3, #12]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d109      	bne.n	80020b0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	3b01      	subs	r3, #1
 80020a2:	035a      	lsls	r2, r3, #13
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80020ac:	613b      	str	r3, [r7, #16]
 80020ae:	e00b      	b.n	80020c8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b4:	f043 0220 	orr.w	r2, r3, #32
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c0:	f043 0201 	orr.w	r2, r3, #1
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	693a      	ldr	r2, [r7, #16]
 80020d8:	430a      	orrs	r2, r1
 80020da:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	689a      	ldr	r2, [r3, #8]
 80020e2:	4b28      	ldr	r3, [pc, #160]	; (8002184 <HAL_ADC_Init+0x1a8>)
 80020e4:	4013      	ands	r3, r2
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	6812      	ldr	r2, [r2, #0]
 80020ea:	68b9      	ldr	r1, [r7, #8]
 80020ec:	430b      	orrs	r3, r1
 80020ee:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020f8:	d003      	beq.n	8002102 <HAL_ADC_Init+0x126>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d104      	bne.n	800210c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	3b01      	subs	r3, #1
 8002108:	051b      	lsls	r3, r3, #20
 800210a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002112:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	430a      	orrs	r2, r1
 800211e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	689a      	ldr	r2, [r3, #8]
 8002126:	4b18      	ldr	r3, [pc, #96]	; (8002188 <HAL_ADC_Init+0x1ac>)
 8002128:	4013      	ands	r3, r2
 800212a:	68ba      	ldr	r2, [r7, #8]
 800212c:	429a      	cmp	r2, r3
 800212e:	d10b      	bne.n	8002148 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800213a:	f023 0303 	bic.w	r3, r3, #3
 800213e:	f043 0201 	orr.w	r2, r3, #1
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002146:	e018      	b.n	800217a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800214c:	f023 0312 	bic.w	r3, r3, #18
 8002150:	f043 0210 	orr.w	r2, r3, #16
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800215c:	f043 0201 	orr.w	r2, r3, #1
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002168:	e007      	b.n	800217a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800216e:	f043 0210 	orr.w	r2, r3, #16
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800217a:	7dfb      	ldrb	r3, [r7, #23]
}
 800217c:	4618      	mov	r0, r3
 800217e:	3718      	adds	r7, #24
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	ffe1f7fd 	.word	0xffe1f7fd
 8002188:	ff1f0efe 	.word	0xff1f0efe

0800218c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002198:	2300      	movs	r3, #0
 800219a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a64      	ldr	r2, [pc, #400]	; (8002334 <HAL_ADC_Start_DMA+0x1a8>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d004      	beq.n	80021b0 <HAL_ADC_Start_DMA+0x24>
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a63      	ldr	r2, [pc, #396]	; (8002338 <HAL_ADC_Start_DMA+0x1ac>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d106      	bne.n	80021be <HAL_ADC_Start_DMA+0x32>
 80021b0:	4b60      	ldr	r3, [pc, #384]	; (8002334 <HAL_ADC_Start_DMA+0x1a8>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	f040 80b3 	bne.w	8002324 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d101      	bne.n	80021cc <HAL_ADC_Start_DMA+0x40>
 80021c8:	2302      	movs	r3, #2
 80021ca:	e0ae      	b.n	800232a <HAL_ADC_Start_DMA+0x19e>
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80021d4:	68f8      	ldr	r0, [r7, #12]
 80021d6:	f000 f9c1 	bl	800255c <ADC_Enable>
 80021da:	4603      	mov	r3, r0
 80021dc:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80021de:	7dfb      	ldrb	r3, [r7, #23]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	f040 809a 	bne.w	800231a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ea:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80021ee:	f023 0301 	bic.w	r3, r3, #1
 80021f2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a4e      	ldr	r2, [pc, #312]	; (8002338 <HAL_ADC_Start_DMA+0x1ac>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d105      	bne.n	8002210 <HAL_ADC_Start_DMA+0x84>
 8002204:	4b4b      	ldr	r3, [pc, #300]	; (8002334 <HAL_ADC_Start_DMA+0x1a8>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d115      	bne.n	800223c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002214:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002226:	2b00      	cmp	r3, #0
 8002228:	d026      	beq.n	8002278 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800222e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002232:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800223a:	e01d      	b.n	8002278 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002240:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a39      	ldr	r2, [pc, #228]	; (8002334 <HAL_ADC_Start_DMA+0x1a8>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d004      	beq.n	800225c <HAL_ADC_Start_DMA+0xd0>
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a38      	ldr	r2, [pc, #224]	; (8002338 <HAL_ADC_Start_DMA+0x1ac>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d10d      	bne.n	8002278 <HAL_ADC_Start_DMA+0xec>
 800225c:	4b35      	ldr	r3, [pc, #212]	; (8002334 <HAL_ADC_Start_DMA+0x1a8>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002264:	2b00      	cmp	r3, #0
 8002266:	d007      	beq.n	8002278 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800226c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002270:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800227c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d006      	beq.n	8002292 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002288:	f023 0206 	bic.w	r2, r3, #6
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002290:	e002      	b.n	8002298 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2200      	movs	r2, #0
 8002296:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2200      	movs	r2, #0
 800229c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6a1b      	ldr	r3, [r3, #32]
 80022a4:	4a25      	ldr	r2, [pc, #148]	; (800233c <HAL_ADC_Start_DMA+0x1b0>)
 80022a6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6a1b      	ldr	r3, [r3, #32]
 80022ac:	4a24      	ldr	r2, [pc, #144]	; (8002340 <HAL_ADC_Start_DMA+0x1b4>)
 80022ae:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6a1b      	ldr	r3, [r3, #32]
 80022b4:	4a23      	ldr	r2, [pc, #140]	; (8002344 <HAL_ADC_Start_DMA+0x1b8>)
 80022b6:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f06f 0202 	mvn.w	r2, #2
 80022c0:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	689a      	ldr	r2, [r3, #8]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022d0:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6a18      	ldr	r0, [r3, #32]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	334c      	adds	r3, #76	; 0x4c
 80022dc:	4619      	mov	r1, r3
 80022de:	68ba      	ldr	r2, [r7, #8]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f000 fba5 	bl	8002a30 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80022f0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80022f4:	d108      	bne.n	8002308 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	689a      	ldr	r2, [r3, #8]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002304:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002306:	e00f      	b.n	8002328 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	689a      	ldr	r2, [r3, #8]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002316:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002318:	e006      	b.n	8002328 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8002322:	e001      	b.n	8002328 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002328:	7dfb      	ldrb	r3, [r7, #23]
}
 800232a:	4618      	mov	r0, r3
 800232c:	3718      	adds	r7, #24
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	40012400 	.word	0x40012400
 8002338:	40012800 	.word	0x40012800
 800233c:	08002693 	.word	0x08002693
 8002340:	0800270f 	.word	0x0800270f
 8002344:	0800272b 	.word	0x0800272b

08002348 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002350:	bf00      	nop
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	bc80      	pop	{r7}
 8002358:	4770      	bx	lr

0800235a <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800235a:	b480      	push	{r7}
 800235c:	b083      	sub	sp, #12
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002362:	bf00      	nop
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	bc80      	pop	{r7}
 800236a:	4770      	bx	lr

0800236c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800236c:	b480      	push	{r7}
 800236e:	b085      	sub	sp, #20
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002376:	2300      	movs	r3, #0
 8002378:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800237a:	2300      	movs	r3, #0
 800237c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002384:	2b01      	cmp	r3, #1
 8002386:	d101      	bne.n	800238c <HAL_ADC_ConfigChannel+0x20>
 8002388:	2302      	movs	r3, #2
 800238a:	e0dc      	b.n	8002546 <HAL_ADC_ConfigChannel+0x1da>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	2b06      	cmp	r3, #6
 800239a:	d81c      	bhi.n	80023d6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685a      	ldr	r2, [r3, #4]
 80023a6:	4613      	mov	r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	4413      	add	r3, r2
 80023ac:	3b05      	subs	r3, #5
 80023ae:	221f      	movs	r2, #31
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	43db      	mvns	r3, r3
 80023b6:	4019      	ands	r1, r3
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	6818      	ldr	r0, [r3, #0]
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685a      	ldr	r2, [r3, #4]
 80023c0:	4613      	mov	r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	4413      	add	r3, r2
 80023c6:	3b05      	subs	r3, #5
 80023c8:	fa00 f203 	lsl.w	r2, r0, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	430a      	orrs	r2, r1
 80023d2:	635a      	str	r2, [r3, #52]	; 0x34
 80023d4:	e03c      	b.n	8002450 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	2b0c      	cmp	r3, #12
 80023dc:	d81c      	bhi.n	8002418 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685a      	ldr	r2, [r3, #4]
 80023e8:	4613      	mov	r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	4413      	add	r3, r2
 80023ee:	3b23      	subs	r3, #35	; 0x23
 80023f0:	221f      	movs	r2, #31
 80023f2:	fa02 f303 	lsl.w	r3, r2, r3
 80023f6:	43db      	mvns	r3, r3
 80023f8:	4019      	ands	r1, r3
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	6818      	ldr	r0, [r3, #0]
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685a      	ldr	r2, [r3, #4]
 8002402:	4613      	mov	r3, r2
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	4413      	add	r3, r2
 8002408:	3b23      	subs	r3, #35	; 0x23
 800240a:	fa00 f203 	lsl.w	r2, r0, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	430a      	orrs	r2, r1
 8002414:	631a      	str	r2, [r3, #48]	; 0x30
 8002416:	e01b      	b.n	8002450 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685a      	ldr	r2, [r3, #4]
 8002422:	4613      	mov	r3, r2
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	4413      	add	r3, r2
 8002428:	3b41      	subs	r3, #65	; 0x41
 800242a:	221f      	movs	r2, #31
 800242c:	fa02 f303 	lsl.w	r3, r2, r3
 8002430:	43db      	mvns	r3, r3
 8002432:	4019      	ands	r1, r3
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	6818      	ldr	r0, [r3, #0]
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685a      	ldr	r2, [r3, #4]
 800243c:	4613      	mov	r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	4413      	add	r3, r2
 8002442:	3b41      	subs	r3, #65	; 0x41
 8002444:	fa00 f203 	lsl.w	r2, r0, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	430a      	orrs	r2, r1
 800244e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2b09      	cmp	r3, #9
 8002456:	d91c      	bls.n	8002492 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	68d9      	ldr	r1, [r3, #12]
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	4613      	mov	r3, r2
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	4413      	add	r3, r2
 8002468:	3b1e      	subs	r3, #30
 800246a:	2207      	movs	r2, #7
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	43db      	mvns	r3, r3
 8002472:	4019      	ands	r1, r3
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	6898      	ldr	r0, [r3, #8]
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	4613      	mov	r3, r2
 800247e:	005b      	lsls	r3, r3, #1
 8002480:	4413      	add	r3, r2
 8002482:	3b1e      	subs	r3, #30
 8002484:	fa00 f203 	lsl.w	r2, r0, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	430a      	orrs	r2, r1
 800248e:	60da      	str	r2, [r3, #12]
 8002490:	e019      	b.n	80024c6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	6919      	ldr	r1, [r3, #16]
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	4613      	mov	r3, r2
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	4413      	add	r3, r2
 80024a2:	2207      	movs	r2, #7
 80024a4:	fa02 f303 	lsl.w	r3, r2, r3
 80024a8:	43db      	mvns	r3, r3
 80024aa:	4019      	ands	r1, r3
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	6898      	ldr	r0, [r3, #8]
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	4613      	mov	r3, r2
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	4413      	add	r3, r2
 80024ba:	fa00 f203 	lsl.w	r2, r0, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	430a      	orrs	r2, r1
 80024c4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2b10      	cmp	r3, #16
 80024cc:	d003      	beq.n	80024d6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80024d2:	2b11      	cmp	r3, #17
 80024d4:	d132      	bne.n	800253c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a1d      	ldr	r2, [pc, #116]	; (8002550 <HAL_ADC_ConfigChannel+0x1e4>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d125      	bne.n	800252c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d126      	bne.n	800253c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	689a      	ldr	r2, [r3, #8]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80024fc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2b10      	cmp	r3, #16
 8002504:	d11a      	bne.n	800253c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002506:	4b13      	ldr	r3, [pc, #76]	; (8002554 <HAL_ADC_ConfigChannel+0x1e8>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a13      	ldr	r2, [pc, #76]	; (8002558 <HAL_ADC_ConfigChannel+0x1ec>)
 800250c:	fba2 2303 	umull	r2, r3, r2, r3
 8002510:	0c9a      	lsrs	r2, r3, #18
 8002512:	4613      	mov	r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	4413      	add	r3, r2
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800251c:	e002      	b.n	8002524 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	3b01      	subs	r3, #1
 8002522:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d1f9      	bne.n	800251e <HAL_ADC_ConfigChannel+0x1b2>
 800252a:	e007      	b.n	800253c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002530:	f043 0220 	orr.w	r2, r3, #32
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002544:	7bfb      	ldrb	r3, [r7, #15]
}
 8002546:	4618      	mov	r0, r3
 8002548:	3714      	adds	r7, #20
 800254a:	46bd      	mov	sp, r7
 800254c:	bc80      	pop	{r7}
 800254e:	4770      	bx	lr
 8002550:	40012400 	.word	0x40012400
 8002554:	20000038 	.word	0x20000038
 8002558:	431bde83 	.word	0x431bde83

0800255c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002564:	2300      	movs	r3, #0
 8002566:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002568:	2300      	movs	r3, #0
 800256a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	2b01      	cmp	r3, #1
 8002578:	d040      	beq.n	80025fc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	689a      	ldr	r2, [r3, #8]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f042 0201 	orr.w	r2, r2, #1
 8002588:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800258a:	4b1f      	ldr	r3, [pc, #124]	; (8002608 <ADC_Enable+0xac>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a1f      	ldr	r2, [pc, #124]	; (800260c <ADC_Enable+0xb0>)
 8002590:	fba2 2303 	umull	r2, r3, r2, r3
 8002594:	0c9b      	lsrs	r3, r3, #18
 8002596:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002598:	e002      	b.n	80025a0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	3b01      	subs	r3, #1
 800259e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d1f9      	bne.n	800259a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80025a6:	f7ff fceb 	bl	8001f80 <HAL_GetTick>
 80025aa:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80025ac:	e01f      	b.n	80025ee <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80025ae:	f7ff fce7 	bl	8001f80 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d918      	bls.n	80025ee <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d011      	beq.n	80025ee <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ce:	f043 0210 	orr.w	r2, r3, #16
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025da:	f043 0201 	orr.w	r2, r3, #1
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e007      	b.n	80025fe <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f003 0301 	and.w	r3, r3, #1
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d1d8      	bne.n	80025ae <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3710      	adds	r7, #16
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	20000038 	.word	0x20000038
 800260c:	431bde83 	.word	0x431bde83

08002610 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002618:	2300      	movs	r3, #0
 800261a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	2b01      	cmp	r3, #1
 8002628:	d12e      	bne.n	8002688 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	689a      	ldr	r2, [r3, #8]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f022 0201 	bic.w	r2, r2, #1
 8002638:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800263a:	f7ff fca1 	bl	8001f80 <HAL_GetTick>
 800263e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002640:	e01b      	b.n	800267a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002642:	f7ff fc9d 	bl	8001f80 <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	2b02      	cmp	r3, #2
 800264e:	d914      	bls.n	800267a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	2b01      	cmp	r3, #1
 800265c:	d10d      	bne.n	800267a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002662:	f043 0210 	orr.w	r2, r3, #16
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800266e:	f043 0201 	orr.w	r2, r3, #1
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e007      	b.n	800268a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f003 0301 	and.w	r3, r3, #1
 8002684:	2b01      	cmp	r3, #1
 8002686:	d0dc      	beq.n	8002642 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002688:	2300      	movs	r3, #0
}
 800268a:	4618      	mov	r0, r3
 800268c:	3710      	adds	r7, #16
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002692:	b580      	push	{r7, lr}
 8002694:	b084      	sub	sp, #16
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269e:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d127      	bne.n	80026fc <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80026c2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80026c6:	d115      	bne.n	80026f4 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d111      	bne.n	80026f4 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d105      	bne.n	80026f4 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ec:	f043 0201 	orr.w	r2, r3, #1
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80026f4:	68f8      	ldr	r0, [r7, #12]
 80026f6:	f7fe fda1 	bl	800123c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80026fa:	e004      	b.n	8002706 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6a1b      	ldr	r3, [r3, #32]
 8002700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	4798      	blx	r3
}
 8002706:	bf00      	nop
 8002708:	3710      	adds	r7, #16
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b084      	sub	sp, #16
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800271c:	68f8      	ldr	r0, [r7, #12]
 800271e:	f7ff fe13 	bl	8002348 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002722:	bf00      	nop
 8002724:	3710      	adds	r7, #16
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b084      	sub	sp, #16
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002736:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800273c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002748:	f043 0204 	orr.w	r2, r3, #4
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002750:	68f8      	ldr	r0, [r7, #12]
 8002752:	f7ff fe02 	bl	800235a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002756:	bf00      	nop
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
	...

08002760 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002760:	b480      	push	{r7}
 8002762:	b085      	sub	sp, #20
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f003 0307 	and.w	r3, r3, #7
 800276e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002770:	4b0c      	ldr	r3, [pc, #48]	; (80027a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002776:	68ba      	ldr	r2, [r7, #8]
 8002778:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800277c:	4013      	ands	r3, r2
 800277e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002788:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800278c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002790:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002792:	4a04      	ldr	r2, [pc, #16]	; (80027a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	60d3      	str	r3, [r2, #12]
}
 8002798:	bf00      	nop
 800279a:	3714      	adds	r7, #20
 800279c:	46bd      	mov	sp, r7
 800279e:	bc80      	pop	{r7}
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	e000ed00 	.word	0xe000ed00

080027a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027ac:	4b04      	ldr	r3, [pc, #16]	; (80027c0 <__NVIC_GetPriorityGrouping+0x18>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	0a1b      	lsrs	r3, r3, #8
 80027b2:	f003 0307 	and.w	r3, r3, #7
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bc80      	pop	{r7}
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	e000ed00 	.word	0xe000ed00

080027c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	4603      	mov	r3, r0
 80027cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	db0b      	blt.n	80027ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027d6:	79fb      	ldrb	r3, [r7, #7]
 80027d8:	f003 021f 	and.w	r2, r3, #31
 80027dc:	4906      	ldr	r1, [pc, #24]	; (80027f8 <__NVIC_EnableIRQ+0x34>)
 80027de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e2:	095b      	lsrs	r3, r3, #5
 80027e4:	2001      	movs	r0, #1
 80027e6:	fa00 f202 	lsl.w	r2, r0, r2
 80027ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027ee:	bf00      	nop
 80027f0:	370c      	adds	r7, #12
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bc80      	pop	{r7}
 80027f6:	4770      	bx	lr
 80027f8:	e000e100 	.word	0xe000e100

080027fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	4603      	mov	r3, r0
 8002804:	6039      	str	r1, [r7, #0]
 8002806:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280c:	2b00      	cmp	r3, #0
 800280e:	db0a      	blt.n	8002826 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	b2da      	uxtb	r2, r3
 8002814:	490c      	ldr	r1, [pc, #48]	; (8002848 <__NVIC_SetPriority+0x4c>)
 8002816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281a:	0112      	lsls	r2, r2, #4
 800281c:	b2d2      	uxtb	r2, r2
 800281e:	440b      	add	r3, r1
 8002820:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002824:	e00a      	b.n	800283c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	b2da      	uxtb	r2, r3
 800282a:	4908      	ldr	r1, [pc, #32]	; (800284c <__NVIC_SetPriority+0x50>)
 800282c:	79fb      	ldrb	r3, [r7, #7]
 800282e:	f003 030f 	and.w	r3, r3, #15
 8002832:	3b04      	subs	r3, #4
 8002834:	0112      	lsls	r2, r2, #4
 8002836:	b2d2      	uxtb	r2, r2
 8002838:	440b      	add	r3, r1
 800283a:	761a      	strb	r2, [r3, #24]
}
 800283c:	bf00      	nop
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	bc80      	pop	{r7}
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	e000e100 	.word	0xe000e100
 800284c:	e000ed00 	.word	0xe000ed00

08002850 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002850:	b480      	push	{r7}
 8002852:	b089      	sub	sp, #36	; 0x24
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f003 0307 	and.w	r3, r3, #7
 8002862:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	f1c3 0307 	rsb	r3, r3, #7
 800286a:	2b04      	cmp	r3, #4
 800286c:	bf28      	it	cs
 800286e:	2304      	movcs	r3, #4
 8002870:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	3304      	adds	r3, #4
 8002876:	2b06      	cmp	r3, #6
 8002878:	d902      	bls.n	8002880 <NVIC_EncodePriority+0x30>
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	3b03      	subs	r3, #3
 800287e:	e000      	b.n	8002882 <NVIC_EncodePriority+0x32>
 8002880:	2300      	movs	r3, #0
 8002882:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002884:	f04f 32ff 	mov.w	r2, #4294967295
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	43da      	mvns	r2, r3
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	401a      	ands	r2, r3
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002898:	f04f 31ff 	mov.w	r1, #4294967295
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	fa01 f303 	lsl.w	r3, r1, r3
 80028a2:	43d9      	mvns	r1, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028a8:	4313      	orrs	r3, r2
         );
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3724      	adds	r7, #36	; 0x24
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bc80      	pop	{r7}
 80028b2:	4770      	bx	lr

080028b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	3b01      	subs	r3, #1
 80028c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028c4:	d301      	bcc.n	80028ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028c6:	2301      	movs	r3, #1
 80028c8:	e00f      	b.n	80028ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028ca:	4a0a      	ldr	r2, [pc, #40]	; (80028f4 <SysTick_Config+0x40>)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	3b01      	subs	r3, #1
 80028d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028d2:	210f      	movs	r1, #15
 80028d4:	f04f 30ff 	mov.w	r0, #4294967295
 80028d8:	f7ff ff90 	bl	80027fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028dc:	4b05      	ldr	r3, [pc, #20]	; (80028f4 <SysTick_Config+0x40>)
 80028de:	2200      	movs	r2, #0
 80028e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028e2:	4b04      	ldr	r3, [pc, #16]	; (80028f4 <SysTick_Config+0x40>)
 80028e4:	2207      	movs	r2, #7
 80028e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	e000e010 	.word	0xe000e010

080028f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f7ff ff2d 	bl	8002760 <__NVIC_SetPriorityGrouping>
}
 8002906:	bf00      	nop
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800290e:	b580      	push	{r7, lr}
 8002910:	b086      	sub	sp, #24
 8002912:	af00      	add	r7, sp, #0
 8002914:	4603      	mov	r3, r0
 8002916:	60b9      	str	r1, [r7, #8]
 8002918:	607a      	str	r2, [r7, #4]
 800291a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800291c:	2300      	movs	r3, #0
 800291e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002920:	f7ff ff42 	bl	80027a8 <__NVIC_GetPriorityGrouping>
 8002924:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	68b9      	ldr	r1, [r7, #8]
 800292a:	6978      	ldr	r0, [r7, #20]
 800292c:	f7ff ff90 	bl	8002850 <NVIC_EncodePriority>
 8002930:	4602      	mov	r2, r0
 8002932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002936:	4611      	mov	r1, r2
 8002938:	4618      	mov	r0, r3
 800293a:	f7ff ff5f 	bl	80027fc <__NVIC_SetPriority>
}
 800293e:	bf00      	nop
 8002940:	3718      	adds	r7, #24
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b082      	sub	sp, #8
 800294a:	af00      	add	r7, sp, #0
 800294c:	4603      	mov	r3, r0
 800294e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002954:	4618      	mov	r0, r3
 8002956:	f7ff ff35 	bl	80027c4 <__NVIC_EnableIRQ>
}
 800295a:	bf00      	nop
 800295c:	3708      	adds	r7, #8
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002962:	b580      	push	{r7, lr}
 8002964:	b082      	sub	sp, #8
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f7ff ffa2 	bl	80028b4 <SysTick_Config>
 8002970:	4603      	mov	r3, r0
}
 8002972:	4618      	mov	r0, r3
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
	...

0800297c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800297c:	b480      	push	{r7}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002984:	2300      	movs	r3, #0
 8002986:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d101      	bne.n	8002992 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e043      	b.n	8002a1a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	461a      	mov	r2, r3
 8002998:	4b22      	ldr	r3, [pc, #136]	; (8002a24 <HAL_DMA_Init+0xa8>)
 800299a:	4413      	add	r3, r2
 800299c:	4a22      	ldr	r2, [pc, #136]	; (8002a28 <HAL_DMA_Init+0xac>)
 800299e:	fba2 2303 	umull	r2, r3, r2, r3
 80029a2:	091b      	lsrs	r3, r3, #4
 80029a4:	009a      	lsls	r2, r3, #2
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a1f      	ldr	r2, [pc, #124]	; (8002a2c <HAL_DMA_Init+0xb0>)
 80029ae:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2202      	movs	r2, #2
 80029b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80029c6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80029ca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80029d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	695b      	ldr	r3, [r3, #20]
 80029e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	69db      	ldr	r3, [r3, #28]
 80029f2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80029f4:	68fa      	ldr	r2, [r7, #12]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	68fa      	ldr	r2, [r7, #12]
 8002a00:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3714      	adds	r7, #20
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bc80      	pop	{r7}
 8002a22:	4770      	bx	lr
 8002a24:	bffdfff8 	.word	0xbffdfff8
 8002a28:	cccccccd 	.word	0xcccccccd
 8002a2c:	40020000 	.word	0x40020000

08002a30 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b086      	sub	sp, #24
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	607a      	str	r2, [r7, #4]
 8002a3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d101      	bne.n	8002a50 <HAL_DMA_Start_IT+0x20>
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	e04a      	b.n	8002ae6 <HAL_DMA_Start_IT+0xb6>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d13a      	bne.n	8002ad8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2202      	movs	r2, #2
 8002a66:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f022 0201 	bic.w	r2, r2, #1
 8002a7e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	68b9      	ldr	r1, [r7, #8]
 8002a86:	68f8      	ldr	r0, [r7, #12]
 8002a88:	f000 f938 	bl	8002cfc <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d008      	beq.n	8002aa6 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f042 020e 	orr.w	r2, r2, #14
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	e00f      	b.n	8002ac6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f022 0204 	bic.w	r2, r2, #4
 8002ab4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f042 020a 	orr.w	r2, r2, #10
 8002ac4:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f042 0201 	orr.w	r2, r2, #1
 8002ad4:	601a      	str	r2, [r3, #0]
 8002ad6:	e005      	b.n	8002ae4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002ae4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3718      	adds	r7, #24
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
	...

08002af0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0c:	2204      	movs	r2, #4
 8002b0e:	409a      	lsls	r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	4013      	ands	r3, r2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d04f      	beq.n	8002bb8 <HAL_DMA_IRQHandler+0xc8>
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	f003 0304 	and.w	r3, r3, #4
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d04a      	beq.n	8002bb8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0320 	and.w	r3, r3, #32
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d107      	bne.n	8002b40 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f022 0204 	bic.w	r2, r2, #4
 8002b3e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a66      	ldr	r2, [pc, #408]	; (8002ce0 <HAL_DMA_IRQHandler+0x1f0>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d029      	beq.n	8002b9e <HAL_DMA_IRQHandler+0xae>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a65      	ldr	r2, [pc, #404]	; (8002ce4 <HAL_DMA_IRQHandler+0x1f4>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d022      	beq.n	8002b9a <HAL_DMA_IRQHandler+0xaa>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a63      	ldr	r2, [pc, #396]	; (8002ce8 <HAL_DMA_IRQHandler+0x1f8>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d01a      	beq.n	8002b94 <HAL_DMA_IRQHandler+0xa4>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a62      	ldr	r2, [pc, #392]	; (8002cec <HAL_DMA_IRQHandler+0x1fc>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d012      	beq.n	8002b8e <HAL_DMA_IRQHandler+0x9e>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a60      	ldr	r2, [pc, #384]	; (8002cf0 <HAL_DMA_IRQHandler+0x200>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d00a      	beq.n	8002b88 <HAL_DMA_IRQHandler+0x98>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a5f      	ldr	r2, [pc, #380]	; (8002cf4 <HAL_DMA_IRQHandler+0x204>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d102      	bne.n	8002b82 <HAL_DMA_IRQHandler+0x92>
 8002b7c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002b80:	e00e      	b.n	8002ba0 <HAL_DMA_IRQHandler+0xb0>
 8002b82:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002b86:	e00b      	b.n	8002ba0 <HAL_DMA_IRQHandler+0xb0>
 8002b88:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002b8c:	e008      	b.n	8002ba0 <HAL_DMA_IRQHandler+0xb0>
 8002b8e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002b92:	e005      	b.n	8002ba0 <HAL_DMA_IRQHandler+0xb0>
 8002b94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b98:	e002      	b.n	8002ba0 <HAL_DMA_IRQHandler+0xb0>
 8002b9a:	2340      	movs	r3, #64	; 0x40
 8002b9c:	e000      	b.n	8002ba0 <HAL_DMA_IRQHandler+0xb0>
 8002b9e:	2304      	movs	r3, #4
 8002ba0:	4a55      	ldr	r2, [pc, #340]	; (8002cf8 <HAL_DMA_IRQHandler+0x208>)
 8002ba2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f000 8094 	beq.w	8002cd6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002bb6:	e08e      	b.n	8002cd6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbc:	2202      	movs	r2, #2
 8002bbe:	409a      	lsls	r2, r3
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d056      	beq.n	8002c76 <HAL_DMA_IRQHandler+0x186>
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d051      	beq.n	8002c76 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0320 	and.w	r3, r3, #32
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d10b      	bne.n	8002bf8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f022 020a 	bic.w	r2, r2, #10
 8002bee:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a38      	ldr	r2, [pc, #224]	; (8002ce0 <HAL_DMA_IRQHandler+0x1f0>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d029      	beq.n	8002c56 <HAL_DMA_IRQHandler+0x166>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a37      	ldr	r2, [pc, #220]	; (8002ce4 <HAL_DMA_IRQHandler+0x1f4>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d022      	beq.n	8002c52 <HAL_DMA_IRQHandler+0x162>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a35      	ldr	r2, [pc, #212]	; (8002ce8 <HAL_DMA_IRQHandler+0x1f8>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d01a      	beq.n	8002c4c <HAL_DMA_IRQHandler+0x15c>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a34      	ldr	r2, [pc, #208]	; (8002cec <HAL_DMA_IRQHandler+0x1fc>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d012      	beq.n	8002c46 <HAL_DMA_IRQHandler+0x156>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a32      	ldr	r2, [pc, #200]	; (8002cf0 <HAL_DMA_IRQHandler+0x200>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d00a      	beq.n	8002c40 <HAL_DMA_IRQHandler+0x150>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a31      	ldr	r2, [pc, #196]	; (8002cf4 <HAL_DMA_IRQHandler+0x204>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d102      	bne.n	8002c3a <HAL_DMA_IRQHandler+0x14a>
 8002c34:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002c38:	e00e      	b.n	8002c58 <HAL_DMA_IRQHandler+0x168>
 8002c3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c3e:	e00b      	b.n	8002c58 <HAL_DMA_IRQHandler+0x168>
 8002c40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c44:	e008      	b.n	8002c58 <HAL_DMA_IRQHandler+0x168>
 8002c46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c4a:	e005      	b.n	8002c58 <HAL_DMA_IRQHandler+0x168>
 8002c4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c50:	e002      	b.n	8002c58 <HAL_DMA_IRQHandler+0x168>
 8002c52:	2320      	movs	r3, #32
 8002c54:	e000      	b.n	8002c58 <HAL_DMA_IRQHandler+0x168>
 8002c56:	2302      	movs	r3, #2
 8002c58:	4a27      	ldr	r2, [pc, #156]	; (8002cf8 <HAL_DMA_IRQHandler+0x208>)
 8002c5a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d034      	beq.n	8002cd6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002c74:	e02f      	b.n	8002cd6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7a:	2208      	movs	r2, #8
 8002c7c:	409a      	lsls	r2, r3
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	4013      	ands	r3, r2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d028      	beq.n	8002cd8 <HAL_DMA_IRQHandler+0x1e8>
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	f003 0308 	and.w	r3, r3, #8
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d023      	beq.n	8002cd8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f022 020e 	bic.w	r2, r2, #14
 8002c9e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ca8:	2101      	movs	r1, #1
 8002caa:	fa01 f202 	lsl.w	r2, r1, r2
 8002cae:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2201      	movs	r2, #1
 8002cba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d004      	beq.n	8002cd8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	4798      	blx	r3
    }
  }
  return;
 8002cd6:	bf00      	nop
 8002cd8:	bf00      	nop
}
 8002cda:	3710      	adds	r7, #16
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	40020008 	.word	0x40020008
 8002ce4:	4002001c 	.word	0x4002001c
 8002ce8:	40020030 	.word	0x40020030
 8002cec:	40020044 	.word	0x40020044
 8002cf0:	40020058 	.word	0x40020058
 8002cf4:	4002006c 	.word	0x4002006c
 8002cf8:	40020000 	.word	0x40020000

08002cfc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b085      	sub	sp, #20
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	607a      	str	r2, [r7, #4]
 8002d08:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d12:	2101      	movs	r1, #1
 8002d14:	fa01 f202 	lsl.w	r2, r1, r2
 8002d18:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	683a      	ldr	r2, [r7, #0]
 8002d20:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	2b10      	cmp	r3, #16
 8002d28:	d108      	bne.n	8002d3c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68ba      	ldr	r2, [r7, #8]
 8002d38:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002d3a:	e007      	b.n	8002d4c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	68ba      	ldr	r2, [r7, #8]
 8002d42:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	60da      	str	r2, [r3, #12]
}
 8002d4c:	bf00      	nop
 8002d4e:	3714      	adds	r7, #20
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bc80      	pop	{r7}
 8002d54:	4770      	bx	lr
	...

08002d58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b08b      	sub	sp, #44	; 0x2c
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d62:	2300      	movs	r3, #0
 8002d64:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002d66:	2300      	movs	r3, #0
 8002d68:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d6a:	e169      	b.n	8003040 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d70:	fa02 f303 	lsl.w	r3, r2, r3
 8002d74:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	69fa      	ldr	r2, [r7, #28]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	f040 8158 	bne.w	800303a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	4a9a      	ldr	r2, [pc, #616]	; (8002ff8 <HAL_GPIO_Init+0x2a0>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d05e      	beq.n	8002e52 <HAL_GPIO_Init+0xfa>
 8002d94:	4a98      	ldr	r2, [pc, #608]	; (8002ff8 <HAL_GPIO_Init+0x2a0>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d875      	bhi.n	8002e86 <HAL_GPIO_Init+0x12e>
 8002d9a:	4a98      	ldr	r2, [pc, #608]	; (8002ffc <HAL_GPIO_Init+0x2a4>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d058      	beq.n	8002e52 <HAL_GPIO_Init+0xfa>
 8002da0:	4a96      	ldr	r2, [pc, #600]	; (8002ffc <HAL_GPIO_Init+0x2a4>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d86f      	bhi.n	8002e86 <HAL_GPIO_Init+0x12e>
 8002da6:	4a96      	ldr	r2, [pc, #600]	; (8003000 <HAL_GPIO_Init+0x2a8>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d052      	beq.n	8002e52 <HAL_GPIO_Init+0xfa>
 8002dac:	4a94      	ldr	r2, [pc, #592]	; (8003000 <HAL_GPIO_Init+0x2a8>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d869      	bhi.n	8002e86 <HAL_GPIO_Init+0x12e>
 8002db2:	4a94      	ldr	r2, [pc, #592]	; (8003004 <HAL_GPIO_Init+0x2ac>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d04c      	beq.n	8002e52 <HAL_GPIO_Init+0xfa>
 8002db8:	4a92      	ldr	r2, [pc, #584]	; (8003004 <HAL_GPIO_Init+0x2ac>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d863      	bhi.n	8002e86 <HAL_GPIO_Init+0x12e>
 8002dbe:	4a92      	ldr	r2, [pc, #584]	; (8003008 <HAL_GPIO_Init+0x2b0>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d046      	beq.n	8002e52 <HAL_GPIO_Init+0xfa>
 8002dc4:	4a90      	ldr	r2, [pc, #576]	; (8003008 <HAL_GPIO_Init+0x2b0>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d85d      	bhi.n	8002e86 <HAL_GPIO_Init+0x12e>
 8002dca:	2b12      	cmp	r3, #18
 8002dcc:	d82a      	bhi.n	8002e24 <HAL_GPIO_Init+0xcc>
 8002dce:	2b12      	cmp	r3, #18
 8002dd0:	d859      	bhi.n	8002e86 <HAL_GPIO_Init+0x12e>
 8002dd2:	a201      	add	r2, pc, #4	; (adr r2, 8002dd8 <HAL_GPIO_Init+0x80>)
 8002dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dd8:	08002e53 	.word	0x08002e53
 8002ddc:	08002e2d 	.word	0x08002e2d
 8002de0:	08002e3f 	.word	0x08002e3f
 8002de4:	08002e81 	.word	0x08002e81
 8002de8:	08002e87 	.word	0x08002e87
 8002dec:	08002e87 	.word	0x08002e87
 8002df0:	08002e87 	.word	0x08002e87
 8002df4:	08002e87 	.word	0x08002e87
 8002df8:	08002e87 	.word	0x08002e87
 8002dfc:	08002e87 	.word	0x08002e87
 8002e00:	08002e87 	.word	0x08002e87
 8002e04:	08002e87 	.word	0x08002e87
 8002e08:	08002e87 	.word	0x08002e87
 8002e0c:	08002e87 	.word	0x08002e87
 8002e10:	08002e87 	.word	0x08002e87
 8002e14:	08002e87 	.word	0x08002e87
 8002e18:	08002e87 	.word	0x08002e87
 8002e1c:	08002e35 	.word	0x08002e35
 8002e20:	08002e49 	.word	0x08002e49
 8002e24:	4a79      	ldr	r2, [pc, #484]	; (800300c <HAL_GPIO_Init+0x2b4>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d013      	beq.n	8002e52 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002e2a:	e02c      	b.n	8002e86 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	623b      	str	r3, [r7, #32]
          break;
 8002e32:	e029      	b.n	8002e88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	3304      	adds	r3, #4
 8002e3a:	623b      	str	r3, [r7, #32]
          break;
 8002e3c:	e024      	b.n	8002e88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	3308      	adds	r3, #8
 8002e44:	623b      	str	r3, [r7, #32]
          break;
 8002e46:	e01f      	b.n	8002e88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	330c      	adds	r3, #12
 8002e4e:	623b      	str	r3, [r7, #32]
          break;
 8002e50:	e01a      	b.n	8002e88 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d102      	bne.n	8002e60 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002e5a:	2304      	movs	r3, #4
 8002e5c:	623b      	str	r3, [r7, #32]
          break;
 8002e5e:	e013      	b.n	8002e88 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d105      	bne.n	8002e74 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e68:	2308      	movs	r3, #8
 8002e6a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	69fa      	ldr	r2, [r7, #28]
 8002e70:	611a      	str	r2, [r3, #16]
          break;
 8002e72:	e009      	b.n	8002e88 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e74:	2308      	movs	r3, #8
 8002e76:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	69fa      	ldr	r2, [r7, #28]
 8002e7c:	615a      	str	r2, [r3, #20]
          break;
 8002e7e:	e003      	b.n	8002e88 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002e80:	2300      	movs	r3, #0
 8002e82:	623b      	str	r3, [r7, #32]
          break;
 8002e84:	e000      	b.n	8002e88 <HAL_GPIO_Init+0x130>
          break;
 8002e86:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	2bff      	cmp	r3, #255	; 0xff
 8002e8c:	d801      	bhi.n	8002e92 <HAL_GPIO_Init+0x13a>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	e001      	b.n	8002e96 <HAL_GPIO_Init+0x13e>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	3304      	adds	r3, #4
 8002e96:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	2bff      	cmp	r3, #255	; 0xff
 8002e9c:	d802      	bhi.n	8002ea4 <HAL_GPIO_Init+0x14c>
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	e002      	b.n	8002eaa <HAL_GPIO_Init+0x152>
 8002ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea6:	3b08      	subs	r3, #8
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	210f      	movs	r1, #15
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb8:	43db      	mvns	r3, r3
 8002eba:	401a      	ands	r2, r3
 8002ebc:	6a39      	ldr	r1, [r7, #32]
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec4:	431a      	orrs	r2, r3
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	f000 80b1 	beq.w	800303a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002ed8:	4b4d      	ldr	r3, [pc, #308]	; (8003010 <HAL_GPIO_Init+0x2b8>)
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	4a4c      	ldr	r2, [pc, #304]	; (8003010 <HAL_GPIO_Init+0x2b8>)
 8002ede:	f043 0301 	orr.w	r3, r3, #1
 8002ee2:	6193      	str	r3, [r2, #24]
 8002ee4:	4b4a      	ldr	r3, [pc, #296]	; (8003010 <HAL_GPIO_Init+0x2b8>)
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	f003 0301 	and.w	r3, r3, #1
 8002eec:	60bb      	str	r3, [r7, #8]
 8002eee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002ef0:	4a48      	ldr	r2, [pc, #288]	; (8003014 <HAL_GPIO_Init+0x2bc>)
 8002ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef4:	089b      	lsrs	r3, r3, #2
 8002ef6:	3302      	adds	r3, #2
 8002ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002efc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f00:	f003 0303 	and.w	r3, r3, #3
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	220f      	movs	r2, #15
 8002f08:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0c:	43db      	mvns	r3, r3
 8002f0e:	68fa      	ldr	r2, [r7, #12]
 8002f10:	4013      	ands	r3, r2
 8002f12:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4a40      	ldr	r2, [pc, #256]	; (8003018 <HAL_GPIO_Init+0x2c0>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d013      	beq.n	8002f44 <HAL_GPIO_Init+0x1ec>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a3f      	ldr	r2, [pc, #252]	; (800301c <HAL_GPIO_Init+0x2c4>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d00d      	beq.n	8002f40 <HAL_GPIO_Init+0x1e8>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4a3e      	ldr	r2, [pc, #248]	; (8003020 <HAL_GPIO_Init+0x2c8>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d007      	beq.n	8002f3c <HAL_GPIO_Init+0x1e4>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	4a3d      	ldr	r2, [pc, #244]	; (8003024 <HAL_GPIO_Init+0x2cc>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d101      	bne.n	8002f38 <HAL_GPIO_Init+0x1e0>
 8002f34:	2303      	movs	r3, #3
 8002f36:	e006      	b.n	8002f46 <HAL_GPIO_Init+0x1ee>
 8002f38:	2304      	movs	r3, #4
 8002f3a:	e004      	b.n	8002f46 <HAL_GPIO_Init+0x1ee>
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	e002      	b.n	8002f46 <HAL_GPIO_Init+0x1ee>
 8002f40:	2301      	movs	r3, #1
 8002f42:	e000      	b.n	8002f46 <HAL_GPIO_Init+0x1ee>
 8002f44:	2300      	movs	r3, #0
 8002f46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f48:	f002 0203 	and.w	r2, r2, #3
 8002f4c:	0092      	lsls	r2, r2, #2
 8002f4e:	4093      	lsls	r3, r2
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002f56:	492f      	ldr	r1, [pc, #188]	; (8003014 <HAL_GPIO_Init+0x2bc>)
 8002f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5a:	089b      	lsrs	r3, r3, #2
 8002f5c:	3302      	adds	r3, #2
 8002f5e:	68fa      	ldr	r2, [r7, #12]
 8002f60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d006      	beq.n	8002f7e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002f70:	4b2d      	ldr	r3, [pc, #180]	; (8003028 <HAL_GPIO_Init+0x2d0>)
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	492c      	ldr	r1, [pc, #176]	; (8003028 <HAL_GPIO_Init+0x2d0>)
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	600b      	str	r3, [r1, #0]
 8002f7c:	e006      	b.n	8002f8c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002f7e:	4b2a      	ldr	r3, [pc, #168]	; (8003028 <HAL_GPIO_Init+0x2d0>)
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	43db      	mvns	r3, r3
 8002f86:	4928      	ldr	r1, [pc, #160]	; (8003028 <HAL_GPIO_Init+0x2d0>)
 8002f88:	4013      	ands	r3, r2
 8002f8a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d006      	beq.n	8002fa6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002f98:	4b23      	ldr	r3, [pc, #140]	; (8003028 <HAL_GPIO_Init+0x2d0>)
 8002f9a:	685a      	ldr	r2, [r3, #4]
 8002f9c:	4922      	ldr	r1, [pc, #136]	; (8003028 <HAL_GPIO_Init+0x2d0>)
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	604b      	str	r3, [r1, #4]
 8002fa4:	e006      	b.n	8002fb4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002fa6:	4b20      	ldr	r3, [pc, #128]	; (8003028 <HAL_GPIO_Init+0x2d0>)
 8002fa8:	685a      	ldr	r2, [r3, #4]
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	43db      	mvns	r3, r3
 8002fae:	491e      	ldr	r1, [pc, #120]	; (8003028 <HAL_GPIO_Init+0x2d0>)
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d006      	beq.n	8002fce <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002fc0:	4b19      	ldr	r3, [pc, #100]	; (8003028 <HAL_GPIO_Init+0x2d0>)
 8002fc2:	689a      	ldr	r2, [r3, #8]
 8002fc4:	4918      	ldr	r1, [pc, #96]	; (8003028 <HAL_GPIO_Init+0x2d0>)
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	608b      	str	r3, [r1, #8]
 8002fcc:	e006      	b.n	8002fdc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002fce:	4b16      	ldr	r3, [pc, #88]	; (8003028 <HAL_GPIO_Init+0x2d0>)
 8002fd0:	689a      	ldr	r2, [r3, #8]
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	43db      	mvns	r3, r3
 8002fd6:	4914      	ldr	r1, [pc, #80]	; (8003028 <HAL_GPIO_Init+0x2d0>)
 8002fd8:	4013      	ands	r3, r2
 8002fda:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d021      	beq.n	800302c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002fe8:	4b0f      	ldr	r3, [pc, #60]	; (8003028 <HAL_GPIO_Init+0x2d0>)
 8002fea:	68da      	ldr	r2, [r3, #12]
 8002fec:	490e      	ldr	r1, [pc, #56]	; (8003028 <HAL_GPIO_Init+0x2d0>)
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	60cb      	str	r3, [r1, #12]
 8002ff4:	e021      	b.n	800303a <HAL_GPIO_Init+0x2e2>
 8002ff6:	bf00      	nop
 8002ff8:	10320000 	.word	0x10320000
 8002ffc:	10310000 	.word	0x10310000
 8003000:	10220000 	.word	0x10220000
 8003004:	10210000 	.word	0x10210000
 8003008:	10120000 	.word	0x10120000
 800300c:	10110000 	.word	0x10110000
 8003010:	40021000 	.word	0x40021000
 8003014:	40010000 	.word	0x40010000
 8003018:	40010800 	.word	0x40010800
 800301c:	40010c00 	.word	0x40010c00
 8003020:	40011000 	.word	0x40011000
 8003024:	40011400 	.word	0x40011400
 8003028:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800302c:	4b0b      	ldr	r3, [pc, #44]	; (800305c <HAL_GPIO_Init+0x304>)
 800302e:	68da      	ldr	r2, [r3, #12]
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	43db      	mvns	r3, r3
 8003034:	4909      	ldr	r1, [pc, #36]	; (800305c <HAL_GPIO_Init+0x304>)
 8003036:	4013      	ands	r3, r2
 8003038:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800303a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303c:	3301      	adds	r3, #1
 800303e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003046:	fa22 f303 	lsr.w	r3, r2, r3
 800304a:	2b00      	cmp	r3, #0
 800304c:	f47f ae8e 	bne.w	8002d6c <HAL_GPIO_Init+0x14>
  }
}
 8003050:	bf00      	nop
 8003052:	bf00      	nop
 8003054:	372c      	adds	r7, #44	; 0x2c
 8003056:	46bd      	mov	sp, r7
 8003058:	bc80      	pop	{r7}
 800305a:	4770      	bx	lr
 800305c:	40010400 	.word	0x40010400

08003060 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003060:	b480      	push	{r7}
 8003062:	b085      	sub	sp, #20
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	460b      	mov	r3, r1
 800306a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689a      	ldr	r2, [r3, #8]
 8003070:	887b      	ldrh	r3, [r7, #2]
 8003072:	4013      	ands	r3, r2
 8003074:	2b00      	cmp	r3, #0
 8003076:	d002      	beq.n	800307e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003078:	2301      	movs	r3, #1
 800307a:	73fb      	strb	r3, [r7, #15]
 800307c:	e001      	b.n	8003082 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800307e:	2300      	movs	r3, #0
 8003080:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003082:	7bfb      	ldrb	r3, [r7, #15]
}
 8003084:	4618      	mov	r0, r3
 8003086:	3714      	adds	r7, #20
 8003088:	46bd      	mov	sp, r7
 800308a:	bc80      	pop	{r7}
 800308c:	4770      	bx	lr

0800308e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800308e:	b480      	push	{r7}
 8003090:	b083      	sub	sp, #12
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
 8003096:	460b      	mov	r3, r1
 8003098:	807b      	strh	r3, [r7, #2]
 800309a:	4613      	mov	r3, r2
 800309c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800309e:	787b      	ldrb	r3, [r7, #1]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d003      	beq.n	80030ac <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030a4:	887a      	ldrh	r2, [r7, #2]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80030aa:	e003      	b.n	80030b4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80030ac:	887b      	ldrh	r3, [r7, #2]
 80030ae:	041a      	lsls	r2, r3, #16
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	611a      	str	r2, [r3, #16]
}
 80030b4:	bf00      	nop
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bc80      	pop	{r7}
 80030bc:	4770      	bx	lr
	...

080030c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b086      	sub	sp, #24
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d101      	bne.n	80030d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e272      	b.n	80035b8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0301 	and.w	r3, r3, #1
 80030da:	2b00      	cmp	r3, #0
 80030dc:	f000 8087 	beq.w	80031ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030e0:	4b92      	ldr	r3, [pc, #584]	; (800332c <HAL_RCC_OscConfig+0x26c>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f003 030c 	and.w	r3, r3, #12
 80030e8:	2b04      	cmp	r3, #4
 80030ea:	d00c      	beq.n	8003106 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80030ec:	4b8f      	ldr	r3, [pc, #572]	; (800332c <HAL_RCC_OscConfig+0x26c>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f003 030c 	and.w	r3, r3, #12
 80030f4:	2b08      	cmp	r3, #8
 80030f6:	d112      	bne.n	800311e <HAL_RCC_OscConfig+0x5e>
 80030f8:	4b8c      	ldr	r3, [pc, #560]	; (800332c <HAL_RCC_OscConfig+0x26c>)
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003104:	d10b      	bne.n	800311e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003106:	4b89      	ldr	r3, [pc, #548]	; (800332c <HAL_RCC_OscConfig+0x26c>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d06c      	beq.n	80031ec <HAL_RCC_OscConfig+0x12c>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d168      	bne.n	80031ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e24c      	b.n	80035b8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003126:	d106      	bne.n	8003136 <HAL_RCC_OscConfig+0x76>
 8003128:	4b80      	ldr	r3, [pc, #512]	; (800332c <HAL_RCC_OscConfig+0x26c>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a7f      	ldr	r2, [pc, #508]	; (800332c <HAL_RCC_OscConfig+0x26c>)
 800312e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003132:	6013      	str	r3, [r2, #0]
 8003134:	e02e      	b.n	8003194 <HAL_RCC_OscConfig+0xd4>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d10c      	bne.n	8003158 <HAL_RCC_OscConfig+0x98>
 800313e:	4b7b      	ldr	r3, [pc, #492]	; (800332c <HAL_RCC_OscConfig+0x26c>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a7a      	ldr	r2, [pc, #488]	; (800332c <HAL_RCC_OscConfig+0x26c>)
 8003144:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003148:	6013      	str	r3, [r2, #0]
 800314a:	4b78      	ldr	r3, [pc, #480]	; (800332c <HAL_RCC_OscConfig+0x26c>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a77      	ldr	r2, [pc, #476]	; (800332c <HAL_RCC_OscConfig+0x26c>)
 8003150:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003154:	6013      	str	r3, [r2, #0]
 8003156:	e01d      	b.n	8003194 <HAL_RCC_OscConfig+0xd4>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003160:	d10c      	bne.n	800317c <HAL_RCC_OscConfig+0xbc>
 8003162:	4b72      	ldr	r3, [pc, #456]	; (800332c <HAL_RCC_OscConfig+0x26c>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a71      	ldr	r2, [pc, #452]	; (800332c <HAL_RCC_OscConfig+0x26c>)
 8003168:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800316c:	6013      	str	r3, [r2, #0]
 800316e:	4b6f      	ldr	r3, [pc, #444]	; (800332c <HAL_RCC_OscConfig+0x26c>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a6e      	ldr	r2, [pc, #440]	; (800332c <HAL_RCC_OscConfig+0x26c>)
 8003174:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003178:	6013      	str	r3, [r2, #0]
 800317a:	e00b      	b.n	8003194 <HAL_RCC_OscConfig+0xd4>
 800317c:	4b6b      	ldr	r3, [pc, #428]	; (800332c <HAL_RCC_OscConfig+0x26c>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a6a      	ldr	r2, [pc, #424]	; (800332c <HAL_RCC_OscConfig+0x26c>)
 8003182:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003186:	6013      	str	r3, [r2, #0]
 8003188:	4b68      	ldr	r3, [pc, #416]	; (800332c <HAL_RCC_OscConfig+0x26c>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a67      	ldr	r2, [pc, #412]	; (800332c <HAL_RCC_OscConfig+0x26c>)
 800318e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003192:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d013      	beq.n	80031c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800319c:	f7fe fef0 	bl	8001f80 <HAL_GetTick>
 80031a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031a2:	e008      	b.n	80031b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031a4:	f7fe feec 	bl	8001f80 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	2b64      	cmp	r3, #100	; 0x64
 80031b0:	d901      	bls.n	80031b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e200      	b.n	80035b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031b6:	4b5d      	ldr	r3, [pc, #372]	; (800332c <HAL_RCC_OscConfig+0x26c>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d0f0      	beq.n	80031a4 <HAL_RCC_OscConfig+0xe4>
 80031c2:	e014      	b.n	80031ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c4:	f7fe fedc 	bl	8001f80 <HAL_GetTick>
 80031c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031ca:	e008      	b.n	80031de <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031cc:	f7fe fed8 	bl	8001f80 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	2b64      	cmp	r3, #100	; 0x64
 80031d8:	d901      	bls.n	80031de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e1ec      	b.n	80035b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031de:	4b53      	ldr	r3, [pc, #332]	; (800332c <HAL_RCC_OscConfig+0x26c>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d1f0      	bne.n	80031cc <HAL_RCC_OscConfig+0x10c>
 80031ea:	e000      	b.n	80031ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d063      	beq.n	80032c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80031fa:	4b4c      	ldr	r3, [pc, #304]	; (800332c <HAL_RCC_OscConfig+0x26c>)
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f003 030c 	and.w	r3, r3, #12
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00b      	beq.n	800321e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003206:	4b49      	ldr	r3, [pc, #292]	; (800332c <HAL_RCC_OscConfig+0x26c>)
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f003 030c 	and.w	r3, r3, #12
 800320e:	2b08      	cmp	r3, #8
 8003210:	d11c      	bne.n	800324c <HAL_RCC_OscConfig+0x18c>
 8003212:	4b46      	ldr	r3, [pc, #280]	; (800332c <HAL_RCC_OscConfig+0x26c>)
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d116      	bne.n	800324c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800321e:	4b43      	ldr	r3, [pc, #268]	; (800332c <HAL_RCC_OscConfig+0x26c>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d005      	beq.n	8003236 <HAL_RCC_OscConfig+0x176>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d001      	beq.n	8003236 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e1c0      	b.n	80035b8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003236:	4b3d      	ldr	r3, [pc, #244]	; (800332c <HAL_RCC_OscConfig+0x26c>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	695b      	ldr	r3, [r3, #20]
 8003242:	00db      	lsls	r3, r3, #3
 8003244:	4939      	ldr	r1, [pc, #228]	; (800332c <HAL_RCC_OscConfig+0x26c>)
 8003246:	4313      	orrs	r3, r2
 8003248:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800324a:	e03a      	b.n	80032c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	691b      	ldr	r3, [r3, #16]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d020      	beq.n	8003296 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003254:	4b36      	ldr	r3, [pc, #216]	; (8003330 <HAL_RCC_OscConfig+0x270>)
 8003256:	2201      	movs	r2, #1
 8003258:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800325a:	f7fe fe91 	bl	8001f80 <HAL_GetTick>
 800325e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003260:	e008      	b.n	8003274 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003262:	f7fe fe8d 	bl	8001f80 <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	2b02      	cmp	r3, #2
 800326e:	d901      	bls.n	8003274 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	e1a1      	b.n	80035b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003274:	4b2d      	ldr	r3, [pc, #180]	; (800332c <HAL_RCC_OscConfig+0x26c>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0302 	and.w	r3, r3, #2
 800327c:	2b00      	cmp	r3, #0
 800327e:	d0f0      	beq.n	8003262 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003280:	4b2a      	ldr	r3, [pc, #168]	; (800332c <HAL_RCC_OscConfig+0x26c>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	695b      	ldr	r3, [r3, #20]
 800328c:	00db      	lsls	r3, r3, #3
 800328e:	4927      	ldr	r1, [pc, #156]	; (800332c <HAL_RCC_OscConfig+0x26c>)
 8003290:	4313      	orrs	r3, r2
 8003292:	600b      	str	r3, [r1, #0]
 8003294:	e015      	b.n	80032c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003296:	4b26      	ldr	r3, [pc, #152]	; (8003330 <HAL_RCC_OscConfig+0x270>)
 8003298:	2200      	movs	r2, #0
 800329a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800329c:	f7fe fe70 	bl	8001f80 <HAL_GetTick>
 80032a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032a2:	e008      	b.n	80032b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032a4:	f7fe fe6c 	bl	8001f80 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e180      	b.n	80035b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032b6:	4b1d      	ldr	r3, [pc, #116]	; (800332c <HAL_RCC_OscConfig+0x26c>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1f0      	bne.n	80032a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0308 	and.w	r3, r3, #8
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d03a      	beq.n	8003344 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d019      	beq.n	800330a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032d6:	4b17      	ldr	r3, [pc, #92]	; (8003334 <HAL_RCC_OscConfig+0x274>)
 80032d8:	2201      	movs	r2, #1
 80032da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032dc:	f7fe fe50 	bl	8001f80 <HAL_GetTick>
 80032e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032e2:	e008      	b.n	80032f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032e4:	f7fe fe4c 	bl	8001f80 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d901      	bls.n	80032f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e160      	b.n	80035b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032f6:	4b0d      	ldr	r3, [pc, #52]	; (800332c <HAL_RCC_OscConfig+0x26c>)
 80032f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d0f0      	beq.n	80032e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003302:	2001      	movs	r0, #1
 8003304:	f000 faa6 	bl	8003854 <RCC_Delay>
 8003308:	e01c      	b.n	8003344 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800330a:	4b0a      	ldr	r3, [pc, #40]	; (8003334 <HAL_RCC_OscConfig+0x274>)
 800330c:	2200      	movs	r2, #0
 800330e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003310:	f7fe fe36 	bl	8001f80 <HAL_GetTick>
 8003314:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003316:	e00f      	b.n	8003338 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003318:	f7fe fe32 	bl	8001f80 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	2b02      	cmp	r3, #2
 8003324:	d908      	bls.n	8003338 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e146      	b.n	80035b8 <HAL_RCC_OscConfig+0x4f8>
 800332a:	bf00      	nop
 800332c:	40021000 	.word	0x40021000
 8003330:	42420000 	.word	0x42420000
 8003334:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003338:	4b92      	ldr	r3, [pc, #584]	; (8003584 <HAL_RCC_OscConfig+0x4c4>)
 800333a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333c:	f003 0302 	and.w	r3, r3, #2
 8003340:	2b00      	cmp	r3, #0
 8003342:	d1e9      	bne.n	8003318 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0304 	and.w	r3, r3, #4
 800334c:	2b00      	cmp	r3, #0
 800334e:	f000 80a6 	beq.w	800349e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003352:	2300      	movs	r3, #0
 8003354:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003356:	4b8b      	ldr	r3, [pc, #556]	; (8003584 <HAL_RCC_OscConfig+0x4c4>)
 8003358:	69db      	ldr	r3, [r3, #28]
 800335a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d10d      	bne.n	800337e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003362:	4b88      	ldr	r3, [pc, #544]	; (8003584 <HAL_RCC_OscConfig+0x4c4>)
 8003364:	69db      	ldr	r3, [r3, #28]
 8003366:	4a87      	ldr	r2, [pc, #540]	; (8003584 <HAL_RCC_OscConfig+0x4c4>)
 8003368:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800336c:	61d3      	str	r3, [r2, #28]
 800336e:	4b85      	ldr	r3, [pc, #532]	; (8003584 <HAL_RCC_OscConfig+0x4c4>)
 8003370:	69db      	ldr	r3, [r3, #28]
 8003372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003376:	60bb      	str	r3, [r7, #8]
 8003378:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800337a:	2301      	movs	r3, #1
 800337c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800337e:	4b82      	ldr	r3, [pc, #520]	; (8003588 <HAL_RCC_OscConfig+0x4c8>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003386:	2b00      	cmp	r3, #0
 8003388:	d118      	bne.n	80033bc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800338a:	4b7f      	ldr	r3, [pc, #508]	; (8003588 <HAL_RCC_OscConfig+0x4c8>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a7e      	ldr	r2, [pc, #504]	; (8003588 <HAL_RCC_OscConfig+0x4c8>)
 8003390:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003394:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003396:	f7fe fdf3 	bl	8001f80 <HAL_GetTick>
 800339a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800339c:	e008      	b.n	80033b0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800339e:	f7fe fdef 	bl	8001f80 <HAL_GetTick>
 80033a2:	4602      	mov	r2, r0
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	2b64      	cmp	r3, #100	; 0x64
 80033aa:	d901      	bls.n	80033b0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	e103      	b.n	80035b8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033b0:	4b75      	ldr	r3, [pc, #468]	; (8003588 <HAL_RCC_OscConfig+0x4c8>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d0f0      	beq.n	800339e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d106      	bne.n	80033d2 <HAL_RCC_OscConfig+0x312>
 80033c4:	4b6f      	ldr	r3, [pc, #444]	; (8003584 <HAL_RCC_OscConfig+0x4c4>)
 80033c6:	6a1b      	ldr	r3, [r3, #32]
 80033c8:	4a6e      	ldr	r2, [pc, #440]	; (8003584 <HAL_RCC_OscConfig+0x4c4>)
 80033ca:	f043 0301 	orr.w	r3, r3, #1
 80033ce:	6213      	str	r3, [r2, #32]
 80033d0:	e02d      	b.n	800342e <HAL_RCC_OscConfig+0x36e>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d10c      	bne.n	80033f4 <HAL_RCC_OscConfig+0x334>
 80033da:	4b6a      	ldr	r3, [pc, #424]	; (8003584 <HAL_RCC_OscConfig+0x4c4>)
 80033dc:	6a1b      	ldr	r3, [r3, #32]
 80033de:	4a69      	ldr	r2, [pc, #420]	; (8003584 <HAL_RCC_OscConfig+0x4c4>)
 80033e0:	f023 0301 	bic.w	r3, r3, #1
 80033e4:	6213      	str	r3, [r2, #32]
 80033e6:	4b67      	ldr	r3, [pc, #412]	; (8003584 <HAL_RCC_OscConfig+0x4c4>)
 80033e8:	6a1b      	ldr	r3, [r3, #32]
 80033ea:	4a66      	ldr	r2, [pc, #408]	; (8003584 <HAL_RCC_OscConfig+0x4c4>)
 80033ec:	f023 0304 	bic.w	r3, r3, #4
 80033f0:	6213      	str	r3, [r2, #32]
 80033f2:	e01c      	b.n	800342e <HAL_RCC_OscConfig+0x36e>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	2b05      	cmp	r3, #5
 80033fa:	d10c      	bne.n	8003416 <HAL_RCC_OscConfig+0x356>
 80033fc:	4b61      	ldr	r3, [pc, #388]	; (8003584 <HAL_RCC_OscConfig+0x4c4>)
 80033fe:	6a1b      	ldr	r3, [r3, #32]
 8003400:	4a60      	ldr	r2, [pc, #384]	; (8003584 <HAL_RCC_OscConfig+0x4c4>)
 8003402:	f043 0304 	orr.w	r3, r3, #4
 8003406:	6213      	str	r3, [r2, #32]
 8003408:	4b5e      	ldr	r3, [pc, #376]	; (8003584 <HAL_RCC_OscConfig+0x4c4>)
 800340a:	6a1b      	ldr	r3, [r3, #32]
 800340c:	4a5d      	ldr	r2, [pc, #372]	; (8003584 <HAL_RCC_OscConfig+0x4c4>)
 800340e:	f043 0301 	orr.w	r3, r3, #1
 8003412:	6213      	str	r3, [r2, #32]
 8003414:	e00b      	b.n	800342e <HAL_RCC_OscConfig+0x36e>
 8003416:	4b5b      	ldr	r3, [pc, #364]	; (8003584 <HAL_RCC_OscConfig+0x4c4>)
 8003418:	6a1b      	ldr	r3, [r3, #32]
 800341a:	4a5a      	ldr	r2, [pc, #360]	; (8003584 <HAL_RCC_OscConfig+0x4c4>)
 800341c:	f023 0301 	bic.w	r3, r3, #1
 8003420:	6213      	str	r3, [r2, #32]
 8003422:	4b58      	ldr	r3, [pc, #352]	; (8003584 <HAL_RCC_OscConfig+0x4c4>)
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	4a57      	ldr	r2, [pc, #348]	; (8003584 <HAL_RCC_OscConfig+0x4c4>)
 8003428:	f023 0304 	bic.w	r3, r3, #4
 800342c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d015      	beq.n	8003462 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003436:	f7fe fda3 	bl	8001f80 <HAL_GetTick>
 800343a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800343c:	e00a      	b.n	8003454 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800343e:	f7fe fd9f 	bl	8001f80 <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	f241 3288 	movw	r2, #5000	; 0x1388
 800344c:	4293      	cmp	r3, r2
 800344e:	d901      	bls.n	8003454 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e0b1      	b.n	80035b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003454:	4b4b      	ldr	r3, [pc, #300]	; (8003584 <HAL_RCC_OscConfig+0x4c4>)
 8003456:	6a1b      	ldr	r3, [r3, #32]
 8003458:	f003 0302 	and.w	r3, r3, #2
 800345c:	2b00      	cmp	r3, #0
 800345e:	d0ee      	beq.n	800343e <HAL_RCC_OscConfig+0x37e>
 8003460:	e014      	b.n	800348c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003462:	f7fe fd8d 	bl	8001f80 <HAL_GetTick>
 8003466:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003468:	e00a      	b.n	8003480 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800346a:	f7fe fd89 	bl	8001f80 <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	f241 3288 	movw	r2, #5000	; 0x1388
 8003478:	4293      	cmp	r3, r2
 800347a:	d901      	bls.n	8003480 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e09b      	b.n	80035b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003480:	4b40      	ldr	r3, [pc, #256]	; (8003584 <HAL_RCC_OscConfig+0x4c4>)
 8003482:	6a1b      	ldr	r3, [r3, #32]
 8003484:	f003 0302 	and.w	r3, r3, #2
 8003488:	2b00      	cmp	r3, #0
 800348a:	d1ee      	bne.n	800346a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800348c:	7dfb      	ldrb	r3, [r7, #23]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d105      	bne.n	800349e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003492:	4b3c      	ldr	r3, [pc, #240]	; (8003584 <HAL_RCC_OscConfig+0x4c4>)
 8003494:	69db      	ldr	r3, [r3, #28]
 8003496:	4a3b      	ldr	r2, [pc, #236]	; (8003584 <HAL_RCC_OscConfig+0x4c4>)
 8003498:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800349c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	69db      	ldr	r3, [r3, #28]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	f000 8087 	beq.w	80035b6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034a8:	4b36      	ldr	r3, [pc, #216]	; (8003584 <HAL_RCC_OscConfig+0x4c4>)
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f003 030c 	and.w	r3, r3, #12
 80034b0:	2b08      	cmp	r3, #8
 80034b2:	d061      	beq.n	8003578 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	69db      	ldr	r3, [r3, #28]
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d146      	bne.n	800354a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034bc:	4b33      	ldr	r3, [pc, #204]	; (800358c <HAL_RCC_OscConfig+0x4cc>)
 80034be:	2200      	movs	r2, #0
 80034c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c2:	f7fe fd5d 	bl	8001f80 <HAL_GetTick>
 80034c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034c8:	e008      	b.n	80034dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034ca:	f7fe fd59 	bl	8001f80 <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d901      	bls.n	80034dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e06d      	b.n	80035b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034dc:	4b29      	ldr	r3, [pc, #164]	; (8003584 <HAL_RCC_OscConfig+0x4c4>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d1f0      	bne.n	80034ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a1b      	ldr	r3, [r3, #32]
 80034ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034f0:	d108      	bne.n	8003504 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80034f2:	4b24      	ldr	r3, [pc, #144]	; (8003584 <HAL_RCC_OscConfig+0x4c4>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	4921      	ldr	r1, [pc, #132]	; (8003584 <HAL_RCC_OscConfig+0x4c4>)
 8003500:	4313      	orrs	r3, r2
 8003502:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003504:	4b1f      	ldr	r3, [pc, #124]	; (8003584 <HAL_RCC_OscConfig+0x4c4>)
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a19      	ldr	r1, [r3, #32]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003514:	430b      	orrs	r3, r1
 8003516:	491b      	ldr	r1, [pc, #108]	; (8003584 <HAL_RCC_OscConfig+0x4c4>)
 8003518:	4313      	orrs	r3, r2
 800351a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800351c:	4b1b      	ldr	r3, [pc, #108]	; (800358c <HAL_RCC_OscConfig+0x4cc>)
 800351e:	2201      	movs	r2, #1
 8003520:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003522:	f7fe fd2d 	bl	8001f80 <HAL_GetTick>
 8003526:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003528:	e008      	b.n	800353c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800352a:	f7fe fd29 	bl	8001f80 <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	2b02      	cmp	r3, #2
 8003536:	d901      	bls.n	800353c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e03d      	b.n	80035b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800353c:	4b11      	ldr	r3, [pc, #68]	; (8003584 <HAL_RCC_OscConfig+0x4c4>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d0f0      	beq.n	800352a <HAL_RCC_OscConfig+0x46a>
 8003548:	e035      	b.n	80035b6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800354a:	4b10      	ldr	r3, [pc, #64]	; (800358c <HAL_RCC_OscConfig+0x4cc>)
 800354c:	2200      	movs	r2, #0
 800354e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003550:	f7fe fd16 	bl	8001f80 <HAL_GetTick>
 8003554:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003556:	e008      	b.n	800356a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003558:	f7fe fd12 	bl	8001f80 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	2b02      	cmp	r3, #2
 8003564:	d901      	bls.n	800356a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e026      	b.n	80035b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800356a:	4b06      	ldr	r3, [pc, #24]	; (8003584 <HAL_RCC_OscConfig+0x4c4>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1f0      	bne.n	8003558 <HAL_RCC_OscConfig+0x498>
 8003576:	e01e      	b.n	80035b6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	69db      	ldr	r3, [r3, #28]
 800357c:	2b01      	cmp	r3, #1
 800357e:	d107      	bne.n	8003590 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e019      	b.n	80035b8 <HAL_RCC_OscConfig+0x4f8>
 8003584:	40021000 	.word	0x40021000
 8003588:	40007000 	.word	0x40007000
 800358c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003590:	4b0b      	ldr	r3, [pc, #44]	; (80035c0 <HAL_RCC_OscConfig+0x500>)
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a1b      	ldr	r3, [r3, #32]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d106      	bne.n	80035b2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d001      	beq.n	80035b6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e000      	b.n	80035b8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80035b6:	2300      	movs	r3, #0
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3718      	adds	r7, #24
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	40021000 	.word	0x40021000

080035c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d101      	bne.n	80035d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e0d0      	b.n	800377a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035d8:	4b6a      	ldr	r3, [pc, #424]	; (8003784 <HAL_RCC_ClockConfig+0x1c0>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0307 	and.w	r3, r3, #7
 80035e0:	683a      	ldr	r2, [r7, #0]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d910      	bls.n	8003608 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035e6:	4b67      	ldr	r3, [pc, #412]	; (8003784 <HAL_RCC_ClockConfig+0x1c0>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f023 0207 	bic.w	r2, r3, #7
 80035ee:	4965      	ldr	r1, [pc, #404]	; (8003784 <HAL_RCC_ClockConfig+0x1c0>)
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035f6:	4b63      	ldr	r3, [pc, #396]	; (8003784 <HAL_RCC_ClockConfig+0x1c0>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0307 	and.w	r3, r3, #7
 80035fe:	683a      	ldr	r2, [r7, #0]
 8003600:	429a      	cmp	r2, r3
 8003602:	d001      	beq.n	8003608 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e0b8      	b.n	800377a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0302 	and.w	r3, r3, #2
 8003610:	2b00      	cmp	r3, #0
 8003612:	d020      	beq.n	8003656 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0304 	and.w	r3, r3, #4
 800361c:	2b00      	cmp	r3, #0
 800361e:	d005      	beq.n	800362c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003620:	4b59      	ldr	r3, [pc, #356]	; (8003788 <HAL_RCC_ClockConfig+0x1c4>)
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	4a58      	ldr	r2, [pc, #352]	; (8003788 <HAL_RCC_ClockConfig+0x1c4>)
 8003626:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800362a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0308 	and.w	r3, r3, #8
 8003634:	2b00      	cmp	r3, #0
 8003636:	d005      	beq.n	8003644 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003638:	4b53      	ldr	r3, [pc, #332]	; (8003788 <HAL_RCC_ClockConfig+0x1c4>)
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	4a52      	ldr	r2, [pc, #328]	; (8003788 <HAL_RCC_ClockConfig+0x1c4>)
 800363e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003642:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003644:	4b50      	ldr	r3, [pc, #320]	; (8003788 <HAL_RCC_ClockConfig+0x1c4>)
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	494d      	ldr	r1, [pc, #308]	; (8003788 <HAL_RCC_ClockConfig+0x1c4>)
 8003652:	4313      	orrs	r3, r2
 8003654:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	2b00      	cmp	r3, #0
 8003660:	d040      	beq.n	80036e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d107      	bne.n	800367a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800366a:	4b47      	ldr	r3, [pc, #284]	; (8003788 <HAL_RCC_ClockConfig+0x1c4>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d115      	bne.n	80036a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e07f      	b.n	800377a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	2b02      	cmp	r3, #2
 8003680:	d107      	bne.n	8003692 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003682:	4b41      	ldr	r3, [pc, #260]	; (8003788 <HAL_RCC_ClockConfig+0x1c4>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d109      	bne.n	80036a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e073      	b.n	800377a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003692:	4b3d      	ldr	r3, [pc, #244]	; (8003788 <HAL_RCC_ClockConfig+0x1c4>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d101      	bne.n	80036a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e06b      	b.n	800377a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036a2:	4b39      	ldr	r3, [pc, #228]	; (8003788 <HAL_RCC_ClockConfig+0x1c4>)
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f023 0203 	bic.w	r2, r3, #3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	4936      	ldr	r1, [pc, #216]	; (8003788 <HAL_RCC_ClockConfig+0x1c4>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036b4:	f7fe fc64 	bl	8001f80 <HAL_GetTick>
 80036b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ba:	e00a      	b.n	80036d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036bc:	f7fe fc60 	bl	8001f80 <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d901      	bls.n	80036d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e053      	b.n	800377a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036d2:	4b2d      	ldr	r3, [pc, #180]	; (8003788 <HAL_RCC_ClockConfig+0x1c4>)
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	f003 020c 	and.w	r2, r3, #12
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d1eb      	bne.n	80036bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036e4:	4b27      	ldr	r3, [pc, #156]	; (8003784 <HAL_RCC_ClockConfig+0x1c0>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0307 	and.w	r3, r3, #7
 80036ec:	683a      	ldr	r2, [r7, #0]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d210      	bcs.n	8003714 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036f2:	4b24      	ldr	r3, [pc, #144]	; (8003784 <HAL_RCC_ClockConfig+0x1c0>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f023 0207 	bic.w	r2, r3, #7
 80036fa:	4922      	ldr	r1, [pc, #136]	; (8003784 <HAL_RCC_ClockConfig+0x1c0>)
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	4313      	orrs	r3, r2
 8003700:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003702:	4b20      	ldr	r3, [pc, #128]	; (8003784 <HAL_RCC_ClockConfig+0x1c0>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0307 	and.w	r3, r3, #7
 800370a:	683a      	ldr	r2, [r7, #0]
 800370c:	429a      	cmp	r2, r3
 800370e:	d001      	beq.n	8003714 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e032      	b.n	800377a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0304 	and.w	r3, r3, #4
 800371c:	2b00      	cmp	r3, #0
 800371e:	d008      	beq.n	8003732 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003720:	4b19      	ldr	r3, [pc, #100]	; (8003788 <HAL_RCC_ClockConfig+0x1c4>)
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	4916      	ldr	r1, [pc, #88]	; (8003788 <HAL_RCC_ClockConfig+0x1c4>)
 800372e:	4313      	orrs	r3, r2
 8003730:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0308 	and.w	r3, r3, #8
 800373a:	2b00      	cmp	r3, #0
 800373c:	d009      	beq.n	8003752 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800373e:	4b12      	ldr	r3, [pc, #72]	; (8003788 <HAL_RCC_ClockConfig+0x1c4>)
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	00db      	lsls	r3, r3, #3
 800374c:	490e      	ldr	r1, [pc, #56]	; (8003788 <HAL_RCC_ClockConfig+0x1c4>)
 800374e:	4313      	orrs	r3, r2
 8003750:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003752:	f000 f821 	bl	8003798 <HAL_RCC_GetSysClockFreq>
 8003756:	4602      	mov	r2, r0
 8003758:	4b0b      	ldr	r3, [pc, #44]	; (8003788 <HAL_RCC_ClockConfig+0x1c4>)
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	091b      	lsrs	r3, r3, #4
 800375e:	f003 030f 	and.w	r3, r3, #15
 8003762:	490a      	ldr	r1, [pc, #40]	; (800378c <HAL_RCC_ClockConfig+0x1c8>)
 8003764:	5ccb      	ldrb	r3, [r1, r3]
 8003766:	fa22 f303 	lsr.w	r3, r2, r3
 800376a:	4a09      	ldr	r2, [pc, #36]	; (8003790 <HAL_RCC_ClockConfig+0x1cc>)
 800376c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800376e:	4b09      	ldr	r3, [pc, #36]	; (8003794 <HAL_RCC_ClockConfig+0x1d0>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4618      	mov	r0, r3
 8003774:	f7fe fbc2 	bl	8001efc <HAL_InitTick>

  return HAL_OK;
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	3710      	adds	r7, #16
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	40022000 	.word	0x40022000
 8003788:	40021000 	.word	0x40021000
 800378c:	0800483c 	.word	0x0800483c
 8003790:	20000038 	.word	0x20000038
 8003794:	20000050 	.word	0x20000050

08003798 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003798:	b490      	push	{r4, r7}
 800379a:	b08a      	sub	sp, #40	; 0x28
 800379c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800379e:	4b29      	ldr	r3, [pc, #164]	; (8003844 <HAL_RCC_GetSysClockFreq+0xac>)
 80037a0:	1d3c      	adds	r4, r7, #4
 80037a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80037a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80037a8:	f240 2301 	movw	r3, #513	; 0x201
 80037ac:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80037ae:	2300      	movs	r3, #0
 80037b0:	61fb      	str	r3, [r7, #28]
 80037b2:	2300      	movs	r3, #0
 80037b4:	61bb      	str	r3, [r7, #24]
 80037b6:	2300      	movs	r3, #0
 80037b8:	627b      	str	r3, [r7, #36]	; 0x24
 80037ba:	2300      	movs	r3, #0
 80037bc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80037be:	2300      	movs	r3, #0
 80037c0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80037c2:	4b21      	ldr	r3, [pc, #132]	; (8003848 <HAL_RCC_GetSysClockFreq+0xb0>)
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	f003 030c 	and.w	r3, r3, #12
 80037ce:	2b04      	cmp	r3, #4
 80037d0:	d002      	beq.n	80037d8 <HAL_RCC_GetSysClockFreq+0x40>
 80037d2:	2b08      	cmp	r3, #8
 80037d4:	d003      	beq.n	80037de <HAL_RCC_GetSysClockFreq+0x46>
 80037d6:	e02b      	b.n	8003830 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80037d8:	4b1c      	ldr	r3, [pc, #112]	; (800384c <HAL_RCC_GetSysClockFreq+0xb4>)
 80037da:	623b      	str	r3, [r7, #32]
      break;
 80037dc:	e02b      	b.n	8003836 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	0c9b      	lsrs	r3, r3, #18
 80037e2:	f003 030f 	and.w	r3, r3, #15
 80037e6:	3328      	adds	r3, #40	; 0x28
 80037e8:	443b      	add	r3, r7
 80037ea:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80037ee:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d012      	beq.n	8003820 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80037fa:	4b13      	ldr	r3, [pc, #76]	; (8003848 <HAL_RCC_GetSysClockFreq+0xb0>)
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	0c5b      	lsrs	r3, r3, #17
 8003800:	f003 0301 	and.w	r3, r3, #1
 8003804:	3328      	adds	r3, #40	; 0x28
 8003806:	443b      	add	r3, r7
 8003808:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800380c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	4a0e      	ldr	r2, [pc, #56]	; (800384c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003812:	fb03 f202 	mul.w	r2, r3, r2
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	fbb2 f3f3 	udiv	r3, r2, r3
 800381c:	627b      	str	r3, [r7, #36]	; 0x24
 800381e:	e004      	b.n	800382a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	4a0b      	ldr	r2, [pc, #44]	; (8003850 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003824:	fb02 f303 	mul.w	r3, r2, r3
 8003828:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800382a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382c:	623b      	str	r3, [r7, #32]
      break;
 800382e:	e002      	b.n	8003836 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003830:	4b06      	ldr	r3, [pc, #24]	; (800384c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003832:	623b      	str	r3, [r7, #32]
      break;
 8003834:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003836:	6a3b      	ldr	r3, [r7, #32]
}
 8003838:	4618      	mov	r0, r3
 800383a:	3728      	adds	r7, #40	; 0x28
 800383c:	46bd      	mov	sp, r7
 800383e:	bc90      	pop	{r4, r7}
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	0800482c 	.word	0x0800482c
 8003848:	40021000 	.word	0x40021000
 800384c:	007a1200 	.word	0x007a1200
 8003850:	003d0900 	.word	0x003d0900

08003854 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003854:	b480      	push	{r7}
 8003856:	b085      	sub	sp, #20
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800385c:	4b0a      	ldr	r3, [pc, #40]	; (8003888 <RCC_Delay+0x34>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a0a      	ldr	r2, [pc, #40]	; (800388c <RCC_Delay+0x38>)
 8003862:	fba2 2303 	umull	r2, r3, r2, r3
 8003866:	0a5b      	lsrs	r3, r3, #9
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	fb02 f303 	mul.w	r3, r2, r3
 800386e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003870:	bf00      	nop
  }
  while (Delay --);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	1e5a      	subs	r2, r3, #1
 8003876:	60fa      	str	r2, [r7, #12]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d1f9      	bne.n	8003870 <RCC_Delay+0x1c>
}
 800387c:	bf00      	nop
 800387e:	bf00      	nop
 8003880:	3714      	adds	r7, #20
 8003882:	46bd      	mov	sp, r7
 8003884:	bc80      	pop	{r7}
 8003886:	4770      	bx	lr
 8003888:	20000038 	.word	0x20000038
 800388c:	10624dd3 	.word	0x10624dd3

08003890 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b086      	sub	sp, #24
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003898:	2300      	movs	r3, #0
 800389a:	613b      	str	r3, [r7, #16]
 800389c:	2300      	movs	r3, #0
 800389e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0301 	and.w	r3, r3, #1
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d07d      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80038ac:	2300      	movs	r3, #0
 80038ae:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038b0:	4b4f      	ldr	r3, [pc, #316]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038b2:	69db      	ldr	r3, [r3, #28]
 80038b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d10d      	bne.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038bc:	4b4c      	ldr	r3, [pc, #304]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038be:	69db      	ldr	r3, [r3, #28]
 80038c0:	4a4b      	ldr	r2, [pc, #300]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038c6:	61d3      	str	r3, [r2, #28]
 80038c8:	4b49      	ldr	r3, [pc, #292]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038ca:	69db      	ldr	r3, [r3, #28]
 80038cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038d0:	60bb      	str	r3, [r7, #8]
 80038d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038d4:	2301      	movs	r3, #1
 80038d6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038d8:	4b46      	ldr	r3, [pc, #280]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d118      	bne.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038e4:	4b43      	ldr	r3, [pc, #268]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a42      	ldr	r2, [pc, #264]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038f0:	f7fe fb46 	bl	8001f80 <HAL_GetTick>
 80038f4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038f6:	e008      	b.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038f8:	f7fe fb42 	bl	8001f80 <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	2b64      	cmp	r3, #100	; 0x64
 8003904:	d901      	bls.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e06d      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800390a:	4b3a      	ldr	r3, [pc, #232]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003912:	2b00      	cmp	r3, #0
 8003914:	d0f0      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003916:	4b36      	ldr	r3, [pc, #216]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003918:	6a1b      	ldr	r3, [r3, #32]
 800391a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800391e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d02e      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	429a      	cmp	r2, r3
 8003932:	d027      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003934:	4b2e      	ldr	r3, [pc, #184]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003936:	6a1b      	ldr	r3, [r3, #32]
 8003938:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800393c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800393e:	4b2e      	ldr	r3, [pc, #184]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003940:	2201      	movs	r2, #1
 8003942:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003944:	4b2c      	ldr	r3, [pc, #176]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003946:	2200      	movs	r2, #0
 8003948:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800394a:	4a29      	ldr	r2, [pc, #164]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	2b00      	cmp	r3, #0
 8003958:	d014      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800395a:	f7fe fb11 	bl	8001f80 <HAL_GetTick>
 800395e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003960:	e00a      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003962:	f7fe fb0d 	bl	8001f80 <HAL_GetTick>
 8003966:	4602      	mov	r2, r0
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003970:	4293      	cmp	r3, r2
 8003972:	d901      	bls.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e036      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003978:	4b1d      	ldr	r3, [pc, #116]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800397a:	6a1b      	ldr	r3, [r3, #32]
 800397c:	f003 0302 	and.w	r3, r3, #2
 8003980:	2b00      	cmp	r3, #0
 8003982:	d0ee      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003984:	4b1a      	ldr	r3, [pc, #104]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003986:	6a1b      	ldr	r3, [r3, #32]
 8003988:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	4917      	ldr	r1, [pc, #92]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003992:	4313      	orrs	r3, r2
 8003994:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003996:	7dfb      	ldrb	r3, [r7, #23]
 8003998:	2b01      	cmp	r3, #1
 800399a:	d105      	bne.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800399c:	4b14      	ldr	r3, [pc, #80]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800399e:	69db      	ldr	r3, [r3, #28]
 80039a0:	4a13      	ldr	r2, [pc, #76]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039a6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0302 	and.w	r3, r3, #2
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d008      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80039b4:	4b0e      	ldr	r3, [pc, #56]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	490b      	ldr	r1, [pc, #44]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0310 	and.w	r3, r3, #16
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d008      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80039d2:	4b07      	ldr	r3, [pc, #28]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	4904      	ldr	r1, [pc, #16]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3718      	adds	r7, #24
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	40021000 	.word	0x40021000
 80039f4:	40007000 	.word	0x40007000
 80039f8:	42420440 	.word	0x42420440

080039fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d101      	bne.n	8003a0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e041      	b.n	8003a92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d106      	bne.n	8003a28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f7fd fdb8 	bl	8001598 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2202      	movs	r2, #2
 8003a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	3304      	adds	r3, #4
 8003a38:	4619      	mov	r1, r3
 8003a3a:	4610      	mov	r0, r2
 8003a3c:	f000 faaa 	bl	8003f94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3708      	adds	r7, #8
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}

08003a9a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a9a:	b580      	push	{r7, lr}
 8003a9c:	b082      	sub	sp, #8
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d101      	bne.n	8003aac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e041      	b.n	8003b30 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d106      	bne.n	8003ac6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f000 f839 	bl	8003b38 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2202      	movs	r2, #2
 8003aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	3304      	adds	r3, #4
 8003ad6:	4619      	mov	r1, r3
 8003ad8:	4610      	mov	r0, r2
 8003ada:	f000 fa5b 	bl	8003f94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2201      	movs	r2, #1
 8003af2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2201      	movs	r2, #1
 8003afa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2201      	movs	r2, #1
 8003b02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2201      	movs	r2, #1
 8003b12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2201      	movs	r2, #1
 8003b22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2201      	movs	r2, #1
 8003b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b2e:	2300      	movs	r3, #0
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3708      	adds	r7, #8
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003b40:	bf00      	nop
 8003b42:	370c      	adds	r7, #12
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bc80      	pop	{r7}
 8003b48:	4770      	bx	lr
	...

08003b4c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d109      	bne.n	8003b70 <HAL_TIM_PWM_Start+0x24>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	bf14      	ite	ne
 8003b68:	2301      	movne	r3, #1
 8003b6a:	2300      	moveq	r3, #0
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	e022      	b.n	8003bb6 <HAL_TIM_PWM_Start+0x6a>
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	2b04      	cmp	r3, #4
 8003b74:	d109      	bne.n	8003b8a <HAL_TIM_PWM_Start+0x3e>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	bf14      	ite	ne
 8003b82:	2301      	movne	r3, #1
 8003b84:	2300      	moveq	r3, #0
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	e015      	b.n	8003bb6 <HAL_TIM_PWM_Start+0x6a>
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	2b08      	cmp	r3, #8
 8003b8e:	d109      	bne.n	8003ba4 <HAL_TIM_PWM_Start+0x58>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	bf14      	ite	ne
 8003b9c:	2301      	movne	r3, #1
 8003b9e:	2300      	moveq	r3, #0
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	e008      	b.n	8003bb6 <HAL_TIM_PWM_Start+0x6a>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	bf14      	ite	ne
 8003bb0:	2301      	movne	r3, #1
 8003bb2:	2300      	moveq	r3, #0
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d001      	beq.n	8003bbe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e05e      	b.n	8003c7c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d104      	bne.n	8003bce <HAL_TIM_PWM_Start+0x82>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2202      	movs	r2, #2
 8003bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bcc:	e013      	b.n	8003bf6 <HAL_TIM_PWM_Start+0xaa>
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	2b04      	cmp	r3, #4
 8003bd2:	d104      	bne.n	8003bde <HAL_TIM_PWM_Start+0x92>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2202      	movs	r2, #2
 8003bd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bdc:	e00b      	b.n	8003bf6 <HAL_TIM_PWM_Start+0xaa>
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	2b08      	cmp	r3, #8
 8003be2:	d104      	bne.n	8003bee <HAL_TIM_PWM_Start+0xa2>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2202      	movs	r2, #2
 8003be8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bec:	e003      	b.n	8003bf6 <HAL_TIM_PWM_Start+0xaa>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2202      	movs	r2, #2
 8003bf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	6839      	ldr	r1, [r7, #0]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f000 fc48 	bl	8004494 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a1e      	ldr	r2, [pc, #120]	; (8003c84 <HAL_TIM_PWM_Start+0x138>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d107      	bne.n	8003c1e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c1c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a18      	ldr	r2, [pc, #96]	; (8003c84 <HAL_TIM_PWM_Start+0x138>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d00e      	beq.n	8003c46 <HAL_TIM_PWM_Start+0xfa>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c30:	d009      	beq.n	8003c46 <HAL_TIM_PWM_Start+0xfa>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a14      	ldr	r2, [pc, #80]	; (8003c88 <HAL_TIM_PWM_Start+0x13c>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d004      	beq.n	8003c46 <HAL_TIM_PWM_Start+0xfa>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a12      	ldr	r2, [pc, #72]	; (8003c8c <HAL_TIM_PWM_Start+0x140>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d111      	bne.n	8003c6a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f003 0307 	and.w	r3, r3, #7
 8003c50:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2b06      	cmp	r3, #6
 8003c56:	d010      	beq.n	8003c7a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f042 0201 	orr.w	r2, r2, #1
 8003c66:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c68:	e007      	b.n	8003c7a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f042 0201 	orr.w	r2, r2, #1
 8003c78:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3710      	adds	r7, #16
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	40012c00 	.word	0x40012c00
 8003c88:	40000400 	.word	0x40000400
 8003c8c:	40000800 	.word	0x40000800

08003c90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d101      	bne.n	8003caa <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003ca6:	2302      	movs	r3, #2
 8003ca8:	e0ac      	b.n	8003e04 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2201      	movs	r2, #1
 8003cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2b0c      	cmp	r3, #12
 8003cb6:	f200 809f 	bhi.w	8003df8 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003cba:	a201      	add	r2, pc, #4	; (adr r2, 8003cc0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc0:	08003cf5 	.word	0x08003cf5
 8003cc4:	08003df9 	.word	0x08003df9
 8003cc8:	08003df9 	.word	0x08003df9
 8003ccc:	08003df9 	.word	0x08003df9
 8003cd0:	08003d35 	.word	0x08003d35
 8003cd4:	08003df9 	.word	0x08003df9
 8003cd8:	08003df9 	.word	0x08003df9
 8003cdc:	08003df9 	.word	0x08003df9
 8003ce0:	08003d77 	.word	0x08003d77
 8003ce4:	08003df9 	.word	0x08003df9
 8003ce8:	08003df9 	.word	0x08003df9
 8003cec:	08003df9 	.word	0x08003df9
 8003cf0:	08003db7 	.word	0x08003db7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68b9      	ldr	r1, [r7, #8]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f000 f9ac 	bl	8004058 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	699a      	ldr	r2, [r3, #24]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f042 0208 	orr.w	r2, r2, #8
 8003d0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	699a      	ldr	r2, [r3, #24]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f022 0204 	bic.w	r2, r2, #4
 8003d1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	6999      	ldr	r1, [r3, #24]
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	691a      	ldr	r2, [r3, #16]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	430a      	orrs	r2, r1
 8003d30:	619a      	str	r2, [r3, #24]
      break;
 8003d32:	e062      	b.n	8003dfa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68b9      	ldr	r1, [r7, #8]
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f000 f9f2 	bl	8004124 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	699a      	ldr	r2, [r3, #24]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	699a      	ldr	r2, [r3, #24]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	6999      	ldr	r1, [r3, #24]
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	021a      	lsls	r2, r3, #8
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	430a      	orrs	r2, r1
 8003d72:	619a      	str	r2, [r3, #24]
      break;
 8003d74:	e041      	b.n	8003dfa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68b9      	ldr	r1, [r7, #8]
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f000 fa3b 	bl	80041f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	69da      	ldr	r2, [r3, #28]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f042 0208 	orr.w	r2, r2, #8
 8003d90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	69da      	ldr	r2, [r3, #28]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f022 0204 	bic.w	r2, r2, #4
 8003da0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	69d9      	ldr	r1, [r3, #28]
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	691a      	ldr	r2, [r3, #16]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	430a      	orrs	r2, r1
 8003db2:	61da      	str	r2, [r3, #28]
      break;
 8003db4:	e021      	b.n	8003dfa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	68b9      	ldr	r1, [r7, #8]
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f000 fa85 	bl	80042cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	69da      	ldr	r2, [r3, #28]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	69da      	ldr	r2, [r3, #28]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003de0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	69d9      	ldr	r1, [r3, #28]
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	691b      	ldr	r3, [r3, #16]
 8003dec:	021a      	lsls	r2, r3, #8
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	430a      	orrs	r2, r1
 8003df4:	61da      	str	r2, [r3, #28]
      break;
 8003df6:	e000      	b.n	8003dfa <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003df8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e02:	2300      	movs	r3, #0
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3710      	adds	r7, #16
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d101      	bne.n	8003e24 <HAL_TIM_ConfigClockSource+0x18>
 8003e20:	2302      	movs	r3, #2
 8003e22:	e0b3      	b.n	8003f8c <HAL_TIM_ConfigClockSource+0x180>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2202      	movs	r2, #2
 8003e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e42:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e4a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e5c:	d03e      	beq.n	8003edc <HAL_TIM_ConfigClockSource+0xd0>
 8003e5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e62:	f200 8087 	bhi.w	8003f74 <HAL_TIM_ConfigClockSource+0x168>
 8003e66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e6a:	f000 8085 	beq.w	8003f78 <HAL_TIM_ConfigClockSource+0x16c>
 8003e6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e72:	d87f      	bhi.n	8003f74 <HAL_TIM_ConfigClockSource+0x168>
 8003e74:	2b70      	cmp	r3, #112	; 0x70
 8003e76:	d01a      	beq.n	8003eae <HAL_TIM_ConfigClockSource+0xa2>
 8003e78:	2b70      	cmp	r3, #112	; 0x70
 8003e7a:	d87b      	bhi.n	8003f74 <HAL_TIM_ConfigClockSource+0x168>
 8003e7c:	2b60      	cmp	r3, #96	; 0x60
 8003e7e:	d050      	beq.n	8003f22 <HAL_TIM_ConfigClockSource+0x116>
 8003e80:	2b60      	cmp	r3, #96	; 0x60
 8003e82:	d877      	bhi.n	8003f74 <HAL_TIM_ConfigClockSource+0x168>
 8003e84:	2b50      	cmp	r3, #80	; 0x50
 8003e86:	d03c      	beq.n	8003f02 <HAL_TIM_ConfigClockSource+0xf6>
 8003e88:	2b50      	cmp	r3, #80	; 0x50
 8003e8a:	d873      	bhi.n	8003f74 <HAL_TIM_ConfigClockSource+0x168>
 8003e8c:	2b40      	cmp	r3, #64	; 0x40
 8003e8e:	d058      	beq.n	8003f42 <HAL_TIM_ConfigClockSource+0x136>
 8003e90:	2b40      	cmp	r3, #64	; 0x40
 8003e92:	d86f      	bhi.n	8003f74 <HAL_TIM_ConfigClockSource+0x168>
 8003e94:	2b30      	cmp	r3, #48	; 0x30
 8003e96:	d064      	beq.n	8003f62 <HAL_TIM_ConfigClockSource+0x156>
 8003e98:	2b30      	cmp	r3, #48	; 0x30
 8003e9a:	d86b      	bhi.n	8003f74 <HAL_TIM_ConfigClockSource+0x168>
 8003e9c:	2b20      	cmp	r3, #32
 8003e9e:	d060      	beq.n	8003f62 <HAL_TIM_ConfigClockSource+0x156>
 8003ea0:	2b20      	cmp	r3, #32
 8003ea2:	d867      	bhi.n	8003f74 <HAL_TIM_ConfigClockSource+0x168>
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d05c      	beq.n	8003f62 <HAL_TIM_ConfigClockSource+0x156>
 8003ea8:	2b10      	cmp	r3, #16
 8003eaa:	d05a      	beq.n	8003f62 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003eac:	e062      	b.n	8003f74 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6818      	ldr	r0, [r3, #0]
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	6899      	ldr	r1, [r3, #8]
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	685a      	ldr	r2, [r3, #4]
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	f000 faca 	bl	8004456 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ed0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	609a      	str	r2, [r3, #8]
      break;
 8003eda:	e04e      	b.n	8003f7a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6818      	ldr	r0, [r3, #0]
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	6899      	ldr	r1, [r3, #8]
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	685a      	ldr	r2, [r3, #4]
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	f000 fab3 	bl	8004456 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	689a      	ldr	r2, [r3, #8]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003efe:	609a      	str	r2, [r3, #8]
      break;
 8003f00:	e03b      	b.n	8003f7a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6818      	ldr	r0, [r3, #0]
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	6859      	ldr	r1, [r3, #4]
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	461a      	mov	r2, r3
 8003f10:	f000 fa2a 	bl	8004368 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2150      	movs	r1, #80	; 0x50
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f000 fa81 	bl	8004422 <TIM_ITRx_SetConfig>
      break;
 8003f20:	e02b      	b.n	8003f7a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6818      	ldr	r0, [r3, #0]
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	6859      	ldr	r1, [r3, #4]
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	461a      	mov	r2, r3
 8003f30:	f000 fa48 	bl	80043c4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2160      	movs	r1, #96	; 0x60
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f000 fa71 	bl	8004422 <TIM_ITRx_SetConfig>
      break;
 8003f40:	e01b      	b.n	8003f7a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6818      	ldr	r0, [r3, #0]
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	6859      	ldr	r1, [r3, #4]
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	461a      	mov	r2, r3
 8003f50:	f000 fa0a 	bl	8004368 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2140      	movs	r1, #64	; 0x40
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f000 fa61 	bl	8004422 <TIM_ITRx_SetConfig>
      break;
 8003f60:	e00b      	b.n	8003f7a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4619      	mov	r1, r3
 8003f6c:	4610      	mov	r0, r2
 8003f6e:	f000 fa58 	bl	8004422 <TIM_ITRx_SetConfig>
        break;
 8003f72:	e002      	b.n	8003f7a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003f74:	bf00      	nop
 8003f76:	e000      	b.n	8003f7a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003f78:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f8a:	2300      	movs	r3, #0
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3710      	adds	r7, #16
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b085      	sub	sp, #20
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4a29      	ldr	r2, [pc, #164]	; (800404c <TIM_Base_SetConfig+0xb8>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d00b      	beq.n	8003fc4 <TIM_Base_SetConfig+0x30>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fb2:	d007      	beq.n	8003fc4 <TIM_Base_SetConfig+0x30>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a26      	ldr	r2, [pc, #152]	; (8004050 <TIM_Base_SetConfig+0xbc>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d003      	beq.n	8003fc4 <TIM_Base_SetConfig+0x30>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4a25      	ldr	r2, [pc, #148]	; (8004054 <TIM_Base_SetConfig+0xc0>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d108      	bne.n	8003fd6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	68fa      	ldr	r2, [r7, #12]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a1c      	ldr	r2, [pc, #112]	; (800404c <TIM_Base_SetConfig+0xb8>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d00b      	beq.n	8003ff6 <TIM_Base_SetConfig+0x62>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fe4:	d007      	beq.n	8003ff6 <TIM_Base_SetConfig+0x62>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a19      	ldr	r2, [pc, #100]	; (8004050 <TIM_Base_SetConfig+0xbc>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d003      	beq.n	8003ff6 <TIM_Base_SetConfig+0x62>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a18      	ldr	r2, [pc, #96]	; (8004054 <TIM_Base_SetConfig+0xc0>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d108      	bne.n	8004008 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ffc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	4313      	orrs	r3, r2
 8004006:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	4313      	orrs	r3, r2
 8004014:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	68fa      	ldr	r2, [r7, #12]
 800401a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	689a      	ldr	r2, [r3, #8]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4a07      	ldr	r2, [pc, #28]	; (800404c <TIM_Base_SetConfig+0xb8>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d103      	bne.n	800403c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	691a      	ldr	r2, [r3, #16]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	615a      	str	r2, [r3, #20]
}
 8004042:	bf00      	nop
 8004044:	3714      	adds	r7, #20
 8004046:	46bd      	mov	sp, r7
 8004048:	bc80      	pop	{r7}
 800404a:	4770      	bx	lr
 800404c:	40012c00 	.word	0x40012c00
 8004050:	40000400 	.word	0x40000400
 8004054:	40000800 	.word	0x40000800

08004058 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004058:	b480      	push	{r7}
 800405a:	b087      	sub	sp, #28
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	f023 0201 	bic.w	r2, r3, #1
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a1b      	ldr	r3, [r3, #32]
 8004072:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004086:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f023 0303 	bic.w	r3, r3, #3
 800408e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	4313      	orrs	r3, r2
 8004098:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	f023 0302 	bic.w	r3, r3, #2
 80040a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a1c      	ldr	r2, [pc, #112]	; (8004120 <TIM_OC1_SetConfig+0xc8>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d10c      	bne.n	80040ce <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	f023 0308 	bic.w	r3, r3, #8
 80040ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	697a      	ldr	r2, [r7, #20]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	f023 0304 	bic.w	r3, r3, #4
 80040cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a13      	ldr	r2, [pc, #76]	; (8004120 <TIM_OC1_SetConfig+0xc8>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d111      	bne.n	80040fa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	693a      	ldr	r2, [r7, #16]
 80040ec:	4313      	orrs	r3, r2
 80040ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	699b      	ldr	r3, [r3, #24]
 80040f4:	693a      	ldr	r2, [r7, #16]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	693a      	ldr	r2, [r7, #16]
 80040fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	68fa      	ldr	r2, [r7, #12]
 8004104:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	685a      	ldr	r2, [r3, #4]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	697a      	ldr	r2, [r7, #20]
 8004112:	621a      	str	r2, [r3, #32]
}
 8004114:	bf00      	nop
 8004116:	371c      	adds	r7, #28
 8004118:	46bd      	mov	sp, r7
 800411a:	bc80      	pop	{r7}
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	40012c00 	.word	0x40012c00

08004124 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004124:	b480      	push	{r7}
 8004126:	b087      	sub	sp, #28
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a1b      	ldr	r3, [r3, #32]
 8004132:	f023 0210 	bic.w	r2, r3, #16
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a1b      	ldr	r3, [r3, #32]
 800413e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	699b      	ldr	r3, [r3, #24]
 800414a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004152:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800415a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	021b      	lsls	r3, r3, #8
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	4313      	orrs	r3, r2
 8004166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	f023 0320 	bic.w	r3, r3, #32
 800416e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	011b      	lsls	r3, r3, #4
 8004176:	697a      	ldr	r2, [r7, #20]
 8004178:	4313      	orrs	r3, r2
 800417a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	4a1d      	ldr	r2, [pc, #116]	; (80041f4 <TIM_OC2_SetConfig+0xd0>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d10d      	bne.n	80041a0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800418a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	011b      	lsls	r3, r3, #4
 8004192:	697a      	ldr	r2, [r7, #20]
 8004194:	4313      	orrs	r3, r2
 8004196:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800419e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4a14      	ldr	r2, [pc, #80]	; (80041f4 <TIM_OC2_SetConfig+0xd0>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d113      	bne.n	80041d0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	695b      	ldr	r3, [r3, #20]
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	693a      	ldr	r2, [r7, #16]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	699b      	ldr	r3, [r3, #24]
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	693a      	ldr	r2, [r7, #16]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	693a      	ldr	r2, [r7, #16]
 80041d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	68fa      	ldr	r2, [r7, #12]
 80041da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	685a      	ldr	r2, [r3, #4]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	697a      	ldr	r2, [r7, #20]
 80041e8:	621a      	str	r2, [r3, #32]
}
 80041ea:	bf00      	nop
 80041ec:	371c      	adds	r7, #28
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bc80      	pop	{r7}
 80041f2:	4770      	bx	lr
 80041f4:	40012c00 	.word	0x40012c00

080041f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b087      	sub	sp, #28
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a1b      	ldr	r3, [r3, #32]
 8004206:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a1b      	ldr	r3, [r3, #32]
 8004212:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	69db      	ldr	r3, [r3, #28]
 800421e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004226:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f023 0303 	bic.w	r3, r3, #3
 800422e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	4313      	orrs	r3, r2
 8004238:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004240:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	021b      	lsls	r3, r3, #8
 8004248:	697a      	ldr	r2, [r7, #20]
 800424a:	4313      	orrs	r3, r2
 800424c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a1d      	ldr	r2, [pc, #116]	; (80042c8 <TIM_OC3_SetConfig+0xd0>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d10d      	bne.n	8004272 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800425c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	021b      	lsls	r3, r3, #8
 8004264:	697a      	ldr	r2, [r7, #20]
 8004266:	4313      	orrs	r3, r2
 8004268:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004270:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a14      	ldr	r2, [pc, #80]	; (80042c8 <TIM_OC3_SetConfig+0xd0>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d113      	bne.n	80042a2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004280:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004288:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	695b      	ldr	r3, [r3, #20]
 800428e:	011b      	lsls	r3, r3, #4
 8004290:	693a      	ldr	r2, [r7, #16]
 8004292:	4313      	orrs	r3, r2
 8004294:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	699b      	ldr	r3, [r3, #24]
 800429a:	011b      	lsls	r3, r3, #4
 800429c:	693a      	ldr	r2, [r7, #16]
 800429e:	4313      	orrs	r3, r2
 80042a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	693a      	ldr	r2, [r7, #16]
 80042a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	685a      	ldr	r2, [r3, #4]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	697a      	ldr	r2, [r7, #20]
 80042ba:	621a      	str	r2, [r3, #32]
}
 80042bc:	bf00      	nop
 80042be:	371c      	adds	r7, #28
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bc80      	pop	{r7}
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	40012c00 	.word	0x40012c00

080042cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b087      	sub	sp, #28
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a1b      	ldr	r3, [r3, #32]
 80042da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a1b      	ldr	r3, [r3, #32]
 80042e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	69db      	ldr	r3, [r3, #28]
 80042f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004302:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	021b      	lsls	r3, r3, #8
 800430a:	68fa      	ldr	r2, [r7, #12]
 800430c:	4313      	orrs	r3, r2
 800430e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004316:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	031b      	lsls	r3, r3, #12
 800431e:	693a      	ldr	r2, [r7, #16]
 8004320:	4313      	orrs	r3, r2
 8004322:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	4a0f      	ldr	r2, [pc, #60]	; (8004364 <TIM_OC4_SetConfig+0x98>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d109      	bne.n	8004340 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004332:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	695b      	ldr	r3, [r3, #20]
 8004338:	019b      	lsls	r3, r3, #6
 800433a:	697a      	ldr	r2, [r7, #20]
 800433c:	4313      	orrs	r3, r2
 800433e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	697a      	ldr	r2, [r7, #20]
 8004344:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	68fa      	ldr	r2, [r7, #12]
 800434a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	685a      	ldr	r2, [r3, #4]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	693a      	ldr	r2, [r7, #16]
 8004358:	621a      	str	r2, [r3, #32]
}
 800435a:	bf00      	nop
 800435c:	371c      	adds	r7, #28
 800435e:	46bd      	mov	sp, r7
 8004360:	bc80      	pop	{r7}
 8004362:	4770      	bx	lr
 8004364:	40012c00 	.word	0x40012c00

08004368 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004368:	b480      	push	{r7}
 800436a:	b087      	sub	sp, #28
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6a1b      	ldr	r3, [r3, #32]
 8004378:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6a1b      	ldr	r3, [r3, #32]
 800437e:	f023 0201 	bic.w	r2, r3, #1
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	699b      	ldr	r3, [r3, #24]
 800438a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004392:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	011b      	lsls	r3, r3, #4
 8004398:	693a      	ldr	r2, [r7, #16]
 800439a:	4313      	orrs	r3, r2
 800439c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	f023 030a 	bic.w	r3, r3, #10
 80043a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043a6:	697a      	ldr	r2, [r7, #20]
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	693a      	ldr	r2, [r7, #16]
 80043b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	697a      	ldr	r2, [r7, #20]
 80043b8:	621a      	str	r2, [r3, #32]
}
 80043ba:	bf00      	nop
 80043bc:	371c      	adds	r7, #28
 80043be:	46bd      	mov	sp, r7
 80043c0:	bc80      	pop	{r7}
 80043c2:	4770      	bx	lr

080043c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b087      	sub	sp, #28
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	60b9      	str	r1, [r7, #8]
 80043ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6a1b      	ldr	r3, [r3, #32]
 80043d4:	f023 0210 	bic.w	r2, r3, #16
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	699b      	ldr	r3, [r3, #24]
 80043e0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6a1b      	ldr	r3, [r3, #32]
 80043e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043ee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	031b      	lsls	r3, r3, #12
 80043f4:	697a      	ldr	r2, [r7, #20]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004400:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	011b      	lsls	r3, r3, #4
 8004406:	693a      	ldr	r2, [r7, #16]
 8004408:	4313      	orrs	r3, r2
 800440a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	697a      	ldr	r2, [r7, #20]
 8004410:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	693a      	ldr	r2, [r7, #16]
 8004416:	621a      	str	r2, [r3, #32]
}
 8004418:	bf00      	nop
 800441a:	371c      	adds	r7, #28
 800441c:	46bd      	mov	sp, r7
 800441e:	bc80      	pop	{r7}
 8004420:	4770      	bx	lr

08004422 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004422:	b480      	push	{r7}
 8004424:	b085      	sub	sp, #20
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
 800442a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004438:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800443a:	683a      	ldr	r2, [r7, #0]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	4313      	orrs	r3, r2
 8004440:	f043 0307 	orr.w	r3, r3, #7
 8004444:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	68fa      	ldr	r2, [r7, #12]
 800444a:	609a      	str	r2, [r3, #8]
}
 800444c:	bf00      	nop
 800444e:	3714      	adds	r7, #20
 8004450:	46bd      	mov	sp, r7
 8004452:	bc80      	pop	{r7}
 8004454:	4770      	bx	lr

08004456 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004456:	b480      	push	{r7}
 8004458:	b087      	sub	sp, #28
 800445a:	af00      	add	r7, sp, #0
 800445c:	60f8      	str	r0, [r7, #12]
 800445e:	60b9      	str	r1, [r7, #8]
 8004460:	607a      	str	r2, [r7, #4]
 8004462:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004470:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	021a      	lsls	r2, r3, #8
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	431a      	orrs	r2, r3
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	4313      	orrs	r3, r2
 800447e:	697a      	ldr	r2, [r7, #20]
 8004480:	4313      	orrs	r3, r2
 8004482:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	697a      	ldr	r2, [r7, #20]
 8004488:	609a      	str	r2, [r3, #8]
}
 800448a:	bf00      	nop
 800448c:	371c      	adds	r7, #28
 800448e:	46bd      	mov	sp, r7
 8004490:	bc80      	pop	{r7}
 8004492:	4770      	bx	lr

08004494 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004494:	b480      	push	{r7}
 8004496:	b087      	sub	sp, #28
 8004498:	af00      	add	r7, sp, #0
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	f003 031f 	and.w	r3, r3, #31
 80044a6:	2201      	movs	r2, #1
 80044a8:	fa02 f303 	lsl.w	r3, r2, r3
 80044ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6a1a      	ldr	r2, [r3, #32]
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	43db      	mvns	r3, r3
 80044b6:	401a      	ands	r2, r3
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6a1a      	ldr	r2, [r3, #32]
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	f003 031f 	and.w	r3, r3, #31
 80044c6:	6879      	ldr	r1, [r7, #4]
 80044c8:	fa01 f303 	lsl.w	r3, r1, r3
 80044cc:	431a      	orrs	r2, r3
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	621a      	str	r2, [r3, #32]
}
 80044d2:	bf00      	nop
 80044d4:	371c      	adds	r7, #28
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bc80      	pop	{r7}
 80044da:	4770      	bx	lr

080044dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044dc:	b480      	push	{r7}
 80044de:	b085      	sub	sp, #20
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d101      	bne.n	80044f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044f0:	2302      	movs	r3, #2
 80044f2:	e046      	b.n	8004582 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2202      	movs	r2, #2
 8004500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800451a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68fa      	ldr	r2, [r7, #12]
 8004522:	4313      	orrs	r3, r2
 8004524:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a16      	ldr	r2, [pc, #88]	; (800458c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d00e      	beq.n	8004556 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004540:	d009      	beq.n	8004556 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a12      	ldr	r2, [pc, #72]	; (8004590 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d004      	beq.n	8004556 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a10      	ldr	r2, [pc, #64]	; (8004594 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d10c      	bne.n	8004570 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800455c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	68ba      	ldr	r2, [r7, #8]
 8004564:	4313      	orrs	r3, r2
 8004566:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	68ba      	ldr	r2, [r7, #8]
 800456e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	3714      	adds	r7, #20
 8004586:	46bd      	mov	sp, r7
 8004588:	bc80      	pop	{r7}
 800458a:	4770      	bx	lr
 800458c:	40012c00 	.word	0x40012c00
 8004590:	40000400 	.word	0x40000400
 8004594:	40000800 	.word	0x40000800

08004598 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004598:	b480      	push	{r7}
 800459a:	b085      	sub	sp, #20
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80045a2:	2300      	movs	r3, #0
 80045a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d101      	bne.n	80045b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80045b0:	2302      	movs	r3, #2
 80045b2:	e03d      	b.n	8004630 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	4313      	orrs	r3, r2
 8004600:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	695b      	ldr	r3, [r3, #20]
 800460c:	4313      	orrs	r3, r2
 800460e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	69db      	ldr	r3, [r3, #28]
 800461a:	4313      	orrs	r3, r2
 800461c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	68fa      	ldr	r2, [r7, #12]
 8004624:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800462e:	2300      	movs	r3, #0
}
 8004630:	4618      	mov	r0, r3
 8004632:	3714      	adds	r7, #20
 8004634:	46bd      	mov	sp, r7
 8004636:	bc80      	pop	{r7}
 8004638:	4770      	bx	lr
	...

0800463c <__errno>:
 800463c:	4b01      	ldr	r3, [pc, #4]	; (8004644 <__errno+0x8>)
 800463e:	6818      	ldr	r0, [r3, #0]
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop
 8004644:	20000058 	.word	0x20000058

08004648 <__libc_init_array>:
 8004648:	b570      	push	{r4, r5, r6, lr}
 800464a:	2600      	movs	r6, #0
 800464c:	4d0c      	ldr	r5, [pc, #48]	; (8004680 <__libc_init_array+0x38>)
 800464e:	4c0d      	ldr	r4, [pc, #52]	; (8004684 <__libc_init_array+0x3c>)
 8004650:	1b64      	subs	r4, r4, r5
 8004652:	10a4      	asrs	r4, r4, #2
 8004654:	42a6      	cmp	r6, r4
 8004656:	d109      	bne.n	800466c <__libc_init_array+0x24>
 8004658:	f000 f8dc 	bl	8004814 <_init>
 800465c:	2600      	movs	r6, #0
 800465e:	4d0a      	ldr	r5, [pc, #40]	; (8004688 <__libc_init_array+0x40>)
 8004660:	4c0a      	ldr	r4, [pc, #40]	; (800468c <__libc_init_array+0x44>)
 8004662:	1b64      	subs	r4, r4, r5
 8004664:	10a4      	asrs	r4, r4, #2
 8004666:	42a6      	cmp	r6, r4
 8004668:	d105      	bne.n	8004676 <__libc_init_array+0x2e>
 800466a:	bd70      	pop	{r4, r5, r6, pc}
 800466c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004670:	4798      	blx	r3
 8004672:	3601      	adds	r6, #1
 8004674:	e7ee      	b.n	8004654 <__libc_init_array+0xc>
 8004676:	f855 3b04 	ldr.w	r3, [r5], #4
 800467a:	4798      	blx	r3
 800467c:	3601      	adds	r6, #1
 800467e:	e7f2      	b.n	8004666 <__libc_init_array+0x1e>
 8004680:	0800484c 	.word	0x0800484c
 8004684:	0800484c 	.word	0x0800484c
 8004688:	0800484c 	.word	0x0800484c
 800468c:	08004850 	.word	0x08004850

08004690 <malloc>:
 8004690:	4b02      	ldr	r3, [pc, #8]	; (800469c <malloc+0xc>)
 8004692:	4601      	mov	r1, r0
 8004694:	6818      	ldr	r0, [r3, #0]
 8004696:	f000 b82b 	b.w	80046f0 <_malloc_r>
 800469a:	bf00      	nop
 800469c:	20000058 	.word	0x20000058

080046a0 <memset>:
 80046a0:	4603      	mov	r3, r0
 80046a2:	4402      	add	r2, r0
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d100      	bne.n	80046aa <memset+0xa>
 80046a8:	4770      	bx	lr
 80046aa:	f803 1b01 	strb.w	r1, [r3], #1
 80046ae:	e7f9      	b.n	80046a4 <memset+0x4>

080046b0 <sbrk_aligned>:
 80046b0:	b570      	push	{r4, r5, r6, lr}
 80046b2:	4e0e      	ldr	r6, [pc, #56]	; (80046ec <sbrk_aligned+0x3c>)
 80046b4:	460c      	mov	r4, r1
 80046b6:	6831      	ldr	r1, [r6, #0]
 80046b8:	4605      	mov	r5, r0
 80046ba:	b911      	cbnz	r1, 80046c2 <sbrk_aligned+0x12>
 80046bc:	f000 f88c 	bl	80047d8 <_sbrk_r>
 80046c0:	6030      	str	r0, [r6, #0]
 80046c2:	4621      	mov	r1, r4
 80046c4:	4628      	mov	r0, r5
 80046c6:	f000 f887 	bl	80047d8 <_sbrk_r>
 80046ca:	1c43      	adds	r3, r0, #1
 80046cc:	d00a      	beq.n	80046e4 <sbrk_aligned+0x34>
 80046ce:	1cc4      	adds	r4, r0, #3
 80046d0:	f024 0403 	bic.w	r4, r4, #3
 80046d4:	42a0      	cmp	r0, r4
 80046d6:	d007      	beq.n	80046e8 <sbrk_aligned+0x38>
 80046d8:	1a21      	subs	r1, r4, r0
 80046da:	4628      	mov	r0, r5
 80046dc:	f000 f87c 	bl	80047d8 <_sbrk_r>
 80046e0:	3001      	adds	r0, #1
 80046e2:	d101      	bne.n	80046e8 <sbrk_aligned+0x38>
 80046e4:	f04f 34ff 	mov.w	r4, #4294967295
 80046e8:	4620      	mov	r0, r4
 80046ea:	bd70      	pop	{r4, r5, r6, pc}
 80046ec:	20000430 	.word	0x20000430

080046f0 <_malloc_r>:
 80046f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046f4:	1ccd      	adds	r5, r1, #3
 80046f6:	f025 0503 	bic.w	r5, r5, #3
 80046fa:	3508      	adds	r5, #8
 80046fc:	2d0c      	cmp	r5, #12
 80046fe:	bf38      	it	cc
 8004700:	250c      	movcc	r5, #12
 8004702:	2d00      	cmp	r5, #0
 8004704:	4607      	mov	r7, r0
 8004706:	db01      	blt.n	800470c <_malloc_r+0x1c>
 8004708:	42a9      	cmp	r1, r5
 800470a:	d905      	bls.n	8004718 <_malloc_r+0x28>
 800470c:	230c      	movs	r3, #12
 800470e:	2600      	movs	r6, #0
 8004710:	603b      	str	r3, [r7, #0]
 8004712:	4630      	mov	r0, r6
 8004714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004718:	4e2e      	ldr	r6, [pc, #184]	; (80047d4 <_malloc_r+0xe4>)
 800471a:	f000 f86d 	bl	80047f8 <__malloc_lock>
 800471e:	6833      	ldr	r3, [r6, #0]
 8004720:	461c      	mov	r4, r3
 8004722:	bb34      	cbnz	r4, 8004772 <_malloc_r+0x82>
 8004724:	4629      	mov	r1, r5
 8004726:	4638      	mov	r0, r7
 8004728:	f7ff ffc2 	bl	80046b0 <sbrk_aligned>
 800472c:	1c43      	adds	r3, r0, #1
 800472e:	4604      	mov	r4, r0
 8004730:	d14d      	bne.n	80047ce <_malloc_r+0xde>
 8004732:	6834      	ldr	r4, [r6, #0]
 8004734:	4626      	mov	r6, r4
 8004736:	2e00      	cmp	r6, #0
 8004738:	d140      	bne.n	80047bc <_malloc_r+0xcc>
 800473a:	6823      	ldr	r3, [r4, #0]
 800473c:	4631      	mov	r1, r6
 800473e:	4638      	mov	r0, r7
 8004740:	eb04 0803 	add.w	r8, r4, r3
 8004744:	f000 f848 	bl	80047d8 <_sbrk_r>
 8004748:	4580      	cmp	r8, r0
 800474a:	d13a      	bne.n	80047c2 <_malloc_r+0xd2>
 800474c:	6821      	ldr	r1, [r4, #0]
 800474e:	3503      	adds	r5, #3
 8004750:	1a6d      	subs	r5, r5, r1
 8004752:	f025 0503 	bic.w	r5, r5, #3
 8004756:	3508      	adds	r5, #8
 8004758:	2d0c      	cmp	r5, #12
 800475a:	bf38      	it	cc
 800475c:	250c      	movcc	r5, #12
 800475e:	4638      	mov	r0, r7
 8004760:	4629      	mov	r1, r5
 8004762:	f7ff ffa5 	bl	80046b0 <sbrk_aligned>
 8004766:	3001      	adds	r0, #1
 8004768:	d02b      	beq.n	80047c2 <_malloc_r+0xd2>
 800476a:	6823      	ldr	r3, [r4, #0]
 800476c:	442b      	add	r3, r5
 800476e:	6023      	str	r3, [r4, #0]
 8004770:	e00e      	b.n	8004790 <_malloc_r+0xa0>
 8004772:	6822      	ldr	r2, [r4, #0]
 8004774:	1b52      	subs	r2, r2, r5
 8004776:	d41e      	bmi.n	80047b6 <_malloc_r+0xc6>
 8004778:	2a0b      	cmp	r2, #11
 800477a:	d916      	bls.n	80047aa <_malloc_r+0xba>
 800477c:	1961      	adds	r1, r4, r5
 800477e:	42a3      	cmp	r3, r4
 8004780:	6025      	str	r5, [r4, #0]
 8004782:	bf18      	it	ne
 8004784:	6059      	strne	r1, [r3, #4]
 8004786:	6863      	ldr	r3, [r4, #4]
 8004788:	bf08      	it	eq
 800478a:	6031      	streq	r1, [r6, #0]
 800478c:	5162      	str	r2, [r4, r5]
 800478e:	604b      	str	r3, [r1, #4]
 8004790:	4638      	mov	r0, r7
 8004792:	f104 060b 	add.w	r6, r4, #11
 8004796:	f000 f835 	bl	8004804 <__malloc_unlock>
 800479a:	f026 0607 	bic.w	r6, r6, #7
 800479e:	1d23      	adds	r3, r4, #4
 80047a0:	1af2      	subs	r2, r6, r3
 80047a2:	d0b6      	beq.n	8004712 <_malloc_r+0x22>
 80047a4:	1b9b      	subs	r3, r3, r6
 80047a6:	50a3      	str	r3, [r4, r2]
 80047a8:	e7b3      	b.n	8004712 <_malloc_r+0x22>
 80047aa:	6862      	ldr	r2, [r4, #4]
 80047ac:	42a3      	cmp	r3, r4
 80047ae:	bf0c      	ite	eq
 80047b0:	6032      	streq	r2, [r6, #0]
 80047b2:	605a      	strne	r2, [r3, #4]
 80047b4:	e7ec      	b.n	8004790 <_malloc_r+0xa0>
 80047b6:	4623      	mov	r3, r4
 80047b8:	6864      	ldr	r4, [r4, #4]
 80047ba:	e7b2      	b.n	8004722 <_malloc_r+0x32>
 80047bc:	4634      	mov	r4, r6
 80047be:	6876      	ldr	r6, [r6, #4]
 80047c0:	e7b9      	b.n	8004736 <_malloc_r+0x46>
 80047c2:	230c      	movs	r3, #12
 80047c4:	4638      	mov	r0, r7
 80047c6:	603b      	str	r3, [r7, #0]
 80047c8:	f000 f81c 	bl	8004804 <__malloc_unlock>
 80047cc:	e7a1      	b.n	8004712 <_malloc_r+0x22>
 80047ce:	6025      	str	r5, [r4, #0]
 80047d0:	e7de      	b.n	8004790 <_malloc_r+0xa0>
 80047d2:	bf00      	nop
 80047d4:	2000042c 	.word	0x2000042c

080047d8 <_sbrk_r>:
 80047d8:	b538      	push	{r3, r4, r5, lr}
 80047da:	2300      	movs	r3, #0
 80047dc:	4d05      	ldr	r5, [pc, #20]	; (80047f4 <_sbrk_r+0x1c>)
 80047de:	4604      	mov	r4, r0
 80047e0:	4608      	mov	r0, r1
 80047e2:	602b      	str	r3, [r5, #0]
 80047e4:	f7fc ffe8 	bl	80017b8 <_sbrk>
 80047e8:	1c43      	adds	r3, r0, #1
 80047ea:	d102      	bne.n	80047f2 <_sbrk_r+0x1a>
 80047ec:	682b      	ldr	r3, [r5, #0]
 80047ee:	b103      	cbz	r3, 80047f2 <_sbrk_r+0x1a>
 80047f0:	6023      	str	r3, [r4, #0]
 80047f2:	bd38      	pop	{r3, r4, r5, pc}
 80047f4:	20000434 	.word	0x20000434

080047f8 <__malloc_lock>:
 80047f8:	4801      	ldr	r0, [pc, #4]	; (8004800 <__malloc_lock+0x8>)
 80047fa:	f000 b809 	b.w	8004810 <__retarget_lock_acquire_recursive>
 80047fe:	bf00      	nop
 8004800:	20000438 	.word	0x20000438

08004804 <__malloc_unlock>:
 8004804:	4801      	ldr	r0, [pc, #4]	; (800480c <__malloc_unlock+0x8>)
 8004806:	f000 b804 	b.w	8004812 <__retarget_lock_release_recursive>
 800480a:	bf00      	nop
 800480c:	20000438 	.word	0x20000438

08004810 <__retarget_lock_acquire_recursive>:
 8004810:	4770      	bx	lr

08004812 <__retarget_lock_release_recursive>:
 8004812:	4770      	bx	lr

08004814 <_init>:
 8004814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004816:	bf00      	nop
 8004818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800481a:	bc08      	pop	{r3}
 800481c:	469e      	mov	lr, r3
 800481e:	4770      	bx	lr

08004820 <_fini>:
 8004820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004822:	bf00      	nop
 8004824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004826:	bc08      	pop	{r3}
 8004828:	469e      	mov	lr, r3
 800482a:	4770      	bx	lr
