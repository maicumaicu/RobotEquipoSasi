
SumoBp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003410  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800351c  0800351c  0001351c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800353c  0800353c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800353c  0800353c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800353c  0800353c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800353c  0800353c  0001353c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003540  08003540  00013540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003544  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d0  2000000c  08003550  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004dc  08003550  000204dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a619  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001efa  00000000  00000000  0002a64e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b68  00000000  00000000  0002c548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a70  00000000  00000000  0002d0b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002441  00000000  00000000  0002db20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cfe4  00000000  00000000  0002ff61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c5b7  00000000  00000000  0003cf45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c94fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e74  00000000  00000000  000c954c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003504 	.word	0x08003504

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08003504 	.word	0x08003504

0800014c <btnMachine>:
	} else
		return x;
}


void btnMachine(button* btn) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	switch (btn->estado) {
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	689b      	ldr	r3, [r3, #8]
 8000158:	2b02      	cmp	r3, #2
 800015a:	d04a      	beq.n	80001f2 <btnMachine+0xa6>
 800015c:	2b02      	cmp	r3, #2
 800015e:	dc64      	bgt.n	800022a <btnMachine+0xde>
 8000160:	2b00      	cmp	r3, #0
 8000162:	d002      	beq.n	800016a <btnMachine+0x1e>
 8000164:	2b01      	cmp	r3, #1
 8000166:	d01d      	beq.n	80001a4 <btnMachine+0x58>
			(*btn).flag = 1;
			(*btn).estado = ESPERA;
		}
		break;
	}
}
 8000168:	e05f      	b.n	800022a <btnMachine+0xde>
		(*btn).flag = 0;
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	2200      	movs	r2, #0
 800016e:	60da      	str	r2, [r3, #12]
		lecturaBtn = HAL_GPIO_ReadPin((*btn).PIN.Port, (*btn).PIN.pin);
 8000170:	687b      	ldr	r3, [r7, #4]
 8000172:	681a      	ldr	r2, [r3, #0]
 8000174:	687b      	ldr	r3, [r7, #4]
 8000176:	889b      	ldrh	r3, [r3, #4]
 8000178:	4619      	mov	r1, r3
 800017a:	4610      	mov	r0, r2
 800017c:	f001 fea8 	bl	8001ed0 <HAL_GPIO_ReadPin>
 8000180:	4603      	mov	r3, r0
 8000182:	461a      	mov	r2, r3
 8000184:	4b2b      	ldr	r3, [pc, #172]	; (8000234 <btnMachine+0xe8>)
 8000186:	601a      	str	r2, [r3, #0]
		if (lecturaBtn == 0) {
 8000188:	4b2a      	ldr	r3, [pc, #168]	; (8000234 <btnMachine+0xe8>)
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	2b00      	cmp	r3, #0
 800018e:	d147      	bne.n	8000220 <btnMachine+0xd4>
			ticks = HAL_GetTick();
 8000190:	f000 fe52 	bl	8000e38 <HAL_GetTick>
 8000194:	4603      	mov	r3, r0
 8000196:	461a      	mov	r2, r3
 8000198:	4b27      	ldr	r3, [pc, #156]	; (8000238 <btnMachine+0xec>)
 800019a:	601a      	str	r2, [r3, #0]
			(*btn).estado = CONFIRMACION;
 800019c:	687b      	ldr	r3, [r7, #4]
 800019e:	2201      	movs	r2, #1
 80001a0:	609a      	str	r2, [r3, #8]
		break;
 80001a2:	e03d      	b.n	8000220 <btnMachine+0xd4>
		lecturaBtn = HAL_GPIO_ReadPin((*btn).PIN.Port, (*btn).PIN.pin);
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	681a      	ldr	r2, [r3, #0]
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	889b      	ldrh	r3, [r3, #4]
 80001ac:	4619      	mov	r1, r3
 80001ae:	4610      	mov	r0, r2
 80001b0:	f001 fe8e 	bl	8001ed0 <HAL_GPIO_ReadPin>
 80001b4:	4603      	mov	r3, r0
 80001b6:	461a      	mov	r2, r3
 80001b8:	4b1e      	ldr	r3, [pc, #120]	; (8000234 <btnMachine+0xe8>)
 80001ba:	601a      	str	r2, [r3, #0]
		if (lecturaBtn == 0 && HAL_GetTick() >= ticks + TICKS_BTN) {
 80001bc:	4b1d      	ldr	r3, [pc, #116]	; (8000234 <btnMachine+0xe8>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	2b00      	cmp	r3, #0
 80001c2:	d10a      	bne.n	80001da <btnMachine+0x8e>
 80001c4:	f000 fe38 	bl	8000e38 <HAL_GetTick>
 80001c8:	4602      	mov	r2, r0
 80001ca:	4b1b      	ldr	r3, [pc, #108]	; (8000238 <btnMachine+0xec>)
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	3319      	adds	r3, #25
 80001d0:	429a      	cmp	r2, r3
 80001d2:	d302      	bcc.n	80001da <btnMachine+0x8e>
			(*btn).estado = LIBERACION;
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	2202      	movs	r2, #2
 80001d8:	609a      	str	r2, [r3, #8]
		if (lecturaBtn == 1 && ticks < TICKS_BTN) {
 80001da:	4b16      	ldr	r3, [pc, #88]	; (8000234 <btnMachine+0xe8>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	2b01      	cmp	r3, #1
 80001e0:	d120      	bne.n	8000224 <btnMachine+0xd8>
 80001e2:	4b15      	ldr	r3, [pc, #84]	; (8000238 <btnMachine+0xec>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	2b18      	cmp	r3, #24
 80001e8:	dc1c      	bgt.n	8000224 <btnMachine+0xd8>
			(*btn).estado = ESPERA;
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	2200      	movs	r2, #0
 80001ee:	609a      	str	r2, [r3, #8]
		break;
 80001f0:	e018      	b.n	8000224 <btnMachine+0xd8>
		lecturaBtn = HAL_GPIO_ReadPin((*btn).PIN.Port, (*btn).PIN.pin);
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	681a      	ldr	r2, [r3, #0]
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	889b      	ldrh	r3, [r3, #4]
 80001fa:	4619      	mov	r1, r3
 80001fc:	4610      	mov	r0, r2
 80001fe:	f001 fe67 	bl	8001ed0 <HAL_GPIO_ReadPin>
 8000202:	4603      	mov	r3, r0
 8000204:	461a      	mov	r2, r3
 8000206:	4b0b      	ldr	r3, [pc, #44]	; (8000234 <btnMachine+0xe8>)
 8000208:	601a      	str	r2, [r3, #0]
		if (lecturaBtn == 1) {
 800020a:	4b0a      	ldr	r3, [pc, #40]	; (8000234 <btnMachine+0xe8>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	2b01      	cmp	r3, #1
 8000210:	d10a      	bne.n	8000228 <btnMachine+0xdc>
			(*btn).flag = 1;
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	2201      	movs	r2, #1
 8000216:	60da      	str	r2, [r3, #12]
			(*btn).estado = ESPERA;
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	2200      	movs	r2, #0
 800021c:	609a      	str	r2, [r3, #8]
		break;
 800021e:	e003      	b.n	8000228 <btnMachine+0xdc>
		break;
 8000220:	bf00      	nop
 8000222:	e002      	b.n	800022a <btnMachine+0xde>
		break;
 8000224:	bf00      	nop
 8000226:	e000      	b.n	800022a <btnMachine+0xde>
		break;
 8000228:	bf00      	nop
}
 800022a:	bf00      	nop
 800022c:	3708      	adds	r7, #8
 800022e:	46bd      	mov	sp, r7
 8000230:	bd80      	pop	{r7, pc}
 8000232:	bf00      	nop
 8000234:	2000002c 	.word	0x2000002c
 8000238:	20000028 	.word	0x20000028

0800023c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000240:	f000 fda2 	bl	8000d88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000244:	f000 f8d4 	bl	80003f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000248:	f000 fad8 	bl	80007fc <MX_GPIO_Init>
  MX_DMA_Init();
 800024c:	f000 fab8 	bl	80007c0 <MX_DMA_Init>
  MX_TIM1_Init();
 8000250:	f000 f994 	bl	800057c <MX_TIM1_Init>
  MX_ADC1_Init();
 8000254:	f000 f928 	bl	80004a8 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000258:	f000 fa30 	bl	80006bc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	btns[0].PIN.Port = B1_GPIO_Port;
 800025c:	4b55      	ldr	r3, [pc, #340]	; (80003b4 <main+0x178>)
 800025e:	4a56      	ldr	r2, [pc, #344]	; (80003b8 <main+0x17c>)
 8000260:	601a      	str	r2, [r3, #0]
	 btns[0].PIN.pin = B1_Pin;
 8000262:	4b54      	ldr	r3, [pc, #336]	; (80003b4 <main+0x178>)
 8000264:	2220      	movs	r2, #32
 8000266:	809a      	strh	r2, [r3, #4]
	 btns[0].estado = ESPERA;
 8000268:	4b52      	ldr	r3, [pc, #328]	; (80003b4 <main+0x178>)
 800026a:	2200      	movs	r2, #0
 800026c:	609a      	str	r2, [r3, #8]
	 btns[0].flag = 0;
 800026e:	4b51      	ldr	r3, [pc, #324]	; (80003b4 <main+0x178>)
 8000270:	2200      	movs	r2, #0
 8000272:	60da      	str	r2, [r3, #12]
	 btns[1].PIN.Port = B2_GPIO_Port;
 8000274:	4b4f      	ldr	r3, [pc, #316]	; (80003b4 <main+0x178>)
 8000276:	4a50      	ldr	r2, [pc, #320]	; (80003b8 <main+0x17c>)
 8000278:	611a      	str	r2, [r3, #16]
	 btns[1].PIN.pin = B2_Pin;
 800027a:	4b4e      	ldr	r3, [pc, #312]	; (80003b4 <main+0x178>)
 800027c:	2210      	movs	r2, #16
 800027e:	829a      	strh	r2, [r3, #20]
	 btns[1].estado = ESPERA;
 8000280:	4b4c      	ldr	r3, [pc, #304]	; (80003b4 <main+0x178>)
 8000282:	2200      	movs	r2, #0
 8000284:	619a      	str	r2, [r3, #24]
	 btns[1].flag = 0;
 8000286:	4b4b      	ldr	r3, [pc, #300]	; (80003b4 <main+0x178>)
 8000288:	2200      	movs	r2, #0
 800028a:	61da      	str	r2, [r3, #28]
	 btns[2].PIN.Port = B3_GPIO_Port;
 800028c:	4b49      	ldr	r3, [pc, #292]	; (80003b4 <main+0x178>)
 800028e:	4a4a      	ldr	r2, [pc, #296]	; (80003b8 <main+0x17c>)
 8000290:	621a      	str	r2, [r3, #32]
	 btns[2].PIN.pin = B3_Pin;
 8000292:	4b48      	ldr	r3, [pc, #288]	; (80003b4 <main+0x178>)
 8000294:	2208      	movs	r2, #8
 8000296:	849a      	strh	r2, [r3, #36]	; 0x24
	 btns[2].estado = ESPERA;
 8000298:	4b46      	ldr	r3, [pc, #280]	; (80003b4 <main+0x178>)
 800029a:	2200      	movs	r2, #0
 800029c:	629a      	str	r2, [r3, #40]	; 0x28
	 btns[2].flag = 0;
 800029e:	4b45      	ldr	r3, [pc, #276]	; (80003b4 <main+0x178>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	62da      	str	r2, [r3, #44]	; 0x2c
	 btns[3].PIN.Port = B4_GPIO_Port;
 80002a4:	4b43      	ldr	r3, [pc, #268]	; (80003b4 <main+0x178>)
 80002a6:	4a45      	ldr	r2, [pc, #276]	; (80003bc <main+0x180>)
 80002a8:	631a      	str	r2, [r3, #48]	; 0x30
	 btns[3].PIN.pin = B4_Pin;
 80002aa:	4b42      	ldr	r3, [pc, #264]	; (80003b4 <main+0x178>)
 80002ac:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80002b0:	869a      	strh	r2, [r3, #52]	; 0x34
	 btns[3].estado = ESPERA;
 80002b2:	4b40      	ldr	r3, [pc, #256]	; (80003b4 <main+0x178>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	639a      	str	r2, [r3, #56]	; 0x38
	 btns[3].flag = 0;
 80002b8:	4b3e      	ldr	r3, [pc, #248]	; (80003b4 <main+0x178>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	63da      	str	r2, [r3, #60]	; 0x3c
	 mainState = INIT;
 80002be:	4b40      	ldr	r3, [pc, #256]	; (80003c0 <main+0x184>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	601a      	str	r2, [r3, #0]
	 Motors[0].IN1.Port = INA1_GPIO_Port;
 80002c4:	4b3f      	ldr	r3, [pc, #252]	; (80003c4 <main+0x188>)
 80002c6:	4a3c      	ldr	r2, [pc, #240]	; (80003b8 <main+0x17c>)
 80002c8:	609a      	str	r2, [r3, #8]
	 Motors[0].IN2.Port = INA2_GPIO_Port;
 80002ca:	4b3e      	ldr	r3, [pc, #248]	; (80003c4 <main+0x188>)
 80002cc:	4a3a      	ldr	r2, [pc, #232]	; (80003b8 <main+0x17c>)
 80002ce:	601a      	str	r2, [r3, #0]
	 Motors[0].IN1.pin = INA1_Pin;
 80002d0:	4b3c      	ldr	r3, [pc, #240]	; (80003c4 <main+0x188>)
 80002d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80002d6:	819a      	strh	r2, [r3, #12]
	 Motors[0].IN2.pin = INA2_Pin;
 80002d8:	4b3a      	ldr	r3, [pc, #232]	; (80003c4 <main+0x188>)
 80002da:	2201      	movs	r2, #1
 80002dc:	809a      	strh	r2, [r3, #4]
	 Motors[1].IN1.Port = INB1_GPIO_Port;
 80002de:	4b39      	ldr	r3, [pc, #228]	; (80003c4 <main+0x188>)
 80002e0:	4a36      	ldr	r2, [pc, #216]	; (80003bc <main+0x180>)
 80002e2:	621a      	str	r2, [r3, #32]
	 Motors[1].IN2.Port = INB2_GPIO_Port;
 80002e4:	4b37      	ldr	r3, [pc, #220]	; (80003c4 <main+0x188>)
 80002e6:	4a34      	ldr	r2, [pc, #208]	; (80003b8 <main+0x17c>)
 80002e8:	619a      	str	r2, [r3, #24]
	 Motors[1].IN1.pin = INB1_Pin;
 80002ea:	4b36      	ldr	r3, [pc, #216]	; (80003c4 <main+0x188>)
 80002ec:	2280      	movs	r2, #128	; 0x80
 80002ee:	849a      	strh	r2, [r3, #36]	; 0x24
	 Motors[1].IN2.pin = INB2_Pin;
 80002f0:	4b34      	ldr	r3, [pc, #208]	; (80003c4 <main+0x188>)
 80002f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80002f6:	839a      	strh	r2, [r3, #28]

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80002f8:	2104      	movs	r1, #4
 80002fa:	4833      	ldr	r0, [pc, #204]	; (80003c8 <main+0x18c>)
 80002fc:	f002 fb5e 	bl	80029bc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000300:	2100      	movs	r1, #0
 8000302:	4832      	ldr	r0, [pc, #200]	; (80003cc <main+0x190>)
 8000304:	f002 fb5a 	bl	80029bc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000308:	210c      	movs	r1, #12
 800030a:	4830      	ldr	r0, [pc, #192]	; (80003cc <main+0x190>)
 800030c:	f002 fb56 	bl	80029bc <HAL_TIM_PWM_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_buf, ADC_BUF_LEN);
 8000310:	2264      	movs	r2, #100	; 0x64
 8000312:	492f      	ldr	r1, [pc, #188]	; (80003d0 <main+0x194>)
 8000314:	482f      	ldr	r0, [pc, #188]	; (80003d4 <main+0x198>)
 8000316:	f000 fe71 	bl	8000ffc <HAL_ADC_Start_DMA>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		TIM1->CCR2 = 150;
 800031a:	4b2f      	ldr	r3, [pc, #188]	; (80003d8 <main+0x19c>)
 800031c:	2296      	movs	r2, #150	; 0x96
 800031e:	639a      	str	r2, [r3, #56]	; 0x38
		TIM3->CCR1 = 60000;
 8000320:	4b2e      	ldr	r3, [pc, #184]	; (80003dc <main+0x1a0>)
 8000322:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000326:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR4 = 60000;
 8000328:	4b2c      	ldr	r3, [pc, #176]	; (80003dc <main+0x1a0>)
 800032a:	f64e 2260 	movw	r2, #60000	; 0xea60
 800032e:	641a      	str	r2, [r3, #64]	; 0x40
		btnMachine(&btns[0]);
 8000330:	4820      	ldr	r0, [pc, #128]	; (80003b4 <main+0x178>)
 8000332:	f7ff ff0b 	bl	800014c <btnMachine>
		 btnMachine(&btns[1]);
 8000336:	482a      	ldr	r0, [pc, #168]	; (80003e0 <main+0x1a4>)
 8000338:	f7ff ff08 	bl	800014c <btnMachine>
		 btnMachine(&btns[2]);
 800033c:	4829      	ldr	r0, [pc, #164]	; (80003e4 <main+0x1a8>)
 800033e:	f7ff ff05 	bl	800014c <btnMachine>
		 btnMachine(&btns[3]);
 8000342:	4829      	ldr	r0, [pc, #164]	; (80003e8 <main+0x1ac>)
 8000344:	f7ff ff02 	bl	800014c <btnMachine>
		 HAL_GPIO_WritePin(EN1, GPIO_PIN_SET);
 8000348:	2201      	movs	r2, #1
 800034a:	2120      	movs	r1, #32
 800034c:	481b      	ldr	r0, [pc, #108]	; (80003bc <main+0x180>)
 800034e:	f001 fdd6 	bl	8001efe <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(INB1, GPIO_PIN_SET);
 8000352:	2201      	movs	r2, #1
 8000354:	2180      	movs	r1, #128	; 0x80
 8000356:	4819      	ldr	r0, [pc, #100]	; (80003bc <main+0x180>)
 8000358:	f001 fdd1 	bl	8001efe <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(INB2, GPIO_PIN_RESET);
 800035c:	2200      	movs	r2, #0
 800035e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000362:	4815      	ldr	r0, [pc, #84]	; (80003b8 <main+0x17c>)
 8000364:	f001 fdcb 	bl	8001efe <HAL_GPIO_WritePin>

		//mainMachine();
		if (Sensors[0] == 0) {
 8000368:	4b20      	ldr	r3, [pc, #128]	; (80003ec <main+0x1b0>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	2b00      	cmp	r3, #0
 800036e:	d106      	bne.n	800037e <main+0x142>
			HAL_GPIO_WritePin(L3, GPIO_PIN_SET);
 8000370:	2201      	movs	r2, #1
 8000372:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000376:	4810      	ldr	r0, [pc, #64]	; (80003b8 <main+0x17c>)
 8000378:	f001 fdc1 	bl	8001efe <HAL_GPIO_WritePin>
 800037c:	e005      	b.n	800038a <main+0x14e>
		} else {
			HAL_GPIO_WritePin(L3, GPIO_PIN_RESET);
 800037e:	2200      	movs	r2, #0
 8000380:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000384:	480c      	ldr	r0, [pc, #48]	; (80003b8 <main+0x17c>)
 8000386:	f001 fdba 	bl	8001efe <HAL_GPIO_WritePin>
		}
		if (HAL_GPIO_ReadPin(S2) == 0) {
 800038a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800038e:	480b      	ldr	r0, [pc, #44]	; (80003bc <main+0x180>)
 8000390:	f001 fd9e 	bl	8001ed0 <HAL_GPIO_ReadPin>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d105      	bne.n	80003a6 <main+0x16a>
			HAL_GPIO_WritePin(L2, GPIO_PIN_SET);
 800039a:	2201      	movs	r2, #1
 800039c:	2180      	movs	r1, #128	; 0x80
 800039e:	4806      	ldr	r0, [pc, #24]	; (80003b8 <main+0x17c>)
 80003a0:	f001 fdad 	bl	8001efe <HAL_GPIO_WritePin>
 80003a4:	e7b9      	b.n	800031a <main+0xde>
		} else {
			HAL_GPIO_WritePin(L2, GPIO_PIN_RESET);
 80003a6:	2200      	movs	r2, #0
 80003a8:	2180      	movs	r1, #128	; 0x80
 80003aa:	4803      	ldr	r0, [pc, #12]	; (80003b8 <main+0x17c>)
 80003ac:	f001 fda7 	bl	8001efe <HAL_GPIO_WritePin>
		TIM1->CCR2 = 150;
 80003b0:	e7b3      	b.n	800031a <main+0xde>
 80003b2:	bf00      	nop
 80003b4:	20000464 	.word	0x20000464
 80003b8:	40010c00 	.word	0x40010c00
 80003bc:	40010800 	.word	0x40010800
 80003c0:	200004d4 	.word	0x200004d4
 80003c4:	200004a4 	.word	0x200004a4
 80003c8:	200000a4 	.word	0x200000a4
 80003cc:	200000ec 	.word	0x200000ec
 80003d0:	20000144 	.word	0x20000144
 80003d4:	20000030 	.word	0x20000030
 80003d8:	40012c00 	.word	0x40012c00
 80003dc:	40000400 	.word	0x40000400
 80003e0:	20000474 	.word	0x20000474
 80003e4:	20000484 	.word	0x20000484
 80003e8:	20000494 	.word	0x20000494
 80003ec:	20000134 	.word	0x20000134

080003f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b094      	sub	sp, #80	; 0x50
 80003f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003fa:	2228      	movs	r2, #40	; 0x28
 80003fc:	2100      	movs	r1, #0
 80003fe:	4618      	mov	r0, r3
 8000400:	f003 f878 	bl	80034f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000404:	f107 0314 	add.w	r3, r7, #20
 8000408:	2200      	movs	r2, #0
 800040a:	601a      	str	r2, [r3, #0]
 800040c:	605a      	str	r2, [r3, #4]
 800040e:	609a      	str	r2, [r3, #8]
 8000410:	60da      	str	r2, [r3, #12]
 8000412:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000414:	1d3b      	adds	r3, r7, #4
 8000416:	2200      	movs	r2, #0
 8000418:	601a      	str	r2, [r3, #0]
 800041a:	605a      	str	r2, [r3, #4]
 800041c:	609a      	str	r2, [r3, #8]
 800041e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000420:	2301      	movs	r3, #1
 8000422:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000424:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000428:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800042a:	2300      	movs	r3, #0
 800042c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800042e:	2301      	movs	r3, #1
 8000430:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000432:	2302      	movs	r3, #2
 8000434:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000436:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800043a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800043c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000440:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000442:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000446:	4618      	mov	r0, r3
 8000448:	f001 fd72 	bl	8001f30 <HAL_RCC_OscConfig>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d001      	beq.n	8000456 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000452:	f000 fad1 	bl	80009f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000456:	230f      	movs	r3, #15
 8000458:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800045a:	2302      	movs	r3, #2
 800045c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800045e:	2300      	movs	r3, #0
 8000460:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000462:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000466:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000468:	2300      	movs	r3, #0
 800046a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800046c:	f107 0314 	add.w	r3, r7, #20
 8000470:	2102      	movs	r1, #2
 8000472:	4618      	mov	r0, r3
 8000474:	f001 ffde 	bl	8002434 <HAL_RCC_ClockConfig>
 8000478:	4603      	mov	r3, r0
 800047a:	2b00      	cmp	r3, #0
 800047c:	d001      	beq.n	8000482 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800047e:	f000 fabb 	bl	80009f8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000482:	2302      	movs	r3, #2
 8000484:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000486:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800048a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800048c:	1d3b      	adds	r3, r7, #4
 800048e:	4618      	mov	r0, r3
 8000490:	f002 f936 	bl	8002700 <HAL_RCCEx_PeriphCLKConfig>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d001      	beq.n	800049e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800049a:	f000 faad 	bl	80009f8 <Error_Handler>
  }
}
 800049e:	bf00      	nop
 80004a0:	3750      	adds	r7, #80	; 0x50
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}
	...

080004a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b084      	sub	sp, #16
 80004ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004ae:	1d3b      	adds	r3, r7, #4
 80004b0:	2200      	movs	r2, #0
 80004b2:	601a      	str	r2, [r3, #0]
 80004b4:	605a      	str	r2, [r3, #4]
 80004b6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80004b8:	4b2e      	ldr	r3, [pc, #184]	; (8000574 <MX_ADC1_Init+0xcc>)
 80004ba:	4a2f      	ldr	r2, [pc, #188]	; (8000578 <MX_ADC1_Init+0xd0>)
 80004bc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80004be:	4b2d      	ldr	r3, [pc, #180]	; (8000574 <MX_ADC1_Init+0xcc>)
 80004c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004c4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80004c6:	4b2b      	ldr	r3, [pc, #172]	; (8000574 <MX_ADC1_Init+0xcc>)
 80004c8:	2201      	movs	r2, #1
 80004ca:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004cc:	4b29      	ldr	r3, [pc, #164]	; (8000574 <MX_ADC1_Init+0xcc>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004d2:	4b28      	ldr	r3, [pc, #160]	; (8000574 <MX_ADC1_Init+0xcc>)
 80004d4:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80004d8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004da:	4b26      	ldr	r3, [pc, #152]	; (8000574 <MX_ADC1_Init+0xcc>)
 80004dc:	2200      	movs	r2, #0
 80004de:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 80004e0:	4b24      	ldr	r3, [pc, #144]	; (8000574 <MX_ADC1_Init+0xcc>)
 80004e2:	2204      	movs	r2, #4
 80004e4:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80004e6:	4823      	ldr	r0, [pc, #140]	; (8000574 <MX_ADC1_Init+0xcc>)
 80004e8:	f000 fcb0 	bl	8000e4c <HAL_ADC_Init>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d001      	beq.n	80004f6 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80004f2:	f000 fa81 	bl	80009f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80004f6:	2300      	movs	r3, #0
 80004f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004fa:	2301      	movs	r3, #1
 80004fc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80004fe:	2300      	movs	r3, #0
 8000500:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000502:	1d3b      	adds	r3, r7, #4
 8000504:	4619      	mov	r1, r3
 8000506:	481b      	ldr	r0, [pc, #108]	; (8000574 <MX_ADC1_Init+0xcc>)
 8000508:	f000 fe68 	bl	80011dc <HAL_ADC_ConfigChannel>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d001      	beq.n	8000516 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000512:	f000 fa71 	bl	80009f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000516:	2301      	movs	r3, #1
 8000518:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800051a:	2302      	movs	r3, #2
 800051c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800051e:	1d3b      	adds	r3, r7, #4
 8000520:	4619      	mov	r1, r3
 8000522:	4814      	ldr	r0, [pc, #80]	; (8000574 <MX_ADC1_Init+0xcc>)
 8000524:	f000 fe5a 	bl	80011dc <HAL_ADC_ConfigChannel>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800052e:	f000 fa63 	bl	80009f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000532:	2302      	movs	r3, #2
 8000534:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000536:	2303      	movs	r3, #3
 8000538:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800053a:	1d3b      	adds	r3, r7, #4
 800053c:	4619      	mov	r1, r3
 800053e:	480d      	ldr	r0, [pc, #52]	; (8000574 <MX_ADC1_Init+0xcc>)
 8000540:	f000 fe4c 	bl	80011dc <HAL_ADC_ConfigChannel>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800054a:	f000 fa55 	bl	80009f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800054e:	2303      	movs	r3, #3
 8000550:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000552:	2304      	movs	r3, #4
 8000554:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000556:	1d3b      	adds	r3, r7, #4
 8000558:	4619      	mov	r1, r3
 800055a:	4806      	ldr	r0, [pc, #24]	; (8000574 <MX_ADC1_Init+0xcc>)
 800055c:	f000 fe3e 	bl	80011dc <HAL_ADC_ConfigChannel>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000566:	f000 fa47 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800056a:	bf00      	nop
 800056c:	3710      	adds	r7, #16
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	20000030 	.word	0x20000030
 8000578:	40012400 	.word	0x40012400

0800057c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b096      	sub	sp, #88	; 0x58
 8000580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000582:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	609a      	str	r2, [r3, #8]
 800058e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000590:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800059a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	605a      	str	r2, [r3, #4]
 80005a4:	609a      	str	r2, [r3, #8]
 80005a6:	60da      	str	r2, [r3, #12]
 80005a8:	611a      	str	r2, [r3, #16]
 80005aa:	615a      	str	r2, [r3, #20]
 80005ac:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80005ae:	1d3b      	adds	r3, r7, #4
 80005b0:	2220      	movs	r2, #32
 80005b2:	2100      	movs	r1, #0
 80005b4:	4618      	mov	r0, r3
 80005b6:	f002 ff9d 	bl	80034f4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80005ba:	4b3e      	ldr	r3, [pc, #248]	; (80006b4 <MX_TIM1_Init+0x138>)
 80005bc:	4a3e      	ldr	r2, [pc, #248]	; (80006b8 <MX_TIM1_Init+0x13c>)
 80005be:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80005c0:	4b3c      	ldr	r3, [pc, #240]	; (80006b4 <MX_TIM1_Init+0x138>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005c6:	4b3b      	ldr	r3, [pc, #236]	; (80006b4 <MX_TIM1_Init+0x138>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1892;
 80005cc:	4b39      	ldr	r3, [pc, #228]	; (80006b4 <MX_TIM1_Init+0x138>)
 80005ce:	f240 7264 	movw	r2, #1892	; 0x764
 80005d2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005d4:	4b37      	ldr	r3, [pc, #220]	; (80006b4 <MX_TIM1_Init+0x138>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80005da:	4b36      	ldr	r3, [pc, #216]	; (80006b4 <MX_TIM1_Init+0x138>)
 80005dc:	2200      	movs	r2, #0
 80005de:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80005e0:	4b34      	ldr	r3, [pc, #208]	; (80006b4 <MX_TIM1_Init+0x138>)
 80005e2:	2280      	movs	r2, #128	; 0x80
 80005e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80005e6:	4833      	ldr	r0, [pc, #204]	; (80006b4 <MX_TIM1_Init+0x138>)
 80005e8:	f002 f940 	bl	800286c <HAL_TIM_Base_Init>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80005f2:	f000 fa01 	bl	80009f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005fa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80005fc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000600:	4619      	mov	r1, r3
 8000602:	482c      	ldr	r0, [pc, #176]	; (80006b4 <MX_TIM1_Init+0x138>)
 8000604:	f002 fb3a 	bl	8002c7c <HAL_TIM_ConfigClockSource>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800060e:	f000 f9f3 	bl	80009f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000612:	4828      	ldr	r0, [pc, #160]	; (80006b4 <MX_TIM1_Init+0x138>)
 8000614:	f002 f979 	bl	800290a <HAL_TIM_PWM_Init>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800061e:	f000 f9eb 	bl	80009f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000622:	2300      	movs	r3, #0
 8000624:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000626:	2300      	movs	r3, #0
 8000628:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800062a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800062e:	4619      	mov	r1, r3
 8000630:	4820      	ldr	r0, [pc, #128]	; (80006b4 <MX_TIM1_Init+0x138>)
 8000632:	f002 fe8b 	bl	800334c <HAL_TIMEx_MasterConfigSynchronization>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800063c:	f000 f9dc 	bl	80009f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000640:	2360      	movs	r3, #96	; 0x60
 8000642:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000644:	2300      	movs	r3, #0
 8000646:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000648:	2300      	movs	r3, #0
 800064a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800064c:	2300      	movs	r3, #0
 800064e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000650:	2300      	movs	r3, #0
 8000652:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000654:	2300      	movs	r3, #0
 8000656:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000658:	2300      	movs	r3, #0
 800065a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800065c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000660:	2204      	movs	r2, #4
 8000662:	4619      	mov	r1, r3
 8000664:	4813      	ldr	r0, [pc, #76]	; (80006b4 <MX_TIM1_Init+0x138>)
 8000666:	f002 fa4b 	bl	8002b00 <HAL_TIM_PWM_ConfigChannel>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000670:	f000 f9c2 	bl	80009f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000674:	2300      	movs	r3, #0
 8000676:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000678:	2300      	movs	r3, #0
 800067a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800067c:	2300      	movs	r3, #0
 800067e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000680:	2300      	movs	r3, #0
 8000682:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000684:	2300      	movs	r3, #0
 8000686:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000688:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800068c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800068e:	2300      	movs	r3, #0
 8000690:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	4619      	mov	r1, r3
 8000696:	4807      	ldr	r0, [pc, #28]	; (80006b4 <MX_TIM1_Init+0x138>)
 8000698:	f002 feb6 	bl	8003408 <HAL_TIMEx_ConfigBreakDeadTime>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80006a2:	f000 f9a9 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80006a6:	4803      	ldr	r0, [pc, #12]	; (80006b4 <MX_TIM1_Init+0x138>)
 80006a8:	f000 faa2 	bl	8000bf0 <HAL_TIM_MspPostInit>

}
 80006ac:	bf00      	nop
 80006ae:	3758      	adds	r7, #88	; 0x58
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	200000a4 	.word	0x200000a4
 80006b8:	40012c00 	.word	0x40012c00

080006bc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b08e      	sub	sp, #56	; 0x38
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	605a      	str	r2, [r3, #4]
 80006cc:	609a      	str	r2, [r3, #8]
 80006ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006d0:	f107 0320 	add.w	r3, r7, #32
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006da:	1d3b      	adds	r3, r7, #4
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]
 80006e8:	615a      	str	r2, [r3, #20]
 80006ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006ec:	4b32      	ldr	r3, [pc, #200]	; (80007b8 <MX_TIM3_Init+0xfc>)
 80006ee:	4a33      	ldr	r2, [pc, #204]	; (80007bc <MX_TIM3_Init+0x100>)
 80006f0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80006f2:	4b31      	ldr	r3, [pc, #196]	; (80007b8 <MX_TIM3_Init+0xfc>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006f8:	4b2f      	ldr	r3, [pc, #188]	; (80007b8 <MX_TIM3_Init+0xfc>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80006fe:	4b2e      	ldr	r3, [pc, #184]	; (80007b8 <MX_TIM3_Init+0xfc>)
 8000700:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000704:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000706:	4b2c      	ldr	r3, [pc, #176]	; (80007b8 <MX_TIM3_Init+0xfc>)
 8000708:	2200      	movs	r2, #0
 800070a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800070c:	4b2a      	ldr	r3, [pc, #168]	; (80007b8 <MX_TIM3_Init+0xfc>)
 800070e:	2200      	movs	r2, #0
 8000710:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000712:	4829      	ldr	r0, [pc, #164]	; (80007b8 <MX_TIM3_Init+0xfc>)
 8000714:	f002 f8aa 	bl	800286c <HAL_TIM_Base_Init>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800071e:	f000 f96b 	bl	80009f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000722:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000726:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000728:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800072c:	4619      	mov	r1, r3
 800072e:	4822      	ldr	r0, [pc, #136]	; (80007b8 <MX_TIM3_Init+0xfc>)
 8000730:	f002 faa4 	bl	8002c7c <HAL_TIM_ConfigClockSource>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800073a:	f000 f95d 	bl	80009f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800073e:	481e      	ldr	r0, [pc, #120]	; (80007b8 <MX_TIM3_Init+0xfc>)
 8000740:	f002 f8e3 	bl	800290a <HAL_TIM_PWM_Init>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800074a:	f000 f955 	bl	80009f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800074e:	2300      	movs	r3, #0
 8000750:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000752:	2300      	movs	r3, #0
 8000754:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000756:	f107 0320 	add.w	r3, r7, #32
 800075a:	4619      	mov	r1, r3
 800075c:	4816      	ldr	r0, [pc, #88]	; (80007b8 <MX_TIM3_Init+0xfc>)
 800075e:	f002 fdf5 	bl	800334c <HAL_TIMEx_MasterConfigSynchronization>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000768:	f000 f946 	bl	80009f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800076c:	2360      	movs	r3, #96	; 0x60
 800076e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000770:	2300      	movs	r3, #0
 8000772:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000774:	2300      	movs	r3, #0
 8000776:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000778:	2300      	movs	r3, #0
 800077a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800077c:	1d3b      	adds	r3, r7, #4
 800077e:	2200      	movs	r2, #0
 8000780:	4619      	mov	r1, r3
 8000782:	480d      	ldr	r0, [pc, #52]	; (80007b8 <MX_TIM3_Init+0xfc>)
 8000784:	f002 f9bc 	bl	8002b00 <HAL_TIM_PWM_ConfigChannel>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800078e:	f000 f933 	bl	80009f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000792:	1d3b      	adds	r3, r7, #4
 8000794:	220c      	movs	r2, #12
 8000796:	4619      	mov	r1, r3
 8000798:	4807      	ldr	r0, [pc, #28]	; (80007b8 <MX_TIM3_Init+0xfc>)
 800079a:	f002 f9b1 	bl	8002b00 <HAL_TIM_PWM_ConfigChannel>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80007a4:	f000 f928 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80007a8:	4803      	ldr	r0, [pc, #12]	; (80007b8 <MX_TIM3_Init+0xfc>)
 80007aa:	f000 fa21 	bl	8000bf0 <HAL_TIM_MspPostInit>

}
 80007ae:	bf00      	nop
 80007b0:	3738      	adds	r7, #56	; 0x38
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	200000ec 	.word	0x200000ec
 80007bc:	40000400 	.word	0x40000400

080007c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007c6:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <MX_DMA_Init+0x38>)
 80007c8:	695b      	ldr	r3, [r3, #20]
 80007ca:	4a0b      	ldr	r2, [pc, #44]	; (80007f8 <MX_DMA_Init+0x38>)
 80007cc:	f043 0301 	orr.w	r3, r3, #1
 80007d0:	6153      	str	r3, [r2, #20]
 80007d2:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <MX_DMA_Init+0x38>)
 80007d4:	695b      	ldr	r3, [r3, #20]
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80007de:	2200      	movs	r2, #0
 80007e0:	2100      	movs	r1, #0
 80007e2:	200b      	movs	r0, #11
 80007e4:	f000 ffcb 	bl	800177e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80007e8:	200b      	movs	r0, #11
 80007ea:	f000 ffe4 	bl	80017b6 <HAL_NVIC_EnableIRQ>

}
 80007ee:	bf00      	nop
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40021000 	.word	0x40021000

080007fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b088      	sub	sp, #32
 8000800:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000802:	f107 0310 	add.w	r3, r7, #16
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000810:	4b45      	ldr	r3, [pc, #276]	; (8000928 <MX_GPIO_Init+0x12c>)
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	4a44      	ldr	r2, [pc, #272]	; (8000928 <MX_GPIO_Init+0x12c>)
 8000816:	f043 0310 	orr.w	r3, r3, #16
 800081a:	6193      	str	r3, [r2, #24]
 800081c:	4b42      	ldr	r3, [pc, #264]	; (8000928 <MX_GPIO_Init+0x12c>)
 800081e:	699b      	ldr	r3, [r3, #24]
 8000820:	f003 0310 	and.w	r3, r3, #16
 8000824:	60fb      	str	r3, [r7, #12]
 8000826:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000828:	4b3f      	ldr	r3, [pc, #252]	; (8000928 <MX_GPIO_Init+0x12c>)
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	4a3e      	ldr	r2, [pc, #248]	; (8000928 <MX_GPIO_Init+0x12c>)
 800082e:	f043 0320 	orr.w	r3, r3, #32
 8000832:	6193      	str	r3, [r2, #24]
 8000834:	4b3c      	ldr	r3, [pc, #240]	; (8000928 <MX_GPIO_Init+0x12c>)
 8000836:	699b      	ldr	r3, [r3, #24]
 8000838:	f003 0320 	and.w	r3, r3, #32
 800083c:	60bb      	str	r3, [r7, #8]
 800083e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000840:	4b39      	ldr	r3, [pc, #228]	; (8000928 <MX_GPIO_Init+0x12c>)
 8000842:	699b      	ldr	r3, [r3, #24]
 8000844:	4a38      	ldr	r2, [pc, #224]	; (8000928 <MX_GPIO_Init+0x12c>)
 8000846:	f043 0304 	orr.w	r3, r3, #4
 800084a:	6193      	str	r3, [r2, #24]
 800084c:	4b36      	ldr	r3, [pc, #216]	; (8000928 <MX_GPIO_Init+0x12c>)
 800084e:	699b      	ldr	r3, [r3, #24]
 8000850:	f003 0304 	and.w	r3, r3, #4
 8000854:	607b      	str	r3, [r7, #4]
 8000856:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000858:	4b33      	ldr	r3, [pc, #204]	; (8000928 <MX_GPIO_Init+0x12c>)
 800085a:	699b      	ldr	r3, [r3, #24]
 800085c:	4a32      	ldr	r2, [pc, #200]	; (8000928 <MX_GPIO_Init+0x12c>)
 800085e:	f043 0308 	orr.w	r3, r3, #8
 8000862:	6193      	str	r3, [r2, #24]
 8000864:	4b30      	ldr	r3, [pc, #192]	; (8000928 <MX_GPIO_Init+0x12c>)
 8000866:	699b      	ldr	r3, [r3, #24]
 8000868:	f003 0308 	and.w	r3, r3, #8
 800086c:	603b      	str	r3, [r7, #0]
 800086e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000870:	2200      	movs	r2, #0
 8000872:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000876:	482d      	ldr	r0, [pc, #180]	; (800092c <MX_GPIO_Init+0x130>)
 8000878:	f001 fb41 	bl	8001efe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN1_Pin|INB1_Pin, GPIO_PIN_RESET);
 800087c:	2200      	movs	r2, #0
 800087e:	21a0      	movs	r1, #160	; 0xa0
 8000880:	482b      	ldr	r0, [pc, #172]	; (8000930 <MX_GPIO_Init+0x134>)
 8000882:	f001 fb3c 	bl	8001efe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, INA2_Pin|INB2_Pin|INA1_Pin|L1_Pin
 8000886:	2200      	movs	r2, #0
 8000888:	f640 71c1 	movw	r1, #4033	; 0xfc1
 800088c:	4829      	ldr	r0, [pc, #164]	; (8000934 <MX_GPIO_Init+0x138>)
 800088e:	f001 fb36 	bl	8001efe <HAL_GPIO_WritePin>
                          |L2_Pin|L3_Pin|L4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000892:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000896:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000898:	2301      	movs	r3, #1
 800089a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a0:	2302      	movs	r3, #2
 80008a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008a4:	f107 0310 	add.w	r3, r7, #16
 80008a8:	4619      	mov	r1, r3
 80008aa:	4820      	ldr	r0, [pc, #128]	; (800092c <MX_GPIO_Init+0x130>)
 80008ac:	f001 f98c 	bl	8001bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN1_Pin INB1_Pin */
  GPIO_InitStruct.Pin = EN1_Pin|INB1_Pin;
 80008b0:	23a0      	movs	r3, #160	; 0xa0
 80008b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b4:	2301      	movs	r3, #1
 80008b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008bc:	2302      	movs	r3, #2
 80008be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c0:	f107 0310 	add.w	r3, r7, #16
 80008c4:	4619      	mov	r1, r3
 80008c6:	481a      	ldr	r0, [pc, #104]	; (8000930 <MX_GPIO_Init+0x134>)
 80008c8:	f001 f97e 	bl	8001bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : INA2_Pin INB2_Pin INA1_Pin L1_Pin
                           L2_Pin L3_Pin L4_Pin */
  GPIO_InitStruct.Pin = INA2_Pin|INB2_Pin|INA1_Pin|L1_Pin
 80008cc:	f640 73c1 	movw	r3, #4033	; 0xfc1
 80008d0:	613b      	str	r3, [r7, #16]
                          |L2_Pin|L3_Pin|L4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d2:	2301      	movs	r3, #1
 80008d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008da:	2302      	movs	r3, #2
 80008dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008de:	f107 0310 	add.w	r3, r7, #16
 80008e2:	4619      	mov	r1, r3
 80008e4:	4813      	ldr	r0, [pc, #76]	; (8000934 <MX_GPIO_Init+0x138>)
 80008e6:	f001 f96f 	bl	8001bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15
                           B3_Pin B2_Pin B1_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 80008ea:	f24f 0338 	movw	r3, #61496	; 0xf038
 80008ee:	613b      	str	r3, [r7, #16]
                          |B3_Pin|B2_Pin|B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f0:	2300      	movs	r3, #0
 80008f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f8:	f107 0310 	add.w	r3, r7, #16
 80008fc:	4619      	mov	r1, r3
 80008fe:	480d      	ldr	r0, [pc, #52]	; (8000934 <MX_GPIO_Init+0x138>)
 8000900:	f001 f962 	bl	8001bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 S1_Pin S2_Pin PA12
                           B4_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|S1_Pin|S2_Pin|GPIO_PIN_12
 8000904:	f44f 431d 	mov.w	r3, #40192	; 0x9d00
 8000908:	613b      	str	r3, [r7, #16]
                          |B4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800090a:	2300      	movs	r3, #0
 800090c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000912:	f107 0310 	add.w	r3, r7, #16
 8000916:	4619      	mov	r1, r3
 8000918:	4805      	ldr	r0, [pc, #20]	; (8000930 <MX_GPIO_Init+0x134>)
 800091a:	f001 f955 	bl	8001bc8 <HAL_GPIO_Init>

}
 800091e:	bf00      	nop
 8000920:	3720      	adds	r7, #32
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40021000 	.word	0x40021000
 800092c:	40011000 	.word	0x40011000
 8000930:	40010800 	.word	0x40010800
 8000934:	40010c00 	.word	0x40010c00

08000938 <HAL_ADC_ConvCpltCallback>:
		}
		break;
	}
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 for (int i = 0; i < 10; i++) {
 8000940:	2300      	movs	r3, #0
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	e029      	b.n	800099a <HAL_ADC_ConvCpltCallback+0x62>
 CNY70_1[i] = adc_buf[i * 4];
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	009b      	lsls	r3, r3, #2
 800094a:	4a25      	ldr	r2, [pc, #148]	; (80009e0 <HAL_ADC_ConvCpltCallback+0xa8>)
 800094c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000950:	4924      	ldr	r1, [pc, #144]	; (80009e4 <HAL_ADC_ConvCpltCallback+0xac>)
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 CNY70_2[i] = adc_buf[i * 4 + 1];
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	009b      	lsls	r3, r3, #2
 800095c:	3301      	adds	r3, #1
 800095e:	4a20      	ldr	r2, [pc, #128]	; (80009e0 <HAL_ADC_ConvCpltCallback+0xa8>)
 8000960:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000964:	4920      	ldr	r1, [pc, #128]	; (80009e8 <HAL_ADC_ConvCpltCallback+0xb0>)
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 CNY70_3[i] = adc_buf[i * 4 + 2];
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	009b      	lsls	r3, r3, #2
 8000970:	3302      	adds	r3, #2
 8000972:	4a1b      	ldr	r2, [pc, #108]	; (80009e0 <HAL_ADC_ConvCpltCallback+0xa8>)
 8000974:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000978:	491c      	ldr	r1, [pc, #112]	; (80009ec <HAL_ADC_ConvCpltCallback+0xb4>)
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 CNY70_4[i] = adc_buf[i * 4 + 3];
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	009b      	lsls	r3, r3, #2
 8000984:	3303      	adds	r3, #3
 8000986:	4a16      	ldr	r2, [pc, #88]	; (80009e0 <HAL_ADC_ConvCpltCallback+0xa8>)
 8000988:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800098c:	4918      	ldr	r1, [pc, #96]	; (80009f0 <HAL_ADC_ConvCpltCallback+0xb8>)
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 for (int i = 0; i < 10; i++) {
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	3301      	adds	r3, #1
 8000998:	60fb      	str	r3, [r7, #12]
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	2b09      	cmp	r3, #9
 800099e:	ddd2      	ble.n	8000946 <HAL_ADC_ConvCpltCallback+0xe>
 }
 Sensors[0] = lecturaCNY70(10, CNY70_1);
 80009a0:	4910      	ldr	r1, [pc, #64]	; (80009e4 <HAL_ADC_ConvCpltCallback+0xac>)
 80009a2:	200a      	movs	r0, #10
 80009a4:	f000 f82d 	bl	8000a02 <lecturaCNY70>
 80009a8:	4603      	mov	r3, r0
 80009aa:	4a12      	ldr	r2, [pc, #72]	; (80009f4 <HAL_ADC_ConvCpltCallback+0xbc>)
 80009ac:	6013      	str	r3, [r2, #0]
 Sensors[1] = lecturaCNY70(10, CNY70_2);
 80009ae:	490e      	ldr	r1, [pc, #56]	; (80009e8 <HAL_ADC_ConvCpltCallback+0xb0>)
 80009b0:	200a      	movs	r0, #10
 80009b2:	f000 f826 	bl	8000a02 <lecturaCNY70>
 80009b6:	4603      	mov	r3, r0
 80009b8:	4a0e      	ldr	r2, [pc, #56]	; (80009f4 <HAL_ADC_ConvCpltCallback+0xbc>)
 80009ba:	6053      	str	r3, [r2, #4]
 Sensors[2] = lecturaCNY70(10, CNY70_3);
 80009bc:	490b      	ldr	r1, [pc, #44]	; (80009ec <HAL_ADC_ConvCpltCallback+0xb4>)
 80009be:	200a      	movs	r0, #10
 80009c0:	f000 f81f 	bl	8000a02 <lecturaCNY70>
 80009c4:	4603      	mov	r3, r0
 80009c6:	4a0b      	ldr	r2, [pc, #44]	; (80009f4 <HAL_ADC_ConvCpltCallback+0xbc>)
 80009c8:	6093      	str	r3, [r2, #8]
 Sensors[3] = lecturaCNY70(10, CNY70_4);
 80009ca:	4909      	ldr	r1, [pc, #36]	; (80009f0 <HAL_ADC_ConvCpltCallback+0xb8>)
 80009cc:	200a      	movs	r0, #10
 80009ce:	f000 f818 	bl	8000a02 <lecturaCNY70>
 80009d2:	4603      	mov	r3, r0
 80009d4:	4a07      	ldr	r2, [pc, #28]	; (80009f4 <HAL_ADC_ConvCpltCallback+0xbc>)
 80009d6:	60d3      	str	r3, [r2, #12]
 //showModeNumber(8);

 }
 80009d8:	bf00      	nop
 80009da:	3710      	adds	r7, #16
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20000144 	.word	0x20000144
 80009e4:	200002d4 	.word	0x200002d4
 80009e8:	20000338 	.word	0x20000338
 80009ec:	2000039c 	.word	0x2000039c
 80009f0:	20000400 	.word	0x20000400
 80009f4:	20000134 	.word	0x20000134

080009f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009fc:	b672      	cpsid	i
}
 80009fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000a00:	e7fe      	b.n	8000a00 <Error_Handler+0x8>

08000a02 <lecturaCNY70>:
		S[i] = readSensor(sensors[i]);
	}
	return S;
}

int lecturaCNY70(int n, uint32_t values[10]) {
 8000a02:	b480      	push	{r7}
 8000a04:	b087      	sub	sp, #28
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	6078      	str	r0, [r7, #4]
 8000a0a:	6039      	str	r1, [r7, #0]
	long suma = 0;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < n; i++) {
 8000a10:	2300      	movs	r3, #0
 8000a12:	613b      	str	r3, [r7, #16]
 8000a14:	e00a      	b.n	8000a2c <lecturaCNY70+0x2a>
		suma = suma + values[i];
 8000a16:	693b      	ldr	r3, [r7, #16]
 8000a18:	009b      	lsls	r3, r3, #2
 8000a1a:	683a      	ldr	r2, [r7, #0]
 8000a1c:	4413      	add	r3, r2
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	4413      	add	r3, r2
 8000a24:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < n; i++) {
 8000a26:	693b      	ldr	r3, [r7, #16]
 8000a28:	3301      	adds	r3, #1
 8000a2a:	613b      	str	r3, [r7, #16]
 8000a2c:	693a      	ldr	r2, [r7, #16]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	429a      	cmp	r2, r3
 8000a32:	dbf0      	blt.n	8000a16 <lecturaCNY70+0x14>
	}
	int adc = (suma / n);
 8000a34:	697a      	ldr	r2, [r7, #20]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a3c:	60fb      	str	r3, [r7, #12]
	if (adc < 1000) {
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a44:	da01      	bge.n	8000a4a <lecturaCNY70+0x48>
		return BLANCO;
 8000a46:	2300      	movs	r3, #0
 8000a48:	e000      	b.n	8000a4c <lecturaCNY70+0x4a>
	} else {
		return NEGRO;
 8000a4a:	2301      	movs	r3, #1
	}
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	371c      	adds	r7, #28
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bc80      	pop	{r7}
 8000a54:	4770      	bx	lr
	...

08000a58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b085      	sub	sp, #20
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a5e:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <HAL_MspInit+0x5c>)
 8000a60:	699b      	ldr	r3, [r3, #24]
 8000a62:	4a14      	ldr	r2, [pc, #80]	; (8000ab4 <HAL_MspInit+0x5c>)
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	6193      	str	r3, [r2, #24]
 8000a6a:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <HAL_MspInit+0x5c>)
 8000a6c:	699b      	ldr	r3, [r3, #24]
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	60bb      	str	r3, [r7, #8]
 8000a74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a76:	4b0f      	ldr	r3, [pc, #60]	; (8000ab4 <HAL_MspInit+0x5c>)
 8000a78:	69db      	ldr	r3, [r3, #28]
 8000a7a:	4a0e      	ldr	r2, [pc, #56]	; (8000ab4 <HAL_MspInit+0x5c>)
 8000a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a80:	61d3      	str	r3, [r2, #28]
 8000a82:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <HAL_MspInit+0x5c>)
 8000a84:	69db      	ldr	r3, [r3, #28]
 8000a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a8e:	4b0a      	ldr	r3, [pc, #40]	; (8000ab8 <HAL_MspInit+0x60>)
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	4a04      	ldr	r2, [pc, #16]	; (8000ab8 <HAL_MspInit+0x60>)
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	3714      	adds	r7, #20
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bc80      	pop	{r7}
 8000ab2:	4770      	bx	lr
 8000ab4:	40021000 	.word	0x40021000
 8000ab8:	40010000 	.word	0x40010000

08000abc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b088      	sub	sp, #32
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac4:	f107 0310 	add.w	r3, r7, #16
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4a28      	ldr	r2, [pc, #160]	; (8000b78 <HAL_ADC_MspInit+0xbc>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d149      	bne.n	8000b70 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000adc:	4b27      	ldr	r3, [pc, #156]	; (8000b7c <HAL_ADC_MspInit+0xc0>)
 8000ade:	699b      	ldr	r3, [r3, #24]
 8000ae0:	4a26      	ldr	r2, [pc, #152]	; (8000b7c <HAL_ADC_MspInit+0xc0>)
 8000ae2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ae6:	6193      	str	r3, [r2, #24]
 8000ae8:	4b24      	ldr	r3, [pc, #144]	; (8000b7c <HAL_ADC_MspInit+0xc0>)
 8000aea:	699b      	ldr	r3, [r3, #24]
 8000aec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af4:	4b21      	ldr	r3, [pc, #132]	; (8000b7c <HAL_ADC_MspInit+0xc0>)
 8000af6:	699b      	ldr	r3, [r3, #24]
 8000af8:	4a20      	ldr	r2, [pc, #128]	; (8000b7c <HAL_ADC_MspInit+0xc0>)
 8000afa:	f043 0304 	orr.w	r3, r3, #4
 8000afe:	6193      	str	r3, [r2, #24]
 8000b00:	4b1e      	ldr	r3, [pc, #120]	; (8000b7c <HAL_ADC_MspInit+0xc0>)
 8000b02:	699b      	ldr	r3, [r3, #24]
 8000b04:	f003 0304 	and.w	r3, r3, #4
 8000b08:	60bb      	str	r3, [r7, #8]
 8000b0a:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = P1_Pin|P2_Pin|P3_Pin|P4_Pin
 8000b0c:	231f      	movs	r3, #31
 8000b0e:	613b      	str	r3, [r7, #16]
                          |P5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b10:	2303      	movs	r3, #3
 8000b12:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b14:	f107 0310 	add.w	r3, r7, #16
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4819      	ldr	r0, [pc, #100]	; (8000b80 <HAL_ADC_MspInit+0xc4>)
 8000b1c:	f001 f854 	bl	8001bc8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000b20:	4b18      	ldr	r3, [pc, #96]	; (8000b84 <HAL_ADC_MspInit+0xc8>)
 8000b22:	4a19      	ldr	r2, [pc, #100]	; (8000b88 <HAL_ADC_MspInit+0xcc>)
 8000b24:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b26:	4b17      	ldr	r3, [pc, #92]	; (8000b84 <HAL_ADC_MspInit+0xc8>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b2c:	4b15      	ldr	r3, [pc, #84]	; (8000b84 <HAL_ADC_MspInit+0xc8>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b32:	4b14      	ldr	r3, [pc, #80]	; (8000b84 <HAL_ADC_MspInit+0xc8>)
 8000b34:	2280      	movs	r2, #128	; 0x80
 8000b36:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000b38:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <HAL_ADC_MspInit+0xc8>)
 8000b3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b3e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000b40:	4b10      	ldr	r3, [pc, #64]	; (8000b84 <HAL_ADC_MspInit+0xc8>)
 8000b42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b46:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b48:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <HAL_ADC_MspInit+0xc8>)
 8000b4a:	2220      	movs	r2, #32
 8000b4c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b4e:	4b0d      	ldr	r3, [pc, #52]	; (8000b84 <HAL_ADC_MspInit+0xc8>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b54:	480b      	ldr	r0, [pc, #44]	; (8000b84 <HAL_ADC_MspInit+0xc8>)
 8000b56:	f000 fe49 	bl	80017ec <HAL_DMA_Init>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000b60:	f7ff ff4a 	bl	80009f8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	4a07      	ldr	r2, [pc, #28]	; (8000b84 <HAL_ADC_MspInit+0xc8>)
 8000b68:	621a      	str	r2, [r3, #32]
 8000b6a:	4a06      	ldr	r2, [pc, #24]	; (8000b84 <HAL_ADC_MspInit+0xc8>)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b70:	bf00      	nop
 8000b72:	3720      	adds	r7, #32
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	40012400 	.word	0x40012400
 8000b7c:	40021000 	.word	0x40021000
 8000b80:	40010800 	.word	0x40010800
 8000b84:	20000060 	.word	0x20000060
 8000b88:	40020008 	.word	0x40020008

08000b8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b085      	sub	sp, #20
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a12      	ldr	r2, [pc, #72]	; (8000be4 <HAL_TIM_Base_MspInit+0x58>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d10c      	bne.n	8000bb8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b9e:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <HAL_TIM_Base_MspInit+0x5c>)
 8000ba0:	699b      	ldr	r3, [r3, #24]
 8000ba2:	4a11      	ldr	r2, [pc, #68]	; (8000be8 <HAL_TIM_Base_MspInit+0x5c>)
 8000ba4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ba8:	6193      	str	r3, [r2, #24]
 8000baa:	4b0f      	ldr	r3, [pc, #60]	; (8000be8 <HAL_TIM_Base_MspInit+0x5c>)
 8000bac:	699b      	ldr	r3, [r3, #24]
 8000bae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000bb6:	e010      	b.n	8000bda <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a0b      	ldr	r2, [pc, #44]	; (8000bec <HAL_TIM_Base_MspInit+0x60>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d10b      	bne.n	8000bda <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000bc2:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <HAL_TIM_Base_MspInit+0x5c>)
 8000bc4:	69db      	ldr	r3, [r3, #28]
 8000bc6:	4a08      	ldr	r2, [pc, #32]	; (8000be8 <HAL_TIM_Base_MspInit+0x5c>)
 8000bc8:	f043 0302 	orr.w	r3, r3, #2
 8000bcc:	61d3      	str	r3, [r2, #28]
 8000bce:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <HAL_TIM_Base_MspInit+0x5c>)
 8000bd0:	69db      	ldr	r3, [r3, #28]
 8000bd2:	f003 0302 	and.w	r3, r3, #2
 8000bd6:	60bb      	str	r3, [r7, #8]
 8000bd8:	68bb      	ldr	r3, [r7, #8]
}
 8000bda:	bf00      	nop
 8000bdc:	3714      	adds	r7, #20
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bc80      	pop	{r7}
 8000be2:	4770      	bx	lr
 8000be4:	40012c00 	.word	0x40012c00
 8000be8:	40021000 	.word	0x40021000
 8000bec:	40000400 	.word	0x40000400

08000bf0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08a      	sub	sp, #40	; 0x28
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf8:	f107 0318 	add.w	r3, r7, #24
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4a2b      	ldr	r2, [pc, #172]	; (8000cb8 <HAL_TIM_MspPostInit+0xc8>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d119      	bne.n	8000c44 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c10:	4b2a      	ldr	r3, [pc, #168]	; (8000cbc <HAL_TIM_MspPostInit+0xcc>)
 8000c12:	699b      	ldr	r3, [r3, #24]
 8000c14:	4a29      	ldr	r2, [pc, #164]	; (8000cbc <HAL_TIM_MspPostInit+0xcc>)
 8000c16:	f043 0304 	orr.w	r3, r3, #4
 8000c1a:	6193      	str	r3, [r2, #24]
 8000c1c:	4b27      	ldr	r3, [pc, #156]	; (8000cbc <HAL_TIM_MspPostInit+0xcc>)
 8000c1e:	699b      	ldr	r3, [r3, #24]
 8000c20:	f003 0304 	and.w	r3, r3, #4
 8000c24:	617b      	str	r3, [r7, #20]
 8000c26:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c32:	2302      	movs	r3, #2
 8000c34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c36:	f107 0318 	add.w	r3, r7, #24
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4820      	ldr	r0, [pc, #128]	; (8000cc0 <HAL_TIM_MspPostInit+0xd0>)
 8000c3e:	f000 ffc3 	bl	8001bc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000c42:	e034      	b.n	8000cae <HAL_TIM_MspPostInit+0xbe>
  else if(htim->Instance==TIM3)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a1e      	ldr	r2, [pc, #120]	; (8000cc4 <HAL_TIM_MspPostInit+0xd4>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d12f      	bne.n	8000cae <HAL_TIM_MspPostInit+0xbe>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4e:	4b1b      	ldr	r3, [pc, #108]	; (8000cbc <HAL_TIM_MspPostInit+0xcc>)
 8000c50:	699b      	ldr	r3, [r3, #24]
 8000c52:	4a1a      	ldr	r2, [pc, #104]	; (8000cbc <HAL_TIM_MspPostInit+0xcc>)
 8000c54:	f043 0304 	orr.w	r3, r3, #4
 8000c58:	6193      	str	r3, [r2, #24]
 8000c5a:	4b18      	ldr	r3, [pc, #96]	; (8000cbc <HAL_TIM_MspPostInit+0xcc>)
 8000c5c:	699b      	ldr	r3, [r3, #24]
 8000c5e:	f003 0304 	and.w	r3, r3, #4
 8000c62:	613b      	str	r3, [r7, #16]
 8000c64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c66:	4b15      	ldr	r3, [pc, #84]	; (8000cbc <HAL_TIM_MspPostInit+0xcc>)
 8000c68:	699b      	ldr	r3, [r3, #24]
 8000c6a:	4a14      	ldr	r2, [pc, #80]	; (8000cbc <HAL_TIM_MspPostInit+0xcc>)
 8000c6c:	f043 0308 	orr.w	r3, r3, #8
 8000c70:	6193      	str	r3, [r2, #24]
 8000c72:	4b12      	ldr	r3, [pc, #72]	; (8000cbc <HAL_TIM_MspPostInit+0xcc>)
 8000c74:	699b      	ldr	r3, [r3, #24]
 8000c76:	f003 0308 	and.w	r3, r3, #8
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c7e:	2340      	movs	r3, #64	; 0x40
 8000c80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c82:	2302      	movs	r3, #2
 8000c84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c86:	2302      	movs	r3, #2
 8000c88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8a:	f107 0318 	add.w	r3, r7, #24
 8000c8e:	4619      	mov	r1, r3
 8000c90:	480b      	ldr	r0, [pc, #44]	; (8000cc0 <HAL_TIM_MspPostInit+0xd0>)
 8000c92:	f000 ff99 	bl	8001bc8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c96:	2302      	movs	r3, #2
 8000c98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca2:	f107 0318 	add.w	r3, r7, #24
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4807      	ldr	r0, [pc, #28]	; (8000cc8 <HAL_TIM_MspPostInit+0xd8>)
 8000caa:	f000 ff8d 	bl	8001bc8 <HAL_GPIO_Init>
}
 8000cae:	bf00      	nop
 8000cb0:	3728      	adds	r7, #40	; 0x28
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40012c00 	.word	0x40012c00
 8000cbc:	40021000 	.word	0x40021000
 8000cc0:	40010800 	.word	0x40010800
 8000cc4:	40000400 	.word	0x40000400
 8000cc8:	40010c00 	.word	0x40010c00

08000ccc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8000cd0:	e7fe      	b.n	8000cd0 <NMI_Handler+0x4>

08000cd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cd6:	e7fe      	b.n	8000cd6 <HardFault_Handler+0x4>

08000cd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cdc:	e7fe      	b.n	8000cdc <MemManage_Handler+0x4>

08000cde <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ce2:	e7fe      	b.n	8000ce2 <BusFault_Handler+0x4>

08000ce4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ce8:	e7fe      	b.n	8000ce8 <UsageFault_Handler+0x4>

08000cea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cea:	b480      	push	{r7}
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bc80      	pop	{r7}
 8000cf4:	4770      	bx	lr

08000cf6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bc80      	pop	{r7}
 8000d00:	4770      	bx	lr

08000d02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d02:	b480      	push	{r7}
 8000d04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bc80      	pop	{r7}
 8000d0c:	4770      	bx	lr

08000d0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	af00      	add	r7, sp, #0
			lineTracking(posicionLinea);
		}
	}*/

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d12:	f000 f87f 	bl	8000e14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
	...

08000d1c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000d20:	4802      	ldr	r0, [pc, #8]	; (8000d2c <DMA1_Channel1_IRQHandler+0x10>)
 8000d22:	f000 fe1d 	bl	8001960 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	20000060 	.word	0x20000060

08000d30 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bc80      	pop	{r7}
 8000d3a:	4770      	bx	lr

08000d3c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d3c:	480c      	ldr	r0, [pc, #48]	; (8000d70 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d3e:	490d      	ldr	r1, [pc, #52]	; (8000d74 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d40:	4a0d      	ldr	r2, [pc, #52]	; (8000d78 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d44:	e002      	b.n	8000d4c <LoopCopyDataInit>

08000d46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d4a:	3304      	adds	r3, #4

08000d4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d50:	d3f9      	bcc.n	8000d46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d52:	4a0a      	ldr	r2, [pc, #40]	; (8000d7c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d54:	4c0a      	ldr	r4, [pc, #40]	; (8000d80 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d58:	e001      	b.n	8000d5e <LoopFillZerobss>

08000d5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d5c:	3204      	adds	r2, #4

08000d5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d60:	d3fb      	bcc.n	8000d5a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d62:	f7ff ffe5 	bl	8000d30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d66:	f002 fba1 	bl	80034ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d6a:	f7ff fa67 	bl	800023c <main>
  bx lr
 8000d6e:	4770      	bx	lr
  ldr r0, =_sdata
 8000d70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d74:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d78:	08003544 	.word	0x08003544
  ldr r2, =_sbss
 8000d7c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d80:	200004dc 	.word	0x200004dc

08000d84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d84:	e7fe      	b.n	8000d84 <ADC1_2_IRQHandler>
	...

08000d88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d8c:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <HAL_Init+0x28>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a07      	ldr	r2, [pc, #28]	; (8000db0 <HAL_Init+0x28>)
 8000d92:	f043 0310 	orr.w	r3, r3, #16
 8000d96:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d98:	2003      	movs	r0, #3
 8000d9a:	f000 fce5 	bl	8001768 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d9e:	200f      	movs	r0, #15
 8000da0:	f000 f808 	bl	8000db4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000da4:	f7ff fe58 	bl	8000a58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000da8:	2300      	movs	r3, #0
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40022000 	.word	0x40022000

08000db4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dbc:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <HAL_InitTick+0x54>)
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	4b12      	ldr	r3, [pc, #72]	; (8000e0c <HAL_InitTick+0x58>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f000 fcfd 	bl	80017d2 <HAL_SYSTICK_Config>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
 8000de0:	e00e      	b.n	8000e00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2b0f      	cmp	r3, #15
 8000de6:	d80a      	bhi.n	8000dfe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000de8:	2200      	movs	r2, #0
 8000dea:	6879      	ldr	r1, [r7, #4]
 8000dec:	f04f 30ff 	mov.w	r0, #4294967295
 8000df0:	f000 fcc5 	bl	800177e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000df4:	4a06      	ldr	r2, [pc, #24]	; (8000e10 <HAL_InitTick+0x5c>)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	e000      	b.n	8000e00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3708      	adds	r7, #8
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	20000000 	.word	0x20000000
 8000e0c:	20000008 	.word	0x20000008
 8000e10:	20000004 	.word	0x20000004

08000e14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e18:	4b05      	ldr	r3, [pc, #20]	; (8000e30 <HAL_IncTick+0x1c>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	4b05      	ldr	r3, [pc, #20]	; (8000e34 <HAL_IncTick+0x20>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4413      	add	r3, r2
 8000e24:	4a03      	ldr	r2, [pc, #12]	; (8000e34 <HAL_IncTick+0x20>)
 8000e26:	6013      	str	r3, [r2, #0]
}
 8000e28:	bf00      	nop
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bc80      	pop	{r7}
 8000e2e:	4770      	bx	lr
 8000e30:	20000008 	.word	0x20000008
 8000e34:	200004d8 	.word	0x200004d8

08000e38 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e3c:	4b02      	ldr	r3, [pc, #8]	; (8000e48 <HAL_GetTick+0x10>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bc80      	pop	{r7}
 8000e46:	4770      	bx	lr
 8000e48:	200004d8 	.word	0x200004d8

08000e4c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b086      	sub	sp, #24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e54:	2300      	movs	r3, #0
 8000e56:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000e60:	2300      	movs	r3, #0
 8000e62:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d101      	bne.n	8000e6e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e0be      	b.n	8000fec <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	689b      	ldr	r3, [r3, #8]
 8000e72:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d109      	bne.n	8000e90 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2200      	movs	r2, #0
 8000e80:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2200      	movs	r2, #0
 8000e86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	f7ff fe16 	bl	8000abc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000e90:	6878      	ldr	r0, [r7, #4]
 8000e92:	f000 faf5 	bl	8001480 <ADC_ConversionStop_Disable>
 8000e96:	4603      	mov	r3, r0
 8000e98:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e9e:	f003 0310 	and.w	r3, r3, #16
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	f040 8099 	bne.w	8000fda <HAL_ADC_Init+0x18e>
 8000ea8:	7dfb      	ldrb	r3, [r7, #23]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	f040 8095 	bne.w	8000fda <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eb4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000eb8:	f023 0302 	bic.w	r3, r3, #2
 8000ebc:	f043 0202 	orr.w	r2, r3, #2
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ecc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	7b1b      	ldrb	r3, [r3, #12]
 8000ed2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ed4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ed6:	68ba      	ldr	r2, [r7, #8]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	689b      	ldr	r3, [r3, #8]
 8000ee0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ee4:	d003      	beq.n	8000eee <HAL_ADC_Init+0xa2>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	689b      	ldr	r3, [r3, #8]
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d102      	bne.n	8000ef4 <HAL_ADC_Init+0xa8>
 8000eee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ef2:	e000      	b.n	8000ef6 <HAL_ADC_Init+0xaa>
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	7d1b      	ldrb	r3, [r3, #20]
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d119      	bne.n	8000f38 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	7b1b      	ldrb	r3, [r3, #12]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d109      	bne.n	8000f20 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	699b      	ldr	r3, [r3, #24]
 8000f10:	3b01      	subs	r3, #1
 8000f12:	035a      	lsls	r2, r3, #13
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f1c:	613b      	str	r3, [r7, #16]
 8000f1e:	e00b      	b.n	8000f38 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f24:	f043 0220 	orr.w	r2, r3, #32
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f30:	f043 0201 	orr.w	r2, r3, #1
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	430a      	orrs	r2, r1
 8000f4a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	689a      	ldr	r2, [r3, #8]
 8000f52:	4b28      	ldr	r3, [pc, #160]	; (8000ff4 <HAL_ADC_Init+0x1a8>)
 8000f54:	4013      	ands	r3, r2
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	6812      	ldr	r2, [r2, #0]
 8000f5a:	68b9      	ldr	r1, [r7, #8]
 8000f5c:	430b      	orrs	r3, r1
 8000f5e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	689b      	ldr	r3, [r3, #8]
 8000f64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f68:	d003      	beq.n	8000f72 <HAL_ADC_Init+0x126>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	689b      	ldr	r3, [r3, #8]
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d104      	bne.n	8000f7c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	691b      	ldr	r3, [r3, #16]
 8000f76:	3b01      	subs	r3, #1
 8000f78:	051b      	lsls	r3, r3, #20
 8000f7a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f82:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	68fa      	ldr	r2, [r7, #12]
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	689a      	ldr	r2, [r3, #8]
 8000f96:	4b18      	ldr	r3, [pc, #96]	; (8000ff8 <HAL_ADC_Init+0x1ac>)
 8000f98:	4013      	ands	r3, r2
 8000f9a:	68ba      	ldr	r2, [r7, #8]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d10b      	bne.n	8000fb8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000faa:	f023 0303 	bic.w	r3, r3, #3
 8000fae:	f043 0201 	orr.w	r2, r3, #1
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000fb6:	e018      	b.n	8000fea <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fbc:	f023 0312 	bic.w	r3, r3, #18
 8000fc0:	f043 0210 	orr.w	r2, r3, #16
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fcc:	f043 0201 	orr.w	r2, r3, #1
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000fd8:	e007      	b.n	8000fea <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fde:	f043 0210 	orr.w	r2, r3, #16
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000fea:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3718      	adds	r7, #24
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	ffe1f7fd 	.word	0xffe1f7fd
 8000ff8:	ff1f0efe 	.word	0xff1f0efe

08000ffc <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b086      	sub	sp, #24
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001008:	2300      	movs	r3, #0
 800100a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a64      	ldr	r2, [pc, #400]	; (80011a4 <HAL_ADC_Start_DMA+0x1a8>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d004      	beq.n	8001020 <HAL_ADC_Start_DMA+0x24>
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a63      	ldr	r2, [pc, #396]	; (80011a8 <HAL_ADC_Start_DMA+0x1ac>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d106      	bne.n	800102e <HAL_ADC_Start_DMA+0x32>
 8001020:	4b60      	ldr	r3, [pc, #384]	; (80011a4 <HAL_ADC_Start_DMA+0x1a8>)
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001028:	2b00      	cmp	r3, #0
 800102a:	f040 80b3 	bne.w	8001194 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001034:	2b01      	cmp	r3, #1
 8001036:	d101      	bne.n	800103c <HAL_ADC_Start_DMA+0x40>
 8001038:	2302      	movs	r3, #2
 800103a:	e0ae      	b.n	800119a <HAL_ADC_Start_DMA+0x19e>
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	2201      	movs	r2, #1
 8001040:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001044:	68f8      	ldr	r0, [r7, #12]
 8001046:	f000 f9c1 	bl	80013cc <ADC_Enable>
 800104a:	4603      	mov	r3, r0
 800104c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800104e:	7dfb      	ldrb	r3, [r7, #23]
 8001050:	2b00      	cmp	r3, #0
 8001052:	f040 809a 	bne.w	800118a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800105a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800105e:	f023 0301 	bic.w	r3, r3, #1
 8001062:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a4e      	ldr	r2, [pc, #312]	; (80011a8 <HAL_ADC_Start_DMA+0x1ac>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d105      	bne.n	8001080 <HAL_ADC_Start_DMA+0x84>
 8001074:	4b4b      	ldr	r3, [pc, #300]	; (80011a4 <HAL_ADC_Start_DMA+0x1a8>)
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800107c:	2b00      	cmp	r3, #0
 800107e:	d115      	bne.n	80010ac <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001084:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001096:	2b00      	cmp	r3, #0
 8001098:	d026      	beq.n	80010e8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800109e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80010a2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80010aa:	e01d      	b.n	80010e8 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010b0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a39      	ldr	r2, [pc, #228]	; (80011a4 <HAL_ADC_Start_DMA+0x1a8>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d004      	beq.n	80010cc <HAL_ADC_Start_DMA+0xd0>
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a38      	ldr	r2, [pc, #224]	; (80011a8 <HAL_ADC_Start_DMA+0x1ac>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d10d      	bne.n	80010e8 <HAL_ADC_Start_DMA+0xec>
 80010cc:	4b35      	ldr	r3, [pc, #212]	; (80011a4 <HAL_ADC_Start_DMA+0x1a8>)
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d007      	beq.n	80010e8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010dc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80010e0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d006      	beq.n	8001102 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010f8:	f023 0206 	bic.w	r2, r3, #6
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	62da      	str	r2, [r3, #44]	; 0x2c
 8001100:	e002      	b.n	8001108 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	2200      	movs	r2, #0
 8001106:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	2200      	movs	r2, #0
 800110c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	6a1b      	ldr	r3, [r3, #32]
 8001114:	4a25      	ldr	r2, [pc, #148]	; (80011ac <HAL_ADC_Start_DMA+0x1b0>)
 8001116:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	6a1b      	ldr	r3, [r3, #32]
 800111c:	4a24      	ldr	r2, [pc, #144]	; (80011b0 <HAL_ADC_Start_DMA+0x1b4>)
 800111e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	6a1b      	ldr	r3, [r3, #32]
 8001124:	4a23      	ldr	r2, [pc, #140]	; (80011b4 <HAL_ADC_Start_DMA+0x1b8>)
 8001126:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f06f 0202 	mvn.w	r2, #2
 8001130:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	689a      	ldr	r2, [r3, #8]
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001140:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	6a18      	ldr	r0, [r3, #32]
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	334c      	adds	r3, #76	; 0x4c
 800114c:	4619      	mov	r1, r3
 800114e:	68ba      	ldr	r2, [r7, #8]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f000 fba5 	bl	80018a0 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001160:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001164:	d108      	bne.n	8001178 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	689a      	ldr	r2, [r3, #8]
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001174:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001176:	e00f      	b.n	8001198 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	689a      	ldr	r2, [r3, #8]
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001186:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001188:	e006      	b.n	8001198 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	2200      	movs	r2, #0
 800118e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001192:	e001      	b.n	8001198 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001194:	2301      	movs	r3, #1
 8001196:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001198:	7dfb      	ldrb	r3, [r7, #23]
}
 800119a:	4618      	mov	r0, r3
 800119c:	3718      	adds	r7, #24
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40012400 	.word	0x40012400
 80011a8:	40012800 	.word	0x40012800
 80011ac:	08001503 	.word	0x08001503
 80011b0:	0800157f 	.word	0x0800157f
 80011b4:	0800159b 	.word	0x0800159b

080011b8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80011c0:	bf00      	nop
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bc80      	pop	{r7}
 80011c8:	4770      	bx	lr

080011ca <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80011ca:	b480      	push	{r7}
 80011cc:	b083      	sub	sp, #12
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80011d2:	bf00      	nop
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bc80      	pop	{r7}
 80011da:	4770      	bx	lr

080011dc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011e6:	2300      	movs	r3, #0
 80011e8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80011ea:	2300      	movs	r3, #0
 80011ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d101      	bne.n	80011fc <HAL_ADC_ConfigChannel+0x20>
 80011f8:	2302      	movs	r3, #2
 80011fa:	e0dc      	b.n	80013b6 <HAL_ADC_ConfigChannel+0x1da>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2201      	movs	r2, #1
 8001200:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	2b06      	cmp	r3, #6
 800120a:	d81c      	bhi.n	8001246 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685a      	ldr	r2, [r3, #4]
 8001216:	4613      	mov	r3, r2
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	4413      	add	r3, r2
 800121c:	3b05      	subs	r3, #5
 800121e:	221f      	movs	r2, #31
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	43db      	mvns	r3, r3
 8001226:	4019      	ands	r1, r3
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	6818      	ldr	r0, [r3, #0]
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685a      	ldr	r2, [r3, #4]
 8001230:	4613      	mov	r3, r2
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	4413      	add	r3, r2
 8001236:	3b05      	subs	r3, #5
 8001238:	fa00 f203 	lsl.w	r2, r0, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	430a      	orrs	r2, r1
 8001242:	635a      	str	r2, [r3, #52]	; 0x34
 8001244:	e03c      	b.n	80012c0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	2b0c      	cmp	r3, #12
 800124c:	d81c      	bhi.n	8001288 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685a      	ldr	r2, [r3, #4]
 8001258:	4613      	mov	r3, r2
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	4413      	add	r3, r2
 800125e:	3b23      	subs	r3, #35	; 0x23
 8001260:	221f      	movs	r2, #31
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	43db      	mvns	r3, r3
 8001268:	4019      	ands	r1, r3
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	6818      	ldr	r0, [r3, #0]
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685a      	ldr	r2, [r3, #4]
 8001272:	4613      	mov	r3, r2
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	4413      	add	r3, r2
 8001278:	3b23      	subs	r3, #35	; 0x23
 800127a:	fa00 f203 	lsl.w	r2, r0, r3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	430a      	orrs	r2, r1
 8001284:	631a      	str	r2, [r3, #48]	; 0x30
 8001286:	e01b      	b.n	80012c0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685a      	ldr	r2, [r3, #4]
 8001292:	4613      	mov	r3, r2
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	4413      	add	r3, r2
 8001298:	3b41      	subs	r3, #65	; 0x41
 800129a:	221f      	movs	r2, #31
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	43db      	mvns	r3, r3
 80012a2:	4019      	ands	r1, r3
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	6818      	ldr	r0, [r3, #0]
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685a      	ldr	r2, [r3, #4]
 80012ac:	4613      	mov	r3, r2
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	4413      	add	r3, r2
 80012b2:	3b41      	subs	r3, #65	; 0x41
 80012b4:	fa00 f203 	lsl.w	r2, r0, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	430a      	orrs	r2, r1
 80012be:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2b09      	cmp	r3, #9
 80012c6:	d91c      	bls.n	8001302 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	68d9      	ldr	r1, [r3, #12]
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	4613      	mov	r3, r2
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	4413      	add	r3, r2
 80012d8:	3b1e      	subs	r3, #30
 80012da:	2207      	movs	r2, #7
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	43db      	mvns	r3, r3
 80012e2:	4019      	ands	r1, r3
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	6898      	ldr	r0, [r3, #8]
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	4613      	mov	r3, r2
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	4413      	add	r3, r2
 80012f2:	3b1e      	subs	r3, #30
 80012f4:	fa00 f203 	lsl.w	r2, r0, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	430a      	orrs	r2, r1
 80012fe:	60da      	str	r2, [r3, #12]
 8001300:	e019      	b.n	8001336 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	6919      	ldr	r1, [r3, #16]
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	4613      	mov	r3, r2
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	4413      	add	r3, r2
 8001312:	2207      	movs	r2, #7
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	43db      	mvns	r3, r3
 800131a:	4019      	ands	r1, r3
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	6898      	ldr	r0, [r3, #8]
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	4613      	mov	r3, r2
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	4413      	add	r3, r2
 800132a:	fa00 f203 	lsl.w	r2, r0, r3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	430a      	orrs	r2, r1
 8001334:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2b10      	cmp	r3, #16
 800133c:	d003      	beq.n	8001346 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001342:	2b11      	cmp	r3, #17
 8001344:	d132      	bne.n	80013ac <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a1d      	ldr	r2, [pc, #116]	; (80013c0 <HAL_ADC_ConfigChannel+0x1e4>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d125      	bne.n	800139c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d126      	bne.n	80013ac <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	689a      	ldr	r2, [r3, #8]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800136c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2b10      	cmp	r3, #16
 8001374:	d11a      	bne.n	80013ac <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001376:	4b13      	ldr	r3, [pc, #76]	; (80013c4 <HAL_ADC_ConfigChannel+0x1e8>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a13      	ldr	r2, [pc, #76]	; (80013c8 <HAL_ADC_ConfigChannel+0x1ec>)
 800137c:	fba2 2303 	umull	r2, r3, r2, r3
 8001380:	0c9a      	lsrs	r2, r3, #18
 8001382:	4613      	mov	r3, r2
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	4413      	add	r3, r2
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800138c:	e002      	b.n	8001394 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	3b01      	subs	r3, #1
 8001392:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d1f9      	bne.n	800138e <HAL_ADC_ConfigChannel+0x1b2>
 800139a:	e007      	b.n	80013ac <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013a0:	f043 0220 	orr.w	r2, r3, #32
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2200      	movs	r2, #0
 80013b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80013b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3714      	adds	r7, #20
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bc80      	pop	{r7}
 80013be:	4770      	bx	lr
 80013c0:	40012400 	.word	0x40012400
 80013c4:	20000000 	.word	0x20000000
 80013c8:	431bde83 	.word	0x431bde83

080013cc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80013d4:	2300      	movs	r3, #0
 80013d6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80013d8:	2300      	movs	r3, #0
 80013da:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d040      	beq.n	800146c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	689a      	ldr	r2, [r3, #8]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f042 0201 	orr.w	r2, r2, #1
 80013f8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80013fa:	4b1f      	ldr	r3, [pc, #124]	; (8001478 <ADC_Enable+0xac>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a1f      	ldr	r2, [pc, #124]	; (800147c <ADC_Enable+0xb0>)
 8001400:	fba2 2303 	umull	r2, r3, r2, r3
 8001404:	0c9b      	lsrs	r3, r3, #18
 8001406:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001408:	e002      	b.n	8001410 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	3b01      	subs	r3, #1
 800140e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1f9      	bne.n	800140a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001416:	f7ff fd0f 	bl	8000e38 <HAL_GetTick>
 800141a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800141c:	e01f      	b.n	800145e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800141e:	f7ff fd0b 	bl	8000e38 <HAL_GetTick>
 8001422:	4602      	mov	r2, r0
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	2b02      	cmp	r3, #2
 800142a:	d918      	bls.n	800145e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	2b01      	cmp	r3, #1
 8001438:	d011      	beq.n	800145e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800143e:	f043 0210 	orr.w	r2, r3, #16
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800144a:	f043 0201 	orr.w	r2, r3, #1
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2200      	movs	r2, #0
 8001456:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e007      	b.n	800146e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	f003 0301 	and.w	r3, r3, #1
 8001468:	2b01      	cmp	r3, #1
 800146a:	d1d8      	bne.n	800141e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800146c:	2300      	movs	r3, #0
}
 800146e:	4618      	mov	r0, r3
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	20000000 	.word	0x20000000
 800147c:	431bde83 	.word	0x431bde83

08001480 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001488:	2300      	movs	r3, #0
 800148a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	2b01      	cmp	r3, #1
 8001498:	d12e      	bne.n	80014f8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	689a      	ldr	r2, [r3, #8]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f022 0201 	bic.w	r2, r2, #1
 80014a8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80014aa:	f7ff fcc5 	bl	8000e38 <HAL_GetTick>
 80014ae:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80014b0:	e01b      	b.n	80014ea <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80014b2:	f7ff fcc1 	bl	8000e38 <HAL_GetTick>
 80014b6:	4602      	mov	r2, r0
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d914      	bls.n	80014ea <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d10d      	bne.n	80014ea <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d2:	f043 0210 	orr.w	r2, r3, #16
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014de:	f043 0201 	orr.w	r2, r3, #1
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e007      	b.n	80014fa <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	f003 0301 	and.w	r3, r3, #1
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d0dc      	beq.n	80014b2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80014f8:	2300      	movs	r3, #0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3710      	adds	r7, #16
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	b084      	sub	sp, #16
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150e:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001514:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001518:	2b00      	cmp	r3, #0
 800151a:	d127      	bne.n	800156c <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001520:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001532:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001536:	d115      	bne.n	8001564 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800153c:	2b00      	cmp	r3, #0
 800153e:	d111      	bne.n	8001564 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001544:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001550:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d105      	bne.n	8001564 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800155c:	f043 0201 	orr.w	r2, r3, #1
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001564:	68f8      	ldr	r0, [r7, #12]
 8001566:	f7ff f9e7 	bl	8000938 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800156a:	e004      	b.n	8001576 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	6a1b      	ldr	r3, [r3, #32]
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	4798      	blx	r3
}
 8001576:	bf00      	nop
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b084      	sub	sp, #16
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800158a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800158c:	68f8      	ldr	r0, [r7, #12]
 800158e:	f7ff fe13 	bl	80011b8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001592:	bf00      	nop
 8001594:	3710      	adds	r7, #16
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800159a:	b580      	push	{r7, lr}
 800159c:	b084      	sub	sp, #16
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b8:	f043 0204 	orr.w	r2, r3, #4
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80015c0:	68f8      	ldr	r0, [r7, #12]
 80015c2:	f7ff fe02 	bl	80011ca <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80015c6:	bf00      	nop
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
	...

080015d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f003 0307 	and.w	r3, r3, #7
 80015de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015e0:	4b0c      	ldr	r3, [pc, #48]	; (8001614 <__NVIC_SetPriorityGrouping+0x44>)
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015e6:	68ba      	ldr	r2, [r7, #8]
 80015e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015ec:	4013      	ands	r3, r2
 80015ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001600:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001602:	4a04      	ldr	r2, [pc, #16]	; (8001614 <__NVIC_SetPriorityGrouping+0x44>)
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	60d3      	str	r3, [r2, #12]
}
 8001608:	bf00      	nop
 800160a:	3714      	adds	r7, #20
 800160c:	46bd      	mov	sp, r7
 800160e:	bc80      	pop	{r7}
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	e000ed00 	.word	0xe000ed00

08001618 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800161c:	4b04      	ldr	r3, [pc, #16]	; (8001630 <__NVIC_GetPriorityGrouping+0x18>)
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	0a1b      	lsrs	r3, r3, #8
 8001622:	f003 0307 	and.w	r3, r3, #7
}
 8001626:	4618      	mov	r0, r3
 8001628:	46bd      	mov	sp, r7
 800162a:	bc80      	pop	{r7}
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	e000ed00 	.word	0xe000ed00

08001634 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800163e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001642:	2b00      	cmp	r3, #0
 8001644:	db0b      	blt.n	800165e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001646:	79fb      	ldrb	r3, [r7, #7]
 8001648:	f003 021f 	and.w	r2, r3, #31
 800164c:	4906      	ldr	r1, [pc, #24]	; (8001668 <__NVIC_EnableIRQ+0x34>)
 800164e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001652:	095b      	lsrs	r3, r3, #5
 8001654:	2001      	movs	r0, #1
 8001656:	fa00 f202 	lsl.w	r2, r0, r2
 800165a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800165e:	bf00      	nop
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	bc80      	pop	{r7}
 8001666:	4770      	bx	lr
 8001668:	e000e100 	.word	0xe000e100

0800166c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	6039      	str	r1, [r7, #0]
 8001676:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167c:	2b00      	cmp	r3, #0
 800167e:	db0a      	blt.n	8001696 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	b2da      	uxtb	r2, r3
 8001684:	490c      	ldr	r1, [pc, #48]	; (80016b8 <__NVIC_SetPriority+0x4c>)
 8001686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168a:	0112      	lsls	r2, r2, #4
 800168c:	b2d2      	uxtb	r2, r2
 800168e:	440b      	add	r3, r1
 8001690:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001694:	e00a      	b.n	80016ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	b2da      	uxtb	r2, r3
 800169a:	4908      	ldr	r1, [pc, #32]	; (80016bc <__NVIC_SetPriority+0x50>)
 800169c:	79fb      	ldrb	r3, [r7, #7]
 800169e:	f003 030f 	and.w	r3, r3, #15
 80016a2:	3b04      	subs	r3, #4
 80016a4:	0112      	lsls	r2, r2, #4
 80016a6:	b2d2      	uxtb	r2, r2
 80016a8:	440b      	add	r3, r1
 80016aa:	761a      	strb	r2, [r3, #24]
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bc80      	pop	{r7}
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	e000e100 	.word	0xe000e100
 80016bc:	e000ed00 	.word	0xe000ed00

080016c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b089      	sub	sp, #36	; 0x24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f003 0307 	and.w	r3, r3, #7
 80016d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	f1c3 0307 	rsb	r3, r3, #7
 80016da:	2b04      	cmp	r3, #4
 80016dc:	bf28      	it	cs
 80016de:	2304      	movcs	r3, #4
 80016e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	3304      	adds	r3, #4
 80016e6:	2b06      	cmp	r3, #6
 80016e8:	d902      	bls.n	80016f0 <NVIC_EncodePriority+0x30>
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	3b03      	subs	r3, #3
 80016ee:	e000      	b.n	80016f2 <NVIC_EncodePriority+0x32>
 80016f0:	2300      	movs	r3, #0
 80016f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f4:	f04f 32ff 	mov.w	r2, #4294967295
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	fa02 f303 	lsl.w	r3, r2, r3
 80016fe:	43da      	mvns	r2, r3
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	401a      	ands	r2, r3
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001708:	f04f 31ff 	mov.w	r1, #4294967295
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	fa01 f303 	lsl.w	r3, r1, r3
 8001712:	43d9      	mvns	r1, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001718:	4313      	orrs	r3, r2
         );
}
 800171a:	4618      	mov	r0, r3
 800171c:	3724      	adds	r7, #36	; 0x24
 800171e:	46bd      	mov	sp, r7
 8001720:	bc80      	pop	{r7}
 8001722:	4770      	bx	lr

08001724 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	3b01      	subs	r3, #1
 8001730:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001734:	d301      	bcc.n	800173a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001736:	2301      	movs	r3, #1
 8001738:	e00f      	b.n	800175a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800173a:	4a0a      	ldr	r2, [pc, #40]	; (8001764 <SysTick_Config+0x40>)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	3b01      	subs	r3, #1
 8001740:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001742:	210f      	movs	r1, #15
 8001744:	f04f 30ff 	mov.w	r0, #4294967295
 8001748:	f7ff ff90 	bl	800166c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800174c:	4b05      	ldr	r3, [pc, #20]	; (8001764 <SysTick_Config+0x40>)
 800174e:	2200      	movs	r2, #0
 8001750:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001752:	4b04      	ldr	r3, [pc, #16]	; (8001764 <SysTick_Config+0x40>)
 8001754:	2207      	movs	r2, #7
 8001756:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001758:	2300      	movs	r3, #0
}
 800175a:	4618      	mov	r0, r3
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	e000e010 	.word	0xe000e010

08001768 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f7ff ff2d 	bl	80015d0 <__NVIC_SetPriorityGrouping>
}
 8001776:	bf00      	nop
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800177e:	b580      	push	{r7, lr}
 8001780:	b086      	sub	sp, #24
 8001782:	af00      	add	r7, sp, #0
 8001784:	4603      	mov	r3, r0
 8001786:	60b9      	str	r1, [r7, #8]
 8001788:	607a      	str	r2, [r7, #4]
 800178a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800178c:	2300      	movs	r3, #0
 800178e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001790:	f7ff ff42 	bl	8001618 <__NVIC_GetPriorityGrouping>
 8001794:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	68b9      	ldr	r1, [r7, #8]
 800179a:	6978      	ldr	r0, [r7, #20]
 800179c:	f7ff ff90 	bl	80016c0 <NVIC_EncodePriority>
 80017a0:	4602      	mov	r2, r0
 80017a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017a6:	4611      	mov	r1, r2
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff ff5f 	bl	800166c <__NVIC_SetPriority>
}
 80017ae:	bf00      	nop
 80017b0:	3718      	adds	r7, #24
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b082      	sub	sp, #8
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	4603      	mov	r3, r0
 80017be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff ff35 	bl	8001634 <__NVIC_EnableIRQ>
}
 80017ca:	bf00      	nop
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b082      	sub	sp, #8
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f7ff ffa2 	bl	8001724 <SysTick_Config>
 80017e0:	4603      	mov	r3, r0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
	...

080017ec <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80017f4:	2300      	movs	r3, #0
 80017f6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d101      	bne.n	8001802 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e043      	b.n	800188a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	461a      	mov	r2, r3
 8001808:	4b22      	ldr	r3, [pc, #136]	; (8001894 <HAL_DMA_Init+0xa8>)
 800180a:	4413      	add	r3, r2
 800180c:	4a22      	ldr	r2, [pc, #136]	; (8001898 <HAL_DMA_Init+0xac>)
 800180e:	fba2 2303 	umull	r2, r3, r2, r3
 8001812:	091b      	lsrs	r3, r3, #4
 8001814:	009a      	lsls	r2, r3, #2
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a1f      	ldr	r2, [pc, #124]	; (800189c <HAL_DMA_Init+0xb0>)
 800181e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2202      	movs	r2, #2
 8001824:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001836:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800183a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001844:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001850:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800185c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	69db      	ldr	r3, [r3, #28]
 8001862:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001864:	68fa      	ldr	r2, [r7, #12]
 8001866:	4313      	orrs	r3, r2
 8001868:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	68fa      	ldr	r2, [r7, #12]
 8001870:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2201      	movs	r2, #1
 800187c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2200      	movs	r2, #0
 8001884:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	3714      	adds	r7, #20
 800188e:	46bd      	mov	sp, r7
 8001890:	bc80      	pop	{r7}
 8001892:	4770      	bx	lr
 8001894:	bffdfff8 	.word	0xbffdfff8
 8001898:	cccccccd 	.word	0xcccccccd
 800189c:	40020000 	.word	0x40020000

080018a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
 80018ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018ae:	2300      	movs	r3, #0
 80018b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d101      	bne.n	80018c0 <HAL_DMA_Start_IT+0x20>
 80018bc:	2302      	movs	r3, #2
 80018be:	e04a      	b.n	8001956 <HAL_DMA_Start_IT+0xb6>
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2201      	movs	r2, #1
 80018c4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d13a      	bne.n	8001948 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	2202      	movs	r2, #2
 80018d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	2200      	movs	r2, #0
 80018de:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f022 0201 	bic.w	r2, r2, #1
 80018ee:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	68b9      	ldr	r1, [r7, #8]
 80018f6:	68f8      	ldr	r0, [r7, #12]
 80018f8:	f000 f938 	bl	8001b6c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001900:	2b00      	cmp	r3, #0
 8001902:	d008      	beq.n	8001916 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f042 020e 	orr.w	r2, r2, #14
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	e00f      	b.n	8001936 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f022 0204 	bic.w	r2, r2, #4
 8001924:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f042 020a 	orr.w	r2, r2, #10
 8001934:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f042 0201 	orr.w	r2, r2, #1
 8001944:	601a      	str	r2, [r3, #0]
 8001946:	e005      	b.n	8001954 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2200      	movs	r2, #0
 800194c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001950:	2302      	movs	r3, #2
 8001952:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001954:	7dfb      	ldrb	r3, [r7, #23]
}
 8001956:	4618      	mov	r0, r3
 8001958:	3718      	adds	r7, #24
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
	...

08001960 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197c:	2204      	movs	r2, #4
 800197e:	409a      	lsls	r2, r3
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	4013      	ands	r3, r2
 8001984:	2b00      	cmp	r3, #0
 8001986:	d04f      	beq.n	8001a28 <HAL_DMA_IRQHandler+0xc8>
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	f003 0304 	and.w	r3, r3, #4
 800198e:	2b00      	cmp	r3, #0
 8001990:	d04a      	beq.n	8001a28 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0320 	and.w	r3, r3, #32
 800199c:	2b00      	cmp	r3, #0
 800199e:	d107      	bne.n	80019b0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f022 0204 	bic.w	r2, r2, #4
 80019ae:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a66      	ldr	r2, [pc, #408]	; (8001b50 <HAL_DMA_IRQHandler+0x1f0>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d029      	beq.n	8001a0e <HAL_DMA_IRQHandler+0xae>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a65      	ldr	r2, [pc, #404]	; (8001b54 <HAL_DMA_IRQHandler+0x1f4>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d022      	beq.n	8001a0a <HAL_DMA_IRQHandler+0xaa>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a63      	ldr	r2, [pc, #396]	; (8001b58 <HAL_DMA_IRQHandler+0x1f8>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d01a      	beq.n	8001a04 <HAL_DMA_IRQHandler+0xa4>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a62      	ldr	r2, [pc, #392]	; (8001b5c <HAL_DMA_IRQHandler+0x1fc>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d012      	beq.n	80019fe <HAL_DMA_IRQHandler+0x9e>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a60      	ldr	r2, [pc, #384]	; (8001b60 <HAL_DMA_IRQHandler+0x200>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d00a      	beq.n	80019f8 <HAL_DMA_IRQHandler+0x98>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a5f      	ldr	r2, [pc, #380]	; (8001b64 <HAL_DMA_IRQHandler+0x204>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d102      	bne.n	80019f2 <HAL_DMA_IRQHandler+0x92>
 80019ec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019f0:	e00e      	b.n	8001a10 <HAL_DMA_IRQHandler+0xb0>
 80019f2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80019f6:	e00b      	b.n	8001a10 <HAL_DMA_IRQHandler+0xb0>
 80019f8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80019fc:	e008      	b.n	8001a10 <HAL_DMA_IRQHandler+0xb0>
 80019fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a02:	e005      	b.n	8001a10 <HAL_DMA_IRQHandler+0xb0>
 8001a04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a08:	e002      	b.n	8001a10 <HAL_DMA_IRQHandler+0xb0>
 8001a0a:	2340      	movs	r3, #64	; 0x40
 8001a0c:	e000      	b.n	8001a10 <HAL_DMA_IRQHandler+0xb0>
 8001a0e:	2304      	movs	r3, #4
 8001a10:	4a55      	ldr	r2, [pc, #340]	; (8001b68 <HAL_DMA_IRQHandler+0x208>)
 8001a12:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	f000 8094 	beq.w	8001b46 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001a26:	e08e      	b.n	8001b46 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2c:	2202      	movs	r2, #2
 8001a2e:	409a      	lsls	r2, r3
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	4013      	ands	r3, r2
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d056      	beq.n	8001ae6 <HAL_DMA_IRQHandler+0x186>
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d051      	beq.n	8001ae6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0320 	and.w	r3, r3, #32
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d10b      	bne.n	8001a68 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f022 020a 	bic.w	r2, r2, #10
 8001a5e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2201      	movs	r2, #1
 8001a64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a38      	ldr	r2, [pc, #224]	; (8001b50 <HAL_DMA_IRQHandler+0x1f0>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d029      	beq.n	8001ac6 <HAL_DMA_IRQHandler+0x166>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a37      	ldr	r2, [pc, #220]	; (8001b54 <HAL_DMA_IRQHandler+0x1f4>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d022      	beq.n	8001ac2 <HAL_DMA_IRQHandler+0x162>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a35      	ldr	r2, [pc, #212]	; (8001b58 <HAL_DMA_IRQHandler+0x1f8>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d01a      	beq.n	8001abc <HAL_DMA_IRQHandler+0x15c>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a34      	ldr	r2, [pc, #208]	; (8001b5c <HAL_DMA_IRQHandler+0x1fc>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d012      	beq.n	8001ab6 <HAL_DMA_IRQHandler+0x156>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a32      	ldr	r2, [pc, #200]	; (8001b60 <HAL_DMA_IRQHandler+0x200>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d00a      	beq.n	8001ab0 <HAL_DMA_IRQHandler+0x150>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a31      	ldr	r2, [pc, #196]	; (8001b64 <HAL_DMA_IRQHandler+0x204>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d102      	bne.n	8001aaa <HAL_DMA_IRQHandler+0x14a>
 8001aa4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001aa8:	e00e      	b.n	8001ac8 <HAL_DMA_IRQHandler+0x168>
 8001aaa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001aae:	e00b      	b.n	8001ac8 <HAL_DMA_IRQHandler+0x168>
 8001ab0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ab4:	e008      	b.n	8001ac8 <HAL_DMA_IRQHandler+0x168>
 8001ab6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001aba:	e005      	b.n	8001ac8 <HAL_DMA_IRQHandler+0x168>
 8001abc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ac0:	e002      	b.n	8001ac8 <HAL_DMA_IRQHandler+0x168>
 8001ac2:	2320      	movs	r3, #32
 8001ac4:	e000      	b.n	8001ac8 <HAL_DMA_IRQHandler+0x168>
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	4a27      	ldr	r2, [pc, #156]	; (8001b68 <HAL_DMA_IRQHandler+0x208>)
 8001aca:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d034      	beq.n	8001b46 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001ae4:	e02f      	b.n	8001b46 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	2208      	movs	r2, #8
 8001aec:	409a      	lsls	r2, r3
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	4013      	ands	r3, r2
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d028      	beq.n	8001b48 <HAL_DMA_IRQHandler+0x1e8>
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	f003 0308 	and.w	r3, r3, #8
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d023      	beq.n	8001b48 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f022 020e 	bic.w	r2, r2, #14
 8001b0e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b18:	2101      	movs	r1, #1
 8001b1a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b1e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d004      	beq.n	8001b48 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	4798      	blx	r3
    }
  }
  return;
 8001b46:	bf00      	nop
 8001b48:	bf00      	nop
}
 8001b4a:	3710      	adds	r7, #16
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40020008 	.word	0x40020008
 8001b54:	4002001c 	.word	0x4002001c
 8001b58:	40020030 	.word	0x40020030
 8001b5c:	40020044 	.word	0x40020044
 8001b60:	40020058 	.word	0x40020058
 8001b64:	4002006c 	.word	0x4002006c
 8001b68:	40020000 	.word	0x40020000

08001b6c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	607a      	str	r2, [r7, #4]
 8001b78:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b82:	2101      	movs	r1, #1
 8001b84:	fa01 f202 	lsl.w	r2, r1, r2
 8001b88:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	683a      	ldr	r2, [r7, #0]
 8001b90:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	2b10      	cmp	r3, #16
 8001b98:	d108      	bne.n	8001bac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	68ba      	ldr	r2, [r7, #8]
 8001ba8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001baa:	e007      	b.n	8001bbc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	68ba      	ldr	r2, [r7, #8]
 8001bb2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	60da      	str	r2, [r3, #12]
}
 8001bbc:	bf00      	nop
 8001bbe:	3714      	adds	r7, #20
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bc80      	pop	{r7}
 8001bc4:	4770      	bx	lr
	...

08001bc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b08b      	sub	sp, #44	; 0x2c
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bda:	e169      	b.n	8001eb0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001bdc:	2201      	movs	r2, #1
 8001bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	69fa      	ldr	r2, [r7, #28]
 8001bec:	4013      	ands	r3, r2
 8001bee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	f040 8158 	bne.w	8001eaa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	4a9a      	ldr	r2, [pc, #616]	; (8001e68 <HAL_GPIO_Init+0x2a0>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d05e      	beq.n	8001cc2 <HAL_GPIO_Init+0xfa>
 8001c04:	4a98      	ldr	r2, [pc, #608]	; (8001e68 <HAL_GPIO_Init+0x2a0>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d875      	bhi.n	8001cf6 <HAL_GPIO_Init+0x12e>
 8001c0a:	4a98      	ldr	r2, [pc, #608]	; (8001e6c <HAL_GPIO_Init+0x2a4>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d058      	beq.n	8001cc2 <HAL_GPIO_Init+0xfa>
 8001c10:	4a96      	ldr	r2, [pc, #600]	; (8001e6c <HAL_GPIO_Init+0x2a4>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d86f      	bhi.n	8001cf6 <HAL_GPIO_Init+0x12e>
 8001c16:	4a96      	ldr	r2, [pc, #600]	; (8001e70 <HAL_GPIO_Init+0x2a8>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d052      	beq.n	8001cc2 <HAL_GPIO_Init+0xfa>
 8001c1c:	4a94      	ldr	r2, [pc, #592]	; (8001e70 <HAL_GPIO_Init+0x2a8>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d869      	bhi.n	8001cf6 <HAL_GPIO_Init+0x12e>
 8001c22:	4a94      	ldr	r2, [pc, #592]	; (8001e74 <HAL_GPIO_Init+0x2ac>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d04c      	beq.n	8001cc2 <HAL_GPIO_Init+0xfa>
 8001c28:	4a92      	ldr	r2, [pc, #584]	; (8001e74 <HAL_GPIO_Init+0x2ac>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d863      	bhi.n	8001cf6 <HAL_GPIO_Init+0x12e>
 8001c2e:	4a92      	ldr	r2, [pc, #584]	; (8001e78 <HAL_GPIO_Init+0x2b0>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d046      	beq.n	8001cc2 <HAL_GPIO_Init+0xfa>
 8001c34:	4a90      	ldr	r2, [pc, #576]	; (8001e78 <HAL_GPIO_Init+0x2b0>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d85d      	bhi.n	8001cf6 <HAL_GPIO_Init+0x12e>
 8001c3a:	2b12      	cmp	r3, #18
 8001c3c:	d82a      	bhi.n	8001c94 <HAL_GPIO_Init+0xcc>
 8001c3e:	2b12      	cmp	r3, #18
 8001c40:	d859      	bhi.n	8001cf6 <HAL_GPIO_Init+0x12e>
 8001c42:	a201      	add	r2, pc, #4	; (adr r2, 8001c48 <HAL_GPIO_Init+0x80>)
 8001c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c48:	08001cc3 	.word	0x08001cc3
 8001c4c:	08001c9d 	.word	0x08001c9d
 8001c50:	08001caf 	.word	0x08001caf
 8001c54:	08001cf1 	.word	0x08001cf1
 8001c58:	08001cf7 	.word	0x08001cf7
 8001c5c:	08001cf7 	.word	0x08001cf7
 8001c60:	08001cf7 	.word	0x08001cf7
 8001c64:	08001cf7 	.word	0x08001cf7
 8001c68:	08001cf7 	.word	0x08001cf7
 8001c6c:	08001cf7 	.word	0x08001cf7
 8001c70:	08001cf7 	.word	0x08001cf7
 8001c74:	08001cf7 	.word	0x08001cf7
 8001c78:	08001cf7 	.word	0x08001cf7
 8001c7c:	08001cf7 	.word	0x08001cf7
 8001c80:	08001cf7 	.word	0x08001cf7
 8001c84:	08001cf7 	.word	0x08001cf7
 8001c88:	08001cf7 	.word	0x08001cf7
 8001c8c:	08001ca5 	.word	0x08001ca5
 8001c90:	08001cb9 	.word	0x08001cb9
 8001c94:	4a79      	ldr	r2, [pc, #484]	; (8001e7c <HAL_GPIO_Init+0x2b4>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d013      	beq.n	8001cc2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c9a:	e02c      	b.n	8001cf6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	623b      	str	r3, [r7, #32]
          break;
 8001ca2:	e029      	b.n	8001cf8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	3304      	adds	r3, #4
 8001caa:	623b      	str	r3, [r7, #32]
          break;
 8001cac:	e024      	b.n	8001cf8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	3308      	adds	r3, #8
 8001cb4:	623b      	str	r3, [r7, #32]
          break;
 8001cb6:	e01f      	b.n	8001cf8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	330c      	adds	r3, #12
 8001cbe:	623b      	str	r3, [r7, #32]
          break;
 8001cc0:	e01a      	b.n	8001cf8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d102      	bne.n	8001cd0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001cca:	2304      	movs	r3, #4
 8001ccc:	623b      	str	r3, [r7, #32]
          break;
 8001cce:	e013      	b.n	8001cf8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d105      	bne.n	8001ce4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cd8:	2308      	movs	r3, #8
 8001cda:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	69fa      	ldr	r2, [r7, #28]
 8001ce0:	611a      	str	r2, [r3, #16]
          break;
 8001ce2:	e009      	b.n	8001cf8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ce4:	2308      	movs	r3, #8
 8001ce6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	69fa      	ldr	r2, [r7, #28]
 8001cec:	615a      	str	r2, [r3, #20]
          break;
 8001cee:	e003      	b.n	8001cf8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	623b      	str	r3, [r7, #32]
          break;
 8001cf4:	e000      	b.n	8001cf8 <HAL_GPIO_Init+0x130>
          break;
 8001cf6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	2bff      	cmp	r3, #255	; 0xff
 8001cfc:	d801      	bhi.n	8001d02 <HAL_GPIO_Init+0x13a>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	e001      	b.n	8001d06 <HAL_GPIO_Init+0x13e>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	3304      	adds	r3, #4
 8001d06:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	2bff      	cmp	r3, #255	; 0xff
 8001d0c:	d802      	bhi.n	8001d14 <HAL_GPIO_Init+0x14c>
 8001d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	e002      	b.n	8001d1a <HAL_GPIO_Init+0x152>
 8001d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d16:	3b08      	subs	r3, #8
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	210f      	movs	r1, #15
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	fa01 f303 	lsl.w	r3, r1, r3
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	401a      	ands	r2, r3
 8001d2c:	6a39      	ldr	r1, [r7, #32]
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	fa01 f303 	lsl.w	r3, r1, r3
 8001d34:	431a      	orrs	r2, r3
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	f000 80b1 	beq.w	8001eaa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d48:	4b4d      	ldr	r3, [pc, #308]	; (8001e80 <HAL_GPIO_Init+0x2b8>)
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	4a4c      	ldr	r2, [pc, #304]	; (8001e80 <HAL_GPIO_Init+0x2b8>)
 8001d4e:	f043 0301 	orr.w	r3, r3, #1
 8001d52:	6193      	str	r3, [r2, #24]
 8001d54:	4b4a      	ldr	r3, [pc, #296]	; (8001e80 <HAL_GPIO_Init+0x2b8>)
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	f003 0301 	and.w	r3, r3, #1
 8001d5c:	60bb      	str	r3, [r7, #8]
 8001d5e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d60:	4a48      	ldr	r2, [pc, #288]	; (8001e84 <HAL_GPIO_Init+0x2bc>)
 8001d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d64:	089b      	lsrs	r3, r3, #2
 8001d66:	3302      	adds	r3, #2
 8001d68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d6c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d70:	f003 0303 	and.w	r3, r3, #3
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	220f      	movs	r2, #15
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	68fa      	ldr	r2, [r7, #12]
 8001d80:	4013      	ands	r3, r2
 8001d82:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4a40      	ldr	r2, [pc, #256]	; (8001e88 <HAL_GPIO_Init+0x2c0>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d013      	beq.n	8001db4 <HAL_GPIO_Init+0x1ec>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	4a3f      	ldr	r2, [pc, #252]	; (8001e8c <HAL_GPIO_Init+0x2c4>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d00d      	beq.n	8001db0 <HAL_GPIO_Init+0x1e8>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4a3e      	ldr	r2, [pc, #248]	; (8001e90 <HAL_GPIO_Init+0x2c8>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d007      	beq.n	8001dac <HAL_GPIO_Init+0x1e4>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	4a3d      	ldr	r2, [pc, #244]	; (8001e94 <HAL_GPIO_Init+0x2cc>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d101      	bne.n	8001da8 <HAL_GPIO_Init+0x1e0>
 8001da4:	2303      	movs	r3, #3
 8001da6:	e006      	b.n	8001db6 <HAL_GPIO_Init+0x1ee>
 8001da8:	2304      	movs	r3, #4
 8001daa:	e004      	b.n	8001db6 <HAL_GPIO_Init+0x1ee>
 8001dac:	2302      	movs	r3, #2
 8001dae:	e002      	b.n	8001db6 <HAL_GPIO_Init+0x1ee>
 8001db0:	2301      	movs	r3, #1
 8001db2:	e000      	b.n	8001db6 <HAL_GPIO_Init+0x1ee>
 8001db4:	2300      	movs	r3, #0
 8001db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001db8:	f002 0203 	and.w	r2, r2, #3
 8001dbc:	0092      	lsls	r2, r2, #2
 8001dbe:	4093      	lsls	r3, r2
 8001dc0:	68fa      	ldr	r2, [r7, #12]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001dc6:	492f      	ldr	r1, [pc, #188]	; (8001e84 <HAL_GPIO_Init+0x2bc>)
 8001dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dca:	089b      	lsrs	r3, r3, #2
 8001dcc:	3302      	adds	r3, #2
 8001dce:	68fa      	ldr	r2, [r7, #12]
 8001dd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d006      	beq.n	8001dee <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001de0:	4b2d      	ldr	r3, [pc, #180]	; (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	492c      	ldr	r1, [pc, #176]	; (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	600b      	str	r3, [r1, #0]
 8001dec:	e006      	b.n	8001dfc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001dee:	4b2a      	ldr	r3, [pc, #168]	; (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	43db      	mvns	r3, r3
 8001df6:	4928      	ldr	r1, [pc, #160]	; (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001df8:	4013      	ands	r3, r2
 8001dfa:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d006      	beq.n	8001e16 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e08:	4b23      	ldr	r3, [pc, #140]	; (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001e0a:	685a      	ldr	r2, [r3, #4]
 8001e0c:	4922      	ldr	r1, [pc, #136]	; (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	604b      	str	r3, [r1, #4]
 8001e14:	e006      	b.n	8001e24 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e16:	4b20      	ldr	r3, [pc, #128]	; (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001e18:	685a      	ldr	r2, [r3, #4]
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	491e      	ldr	r1, [pc, #120]	; (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001e20:	4013      	ands	r3, r2
 8001e22:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d006      	beq.n	8001e3e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e30:	4b19      	ldr	r3, [pc, #100]	; (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001e32:	689a      	ldr	r2, [r3, #8]
 8001e34:	4918      	ldr	r1, [pc, #96]	; (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	608b      	str	r3, [r1, #8]
 8001e3c:	e006      	b.n	8001e4c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e3e:	4b16      	ldr	r3, [pc, #88]	; (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001e40:	689a      	ldr	r2, [r3, #8]
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	43db      	mvns	r3, r3
 8001e46:	4914      	ldr	r1, [pc, #80]	; (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001e48:	4013      	ands	r3, r2
 8001e4a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d021      	beq.n	8001e9c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e58:	4b0f      	ldr	r3, [pc, #60]	; (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001e5a:	68da      	ldr	r2, [r3, #12]
 8001e5c:	490e      	ldr	r1, [pc, #56]	; (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	60cb      	str	r3, [r1, #12]
 8001e64:	e021      	b.n	8001eaa <HAL_GPIO_Init+0x2e2>
 8001e66:	bf00      	nop
 8001e68:	10320000 	.word	0x10320000
 8001e6c:	10310000 	.word	0x10310000
 8001e70:	10220000 	.word	0x10220000
 8001e74:	10210000 	.word	0x10210000
 8001e78:	10120000 	.word	0x10120000
 8001e7c:	10110000 	.word	0x10110000
 8001e80:	40021000 	.word	0x40021000
 8001e84:	40010000 	.word	0x40010000
 8001e88:	40010800 	.word	0x40010800
 8001e8c:	40010c00 	.word	0x40010c00
 8001e90:	40011000 	.word	0x40011000
 8001e94:	40011400 	.word	0x40011400
 8001e98:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e9c:	4b0b      	ldr	r3, [pc, #44]	; (8001ecc <HAL_GPIO_Init+0x304>)
 8001e9e:	68da      	ldr	r2, [r3, #12]
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	43db      	mvns	r3, r3
 8001ea4:	4909      	ldr	r1, [pc, #36]	; (8001ecc <HAL_GPIO_Init+0x304>)
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eac:	3301      	adds	r3, #1
 8001eae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb6:	fa22 f303 	lsr.w	r3, r2, r3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	f47f ae8e 	bne.w	8001bdc <HAL_GPIO_Init+0x14>
  }
}
 8001ec0:	bf00      	nop
 8001ec2:	bf00      	nop
 8001ec4:	372c      	adds	r7, #44	; 0x2c
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bc80      	pop	{r7}
 8001eca:	4770      	bx	lr
 8001ecc:	40010400 	.word	0x40010400

08001ed0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	460b      	mov	r3, r1
 8001eda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689a      	ldr	r2, [r3, #8]
 8001ee0:	887b      	ldrh	r3, [r7, #2]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d002      	beq.n	8001eee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	73fb      	strb	r3, [r7, #15]
 8001eec:	e001      	b.n	8001ef2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3714      	adds	r7, #20
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bc80      	pop	{r7}
 8001efc:	4770      	bx	lr

08001efe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001efe:	b480      	push	{r7}
 8001f00:	b083      	sub	sp, #12
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
 8001f06:	460b      	mov	r3, r1
 8001f08:	807b      	strh	r3, [r7, #2]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f0e:	787b      	ldrb	r3, [r7, #1]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d003      	beq.n	8001f1c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f14:	887a      	ldrh	r2, [r7, #2]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f1a:	e003      	b.n	8001f24 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f1c:	887b      	ldrh	r3, [r7, #2]
 8001f1e:	041a      	lsls	r2, r3, #16
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	611a      	str	r2, [r3, #16]
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bc80      	pop	{r7}
 8001f2c:	4770      	bx	lr
	...

08001f30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d101      	bne.n	8001f42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e272      	b.n	8002428 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	f000 8087 	beq.w	800205e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f50:	4b92      	ldr	r3, [pc, #584]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f003 030c 	and.w	r3, r3, #12
 8001f58:	2b04      	cmp	r3, #4
 8001f5a:	d00c      	beq.n	8001f76 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f5c:	4b8f      	ldr	r3, [pc, #572]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f003 030c 	and.w	r3, r3, #12
 8001f64:	2b08      	cmp	r3, #8
 8001f66:	d112      	bne.n	8001f8e <HAL_RCC_OscConfig+0x5e>
 8001f68:	4b8c      	ldr	r3, [pc, #560]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f74:	d10b      	bne.n	8001f8e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f76:	4b89      	ldr	r3, [pc, #548]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d06c      	beq.n	800205c <HAL_RCC_OscConfig+0x12c>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d168      	bne.n	800205c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e24c      	b.n	8002428 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f96:	d106      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x76>
 8001f98:	4b80      	ldr	r3, [pc, #512]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a7f      	ldr	r2, [pc, #508]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 8001f9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fa2:	6013      	str	r3, [r2, #0]
 8001fa4:	e02e      	b.n	8002004 <HAL_RCC_OscConfig+0xd4>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d10c      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x98>
 8001fae:	4b7b      	ldr	r3, [pc, #492]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a7a      	ldr	r2, [pc, #488]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 8001fb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fb8:	6013      	str	r3, [r2, #0]
 8001fba:	4b78      	ldr	r3, [pc, #480]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a77      	ldr	r2, [pc, #476]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 8001fc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fc4:	6013      	str	r3, [r2, #0]
 8001fc6:	e01d      	b.n	8002004 <HAL_RCC_OscConfig+0xd4>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fd0:	d10c      	bne.n	8001fec <HAL_RCC_OscConfig+0xbc>
 8001fd2:	4b72      	ldr	r3, [pc, #456]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a71      	ldr	r2, [pc, #452]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 8001fd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fdc:	6013      	str	r3, [r2, #0]
 8001fde:	4b6f      	ldr	r3, [pc, #444]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a6e      	ldr	r2, [pc, #440]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 8001fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fe8:	6013      	str	r3, [r2, #0]
 8001fea:	e00b      	b.n	8002004 <HAL_RCC_OscConfig+0xd4>
 8001fec:	4b6b      	ldr	r3, [pc, #428]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a6a      	ldr	r2, [pc, #424]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 8001ff2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ff6:	6013      	str	r3, [r2, #0]
 8001ff8:	4b68      	ldr	r3, [pc, #416]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a67      	ldr	r2, [pc, #412]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 8001ffe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002002:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d013      	beq.n	8002034 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200c:	f7fe ff14 	bl	8000e38 <HAL_GetTick>
 8002010:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002012:	e008      	b.n	8002026 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002014:	f7fe ff10 	bl	8000e38 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b64      	cmp	r3, #100	; 0x64
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e200      	b.n	8002428 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002026:	4b5d      	ldr	r3, [pc, #372]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d0f0      	beq.n	8002014 <HAL_RCC_OscConfig+0xe4>
 8002032:	e014      	b.n	800205e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002034:	f7fe ff00 	bl	8000e38 <HAL_GetTick>
 8002038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800203a:	e008      	b.n	800204e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800203c:	f7fe fefc 	bl	8000e38 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b64      	cmp	r3, #100	; 0x64
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e1ec      	b.n	8002428 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800204e:	4b53      	ldr	r3, [pc, #332]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1f0      	bne.n	800203c <HAL_RCC_OscConfig+0x10c>
 800205a:	e000      	b.n	800205e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800205c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d063      	beq.n	8002132 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800206a:	4b4c      	ldr	r3, [pc, #304]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f003 030c 	and.w	r3, r3, #12
 8002072:	2b00      	cmp	r3, #0
 8002074:	d00b      	beq.n	800208e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002076:	4b49      	ldr	r3, [pc, #292]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f003 030c 	and.w	r3, r3, #12
 800207e:	2b08      	cmp	r3, #8
 8002080:	d11c      	bne.n	80020bc <HAL_RCC_OscConfig+0x18c>
 8002082:	4b46      	ldr	r3, [pc, #280]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d116      	bne.n	80020bc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800208e:	4b43      	ldr	r3, [pc, #268]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d005      	beq.n	80020a6 <HAL_RCC_OscConfig+0x176>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	691b      	ldr	r3, [r3, #16]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d001      	beq.n	80020a6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e1c0      	b.n	8002428 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020a6:	4b3d      	ldr	r3, [pc, #244]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	695b      	ldr	r3, [r3, #20]
 80020b2:	00db      	lsls	r3, r3, #3
 80020b4:	4939      	ldr	r1, [pc, #228]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 80020b6:	4313      	orrs	r3, r2
 80020b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ba:	e03a      	b.n	8002132 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	691b      	ldr	r3, [r3, #16]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d020      	beq.n	8002106 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020c4:	4b36      	ldr	r3, [pc, #216]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 80020c6:	2201      	movs	r2, #1
 80020c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ca:	f7fe feb5 	bl	8000e38 <HAL_GetTick>
 80020ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020d0:	e008      	b.n	80020e4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020d2:	f7fe feb1 	bl	8000e38 <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d901      	bls.n	80020e4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e1a1      	b.n	8002428 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020e4:	4b2d      	ldr	r3, [pc, #180]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d0f0      	beq.n	80020d2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020f0:	4b2a      	ldr	r3, [pc, #168]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	695b      	ldr	r3, [r3, #20]
 80020fc:	00db      	lsls	r3, r3, #3
 80020fe:	4927      	ldr	r1, [pc, #156]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 8002100:	4313      	orrs	r3, r2
 8002102:	600b      	str	r3, [r1, #0]
 8002104:	e015      	b.n	8002132 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002106:	4b26      	ldr	r3, [pc, #152]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800210c:	f7fe fe94 	bl	8000e38 <HAL_GetTick>
 8002110:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002112:	e008      	b.n	8002126 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002114:	f7fe fe90 	bl	8000e38 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b02      	cmp	r3, #2
 8002120:	d901      	bls.n	8002126 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e180      	b.n	8002428 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002126:	4b1d      	ldr	r3, [pc, #116]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1f0      	bne.n	8002114 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0308 	and.w	r3, r3, #8
 800213a:	2b00      	cmp	r3, #0
 800213c:	d03a      	beq.n	80021b4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	699b      	ldr	r3, [r3, #24]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d019      	beq.n	800217a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002146:	4b17      	ldr	r3, [pc, #92]	; (80021a4 <HAL_RCC_OscConfig+0x274>)
 8002148:	2201      	movs	r2, #1
 800214a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800214c:	f7fe fe74 	bl	8000e38 <HAL_GetTick>
 8002150:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002152:	e008      	b.n	8002166 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002154:	f7fe fe70 	bl	8000e38 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b02      	cmp	r3, #2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e160      	b.n	8002428 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002166:	4b0d      	ldr	r3, [pc, #52]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 8002168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d0f0      	beq.n	8002154 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002172:	2001      	movs	r0, #1
 8002174:	f000 faa6 	bl	80026c4 <RCC_Delay>
 8002178:	e01c      	b.n	80021b4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800217a:	4b0a      	ldr	r3, [pc, #40]	; (80021a4 <HAL_RCC_OscConfig+0x274>)
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002180:	f7fe fe5a 	bl	8000e38 <HAL_GetTick>
 8002184:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002186:	e00f      	b.n	80021a8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002188:	f7fe fe56 	bl	8000e38 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b02      	cmp	r3, #2
 8002194:	d908      	bls.n	80021a8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e146      	b.n	8002428 <HAL_RCC_OscConfig+0x4f8>
 800219a:	bf00      	nop
 800219c:	40021000 	.word	0x40021000
 80021a0:	42420000 	.word	0x42420000
 80021a4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021a8:	4b92      	ldr	r3, [pc, #584]	; (80023f4 <HAL_RCC_OscConfig+0x4c4>)
 80021aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ac:	f003 0302 	and.w	r3, r3, #2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d1e9      	bne.n	8002188 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0304 	and.w	r3, r3, #4
 80021bc:	2b00      	cmp	r3, #0
 80021be:	f000 80a6 	beq.w	800230e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021c2:	2300      	movs	r3, #0
 80021c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021c6:	4b8b      	ldr	r3, [pc, #556]	; (80023f4 <HAL_RCC_OscConfig+0x4c4>)
 80021c8:	69db      	ldr	r3, [r3, #28]
 80021ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d10d      	bne.n	80021ee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021d2:	4b88      	ldr	r3, [pc, #544]	; (80023f4 <HAL_RCC_OscConfig+0x4c4>)
 80021d4:	69db      	ldr	r3, [r3, #28]
 80021d6:	4a87      	ldr	r2, [pc, #540]	; (80023f4 <HAL_RCC_OscConfig+0x4c4>)
 80021d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021dc:	61d3      	str	r3, [r2, #28]
 80021de:	4b85      	ldr	r3, [pc, #532]	; (80023f4 <HAL_RCC_OscConfig+0x4c4>)
 80021e0:	69db      	ldr	r3, [r3, #28]
 80021e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e6:	60bb      	str	r3, [r7, #8]
 80021e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021ea:	2301      	movs	r3, #1
 80021ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ee:	4b82      	ldr	r3, [pc, #520]	; (80023f8 <HAL_RCC_OscConfig+0x4c8>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d118      	bne.n	800222c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021fa:	4b7f      	ldr	r3, [pc, #508]	; (80023f8 <HAL_RCC_OscConfig+0x4c8>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a7e      	ldr	r2, [pc, #504]	; (80023f8 <HAL_RCC_OscConfig+0x4c8>)
 8002200:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002204:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002206:	f7fe fe17 	bl	8000e38 <HAL_GetTick>
 800220a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800220c:	e008      	b.n	8002220 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800220e:	f7fe fe13 	bl	8000e38 <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	2b64      	cmp	r3, #100	; 0x64
 800221a:	d901      	bls.n	8002220 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e103      	b.n	8002428 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002220:	4b75      	ldr	r3, [pc, #468]	; (80023f8 <HAL_RCC_OscConfig+0x4c8>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002228:	2b00      	cmp	r3, #0
 800222a:	d0f0      	beq.n	800220e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	2b01      	cmp	r3, #1
 8002232:	d106      	bne.n	8002242 <HAL_RCC_OscConfig+0x312>
 8002234:	4b6f      	ldr	r3, [pc, #444]	; (80023f4 <HAL_RCC_OscConfig+0x4c4>)
 8002236:	6a1b      	ldr	r3, [r3, #32]
 8002238:	4a6e      	ldr	r2, [pc, #440]	; (80023f4 <HAL_RCC_OscConfig+0x4c4>)
 800223a:	f043 0301 	orr.w	r3, r3, #1
 800223e:	6213      	str	r3, [r2, #32]
 8002240:	e02d      	b.n	800229e <HAL_RCC_OscConfig+0x36e>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d10c      	bne.n	8002264 <HAL_RCC_OscConfig+0x334>
 800224a:	4b6a      	ldr	r3, [pc, #424]	; (80023f4 <HAL_RCC_OscConfig+0x4c4>)
 800224c:	6a1b      	ldr	r3, [r3, #32]
 800224e:	4a69      	ldr	r2, [pc, #420]	; (80023f4 <HAL_RCC_OscConfig+0x4c4>)
 8002250:	f023 0301 	bic.w	r3, r3, #1
 8002254:	6213      	str	r3, [r2, #32]
 8002256:	4b67      	ldr	r3, [pc, #412]	; (80023f4 <HAL_RCC_OscConfig+0x4c4>)
 8002258:	6a1b      	ldr	r3, [r3, #32]
 800225a:	4a66      	ldr	r2, [pc, #408]	; (80023f4 <HAL_RCC_OscConfig+0x4c4>)
 800225c:	f023 0304 	bic.w	r3, r3, #4
 8002260:	6213      	str	r3, [r2, #32]
 8002262:	e01c      	b.n	800229e <HAL_RCC_OscConfig+0x36e>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	2b05      	cmp	r3, #5
 800226a:	d10c      	bne.n	8002286 <HAL_RCC_OscConfig+0x356>
 800226c:	4b61      	ldr	r3, [pc, #388]	; (80023f4 <HAL_RCC_OscConfig+0x4c4>)
 800226e:	6a1b      	ldr	r3, [r3, #32]
 8002270:	4a60      	ldr	r2, [pc, #384]	; (80023f4 <HAL_RCC_OscConfig+0x4c4>)
 8002272:	f043 0304 	orr.w	r3, r3, #4
 8002276:	6213      	str	r3, [r2, #32]
 8002278:	4b5e      	ldr	r3, [pc, #376]	; (80023f4 <HAL_RCC_OscConfig+0x4c4>)
 800227a:	6a1b      	ldr	r3, [r3, #32]
 800227c:	4a5d      	ldr	r2, [pc, #372]	; (80023f4 <HAL_RCC_OscConfig+0x4c4>)
 800227e:	f043 0301 	orr.w	r3, r3, #1
 8002282:	6213      	str	r3, [r2, #32]
 8002284:	e00b      	b.n	800229e <HAL_RCC_OscConfig+0x36e>
 8002286:	4b5b      	ldr	r3, [pc, #364]	; (80023f4 <HAL_RCC_OscConfig+0x4c4>)
 8002288:	6a1b      	ldr	r3, [r3, #32]
 800228a:	4a5a      	ldr	r2, [pc, #360]	; (80023f4 <HAL_RCC_OscConfig+0x4c4>)
 800228c:	f023 0301 	bic.w	r3, r3, #1
 8002290:	6213      	str	r3, [r2, #32]
 8002292:	4b58      	ldr	r3, [pc, #352]	; (80023f4 <HAL_RCC_OscConfig+0x4c4>)
 8002294:	6a1b      	ldr	r3, [r3, #32]
 8002296:	4a57      	ldr	r2, [pc, #348]	; (80023f4 <HAL_RCC_OscConfig+0x4c4>)
 8002298:	f023 0304 	bic.w	r3, r3, #4
 800229c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d015      	beq.n	80022d2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022a6:	f7fe fdc7 	bl	8000e38 <HAL_GetTick>
 80022aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ac:	e00a      	b.n	80022c4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ae:	f7fe fdc3 	bl	8000e38 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80022bc:	4293      	cmp	r3, r2
 80022be:	d901      	bls.n	80022c4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e0b1      	b.n	8002428 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022c4:	4b4b      	ldr	r3, [pc, #300]	; (80023f4 <HAL_RCC_OscConfig+0x4c4>)
 80022c6:	6a1b      	ldr	r3, [r3, #32]
 80022c8:	f003 0302 	and.w	r3, r3, #2
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d0ee      	beq.n	80022ae <HAL_RCC_OscConfig+0x37e>
 80022d0:	e014      	b.n	80022fc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022d2:	f7fe fdb1 	bl	8000e38 <HAL_GetTick>
 80022d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022d8:	e00a      	b.n	80022f0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022da:	f7fe fdad 	bl	8000e38 <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d901      	bls.n	80022f0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e09b      	b.n	8002428 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022f0:	4b40      	ldr	r3, [pc, #256]	; (80023f4 <HAL_RCC_OscConfig+0x4c4>)
 80022f2:	6a1b      	ldr	r3, [r3, #32]
 80022f4:	f003 0302 	and.w	r3, r3, #2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d1ee      	bne.n	80022da <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80022fc:	7dfb      	ldrb	r3, [r7, #23]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d105      	bne.n	800230e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002302:	4b3c      	ldr	r3, [pc, #240]	; (80023f4 <HAL_RCC_OscConfig+0x4c4>)
 8002304:	69db      	ldr	r3, [r3, #28]
 8002306:	4a3b      	ldr	r2, [pc, #236]	; (80023f4 <HAL_RCC_OscConfig+0x4c4>)
 8002308:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800230c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	69db      	ldr	r3, [r3, #28]
 8002312:	2b00      	cmp	r3, #0
 8002314:	f000 8087 	beq.w	8002426 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002318:	4b36      	ldr	r3, [pc, #216]	; (80023f4 <HAL_RCC_OscConfig+0x4c4>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f003 030c 	and.w	r3, r3, #12
 8002320:	2b08      	cmp	r3, #8
 8002322:	d061      	beq.n	80023e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	69db      	ldr	r3, [r3, #28]
 8002328:	2b02      	cmp	r3, #2
 800232a:	d146      	bne.n	80023ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800232c:	4b33      	ldr	r3, [pc, #204]	; (80023fc <HAL_RCC_OscConfig+0x4cc>)
 800232e:	2200      	movs	r2, #0
 8002330:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002332:	f7fe fd81 	bl	8000e38 <HAL_GetTick>
 8002336:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002338:	e008      	b.n	800234c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800233a:	f7fe fd7d 	bl	8000e38 <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	2b02      	cmp	r3, #2
 8002346:	d901      	bls.n	800234c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e06d      	b.n	8002428 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800234c:	4b29      	ldr	r3, [pc, #164]	; (80023f4 <HAL_RCC_OscConfig+0x4c4>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d1f0      	bne.n	800233a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6a1b      	ldr	r3, [r3, #32]
 800235c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002360:	d108      	bne.n	8002374 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002362:	4b24      	ldr	r3, [pc, #144]	; (80023f4 <HAL_RCC_OscConfig+0x4c4>)
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	4921      	ldr	r1, [pc, #132]	; (80023f4 <HAL_RCC_OscConfig+0x4c4>)
 8002370:	4313      	orrs	r3, r2
 8002372:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002374:	4b1f      	ldr	r3, [pc, #124]	; (80023f4 <HAL_RCC_OscConfig+0x4c4>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6a19      	ldr	r1, [r3, #32]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002384:	430b      	orrs	r3, r1
 8002386:	491b      	ldr	r1, [pc, #108]	; (80023f4 <HAL_RCC_OscConfig+0x4c4>)
 8002388:	4313      	orrs	r3, r2
 800238a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800238c:	4b1b      	ldr	r3, [pc, #108]	; (80023fc <HAL_RCC_OscConfig+0x4cc>)
 800238e:	2201      	movs	r2, #1
 8002390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002392:	f7fe fd51 	bl	8000e38 <HAL_GetTick>
 8002396:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002398:	e008      	b.n	80023ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800239a:	f7fe fd4d 	bl	8000e38 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d901      	bls.n	80023ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e03d      	b.n	8002428 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023ac:	4b11      	ldr	r3, [pc, #68]	; (80023f4 <HAL_RCC_OscConfig+0x4c4>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d0f0      	beq.n	800239a <HAL_RCC_OscConfig+0x46a>
 80023b8:	e035      	b.n	8002426 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ba:	4b10      	ldr	r3, [pc, #64]	; (80023fc <HAL_RCC_OscConfig+0x4cc>)
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c0:	f7fe fd3a 	bl	8000e38 <HAL_GetTick>
 80023c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023c8:	f7fe fd36 	bl	8000e38 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e026      	b.n	8002428 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023da:	4b06      	ldr	r3, [pc, #24]	; (80023f4 <HAL_RCC_OscConfig+0x4c4>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1f0      	bne.n	80023c8 <HAL_RCC_OscConfig+0x498>
 80023e6:	e01e      	b.n	8002426 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	69db      	ldr	r3, [r3, #28]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d107      	bne.n	8002400 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e019      	b.n	8002428 <HAL_RCC_OscConfig+0x4f8>
 80023f4:	40021000 	.word	0x40021000
 80023f8:	40007000 	.word	0x40007000
 80023fc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002400:	4b0b      	ldr	r3, [pc, #44]	; (8002430 <HAL_RCC_OscConfig+0x500>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a1b      	ldr	r3, [r3, #32]
 8002410:	429a      	cmp	r2, r3
 8002412:	d106      	bne.n	8002422 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800241e:	429a      	cmp	r2, r3
 8002420:	d001      	beq.n	8002426 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e000      	b.n	8002428 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002426:	2300      	movs	r3, #0
}
 8002428:	4618      	mov	r0, r3
 800242a:	3718      	adds	r7, #24
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	40021000 	.word	0x40021000

08002434 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d101      	bne.n	8002448 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e0d0      	b.n	80025ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002448:	4b6a      	ldr	r3, [pc, #424]	; (80025f4 <HAL_RCC_ClockConfig+0x1c0>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0307 	and.w	r3, r3, #7
 8002450:	683a      	ldr	r2, [r7, #0]
 8002452:	429a      	cmp	r2, r3
 8002454:	d910      	bls.n	8002478 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002456:	4b67      	ldr	r3, [pc, #412]	; (80025f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f023 0207 	bic.w	r2, r3, #7
 800245e:	4965      	ldr	r1, [pc, #404]	; (80025f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	4313      	orrs	r3, r2
 8002464:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002466:	4b63      	ldr	r3, [pc, #396]	; (80025f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0307 	and.w	r3, r3, #7
 800246e:	683a      	ldr	r2, [r7, #0]
 8002470:	429a      	cmp	r2, r3
 8002472:	d001      	beq.n	8002478 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e0b8      	b.n	80025ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0302 	and.w	r3, r3, #2
 8002480:	2b00      	cmp	r3, #0
 8002482:	d020      	beq.n	80024c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0304 	and.w	r3, r3, #4
 800248c:	2b00      	cmp	r3, #0
 800248e:	d005      	beq.n	800249c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002490:	4b59      	ldr	r3, [pc, #356]	; (80025f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	4a58      	ldr	r2, [pc, #352]	; (80025f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002496:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800249a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0308 	and.w	r3, r3, #8
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d005      	beq.n	80024b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024a8:	4b53      	ldr	r3, [pc, #332]	; (80025f8 <HAL_RCC_ClockConfig+0x1c4>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	4a52      	ldr	r2, [pc, #328]	; (80025f8 <HAL_RCC_ClockConfig+0x1c4>)
 80024ae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80024b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024b4:	4b50      	ldr	r3, [pc, #320]	; (80025f8 <HAL_RCC_ClockConfig+0x1c4>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	494d      	ldr	r1, [pc, #308]	; (80025f8 <HAL_RCC_ClockConfig+0x1c4>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d040      	beq.n	8002554 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d107      	bne.n	80024ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024da:	4b47      	ldr	r3, [pc, #284]	; (80025f8 <HAL_RCC_ClockConfig+0x1c4>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d115      	bne.n	8002512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e07f      	b.n	80025ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d107      	bne.n	8002502 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024f2:	4b41      	ldr	r3, [pc, #260]	; (80025f8 <HAL_RCC_ClockConfig+0x1c4>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d109      	bne.n	8002512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e073      	b.n	80025ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002502:	4b3d      	ldr	r3, [pc, #244]	; (80025f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d101      	bne.n	8002512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e06b      	b.n	80025ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002512:	4b39      	ldr	r3, [pc, #228]	; (80025f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f023 0203 	bic.w	r2, r3, #3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	4936      	ldr	r1, [pc, #216]	; (80025f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002520:	4313      	orrs	r3, r2
 8002522:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002524:	f7fe fc88 	bl	8000e38 <HAL_GetTick>
 8002528:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800252a:	e00a      	b.n	8002542 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800252c:	f7fe fc84 	bl	8000e38 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	f241 3288 	movw	r2, #5000	; 0x1388
 800253a:	4293      	cmp	r3, r2
 800253c:	d901      	bls.n	8002542 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e053      	b.n	80025ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002542:	4b2d      	ldr	r3, [pc, #180]	; (80025f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f003 020c 	and.w	r2, r3, #12
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	429a      	cmp	r2, r3
 8002552:	d1eb      	bne.n	800252c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002554:	4b27      	ldr	r3, [pc, #156]	; (80025f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0307 	and.w	r3, r3, #7
 800255c:	683a      	ldr	r2, [r7, #0]
 800255e:	429a      	cmp	r2, r3
 8002560:	d210      	bcs.n	8002584 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002562:	4b24      	ldr	r3, [pc, #144]	; (80025f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f023 0207 	bic.w	r2, r3, #7
 800256a:	4922      	ldr	r1, [pc, #136]	; (80025f4 <HAL_RCC_ClockConfig+0x1c0>)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	4313      	orrs	r3, r2
 8002570:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002572:	4b20      	ldr	r3, [pc, #128]	; (80025f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0307 	and.w	r3, r3, #7
 800257a:	683a      	ldr	r2, [r7, #0]
 800257c:	429a      	cmp	r2, r3
 800257e:	d001      	beq.n	8002584 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e032      	b.n	80025ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0304 	and.w	r3, r3, #4
 800258c:	2b00      	cmp	r3, #0
 800258e:	d008      	beq.n	80025a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002590:	4b19      	ldr	r3, [pc, #100]	; (80025f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	4916      	ldr	r1, [pc, #88]	; (80025f8 <HAL_RCC_ClockConfig+0x1c4>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0308 	and.w	r3, r3, #8
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d009      	beq.n	80025c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025ae:	4b12      	ldr	r3, [pc, #72]	; (80025f8 <HAL_RCC_ClockConfig+0x1c4>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	00db      	lsls	r3, r3, #3
 80025bc:	490e      	ldr	r1, [pc, #56]	; (80025f8 <HAL_RCC_ClockConfig+0x1c4>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025c2:	f000 f821 	bl	8002608 <HAL_RCC_GetSysClockFreq>
 80025c6:	4602      	mov	r2, r0
 80025c8:	4b0b      	ldr	r3, [pc, #44]	; (80025f8 <HAL_RCC_ClockConfig+0x1c4>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	091b      	lsrs	r3, r3, #4
 80025ce:	f003 030f 	and.w	r3, r3, #15
 80025d2:	490a      	ldr	r1, [pc, #40]	; (80025fc <HAL_RCC_ClockConfig+0x1c8>)
 80025d4:	5ccb      	ldrb	r3, [r1, r3]
 80025d6:	fa22 f303 	lsr.w	r3, r2, r3
 80025da:	4a09      	ldr	r2, [pc, #36]	; (8002600 <HAL_RCC_ClockConfig+0x1cc>)
 80025dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025de:	4b09      	ldr	r3, [pc, #36]	; (8002604 <HAL_RCC_ClockConfig+0x1d0>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7fe fbe6 	bl	8000db4 <HAL_InitTick>

  return HAL_OK;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	40022000 	.word	0x40022000
 80025f8:	40021000 	.word	0x40021000
 80025fc:	0800352c 	.word	0x0800352c
 8002600:	20000000 	.word	0x20000000
 8002604:	20000004 	.word	0x20000004

08002608 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002608:	b490      	push	{r4, r7}
 800260a:	b08a      	sub	sp, #40	; 0x28
 800260c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800260e:	4b29      	ldr	r3, [pc, #164]	; (80026b4 <HAL_RCC_GetSysClockFreq+0xac>)
 8002610:	1d3c      	adds	r4, r7, #4
 8002612:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002614:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002618:	f240 2301 	movw	r3, #513	; 0x201
 800261c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800261e:	2300      	movs	r3, #0
 8002620:	61fb      	str	r3, [r7, #28]
 8002622:	2300      	movs	r3, #0
 8002624:	61bb      	str	r3, [r7, #24]
 8002626:	2300      	movs	r3, #0
 8002628:	627b      	str	r3, [r7, #36]	; 0x24
 800262a:	2300      	movs	r3, #0
 800262c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800262e:	2300      	movs	r3, #0
 8002630:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002632:	4b21      	ldr	r3, [pc, #132]	; (80026b8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	f003 030c 	and.w	r3, r3, #12
 800263e:	2b04      	cmp	r3, #4
 8002640:	d002      	beq.n	8002648 <HAL_RCC_GetSysClockFreq+0x40>
 8002642:	2b08      	cmp	r3, #8
 8002644:	d003      	beq.n	800264e <HAL_RCC_GetSysClockFreq+0x46>
 8002646:	e02b      	b.n	80026a0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002648:	4b1c      	ldr	r3, [pc, #112]	; (80026bc <HAL_RCC_GetSysClockFreq+0xb4>)
 800264a:	623b      	str	r3, [r7, #32]
      break;
 800264c:	e02b      	b.n	80026a6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	0c9b      	lsrs	r3, r3, #18
 8002652:	f003 030f 	and.w	r3, r3, #15
 8002656:	3328      	adds	r3, #40	; 0x28
 8002658:	443b      	add	r3, r7
 800265a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800265e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d012      	beq.n	8002690 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800266a:	4b13      	ldr	r3, [pc, #76]	; (80026b8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	0c5b      	lsrs	r3, r3, #17
 8002670:	f003 0301 	and.w	r3, r3, #1
 8002674:	3328      	adds	r3, #40	; 0x28
 8002676:	443b      	add	r3, r7
 8002678:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800267c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	4a0e      	ldr	r2, [pc, #56]	; (80026bc <HAL_RCC_GetSysClockFreq+0xb4>)
 8002682:	fb03 f202 	mul.w	r2, r3, r2
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	fbb2 f3f3 	udiv	r3, r2, r3
 800268c:	627b      	str	r3, [r7, #36]	; 0x24
 800268e:	e004      	b.n	800269a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	4a0b      	ldr	r2, [pc, #44]	; (80026c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002694:	fb02 f303 	mul.w	r3, r2, r3
 8002698:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800269a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269c:	623b      	str	r3, [r7, #32]
      break;
 800269e:	e002      	b.n	80026a6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026a0:	4b06      	ldr	r3, [pc, #24]	; (80026bc <HAL_RCC_GetSysClockFreq+0xb4>)
 80026a2:	623b      	str	r3, [r7, #32]
      break;
 80026a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026a6:	6a3b      	ldr	r3, [r7, #32]
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3728      	adds	r7, #40	; 0x28
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bc90      	pop	{r4, r7}
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	0800351c 	.word	0x0800351c
 80026b8:	40021000 	.word	0x40021000
 80026bc:	007a1200 	.word	0x007a1200
 80026c0:	003d0900 	.word	0x003d0900

080026c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b085      	sub	sp, #20
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80026cc:	4b0a      	ldr	r3, [pc, #40]	; (80026f8 <RCC_Delay+0x34>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a0a      	ldr	r2, [pc, #40]	; (80026fc <RCC_Delay+0x38>)
 80026d2:	fba2 2303 	umull	r2, r3, r2, r3
 80026d6:	0a5b      	lsrs	r3, r3, #9
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	fb02 f303 	mul.w	r3, r2, r3
 80026de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80026e0:	bf00      	nop
  }
  while (Delay --);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	1e5a      	subs	r2, r3, #1
 80026e6:	60fa      	str	r2, [r7, #12]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d1f9      	bne.n	80026e0 <RCC_Delay+0x1c>
}
 80026ec:	bf00      	nop
 80026ee:	bf00      	nop
 80026f0:	3714      	adds	r7, #20
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bc80      	pop	{r7}
 80026f6:	4770      	bx	lr
 80026f8:	20000000 	.word	0x20000000
 80026fc:	10624dd3 	.word	0x10624dd3

08002700 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b086      	sub	sp, #24
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002708:	2300      	movs	r3, #0
 800270a:	613b      	str	r3, [r7, #16]
 800270c:	2300      	movs	r3, #0
 800270e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0301 	and.w	r3, r3, #1
 8002718:	2b00      	cmp	r3, #0
 800271a:	d07d      	beq.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800271c:	2300      	movs	r3, #0
 800271e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002720:	4b4f      	ldr	r3, [pc, #316]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002722:	69db      	ldr	r3, [r3, #28]
 8002724:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d10d      	bne.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800272c:	4b4c      	ldr	r3, [pc, #304]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800272e:	69db      	ldr	r3, [r3, #28]
 8002730:	4a4b      	ldr	r2, [pc, #300]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002732:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002736:	61d3      	str	r3, [r2, #28]
 8002738:	4b49      	ldr	r3, [pc, #292]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800273a:	69db      	ldr	r3, [r3, #28]
 800273c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002740:	60bb      	str	r3, [r7, #8]
 8002742:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002744:	2301      	movs	r3, #1
 8002746:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002748:	4b46      	ldr	r3, [pc, #280]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002750:	2b00      	cmp	r3, #0
 8002752:	d118      	bne.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002754:	4b43      	ldr	r3, [pc, #268]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a42      	ldr	r2, [pc, #264]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800275a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800275e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002760:	f7fe fb6a 	bl	8000e38 <HAL_GetTick>
 8002764:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002766:	e008      	b.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002768:	f7fe fb66 	bl	8000e38 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b64      	cmp	r3, #100	; 0x64
 8002774:	d901      	bls.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e06d      	b.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800277a:	4b3a      	ldr	r3, [pc, #232]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002782:	2b00      	cmp	r3, #0
 8002784:	d0f0      	beq.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002786:	4b36      	ldr	r3, [pc, #216]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002788:	6a1b      	ldr	r3, [r3, #32]
 800278a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800278e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d02e      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d027      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80027a4:	4b2e      	ldr	r3, [pc, #184]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027a6:	6a1b      	ldr	r3, [r3, #32]
 80027a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027ac:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80027ae:	4b2e      	ldr	r3, [pc, #184]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80027b0:	2201      	movs	r2, #1
 80027b2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027b4:	4b2c      	ldr	r3, [pc, #176]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80027ba:	4a29      	ldr	r2, [pc, #164]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d014      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ca:	f7fe fb35 	bl	8000e38 <HAL_GetTick>
 80027ce:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027d0:	e00a      	b.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027d2:	f7fe fb31 	bl	8000e38 <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d901      	bls.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e036      	b.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027e8:	4b1d      	ldr	r3, [pc, #116]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027ea:	6a1b      	ldr	r3, [r3, #32]
 80027ec:	f003 0302 	and.w	r3, r3, #2
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d0ee      	beq.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027f4:	4b1a      	ldr	r3, [pc, #104]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027f6:	6a1b      	ldr	r3, [r3, #32]
 80027f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	4917      	ldr	r1, [pc, #92]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002802:	4313      	orrs	r3, r2
 8002804:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002806:	7dfb      	ldrb	r3, [r7, #23]
 8002808:	2b01      	cmp	r3, #1
 800280a:	d105      	bne.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800280c:	4b14      	ldr	r3, [pc, #80]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800280e:	69db      	ldr	r3, [r3, #28]
 8002810:	4a13      	ldr	r2, [pc, #76]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002812:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002816:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	2b00      	cmp	r3, #0
 8002822:	d008      	beq.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002824:	4b0e      	ldr	r3, [pc, #56]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	490b      	ldr	r1, [pc, #44]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002832:	4313      	orrs	r3, r2
 8002834:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0310 	and.w	r3, r3, #16
 800283e:	2b00      	cmp	r3, #0
 8002840:	d008      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002842:	4b07      	ldr	r3, [pc, #28]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	4904      	ldr	r1, [pc, #16]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002850:	4313      	orrs	r3, r2
 8002852:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	3718      	adds	r7, #24
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	40021000 	.word	0x40021000
 8002864:	40007000 	.word	0x40007000
 8002868:	42420440 	.word	0x42420440

0800286c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d101      	bne.n	800287e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e041      	b.n	8002902 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b00      	cmp	r3, #0
 8002888:	d106      	bne.n	8002898 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f7fe f97a 	bl	8000b8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2202      	movs	r2, #2
 800289c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	3304      	adds	r3, #4
 80028a8:	4619      	mov	r1, r3
 80028aa:	4610      	mov	r0, r2
 80028ac:	f000 faaa 	bl	8002e04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3708      	adds	r7, #8
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800290a:	b580      	push	{r7, lr}
 800290c:	b082      	sub	sp, #8
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d101      	bne.n	800291c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e041      	b.n	80029a0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002922:	b2db      	uxtb	r3, r3
 8002924:	2b00      	cmp	r3, #0
 8002926:	d106      	bne.n	8002936 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f000 f839 	bl	80029a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2202      	movs	r2, #2
 800293a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	3304      	adds	r3, #4
 8002946:	4619      	mov	r1, r3
 8002948:	4610      	mov	r0, r2
 800294a:	f000 fa5b 	bl	8002e04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2201      	movs	r2, #1
 8002952:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2201      	movs	r2, #1
 800295a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2201      	movs	r2, #1
 8002962:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2201      	movs	r2, #1
 800296a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2201      	movs	r2, #1
 8002972:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2201      	movs	r2, #1
 800297a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2201      	movs	r2, #1
 8002982:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2201      	movs	r2, #1
 800298a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2201      	movs	r2, #1
 8002992:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2201      	movs	r2, #1
 800299a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800299e:	2300      	movs	r3, #0
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3708      	adds	r7, #8
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80029b0:	bf00      	nop
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bc80      	pop	{r7}
 80029b8:	4770      	bx	lr
	...

080029bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d109      	bne.n	80029e0 <HAL_TIM_PWM_Start+0x24>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	bf14      	ite	ne
 80029d8:	2301      	movne	r3, #1
 80029da:	2300      	moveq	r3, #0
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	e022      	b.n	8002a26 <HAL_TIM_PWM_Start+0x6a>
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	2b04      	cmp	r3, #4
 80029e4:	d109      	bne.n	80029fa <HAL_TIM_PWM_Start+0x3e>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	bf14      	ite	ne
 80029f2:	2301      	movne	r3, #1
 80029f4:	2300      	moveq	r3, #0
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	e015      	b.n	8002a26 <HAL_TIM_PWM_Start+0x6a>
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	2b08      	cmp	r3, #8
 80029fe:	d109      	bne.n	8002a14 <HAL_TIM_PWM_Start+0x58>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	bf14      	ite	ne
 8002a0c:	2301      	movne	r3, #1
 8002a0e:	2300      	moveq	r3, #0
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	e008      	b.n	8002a26 <HAL_TIM_PWM_Start+0x6a>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	bf14      	ite	ne
 8002a20:	2301      	movne	r3, #1
 8002a22:	2300      	moveq	r3, #0
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e05e      	b.n	8002aec <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d104      	bne.n	8002a3e <HAL_TIM_PWM_Start+0x82>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2202      	movs	r2, #2
 8002a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a3c:	e013      	b.n	8002a66 <HAL_TIM_PWM_Start+0xaa>
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	2b04      	cmp	r3, #4
 8002a42:	d104      	bne.n	8002a4e <HAL_TIM_PWM_Start+0x92>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2202      	movs	r2, #2
 8002a48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a4c:	e00b      	b.n	8002a66 <HAL_TIM_PWM_Start+0xaa>
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	2b08      	cmp	r3, #8
 8002a52:	d104      	bne.n	8002a5e <HAL_TIM_PWM_Start+0xa2>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2202      	movs	r2, #2
 8002a58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a5c:	e003      	b.n	8002a66 <HAL_TIM_PWM_Start+0xaa>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2202      	movs	r2, #2
 8002a62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	6839      	ldr	r1, [r7, #0]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f000 fc48 	bl	8003304 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a1e      	ldr	r2, [pc, #120]	; (8002af4 <HAL_TIM_PWM_Start+0x138>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d107      	bne.n	8002a8e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a8c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a18      	ldr	r2, [pc, #96]	; (8002af4 <HAL_TIM_PWM_Start+0x138>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d00e      	beq.n	8002ab6 <HAL_TIM_PWM_Start+0xfa>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aa0:	d009      	beq.n	8002ab6 <HAL_TIM_PWM_Start+0xfa>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a14      	ldr	r2, [pc, #80]	; (8002af8 <HAL_TIM_PWM_Start+0x13c>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d004      	beq.n	8002ab6 <HAL_TIM_PWM_Start+0xfa>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a12      	ldr	r2, [pc, #72]	; (8002afc <HAL_TIM_PWM_Start+0x140>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d111      	bne.n	8002ada <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f003 0307 	and.w	r3, r3, #7
 8002ac0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2b06      	cmp	r3, #6
 8002ac6:	d010      	beq.n	8002aea <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f042 0201 	orr.w	r2, r2, #1
 8002ad6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ad8:	e007      	b.n	8002aea <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f042 0201 	orr.w	r2, r2, #1
 8002ae8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3710      	adds	r7, #16
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	40012c00 	.word	0x40012c00
 8002af8:	40000400 	.word	0x40000400
 8002afc:	40000800 	.word	0x40000800

08002b00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d101      	bne.n	8002b1a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002b16:	2302      	movs	r3, #2
 8002b18:	e0ac      	b.n	8002c74 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2b0c      	cmp	r3, #12
 8002b26:	f200 809f 	bhi.w	8002c68 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002b2a:	a201      	add	r2, pc, #4	; (adr r2, 8002b30 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b30:	08002b65 	.word	0x08002b65
 8002b34:	08002c69 	.word	0x08002c69
 8002b38:	08002c69 	.word	0x08002c69
 8002b3c:	08002c69 	.word	0x08002c69
 8002b40:	08002ba5 	.word	0x08002ba5
 8002b44:	08002c69 	.word	0x08002c69
 8002b48:	08002c69 	.word	0x08002c69
 8002b4c:	08002c69 	.word	0x08002c69
 8002b50:	08002be7 	.word	0x08002be7
 8002b54:	08002c69 	.word	0x08002c69
 8002b58:	08002c69 	.word	0x08002c69
 8002b5c:	08002c69 	.word	0x08002c69
 8002b60:	08002c27 	.word	0x08002c27
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68b9      	ldr	r1, [r7, #8]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f000 f9ac 	bl	8002ec8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	699a      	ldr	r2, [r3, #24]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f042 0208 	orr.w	r2, r2, #8
 8002b7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	699a      	ldr	r2, [r3, #24]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f022 0204 	bic.w	r2, r2, #4
 8002b8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	6999      	ldr	r1, [r3, #24]
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	691a      	ldr	r2, [r3, #16]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	619a      	str	r2, [r3, #24]
      break;
 8002ba2:	e062      	b.n	8002c6a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68b9      	ldr	r1, [r7, #8]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f000 f9f2 	bl	8002f94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	699a      	ldr	r2, [r3, #24]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	699a      	ldr	r2, [r3, #24]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6999      	ldr	r1, [r3, #24]
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	021a      	lsls	r2, r3, #8
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	430a      	orrs	r2, r1
 8002be2:	619a      	str	r2, [r3, #24]
      break;
 8002be4:	e041      	b.n	8002c6a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	68b9      	ldr	r1, [r7, #8]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f000 fa3b 	bl	8003068 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	69da      	ldr	r2, [r3, #28]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f042 0208 	orr.w	r2, r2, #8
 8002c00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	69da      	ldr	r2, [r3, #28]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f022 0204 	bic.w	r2, r2, #4
 8002c10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	69d9      	ldr	r1, [r3, #28]
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	691a      	ldr	r2, [r3, #16]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	430a      	orrs	r2, r1
 8002c22:	61da      	str	r2, [r3, #28]
      break;
 8002c24:	e021      	b.n	8002c6a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	68b9      	ldr	r1, [r7, #8]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f000 fa85 	bl	800313c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	69da      	ldr	r2, [r3, #28]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	69da      	ldr	r2, [r3, #28]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	69d9      	ldr	r1, [r3, #28]
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	691b      	ldr	r3, [r3, #16]
 8002c5c:	021a      	lsls	r2, r3, #8
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	430a      	orrs	r2, r1
 8002c64:	61da      	str	r2, [r3, #28]
      break;
 8002c66:	e000      	b.n	8002c6a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002c68:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3710      	adds	r7, #16
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d101      	bne.n	8002c94 <HAL_TIM_ConfigClockSource+0x18>
 8002c90:	2302      	movs	r3, #2
 8002c92:	e0b3      	b.n	8002dfc <HAL_TIM_ConfigClockSource+0x180>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2202      	movs	r2, #2
 8002ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002cb2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002cba:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ccc:	d03e      	beq.n	8002d4c <HAL_TIM_ConfigClockSource+0xd0>
 8002cce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cd2:	f200 8087 	bhi.w	8002de4 <HAL_TIM_ConfigClockSource+0x168>
 8002cd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cda:	f000 8085 	beq.w	8002de8 <HAL_TIM_ConfigClockSource+0x16c>
 8002cde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ce2:	d87f      	bhi.n	8002de4 <HAL_TIM_ConfigClockSource+0x168>
 8002ce4:	2b70      	cmp	r3, #112	; 0x70
 8002ce6:	d01a      	beq.n	8002d1e <HAL_TIM_ConfigClockSource+0xa2>
 8002ce8:	2b70      	cmp	r3, #112	; 0x70
 8002cea:	d87b      	bhi.n	8002de4 <HAL_TIM_ConfigClockSource+0x168>
 8002cec:	2b60      	cmp	r3, #96	; 0x60
 8002cee:	d050      	beq.n	8002d92 <HAL_TIM_ConfigClockSource+0x116>
 8002cf0:	2b60      	cmp	r3, #96	; 0x60
 8002cf2:	d877      	bhi.n	8002de4 <HAL_TIM_ConfigClockSource+0x168>
 8002cf4:	2b50      	cmp	r3, #80	; 0x50
 8002cf6:	d03c      	beq.n	8002d72 <HAL_TIM_ConfigClockSource+0xf6>
 8002cf8:	2b50      	cmp	r3, #80	; 0x50
 8002cfa:	d873      	bhi.n	8002de4 <HAL_TIM_ConfigClockSource+0x168>
 8002cfc:	2b40      	cmp	r3, #64	; 0x40
 8002cfe:	d058      	beq.n	8002db2 <HAL_TIM_ConfigClockSource+0x136>
 8002d00:	2b40      	cmp	r3, #64	; 0x40
 8002d02:	d86f      	bhi.n	8002de4 <HAL_TIM_ConfigClockSource+0x168>
 8002d04:	2b30      	cmp	r3, #48	; 0x30
 8002d06:	d064      	beq.n	8002dd2 <HAL_TIM_ConfigClockSource+0x156>
 8002d08:	2b30      	cmp	r3, #48	; 0x30
 8002d0a:	d86b      	bhi.n	8002de4 <HAL_TIM_ConfigClockSource+0x168>
 8002d0c:	2b20      	cmp	r3, #32
 8002d0e:	d060      	beq.n	8002dd2 <HAL_TIM_ConfigClockSource+0x156>
 8002d10:	2b20      	cmp	r3, #32
 8002d12:	d867      	bhi.n	8002de4 <HAL_TIM_ConfigClockSource+0x168>
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d05c      	beq.n	8002dd2 <HAL_TIM_ConfigClockSource+0x156>
 8002d18:	2b10      	cmp	r3, #16
 8002d1a:	d05a      	beq.n	8002dd2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002d1c:	e062      	b.n	8002de4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6818      	ldr	r0, [r3, #0]
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	6899      	ldr	r1, [r3, #8]
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	685a      	ldr	r2, [r3, #4]
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	f000 faca 	bl	80032c6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d40:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	609a      	str	r2, [r3, #8]
      break;
 8002d4a:	e04e      	b.n	8002dea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6818      	ldr	r0, [r3, #0]
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	6899      	ldr	r1, [r3, #8]
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	685a      	ldr	r2, [r3, #4]
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	f000 fab3 	bl	80032c6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	689a      	ldr	r2, [r3, #8]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d6e:	609a      	str	r2, [r3, #8]
      break;
 8002d70:	e03b      	b.n	8002dea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6818      	ldr	r0, [r3, #0]
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	6859      	ldr	r1, [r3, #4]
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	461a      	mov	r2, r3
 8002d80:	f000 fa2a 	bl	80031d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2150      	movs	r1, #80	; 0x50
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f000 fa81 	bl	8003292 <TIM_ITRx_SetConfig>
      break;
 8002d90:	e02b      	b.n	8002dea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6818      	ldr	r0, [r3, #0]
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	6859      	ldr	r1, [r3, #4]
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	461a      	mov	r2, r3
 8002da0:	f000 fa48 	bl	8003234 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2160      	movs	r1, #96	; 0x60
 8002daa:	4618      	mov	r0, r3
 8002dac:	f000 fa71 	bl	8003292 <TIM_ITRx_SetConfig>
      break;
 8002db0:	e01b      	b.n	8002dea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6818      	ldr	r0, [r3, #0]
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	6859      	ldr	r1, [r3, #4]
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	f000 fa0a 	bl	80031d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2140      	movs	r1, #64	; 0x40
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f000 fa61 	bl	8003292 <TIM_ITRx_SetConfig>
      break;
 8002dd0:	e00b      	b.n	8002dea <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4619      	mov	r1, r3
 8002ddc:	4610      	mov	r0, r2
 8002dde:	f000 fa58 	bl	8003292 <TIM_ITRx_SetConfig>
        break;
 8002de2:	e002      	b.n	8002dea <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002de4:	bf00      	nop
 8002de6:	e000      	b.n	8002dea <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002de8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2201      	movs	r2, #1
 8002dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3710      	adds	r7, #16
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b085      	sub	sp, #20
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4a29      	ldr	r2, [pc, #164]	; (8002ebc <TIM_Base_SetConfig+0xb8>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d00b      	beq.n	8002e34 <TIM_Base_SetConfig+0x30>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e22:	d007      	beq.n	8002e34 <TIM_Base_SetConfig+0x30>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	4a26      	ldr	r2, [pc, #152]	; (8002ec0 <TIM_Base_SetConfig+0xbc>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d003      	beq.n	8002e34 <TIM_Base_SetConfig+0x30>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4a25      	ldr	r2, [pc, #148]	; (8002ec4 <TIM_Base_SetConfig+0xc0>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d108      	bne.n	8002e46 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	68fa      	ldr	r2, [r7, #12]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a1c      	ldr	r2, [pc, #112]	; (8002ebc <TIM_Base_SetConfig+0xb8>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d00b      	beq.n	8002e66 <TIM_Base_SetConfig+0x62>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e54:	d007      	beq.n	8002e66 <TIM_Base_SetConfig+0x62>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a19      	ldr	r2, [pc, #100]	; (8002ec0 <TIM_Base_SetConfig+0xbc>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d003      	beq.n	8002e66 <TIM_Base_SetConfig+0x62>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a18      	ldr	r2, [pc, #96]	; (8002ec4 <TIM_Base_SetConfig+0xc0>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d108      	bne.n	8002e78 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	68fa      	ldr	r2, [r7, #12]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	695b      	ldr	r3, [r3, #20]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	68fa      	ldr	r2, [r7, #12]
 8002e8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	689a      	ldr	r2, [r3, #8]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4a07      	ldr	r2, [pc, #28]	; (8002ebc <TIM_Base_SetConfig+0xb8>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d103      	bne.n	8002eac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	691a      	ldr	r2, [r3, #16]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	615a      	str	r2, [r3, #20]
}
 8002eb2:	bf00      	nop
 8002eb4:	3714      	adds	r7, #20
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bc80      	pop	{r7}
 8002eba:	4770      	bx	lr
 8002ebc:	40012c00 	.word	0x40012c00
 8002ec0:	40000400 	.word	0x40000400
 8002ec4:	40000800 	.word	0x40000800

08002ec8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b087      	sub	sp, #28
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a1b      	ldr	r3, [r3, #32]
 8002ed6:	f023 0201 	bic.w	r2, r3, #1
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a1b      	ldr	r3, [r3, #32]
 8002ee2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ef6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f023 0303 	bic.w	r3, r3, #3
 8002efe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	f023 0302 	bic.w	r3, r3, #2
 8002f10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	697a      	ldr	r2, [r7, #20]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a1c      	ldr	r2, [pc, #112]	; (8002f90 <TIM_OC1_SetConfig+0xc8>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d10c      	bne.n	8002f3e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	f023 0308 	bic.w	r3, r3, #8
 8002f2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	697a      	ldr	r2, [r7, #20]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	f023 0304 	bic.w	r3, r3, #4
 8002f3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a13      	ldr	r2, [pc, #76]	; (8002f90 <TIM_OC1_SetConfig+0xc8>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d111      	bne.n	8002f6a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	693a      	ldr	r2, [r7, #16]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	693a      	ldr	r2, [r7, #16]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	693a      	ldr	r2, [r7, #16]
 8002f6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	68fa      	ldr	r2, [r7, #12]
 8002f74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	685a      	ldr	r2, [r3, #4]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	697a      	ldr	r2, [r7, #20]
 8002f82:	621a      	str	r2, [r3, #32]
}
 8002f84:	bf00      	nop
 8002f86:	371c      	adds	r7, #28
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bc80      	pop	{r7}
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	40012c00 	.word	0x40012c00

08002f94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b087      	sub	sp, #28
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a1b      	ldr	r3, [r3, #32]
 8002fa2:	f023 0210 	bic.w	r2, r3, #16
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a1b      	ldr	r3, [r3, #32]
 8002fae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	021b      	lsls	r3, r3, #8
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	f023 0320 	bic.w	r3, r3, #32
 8002fde:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	011b      	lsls	r3, r3, #4
 8002fe6:	697a      	ldr	r2, [r7, #20]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	4a1d      	ldr	r2, [pc, #116]	; (8003064 <TIM_OC2_SetConfig+0xd0>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d10d      	bne.n	8003010 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ffa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	011b      	lsls	r3, r3, #4
 8003002:	697a      	ldr	r2, [r7, #20]
 8003004:	4313      	orrs	r3, r2
 8003006:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800300e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4a14      	ldr	r2, [pc, #80]	; (8003064 <TIM_OC2_SetConfig+0xd0>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d113      	bne.n	8003040 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800301e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003026:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	695b      	ldr	r3, [r3, #20]
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	693a      	ldr	r2, [r7, #16]
 8003030:	4313      	orrs	r3, r2
 8003032:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	699b      	ldr	r3, [r3, #24]
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	693a      	ldr	r2, [r7, #16]
 800303c:	4313      	orrs	r3, r2
 800303e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	693a      	ldr	r2, [r7, #16]
 8003044:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	68fa      	ldr	r2, [r7, #12]
 800304a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	685a      	ldr	r2, [r3, #4]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	697a      	ldr	r2, [r7, #20]
 8003058:	621a      	str	r2, [r3, #32]
}
 800305a:	bf00      	nop
 800305c:	371c      	adds	r7, #28
 800305e:	46bd      	mov	sp, r7
 8003060:	bc80      	pop	{r7}
 8003062:	4770      	bx	lr
 8003064:	40012c00 	.word	0x40012c00

08003068 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003068:	b480      	push	{r7}
 800306a:	b087      	sub	sp, #28
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a1b      	ldr	r3, [r3, #32]
 8003076:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a1b      	ldr	r3, [r3, #32]
 8003082:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	69db      	ldr	r3, [r3, #28]
 800308e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003096:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f023 0303 	bic.w	r3, r3, #3
 800309e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68fa      	ldr	r2, [r7, #12]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80030b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	021b      	lsls	r3, r3, #8
 80030b8:	697a      	ldr	r2, [r7, #20]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a1d      	ldr	r2, [pc, #116]	; (8003138 <TIM_OC3_SetConfig+0xd0>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d10d      	bne.n	80030e2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80030cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	021b      	lsls	r3, r3, #8
 80030d4:	697a      	ldr	r2, [r7, #20]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80030e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a14      	ldr	r2, [pc, #80]	; (8003138 <TIM_OC3_SetConfig+0xd0>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d113      	bne.n	8003112 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80030f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80030f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	011b      	lsls	r3, r3, #4
 8003100:	693a      	ldr	r2, [r7, #16]
 8003102:	4313      	orrs	r3, r2
 8003104:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	011b      	lsls	r3, r3, #4
 800310c:	693a      	ldr	r2, [r7, #16]
 800310e:	4313      	orrs	r3, r2
 8003110:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	693a      	ldr	r2, [r7, #16]
 8003116:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	68fa      	ldr	r2, [r7, #12]
 800311c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	685a      	ldr	r2, [r3, #4]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	697a      	ldr	r2, [r7, #20]
 800312a:	621a      	str	r2, [r3, #32]
}
 800312c:	bf00      	nop
 800312e:	371c      	adds	r7, #28
 8003130:	46bd      	mov	sp, r7
 8003132:	bc80      	pop	{r7}
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	40012c00 	.word	0x40012c00

0800313c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800313c:	b480      	push	{r7}
 800313e:	b087      	sub	sp, #28
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a1b      	ldr	r3, [r3, #32]
 800314a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a1b      	ldr	r3, [r3, #32]
 8003156:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	69db      	ldr	r3, [r3, #28]
 8003162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800316a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003172:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	021b      	lsls	r3, r3, #8
 800317a:	68fa      	ldr	r2, [r7, #12]
 800317c:	4313      	orrs	r3, r2
 800317e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003186:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	031b      	lsls	r3, r3, #12
 800318e:	693a      	ldr	r2, [r7, #16]
 8003190:	4313      	orrs	r3, r2
 8003192:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4a0f      	ldr	r2, [pc, #60]	; (80031d4 <TIM_OC4_SetConfig+0x98>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d109      	bne.n	80031b0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	695b      	ldr	r3, [r3, #20]
 80031a8:	019b      	lsls	r3, r3, #6
 80031aa:	697a      	ldr	r2, [r7, #20]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	697a      	ldr	r2, [r7, #20]
 80031b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	68fa      	ldr	r2, [r7, #12]
 80031ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	685a      	ldr	r2, [r3, #4]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	693a      	ldr	r2, [r7, #16]
 80031c8:	621a      	str	r2, [r3, #32]
}
 80031ca:	bf00      	nop
 80031cc:	371c      	adds	r7, #28
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bc80      	pop	{r7}
 80031d2:	4770      	bx	lr
 80031d4:	40012c00 	.word	0x40012c00

080031d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031d8:	b480      	push	{r7}
 80031da:	b087      	sub	sp, #28
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6a1b      	ldr	r3, [r3, #32]
 80031e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6a1b      	ldr	r3, [r3, #32]
 80031ee:	f023 0201 	bic.w	r2, r3, #1
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003202:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	011b      	lsls	r3, r3, #4
 8003208:	693a      	ldr	r2, [r7, #16]
 800320a:	4313      	orrs	r3, r2
 800320c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	f023 030a 	bic.w	r3, r3, #10
 8003214:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003216:	697a      	ldr	r2, [r7, #20]
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	4313      	orrs	r3, r2
 800321c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	693a      	ldr	r2, [r7, #16]
 8003222:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	697a      	ldr	r2, [r7, #20]
 8003228:	621a      	str	r2, [r3, #32]
}
 800322a:	bf00      	nop
 800322c:	371c      	adds	r7, #28
 800322e:	46bd      	mov	sp, r7
 8003230:	bc80      	pop	{r7}
 8003232:	4770      	bx	lr

08003234 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003234:	b480      	push	{r7}
 8003236:	b087      	sub	sp, #28
 8003238:	af00      	add	r7, sp, #0
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6a1b      	ldr	r3, [r3, #32]
 8003244:	f023 0210 	bic.w	r2, r3, #16
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6a1b      	ldr	r3, [r3, #32]
 8003256:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800325e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	031b      	lsls	r3, r3, #12
 8003264:	697a      	ldr	r2, [r7, #20]
 8003266:	4313      	orrs	r3, r2
 8003268:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003270:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	011b      	lsls	r3, r3, #4
 8003276:	693a      	ldr	r2, [r7, #16]
 8003278:	4313      	orrs	r3, r2
 800327a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	697a      	ldr	r2, [r7, #20]
 8003280:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	693a      	ldr	r2, [r7, #16]
 8003286:	621a      	str	r2, [r3, #32]
}
 8003288:	bf00      	nop
 800328a:	371c      	adds	r7, #28
 800328c:	46bd      	mov	sp, r7
 800328e:	bc80      	pop	{r7}
 8003290:	4770      	bx	lr

08003292 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003292:	b480      	push	{r7}
 8003294:	b085      	sub	sp, #20
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
 800329a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032aa:	683a      	ldr	r2, [r7, #0]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	f043 0307 	orr.w	r3, r3, #7
 80032b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	68fa      	ldr	r2, [r7, #12]
 80032ba:	609a      	str	r2, [r3, #8]
}
 80032bc:	bf00      	nop
 80032be:	3714      	adds	r7, #20
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bc80      	pop	{r7}
 80032c4:	4770      	bx	lr

080032c6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80032c6:	b480      	push	{r7}
 80032c8:	b087      	sub	sp, #28
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	60f8      	str	r0, [r7, #12]
 80032ce:	60b9      	str	r1, [r7, #8]
 80032d0:	607a      	str	r2, [r7, #4]
 80032d2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032e0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	021a      	lsls	r2, r3, #8
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	431a      	orrs	r2, r3
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	697a      	ldr	r2, [r7, #20]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	697a      	ldr	r2, [r7, #20]
 80032f8:	609a      	str	r2, [r3, #8]
}
 80032fa:	bf00      	nop
 80032fc:	371c      	adds	r7, #28
 80032fe:	46bd      	mov	sp, r7
 8003300:	bc80      	pop	{r7}
 8003302:	4770      	bx	lr

08003304 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003304:	b480      	push	{r7}
 8003306:	b087      	sub	sp, #28
 8003308:	af00      	add	r7, sp, #0
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	60b9      	str	r1, [r7, #8]
 800330e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	f003 031f 	and.w	r3, r3, #31
 8003316:	2201      	movs	r2, #1
 8003318:	fa02 f303 	lsl.w	r3, r2, r3
 800331c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6a1a      	ldr	r2, [r3, #32]
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	43db      	mvns	r3, r3
 8003326:	401a      	ands	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6a1a      	ldr	r2, [r3, #32]
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	f003 031f 	and.w	r3, r3, #31
 8003336:	6879      	ldr	r1, [r7, #4]
 8003338:	fa01 f303 	lsl.w	r3, r1, r3
 800333c:	431a      	orrs	r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	621a      	str	r2, [r3, #32]
}
 8003342:	bf00      	nop
 8003344:	371c      	adds	r7, #28
 8003346:	46bd      	mov	sp, r7
 8003348:	bc80      	pop	{r7}
 800334a:	4770      	bx	lr

0800334c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800334c:	b480      	push	{r7}
 800334e:	b085      	sub	sp, #20
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800335c:	2b01      	cmp	r3, #1
 800335e:	d101      	bne.n	8003364 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003360:	2302      	movs	r3, #2
 8003362:	e046      	b.n	80033f2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2202      	movs	r2, #2
 8003370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800338a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68fa      	ldr	r2, [r7, #12]
 8003392:	4313      	orrs	r3, r2
 8003394:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	68fa      	ldr	r2, [r7, #12]
 800339c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a16      	ldr	r2, [pc, #88]	; (80033fc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d00e      	beq.n	80033c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033b0:	d009      	beq.n	80033c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a12      	ldr	r2, [pc, #72]	; (8003400 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d004      	beq.n	80033c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a10      	ldr	r2, [pc, #64]	; (8003404 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d10c      	bne.n	80033e0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	68ba      	ldr	r2, [r7, #8]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	68ba      	ldr	r2, [r7, #8]
 80033de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3714      	adds	r7, #20
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bc80      	pop	{r7}
 80033fa:	4770      	bx	lr
 80033fc:	40012c00 	.word	0x40012c00
 8003400:	40000400 	.word	0x40000400
 8003404:	40000800 	.word	0x40000800

08003408 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003408:	b480      	push	{r7}
 800340a:	b085      	sub	sp, #20
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003412:	2300      	movs	r3, #0
 8003414:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800341c:	2b01      	cmp	r3, #1
 800341e:	d101      	bne.n	8003424 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003420:	2302      	movs	r3, #2
 8003422:	e03d      	b.n	80034a0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	4313      	orrs	r3, r2
 8003438:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	4313      	orrs	r3, r2
 8003446:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	4313      	orrs	r3, r2
 8003454:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4313      	orrs	r3, r2
 8003462:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	4313      	orrs	r3, r2
 8003470:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	695b      	ldr	r3, [r3, #20]
 800347c:	4313      	orrs	r3, r2
 800347e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	69db      	ldr	r3, [r3, #28]
 800348a:	4313      	orrs	r3, r2
 800348c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800349e:	2300      	movs	r3, #0
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3714      	adds	r7, #20
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bc80      	pop	{r7}
 80034a8:	4770      	bx	lr
	...

080034ac <__libc_init_array>:
 80034ac:	b570      	push	{r4, r5, r6, lr}
 80034ae:	2600      	movs	r6, #0
 80034b0:	4d0c      	ldr	r5, [pc, #48]	; (80034e4 <__libc_init_array+0x38>)
 80034b2:	4c0d      	ldr	r4, [pc, #52]	; (80034e8 <__libc_init_array+0x3c>)
 80034b4:	1b64      	subs	r4, r4, r5
 80034b6:	10a4      	asrs	r4, r4, #2
 80034b8:	42a6      	cmp	r6, r4
 80034ba:	d109      	bne.n	80034d0 <__libc_init_array+0x24>
 80034bc:	f000 f822 	bl	8003504 <_init>
 80034c0:	2600      	movs	r6, #0
 80034c2:	4d0a      	ldr	r5, [pc, #40]	; (80034ec <__libc_init_array+0x40>)
 80034c4:	4c0a      	ldr	r4, [pc, #40]	; (80034f0 <__libc_init_array+0x44>)
 80034c6:	1b64      	subs	r4, r4, r5
 80034c8:	10a4      	asrs	r4, r4, #2
 80034ca:	42a6      	cmp	r6, r4
 80034cc:	d105      	bne.n	80034da <__libc_init_array+0x2e>
 80034ce:	bd70      	pop	{r4, r5, r6, pc}
 80034d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80034d4:	4798      	blx	r3
 80034d6:	3601      	adds	r6, #1
 80034d8:	e7ee      	b.n	80034b8 <__libc_init_array+0xc>
 80034da:	f855 3b04 	ldr.w	r3, [r5], #4
 80034de:	4798      	blx	r3
 80034e0:	3601      	adds	r6, #1
 80034e2:	e7f2      	b.n	80034ca <__libc_init_array+0x1e>
 80034e4:	0800353c 	.word	0x0800353c
 80034e8:	0800353c 	.word	0x0800353c
 80034ec:	0800353c 	.word	0x0800353c
 80034f0:	08003540 	.word	0x08003540

080034f4 <memset>:
 80034f4:	4603      	mov	r3, r0
 80034f6:	4402      	add	r2, r0
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d100      	bne.n	80034fe <memset+0xa>
 80034fc:	4770      	bx	lr
 80034fe:	f803 1b01 	strb.w	r1, [r3], #1
 8003502:	e7f9      	b.n	80034f8 <memset+0x4>

08003504 <_init>:
 8003504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003506:	bf00      	nop
 8003508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800350a:	bc08      	pop	{r3}
 800350c:	469e      	mov	lr, r3
 800350e:	4770      	bx	lr

08003510 <_fini>:
 8003510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003512:	bf00      	nop
 8003514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003516:	bc08      	pop	{r3}
 8003518:	469e      	mov	lr, r3
 800351a:	4770      	bx	lr
