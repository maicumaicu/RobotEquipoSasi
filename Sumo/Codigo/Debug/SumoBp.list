
SumoBp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003558  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003664  08003664  00013664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003684  08003684  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003684  08003684  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003684  08003684  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003684  08003684  00013684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003688  08003688  00013688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800368c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d8  2000000c  08003698  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004e4  08003698  000204e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ae5f  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002297  00000000  00000000  0002ae94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf8  00000000  00000000  0002d130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ad0  00000000  00000000  0002dd28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018625  00000000  00000000  0002e7f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e662  00000000  00000000  00046e1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c701  00000000  00000000  0005547f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e1b80  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003010  00000000  00000000  000e1bd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800364c 	.word	0x0800364c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	0800364c 	.word	0x0800364c

0800014c <showModeNumber>:
 *      Author: jore
 */
#include "stm32f1xx_hal.h"
#include "main.h"

void showModeNumber(int number) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(L4, number % 2);
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b00      	cmp	r3, #0
 8000158:	f003 0301 	and.w	r3, r3, #1
 800015c:	bfb8      	it	lt
 800015e:	425b      	neglt	r3, r3
 8000160:	b2db      	uxtb	r3, r3
 8000162:	461a      	mov	r2, r3
 8000164:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000168:	481d      	ldr	r0, [pc, #116]	; (80001e0 <showModeNumber+0x94>)
 800016a:	f001 ffbe 	bl	80020ea <HAL_GPIO_WritePin>
	number /= 2;
 800016e:	687b      	ldr	r3, [r7, #4]
 8000170:	0fda      	lsrs	r2, r3, #31
 8000172:	4413      	add	r3, r2
 8000174:	105b      	asrs	r3, r3, #1
 8000176:	607b      	str	r3, [r7, #4]
	HAL_GPIO_WritePin(L3, number % 2);
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2b00      	cmp	r3, #0
 800017c:	f003 0301 	and.w	r3, r3, #1
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	b2db      	uxtb	r3, r3
 8000186:	461a      	mov	r2, r3
 8000188:	f44f 7180 	mov.w	r1, #256	; 0x100
 800018c:	4814      	ldr	r0, [pc, #80]	; (80001e0 <showModeNumber+0x94>)
 800018e:	f001 ffac 	bl	80020ea <HAL_GPIO_WritePin>
	number /= 2;
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	0fda      	lsrs	r2, r3, #31
 8000196:	4413      	add	r3, r2
 8000198:	105b      	asrs	r3, r3, #1
 800019a:	607b      	str	r3, [r7, #4]
	HAL_GPIO_WritePin(L2, number % 2);
 800019c:	687b      	ldr	r3, [r7, #4]
 800019e:	2b00      	cmp	r3, #0
 80001a0:	f003 0301 	and.w	r3, r3, #1
 80001a4:	bfb8      	it	lt
 80001a6:	425b      	neglt	r3, r3
 80001a8:	b2db      	uxtb	r3, r3
 80001aa:	461a      	mov	r2, r3
 80001ac:	2180      	movs	r1, #128	; 0x80
 80001ae:	480c      	ldr	r0, [pc, #48]	; (80001e0 <showModeNumber+0x94>)
 80001b0:	f001 ff9b 	bl	80020ea <HAL_GPIO_WritePin>
	number /= 2;
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	0fda      	lsrs	r2, r3, #31
 80001b8:	4413      	add	r3, r2
 80001ba:	105b      	asrs	r3, r3, #1
 80001bc:	607b      	str	r3, [r7, #4]
	HAL_GPIO_WritePin(L1, number % 2);
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	2b00      	cmp	r3, #0
 80001c2:	f003 0301 	and.w	r3, r3, #1
 80001c6:	bfb8      	it	lt
 80001c8:	425b      	neglt	r3, r3
 80001ca:	b2db      	uxtb	r3, r3
 80001cc:	461a      	mov	r2, r3
 80001ce:	2140      	movs	r1, #64	; 0x40
 80001d0:	4803      	ldr	r0, [pc, #12]	; (80001e0 <showModeNumber+0x94>)
 80001d2:	f001 ff8a 	bl	80020ea <HAL_GPIO_WritePin>
}
 80001d6:	bf00      	nop
 80001d8:	3708      	adds	r7, #8
 80001da:	46bd      	mov	sp, r7
 80001dc:	bd80      	pop	{r7, pc}
 80001de:	bf00      	nop
 80001e0:	40010c00 	.word	0x40010c00

080001e4 <btnMachine>:
	} else
		return x;
}


void btnMachine(button* btn) {
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b082      	sub	sp, #8
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	6078      	str	r0, [r7, #4]
	switch (btn->estado) {
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	689b      	ldr	r3, [r3, #8]
 80001f0:	2b02      	cmp	r3, #2
 80001f2:	d04a      	beq.n	800028a <btnMachine+0xa6>
 80001f4:	2b02      	cmp	r3, #2
 80001f6:	dc64      	bgt.n	80002c2 <btnMachine+0xde>
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d002      	beq.n	8000202 <btnMachine+0x1e>
 80001fc:	2b01      	cmp	r3, #1
 80001fe:	d01d      	beq.n	800023c <btnMachine+0x58>
			(*btn).flag = 1;
			(*btn).estado = ESPERA;
		}
		break;
	}
}
 8000200:	e05f      	b.n	80002c2 <btnMachine+0xde>
		(*btn).flag = 0;
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	2200      	movs	r2, #0
 8000206:	60da      	str	r2, [r3, #12]
		lecturaBtn = HAL_GPIO_ReadPin((*btn).PIN.Port, (*btn).PIN.pin);
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	681a      	ldr	r2, [r3, #0]
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	889b      	ldrh	r3, [r3, #4]
 8000210:	4619      	mov	r1, r3
 8000212:	4610      	mov	r0, r2
 8000214:	f001 ff52 	bl	80020bc <HAL_GPIO_ReadPin>
 8000218:	4603      	mov	r3, r0
 800021a:	461a      	mov	r2, r3
 800021c:	4b2b      	ldr	r3, [pc, #172]	; (80002cc <btnMachine+0xe8>)
 800021e:	601a      	str	r2, [r3, #0]
		if (lecturaBtn == 0) {
 8000220:	4b2a      	ldr	r3, [pc, #168]	; (80002cc <btnMachine+0xe8>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	2b00      	cmp	r3, #0
 8000226:	d147      	bne.n	80002b8 <btnMachine+0xd4>
			ticks = HAL_GetTick();
 8000228:	f000 fed8 	bl	8000fdc <HAL_GetTick>
 800022c:	4603      	mov	r3, r0
 800022e:	461a      	mov	r2, r3
 8000230:	4b27      	ldr	r3, [pc, #156]	; (80002d0 <btnMachine+0xec>)
 8000232:	601a      	str	r2, [r3, #0]
			(*btn).estado = CONFIRMACION;
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	2201      	movs	r2, #1
 8000238:	609a      	str	r2, [r3, #8]
		break;
 800023a:	e03d      	b.n	80002b8 <btnMachine+0xd4>
		lecturaBtn = HAL_GPIO_ReadPin((*btn).PIN.Port, (*btn).PIN.pin);
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	681a      	ldr	r2, [r3, #0]
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	889b      	ldrh	r3, [r3, #4]
 8000244:	4619      	mov	r1, r3
 8000246:	4610      	mov	r0, r2
 8000248:	f001 ff38 	bl	80020bc <HAL_GPIO_ReadPin>
 800024c:	4603      	mov	r3, r0
 800024e:	461a      	mov	r2, r3
 8000250:	4b1e      	ldr	r3, [pc, #120]	; (80002cc <btnMachine+0xe8>)
 8000252:	601a      	str	r2, [r3, #0]
		if (lecturaBtn == 0 && HAL_GetTick() >= ticks + TICKS_BTN) {
 8000254:	4b1d      	ldr	r3, [pc, #116]	; (80002cc <btnMachine+0xe8>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	2b00      	cmp	r3, #0
 800025a:	d10a      	bne.n	8000272 <btnMachine+0x8e>
 800025c:	f000 febe 	bl	8000fdc <HAL_GetTick>
 8000260:	4602      	mov	r2, r0
 8000262:	4b1b      	ldr	r3, [pc, #108]	; (80002d0 <btnMachine+0xec>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	3319      	adds	r3, #25
 8000268:	429a      	cmp	r2, r3
 800026a:	d302      	bcc.n	8000272 <btnMachine+0x8e>
			(*btn).estado = LIBERACION;
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	2202      	movs	r2, #2
 8000270:	609a      	str	r2, [r3, #8]
		if (lecturaBtn == 1 && ticks < TICKS_BTN) {
 8000272:	4b16      	ldr	r3, [pc, #88]	; (80002cc <btnMachine+0xe8>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	2b01      	cmp	r3, #1
 8000278:	d120      	bne.n	80002bc <btnMachine+0xd8>
 800027a:	4b15      	ldr	r3, [pc, #84]	; (80002d0 <btnMachine+0xec>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	2b18      	cmp	r3, #24
 8000280:	dc1c      	bgt.n	80002bc <btnMachine+0xd8>
			(*btn).estado = ESPERA;
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	2200      	movs	r2, #0
 8000286:	609a      	str	r2, [r3, #8]
		break;
 8000288:	e018      	b.n	80002bc <btnMachine+0xd8>
		lecturaBtn = HAL_GPIO_ReadPin((*btn).PIN.Port, (*btn).PIN.pin);
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	681a      	ldr	r2, [r3, #0]
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	889b      	ldrh	r3, [r3, #4]
 8000292:	4619      	mov	r1, r3
 8000294:	4610      	mov	r0, r2
 8000296:	f001 ff11 	bl	80020bc <HAL_GPIO_ReadPin>
 800029a:	4603      	mov	r3, r0
 800029c:	461a      	mov	r2, r3
 800029e:	4b0b      	ldr	r3, [pc, #44]	; (80002cc <btnMachine+0xe8>)
 80002a0:	601a      	str	r2, [r3, #0]
		if (lecturaBtn == 1) {
 80002a2:	4b0a      	ldr	r3, [pc, #40]	; (80002cc <btnMachine+0xe8>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	2b01      	cmp	r3, #1
 80002a8:	d10a      	bne.n	80002c0 <btnMachine+0xdc>
			(*btn).flag = 1;
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	2201      	movs	r2, #1
 80002ae:	60da      	str	r2, [r3, #12]
			(*btn).estado = ESPERA;
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	2200      	movs	r2, #0
 80002b4:	609a      	str	r2, [r3, #8]
		break;
 80002b6:	e003      	b.n	80002c0 <btnMachine+0xdc>
		break;
 80002b8:	bf00      	nop
 80002ba:	e002      	b.n	80002c2 <btnMachine+0xde>
		break;
 80002bc:	bf00      	nop
 80002be:	e000      	b.n	80002c2 <btnMachine+0xde>
		break;
 80002c0:	bf00      	nop
}
 80002c2:	bf00      	nop
 80002c4:	3708      	adds	r7, #8
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	2000002c 	.word	0x2000002c
 80002d0:	20000028 	.word	0x20000028

080002d4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80002d8:	f000 fe28 	bl	8000f2c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80002dc:	f000 f88a 	bl	80003f4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80002e0:	f000 fa3e 	bl	8000760 <MX_GPIO_Init>
	MX_DMA_Init();
 80002e4:	f000 fa1e 	bl	8000724 <MX_DMA_Init>
	MX_TIM1_Init();
 80002e8:	f000 f94a 	bl	8000580 <MX_TIM1_Init>
	MX_ADC1_Init();
 80002ec:	f000 f8de 	bl	80004ac <MX_ADC1_Init>
	MX_TIM3_Init();
 80002f0:	f000 f996 	bl	8000620 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	btns[0].PIN.Port = B1_GPIO_Port;
 80002f4:	4b34      	ldr	r3, [pc, #208]	; (80003c8 <main+0xf4>)
 80002f6:	4a35      	ldr	r2, [pc, #212]	; (80003cc <main+0xf8>)
 80002f8:	601a      	str	r2, [r3, #0]
	btns[0].PIN.pin = B1_Pin;
 80002fa:	4b33      	ldr	r3, [pc, #204]	; (80003c8 <main+0xf4>)
 80002fc:	2220      	movs	r2, #32
 80002fe:	809a      	strh	r2, [r3, #4]
	btns[0].estado = ESPERA;
 8000300:	4b31      	ldr	r3, [pc, #196]	; (80003c8 <main+0xf4>)
 8000302:	2200      	movs	r2, #0
 8000304:	609a      	str	r2, [r3, #8]
	btns[0].flag = 0;
 8000306:	4b30      	ldr	r3, [pc, #192]	; (80003c8 <main+0xf4>)
 8000308:	2200      	movs	r2, #0
 800030a:	60da      	str	r2, [r3, #12]
	btns[1].PIN.Port = B2_GPIO_Port;
 800030c:	4b2e      	ldr	r3, [pc, #184]	; (80003c8 <main+0xf4>)
 800030e:	4a2f      	ldr	r2, [pc, #188]	; (80003cc <main+0xf8>)
 8000310:	611a      	str	r2, [r3, #16]
	btns[1].PIN.pin = B2_Pin;
 8000312:	4b2d      	ldr	r3, [pc, #180]	; (80003c8 <main+0xf4>)
 8000314:	2210      	movs	r2, #16
 8000316:	829a      	strh	r2, [r3, #20]
	btns[1].estado = ESPERA;
 8000318:	4b2b      	ldr	r3, [pc, #172]	; (80003c8 <main+0xf4>)
 800031a:	2200      	movs	r2, #0
 800031c:	619a      	str	r2, [r3, #24]
	btns[1].flag = 0;
 800031e:	4b2a      	ldr	r3, [pc, #168]	; (80003c8 <main+0xf4>)
 8000320:	2200      	movs	r2, #0
 8000322:	61da      	str	r2, [r3, #28]
	btns[2].PIN.Port = B3_GPIO_Port;
 8000324:	4b28      	ldr	r3, [pc, #160]	; (80003c8 <main+0xf4>)
 8000326:	4a29      	ldr	r2, [pc, #164]	; (80003cc <main+0xf8>)
 8000328:	621a      	str	r2, [r3, #32]
	btns[2].PIN.pin = B3_Pin;
 800032a:	4b27      	ldr	r3, [pc, #156]	; (80003c8 <main+0xf4>)
 800032c:	2208      	movs	r2, #8
 800032e:	849a      	strh	r2, [r3, #36]	; 0x24
	btns[2].estado = ESPERA;
 8000330:	4b25      	ldr	r3, [pc, #148]	; (80003c8 <main+0xf4>)
 8000332:	2200      	movs	r2, #0
 8000334:	629a      	str	r2, [r3, #40]	; 0x28
	btns[2].flag = 0;
 8000336:	4b24      	ldr	r3, [pc, #144]	; (80003c8 <main+0xf4>)
 8000338:	2200      	movs	r2, #0
 800033a:	62da      	str	r2, [r3, #44]	; 0x2c
	btns[3].PIN.Port = B4_GPIO_Port;
 800033c:	4b22      	ldr	r3, [pc, #136]	; (80003c8 <main+0xf4>)
 800033e:	4a24      	ldr	r2, [pc, #144]	; (80003d0 <main+0xfc>)
 8000340:	631a      	str	r2, [r3, #48]	; 0x30
	btns[3].PIN.pin = B4_Pin;
 8000342:	4b21      	ldr	r3, [pc, #132]	; (80003c8 <main+0xf4>)
 8000344:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000348:	869a      	strh	r2, [r3, #52]	; 0x34
	btns[3].estado = ESPERA;
 800034a:	4b1f      	ldr	r3, [pc, #124]	; (80003c8 <main+0xf4>)
 800034c:	2200      	movs	r2, #0
 800034e:	639a      	str	r2, [r3, #56]	; 0x38
	btns[3].flag = 0;
 8000350:	4b1d      	ldr	r3, [pc, #116]	; (80003c8 <main+0xf4>)
 8000352:	2200      	movs	r2, #0
 8000354:	63da      	str	r2, [r3, #60]	; 0x3c
	mainState = INIT;
 8000356:	4b1f      	ldr	r3, [pc, #124]	; (80003d4 <main+0x100>)
 8000358:	2200      	movs	r2, #0
 800035a:	601a      	str	r2, [r3, #0]
	Motors[0].IN1.Port = INA1_GPIO_Port;
 800035c:	4b1e      	ldr	r3, [pc, #120]	; (80003d8 <main+0x104>)
 800035e:	4a1b      	ldr	r2, [pc, #108]	; (80003cc <main+0xf8>)
 8000360:	609a      	str	r2, [r3, #8]
	Motors[0].IN2.Port = INA2_GPIO_Port;
 8000362:	4b1d      	ldr	r3, [pc, #116]	; (80003d8 <main+0x104>)
 8000364:	4a19      	ldr	r2, [pc, #100]	; (80003cc <main+0xf8>)
 8000366:	601a      	str	r2, [r3, #0]
	Motors[0].IN1.pin = INA1_Pin;
 8000368:	4b1b      	ldr	r3, [pc, #108]	; (80003d8 <main+0x104>)
 800036a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800036e:	819a      	strh	r2, [r3, #12]
	Motors[0].IN2.pin = INA2_Pin;
 8000370:	4b19      	ldr	r3, [pc, #100]	; (80003d8 <main+0x104>)
 8000372:	2201      	movs	r2, #1
 8000374:	809a      	strh	r2, [r3, #4]
	Motors[1].IN1.Port = INB1_GPIO_Port;
 8000376:	4b18      	ldr	r3, [pc, #96]	; (80003d8 <main+0x104>)
 8000378:	4a15      	ldr	r2, [pc, #84]	; (80003d0 <main+0xfc>)
 800037a:	621a      	str	r2, [r3, #32]
	Motors[1].IN2.Port = INB2_GPIO_Port;
 800037c:	4b16      	ldr	r3, [pc, #88]	; (80003d8 <main+0x104>)
 800037e:	4a13      	ldr	r2, [pc, #76]	; (80003cc <main+0xf8>)
 8000380:	619a      	str	r2, [r3, #24]
	Motors[1].IN1.pin = INB1_Pin;
 8000382:	4b15      	ldr	r3, [pc, #84]	; (80003d8 <main+0x104>)
 8000384:	2280      	movs	r2, #128	; 0x80
 8000386:	849a      	strh	r2, [r3, #36]	; 0x24
	Motors[1].IN2.pin = INB2_Pin;
 8000388:	4b13      	ldr	r3, [pc, #76]	; (80003d8 <main+0x104>)
 800038a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800038e:	839a      	strh	r2, [r3, #28]

	//HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000390:	2100      	movs	r1, #0
 8000392:	4812      	ldr	r0, [pc, #72]	; (80003dc <main+0x108>)
 8000394:	f002 fc08 	bl	8002ba8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000398:	210c      	movs	r1, #12
 800039a:	4810      	ldr	r0, [pc, #64]	; (80003dc <main+0x108>)
 800039c:	f002 fc04 	bl	8002ba8 <HAL_TIM_PWM_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_buf, ADC_BUF_LEN);
 80003a0:	2264      	movs	r2, #100	; 0x64
 80003a2:	490f      	ldr	r1, [pc, #60]	; (80003e0 <main+0x10c>)
 80003a4:	480f      	ldr	r0, [pc, #60]	; (80003e4 <main+0x110>)
 80003a6:	f000 ff1f 	bl	80011e8 <HAL_ADC_Start_DMA>
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		//TIM1->CCR2 = 150;
		btnMachine(&btns[0]);
 80003aa:	4807      	ldr	r0, [pc, #28]	; (80003c8 <main+0xf4>)
 80003ac:	f7ff ff1a 	bl	80001e4 <btnMachine>
		btnMachine(&btns[1]);
 80003b0:	480d      	ldr	r0, [pc, #52]	; (80003e8 <main+0x114>)
 80003b2:	f7ff ff17 	bl	80001e4 <btnMachine>
		btnMachine(&btns[2]);
 80003b6:	480d      	ldr	r0, [pc, #52]	; (80003ec <main+0x118>)
 80003b8:	f7ff ff14 	bl	80001e4 <btnMachine>
		btnMachine(&btns[3]);
 80003bc:	480c      	ldr	r0, [pc, #48]	; (80003f0 <main+0x11c>)
 80003be:	f7ff ff11 	bl	80001e4 <btnMachine>
		mainMachine();
 80003c2:	f000 fa6b 	bl	800089c <mainMachine>
		btnMachine(&btns[0]);
 80003c6:	e7f0      	b.n	80003aa <main+0xd6>
 80003c8:	20000468 	.word	0x20000468
 80003cc:	40010c00 	.word	0x40010c00
 80003d0:	40010800 	.word	0x40010800
 80003d4:	200004dc 	.word	0x200004dc
 80003d8:	200004a8 	.word	0x200004a8
 80003dc:	200000ec 	.word	0x200000ec
 80003e0:	20000148 	.word	0x20000148
 80003e4:	20000030 	.word	0x20000030
 80003e8:	20000478 	.word	0x20000478
 80003ec:	20000488 	.word	0x20000488
 80003f0:	20000498 	.word	0x20000498

080003f4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b094      	sub	sp, #80	; 0x50
 80003f8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80003fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003fe:	2228      	movs	r2, #40	; 0x28
 8000400:	2100      	movs	r1, #0
 8000402:	4618      	mov	r0, r3
 8000404:	f003 f91a 	bl	800363c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000408:	f107 0314 	add.w	r3, r7, #20
 800040c:	2200      	movs	r2, #0
 800040e:	601a      	str	r2, [r3, #0]
 8000410:	605a      	str	r2, [r3, #4]
 8000412:	609a      	str	r2, [r3, #8]
 8000414:	60da      	str	r2, [r3, #12]
 8000416:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000418:	1d3b      	adds	r3, r7, #4
 800041a:	2200      	movs	r2, #0
 800041c:	601a      	str	r2, [r3, #0]
 800041e:	605a      	str	r2, [r3, #4]
 8000420:	609a      	str	r2, [r3, #8]
 8000422:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000424:	2301      	movs	r3, #1
 8000426:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000428:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800042c:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800042e:	2300      	movs	r3, #0
 8000430:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000432:	2301      	movs	r3, #1
 8000434:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000436:	2302      	movs	r3, #2
 8000438:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800043a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800043e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000440:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000444:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000446:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800044a:	4618      	mov	r0, r3
 800044c:	f001 fe66 	bl	800211c <HAL_RCC_OscConfig>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d001      	beq.n	800045a <SystemClock_Config+0x66>
		Error_Handler();
 8000456:	f000 fb43 	bl	8000ae0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800045a:	230f      	movs	r3, #15
 800045c:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800045e:	2302      	movs	r3, #2
 8000460:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000462:	2300      	movs	r3, #0
 8000464:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000466:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800046a:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800046c:	2300      	movs	r3, #0
 800046e:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000470:	f107 0314 	add.w	r3, r7, #20
 8000474:	2102      	movs	r1, #2
 8000476:	4618      	mov	r0, r3
 8000478:	f002 f8d2 	bl	8002620 <HAL_RCC_ClockConfig>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d001      	beq.n	8000486 <SystemClock_Config+0x92>
		Error_Handler();
 8000482:	f000 fb2d 	bl	8000ae0 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000486:	2302      	movs	r3, #2
 8000488:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800048a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800048e:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000490:	1d3b      	adds	r3, r7, #4
 8000492:	4618      	mov	r0, r3
 8000494:	f002 fa2a 	bl	80028ec <HAL_RCCEx_PeriphCLKConfig>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d001      	beq.n	80004a2 <SystemClock_Config+0xae>
		Error_Handler();
 800049e:	f000 fb1f 	bl	8000ae0 <Error_Handler>
	}
}
 80004a2:	bf00      	nop
 80004a4:	3750      	adds	r7, #80	; 0x50
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}
	...

080004ac <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b084      	sub	sp, #16
 80004b0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80004b2:	1d3b      	adds	r3, r7, #4
 80004b4:	2200      	movs	r2, #0
 80004b6:	601a      	str	r2, [r3, #0]
 80004b8:	605a      	str	r2, [r3, #4]
 80004ba:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 80004bc:	4b2e      	ldr	r3, [pc, #184]	; (8000578 <MX_ADC1_Init+0xcc>)
 80004be:	4a2f      	ldr	r2, [pc, #188]	; (800057c <MX_ADC1_Init+0xd0>)
 80004c0:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80004c2:	4b2d      	ldr	r3, [pc, #180]	; (8000578 <MX_ADC1_Init+0xcc>)
 80004c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004c8:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = ENABLE;
 80004ca:	4b2b      	ldr	r3, [pc, #172]	; (8000578 <MX_ADC1_Init+0xcc>)
 80004cc:	2201      	movs	r2, #1
 80004ce:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004d0:	4b29      	ldr	r3, [pc, #164]	; (8000578 <MX_ADC1_Init+0xcc>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004d6:	4b28      	ldr	r3, [pc, #160]	; (8000578 <MX_ADC1_Init+0xcc>)
 80004d8:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80004dc:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004de:	4b26      	ldr	r3, [pc, #152]	; (8000578 <MX_ADC1_Init+0xcc>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 4;
 80004e4:	4b24      	ldr	r3, [pc, #144]	; (8000578 <MX_ADC1_Init+0xcc>)
 80004e6:	2204      	movs	r2, #4
 80004e8:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80004ea:	4823      	ldr	r0, [pc, #140]	; (8000578 <MX_ADC1_Init+0xcc>)
 80004ec:	f000 fda4 	bl	8001038 <HAL_ADC_Init>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d001      	beq.n	80004fa <MX_ADC1_Init+0x4e>
		Error_Handler();
 80004f6:	f000 faf3 	bl	8000ae0 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 80004fa:	2300      	movs	r3, #0
 80004fc:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80004fe:	2301      	movs	r3, #1
 8000500:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000502:	2300      	movs	r3, #0
 8000504:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000506:	1d3b      	adds	r3, r7, #4
 8000508:	4619      	mov	r1, r3
 800050a:	481b      	ldr	r0, [pc, #108]	; (8000578 <MX_ADC1_Init+0xcc>)
 800050c:	f000 ff5c 	bl	80013c8 <HAL_ADC_ConfigChannel>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d001      	beq.n	800051a <MX_ADC1_Init+0x6e>
		Error_Handler();
 8000516:	f000 fae3 	bl	8000ae0 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 800051a:	2301      	movs	r3, #1
 800051c:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 800051e:	2302      	movs	r3, #2
 8000520:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000522:	1d3b      	adds	r3, r7, #4
 8000524:	4619      	mov	r1, r3
 8000526:	4814      	ldr	r0, [pc, #80]	; (8000578 <MX_ADC1_Init+0xcc>)
 8000528:	f000 ff4e 	bl	80013c8 <HAL_ADC_ConfigChannel>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <MX_ADC1_Init+0x8a>
		Error_Handler();
 8000532:	f000 fad5 	bl	8000ae0 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 8000536:	2302      	movs	r3, #2
 8000538:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_3;
 800053a:	2303      	movs	r3, #3
 800053c:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800053e:	1d3b      	adds	r3, r7, #4
 8000540:	4619      	mov	r1, r3
 8000542:	480d      	ldr	r0, [pc, #52]	; (8000578 <MX_ADC1_Init+0xcc>)
 8000544:	f000 ff40 	bl	80013c8 <HAL_ADC_ConfigChannel>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <MX_ADC1_Init+0xa6>
		Error_Handler();
 800054e:	f000 fac7 	bl	8000ae0 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 8000552:	2303      	movs	r3, #3
 8000554:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_4;
 8000556:	2304      	movs	r3, #4
 8000558:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800055a:	1d3b      	adds	r3, r7, #4
 800055c:	4619      	mov	r1, r3
 800055e:	4806      	ldr	r0, [pc, #24]	; (8000578 <MX_ADC1_Init+0xcc>)
 8000560:	f000 ff32 	bl	80013c8 <HAL_ADC_ConfigChannel>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <MX_ADC1_Init+0xc2>
		Error_Handler();
 800056a:	f000 fab9 	bl	8000ae0 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 800056e:	bf00      	nop
 8000570:	3710      	adds	r7, #16
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	20000030 	.word	0x20000030
 800057c:	40012400 	.word	0x40012400

08000580 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000580:	b580      	push	{r7, lr}
 8000582:	b086      	sub	sp, #24
 8000584:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000586:	f107 0308 	add.w	r3, r7, #8
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	605a      	str	r2, [r3, #4]
 8000590:	609a      	str	r2, [r3, #8]
 8000592:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000594:	463b      	mov	r3, r7
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 800059c:	4b1e      	ldr	r3, [pc, #120]	; (8000618 <MX_TIM1_Init+0x98>)
 800059e:	4a1f      	ldr	r2, [pc, #124]	; (800061c <MX_TIM1_Init+0x9c>)
 80005a0:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 80005a2:	4b1d      	ldr	r3, [pc, #116]	; (8000618 <MX_TIM1_Init+0x98>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005a8:	4b1b      	ldr	r3, [pc, #108]	; (8000618 <MX_TIM1_Init+0x98>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1892;
 80005ae:	4b1a      	ldr	r3, [pc, #104]	; (8000618 <MX_TIM1_Init+0x98>)
 80005b0:	f240 7264 	movw	r2, #1892	; 0x764
 80005b4:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005b6:	4b18      	ldr	r3, [pc, #96]	; (8000618 <MX_TIM1_Init+0x98>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80005bc:	4b16      	ldr	r3, [pc, #88]	; (8000618 <MX_TIM1_Init+0x98>)
 80005be:	2200      	movs	r2, #0
 80005c0:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80005c2:	4b15      	ldr	r3, [pc, #84]	; (8000618 <MX_TIM1_Init+0x98>)
 80005c4:	2280      	movs	r2, #128	; 0x80
 80005c6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80005c8:	4813      	ldr	r0, [pc, #76]	; (8000618 <MX_TIM1_Init+0x98>)
 80005ca:	f002 fa45 	bl	8002a58 <HAL_TIM_Base_Init>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <MX_TIM1_Init+0x58>
		Error_Handler();
 80005d4:	f000 fa84 	bl	8000ae0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005dc:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80005de:	f107 0308 	add.w	r3, r7, #8
 80005e2:	4619      	mov	r1, r3
 80005e4:	480c      	ldr	r0, [pc, #48]	; (8000618 <MX_TIM1_Init+0x98>)
 80005e6:	f002 fc3f 	bl	8002e68 <HAL_TIM_ConfigClockSource>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <MX_TIM1_Init+0x74>
		Error_Handler();
 80005f0:	f000 fa76 	bl	8000ae0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005f4:	2300      	movs	r3, #0
 80005f6:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005f8:	2300      	movs	r3, #0
 80005fa:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80005fc:	463b      	mov	r3, r7
 80005fe:	4619      	mov	r1, r3
 8000600:	4805      	ldr	r0, [pc, #20]	; (8000618 <MX_TIM1_Init+0x98>)
 8000602:	f002 ff99 	bl	8003538 <HAL_TIMEx_MasterConfigSynchronization>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <MX_TIM1_Init+0x90>
			!= HAL_OK) {
		Error_Handler();
 800060c:	f000 fa68 	bl	8000ae0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8000610:	bf00      	nop
 8000612:	3718      	adds	r7, #24
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	200000a4 	.word	0x200000a4
 800061c:	40012c00 	.word	0x40012c00

08000620 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8000620:	b580      	push	{r7, lr}
 8000622:	b08e      	sub	sp, #56	; 0x38
 8000624:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000626:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	605a      	str	r2, [r3, #4]
 8000630:	609a      	str	r2, [r3, #8]
 8000632:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000634:	f107 0320 	add.w	r3, r7, #32
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800063e:	1d3b      	adds	r3, r7, #4
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	611a      	str	r2, [r3, #16]
 800064c:	615a      	str	r2, [r3, #20]
 800064e:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000650:	4b32      	ldr	r3, [pc, #200]	; (800071c <MX_TIM3_Init+0xfc>)
 8000652:	4a33      	ldr	r2, [pc, #204]	; (8000720 <MX_TIM3_Init+0x100>)
 8000654:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8000656:	4b31      	ldr	r3, [pc, #196]	; (800071c <MX_TIM3_Init+0xfc>)
 8000658:	2200      	movs	r2, #0
 800065a:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800065c:	4b2f      	ldr	r3, [pc, #188]	; (800071c <MX_TIM3_Init+0xfc>)
 800065e:	2200      	movs	r2, #0
 8000660:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8000662:	4b2e      	ldr	r3, [pc, #184]	; (800071c <MX_TIM3_Init+0xfc>)
 8000664:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000668:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800066a:	4b2c      	ldr	r3, [pc, #176]	; (800071c <MX_TIM3_Init+0xfc>)
 800066c:	2200      	movs	r2, #0
 800066e:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000670:	4b2a      	ldr	r3, [pc, #168]	; (800071c <MX_TIM3_Init+0xfc>)
 8000672:	2200      	movs	r2, #0
 8000674:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8000676:	4829      	ldr	r0, [pc, #164]	; (800071c <MX_TIM3_Init+0xfc>)
 8000678:	f002 f9ee 	bl	8002a58 <HAL_TIM_Base_Init>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <MX_TIM3_Init+0x66>
		Error_Handler();
 8000682:	f000 fa2d 	bl	8000ae0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000686:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800068a:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 800068c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000690:	4619      	mov	r1, r3
 8000692:	4822      	ldr	r0, [pc, #136]	; (800071c <MX_TIM3_Init+0xfc>)
 8000694:	f002 fbe8 	bl	8002e68 <HAL_TIM_ConfigClockSource>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_TIM3_Init+0x82>
		Error_Handler();
 800069e:	f000 fa1f 	bl	8000ae0 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 80006a2:	481e      	ldr	r0, [pc, #120]	; (800071c <MX_TIM3_Init+0xfc>)
 80006a4:	f002 fa27 	bl	8002af6 <HAL_TIM_PWM_Init>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_TIM3_Init+0x92>
		Error_Handler();
 80006ae:	f000 fa17 	bl	8000ae0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006b2:	2300      	movs	r3, #0
 80006b4:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006b6:	2300      	movs	r3, #0
 80006b8:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80006ba:	f107 0320 	add.w	r3, r7, #32
 80006be:	4619      	mov	r1, r3
 80006c0:	4816      	ldr	r0, [pc, #88]	; (800071c <MX_TIM3_Init+0xfc>)
 80006c2:	f002 ff39 	bl	8003538 <HAL_TIMEx_MasterConfigSynchronization>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_TIM3_Init+0xb0>
			!= HAL_OK) {
		Error_Handler();
 80006cc:	f000 fa08 	bl	8000ae0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006d0:	2360      	movs	r3, #96	; 0x60
 80006d2:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80006d4:	2300      	movs	r3, #0
 80006d6:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006d8:	2300      	movs	r3, #0
 80006da:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 80006e0:	1d3b      	adds	r3, r7, #4
 80006e2:	2200      	movs	r2, #0
 80006e4:	4619      	mov	r1, r3
 80006e6:	480d      	ldr	r0, [pc, #52]	; (800071c <MX_TIM3_Init+0xfc>)
 80006e8:	f002 fb00 	bl	8002cec <HAL_TIM_PWM_ConfigChannel>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_TIM3_Init+0xd6>
			!= HAL_OK) {
		Error_Handler();
 80006f2:	f000 f9f5 	bl	8000ae0 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4)
 80006f6:	1d3b      	adds	r3, r7, #4
 80006f8:	220c      	movs	r2, #12
 80006fa:	4619      	mov	r1, r3
 80006fc:	4807      	ldr	r0, [pc, #28]	; (800071c <MX_TIM3_Init+0xfc>)
 80006fe:	f002 faf5 	bl	8002cec <HAL_TIM_PWM_ConfigChannel>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_TIM3_Init+0xec>
			!= HAL_OK) {
		Error_Handler();
 8000708:	f000 f9ea 	bl	8000ae0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 800070c:	4803      	ldr	r0, [pc, #12]	; (800071c <MX_TIM3_Init+0xfc>)
 800070e:	f000 fb27 	bl	8000d60 <HAL_TIM_MspPostInit>

}
 8000712:	bf00      	nop
 8000714:	3738      	adds	r7, #56	; 0x38
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	200000ec 	.word	0x200000ec
 8000720:	40000400 	.word	0x40000400

08000724 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800072a:	4b0c      	ldr	r3, [pc, #48]	; (800075c <MX_DMA_Init+0x38>)
 800072c:	695b      	ldr	r3, [r3, #20]
 800072e:	4a0b      	ldr	r2, [pc, #44]	; (800075c <MX_DMA_Init+0x38>)
 8000730:	f043 0301 	orr.w	r3, r3, #1
 8000734:	6153      	str	r3, [r2, #20]
 8000736:	4b09      	ldr	r3, [pc, #36]	; (800075c <MX_DMA_Init+0x38>)
 8000738:	695b      	ldr	r3, [r3, #20]
 800073a:	f003 0301 	and.w	r3, r3, #1
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000742:	2200      	movs	r2, #0
 8000744:	2100      	movs	r1, #0
 8000746:	200b      	movs	r0, #11
 8000748:	f001 f90f 	bl	800196a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800074c:	200b      	movs	r0, #11
 800074e:	f001 f928 	bl	80019a2 <HAL_NVIC_EnableIRQ>

}
 8000752:	bf00      	nop
 8000754:	3708      	adds	r7, #8
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	40021000 	.word	0x40021000

08000760 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000760:	b580      	push	{r7, lr}
 8000762:	b088      	sub	sp, #32
 8000764:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000766:	f107 0310 	add.w	r3, r7, #16
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000774:	4b45      	ldr	r3, [pc, #276]	; (800088c <MX_GPIO_Init+0x12c>)
 8000776:	699b      	ldr	r3, [r3, #24]
 8000778:	4a44      	ldr	r2, [pc, #272]	; (800088c <MX_GPIO_Init+0x12c>)
 800077a:	f043 0310 	orr.w	r3, r3, #16
 800077e:	6193      	str	r3, [r2, #24]
 8000780:	4b42      	ldr	r3, [pc, #264]	; (800088c <MX_GPIO_Init+0x12c>)
 8000782:	699b      	ldr	r3, [r3, #24]
 8000784:	f003 0310 	and.w	r3, r3, #16
 8000788:	60fb      	str	r3, [r7, #12]
 800078a:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800078c:	4b3f      	ldr	r3, [pc, #252]	; (800088c <MX_GPIO_Init+0x12c>)
 800078e:	699b      	ldr	r3, [r3, #24]
 8000790:	4a3e      	ldr	r2, [pc, #248]	; (800088c <MX_GPIO_Init+0x12c>)
 8000792:	f043 0320 	orr.w	r3, r3, #32
 8000796:	6193      	str	r3, [r2, #24]
 8000798:	4b3c      	ldr	r3, [pc, #240]	; (800088c <MX_GPIO_Init+0x12c>)
 800079a:	699b      	ldr	r3, [r3, #24]
 800079c:	f003 0320 	and.w	r3, r3, #32
 80007a0:	60bb      	str	r3, [r7, #8]
 80007a2:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80007a4:	4b39      	ldr	r3, [pc, #228]	; (800088c <MX_GPIO_Init+0x12c>)
 80007a6:	699b      	ldr	r3, [r3, #24]
 80007a8:	4a38      	ldr	r2, [pc, #224]	; (800088c <MX_GPIO_Init+0x12c>)
 80007aa:	f043 0304 	orr.w	r3, r3, #4
 80007ae:	6193      	str	r3, [r2, #24]
 80007b0:	4b36      	ldr	r3, [pc, #216]	; (800088c <MX_GPIO_Init+0x12c>)
 80007b2:	699b      	ldr	r3, [r3, #24]
 80007b4:	f003 0304 	and.w	r3, r3, #4
 80007b8:	607b      	str	r3, [r7, #4]
 80007ba:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80007bc:	4b33      	ldr	r3, [pc, #204]	; (800088c <MX_GPIO_Init+0x12c>)
 80007be:	699b      	ldr	r3, [r3, #24]
 80007c0:	4a32      	ldr	r2, [pc, #200]	; (800088c <MX_GPIO_Init+0x12c>)
 80007c2:	f043 0308 	orr.w	r3, r3, #8
 80007c6:	6193      	str	r3, [r2, #24]
 80007c8:	4b30      	ldr	r3, [pc, #192]	; (800088c <MX_GPIO_Init+0x12c>)
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	f003 0308 	and.w	r3, r3, #8
 80007d0:	603b      	str	r3, [r7, #0]
 80007d2:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80007d4:	2200      	movs	r2, #0
 80007d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007da:	482d      	ldr	r0, [pc, #180]	; (8000890 <MX_GPIO_Init+0x130>)
 80007dc:	f001 fc85 	bl	80020ea <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, EN1_Pin | INB1_Pin, GPIO_PIN_RESET);
 80007e0:	2200      	movs	r2, #0
 80007e2:	21a0      	movs	r1, #160	; 0xa0
 80007e4:	482b      	ldr	r0, [pc, #172]	; (8000894 <MX_GPIO_Init+0x134>)
 80007e6:	f001 fc80 	bl	80020ea <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 80007ea:	2200      	movs	r2, #0
 80007ec:	f640 71c1 	movw	r1, #4033	; 0xfc1
 80007f0:	4829      	ldr	r0, [pc, #164]	; (8000898 <MX_GPIO_Init+0x138>)
 80007f2:	f001 fc7a 	bl	80020ea <HAL_GPIO_WritePin>
	INA2_Pin | INB2_Pin | INA1_Pin | L1_Pin | L2_Pin | L3_Pin | L4_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007fa:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fc:	2301      	movs	r3, #1
 80007fe:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	2300      	movs	r3, #0
 8000802:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000804:	2302      	movs	r3, #2
 8000806:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000808:	f107 0310 	add.w	r3, r7, #16
 800080c:	4619      	mov	r1, r3
 800080e:	4820      	ldr	r0, [pc, #128]	; (8000890 <MX_GPIO_Init+0x130>)
 8000810:	f001 fad0 	bl	8001db4 <HAL_GPIO_Init>

	/*Configure GPIO pins : EN1_Pin INB1_Pin */
	GPIO_InitStruct.Pin = EN1_Pin | INB1_Pin;
 8000814:	23a0      	movs	r3, #160	; 0xa0
 8000816:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000818:	2301      	movs	r3, #1
 800081a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000820:	2302      	movs	r3, #2
 8000822:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000824:	f107 0310 	add.w	r3, r7, #16
 8000828:	4619      	mov	r1, r3
 800082a:	481a      	ldr	r0, [pc, #104]	; (8000894 <MX_GPIO_Init+0x134>)
 800082c:	f001 fac2 	bl	8001db4 <HAL_GPIO_Init>

	/*Configure GPIO pins : INA2_Pin INB2_Pin INA1_Pin L1_Pin
	 L2_Pin L3_Pin L4_Pin */
	GPIO_InitStruct.Pin = INA2_Pin | INB2_Pin | INA1_Pin | L1_Pin | L2_Pin
 8000830:	f640 73c1 	movw	r3, #4033	; 0xfc1
 8000834:	613b      	str	r3, [r7, #16]
			| L3_Pin | L4_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000836:	2301      	movs	r3, #1
 8000838:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083e:	2302      	movs	r3, #2
 8000840:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000842:	f107 0310 	add.w	r3, r7, #16
 8000846:	4619      	mov	r1, r3
 8000848:	4813      	ldr	r0, [pc, #76]	; (8000898 <MX_GPIO_Init+0x138>)
 800084a:	f001 fab3 	bl	8001db4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB12 PB13 PB14 PB15
	 B3_Pin B2_Pin B1_Pin */
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15
 800084e:	f24f 0338 	movw	r3, #61496	; 0xf038
 8000852:	613b      	str	r3, [r7, #16]
			| B3_Pin | B2_Pin | B1_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000854:	2300      	movs	r3, #0
 8000856:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800085c:	f107 0310 	add.w	r3, r7, #16
 8000860:	4619      	mov	r1, r3
 8000862:	480d      	ldr	r0, [pc, #52]	; (8000898 <MX_GPIO_Init+0x138>)
 8000864:	f001 faa6 	bl	8001db4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA8 PA9 S1_Pin S2_Pin
	 B4_Pin */
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | S1_Pin | S2_Pin | B4_Pin;
 8000868:	f44f 430f 	mov.w	r3, #36608	; 0x8f00
 800086c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800086e:	2300      	movs	r3, #0
 8000870:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000876:	f107 0310 	add.w	r3, r7, #16
 800087a:	4619      	mov	r1, r3
 800087c:	4805      	ldr	r0, [pc, #20]	; (8000894 <MX_GPIO_Init+0x134>)
 800087e:	f001 fa99 	bl	8001db4 <HAL_GPIO_Init>

}
 8000882:	bf00      	nop
 8000884:	3720      	adds	r7, #32
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40021000 	.word	0x40021000
 8000890:	40011000 	.word	0x40011000
 8000894:	40010800 	.word	0x40010800
 8000898:	40010c00 	.word	0x40010c00

0800089c <mainMachine>:

/* USER CODE BEGIN 4 */
void mainMachine() {
 800089c:	b5b0      	push	{r4, r5, r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af04      	add	r7, sp, #16
	switch (mainState) {
 80008a2:	4b57      	ldr	r3, [pc, #348]	; (8000a00 <mainMachine+0x164>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	2b02      	cmp	r3, #2
 80008a8:	d04f      	beq.n	800094a <mainMachine+0xae>
 80008aa:	2b02      	cmp	r3, #2
 80008ac:	f300 80a5 	bgt.w	80009fa <mainMachine+0x15e>
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d002      	beq.n	80008ba <mainMachine+0x1e>
 80008b4:	2b01      	cmp	r3, #1
 80008b6:	d05c      	beq.n	8000972 <mainMachine+0xd6>
			runMotor(ATRAS, Motors[DERECHA]);
			runMotor(ATRAS, Motors[IZQUIERDA]);
		}
		break;
	}
}
 80008b8:	e09f      	b.n	80009fa <mainMachine+0x15e>
		mainState = SECUENCIA_INICIO;
 80008ba:	4b51      	ldr	r3, [pc, #324]	; (8000a00 <mainMachine+0x164>)
 80008bc:	2202      	movs	r2, #2
 80008be:	601a      	str	r2, [r3, #0]
		showModeNumber(0);
 80008c0:	2000      	movs	r0, #0
 80008c2:	f7ff fc43 	bl	800014c <showModeNumber>
		HAL_Delay(5000);
 80008c6:	f241 3088 	movw	r0, #5000	; 0x1388
 80008ca:	f000 fb91 	bl	8000ff0 <HAL_Delay>
		showModeNumber(15);
 80008ce:	200f      	movs	r0, #15
 80008d0:	f7ff fc3c 	bl	800014c <showModeNumber>
		if (btns[1].flag == 1) {
 80008d4:	4b4b      	ldr	r3, [pc, #300]	; (8000a04 <mainMachine+0x168>)
 80008d6:	69db      	ldr	r3, [r3, #28]
 80008d8:	2b01      	cmp	r3, #1
 80008da:	d104      	bne.n	80008e6 <mainMachine+0x4a>
			count--;
 80008dc:	4b4a      	ldr	r3, [pc, #296]	; (8000a08 <mainMachine+0x16c>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	3b01      	subs	r3, #1
 80008e2:	4a49      	ldr	r2, [pc, #292]	; (8000a08 <mainMachine+0x16c>)
 80008e4:	6013      	str	r3, [r2, #0]
		if (btns[0].flag == 1) {
 80008e6:	4b47      	ldr	r3, [pc, #284]	; (8000a04 <mainMachine+0x168>)
 80008e8:	68db      	ldr	r3, [r3, #12]
 80008ea:	2b01      	cmp	r3, #1
 80008ec:	d104      	bne.n	80008f8 <mainMachine+0x5c>
			count++;
 80008ee:	4b46      	ldr	r3, [pc, #280]	; (8000a08 <mainMachine+0x16c>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	3301      	adds	r3, #1
 80008f4:	4a44      	ldr	r2, [pc, #272]	; (8000a08 <mainMachine+0x16c>)
 80008f6:	6013      	str	r3, [r2, #0]
		if (btns[3].flag == 1) {
 80008f8:	4b42      	ldr	r3, [pc, #264]	; (8000a04 <mainMachine+0x168>)
 80008fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008fc:	2b01      	cmp	r3, #1
 80008fe:	d102      	bne.n	8000906 <mainMachine+0x6a>
			count = 0;
 8000900:	4b41      	ldr	r3, [pc, #260]	; (8000a08 <mainMachine+0x16c>)
 8000902:	2200      	movs	r2, #0
 8000904:	601a      	str	r2, [r3, #0]
		if (count >= 16 || count <= 0) {
 8000906:	4b40      	ldr	r3, [pc, #256]	; (8000a08 <mainMachine+0x16c>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	2b0f      	cmp	r3, #15
 800090c:	dc03      	bgt.n	8000916 <mainMachine+0x7a>
 800090e:	4b3e      	ldr	r3, [pc, #248]	; (8000a08 <mainMachine+0x16c>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	2b00      	cmp	r3, #0
 8000914:	dc02      	bgt.n	800091c <mainMachine+0x80>
			count = 0;
 8000916:	4b3c      	ldr	r3, [pc, #240]	; (8000a08 <mainMachine+0x16c>)
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
		showModeNumber(count);
 800091c:	4b3a      	ldr	r3, [pc, #232]	; (8000a08 <mainMachine+0x16c>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4618      	mov	r0, r3
 8000922:	f7ff fc13 	bl	800014c <showModeNumber>
		if (btns[2].flag == 1) {
 8000926:	4b37      	ldr	r3, [pc, #220]	; (8000a04 <mainMachine+0x168>)
 8000928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800092a:	2b01      	cmp	r3, #1
 800092c:	d164      	bne.n	80009f8 <mainMachine+0x15c>
			mainState = SECUENCIA_INICIO;
 800092e:	4b34      	ldr	r3, [pc, #208]	; (8000a00 <mainMachine+0x164>)
 8000930:	2202      	movs	r2, #2
 8000932:	601a      	str	r2, [r3, #0]
			showModeNumber(0);
 8000934:	2000      	movs	r0, #0
 8000936:	f7ff fc09 	bl	800014c <showModeNumber>
			HAL_Delay(5000);
 800093a:	f241 3088 	movw	r0, #5000	; 0x1388
 800093e:	f000 fb57 	bl	8000ff0 <HAL_Delay>
			showModeNumber(15);
 8000942:	200f      	movs	r0, #15
 8000944:	f7ff fc02 	bl	800014c <showModeNumber>
		break;
 8000948:	e056      	b.n	80009f8 <mainMachine+0x15c>
		HAL_GPIO_WritePin(EN1, GPIO_PIN_SET);
 800094a:	2201      	movs	r2, #1
 800094c:	2120      	movs	r1, #32
 800094e:	482f      	ldr	r0, [pc, #188]	; (8000a0c <mainMachine+0x170>)
 8000950:	f001 fbcb 	bl	80020ea <HAL_GPIO_WritePin>
		TIM3->CCR1 = 60000;
 8000954:	4b2e      	ldr	r3, [pc, #184]	; (8000a10 <mainMachine+0x174>)
 8000956:	f64e 2260 	movw	r2, #60000	; 0xea60
 800095a:	635a      	str	r2, [r3, #52]	; 0x34
					TIM3->CCR4 = 60000;
 800095c:	4b2c      	ldr	r3, [pc, #176]	; (8000a10 <mainMachine+0x174>)
 800095e:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000962:	641a      	str	r2, [r3, #64]	; 0x40
		showModeNumber(1);
 8000964:	2001      	movs	r0, #1
 8000966:	f7ff fbf1 	bl	800014c <showModeNumber>
		mainState = MAIN;
 800096a:	4b25      	ldr	r3, [pc, #148]	; (8000a00 <mainMachine+0x164>)
 800096c:	2201      	movs	r2, #1
 800096e:	601a      	str	r2, [r3, #0]
		break;
 8000970:	e043      	b.n	80009fa <mainMachine+0x15e>
		inicio = 1;
 8000972:	4b28      	ldr	r3, [pc, #160]	; (8000a14 <mainMachine+0x178>)
 8000974:	2201      	movs	r2, #1
 8000976:	601a      	str	r2, [r3, #0]
		if (linePosition(Sensors) != 0) {
 8000978:	4827      	ldr	r0, [pc, #156]	; (8000a18 <mainMachine+0x17c>)
 800097a:	f000 fa75 	bl	8000e68 <linePosition>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d01c      	beq.n	80009be <mainMachine+0x122>
			showModeNumber(7);
 8000984:	2007      	movs	r0, #7
 8000986:	f7ff fbe1 	bl	800014c <showModeNumber>
			runMotor(ADELANTE, Motors[DERECHA]);
 800098a:	4b24      	ldr	r3, [pc, #144]	; (8000a1c <mainMachine+0x180>)
 800098c:	466c      	mov	r4, sp
 800098e:	f103 020c 	add.w	r2, r3, #12
 8000992:	ca07      	ldmia	r2, {r0, r1, r2}
 8000994:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000998:	cb0e      	ldmia	r3, {r1, r2, r3}
 800099a:	2000      	movs	r0, #0
 800099c:	f000 f8a5 	bl	8000aea <runMotor>
			runMotor(ADELANTE, Motors[IZQUIERDA]);
 80009a0:	4d1e      	ldr	r5, [pc, #120]	; (8000a1c <mainMachine+0x180>)
 80009a2:	466c      	mov	r4, sp
 80009a4:	f105 0324 	add.w	r3, r5, #36	; 0x24
 80009a8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80009ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80009b0:	f105 0318 	add.w	r3, r5, #24
 80009b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80009b6:	2000      	movs	r0, #0
 80009b8:	f000 f897 	bl	8000aea <runMotor>
		break;
 80009bc:	e01d      	b.n	80009fa <mainMachine+0x15e>
			showModeNumber(3);
 80009be:	2003      	movs	r0, #3
 80009c0:	f7ff fbc4 	bl	800014c <showModeNumber>
			runMotor(ATRAS, Motors[DERECHA]);
 80009c4:	4b15      	ldr	r3, [pc, #84]	; (8000a1c <mainMachine+0x180>)
 80009c6:	466c      	mov	r4, sp
 80009c8:	f103 020c 	add.w	r2, r3, #12
 80009cc:	ca07      	ldmia	r2, {r0, r1, r2}
 80009ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80009d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80009d4:	2001      	movs	r0, #1
 80009d6:	f000 f888 	bl	8000aea <runMotor>
			runMotor(ATRAS, Motors[IZQUIERDA]);
 80009da:	4d10      	ldr	r5, [pc, #64]	; (8000a1c <mainMachine+0x180>)
 80009dc:	466c      	mov	r4, sp
 80009de:	f105 0324 	add.w	r3, r5, #36	; 0x24
 80009e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80009e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80009ea:	f105 0318 	add.w	r3, r5, #24
 80009ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80009f0:	2001      	movs	r0, #1
 80009f2:	f000 f87a 	bl	8000aea <runMotor>
		break;
 80009f6:	e000      	b.n	80009fa <mainMachine+0x15e>
		break;
 80009f8:	bf00      	nop
}
 80009fa:	bf00      	nop
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bdb0      	pop	{r4, r5, r7, pc}
 8000a00:	200004dc 	.word	0x200004dc
 8000a04:	20000468 	.word	0x20000468
 8000a08:	200004d8 	.word	0x200004d8
 8000a0c:	40010800 	.word	0x40010800
 8000a10:	40000400 	.word	0x40000400
 8000a14:	20000144 	.word	0x20000144
 8000a18:	20000134 	.word	0x20000134
 8000a1c:	200004a8 	.word	0x200004a8

08000a20 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 10; i++) {
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	e029      	b.n	8000a82 <HAL_ADC_ConvCpltCallback+0x62>
		CNY70_1[i] = adc_buf[i * 4];
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	009b      	lsls	r3, r3, #2
 8000a32:	4a25      	ldr	r2, [pc, #148]	; (8000ac8 <HAL_ADC_ConvCpltCallback+0xa8>)
 8000a34:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a38:	4924      	ldr	r1, [pc, #144]	; (8000acc <HAL_ADC_ConvCpltCallback+0xac>)
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		CNY70_2[i] = adc_buf[i * 4 + 1];
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	009b      	lsls	r3, r3, #2
 8000a44:	3301      	adds	r3, #1
 8000a46:	4a20      	ldr	r2, [pc, #128]	; (8000ac8 <HAL_ADC_ConvCpltCallback+0xa8>)
 8000a48:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a4c:	4920      	ldr	r1, [pc, #128]	; (8000ad0 <HAL_ADC_ConvCpltCallback+0xb0>)
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		CNY70_3[i] = adc_buf[i * 4 + 2];
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	009b      	lsls	r3, r3, #2
 8000a58:	3302      	adds	r3, #2
 8000a5a:	4a1b      	ldr	r2, [pc, #108]	; (8000ac8 <HAL_ADC_ConvCpltCallback+0xa8>)
 8000a5c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a60:	491c      	ldr	r1, [pc, #112]	; (8000ad4 <HAL_ADC_ConvCpltCallback+0xb4>)
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		CNY70_4[i] = adc_buf[i * 4 + 3];
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	009b      	lsls	r3, r3, #2
 8000a6c:	3303      	adds	r3, #3
 8000a6e:	4a16      	ldr	r2, [pc, #88]	; (8000ac8 <HAL_ADC_ConvCpltCallback+0xa8>)
 8000a70:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a74:	4918      	ldr	r1, [pc, #96]	; (8000ad8 <HAL_ADC_ConvCpltCallback+0xb8>)
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < 10; i++) {
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	3301      	adds	r3, #1
 8000a80:	60fb      	str	r3, [r7, #12]
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	2b09      	cmp	r3, #9
 8000a86:	ddd2      	ble.n	8000a2e <HAL_ADC_ConvCpltCallback+0xe>
	}
	Sensors[0] = lecturaCNY70(10, CNY70_1);
 8000a88:	4910      	ldr	r1, [pc, #64]	; (8000acc <HAL_ADC_ConvCpltCallback+0xac>)
 8000a8a:	200a      	movs	r0, #10
 8000a8c:	f000 f871 	bl	8000b72 <lecturaCNY70>
 8000a90:	4603      	mov	r3, r0
 8000a92:	4a12      	ldr	r2, [pc, #72]	; (8000adc <HAL_ADC_ConvCpltCallback+0xbc>)
 8000a94:	6013      	str	r3, [r2, #0]
	Sensors[1] = lecturaCNY70(10, CNY70_2);
 8000a96:	490e      	ldr	r1, [pc, #56]	; (8000ad0 <HAL_ADC_ConvCpltCallback+0xb0>)
 8000a98:	200a      	movs	r0, #10
 8000a9a:	f000 f86a 	bl	8000b72 <lecturaCNY70>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	4a0e      	ldr	r2, [pc, #56]	; (8000adc <HAL_ADC_ConvCpltCallback+0xbc>)
 8000aa2:	6053      	str	r3, [r2, #4]
	Sensors[2] = lecturaCNY70(10, CNY70_3);
 8000aa4:	490b      	ldr	r1, [pc, #44]	; (8000ad4 <HAL_ADC_ConvCpltCallback+0xb4>)
 8000aa6:	200a      	movs	r0, #10
 8000aa8:	f000 f863 	bl	8000b72 <lecturaCNY70>
 8000aac:	4603      	mov	r3, r0
 8000aae:	4a0b      	ldr	r2, [pc, #44]	; (8000adc <HAL_ADC_ConvCpltCallback+0xbc>)
 8000ab0:	6093      	str	r3, [r2, #8]
	Sensors[3] = lecturaCNY70(10, CNY70_4);
 8000ab2:	4909      	ldr	r1, [pc, #36]	; (8000ad8 <HAL_ADC_ConvCpltCallback+0xb8>)
 8000ab4:	200a      	movs	r0, #10
 8000ab6:	f000 f85c 	bl	8000b72 <lecturaCNY70>
 8000aba:	4603      	mov	r3, r0
 8000abc:	4a07      	ldr	r2, [pc, #28]	; (8000adc <HAL_ADC_ConvCpltCallback+0xbc>)
 8000abe:	60d3      	str	r3, [r2, #12]
	//showModeNumber(8);

}
 8000ac0:	bf00      	nop
 8000ac2:	3710      	adds	r7, #16
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	20000148 	.word	0x20000148
 8000acc:	200002d8 	.word	0x200002d8
 8000ad0:	2000033c 	.word	0x2000033c
 8000ad4:	200003a0 	.word	0x200003a0
 8000ad8:	20000404 	.word	0x20000404
 8000adc:	20000134 	.word	0x20000134

08000ae0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae4:	b672      	cpsid	i
}
 8000ae6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000ae8:	e7fe      	b.n	8000ae8 <Error_Handler+0x8>

08000aea <runMotor>:
 *  Created on: Jul 24, 2023
 *      Author: jore
 */

#include "motors.h"
void runMotor(int dir, motor motor) {
 8000aea:	b084      	sub	sp, #16
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
 8000af4:	f107 0014 	add.w	r0, r7, #20
 8000af8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	switch (dir) {
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	2b02      	cmp	r3, #2
 8000b00:	d023      	beq.n	8000b4a <runMotor+0x60>
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	2b02      	cmp	r3, #2
 8000b06:	dc2d      	bgt.n	8000b64 <runMotor+0x7a>
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d003      	beq.n	8000b16 <runMotor+0x2c>
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d00d      	beq.n	8000b30 <runMotor+0x46>
	case OFF:
		HAL_GPIO_WritePin(motor.IN1.Port,motor.IN1.pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(motor.IN2.Port,motor.IN2.pin, GPIO_PIN_RESET);
		break;
	}
}
 8000b14:	e026      	b.n	8000b64 <runMotor+0x7a>
		HAL_GPIO_WritePin(motor.IN1.Port,motor.IN1.pin, GPIO_PIN_SET);
 8000b16:	69fb      	ldr	r3, [r7, #28]
 8000b18:	8c39      	ldrh	r1, [r7, #32]
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f001 fae4 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor.IN2.Port,motor.IN2.pin, GPIO_PIN_RESET);
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	8b39      	ldrh	r1, [r7, #24]
 8000b26:	2200      	movs	r2, #0
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f001 fade 	bl	80020ea <HAL_GPIO_WritePin>
		break;
 8000b2e:	e019      	b.n	8000b64 <runMotor+0x7a>
		HAL_GPIO_WritePin(motor.IN1.Port,motor.IN1.pin, GPIO_PIN_RESET);
 8000b30:	69fb      	ldr	r3, [r7, #28]
 8000b32:	8c39      	ldrh	r1, [r7, #32]
 8000b34:	2200      	movs	r2, #0
 8000b36:	4618      	mov	r0, r3
 8000b38:	f001 fad7 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor.IN2.Port,motor.IN2.pin, GPIO_PIN_SET);
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	8b39      	ldrh	r1, [r7, #24]
 8000b40:	2201      	movs	r2, #1
 8000b42:	4618      	mov	r0, r3
 8000b44:	f001 fad1 	bl	80020ea <HAL_GPIO_WritePin>
		break;
 8000b48:	e00c      	b.n	8000b64 <runMotor+0x7a>
		HAL_GPIO_WritePin(motor.IN1.Port,motor.IN1.pin, GPIO_PIN_RESET);
 8000b4a:	69fb      	ldr	r3, [r7, #28]
 8000b4c:	8c39      	ldrh	r1, [r7, #32]
 8000b4e:	2200      	movs	r2, #0
 8000b50:	4618      	mov	r0, r3
 8000b52:	f001 faca 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor.IN2.Port,motor.IN2.pin, GPIO_PIN_RESET);
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	8b39      	ldrh	r1, [r7, #24]
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f001 fac4 	bl	80020ea <HAL_GPIO_WritePin>
		break;
 8000b62:	bf00      	nop
}
 8000b64:	bf00      	nop
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b6e:	b004      	add	sp, #16
 8000b70:	4770      	bx	lr

08000b72 <lecturaCNY70>:
		S[i] = readSensor(sensors[i]);
	}
	return S;
}

int lecturaCNY70(int n, uint32_t values[10]) {
 8000b72:	b480      	push	{r7}
 8000b74:	b087      	sub	sp, #28
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	6078      	str	r0, [r7, #4]
 8000b7a:	6039      	str	r1, [r7, #0]
	long suma = 0;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < n; i++) {
 8000b80:	2300      	movs	r3, #0
 8000b82:	613b      	str	r3, [r7, #16]
 8000b84:	e00a      	b.n	8000b9c <lecturaCNY70+0x2a>
		suma = suma + values[i];
 8000b86:	693b      	ldr	r3, [r7, #16]
 8000b88:	009b      	lsls	r3, r3, #2
 8000b8a:	683a      	ldr	r2, [r7, #0]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	4413      	add	r3, r2
 8000b94:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < n; i++) {
 8000b96:	693b      	ldr	r3, [r7, #16]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	613b      	str	r3, [r7, #16]
 8000b9c:	693a      	ldr	r2, [r7, #16]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	dbf0      	blt.n	8000b86 <lecturaCNY70+0x14>
	}
	int adc = (suma / n);
 8000ba4:	697a      	ldr	r2, [r7, #20]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	fb92 f3f3 	sdiv	r3, r2, r3
 8000bac:	60fb      	str	r3, [r7, #12]
	if (adc < 1000) {
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000bb4:	da01      	bge.n	8000bba <lecturaCNY70+0x48>
		return BLANCO;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	e000      	b.n	8000bbc <lecturaCNY70+0x4a>
	} else {
		return NEGRO;
 8000bba:	2301      	movs	r3, #1
	}
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	371c      	adds	r7, #28
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bc80      	pop	{r7}
 8000bc4:	4770      	bx	lr
	...

08000bc8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b085      	sub	sp, #20
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bce:	4b15      	ldr	r3, [pc, #84]	; (8000c24 <HAL_MspInit+0x5c>)
 8000bd0:	699b      	ldr	r3, [r3, #24]
 8000bd2:	4a14      	ldr	r2, [pc, #80]	; (8000c24 <HAL_MspInit+0x5c>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	6193      	str	r3, [r2, #24]
 8000bda:	4b12      	ldr	r3, [pc, #72]	; (8000c24 <HAL_MspInit+0x5c>)
 8000bdc:	699b      	ldr	r3, [r3, #24]
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	60bb      	str	r3, [r7, #8]
 8000be4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000be6:	4b0f      	ldr	r3, [pc, #60]	; (8000c24 <HAL_MspInit+0x5c>)
 8000be8:	69db      	ldr	r3, [r3, #28]
 8000bea:	4a0e      	ldr	r2, [pc, #56]	; (8000c24 <HAL_MspInit+0x5c>)
 8000bec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bf0:	61d3      	str	r3, [r2, #28]
 8000bf2:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <HAL_MspInit+0x5c>)
 8000bf4:	69db      	ldr	r3, [r3, #28]
 8000bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bfa:	607b      	str	r3, [r7, #4]
 8000bfc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000bfe:	4b0a      	ldr	r3, [pc, #40]	; (8000c28 <HAL_MspInit+0x60>)
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	4a04      	ldr	r2, [pc, #16]	; (8000c28 <HAL_MspInit+0x60>)
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	3714      	adds	r7, #20
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bc80      	pop	{r7}
 8000c22:	4770      	bx	lr
 8000c24:	40021000 	.word	0x40021000
 8000c28:	40010000 	.word	0x40010000

08000c2c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b088      	sub	sp, #32
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c34:	f107 0310 	add.w	r3, r7, #16
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
 8000c40:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a28      	ldr	r2, [pc, #160]	; (8000ce8 <HAL_ADC_MspInit+0xbc>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d149      	bne.n	8000ce0 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c4c:	4b27      	ldr	r3, [pc, #156]	; (8000cec <HAL_ADC_MspInit+0xc0>)
 8000c4e:	699b      	ldr	r3, [r3, #24]
 8000c50:	4a26      	ldr	r2, [pc, #152]	; (8000cec <HAL_ADC_MspInit+0xc0>)
 8000c52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c56:	6193      	str	r3, [r2, #24]
 8000c58:	4b24      	ldr	r3, [pc, #144]	; (8000cec <HAL_ADC_MspInit+0xc0>)
 8000c5a:	699b      	ldr	r3, [r3, #24]
 8000c5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c60:	60fb      	str	r3, [r7, #12]
 8000c62:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c64:	4b21      	ldr	r3, [pc, #132]	; (8000cec <HAL_ADC_MspInit+0xc0>)
 8000c66:	699b      	ldr	r3, [r3, #24]
 8000c68:	4a20      	ldr	r2, [pc, #128]	; (8000cec <HAL_ADC_MspInit+0xc0>)
 8000c6a:	f043 0304 	orr.w	r3, r3, #4
 8000c6e:	6193      	str	r3, [r2, #24]
 8000c70:	4b1e      	ldr	r3, [pc, #120]	; (8000cec <HAL_ADC_MspInit+0xc0>)
 8000c72:	699b      	ldr	r3, [r3, #24]
 8000c74:	f003 0304 	and.w	r3, r3, #4
 8000c78:	60bb      	str	r3, [r7, #8]
 8000c7a:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = P1_Pin|P2_Pin|P3_Pin|P4_Pin
 8000c7c:	231f      	movs	r3, #31
 8000c7e:	613b      	str	r3, [r7, #16]
                          |P5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c80:	2303      	movs	r3, #3
 8000c82:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c84:	f107 0310 	add.w	r3, r7, #16
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4819      	ldr	r0, [pc, #100]	; (8000cf0 <HAL_ADC_MspInit+0xc4>)
 8000c8c:	f001 f892 	bl	8001db4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000c90:	4b18      	ldr	r3, [pc, #96]	; (8000cf4 <HAL_ADC_MspInit+0xc8>)
 8000c92:	4a19      	ldr	r2, [pc, #100]	; (8000cf8 <HAL_ADC_MspInit+0xcc>)
 8000c94:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c96:	4b17      	ldr	r3, [pc, #92]	; (8000cf4 <HAL_ADC_MspInit+0xc8>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c9c:	4b15      	ldr	r3, [pc, #84]	; (8000cf4 <HAL_ADC_MspInit+0xc8>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ca2:	4b14      	ldr	r3, [pc, #80]	; (8000cf4 <HAL_ADC_MspInit+0xc8>)
 8000ca4:	2280      	movs	r2, #128	; 0x80
 8000ca6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000ca8:	4b12      	ldr	r3, [pc, #72]	; (8000cf4 <HAL_ADC_MspInit+0xc8>)
 8000caa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cae:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000cb0:	4b10      	ldr	r3, [pc, #64]	; (8000cf4 <HAL_ADC_MspInit+0xc8>)
 8000cb2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000cb6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000cb8:	4b0e      	ldr	r3, [pc, #56]	; (8000cf4 <HAL_ADC_MspInit+0xc8>)
 8000cba:	2220      	movs	r2, #32
 8000cbc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000cbe:	4b0d      	ldr	r3, [pc, #52]	; (8000cf4 <HAL_ADC_MspInit+0xc8>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000cc4:	480b      	ldr	r0, [pc, #44]	; (8000cf4 <HAL_ADC_MspInit+0xc8>)
 8000cc6:	f000 fe87 	bl	80019d8 <HAL_DMA_Init>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000cd0:	f7ff ff06 	bl	8000ae0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	4a07      	ldr	r2, [pc, #28]	; (8000cf4 <HAL_ADC_MspInit+0xc8>)
 8000cd8:	621a      	str	r2, [r3, #32]
 8000cda:	4a06      	ldr	r2, [pc, #24]	; (8000cf4 <HAL_ADC_MspInit+0xc8>)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ce0:	bf00      	nop
 8000ce2:	3720      	adds	r7, #32
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	40012400 	.word	0x40012400
 8000cec:	40021000 	.word	0x40021000
 8000cf0:	40010800 	.word	0x40010800
 8000cf4:	20000060 	.word	0x20000060
 8000cf8:	40020008 	.word	0x40020008

08000cfc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a12      	ldr	r2, [pc, #72]	; (8000d54 <HAL_TIM_Base_MspInit+0x58>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d10c      	bne.n	8000d28 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d0e:	4b12      	ldr	r3, [pc, #72]	; (8000d58 <HAL_TIM_Base_MspInit+0x5c>)
 8000d10:	699b      	ldr	r3, [r3, #24]
 8000d12:	4a11      	ldr	r2, [pc, #68]	; (8000d58 <HAL_TIM_Base_MspInit+0x5c>)
 8000d14:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d18:	6193      	str	r3, [r2, #24]
 8000d1a:	4b0f      	ldr	r3, [pc, #60]	; (8000d58 <HAL_TIM_Base_MspInit+0x5c>)
 8000d1c:	699b      	ldr	r3, [r3, #24]
 8000d1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000d26:	e010      	b.n	8000d4a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a0b      	ldr	r2, [pc, #44]	; (8000d5c <HAL_TIM_Base_MspInit+0x60>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d10b      	bne.n	8000d4a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d32:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <HAL_TIM_Base_MspInit+0x5c>)
 8000d34:	69db      	ldr	r3, [r3, #28]
 8000d36:	4a08      	ldr	r2, [pc, #32]	; (8000d58 <HAL_TIM_Base_MspInit+0x5c>)
 8000d38:	f043 0302 	orr.w	r3, r3, #2
 8000d3c:	61d3      	str	r3, [r2, #28]
 8000d3e:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <HAL_TIM_Base_MspInit+0x5c>)
 8000d40:	69db      	ldr	r3, [r3, #28]
 8000d42:	f003 0302 	and.w	r3, r3, #2
 8000d46:	60bb      	str	r3, [r7, #8]
 8000d48:	68bb      	ldr	r3, [r7, #8]
}
 8000d4a:	bf00      	nop
 8000d4c:	3714      	adds	r7, #20
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bc80      	pop	{r7}
 8000d52:	4770      	bx	lr
 8000d54:	40012c00 	.word	0x40012c00
 8000d58:	40021000 	.word	0x40021000
 8000d5c:	40000400 	.word	0x40000400

08000d60 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b088      	sub	sp, #32
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d68:	f107 0310 	add.w	r3, r7, #16
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a1b      	ldr	r2, [pc, #108]	; (8000de8 <HAL_TIM_MspPostInit+0x88>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d12f      	bne.n	8000de0 <HAL_TIM_MspPostInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d80:	4b1a      	ldr	r3, [pc, #104]	; (8000dec <HAL_TIM_MspPostInit+0x8c>)
 8000d82:	699b      	ldr	r3, [r3, #24]
 8000d84:	4a19      	ldr	r2, [pc, #100]	; (8000dec <HAL_TIM_MspPostInit+0x8c>)
 8000d86:	f043 0304 	orr.w	r3, r3, #4
 8000d8a:	6193      	str	r3, [r2, #24]
 8000d8c:	4b17      	ldr	r3, [pc, #92]	; (8000dec <HAL_TIM_MspPostInit+0x8c>)
 8000d8e:	699b      	ldr	r3, [r3, #24]
 8000d90:	f003 0304 	and.w	r3, r3, #4
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d98:	4b14      	ldr	r3, [pc, #80]	; (8000dec <HAL_TIM_MspPostInit+0x8c>)
 8000d9a:	699b      	ldr	r3, [r3, #24]
 8000d9c:	4a13      	ldr	r2, [pc, #76]	; (8000dec <HAL_TIM_MspPostInit+0x8c>)
 8000d9e:	f043 0308 	orr.w	r3, r3, #8
 8000da2:	6193      	str	r3, [r2, #24]
 8000da4:	4b11      	ldr	r3, [pc, #68]	; (8000dec <HAL_TIM_MspPostInit+0x8c>)
 8000da6:	699b      	ldr	r3, [r3, #24]
 8000da8:	f003 0308 	and.w	r3, r3, #8
 8000dac:	60bb      	str	r3, [r7, #8]
 8000dae:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000db0:	2340      	movs	r3, #64	; 0x40
 8000db2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db4:	2302      	movs	r3, #2
 8000db6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db8:	2302      	movs	r3, #2
 8000dba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dbc:	f107 0310 	add.w	r3, r7, #16
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	480b      	ldr	r0, [pc, #44]	; (8000df0 <HAL_TIM_MspPostInit+0x90>)
 8000dc4:	f000 fff6 	bl	8001db4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd4:	f107 0310 	add.w	r3, r7, #16
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4806      	ldr	r0, [pc, #24]	; (8000df4 <HAL_TIM_MspPostInit+0x94>)
 8000ddc:	f000 ffea 	bl	8001db4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000de0:	bf00      	nop
 8000de2:	3720      	adds	r7, #32
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	40000400 	.word	0x40000400
 8000dec:	40021000 	.word	0x40021000
 8000df0:	40010800 	.word	0x40010800
 8000df4:	40010c00 	.word	0x40010c00

08000df8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8000dfc:	e7fe      	b.n	8000dfc <NMI_Handler+0x4>

08000dfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e02:	e7fe      	b.n	8000e02 <HardFault_Handler+0x4>

08000e04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e08:	e7fe      	b.n	8000e08 <MemManage_Handler+0x4>

08000e0a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e0e:	e7fe      	b.n	8000e0e <BusFault_Handler+0x4>

08000e10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e14:	e7fe      	b.n	8000e14 <UsageFault_Handler+0x4>

08000e16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bc80      	pop	{r7}
 8000e20:	4770      	bx	lr

08000e22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bc80      	pop	{r7}
 8000e2c:	4770      	bx	lr

08000e2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bc80      	pop	{r7}
 8000e38:	4770      	bx	lr

08000e3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	af00      	add	r7, sp, #0
			lineTracking(posicionLinea);
		}
	}*/

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e3e:	f000 f8bb 	bl	8000fb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
	...

08000e48 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000e4c:	4802      	ldr	r0, [pc, #8]	; (8000e58 <DMA1_Channel1_IRQHandler+0x10>)
 8000e4e:	f000 fe7d 	bl	8001b4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	20000060 	.word	0x20000060

08000e5c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bc80      	pop	{r7}
 8000e66:	4770      	bx	lr

08000e68 <linePosition>:
					/ (mediciones[0] + mediciones[1] + mediciones[2]
							+ mediciones[3] + mediciones[4])) :
			-1;
}

int linePosition(int *mediciones) {
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
	return (mediciones[0] + mediciones[1] + mediciones[2] + mediciones[3])
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	3304      	adds	r3, #4
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	441a      	add	r2, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	3308      	adds	r3, #8
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	441a      	add	r2, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	330c      	adds	r3, #12
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4413      	add	r3, r2
			!= 0 ?
			((-1000 * mediciones[0] - 2000 * mediciones[1]
					+ 2000 * mediciones[2] + 1000 * mediciones[3])) :
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d01c      	beq.n	8000eca <linePosition+0x62>
			((-1000 * mediciones[0] - 2000 * mediciones[1]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a10      	ldr	r2, [pc, #64]	; (8000ed8 <linePosition+0x70>)
 8000e96:	fb03 f202 	mul.w	r2, r3, r2
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	3304      	adds	r3, #4
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	490e      	ldr	r1, [pc, #56]	; (8000edc <linePosition+0x74>)
 8000ea2:	fb01 f303 	mul.w	r3, r1, r3
 8000ea6:	441a      	add	r2, r3
					+ 2000 * mediciones[2] + 1000 * mediciones[3])) :
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	3308      	adds	r3, #8
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000eb2:	fb01 f303 	mul.w	r3, r1, r3
 8000eb6:	441a      	add	r2, r3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	330c      	adds	r3, #12
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ec2:	fb01 f303 	mul.w	r3, r1, r3
 8000ec6:	4413      	add	r3, r2
 8000ec8:	e001      	b.n	8000ece <linePosition+0x66>
 8000eca:	f04f 33ff 	mov.w	r3, #4294967295
			-1;
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bc80      	pop	{r7}
 8000ed6:	4770      	bx	lr
 8000ed8:	fffffc18 	.word	0xfffffc18
 8000edc:	fffff830 	.word	0xfffff830

08000ee0 <Reset_Handler>:
 8000ee0:	480c      	ldr	r0, [pc, #48]	; (8000f14 <LoopFillZerobss+0x12>)
 8000ee2:	490d      	ldr	r1, [pc, #52]	; (8000f18 <LoopFillZerobss+0x16>)
 8000ee4:	4a0d      	ldr	r2, [pc, #52]	; (8000f1c <LoopFillZerobss+0x1a>)
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	e002      	b.n	8000ef0 <LoopCopyDataInit>

08000eea <CopyDataInit>:
 8000eea:	58d4      	ldr	r4, [r2, r3]
 8000eec:	50c4      	str	r4, [r0, r3]
 8000eee:	3304      	adds	r3, #4

08000ef0 <LoopCopyDataInit>:
 8000ef0:	18c4      	adds	r4, r0, r3
 8000ef2:	428c      	cmp	r4, r1
 8000ef4:	d3f9      	bcc.n	8000eea <CopyDataInit>
 8000ef6:	4a0a      	ldr	r2, [pc, #40]	; (8000f20 <LoopFillZerobss+0x1e>)
 8000ef8:	4c0a      	ldr	r4, [pc, #40]	; (8000f24 <LoopFillZerobss+0x22>)
 8000efa:	2300      	movs	r3, #0
 8000efc:	e001      	b.n	8000f02 <LoopFillZerobss>

08000efe <FillZerobss>:
 8000efe:	6013      	str	r3, [r2, #0]
 8000f00:	3204      	adds	r2, #4

08000f02 <LoopFillZerobss>:
 8000f02:	42a2      	cmp	r2, r4
 8000f04:	d3fb      	bcc.n	8000efe <FillZerobss>
 8000f06:	f7ff ffa9 	bl	8000e5c <SystemInit>
 8000f0a:	f002 fb73 	bl	80035f4 <__libc_init_array>
 8000f0e:	f7ff f9e1 	bl	80002d4 <main>
 8000f12:	4770      	bx	lr
 8000f14:	20000000 	.word	0x20000000
 8000f18:	2000000c 	.word	0x2000000c
 8000f1c:	0800368c 	.word	0x0800368c
 8000f20:	2000000c 	.word	0x2000000c
 8000f24:	200004e4 	.word	0x200004e4

08000f28 <ADC1_2_IRQHandler>:
 8000f28:	e7fe      	b.n	8000f28 <ADC1_2_IRQHandler>
	...

08000f2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f30:	4b08      	ldr	r3, [pc, #32]	; (8000f54 <HAL_Init+0x28>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a07      	ldr	r2, [pc, #28]	; (8000f54 <HAL_Init+0x28>)
 8000f36:	f043 0310 	orr.w	r3, r3, #16
 8000f3a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f3c:	2003      	movs	r0, #3
 8000f3e:	f000 fd09 	bl	8001954 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f42:	200f      	movs	r0, #15
 8000f44:	f000 f808 	bl	8000f58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f48:	f7ff fe3e 	bl	8000bc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f4c:	2300      	movs	r3, #0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40022000 	.word	0x40022000

08000f58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f60:	4b12      	ldr	r3, [pc, #72]	; (8000fac <HAL_InitTick+0x54>)
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	4b12      	ldr	r3, [pc, #72]	; (8000fb0 <HAL_InitTick+0x58>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	4619      	mov	r1, r3
 8000f6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f76:	4618      	mov	r0, r3
 8000f78:	f000 fd21 	bl	80019be <HAL_SYSTICK_Config>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	e00e      	b.n	8000fa4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2b0f      	cmp	r3, #15
 8000f8a:	d80a      	bhi.n	8000fa2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	6879      	ldr	r1, [r7, #4]
 8000f90:	f04f 30ff 	mov.w	r0, #4294967295
 8000f94:	f000 fce9 	bl	800196a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f98:	4a06      	ldr	r2, [pc, #24]	; (8000fb4 <HAL_InitTick+0x5c>)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	e000      	b.n	8000fa4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	20000000 	.word	0x20000000
 8000fb0:	20000008 	.word	0x20000008
 8000fb4:	20000004 	.word	0x20000004

08000fb8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fbc:	4b05      	ldr	r3, [pc, #20]	; (8000fd4 <HAL_IncTick+0x1c>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	4b05      	ldr	r3, [pc, #20]	; (8000fd8 <HAL_IncTick+0x20>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	4a03      	ldr	r2, [pc, #12]	; (8000fd8 <HAL_IncTick+0x20>)
 8000fca:	6013      	str	r3, [r2, #0]
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bc80      	pop	{r7}
 8000fd2:	4770      	bx	lr
 8000fd4:	20000008 	.word	0x20000008
 8000fd8:	200004e0 	.word	0x200004e0

08000fdc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe0:	4b02      	ldr	r3, [pc, #8]	; (8000fec <HAL_GetTick+0x10>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bc80      	pop	{r7}
 8000fea:	4770      	bx	lr
 8000fec:	200004e0 	.word	0x200004e0

08000ff0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ff8:	f7ff fff0 	bl	8000fdc <HAL_GetTick>
 8000ffc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001008:	d005      	beq.n	8001016 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800100a:	4b0a      	ldr	r3, [pc, #40]	; (8001034 <HAL_Delay+0x44>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	461a      	mov	r2, r3
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	4413      	add	r3, r2
 8001014:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001016:	bf00      	nop
 8001018:	f7ff ffe0 	bl	8000fdc <HAL_GetTick>
 800101c:	4602      	mov	r2, r0
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	68fa      	ldr	r2, [r7, #12]
 8001024:	429a      	cmp	r2, r3
 8001026:	d8f7      	bhi.n	8001018 <HAL_Delay+0x28>
  {
  }
}
 8001028:	bf00      	nop
 800102a:	bf00      	nop
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20000008 	.word	0x20000008

08001038 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001040:	2300      	movs	r3, #0
 8001042:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001044:	2300      	movs	r3, #0
 8001046:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001048:	2300      	movs	r3, #0
 800104a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800104c:	2300      	movs	r3, #0
 800104e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d101      	bne.n	800105a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e0be      	b.n	80011d8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001064:	2b00      	cmp	r3, #0
 8001066:	d109      	bne.n	800107c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2200      	movs	r2, #0
 800106c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2200      	movs	r2, #0
 8001072:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f7ff fdd8 	bl	8000c2c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f000 faf5 	bl	800166c <ADC_ConversionStop_Disable>
 8001082:	4603      	mov	r3, r0
 8001084:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800108a:	f003 0310 	and.w	r3, r3, #16
 800108e:	2b00      	cmp	r3, #0
 8001090:	f040 8099 	bne.w	80011c6 <HAL_ADC_Init+0x18e>
 8001094:	7dfb      	ldrb	r3, [r7, #23]
 8001096:	2b00      	cmp	r3, #0
 8001098:	f040 8095 	bne.w	80011c6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010a0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010a4:	f023 0302 	bic.w	r3, r3, #2
 80010a8:	f043 0202 	orr.w	r2, r3, #2
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80010b8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	7b1b      	ldrb	r3, [r3, #12]
 80010be:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80010c0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80010c2:	68ba      	ldr	r2, [r7, #8]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010d0:	d003      	beq.n	80010da <HAL_ADC_Init+0xa2>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d102      	bne.n	80010e0 <HAL_ADC_Init+0xa8>
 80010da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010de:	e000      	b.n	80010e2 <HAL_ADC_Init+0xaa>
 80010e0:	2300      	movs	r3, #0
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	7d1b      	ldrb	r3, [r3, #20]
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d119      	bne.n	8001124 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	7b1b      	ldrb	r3, [r3, #12]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d109      	bne.n	800110c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	3b01      	subs	r3, #1
 80010fe:	035a      	lsls	r2, r3, #13
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	4313      	orrs	r3, r2
 8001104:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001108:	613b      	str	r3, [r7, #16]
 800110a:	e00b      	b.n	8001124 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001110:	f043 0220 	orr.w	r2, r3, #32
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800111c:	f043 0201 	orr.w	r2, r3, #1
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	430a      	orrs	r2, r1
 8001136:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	689a      	ldr	r2, [r3, #8]
 800113e:	4b28      	ldr	r3, [pc, #160]	; (80011e0 <HAL_ADC_Init+0x1a8>)
 8001140:	4013      	ands	r3, r2
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	6812      	ldr	r2, [r2, #0]
 8001146:	68b9      	ldr	r1, [r7, #8]
 8001148:	430b      	orrs	r3, r1
 800114a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001154:	d003      	beq.n	800115e <HAL_ADC_Init+0x126>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d104      	bne.n	8001168 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	691b      	ldr	r3, [r3, #16]
 8001162:	3b01      	subs	r3, #1
 8001164:	051b      	lsls	r3, r3, #20
 8001166:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800116e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	68fa      	ldr	r2, [r7, #12]
 8001178:	430a      	orrs	r2, r1
 800117a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	689a      	ldr	r2, [r3, #8]
 8001182:	4b18      	ldr	r3, [pc, #96]	; (80011e4 <HAL_ADC_Init+0x1ac>)
 8001184:	4013      	ands	r3, r2
 8001186:	68ba      	ldr	r2, [r7, #8]
 8001188:	429a      	cmp	r2, r3
 800118a:	d10b      	bne.n	80011a4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2200      	movs	r2, #0
 8001190:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001196:	f023 0303 	bic.w	r3, r3, #3
 800119a:	f043 0201 	orr.w	r2, r3, #1
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80011a2:	e018      	b.n	80011d6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011a8:	f023 0312 	bic.w	r3, r3, #18
 80011ac:	f043 0210 	orr.w	r2, r3, #16
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011b8:	f043 0201 	orr.w	r2, r3, #1
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80011c0:	2301      	movs	r3, #1
 80011c2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80011c4:	e007      	b.n	80011d6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ca:	f043 0210 	orr.w	r2, r3, #16
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80011d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3718      	adds	r7, #24
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	ffe1f7fd 	.word	0xffe1f7fd
 80011e4:	ff1f0efe 	.word	0xff1f0efe

080011e8 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011f4:	2300      	movs	r3, #0
 80011f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a64      	ldr	r2, [pc, #400]	; (8001390 <HAL_ADC_Start_DMA+0x1a8>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d004      	beq.n	800120c <HAL_ADC_Start_DMA+0x24>
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a63      	ldr	r2, [pc, #396]	; (8001394 <HAL_ADC_Start_DMA+0x1ac>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d106      	bne.n	800121a <HAL_ADC_Start_DMA+0x32>
 800120c:	4b60      	ldr	r3, [pc, #384]	; (8001390 <HAL_ADC_Start_DMA+0x1a8>)
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001214:	2b00      	cmp	r3, #0
 8001216:	f040 80b3 	bne.w	8001380 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001220:	2b01      	cmp	r3, #1
 8001222:	d101      	bne.n	8001228 <HAL_ADC_Start_DMA+0x40>
 8001224:	2302      	movs	r3, #2
 8001226:	e0ae      	b.n	8001386 <HAL_ADC_Start_DMA+0x19e>
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	2201      	movs	r2, #1
 800122c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001230:	68f8      	ldr	r0, [r7, #12]
 8001232:	f000 f9c1 	bl	80015b8 <ADC_Enable>
 8001236:	4603      	mov	r3, r0
 8001238:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800123a:	7dfb      	ldrb	r3, [r7, #23]
 800123c:	2b00      	cmp	r3, #0
 800123e:	f040 809a 	bne.w	8001376 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001246:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800124a:	f023 0301 	bic.w	r3, r3, #1
 800124e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a4e      	ldr	r2, [pc, #312]	; (8001394 <HAL_ADC_Start_DMA+0x1ac>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d105      	bne.n	800126c <HAL_ADC_Start_DMA+0x84>
 8001260:	4b4b      	ldr	r3, [pc, #300]	; (8001390 <HAL_ADC_Start_DMA+0x1a8>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001268:	2b00      	cmp	r3, #0
 800126a:	d115      	bne.n	8001298 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001270:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001282:	2b00      	cmp	r3, #0
 8001284:	d026      	beq.n	80012d4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800128a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800128e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001296:	e01d      	b.n	80012d4 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800129c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a39      	ldr	r2, [pc, #228]	; (8001390 <HAL_ADC_Start_DMA+0x1a8>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d004      	beq.n	80012b8 <HAL_ADC_Start_DMA+0xd0>
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a38      	ldr	r2, [pc, #224]	; (8001394 <HAL_ADC_Start_DMA+0x1ac>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d10d      	bne.n	80012d4 <HAL_ADC_Start_DMA+0xec>
 80012b8:	4b35      	ldr	r3, [pc, #212]	; (8001390 <HAL_ADC_Start_DMA+0x1a8>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d007      	beq.n	80012d4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012c8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80012cc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d006      	beq.n	80012ee <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e4:	f023 0206 	bic.w	r2, r3, #6
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	62da      	str	r2, [r3, #44]	; 0x2c
 80012ec:	e002      	b.n	80012f4 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	2200      	movs	r2, #0
 80012f2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	2200      	movs	r2, #0
 80012f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	6a1b      	ldr	r3, [r3, #32]
 8001300:	4a25      	ldr	r2, [pc, #148]	; (8001398 <HAL_ADC_Start_DMA+0x1b0>)
 8001302:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	6a1b      	ldr	r3, [r3, #32]
 8001308:	4a24      	ldr	r2, [pc, #144]	; (800139c <HAL_ADC_Start_DMA+0x1b4>)
 800130a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	6a1b      	ldr	r3, [r3, #32]
 8001310:	4a23      	ldr	r2, [pc, #140]	; (80013a0 <HAL_ADC_Start_DMA+0x1b8>)
 8001312:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f06f 0202 	mvn.w	r2, #2
 800131c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	689a      	ldr	r2, [r3, #8]
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800132c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	6a18      	ldr	r0, [r3, #32]
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	334c      	adds	r3, #76	; 0x4c
 8001338:	4619      	mov	r1, r3
 800133a:	68ba      	ldr	r2, [r7, #8]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	f000 fba5 	bl	8001a8c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800134c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001350:	d108      	bne.n	8001364 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	689a      	ldr	r2, [r3, #8]
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001360:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001362:	e00f      	b.n	8001384 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	689a      	ldr	r2, [r3, #8]
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001372:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001374:	e006      	b.n	8001384 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	2200      	movs	r2, #0
 800137a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800137e:	e001      	b.n	8001384 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001384:	7dfb      	ldrb	r3, [r7, #23]
}
 8001386:	4618      	mov	r0, r3
 8001388:	3718      	adds	r7, #24
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40012400 	.word	0x40012400
 8001394:	40012800 	.word	0x40012800
 8001398:	080016ef 	.word	0x080016ef
 800139c:	0800176b 	.word	0x0800176b
 80013a0:	08001787 	.word	0x08001787

080013a4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80013ac:	bf00      	nop
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bc80      	pop	{r7}
 80013b4:	4770      	bx	lr

080013b6 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80013b6:	b480      	push	{r7}
 80013b8:	b083      	sub	sp, #12
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80013be:	bf00      	nop
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bc80      	pop	{r7}
 80013c6:	4770      	bx	lr

080013c8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013d2:	2300      	movs	r3, #0
 80013d4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80013d6:	2300      	movs	r3, #0
 80013d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d101      	bne.n	80013e8 <HAL_ADC_ConfigChannel+0x20>
 80013e4:	2302      	movs	r3, #2
 80013e6:	e0dc      	b.n	80015a2 <HAL_ADC_ConfigChannel+0x1da>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2201      	movs	r2, #1
 80013ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	2b06      	cmp	r3, #6
 80013f6:	d81c      	bhi.n	8001432 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685a      	ldr	r2, [r3, #4]
 8001402:	4613      	mov	r3, r2
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	4413      	add	r3, r2
 8001408:	3b05      	subs	r3, #5
 800140a:	221f      	movs	r2, #31
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	43db      	mvns	r3, r3
 8001412:	4019      	ands	r1, r3
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	6818      	ldr	r0, [r3, #0]
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685a      	ldr	r2, [r3, #4]
 800141c:	4613      	mov	r3, r2
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	4413      	add	r3, r2
 8001422:	3b05      	subs	r3, #5
 8001424:	fa00 f203 	lsl.w	r2, r0, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	430a      	orrs	r2, r1
 800142e:	635a      	str	r2, [r3, #52]	; 0x34
 8001430:	e03c      	b.n	80014ac <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	2b0c      	cmp	r3, #12
 8001438:	d81c      	bhi.n	8001474 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685a      	ldr	r2, [r3, #4]
 8001444:	4613      	mov	r3, r2
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	4413      	add	r3, r2
 800144a:	3b23      	subs	r3, #35	; 0x23
 800144c:	221f      	movs	r2, #31
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	43db      	mvns	r3, r3
 8001454:	4019      	ands	r1, r3
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	6818      	ldr	r0, [r3, #0]
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685a      	ldr	r2, [r3, #4]
 800145e:	4613      	mov	r3, r2
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	4413      	add	r3, r2
 8001464:	3b23      	subs	r3, #35	; 0x23
 8001466:	fa00 f203 	lsl.w	r2, r0, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	430a      	orrs	r2, r1
 8001470:	631a      	str	r2, [r3, #48]	; 0x30
 8001472:	e01b      	b.n	80014ac <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685a      	ldr	r2, [r3, #4]
 800147e:	4613      	mov	r3, r2
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	4413      	add	r3, r2
 8001484:	3b41      	subs	r3, #65	; 0x41
 8001486:	221f      	movs	r2, #31
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	43db      	mvns	r3, r3
 800148e:	4019      	ands	r1, r3
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	6818      	ldr	r0, [r3, #0]
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685a      	ldr	r2, [r3, #4]
 8001498:	4613      	mov	r3, r2
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	4413      	add	r3, r2
 800149e:	3b41      	subs	r3, #65	; 0x41
 80014a0:	fa00 f203 	lsl.w	r2, r0, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	430a      	orrs	r2, r1
 80014aa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2b09      	cmp	r3, #9
 80014b2:	d91c      	bls.n	80014ee <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	68d9      	ldr	r1, [r3, #12]
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	4613      	mov	r3, r2
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	4413      	add	r3, r2
 80014c4:	3b1e      	subs	r3, #30
 80014c6:	2207      	movs	r2, #7
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	43db      	mvns	r3, r3
 80014ce:	4019      	ands	r1, r3
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	6898      	ldr	r0, [r3, #8]
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	4613      	mov	r3, r2
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	4413      	add	r3, r2
 80014de:	3b1e      	subs	r3, #30
 80014e0:	fa00 f203 	lsl.w	r2, r0, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	430a      	orrs	r2, r1
 80014ea:	60da      	str	r2, [r3, #12]
 80014ec:	e019      	b.n	8001522 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	6919      	ldr	r1, [r3, #16]
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	4613      	mov	r3, r2
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	4413      	add	r3, r2
 80014fe:	2207      	movs	r2, #7
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	43db      	mvns	r3, r3
 8001506:	4019      	ands	r1, r3
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	6898      	ldr	r0, [r3, #8]
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	4613      	mov	r3, r2
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	4413      	add	r3, r2
 8001516:	fa00 f203 	lsl.w	r2, r0, r3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	430a      	orrs	r2, r1
 8001520:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2b10      	cmp	r3, #16
 8001528:	d003      	beq.n	8001532 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800152e:	2b11      	cmp	r3, #17
 8001530:	d132      	bne.n	8001598 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a1d      	ldr	r2, [pc, #116]	; (80015ac <HAL_ADC_ConfigChannel+0x1e4>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d125      	bne.n	8001588 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d126      	bne.n	8001598 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	689a      	ldr	r2, [r3, #8]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001558:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	2b10      	cmp	r3, #16
 8001560:	d11a      	bne.n	8001598 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001562:	4b13      	ldr	r3, [pc, #76]	; (80015b0 <HAL_ADC_ConfigChannel+0x1e8>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a13      	ldr	r2, [pc, #76]	; (80015b4 <HAL_ADC_ConfigChannel+0x1ec>)
 8001568:	fba2 2303 	umull	r2, r3, r2, r3
 800156c:	0c9a      	lsrs	r2, r3, #18
 800156e:	4613      	mov	r3, r2
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	4413      	add	r3, r2
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001578:	e002      	b.n	8001580 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	3b01      	subs	r3, #1
 800157e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d1f9      	bne.n	800157a <HAL_ADC_ConfigChannel+0x1b2>
 8001586:	e007      	b.n	8001598 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800158c:	f043 0220 	orr.w	r2, r3, #32
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2200      	movs	r2, #0
 800159c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80015a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3714      	adds	r7, #20
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bc80      	pop	{r7}
 80015aa:	4770      	bx	lr
 80015ac:	40012400 	.word	0x40012400
 80015b0:	20000000 	.word	0x20000000
 80015b4:	431bde83 	.word	0x431bde83

080015b8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80015c0:	2300      	movs	r3, #0
 80015c2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80015c4:	2300      	movs	r3, #0
 80015c6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d040      	beq.n	8001658 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	689a      	ldr	r2, [r3, #8]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f042 0201 	orr.w	r2, r2, #1
 80015e4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80015e6:	4b1f      	ldr	r3, [pc, #124]	; (8001664 <ADC_Enable+0xac>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a1f      	ldr	r2, [pc, #124]	; (8001668 <ADC_Enable+0xb0>)
 80015ec:	fba2 2303 	umull	r2, r3, r2, r3
 80015f0:	0c9b      	lsrs	r3, r3, #18
 80015f2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80015f4:	e002      	b.n	80015fc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	3b01      	subs	r3, #1
 80015fa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d1f9      	bne.n	80015f6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001602:	f7ff fceb 	bl	8000fdc <HAL_GetTick>
 8001606:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001608:	e01f      	b.n	800164a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800160a:	f7ff fce7 	bl	8000fdc <HAL_GetTick>
 800160e:	4602      	mov	r2, r0
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	2b02      	cmp	r3, #2
 8001616:	d918      	bls.n	800164a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	2b01      	cmp	r3, #1
 8001624:	d011      	beq.n	800164a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800162a:	f043 0210 	orr.w	r2, r3, #16
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001636:	f043 0201 	orr.w	r2, r3, #1
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2200      	movs	r2, #0
 8001642:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e007      	b.n	800165a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	f003 0301 	and.w	r3, r3, #1
 8001654:	2b01      	cmp	r3, #1
 8001656:	d1d8      	bne.n	800160a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20000000 	.word	0x20000000
 8001668:	431bde83 	.word	0x431bde83

0800166c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001674:	2300      	movs	r3, #0
 8001676:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	2b01      	cmp	r3, #1
 8001684:	d12e      	bne.n	80016e4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	689a      	ldr	r2, [r3, #8]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f022 0201 	bic.w	r2, r2, #1
 8001694:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001696:	f7ff fca1 	bl	8000fdc <HAL_GetTick>
 800169a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800169c:	e01b      	b.n	80016d6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800169e:	f7ff fc9d 	bl	8000fdc <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d914      	bls.n	80016d6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d10d      	bne.n	80016d6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016be:	f043 0210 	orr.w	r2, r3, #16
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ca:	f043 0201 	orr.w	r2, r3, #1
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e007      	b.n	80016e6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	f003 0301 	and.w	r3, r3, #1
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d0dc      	beq.n	800169e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3710      	adds	r7, #16
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b084      	sub	sp, #16
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fa:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001700:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001704:	2b00      	cmp	r3, #0
 8001706:	d127      	bne.n	8001758 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800170c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800171e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001722:	d115      	bne.n	8001750 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001728:	2b00      	cmp	r3, #0
 800172a:	d111      	bne.n	8001750 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001730:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800173c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d105      	bne.n	8001750 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001748:	f043 0201 	orr.w	r2, r3, #1
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001750:	68f8      	ldr	r0, [r7, #12]
 8001752:	f7ff f965 	bl	8000a20 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001756:	e004      	b.n	8001762 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	6a1b      	ldr	r3, [r3, #32]
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	4798      	blx	r3
}
 8001762:	bf00      	nop
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b084      	sub	sp, #16
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001776:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001778:	68f8      	ldr	r0, [r7, #12]
 800177a:	f7ff fe13 	bl	80013a4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800177e:	bf00      	nop
 8001780:	3710      	adds	r7, #16
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}

08001786 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001786:	b580      	push	{r7, lr}
 8001788:	b084      	sub	sp, #16
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001792:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001798:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a4:	f043 0204 	orr.w	r2, r3, #4
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80017ac:	68f8      	ldr	r0, [r7, #12]
 80017ae:	f7ff fe02 	bl	80013b6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80017b2:	bf00      	nop
 80017b4:	3710      	adds	r7, #16
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
	...

080017bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f003 0307 	and.w	r3, r3, #7
 80017ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017cc:	4b0c      	ldr	r3, [pc, #48]	; (8001800 <__NVIC_SetPriorityGrouping+0x44>)
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017d2:	68ba      	ldr	r2, [r7, #8]
 80017d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017d8:	4013      	ands	r3, r2
 80017da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ee:	4a04      	ldr	r2, [pc, #16]	; (8001800 <__NVIC_SetPriorityGrouping+0x44>)
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	60d3      	str	r3, [r2, #12]
}
 80017f4:	bf00      	nop
 80017f6:	3714      	adds	r7, #20
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bc80      	pop	{r7}
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	e000ed00 	.word	0xe000ed00

08001804 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001808:	4b04      	ldr	r3, [pc, #16]	; (800181c <__NVIC_GetPriorityGrouping+0x18>)
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	0a1b      	lsrs	r3, r3, #8
 800180e:	f003 0307 	and.w	r3, r3, #7
}
 8001812:	4618      	mov	r0, r3
 8001814:	46bd      	mov	sp, r7
 8001816:	bc80      	pop	{r7}
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	e000ed00 	.word	0xe000ed00

08001820 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800182a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182e:	2b00      	cmp	r3, #0
 8001830:	db0b      	blt.n	800184a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001832:	79fb      	ldrb	r3, [r7, #7]
 8001834:	f003 021f 	and.w	r2, r3, #31
 8001838:	4906      	ldr	r1, [pc, #24]	; (8001854 <__NVIC_EnableIRQ+0x34>)
 800183a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183e:	095b      	lsrs	r3, r3, #5
 8001840:	2001      	movs	r0, #1
 8001842:	fa00 f202 	lsl.w	r2, r0, r2
 8001846:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800184a:	bf00      	nop
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	bc80      	pop	{r7}
 8001852:	4770      	bx	lr
 8001854:	e000e100 	.word	0xe000e100

08001858 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	6039      	str	r1, [r7, #0]
 8001862:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001868:	2b00      	cmp	r3, #0
 800186a:	db0a      	blt.n	8001882 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	b2da      	uxtb	r2, r3
 8001870:	490c      	ldr	r1, [pc, #48]	; (80018a4 <__NVIC_SetPriority+0x4c>)
 8001872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001876:	0112      	lsls	r2, r2, #4
 8001878:	b2d2      	uxtb	r2, r2
 800187a:	440b      	add	r3, r1
 800187c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001880:	e00a      	b.n	8001898 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	b2da      	uxtb	r2, r3
 8001886:	4908      	ldr	r1, [pc, #32]	; (80018a8 <__NVIC_SetPriority+0x50>)
 8001888:	79fb      	ldrb	r3, [r7, #7]
 800188a:	f003 030f 	and.w	r3, r3, #15
 800188e:	3b04      	subs	r3, #4
 8001890:	0112      	lsls	r2, r2, #4
 8001892:	b2d2      	uxtb	r2, r2
 8001894:	440b      	add	r3, r1
 8001896:	761a      	strb	r2, [r3, #24]
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	bc80      	pop	{r7}
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	e000e100 	.word	0xe000e100
 80018a8:	e000ed00 	.word	0xe000ed00

080018ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b089      	sub	sp, #36	; 0x24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	f1c3 0307 	rsb	r3, r3, #7
 80018c6:	2b04      	cmp	r3, #4
 80018c8:	bf28      	it	cs
 80018ca:	2304      	movcs	r3, #4
 80018cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	3304      	adds	r3, #4
 80018d2:	2b06      	cmp	r3, #6
 80018d4:	d902      	bls.n	80018dc <NVIC_EncodePriority+0x30>
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	3b03      	subs	r3, #3
 80018da:	e000      	b.n	80018de <NVIC_EncodePriority+0x32>
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e0:	f04f 32ff 	mov.w	r2, #4294967295
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	43da      	mvns	r2, r3
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	401a      	ands	r2, r3
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018f4:	f04f 31ff 	mov.w	r1, #4294967295
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	fa01 f303 	lsl.w	r3, r1, r3
 80018fe:	43d9      	mvns	r1, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001904:	4313      	orrs	r3, r2
         );
}
 8001906:	4618      	mov	r0, r3
 8001908:	3724      	adds	r7, #36	; 0x24
 800190a:	46bd      	mov	sp, r7
 800190c:	bc80      	pop	{r7}
 800190e:	4770      	bx	lr

08001910 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	3b01      	subs	r3, #1
 800191c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001920:	d301      	bcc.n	8001926 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001922:	2301      	movs	r3, #1
 8001924:	e00f      	b.n	8001946 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001926:	4a0a      	ldr	r2, [pc, #40]	; (8001950 <SysTick_Config+0x40>)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	3b01      	subs	r3, #1
 800192c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800192e:	210f      	movs	r1, #15
 8001930:	f04f 30ff 	mov.w	r0, #4294967295
 8001934:	f7ff ff90 	bl	8001858 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001938:	4b05      	ldr	r3, [pc, #20]	; (8001950 <SysTick_Config+0x40>)
 800193a:	2200      	movs	r2, #0
 800193c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800193e:	4b04      	ldr	r3, [pc, #16]	; (8001950 <SysTick_Config+0x40>)
 8001940:	2207      	movs	r2, #7
 8001942:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001944:	2300      	movs	r3, #0
}
 8001946:	4618      	mov	r0, r3
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	e000e010 	.word	0xe000e010

08001954 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f7ff ff2d 	bl	80017bc <__NVIC_SetPriorityGrouping>
}
 8001962:	bf00      	nop
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800196a:	b580      	push	{r7, lr}
 800196c:	b086      	sub	sp, #24
 800196e:	af00      	add	r7, sp, #0
 8001970:	4603      	mov	r3, r0
 8001972:	60b9      	str	r1, [r7, #8]
 8001974:	607a      	str	r2, [r7, #4]
 8001976:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001978:	2300      	movs	r3, #0
 800197a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800197c:	f7ff ff42 	bl	8001804 <__NVIC_GetPriorityGrouping>
 8001980:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	68b9      	ldr	r1, [r7, #8]
 8001986:	6978      	ldr	r0, [r7, #20]
 8001988:	f7ff ff90 	bl	80018ac <NVIC_EncodePriority>
 800198c:	4602      	mov	r2, r0
 800198e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001992:	4611      	mov	r1, r2
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff ff5f 	bl	8001858 <__NVIC_SetPriority>
}
 800199a:	bf00      	nop
 800199c:	3718      	adds	r7, #24
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b082      	sub	sp, #8
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	4603      	mov	r3, r0
 80019aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff ff35 	bl	8001820 <__NVIC_EnableIRQ>
}
 80019b6:	bf00      	nop
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019be:	b580      	push	{r7, lr}
 80019c0:	b082      	sub	sp, #8
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f7ff ffa2 	bl	8001910 <SysTick_Config>
 80019cc:	4603      	mov	r3, r0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
	...

080019d8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019d8:	b480      	push	{r7}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80019e0:	2300      	movs	r3, #0
 80019e2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d101      	bne.n	80019ee <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e043      	b.n	8001a76 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	461a      	mov	r2, r3
 80019f4:	4b22      	ldr	r3, [pc, #136]	; (8001a80 <HAL_DMA_Init+0xa8>)
 80019f6:	4413      	add	r3, r2
 80019f8:	4a22      	ldr	r2, [pc, #136]	; (8001a84 <HAL_DMA_Init+0xac>)
 80019fa:	fba2 2303 	umull	r2, r3, r2, r3
 80019fe:	091b      	lsrs	r3, r3, #4
 8001a00:	009a      	lsls	r2, r3, #2
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a1f      	ldr	r2, [pc, #124]	; (8001a88 <HAL_DMA_Init+0xb0>)
 8001a0a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2202      	movs	r2, #2
 8001a10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001a22:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001a26:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001a30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	68db      	ldr	r3, [r3, #12]
 8001a36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	695b      	ldr	r3, [r3, #20]
 8001a42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	69db      	ldr	r3, [r3, #28]
 8001a4e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001a50:	68fa      	ldr	r2, [r7, #12]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	68fa      	ldr	r2, [r7, #12]
 8001a5c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2201      	movs	r2, #1
 8001a68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3714      	adds	r7, #20
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bc80      	pop	{r7}
 8001a7e:	4770      	bx	lr
 8001a80:	bffdfff8 	.word	0xbffdfff8
 8001a84:	cccccccd 	.word	0xcccccccd
 8001a88:	40020000 	.word	0x40020000

08001a8c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]
 8001a98:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d101      	bne.n	8001aac <HAL_DMA_Start_IT+0x20>
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	e04a      	b.n	8001b42 <HAL_DMA_Start_IT+0xb6>
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2201      	movs	r2, #1
 8001ab0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d13a      	bne.n	8001b34 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2202      	movs	r2, #2
 8001ac2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f022 0201 	bic.w	r2, r2, #1
 8001ada:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	68b9      	ldr	r1, [r7, #8]
 8001ae2:	68f8      	ldr	r0, [r7, #12]
 8001ae4:	f000 f938 	bl	8001d58 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d008      	beq.n	8001b02 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f042 020e 	orr.w	r2, r2, #14
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	e00f      	b.n	8001b22 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f022 0204 	bic.w	r2, r2, #4
 8001b10:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f042 020a 	orr.w	r2, r2, #10
 8001b20:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f042 0201 	orr.w	r2, r2, #1
 8001b30:	601a      	str	r2, [r3, #0]
 8001b32:	e005      	b.n	8001b40 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001b40:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3718      	adds	r7, #24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
	...

08001b4c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b68:	2204      	movs	r2, #4
 8001b6a:	409a      	lsls	r2, r3
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d04f      	beq.n	8001c14 <HAL_DMA_IRQHandler+0xc8>
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	f003 0304 	and.w	r3, r3, #4
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d04a      	beq.n	8001c14 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0320 	and.w	r3, r3, #32
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d107      	bne.n	8001b9c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f022 0204 	bic.w	r2, r2, #4
 8001b9a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a66      	ldr	r2, [pc, #408]	; (8001d3c <HAL_DMA_IRQHandler+0x1f0>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d029      	beq.n	8001bfa <HAL_DMA_IRQHandler+0xae>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a65      	ldr	r2, [pc, #404]	; (8001d40 <HAL_DMA_IRQHandler+0x1f4>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d022      	beq.n	8001bf6 <HAL_DMA_IRQHandler+0xaa>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a63      	ldr	r2, [pc, #396]	; (8001d44 <HAL_DMA_IRQHandler+0x1f8>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d01a      	beq.n	8001bf0 <HAL_DMA_IRQHandler+0xa4>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a62      	ldr	r2, [pc, #392]	; (8001d48 <HAL_DMA_IRQHandler+0x1fc>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d012      	beq.n	8001bea <HAL_DMA_IRQHandler+0x9e>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a60      	ldr	r2, [pc, #384]	; (8001d4c <HAL_DMA_IRQHandler+0x200>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d00a      	beq.n	8001be4 <HAL_DMA_IRQHandler+0x98>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a5f      	ldr	r2, [pc, #380]	; (8001d50 <HAL_DMA_IRQHandler+0x204>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d102      	bne.n	8001bde <HAL_DMA_IRQHandler+0x92>
 8001bd8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001bdc:	e00e      	b.n	8001bfc <HAL_DMA_IRQHandler+0xb0>
 8001bde:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001be2:	e00b      	b.n	8001bfc <HAL_DMA_IRQHandler+0xb0>
 8001be4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001be8:	e008      	b.n	8001bfc <HAL_DMA_IRQHandler+0xb0>
 8001bea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001bee:	e005      	b.n	8001bfc <HAL_DMA_IRQHandler+0xb0>
 8001bf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bf4:	e002      	b.n	8001bfc <HAL_DMA_IRQHandler+0xb0>
 8001bf6:	2340      	movs	r3, #64	; 0x40
 8001bf8:	e000      	b.n	8001bfc <HAL_DMA_IRQHandler+0xb0>
 8001bfa:	2304      	movs	r3, #4
 8001bfc:	4a55      	ldr	r2, [pc, #340]	; (8001d54 <HAL_DMA_IRQHandler+0x208>)
 8001bfe:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	f000 8094 	beq.w	8001d32 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001c12:	e08e      	b.n	8001d32 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c18:	2202      	movs	r2, #2
 8001c1a:	409a      	lsls	r2, r3
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	4013      	ands	r3, r2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d056      	beq.n	8001cd2 <HAL_DMA_IRQHandler+0x186>
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d051      	beq.n	8001cd2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0320 	and.w	r3, r3, #32
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d10b      	bne.n	8001c54 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f022 020a 	bic.w	r2, r2, #10
 8001c4a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a38      	ldr	r2, [pc, #224]	; (8001d3c <HAL_DMA_IRQHandler+0x1f0>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d029      	beq.n	8001cb2 <HAL_DMA_IRQHandler+0x166>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a37      	ldr	r2, [pc, #220]	; (8001d40 <HAL_DMA_IRQHandler+0x1f4>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d022      	beq.n	8001cae <HAL_DMA_IRQHandler+0x162>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a35      	ldr	r2, [pc, #212]	; (8001d44 <HAL_DMA_IRQHandler+0x1f8>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d01a      	beq.n	8001ca8 <HAL_DMA_IRQHandler+0x15c>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a34      	ldr	r2, [pc, #208]	; (8001d48 <HAL_DMA_IRQHandler+0x1fc>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d012      	beq.n	8001ca2 <HAL_DMA_IRQHandler+0x156>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a32      	ldr	r2, [pc, #200]	; (8001d4c <HAL_DMA_IRQHandler+0x200>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d00a      	beq.n	8001c9c <HAL_DMA_IRQHandler+0x150>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a31      	ldr	r2, [pc, #196]	; (8001d50 <HAL_DMA_IRQHandler+0x204>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d102      	bne.n	8001c96 <HAL_DMA_IRQHandler+0x14a>
 8001c90:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c94:	e00e      	b.n	8001cb4 <HAL_DMA_IRQHandler+0x168>
 8001c96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c9a:	e00b      	b.n	8001cb4 <HAL_DMA_IRQHandler+0x168>
 8001c9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ca0:	e008      	b.n	8001cb4 <HAL_DMA_IRQHandler+0x168>
 8001ca2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ca6:	e005      	b.n	8001cb4 <HAL_DMA_IRQHandler+0x168>
 8001ca8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cac:	e002      	b.n	8001cb4 <HAL_DMA_IRQHandler+0x168>
 8001cae:	2320      	movs	r3, #32
 8001cb0:	e000      	b.n	8001cb4 <HAL_DMA_IRQHandler+0x168>
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	4a27      	ldr	r2, [pc, #156]	; (8001d54 <HAL_DMA_IRQHandler+0x208>)
 8001cb6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d034      	beq.n	8001d32 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001cd0:	e02f      	b.n	8001d32 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd6:	2208      	movs	r2, #8
 8001cd8:	409a      	lsls	r2, r3
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d028      	beq.n	8001d34 <HAL_DMA_IRQHandler+0x1e8>
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	f003 0308 	and.w	r3, r3, #8
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d023      	beq.n	8001d34 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f022 020e 	bic.w	r2, r2, #14
 8001cfa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d04:	2101      	movs	r1, #1
 8001d06:	fa01 f202 	lsl.w	r2, r1, r2
 8001d0a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2201      	movs	r2, #1
 8001d16:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d004      	beq.n	8001d34 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	4798      	blx	r3
    }
  }
  return;
 8001d32:	bf00      	nop
 8001d34:	bf00      	nop
}
 8001d36:	3710      	adds	r7, #16
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	40020008 	.word	0x40020008
 8001d40:	4002001c 	.word	0x4002001c
 8001d44:	40020030 	.word	0x40020030
 8001d48:	40020044 	.word	0x40020044
 8001d4c:	40020058 	.word	0x40020058
 8001d50:	4002006c 	.word	0x4002006c
 8001d54:	40020000 	.word	0x40020000

08001d58 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	607a      	str	r2, [r7, #4]
 8001d64:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d6e:	2101      	movs	r1, #1
 8001d70:	fa01 f202 	lsl.w	r2, r1, r2
 8001d74:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	683a      	ldr	r2, [r7, #0]
 8001d7c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	2b10      	cmp	r3, #16
 8001d84:	d108      	bne.n	8001d98 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	68ba      	ldr	r2, [r7, #8]
 8001d94:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001d96:	e007      	b.n	8001da8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	68ba      	ldr	r2, [r7, #8]
 8001d9e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	60da      	str	r2, [r3, #12]
}
 8001da8:	bf00      	nop
 8001daa:	3714      	adds	r7, #20
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bc80      	pop	{r7}
 8001db0:	4770      	bx	lr
	...

08001db4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b08b      	sub	sp, #44	; 0x2c
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dc6:	e169      	b.n	800209c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001dc8:	2201      	movs	r2, #1
 8001dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	69fa      	ldr	r2, [r7, #28]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	f040 8158 	bne.w	8002096 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	4a9a      	ldr	r2, [pc, #616]	; (8002054 <HAL_GPIO_Init+0x2a0>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d05e      	beq.n	8001eae <HAL_GPIO_Init+0xfa>
 8001df0:	4a98      	ldr	r2, [pc, #608]	; (8002054 <HAL_GPIO_Init+0x2a0>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d875      	bhi.n	8001ee2 <HAL_GPIO_Init+0x12e>
 8001df6:	4a98      	ldr	r2, [pc, #608]	; (8002058 <HAL_GPIO_Init+0x2a4>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d058      	beq.n	8001eae <HAL_GPIO_Init+0xfa>
 8001dfc:	4a96      	ldr	r2, [pc, #600]	; (8002058 <HAL_GPIO_Init+0x2a4>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d86f      	bhi.n	8001ee2 <HAL_GPIO_Init+0x12e>
 8001e02:	4a96      	ldr	r2, [pc, #600]	; (800205c <HAL_GPIO_Init+0x2a8>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d052      	beq.n	8001eae <HAL_GPIO_Init+0xfa>
 8001e08:	4a94      	ldr	r2, [pc, #592]	; (800205c <HAL_GPIO_Init+0x2a8>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d869      	bhi.n	8001ee2 <HAL_GPIO_Init+0x12e>
 8001e0e:	4a94      	ldr	r2, [pc, #592]	; (8002060 <HAL_GPIO_Init+0x2ac>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d04c      	beq.n	8001eae <HAL_GPIO_Init+0xfa>
 8001e14:	4a92      	ldr	r2, [pc, #584]	; (8002060 <HAL_GPIO_Init+0x2ac>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d863      	bhi.n	8001ee2 <HAL_GPIO_Init+0x12e>
 8001e1a:	4a92      	ldr	r2, [pc, #584]	; (8002064 <HAL_GPIO_Init+0x2b0>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d046      	beq.n	8001eae <HAL_GPIO_Init+0xfa>
 8001e20:	4a90      	ldr	r2, [pc, #576]	; (8002064 <HAL_GPIO_Init+0x2b0>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d85d      	bhi.n	8001ee2 <HAL_GPIO_Init+0x12e>
 8001e26:	2b12      	cmp	r3, #18
 8001e28:	d82a      	bhi.n	8001e80 <HAL_GPIO_Init+0xcc>
 8001e2a:	2b12      	cmp	r3, #18
 8001e2c:	d859      	bhi.n	8001ee2 <HAL_GPIO_Init+0x12e>
 8001e2e:	a201      	add	r2, pc, #4	; (adr r2, 8001e34 <HAL_GPIO_Init+0x80>)
 8001e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e34:	08001eaf 	.word	0x08001eaf
 8001e38:	08001e89 	.word	0x08001e89
 8001e3c:	08001e9b 	.word	0x08001e9b
 8001e40:	08001edd 	.word	0x08001edd
 8001e44:	08001ee3 	.word	0x08001ee3
 8001e48:	08001ee3 	.word	0x08001ee3
 8001e4c:	08001ee3 	.word	0x08001ee3
 8001e50:	08001ee3 	.word	0x08001ee3
 8001e54:	08001ee3 	.word	0x08001ee3
 8001e58:	08001ee3 	.word	0x08001ee3
 8001e5c:	08001ee3 	.word	0x08001ee3
 8001e60:	08001ee3 	.word	0x08001ee3
 8001e64:	08001ee3 	.word	0x08001ee3
 8001e68:	08001ee3 	.word	0x08001ee3
 8001e6c:	08001ee3 	.word	0x08001ee3
 8001e70:	08001ee3 	.word	0x08001ee3
 8001e74:	08001ee3 	.word	0x08001ee3
 8001e78:	08001e91 	.word	0x08001e91
 8001e7c:	08001ea5 	.word	0x08001ea5
 8001e80:	4a79      	ldr	r2, [pc, #484]	; (8002068 <HAL_GPIO_Init+0x2b4>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d013      	beq.n	8001eae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e86:	e02c      	b.n	8001ee2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	623b      	str	r3, [r7, #32]
          break;
 8001e8e:	e029      	b.n	8001ee4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	3304      	adds	r3, #4
 8001e96:	623b      	str	r3, [r7, #32]
          break;
 8001e98:	e024      	b.n	8001ee4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	3308      	adds	r3, #8
 8001ea0:	623b      	str	r3, [r7, #32]
          break;
 8001ea2:	e01f      	b.n	8001ee4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	330c      	adds	r3, #12
 8001eaa:	623b      	str	r3, [r7, #32]
          break;
 8001eac:	e01a      	b.n	8001ee4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d102      	bne.n	8001ebc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001eb6:	2304      	movs	r3, #4
 8001eb8:	623b      	str	r3, [r7, #32]
          break;
 8001eba:	e013      	b.n	8001ee4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d105      	bne.n	8001ed0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ec4:	2308      	movs	r3, #8
 8001ec6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	69fa      	ldr	r2, [r7, #28]
 8001ecc:	611a      	str	r2, [r3, #16]
          break;
 8001ece:	e009      	b.n	8001ee4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ed0:	2308      	movs	r3, #8
 8001ed2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	69fa      	ldr	r2, [r7, #28]
 8001ed8:	615a      	str	r2, [r3, #20]
          break;
 8001eda:	e003      	b.n	8001ee4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001edc:	2300      	movs	r3, #0
 8001ede:	623b      	str	r3, [r7, #32]
          break;
 8001ee0:	e000      	b.n	8001ee4 <HAL_GPIO_Init+0x130>
          break;
 8001ee2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	2bff      	cmp	r3, #255	; 0xff
 8001ee8:	d801      	bhi.n	8001eee <HAL_GPIO_Init+0x13a>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	e001      	b.n	8001ef2 <HAL_GPIO_Init+0x13e>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	3304      	adds	r3, #4
 8001ef2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	2bff      	cmp	r3, #255	; 0xff
 8001ef8:	d802      	bhi.n	8001f00 <HAL_GPIO_Init+0x14c>
 8001efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	e002      	b.n	8001f06 <HAL_GPIO_Init+0x152>
 8001f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f02:	3b08      	subs	r3, #8
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	210f      	movs	r1, #15
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	fa01 f303 	lsl.w	r3, r1, r3
 8001f14:	43db      	mvns	r3, r3
 8001f16:	401a      	ands	r2, r3
 8001f18:	6a39      	ldr	r1, [r7, #32]
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f20:	431a      	orrs	r2, r3
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	f000 80b1 	beq.w	8002096 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f34:	4b4d      	ldr	r3, [pc, #308]	; (800206c <HAL_GPIO_Init+0x2b8>)
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	4a4c      	ldr	r2, [pc, #304]	; (800206c <HAL_GPIO_Init+0x2b8>)
 8001f3a:	f043 0301 	orr.w	r3, r3, #1
 8001f3e:	6193      	str	r3, [r2, #24]
 8001f40:	4b4a      	ldr	r3, [pc, #296]	; (800206c <HAL_GPIO_Init+0x2b8>)
 8001f42:	699b      	ldr	r3, [r3, #24]
 8001f44:	f003 0301 	and.w	r3, r3, #1
 8001f48:	60bb      	str	r3, [r7, #8]
 8001f4a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f4c:	4a48      	ldr	r2, [pc, #288]	; (8002070 <HAL_GPIO_Init+0x2bc>)
 8001f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f50:	089b      	lsrs	r3, r3, #2
 8001f52:	3302      	adds	r3, #2
 8001f54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f58:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5c:	f003 0303 	and.w	r3, r3, #3
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	220f      	movs	r2, #15
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4a40      	ldr	r2, [pc, #256]	; (8002074 <HAL_GPIO_Init+0x2c0>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d013      	beq.n	8001fa0 <HAL_GPIO_Init+0x1ec>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4a3f      	ldr	r2, [pc, #252]	; (8002078 <HAL_GPIO_Init+0x2c4>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d00d      	beq.n	8001f9c <HAL_GPIO_Init+0x1e8>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4a3e      	ldr	r2, [pc, #248]	; (800207c <HAL_GPIO_Init+0x2c8>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d007      	beq.n	8001f98 <HAL_GPIO_Init+0x1e4>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4a3d      	ldr	r2, [pc, #244]	; (8002080 <HAL_GPIO_Init+0x2cc>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d101      	bne.n	8001f94 <HAL_GPIO_Init+0x1e0>
 8001f90:	2303      	movs	r3, #3
 8001f92:	e006      	b.n	8001fa2 <HAL_GPIO_Init+0x1ee>
 8001f94:	2304      	movs	r3, #4
 8001f96:	e004      	b.n	8001fa2 <HAL_GPIO_Init+0x1ee>
 8001f98:	2302      	movs	r3, #2
 8001f9a:	e002      	b.n	8001fa2 <HAL_GPIO_Init+0x1ee>
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e000      	b.n	8001fa2 <HAL_GPIO_Init+0x1ee>
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fa4:	f002 0203 	and.w	r2, r2, #3
 8001fa8:	0092      	lsls	r2, r2, #2
 8001faa:	4093      	lsls	r3, r2
 8001fac:	68fa      	ldr	r2, [r7, #12]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fb2:	492f      	ldr	r1, [pc, #188]	; (8002070 <HAL_GPIO_Init+0x2bc>)
 8001fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb6:	089b      	lsrs	r3, r3, #2
 8001fb8:	3302      	adds	r3, #2
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d006      	beq.n	8001fda <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001fcc:	4b2d      	ldr	r3, [pc, #180]	; (8002084 <HAL_GPIO_Init+0x2d0>)
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	492c      	ldr	r1, [pc, #176]	; (8002084 <HAL_GPIO_Init+0x2d0>)
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	600b      	str	r3, [r1, #0]
 8001fd8:	e006      	b.n	8001fe8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001fda:	4b2a      	ldr	r3, [pc, #168]	; (8002084 <HAL_GPIO_Init+0x2d0>)
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	4928      	ldr	r1, [pc, #160]	; (8002084 <HAL_GPIO_Init+0x2d0>)
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d006      	beq.n	8002002 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ff4:	4b23      	ldr	r3, [pc, #140]	; (8002084 <HAL_GPIO_Init+0x2d0>)
 8001ff6:	685a      	ldr	r2, [r3, #4]
 8001ff8:	4922      	ldr	r1, [pc, #136]	; (8002084 <HAL_GPIO_Init+0x2d0>)
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	604b      	str	r3, [r1, #4]
 8002000:	e006      	b.n	8002010 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002002:	4b20      	ldr	r3, [pc, #128]	; (8002084 <HAL_GPIO_Init+0x2d0>)
 8002004:	685a      	ldr	r2, [r3, #4]
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	43db      	mvns	r3, r3
 800200a:	491e      	ldr	r1, [pc, #120]	; (8002084 <HAL_GPIO_Init+0x2d0>)
 800200c:	4013      	ands	r3, r2
 800200e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d006      	beq.n	800202a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800201c:	4b19      	ldr	r3, [pc, #100]	; (8002084 <HAL_GPIO_Init+0x2d0>)
 800201e:	689a      	ldr	r2, [r3, #8]
 8002020:	4918      	ldr	r1, [pc, #96]	; (8002084 <HAL_GPIO_Init+0x2d0>)
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	4313      	orrs	r3, r2
 8002026:	608b      	str	r3, [r1, #8]
 8002028:	e006      	b.n	8002038 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800202a:	4b16      	ldr	r3, [pc, #88]	; (8002084 <HAL_GPIO_Init+0x2d0>)
 800202c:	689a      	ldr	r2, [r3, #8]
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	43db      	mvns	r3, r3
 8002032:	4914      	ldr	r1, [pc, #80]	; (8002084 <HAL_GPIO_Init+0x2d0>)
 8002034:	4013      	ands	r3, r2
 8002036:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d021      	beq.n	8002088 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002044:	4b0f      	ldr	r3, [pc, #60]	; (8002084 <HAL_GPIO_Init+0x2d0>)
 8002046:	68da      	ldr	r2, [r3, #12]
 8002048:	490e      	ldr	r1, [pc, #56]	; (8002084 <HAL_GPIO_Init+0x2d0>)
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	4313      	orrs	r3, r2
 800204e:	60cb      	str	r3, [r1, #12]
 8002050:	e021      	b.n	8002096 <HAL_GPIO_Init+0x2e2>
 8002052:	bf00      	nop
 8002054:	10320000 	.word	0x10320000
 8002058:	10310000 	.word	0x10310000
 800205c:	10220000 	.word	0x10220000
 8002060:	10210000 	.word	0x10210000
 8002064:	10120000 	.word	0x10120000
 8002068:	10110000 	.word	0x10110000
 800206c:	40021000 	.word	0x40021000
 8002070:	40010000 	.word	0x40010000
 8002074:	40010800 	.word	0x40010800
 8002078:	40010c00 	.word	0x40010c00
 800207c:	40011000 	.word	0x40011000
 8002080:	40011400 	.word	0x40011400
 8002084:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002088:	4b0b      	ldr	r3, [pc, #44]	; (80020b8 <HAL_GPIO_Init+0x304>)
 800208a:	68da      	ldr	r2, [r3, #12]
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	43db      	mvns	r3, r3
 8002090:	4909      	ldr	r1, [pc, #36]	; (80020b8 <HAL_GPIO_Init+0x304>)
 8002092:	4013      	ands	r3, r2
 8002094:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002098:	3301      	adds	r3, #1
 800209a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a2:	fa22 f303 	lsr.w	r3, r2, r3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	f47f ae8e 	bne.w	8001dc8 <HAL_GPIO_Init+0x14>
  }
}
 80020ac:	bf00      	nop
 80020ae:	bf00      	nop
 80020b0:	372c      	adds	r7, #44	; 0x2c
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bc80      	pop	{r7}
 80020b6:	4770      	bx	lr
 80020b8:	40010400 	.word	0x40010400

080020bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	460b      	mov	r3, r1
 80020c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689a      	ldr	r2, [r3, #8]
 80020cc:	887b      	ldrh	r3, [r7, #2]
 80020ce:	4013      	ands	r3, r2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d002      	beq.n	80020da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020d4:	2301      	movs	r3, #1
 80020d6:	73fb      	strb	r3, [r7, #15]
 80020d8:	e001      	b.n	80020de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020da:	2300      	movs	r3, #0
 80020dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020de:	7bfb      	ldrb	r3, [r7, #15]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3714      	adds	r7, #20
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bc80      	pop	{r7}
 80020e8:	4770      	bx	lr

080020ea <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020ea:	b480      	push	{r7}
 80020ec:	b083      	sub	sp, #12
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
 80020f2:	460b      	mov	r3, r1
 80020f4:	807b      	strh	r3, [r7, #2]
 80020f6:	4613      	mov	r3, r2
 80020f8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020fa:	787b      	ldrb	r3, [r7, #1]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d003      	beq.n	8002108 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002100:	887a      	ldrh	r2, [r7, #2]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002106:	e003      	b.n	8002110 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002108:	887b      	ldrh	r3, [r7, #2]
 800210a:	041a      	lsls	r2, r3, #16
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	611a      	str	r2, [r3, #16]
}
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	bc80      	pop	{r7}
 8002118:	4770      	bx	lr
	...

0800211c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b086      	sub	sp, #24
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d101      	bne.n	800212e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e272      	b.n	8002614 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	2b00      	cmp	r3, #0
 8002138:	f000 8087 	beq.w	800224a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800213c:	4b92      	ldr	r3, [pc, #584]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f003 030c 	and.w	r3, r3, #12
 8002144:	2b04      	cmp	r3, #4
 8002146:	d00c      	beq.n	8002162 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002148:	4b8f      	ldr	r3, [pc, #572]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f003 030c 	and.w	r3, r3, #12
 8002150:	2b08      	cmp	r3, #8
 8002152:	d112      	bne.n	800217a <HAL_RCC_OscConfig+0x5e>
 8002154:	4b8c      	ldr	r3, [pc, #560]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800215c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002160:	d10b      	bne.n	800217a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002162:	4b89      	ldr	r3, [pc, #548]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d06c      	beq.n	8002248 <HAL_RCC_OscConfig+0x12c>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d168      	bne.n	8002248 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e24c      	b.n	8002614 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002182:	d106      	bne.n	8002192 <HAL_RCC_OscConfig+0x76>
 8002184:	4b80      	ldr	r3, [pc, #512]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a7f      	ldr	r2, [pc, #508]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 800218a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800218e:	6013      	str	r3, [r2, #0]
 8002190:	e02e      	b.n	80021f0 <HAL_RCC_OscConfig+0xd4>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d10c      	bne.n	80021b4 <HAL_RCC_OscConfig+0x98>
 800219a:	4b7b      	ldr	r3, [pc, #492]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a7a      	ldr	r2, [pc, #488]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 80021a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021a4:	6013      	str	r3, [r2, #0]
 80021a6:	4b78      	ldr	r3, [pc, #480]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a77      	ldr	r2, [pc, #476]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 80021ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021b0:	6013      	str	r3, [r2, #0]
 80021b2:	e01d      	b.n	80021f0 <HAL_RCC_OscConfig+0xd4>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021bc:	d10c      	bne.n	80021d8 <HAL_RCC_OscConfig+0xbc>
 80021be:	4b72      	ldr	r3, [pc, #456]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a71      	ldr	r2, [pc, #452]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 80021c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021c8:	6013      	str	r3, [r2, #0]
 80021ca:	4b6f      	ldr	r3, [pc, #444]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a6e      	ldr	r2, [pc, #440]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 80021d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021d4:	6013      	str	r3, [r2, #0]
 80021d6:	e00b      	b.n	80021f0 <HAL_RCC_OscConfig+0xd4>
 80021d8:	4b6b      	ldr	r3, [pc, #428]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a6a      	ldr	r2, [pc, #424]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 80021de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021e2:	6013      	str	r3, [r2, #0]
 80021e4:	4b68      	ldr	r3, [pc, #416]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a67      	ldr	r2, [pc, #412]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 80021ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d013      	beq.n	8002220 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f8:	f7fe fef0 	bl	8000fdc <HAL_GetTick>
 80021fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021fe:	e008      	b.n	8002212 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002200:	f7fe feec 	bl	8000fdc <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b64      	cmp	r3, #100	; 0x64
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e200      	b.n	8002614 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002212:	4b5d      	ldr	r3, [pc, #372]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d0f0      	beq.n	8002200 <HAL_RCC_OscConfig+0xe4>
 800221e:	e014      	b.n	800224a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002220:	f7fe fedc 	bl	8000fdc <HAL_GetTick>
 8002224:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002226:	e008      	b.n	800223a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002228:	f7fe fed8 	bl	8000fdc <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b64      	cmp	r3, #100	; 0x64
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e1ec      	b.n	8002614 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800223a:	4b53      	ldr	r3, [pc, #332]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d1f0      	bne.n	8002228 <HAL_RCC_OscConfig+0x10c>
 8002246:	e000      	b.n	800224a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002248:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d063      	beq.n	800231e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002256:	4b4c      	ldr	r3, [pc, #304]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f003 030c 	and.w	r3, r3, #12
 800225e:	2b00      	cmp	r3, #0
 8002260:	d00b      	beq.n	800227a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002262:	4b49      	ldr	r3, [pc, #292]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f003 030c 	and.w	r3, r3, #12
 800226a:	2b08      	cmp	r3, #8
 800226c:	d11c      	bne.n	80022a8 <HAL_RCC_OscConfig+0x18c>
 800226e:	4b46      	ldr	r3, [pc, #280]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d116      	bne.n	80022a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800227a:	4b43      	ldr	r3, [pc, #268]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	2b00      	cmp	r3, #0
 8002284:	d005      	beq.n	8002292 <HAL_RCC_OscConfig+0x176>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	2b01      	cmp	r3, #1
 800228c:	d001      	beq.n	8002292 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e1c0      	b.n	8002614 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002292:	4b3d      	ldr	r3, [pc, #244]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	695b      	ldr	r3, [r3, #20]
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	4939      	ldr	r1, [pc, #228]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022a6:	e03a      	b.n	800231e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	691b      	ldr	r3, [r3, #16]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d020      	beq.n	80022f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022b0:	4b36      	ldr	r3, [pc, #216]	; (800238c <HAL_RCC_OscConfig+0x270>)
 80022b2:	2201      	movs	r2, #1
 80022b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b6:	f7fe fe91 	bl	8000fdc <HAL_GetTick>
 80022ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022bc:	e008      	b.n	80022d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022be:	f7fe fe8d 	bl	8000fdc <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d901      	bls.n	80022d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e1a1      	b.n	8002614 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022d0:	4b2d      	ldr	r3, [pc, #180]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0302 	and.w	r3, r3, #2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d0f0      	beq.n	80022be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022dc:	4b2a      	ldr	r3, [pc, #168]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	695b      	ldr	r3, [r3, #20]
 80022e8:	00db      	lsls	r3, r3, #3
 80022ea:	4927      	ldr	r1, [pc, #156]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	600b      	str	r3, [r1, #0]
 80022f0:	e015      	b.n	800231e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022f2:	4b26      	ldr	r3, [pc, #152]	; (800238c <HAL_RCC_OscConfig+0x270>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f8:	f7fe fe70 	bl	8000fdc <HAL_GetTick>
 80022fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022fe:	e008      	b.n	8002312 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002300:	f7fe fe6c 	bl	8000fdc <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b02      	cmp	r3, #2
 800230c:	d901      	bls.n	8002312 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e180      	b.n	8002614 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002312:	4b1d      	ldr	r3, [pc, #116]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d1f0      	bne.n	8002300 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0308 	and.w	r3, r3, #8
 8002326:	2b00      	cmp	r3, #0
 8002328:	d03a      	beq.n	80023a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	699b      	ldr	r3, [r3, #24]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d019      	beq.n	8002366 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002332:	4b17      	ldr	r3, [pc, #92]	; (8002390 <HAL_RCC_OscConfig+0x274>)
 8002334:	2201      	movs	r2, #1
 8002336:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002338:	f7fe fe50 	bl	8000fdc <HAL_GetTick>
 800233c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800233e:	e008      	b.n	8002352 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002340:	f7fe fe4c 	bl	8000fdc <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b02      	cmp	r3, #2
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e160      	b.n	8002614 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002352:	4b0d      	ldr	r3, [pc, #52]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 8002354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d0f0      	beq.n	8002340 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800235e:	2001      	movs	r0, #1
 8002360:	f000 faa6 	bl	80028b0 <RCC_Delay>
 8002364:	e01c      	b.n	80023a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002366:	4b0a      	ldr	r3, [pc, #40]	; (8002390 <HAL_RCC_OscConfig+0x274>)
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800236c:	f7fe fe36 	bl	8000fdc <HAL_GetTick>
 8002370:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002372:	e00f      	b.n	8002394 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002374:	f7fe fe32 	bl	8000fdc <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b02      	cmp	r3, #2
 8002380:	d908      	bls.n	8002394 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e146      	b.n	8002614 <HAL_RCC_OscConfig+0x4f8>
 8002386:	bf00      	nop
 8002388:	40021000 	.word	0x40021000
 800238c:	42420000 	.word	0x42420000
 8002390:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002394:	4b92      	ldr	r3, [pc, #584]	; (80025e0 <HAL_RCC_OscConfig+0x4c4>)
 8002396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d1e9      	bne.n	8002374 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0304 	and.w	r3, r3, #4
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	f000 80a6 	beq.w	80024fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023ae:	2300      	movs	r3, #0
 80023b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023b2:	4b8b      	ldr	r3, [pc, #556]	; (80025e0 <HAL_RCC_OscConfig+0x4c4>)
 80023b4:	69db      	ldr	r3, [r3, #28]
 80023b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d10d      	bne.n	80023da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023be:	4b88      	ldr	r3, [pc, #544]	; (80025e0 <HAL_RCC_OscConfig+0x4c4>)
 80023c0:	69db      	ldr	r3, [r3, #28]
 80023c2:	4a87      	ldr	r2, [pc, #540]	; (80025e0 <HAL_RCC_OscConfig+0x4c4>)
 80023c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023c8:	61d3      	str	r3, [r2, #28]
 80023ca:	4b85      	ldr	r3, [pc, #532]	; (80025e0 <HAL_RCC_OscConfig+0x4c4>)
 80023cc:	69db      	ldr	r3, [r3, #28]
 80023ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d2:	60bb      	str	r3, [r7, #8]
 80023d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023d6:	2301      	movs	r3, #1
 80023d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023da:	4b82      	ldr	r3, [pc, #520]	; (80025e4 <HAL_RCC_OscConfig+0x4c8>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d118      	bne.n	8002418 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023e6:	4b7f      	ldr	r3, [pc, #508]	; (80025e4 <HAL_RCC_OscConfig+0x4c8>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a7e      	ldr	r2, [pc, #504]	; (80025e4 <HAL_RCC_OscConfig+0x4c8>)
 80023ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023f2:	f7fe fdf3 	bl	8000fdc <HAL_GetTick>
 80023f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f8:	e008      	b.n	800240c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023fa:	f7fe fdef 	bl	8000fdc <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	2b64      	cmp	r3, #100	; 0x64
 8002406:	d901      	bls.n	800240c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e103      	b.n	8002614 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800240c:	4b75      	ldr	r3, [pc, #468]	; (80025e4 <HAL_RCC_OscConfig+0x4c8>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002414:	2b00      	cmp	r3, #0
 8002416:	d0f0      	beq.n	80023fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d106      	bne.n	800242e <HAL_RCC_OscConfig+0x312>
 8002420:	4b6f      	ldr	r3, [pc, #444]	; (80025e0 <HAL_RCC_OscConfig+0x4c4>)
 8002422:	6a1b      	ldr	r3, [r3, #32]
 8002424:	4a6e      	ldr	r2, [pc, #440]	; (80025e0 <HAL_RCC_OscConfig+0x4c4>)
 8002426:	f043 0301 	orr.w	r3, r3, #1
 800242a:	6213      	str	r3, [r2, #32]
 800242c:	e02d      	b.n	800248a <HAL_RCC_OscConfig+0x36e>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d10c      	bne.n	8002450 <HAL_RCC_OscConfig+0x334>
 8002436:	4b6a      	ldr	r3, [pc, #424]	; (80025e0 <HAL_RCC_OscConfig+0x4c4>)
 8002438:	6a1b      	ldr	r3, [r3, #32]
 800243a:	4a69      	ldr	r2, [pc, #420]	; (80025e0 <HAL_RCC_OscConfig+0x4c4>)
 800243c:	f023 0301 	bic.w	r3, r3, #1
 8002440:	6213      	str	r3, [r2, #32]
 8002442:	4b67      	ldr	r3, [pc, #412]	; (80025e0 <HAL_RCC_OscConfig+0x4c4>)
 8002444:	6a1b      	ldr	r3, [r3, #32]
 8002446:	4a66      	ldr	r2, [pc, #408]	; (80025e0 <HAL_RCC_OscConfig+0x4c4>)
 8002448:	f023 0304 	bic.w	r3, r3, #4
 800244c:	6213      	str	r3, [r2, #32]
 800244e:	e01c      	b.n	800248a <HAL_RCC_OscConfig+0x36e>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	2b05      	cmp	r3, #5
 8002456:	d10c      	bne.n	8002472 <HAL_RCC_OscConfig+0x356>
 8002458:	4b61      	ldr	r3, [pc, #388]	; (80025e0 <HAL_RCC_OscConfig+0x4c4>)
 800245a:	6a1b      	ldr	r3, [r3, #32]
 800245c:	4a60      	ldr	r2, [pc, #384]	; (80025e0 <HAL_RCC_OscConfig+0x4c4>)
 800245e:	f043 0304 	orr.w	r3, r3, #4
 8002462:	6213      	str	r3, [r2, #32]
 8002464:	4b5e      	ldr	r3, [pc, #376]	; (80025e0 <HAL_RCC_OscConfig+0x4c4>)
 8002466:	6a1b      	ldr	r3, [r3, #32]
 8002468:	4a5d      	ldr	r2, [pc, #372]	; (80025e0 <HAL_RCC_OscConfig+0x4c4>)
 800246a:	f043 0301 	orr.w	r3, r3, #1
 800246e:	6213      	str	r3, [r2, #32]
 8002470:	e00b      	b.n	800248a <HAL_RCC_OscConfig+0x36e>
 8002472:	4b5b      	ldr	r3, [pc, #364]	; (80025e0 <HAL_RCC_OscConfig+0x4c4>)
 8002474:	6a1b      	ldr	r3, [r3, #32]
 8002476:	4a5a      	ldr	r2, [pc, #360]	; (80025e0 <HAL_RCC_OscConfig+0x4c4>)
 8002478:	f023 0301 	bic.w	r3, r3, #1
 800247c:	6213      	str	r3, [r2, #32]
 800247e:	4b58      	ldr	r3, [pc, #352]	; (80025e0 <HAL_RCC_OscConfig+0x4c4>)
 8002480:	6a1b      	ldr	r3, [r3, #32]
 8002482:	4a57      	ldr	r2, [pc, #348]	; (80025e0 <HAL_RCC_OscConfig+0x4c4>)
 8002484:	f023 0304 	bic.w	r3, r3, #4
 8002488:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d015      	beq.n	80024be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002492:	f7fe fda3 	bl	8000fdc <HAL_GetTick>
 8002496:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002498:	e00a      	b.n	80024b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800249a:	f7fe fd9f 	bl	8000fdc <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d901      	bls.n	80024b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e0b1      	b.n	8002614 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024b0:	4b4b      	ldr	r3, [pc, #300]	; (80025e0 <HAL_RCC_OscConfig+0x4c4>)
 80024b2:	6a1b      	ldr	r3, [r3, #32]
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d0ee      	beq.n	800249a <HAL_RCC_OscConfig+0x37e>
 80024bc:	e014      	b.n	80024e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024be:	f7fe fd8d 	bl	8000fdc <HAL_GetTick>
 80024c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024c4:	e00a      	b.n	80024dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024c6:	f7fe fd89 	bl	8000fdc <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d901      	bls.n	80024dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e09b      	b.n	8002614 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024dc:	4b40      	ldr	r3, [pc, #256]	; (80025e0 <HAL_RCC_OscConfig+0x4c4>)
 80024de:	6a1b      	ldr	r3, [r3, #32]
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d1ee      	bne.n	80024c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024e8:	7dfb      	ldrb	r3, [r7, #23]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d105      	bne.n	80024fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024ee:	4b3c      	ldr	r3, [pc, #240]	; (80025e0 <HAL_RCC_OscConfig+0x4c4>)
 80024f0:	69db      	ldr	r3, [r3, #28]
 80024f2:	4a3b      	ldr	r2, [pc, #236]	; (80025e0 <HAL_RCC_OscConfig+0x4c4>)
 80024f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	69db      	ldr	r3, [r3, #28]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	f000 8087 	beq.w	8002612 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002504:	4b36      	ldr	r3, [pc, #216]	; (80025e0 <HAL_RCC_OscConfig+0x4c4>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f003 030c 	and.w	r3, r3, #12
 800250c:	2b08      	cmp	r3, #8
 800250e:	d061      	beq.n	80025d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	69db      	ldr	r3, [r3, #28]
 8002514:	2b02      	cmp	r3, #2
 8002516:	d146      	bne.n	80025a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002518:	4b33      	ldr	r3, [pc, #204]	; (80025e8 <HAL_RCC_OscConfig+0x4cc>)
 800251a:	2200      	movs	r2, #0
 800251c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800251e:	f7fe fd5d 	bl	8000fdc <HAL_GetTick>
 8002522:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002524:	e008      	b.n	8002538 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002526:	f7fe fd59 	bl	8000fdc <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	2b02      	cmp	r3, #2
 8002532:	d901      	bls.n	8002538 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e06d      	b.n	8002614 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002538:	4b29      	ldr	r3, [pc, #164]	; (80025e0 <HAL_RCC_OscConfig+0x4c4>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d1f0      	bne.n	8002526 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6a1b      	ldr	r3, [r3, #32]
 8002548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800254c:	d108      	bne.n	8002560 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800254e:	4b24      	ldr	r3, [pc, #144]	; (80025e0 <HAL_RCC_OscConfig+0x4c4>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	4921      	ldr	r1, [pc, #132]	; (80025e0 <HAL_RCC_OscConfig+0x4c4>)
 800255c:	4313      	orrs	r3, r2
 800255e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002560:	4b1f      	ldr	r3, [pc, #124]	; (80025e0 <HAL_RCC_OscConfig+0x4c4>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6a19      	ldr	r1, [r3, #32]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002570:	430b      	orrs	r3, r1
 8002572:	491b      	ldr	r1, [pc, #108]	; (80025e0 <HAL_RCC_OscConfig+0x4c4>)
 8002574:	4313      	orrs	r3, r2
 8002576:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002578:	4b1b      	ldr	r3, [pc, #108]	; (80025e8 <HAL_RCC_OscConfig+0x4cc>)
 800257a:	2201      	movs	r2, #1
 800257c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800257e:	f7fe fd2d 	bl	8000fdc <HAL_GetTick>
 8002582:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002584:	e008      	b.n	8002598 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002586:	f7fe fd29 	bl	8000fdc <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b02      	cmp	r3, #2
 8002592:	d901      	bls.n	8002598 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e03d      	b.n	8002614 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002598:	4b11      	ldr	r3, [pc, #68]	; (80025e0 <HAL_RCC_OscConfig+0x4c4>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d0f0      	beq.n	8002586 <HAL_RCC_OscConfig+0x46a>
 80025a4:	e035      	b.n	8002612 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025a6:	4b10      	ldr	r3, [pc, #64]	; (80025e8 <HAL_RCC_OscConfig+0x4cc>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ac:	f7fe fd16 	bl	8000fdc <HAL_GetTick>
 80025b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025b2:	e008      	b.n	80025c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025b4:	f7fe fd12 	bl	8000fdc <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e026      	b.n	8002614 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025c6:	4b06      	ldr	r3, [pc, #24]	; (80025e0 <HAL_RCC_OscConfig+0x4c4>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1f0      	bne.n	80025b4 <HAL_RCC_OscConfig+0x498>
 80025d2:	e01e      	b.n	8002612 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	69db      	ldr	r3, [r3, #28]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d107      	bne.n	80025ec <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e019      	b.n	8002614 <HAL_RCC_OscConfig+0x4f8>
 80025e0:	40021000 	.word	0x40021000
 80025e4:	40007000 	.word	0x40007000
 80025e8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025ec:	4b0b      	ldr	r3, [pc, #44]	; (800261c <HAL_RCC_OscConfig+0x500>)
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a1b      	ldr	r3, [r3, #32]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d106      	bne.n	800260e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800260a:	429a      	cmp	r2, r3
 800260c:	d001      	beq.n	8002612 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e000      	b.n	8002614 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002612:	2300      	movs	r3, #0
}
 8002614:	4618      	mov	r0, r3
 8002616:	3718      	adds	r7, #24
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	40021000 	.word	0x40021000

08002620 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d101      	bne.n	8002634 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e0d0      	b.n	80027d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002634:	4b6a      	ldr	r3, [pc, #424]	; (80027e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0307 	and.w	r3, r3, #7
 800263c:	683a      	ldr	r2, [r7, #0]
 800263e:	429a      	cmp	r2, r3
 8002640:	d910      	bls.n	8002664 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002642:	4b67      	ldr	r3, [pc, #412]	; (80027e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f023 0207 	bic.w	r2, r3, #7
 800264a:	4965      	ldr	r1, [pc, #404]	; (80027e0 <HAL_RCC_ClockConfig+0x1c0>)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	4313      	orrs	r3, r2
 8002650:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002652:	4b63      	ldr	r3, [pc, #396]	; (80027e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0307 	and.w	r3, r3, #7
 800265a:	683a      	ldr	r2, [r7, #0]
 800265c:	429a      	cmp	r2, r3
 800265e:	d001      	beq.n	8002664 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e0b8      	b.n	80027d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0302 	and.w	r3, r3, #2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d020      	beq.n	80026b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0304 	and.w	r3, r3, #4
 8002678:	2b00      	cmp	r3, #0
 800267a:	d005      	beq.n	8002688 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800267c:	4b59      	ldr	r3, [pc, #356]	; (80027e4 <HAL_RCC_ClockConfig+0x1c4>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	4a58      	ldr	r2, [pc, #352]	; (80027e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002682:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002686:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0308 	and.w	r3, r3, #8
 8002690:	2b00      	cmp	r3, #0
 8002692:	d005      	beq.n	80026a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002694:	4b53      	ldr	r3, [pc, #332]	; (80027e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	4a52      	ldr	r2, [pc, #328]	; (80027e4 <HAL_RCC_ClockConfig+0x1c4>)
 800269a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800269e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026a0:	4b50      	ldr	r3, [pc, #320]	; (80027e4 <HAL_RCC_ClockConfig+0x1c4>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	494d      	ldr	r1, [pc, #308]	; (80027e4 <HAL_RCC_ClockConfig+0x1c4>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d040      	beq.n	8002740 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d107      	bne.n	80026d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026c6:	4b47      	ldr	r3, [pc, #284]	; (80027e4 <HAL_RCC_ClockConfig+0x1c4>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d115      	bne.n	80026fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e07f      	b.n	80027d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d107      	bne.n	80026ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026de:	4b41      	ldr	r3, [pc, #260]	; (80027e4 <HAL_RCC_ClockConfig+0x1c4>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d109      	bne.n	80026fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e073      	b.n	80027d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ee:	4b3d      	ldr	r3, [pc, #244]	; (80027e4 <HAL_RCC_ClockConfig+0x1c4>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e06b      	b.n	80027d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026fe:	4b39      	ldr	r3, [pc, #228]	; (80027e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f023 0203 	bic.w	r2, r3, #3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	4936      	ldr	r1, [pc, #216]	; (80027e4 <HAL_RCC_ClockConfig+0x1c4>)
 800270c:	4313      	orrs	r3, r2
 800270e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002710:	f7fe fc64 	bl	8000fdc <HAL_GetTick>
 8002714:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002716:	e00a      	b.n	800272e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002718:	f7fe fc60 	bl	8000fdc <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	f241 3288 	movw	r2, #5000	; 0x1388
 8002726:	4293      	cmp	r3, r2
 8002728:	d901      	bls.n	800272e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e053      	b.n	80027d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800272e:	4b2d      	ldr	r3, [pc, #180]	; (80027e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f003 020c 	and.w	r2, r3, #12
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	429a      	cmp	r2, r3
 800273e:	d1eb      	bne.n	8002718 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002740:	4b27      	ldr	r3, [pc, #156]	; (80027e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0307 	and.w	r3, r3, #7
 8002748:	683a      	ldr	r2, [r7, #0]
 800274a:	429a      	cmp	r2, r3
 800274c:	d210      	bcs.n	8002770 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800274e:	4b24      	ldr	r3, [pc, #144]	; (80027e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f023 0207 	bic.w	r2, r3, #7
 8002756:	4922      	ldr	r1, [pc, #136]	; (80027e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	4313      	orrs	r3, r2
 800275c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800275e:	4b20      	ldr	r3, [pc, #128]	; (80027e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0307 	and.w	r3, r3, #7
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	429a      	cmp	r2, r3
 800276a:	d001      	beq.n	8002770 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e032      	b.n	80027d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0304 	and.w	r3, r3, #4
 8002778:	2b00      	cmp	r3, #0
 800277a:	d008      	beq.n	800278e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800277c:	4b19      	ldr	r3, [pc, #100]	; (80027e4 <HAL_RCC_ClockConfig+0x1c4>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	4916      	ldr	r1, [pc, #88]	; (80027e4 <HAL_RCC_ClockConfig+0x1c4>)
 800278a:	4313      	orrs	r3, r2
 800278c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0308 	and.w	r3, r3, #8
 8002796:	2b00      	cmp	r3, #0
 8002798:	d009      	beq.n	80027ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800279a:	4b12      	ldr	r3, [pc, #72]	; (80027e4 <HAL_RCC_ClockConfig+0x1c4>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	490e      	ldr	r1, [pc, #56]	; (80027e4 <HAL_RCC_ClockConfig+0x1c4>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027ae:	f000 f821 	bl	80027f4 <HAL_RCC_GetSysClockFreq>
 80027b2:	4602      	mov	r2, r0
 80027b4:	4b0b      	ldr	r3, [pc, #44]	; (80027e4 <HAL_RCC_ClockConfig+0x1c4>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	091b      	lsrs	r3, r3, #4
 80027ba:	f003 030f 	and.w	r3, r3, #15
 80027be:	490a      	ldr	r1, [pc, #40]	; (80027e8 <HAL_RCC_ClockConfig+0x1c8>)
 80027c0:	5ccb      	ldrb	r3, [r1, r3]
 80027c2:	fa22 f303 	lsr.w	r3, r2, r3
 80027c6:	4a09      	ldr	r2, [pc, #36]	; (80027ec <HAL_RCC_ClockConfig+0x1cc>)
 80027c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027ca:	4b09      	ldr	r3, [pc, #36]	; (80027f0 <HAL_RCC_ClockConfig+0x1d0>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7fe fbc2 	bl	8000f58 <HAL_InitTick>

  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3710      	adds	r7, #16
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	40022000 	.word	0x40022000
 80027e4:	40021000 	.word	0x40021000
 80027e8:	08003674 	.word	0x08003674
 80027ec:	20000000 	.word	0x20000000
 80027f0:	20000004 	.word	0x20000004

080027f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027f4:	b490      	push	{r4, r7}
 80027f6:	b08a      	sub	sp, #40	; 0x28
 80027f8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80027fa:	4b29      	ldr	r3, [pc, #164]	; (80028a0 <HAL_RCC_GetSysClockFreq+0xac>)
 80027fc:	1d3c      	adds	r4, r7, #4
 80027fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002800:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002804:	f240 2301 	movw	r3, #513	; 0x201
 8002808:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800280a:	2300      	movs	r3, #0
 800280c:	61fb      	str	r3, [r7, #28]
 800280e:	2300      	movs	r3, #0
 8002810:	61bb      	str	r3, [r7, #24]
 8002812:	2300      	movs	r3, #0
 8002814:	627b      	str	r3, [r7, #36]	; 0x24
 8002816:	2300      	movs	r3, #0
 8002818:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800281a:	2300      	movs	r3, #0
 800281c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800281e:	4b21      	ldr	r3, [pc, #132]	; (80028a4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	f003 030c 	and.w	r3, r3, #12
 800282a:	2b04      	cmp	r3, #4
 800282c:	d002      	beq.n	8002834 <HAL_RCC_GetSysClockFreq+0x40>
 800282e:	2b08      	cmp	r3, #8
 8002830:	d003      	beq.n	800283a <HAL_RCC_GetSysClockFreq+0x46>
 8002832:	e02b      	b.n	800288c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002834:	4b1c      	ldr	r3, [pc, #112]	; (80028a8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002836:	623b      	str	r3, [r7, #32]
      break;
 8002838:	e02b      	b.n	8002892 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	0c9b      	lsrs	r3, r3, #18
 800283e:	f003 030f 	and.w	r3, r3, #15
 8002842:	3328      	adds	r3, #40	; 0x28
 8002844:	443b      	add	r3, r7
 8002846:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800284a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d012      	beq.n	800287c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002856:	4b13      	ldr	r3, [pc, #76]	; (80028a4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	0c5b      	lsrs	r3, r3, #17
 800285c:	f003 0301 	and.w	r3, r3, #1
 8002860:	3328      	adds	r3, #40	; 0x28
 8002862:	443b      	add	r3, r7
 8002864:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002868:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	4a0e      	ldr	r2, [pc, #56]	; (80028a8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800286e:	fb03 f202 	mul.w	r2, r3, r2
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	fbb2 f3f3 	udiv	r3, r2, r3
 8002878:	627b      	str	r3, [r7, #36]	; 0x24
 800287a:	e004      	b.n	8002886 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	4a0b      	ldr	r2, [pc, #44]	; (80028ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002880:	fb02 f303 	mul.w	r3, r2, r3
 8002884:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002888:	623b      	str	r3, [r7, #32]
      break;
 800288a:	e002      	b.n	8002892 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800288c:	4b06      	ldr	r3, [pc, #24]	; (80028a8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800288e:	623b      	str	r3, [r7, #32]
      break;
 8002890:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002892:	6a3b      	ldr	r3, [r7, #32]
}
 8002894:	4618      	mov	r0, r3
 8002896:	3728      	adds	r7, #40	; 0x28
 8002898:	46bd      	mov	sp, r7
 800289a:	bc90      	pop	{r4, r7}
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	08003664 	.word	0x08003664
 80028a4:	40021000 	.word	0x40021000
 80028a8:	007a1200 	.word	0x007a1200
 80028ac:	003d0900 	.word	0x003d0900

080028b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028b8:	4b0a      	ldr	r3, [pc, #40]	; (80028e4 <RCC_Delay+0x34>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a0a      	ldr	r2, [pc, #40]	; (80028e8 <RCC_Delay+0x38>)
 80028be:	fba2 2303 	umull	r2, r3, r2, r3
 80028c2:	0a5b      	lsrs	r3, r3, #9
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	fb02 f303 	mul.w	r3, r2, r3
 80028ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028cc:	bf00      	nop
  }
  while (Delay --);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	1e5a      	subs	r2, r3, #1
 80028d2:	60fa      	str	r2, [r7, #12]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d1f9      	bne.n	80028cc <RCC_Delay+0x1c>
}
 80028d8:	bf00      	nop
 80028da:	bf00      	nop
 80028dc:	3714      	adds	r7, #20
 80028de:	46bd      	mov	sp, r7
 80028e0:	bc80      	pop	{r7}
 80028e2:	4770      	bx	lr
 80028e4:	20000000 	.word	0x20000000
 80028e8:	10624dd3 	.word	0x10624dd3

080028ec <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80028f4:	2300      	movs	r3, #0
 80028f6:	613b      	str	r3, [r7, #16]
 80028f8:	2300      	movs	r3, #0
 80028fa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0301 	and.w	r3, r3, #1
 8002904:	2b00      	cmp	r3, #0
 8002906:	d07d      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002908:	2300      	movs	r3, #0
 800290a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800290c:	4b4f      	ldr	r3, [pc, #316]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800290e:	69db      	ldr	r3, [r3, #28]
 8002910:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d10d      	bne.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002918:	4b4c      	ldr	r3, [pc, #304]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800291a:	69db      	ldr	r3, [r3, #28]
 800291c:	4a4b      	ldr	r2, [pc, #300]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800291e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002922:	61d3      	str	r3, [r2, #28]
 8002924:	4b49      	ldr	r3, [pc, #292]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002926:	69db      	ldr	r3, [r3, #28]
 8002928:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800292c:	60bb      	str	r3, [r7, #8]
 800292e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002930:	2301      	movs	r3, #1
 8002932:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002934:	4b46      	ldr	r3, [pc, #280]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800293c:	2b00      	cmp	r3, #0
 800293e:	d118      	bne.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002940:	4b43      	ldr	r3, [pc, #268]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a42      	ldr	r2, [pc, #264]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002946:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800294a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800294c:	f7fe fb46 	bl	8000fdc <HAL_GetTick>
 8002950:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002952:	e008      	b.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002954:	f7fe fb42 	bl	8000fdc <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b64      	cmp	r3, #100	; 0x64
 8002960:	d901      	bls.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e06d      	b.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002966:	4b3a      	ldr	r3, [pc, #232]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800296e:	2b00      	cmp	r3, #0
 8002970:	d0f0      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002972:	4b36      	ldr	r3, [pc, #216]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800297a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d02e      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	429a      	cmp	r2, r3
 800298e:	d027      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002990:	4b2e      	ldr	r3, [pc, #184]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002992:	6a1b      	ldr	r3, [r3, #32]
 8002994:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002998:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800299a:	4b2e      	ldr	r3, [pc, #184]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800299c:	2201      	movs	r2, #1
 800299e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029a0:	4b2c      	ldr	r3, [pc, #176]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80029a6:	4a29      	ldr	r2, [pc, #164]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d014      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b6:	f7fe fb11 	bl	8000fdc <HAL_GetTick>
 80029ba:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029bc:	e00a      	b.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029be:	f7fe fb0d 	bl	8000fdc <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d901      	bls.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e036      	b.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029d4:	4b1d      	ldr	r3, [pc, #116]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029d6:	6a1b      	ldr	r3, [r3, #32]
 80029d8:	f003 0302 	and.w	r3, r3, #2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d0ee      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029e0:	4b1a      	ldr	r3, [pc, #104]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029e2:	6a1b      	ldr	r3, [r3, #32]
 80029e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	4917      	ldr	r1, [pc, #92]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80029f2:	7dfb      	ldrb	r3, [r7, #23]
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d105      	bne.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029f8:	4b14      	ldr	r3, [pc, #80]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029fa:	69db      	ldr	r3, [r3, #28]
 80029fc:	4a13      	ldr	r2, [pc, #76]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a02:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d008      	beq.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a10:	4b0e      	ldr	r3, [pc, #56]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	490b      	ldr	r1, [pc, #44]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0310 	and.w	r3, r3, #16
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d008      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a2e:	4b07      	ldr	r3, [pc, #28]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	4904      	ldr	r1, [pc, #16]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3718      	adds	r7, #24
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	40007000 	.word	0x40007000
 8002a54:	42420440 	.word	0x42420440

08002a58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e041      	b.n	8002aee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d106      	bne.n	8002a84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f7fe f93c 	bl	8000cfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2202      	movs	r2, #2
 8002a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	3304      	adds	r3, #4
 8002a94:	4619      	mov	r1, r3
 8002a96:	4610      	mov	r0, r2
 8002a98:	f000 faaa 	bl	8002ff0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}

08002af6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002af6:	b580      	push	{r7, lr}
 8002af8:	b082      	sub	sp, #8
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d101      	bne.n	8002b08 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e041      	b.n	8002b8c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d106      	bne.n	8002b22 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f000 f839 	bl	8002b94 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2202      	movs	r2, #2
 8002b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	3304      	adds	r3, #4
 8002b32:	4619      	mov	r1, r3
 8002b34:	4610      	mov	r0, r2
 8002b36:	f000 fa5b 	bl	8002ff0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2201      	movs	r2, #1
 8002b46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2201      	movs	r2, #1
 8002b56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2201      	movs	r2, #1
 8002b66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2201      	movs	r2, #1
 8002b76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2201      	movs	r2, #1
 8002b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3708      	adds	r7, #8
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002b9c:	bf00      	nop
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bc80      	pop	{r7}
 8002ba4:	4770      	bx	lr
	...

08002ba8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d109      	bne.n	8002bcc <HAL_TIM_PWM_Start+0x24>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	bf14      	ite	ne
 8002bc4:	2301      	movne	r3, #1
 8002bc6:	2300      	moveq	r3, #0
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	e022      	b.n	8002c12 <HAL_TIM_PWM_Start+0x6a>
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	2b04      	cmp	r3, #4
 8002bd0:	d109      	bne.n	8002be6 <HAL_TIM_PWM_Start+0x3e>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	bf14      	ite	ne
 8002bde:	2301      	movne	r3, #1
 8002be0:	2300      	moveq	r3, #0
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	e015      	b.n	8002c12 <HAL_TIM_PWM_Start+0x6a>
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	2b08      	cmp	r3, #8
 8002bea:	d109      	bne.n	8002c00 <HAL_TIM_PWM_Start+0x58>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	bf14      	ite	ne
 8002bf8:	2301      	movne	r3, #1
 8002bfa:	2300      	moveq	r3, #0
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	e008      	b.n	8002c12 <HAL_TIM_PWM_Start+0x6a>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	bf14      	ite	ne
 8002c0c:	2301      	movne	r3, #1
 8002c0e:	2300      	moveq	r3, #0
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d001      	beq.n	8002c1a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e05e      	b.n	8002cd8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d104      	bne.n	8002c2a <HAL_TIM_PWM_Start+0x82>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2202      	movs	r2, #2
 8002c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c28:	e013      	b.n	8002c52 <HAL_TIM_PWM_Start+0xaa>
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	2b04      	cmp	r3, #4
 8002c2e:	d104      	bne.n	8002c3a <HAL_TIM_PWM_Start+0x92>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2202      	movs	r2, #2
 8002c34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c38:	e00b      	b.n	8002c52 <HAL_TIM_PWM_Start+0xaa>
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	2b08      	cmp	r3, #8
 8002c3e:	d104      	bne.n	8002c4a <HAL_TIM_PWM_Start+0xa2>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2202      	movs	r2, #2
 8002c44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c48:	e003      	b.n	8002c52 <HAL_TIM_PWM_Start+0xaa>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2202      	movs	r2, #2
 8002c4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2201      	movs	r2, #1
 8002c58:	6839      	ldr	r1, [r7, #0]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f000 fc48 	bl	80034f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a1e      	ldr	r2, [pc, #120]	; (8002ce0 <HAL_TIM_PWM_Start+0x138>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d107      	bne.n	8002c7a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c78:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a18      	ldr	r2, [pc, #96]	; (8002ce0 <HAL_TIM_PWM_Start+0x138>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d00e      	beq.n	8002ca2 <HAL_TIM_PWM_Start+0xfa>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c8c:	d009      	beq.n	8002ca2 <HAL_TIM_PWM_Start+0xfa>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a14      	ldr	r2, [pc, #80]	; (8002ce4 <HAL_TIM_PWM_Start+0x13c>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d004      	beq.n	8002ca2 <HAL_TIM_PWM_Start+0xfa>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a12      	ldr	r2, [pc, #72]	; (8002ce8 <HAL_TIM_PWM_Start+0x140>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d111      	bne.n	8002cc6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f003 0307 	and.w	r3, r3, #7
 8002cac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2b06      	cmp	r3, #6
 8002cb2:	d010      	beq.n	8002cd6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f042 0201 	orr.w	r2, r2, #1
 8002cc2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cc4:	e007      	b.n	8002cd6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f042 0201 	orr.w	r2, r2, #1
 8002cd4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3710      	adds	r7, #16
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	40012c00 	.word	0x40012c00
 8002ce4:	40000400 	.word	0x40000400
 8002ce8:	40000800 	.word	0x40000800

08002cec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d101      	bne.n	8002d06 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002d02:	2302      	movs	r3, #2
 8002d04:	e0ac      	b.n	8002e60 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2b0c      	cmp	r3, #12
 8002d12:	f200 809f 	bhi.w	8002e54 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002d16:	a201      	add	r2, pc, #4	; (adr r2, 8002d1c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d1c:	08002d51 	.word	0x08002d51
 8002d20:	08002e55 	.word	0x08002e55
 8002d24:	08002e55 	.word	0x08002e55
 8002d28:	08002e55 	.word	0x08002e55
 8002d2c:	08002d91 	.word	0x08002d91
 8002d30:	08002e55 	.word	0x08002e55
 8002d34:	08002e55 	.word	0x08002e55
 8002d38:	08002e55 	.word	0x08002e55
 8002d3c:	08002dd3 	.word	0x08002dd3
 8002d40:	08002e55 	.word	0x08002e55
 8002d44:	08002e55 	.word	0x08002e55
 8002d48:	08002e55 	.word	0x08002e55
 8002d4c:	08002e13 	.word	0x08002e13
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68b9      	ldr	r1, [r7, #8]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f000 f9ac 	bl	80030b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	699a      	ldr	r2, [r3, #24]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f042 0208 	orr.w	r2, r2, #8
 8002d6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	699a      	ldr	r2, [r3, #24]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f022 0204 	bic.w	r2, r2, #4
 8002d7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	6999      	ldr	r1, [r3, #24]
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	691a      	ldr	r2, [r3, #16]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	619a      	str	r2, [r3, #24]
      break;
 8002d8e:	e062      	b.n	8002e56 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	68b9      	ldr	r1, [r7, #8]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f000 f9f2 	bl	8003180 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	699a      	ldr	r2, [r3, #24]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002daa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	699a      	ldr	r2, [r3, #24]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	6999      	ldr	r1, [r3, #24]
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	021a      	lsls	r2, r3, #8
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	619a      	str	r2, [r3, #24]
      break;
 8002dd0:	e041      	b.n	8002e56 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	68b9      	ldr	r1, [r7, #8]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f000 fa3b 	bl	8003254 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	69da      	ldr	r2, [r3, #28]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f042 0208 	orr.w	r2, r2, #8
 8002dec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	69da      	ldr	r2, [r3, #28]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f022 0204 	bic.w	r2, r2, #4
 8002dfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	69d9      	ldr	r1, [r3, #28]
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	691a      	ldr	r2, [r3, #16]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	61da      	str	r2, [r3, #28]
      break;
 8002e10:	e021      	b.n	8002e56 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68b9      	ldr	r1, [r7, #8]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f000 fa85 	bl	8003328 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	69da      	ldr	r2, [r3, #28]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	69da      	ldr	r2, [r3, #28]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	69d9      	ldr	r1, [r3, #28]
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	691b      	ldr	r3, [r3, #16]
 8002e48:	021a      	lsls	r2, r3, #8
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	61da      	str	r2, [r3, #28]
      break;
 8002e52:	e000      	b.n	8002e56 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002e54:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3710      	adds	r7, #16
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d101      	bne.n	8002e80 <HAL_TIM_ConfigClockSource+0x18>
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	e0b3      	b.n	8002fe8 <HAL_TIM_ConfigClockSource+0x180>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2202      	movs	r2, #2
 8002e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e9e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ea6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68fa      	ldr	r2, [r7, #12]
 8002eae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eb8:	d03e      	beq.n	8002f38 <HAL_TIM_ConfigClockSource+0xd0>
 8002eba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ebe:	f200 8087 	bhi.w	8002fd0 <HAL_TIM_ConfigClockSource+0x168>
 8002ec2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ec6:	f000 8085 	beq.w	8002fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8002eca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ece:	d87f      	bhi.n	8002fd0 <HAL_TIM_ConfigClockSource+0x168>
 8002ed0:	2b70      	cmp	r3, #112	; 0x70
 8002ed2:	d01a      	beq.n	8002f0a <HAL_TIM_ConfigClockSource+0xa2>
 8002ed4:	2b70      	cmp	r3, #112	; 0x70
 8002ed6:	d87b      	bhi.n	8002fd0 <HAL_TIM_ConfigClockSource+0x168>
 8002ed8:	2b60      	cmp	r3, #96	; 0x60
 8002eda:	d050      	beq.n	8002f7e <HAL_TIM_ConfigClockSource+0x116>
 8002edc:	2b60      	cmp	r3, #96	; 0x60
 8002ede:	d877      	bhi.n	8002fd0 <HAL_TIM_ConfigClockSource+0x168>
 8002ee0:	2b50      	cmp	r3, #80	; 0x50
 8002ee2:	d03c      	beq.n	8002f5e <HAL_TIM_ConfigClockSource+0xf6>
 8002ee4:	2b50      	cmp	r3, #80	; 0x50
 8002ee6:	d873      	bhi.n	8002fd0 <HAL_TIM_ConfigClockSource+0x168>
 8002ee8:	2b40      	cmp	r3, #64	; 0x40
 8002eea:	d058      	beq.n	8002f9e <HAL_TIM_ConfigClockSource+0x136>
 8002eec:	2b40      	cmp	r3, #64	; 0x40
 8002eee:	d86f      	bhi.n	8002fd0 <HAL_TIM_ConfigClockSource+0x168>
 8002ef0:	2b30      	cmp	r3, #48	; 0x30
 8002ef2:	d064      	beq.n	8002fbe <HAL_TIM_ConfigClockSource+0x156>
 8002ef4:	2b30      	cmp	r3, #48	; 0x30
 8002ef6:	d86b      	bhi.n	8002fd0 <HAL_TIM_ConfigClockSource+0x168>
 8002ef8:	2b20      	cmp	r3, #32
 8002efa:	d060      	beq.n	8002fbe <HAL_TIM_ConfigClockSource+0x156>
 8002efc:	2b20      	cmp	r3, #32
 8002efe:	d867      	bhi.n	8002fd0 <HAL_TIM_ConfigClockSource+0x168>
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d05c      	beq.n	8002fbe <HAL_TIM_ConfigClockSource+0x156>
 8002f04:	2b10      	cmp	r3, #16
 8002f06:	d05a      	beq.n	8002fbe <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002f08:	e062      	b.n	8002fd0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6818      	ldr	r0, [r3, #0]
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	6899      	ldr	r1, [r3, #8]
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	685a      	ldr	r2, [r3, #4]
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	f000 faca 	bl	80034b2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f2c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68fa      	ldr	r2, [r7, #12]
 8002f34:	609a      	str	r2, [r3, #8]
      break;
 8002f36:	e04e      	b.n	8002fd6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6818      	ldr	r0, [r3, #0]
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	6899      	ldr	r1, [r3, #8]
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	685a      	ldr	r2, [r3, #4]
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	f000 fab3 	bl	80034b2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	689a      	ldr	r2, [r3, #8]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f5a:	609a      	str	r2, [r3, #8]
      break;
 8002f5c:	e03b      	b.n	8002fd6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6818      	ldr	r0, [r3, #0]
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	6859      	ldr	r1, [r3, #4]
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	f000 fa2a 	bl	80033c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2150      	movs	r1, #80	; 0x50
 8002f76:	4618      	mov	r0, r3
 8002f78:	f000 fa81 	bl	800347e <TIM_ITRx_SetConfig>
      break;
 8002f7c:	e02b      	b.n	8002fd6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6818      	ldr	r0, [r3, #0]
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	6859      	ldr	r1, [r3, #4]
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	f000 fa48 	bl	8003420 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2160      	movs	r1, #96	; 0x60
 8002f96:	4618      	mov	r0, r3
 8002f98:	f000 fa71 	bl	800347e <TIM_ITRx_SetConfig>
      break;
 8002f9c:	e01b      	b.n	8002fd6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6818      	ldr	r0, [r3, #0]
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	6859      	ldr	r1, [r3, #4]
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	461a      	mov	r2, r3
 8002fac:	f000 fa0a 	bl	80033c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2140      	movs	r1, #64	; 0x40
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f000 fa61 	bl	800347e <TIM_ITRx_SetConfig>
      break;
 8002fbc:	e00b      	b.n	8002fd6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	4610      	mov	r0, r2
 8002fca:	f000 fa58 	bl	800347e <TIM_ITRx_SetConfig>
        break;
 8002fce:	e002      	b.n	8002fd6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002fd0:	bf00      	nop
 8002fd2:	e000      	b.n	8002fd6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002fd4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fe6:	2300      	movs	r3, #0
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3710      	adds	r7, #16
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b085      	sub	sp, #20
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4a29      	ldr	r2, [pc, #164]	; (80030a8 <TIM_Base_SetConfig+0xb8>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d00b      	beq.n	8003020 <TIM_Base_SetConfig+0x30>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800300e:	d007      	beq.n	8003020 <TIM_Base_SetConfig+0x30>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4a26      	ldr	r2, [pc, #152]	; (80030ac <TIM_Base_SetConfig+0xbc>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d003      	beq.n	8003020 <TIM_Base_SetConfig+0x30>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4a25      	ldr	r2, [pc, #148]	; (80030b0 <TIM_Base_SetConfig+0xc0>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d108      	bne.n	8003032 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003026:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	68fa      	ldr	r2, [r7, #12]
 800302e:	4313      	orrs	r3, r2
 8003030:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a1c      	ldr	r2, [pc, #112]	; (80030a8 <TIM_Base_SetConfig+0xb8>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d00b      	beq.n	8003052 <TIM_Base_SetConfig+0x62>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003040:	d007      	beq.n	8003052 <TIM_Base_SetConfig+0x62>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a19      	ldr	r2, [pc, #100]	; (80030ac <TIM_Base_SetConfig+0xbc>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d003      	beq.n	8003052 <TIM_Base_SetConfig+0x62>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a18      	ldr	r2, [pc, #96]	; (80030b0 <TIM_Base_SetConfig+0xc0>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d108      	bne.n	8003064 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003058:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	68fa      	ldr	r2, [r7, #12]
 8003060:	4313      	orrs	r3, r2
 8003062:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	4313      	orrs	r3, r2
 8003070:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	68fa      	ldr	r2, [r7, #12]
 8003076:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	689a      	ldr	r2, [r3, #8]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4a07      	ldr	r2, [pc, #28]	; (80030a8 <TIM_Base_SetConfig+0xb8>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d103      	bne.n	8003098 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	691a      	ldr	r2, [r3, #16]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	615a      	str	r2, [r3, #20]
}
 800309e:	bf00      	nop
 80030a0:	3714      	adds	r7, #20
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bc80      	pop	{r7}
 80030a6:	4770      	bx	lr
 80030a8:	40012c00 	.word	0x40012c00
 80030ac:	40000400 	.word	0x40000400
 80030b0:	40000800 	.word	0x40000800

080030b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b087      	sub	sp, #28
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a1b      	ldr	r3, [r3, #32]
 80030c2:	f023 0201 	bic.w	r2, r3, #1
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a1b      	ldr	r3, [r3, #32]
 80030ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f023 0303 	bic.w	r3, r3, #3
 80030ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	68fa      	ldr	r2, [r7, #12]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	f023 0302 	bic.w	r3, r3, #2
 80030fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	697a      	ldr	r2, [r7, #20]
 8003104:	4313      	orrs	r3, r2
 8003106:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4a1c      	ldr	r2, [pc, #112]	; (800317c <TIM_OC1_SetConfig+0xc8>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d10c      	bne.n	800312a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	f023 0308 	bic.w	r3, r3, #8
 8003116:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	697a      	ldr	r2, [r7, #20]
 800311e:	4313      	orrs	r3, r2
 8003120:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	f023 0304 	bic.w	r3, r3, #4
 8003128:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a13      	ldr	r2, [pc, #76]	; (800317c <TIM_OC1_SetConfig+0xc8>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d111      	bne.n	8003156 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003138:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003140:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	693a      	ldr	r2, [r7, #16]
 8003148:	4313      	orrs	r3, r2
 800314a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	693a      	ldr	r2, [r7, #16]
 8003152:	4313      	orrs	r3, r2
 8003154:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	693a      	ldr	r2, [r7, #16]
 800315a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	68fa      	ldr	r2, [r7, #12]
 8003160:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	685a      	ldr	r2, [r3, #4]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	697a      	ldr	r2, [r7, #20]
 800316e:	621a      	str	r2, [r3, #32]
}
 8003170:	bf00      	nop
 8003172:	371c      	adds	r7, #28
 8003174:	46bd      	mov	sp, r7
 8003176:	bc80      	pop	{r7}
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	40012c00 	.word	0x40012c00

08003180 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003180:	b480      	push	{r7}
 8003182:	b087      	sub	sp, #28
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	f023 0210 	bic.w	r2, r3, #16
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a1b      	ldr	r3, [r3, #32]
 800319a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	699b      	ldr	r3, [r3, #24]
 80031a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	021b      	lsls	r3, r3, #8
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	f023 0320 	bic.w	r3, r3, #32
 80031ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	011b      	lsls	r3, r3, #4
 80031d2:	697a      	ldr	r2, [r7, #20]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a1d      	ldr	r2, [pc, #116]	; (8003250 <TIM_OC2_SetConfig+0xd0>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d10d      	bne.n	80031fc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	011b      	lsls	r3, r3, #4
 80031ee:	697a      	ldr	r2, [r7, #20]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4a14      	ldr	r2, [pc, #80]	; (8003250 <TIM_OC2_SetConfig+0xd0>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d113      	bne.n	800322c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800320a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003212:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	695b      	ldr	r3, [r3, #20]
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	693a      	ldr	r2, [r7, #16]
 800321c:	4313      	orrs	r3, r2
 800321e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	699b      	ldr	r3, [r3, #24]
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	693a      	ldr	r2, [r7, #16]
 8003228:	4313      	orrs	r3, r2
 800322a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	693a      	ldr	r2, [r7, #16]
 8003230:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	68fa      	ldr	r2, [r7, #12]
 8003236:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685a      	ldr	r2, [r3, #4]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	697a      	ldr	r2, [r7, #20]
 8003244:	621a      	str	r2, [r3, #32]
}
 8003246:	bf00      	nop
 8003248:	371c      	adds	r7, #28
 800324a:	46bd      	mov	sp, r7
 800324c:	bc80      	pop	{r7}
 800324e:	4770      	bx	lr
 8003250:	40012c00 	.word	0x40012c00

08003254 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003254:	b480      	push	{r7}
 8003256:	b087      	sub	sp, #28
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a1b      	ldr	r3, [r3, #32]
 8003262:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a1b      	ldr	r3, [r3, #32]
 800326e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	69db      	ldr	r3, [r3, #28]
 800327a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003282:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f023 0303 	bic.w	r3, r3, #3
 800328a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	68fa      	ldr	r2, [r7, #12]
 8003292:	4313      	orrs	r3, r2
 8003294:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800329c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	021b      	lsls	r3, r3, #8
 80032a4:	697a      	ldr	r2, [r7, #20]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a1d      	ldr	r2, [pc, #116]	; (8003324 <TIM_OC3_SetConfig+0xd0>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d10d      	bne.n	80032ce <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80032b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	021b      	lsls	r3, r3, #8
 80032c0:	697a      	ldr	r2, [r7, #20]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a14      	ldr	r2, [pc, #80]	; (8003324 <TIM_OC3_SetConfig+0xd0>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d113      	bne.n	80032fe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	695b      	ldr	r3, [r3, #20]
 80032ea:	011b      	lsls	r3, r3, #4
 80032ec:	693a      	ldr	r2, [r7, #16]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	011b      	lsls	r3, r3, #4
 80032f8:	693a      	ldr	r2, [r7, #16]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	693a      	ldr	r2, [r7, #16]
 8003302:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	685a      	ldr	r2, [r3, #4]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	697a      	ldr	r2, [r7, #20]
 8003316:	621a      	str	r2, [r3, #32]
}
 8003318:	bf00      	nop
 800331a:	371c      	adds	r7, #28
 800331c:	46bd      	mov	sp, r7
 800331e:	bc80      	pop	{r7}
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	40012c00 	.word	0x40012c00

08003328 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003328:	b480      	push	{r7}
 800332a:	b087      	sub	sp, #28
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a1b      	ldr	r3, [r3, #32]
 8003336:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a1b      	ldr	r3, [r3, #32]
 8003342:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	69db      	ldr	r3, [r3, #28]
 800334e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003356:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800335e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	021b      	lsls	r3, r3, #8
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	4313      	orrs	r3, r2
 800336a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003372:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	031b      	lsls	r3, r3, #12
 800337a:	693a      	ldr	r2, [r7, #16]
 800337c:	4313      	orrs	r3, r2
 800337e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a0f      	ldr	r2, [pc, #60]	; (80033c0 <TIM_OC4_SetConfig+0x98>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d109      	bne.n	800339c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800338e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	695b      	ldr	r3, [r3, #20]
 8003394:	019b      	lsls	r3, r3, #6
 8003396:	697a      	ldr	r2, [r7, #20]
 8003398:	4313      	orrs	r3, r2
 800339a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	697a      	ldr	r2, [r7, #20]
 80033a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	68fa      	ldr	r2, [r7, #12]
 80033a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	685a      	ldr	r2, [r3, #4]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	621a      	str	r2, [r3, #32]
}
 80033b6:	bf00      	nop
 80033b8:	371c      	adds	r7, #28
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bc80      	pop	{r7}
 80033be:	4770      	bx	lr
 80033c0:	40012c00 	.word	0x40012c00

080033c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b087      	sub	sp, #28
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6a1b      	ldr	r3, [r3, #32]
 80033d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6a1b      	ldr	r3, [r3, #32]
 80033da:	f023 0201 	bic.w	r2, r3, #1
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	699b      	ldr	r3, [r3, #24]
 80033e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	011b      	lsls	r3, r3, #4
 80033f4:	693a      	ldr	r2, [r7, #16]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	f023 030a 	bic.w	r3, r3, #10
 8003400:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003402:	697a      	ldr	r2, [r7, #20]
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	4313      	orrs	r3, r2
 8003408:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	693a      	ldr	r2, [r7, #16]
 800340e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	697a      	ldr	r2, [r7, #20]
 8003414:	621a      	str	r2, [r3, #32]
}
 8003416:	bf00      	nop
 8003418:	371c      	adds	r7, #28
 800341a:	46bd      	mov	sp, r7
 800341c:	bc80      	pop	{r7}
 800341e:	4770      	bx	lr

08003420 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003420:	b480      	push	{r7}
 8003422:	b087      	sub	sp, #28
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6a1b      	ldr	r3, [r3, #32]
 8003430:	f023 0210 	bic.w	r2, r3, #16
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	699b      	ldr	r3, [r3, #24]
 800343c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6a1b      	ldr	r3, [r3, #32]
 8003442:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800344a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	031b      	lsls	r3, r3, #12
 8003450:	697a      	ldr	r2, [r7, #20]
 8003452:	4313      	orrs	r3, r2
 8003454:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800345c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	011b      	lsls	r3, r3, #4
 8003462:	693a      	ldr	r2, [r7, #16]
 8003464:	4313      	orrs	r3, r2
 8003466:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	697a      	ldr	r2, [r7, #20]
 800346c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	693a      	ldr	r2, [r7, #16]
 8003472:	621a      	str	r2, [r3, #32]
}
 8003474:	bf00      	nop
 8003476:	371c      	adds	r7, #28
 8003478:	46bd      	mov	sp, r7
 800347a:	bc80      	pop	{r7}
 800347c:	4770      	bx	lr

0800347e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800347e:	b480      	push	{r7}
 8003480:	b085      	sub	sp, #20
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
 8003486:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003494:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003496:	683a      	ldr	r2, [r7, #0]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	4313      	orrs	r3, r2
 800349c:	f043 0307 	orr.w	r3, r3, #7
 80034a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	68fa      	ldr	r2, [r7, #12]
 80034a6:	609a      	str	r2, [r3, #8]
}
 80034a8:	bf00      	nop
 80034aa:	3714      	adds	r7, #20
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bc80      	pop	{r7}
 80034b0:	4770      	bx	lr

080034b2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034b2:	b480      	push	{r7}
 80034b4:	b087      	sub	sp, #28
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	60f8      	str	r0, [r7, #12]
 80034ba:	60b9      	str	r1, [r7, #8]
 80034bc:	607a      	str	r2, [r7, #4]
 80034be:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034cc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	021a      	lsls	r2, r3, #8
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	431a      	orrs	r2, r3
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	4313      	orrs	r3, r2
 80034da:	697a      	ldr	r2, [r7, #20]
 80034dc:	4313      	orrs	r3, r2
 80034de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	697a      	ldr	r2, [r7, #20]
 80034e4:	609a      	str	r2, [r3, #8]
}
 80034e6:	bf00      	nop
 80034e8:	371c      	adds	r7, #28
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bc80      	pop	{r7}
 80034ee:	4770      	bx	lr

080034f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b087      	sub	sp, #28
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	f003 031f 	and.w	r3, r3, #31
 8003502:	2201      	movs	r2, #1
 8003504:	fa02 f303 	lsl.w	r3, r2, r3
 8003508:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6a1a      	ldr	r2, [r3, #32]
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	43db      	mvns	r3, r3
 8003512:	401a      	ands	r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6a1a      	ldr	r2, [r3, #32]
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	f003 031f 	and.w	r3, r3, #31
 8003522:	6879      	ldr	r1, [r7, #4]
 8003524:	fa01 f303 	lsl.w	r3, r1, r3
 8003528:	431a      	orrs	r2, r3
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	621a      	str	r2, [r3, #32]
}
 800352e:	bf00      	nop
 8003530:	371c      	adds	r7, #28
 8003532:	46bd      	mov	sp, r7
 8003534:	bc80      	pop	{r7}
 8003536:	4770      	bx	lr

08003538 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003538:	b480      	push	{r7}
 800353a:	b085      	sub	sp, #20
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003548:	2b01      	cmp	r3, #1
 800354a:	d101      	bne.n	8003550 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800354c:	2302      	movs	r3, #2
 800354e:	e046      	b.n	80035de <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2202      	movs	r2, #2
 800355c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003576:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68fa      	ldr	r2, [r7, #12]
 800357e:	4313      	orrs	r3, r2
 8003580:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a16      	ldr	r2, [pc, #88]	; (80035e8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d00e      	beq.n	80035b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800359c:	d009      	beq.n	80035b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a12      	ldr	r2, [pc, #72]	; (80035ec <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d004      	beq.n	80035b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a10      	ldr	r2, [pc, #64]	; (80035f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d10c      	bne.n	80035cc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	68ba      	ldr	r2, [r7, #8]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68ba      	ldr	r2, [r7, #8]
 80035ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3714      	adds	r7, #20
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bc80      	pop	{r7}
 80035e6:	4770      	bx	lr
 80035e8:	40012c00 	.word	0x40012c00
 80035ec:	40000400 	.word	0x40000400
 80035f0:	40000800 	.word	0x40000800

080035f4 <__libc_init_array>:
 80035f4:	b570      	push	{r4, r5, r6, lr}
 80035f6:	2600      	movs	r6, #0
 80035f8:	4d0c      	ldr	r5, [pc, #48]	; (800362c <__libc_init_array+0x38>)
 80035fa:	4c0d      	ldr	r4, [pc, #52]	; (8003630 <__libc_init_array+0x3c>)
 80035fc:	1b64      	subs	r4, r4, r5
 80035fe:	10a4      	asrs	r4, r4, #2
 8003600:	42a6      	cmp	r6, r4
 8003602:	d109      	bne.n	8003618 <__libc_init_array+0x24>
 8003604:	f000 f822 	bl	800364c <_init>
 8003608:	2600      	movs	r6, #0
 800360a:	4d0a      	ldr	r5, [pc, #40]	; (8003634 <__libc_init_array+0x40>)
 800360c:	4c0a      	ldr	r4, [pc, #40]	; (8003638 <__libc_init_array+0x44>)
 800360e:	1b64      	subs	r4, r4, r5
 8003610:	10a4      	asrs	r4, r4, #2
 8003612:	42a6      	cmp	r6, r4
 8003614:	d105      	bne.n	8003622 <__libc_init_array+0x2e>
 8003616:	bd70      	pop	{r4, r5, r6, pc}
 8003618:	f855 3b04 	ldr.w	r3, [r5], #4
 800361c:	4798      	blx	r3
 800361e:	3601      	adds	r6, #1
 8003620:	e7ee      	b.n	8003600 <__libc_init_array+0xc>
 8003622:	f855 3b04 	ldr.w	r3, [r5], #4
 8003626:	4798      	blx	r3
 8003628:	3601      	adds	r6, #1
 800362a:	e7f2      	b.n	8003612 <__libc_init_array+0x1e>
 800362c:	08003684 	.word	0x08003684
 8003630:	08003684 	.word	0x08003684
 8003634:	08003684 	.word	0x08003684
 8003638:	08003688 	.word	0x08003688

0800363c <memset>:
 800363c:	4603      	mov	r3, r0
 800363e:	4402      	add	r2, r0
 8003640:	4293      	cmp	r3, r2
 8003642:	d100      	bne.n	8003646 <memset+0xa>
 8003644:	4770      	bx	lr
 8003646:	f803 1b01 	strb.w	r1, [r3], #1
 800364a:	e7f9      	b.n	8003640 <memset+0x4>

0800364c <_init>:
 800364c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800364e:	bf00      	nop
 8003650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003652:	bc08      	pop	{r3}
 8003654:	469e      	mov	lr, r3
 8003656:	4770      	bx	lr

08003658 <_fini>:
 8003658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800365a:	bf00      	nop
 800365c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800365e:	bc08      	pop	{r3}
 8003660:	469e      	mov	lr, r3
 8003662:	4770      	bx	lr
