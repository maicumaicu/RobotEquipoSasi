
RobotAlgoritmoSasi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae54  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a8  0800af68  0800af68  0001af68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b310  0800b310  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  0800b310  0800b310  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b310  0800b310  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b310  0800b310  0001b310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b314  0800b314  0001b314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800b318  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000042e4  20000088  0800b3a0  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000436c  0800b3a0  0002436c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eca0  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000235f  00000000  00000000  0002ed51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f40  00000000  00000000  000310b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e40  00000000  00000000  00031ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019d10  00000000  00000000  00032e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012a57  00000000  00000000  0004cb40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000928cf  00000000  00000000  0005f597  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f1e66  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f88  00000000  00000000  000f1eb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000088 	.word	0x20000088
 800012c:	00000000 	.word	0x00000000
 8000130:	0800af4c 	.word	0x0800af4c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000008c 	.word	0x2000008c
 800014c:	0800af4c 	.word	0x0800af4c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2uiz>:
 8000a28:	004a      	lsls	r2, r1, #1
 8000a2a:	d211      	bcs.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d211      	bcs.n	8000a56 <__aeabi_d2uiz+0x2e>
 8000a32:	d50d      	bpl.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d40e      	bmi.n	8000a5c <__aeabi_d2uiz+0x34>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4e:	4770      	bx	lr
 8000a50:	f04f 0000 	mov.w	r0, #0
 8000a54:	4770      	bx	lr
 8000a56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_d2uiz+0x3a>
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0000 	mov.w	r0, #0
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2f>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a70:	bf24      	itt	cs
 8000a72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a7a:	d90d      	bls.n	8000a98 <__aeabi_d2f+0x30>
 8000a7c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a88:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a90:	bf08      	it	eq
 8000a92:	f020 0001 	biceq.w	r0, r0, #1
 8000a96:	4770      	bx	lr
 8000a98:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a9c:	d121      	bne.n	8000ae2 <__aeabi_d2f+0x7a>
 8000a9e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aa2:	bfbc      	itt	lt
 8000aa4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	4770      	bxlt	lr
 8000aaa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab2:	f1c2 0218 	rsb	r2, r2, #24
 8000ab6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aba:	fa10 f30c 	lsls.w	r3, r0, ip
 8000abe:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac2:	bf18      	it	ne
 8000ac4:	f040 0001 	orrne.w	r0, r0, #1
 8000ac8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000acc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad4:	ea40 000c 	orr.w	r0, r0, ip
 8000ad8:	fa23 f302 	lsr.w	r3, r3, r2
 8000adc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae0:	e7cc      	b.n	8000a7c <__aeabi_d2f+0x14>
 8000ae2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ae6:	d107      	bne.n	8000af8 <__aeabi_d2f+0x90>
 8000ae8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aec:	bf1e      	ittt	ne
 8000aee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000af2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000af6:	4770      	bxne	lr
 8000af8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000afc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_frsub>:
 8000b08:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b0c:	e002      	b.n	8000b14 <__addsf3>
 8000b0e:	bf00      	nop

08000b10 <__aeabi_fsub>:
 8000b10:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b14 <__addsf3>:
 8000b14:	0042      	lsls	r2, r0, #1
 8000b16:	bf1f      	itttt	ne
 8000b18:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b1c:	ea92 0f03 	teqne	r2, r3
 8000b20:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b24:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b28:	d06a      	beq.n	8000c00 <__addsf3+0xec>
 8000b2a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b2e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b32:	bfc1      	itttt	gt
 8000b34:	18d2      	addgt	r2, r2, r3
 8000b36:	4041      	eorgt	r1, r0
 8000b38:	4048      	eorgt	r0, r1
 8000b3a:	4041      	eorgt	r1, r0
 8000b3c:	bfb8      	it	lt
 8000b3e:	425b      	neglt	r3, r3
 8000b40:	2b19      	cmp	r3, #25
 8000b42:	bf88      	it	hi
 8000b44:	4770      	bxhi	lr
 8000b46:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b52:	bf18      	it	ne
 8000b54:	4240      	negne	r0, r0
 8000b56:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b5a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b5e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4249      	negne	r1, r1
 8000b66:	ea92 0f03 	teq	r2, r3
 8000b6a:	d03f      	beq.n	8000bec <__addsf3+0xd8>
 8000b6c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b70:	fa41 fc03 	asr.w	ip, r1, r3
 8000b74:	eb10 000c 	adds.w	r0, r0, ip
 8000b78:	f1c3 0320 	rsb	r3, r3, #32
 8000b7c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b80:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b84:	d502      	bpl.n	8000b8c <__addsf3+0x78>
 8000b86:	4249      	negs	r1, r1
 8000b88:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b8c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b90:	d313      	bcc.n	8000bba <__addsf3+0xa6>
 8000b92:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b96:	d306      	bcc.n	8000ba6 <__addsf3+0x92>
 8000b98:	0840      	lsrs	r0, r0, #1
 8000b9a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b9e:	f102 0201 	add.w	r2, r2, #1
 8000ba2:	2afe      	cmp	r2, #254	; 0xfe
 8000ba4:	d251      	bcs.n	8000c4a <__addsf3+0x136>
 8000ba6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000baa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bae:	bf08      	it	eq
 8000bb0:	f020 0001 	biceq.w	r0, r0, #1
 8000bb4:	ea40 0003 	orr.w	r0, r0, r3
 8000bb8:	4770      	bx	lr
 8000bba:	0049      	lsls	r1, r1, #1
 8000bbc:	eb40 0000 	adc.w	r0, r0, r0
 8000bc0:	3a01      	subs	r2, #1
 8000bc2:	bf28      	it	cs
 8000bc4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bc8:	d2ed      	bcs.n	8000ba6 <__addsf3+0x92>
 8000bca:	fab0 fc80 	clz	ip, r0
 8000bce:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bd2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bd6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bda:	bfaa      	itet	ge
 8000bdc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000be0:	4252      	neglt	r2, r2
 8000be2:	4318      	orrge	r0, r3
 8000be4:	bfbc      	itt	lt
 8000be6:	40d0      	lsrlt	r0, r2
 8000be8:	4318      	orrlt	r0, r3
 8000bea:	4770      	bx	lr
 8000bec:	f092 0f00 	teq	r2, #0
 8000bf0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bf4:	bf06      	itte	eq
 8000bf6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bfa:	3201      	addeq	r2, #1
 8000bfc:	3b01      	subne	r3, #1
 8000bfe:	e7b5      	b.n	8000b6c <__addsf3+0x58>
 8000c00:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c04:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c08:	bf18      	it	ne
 8000c0a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c0e:	d021      	beq.n	8000c54 <__addsf3+0x140>
 8000c10:	ea92 0f03 	teq	r2, r3
 8000c14:	d004      	beq.n	8000c20 <__addsf3+0x10c>
 8000c16:	f092 0f00 	teq	r2, #0
 8000c1a:	bf08      	it	eq
 8000c1c:	4608      	moveq	r0, r1
 8000c1e:	4770      	bx	lr
 8000c20:	ea90 0f01 	teq	r0, r1
 8000c24:	bf1c      	itt	ne
 8000c26:	2000      	movne	r0, #0
 8000c28:	4770      	bxne	lr
 8000c2a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c2e:	d104      	bne.n	8000c3a <__addsf3+0x126>
 8000c30:	0040      	lsls	r0, r0, #1
 8000c32:	bf28      	it	cs
 8000c34:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c38:	4770      	bx	lr
 8000c3a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c3e:	bf3c      	itt	cc
 8000c40:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bxcc	lr
 8000c46:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c4a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c4e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c52:	4770      	bx	lr
 8000c54:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c58:	bf16      	itet	ne
 8000c5a:	4608      	movne	r0, r1
 8000c5c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c60:	4601      	movne	r1, r0
 8000c62:	0242      	lsls	r2, r0, #9
 8000c64:	bf06      	itte	eq
 8000c66:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c6a:	ea90 0f01 	teqeq	r0, r1
 8000c6e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c72:	4770      	bx	lr

08000c74 <__aeabi_ui2f>:
 8000c74:	f04f 0300 	mov.w	r3, #0
 8000c78:	e004      	b.n	8000c84 <__aeabi_i2f+0x8>
 8000c7a:	bf00      	nop

08000c7c <__aeabi_i2f>:
 8000c7c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c80:	bf48      	it	mi
 8000c82:	4240      	negmi	r0, r0
 8000c84:	ea5f 0c00 	movs.w	ip, r0
 8000c88:	bf08      	it	eq
 8000c8a:	4770      	bxeq	lr
 8000c8c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c90:	4601      	mov	r1, r0
 8000c92:	f04f 0000 	mov.w	r0, #0
 8000c96:	e01c      	b.n	8000cd2 <__aeabi_l2f+0x2a>

08000c98 <__aeabi_ul2f>:
 8000c98:	ea50 0201 	orrs.w	r2, r0, r1
 8000c9c:	bf08      	it	eq
 8000c9e:	4770      	bxeq	lr
 8000ca0:	f04f 0300 	mov.w	r3, #0
 8000ca4:	e00a      	b.n	8000cbc <__aeabi_l2f+0x14>
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_l2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cb4:	d502      	bpl.n	8000cbc <__aeabi_l2f+0x14>
 8000cb6:	4240      	negs	r0, r0
 8000cb8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cbc:	ea5f 0c01 	movs.w	ip, r1
 8000cc0:	bf02      	ittt	eq
 8000cc2:	4684      	moveq	ip, r0
 8000cc4:	4601      	moveq	r1, r0
 8000cc6:	2000      	moveq	r0, #0
 8000cc8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ccc:	bf08      	it	eq
 8000cce:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cd2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cd6:	fabc f28c 	clz	r2, ip
 8000cda:	3a08      	subs	r2, #8
 8000cdc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ce0:	db10      	blt.n	8000d04 <__aeabi_l2f+0x5c>
 8000ce2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ce6:	4463      	add	r3, ip
 8000ce8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cec:	f1c2 0220 	rsb	r2, r2, #32
 8000cf0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cf4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf8:	eb43 0002 	adc.w	r0, r3, r2
 8000cfc:	bf08      	it	eq
 8000cfe:	f020 0001 	biceq.w	r0, r0, #1
 8000d02:	4770      	bx	lr
 8000d04:	f102 0220 	add.w	r2, r2, #32
 8000d08:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d14:	fa21 f202 	lsr.w	r2, r1, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d22:	4770      	bx	lr

08000d24 <__aeabi_fmul>:
 8000d24:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d28:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d2c:	bf1e      	ittt	ne
 8000d2e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d32:	ea92 0f0c 	teqne	r2, ip
 8000d36:	ea93 0f0c 	teqne	r3, ip
 8000d3a:	d06f      	beq.n	8000e1c <__aeabi_fmul+0xf8>
 8000d3c:	441a      	add	r2, r3
 8000d3e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d42:	0240      	lsls	r0, r0, #9
 8000d44:	bf18      	it	ne
 8000d46:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d4a:	d01e      	beq.n	8000d8a <__aeabi_fmul+0x66>
 8000d4c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d50:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d54:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d58:	fba0 3101 	umull	r3, r1, r0, r1
 8000d5c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d60:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d64:	bf3e      	ittt	cc
 8000d66:	0049      	lslcc	r1, r1, #1
 8000d68:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d6c:	005b      	lslcc	r3, r3, #1
 8000d6e:	ea40 0001 	orr.w	r0, r0, r1
 8000d72:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d76:	2afd      	cmp	r2, #253	; 0xfd
 8000d78:	d81d      	bhi.n	8000db6 <__aeabi_fmul+0x92>
 8000d7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d82:	bf08      	it	eq
 8000d84:	f020 0001 	biceq.w	r0, r0, #1
 8000d88:	4770      	bx	lr
 8000d8a:	f090 0f00 	teq	r0, #0
 8000d8e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d92:	bf08      	it	eq
 8000d94:	0249      	lsleq	r1, r1, #9
 8000d96:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d9a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d9e:	3a7f      	subs	r2, #127	; 0x7f
 8000da0:	bfc2      	ittt	gt
 8000da2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000da6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000daa:	4770      	bxgt	lr
 8000dac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000db0:	f04f 0300 	mov.w	r3, #0
 8000db4:	3a01      	subs	r2, #1
 8000db6:	dc5d      	bgt.n	8000e74 <__aeabi_fmul+0x150>
 8000db8:	f112 0f19 	cmn.w	r2, #25
 8000dbc:	bfdc      	itt	le
 8000dbe:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dc2:	4770      	bxle	lr
 8000dc4:	f1c2 0200 	rsb	r2, r2, #0
 8000dc8:	0041      	lsls	r1, r0, #1
 8000dca:	fa21 f102 	lsr.w	r1, r1, r2
 8000dce:	f1c2 0220 	rsb	r2, r2, #32
 8000dd2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dd6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dda:	f140 0000 	adc.w	r0, r0, #0
 8000dde:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000de2:	bf08      	it	eq
 8000de4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000de8:	4770      	bx	lr
 8000dea:	f092 0f00 	teq	r2, #0
 8000dee:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000df2:	bf02      	ittt	eq
 8000df4:	0040      	lsleq	r0, r0, #1
 8000df6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dfa:	3a01      	subeq	r2, #1
 8000dfc:	d0f9      	beq.n	8000df2 <__aeabi_fmul+0xce>
 8000dfe:	ea40 000c 	orr.w	r0, r0, ip
 8000e02:	f093 0f00 	teq	r3, #0
 8000e06:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e0a:	bf02      	ittt	eq
 8000e0c:	0049      	lsleq	r1, r1, #1
 8000e0e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e12:	3b01      	subeq	r3, #1
 8000e14:	d0f9      	beq.n	8000e0a <__aeabi_fmul+0xe6>
 8000e16:	ea41 010c 	orr.w	r1, r1, ip
 8000e1a:	e78f      	b.n	8000d3c <__aeabi_fmul+0x18>
 8000e1c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e20:	ea92 0f0c 	teq	r2, ip
 8000e24:	bf18      	it	ne
 8000e26:	ea93 0f0c 	teqne	r3, ip
 8000e2a:	d00a      	beq.n	8000e42 <__aeabi_fmul+0x11e>
 8000e2c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e30:	bf18      	it	ne
 8000e32:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e36:	d1d8      	bne.n	8000dea <__aeabi_fmul+0xc6>
 8000e38:	ea80 0001 	eor.w	r0, r0, r1
 8000e3c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e40:	4770      	bx	lr
 8000e42:	f090 0f00 	teq	r0, #0
 8000e46:	bf17      	itett	ne
 8000e48:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e4c:	4608      	moveq	r0, r1
 8000e4e:	f091 0f00 	teqne	r1, #0
 8000e52:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e56:	d014      	beq.n	8000e82 <__aeabi_fmul+0x15e>
 8000e58:	ea92 0f0c 	teq	r2, ip
 8000e5c:	d101      	bne.n	8000e62 <__aeabi_fmul+0x13e>
 8000e5e:	0242      	lsls	r2, r0, #9
 8000e60:	d10f      	bne.n	8000e82 <__aeabi_fmul+0x15e>
 8000e62:	ea93 0f0c 	teq	r3, ip
 8000e66:	d103      	bne.n	8000e70 <__aeabi_fmul+0x14c>
 8000e68:	024b      	lsls	r3, r1, #9
 8000e6a:	bf18      	it	ne
 8000e6c:	4608      	movne	r0, r1
 8000e6e:	d108      	bne.n	8000e82 <__aeabi_fmul+0x15e>
 8000e70:	ea80 0001 	eor.w	r0, r0, r1
 8000e74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e78:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e7c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e80:	4770      	bx	lr
 8000e82:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e86:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e8a:	4770      	bx	lr

08000e8c <__aeabi_fdiv>:
 8000e8c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e90:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e94:	bf1e      	ittt	ne
 8000e96:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e9a:	ea92 0f0c 	teqne	r2, ip
 8000e9e:	ea93 0f0c 	teqne	r3, ip
 8000ea2:	d069      	beq.n	8000f78 <__aeabi_fdiv+0xec>
 8000ea4:	eba2 0203 	sub.w	r2, r2, r3
 8000ea8:	ea80 0c01 	eor.w	ip, r0, r1
 8000eac:	0249      	lsls	r1, r1, #9
 8000eae:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000eb2:	d037      	beq.n	8000f24 <__aeabi_fdiv+0x98>
 8000eb4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000eb8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ebc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ec0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ec4:	428b      	cmp	r3, r1
 8000ec6:	bf38      	it	cc
 8000ec8:	005b      	lslcc	r3, r3, #1
 8000eca:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ece:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	bf24      	itt	cs
 8000ed6:	1a5b      	subcs	r3, r3, r1
 8000ed8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000edc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ee0:	bf24      	itt	cs
 8000ee2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ee6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eea:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eee:	bf24      	itt	cs
 8000ef0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ef4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ef8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000efc:	bf24      	itt	cs
 8000efe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f02:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f06:	011b      	lsls	r3, r3, #4
 8000f08:	bf18      	it	ne
 8000f0a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f0e:	d1e0      	bne.n	8000ed2 <__aeabi_fdiv+0x46>
 8000f10:	2afd      	cmp	r2, #253	; 0xfd
 8000f12:	f63f af50 	bhi.w	8000db6 <__aeabi_fmul+0x92>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f1c:	bf08      	it	eq
 8000f1e:	f020 0001 	biceq.w	r0, r0, #1
 8000f22:	4770      	bx	lr
 8000f24:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f28:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f2c:	327f      	adds	r2, #127	; 0x7f
 8000f2e:	bfc2      	ittt	gt
 8000f30:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f34:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f38:	4770      	bxgt	lr
 8000f3a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f3e:	f04f 0300 	mov.w	r3, #0
 8000f42:	3a01      	subs	r2, #1
 8000f44:	e737      	b.n	8000db6 <__aeabi_fmul+0x92>
 8000f46:	f092 0f00 	teq	r2, #0
 8000f4a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f4e:	bf02      	ittt	eq
 8000f50:	0040      	lsleq	r0, r0, #1
 8000f52:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f56:	3a01      	subeq	r2, #1
 8000f58:	d0f9      	beq.n	8000f4e <__aeabi_fdiv+0xc2>
 8000f5a:	ea40 000c 	orr.w	r0, r0, ip
 8000f5e:	f093 0f00 	teq	r3, #0
 8000f62:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f66:	bf02      	ittt	eq
 8000f68:	0049      	lsleq	r1, r1, #1
 8000f6a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f6e:	3b01      	subeq	r3, #1
 8000f70:	d0f9      	beq.n	8000f66 <__aeabi_fdiv+0xda>
 8000f72:	ea41 010c 	orr.w	r1, r1, ip
 8000f76:	e795      	b.n	8000ea4 <__aeabi_fdiv+0x18>
 8000f78:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f7c:	ea92 0f0c 	teq	r2, ip
 8000f80:	d108      	bne.n	8000f94 <__aeabi_fdiv+0x108>
 8000f82:	0242      	lsls	r2, r0, #9
 8000f84:	f47f af7d 	bne.w	8000e82 <__aeabi_fmul+0x15e>
 8000f88:	ea93 0f0c 	teq	r3, ip
 8000f8c:	f47f af70 	bne.w	8000e70 <__aeabi_fmul+0x14c>
 8000f90:	4608      	mov	r0, r1
 8000f92:	e776      	b.n	8000e82 <__aeabi_fmul+0x15e>
 8000f94:	ea93 0f0c 	teq	r3, ip
 8000f98:	d104      	bne.n	8000fa4 <__aeabi_fdiv+0x118>
 8000f9a:	024b      	lsls	r3, r1, #9
 8000f9c:	f43f af4c 	beq.w	8000e38 <__aeabi_fmul+0x114>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e76e      	b.n	8000e82 <__aeabi_fmul+0x15e>
 8000fa4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fa8:	bf18      	it	ne
 8000faa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fae:	d1ca      	bne.n	8000f46 <__aeabi_fdiv+0xba>
 8000fb0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fb4:	f47f af5c 	bne.w	8000e70 <__aeabi_fmul+0x14c>
 8000fb8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fbc:	f47f af3c 	bne.w	8000e38 <__aeabi_fmul+0x114>
 8000fc0:	e75f      	b.n	8000e82 <__aeabi_fmul+0x15e>
 8000fc2:	bf00      	nop

08000fc4 <__gesf2>:
 8000fc4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fc8:	e006      	b.n	8000fd8 <__cmpsf2+0x4>
 8000fca:	bf00      	nop

08000fcc <__lesf2>:
 8000fcc:	f04f 0c01 	mov.w	ip, #1
 8000fd0:	e002      	b.n	8000fd8 <__cmpsf2+0x4>
 8000fd2:	bf00      	nop

08000fd4 <__cmpsf2>:
 8000fd4:	f04f 0c01 	mov.w	ip, #1
 8000fd8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fdc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fe0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fe4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fe8:	bf18      	it	ne
 8000fea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fee:	d011      	beq.n	8001014 <__cmpsf2+0x40>
 8000ff0:	b001      	add	sp, #4
 8000ff2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ff6:	bf18      	it	ne
 8000ff8:	ea90 0f01 	teqne	r0, r1
 8000ffc:	bf58      	it	pl
 8000ffe:	ebb2 0003 	subspl.w	r0, r2, r3
 8001002:	bf88      	it	hi
 8001004:	17c8      	asrhi	r0, r1, #31
 8001006:	bf38      	it	cc
 8001008:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800100c:	bf18      	it	ne
 800100e:	f040 0001 	orrne.w	r0, r0, #1
 8001012:	4770      	bx	lr
 8001014:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001018:	d102      	bne.n	8001020 <__cmpsf2+0x4c>
 800101a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800101e:	d105      	bne.n	800102c <__cmpsf2+0x58>
 8001020:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001024:	d1e4      	bne.n	8000ff0 <__cmpsf2+0x1c>
 8001026:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800102a:	d0e1      	beq.n	8000ff0 <__cmpsf2+0x1c>
 800102c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <__aeabi_cfrcmple>:
 8001034:	4684      	mov	ip, r0
 8001036:	4608      	mov	r0, r1
 8001038:	4661      	mov	r1, ip
 800103a:	e7ff      	b.n	800103c <__aeabi_cfcmpeq>

0800103c <__aeabi_cfcmpeq>:
 800103c:	b50f      	push	{r0, r1, r2, r3, lr}
 800103e:	f7ff ffc9 	bl	8000fd4 <__cmpsf2>
 8001042:	2800      	cmp	r0, #0
 8001044:	bf48      	it	mi
 8001046:	f110 0f00 	cmnmi.w	r0, #0
 800104a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800104c <__aeabi_fcmpeq>:
 800104c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001050:	f7ff fff4 	bl	800103c <__aeabi_cfcmpeq>
 8001054:	bf0c      	ite	eq
 8001056:	2001      	moveq	r0, #1
 8001058:	2000      	movne	r0, #0
 800105a:	f85d fb08 	ldr.w	pc, [sp], #8
 800105e:	bf00      	nop

08001060 <__aeabi_fcmplt>:
 8001060:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001064:	f7ff ffea 	bl	800103c <__aeabi_cfcmpeq>
 8001068:	bf34      	ite	cc
 800106a:	2001      	movcc	r0, #1
 800106c:	2000      	movcs	r0, #0
 800106e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001072:	bf00      	nop

08001074 <__aeabi_fcmple>:
 8001074:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001078:	f7ff ffe0 	bl	800103c <__aeabi_cfcmpeq>
 800107c:	bf94      	ite	ls
 800107e:	2001      	movls	r0, #1
 8001080:	2000      	movhi	r0, #0
 8001082:	f85d fb08 	ldr.w	pc, [sp], #8
 8001086:	bf00      	nop

08001088 <__aeabi_fcmpge>:
 8001088:	f84d ed08 	str.w	lr, [sp, #-8]!
 800108c:	f7ff ffd2 	bl	8001034 <__aeabi_cfrcmple>
 8001090:	bf94      	ite	ls
 8001092:	2001      	movls	r0, #1
 8001094:	2000      	movhi	r0, #0
 8001096:	f85d fb08 	ldr.w	pc, [sp], #8
 800109a:	bf00      	nop

0800109c <__aeabi_fcmpgt>:
 800109c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a0:	f7ff ffc8 	bl	8001034 <__aeabi_cfrcmple>
 80010a4:	bf34      	ite	cc
 80010a6:	2001      	movcc	r0, #1
 80010a8:	2000      	movcs	r0, #0
 80010aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ae:	bf00      	nop

080010b0 <__aeabi_fcmpun>:
 80010b0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010b4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010b8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010bc:	d102      	bne.n	80010c4 <__aeabi_fcmpun+0x14>
 80010be:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010c2:	d108      	bne.n	80010d6 <__aeabi_fcmpun+0x26>
 80010c4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010c8:	d102      	bne.n	80010d0 <__aeabi_fcmpun+0x20>
 80010ca:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ce:	d102      	bne.n	80010d6 <__aeabi_fcmpun+0x26>
 80010d0:	f04f 0000 	mov.w	r0, #0
 80010d4:	4770      	bx	lr
 80010d6:	f04f 0001 	mov.w	r0, #1
 80010da:	4770      	bx	lr

080010dc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80010e0:	f004 f9c2 	bl	8005468 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80010e4:	f000 f85a 	bl	800119c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80010e8:	f000 faa4 	bl	8001634 <MX_GPIO_Init>
	MX_DMA_Init();
 80010ec:	f000 fa84 	bl	80015f8 <MX_DMA_Init>
	MX_TIM4_Init();
 80010f0:	f000 f9fa 	bl	80014e8 <MX_TIM4_Init>
	MX_I2C2_Init();
 80010f4:	f000 f918 	bl	8001328 <MX_I2C2_Init>
	MX_TIM1_Init();
 80010f8:	f000 f944 	bl	8001384 <MX_TIM1_Init>
	MX_TIM3_Init();
 80010fc:	f000 f99a 	bl	8001434 <MX_TIM3_Init>
	MX_ADC1_Init();
 8001100:	f000 f8a8 	bl	8001254 <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001104:	2108      	movs	r1, #8
 8001106:	481b      	ldr	r0, [pc, #108]	; (8001174 <main+0x98>)
 8001108:	f006 ff9a 	bl	8008040 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800110c:	210c      	movs	r1, #12
 800110e:	4819      	ldr	r0, [pc, #100]	; (8001174 <main+0x98>)
 8001110:	f006 ff96 	bl	8008040 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001114:	213c      	movs	r1, #60	; 0x3c
 8001116:	4817      	ldr	r0, [pc, #92]	; (8001174 <main+0x98>)
 8001118:	f007 f8d6 	bl	80082c8 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 800111c:	213c      	movs	r1, #60	; 0x3c
 800111e:	4816      	ldr	r0, [pc, #88]	; (8001178 <main+0x9c>)
 8001120:	f007 f8d2 	bl	80082c8 <HAL_TIM_Encoder_Start>
	HAL_GPIO_WritePin(STBY, GPIO_PIN_SET);
 8001124:	2201      	movs	r2, #1
 8001126:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800112a:	4814      	ldr	r0, [pc, #80]	; (800117c <main+0xa0>)
 800112c:	f005 fa64 	bl	80065f8 <HAL_GPIO_WritePin>
	powerA = TIM4->CCR3 = 30000;
 8001130:	4b13      	ldr	r3, [pc, #76]	; (8001180 <main+0xa4>)
 8001132:	f247 5230 	movw	r2, #30000	; 0x7530
 8001136:	63da      	str	r2, [r3, #60]	; 0x3c
 8001138:	4b12      	ldr	r3, [pc, #72]	; (8001184 <main+0xa8>)
 800113a:	f247 5230 	movw	r2, #30000	; 0x7530
 800113e:	601a      	str	r2, [r3, #0]
	powerB = TIM4->CCR4 = 30000;
 8001140:	4b0f      	ldr	r3, [pc, #60]	; (8001180 <main+0xa4>)
 8001142:	f247 5230 	movw	r2, #30000	; 0x7530
 8001146:	641a      	str	r2, [r3, #64]	; 0x40
 8001148:	4b0f      	ldr	r3, [pc, #60]	; (8001188 <main+0xac>)
 800114a:	f247 5230 	movw	r2, #30000	; 0x7530
 800114e:	601a      	str	r2, [r3, #0]
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_buf, ADC_BUF_LEN);
 8001150:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001154:	490d      	ldr	r1, [pc, #52]	; (800118c <main+0xb0>)
 8001156:	480e      	ldr	r0, [pc, #56]	; (8001190 <main+0xb4>)
 8001158:	f004 fae4 	bl	8005724 <HAL_ADC_Start_DMA>
	while (MPU9255_Init(&hi2c2) == 1);
 800115c:	bf00      	nop
 800115e:	480d      	ldr	r0, [pc, #52]	; (8001194 <main+0xb8>)
 8001160:	f000 fade 	bl	8001720 <MPU9255_Init>
 8001164:	4603      	mov	r3, r0
 8001166:	2b01      	cmp	r3, #1
 8001168:	d0f9      	beq.n	800115e <main+0x82>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		/* USER CODE BEGIN 3 */
		readAll(&hi2c2, &MPU9255);
 800116a:	490b      	ldr	r1, [pc, #44]	; (8001198 <main+0xbc>)
 800116c:	4809      	ldr	r0, [pc, #36]	; (8001194 <main+0xb8>)
 800116e:	f000 fb57 	bl	8001820 <readAll>
 8001172:	e7fa      	b.n	800116a <main+0x8e>
 8001174:	200001fc 	.word	0x200001fc
 8001178:	2000016c 	.word	0x2000016c
 800117c:	40010800 	.word	0x40010800
 8001180:	40000800 	.word	0x40000800
 8001184:	20004274 	.word	0x20004274
 8001188:	20004278 	.word	0x20004278
 800118c:	20000244 	.word	0x20000244
 8001190:	200000a4 	.word	0x200000a4
 8001194:	20000118 	.word	0x20000118
 8001198:	20004244 	.word	0x20004244

0800119c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800119c:	b580      	push	{r7, lr}
 800119e:	b094      	sub	sp, #80	; 0x50
 80011a0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80011a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011a6:	2228      	movs	r2, #40	; 0x28
 80011a8:	2100      	movs	r1, #0
 80011aa:	4618      	mov	r0, r3
 80011ac:	f008 febc 	bl	8009f28 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80011b0:	f107 0314 	add.w	r3, r7, #20
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]
 80011be:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80011c0:	1d3b      	adds	r3, r7, #4
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]
 80011ca:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011cc:	2301      	movs	r3, #1
 80011ce:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80011d6:	2300      	movs	r3, #0
 80011d8:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011da:	2301      	movs	r3, #1
 80011dc:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011de:	2302      	movs	r3, #2
 80011e0:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011e6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80011e8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80011ec:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80011ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011f2:	4618      	mov	r0, r3
 80011f4:	f006 fa18 	bl	8007628 <HAL_RCC_OscConfig>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <SystemClock_Config+0x66>
		Error_Handler();
 80011fe:	f000 fa89 	bl	8001714 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001202:	230f      	movs	r3, #15
 8001204:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001206:	2302      	movs	r3, #2
 8001208:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800120a:	2300      	movs	r3, #0
 800120c:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800120e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001212:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001214:	2300      	movs	r3, #0
 8001216:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001218:	f107 0314 	add.w	r3, r7, #20
 800121c:	2102      	movs	r1, #2
 800121e:	4618      	mov	r0, r3
 8001220:	f006 fc84 	bl	8007b2c <HAL_RCC_ClockConfig>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <SystemClock_Config+0x92>
		Error_Handler();
 800122a:	f000 fa73 	bl	8001714 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800122e:	2302      	movs	r3, #2
 8001230:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001232:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001236:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001238:	1d3b      	adds	r3, r7, #4
 800123a:	4618      	mov	r0, r3
 800123c:	f006 fdfa 	bl	8007e34 <HAL_RCCEx_PeriphCLKConfig>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <SystemClock_Config+0xae>
		Error_Handler();
 8001246:	f000 fa65 	bl	8001714 <Error_Handler>
	}
}
 800124a:	bf00      	nop
 800124c:	3750      	adds	r7, #80	; 0x50
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
	...

08001254 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800125a:	1d3b      	adds	r3, r7, #4
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8001264:	4b2e      	ldr	r3, [pc, #184]	; (8001320 <MX_ADC1_Init+0xcc>)
 8001266:	4a2f      	ldr	r2, [pc, #188]	; (8001324 <MX_ADC1_Init+0xd0>)
 8001268:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800126a:	4b2d      	ldr	r3, [pc, #180]	; (8001320 <MX_ADC1_Init+0xcc>)
 800126c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001270:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8001272:	4b2b      	ldr	r3, [pc, #172]	; (8001320 <MX_ADC1_Init+0xcc>)
 8001274:	2201      	movs	r2, #1
 8001276:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001278:	4b29      	ldr	r3, [pc, #164]	; (8001320 <MX_ADC1_Init+0xcc>)
 800127a:	2200      	movs	r2, #0
 800127c:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800127e:	4b28      	ldr	r3, [pc, #160]	; (8001320 <MX_ADC1_Init+0xcc>)
 8001280:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001284:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001286:	4b26      	ldr	r3, [pc, #152]	; (8001320 <MX_ADC1_Init+0xcc>)
 8001288:	2200      	movs	r2, #0
 800128a:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 4;
 800128c:	4b24      	ldr	r3, [pc, #144]	; (8001320 <MX_ADC1_Init+0xcc>)
 800128e:	2204      	movs	r2, #4
 8001290:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001292:	4823      	ldr	r0, [pc, #140]	; (8001320 <MX_ADC1_Init+0xcc>)
 8001294:	f004 f96e 	bl	8005574 <HAL_ADC_Init>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_ADC1_Init+0x4e>
		Error_Handler();
 800129e:	f000 fa39 	bl	8001714 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80012a6:	2301      	movs	r3, #1
 80012a8:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80012aa:	2300      	movs	r3, #0
 80012ac:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	4619      	mov	r1, r3
 80012b2:	481b      	ldr	r0, [pc, #108]	; (8001320 <MX_ADC1_Init+0xcc>)
 80012b4:	f004 fb26 	bl	8005904 <HAL_ADC_ConfigChannel>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_ADC1_Init+0x6e>
		Error_Handler();
 80012be:	f000 fa29 	bl	8001714 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 80012c2:	2301      	movs	r3, #1
 80012c4:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 80012c6:	2302      	movs	r3, #2
 80012c8:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80012ca:	1d3b      	adds	r3, r7, #4
 80012cc:	4619      	mov	r1, r3
 80012ce:	4814      	ldr	r0, [pc, #80]	; (8001320 <MX_ADC1_Init+0xcc>)
 80012d0:	f004 fb18 	bl	8005904 <HAL_ADC_ConfigChannel>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_ADC1_Init+0x8a>
		Error_Handler();
 80012da:	f000 fa1b 	bl	8001714 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 80012de:	2302      	movs	r3, #2
 80012e0:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_3;
 80012e2:	2303      	movs	r3, #3
 80012e4:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80012e6:	1d3b      	adds	r3, r7, #4
 80012e8:	4619      	mov	r1, r3
 80012ea:	480d      	ldr	r0, [pc, #52]	; (8001320 <MX_ADC1_Init+0xcc>)
 80012ec:	f004 fb0a 	bl	8005904 <HAL_ADC_ConfigChannel>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_ADC1_Init+0xa6>
		Error_Handler();
 80012f6:	f000 fa0d 	bl	8001714 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 80012fa:	2303      	movs	r3, #3
 80012fc:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_4;
 80012fe:	2304      	movs	r3, #4
 8001300:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001302:	1d3b      	adds	r3, r7, #4
 8001304:	4619      	mov	r1, r3
 8001306:	4806      	ldr	r0, [pc, #24]	; (8001320 <MX_ADC1_Init+0xcc>)
 8001308:	f004 fafc 	bl	8005904 <HAL_ADC_ConfigChannel>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_ADC1_Init+0xc2>
		Error_Handler();
 8001312:	f000 f9ff 	bl	8001714 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001316:	bf00      	nop
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	200000a4 	.word	0x200000a4
 8001324:	40012400 	.word	0x40012400

08001328 <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 800132c:	4b12      	ldr	r3, [pc, #72]	; (8001378 <MX_I2C2_Init+0x50>)
 800132e:	4a13      	ldr	r2, [pc, #76]	; (800137c <MX_I2C2_Init+0x54>)
 8001330:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 400000;
 8001332:	4b11      	ldr	r3, [pc, #68]	; (8001378 <MX_I2C2_Init+0x50>)
 8001334:	4a12      	ldr	r2, [pc, #72]	; (8001380 <MX_I2C2_Init+0x58>)
 8001336:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001338:	4b0f      	ldr	r3, [pc, #60]	; (8001378 <MX_I2C2_Init+0x50>)
 800133a:	2200      	movs	r2, #0
 800133c:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 800133e:	4b0e      	ldr	r3, [pc, #56]	; (8001378 <MX_I2C2_Init+0x50>)
 8001340:	2200      	movs	r2, #0
 8001342:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001344:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <MX_I2C2_Init+0x50>)
 8001346:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800134a:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800134c:	4b0a      	ldr	r3, [pc, #40]	; (8001378 <MX_I2C2_Init+0x50>)
 800134e:	2200      	movs	r2, #0
 8001350:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 8001352:	4b09      	ldr	r3, [pc, #36]	; (8001378 <MX_I2C2_Init+0x50>)
 8001354:	2200      	movs	r2, #0
 8001356:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001358:	4b07      	ldr	r3, [pc, #28]	; (8001378 <MX_I2C2_Init+0x50>)
 800135a:	2200      	movs	r2, #0
 800135c:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800135e:	4b06      	ldr	r3, [pc, #24]	; (8001378 <MX_I2C2_Init+0x50>)
 8001360:	2200      	movs	r2, #0
 8001362:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8001364:	4804      	ldr	r0, [pc, #16]	; (8001378 <MX_I2C2_Init+0x50>)
 8001366:	f005 f95f 	bl	8006628 <HAL_I2C_Init>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_I2C2_Init+0x4c>
		Error_Handler();
 8001370:	f000 f9d0 	bl	8001714 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 8001374:	bf00      	nop
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20000118 	.word	0x20000118
 800137c:	40005800 	.word	0x40005800
 8001380:	00061a80 	.word	0x00061a80

08001384 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8001384:	b580      	push	{r7, lr}
 8001386:	b08c      	sub	sp, #48	; 0x30
 8001388:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 800138a:	f107 030c 	add.w	r3, r7, #12
 800138e:	2224      	movs	r2, #36	; 0x24
 8001390:	2100      	movs	r1, #0
 8001392:	4618      	mov	r0, r3
 8001394:	f008 fdc8 	bl	8009f28 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001398:	1d3b      	adds	r3, r7, #4
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80013a0:	4b22      	ldr	r3, [pc, #136]	; (800142c <MX_TIM1_Init+0xa8>)
 80013a2:	4a23      	ldr	r2, [pc, #140]	; (8001430 <MX_TIM1_Init+0xac>)
 80013a4:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 80013a6:	4b21      	ldr	r3, [pc, #132]	; (800142c <MX_TIM1_Init+0xa8>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ac:	4b1f      	ldr	r3, [pc, #124]	; (800142c <MX_TIM1_Init+0xa8>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 80013b2:	4b1e      	ldr	r3, [pc, #120]	; (800142c <MX_TIM1_Init+0xa8>)
 80013b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013b8:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ba:	4b1c      	ldr	r3, [pc, #112]	; (800142c <MX_TIM1_Init+0xa8>)
 80013bc:	2200      	movs	r2, #0
 80013be:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80013c0:	4b1a      	ldr	r3, [pc, #104]	; (800142c <MX_TIM1_Init+0xa8>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013c6:	4b19      	ldr	r3, [pc, #100]	; (800142c <MX_TIM1_Init+0xa8>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80013cc:	2303      	movs	r3, #3
 80013ce:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013d0:	2300      	movs	r3, #0
 80013d2:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013d4:	2301      	movs	r3, #1
 80013d6:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013d8:	2300      	movs	r3, #0
 80013da:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 10;
 80013dc:	230a      	movs	r3, #10
 80013de:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013e0:	2300      	movs	r3, #0
 80013e2:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013e4:	2301      	movs	r3, #1
 80013e6:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013e8:	2300      	movs	r3, #0
 80013ea:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 80013ec:	2300      	movs	r3, #0
 80013ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK) {
 80013f0:	f107 030c 	add.w	r3, r7, #12
 80013f4:	4619      	mov	r1, r3
 80013f6:	480d      	ldr	r0, [pc, #52]	; (800142c <MX_TIM1_Init+0xa8>)
 80013f8:	f006 fec4 	bl	8008184 <HAL_TIM_Encoder_Init>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_TIM1_Init+0x82>
		Error_Handler();
 8001402:	f000 f987 	bl	8001714 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001406:	2300      	movs	r3, #0
 8001408:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800140a:	2300      	movs	r3, #0
 800140c:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800140e:	1d3b      	adds	r3, r7, #4
 8001410:	4619      	mov	r1, r3
 8001412:	4806      	ldr	r0, [pc, #24]	; (800142c <MX_TIM1_Init+0xa8>)
 8001414:	f007 fab2 	bl	800897c <HAL_TIMEx_MasterConfigSynchronization>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_TIM1_Init+0x9e>
			!= HAL_OK) {
		Error_Handler();
 800141e:	f000 f979 	bl	8001714 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8001422:	bf00      	nop
 8001424:	3730      	adds	r7, #48	; 0x30
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	2000016c 	.word	0x2000016c
 8001430:	40012c00 	.word	0x40012c00

08001434 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8001434:	b580      	push	{r7, lr}
 8001436:	b08a      	sub	sp, #40	; 0x28
 8001438:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800143a:	f107 0320 	add.w	r3, r7, #32
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001444:	1d3b      	adds	r3, r7, #4
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	605a      	str	r2, [r3, #4]
 800144c:	609a      	str	r2, [r3, #8]
 800144e:	60da      	str	r2, [r3, #12]
 8001450:	611a      	str	r2, [r3, #16]
 8001452:	615a      	str	r2, [r3, #20]
 8001454:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001456:	4b22      	ldr	r3, [pc, #136]	; (80014e0 <MX_TIM3_Init+0xac>)
 8001458:	4a22      	ldr	r2, [pc, #136]	; (80014e4 <MX_TIM3_Init+0xb0>)
 800145a:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 800145c:	4b20      	ldr	r3, [pc, #128]	; (80014e0 <MX_TIM3_Init+0xac>)
 800145e:	2200      	movs	r2, #0
 8001460:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001462:	4b1f      	ldr	r3, [pc, #124]	; (80014e0 <MX_TIM3_Init+0xac>)
 8001464:	2200      	movs	r2, #0
 8001466:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8001468:	4b1d      	ldr	r3, [pc, #116]	; (80014e0 <MX_TIM3_Init+0xac>)
 800146a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800146e:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001470:	4b1b      	ldr	r3, [pc, #108]	; (80014e0 <MX_TIM3_Init+0xac>)
 8001472:	2200      	movs	r2, #0
 8001474:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001476:	4b1a      	ldr	r3, [pc, #104]	; (80014e0 <MX_TIM3_Init+0xac>)
 8001478:	2200      	movs	r2, #0
 800147a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 800147c:	4818      	ldr	r0, [pc, #96]	; (80014e0 <MX_TIM3_Init+0xac>)
 800147e:	f006 fd8f 	bl	8007fa0 <HAL_TIM_PWM_Init>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_TIM3_Init+0x58>
		Error_Handler();
 8001488:	f000 f944 	bl	8001714 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800148c:	2300      	movs	r3, #0
 800148e:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001490:	2300      	movs	r3, #0
 8001492:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001494:	f107 0320 	add.w	r3, r7, #32
 8001498:	4619      	mov	r1, r3
 800149a:	4811      	ldr	r0, [pc, #68]	; (80014e0 <MX_TIM3_Init+0xac>)
 800149c:	f007 fa6e 	bl	800897c <HAL_TIMEx_MasterConfigSynchronization>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_TIM3_Init+0x76>
			!= HAL_OK) {
		Error_Handler();
 80014a6:	f000 f935 	bl	8001714 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014aa:	2360      	movs	r3, #96	; 0x60
 80014ac:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80014ae:	2300      	movs	r3, #0
 80014b0:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014b2:	2300      	movs	r3, #0
 80014b4:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014b6:	2300      	movs	r3, #0
 80014b8:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 80014ba:	1d3b      	adds	r3, r7, #4
 80014bc:	2204      	movs	r2, #4
 80014be:	4619      	mov	r1, r3
 80014c0:	4807      	ldr	r0, [pc, #28]	; (80014e0 <MX_TIM3_Init+0xac>)
 80014c2:	f006 ff8f 	bl	80083e4 <HAL_TIM_PWM_ConfigChannel>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_TIM3_Init+0x9c>
			!= HAL_OK) {
		Error_Handler();
 80014cc:	f000 f922 	bl	8001714 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 80014d0:	4803      	ldr	r0, [pc, #12]	; (80014e0 <MX_TIM3_Init+0xac>)
 80014d2:	f003 fe63 	bl	800519c <HAL_TIM_MspPostInit>

}
 80014d6:	bf00      	nop
 80014d8:	3728      	adds	r7, #40	; 0x28
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	200001b4 	.word	0x200001b4
 80014e4:	40000400 	.word	0x40000400

080014e8 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b092      	sub	sp, #72	; 0x48
 80014ec:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 80014ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014f2:	2224      	movs	r2, #36	; 0x24
 80014f4:	2100      	movs	r1, #0
 80014f6:	4618      	mov	r0, r3
 80014f8:	f008 fd16 	bl	8009f28 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80014fc:	f107 031c 	add.w	r3, r7, #28
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001506:	463b      	mov	r3, r7
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
 8001512:	611a      	str	r2, [r3, #16]
 8001514:	615a      	str	r2, [r3, #20]
 8001516:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8001518:	4b35      	ldr	r3, [pc, #212]	; (80015f0 <MX_TIM4_Init+0x108>)
 800151a:	4a36      	ldr	r2, [pc, #216]	; (80015f4 <MX_TIM4_Init+0x10c>)
 800151c:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 800151e:	4b34      	ldr	r3, [pc, #208]	; (80015f0 <MX_TIM4_Init+0x108>)
 8001520:	2200      	movs	r2, #0
 8001522:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001524:	4b32      	ldr	r3, [pc, #200]	; (80015f0 <MX_TIM4_Init+0x108>)
 8001526:	2200      	movs	r2, #0
 8001528:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 800152a:	4b31      	ldr	r3, [pc, #196]	; (80015f0 <MX_TIM4_Init+0x108>)
 800152c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001530:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001532:	4b2f      	ldr	r3, [pc, #188]	; (80015f0 <MX_TIM4_Init+0x108>)
 8001534:	2200      	movs	r2, #0
 8001536:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001538:	4b2d      	ldr	r3, [pc, #180]	; (80015f0 <MX_TIM4_Init+0x108>)
 800153a:	2280      	movs	r2, #128	; 0x80
 800153c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 800153e:	482c      	ldr	r0, [pc, #176]	; (80015f0 <MX_TIM4_Init+0x108>)
 8001540:	f006 fd2e 	bl	8007fa0 <HAL_TIM_PWM_Init>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_TIM4_Init+0x66>
		Error_Handler();
 800154a:	f000 f8e3 	bl	8001714 <Error_Handler>
	}
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800154e:	2303      	movs	r3, #3
 8001550:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001552:	2300      	movs	r3, #0
 8001554:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001556:	2301      	movs	r3, #1
 8001558:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800155a:	2300      	movs	r3, #0
 800155c:	633b      	str	r3, [r7, #48]	; 0x30
	sConfig.IC1Filter = 10;
 800155e:	230a      	movs	r3, #10
 8001560:	637b      	str	r3, [r7, #52]	; 0x34
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001562:	2300      	movs	r3, #0
 8001564:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001566:	2301      	movs	r3, #1
 8001568:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800156a:	2300      	movs	r3, #0
 800156c:	643b      	str	r3, [r7, #64]	; 0x40
	sConfig.IC2Filter = 0;
 800156e:	2300      	movs	r3, #0
 8001570:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK) {
 8001572:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001576:	4619      	mov	r1, r3
 8001578:	481d      	ldr	r0, [pc, #116]	; (80015f0 <MX_TIM4_Init+0x108>)
 800157a:	f006 fe03 	bl	8008184 <HAL_TIM_Encoder_Init>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_TIM4_Init+0xa0>
		Error_Handler();
 8001584:	f000 f8c6 	bl	8001714 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001588:	2300      	movs	r3, #0
 800158a:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800158c:	2300      	movs	r3, #0
 800158e:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8001590:	f107 031c 	add.w	r3, r7, #28
 8001594:	4619      	mov	r1, r3
 8001596:	4816      	ldr	r0, [pc, #88]	; (80015f0 <MX_TIM4_Init+0x108>)
 8001598:	f007 f9f0 	bl	800897c <HAL_TIMEx_MasterConfigSynchronization>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_TIM4_Init+0xbe>
			!= HAL_OK) {
		Error_Handler();
 80015a2:	f000 f8b7 	bl	8001714 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015a6:	2360      	movs	r3, #96	; 0x60
 80015a8:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 80015aa:	2300      	movs	r3, #0
 80015ac:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015ae:	2300      	movs	r3, #0
 80015b0:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015b2:	2300      	movs	r3, #0
 80015b4:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3)
 80015b6:	463b      	mov	r3, r7
 80015b8:	2208      	movs	r2, #8
 80015ba:	4619      	mov	r1, r3
 80015bc:	480c      	ldr	r0, [pc, #48]	; (80015f0 <MX_TIM4_Init+0x108>)
 80015be:	f006 ff11 	bl	80083e4 <HAL_TIM_PWM_ConfigChannel>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_TIM4_Init+0xe4>
			!= HAL_OK) {
		Error_Handler();
 80015c8:	f000 f8a4 	bl	8001714 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4)
 80015cc:	463b      	mov	r3, r7
 80015ce:	220c      	movs	r2, #12
 80015d0:	4619      	mov	r1, r3
 80015d2:	4807      	ldr	r0, [pc, #28]	; (80015f0 <MX_TIM4_Init+0x108>)
 80015d4:	f006 ff06 	bl	80083e4 <HAL_TIM_PWM_ConfigChannel>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_TIM4_Init+0xfa>
			!= HAL_OK) {
		Error_Handler();
 80015de:	f000 f899 	bl	8001714 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 80015e2:	4803      	ldr	r0, [pc, #12]	; (80015f0 <MX_TIM4_Init+0x108>)
 80015e4:	f003 fdda 	bl	800519c <HAL_TIM_MspPostInit>

}
 80015e8:	bf00      	nop
 80015ea:	3748      	adds	r7, #72	; 0x48
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	200001fc 	.word	0x200001fc
 80015f4:	40000800 	.word	0x40000800

080015f8 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80015fe:	4b0c      	ldr	r3, [pc, #48]	; (8001630 <MX_DMA_Init+0x38>)
 8001600:	695b      	ldr	r3, [r3, #20]
 8001602:	4a0b      	ldr	r2, [pc, #44]	; (8001630 <MX_DMA_Init+0x38>)
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	6153      	str	r3, [r2, #20]
 800160a:	4b09      	ldr	r3, [pc, #36]	; (8001630 <MX_DMA_Init+0x38>)
 800160c:	695b      	ldr	r3, [r3, #20]
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	607b      	str	r3, [r7, #4]
 8001614:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001616:	2200      	movs	r2, #0
 8001618:	2100      	movs	r1, #0
 800161a:	200b      	movs	r0, #11
 800161c:	f004 fc43 	bl	8005ea6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001620:	200b      	movs	r0, #11
 8001622:	f004 fc5c 	bl	8005ede <HAL_NVIC_EnableIRQ>

}
 8001626:	bf00      	nop
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40021000 	.word	0x40021000

08001634 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001634:	b580      	push	{r7, lr}
 8001636:	b088      	sub	sp, #32
 8001638:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800163a:	f107 0310 	add.w	r3, r7, #16
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	605a      	str	r2, [r3, #4]
 8001644:	609a      	str	r2, [r3, #8]
 8001646:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001648:	4b28      	ldr	r3, [pc, #160]	; (80016ec <MX_GPIO_Init+0xb8>)
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	4a27      	ldr	r2, [pc, #156]	; (80016ec <MX_GPIO_Init+0xb8>)
 800164e:	f043 0320 	orr.w	r3, r3, #32
 8001652:	6193      	str	r3, [r2, #24]
 8001654:	4b25      	ldr	r3, [pc, #148]	; (80016ec <MX_GPIO_Init+0xb8>)
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	f003 0320 	and.w	r3, r3, #32
 800165c:	60fb      	str	r3, [r7, #12]
 800165e:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001660:	4b22      	ldr	r3, [pc, #136]	; (80016ec <MX_GPIO_Init+0xb8>)
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	4a21      	ldr	r2, [pc, #132]	; (80016ec <MX_GPIO_Init+0xb8>)
 8001666:	f043 0304 	orr.w	r3, r3, #4
 800166a:	6193      	str	r3, [r2, #24]
 800166c:	4b1f      	ldr	r3, [pc, #124]	; (80016ec <MX_GPIO_Init+0xb8>)
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	f003 0304 	and.w	r3, r3, #4
 8001674:	60bb      	str	r3, [r7, #8]
 8001676:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001678:	4b1c      	ldr	r3, [pc, #112]	; (80016ec <MX_GPIO_Init+0xb8>)
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	4a1b      	ldr	r2, [pc, #108]	; (80016ec <MX_GPIO_Init+0xb8>)
 800167e:	f043 0308 	orr.w	r3, r3, #8
 8001682:	6193      	str	r3, [r2, #24]
 8001684:	4b19      	ldr	r3, [pc, #100]	; (80016ec <MX_GPIO_Init+0xb8>)
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	f003 0308 	and.w	r3, r3, #8
 800168c:	607b      	str	r3, [r7, #4]
 800168e:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8001690:	2200      	movs	r2, #0
 8001692:	f24f 0118 	movw	r1, #61464	; 0xf018
 8001696:	4816      	ldr	r0, [pc, #88]	; (80016f0 <MX_GPIO_Init+0xbc>)
 8001698:	f004 ffae 	bl	80065f8 <HAL_GPIO_WritePin>
			BTN1_Pin | BTN2_Pin | BTN3_Pin | LED_Pin | AIN1_Pin | AIN2_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, BIN2_Pin | BIN1_Pin | STBY_Pin, GPIO_PIN_RESET);
 800169c:	2200      	movs	r2, #0
 800169e:	f44f 4118 	mov.w	r1, #38912	; 0x9800
 80016a2:	4814      	ldr	r0, [pc, #80]	; (80016f4 <MX_GPIO_Init+0xc0>)
 80016a4:	f004 ffa8 	bl	80065f8 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : BTN1_Pin BTN2_Pin BTN3_Pin LED_Pin
	 AIN1_Pin AIN2_Pin */
	GPIO_InitStruct.Pin = BTN1_Pin | BTN2_Pin | BTN3_Pin | LED_Pin | AIN1_Pin
 80016a8:	f24f 0318 	movw	r3, #61464	; 0xf018
 80016ac:	613b      	str	r3, [r7, #16]
			| AIN2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ae:	2301      	movs	r3, #1
 80016b0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b2:	2300      	movs	r3, #0
 80016b4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b6:	2302      	movs	r3, #2
 80016b8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ba:	f107 0310 	add.w	r3, r7, #16
 80016be:	4619      	mov	r1, r3
 80016c0:	480b      	ldr	r0, [pc, #44]	; (80016f0 <MX_GPIO_Init+0xbc>)
 80016c2:	f004 fe15 	bl	80062f0 <HAL_GPIO_Init>

	/*Configure GPIO pins : BIN2_Pin BIN1_Pin STBY_Pin */
	GPIO_InitStruct.Pin = BIN2_Pin | BIN1_Pin | STBY_Pin;
 80016c6:	f44f 4318 	mov.w	r3, #38912	; 0x9800
 80016ca:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016cc:	2301      	movs	r3, #1
 80016ce:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d0:	2300      	movs	r3, #0
 80016d2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d4:	2302      	movs	r3, #2
 80016d6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d8:	f107 0310 	add.w	r3, r7, #16
 80016dc:	4619      	mov	r1, r3
 80016de:	4805      	ldr	r0, [pc, #20]	; (80016f4 <MX_GPIO_Init+0xc0>)
 80016e0:	f004 fe06 	bl	80062f0 <HAL_GPIO_Init>

}
 80016e4:	bf00      	nop
 80016e6:	3720      	adds	r7, #32
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	40021000 	.word	0x40021000
 80016f0:	40010c00 	.word	0x40010c00
 80016f4:	40010800 	.word	0x40010800

080016f8 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
	readSensor(adc_buf);
 8001700:	4803      	ldr	r0, [pc, #12]	; (8001710 <HAL_ADC_ConvCpltCallback+0x18>)
 8001702:	f003 fbd5 	bl	8004eb0 <readSensor>
}
 8001706:	bf00      	nop
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20000244 	.word	0x20000244

08001714 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001718:	b672      	cpsid	i
}
 800171a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800171c:	e7fe      	b.n	800171c <Error_Handler+0x8>
	...

08001720 <MPU9255_Init>:

//===================================================================================================================
//====== MAIN INIT FUNCTION
//===================================================================================================================

uint8_t MPU9255_Init(I2C_HandleTypeDef *I2Cx){
 8001720:	b580      	push	{r7, lr}
 8001722:	b088      	sub	sp, #32
 8001724:	af04      	add	r7, sp, #16
 8001726:	6078      	str	r0, [r7, #4]
	//pre-def. vars
	uint8_t readData;
	uint8_t writeData;
	printf("**************************** \r\n");
 8001728:	4833      	ldr	r0, [pc, #204]	; (80017f8 <MPU9255_Init+0xd8>)
 800172a:	f008 fc8b 	bl	800a044 <puts>
	printf("MPU9250 STM32 Implementation \r\n");
 800172e:	4833      	ldr	r0, [pc, #204]	; (80017fc <MPU9255_Init+0xdc>)
 8001730:	f008 fc88 	bl	800a044 <puts>
	printf("**************************** \r\n");
 8001734:	4830      	ldr	r0, [pc, #192]	; (80017f8 <MPU9255_Init+0xd8>)
 8001736:	f008 fc85 	bl	800a044 <puts>

	//read MPU9255 WHOAMI
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, WHO_AM_I_MPU9250, 1, &readData, 1, i2c_timeout);
 800173a:	2364      	movs	r3, #100	; 0x64
 800173c:	9302      	str	r3, [sp, #8]
 800173e:	2301      	movs	r3, #1
 8001740:	9301      	str	r3, [sp, #4]
 8001742:	f107 030f 	add.w	r3, r7, #15
 8001746:	9300      	str	r3, [sp, #0]
 8001748:	2301      	movs	r3, #1
 800174a:	2275      	movs	r2, #117	; 0x75
 800174c:	21d0      	movs	r1, #208	; 0xd0
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f005 f9a8 	bl	8006aa4 <HAL_I2C_Mem_Read>

	if (SerialDebugA) {printf("MPU -WHO AM I- is: (Must return 113) %d\r\n", readData);}
 8001754:	7bfb      	ldrb	r3, [r7, #15]
 8001756:	4619      	mov	r1, r3
 8001758:	4829      	ldr	r0, [pc, #164]	; (8001800 <MPU9255_Init+0xe0>)
 800175a:	f008 fbed 	bl	8009f38 <iprintf>

	if (readData == 113) {
 800175e:	7bfb      	ldrb	r3, [r7, #15]
 8001760:	2b71      	cmp	r3, #113	; 0x71
 8001762:	d143      	bne.n	80017ec <MPU9255_Init+0xcc>

		//Start by performing self test and reporting values
		MPU9250SelfTest(I2Cx, SelfTest);
 8001764:	4927      	ldr	r1, [pc, #156]	; (8001804 <MPU9255_Init+0xe4>)
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f001 fd92 	bl	8003290 <MPU9250SelfTest>

		//Calibrate gyro and accelerometers, load biases in bias registers
		calibrateMPU9250(I2Cx, gyroBias, accelBias);
 800176c:	4a26      	ldr	r2, [pc, #152]	; (8001808 <MPU9255_Init+0xe8>)
 800176e:	4927      	ldr	r1, [pc, #156]	; (800180c <MPU9255_Init+0xec>)
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f001 f8a9 	bl	80028c8 <calibrateMPU9250>
		HAL_Delay(1000);
 8001776:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800177a:	f003 fed7 	bl	800552c <HAL_Delay>

		//init Gyro and Accelerometer
		initMPU9250(I2Cx);
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f000 ffbc 	bl	80026fc <initMPU9250>

		//enable Mag bypass
		writeData = 0x22;
 8001784:	2322      	movs	r3, #34	; 0x22
 8001786:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, INT_PIN_CFG, 1, &writeData, 1, i2c_timeout);
 8001788:	2364      	movs	r3, #100	; 0x64
 800178a:	9302      	str	r3, [sp, #8]
 800178c:	2301      	movs	r3, #1
 800178e:	9301      	str	r3, [sp, #4]
 8001790:	f107 030e 	add.w	r3, r7, #14
 8001794:	9300      	str	r3, [sp, #0]
 8001796:	2301      	movs	r3, #1
 8001798:	2237      	movs	r2, #55	; 0x37
 800179a:	21d0      	movs	r1, #208	; 0xd0
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f005 f887 	bl	80068b0 <HAL_I2C_Mem_Write>

		//Read the WHO_AM_I register of the magnetometer
		HAL_I2C_Mem_Read(I2Cx, AK8963_ADDRESS, AK8963_WHO_AM_I, 1, &readData, 1, i2c_timeout);// Read WHO_AM_I register for AK8963
 80017a2:	2364      	movs	r3, #100	; 0x64
 80017a4:	9302      	str	r3, [sp, #8]
 80017a6:	2301      	movs	r3, #1
 80017a8:	9301      	str	r3, [sp, #4]
 80017aa:	f107 030f 	add.w	r3, r7, #15
 80017ae:	9300      	str	r3, [sp, #0]
 80017b0:	2301      	movs	r3, #1
 80017b2:	2200      	movs	r2, #0
 80017b4:	2118      	movs	r1, #24
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f005 f974 	bl	8006aa4 <HAL_I2C_Mem_Read>
		if (SerialDebugA) {printf("MAG -WHO AM I- is: (Must return 72) %d\r\n", readData);}
 80017bc:	7bfb      	ldrb	r3, [r7, #15]
 80017be:	4619      	mov	r1, r3
 80017c0:	4813      	ldr	r0, [pc, #76]	; (8001810 <MPU9255_Init+0xf0>)
 80017c2:	f008 fbb9 	bl	8009f38 <iprintf>
		HAL_Delay(1000);
 80017c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017ca:	f003 feaf 	bl	800552c <HAL_Delay>

		//Get magnetometer calibration from AK8963 ROM
		initAK8963(I2Cx, magCalibration);  // Initialize device for active mode read of magnetometer
 80017ce:	4911      	ldr	r1, [pc, #68]	; (8001814 <MPU9255_Init+0xf4>)
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f000 fd1d 	bl	8002210 <initAK8963>

		calibrateMag(I2Cx, magBias, magScale);
 80017d6:	4a10      	ldr	r2, [pc, #64]	; (8001818 <MPU9255_Init+0xf8>)
 80017d8:	4910      	ldr	r1, [pc, #64]	; (800181c <MPU9255_Init+0xfc>)
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f000 fe1a 	bl	8002414 <calibrateMag>

		HAL_Delay(1000);
 80017e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017e4:	f003 fea2 	bl	800552c <HAL_Delay>
		return 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	e000      	b.n	80017ee <MPU9255_Init+0xce>
	}
	return 1; // Loop forever if communication doesn't happen
 80017ec:	2301      	movs	r3, #1
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	0800af68 	.word	0x0800af68
 80017fc:	0800af88 	.word	0x0800af88
 8001800:	0800afa8 	.word	0x0800afa8
 8001804:	200042dc 	.word	0x200042dc
 8001808:	200042b8 	.word	0x200042b8
 800180c:	200042ac 	.word	0x200042ac
 8001810:	0800afd4 	.word	0x0800afd4
 8001814:	200042a0 	.word	0x200042a0
 8001818:	200042d0 	.word	0x200042d0
 800181c:	200042c4 	.word	0x200042c4

08001820 <readAll>:

void readAll(I2C_HandleTypeDef *I2Cx, MPU9255_t*DataStruct) {
 8001820:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001824:	b08b      	sub	sp, #44	; 0x2c
 8001826:	af06      	add	r7, sp, #24
 8001828:	6078      	str	r0, [r7, #4]
 800182a:	6039      	str	r1, [r7, #0]
	uint8_t Data;

	// If intPin goes high, all data registers have new data
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, INT_STATUS, 1, &Data, 1, i2c_timeout);
 800182c:	2364      	movs	r3, #100	; 0x64
 800182e:	9302      	str	r3, [sp, #8]
 8001830:	2301      	movs	r3, #1
 8001832:	9301      	str	r3, [sp, #4]
 8001834:	f107 030f 	add.w	r3, r7, #15
 8001838:	9300      	str	r3, [sp, #0]
 800183a:	2301      	movs	r3, #1
 800183c:	223a      	movs	r2, #58	; 0x3a
 800183e:	21d0      	movs	r1, #208	; 0xd0
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f005 f92f 	bl	8006aa4 <HAL_I2C_Mem_Read>
	if (Data & 0x01) {  // On interrupt, check if data ready interrupt
 8001846:	7bfb      	ldrb	r3, [r7, #15]
 8001848:	f003 0301 	and.w	r3, r3, #1
 800184c:	2b00      	cmp	r3, #0
 800184e:	f000 8123 	beq.w	8001a98 <readAll+0x278>
		readAccelData(I2Cx, accelCount);  // Read the x/y/z adc values
 8001852:	4997      	ldr	r1, [pc, #604]	; (8001ab0 <readAll+0x290>)
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f000 fc29 	bl	80020ac <readAccelData>
		getAres();
 800185a:	f000 fbf9 	bl	8002050 <getAres>

		// Now we'll calculate the accleration value into actual g's
		ax = (float)accelCount[0]*aRes; // - accelBias[0];  // get actual g value, this depends on scale being set
 800185e:	4b94      	ldr	r3, [pc, #592]	; (8001ab0 <readAll+0x290>)
 8001860:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff fa09 	bl	8000c7c <__aeabi_i2f>
 800186a:	4602      	mov	r2, r0
 800186c:	4b91      	ldr	r3, [pc, #580]	; (8001ab4 <readAll+0x294>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4619      	mov	r1, r3
 8001872:	4610      	mov	r0, r2
 8001874:	f7ff fa56 	bl	8000d24 <__aeabi_fmul>
 8001878:	4603      	mov	r3, r0
 800187a:	461a      	mov	r2, r3
 800187c:	4b8e      	ldr	r3, [pc, #568]	; (8001ab8 <readAll+0x298>)
 800187e:	601a      	str	r2, [r3, #0]
		ay = (float)accelCount[1]*aRes; // - accelBias[1];
 8001880:	4b8b      	ldr	r3, [pc, #556]	; (8001ab0 <readAll+0x290>)
 8001882:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff f9f8 	bl	8000c7c <__aeabi_i2f>
 800188c:	4602      	mov	r2, r0
 800188e:	4b89      	ldr	r3, [pc, #548]	; (8001ab4 <readAll+0x294>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4619      	mov	r1, r3
 8001894:	4610      	mov	r0, r2
 8001896:	f7ff fa45 	bl	8000d24 <__aeabi_fmul>
 800189a:	4603      	mov	r3, r0
 800189c:	461a      	mov	r2, r3
 800189e:	4b87      	ldr	r3, [pc, #540]	; (8001abc <readAll+0x29c>)
 80018a0:	601a      	str	r2, [r3, #0]
		az = (float)accelCount[2]*aRes; // - accelBias[2];
 80018a2:	4b83      	ldr	r3, [pc, #524]	; (8001ab0 <readAll+0x290>)
 80018a4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff f9e7 	bl	8000c7c <__aeabi_i2f>
 80018ae:	4602      	mov	r2, r0
 80018b0:	4b80      	ldr	r3, [pc, #512]	; (8001ab4 <readAll+0x294>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4619      	mov	r1, r3
 80018b6:	4610      	mov	r0, r2
 80018b8:	f7ff fa34 	bl	8000d24 <__aeabi_fmul>
 80018bc:	4603      	mov	r3, r0
 80018be:	461a      	mov	r2, r3
 80018c0:	4b7f      	ldr	r3, [pc, #508]	; (8001ac0 <readAll+0x2a0>)
 80018c2:	601a      	str	r2, [r3, #0]

		DataStruct->AccelX = ax;
 80018c4:	4b7c      	ldr	r3, [pc, #496]	; (8001ab8 <readAll+0x298>)
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	601a      	str	r2, [r3, #0]
		DataStruct->AccelY = ay;
 80018cc:	4b7b      	ldr	r3, [pc, #492]	; (8001abc <readAll+0x29c>)
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	605a      	str	r2, [r3, #4]
		DataStruct->AccelZ = az;
 80018d4:	4b7a      	ldr	r3, [pc, #488]	; (8001ac0 <readAll+0x2a0>)
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	609a      	str	r2, [r3, #8]

		readGyroData(I2Cx, gyroCount);  // Read the x/y/z adc values
 80018dc:	4979      	ldr	r1, [pc, #484]	; (8001ac4 <readAll+0x2a4>)
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f000 fc17 	bl	8002112 <readGyroData>
		getGres();
 80018e4:	f000 fb82 	bl	8001fec <getGres>

		// Calculate the gyro value into actual degrees per second
		gx = (float)gyroCount[0]*gRes;  // get actual gyro value, this depends on scale being set
 80018e8:	4b76      	ldr	r3, [pc, #472]	; (8001ac4 <readAll+0x2a4>)
 80018ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7ff f9c4 	bl	8000c7c <__aeabi_i2f>
 80018f4:	4602      	mov	r2, r0
 80018f6:	4b74      	ldr	r3, [pc, #464]	; (8001ac8 <readAll+0x2a8>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4619      	mov	r1, r3
 80018fc:	4610      	mov	r0, r2
 80018fe:	f7ff fa11 	bl	8000d24 <__aeabi_fmul>
 8001902:	4603      	mov	r3, r0
 8001904:	461a      	mov	r2, r3
 8001906:	4b71      	ldr	r3, [pc, #452]	; (8001acc <readAll+0x2ac>)
 8001908:	601a      	str	r2, [r3, #0]
		gy = (float)gyroCount[1]*gRes;
 800190a:	4b6e      	ldr	r3, [pc, #440]	; (8001ac4 <readAll+0x2a4>)
 800190c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff f9b3 	bl	8000c7c <__aeabi_i2f>
 8001916:	4602      	mov	r2, r0
 8001918:	4b6b      	ldr	r3, [pc, #428]	; (8001ac8 <readAll+0x2a8>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4619      	mov	r1, r3
 800191e:	4610      	mov	r0, r2
 8001920:	f7ff fa00 	bl	8000d24 <__aeabi_fmul>
 8001924:	4603      	mov	r3, r0
 8001926:	461a      	mov	r2, r3
 8001928:	4b69      	ldr	r3, [pc, #420]	; (8001ad0 <readAll+0x2b0>)
 800192a:	601a      	str	r2, [r3, #0]
		gz = (float)gyroCount[2]*gRes;
 800192c:	4b65      	ldr	r3, [pc, #404]	; (8001ac4 <readAll+0x2a4>)
 800192e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff f9a2 	bl	8000c7c <__aeabi_i2f>
 8001938:	4602      	mov	r2, r0
 800193a:	4b63      	ldr	r3, [pc, #396]	; (8001ac8 <readAll+0x2a8>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4619      	mov	r1, r3
 8001940:	4610      	mov	r0, r2
 8001942:	f7ff f9ef 	bl	8000d24 <__aeabi_fmul>
 8001946:	4603      	mov	r3, r0
 8001948:	461a      	mov	r2, r3
 800194a:	4b62      	ldr	r3, [pc, #392]	; (8001ad4 <readAll+0x2b4>)
 800194c:	601a      	str	r2, [r3, #0]

		DataStruct->GyroX = gx;
 800194e:	4b5f      	ldr	r3, [pc, #380]	; (8001acc <readAll+0x2ac>)
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	60da      	str	r2, [r3, #12]
		DataStruct->GyroY = gy;
 8001956:	4b5e      	ldr	r3, [pc, #376]	; (8001ad0 <readAll+0x2b0>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	611a      	str	r2, [r3, #16]
		DataStruct->GyroZ = gz;
 800195e:	4b5d      	ldr	r3, [pc, #372]	; (8001ad4 <readAll+0x2b4>)
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	615a      	str	r2, [r3, #20]

		readMagData(I2Cx, magCount);  // Read the x/y/z adc values
 8001966:	495c      	ldr	r1, [pc, #368]	; (8001ad8 <readAll+0x2b8>)
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f000 fc05 	bl	8002178 <readMagData>
		getMres();
 800196e:	f000 fb1f 	bl	8001fb0 <getMres>

		// Calculate the magnetometer values in milliGauss
		// Include factory calibration per data sheet and user environmental corrections
		mx = (float)magCount[0]*mRes*magCalibration[0] - magBias[0];  // get actual magnetometer value, this depends on scale being set
 8001972:	4b59      	ldr	r3, [pc, #356]	; (8001ad8 <readAll+0x2b8>)
 8001974:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001978:	4618      	mov	r0, r3
 800197a:	f7ff f97f 	bl	8000c7c <__aeabi_i2f>
 800197e:	4602      	mov	r2, r0
 8001980:	4b56      	ldr	r3, [pc, #344]	; (8001adc <readAll+0x2bc>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4619      	mov	r1, r3
 8001986:	4610      	mov	r0, r2
 8001988:	f7ff f9cc 	bl	8000d24 <__aeabi_fmul>
 800198c:	4603      	mov	r3, r0
 800198e:	461a      	mov	r2, r3
 8001990:	4b53      	ldr	r3, [pc, #332]	; (8001ae0 <readAll+0x2c0>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4619      	mov	r1, r3
 8001996:	4610      	mov	r0, r2
 8001998:	f7ff f9c4 	bl	8000d24 <__aeabi_fmul>
 800199c:	4603      	mov	r3, r0
 800199e:	461a      	mov	r2, r3
 80019a0:	4b50      	ldr	r3, [pc, #320]	; (8001ae4 <readAll+0x2c4>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4619      	mov	r1, r3
 80019a6:	4610      	mov	r0, r2
 80019a8:	f7ff f8b2 	bl	8000b10 <__aeabi_fsub>
 80019ac:	4603      	mov	r3, r0
 80019ae:	461a      	mov	r2, r3
 80019b0:	4b4d      	ldr	r3, [pc, #308]	; (8001ae8 <readAll+0x2c8>)
 80019b2:	601a      	str	r2, [r3, #0]
		my = (float)magCount[1]*mRes*magCalibration[1] - magBias[1];
 80019b4:	4b48      	ldr	r3, [pc, #288]	; (8001ad8 <readAll+0x2b8>)
 80019b6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff f95e 	bl	8000c7c <__aeabi_i2f>
 80019c0:	4602      	mov	r2, r0
 80019c2:	4b46      	ldr	r3, [pc, #280]	; (8001adc <readAll+0x2bc>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4619      	mov	r1, r3
 80019c8:	4610      	mov	r0, r2
 80019ca:	f7ff f9ab 	bl	8000d24 <__aeabi_fmul>
 80019ce:	4603      	mov	r3, r0
 80019d0:	461a      	mov	r2, r3
 80019d2:	4b43      	ldr	r3, [pc, #268]	; (8001ae0 <readAll+0x2c0>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	4619      	mov	r1, r3
 80019d8:	4610      	mov	r0, r2
 80019da:	f7ff f9a3 	bl	8000d24 <__aeabi_fmul>
 80019de:	4603      	mov	r3, r0
 80019e0:	461a      	mov	r2, r3
 80019e2:	4b40      	ldr	r3, [pc, #256]	; (8001ae4 <readAll+0x2c4>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	4619      	mov	r1, r3
 80019e8:	4610      	mov	r0, r2
 80019ea:	f7ff f891 	bl	8000b10 <__aeabi_fsub>
 80019ee:	4603      	mov	r3, r0
 80019f0:	461a      	mov	r2, r3
 80019f2:	4b3e      	ldr	r3, [pc, #248]	; (8001aec <readAll+0x2cc>)
 80019f4:	601a      	str	r2, [r3, #0]
		mz = (float)magCount[2]*mRes*magCalibration[2] - magBias[2];
 80019f6:	4b38      	ldr	r3, [pc, #224]	; (8001ad8 <readAll+0x2b8>)
 80019f8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff f93d 	bl	8000c7c <__aeabi_i2f>
 8001a02:	4602      	mov	r2, r0
 8001a04:	4b35      	ldr	r3, [pc, #212]	; (8001adc <readAll+0x2bc>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4610      	mov	r0, r2
 8001a0c:	f7ff f98a 	bl	8000d24 <__aeabi_fmul>
 8001a10:	4603      	mov	r3, r0
 8001a12:	461a      	mov	r2, r3
 8001a14:	4b32      	ldr	r3, [pc, #200]	; (8001ae0 <readAll+0x2c0>)
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4610      	mov	r0, r2
 8001a1c:	f7ff f982 	bl	8000d24 <__aeabi_fmul>
 8001a20:	4603      	mov	r3, r0
 8001a22:	461a      	mov	r2, r3
 8001a24:	4b2f      	ldr	r3, [pc, #188]	; (8001ae4 <readAll+0x2c4>)
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4610      	mov	r0, r2
 8001a2c:	f7ff f870 	bl	8000b10 <__aeabi_fsub>
 8001a30:	4603      	mov	r3, r0
 8001a32:	461a      	mov	r2, r3
 8001a34:	4b2e      	ldr	r3, [pc, #184]	; (8001af0 <readAll+0x2d0>)
 8001a36:	601a      	str	r2, [r3, #0]
		mx *= magScale[0];
 8001a38:	4b2e      	ldr	r3, [pc, #184]	; (8001af4 <readAll+0x2d4>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a2a      	ldr	r2, [pc, #168]	; (8001ae8 <readAll+0x2c8>)
 8001a3e:	6812      	ldr	r2, [r2, #0]
 8001a40:	4611      	mov	r1, r2
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff f96e 	bl	8000d24 <__aeabi_fmul>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	4b26      	ldr	r3, [pc, #152]	; (8001ae8 <readAll+0x2c8>)
 8001a4e:	601a      	str	r2, [r3, #0]
		my *= magScale[1];
 8001a50:	4b28      	ldr	r3, [pc, #160]	; (8001af4 <readAll+0x2d4>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	4a25      	ldr	r2, [pc, #148]	; (8001aec <readAll+0x2cc>)
 8001a56:	6812      	ldr	r2, [r2, #0]
 8001a58:	4611      	mov	r1, r2
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff f962 	bl	8000d24 <__aeabi_fmul>
 8001a60:	4603      	mov	r3, r0
 8001a62:	461a      	mov	r2, r3
 8001a64:	4b21      	ldr	r3, [pc, #132]	; (8001aec <readAll+0x2cc>)
 8001a66:	601a      	str	r2, [r3, #0]
		mz *= magScale[2];
 8001a68:	4b22      	ldr	r3, [pc, #136]	; (8001af4 <readAll+0x2d4>)
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	4a20      	ldr	r2, [pc, #128]	; (8001af0 <readAll+0x2d0>)
 8001a6e:	6812      	ldr	r2, [r2, #0]
 8001a70:	4611      	mov	r1, r2
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff f956 	bl	8000d24 <__aeabi_fmul>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	4b1c      	ldr	r3, [pc, #112]	; (8001af0 <readAll+0x2d0>)
 8001a7e:	601a      	str	r2, [r3, #0]

		DataStruct->MagX = mx;
 8001a80:	4b19      	ldr	r3, [pc, #100]	; (8001ae8 <readAll+0x2c8>)
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	619a      	str	r2, [r3, #24]
		DataStruct->MagY = my;
 8001a88:	4b18      	ldr	r3, [pc, #96]	; (8001aec <readAll+0x2cc>)
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	61da      	str	r2, [r3, #28]
		DataStruct->MagZ = mz;
 8001a90:	4b17      	ldr	r3, [pc, #92]	; (8001af0 <readAll+0x2d0>)
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	621a      	str	r2, [r3, #32]
	}

	//Now = __HAL_TIM_GET_COUNTER(&htim1);
	Now = HAL_GetTick();
 8001a98:	f003 fd3e 	bl	8005518 <HAL_GetTick>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	4a16      	ldr	r2, [pc, #88]	; (8001af8 <readAll+0x2d8>)
 8001aa0:	6013      	str	r3, [r2, #0]
	deltat = ((Now - lastUpdate)/1000.0f); // set integration time by time elapsed since last filter update
 8001aa2:	4b15      	ldr	r3, [pc, #84]	; (8001af8 <readAll+0x2d8>)
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	4b15      	ldr	r3, [pc, #84]	; (8001afc <readAll+0x2dc>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	4618      	mov	r0, r3
 8001aae:	e027      	b.n	8001b00 <readAll+0x2e0>
 8001ab0:	20004288 	.word	0x20004288
 8001ab4:	2000427c 	.word	0x2000427c
 8001ab8:	20004310 	.word	0x20004310
 8001abc:	20004314 	.word	0x20004314
 8001ac0:	20004318 	.word	0x20004318
 8001ac4:	20004290 	.word	0x20004290
 8001ac8:	20004280 	.word	0x20004280
 8001acc:	2000431c 	.word	0x2000431c
 8001ad0:	20004320 	.word	0x20004320
 8001ad4:	20004324 	.word	0x20004324
 8001ad8:	20004298 	.word	0x20004298
 8001adc:	20004284 	.word	0x20004284
 8001ae0:	200042a0 	.word	0x200042a0
 8001ae4:	200042c4 	.word	0x200042c4
 8001ae8:	20004328 	.word	0x20004328
 8001aec:	2000432c 	.word	0x2000432c
 8001af0:	20004330 	.word	0x20004330
 8001af4:	200042d0 	.word	0x200042d0
 8001af8:	2000430c 	.word	0x2000430c
 8001afc:	20004308 	.word	0x20004308
 8001b00:	f7ff f8b8 	bl	8000c74 <__aeabi_ui2f>
 8001b04:	4603      	mov	r3, r0
 8001b06:	499c      	ldr	r1, [pc, #624]	; (8001d78 <readAll+0x558>)
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff f9bf 	bl	8000e8c <__aeabi_fdiv>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	461a      	mov	r2, r3
 8001b12:	4b9a      	ldr	r3, [pc, #616]	; (8001d7c <readAll+0x55c>)
 8001b14:	601a      	str	r2, [r3, #0]
	lastUpdate = Now;
 8001b16:	4b9a      	ldr	r3, [pc, #616]	; (8001d80 <readAll+0x560>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a9a      	ldr	r2, [pc, #616]	; (8001d84 <readAll+0x564>)
 8001b1c:	6013      	str	r3, [r2, #0]
	sum += deltat; // sum for averaging filter update rate
 8001b1e:	4b9a      	ldr	r3, [pc, #616]	; (8001d88 <readAll+0x568>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a96      	ldr	r2, [pc, #600]	; (8001d7c <readAll+0x55c>)
 8001b24:	6812      	ldr	r2, [r2, #0]
 8001b26:	4611      	mov	r1, r2
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7fe fff3 	bl	8000b14 <__addsf3>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	461a      	mov	r2, r3
 8001b32:	4b95      	ldr	r3, [pc, #596]	; (8001d88 <readAll+0x568>)
 8001b34:	601a      	str	r2, [r3, #0]

	// Calculate quaternions based on Madgwick's filter
	//Since MPU9250's mag. and IMU modules are different and seperate (AK8963 and MPU6050), their...
	//...coordinate systems also different. So, to compensate this, order should be my - mx - mz
	//QuaternionUpdate(-ax, ay, az, gx*PI/180.0f, -gy*PI/180.0f, -gz*PI/180.0f,  my,  -mx, mz);
	QuaternionUpdate(ax, ay, az, gx*PI/180.0f, gy*PI/180.0f, gz*PI/180.0f,  my,  mx, mz);
 8001b36:	4b95      	ldr	r3, [pc, #596]	; (8001d8c <readAll+0x56c>)
 8001b38:	681c      	ldr	r4, [r3, #0]
 8001b3a:	4b95      	ldr	r3, [pc, #596]	; (8001d90 <readAll+0x570>)
 8001b3c:	681d      	ldr	r5, [r3, #0]
 8001b3e:	4b95      	ldr	r3, [pc, #596]	; (8001d94 <readAll+0x574>)
 8001b40:	681e      	ldr	r6, [r3, #0]
 8001b42:	4b95      	ldr	r3, [pc, #596]	; (8001d98 <readAll+0x578>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7fe fc66 	bl	8000418 <__aeabi_f2d>
 8001b4c:	a388      	add	r3, pc, #544	; (adr r3, 8001d70 <readAll+0x550>)
 8001b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b52:	f7fe fcb9 	bl	80004c8 <__aeabi_dmul>
 8001b56:	4602      	mov	r2, r0
 8001b58:	460b      	mov	r3, r1
 8001b5a:	4610      	mov	r0, r2
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	f04f 0200 	mov.w	r2, #0
 8001b62:	4b8e      	ldr	r3, [pc, #568]	; (8001d9c <readAll+0x57c>)
 8001b64:	f7fe fdda 	bl	800071c <__aeabi_ddiv>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	4610      	mov	r0, r2
 8001b6e:	4619      	mov	r1, r3
 8001b70:	f7fe ff7a 	bl	8000a68 <__aeabi_d2f>
 8001b74:	4681      	mov	r9, r0
 8001b76:	4b8a      	ldr	r3, [pc, #552]	; (8001da0 <readAll+0x580>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7fe fc4c 	bl	8000418 <__aeabi_f2d>
 8001b80:	a37b      	add	r3, pc, #492	; (adr r3, 8001d70 <readAll+0x550>)
 8001b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b86:	f7fe fc9f 	bl	80004c8 <__aeabi_dmul>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	4610      	mov	r0, r2
 8001b90:	4619      	mov	r1, r3
 8001b92:	f04f 0200 	mov.w	r2, #0
 8001b96:	4b81      	ldr	r3, [pc, #516]	; (8001d9c <readAll+0x57c>)
 8001b98:	f7fe fdc0 	bl	800071c <__aeabi_ddiv>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	4610      	mov	r0, r2
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	f7fe ff60 	bl	8000a68 <__aeabi_d2f>
 8001ba8:	4680      	mov	r8, r0
 8001baa:	4b7e      	ldr	r3, [pc, #504]	; (8001da4 <readAll+0x584>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7fe fc32 	bl	8000418 <__aeabi_f2d>
 8001bb4:	a36e      	add	r3, pc, #440	; (adr r3, 8001d70 <readAll+0x550>)
 8001bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bba:	f7fe fc85 	bl	80004c8 <__aeabi_dmul>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	4610      	mov	r0, r2
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	f04f 0200 	mov.w	r2, #0
 8001bca:	4b74      	ldr	r3, [pc, #464]	; (8001d9c <readAll+0x57c>)
 8001bcc:	f7fe fda6 	bl	800071c <__aeabi_ddiv>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	4610      	mov	r0, r2
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	f7fe ff46 	bl	8000a68 <__aeabi_d2f>
 8001bdc:	4b72      	ldr	r3, [pc, #456]	; (8001da8 <readAll+0x588>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a72      	ldr	r2, [pc, #456]	; (8001dac <readAll+0x58c>)
 8001be2:	6812      	ldr	r2, [r2, #0]
 8001be4:	4972      	ldr	r1, [pc, #456]	; (8001db0 <readAll+0x590>)
 8001be6:	6809      	ldr	r1, [r1, #0]
 8001be8:	9104      	str	r1, [sp, #16]
 8001bea:	9203      	str	r2, [sp, #12]
 8001bec:	9302      	str	r3, [sp, #8]
 8001bee:	9001      	str	r0, [sp, #4]
 8001bf0:	f8cd 8000 	str.w	r8, [sp]
 8001bf4:	464b      	mov	r3, r9
 8001bf6:	4632      	mov	r2, r6
 8001bf8:	4629      	mov	r1, r5
 8001bfa:	4620      	mov	r0, r4
 8001bfc:	f002 f896 	bl	8003d2c <QuaternionUpdate>

	// Convert quaternions to Euler angles
	a12 =   2.0f * (q[1] * q[2] + q[0] * q[3]);
 8001c00:	4b6c      	ldr	r3, [pc, #432]	; (8001db4 <readAll+0x594>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	4a6b      	ldr	r2, [pc, #428]	; (8001db4 <readAll+0x594>)
 8001c06:	6892      	ldr	r2, [r2, #8]
 8001c08:	4611      	mov	r1, r2
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7ff f88a 	bl	8000d24 <__aeabi_fmul>
 8001c10:	4603      	mov	r3, r0
 8001c12:	461c      	mov	r4, r3
 8001c14:	4b67      	ldr	r3, [pc, #412]	; (8001db4 <readAll+0x594>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a66      	ldr	r2, [pc, #408]	; (8001db4 <readAll+0x594>)
 8001c1a:	68d2      	ldr	r2, [r2, #12]
 8001c1c:	4611      	mov	r1, r2
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff f880 	bl	8000d24 <__aeabi_fmul>
 8001c24:	4603      	mov	r3, r0
 8001c26:	4619      	mov	r1, r3
 8001c28:	4620      	mov	r0, r4
 8001c2a:	f7fe ff73 	bl	8000b14 <__addsf3>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	4619      	mov	r1, r3
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7fe ff6e 	bl	8000b14 <__addsf3>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	4b5e      	ldr	r3, [pc, #376]	; (8001db8 <readAll+0x598>)
 8001c3e:	601a      	str	r2, [r3, #0]
	a22 =   q[0] * q[0] + q[1] * q[1] - q[2] * q[2] - q[3] * q[3];
 8001c40:	4b5c      	ldr	r3, [pc, #368]	; (8001db4 <readAll+0x594>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a5b      	ldr	r2, [pc, #364]	; (8001db4 <readAll+0x594>)
 8001c46:	6812      	ldr	r2, [r2, #0]
 8001c48:	4611      	mov	r1, r2
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff f86a 	bl	8000d24 <__aeabi_fmul>
 8001c50:	4603      	mov	r3, r0
 8001c52:	461c      	mov	r4, r3
 8001c54:	4b57      	ldr	r3, [pc, #348]	; (8001db4 <readAll+0x594>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	4a56      	ldr	r2, [pc, #344]	; (8001db4 <readAll+0x594>)
 8001c5a:	6852      	ldr	r2, [r2, #4]
 8001c5c:	4611      	mov	r1, r2
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7ff f860 	bl	8000d24 <__aeabi_fmul>
 8001c64:	4603      	mov	r3, r0
 8001c66:	4619      	mov	r1, r3
 8001c68:	4620      	mov	r0, r4
 8001c6a:	f7fe ff53 	bl	8000b14 <__addsf3>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	461c      	mov	r4, r3
 8001c72:	4b50      	ldr	r3, [pc, #320]	; (8001db4 <readAll+0x594>)
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	4a4f      	ldr	r2, [pc, #316]	; (8001db4 <readAll+0x594>)
 8001c78:	6892      	ldr	r2, [r2, #8]
 8001c7a:	4611      	mov	r1, r2
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff f851 	bl	8000d24 <__aeabi_fmul>
 8001c82:	4603      	mov	r3, r0
 8001c84:	4619      	mov	r1, r3
 8001c86:	4620      	mov	r0, r4
 8001c88:	f7fe ff42 	bl	8000b10 <__aeabi_fsub>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	461c      	mov	r4, r3
 8001c90:	4b48      	ldr	r3, [pc, #288]	; (8001db4 <readAll+0x594>)
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	4a47      	ldr	r2, [pc, #284]	; (8001db4 <readAll+0x594>)
 8001c96:	68d2      	ldr	r2, [r2, #12]
 8001c98:	4611      	mov	r1, r2
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7ff f842 	bl	8000d24 <__aeabi_fmul>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4620      	mov	r0, r4
 8001ca6:	f7fe ff33 	bl	8000b10 <__aeabi_fsub>
 8001caa:	4603      	mov	r3, r0
 8001cac:	461a      	mov	r2, r3
 8001cae:	4b43      	ldr	r3, [pc, #268]	; (8001dbc <readAll+0x59c>)
 8001cb0:	601a      	str	r2, [r3, #0]
	a31 =   2.0f * (q[0] * q[1] + q[2] * q[3]);
 8001cb2:	4b40      	ldr	r3, [pc, #256]	; (8001db4 <readAll+0x594>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a3f      	ldr	r2, [pc, #252]	; (8001db4 <readAll+0x594>)
 8001cb8:	6852      	ldr	r2, [r2, #4]
 8001cba:	4611      	mov	r1, r2
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff f831 	bl	8000d24 <__aeabi_fmul>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	461c      	mov	r4, r3
 8001cc6:	4b3b      	ldr	r3, [pc, #236]	; (8001db4 <readAll+0x594>)
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	4a3a      	ldr	r2, [pc, #232]	; (8001db4 <readAll+0x594>)
 8001ccc:	68d2      	ldr	r2, [r2, #12]
 8001cce:	4611      	mov	r1, r2
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff f827 	bl	8000d24 <__aeabi_fmul>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4620      	mov	r0, r4
 8001cdc:	f7fe ff1a 	bl	8000b14 <__addsf3>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7fe ff15 	bl	8000b14 <__addsf3>
 8001cea:	4603      	mov	r3, r0
 8001cec:	461a      	mov	r2, r3
 8001cee:	4b34      	ldr	r3, [pc, #208]	; (8001dc0 <readAll+0x5a0>)
 8001cf0:	601a      	str	r2, [r3, #0]
	a32 =   2.0f * (q[1] * q[3] - q[0] * q[2]);
 8001cf2:	4b30      	ldr	r3, [pc, #192]	; (8001db4 <readAll+0x594>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	4a2f      	ldr	r2, [pc, #188]	; (8001db4 <readAll+0x594>)
 8001cf8:	68d2      	ldr	r2, [r2, #12]
 8001cfa:	4611      	mov	r1, r2
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7ff f811 	bl	8000d24 <__aeabi_fmul>
 8001d02:	4603      	mov	r3, r0
 8001d04:	461c      	mov	r4, r3
 8001d06:	4b2b      	ldr	r3, [pc, #172]	; (8001db4 <readAll+0x594>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a2a      	ldr	r2, [pc, #168]	; (8001db4 <readAll+0x594>)
 8001d0c:	6892      	ldr	r2, [r2, #8]
 8001d0e:	4611      	mov	r1, r2
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff f807 	bl	8000d24 <__aeabi_fmul>
 8001d16:	4603      	mov	r3, r0
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4620      	mov	r0, r4
 8001d1c:	f7fe fef8 	bl	8000b10 <__aeabi_fsub>
 8001d20:	4603      	mov	r3, r0
 8001d22:	4619      	mov	r1, r3
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7fe fef5 	bl	8000b14 <__addsf3>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	4b25      	ldr	r3, [pc, #148]	; (8001dc4 <readAll+0x5a4>)
 8001d30:	601a      	str	r2, [r3, #0]
	a33 =   q[0] * q[0] - q[1] * q[1] - q[2] * q[2] + q[3] * q[3];
 8001d32:	4b20      	ldr	r3, [pc, #128]	; (8001db4 <readAll+0x594>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a1f      	ldr	r2, [pc, #124]	; (8001db4 <readAll+0x594>)
 8001d38:	6812      	ldr	r2, [r2, #0]
 8001d3a:	4611      	mov	r1, r2
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7fe fff1 	bl	8000d24 <__aeabi_fmul>
 8001d42:	4603      	mov	r3, r0
 8001d44:	461c      	mov	r4, r3
 8001d46:	4b1b      	ldr	r3, [pc, #108]	; (8001db4 <readAll+0x594>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	4a1a      	ldr	r2, [pc, #104]	; (8001db4 <readAll+0x594>)
 8001d4c:	6852      	ldr	r2, [r2, #4]
 8001d4e:	4611      	mov	r1, r2
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7fe ffe7 	bl	8000d24 <__aeabi_fmul>
 8001d56:	4603      	mov	r3, r0
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4620      	mov	r0, r4
 8001d5c:	f7fe fed8 	bl	8000b10 <__aeabi_fsub>
 8001d60:	4603      	mov	r3, r0
 8001d62:	461c      	mov	r4, r3
 8001d64:	4b13      	ldr	r3, [pc, #76]	; (8001db4 <readAll+0x594>)
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	4a12      	ldr	r2, [pc, #72]	; (8001db4 <readAll+0x594>)
 8001d6a:	6892      	ldr	r2, [r2, #8]
 8001d6c:	e02c      	b.n	8001dc8 <readAll+0x5a8>
 8001d6e:	bf00      	nop
 8001d70:	35f80991 	.word	0x35f80991
 8001d74:	40092492 	.word	0x40092492
 8001d78:	447a0000 	.word	0x447a0000
 8001d7c:	20004300 	.word	0x20004300
 8001d80:	2000430c 	.word	0x2000430c
 8001d84:	20004308 	.word	0x20004308
 8001d88:	20004304 	.word	0x20004304
 8001d8c:	20004310 	.word	0x20004310
 8001d90:	20004314 	.word	0x20004314
 8001d94:	20004318 	.word	0x20004318
 8001d98:	2000431c 	.word	0x2000431c
 8001d9c:	40668000 	.word	0x40668000
 8001da0:	20004320 	.word	0x20004320
 8001da4:	20004324 	.word	0x20004324
 8001da8:	2000432c 	.word	0x2000432c
 8001dac:	20004328 	.word	0x20004328
 8001db0:	20004330 	.word	0x20004330
 8001db4:	20000008 	.word	0x20000008
 8001db8:	20004340 	.word	0x20004340
 8001dbc:	20004344 	.word	0x20004344
 8001dc0:	20004348 	.word	0x20004348
 8001dc4:	2000434c 	.word	0x2000434c
 8001dc8:	4611      	mov	r1, r2
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7fe ffaa 	bl	8000d24 <__aeabi_fmul>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	4620      	mov	r0, r4
 8001dd6:	f7fe fe9b 	bl	8000b10 <__aeabi_fsub>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	461c      	mov	r4, r3
 8001dde:	4b62      	ldr	r3, [pc, #392]	; (8001f68 <readAll+0x748>)
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	4a61      	ldr	r2, [pc, #388]	; (8001f68 <readAll+0x748>)
 8001de4:	68d2      	ldr	r2, [r2, #12]
 8001de6:	4611      	mov	r1, r2
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7fe ff9b 	bl	8000d24 <__aeabi_fmul>
 8001dee:	4603      	mov	r3, r0
 8001df0:	4619      	mov	r1, r3
 8001df2:	4620      	mov	r0, r4
 8001df4:	f7fe fe8e 	bl	8000b14 <__addsf3>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	4b5b      	ldr	r3, [pc, #364]	; (8001f6c <readAll+0x74c>)
 8001dfe:	601a      	str	r2, [r3, #0]

	pitch = -asinf(a32);
 8001e00:	4b5b      	ldr	r3, [pc, #364]	; (8001f70 <readAll+0x750>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f006 fe7f 	bl	8008b08 <asinf>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001e10:	4a58      	ldr	r2, [pc, #352]	; (8001f74 <readAll+0x754>)
 8001e12:	6013      	str	r3, [r2, #0]
	roll  = atan2f(a31, a33);
 8001e14:	4b58      	ldr	r3, [pc, #352]	; (8001f78 <readAll+0x758>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a54      	ldr	r2, [pc, #336]	; (8001f6c <readAll+0x74c>)
 8001e1a:	6812      	ldr	r2, [r2, #0]
 8001e1c:	4611      	mov	r1, r2
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f006 fe92 	bl	8008b48 <atan2f>
 8001e24:	4603      	mov	r3, r0
 8001e26:	4a55      	ldr	r2, [pc, #340]	; (8001f7c <readAll+0x75c>)
 8001e28:	6013      	str	r3, [r2, #0]
	yaw   = atan2f(a12, a22);
 8001e2a:	4b55      	ldr	r3, [pc, #340]	; (8001f80 <readAll+0x760>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a55      	ldr	r2, [pc, #340]	; (8001f84 <readAll+0x764>)
 8001e30:	6812      	ldr	r2, [r2, #0]
 8001e32:	4611      	mov	r1, r2
 8001e34:	4618      	mov	r0, r3
 8001e36:	f006 fe87 	bl	8008b48 <atan2f>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	4a52      	ldr	r2, [pc, #328]	; (8001f88 <readAll+0x768>)
 8001e3e:	6013      	str	r3, [r2, #0]
	pitch *= 180.0f / PI;
 8001e40:	4b4c      	ldr	r3, [pc, #304]	; (8001f74 <readAll+0x754>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7fe fae7 	bl	8000418 <__aeabi_f2d>
 8001e4a:	a345      	add	r3, pc, #276	; (adr r3, 8001f60 <readAll+0x740>)
 8001e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e50:	f7fe fb3a 	bl	80004c8 <__aeabi_dmul>
 8001e54:	4602      	mov	r2, r0
 8001e56:	460b      	mov	r3, r1
 8001e58:	4610      	mov	r0, r2
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	f7fe fe04 	bl	8000a68 <__aeabi_d2f>
 8001e60:	4603      	mov	r3, r0
 8001e62:	4a44      	ldr	r2, [pc, #272]	; (8001f74 <readAll+0x754>)
 8001e64:	6013      	str	r3, [r2, #0]
	yaw   *= 180.0f / PI;
 8001e66:	4b48      	ldr	r3, [pc, #288]	; (8001f88 <readAll+0x768>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7fe fad4 	bl	8000418 <__aeabi_f2d>
 8001e70:	a33b      	add	r3, pc, #236	; (adr r3, 8001f60 <readAll+0x740>)
 8001e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e76:	f7fe fb27 	bl	80004c8 <__aeabi_dmul>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	4610      	mov	r0, r2
 8001e80:	4619      	mov	r1, r3
 8001e82:	f7fe fdf1 	bl	8000a68 <__aeabi_d2f>
 8001e86:	4603      	mov	r3, r0
 8001e88:	4a3f      	ldr	r2, [pc, #252]	; (8001f88 <readAll+0x768>)
 8001e8a:	6013      	str	r3, [r2, #0]
	yaw   += 5.53f; // Declination
 8001e8c:	4b3e      	ldr	r3, [pc, #248]	; (8001f88 <readAll+0x768>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	493e      	ldr	r1, [pc, #248]	; (8001f8c <readAll+0x76c>)
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7fe fe3e 	bl	8000b14 <__addsf3>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	4b3a      	ldr	r3, [pc, #232]	; (8001f88 <readAll+0x768>)
 8001e9e:	601a      	str	r2, [r3, #0]

	if(yaw < 0) yaw   += 360.0f; // Ensure yaw stays between 0 and 360
 8001ea0:	4b39      	ldr	r3, [pc, #228]	; (8001f88 <readAll+0x768>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f04f 0100 	mov.w	r1, #0
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff f8d9 	bl	8001060 <__aeabi_fcmplt>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d009      	beq.n	8001ec8 <readAll+0x6a8>
 8001eb4:	4b34      	ldr	r3, [pc, #208]	; (8001f88 <readAll+0x768>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4935      	ldr	r1, [pc, #212]	; (8001f90 <readAll+0x770>)
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7fe fe2a 	bl	8000b14 <__addsf3>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	4b30      	ldr	r3, [pc, #192]	; (8001f88 <readAll+0x768>)
 8001ec6:	601a      	str	r2, [r3, #0]
	roll  *= 180.0f / PI;
 8001ec8:	4b2c      	ldr	r3, [pc, #176]	; (8001f7c <readAll+0x75c>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7fe faa3 	bl	8000418 <__aeabi_f2d>
 8001ed2:	a323      	add	r3, pc, #140	; (adr r3, 8001f60 <readAll+0x740>)
 8001ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed8:	f7fe faf6 	bl	80004c8 <__aeabi_dmul>
 8001edc:	4602      	mov	r2, r0
 8001ede:	460b      	mov	r3, r1
 8001ee0:	4610      	mov	r0, r2
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	f7fe fdc0 	bl	8000a68 <__aeabi_d2f>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	4a24      	ldr	r2, [pc, #144]	; (8001f7c <readAll+0x75c>)
 8001eec:	6013      	str	r3, [r2, #0]
	lin_ax = ax + a31;
 8001eee:	4b29      	ldr	r3, [pc, #164]	; (8001f94 <readAll+0x774>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a21      	ldr	r2, [pc, #132]	; (8001f78 <readAll+0x758>)
 8001ef4:	6812      	ldr	r2, [r2, #0]
 8001ef6:	4611      	mov	r1, r2
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7fe fe0b 	bl	8000b14 <__addsf3>
 8001efe:	4603      	mov	r3, r0
 8001f00:	461a      	mov	r2, r3
 8001f02:	4b25      	ldr	r3, [pc, #148]	; (8001f98 <readAll+0x778>)
 8001f04:	601a      	str	r2, [r3, #0]
	lin_ay = ay + a32;
 8001f06:	4b25      	ldr	r3, [pc, #148]	; (8001f9c <readAll+0x77c>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a19      	ldr	r2, [pc, #100]	; (8001f70 <readAll+0x750>)
 8001f0c:	6812      	ldr	r2, [r2, #0]
 8001f0e:	4611      	mov	r1, r2
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7fe fdff 	bl	8000b14 <__addsf3>
 8001f16:	4603      	mov	r3, r0
 8001f18:	461a      	mov	r2, r3
 8001f1a:	4b21      	ldr	r3, [pc, #132]	; (8001fa0 <readAll+0x780>)
 8001f1c:	601a      	str	r2, [r3, #0]
	lin_az = az - a33;
 8001f1e:	4b21      	ldr	r3, [pc, #132]	; (8001fa4 <readAll+0x784>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a12      	ldr	r2, [pc, #72]	; (8001f6c <readAll+0x74c>)
 8001f24:	6812      	ldr	r2, [r2, #0]
 8001f26:	4611      	mov	r1, r2
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7fe fdf1 	bl	8000b10 <__aeabi_fsub>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	461a      	mov	r2, r3
 8001f32:	4b1d      	ldr	r3, [pc, #116]	; (8001fa8 <readAll+0x788>)
 8001f34:	601a      	str	r2, [r3, #0]


	DataStruct->yaw = yaw;
 8001f36:	4b14      	ldr	r3, [pc, #80]	; (8001f88 <readAll+0x768>)
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	62da      	str	r2, [r3, #44]	; 0x2c
	DataStruct->pitch = pitch;
 8001f3e:	4b0d      	ldr	r3, [pc, #52]	; (8001f74 <readAll+0x754>)
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	625a      	str	r2, [r3, #36]	; 0x24
	DataStruct->roll = roll;
 8001f46:	4b0d      	ldr	r3, [pc, #52]	; (8001f7c <readAll+0x75c>)
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	629a      	str	r2, [r3, #40]	; 0x28

	sum = 0;
 8001f4e:	4b17      	ldr	r3, [pc, #92]	; (8001fac <readAll+0x78c>)
 8001f50:	f04f 0200 	mov.w	r2, #0
 8001f54:	601a      	str	r2, [r3, #0]
	}
 8001f56:	bf00      	nop
 8001f58:	3714      	adds	r7, #20
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001f60:	d0051a32 	.word	0xd0051a32
 8001f64:	404ca2e8 	.word	0x404ca2e8
 8001f68:	20000008 	.word	0x20000008
 8001f6c:	20004350 	.word	0x20004350
 8001f70:	2000434c 	.word	0x2000434c
 8001f74:	200042f4 	.word	0x200042f4
 8001f78:	20004348 	.word	0x20004348
 8001f7c:	200042fc 	.word	0x200042fc
 8001f80:	20004340 	.word	0x20004340
 8001f84:	20004344 	.word	0x20004344
 8001f88:	200042f8 	.word	0x200042f8
 8001f8c:	40b0f5c3 	.word	0x40b0f5c3
 8001f90:	43b40000 	.word	0x43b40000
 8001f94:	20004310 	.word	0x20004310
 8001f98:	20004334 	.word	0x20004334
 8001f9c:	20004314 	.word	0x20004314
 8001fa0:	20004338 	.word	0x20004338
 8001fa4:	20004318 	.word	0x20004318
 8001fa8:	2000433c 	.word	0x2000433c
 8001fac:	20004304 	.word	0x20004304

08001fb0 <getMres>:

//==========================================================================================================
//====== FUNCTIONS TO READ AND WRITE DATA FROM REGISTERS AND ALSO INITS KALMAN AND QUATERNION FILTERS ======
//==========================================================================================================

void getMres() {
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  switch (Mscale)
 8001fb4:	4b09      	ldr	r3, [pc, #36]	; (8001fdc <getMres+0x2c>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d002      	beq.n	8001fc2 <getMres+0x12>
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d004      	beq.n	8001fca <getMres+0x1a>
          break;
    case MFS_16BITS:
          mRes = 10.*4912./32760.0; // Proper scale to return milliGauss
          break;
  }
}
 8001fc0:	e007      	b.n	8001fd2 <getMres+0x22>
          mRes = 10.*4912./8190.; // Proper scale to return milliGauss
 8001fc2:	4b07      	ldr	r3, [pc, #28]	; (8001fe0 <getMres+0x30>)
 8001fc4:	4a07      	ldr	r2, [pc, #28]	; (8001fe4 <getMres+0x34>)
 8001fc6:	601a      	str	r2, [r3, #0]
          break;
 8001fc8:	e003      	b.n	8001fd2 <getMres+0x22>
          mRes = 10.*4912./32760.0; // Proper scale to return milliGauss
 8001fca:	4b05      	ldr	r3, [pc, #20]	; (8001fe0 <getMres+0x30>)
 8001fcc:	4a06      	ldr	r2, [pc, #24]	; (8001fe8 <getMres+0x38>)
 8001fce:	601a      	str	r2, [r3, #0]
          break;
 8001fd0:	bf00      	nop
}
 8001fd2:	bf00      	nop
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bc80      	pop	{r7}
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	20000002 	.word	0x20000002
 8001fe0:	20004284 	.word	0x20004284
 8001fe4:	40bfebff 	.word	0x40bfebff
 8001fe8:	3fbfebff 	.word	0x3fbfebff

08001fec <getGres>:

void getGres() {
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  switch (Gscale)
 8001ff0:	4b11      	ldr	r3, [pc, #68]	; (8002038 <getGres+0x4c>)
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	2b03      	cmp	r3, #3
 8001ff6:	d81b      	bhi.n	8002030 <getGres+0x44>
 8001ff8:	a201      	add	r2, pc, #4	; (adr r2, 8002000 <getGres+0x14>)
 8001ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ffe:	bf00      	nop
 8002000:	08002011 	.word	0x08002011
 8002004:	08002019 	.word	0x08002019
 8002008:	08002021 	.word	0x08002021
 800200c:	08002029 	.word	0x08002029
  {
  // Possible gyro scales (and their register bit settings) are:
  // 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case GFS_250DPS:
          gRes = 250.0/32768.0;
 8002010:	4b0a      	ldr	r3, [pc, #40]	; (800203c <getGres+0x50>)
 8002012:	4a0b      	ldr	r2, [pc, #44]	; (8002040 <getGres+0x54>)
 8002014:	601a      	str	r2, [r3, #0]
          break;
 8002016:	e00b      	b.n	8002030 <getGres+0x44>
    case GFS_500DPS:
          gRes = 500.0/32768.0;
 8002018:	4b08      	ldr	r3, [pc, #32]	; (800203c <getGres+0x50>)
 800201a:	4a0a      	ldr	r2, [pc, #40]	; (8002044 <getGres+0x58>)
 800201c:	601a      	str	r2, [r3, #0]
          break;
 800201e:	e007      	b.n	8002030 <getGres+0x44>
    case GFS_1000DPS:
          gRes = 1000.0/32768.0;
 8002020:	4b06      	ldr	r3, [pc, #24]	; (800203c <getGres+0x50>)
 8002022:	4a09      	ldr	r2, [pc, #36]	; (8002048 <getGres+0x5c>)
 8002024:	601a      	str	r2, [r3, #0]
          break;
 8002026:	e003      	b.n	8002030 <getGres+0x44>
    case GFS_2000DPS:
          gRes = 2000.0/32768.0;
 8002028:	4b04      	ldr	r3, [pc, #16]	; (800203c <getGres+0x50>)
 800202a:	4a08      	ldr	r2, [pc, #32]	; (800204c <getGres+0x60>)
 800202c:	601a      	str	r2, [r3, #0]
          break;
 800202e:	bf00      	nop
  }
}
 8002030:	bf00      	nop
 8002032:	46bd      	mov	sp, r7
 8002034:	bc80      	pop	{r7}
 8002036:	4770      	bx	lr
 8002038:	20000000 	.word	0x20000000
 800203c:	20004280 	.word	0x20004280
 8002040:	3bfa0000 	.word	0x3bfa0000
 8002044:	3c7a0000 	.word	0x3c7a0000
 8002048:	3cfa0000 	.word	0x3cfa0000
 800204c:	3d7a0000 	.word	0x3d7a0000

08002050 <getAres>:

void getAres() {
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  switch (Ascale)
 8002054:	4b13      	ldr	r3, [pc, #76]	; (80020a4 <getAres+0x54>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	2b03      	cmp	r3, #3
 800205a:	d81f      	bhi.n	800209c <getAres+0x4c>
 800205c:	a201      	add	r2, pc, #4	; (adr r2, 8002064 <getAres+0x14>)
 800205e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002062:	bf00      	nop
 8002064:	08002075 	.word	0x08002075
 8002068:	0800207f 	.word	0x0800207f
 800206c:	08002089 	.word	0x08002089
 8002070:	08002093 	.word	0x08002093
  {
  // Possible accelerometer scales (and their register bit settings) are:
  // 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case AFS_2G:
          aRes = 2.0/32768.0;
 8002074:	4b0c      	ldr	r3, [pc, #48]	; (80020a8 <getAres+0x58>)
 8002076:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 800207a:	601a      	str	r2, [r3, #0]
          break;
 800207c:	e00e      	b.n	800209c <getAres+0x4c>
    case AFS_4G:
          aRes = 4.0/32768.0;
 800207e:	4b0a      	ldr	r3, [pc, #40]	; (80020a8 <getAres+0x58>)
 8002080:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8002084:	601a      	str	r2, [r3, #0]
          break;
 8002086:	e009      	b.n	800209c <getAres+0x4c>
    case AFS_8G:
          aRes = 8.0/32768.0;
 8002088:	4b07      	ldr	r3, [pc, #28]	; (80020a8 <getAres+0x58>)
 800208a:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 800208e:	601a      	str	r2, [r3, #0]
          break;
 8002090:	e004      	b.n	800209c <getAres+0x4c>
    case AFS_16G:
          aRes = 16.0/32768.0;
 8002092:	4b05      	ldr	r3, [pc, #20]	; (80020a8 <getAres+0x58>)
 8002094:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8002098:	601a      	str	r2, [r3, #0]
          break;
 800209a:	bf00      	nop
  }
}
 800209c:	bf00      	nop
 800209e:	46bd      	mov	sp, r7
 80020a0:	bc80      	pop	{r7}
 80020a2:	4770      	bx	lr
 80020a4:	20000001 	.word	0x20000001
 80020a8:	2000427c 	.word	0x2000427c

080020ac <readAccelData>:

//read raw Accelerometer values from registers
void readAccelData(I2C_HandleTypeDef *I2Cx, int16_t * destination){
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b088      	sub	sp, #32
 80020b0:	af04      	add	r7, sp, #16
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  uint8_t rawAccelData[6];  // x/y/z accel register data stored here
  HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ACCEL_XOUT_H, 1, &rawAccelData[0], 6, i2c_timeout); // Read the six raw data registers into data array
 80020b6:	2364      	movs	r3, #100	; 0x64
 80020b8:	9302      	str	r3, [sp, #8]
 80020ba:	2306      	movs	r3, #6
 80020bc:	9301      	str	r3, [sp, #4]
 80020be:	f107 0308 	add.w	r3, r7, #8
 80020c2:	9300      	str	r3, [sp, #0]
 80020c4:	2301      	movs	r3, #1
 80020c6:	223b      	movs	r2, #59	; 0x3b
 80020c8:	21d0      	movs	r1, #208	; 0xd0
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f004 fcea 	bl	8006aa4 <HAL_I2C_Mem_Read>
  destination[0] = ((int16_t)rawAccelData[0] << 8) | rawAccelData[1];  // Turn the MSB and LSB into a signed 16-bit value
 80020d0:	7a3b      	ldrb	r3, [r7, #8]
 80020d2:	021b      	lsls	r3, r3, #8
 80020d4:	b21a      	sxth	r2, r3
 80020d6:	7a7b      	ldrb	r3, [r7, #9]
 80020d8:	b21b      	sxth	r3, r3
 80020da:	4313      	orrs	r3, r2
 80020dc:	b21a      	sxth	r2, r3
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	801a      	strh	r2, [r3, #0]
  destination[1] = ((int16_t)rawAccelData[2] << 8) | rawAccelData[3];
 80020e2:	7abb      	ldrb	r3, [r7, #10]
 80020e4:	021b      	lsls	r3, r3, #8
 80020e6:	b219      	sxth	r1, r3
 80020e8:	7afb      	ldrb	r3, [r7, #11]
 80020ea:	b21a      	sxth	r2, r3
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	3302      	adds	r3, #2
 80020f0:	430a      	orrs	r2, r1
 80020f2:	b212      	sxth	r2, r2
 80020f4:	801a      	strh	r2, [r3, #0]
  destination[2] = ((int16_t)rawAccelData[4] << 8) | rawAccelData[5];
 80020f6:	7b3b      	ldrb	r3, [r7, #12]
 80020f8:	021b      	lsls	r3, r3, #8
 80020fa:	b219      	sxth	r1, r3
 80020fc:	7b7b      	ldrb	r3, [r7, #13]
 80020fe:	b21a      	sxth	r2, r3
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	3304      	adds	r3, #4
 8002104:	430a      	orrs	r2, r1
 8002106:	b212      	sxth	r2, r2
 8002108:	801a      	strh	r2, [r3, #0]
	printf("Acc X: %d\r\n", destination[0]);
	printf("Acc Y: %d\r\n", destination[1]);
	printf("Acc Z: %d\r\n", destination[2]);
	printf("-------------------------\r\n");
  }
}
 800210a:	bf00      	nop
 800210c:	3710      	adds	r7, #16
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <readGyroData>:

//read raw Gyro values from registers
void readGyroData(I2C_HandleTypeDef *I2Cx, int16_t * destination){
 8002112:	b580      	push	{r7, lr}
 8002114:	b088      	sub	sp, #32
 8002116:	af04      	add	r7, sp, #16
 8002118:	6078      	str	r0, [r7, #4]
 800211a:	6039      	str	r1, [r7, #0]
  uint8_t rawGyroData[6];  // x/y/z gyro register data stored here
  HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, GYRO_XOUT_H, 1, &rawGyroData[0], 6, i2c_timeout);  // Read the six raw data registers sequentially into data array
 800211c:	2364      	movs	r3, #100	; 0x64
 800211e:	9302      	str	r3, [sp, #8]
 8002120:	2306      	movs	r3, #6
 8002122:	9301      	str	r3, [sp, #4]
 8002124:	f107 0308 	add.w	r3, r7, #8
 8002128:	9300      	str	r3, [sp, #0]
 800212a:	2301      	movs	r3, #1
 800212c:	2243      	movs	r2, #67	; 0x43
 800212e:	21d0      	movs	r1, #208	; 0xd0
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f004 fcb7 	bl	8006aa4 <HAL_I2C_Mem_Read>
  destination[0] = ((int16_t)rawGyroData[0] << 8) | rawGyroData[1];  // Turn the MSB and LSB into a signed 16-bit value
 8002136:	7a3b      	ldrb	r3, [r7, #8]
 8002138:	021b      	lsls	r3, r3, #8
 800213a:	b21a      	sxth	r2, r3
 800213c:	7a7b      	ldrb	r3, [r7, #9]
 800213e:	b21b      	sxth	r3, r3
 8002140:	4313      	orrs	r3, r2
 8002142:	b21a      	sxth	r2, r3
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	801a      	strh	r2, [r3, #0]
  destination[1] = ((int16_t)rawGyroData[2] << 8) | rawGyroData[3];
 8002148:	7abb      	ldrb	r3, [r7, #10]
 800214a:	021b      	lsls	r3, r3, #8
 800214c:	b219      	sxth	r1, r3
 800214e:	7afb      	ldrb	r3, [r7, #11]
 8002150:	b21a      	sxth	r2, r3
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	3302      	adds	r3, #2
 8002156:	430a      	orrs	r2, r1
 8002158:	b212      	sxth	r2, r2
 800215a:	801a      	strh	r2, [r3, #0]
  destination[2] = ((int16_t)rawGyroData[4] << 8) | rawGyroData[5];
 800215c:	7b3b      	ldrb	r3, [r7, #12]
 800215e:	021b      	lsls	r3, r3, #8
 8002160:	b219      	sxth	r1, r3
 8002162:	7b7b      	ldrb	r3, [r7, #13]
 8002164:	b21a      	sxth	r2, r3
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	3304      	adds	r3, #4
 800216a:	430a      	orrs	r2, r1
 800216c:	b212      	sxth	r2, r2
 800216e:	801a      	strh	r2, [r3, #0]
	printf("Gyro X: %d\r\n", destination[0]);
	printf("Gyro Y: %d\r\n", destination[1]);
	printf("Gyro Z: %d\r\n", destination[2]);
	printf("---------------------------\r\n");
  }
}
 8002170:	bf00      	nop
 8002172:	3710      	adds	r7, #16
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <readMagData>:

void readMagData(I2C_HandleTypeDef *I2Cx, int16_t * destination){
 8002178:	b580      	push	{r7, lr}
 800217a:	b08a      	sub	sp, #40	; 0x28
 800217c:	af04      	add	r7, sp, #16
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]

	uint8_t readData;

	HAL_I2C_Mem_Read(I2Cx, AK8963_ADDRESS, AK8963_ST1, 1, &readData, 1, i2c_timeout);
 8002182:	2364      	movs	r3, #100	; 0x64
 8002184:	9302      	str	r3, [sp, #8]
 8002186:	2301      	movs	r3, #1
 8002188:	9301      	str	r3, [sp, #4]
 800218a:	f107 0316 	add.w	r3, r7, #22
 800218e:	9300      	str	r3, [sp, #0]
 8002190:	2301      	movs	r3, #1
 8002192:	2202      	movs	r2, #2
 8002194:	2118      	movs	r1, #24
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f004 fc84 	bl	8006aa4 <HAL_I2C_Mem_Read>
	if( (readData & 0x01) == 0x01 ){
 800219c:	7dbb      	ldrb	r3, [r7, #22]
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d030      	beq.n	8002208 <readMagData+0x90>
		uint8_t rawMagData[7];  // x/y/z gyro register data, ST2 register stored here, must read ST2 at end of data acquisition
		HAL_I2C_Mem_Read(I2Cx, AK8963_ADDRESS, AK8963_XOUT_L, 1, &rawMagData[0], 7, i2c_timeout);  // Read the six raw data and ST2 registers sequentially into data array
 80021a6:	2364      	movs	r3, #100	; 0x64
 80021a8:	9302      	str	r3, [sp, #8]
 80021aa:	2307      	movs	r3, #7
 80021ac:	9301      	str	r3, [sp, #4]
 80021ae:	f107 030c 	add.w	r3, r7, #12
 80021b2:	9300      	str	r3, [sp, #0]
 80021b4:	2301      	movs	r3, #1
 80021b6:	2203      	movs	r2, #3
 80021b8:	2118      	movs	r1, #24
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f004 fc72 	bl	8006aa4 <HAL_I2C_Mem_Read>
		uint8_t c = rawMagData[6];
 80021c0:	7cbb      	ldrb	r3, [r7, #18]
 80021c2:	75fb      	strb	r3, [r7, #23]
		if(!(c & 0x08)) {
 80021c4:	7dfb      	ldrb	r3, [r7, #23]
 80021c6:	f003 0308 	and.w	r3, r3, #8
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d11c      	bne.n	8002208 <readMagData+0x90>
			destination[0] = ((int16_t)rawMagData[1] << 8) | rawMagData[0] ;  // Turn the MSB and LSB into a signed 16-bit value
 80021ce:	7b7b      	ldrb	r3, [r7, #13]
 80021d0:	021b      	lsls	r3, r3, #8
 80021d2:	b21a      	sxth	r2, r3
 80021d4:	7b3b      	ldrb	r3, [r7, #12]
 80021d6:	b21b      	sxth	r3, r3
 80021d8:	4313      	orrs	r3, r2
 80021da:	b21a      	sxth	r2, r3
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	801a      	strh	r2, [r3, #0]
			destination[1] = ((int16_t)rawMagData[3] << 8) | rawMagData[2] ;  // Data stored as little Endian
 80021e0:	7bfb      	ldrb	r3, [r7, #15]
 80021e2:	021b      	lsls	r3, r3, #8
 80021e4:	b219      	sxth	r1, r3
 80021e6:	7bbb      	ldrb	r3, [r7, #14]
 80021e8:	b21a      	sxth	r2, r3
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	3302      	adds	r3, #2
 80021ee:	430a      	orrs	r2, r1
 80021f0:	b212      	sxth	r2, r2
 80021f2:	801a      	strh	r2, [r3, #0]
			destination[2] = ((int16_t)rawMagData[5] << 8) | rawMagData[4] ;
 80021f4:	7c7b      	ldrb	r3, [r7, #17]
 80021f6:	021b      	lsls	r3, r3, #8
 80021f8:	b219      	sxth	r1, r3
 80021fa:	7c3b      	ldrb	r3, [r7, #16]
 80021fc:	b21a      	sxth	r2, r3
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	3304      	adds	r3, #4
 8002202:	430a      	orrs	r2, r1
 8002204:	b212      	sxth	r2, r2
 8002206:	801a      	strh	r2, [r3, #0]
				printf("Mag Z: %d\r\n", destination[2]);
				printf("-------------------------\r\n");
			}
		}
	}
}
 8002208:	bf00      	nop
 800220a:	3718      	adds	r7, #24
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <initAK8963>:

void initAK8963(I2C_HandleTypeDef *I2Cx, float * destination){
 8002210:	b590      	push	{r4, r7, lr}
 8002212:	b089      	sub	sp, #36	; 0x24
 8002214:	af04      	add	r7, sp, #16
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
  //First extract the factory calibration for each magnetometer axis
  // x/y/z gyro calibration data stored here
  uint8_t rawMagCalData[3];

  //Power down magnetometer
  writeData = 0x00;
 800221a:	2300      	movs	r3, #0
 800221c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Write(I2Cx, AK8963_ADDRESS, AK8963_CNTL, 1, &writeData, 1, i2c_timeout);
 800221e:	2364      	movs	r3, #100	; 0x64
 8002220:	9302      	str	r3, [sp, #8]
 8002222:	2301      	movs	r3, #1
 8002224:	9301      	str	r3, [sp, #4]
 8002226:	f107 030f 	add.w	r3, r7, #15
 800222a:	9300      	str	r3, [sp, #0]
 800222c:	2301      	movs	r3, #1
 800222e:	220a      	movs	r2, #10
 8002230:	2118      	movs	r1, #24
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f004 fb3c 	bl	80068b0 <HAL_I2C_Mem_Write>
  HAL_Delay(100);
 8002238:	2064      	movs	r0, #100	; 0x64
 800223a:	f003 f977 	bl	800552c <HAL_Delay>

  writeData = 0x0F;
 800223e:	230f      	movs	r3, #15
 8002240:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Write(I2Cx, AK8963_ADDRESS, AK8963_CNTL, 1, &writeData, 1, i2c_timeout);// Enter Fuse ROM access mode
 8002242:	2364      	movs	r3, #100	; 0x64
 8002244:	9302      	str	r3, [sp, #8]
 8002246:	2301      	movs	r3, #1
 8002248:	9301      	str	r3, [sp, #4]
 800224a:	f107 030f 	add.w	r3, r7, #15
 800224e:	9300      	str	r3, [sp, #0]
 8002250:	2301      	movs	r3, #1
 8002252:	220a      	movs	r2, #10
 8002254:	2118      	movs	r1, #24
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f004 fb2a 	bl	80068b0 <HAL_I2C_Mem_Write>
  HAL_Delay(100);
 800225c:	2064      	movs	r0, #100	; 0x64
 800225e:	f003 f965 	bl	800552c <HAL_Delay>


  HAL_I2C_Mem_Read(I2Cx, AK8963_ADDRESS, AK8963_ASAX, 1, &rawMagCalData[0], 3, i2c_timeout);// Read the x-, y-, and z-axis calibration values
 8002262:	2364      	movs	r3, #100	; 0x64
 8002264:	9302      	str	r3, [sp, #8]
 8002266:	2303      	movs	r3, #3
 8002268:	9301      	str	r3, [sp, #4]
 800226a:	f107 030c 	add.w	r3, r7, #12
 800226e:	9300      	str	r3, [sp, #0]
 8002270:	2301      	movs	r3, #1
 8002272:	2210      	movs	r2, #16
 8002274:	2118      	movs	r1, #24
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f004 fc14 	bl	8006aa4 <HAL_I2C_Mem_Read>
  destination[0] =  (float)(rawMagCalData[0] - 128)/256. + 1.;   // Return x-axis sensitivity adjustment values, etc.
 800227c:	7b3b      	ldrb	r3, [r7, #12]
 800227e:	3b80      	subs	r3, #128	; 0x80
 8002280:	4618      	mov	r0, r3
 8002282:	f7fe fcfb 	bl	8000c7c <__aeabi_i2f>
 8002286:	4603      	mov	r3, r0
 8002288:	4618      	mov	r0, r3
 800228a:	f7fe f8c5 	bl	8000418 <__aeabi_f2d>
 800228e:	f04f 0200 	mov.w	r2, #0
 8002292:	4b57      	ldr	r3, [pc, #348]	; (80023f0 <initAK8963+0x1e0>)
 8002294:	f7fe fa42 	bl	800071c <__aeabi_ddiv>
 8002298:	4602      	mov	r2, r0
 800229a:	460b      	mov	r3, r1
 800229c:	4610      	mov	r0, r2
 800229e:	4619      	mov	r1, r3
 80022a0:	f04f 0200 	mov.w	r2, #0
 80022a4:	4b53      	ldr	r3, [pc, #332]	; (80023f4 <initAK8963+0x1e4>)
 80022a6:	f7fd ff59 	bl	800015c <__adddf3>
 80022aa:	4602      	mov	r2, r0
 80022ac:	460b      	mov	r3, r1
 80022ae:	4610      	mov	r0, r2
 80022b0:	4619      	mov	r1, r3
 80022b2:	f7fe fbd9 	bl	8000a68 <__aeabi_d2f>
 80022b6:	4602      	mov	r2, r0
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	601a      	str	r2, [r3, #0]
  destination[1] =  (float)(rawMagCalData[1] - 128)/256. + 1.;
 80022bc:	7b7b      	ldrb	r3, [r7, #13]
 80022be:	3b80      	subs	r3, #128	; 0x80
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7fe fcdb 	bl	8000c7c <__aeabi_i2f>
 80022c6:	4603      	mov	r3, r0
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7fe f8a5 	bl	8000418 <__aeabi_f2d>
 80022ce:	f04f 0200 	mov.w	r2, #0
 80022d2:	4b47      	ldr	r3, [pc, #284]	; (80023f0 <initAK8963+0x1e0>)
 80022d4:	f7fe fa22 	bl	800071c <__aeabi_ddiv>
 80022d8:	4602      	mov	r2, r0
 80022da:	460b      	mov	r3, r1
 80022dc:	4610      	mov	r0, r2
 80022de:	4619      	mov	r1, r3
 80022e0:	f04f 0200 	mov.w	r2, #0
 80022e4:	4b43      	ldr	r3, [pc, #268]	; (80023f4 <initAK8963+0x1e4>)
 80022e6:	f7fd ff39 	bl	800015c <__adddf3>
 80022ea:	4602      	mov	r2, r0
 80022ec:	460b      	mov	r3, r1
 80022ee:	4610      	mov	r0, r2
 80022f0:	4619      	mov	r1, r3
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	1d1c      	adds	r4, r3, #4
 80022f6:	f7fe fbb7 	bl	8000a68 <__aeabi_d2f>
 80022fa:	4603      	mov	r3, r0
 80022fc:	6023      	str	r3, [r4, #0]
  destination[2] =  (float)(rawMagCalData[2] - 128)/256. + 1.;
 80022fe:	7bbb      	ldrb	r3, [r7, #14]
 8002300:	3b80      	subs	r3, #128	; 0x80
 8002302:	4618      	mov	r0, r3
 8002304:	f7fe fcba 	bl	8000c7c <__aeabi_i2f>
 8002308:	4603      	mov	r3, r0
 800230a:	4618      	mov	r0, r3
 800230c:	f7fe f884 	bl	8000418 <__aeabi_f2d>
 8002310:	f04f 0200 	mov.w	r2, #0
 8002314:	4b36      	ldr	r3, [pc, #216]	; (80023f0 <initAK8963+0x1e0>)
 8002316:	f7fe fa01 	bl	800071c <__aeabi_ddiv>
 800231a:	4602      	mov	r2, r0
 800231c:	460b      	mov	r3, r1
 800231e:	4610      	mov	r0, r2
 8002320:	4619      	mov	r1, r3
 8002322:	f04f 0200 	mov.w	r2, #0
 8002326:	4b33      	ldr	r3, [pc, #204]	; (80023f4 <initAK8963+0x1e4>)
 8002328:	f7fd ff18 	bl	800015c <__adddf3>
 800232c:	4602      	mov	r2, r0
 800232e:	460b      	mov	r3, r1
 8002330:	4610      	mov	r0, r2
 8002332:	4619      	mov	r1, r3
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	f103 0408 	add.w	r4, r3, #8
 800233a:	f7fe fb95 	bl	8000a68 <__aeabi_d2f>
 800233e:	4603      	mov	r3, r0
 8002340:	6023      	str	r3, [r4, #0]

  if(SerialDebugA){
	printf("Mag cal off X: %f\r\n", destination[0]);
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4618      	mov	r0, r3
 8002348:	f7fe f866 	bl	8000418 <__aeabi_f2d>
 800234c:	4602      	mov	r2, r0
 800234e:	460b      	mov	r3, r1
 8002350:	4829      	ldr	r0, [pc, #164]	; (80023f8 <initAK8963+0x1e8>)
 8002352:	f007 fdf1 	bl	8009f38 <iprintf>
	printf("Mag cal off Y: %f\r\n", destination[1]);
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	3304      	adds	r3, #4
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4618      	mov	r0, r3
 800235e:	f7fe f85b 	bl	8000418 <__aeabi_f2d>
 8002362:	4602      	mov	r2, r0
 8002364:	460b      	mov	r3, r1
 8002366:	4825      	ldr	r0, [pc, #148]	; (80023fc <initAK8963+0x1ec>)
 8002368:	f007 fde6 	bl	8009f38 <iprintf>
	printf("Mag cal off Z: %f\r\n", destination[2]);
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	3308      	adds	r3, #8
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4618      	mov	r0, r3
 8002374:	f7fe f850 	bl	8000418 <__aeabi_f2d>
 8002378:	4602      	mov	r2, r0
 800237a:	460b      	mov	r3, r1
 800237c:	4820      	ldr	r0, [pc, #128]	; (8002400 <initAK8963+0x1f0>)
 800237e:	f007 fddb 	bl	8009f38 <iprintf>
	printf("-------------------------\r\n");
 8002382:	4820      	ldr	r0, [pc, #128]	; (8002404 <initAK8963+0x1f4>)
 8002384:	f007 fe5e 	bl	800a044 <puts>
  }

  writeData = 0x00;
 8002388:	2300      	movs	r3, #0
 800238a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Write(I2Cx, AK8963_ADDRESS, AK8963_CNTL, 1, &writeData, 1, i2c_timeout);// Power down magnetometer
 800238c:	2364      	movs	r3, #100	; 0x64
 800238e:	9302      	str	r3, [sp, #8]
 8002390:	2301      	movs	r3, #1
 8002392:	9301      	str	r3, [sp, #4]
 8002394:	f107 030f 	add.w	r3, r7, #15
 8002398:	9300      	str	r3, [sp, #0]
 800239a:	2301      	movs	r3, #1
 800239c:	220a      	movs	r2, #10
 800239e:	2118      	movs	r1, #24
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f004 fa85 	bl	80068b0 <HAL_I2C_Mem_Write>
  HAL_Delay(100);
 80023a6:	2064      	movs	r0, #100	; 0x64
 80023a8:	f003 f8c0 	bl	800552c <HAL_Delay>

  // Configure the magnetometer for continuous read and highest resolution
  // set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
  // and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
  writeData = Mscale << 4 | Mmode;
 80023ac:	4b16      	ldr	r3, [pc, #88]	; (8002408 <initAK8963+0x1f8>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	011b      	lsls	r3, r3, #4
 80023b2:	b25a      	sxtb	r2, r3
 80023b4:	4b15      	ldr	r3, [pc, #84]	; (800240c <initAK8963+0x1fc>)
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	b25b      	sxtb	r3, r3
 80023ba:	4313      	orrs	r3, r2
 80023bc:	b25b      	sxtb	r3, r3
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Write(I2Cx, AK8963_ADDRESS, AK8963_CNTL, 1, &writeData, 1, i2c_timeout);// Set magnetometer data resolution and sample ODR
 80023c2:	2364      	movs	r3, #100	; 0x64
 80023c4:	9302      	str	r3, [sp, #8]
 80023c6:	2301      	movs	r3, #1
 80023c8:	9301      	str	r3, [sp, #4]
 80023ca:	f107 030f 	add.w	r3, r7, #15
 80023ce:	9300      	str	r3, [sp, #0]
 80023d0:	2301      	movs	r3, #1
 80023d2:	220a      	movs	r2, #10
 80023d4:	2118      	movs	r1, #24
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f004 fa6a 	bl	80068b0 <HAL_I2C_Mem_Write>

//writeData = 0x16;
//HAL_I2C_Mem_Write(I2Cx, AK8963_ADDRESS, AK8963_CNTL, 1, &writeData, 1, i2c_timeout);
  HAL_Delay(10);
 80023dc:	200a      	movs	r0, #10
 80023de:	f003 f8a5 	bl	800552c <HAL_Delay>

  if(SerialDebugA){printf("MAG Init Succesful! \r\n");}
 80023e2:	480b      	ldr	r0, [pc, #44]	; (8002410 <initAK8963+0x200>)
 80023e4:	f007 fe2e 	bl	800a044 <puts>
}
 80023e8:	bf00      	nop
 80023ea:	3714      	adds	r7, #20
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd90      	pop	{r4, r7, pc}
 80023f0:	40700000 	.word	0x40700000
 80023f4:	3ff00000 	.word	0x3ff00000
 80023f8:	0800b000 	.word	0x0800b000
 80023fc:	0800b014 	.word	0x0800b014
 8002400:	0800b028 	.word	0x0800b028
 8002404:	0800b03c 	.word	0x0800b03c
 8002408:	20000002 	.word	0x20000002
 800240c:	20000003 	.word	0x20000003
 8002410:	0800b058 	.word	0x0800b058

08002414 <calibrateMag>:

void calibrateMag(I2C_HandleTypeDef *I2Cx, float * dest1, float * dest2){
 8002414:	b590      	push	{r4, r7, lr}
 8002416:	b095      	sub	sp, #84	; 0x54
 8002418:	af00      	add	r7, sp, #0
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	607a      	str	r2, [r7, #4]

  uint16_t ii = 0, sample_count = 0;
 8002420:	2300      	movs	r3, #0
 8002422:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002426:	2300      	movs	r3, #0
 8002428:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
  int32_t mag_bias[3] = {0, 0, 0}, mag_scale[3] = {0, 0, 0};
 800242c:	2300      	movs	r3, #0
 800242e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002430:	2300      	movs	r3, #0
 8002432:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002434:	2300      	movs	r3, #0
 8002436:	643b      	str	r3, [r7, #64]	; 0x40
 8002438:	2300      	movs	r3, #0
 800243a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800243c:	2300      	movs	r3, #0
 800243e:	633b      	str	r3, [r7, #48]	; 0x30
 8002440:	2300      	movs	r3, #0
 8002442:	637b      	str	r3, [r7, #52]	; 0x34
  int16_t mag_max[3] = {-32767, -32767, -32767}, mag_min[3] = {32767, 32767, 32767}, mag_temp[3] = {0, 0, 0};
 8002444:	4aa5      	ldr	r2, [pc, #660]	; (80026dc <calibrateMag+0x2c8>)
 8002446:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800244a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800244e:	6018      	str	r0, [r3, #0]
 8002450:	3304      	adds	r3, #4
 8002452:	8019      	strh	r1, [r3, #0]
 8002454:	4aa2      	ldr	r2, [pc, #648]	; (80026e0 <calibrateMag+0x2cc>)
 8002456:	f107 031c 	add.w	r3, r7, #28
 800245a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800245e:	6018      	str	r0, [r3, #0]
 8002460:	3304      	adds	r3, #4
 8002462:	8019      	strh	r1, [r3, #0]
 8002464:	2300      	movs	r3, #0
 8002466:	82bb      	strh	r3, [r7, #20]
 8002468:	2300      	movs	r3, #0
 800246a:	82fb      	strh	r3, [r7, #22]
 800246c:	2300      	movs	r3, #0
 800246e:	833b      	strh	r3, [r7, #24]

  if (SerialDebugA){printf("Mag Calibration: Wave device in a figure eight until done!\r\n");}
 8002470:	489c      	ldr	r0, [pc, #624]	; (80026e4 <calibrateMag+0x2d0>)
 8002472:	f007 fde7 	bl	800a044 <puts>
  HAL_Delay(4000);
 8002476:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800247a:	f003 f857 	bl	800552c <HAL_Delay>

    // shoot for ~fifteen seconds of mag data
    if(Mmode == 0x02) sample_count = 128;  // at 8 Hz ODR, new mag data is available every 125 ms
 800247e:	4b9a      	ldr	r3, [pc, #616]	; (80026e8 <calibrateMag+0x2d4>)
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	2b02      	cmp	r3, #2
 8002484:	d102      	bne.n	800248c <calibrateMag+0x78>
 8002486:	2380      	movs	r3, #128	; 0x80
 8002488:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
    if(Mmode == 0x06) sample_count = 1500;  // at 100 Hz ODR, new mag data is available every 10 ms
 800248c:	4b96      	ldr	r3, [pc, #600]	; (80026e8 <calibrateMag+0x2d4>)
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	2b06      	cmp	r3, #6
 8002492:	d103      	bne.n	800249c <calibrateMag+0x88>
 8002494:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8002498:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
   for(ii = 0; ii < sample_count; ii++) {
 800249c:	2300      	movs	r3, #0
 800249e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80024a2:	e055      	b.n	8002550 <calibrateMag+0x13c>
    readMagData(I2Cx, mag_temp);  // Read the mag data
 80024a4:	f107 0314 	add.w	r3, r7, #20
 80024a8:	4619      	mov	r1, r3
 80024aa:	68f8      	ldr	r0, [r7, #12]
 80024ac:	f7ff fe64 	bl	8002178 <readMagData>
    for (int jj = 0; jj < 3; jj++) {
 80024b0:	2300      	movs	r3, #0
 80024b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80024b4:	e036      	b.n	8002524 <calibrateMag+0x110>
      if(mag_temp[jj] > mag_max[jj]) mag_max[jj] = mag_temp[jj];
 80024b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	3350      	adds	r3, #80	; 0x50
 80024bc:	443b      	add	r3, r7
 80024be:	f933 2c3c 	ldrsh.w	r2, [r3, #-60]
 80024c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	3350      	adds	r3, #80	; 0x50
 80024c8:	443b      	add	r3, r7
 80024ca:	f933 3c2c 	ldrsh.w	r3, [r3, #-44]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	dd0b      	ble.n	80024ea <calibrateMag+0xd6>
 80024d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	3350      	adds	r3, #80	; 0x50
 80024d8:	443b      	add	r3, r7
 80024da:	f933 2c3c 	ldrsh.w	r2, [r3, #-60]
 80024de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024e0:	005b      	lsls	r3, r3, #1
 80024e2:	3350      	adds	r3, #80	; 0x50
 80024e4:	443b      	add	r3, r7
 80024e6:	f823 2c2c 	strh.w	r2, [r3, #-44]
      if(mag_temp[jj] < mag_min[jj]) mag_min[jj] = mag_temp[jj];
 80024ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	3350      	adds	r3, #80	; 0x50
 80024f0:	443b      	add	r3, r7
 80024f2:	f933 2c3c 	ldrsh.w	r2, [r3, #-60]
 80024f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	3350      	adds	r3, #80	; 0x50
 80024fc:	443b      	add	r3, r7
 80024fe:	f933 3c34 	ldrsh.w	r3, [r3, #-52]
 8002502:	429a      	cmp	r2, r3
 8002504:	da0b      	bge.n	800251e <calibrateMag+0x10a>
 8002506:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	3350      	adds	r3, #80	; 0x50
 800250c:	443b      	add	r3, r7
 800250e:	f933 2c3c 	ldrsh.w	r2, [r3, #-60]
 8002512:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	3350      	adds	r3, #80	; 0x50
 8002518:	443b      	add	r3, r7
 800251a:	f823 2c34 	strh.w	r2, [r3, #-52]
    for (int jj = 0; jj < 3; jj++) {
 800251e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002520:	3301      	adds	r3, #1
 8002522:	64bb      	str	r3, [r7, #72]	; 0x48
 8002524:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002526:	2b02      	cmp	r3, #2
 8002528:	ddc5      	ble.n	80024b6 <calibrateMag+0xa2>
    }
    if(Mmode == 0x02) HAL_Delay(135);  // at 8 Hz ODR, new mag data is available every 125 ms
 800252a:	4b6f      	ldr	r3, [pc, #444]	; (80026e8 <calibrateMag+0x2d4>)
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	2b02      	cmp	r3, #2
 8002530:	d102      	bne.n	8002538 <calibrateMag+0x124>
 8002532:	2087      	movs	r0, #135	; 0x87
 8002534:	f002 fffa 	bl	800552c <HAL_Delay>
    if(Mmode == 0x06) HAL_Delay(12);  // at 100 Hz ODR, new mag data is available every 10 ms
 8002538:	4b6b      	ldr	r3, [pc, #428]	; (80026e8 <calibrateMag+0x2d4>)
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	2b06      	cmp	r3, #6
 800253e:	d102      	bne.n	8002546 <calibrateMag+0x132>
 8002540:	200c      	movs	r0, #12
 8002542:	f002 fff3 	bl	800552c <HAL_Delay>
   for(ii = 0; ii < sample_count; ii++) {
 8002546:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800254a:	3301      	adds	r3, #1
 800254c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002550:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8002554:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002558:	429a      	cmp	r2, r3
 800255a:	d3a3      	bcc.n	80024a4 <calibrateMag+0x90>
    }

    // Get hard iron correction
    mag_bias[0]  = (mag_max[0] + mag_min[0])/2;  // get average x mag bias in counts
 800255c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8002560:	461a      	mov	r2, r3
 8002562:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002566:	4413      	add	r3, r2
 8002568:	0fda      	lsrs	r2, r3, #31
 800256a:	4413      	add	r3, r2
 800256c:	105b      	asrs	r3, r3, #1
 800256e:	63bb      	str	r3, [r7, #56]	; 0x38
    mag_bias[1]  = (mag_max[1] + mag_min[1])/2;  // get average y mag bias in counts
 8002570:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8002574:	461a      	mov	r2, r3
 8002576:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800257a:	4413      	add	r3, r2
 800257c:	0fda      	lsrs	r2, r3, #31
 800257e:	4413      	add	r3, r2
 8002580:	105b      	asrs	r3, r3, #1
 8002582:	63fb      	str	r3, [r7, #60]	; 0x3c
    mag_bias[2]  = (mag_max[2] + mag_min[2])/2;  // get average z mag bias in counts
 8002584:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8002588:	461a      	mov	r2, r3
 800258a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800258e:	4413      	add	r3, r2
 8002590:	0fda      	lsrs	r2, r3, #31
 8002592:	4413      	add	r3, r2
 8002594:	105b      	asrs	r3, r3, #1
 8002596:	643b      	str	r3, [r7, #64]	; 0x40

    dest1[0] = (float) mag_bias[0]*mRes*magCalibration[0];  // save mag biases in G for main program
 8002598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800259a:	4618      	mov	r0, r3
 800259c:	f7fe fb6e 	bl	8000c7c <__aeabi_i2f>
 80025a0:	4602      	mov	r2, r0
 80025a2:	4b52      	ldr	r3, [pc, #328]	; (80026ec <calibrateMag+0x2d8>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4619      	mov	r1, r3
 80025a8:	4610      	mov	r0, r2
 80025aa:	f7fe fbbb 	bl	8000d24 <__aeabi_fmul>
 80025ae:	4603      	mov	r3, r0
 80025b0:	461a      	mov	r2, r3
 80025b2:	4b4f      	ldr	r3, [pc, #316]	; (80026f0 <calibrateMag+0x2dc>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4619      	mov	r1, r3
 80025b8:	4610      	mov	r0, r2
 80025ba:	f7fe fbb3 	bl	8000d24 <__aeabi_fmul>
 80025be:	4603      	mov	r3, r0
 80025c0:	461a      	mov	r2, r3
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	601a      	str	r2, [r3, #0]
    dest1[1] = (float) mag_bias[1]*mRes*magCalibration[1];
 80025c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7fe fb57 	bl	8000c7c <__aeabi_i2f>
 80025ce:	4602      	mov	r2, r0
 80025d0:	4b46      	ldr	r3, [pc, #280]	; (80026ec <calibrateMag+0x2d8>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4619      	mov	r1, r3
 80025d6:	4610      	mov	r0, r2
 80025d8:	f7fe fba4 	bl	8000d24 <__aeabi_fmul>
 80025dc:	4603      	mov	r3, r0
 80025de:	4618      	mov	r0, r3
 80025e0:	4b43      	ldr	r3, [pc, #268]	; (80026f0 <calibrateMag+0x2dc>)
 80025e2:	685a      	ldr	r2, [r3, #4]
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	1d1c      	adds	r4, r3, #4
 80025e8:	4611      	mov	r1, r2
 80025ea:	f7fe fb9b 	bl	8000d24 <__aeabi_fmul>
 80025ee:	4603      	mov	r3, r0
 80025f0:	6023      	str	r3, [r4, #0]
    dest1[2] = (float) mag_bias[2]*mRes*magCalibration[2];
 80025f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7fe fb41 	bl	8000c7c <__aeabi_i2f>
 80025fa:	4602      	mov	r2, r0
 80025fc:	4b3b      	ldr	r3, [pc, #236]	; (80026ec <calibrateMag+0x2d8>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4619      	mov	r1, r3
 8002602:	4610      	mov	r0, r2
 8002604:	f7fe fb8e 	bl	8000d24 <__aeabi_fmul>
 8002608:	4603      	mov	r3, r0
 800260a:	4618      	mov	r0, r3
 800260c:	4b38      	ldr	r3, [pc, #224]	; (80026f0 <calibrateMag+0x2dc>)
 800260e:	689a      	ldr	r2, [r3, #8]
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	f103 0408 	add.w	r4, r3, #8
 8002616:	4611      	mov	r1, r2
 8002618:	f7fe fb84 	bl	8000d24 <__aeabi_fmul>
 800261c:	4603      	mov	r3, r0
 800261e:	6023      	str	r3, [r4, #0]

    // Get soft iron correction estimate
    mag_scale[0]  = (mag_max[0] - mag_min[0])/2;  // get average x axis max chord length in counts
 8002620:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8002624:	461a      	mov	r2, r3
 8002626:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	0fda      	lsrs	r2, r3, #31
 800262e:	4413      	add	r3, r2
 8002630:	105b      	asrs	r3, r3, #1
 8002632:	62fb      	str	r3, [r7, #44]	; 0x2c
    mag_scale[1]  = (mag_max[1] - mag_min[1])/2;  // get average y axis max chord length in counts
 8002634:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8002638:	461a      	mov	r2, r3
 800263a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	0fda      	lsrs	r2, r3, #31
 8002642:	4413      	add	r3, r2
 8002644:	105b      	asrs	r3, r3, #1
 8002646:	633b      	str	r3, [r7, #48]	; 0x30
    mag_scale[2]  = (mag_max[2] - mag_min[2])/2;  // get average z axis max chord length in counts
 8002648:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800264c:	461a      	mov	r2, r3
 800264e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	0fda      	lsrs	r2, r3, #31
 8002656:	4413      	add	r3, r2
 8002658:	105b      	asrs	r3, r3, #1
 800265a:	637b      	str	r3, [r7, #52]	; 0x34

    float avg_rad = mag_scale[0] + mag_scale[1] + mag_scale[2];
 800265c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800265e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002660:	441a      	add	r2, r3
 8002662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002664:	4413      	add	r3, r2
 8002666:	4618      	mov	r0, r3
 8002668:	f7fe fb08 	bl	8000c7c <__aeabi_i2f>
 800266c:	4603      	mov	r3, r0
 800266e:	647b      	str	r3, [r7, #68]	; 0x44
    avg_rad /= 3.0;
 8002670:	4920      	ldr	r1, [pc, #128]	; (80026f4 <calibrateMag+0x2e0>)
 8002672:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002674:	f7fe fc0a 	bl	8000e8c <__aeabi_fdiv>
 8002678:	4603      	mov	r3, r0
 800267a:	647b      	str	r3, [r7, #68]	; 0x44

    dest2[0] = avg_rad/((float)mag_scale[0]);
 800267c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800267e:	4618      	mov	r0, r3
 8002680:	f7fe fafc 	bl	8000c7c <__aeabi_i2f>
 8002684:	4603      	mov	r3, r0
 8002686:	4619      	mov	r1, r3
 8002688:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800268a:	f7fe fbff 	bl	8000e8c <__aeabi_fdiv>
 800268e:	4603      	mov	r3, r0
 8002690:	461a      	mov	r2, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	601a      	str	r2, [r3, #0]
    dest2[1] = avg_rad/((float)mag_scale[1]);
 8002696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002698:	4618      	mov	r0, r3
 800269a:	f7fe faef 	bl	8000c7c <__aeabi_i2f>
 800269e:	4602      	mov	r2, r0
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	1d1c      	adds	r4, r3, #4
 80026a4:	4611      	mov	r1, r2
 80026a6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80026a8:	f7fe fbf0 	bl	8000e8c <__aeabi_fdiv>
 80026ac:	4603      	mov	r3, r0
 80026ae:	6023      	str	r3, [r4, #0]
    dest2[2] = avg_rad/((float)mag_scale[2]);
 80026b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7fe fae2 	bl	8000c7c <__aeabi_i2f>
 80026b8:	4602      	mov	r2, r0
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f103 0408 	add.w	r4, r3, #8
 80026c0:	4611      	mov	r1, r2
 80026c2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80026c4:	f7fe fbe2 	bl	8000e8c <__aeabi_fdiv>
 80026c8:	4603      	mov	r3, r0
 80026ca:	6023      	str	r3, [r4, #0]

    if (SerialDebugA){printf("Mag Calibration done!\r\n");}
 80026cc:	480a      	ldr	r0, [pc, #40]	; (80026f8 <calibrateMag+0x2e4>)
 80026ce:	f007 fcb9 	bl	800a044 <puts>
}
 80026d2:	bf00      	nop
 80026d4:	3754      	adds	r7, #84	; 0x54
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd90      	pop	{r4, r7, pc}
 80026da:	bf00      	nop
 80026dc:	0800b0c4 	.word	0x0800b0c4
 80026e0:	0800b0cc 	.word	0x0800b0cc
 80026e4:	0800b070 	.word	0x0800b070
 80026e8:	20000003 	.word	0x20000003
 80026ec:	20004284 	.word	0x20004284
 80026f0:	200042a0 	.word	0x200042a0
 80026f4:	40400000 	.word	0x40400000
 80026f8:	0800b0ac 	.word	0x0800b0ac

080026fc <initMPU9250>:


void initMPU9250(I2C_HandleTypeDef *I2Cx){
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b088      	sub	sp, #32
 8002700:	af04      	add	r7, sp, #16
 8002702:	6078      	str	r0, [r7, #4]
	//pre def. vars
	uint8_t readData;
	uint8_t writeData;

	//Wake up device
	writeData = 0x00;
 8002704:	2300      	movs	r3, #0
 8002706:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);
 8002708:	2364      	movs	r3, #100	; 0x64
 800270a:	9302      	str	r3, [sp, #8]
 800270c:	2301      	movs	r3, #1
 800270e:	9301      	str	r3, [sp, #4]
 8002710:	f107 030e 	add.w	r3, r7, #14
 8002714:	9300      	str	r3, [sp, #0]
 8002716:	2301      	movs	r3, #1
 8002718:	226b      	movs	r2, #107	; 0x6b
 800271a:	21d0      	movs	r1, #208	; 0xd0
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f004 f8c7 	bl	80068b0 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8002722:	2064      	movs	r0, #100	; 0x64
 8002724:	f002 ff02 	bl	800552c <HAL_Delay>

	writeData = 0x01;
 8002728:	2301      	movs	r3, #1
 800272a:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);
 800272c:	2364      	movs	r3, #100	; 0x64
 800272e:	9302      	str	r3, [sp, #8]
 8002730:	2301      	movs	r3, #1
 8002732:	9301      	str	r3, [sp, #4]
 8002734:	f107 030e 	add.w	r3, r7, #14
 8002738:	9300      	str	r3, [sp, #0]
 800273a:	2301      	movs	r3, #1
 800273c:	226b      	movs	r2, #107	; 0x6b
 800273e:	21d0      	movs	r1, #208	; 0xd0
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f004 f8b5 	bl	80068b0 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8002746:	2064      	movs	r0, #100	; 0x64
 8002748:	f002 fef0 	bl	800552c <HAL_Delay>

	writeData = 0x03;
 800274c:	2303      	movs	r3, #3
 800274e:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, CONFIG, 1, &writeData, 1, i2c_timeout);
 8002750:	2364      	movs	r3, #100	; 0x64
 8002752:	9302      	str	r3, [sp, #8]
 8002754:	2301      	movs	r3, #1
 8002756:	9301      	str	r3, [sp, #4]
 8002758:	f107 030e 	add.w	r3, r7, #14
 800275c:	9300      	str	r3, [sp, #0]
 800275e:	2301      	movs	r3, #1
 8002760:	221a      	movs	r2, #26
 8002762:	21d0      	movs	r1, #208	; 0xd0
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f004 f8a3 	bl	80068b0 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 800276a:	2064      	movs	r0, #100	; 0x64
 800276c:	f002 fede 	bl	800552c <HAL_Delay>

	writeData = 0x04;
 8002770:	2304      	movs	r3, #4
 8002772:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, SMPLRT_DIV, 1, &writeData, 1, i2c_timeout);
 8002774:	2364      	movs	r3, #100	; 0x64
 8002776:	9302      	str	r3, [sp, #8]
 8002778:	2301      	movs	r3, #1
 800277a:	9301      	str	r3, [sp, #4]
 800277c:	f107 030e 	add.w	r3, r7, #14
 8002780:	9300      	str	r3, [sp, #0]
 8002782:	2301      	movs	r3, #1
 8002784:	2219      	movs	r2, #25
 8002786:	21d0      	movs	r1, #208	; 0xd0
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f004 f891 	bl	80068b0 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 800278e:	2064      	movs	r0, #100	; 0x64
 8002790:	f002 fecc 	bl	800552c <HAL_Delay>

	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &readData, 1, i2c_timeout);
 8002794:	2364      	movs	r3, #100	; 0x64
 8002796:	9302      	str	r3, [sp, #8]
 8002798:	2301      	movs	r3, #1
 800279a:	9301      	str	r3, [sp, #4]
 800279c:	f107 030f 	add.w	r3, r7, #15
 80027a0:	9300      	str	r3, [sp, #0]
 80027a2:	2301      	movs	r3, #1
 80027a4:	221b      	movs	r2, #27
 80027a6:	21d0      	movs	r1, #208	; 0xd0
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f004 f97b 	bl	8006aa4 <HAL_I2C_Mem_Read>
	readData = readData & ~0x03; // Clear Fchoice bits [1:0]
 80027ae:	7bfb      	ldrb	r3, [r7, #15]
 80027b0:	f023 0303 	bic.w	r3, r3, #3
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	73fb      	strb	r3, [r7, #15]
	readData = readData & ~0x18; // Clear GFS bits [4:3]
 80027b8:	7bfb      	ldrb	r3, [r7, #15]
 80027ba:	f023 0318 	bic.w	r3, r3, #24
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	73fb      	strb	r3, [r7, #15]
	readData = readData | Gscale << 3; // Set full scale range for the gyro
 80027c2:	4b3e      	ldr	r3, [pc, #248]	; (80028bc <initMPU9250+0x1c0>)
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	00db      	lsls	r3, r3, #3
 80027c8:	b25a      	sxtb	r2, r3
 80027ca:	7bfb      	ldrb	r3, [r7, #15]
 80027cc:	b25b      	sxtb	r3, r3
 80027ce:	4313      	orrs	r3, r2
 80027d0:	b25b      	sxtb	r3, r3
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(100);
 80027d6:	2064      	movs	r0, #100	; 0x64
 80027d8:	f002 fea8 	bl	800552c <HAL_Delay>

	writeData = readData;
 80027dc:	7bfb      	ldrb	r3, [r7, #15]
 80027de:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);
 80027e0:	2364      	movs	r3, #100	; 0x64
 80027e2:	9302      	str	r3, [sp, #8]
 80027e4:	2301      	movs	r3, #1
 80027e6:	9301      	str	r3, [sp, #4]
 80027e8:	f107 030e 	add.w	r3, r7, #14
 80027ec:	9300      	str	r3, [sp, #0]
 80027ee:	2301      	movs	r3, #1
 80027f0:	221b      	movs	r2, #27
 80027f2:	21d0      	movs	r1, #208	; 0xd0
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f004 f85b 	bl	80068b0 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 80027fa:	2064      	movs	r0, #100	; 0x64
 80027fc:	f002 fe96 	bl	800552c <HAL_Delay>

	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &readData, 1, i2c_timeout);
 8002800:	2364      	movs	r3, #100	; 0x64
 8002802:	9302      	str	r3, [sp, #8]
 8002804:	2301      	movs	r3, #1
 8002806:	9301      	str	r3, [sp, #4]
 8002808:	f107 030f 	add.w	r3, r7, #15
 800280c:	9300      	str	r3, [sp, #0]
 800280e:	2301      	movs	r3, #1
 8002810:	221c      	movs	r2, #28
 8002812:	21d0      	movs	r1, #208	; 0xd0
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f004 f945 	bl	8006aa4 <HAL_I2C_Mem_Read>
	readData = readData & ~0x18;  // Clear AFS bits [4:3]
 800281a:	7bfb      	ldrb	r3, [r7, #15]
 800281c:	f023 0318 	bic.w	r3, r3, #24
 8002820:	b2db      	uxtb	r3, r3
 8002822:	73fb      	strb	r3, [r7, #15]
	readData = readData | Ascale << 3; // Set full scale range for the accelerometer
 8002824:	4b26      	ldr	r3, [pc, #152]	; (80028c0 <initMPU9250+0x1c4>)
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	00db      	lsls	r3, r3, #3
 800282a:	b25a      	sxtb	r2, r3
 800282c:	7bfb      	ldrb	r3, [r7, #15]
 800282e:	b25b      	sxtb	r3, r3
 8002830:	4313      	orrs	r3, r2
 8002832:	b25b      	sxtb	r3, r3
 8002834:	b2db      	uxtb	r3, r3
 8002836:	73fb      	strb	r3, [r7, #15]

	writeData = readData;
 8002838:	7bfb      	ldrb	r3, [r7, #15]
 800283a:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);
 800283c:	2364      	movs	r3, #100	; 0x64
 800283e:	9302      	str	r3, [sp, #8]
 8002840:	2301      	movs	r3, #1
 8002842:	9301      	str	r3, [sp, #4]
 8002844:	f107 030e 	add.w	r3, r7, #14
 8002848:	9300      	str	r3, [sp, #0]
 800284a:	2301      	movs	r3, #1
 800284c:	221c      	movs	r2, #28
 800284e:	21d0      	movs	r1, #208	; 0xd0
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f004 f82d 	bl	80068b0 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8002856:	2064      	movs	r0, #100	; 0x64
 8002858:	f002 fe68 	bl	800552c <HAL_Delay>
	//**
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG2, 1, &readData, 1, i2c_timeout);
 800285c:	2364      	movs	r3, #100	; 0x64
 800285e:	9302      	str	r3, [sp, #8]
 8002860:	2301      	movs	r3, #1
 8002862:	9301      	str	r3, [sp, #4]
 8002864:	f107 030f 	add.w	r3, r7, #15
 8002868:	9300      	str	r3, [sp, #0]
 800286a:	2301      	movs	r3, #1
 800286c:	221d      	movs	r2, #29
 800286e:	21d0      	movs	r1, #208	; 0xd0
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f004 f917 	bl	8006aa4 <HAL_I2C_Mem_Read>
	readData = readData & ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 8002876:	7bfb      	ldrb	r3, [r7, #15]
 8002878:	f023 030f 	bic.w	r3, r3, #15
 800287c:	b2db      	uxtb	r3, r3
 800287e:	73fb      	strb	r3, [r7, #15]
	readData = readData | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 8002880:	7bfb      	ldrb	r3, [r7, #15]
 8002882:	f043 0303 	orr.w	r3, r3, #3
 8002886:	b2db      	uxtb	r3, r3
 8002888:	73fb      	strb	r3, [r7, #15]

	writeData = readData;
 800288a:	7bfb      	ldrb	r3, [r7, #15]
 800288c:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG2, 1, &writeData, 1, i2c_timeout);
 800288e:	2364      	movs	r3, #100	; 0x64
 8002890:	9302      	str	r3, [sp, #8]
 8002892:	2301      	movs	r3, #1
 8002894:	9301      	str	r3, [sp, #4]
 8002896:	f107 030e 	add.w	r3, r7, #14
 800289a:	9300      	str	r3, [sp, #0]
 800289c:	2301      	movs	r3, #1
 800289e:	221d      	movs	r2, #29
 80028a0:	21d0      	movs	r1, #208	; 0xd0
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f004 f804 	bl	80068b0 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 80028a8:	2064      	movs	r0, #100	; 0x64
 80028aa:	f002 fe3f 	bl	800552c <HAL_Delay>

	if(SerialDebugA){printf("MPU Init Succesful! \r\n");}
 80028ae:	4805      	ldr	r0, [pc, #20]	; (80028c4 <initMPU9250+0x1c8>)
 80028b0:	f007 fbc8 	bl	800a044 <puts>
}
 80028b4:	bf00      	nop
 80028b6:	3710      	adds	r7, #16
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	20000000 	.word	0x20000000
 80028c0:	20000001 	.word	0x20000001
 80028c4:	0800b0d4 	.word	0x0800b0d4

080028c8 <calibrateMPU9250>:


// Function which accumulates gyro and accelerometer data after device initialization. It calculates the average
// of the at-rest readings and then loads the resulting offsets into accelerometer and gyro bias registers.
void calibrateMPU9250(I2C_HandleTypeDef *I2Cx, float * dest1, float * dest2){
 80028c8:	b5b0      	push	{r4, r5, r7, lr}
 80028ca:	b0a4      	sub	sp, #144	; 0x90
 80028cc:	af04      	add	r7, sp, #16
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]
  //pre def. vars
  uint8_t writeData;

	uint8_t calibData[12]; // data array to hold accelerometer and gyro x, y, z, data
	uint16_t ii, packet_count, fifo_count;
	int32_t gyro_bias[3]  = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
 80028d4:	2300      	movs	r3, #0
 80028d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028d8:	2300      	movs	r3, #0
 80028da:	643b      	str	r3, [r7, #64]	; 0x40
 80028dc:	2300      	movs	r3, #0
 80028de:	647b      	str	r3, [r7, #68]	; 0x44
 80028e0:	2300      	movs	r3, #0
 80028e2:	633b      	str	r3, [r7, #48]	; 0x30
 80028e4:	2300      	movs	r3, #0
 80028e6:	637b      	str	r3, [r7, #52]	; 0x34
 80028e8:	2300      	movs	r3, #0
 80028ea:	63bb      	str	r3, [r7, #56]	; 0x38

	// reset device
	writeData = 0x80;
 80028ec:	2380      	movs	r3, #128	; 0x80
 80028ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);// Write a one to bit 7 reset bit; toggle reset device
 80028f2:	2364      	movs	r3, #100	; 0x64
 80028f4:	9302      	str	r3, [sp, #8]
 80028f6:	2301      	movs	r3, #1
 80028f8:	9301      	str	r3, [sp, #4]
 80028fa:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80028fe:	9300      	str	r3, [sp, #0]
 8002900:	2301      	movs	r3, #1
 8002902:	226b      	movs	r2, #107	; 0x6b
 8002904:	21d0      	movs	r1, #208	; 0xd0
 8002906:	68f8      	ldr	r0, [r7, #12]
 8002908:	f003 ffd2 	bl	80068b0 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 800290c:	2064      	movs	r0, #100	; 0x64
 800290e:	f002 fe0d 	bl	800552c <HAL_Delay>

	// get stable time source; Auto select clock source to be PLL gyroscope reference if ready
	// else use the internal oscillator, bits 2:0 = 001
	writeData = 0x01;
 8002912:	2301      	movs	r3, #1
 8002914:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);
 8002918:	2364      	movs	r3, #100	; 0x64
 800291a:	9302      	str	r3, [sp, #8]
 800291c:	2301      	movs	r3, #1
 800291e:	9301      	str	r3, [sp, #4]
 8002920:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8002924:	9300      	str	r3, [sp, #0]
 8002926:	2301      	movs	r3, #1
 8002928:	226b      	movs	r2, #107	; 0x6b
 800292a:	21d0      	movs	r1, #208	; 0xd0
 800292c:	68f8      	ldr	r0, [r7, #12]
 800292e:	f003 ffbf 	bl	80068b0 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8002932:	2300      	movs	r3, #0
 8002934:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_2, 1, &writeData, 1, i2c_timeout);
 8002938:	2364      	movs	r3, #100	; 0x64
 800293a:	9302      	str	r3, [sp, #8]
 800293c:	2301      	movs	r3, #1
 800293e:	9301      	str	r3, [sp, #4]
 8002940:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8002944:	9300      	str	r3, [sp, #0]
 8002946:	2301      	movs	r3, #1
 8002948:	226c      	movs	r2, #108	; 0x6c
 800294a:	21d0      	movs	r1, #208	; 0xd0
 800294c:	68f8      	ldr	r0, [r7, #12]
 800294e:	f003 ffaf 	bl	80068b0 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 8002952:	20c8      	movs	r0, #200	; 0xc8
 8002954:	f002 fdea 	bl	800552c <HAL_Delay>

	// Configure device for bias calculation
	writeData = 0x00;
 8002958:	2300      	movs	r3, #0
 800295a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, INT_ENABLE, 1, &writeData, 1, i2c_timeout);// Disable all interrupts
 800295e:	2364      	movs	r3, #100	; 0x64
 8002960:	9302      	str	r3, [sp, #8]
 8002962:	2301      	movs	r3, #1
 8002964:	9301      	str	r3, [sp, #4]
 8002966:	f107 0357 	add.w	r3, r7, #87	; 0x57
 800296a:	9300      	str	r3, [sp, #0]
 800296c:	2301      	movs	r3, #1
 800296e:	2238      	movs	r2, #56	; 0x38
 8002970:	21d0      	movs	r1, #208	; 0xd0
 8002972:	68f8      	ldr	r0, [r7, #12]
 8002974:	f003 ff9c 	bl	80068b0 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8002978:	2300      	movs	r3, #0
 800297a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, FIFO_EN, 1, &writeData, 1, i2c_timeout);// Disable FIFO
 800297e:	2364      	movs	r3, #100	; 0x64
 8002980:	9302      	str	r3, [sp, #8]
 8002982:	2301      	movs	r3, #1
 8002984:	9301      	str	r3, [sp, #4]
 8002986:	f107 0357 	add.w	r3, r7, #87	; 0x57
 800298a:	9300      	str	r3, [sp, #0]
 800298c:	2301      	movs	r3, #1
 800298e:	2223      	movs	r2, #35	; 0x23
 8002990:	21d0      	movs	r1, #208	; 0xd0
 8002992:	68f8      	ldr	r0, [r7, #12]
 8002994:	f003 ff8c 	bl	80068b0 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8002998:	2300      	movs	r3, #0
 800299a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);// Turn on internal clock source
 800299e:	2364      	movs	r3, #100	; 0x64
 80029a0:	9302      	str	r3, [sp, #8]
 80029a2:	2301      	movs	r3, #1
 80029a4:	9301      	str	r3, [sp, #4]
 80029a6:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80029aa:	9300      	str	r3, [sp, #0]
 80029ac:	2301      	movs	r3, #1
 80029ae:	226b      	movs	r2, #107	; 0x6b
 80029b0:	21d0      	movs	r1, #208	; 0xd0
 80029b2:	68f8      	ldr	r0, [r7, #12]
 80029b4:	f003 ff7c 	bl	80068b0 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 80029b8:	2300      	movs	r3, #0
 80029ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, I2C_MST_CTRL, 1, &writeData, 1, i2c_timeout);// Disable I2C master
 80029be:	2364      	movs	r3, #100	; 0x64
 80029c0:	9302      	str	r3, [sp, #8]
 80029c2:	2301      	movs	r3, #1
 80029c4:	9301      	str	r3, [sp, #4]
 80029c6:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80029ca:	9300      	str	r3, [sp, #0]
 80029cc:	2301      	movs	r3, #1
 80029ce:	2224      	movs	r2, #36	; 0x24
 80029d0:	21d0      	movs	r1, #208	; 0xd0
 80029d2:	68f8      	ldr	r0, [r7, #12]
 80029d4:	f003 ff6c 	bl	80068b0 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 80029d8:	2300      	movs	r3, #0
 80029da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, USER_CTRL, 1, &writeData, 1, i2c_timeout);// Disable FIFO and I2C master modes
 80029de:	2364      	movs	r3, #100	; 0x64
 80029e0:	9302      	str	r3, [sp, #8]
 80029e2:	2301      	movs	r3, #1
 80029e4:	9301      	str	r3, [sp, #4]
 80029e6:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80029ea:	9300      	str	r3, [sp, #0]
 80029ec:	2301      	movs	r3, #1
 80029ee:	226a      	movs	r2, #106	; 0x6a
 80029f0:	21d0      	movs	r1, #208	; 0xd0
 80029f2:	68f8      	ldr	r0, [r7, #12]
 80029f4:	f003 ff5c 	bl	80068b0 <HAL_I2C_Mem_Write>
	writeData = 0x0C;
 80029f8:	230c      	movs	r3, #12
 80029fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, USER_CTRL, 1, &writeData, 1, i2c_timeout);// Reset FIFO and DMP
 80029fe:	2364      	movs	r3, #100	; 0x64
 8002a00:	9302      	str	r3, [sp, #8]
 8002a02:	2301      	movs	r3, #1
 8002a04:	9301      	str	r3, [sp, #4]
 8002a06:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8002a0a:	9300      	str	r3, [sp, #0]
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	226a      	movs	r2, #106	; 0x6a
 8002a10:	21d0      	movs	r1, #208	; 0xd0
 8002a12:	68f8      	ldr	r0, [r7, #12]
 8002a14:	f003 ff4c 	bl	80068b0 <HAL_I2C_Mem_Write>
	HAL_Delay(15);
 8002a18:	200f      	movs	r0, #15
 8002a1a:	f002 fd87 	bl	800552c <HAL_Delay>

	// Configure MPU6050 gyro and accelerometer for bias calculation
	writeData = 0x01;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, CONFIG, 1, &writeData, 1, i2c_timeout);// Set low-pass filter to 188 Hz
 8002a24:	2364      	movs	r3, #100	; 0x64
 8002a26:	9302      	str	r3, [sp, #8]
 8002a28:	2301      	movs	r3, #1
 8002a2a:	9301      	str	r3, [sp, #4]
 8002a2c:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8002a30:	9300      	str	r3, [sp, #0]
 8002a32:	2301      	movs	r3, #1
 8002a34:	221a      	movs	r2, #26
 8002a36:	21d0      	movs	r1, #208	; 0xd0
 8002a38:	68f8      	ldr	r0, [r7, #12]
 8002a3a:	f003 ff39 	bl	80068b0 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, SMPLRT_DIV, 1, &writeData, 1, i2c_timeout);// Set sample rate to 1 kHz
 8002a44:	2364      	movs	r3, #100	; 0x64
 8002a46:	9302      	str	r3, [sp, #8]
 8002a48:	2301      	movs	r3, #1
 8002a4a:	9301      	str	r3, [sp, #4]
 8002a4c:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8002a50:	9300      	str	r3, [sp, #0]
 8002a52:	2301      	movs	r3, #1
 8002a54:	2219      	movs	r2, #25
 8002a56:	21d0      	movs	r1, #208	; 0xd0
 8002a58:	68f8      	ldr	r0, [r7, #12]
 8002a5a:	f003 ff29 	bl	80068b0 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);// Set gyro full-scale to 250 degrees per second, maximum sensitivity
 8002a64:	2364      	movs	r3, #100	; 0x64
 8002a66:	9302      	str	r3, [sp, #8]
 8002a68:	2301      	movs	r3, #1
 8002a6a:	9301      	str	r3, [sp, #4]
 8002a6c:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8002a70:	9300      	str	r3, [sp, #0]
 8002a72:	2301      	movs	r3, #1
 8002a74:	221b      	movs	r2, #27
 8002a76:	21d0      	movs	r1, #208	; 0xd0
 8002a78:	68f8      	ldr	r0, [r7, #12]
 8002a7a:	f003 ff19 	bl	80068b0 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);// Set accelerometer full-scale to 2 g, maximum sensitivity
 8002a84:	2364      	movs	r3, #100	; 0x64
 8002a86:	9302      	str	r3, [sp, #8]
 8002a88:	2301      	movs	r3, #1
 8002a8a:	9301      	str	r3, [sp, #4]
 8002a8c:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8002a90:	9300      	str	r3, [sp, #0]
 8002a92:	2301      	movs	r3, #1
 8002a94:	221c      	movs	r2, #28
 8002a96:	21d0      	movs	r1, #208	; 0xd0
 8002a98:	68f8      	ldr	r0, [r7, #12]
 8002a9a:	f003 ff09 	bl	80068b0 <HAL_I2C_Mem_Write>

	uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
 8002a9e:	2383      	movs	r3, #131	; 0x83
 8002aa0:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
	uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g
 8002aa4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002aa8:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

	// Configure FIFO to capture accelerometer and gyro data for bias calculation
	writeData = 0x40;
 8002aac:	2340      	movs	r3, #64	; 0x40
 8002aae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, USER_CTRL, 1, &writeData, 1, i2c_timeout);// Enable FIFO
 8002ab2:	2364      	movs	r3, #100	; 0x64
 8002ab4:	9302      	str	r3, [sp, #8]
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	9301      	str	r3, [sp, #4]
 8002aba:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8002abe:	9300      	str	r3, [sp, #0]
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	226a      	movs	r2, #106	; 0x6a
 8002ac4:	21d0      	movs	r1, #208	; 0xd0
 8002ac6:	68f8      	ldr	r0, [r7, #12]
 8002ac8:	f003 fef2 	bl	80068b0 <HAL_I2C_Mem_Write>
	writeData = 0x78;
 8002acc:	2378      	movs	r3, #120	; 0x78
 8002ace:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, FIFO_EN, 1, &writeData, 1, i2c_timeout);// Enable gyro and accelerometer sensors for FIFO  (max size 512 bytes in MPU-9150)
 8002ad2:	2364      	movs	r3, #100	; 0x64
 8002ad4:	9302      	str	r3, [sp, #8]
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	9301      	str	r3, [sp, #4]
 8002ada:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8002ade:	9300      	str	r3, [sp, #0]
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	2223      	movs	r2, #35	; 0x23
 8002ae4:	21d0      	movs	r1, #208	; 0xd0
 8002ae6:	68f8      	ldr	r0, [r7, #12]
 8002ae8:	f003 fee2 	bl	80068b0 <HAL_I2C_Mem_Write>
	HAL_Delay(40); // accumulate 40 samples in 40 milliseconds = 480 bytes
 8002aec:	2028      	movs	r0, #40	; 0x28
 8002aee:	f002 fd1d 	bl	800552c <HAL_Delay>

	// At end of sample accumulation, turn off FIFO sensor read
	writeData = 0x00;
 8002af2:	2300      	movs	r3, #0
 8002af4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, FIFO_EN, 1, &writeData, 1, i2c_timeout);// Disable gyro and accelerometer sensors for FIFO
 8002af8:	2364      	movs	r3, #100	; 0x64
 8002afa:	9302      	str	r3, [sp, #8]
 8002afc:	2301      	movs	r3, #1
 8002afe:	9301      	str	r3, [sp, #4]
 8002b00:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8002b04:	9300      	str	r3, [sp, #0]
 8002b06:	2301      	movs	r3, #1
 8002b08:	2223      	movs	r2, #35	; 0x23
 8002b0a:	21d0      	movs	r1, #208	; 0xd0
 8002b0c:	68f8      	ldr	r0, [r7, #12]
 8002b0e:	f003 fecf 	bl	80068b0 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, FIFO_COUNTH, 1, &calibData[0], 2, i2c_timeout);// read FIFO sample count
 8002b12:	2364      	movs	r3, #100	; 0x64
 8002b14:	9302      	str	r3, [sp, #8]
 8002b16:	2302      	movs	r3, #2
 8002b18:	9301      	str	r3, [sp, #4]
 8002b1a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002b1e:	9300      	str	r3, [sp, #0]
 8002b20:	2301      	movs	r3, #1
 8002b22:	2272      	movs	r2, #114	; 0x72
 8002b24:	21d0      	movs	r1, #208	; 0xd0
 8002b26:	68f8      	ldr	r0, [r7, #12]
 8002b28:	f003 ffbc 	bl	8006aa4 <HAL_I2C_Mem_Read>
	fifo_count = ((uint16_t)calibData[0] << 8) | calibData[1];
 8002b2c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002b30:	021b      	lsls	r3, r3, #8
 8002b32:	b21a      	sxth	r2, r3
 8002b34:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8002b38:	b21b      	sxth	r3, r3
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	b21b      	sxth	r3, r3
 8002b3e:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
	packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
 8002b42:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002b46:	4a5a      	ldr	r2, [pc, #360]	; (8002cb0 <calibrateMPU9250+0x3e8>)
 8002b48:	fba2 2303 	umull	r2, r3, r2, r3
 8002b4c:	08db      	lsrs	r3, r3, #3
 8002b4e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

	for (ii = 0; ii < packet_count; ii++) {
 8002b52:	2300      	movs	r3, #0
 8002b54:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8002b58:	e077      	b.n	8002c4a <calibrateMPU9250+0x382>
		int16_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	833b      	strh	r3, [r7, #24]
 8002b5e:	2300      	movs	r3, #0
 8002b60:	837b      	strh	r3, [r7, #26]
 8002b62:	2300      	movs	r3, #0
 8002b64:	83bb      	strh	r3, [r7, #28]
 8002b66:	2300      	movs	r3, #0
 8002b68:	823b      	strh	r3, [r7, #16]
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	827b      	strh	r3, [r7, #18]
 8002b6e:	2300      	movs	r3, #0
 8002b70:	82bb      	strh	r3, [r7, #20]
		HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, FIFO_R_W, 1, &calibData[0], 12, i2c_timeout);
 8002b72:	2364      	movs	r3, #100	; 0x64
 8002b74:	9302      	str	r3, [sp, #8]
 8002b76:	230c      	movs	r3, #12
 8002b78:	9301      	str	r3, [sp, #4]
 8002b7a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002b7e:	9300      	str	r3, [sp, #0]
 8002b80:	2301      	movs	r3, #1
 8002b82:	2274      	movs	r2, #116	; 0x74
 8002b84:	21d0      	movs	r1, #208	; 0xd0
 8002b86:	68f8      	ldr	r0, [r7, #12]
 8002b88:	f003 ff8c 	bl	8006aa4 <HAL_I2C_Mem_Read>

		//Form signed 16-bit integer for each sample in FIFO
		accel_temp[0] = (int16_t) (((int16_t)calibData[0] << 8) | calibData[1]  ) ;
 8002b8c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002b90:	021b      	lsls	r3, r3, #8
 8002b92:	b21a      	sxth	r2, r3
 8002b94:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8002b98:	b21b      	sxth	r3, r3
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	b21b      	sxth	r3, r3
 8002b9e:	833b      	strh	r3, [r7, #24]
		accel_temp[1] = (int16_t) (((int16_t)calibData[2] << 8) | calibData[3]  ) ;
 8002ba0:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002ba4:	021b      	lsls	r3, r3, #8
 8002ba6:	b21a      	sxth	r2, r3
 8002ba8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002bac:	b21b      	sxth	r3, r3
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	b21b      	sxth	r3, r3
 8002bb2:	837b      	strh	r3, [r7, #26]
		accel_temp[2] = (int16_t) (((int16_t)calibData[4] << 8) | calibData[5]  ) ;
 8002bb4:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002bb8:	021b      	lsls	r3, r3, #8
 8002bba:	b21a      	sxth	r2, r3
 8002bbc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002bc0:	b21b      	sxth	r3, r3
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	b21b      	sxth	r3, r3
 8002bc6:	83bb      	strh	r3, [r7, #28]
		gyro_temp[0]  = (int16_t) (((int16_t)calibData[6] << 8) | calibData[7]  ) ;
 8002bc8:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002bcc:	021b      	lsls	r3, r3, #8
 8002bce:	b21a      	sxth	r2, r3
 8002bd0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002bd4:	b21b      	sxth	r3, r3
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	b21b      	sxth	r3, r3
 8002bda:	823b      	strh	r3, [r7, #16]
		gyro_temp[1]  = (int16_t) (((int16_t)calibData[8] << 8) | calibData[9]  ) ;
 8002bdc:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8002be0:	021b      	lsls	r3, r3, #8
 8002be2:	b21a      	sxth	r2, r3
 8002be4:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8002be8:	b21b      	sxth	r3, r3
 8002bea:	4313      	orrs	r3, r2
 8002bec:	b21b      	sxth	r3, r3
 8002bee:	827b      	strh	r3, [r7, #18]
		gyro_temp[2]  = (int16_t) (((int16_t)calibData[10] << 8) | calibData[11]) ;
 8002bf0:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8002bf4:	021b      	lsls	r3, r3, #8
 8002bf6:	b21a      	sxth	r2, r3
 8002bf8:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8002bfc:	b21b      	sxth	r3, r3
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	b21b      	sxth	r3, r3
 8002c02:	82bb      	strh	r3, [r7, #20]

		//Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
		accel_bias[0] += (int32_t) accel_temp[0];
 8002c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c06:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	633b      	str	r3, [r7, #48]	; 0x30
		accel_bias[1] += (int32_t) accel_temp[1];
 8002c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c10:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8002c14:	4413      	add	r3, r2
 8002c16:	637b      	str	r3, [r7, #52]	; 0x34
		accel_bias[2] += (int32_t) accel_temp[2];
 8002c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c1a:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8002c1e:	4413      	add	r3, r2
 8002c20:	63bb      	str	r3, [r7, #56]	; 0x38
		gyro_bias[0]  += (int32_t) gyro_temp[0];
 8002c22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c24:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002c28:	4413      	add	r3, r2
 8002c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
		gyro_bias[1]  += (int32_t) gyro_temp[1];
 8002c2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c2e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002c32:	4413      	add	r3, r2
 8002c34:	643b      	str	r3, [r7, #64]	; 0x40
		gyro_bias[2]  += (int32_t) gyro_temp[2];
 8002c36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c38:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	647b      	str	r3, [r7, #68]	; 0x44
	for (ii = 0; ii < packet_count; ii++) {
 8002c40:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002c44:	3301      	adds	r3, #1
 8002c46:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8002c4a:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8002c4e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d381      	bcc.n	8002b5a <calibrateMPU9250+0x292>
	}

	//Normalize sums to get average count biases
	accel_bias[0] /= (int32_t) packet_count;
 8002c56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c58:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002c5c:	fb92 f3f3 	sdiv	r3, r2, r3
 8002c60:	633b      	str	r3, [r7, #48]	; 0x30
	accel_bias[1] /= (int32_t) packet_count;
 8002c62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c64:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002c68:	fb92 f3f3 	sdiv	r3, r2, r3
 8002c6c:	637b      	str	r3, [r7, #52]	; 0x34
	accel_bias[2] /= (int32_t) packet_count;
 8002c6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c70:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002c74:	fb92 f3f3 	sdiv	r3, r2, r3
 8002c78:	63bb      	str	r3, [r7, #56]	; 0x38
	gyro_bias[0]  /= (int32_t) packet_count;
 8002c7a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c7c:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002c80:	fb92 f3f3 	sdiv	r3, r2, r3
 8002c84:	63fb      	str	r3, [r7, #60]	; 0x3c
	gyro_bias[1]  /= (int32_t) packet_count;
 8002c86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002c88:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002c8c:	fb92 f3f3 	sdiv	r3, r2, r3
 8002c90:	643b      	str	r3, [r7, #64]	; 0x40
	gyro_bias[2]  /= (int32_t) packet_count;
 8002c92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c94:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002c98:	fb92 f3f3 	sdiv	r3, r2, r3
 8002c9c:	647b      	str	r3, [r7, #68]	; 0x44

	//Remove gravity from the z-axis accelerometer bias calculation
	if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}
 8002c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	dd07      	ble.n	8002cb4 <calibrateMPU9250+0x3ec>
 8002ca4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ca6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	63bb      	str	r3, [r7, #56]	; 0x38
 8002cae:	e006      	b.n	8002cbe <calibrateMPU9250+0x3f6>
 8002cb0:	aaaaaaab 	.word	0xaaaaaaab
	else {accel_bias[2] += (int32_t) accelsensitivity;}
 8002cb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002cb6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002cba:	4413      	add	r3, r2
 8002cbc:	63bb      	str	r3, [r7, #56]	; 0x38

	//Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
	calibData[0] = (-gyro_bias[0]/4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 8002cbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cc0:	425b      	negs	r3, r3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	da00      	bge.n	8002cc8 <calibrateMPU9250+0x400>
 8002cc6:	3303      	adds	r3, #3
 8002cc8:	109b      	asrs	r3, r3, #2
 8002cca:	121b      	asrs	r3, r3, #8
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	calibData[1] = (-gyro_bias[0]/4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
 8002cd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cd4:	425b      	negs	r3, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	da00      	bge.n	8002cdc <calibrateMPU9250+0x414>
 8002cda:	3303      	adds	r3, #3
 8002cdc:	109b      	asrs	r3, r3, #2
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	calibData[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
 8002ce4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ce6:	425b      	negs	r3, r3
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	da00      	bge.n	8002cee <calibrateMPU9250+0x426>
 8002cec:	3303      	adds	r3, #3
 8002cee:	109b      	asrs	r3, r3, #2
 8002cf0:	121b      	asrs	r3, r3, #8
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	calibData[3] = (-gyro_bias[1]/4)       & 0xFF;
 8002cf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cfa:	425b      	negs	r3, r3
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	da00      	bge.n	8002d02 <calibrateMPU9250+0x43a>
 8002d00:	3303      	adds	r3, #3
 8002d02:	109b      	asrs	r3, r3, #2
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	calibData[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
 8002d0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d0c:	425b      	negs	r3, r3
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	da00      	bge.n	8002d14 <calibrateMPU9250+0x44c>
 8002d12:	3303      	adds	r3, #3
 8002d14:	109b      	asrs	r3, r3, #2
 8002d16:	121b      	asrs	r3, r3, #8
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	calibData[5] = (-gyro_bias[2]/4)       & 0xFF;
 8002d1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d20:	425b      	negs	r3, r3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	da00      	bge.n	8002d28 <calibrateMPU9250+0x460>
 8002d26:	3303      	adds	r3, #3
 8002d28:	109b      	asrs	r3, r3, #2
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

	//Push gyro biases to hardware registers
	writeData = calibData[0];
 8002d30:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002d34:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, XG_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 8002d38:	2364      	movs	r3, #100	; 0x64
 8002d3a:	9302      	str	r3, [sp, #8]
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	9301      	str	r3, [sp, #4]
 8002d40:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8002d44:	9300      	str	r3, [sp, #0]
 8002d46:	2301      	movs	r3, #1
 8002d48:	2213      	movs	r2, #19
 8002d4a:	21d0      	movs	r1, #208	; 0xd0
 8002d4c:	68f8      	ldr	r0, [r7, #12]
 8002d4e:	f003 fdaf 	bl	80068b0 <HAL_I2C_Mem_Write>
	writeData = calibData[1];
 8002d52:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8002d56:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, XG_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 8002d5a:	2364      	movs	r3, #100	; 0x64
 8002d5c:	9302      	str	r3, [sp, #8]
 8002d5e:	2301      	movs	r3, #1
 8002d60:	9301      	str	r3, [sp, #4]
 8002d62:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8002d66:	9300      	str	r3, [sp, #0]
 8002d68:	2301      	movs	r3, #1
 8002d6a:	2214      	movs	r2, #20
 8002d6c:	21d0      	movs	r1, #208	; 0xd0
 8002d6e:	68f8      	ldr	r0, [r7, #12]
 8002d70:	f003 fd9e 	bl	80068b0 <HAL_I2C_Mem_Write>
	writeData = calibData[2];
 8002d74:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002d78:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, YG_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 8002d7c:	2364      	movs	r3, #100	; 0x64
 8002d7e:	9302      	str	r3, [sp, #8]
 8002d80:	2301      	movs	r3, #1
 8002d82:	9301      	str	r3, [sp, #4]
 8002d84:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8002d88:	9300      	str	r3, [sp, #0]
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	2215      	movs	r2, #21
 8002d8e:	21d0      	movs	r1, #208	; 0xd0
 8002d90:	68f8      	ldr	r0, [r7, #12]
 8002d92:	f003 fd8d 	bl	80068b0 <HAL_I2C_Mem_Write>
	writeData = calibData[3];
 8002d96:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002d9a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, YG_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 8002d9e:	2364      	movs	r3, #100	; 0x64
 8002da0:	9302      	str	r3, [sp, #8]
 8002da2:	2301      	movs	r3, #1
 8002da4:	9301      	str	r3, [sp, #4]
 8002da6:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8002daa:	9300      	str	r3, [sp, #0]
 8002dac:	2301      	movs	r3, #1
 8002dae:	2216      	movs	r2, #22
 8002db0:	21d0      	movs	r1, #208	; 0xd0
 8002db2:	68f8      	ldr	r0, [r7, #12]
 8002db4:	f003 fd7c 	bl	80068b0 <HAL_I2C_Mem_Write>
	writeData = calibData[4];
 8002db8:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002dbc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ZG_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 8002dc0:	2364      	movs	r3, #100	; 0x64
 8002dc2:	9302      	str	r3, [sp, #8]
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	9301      	str	r3, [sp, #4]
 8002dc8:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8002dcc:	9300      	str	r3, [sp, #0]
 8002dce:	2301      	movs	r3, #1
 8002dd0:	2217      	movs	r2, #23
 8002dd2:	21d0      	movs	r1, #208	; 0xd0
 8002dd4:	68f8      	ldr	r0, [r7, #12]
 8002dd6:	f003 fd6b 	bl	80068b0 <HAL_I2C_Mem_Write>
	writeData = calibData[5];
 8002dda:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002dde:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ZG_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 8002de2:	2364      	movs	r3, #100	; 0x64
 8002de4:	9302      	str	r3, [sp, #8]
 8002de6:	2301      	movs	r3, #1
 8002de8:	9301      	str	r3, [sp, #4]
 8002dea:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8002dee:	9300      	str	r3, [sp, #0]
 8002df0:	2301      	movs	r3, #1
 8002df2:	2218      	movs	r2, #24
 8002df4:	21d0      	movs	r1, #208	; 0xd0
 8002df6:	68f8      	ldr	r0, [r7, #12]
 8002df8:	f003 fd5a 	bl	80068b0 <HAL_I2C_Mem_Write>

	//Output scaled gyro biases for display in the main program
	dest1[0] = (float) gyro_bias[0]/(float) gyrosensitivity;
 8002dfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7fd ff3c 	bl	8000c7c <__aeabi_i2f>
 8002e04:	4604      	mov	r4, r0
 8002e06:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7fd ff32 	bl	8000c74 <__aeabi_ui2f>
 8002e10:	4603      	mov	r3, r0
 8002e12:	4619      	mov	r1, r3
 8002e14:	4620      	mov	r0, r4
 8002e16:	f7fe f839 	bl	8000e8c <__aeabi_fdiv>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	601a      	str	r2, [r3, #0]
	dest1[1] = (float) gyro_bias[1]/(float) gyrosensitivity;
 8002e22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7fd ff29 	bl	8000c7c <__aeabi_i2f>
 8002e2a:	4605      	mov	r5, r0
 8002e2c:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7fd ff1f 	bl	8000c74 <__aeabi_ui2f>
 8002e36:	4602      	mov	r2, r0
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	1d1c      	adds	r4, r3, #4
 8002e3c:	4611      	mov	r1, r2
 8002e3e:	4628      	mov	r0, r5
 8002e40:	f7fe f824 	bl	8000e8c <__aeabi_fdiv>
 8002e44:	4603      	mov	r3, r0
 8002e46:	6023      	str	r3, [r4, #0]
	dest1[2] = (float) gyro_bias[2]/(float) gyrosensitivity;
 8002e48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7fd ff16 	bl	8000c7c <__aeabi_i2f>
 8002e50:	4605      	mov	r5, r0
 8002e52:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7fd ff0c 	bl	8000c74 <__aeabi_ui2f>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	f103 0408 	add.w	r4, r3, #8
 8002e64:	4611      	mov	r1, r2
 8002e66:	4628      	mov	r0, r5
 8002e68:	f7fe f810 	bl	8000e8c <__aeabi_fdiv>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	6023      	str	r3, [r4, #0]

	if(SerialDebugA){
		float gyroBiasX = (float) gyro_bias[0]/(float) gyrosensitivity;
 8002e70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7fd ff02 	bl	8000c7c <__aeabi_i2f>
 8002e78:	4604      	mov	r4, r0
 8002e7a:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7fd fef8 	bl	8000c74 <__aeabi_ui2f>
 8002e84:	4603      	mov	r3, r0
 8002e86:	4619      	mov	r1, r3
 8002e88:	4620      	mov	r0, r4
 8002e8a:	f7fd ffff 	bl	8000e8c <__aeabi_fdiv>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	673b      	str	r3, [r7, #112]	; 0x70
		float gyroBiasY = (float) gyro_bias[1]/(float) gyrosensitivity;
 8002e92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7fd fef1 	bl	8000c7c <__aeabi_i2f>
 8002e9a:	4604      	mov	r4, r0
 8002e9c:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7fd fee7 	bl	8000c74 <__aeabi_ui2f>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	4620      	mov	r0, r4
 8002eac:	f7fd ffee 	bl	8000e8c <__aeabi_fdiv>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	66fb      	str	r3, [r7, #108]	; 0x6c
		float gyroBiasZ = (float) gyro_bias[2]/(float) gyrosensitivity;
 8002eb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7fd fee0 	bl	8000c7c <__aeabi_i2f>
 8002ebc:	4604      	mov	r4, r0
 8002ebe:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7fd fed6 	bl	8000c74 <__aeabi_ui2f>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	4619      	mov	r1, r3
 8002ecc:	4620      	mov	r0, r4
 8002ece:	f7fd ffdd 	bl	8000e8c <__aeabi_fdiv>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	66bb      	str	r3, [r7, #104]	; 0x68

		printf("Gyro bias X: %f\r\n", gyroBiasX);
 8002ed6:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002ed8:	f7fd fa9e 	bl	8000418 <__aeabi_f2d>
 8002edc:	4602      	mov	r2, r0
 8002ede:	460b      	mov	r3, r1
 8002ee0:	4833      	ldr	r0, [pc, #204]	; (8002fb0 <calibrateMPU9250+0x6e8>)
 8002ee2:	f007 f829 	bl	8009f38 <iprintf>
		printf("Gyro bias Y: %f\r\n", gyroBiasY);
 8002ee6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002ee8:	f7fd fa96 	bl	8000418 <__aeabi_f2d>
 8002eec:	4602      	mov	r2, r0
 8002eee:	460b      	mov	r3, r1
 8002ef0:	4830      	ldr	r0, [pc, #192]	; (8002fb4 <calibrateMPU9250+0x6ec>)
 8002ef2:	f007 f821 	bl	8009f38 <iprintf>
		printf("Gyro bias Z: %f\r\n", gyroBiasZ);
 8002ef6:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002ef8:	f7fd fa8e 	bl	8000418 <__aeabi_f2d>
 8002efc:	4602      	mov	r2, r0
 8002efe:	460b      	mov	r3, r1
 8002f00:	482d      	ldr	r0, [pc, #180]	; (8002fb8 <calibrateMPU9250+0x6f0>)
 8002f02:	f007 f819 	bl	8009f38 <iprintf>

		printf("-------------------------\r\n");
 8002f06:	482d      	ldr	r0, [pc, #180]	; (8002fbc <calibrateMPU9250+0x6f4>)
 8002f08:	f007 f89c 	bl	800a044 <puts>
	}

	//Construct the accelerometer biases for push to the hardware accelerometer bias registers.
	int32_t accel_bias_reg[3] = {0, 0, 0}; //A place to hold the factory accelerometer trim biases
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	627b      	str	r3, [r7, #36]	; 0x24
 8002f10:	2300      	movs	r3, #0
 8002f12:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f14:	2300      	movs	r3, #0
 8002f16:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, XA_OFFSET_H, 1, &calibData[0], 2, i2c_timeout); //Read factory accelerometer trim values
 8002f18:	2364      	movs	r3, #100	; 0x64
 8002f1a:	9302      	str	r3, [sp, #8]
 8002f1c:	2302      	movs	r3, #2
 8002f1e:	9301      	str	r3, [sp, #4]
 8002f20:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002f24:	9300      	str	r3, [sp, #0]
 8002f26:	2301      	movs	r3, #1
 8002f28:	2277      	movs	r2, #119	; 0x77
 8002f2a:	21d0      	movs	r1, #208	; 0xd0
 8002f2c:	68f8      	ldr	r0, [r7, #12]
 8002f2e:	f003 fdb9 	bl	8006aa4 <HAL_I2C_Mem_Read>
	accel_bias_reg[0] = (int32_t) (((int16_t)calibData[0] << 8) | calibData[1]);
 8002f32:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002f36:	021b      	lsls	r3, r3, #8
 8002f38:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, YA_OFFSET_H, 1, &calibData[0], 2, i2c_timeout);
 8002f40:	2364      	movs	r3, #100	; 0x64
 8002f42:	9302      	str	r3, [sp, #8]
 8002f44:	2302      	movs	r3, #2
 8002f46:	9301      	str	r3, [sp, #4]
 8002f48:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002f4c:	9300      	str	r3, [sp, #0]
 8002f4e:	2301      	movs	r3, #1
 8002f50:	227a      	movs	r2, #122	; 0x7a
 8002f52:	21d0      	movs	r1, #208	; 0xd0
 8002f54:	68f8      	ldr	r0, [r7, #12]
 8002f56:	f003 fda5 	bl	8006aa4 <HAL_I2C_Mem_Read>
	accel_bias_reg[1] = (int32_t) (((int16_t)calibData[0] << 8) | calibData[1]);
 8002f5a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002f5e:	021b      	lsls	r3, r3, #8
 8002f60:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8002f64:	4313      	orrs	r3, r2
 8002f66:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ZA_OFFSET_H, 1, &calibData[0], 2, i2c_timeout);
 8002f68:	2364      	movs	r3, #100	; 0x64
 8002f6a:	9302      	str	r3, [sp, #8]
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	9301      	str	r3, [sp, #4]
 8002f70:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002f74:	9300      	str	r3, [sp, #0]
 8002f76:	2301      	movs	r3, #1
 8002f78:	227d      	movs	r2, #125	; 0x7d
 8002f7a:	21d0      	movs	r1, #208	; 0xd0
 8002f7c:	68f8      	ldr	r0, [r7, #12]
 8002f7e:	f003 fd91 	bl	8006aa4 <HAL_I2C_Mem_Read>
	accel_bias_reg[2] = (int32_t) (((int16_t)calibData[0] << 8) | calibData[1]);
 8002f82:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002f86:	021b      	lsls	r3, r3, #8
 8002f88:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	62fb      	str	r3, [r7, #44]	; 0x2c

	//Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
	uint32_t mask = 1uL;
 8002f90:	2301      	movs	r3, #1
 8002f92:	667b      	str	r3, [r7, #100]	; 0x64
	//Define array to hold mask bit for each accelerometer bias axis
	uint8_t mask_bit[3] = {0, 0, 0};
 8002f94:	4a0a      	ldr	r2, [pc, #40]	; (8002fc0 <calibrateMPU9250+0x6f8>)
 8002f96:	f107 0320 	add.w	r3, r7, #32
 8002f9a:	6812      	ldr	r2, [r2, #0]
 8002f9c:	4611      	mov	r1, r2
 8002f9e:	8019      	strh	r1, [r3, #0]
 8002fa0:	3302      	adds	r3, #2
 8002fa2:	0c12      	lsrs	r2, r2, #16
 8002fa4:	701a      	strb	r2, [r3, #0]

	for(ii = 0; ii < 3; ii++) {
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8002fac:	e022      	b.n	8002ff4 <calibrateMPU9250+0x72c>
 8002fae:	bf00      	nop
 8002fb0:	0800b0ec 	.word	0x0800b0ec
 8002fb4:	0800b100 	.word	0x0800b100
 8002fb8:	0800b114 	.word	0x0800b114
 8002fbc:	0800b03c 	.word	0x0800b03c
 8002fc0:	0800b164 	.word	0x0800b164
		//If temperature compensation bit is set, record that fact in mask_bit
		if((accel_bias_reg[ii] & mask)) mask_bit[ii] = 0x01;
 8002fc4:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	3380      	adds	r3, #128	; 0x80
 8002fcc:	443b      	add	r3, r7
 8002fce:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d006      	beq.n	8002fea <calibrateMPU9250+0x722>
 8002fdc:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002fe0:	3380      	adds	r3, #128	; 0x80
 8002fe2:	443b      	add	r3, r7
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f803 2c60 	strb.w	r2, [r3, #-96]
	for(ii = 0; ii < 3; ii++) {
 8002fea:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002fee:	3301      	adds	r3, #1
 8002ff0:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8002ff4:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d9e3      	bls.n	8002fc4 <calibrateMPU9250+0x6fc>
	}

	//Construct total accelerometer bias, including calculated average accelerometer bias from above
	accel_bias_reg[0] -= (accel_bias[0]/8); //Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
 8002ffc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003000:	2b00      	cmp	r3, #0
 8003002:	da00      	bge.n	8003006 <calibrateMPU9250+0x73e>
 8003004:	3307      	adds	r3, #7
 8003006:	10db      	asrs	r3, r3, #3
 8003008:	425b      	negs	r3, r3
 800300a:	4413      	add	r3, r2
 800300c:	627b      	str	r3, [r7, #36]	; 0x24
	accel_bias_reg[1] -= (accel_bias[1]/8);
 800300e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003012:	2b00      	cmp	r3, #0
 8003014:	da00      	bge.n	8003018 <calibrateMPU9250+0x750>
 8003016:	3307      	adds	r3, #7
 8003018:	10db      	asrs	r3, r3, #3
 800301a:	425b      	negs	r3, r3
 800301c:	4413      	add	r3, r2
 800301e:	62bb      	str	r3, [r7, #40]	; 0x28
	accel_bias_reg[2] -= (accel_bias[2]/8);
 8003020:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003024:	2b00      	cmp	r3, #0
 8003026:	da00      	bge.n	800302a <calibrateMPU9250+0x762>
 8003028:	3307      	adds	r3, #7
 800302a:	10db      	asrs	r3, r3, #3
 800302c:	425b      	negs	r3, r3
 800302e:	4413      	add	r3, r2
 8003030:	62fb      	str	r3, [r7, #44]	; 0x2c

	calibData[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 8003032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003034:	121b      	asrs	r3, r3, #8
 8003036:	b2db      	uxtb	r3, r3
 8003038:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	calibData[1] = (accel_bias_reg[0])      & 0xFF;
 800303c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303e:	b2db      	uxtb	r3, r3
 8003040:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	calibData[1] = calibData[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8003044:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8003048:	f897 3020 	ldrb.w	r3, [r7, #32]
 800304c:	4313      	orrs	r3, r2
 800304e:	b2db      	uxtb	r3, r3
 8003050:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	calibData[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 8003054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003056:	121b      	asrs	r3, r3, #8
 8003058:	b2db      	uxtb	r3, r3
 800305a:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	calibData[3] = (accel_bias_reg[1])      & 0xFF;
 800305e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003060:	b2db      	uxtb	r3, r3
 8003062:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	calibData[3] = calibData[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8003066:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 800306a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800306e:	4313      	orrs	r3, r2
 8003070:	b2db      	uxtb	r3, r3
 8003072:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	calibData[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 8003076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003078:	121b      	asrs	r3, r3, #8
 800307a:	b2db      	uxtb	r3, r3
 800307c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	calibData[5] = (accel_bias_reg[2])      & 0xFF;
 8003080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003082:	b2db      	uxtb	r3, r3
 8003084:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	calibData[5] = calibData[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8003088:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800308c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8003090:	4313      	orrs	r3, r2
 8003092:	b2db      	uxtb	r3, r3
 8003094:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

	//Push accelerometer biases to hardware registers
	writeData = calibData[0];
 8003098:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800309c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, XA_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 80030a0:	2364      	movs	r3, #100	; 0x64
 80030a2:	9302      	str	r3, [sp, #8]
 80030a4:	2301      	movs	r3, #1
 80030a6:	9301      	str	r3, [sp, #4]
 80030a8:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80030ac:	9300      	str	r3, [sp, #0]
 80030ae:	2301      	movs	r3, #1
 80030b0:	2277      	movs	r2, #119	; 0x77
 80030b2:	21d0      	movs	r1, #208	; 0xd0
 80030b4:	68f8      	ldr	r0, [r7, #12]
 80030b6:	f003 fbfb 	bl	80068b0 <HAL_I2C_Mem_Write>
	writeData = calibData[1];
 80030ba:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80030be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, XA_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 80030c2:	2364      	movs	r3, #100	; 0x64
 80030c4:	9302      	str	r3, [sp, #8]
 80030c6:	2301      	movs	r3, #1
 80030c8:	9301      	str	r3, [sp, #4]
 80030ca:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80030ce:	9300      	str	r3, [sp, #0]
 80030d0:	2301      	movs	r3, #1
 80030d2:	2278      	movs	r2, #120	; 0x78
 80030d4:	21d0      	movs	r1, #208	; 0xd0
 80030d6:	68f8      	ldr	r0, [r7, #12]
 80030d8:	f003 fbea 	bl	80068b0 <HAL_I2C_Mem_Write>
	writeData = calibData[2];
 80030dc:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80030e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, YA_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 80030e4:	2364      	movs	r3, #100	; 0x64
 80030e6:	9302      	str	r3, [sp, #8]
 80030e8:	2301      	movs	r3, #1
 80030ea:	9301      	str	r3, [sp, #4]
 80030ec:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80030f0:	9300      	str	r3, [sp, #0]
 80030f2:	2301      	movs	r3, #1
 80030f4:	227a      	movs	r2, #122	; 0x7a
 80030f6:	21d0      	movs	r1, #208	; 0xd0
 80030f8:	68f8      	ldr	r0, [r7, #12]
 80030fa:	f003 fbd9 	bl	80068b0 <HAL_I2C_Mem_Write>
	writeData = calibData[3];
 80030fe:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003102:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, YA_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 8003106:	2364      	movs	r3, #100	; 0x64
 8003108:	9302      	str	r3, [sp, #8]
 800310a:	2301      	movs	r3, #1
 800310c:	9301      	str	r3, [sp, #4]
 800310e:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8003112:	9300      	str	r3, [sp, #0]
 8003114:	2301      	movs	r3, #1
 8003116:	227b      	movs	r2, #123	; 0x7b
 8003118:	21d0      	movs	r1, #208	; 0xd0
 800311a:	68f8      	ldr	r0, [r7, #12]
 800311c:	f003 fbc8 	bl	80068b0 <HAL_I2C_Mem_Write>
	writeData = calibData[4];
 8003120:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8003124:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ZA_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 8003128:	2364      	movs	r3, #100	; 0x64
 800312a:	9302      	str	r3, [sp, #8]
 800312c:	2301      	movs	r3, #1
 800312e:	9301      	str	r3, [sp, #4]
 8003130:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8003134:	9300      	str	r3, [sp, #0]
 8003136:	2301      	movs	r3, #1
 8003138:	227d      	movs	r2, #125	; 0x7d
 800313a:	21d0      	movs	r1, #208	; 0xd0
 800313c:	68f8      	ldr	r0, [r7, #12]
 800313e:	f003 fbb7 	bl	80068b0 <HAL_I2C_Mem_Write>
	writeData = calibData[5];
 8003142:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003146:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ZA_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 800314a:	2364      	movs	r3, #100	; 0x64
 800314c:	9302      	str	r3, [sp, #8]
 800314e:	2301      	movs	r3, #1
 8003150:	9301      	str	r3, [sp, #4]
 8003152:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8003156:	9300      	str	r3, [sp, #0]
 8003158:	2301      	movs	r3, #1
 800315a:	227e      	movs	r2, #126	; 0x7e
 800315c:	21d0      	movs	r1, #208	; 0xd0
 800315e:	68f8      	ldr	r0, [r7, #12]
 8003160:	f003 fba6 	bl	80068b0 <HAL_I2C_Mem_Write>

	//Output scaled gyro biases for display in the main program
	dest2[0] = (float) accel_bias[0]/(float) accelsensitivity;
 8003164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003166:	4618      	mov	r0, r3
 8003168:	f7fd fd88 	bl	8000c7c <__aeabi_i2f>
 800316c:	4604      	mov	r4, r0
 800316e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8003172:	4618      	mov	r0, r3
 8003174:	f7fd fd7e 	bl	8000c74 <__aeabi_ui2f>
 8003178:	4603      	mov	r3, r0
 800317a:	4619      	mov	r1, r3
 800317c:	4620      	mov	r0, r4
 800317e:	f7fd fe85 	bl	8000e8c <__aeabi_fdiv>
 8003182:	4603      	mov	r3, r0
 8003184:	461a      	mov	r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	601a      	str	r2, [r3, #0]
	dest2[1] = (float) accel_bias[1]/(float) accelsensitivity;
 800318a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800318c:	4618      	mov	r0, r3
 800318e:	f7fd fd75 	bl	8000c7c <__aeabi_i2f>
 8003192:	4605      	mov	r5, r0
 8003194:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8003198:	4618      	mov	r0, r3
 800319a:	f7fd fd6b 	bl	8000c74 <__aeabi_ui2f>
 800319e:	4602      	mov	r2, r0
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	1d1c      	adds	r4, r3, #4
 80031a4:	4611      	mov	r1, r2
 80031a6:	4628      	mov	r0, r5
 80031a8:	f7fd fe70 	bl	8000e8c <__aeabi_fdiv>
 80031ac:	4603      	mov	r3, r0
 80031ae:	6023      	str	r3, [r4, #0]
	dest2[2] = (float) accel_bias[2]/(float) accelsensitivity;
 80031b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7fd fd62 	bl	8000c7c <__aeabi_i2f>
 80031b8:	4605      	mov	r5, r0
 80031ba:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80031be:	4618      	mov	r0, r3
 80031c0:	f7fd fd58 	bl	8000c74 <__aeabi_ui2f>
 80031c4:	4602      	mov	r2, r0
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f103 0408 	add.w	r4, r3, #8
 80031cc:	4611      	mov	r1, r2
 80031ce:	4628      	mov	r0, r5
 80031d0:	f7fd fe5c 	bl	8000e8c <__aeabi_fdiv>
 80031d4:	4603      	mov	r3, r0
 80031d6:	6023      	str	r3, [r4, #0]

	if(SerialDebugA){
		float accelBiasX = (float) accel_bias[0]/(float) accelsensitivity;
 80031d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031da:	4618      	mov	r0, r3
 80031dc:	f7fd fd4e 	bl	8000c7c <__aeabi_i2f>
 80031e0:	4604      	mov	r4, r0
 80031e2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7fd fd44 	bl	8000c74 <__aeabi_ui2f>
 80031ec:	4603      	mov	r3, r0
 80031ee:	4619      	mov	r1, r3
 80031f0:	4620      	mov	r0, r4
 80031f2:	f7fd fe4b 	bl	8000e8c <__aeabi_fdiv>
 80031f6:	4603      	mov	r3, r0
 80031f8:	663b      	str	r3, [r7, #96]	; 0x60
		float accelBiasY = (float) accel_bias[1]/(float) accelsensitivity;
 80031fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7fd fd3d 	bl	8000c7c <__aeabi_i2f>
 8003202:	4604      	mov	r4, r0
 8003204:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8003208:	4618      	mov	r0, r3
 800320a:	f7fd fd33 	bl	8000c74 <__aeabi_ui2f>
 800320e:	4603      	mov	r3, r0
 8003210:	4619      	mov	r1, r3
 8003212:	4620      	mov	r0, r4
 8003214:	f7fd fe3a 	bl	8000e8c <__aeabi_fdiv>
 8003218:	4603      	mov	r3, r0
 800321a:	65fb      	str	r3, [r7, #92]	; 0x5c
		float accelBiasZ = (float) accel_bias[2]/(float) accelsensitivity;
 800321c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800321e:	4618      	mov	r0, r3
 8003220:	f7fd fd2c 	bl	8000c7c <__aeabi_i2f>
 8003224:	4604      	mov	r4, r0
 8003226:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800322a:	4618      	mov	r0, r3
 800322c:	f7fd fd22 	bl	8000c74 <__aeabi_ui2f>
 8003230:	4603      	mov	r3, r0
 8003232:	4619      	mov	r1, r3
 8003234:	4620      	mov	r0, r4
 8003236:	f7fd fe29 	bl	8000e8c <__aeabi_fdiv>
 800323a:	4603      	mov	r3, r0
 800323c:	65bb      	str	r3, [r7, #88]	; 0x58

		printf("Accel bias X: %f\r\n", accelBiasX);
 800323e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8003240:	f7fd f8ea 	bl	8000418 <__aeabi_f2d>
 8003244:	4602      	mov	r2, r0
 8003246:	460b      	mov	r3, r1
 8003248:	480c      	ldr	r0, [pc, #48]	; (800327c <calibrateMPU9250+0x9b4>)
 800324a:	f006 fe75 	bl	8009f38 <iprintf>
		printf("Accel bias Y: %f\r\n", accelBiasY);
 800324e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8003250:	f7fd f8e2 	bl	8000418 <__aeabi_f2d>
 8003254:	4602      	mov	r2, r0
 8003256:	460b      	mov	r3, r1
 8003258:	4809      	ldr	r0, [pc, #36]	; (8003280 <calibrateMPU9250+0x9b8>)
 800325a:	f006 fe6d 	bl	8009f38 <iprintf>
		printf("Accel bias Z: %f\r\n", accelBiasZ);
 800325e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8003260:	f7fd f8da 	bl	8000418 <__aeabi_f2d>
 8003264:	4602      	mov	r2, r0
 8003266:	460b      	mov	r3, r1
 8003268:	4806      	ldr	r0, [pc, #24]	; (8003284 <calibrateMPU9250+0x9bc>)
 800326a:	f006 fe65 	bl	8009f38 <iprintf>

		printf("-------------------------\r\n");
 800326e:	4806      	ldr	r0, [pc, #24]	; (8003288 <calibrateMPU9250+0x9c0>)
 8003270:	f006 fee8 	bl	800a044 <puts>
	}
}
 8003274:	bf00      	nop
 8003276:	3780      	adds	r7, #128	; 0x80
 8003278:	46bd      	mov	sp, r7
 800327a:	bdb0      	pop	{r4, r5, r7, pc}
 800327c:	0800b128 	.word	0x0800b128
 8003280:	0800b13c 	.word	0x0800b13c
 8003284:	0800b150 	.word	0x0800b150
 8003288:	0800b03c 	.word	0x0800b03c
 800328c:	00000000 	.word	0x00000000

08003290 <MPU9250SelfTest>:


// Accelerometer and gyroscope self test; check calibration wrt factory settings
void MPU9250SelfTest(I2C_HandleTypeDef *I2Cx, float * destination) {
 8003290:	b5b0      	push	{r4, r5, r7, lr}
 8003292:	b0b0      	sub	sp, #192	; 0xc0
 8003294:	af04      	add	r7, sp, #16
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
	uint8_t writeData;

	uint8_t rawTestData[6] = {0, 0, 0, 0, 0, 0};
 800329a:	4aa2      	ldr	r2, [pc, #648]	; (8003524 <MPU9250SelfTest+0x294>)
 800329c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80032a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80032a4:	6018      	str	r0, [r3, #0]
 80032a6:	3304      	adds	r3, #4
 80032a8:	8019      	strh	r1, [r3, #0]
	uint8_t selfTest[6];
	int32_t gAvg[3] = {0}, aAvg[3] = {0}, aSTAvg[3] = {0}, gSTAvg[3] = {0};
 80032aa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80032ae:	2200      	movs	r2, #0
 80032b0:	601a      	str	r2, [r3, #0]
 80032b2:	605a      	str	r2, [r3, #4]
 80032b4:	609a      	str	r2, [r3, #8]
 80032b6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80032ba:	2200      	movs	r2, #0
 80032bc:	601a      	str	r2, [r3, #0]
 80032be:	605a      	str	r2, [r3, #4]
 80032c0:	609a      	str	r2, [r3, #8]
 80032c2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80032c6:	2200      	movs	r2, #0
 80032c8:	601a      	str	r2, [r3, #0]
 80032ca:	605a      	str	r2, [r3, #4]
 80032cc:	609a      	str	r2, [r3, #8]
 80032ce:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80032d2:	2200      	movs	r2, #0
 80032d4:	601a      	str	r2, [r3, #0]
 80032d6:	605a      	str	r2, [r3, #4]
 80032d8:	609a      	str	r2, [r3, #8]
	float factoryTrim[6];
	uint8_t FS = 0;
 80032da:	2300      	movs	r3, #0
 80032dc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

	writeData = 0x00;
 80032e0:	2300      	movs	r3, #0
 80032e2:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, SMPLRT_DIV, 1, &writeData, 1, i2c_timeout);// Set gyro sample rate to 1 kHz
 80032e6:	2364      	movs	r3, #100	; 0x64
 80032e8:	9302      	str	r3, [sp, #8]
 80032ea:	2301      	movs	r3, #1
 80032ec:	9301      	str	r3, [sp, #4]
 80032ee:	f107 037b 	add.w	r3, r7, #123	; 0x7b
 80032f2:	9300      	str	r3, [sp, #0]
 80032f4:	2301      	movs	r3, #1
 80032f6:	2219      	movs	r2, #25
 80032f8:	21d0      	movs	r1, #208	; 0xd0
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f003 fad8 	bl	80068b0 <HAL_I2C_Mem_Write>
	writeData = 0x02;
 8003300:	2302      	movs	r3, #2
 8003302:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, CONFIG, 1, &writeData, 1, i2c_timeout);// Set gyro sample rate to 1 kHz and DLPF to 92 Hz
 8003306:	2364      	movs	r3, #100	; 0x64
 8003308:	9302      	str	r3, [sp, #8]
 800330a:	2301      	movs	r3, #1
 800330c:	9301      	str	r3, [sp, #4]
 800330e:	f107 037b 	add.w	r3, r7, #123	; 0x7b
 8003312:	9300      	str	r3, [sp, #0]
 8003314:	2301      	movs	r3, #1
 8003316:	221a      	movs	r2, #26
 8003318:	21d0      	movs	r1, #208	; 0xd0
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f003 fac8 	bl	80068b0 <HAL_I2C_Mem_Write>
	writeData = FS<<3;
 8003320:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8003324:	00db      	lsls	r3, r3, #3
 8003326:	b2db      	uxtb	r3, r3
 8003328:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);// Set full scale range for the gyro to 250 dps
 800332c:	2364      	movs	r3, #100	; 0x64
 800332e:	9302      	str	r3, [sp, #8]
 8003330:	2301      	movs	r3, #1
 8003332:	9301      	str	r3, [sp, #4]
 8003334:	f107 037b 	add.w	r3, r7, #123	; 0x7b
 8003338:	9300      	str	r3, [sp, #0]
 800333a:	2301      	movs	r3, #1
 800333c:	221b      	movs	r2, #27
 800333e:	21d0      	movs	r1, #208	; 0xd0
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f003 fab5 	bl	80068b0 <HAL_I2C_Mem_Write>
	writeData = 0x02;
 8003346:	2302      	movs	r3, #2
 8003348:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG2, 1, &writeData, 1, i2c_timeout);// Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
 800334c:	2364      	movs	r3, #100	; 0x64
 800334e:	9302      	str	r3, [sp, #8]
 8003350:	2301      	movs	r3, #1
 8003352:	9301      	str	r3, [sp, #4]
 8003354:	f107 037b 	add.w	r3, r7, #123	; 0x7b
 8003358:	9300      	str	r3, [sp, #0]
 800335a:	2301      	movs	r3, #1
 800335c:	221d      	movs	r2, #29
 800335e:	21d0      	movs	r1, #208	; 0xd0
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f003 faa5 	bl	80068b0 <HAL_I2C_Mem_Write>
	writeData = FS<<3;
 8003366:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	b2db      	uxtb	r3, r3
 800336e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);// Set full scale range for the accelerometer to 2 g
 8003372:	2364      	movs	r3, #100	; 0x64
 8003374:	9302      	str	r3, [sp, #8]
 8003376:	2301      	movs	r3, #1
 8003378:	9301      	str	r3, [sp, #4]
 800337a:	f107 037b 	add.w	r3, r7, #123	; 0x7b
 800337e:	9300      	str	r3, [sp, #0]
 8003380:	2301      	movs	r3, #1
 8003382:	221c      	movs	r2, #28
 8003384:	21d0      	movs	r1, #208	; 0xd0
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f003 fa92 	bl	80068b0 <HAL_I2C_Mem_Write>

	//get average current values of gyro and acclerometer
	for( int ii = 0; ii < 200; ii++) {
 800338c:	2300      	movs	r3, #0
 800338e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003392:	e066      	b.n	8003462 <MPU9250SelfTest+0x1d2>

		HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ACCEL_XOUT_H, 1, &rawTestData[0], 6, i2c_timeout);// Read the six raw data registers into data array
 8003394:	2364      	movs	r3, #100	; 0x64
 8003396:	9302      	str	r3, [sp, #8]
 8003398:	2306      	movs	r3, #6
 800339a:	9301      	str	r3, [sp, #4]
 800339c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80033a0:	9300      	str	r3, [sp, #0]
 80033a2:	2301      	movs	r3, #1
 80033a4:	223b      	movs	r2, #59	; 0x3b
 80033a6:	21d0      	movs	r1, #208	; 0xd0
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f003 fb7b 	bl	8006aa4 <HAL_I2C_Mem_Read>
		aAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 80033ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033b0:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 80033b4:	0212      	lsls	r2, r2, #8
 80033b6:	b211      	sxth	r1, r2
 80033b8:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 80033bc:	b212      	sxth	r2, r2
 80033be:	430a      	orrs	r2, r1
 80033c0:	b212      	sxth	r2, r2
 80033c2:	4413      	add	r3, r2
 80033c4:	657b      	str	r3, [r7, #84]	; 0x54
		aAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]) ;
 80033c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033c8:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 80033cc:	0212      	lsls	r2, r2, #8
 80033ce:	b211      	sxth	r1, r2
 80033d0:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 80033d4:	b212      	sxth	r2, r2
 80033d6:	430a      	orrs	r2, r1
 80033d8:	b212      	sxth	r2, r2
 80033da:	4413      	add	r3, r2
 80033dc:	65bb      	str	r3, [r7, #88]	; 0x58
		aAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]) ;
 80033de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033e0:	f897 2078 	ldrb.w	r2, [r7, #120]	; 0x78
 80033e4:	0212      	lsls	r2, r2, #8
 80033e6:	b211      	sxth	r1, r2
 80033e8:	f897 2079 	ldrb.w	r2, [r7, #121]	; 0x79
 80033ec:	b212      	sxth	r2, r2
 80033ee:	430a      	orrs	r2, r1
 80033f0:	b212      	sxth	r2, r2
 80033f2:	4413      	add	r3, r2
 80033f4:	65fb      	str	r3, [r7, #92]	; 0x5c

		HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, GYRO_XOUT_H, 1, &rawTestData[0], 6, i2c_timeout);// Read the six raw data registers sequentially into data array
 80033f6:	2364      	movs	r3, #100	; 0x64
 80033f8:	9302      	str	r3, [sp, #8]
 80033fa:	2306      	movs	r3, #6
 80033fc:	9301      	str	r3, [sp, #4]
 80033fe:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003402:	9300      	str	r3, [sp, #0]
 8003404:	2301      	movs	r3, #1
 8003406:	2243      	movs	r2, #67	; 0x43
 8003408:	21d0      	movs	r1, #208	; 0xd0
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f003 fb4a 	bl	8006aa4 <HAL_I2C_Mem_Read>
		gAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 8003410:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003412:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 8003416:	0212      	lsls	r2, r2, #8
 8003418:	b211      	sxth	r1, r2
 800341a:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 800341e:	b212      	sxth	r2, r2
 8003420:	430a      	orrs	r2, r1
 8003422:	b212      	sxth	r2, r2
 8003424:	4413      	add	r3, r2
 8003426:	663b      	str	r3, [r7, #96]	; 0x60
		gAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]) ;
 8003428:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800342a:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 800342e:	0212      	lsls	r2, r2, #8
 8003430:	b211      	sxth	r1, r2
 8003432:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8003436:	b212      	sxth	r2, r2
 8003438:	430a      	orrs	r2, r1
 800343a:	b212      	sxth	r2, r2
 800343c:	4413      	add	r3, r2
 800343e:	667b      	str	r3, [r7, #100]	; 0x64
		gAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]) ;
 8003440:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003442:	f897 2078 	ldrb.w	r2, [r7, #120]	; 0x78
 8003446:	0212      	lsls	r2, r2, #8
 8003448:	b211      	sxth	r1, r2
 800344a:	f897 2079 	ldrb.w	r2, [r7, #121]	; 0x79
 800344e:	b212      	sxth	r2, r2
 8003450:	430a      	orrs	r2, r1
 8003452:	b212      	sxth	r2, r2
 8003454:	4413      	add	r3, r2
 8003456:	66bb      	str	r3, [r7, #104]	; 0x68
	for( int ii = 0; ii < 200; ii++) {
 8003458:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800345c:	3301      	adds	r3, #1
 800345e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003462:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003466:	2bc7      	cmp	r3, #199	; 0xc7
 8003468:	dd94      	ble.n	8003394 <MPU9250SelfTest+0x104>
	}

	//Get average of 200 values and store as average current readings
	for (int ii =0; ii < 3; ii++) {
 800346a:	2300      	movs	r3, #0
 800346c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003470:	e02c      	b.n	80034cc <MPU9250SelfTest+0x23c>
		aAvg[ii] /= 200;
 8003472:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	33b0      	adds	r3, #176	; 0xb0
 800347a:	443b      	add	r3, r7
 800347c:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8003480:	4a29      	ldr	r2, [pc, #164]	; (8003528 <MPU9250SelfTest+0x298>)
 8003482:	fb82 1203 	smull	r1, r2, r2, r3
 8003486:	1192      	asrs	r2, r2, #6
 8003488:	17db      	asrs	r3, r3, #31
 800348a:	1ad2      	subs	r2, r2, r3
 800348c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	33b0      	adds	r3, #176	; 0xb0
 8003494:	443b      	add	r3, r7
 8003496:	f843 2c5c 	str.w	r2, [r3, #-92]
		gAvg[ii] /= 200;
 800349a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	33b0      	adds	r3, #176	; 0xb0
 80034a2:	443b      	add	r3, r7
 80034a4:	f853 3c50 	ldr.w	r3, [r3, #-80]
 80034a8:	4a1f      	ldr	r2, [pc, #124]	; (8003528 <MPU9250SelfTest+0x298>)
 80034aa:	fb82 1203 	smull	r1, r2, r2, r3
 80034ae:	1192      	asrs	r2, r2, #6
 80034b0:	17db      	asrs	r3, r3, #31
 80034b2:	1ad2      	subs	r2, r2, r3
 80034b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	33b0      	adds	r3, #176	; 0xb0
 80034bc:	443b      	add	r3, r7
 80034be:	f843 2c50 	str.w	r2, [r3, #-80]
	for (int ii =0; ii < 3; ii++) {
 80034c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80034c6:	3301      	adds	r3, #1
 80034c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80034cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	ddce      	ble.n	8003472 <MPU9250SelfTest+0x1e2>
	}

	//Configure the accelerometer for self-test
	writeData = 0xE0;
 80034d4:	23e0      	movs	r3, #224	; 0xe0
 80034d6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);// Enable self test on all three axes and set accelerometer range to +/- 2 g
 80034da:	2364      	movs	r3, #100	; 0x64
 80034dc:	9302      	str	r3, [sp, #8]
 80034de:	2301      	movs	r3, #1
 80034e0:	9301      	str	r3, [sp, #4]
 80034e2:	f107 037b 	add.w	r3, r7, #123	; 0x7b
 80034e6:	9300      	str	r3, [sp, #0]
 80034e8:	2301      	movs	r3, #1
 80034ea:	221c      	movs	r2, #28
 80034ec:	21d0      	movs	r1, #208	; 0xd0
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f003 f9de 	bl	80068b0 <HAL_I2C_Mem_Write>
	writeData = 0xE0;
 80034f4:	23e0      	movs	r3, #224	; 0xe0
 80034f6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);// Enable self test on all three axes and set gyro range to +/- 250 degrees/s
 80034fa:	2364      	movs	r3, #100	; 0x64
 80034fc:	9302      	str	r3, [sp, #8]
 80034fe:	2301      	movs	r3, #1
 8003500:	9301      	str	r3, [sp, #4]
 8003502:	f107 037b 	add.w	r3, r7, #123	; 0x7b
 8003506:	9300      	str	r3, [sp, #0]
 8003508:	2301      	movs	r3, #1
 800350a:	221b      	movs	r2, #27
 800350c:	21d0      	movs	r1, #208	; 0xd0
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f003 f9ce 	bl	80068b0 <HAL_I2C_Mem_Write>
	HAL_Delay(25);  // Delay a while to let the device stabilize
 8003514:	2019      	movs	r0, #25
 8003516:	f002 f809 	bl	800552c <HAL_Delay>

	//get average self-test values of gyro and acclerometer
	for( int ii = 0; ii < 200; ii++) {
 800351a:	2300      	movs	r3, #0
 800351c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003520:	e06b      	b.n	80035fa <MPU9250SelfTest+0x36a>
 8003522:	bf00      	nop
 8003524:	0800b1e0 	.word	0x0800b1e0
 8003528:	51eb851f 	.word	0x51eb851f

		HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ACCEL_XOUT_H, 1, &rawTestData[0], 6, i2c_timeout);// Read the six raw data registers into data array
 800352c:	2364      	movs	r3, #100	; 0x64
 800352e:	9302      	str	r3, [sp, #8]
 8003530:	2306      	movs	r3, #6
 8003532:	9301      	str	r3, [sp, #4]
 8003534:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003538:	9300      	str	r3, [sp, #0]
 800353a:	2301      	movs	r3, #1
 800353c:	223b      	movs	r2, #59	; 0x3b
 800353e:	21d0      	movs	r1, #208	; 0xd0
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f003 faaf 	bl	8006aa4 <HAL_I2C_Mem_Read>
		aSTAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 8003546:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003548:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 800354c:	0212      	lsls	r2, r2, #8
 800354e:	b211      	sxth	r1, r2
 8003550:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 8003554:	b212      	sxth	r2, r2
 8003556:	430a      	orrs	r2, r1
 8003558:	b212      	sxth	r2, r2
 800355a:	4413      	add	r3, r2
 800355c:	64bb      	str	r3, [r7, #72]	; 0x48
		aSTAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]) ;
 800355e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003560:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 8003564:	0212      	lsls	r2, r2, #8
 8003566:	b211      	sxth	r1, r2
 8003568:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 800356c:	b212      	sxth	r2, r2
 800356e:	430a      	orrs	r2, r1
 8003570:	b212      	sxth	r2, r2
 8003572:	4413      	add	r3, r2
 8003574:	64fb      	str	r3, [r7, #76]	; 0x4c
		aSTAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]) ;
 8003576:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003578:	f897 2078 	ldrb.w	r2, [r7, #120]	; 0x78
 800357c:	0212      	lsls	r2, r2, #8
 800357e:	b211      	sxth	r1, r2
 8003580:	f897 2079 	ldrb.w	r2, [r7, #121]	; 0x79
 8003584:	b212      	sxth	r2, r2
 8003586:	430a      	orrs	r2, r1
 8003588:	b212      	sxth	r2, r2
 800358a:	4413      	add	r3, r2
 800358c:	653b      	str	r3, [r7, #80]	; 0x50

		HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, GYRO_XOUT_H, 1, &rawTestData[0], 6, i2c_timeout);// Read the six raw data registers sequentially into data array
 800358e:	2364      	movs	r3, #100	; 0x64
 8003590:	9302      	str	r3, [sp, #8]
 8003592:	2306      	movs	r3, #6
 8003594:	9301      	str	r3, [sp, #4]
 8003596:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800359a:	9300      	str	r3, [sp, #0]
 800359c:	2301      	movs	r3, #1
 800359e:	2243      	movs	r2, #67	; 0x43
 80035a0:	21d0      	movs	r1, #208	; 0xd0
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f003 fa7e 	bl	8006aa4 <HAL_I2C_Mem_Read>
		gSTAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 80035a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035aa:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 80035ae:	0212      	lsls	r2, r2, #8
 80035b0:	b211      	sxth	r1, r2
 80035b2:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 80035b6:	b212      	sxth	r2, r2
 80035b8:	430a      	orrs	r2, r1
 80035ba:	b212      	sxth	r2, r2
 80035bc:	4413      	add	r3, r2
 80035be:	63fb      	str	r3, [r7, #60]	; 0x3c
		gSTAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]) ;
 80035c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035c2:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 80035c6:	0212      	lsls	r2, r2, #8
 80035c8:	b211      	sxth	r1, r2
 80035ca:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 80035ce:	b212      	sxth	r2, r2
 80035d0:	430a      	orrs	r2, r1
 80035d2:	b212      	sxth	r2, r2
 80035d4:	4413      	add	r3, r2
 80035d6:	643b      	str	r3, [r7, #64]	; 0x40
		gSTAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]) ;
 80035d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035da:	f897 2078 	ldrb.w	r2, [r7, #120]	; 0x78
 80035de:	0212      	lsls	r2, r2, #8
 80035e0:	b211      	sxth	r1, r2
 80035e2:	f897 2079 	ldrb.w	r2, [r7, #121]	; 0x79
 80035e6:	b212      	sxth	r2, r2
 80035e8:	430a      	orrs	r2, r1
 80035ea:	b212      	sxth	r2, r2
 80035ec:	4413      	add	r3, r2
 80035ee:	647b      	str	r3, [r7, #68]	; 0x44
	for( int ii = 0; ii < 200; ii++) {
 80035f0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80035f4:	3301      	adds	r3, #1
 80035f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80035fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80035fe:	2bc7      	cmp	r3, #199	; 0xc7
 8003600:	dd94      	ble.n	800352c <MPU9250SelfTest+0x29c>
	}

	//Get average of 200 values and store as average self-test readings
	for (int ii =0; ii < 3; ii++) {
 8003602:	2300      	movs	r3, #0
 8003604:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003608:	e02c      	b.n	8003664 <MPU9250SelfTest+0x3d4>
		aSTAvg[ii] /= 200;
 800360a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	33b0      	adds	r3, #176	; 0xb0
 8003612:	443b      	add	r3, r7
 8003614:	f853 3c68 	ldr.w	r3, [r3, #-104]
 8003618:	4ad7      	ldr	r2, [pc, #860]	; (8003978 <MPU9250SelfTest+0x6e8>)
 800361a:	fb82 1203 	smull	r1, r2, r2, r3
 800361e:	1192      	asrs	r2, r2, #6
 8003620:	17db      	asrs	r3, r3, #31
 8003622:	1ad2      	subs	r2, r2, r3
 8003624:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	33b0      	adds	r3, #176	; 0xb0
 800362c:	443b      	add	r3, r7
 800362e:	f843 2c68 	str.w	r2, [r3, #-104]
		gSTAvg[ii] /= 200;
 8003632:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	33b0      	adds	r3, #176	; 0xb0
 800363a:	443b      	add	r3, r7
 800363c:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8003640:	4acd      	ldr	r2, [pc, #820]	; (8003978 <MPU9250SelfTest+0x6e8>)
 8003642:	fb82 1203 	smull	r1, r2, r2, r3
 8003646:	1192      	asrs	r2, r2, #6
 8003648:	17db      	asrs	r3, r3, #31
 800364a:	1ad2      	subs	r2, r2, r3
 800364c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	33b0      	adds	r3, #176	; 0xb0
 8003654:	443b      	add	r3, r7
 8003656:	f843 2c74 	str.w	r2, [r3, #-116]
	for (int ii =0; ii < 3; ii++) {
 800365a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800365e:	3301      	adds	r3, #1
 8003660:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003664:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003668:	2b02      	cmp	r3, #2
 800366a:	ddce      	ble.n	800360a <MPU9250SelfTest+0x37a>
	}

	//Configure the gyro and accelerometer for normal operation
	writeData = 0x00;
 800366c:	2300      	movs	r3, #0
 800366e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);
 8003672:	2364      	movs	r3, #100	; 0x64
 8003674:	9302      	str	r3, [sp, #8]
 8003676:	2301      	movs	r3, #1
 8003678:	9301      	str	r3, [sp, #4]
 800367a:	f107 037b 	add.w	r3, r7, #123	; 0x7b
 800367e:	9300      	str	r3, [sp, #0]
 8003680:	2301      	movs	r3, #1
 8003682:	221c      	movs	r2, #28
 8003684:	21d0      	movs	r1, #208	; 0xd0
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f003 f912 	bl	80068b0 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 800368c:	2300      	movs	r3, #0
 800368e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);
 8003692:	2364      	movs	r3, #100	; 0x64
 8003694:	9302      	str	r3, [sp, #8]
 8003696:	2301      	movs	r3, #1
 8003698:	9301      	str	r3, [sp, #4]
 800369a:	f107 037b 	add.w	r3, r7, #123	; 0x7b
 800369e:	9300      	str	r3, [sp, #0]
 80036a0:	2301      	movs	r3, #1
 80036a2:	221b      	movs	r2, #27
 80036a4:	21d0      	movs	r1, #208	; 0xd0
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f003 f902 	bl	80068b0 <HAL_I2C_Mem_Write>
	HAL_Delay(25);  // Delay a while to let the device stabilize
 80036ac:	2019      	movs	r0, #25
 80036ae:	f001 ff3d 	bl	800552c <HAL_Delay>

	//Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_X_ACCEL, 1, &selfTest[0], 1, i2c_timeout);// X-axis accel self-test results
 80036b2:	2364      	movs	r3, #100	; 0x64
 80036b4:	9302      	str	r3, [sp, #8]
 80036b6:	2301      	movs	r3, #1
 80036b8:	9301      	str	r3, [sp, #4]
 80036ba:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80036be:	9300      	str	r3, [sp, #0]
 80036c0:	2301      	movs	r3, #1
 80036c2:	220d      	movs	r2, #13
 80036c4:	21d0      	movs	r1, #208	; 0xd0
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f003 f9ec 	bl	8006aa4 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_Y_ACCEL, 1, &selfTest[1], 1, i2c_timeout);// Y-axis accel self-test results
 80036cc:	2364      	movs	r3, #100	; 0x64
 80036ce:	9302      	str	r3, [sp, #8]
 80036d0:	2301      	movs	r3, #1
 80036d2:	9301      	str	r3, [sp, #4]
 80036d4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80036d8:	3301      	adds	r3, #1
 80036da:	9300      	str	r3, [sp, #0]
 80036dc:	2301      	movs	r3, #1
 80036de:	220e      	movs	r2, #14
 80036e0:	21d0      	movs	r1, #208	; 0xd0
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f003 f9de 	bl	8006aa4 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_Z_ACCEL, 1, &selfTest[2], 1, i2c_timeout);// Z-axis accel self-test results
 80036e8:	2364      	movs	r3, #100	; 0x64
 80036ea:	9302      	str	r3, [sp, #8]
 80036ec:	2301      	movs	r3, #1
 80036ee:	9301      	str	r3, [sp, #4]
 80036f0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80036f4:	3302      	adds	r3, #2
 80036f6:	9300      	str	r3, [sp, #0]
 80036f8:	2301      	movs	r3, #1
 80036fa:	220f      	movs	r2, #15
 80036fc:	21d0      	movs	r1, #208	; 0xd0
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f003 f9d0 	bl	8006aa4 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_X_GYRO, 1, &selfTest[3], 1, i2c_timeout);// X-axis gyro self-test results
 8003704:	2364      	movs	r3, #100	; 0x64
 8003706:	9302      	str	r3, [sp, #8]
 8003708:	2301      	movs	r3, #1
 800370a:	9301      	str	r3, [sp, #4]
 800370c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003710:	3303      	adds	r3, #3
 8003712:	9300      	str	r3, [sp, #0]
 8003714:	2301      	movs	r3, #1
 8003716:	2200      	movs	r2, #0
 8003718:	21d0      	movs	r1, #208	; 0xd0
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f003 f9c2 	bl	8006aa4 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_Y_GYRO, 1, &selfTest[4], 1, i2c_timeout);// Y-axis gyro self-test results
 8003720:	2364      	movs	r3, #100	; 0x64
 8003722:	9302      	str	r3, [sp, #8]
 8003724:	2301      	movs	r3, #1
 8003726:	9301      	str	r3, [sp, #4]
 8003728:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800372c:	3304      	adds	r3, #4
 800372e:	9300      	str	r3, [sp, #0]
 8003730:	2301      	movs	r3, #1
 8003732:	2201      	movs	r2, #1
 8003734:	21d0      	movs	r1, #208	; 0xd0
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f003 f9b4 	bl	8006aa4 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_Z_GYRO, 1, &selfTest[5], 1, i2c_timeout);// Z-axis gyro self-test results
 800373c:	2364      	movs	r3, #100	; 0x64
 800373e:	9302      	str	r3, [sp, #8]
 8003740:	2301      	movs	r3, #1
 8003742:	9301      	str	r3, [sp, #4]
 8003744:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003748:	3305      	adds	r3, #5
 800374a:	9300      	str	r3, [sp, #0]
 800374c:	2301      	movs	r3, #1
 800374e:	2202      	movs	r2, #2
 8003750:	21d0      	movs	r1, #208	; 0xd0
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f003 f9a6 	bl	8006aa4 <HAL_I2C_Mem_Read>

	//Retrieve factory self-test value from self-test code reads
	factoryTrim[0] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[0] - 1.0) )); // FT[Xa] factory trim calculation
 8003758:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800375c:	f640 223c 	movw	r2, #2620	; 0xa3c
 8003760:	fa02 f303 	lsl.w	r3, r2, r3
 8003764:	4618      	mov	r0, r3
 8003766:	f7fd fa89 	bl	8000c7c <__aeabi_i2f>
 800376a:	4603      	mov	r3, r0
 800376c:	4618      	mov	r0, r3
 800376e:	f7fc fe53 	bl	8000418 <__aeabi_f2d>
 8003772:	4604      	mov	r4, r0
 8003774:	460d      	mov	r5, r1
 8003776:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800377a:	4618      	mov	r0, r3
 800377c:	f7fd fa7a 	bl	8000c74 <__aeabi_ui2f>
 8003780:	4603      	mov	r3, r0
 8003782:	4618      	mov	r0, r3
 8003784:	f7fc fe48 	bl	8000418 <__aeabi_f2d>
 8003788:	f04f 0200 	mov.w	r2, #0
 800378c:	4b7b      	ldr	r3, [pc, #492]	; (800397c <MPU9250SelfTest+0x6ec>)
 800378e:	f7fc fce3 	bl	8000158 <__aeabi_dsub>
 8003792:	4602      	mov	r2, r0
 8003794:	460b      	mov	r3, r1
 8003796:	a176      	add	r1, pc, #472	; (adr r1, 8003970 <MPU9250SelfTest+0x6e0>)
 8003798:	e9d1 0100 	ldrd	r0, r1, [r1]
 800379c:	f005 f94c 	bl	8008a38 <pow>
 80037a0:	4602      	mov	r2, r0
 80037a2:	460b      	mov	r3, r1
 80037a4:	4620      	mov	r0, r4
 80037a6:	4629      	mov	r1, r5
 80037a8:	f7fc fe8e 	bl	80004c8 <__aeabi_dmul>
 80037ac:	4602      	mov	r2, r0
 80037ae:	460b      	mov	r3, r1
 80037b0:	4610      	mov	r0, r2
 80037b2:	4619      	mov	r1, r3
 80037b4:	f7fd f958 	bl	8000a68 <__aeabi_d2f>
 80037b8:	4603      	mov	r3, r0
 80037ba:	627b      	str	r3, [r7, #36]	; 0x24
	factoryTrim[1] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[1] - 1.0) )); // FT[Ya] factory trim calculation
 80037bc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80037c0:	f640 223c 	movw	r2, #2620	; 0xa3c
 80037c4:	fa02 f303 	lsl.w	r3, r2, r3
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7fd fa57 	bl	8000c7c <__aeabi_i2f>
 80037ce:	4603      	mov	r3, r0
 80037d0:	4618      	mov	r0, r3
 80037d2:	f7fc fe21 	bl	8000418 <__aeabi_f2d>
 80037d6:	4604      	mov	r4, r0
 80037d8:	460d      	mov	r5, r1
 80037da:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80037de:	4618      	mov	r0, r3
 80037e0:	f7fd fa48 	bl	8000c74 <__aeabi_ui2f>
 80037e4:	4603      	mov	r3, r0
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7fc fe16 	bl	8000418 <__aeabi_f2d>
 80037ec:	f04f 0200 	mov.w	r2, #0
 80037f0:	4b62      	ldr	r3, [pc, #392]	; (800397c <MPU9250SelfTest+0x6ec>)
 80037f2:	f7fc fcb1 	bl	8000158 <__aeabi_dsub>
 80037f6:	4602      	mov	r2, r0
 80037f8:	460b      	mov	r3, r1
 80037fa:	a15d      	add	r1, pc, #372	; (adr r1, 8003970 <MPU9250SelfTest+0x6e0>)
 80037fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003800:	f005 f91a 	bl	8008a38 <pow>
 8003804:	4602      	mov	r2, r0
 8003806:	460b      	mov	r3, r1
 8003808:	4620      	mov	r0, r4
 800380a:	4629      	mov	r1, r5
 800380c:	f7fc fe5c 	bl	80004c8 <__aeabi_dmul>
 8003810:	4602      	mov	r2, r0
 8003812:	460b      	mov	r3, r1
 8003814:	4610      	mov	r0, r2
 8003816:	4619      	mov	r1, r3
 8003818:	f7fd f926 	bl	8000a68 <__aeabi_d2f>
 800381c:	4603      	mov	r3, r0
 800381e:	62bb      	str	r3, [r7, #40]	; 0x28
	factoryTrim[2] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[2] - 1.0) )); // FT[Za] factory trim calculation
 8003820:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8003824:	f640 223c 	movw	r2, #2620	; 0xa3c
 8003828:	fa02 f303 	lsl.w	r3, r2, r3
 800382c:	4618      	mov	r0, r3
 800382e:	f7fd fa25 	bl	8000c7c <__aeabi_i2f>
 8003832:	4603      	mov	r3, r0
 8003834:	4618      	mov	r0, r3
 8003836:	f7fc fdef 	bl	8000418 <__aeabi_f2d>
 800383a:	4604      	mov	r4, r0
 800383c:	460d      	mov	r5, r1
 800383e:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8003842:	4618      	mov	r0, r3
 8003844:	f7fd fa16 	bl	8000c74 <__aeabi_ui2f>
 8003848:	4603      	mov	r3, r0
 800384a:	4618      	mov	r0, r3
 800384c:	f7fc fde4 	bl	8000418 <__aeabi_f2d>
 8003850:	f04f 0200 	mov.w	r2, #0
 8003854:	4b49      	ldr	r3, [pc, #292]	; (800397c <MPU9250SelfTest+0x6ec>)
 8003856:	f7fc fc7f 	bl	8000158 <__aeabi_dsub>
 800385a:	4602      	mov	r2, r0
 800385c:	460b      	mov	r3, r1
 800385e:	a144      	add	r1, pc, #272	; (adr r1, 8003970 <MPU9250SelfTest+0x6e0>)
 8003860:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003864:	f005 f8e8 	bl	8008a38 <pow>
 8003868:	4602      	mov	r2, r0
 800386a:	460b      	mov	r3, r1
 800386c:	4620      	mov	r0, r4
 800386e:	4629      	mov	r1, r5
 8003870:	f7fc fe2a 	bl	80004c8 <__aeabi_dmul>
 8003874:	4602      	mov	r2, r0
 8003876:	460b      	mov	r3, r1
 8003878:	4610      	mov	r0, r2
 800387a:	4619      	mov	r1, r3
 800387c:	f7fd f8f4 	bl	8000a68 <__aeabi_d2f>
 8003880:	4603      	mov	r3, r0
 8003882:	62fb      	str	r3, [r7, #44]	; 0x2c
	factoryTrim[3] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[3] - 1.0) )); // FT[Xg] factory trim calculation
 8003884:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8003888:	f640 223c 	movw	r2, #2620	; 0xa3c
 800388c:	fa02 f303 	lsl.w	r3, r2, r3
 8003890:	4618      	mov	r0, r3
 8003892:	f7fd f9f3 	bl	8000c7c <__aeabi_i2f>
 8003896:	4603      	mov	r3, r0
 8003898:	4618      	mov	r0, r3
 800389a:	f7fc fdbd 	bl	8000418 <__aeabi_f2d>
 800389e:	4604      	mov	r4, r0
 80038a0:	460d      	mov	r5, r1
 80038a2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7fd f9e4 	bl	8000c74 <__aeabi_ui2f>
 80038ac:	4603      	mov	r3, r0
 80038ae:	4618      	mov	r0, r3
 80038b0:	f7fc fdb2 	bl	8000418 <__aeabi_f2d>
 80038b4:	f04f 0200 	mov.w	r2, #0
 80038b8:	4b30      	ldr	r3, [pc, #192]	; (800397c <MPU9250SelfTest+0x6ec>)
 80038ba:	f7fc fc4d 	bl	8000158 <__aeabi_dsub>
 80038be:	4602      	mov	r2, r0
 80038c0:	460b      	mov	r3, r1
 80038c2:	a12b      	add	r1, pc, #172	; (adr r1, 8003970 <MPU9250SelfTest+0x6e0>)
 80038c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80038c8:	f005 f8b6 	bl	8008a38 <pow>
 80038cc:	4602      	mov	r2, r0
 80038ce:	460b      	mov	r3, r1
 80038d0:	4620      	mov	r0, r4
 80038d2:	4629      	mov	r1, r5
 80038d4:	f7fc fdf8 	bl	80004c8 <__aeabi_dmul>
 80038d8:	4602      	mov	r2, r0
 80038da:	460b      	mov	r3, r1
 80038dc:	4610      	mov	r0, r2
 80038de:	4619      	mov	r1, r3
 80038e0:	f7fd f8c2 	bl	8000a68 <__aeabi_d2f>
 80038e4:	4603      	mov	r3, r0
 80038e6:	633b      	str	r3, [r7, #48]	; 0x30
	factoryTrim[4] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[4] - 1.0) )); // FT[Yg] factory trim calculation
 80038e8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80038ec:	f640 223c 	movw	r2, #2620	; 0xa3c
 80038f0:	fa02 f303 	lsl.w	r3, r2, r3
 80038f4:	4618      	mov	r0, r3
 80038f6:	f7fd f9c1 	bl	8000c7c <__aeabi_i2f>
 80038fa:	4603      	mov	r3, r0
 80038fc:	4618      	mov	r0, r3
 80038fe:	f7fc fd8b 	bl	8000418 <__aeabi_f2d>
 8003902:	4604      	mov	r4, r0
 8003904:	460d      	mov	r5, r1
 8003906:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 800390a:	4618      	mov	r0, r3
 800390c:	f7fd f9b2 	bl	8000c74 <__aeabi_ui2f>
 8003910:	4603      	mov	r3, r0
 8003912:	4618      	mov	r0, r3
 8003914:	f7fc fd80 	bl	8000418 <__aeabi_f2d>
 8003918:	f04f 0200 	mov.w	r2, #0
 800391c:	4b17      	ldr	r3, [pc, #92]	; (800397c <MPU9250SelfTest+0x6ec>)
 800391e:	f7fc fc1b 	bl	8000158 <__aeabi_dsub>
 8003922:	4602      	mov	r2, r0
 8003924:	460b      	mov	r3, r1
 8003926:	a112      	add	r1, pc, #72	; (adr r1, 8003970 <MPU9250SelfTest+0x6e0>)
 8003928:	e9d1 0100 	ldrd	r0, r1, [r1]
 800392c:	f005 f884 	bl	8008a38 <pow>
 8003930:	4602      	mov	r2, r0
 8003932:	460b      	mov	r3, r1
 8003934:	4620      	mov	r0, r4
 8003936:	4629      	mov	r1, r5
 8003938:	f7fc fdc6 	bl	80004c8 <__aeabi_dmul>
 800393c:	4602      	mov	r2, r0
 800393e:	460b      	mov	r3, r1
 8003940:	4610      	mov	r0, r2
 8003942:	4619      	mov	r1, r3
 8003944:	f7fd f890 	bl	8000a68 <__aeabi_d2f>
 8003948:	4603      	mov	r3, r0
 800394a:	637b      	str	r3, [r7, #52]	; 0x34
	factoryTrim[5] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[5] - 1.0) )); // FT[Zg] factory trim calculation
 800394c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8003950:	f640 223c 	movw	r2, #2620	; 0xa3c
 8003954:	fa02 f303 	lsl.w	r3, r2, r3
 8003958:	4618      	mov	r0, r3
 800395a:	f7fd f98f 	bl	8000c7c <__aeabi_i2f>
 800395e:	4603      	mov	r3, r0
 8003960:	4618      	mov	r0, r3
 8003962:	f7fc fd59 	bl	8000418 <__aeabi_f2d>
 8003966:	4604      	mov	r4, r0
 8003968:	e00a      	b.n	8003980 <MPU9250SelfTest+0x6f0>
 800396a:	bf00      	nop
 800396c:	f3af 8000 	nop.w
 8003970:	c28f5c29 	.word	0xc28f5c29
 8003974:	3ff028f5 	.word	0x3ff028f5
 8003978:	51eb851f 	.word	0x51eb851f
 800397c:	3ff00000 	.word	0x3ff00000
 8003980:	460d      	mov	r5, r1
 8003982:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8003986:	4618      	mov	r0, r3
 8003988:	f7fd f974 	bl	8000c74 <__aeabi_ui2f>
 800398c:	4603      	mov	r3, r0
 800398e:	4618      	mov	r0, r3
 8003990:	f7fc fd42 	bl	8000418 <__aeabi_f2d>
 8003994:	f04f 0200 	mov.w	r2, #0
 8003998:	4bdb      	ldr	r3, [pc, #876]	; (8003d08 <MPU9250SelfTest+0xa78>)
 800399a:	f7fc fbdd 	bl	8000158 <__aeabi_dsub>
 800399e:	4602      	mov	r2, r0
 80039a0:	460b      	mov	r3, r1
 80039a2:	a1d7      	add	r1, pc, #860	; (adr r1, 8003d00 <MPU9250SelfTest+0xa70>)
 80039a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80039a8:	f005 f846 	bl	8008a38 <pow>
 80039ac:	4602      	mov	r2, r0
 80039ae:	460b      	mov	r3, r1
 80039b0:	4620      	mov	r0, r4
 80039b2:	4629      	mov	r1, r5
 80039b4:	f7fc fd88 	bl	80004c8 <__aeabi_dmul>
 80039b8:	4602      	mov	r2, r0
 80039ba:	460b      	mov	r3, r1
 80039bc:	4610      	mov	r0, r2
 80039be:	4619      	mov	r1, r3
 80039c0:	f7fd f852 	bl	8000a68 <__aeabi_d2f>
 80039c4:	4603      	mov	r3, r0
 80039c6:	63bb      	str	r3, [r7, #56]	; 0x38

	uint32_t testResults[6];

	//Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
	//To get percent, must multiply by 100
	for (int i = 0; i < 3; i++) {
 80039c8:	2300      	movs	r3, #0
 80039ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80039ce:	e092      	b.n	8003af6 <MPU9250SelfTest+0x866>
		testResults[i]   = 100.0*((float)(aSTAvg[i] - aAvg[i]))/factoryTrim[i] - 100.;   // Report percent differences
 80039d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	33b0      	adds	r3, #176	; 0xb0
 80039d8:	443b      	add	r3, r7
 80039da:	f853 2c68 	ldr.w	r2, [r3, #-104]
 80039de:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	33b0      	adds	r3, #176	; 0xb0
 80039e6:	443b      	add	r3, r7
 80039e8:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7fd f944 	bl	8000c7c <__aeabi_i2f>
 80039f4:	4603      	mov	r3, r0
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7fc fd0e 	bl	8000418 <__aeabi_f2d>
 80039fc:	f04f 0200 	mov.w	r2, #0
 8003a00:	4bc2      	ldr	r3, [pc, #776]	; (8003d0c <MPU9250SelfTest+0xa7c>)
 8003a02:	f7fc fd61 	bl	80004c8 <__aeabi_dmul>
 8003a06:	4602      	mov	r2, r0
 8003a08:	460b      	mov	r3, r1
 8003a0a:	4614      	mov	r4, r2
 8003a0c:	461d      	mov	r5, r3
 8003a0e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	33b0      	adds	r3, #176	; 0xb0
 8003a16:	443b      	add	r3, r7
 8003a18:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7fc fcfb 	bl	8000418 <__aeabi_f2d>
 8003a22:	4602      	mov	r2, r0
 8003a24:	460b      	mov	r3, r1
 8003a26:	4620      	mov	r0, r4
 8003a28:	4629      	mov	r1, r5
 8003a2a:	f7fc fe77 	bl	800071c <__aeabi_ddiv>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	460b      	mov	r3, r1
 8003a32:	4610      	mov	r0, r2
 8003a34:	4619      	mov	r1, r3
 8003a36:	f04f 0200 	mov.w	r2, #0
 8003a3a:	4bb4      	ldr	r3, [pc, #720]	; (8003d0c <MPU9250SelfTest+0xa7c>)
 8003a3c:	f7fc fb8c 	bl	8000158 <__aeabi_dsub>
 8003a40:	4602      	mov	r2, r0
 8003a42:	460b      	mov	r3, r1
 8003a44:	4610      	mov	r0, r2
 8003a46:	4619      	mov	r1, r3
 8003a48:	f7fc ffee 	bl	8000a28 <__aeabi_d2uiz>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	33b0      	adds	r3, #176	; 0xb0
 8003a56:	443b      	add	r3, r7
 8003a58:	f843 2ca4 	str.w	r2, [r3, #-164]
		testResults[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3] - 100.; // Report percent differences
 8003a5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	33b0      	adds	r3, #176	; 0xb0
 8003a64:	443b      	add	r3, r7
 8003a66:	f853 2c74 	ldr.w	r2, [r3, #-116]
 8003a6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	33b0      	adds	r3, #176	; 0xb0
 8003a72:	443b      	add	r3, r7
 8003a74:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7fd f8fe 	bl	8000c7c <__aeabi_i2f>
 8003a80:	4603      	mov	r3, r0
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7fc fcc8 	bl	8000418 <__aeabi_f2d>
 8003a88:	f04f 0200 	mov.w	r2, #0
 8003a8c:	4b9f      	ldr	r3, [pc, #636]	; (8003d0c <MPU9250SelfTest+0xa7c>)
 8003a8e:	f7fc fd1b 	bl	80004c8 <__aeabi_dmul>
 8003a92:	4602      	mov	r2, r0
 8003a94:	460b      	mov	r3, r1
 8003a96:	4614      	mov	r4, r2
 8003a98:	461d      	mov	r5, r3
 8003a9a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a9e:	3303      	adds	r3, #3
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	33b0      	adds	r3, #176	; 0xb0
 8003aa4:	443b      	add	r3, r7
 8003aa6:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7fc fcb4 	bl	8000418 <__aeabi_f2d>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	4620      	mov	r0, r4
 8003ab6:	4629      	mov	r1, r5
 8003ab8:	f7fc fe30 	bl	800071c <__aeabi_ddiv>
 8003abc:	4602      	mov	r2, r0
 8003abe:	460b      	mov	r3, r1
 8003ac0:	4610      	mov	r0, r2
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	f04f 0200 	mov.w	r2, #0
 8003ac8:	4b90      	ldr	r3, [pc, #576]	; (8003d0c <MPU9250SelfTest+0xa7c>)
 8003aca:	f7fc fb45 	bl	8000158 <__aeabi_dsub>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	4610      	mov	r0, r2
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ada:	1cdc      	adds	r4, r3, #3
 8003adc:	f7fc ffa4 	bl	8000a28 <__aeabi_d2uiz>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	00a3      	lsls	r3, r4, #2
 8003ae4:	33b0      	adds	r3, #176	; 0xb0
 8003ae6:	443b      	add	r3, r7
 8003ae8:	f843 2ca4 	str.w	r2, [r3, #-164]
	for (int i = 0; i < 3; i++) {
 8003aec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003af0:	3301      	adds	r3, #1
 8003af2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003af6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	f77f af68 	ble.w	80039d0 <MPU9250SelfTest+0x740>
	}

	if(SerialDebugA){
		float testResultAccelX = testResults[0];
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7fd f8b6 	bl	8000c74 <__aeabi_ui2f>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		float testResultAccelY = testResults[1];
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	4618      	mov	r0, r3
 8003b12:	f7fd f8af 	bl	8000c74 <__aeabi_ui2f>
 8003b16:	4603      	mov	r3, r0
 8003b18:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		float testResultAccelZ = testResults[2];
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7fd f8a8 	bl	8000c74 <__aeabi_ui2f>
 8003b24:	4603      	mov	r3, r0
 8003b26:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		float testResultGyroX = testResults[3];
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f7fd f8a1 	bl	8000c74 <__aeabi_ui2f>
 8003b32:	4603      	mov	r3, r0
 8003b34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		float testResultGyroY = testResults[4];
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7fd f89a 	bl	8000c74 <__aeabi_ui2f>
 8003b40:	4603      	mov	r3, r0
 8003b42:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		float testResultGyroZ = testResults[5];
 8003b46:	6a3b      	ldr	r3, [r7, #32]
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f7fd f893 	bl	8000c74 <__aeabi_ui2f>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	67fb      	str	r3, [r7, #124]	; 0x7c

		printf("Accel Test X: %f\r\n", testResultAccelX);
 8003b52:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8003b56:	f7fc fc5f 	bl	8000418 <__aeabi_f2d>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	486c      	ldr	r0, [pc, #432]	; (8003d10 <MPU9250SelfTest+0xa80>)
 8003b60:	f006 f9ea 	bl	8009f38 <iprintf>
		printf("Accel Test Y: %f\r\n", testResultAccelY);
 8003b64:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8003b68:	f7fc fc56 	bl	8000418 <__aeabi_f2d>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	460b      	mov	r3, r1
 8003b70:	4868      	ldr	r0, [pc, #416]	; (8003d14 <MPU9250SelfTest+0xa84>)
 8003b72:	f006 f9e1 	bl	8009f38 <iprintf>
		printf("Accel Test Z: %f\r\n", testResultAccelZ);
 8003b76:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8003b7a:	f7fc fc4d 	bl	8000418 <__aeabi_f2d>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	460b      	mov	r3, r1
 8003b82:	4865      	ldr	r0, [pc, #404]	; (8003d18 <MPU9250SelfTest+0xa88>)
 8003b84:	f006 f9d8 	bl	8009f38 <iprintf>
		printf("Gyro Test X: %f\r\n", testResultGyroX);
 8003b88:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8003b8c:	f7fc fc44 	bl	8000418 <__aeabi_f2d>
 8003b90:	4602      	mov	r2, r0
 8003b92:	460b      	mov	r3, r1
 8003b94:	4861      	ldr	r0, [pc, #388]	; (8003d1c <MPU9250SelfTest+0xa8c>)
 8003b96:	f006 f9cf 	bl	8009f38 <iprintf>
		printf("Gyro Test Y: %f\r\n", testResultGyroY);
 8003b9a:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8003b9e:	f7fc fc3b 	bl	8000418 <__aeabi_f2d>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	485e      	ldr	r0, [pc, #376]	; (8003d20 <MPU9250SelfTest+0xa90>)
 8003ba8:	f006 f9c6 	bl	8009f38 <iprintf>
		printf("Gyro Test Z: %f\r\n", testResultGyroZ);
 8003bac:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8003bae:	f7fc fc33 	bl	8000418 <__aeabi_f2d>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	460b      	mov	r3, r1
 8003bb6:	485b      	ldr	r0, [pc, #364]	; (8003d24 <MPU9250SelfTest+0xa94>)
 8003bb8:	f006 f9be 	bl	8009f38 <iprintf>
		printf("-------------------------\r\n");
 8003bbc:	485a      	ldr	r0, [pc, #360]	; (8003d28 <MPU9250SelfTest+0xa98>)
 8003bbe:	f006 fa41 	bl	800a044 <puts>
	}

   for (int i = 0; i < 3; i++) {
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003bc8:	e090      	b.n	8003cec <MPU9250SelfTest+0xa5c>
     destination[i]   = 100.0*((float)(aSTAvg[i] - aAvg[i]))/factoryTrim[i] - 100.;   // Report percent differences
 8003bca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	33b0      	adds	r3, #176	; 0xb0
 8003bd2:	443b      	add	r3, r7
 8003bd4:	f853 2c68 	ldr.w	r2, [r3, #-104]
 8003bd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	33b0      	adds	r3, #176	; 0xb0
 8003be0:	443b      	add	r3, r7
 8003be2:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	4618      	mov	r0, r3
 8003bea:	f7fd f847 	bl	8000c7c <__aeabi_i2f>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f7fc fc11 	bl	8000418 <__aeabi_f2d>
 8003bf6:	f04f 0200 	mov.w	r2, #0
 8003bfa:	4b44      	ldr	r3, [pc, #272]	; (8003d0c <MPU9250SelfTest+0xa7c>)
 8003bfc:	f7fc fc64 	bl	80004c8 <__aeabi_dmul>
 8003c00:	4602      	mov	r2, r0
 8003c02:	460b      	mov	r3, r1
 8003c04:	4614      	mov	r4, r2
 8003c06:	461d      	mov	r5, r3
 8003c08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	33b0      	adds	r3, #176	; 0xb0
 8003c10:	443b      	add	r3, r7
 8003c12:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 8003c16:	4618      	mov	r0, r3
 8003c18:	f7fc fbfe 	bl	8000418 <__aeabi_f2d>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	460b      	mov	r3, r1
 8003c20:	4620      	mov	r0, r4
 8003c22:	4629      	mov	r1, r5
 8003c24:	f7fc fd7a 	bl	800071c <__aeabi_ddiv>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	460b      	mov	r3, r1
 8003c2c:	4610      	mov	r0, r2
 8003c2e:	4619      	mov	r1, r3
 8003c30:	f04f 0200 	mov.w	r2, #0
 8003c34:	4b35      	ldr	r3, [pc, #212]	; (8003d0c <MPU9250SelfTest+0xa7c>)
 8003c36:	f7fc fa8f 	bl	8000158 <__aeabi_dsub>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	4610      	mov	r0, r2
 8003c40:	4619      	mov	r1, r3
 8003c42:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	683a      	ldr	r2, [r7, #0]
 8003c4a:	18d4      	adds	r4, r2, r3
 8003c4c:	f7fc ff0c 	bl	8000a68 <__aeabi_d2f>
 8003c50:	4603      	mov	r3, r0
 8003c52:	6023      	str	r3, [r4, #0]
     destination[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3] - 100.; // Report percent differences
 8003c54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	33b0      	adds	r3, #176	; 0xb0
 8003c5c:	443b      	add	r3, r7
 8003c5e:	f853 2c74 	ldr.w	r2, [r3, #-116]
 8003c62:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	33b0      	adds	r3, #176	; 0xb0
 8003c6a:	443b      	add	r3, r7
 8003c6c:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7fd f802 	bl	8000c7c <__aeabi_i2f>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f7fc fbcc 	bl	8000418 <__aeabi_f2d>
 8003c80:	f04f 0200 	mov.w	r2, #0
 8003c84:	4b21      	ldr	r3, [pc, #132]	; (8003d0c <MPU9250SelfTest+0xa7c>)
 8003c86:	f7fc fc1f 	bl	80004c8 <__aeabi_dmul>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	4614      	mov	r4, r2
 8003c90:	461d      	mov	r5, r3
 8003c92:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c96:	3303      	adds	r3, #3
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	33b0      	adds	r3, #176	; 0xb0
 8003c9c:	443b      	add	r3, r7
 8003c9e:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f7fc fbb8 	bl	8000418 <__aeabi_f2d>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	460b      	mov	r3, r1
 8003cac:	4620      	mov	r0, r4
 8003cae:	4629      	mov	r1, r5
 8003cb0:	f7fc fd34 	bl	800071c <__aeabi_ddiv>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	460b      	mov	r3, r1
 8003cb8:	4610      	mov	r0, r2
 8003cba:	4619      	mov	r1, r3
 8003cbc:	f04f 0200 	mov.w	r2, #0
 8003cc0:	4b12      	ldr	r3, [pc, #72]	; (8003d0c <MPU9250SelfTest+0xa7c>)
 8003cc2:	f7fc fa49 	bl	8000158 <__aeabi_dsub>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	460b      	mov	r3, r1
 8003cca:	4610      	mov	r0, r2
 8003ccc:	4619      	mov	r1, r3
 8003cce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003cd2:	3303      	adds	r3, #3
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	683a      	ldr	r2, [r7, #0]
 8003cd8:	18d4      	adds	r4, r2, r3
 8003cda:	f7fc fec5 	bl	8000a68 <__aeabi_d2f>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	6023      	str	r3, [r4, #0]
   for (int i = 0; i < 3; i++) {
 8003ce2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003cec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	f77f af6a 	ble.w	8003bca <MPU9250SelfTest+0x93a>
   }
}
 8003cf6:	bf00      	nop
 8003cf8:	bf00      	nop
 8003cfa:	37b0      	adds	r7, #176	; 0xb0
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bdb0      	pop	{r4, r5, r7, pc}
 8003d00:	c28f5c29 	.word	0xc28f5c29
 8003d04:	3ff028f5 	.word	0x3ff028f5
 8003d08:	3ff00000 	.word	0x3ff00000
 8003d0c:	40590000 	.word	0x40590000
 8003d10:	0800b168 	.word	0x0800b168
 8003d14:	0800b17c 	.word	0x0800b17c
 8003d18:	0800b190 	.word	0x0800b190
 8003d1c:	0800b1a4 	.word	0x0800b1a4
 8003d20:	0800b1b8 	.word	0x0800b1b8
 8003d24:	0800b1cc 	.word	0x0800b1cc
 8003d28:	0800b03c 	.word	0x0800b03c

08003d2c <QuaternionUpdate>:

void QuaternionUpdate(float ax, float ay, float az, float gx, float gy, float gz, float mx, float my, float mz){
 8003d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d2e:	b0ad      	sub	sp, #180	; 0xb4
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	607a      	str	r2, [r7, #4]
 8003d38:	603b      	str	r3, [r7, #0]
    float q1 = q[0], q2 = q[1], q3 = q[2], q4 = q[3];   // short name local variable for readability
 8003d3a:	4b8a      	ldr	r3, [pc, #552]	; (8003f64 <QuaternionUpdate+0x238>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003d42:	4b88      	ldr	r3, [pc, #544]	; (8003f64 <QuaternionUpdate+0x238>)
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003d4a:	4b86      	ldr	r3, [pc, #536]	; (8003f64 <QuaternionUpdate+0x238>)
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003d52:	4b84      	ldr	r3, [pc, #528]	; (8003f64 <QuaternionUpdate+0x238>)
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    float _2q1my;
    float _2q1mz;
    float _2q2mx;
    float _4bx;
    float _4bz;
    float _2q1 = 2.0f * q1;
 8003d5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d5e:	4619      	mov	r1, r3
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7fc fed7 	bl	8000b14 <__addsf3>
 8003d66:	4603      	mov	r3, r0
 8003d68:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    float _2q2 = 2.0f * q2;
 8003d6c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003d70:	4619      	mov	r1, r3
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7fc fece 	bl	8000b14 <__addsf3>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    float _2q3 = 2.0f * q3;
 8003d7e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003d82:	4619      	mov	r1, r3
 8003d84:	4618      	mov	r0, r3
 8003d86:	f7fc fec5 	bl	8000b14 <__addsf3>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    float _2q4 = 2.0f * q4;
 8003d90:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003d94:	4619      	mov	r1, r3
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7fc febc 	bl	8000b14 <__addsf3>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    float _2q1q3 = 2.0f * q1 * q3;
 8003da2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003da6:	4619      	mov	r1, r3
 8003da8:	4618      	mov	r0, r3
 8003daa:	f7fc feb3 	bl	8000b14 <__addsf3>
 8003dae:	4603      	mov	r3, r0
 8003db0:	4619      	mov	r1, r3
 8003db2:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8003db6:	f7fc ffb5 	bl	8000d24 <__aeabi_fmul>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float _2q3q4 = 2.0f * q3 * q4;
 8003dc0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f7fc fea4 	bl	8000b14 <__addsf3>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	4619      	mov	r1, r3
 8003dd0:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8003dd4:	f7fc ffa6 	bl	8000d24 <__aeabi_fmul>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float q1q1 = q1 * q1;
 8003dde:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8003de2:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8003de6:	f7fc ff9d 	bl	8000d24 <__aeabi_fmul>
 8003dea:	4603      	mov	r3, r0
 8003dec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    float q1q2 = q1 * q2;
 8003df0:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8003df4:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8003df8:	f7fc ff94 	bl	8000d24 <__aeabi_fmul>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float q1q3 = q1 * q3;
 8003e02:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003e06:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8003e0a:	f7fc ff8b 	bl	8000d24 <__aeabi_fmul>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	67fb      	str	r3, [r7, #124]	; 0x7c
    float q1q4 = q1 * q4;
 8003e12:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8003e16:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8003e1a:	f7fc ff83 	bl	8000d24 <__aeabi_fmul>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	67bb      	str	r3, [r7, #120]	; 0x78
    float q2q2 = q2 * q2;
 8003e22:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8003e26:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8003e2a:	f7fc ff7b 	bl	8000d24 <__aeabi_fmul>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	677b      	str	r3, [r7, #116]	; 0x74
    float q2q3 = q2 * q3;
 8003e32:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003e36:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8003e3a:	f7fc ff73 	bl	8000d24 <__aeabi_fmul>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	673b      	str	r3, [r7, #112]	; 0x70
    float q2q4 = q2 * q4;
 8003e42:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8003e46:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8003e4a:	f7fc ff6b 	bl	8000d24 <__aeabi_fmul>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	66fb      	str	r3, [r7, #108]	; 0x6c
    float q3q3 = q3 * q3;
 8003e52:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003e56:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8003e5a:	f7fc ff63 	bl	8000d24 <__aeabi_fmul>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	66bb      	str	r3, [r7, #104]	; 0x68
    float q3q4 = q3 * q4;
 8003e62:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8003e66:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8003e6a:	f7fc ff5b 	bl	8000d24 <__aeabi_fmul>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	667b      	str	r3, [r7, #100]	; 0x64
    float q4q4 = q4 * q4;
 8003e72:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8003e76:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8003e7a:	f7fc ff53 	bl	8000d24 <__aeabi_fmul>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	663b      	str	r3, [r7, #96]	; 0x60

    // Normalise accelerometer measurement
    norm = sqrtf(ax * ax + ay * ay + az * az);
 8003e82:	68f9      	ldr	r1, [r7, #12]
 8003e84:	68f8      	ldr	r0, [r7, #12]
 8003e86:	f7fc ff4d 	bl	8000d24 <__aeabi_fmul>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	461c      	mov	r4, r3
 8003e8e:	68b9      	ldr	r1, [r7, #8]
 8003e90:	68b8      	ldr	r0, [r7, #8]
 8003e92:	f7fc ff47 	bl	8000d24 <__aeabi_fmul>
 8003e96:	4603      	mov	r3, r0
 8003e98:	4619      	mov	r1, r3
 8003e9a:	4620      	mov	r0, r4
 8003e9c:	f7fc fe3a 	bl	8000b14 <__addsf3>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	461c      	mov	r4, r3
 8003ea4:	6879      	ldr	r1, [r7, #4]
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f7fc ff3c 	bl	8000d24 <__aeabi_fmul>
 8003eac:	4603      	mov	r3, r0
 8003eae:	4619      	mov	r1, r3
 8003eb0:	4620      	mov	r0, r4
 8003eb2:	f7fc fe2f 	bl	8000b14 <__addsf3>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f004 fe47 	bl	8008b4c <sqrtf>
 8003ebe:	65f8      	str	r0, [r7, #92]	; 0x5c
    if (norm == 0.0f) return; // handle NaN
 8003ec0:	f04f 0100 	mov.w	r1, #0
 8003ec4:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8003ec6:	f7fd f8c1 	bl	800104c <__aeabi_fcmpeq>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	f040 87e3 	bne.w	8004e98 <QuaternionUpdate+0x116c>
    norm = 1.0f/norm;
 8003ed2:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8003ed4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003ed8:	f7fc ffd8 	bl	8000e8c <__aeabi_fdiv>
 8003edc:	4603      	mov	r3, r0
 8003ede:	65fb      	str	r3, [r7, #92]	; 0x5c
    ax *= norm;
 8003ee0:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8003ee2:	68f8      	ldr	r0, [r7, #12]
 8003ee4:	f7fc ff1e 	bl	8000d24 <__aeabi_fmul>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	60fb      	str	r3, [r7, #12]
    ay *= norm;
 8003eec:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8003eee:	68b8      	ldr	r0, [r7, #8]
 8003ef0:	f7fc ff18 	bl	8000d24 <__aeabi_fmul>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	60bb      	str	r3, [r7, #8]
    az *= norm;
 8003ef8:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f7fc ff12 	bl	8000d24 <__aeabi_fmul>
 8003f00:	4603      	mov	r3, r0
 8003f02:	607b      	str	r3, [r7, #4]

    // Normalise magnetometer measurement
    norm = sqrtf(mx * mx + my * my + mz * mz);
 8003f04:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8003f08:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8003f0c:	f7fc ff0a 	bl	8000d24 <__aeabi_fmul>
 8003f10:	4603      	mov	r3, r0
 8003f12:	461c      	mov	r4, r3
 8003f14:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8003f18:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8003f1c:	f7fc ff02 	bl	8000d24 <__aeabi_fmul>
 8003f20:	4603      	mov	r3, r0
 8003f22:	4619      	mov	r1, r3
 8003f24:	4620      	mov	r0, r4
 8003f26:	f7fc fdf5 	bl	8000b14 <__addsf3>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	461c      	mov	r4, r3
 8003f2e:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8003f32:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8003f36:	f7fc fef5 	bl	8000d24 <__aeabi_fmul>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	4620      	mov	r0, r4
 8003f40:	f7fc fde8 	bl	8000b14 <__addsf3>
 8003f44:	4603      	mov	r3, r0
 8003f46:	4618      	mov	r0, r3
 8003f48:	f004 fe00 	bl	8008b4c <sqrtf>
 8003f4c:	65f8      	str	r0, [r7, #92]	; 0x5c
    if (norm == 0.0f) return; // handle NaN
 8003f4e:	f04f 0100 	mov.w	r1, #0
 8003f52:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8003f54:	f7fd f87a 	bl	800104c <__aeabi_fcmpeq>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	f040 879e 	bne.w	8004e9c <QuaternionUpdate+0x1170>
 8003f60:	e002      	b.n	8003f68 <QuaternionUpdate+0x23c>
 8003f62:	bf00      	nop
 8003f64:	20000008 	.word	0x20000008
    norm = 1.0f/norm;
 8003f68:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8003f6a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003f6e:	f7fc ff8d 	bl	8000e8c <__aeabi_fdiv>
 8003f72:	4603      	mov	r3, r0
 8003f74:	65fb      	str	r3, [r7, #92]	; 0x5c
    mx *= norm;
 8003f76:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8003f78:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8003f7c:	f7fc fed2 	bl	8000d24 <__aeabi_fmul>
 8003f80:	4603      	mov	r3, r0
 8003f82:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    my *= norm;
 8003f86:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8003f88:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8003f8c:	f7fc feca 	bl	8000d24 <__aeabi_fmul>
 8003f90:	4603      	mov	r3, r0
 8003f92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    mz *= norm;
 8003f96:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8003f98:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8003f9c:	f7fc fec2 	bl	8000d24 <__aeabi_fmul>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

    // Reference direction of Earth's magnetic field
    _2q1mx = 2.0f * q1 * mx;
 8003fa6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003faa:	4619      	mov	r1, r3
 8003fac:	4618      	mov	r0, r3
 8003fae:	f7fc fdb1 	bl	8000b14 <__addsf3>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8003fba:	f7fc feb3 	bl	8000d24 <__aeabi_fmul>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	65bb      	str	r3, [r7, #88]	; 0x58
    _2q1my = 2.0f * q1 * my;
 8003fc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f7fc fda3 	bl	8000b14 <__addsf3>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8003fd6:	f7fc fea5 	bl	8000d24 <__aeabi_fmul>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	657b      	str	r3, [r7, #84]	; 0x54
    _2q1mz = 2.0f * q1 * mz;
 8003fde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f7fc fd95 	bl	8000b14 <__addsf3>
 8003fea:	4603      	mov	r3, r0
 8003fec:	4619      	mov	r1, r3
 8003fee:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8003ff2:	f7fc fe97 	bl	8000d24 <__aeabi_fmul>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	653b      	str	r3, [r7, #80]	; 0x50
    _2q2mx = 2.0f * q2 * mx;
 8003ffa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003ffe:	4619      	mov	r1, r3
 8004000:	4618      	mov	r0, r3
 8004002:	f7fc fd87 	bl	8000b14 <__addsf3>
 8004006:	4603      	mov	r3, r0
 8004008:	4619      	mov	r1, r3
 800400a:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 800400e:	f7fc fe89 	bl	8000d24 <__aeabi_fmul>
 8004012:	4603      	mov	r3, r0
 8004014:	64fb      	str	r3, [r7, #76]	; 0x4c
    hx = mx * q1q1 - _2q1my * q4 + _2q1mz * q3 + mx * q2q2 + _2q2 * my * q3 + _2q2 * mz * q4 - mx * q3q3 - mx * q4q4;
 8004016:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800401a:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 800401e:	f7fc fe81 	bl	8000d24 <__aeabi_fmul>
 8004022:	4603      	mov	r3, r0
 8004024:	461c      	mov	r4, r3
 8004026:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800402a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800402c:	f7fc fe7a 	bl	8000d24 <__aeabi_fmul>
 8004030:	4603      	mov	r3, r0
 8004032:	4619      	mov	r1, r3
 8004034:	4620      	mov	r0, r4
 8004036:	f7fc fd6b 	bl	8000b10 <__aeabi_fsub>
 800403a:	4603      	mov	r3, r0
 800403c:	461c      	mov	r4, r3
 800403e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004042:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8004044:	f7fc fe6e 	bl	8000d24 <__aeabi_fmul>
 8004048:	4603      	mov	r3, r0
 800404a:	4619      	mov	r1, r3
 800404c:	4620      	mov	r0, r4
 800404e:	f7fc fd61 	bl	8000b14 <__addsf3>
 8004052:	4603      	mov	r3, r0
 8004054:	461c      	mov	r4, r3
 8004056:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8004058:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 800405c:	f7fc fe62 	bl	8000d24 <__aeabi_fmul>
 8004060:	4603      	mov	r3, r0
 8004062:	4619      	mov	r1, r3
 8004064:	4620      	mov	r0, r4
 8004066:	f7fc fd55 	bl	8000b14 <__addsf3>
 800406a:	4603      	mov	r3, r0
 800406c:	461c      	mov	r4, r3
 800406e:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8004072:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8004076:	f7fc fe55 	bl	8000d24 <__aeabi_fmul>
 800407a:	4603      	mov	r3, r0
 800407c:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004080:	4618      	mov	r0, r3
 8004082:	f7fc fe4f 	bl	8000d24 <__aeabi_fmul>
 8004086:	4603      	mov	r3, r0
 8004088:	4619      	mov	r1, r3
 800408a:	4620      	mov	r0, r4
 800408c:	f7fc fd42 	bl	8000b14 <__addsf3>
 8004090:	4603      	mov	r3, r0
 8004092:	461c      	mov	r4, r3
 8004094:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8004098:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800409c:	f7fc fe42 	bl	8000d24 <__aeabi_fmul>
 80040a0:	4603      	mov	r3, r0
 80040a2:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80040a6:	4618      	mov	r0, r3
 80040a8:	f7fc fe3c 	bl	8000d24 <__aeabi_fmul>
 80040ac:	4603      	mov	r3, r0
 80040ae:	4619      	mov	r1, r3
 80040b0:	4620      	mov	r0, r4
 80040b2:	f7fc fd2f 	bl	8000b14 <__addsf3>
 80040b6:	4603      	mov	r3, r0
 80040b8:	461c      	mov	r4, r3
 80040ba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80040bc:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80040c0:	f7fc fe30 	bl	8000d24 <__aeabi_fmul>
 80040c4:	4603      	mov	r3, r0
 80040c6:	4619      	mov	r1, r3
 80040c8:	4620      	mov	r0, r4
 80040ca:	f7fc fd21 	bl	8000b10 <__aeabi_fsub>
 80040ce:	4603      	mov	r3, r0
 80040d0:	461c      	mov	r4, r3
 80040d2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80040d4:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80040d8:	f7fc fe24 	bl	8000d24 <__aeabi_fmul>
 80040dc:	4603      	mov	r3, r0
 80040de:	4619      	mov	r1, r3
 80040e0:	4620      	mov	r0, r4
 80040e2:	f7fc fd15 	bl	8000b10 <__aeabi_fsub>
 80040e6:	4603      	mov	r3, r0
 80040e8:	64bb      	str	r3, [r7, #72]	; 0x48
    hy = _2q1mx * q4 + my * q1q1 - _2q1mz * q2 + _2q2mx * q3 - my * q2q2 + my * q3q3 + _2q3 * mz * q4 - my * q4q4;
 80040ea:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80040ee:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80040f0:	f7fc fe18 	bl	8000d24 <__aeabi_fmul>
 80040f4:	4603      	mov	r3, r0
 80040f6:	461c      	mov	r4, r3
 80040f8:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80040fc:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8004100:	f7fc fe10 	bl	8000d24 <__aeabi_fmul>
 8004104:	4603      	mov	r3, r0
 8004106:	4619      	mov	r1, r3
 8004108:	4620      	mov	r0, r4
 800410a:	f7fc fd03 	bl	8000b14 <__addsf3>
 800410e:	4603      	mov	r3, r0
 8004110:	461c      	mov	r4, r3
 8004112:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8004116:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8004118:	f7fc fe04 	bl	8000d24 <__aeabi_fmul>
 800411c:	4603      	mov	r3, r0
 800411e:	4619      	mov	r1, r3
 8004120:	4620      	mov	r0, r4
 8004122:	f7fc fcf5 	bl	8000b10 <__aeabi_fsub>
 8004126:	4603      	mov	r3, r0
 8004128:	461c      	mov	r4, r3
 800412a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800412e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004130:	f7fc fdf8 	bl	8000d24 <__aeabi_fmul>
 8004134:	4603      	mov	r3, r0
 8004136:	4619      	mov	r1, r3
 8004138:	4620      	mov	r0, r4
 800413a:	f7fc fceb 	bl	8000b14 <__addsf3>
 800413e:	4603      	mov	r3, r0
 8004140:	461c      	mov	r4, r3
 8004142:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8004144:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8004148:	f7fc fdec 	bl	8000d24 <__aeabi_fmul>
 800414c:	4603      	mov	r3, r0
 800414e:	4619      	mov	r1, r3
 8004150:	4620      	mov	r0, r4
 8004152:	f7fc fcdd 	bl	8000b10 <__aeabi_fsub>
 8004156:	4603      	mov	r3, r0
 8004158:	461c      	mov	r4, r3
 800415a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800415c:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8004160:	f7fc fde0 	bl	8000d24 <__aeabi_fmul>
 8004164:	4603      	mov	r3, r0
 8004166:	4619      	mov	r1, r3
 8004168:	4620      	mov	r0, r4
 800416a:	f7fc fcd3 	bl	8000b14 <__addsf3>
 800416e:	4603      	mov	r3, r0
 8004170:	461c      	mov	r4, r3
 8004172:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8004176:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800417a:	f7fc fdd3 	bl	8000d24 <__aeabi_fmul>
 800417e:	4603      	mov	r3, r0
 8004180:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8004184:	4618      	mov	r0, r3
 8004186:	f7fc fdcd 	bl	8000d24 <__aeabi_fmul>
 800418a:	4603      	mov	r3, r0
 800418c:	4619      	mov	r1, r3
 800418e:	4620      	mov	r0, r4
 8004190:	f7fc fcc0 	bl	8000b14 <__addsf3>
 8004194:	4603      	mov	r3, r0
 8004196:	461c      	mov	r4, r3
 8004198:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800419a:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800419e:	f7fc fdc1 	bl	8000d24 <__aeabi_fmul>
 80041a2:	4603      	mov	r3, r0
 80041a4:	4619      	mov	r1, r3
 80041a6:	4620      	mov	r0, r4
 80041a8:	f7fc fcb2 	bl	8000b10 <__aeabi_fsub>
 80041ac:	4603      	mov	r3, r0
 80041ae:	647b      	str	r3, [r7, #68]	; 0x44
    _2bx = sqrtf(hx * hx + hy * hy);
 80041b0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80041b2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80041b4:	f7fc fdb6 	bl	8000d24 <__aeabi_fmul>
 80041b8:	4603      	mov	r3, r0
 80041ba:	461c      	mov	r4, r3
 80041bc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80041be:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80041c0:	f7fc fdb0 	bl	8000d24 <__aeabi_fmul>
 80041c4:	4603      	mov	r3, r0
 80041c6:	4619      	mov	r1, r3
 80041c8:	4620      	mov	r0, r4
 80041ca:	f7fc fca3 	bl	8000b14 <__addsf3>
 80041ce:	4603      	mov	r3, r0
 80041d0:	4618      	mov	r0, r3
 80041d2:	f004 fcbb 	bl	8008b4c <sqrtf>
 80041d6:	6438      	str	r0, [r7, #64]	; 0x40
    _2bz = -_2q1mx * q3 + _2q1my * q2 + mz * q1q1 + _2q2mx * q4 - mz * q2q2 + _2q3 * my * q4 - mz * q3q3 + mz * q4q4;
 80041d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041da:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80041de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7fc fd9e 	bl	8000d24 <__aeabi_fmul>
 80041e8:	4603      	mov	r3, r0
 80041ea:	461c      	mov	r4, r3
 80041ec:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80041f0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80041f2:	f7fc fd97 	bl	8000d24 <__aeabi_fmul>
 80041f6:	4603      	mov	r3, r0
 80041f8:	4619      	mov	r1, r3
 80041fa:	4620      	mov	r0, r4
 80041fc:	f7fc fc8a 	bl	8000b14 <__addsf3>
 8004200:	4603      	mov	r3, r0
 8004202:	461c      	mov	r4, r3
 8004204:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8004208:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800420c:	f7fc fd8a 	bl	8000d24 <__aeabi_fmul>
 8004210:	4603      	mov	r3, r0
 8004212:	4619      	mov	r1, r3
 8004214:	4620      	mov	r0, r4
 8004216:	f7fc fc7d 	bl	8000b14 <__addsf3>
 800421a:	4603      	mov	r3, r0
 800421c:	461c      	mov	r4, r3
 800421e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8004222:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004224:	f7fc fd7e 	bl	8000d24 <__aeabi_fmul>
 8004228:	4603      	mov	r3, r0
 800422a:	4619      	mov	r1, r3
 800422c:	4620      	mov	r0, r4
 800422e:	f7fc fc71 	bl	8000b14 <__addsf3>
 8004232:	4603      	mov	r3, r0
 8004234:	461c      	mov	r4, r3
 8004236:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8004238:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800423c:	f7fc fd72 	bl	8000d24 <__aeabi_fmul>
 8004240:	4603      	mov	r3, r0
 8004242:	4619      	mov	r1, r3
 8004244:	4620      	mov	r0, r4
 8004246:	f7fc fc63 	bl	8000b10 <__aeabi_fsub>
 800424a:	4603      	mov	r3, r0
 800424c:	461c      	mov	r4, r3
 800424e:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8004252:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8004256:	f7fc fd65 	bl	8000d24 <__aeabi_fmul>
 800425a:	4603      	mov	r3, r0
 800425c:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8004260:	4618      	mov	r0, r3
 8004262:	f7fc fd5f 	bl	8000d24 <__aeabi_fmul>
 8004266:	4603      	mov	r3, r0
 8004268:	4619      	mov	r1, r3
 800426a:	4620      	mov	r0, r4
 800426c:	f7fc fc52 	bl	8000b14 <__addsf3>
 8004270:	4603      	mov	r3, r0
 8004272:	461c      	mov	r4, r3
 8004274:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004276:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800427a:	f7fc fd53 	bl	8000d24 <__aeabi_fmul>
 800427e:	4603      	mov	r3, r0
 8004280:	4619      	mov	r1, r3
 8004282:	4620      	mov	r0, r4
 8004284:	f7fc fc44 	bl	8000b10 <__aeabi_fsub>
 8004288:	4603      	mov	r3, r0
 800428a:	461c      	mov	r4, r3
 800428c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800428e:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8004292:	f7fc fd47 	bl	8000d24 <__aeabi_fmul>
 8004296:	4603      	mov	r3, r0
 8004298:	4619      	mov	r1, r3
 800429a:	4620      	mov	r0, r4
 800429c:	f7fc fc3a 	bl	8000b14 <__addsf3>
 80042a0:	4603      	mov	r3, r0
 80042a2:	63fb      	str	r3, [r7, #60]	; 0x3c
    _4bx = 2.0f * _2bx;
 80042a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042a6:	4619      	mov	r1, r3
 80042a8:	4618      	mov	r0, r3
 80042aa:	f7fc fc33 	bl	8000b14 <__addsf3>
 80042ae:	4603      	mov	r3, r0
 80042b0:	63bb      	str	r3, [r7, #56]	; 0x38
    _4bz = 2.0f * _2bz;
 80042b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042b4:	4619      	mov	r1, r3
 80042b6:	4618      	mov	r0, r3
 80042b8:	f7fc fc2c 	bl	8000b14 <__addsf3>
 80042bc:	4603      	mov	r3, r0
 80042be:	637b      	str	r3, [r7, #52]	; 0x34

    // Gradient decent algorithm corrective step
    s1 = -_2q3 * (2.0f * q2q4 - _2q1q3 - ax) + _2q2 * (2.0f * q1q2 + _2q3q4 - ay) - _2bz * q3 * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (-_2bx * q4 + _2bz * q2) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + _2bx * q3 * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 80042c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80042c4:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 80042c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042ca:	4619      	mov	r1, r3
 80042cc:	4618      	mov	r0, r3
 80042ce:	f7fc fc21 	bl	8000b14 <__addsf3>
 80042d2:	4603      	mov	r3, r0
 80042d4:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80042d8:	4618      	mov	r0, r3
 80042da:	f7fc fc19 	bl	8000b10 <__aeabi_fsub>
 80042de:	4603      	mov	r3, r0
 80042e0:	68f9      	ldr	r1, [r7, #12]
 80042e2:	4618      	mov	r0, r3
 80042e4:	f7fc fc14 	bl	8000b10 <__aeabi_fsub>
 80042e8:	4603      	mov	r3, r0
 80042ea:	4619      	mov	r1, r3
 80042ec:	4620      	mov	r0, r4
 80042ee:	f7fc fd19 	bl	8000d24 <__aeabi_fmul>
 80042f2:	4603      	mov	r3, r0
 80042f4:	461c      	mov	r4, r3
 80042f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80042fa:	4619      	mov	r1, r3
 80042fc:	4618      	mov	r0, r3
 80042fe:	f7fc fc09 	bl	8000b14 <__addsf3>
 8004302:	4603      	mov	r3, r0
 8004304:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8004308:	4618      	mov	r0, r3
 800430a:	f7fc fc03 	bl	8000b14 <__addsf3>
 800430e:	4603      	mov	r3, r0
 8004310:	68b9      	ldr	r1, [r7, #8]
 8004312:	4618      	mov	r0, r3
 8004314:	f7fc fbfc 	bl	8000b10 <__aeabi_fsub>
 8004318:	4603      	mov	r3, r0
 800431a:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800431e:	4618      	mov	r0, r3
 8004320:	f7fc fd00 	bl	8000d24 <__aeabi_fmul>
 8004324:	4603      	mov	r3, r0
 8004326:	4619      	mov	r1, r3
 8004328:	4620      	mov	r0, r4
 800432a:	f7fc fbf3 	bl	8000b14 <__addsf3>
 800432e:	4603      	mov	r3, r0
 8004330:	461c      	mov	r4, r3
 8004332:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004336:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004338:	f7fc fcf4 	bl	8000d24 <__aeabi_fmul>
 800433c:	4603      	mov	r3, r0
 800433e:	461d      	mov	r5, r3
 8004340:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004342:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8004346:	f7fc fbe3 	bl	8000b10 <__aeabi_fsub>
 800434a:	4603      	mov	r3, r0
 800434c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800434e:	4618      	mov	r0, r3
 8004350:	f7fc fbde 	bl	8000b10 <__aeabi_fsub>
 8004354:	4603      	mov	r3, r0
 8004356:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004358:	4618      	mov	r0, r3
 800435a:	f7fc fce3 	bl	8000d24 <__aeabi_fmul>
 800435e:	4603      	mov	r3, r0
 8004360:	461e      	mov	r6, r3
 8004362:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004364:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004366:	f7fc fbd3 	bl	8000b10 <__aeabi_fsub>
 800436a:	4603      	mov	r3, r0
 800436c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800436e:	4618      	mov	r0, r3
 8004370:	f7fc fcd8 	bl	8000d24 <__aeabi_fmul>
 8004374:	4603      	mov	r3, r0
 8004376:	4619      	mov	r1, r3
 8004378:	4630      	mov	r0, r6
 800437a:	f7fc fbcb 	bl	8000b14 <__addsf3>
 800437e:	4603      	mov	r3, r0
 8004380:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8004384:	4618      	mov	r0, r3
 8004386:	f7fc fbc3 	bl	8000b10 <__aeabi_fsub>
 800438a:	4603      	mov	r3, r0
 800438c:	4619      	mov	r1, r3
 800438e:	4628      	mov	r0, r5
 8004390:	f7fc fcc8 	bl	8000d24 <__aeabi_fmul>
 8004394:	4603      	mov	r3, r0
 8004396:	4619      	mov	r1, r3
 8004398:	4620      	mov	r0, r4
 800439a:	f7fc fbb9 	bl	8000b10 <__aeabi_fsub>
 800439e:	4603      	mov	r3, r0
 80043a0:	461c      	mov	r4, r3
 80043a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043a4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80043a8:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80043ac:	4618      	mov	r0, r3
 80043ae:	f7fc fcb9 	bl	8000d24 <__aeabi_fmul>
 80043b2:	4603      	mov	r3, r0
 80043b4:	461d      	mov	r5, r3
 80043b6:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80043ba:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80043bc:	f7fc fcb2 	bl	8000d24 <__aeabi_fmul>
 80043c0:	4603      	mov	r3, r0
 80043c2:	4619      	mov	r1, r3
 80043c4:	4628      	mov	r0, r5
 80043c6:	f7fc fba5 	bl	8000b14 <__addsf3>
 80043ca:	4603      	mov	r3, r0
 80043cc:	461d      	mov	r5, r3
 80043ce:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80043d0:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80043d2:	f7fc fb9d 	bl	8000b10 <__aeabi_fsub>
 80043d6:	4603      	mov	r3, r0
 80043d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80043da:	4618      	mov	r0, r3
 80043dc:	f7fc fca2 	bl	8000d24 <__aeabi_fmul>
 80043e0:	4603      	mov	r3, r0
 80043e2:	461e      	mov	r6, r3
 80043e4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80043e6:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80043ea:	f7fc fb93 	bl	8000b14 <__addsf3>
 80043ee:	4603      	mov	r3, r0
 80043f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80043f2:	4618      	mov	r0, r3
 80043f4:	f7fc fc96 	bl	8000d24 <__aeabi_fmul>
 80043f8:	4603      	mov	r3, r0
 80043fa:	4619      	mov	r1, r3
 80043fc:	4630      	mov	r0, r6
 80043fe:	f7fc fb89 	bl	8000b14 <__addsf3>
 8004402:	4603      	mov	r3, r0
 8004404:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8004408:	4618      	mov	r0, r3
 800440a:	f7fc fb81 	bl	8000b10 <__aeabi_fsub>
 800440e:	4603      	mov	r3, r0
 8004410:	4619      	mov	r1, r3
 8004412:	4628      	mov	r0, r5
 8004414:	f7fc fc86 	bl	8000d24 <__aeabi_fmul>
 8004418:	4603      	mov	r3, r0
 800441a:	4619      	mov	r1, r3
 800441c:	4620      	mov	r0, r4
 800441e:	f7fc fb79 	bl	8000b14 <__addsf3>
 8004422:	4603      	mov	r3, r0
 8004424:	461c      	mov	r4, r3
 8004426:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800442a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800442c:	f7fc fc7a 	bl	8000d24 <__aeabi_fmul>
 8004430:	4603      	mov	r3, r0
 8004432:	461d      	mov	r5, r3
 8004434:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8004436:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8004438:	f7fc fb6c 	bl	8000b14 <__addsf3>
 800443c:	4603      	mov	r3, r0
 800443e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004440:	4618      	mov	r0, r3
 8004442:	f7fc fc6f 	bl	8000d24 <__aeabi_fmul>
 8004446:	4603      	mov	r3, r0
 8004448:	461e      	mov	r6, r3
 800444a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800444c:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8004450:	f7fc fb5e 	bl	8000b10 <__aeabi_fsub>
 8004454:	4603      	mov	r3, r0
 8004456:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004458:	4618      	mov	r0, r3
 800445a:	f7fc fb59 	bl	8000b10 <__aeabi_fsub>
 800445e:	4603      	mov	r3, r0
 8004460:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004462:	4618      	mov	r0, r3
 8004464:	f7fc fc5e 	bl	8000d24 <__aeabi_fmul>
 8004468:	4603      	mov	r3, r0
 800446a:	4619      	mov	r1, r3
 800446c:	4630      	mov	r0, r6
 800446e:	f7fc fb51 	bl	8000b14 <__addsf3>
 8004472:	4603      	mov	r3, r0
 8004474:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8004478:	4618      	mov	r0, r3
 800447a:	f7fc fb49 	bl	8000b10 <__aeabi_fsub>
 800447e:	4603      	mov	r3, r0
 8004480:	4619      	mov	r1, r3
 8004482:	4628      	mov	r0, r5
 8004484:	f7fc fc4e 	bl	8000d24 <__aeabi_fmul>
 8004488:	4603      	mov	r3, r0
 800448a:	4619      	mov	r1, r3
 800448c:	4620      	mov	r0, r4
 800448e:	f7fc fb41 	bl	8000b14 <__addsf3>
 8004492:	4603      	mov	r3, r0
 8004494:	633b      	str	r3, [r7, #48]	; 0x30
    s2 = _2q4 * (2.0f * q2q4 - _2q1q3 - ax) + _2q1 * (2.0f * q1q2 + _2q3q4 - ay) - 4.0f * q2 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az) + _2bz * q4 * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (_2bx * q3 + _2bz * q1) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + (_2bx * q4 - _4bz * q2) * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8004496:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004498:	4619      	mov	r1, r3
 800449a:	4618      	mov	r0, r3
 800449c:	f7fc fb3a 	bl	8000b14 <__addsf3>
 80044a0:	4603      	mov	r3, r0
 80044a2:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80044a6:	4618      	mov	r0, r3
 80044a8:	f7fc fb32 	bl	8000b10 <__aeabi_fsub>
 80044ac:	4603      	mov	r3, r0
 80044ae:	68f9      	ldr	r1, [r7, #12]
 80044b0:	4618      	mov	r0, r3
 80044b2:	f7fc fb2d 	bl	8000b10 <__aeabi_fsub>
 80044b6:	4603      	mov	r3, r0
 80044b8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80044bc:	4618      	mov	r0, r3
 80044be:	f7fc fc31 	bl	8000d24 <__aeabi_fmul>
 80044c2:	4603      	mov	r3, r0
 80044c4:	461c      	mov	r4, r3
 80044c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80044ca:	4619      	mov	r1, r3
 80044cc:	4618      	mov	r0, r3
 80044ce:	f7fc fb21 	bl	8000b14 <__addsf3>
 80044d2:	4603      	mov	r3, r0
 80044d4:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80044d8:	4618      	mov	r0, r3
 80044da:	f7fc fb1b 	bl	8000b14 <__addsf3>
 80044de:	4603      	mov	r3, r0
 80044e0:	68b9      	ldr	r1, [r7, #8]
 80044e2:	4618      	mov	r0, r3
 80044e4:	f7fc fb14 	bl	8000b10 <__aeabi_fsub>
 80044e8:	4603      	mov	r3, r0
 80044ea:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80044ee:	4618      	mov	r0, r3
 80044f0:	f7fc fc18 	bl	8000d24 <__aeabi_fmul>
 80044f4:	4603      	mov	r3, r0
 80044f6:	4619      	mov	r1, r3
 80044f8:	4620      	mov	r0, r4
 80044fa:	f7fc fb0b 	bl	8000b14 <__addsf3>
 80044fe:	4603      	mov	r3, r0
 8004500:	461c      	mov	r4, r3
 8004502:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8004506:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800450a:	f7fc fc0b 	bl	8000d24 <__aeabi_fmul>
 800450e:	4603      	mov	r3, r0
 8004510:	461d      	mov	r5, r3
 8004512:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004514:	4619      	mov	r1, r3
 8004516:	4618      	mov	r0, r3
 8004518:	f7fc fafc 	bl	8000b14 <__addsf3>
 800451c:	4603      	mov	r3, r0
 800451e:	4619      	mov	r1, r3
 8004520:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004524:	f7fc faf4 	bl	8000b10 <__aeabi_fsub>
 8004528:	4603      	mov	r3, r0
 800452a:	461e      	mov	r6, r3
 800452c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800452e:	4619      	mov	r1, r3
 8004530:	4618      	mov	r0, r3
 8004532:	f7fc faef 	bl	8000b14 <__addsf3>
 8004536:	4603      	mov	r3, r0
 8004538:	4619      	mov	r1, r3
 800453a:	4630      	mov	r0, r6
 800453c:	f7fc fae8 	bl	8000b10 <__aeabi_fsub>
 8004540:	4603      	mov	r3, r0
 8004542:	6879      	ldr	r1, [r7, #4]
 8004544:	4618      	mov	r0, r3
 8004546:	f7fc fae3 	bl	8000b10 <__aeabi_fsub>
 800454a:	4603      	mov	r3, r0
 800454c:	4619      	mov	r1, r3
 800454e:	4628      	mov	r0, r5
 8004550:	f7fc fbe8 	bl	8000d24 <__aeabi_fmul>
 8004554:	4603      	mov	r3, r0
 8004556:	4619      	mov	r1, r3
 8004558:	4620      	mov	r0, r4
 800455a:	f7fc fad9 	bl	8000b10 <__aeabi_fsub>
 800455e:	4603      	mov	r3, r0
 8004560:	461c      	mov	r4, r3
 8004562:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8004566:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004568:	f7fc fbdc 	bl	8000d24 <__aeabi_fmul>
 800456c:	4603      	mov	r3, r0
 800456e:	461d      	mov	r5, r3
 8004570:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004572:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8004576:	f7fc facb 	bl	8000b10 <__aeabi_fsub>
 800457a:	4603      	mov	r3, r0
 800457c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800457e:	4618      	mov	r0, r3
 8004580:	f7fc fac6 	bl	8000b10 <__aeabi_fsub>
 8004584:	4603      	mov	r3, r0
 8004586:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004588:	4618      	mov	r0, r3
 800458a:	f7fc fbcb 	bl	8000d24 <__aeabi_fmul>
 800458e:	4603      	mov	r3, r0
 8004590:	461e      	mov	r6, r3
 8004592:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004594:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004596:	f7fc fabb 	bl	8000b10 <__aeabi_fsub>
 800459a:	4603      	mov	r3, r0
 800459c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800459e:	4618      	mov	r0, r3
 80045a0:	f7fc fbc0 	bl	8000d24 <__aeabi_fmul>
 80045a4:	4603      	mov	r3, r0
 80045a6:	4619      	mov	r1, r3
 80045a8:	4630      	mov	r0, r6
 80045aa:	f7fc fab3 	bl	8000b14 <__addsf3>
 80045ae:	4603      	mov	r3, r0
 80045b0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80045b4:	4618      	mov	r0, r3
 80045b6:	f7fc faab 	bl	8000b10 <__aeabi_fsub>
 80045ba:	4603      	mov	r3, r0
 80045bc:	4619      	mov	r1, r3
 80045be:	4628      	mov	r0, r5
 80045c0:	f7fc fbb0 	bl	8000d24 <__aeabi_fmul>
 80045c4:	4603      	mov	r3, r0
 80045c6:	4619      	mov	r1, r3
 80045c8:	4620      	mov	r0, r4
 80045ca:	f7fc faa3 	bl	8000b14 <__addsf3>
 80045ce:	4603      	mov	r3, r0
 80045d0:	461c      	mov	r4, r3
 80045d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80045d6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80045d8:	f7fc fba4 	bl	8000d24 <__aeabi_fmul>
 80045dc:	4603      	mov	r3, r0
 80045de:	461d      	mov	r5, r3
 80045e0:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 80045e4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80045e6:	f7fc fb9d 	bl	8000d24 <__aeabi_fmul>
 80045ea:	4603      	mov	r3, r0
 80045ec:	4619      	mov	r1, r3
 80045ee:	4628      	mov	r0, r5
 80045f0:	f7fc fa90 	bl	8000b14 <__addsf3>
 80045f4:	4603      	mov	r3, r0
 80045f6:	461d      	mov	r5, r3
 80045f8:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80045fa:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80045fc:	f7fc fa88 	bl	8000b10 <__aeabi_fsub>
 8004600:	4603      	mov	r3, r0
 8004602:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004604:	4618      	mov	r0, r3
 8004606:	f7fc fb8d 	bl	8000d24 <__aeabi_fmul>
 800460a:	4603      	mov	r3, r0
 800460c:	461e      	mov	r6, r3
 800460e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8004610:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8004614:	f7fc fa7e 	bl	8000b14 <__addsf3>
 8004618:	4603      	mov	r3, r0
 800461a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800461c:	4618      	mov	r0, r3
 800461e:	f7fc fb81 	bl	8000d24 <__aeabi_fmul>
 8004622:	4603      	mov	r3, r0
 8004624:	4619      	mov	r1, r3
 8004626:	4630      	mov	r0, r6
 8004628:	f7fc fa74 	bl	8000b14 <__addsf3>
 800462c:	4603      	mov	r3, r0
 800462e:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8004632:	4618      	mov	r0, r3
 8004634:	f7fc fa6c 	bl	8000b10 <__aeabi_fsub>
 8004638:	4603      	mov	r3, r0
 800463a:	4619      	mov	r1, r3
 800463c:	4628      	mov	r0, r5
 800463e:	f7fc fb71 	bl	8000d24 <__aeabi_fmul>
 8004642:	4603      	mov	r3, r0
 8004644:	4619      	mov	r1, r3
 8004646:	4620      	mov	r0, r4
 8004648:	f7fc fa64 	bl	8000b14 <__addsf3>
 800464c:	4603      	mov	r3, r0
 800464e:	461c      	mov	r4, r3
 8004650:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8004654:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004656:	f7fc fb65 	bl	8000d24 <__aeabi_fmul>
 800465a:	4603      	mov	r3, r0
 800465c:	461d      	mov	r5, r3
 800465e:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8004662:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004664:	f7fc fb5e 	bl	8000d24 <__aeabi_fmul>
 8004668:	4603      	mov	r3, r0
 800466a:	4619      	mov	r1, r3
 800466c:	4628      	mov	r0, r5
 800466e:	f7fc fa4f 	bl	8000b10 <__aeabi_fsub>
 8004672:	4603      	mov	r3, r0
 8004674:	461d      	mov	r5, r3
 8004676:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8004678:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800467a:	f7fc fa4b 	bl	8000b14 <__addsf3>
 800467e:	4603      	mov	r3, r0
 8004680:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004682:	4618      	mov	r0, r3
 8004684:	f7fc fb4e 	bl	8000d24 <__aeabi_fmul>
 8004688:	4603      	mov	r3, r0
 800468a:	461e      	mov	r6, r3
 800468c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800468e:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8004692:	f7fc fa3d 	bl	8000b10 <__aeabi_fsub>
 8004696:	4603      	mov	r3, r0
 8004698:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800469a:	4618      	mov	r0, r3
 800469c:	f7fc fa38 	bl	8000b10 <__aeabi_fsub>
 80046a0:	4603      	mov	r3, r0
 80046a2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80046a4:	4618      	mov	r0, r3
 80046a6:	f7fc fb3d 	bl	8000d24 <__aeabi_fmul>
 80046aa:	4603      	mov	r3, r0
 80046ac:	4619      	mov	r1, r3
 80046ae:	4630      	mov	r0, r6
 80046b0:	f7fc fa30 	bl	8000b14 <__addsf3>
 80046b4:	4603      	mov	r3, r0
 80046b6:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80046ba:	4618      	mov	r0, r3
 80046bc:	f7fc fa28 	bl	8000b10 <__aeabi_fsub>
 80046c0:	4603      	mov	r3, r0
 80046c2:	4619      	mov	r1, r3
 80046c4:	4628      	mov	r0, r5
 80046c6:	f7fc fb2d 	bl	8000d24 <__aeabi_fmul>
 80046ca:	4603      	mov	r3, r0
 80046cc:	4619      	mov	r1, r3
 80046ce:	4620      	mov	r0, r4
 80046d0:	f7fc fa20 	bl	8000b14 <__addsf3>
 80046d4:	4603      	mov	r3, r0
 80046d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    s3 = -_2q1 * (2.0f * q2q4 - _2q1q3 - ax) + _2q4 * (2.0f * q1q2 + _2q3q4 - ay) - 4.0f * q3 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az) + (-_4bx * q3 - _2bz * q1) * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (_2bx * q2 + _2bz * q4) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + (_2bx * q1 - _4bz * q3) * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 80046d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80046dc:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 80046e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046e2:	4619      	mov	r1, r3
 80046e4:	4618      	mov	r0, r3
 80046e6:	f7fc fa15 	bl	8000b14 <__addsf3>
 80046ea:	4603      	mov	r3, r0
 80046ec:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80046f0:	4618      	mov	r0, r3
 80046f2:	f7fc fa0d 	bl	8000b10 <__aeabi_fsub>
 80046f6:	4603      	mov	r3, r0
 80046f8:	68f9      	ldr	r1, [r7, #12]
 80046fa:	4618      	mov	r0, r3
 80046fc:	f7fc fa08 	bl	8000b10 <__aeabi_fsub>
 8004700:	4603      	mov	r3, r0
 8004702:	4619      	mov	r1, r3
 8004704:	4620      	mov	r0, r4
 8004706:	f7fc fb0d 	bl	8000d24 <__aeabi_fmul>
 800470a:	4603      	mov	r3, r0
 800470c:	461c      	mov	r4, r3
 800470e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004712:	4619      	mov	r1, r3
 8004714:	4618      	mov	r0, r3
 8004716:	f7fc f9fd 	bl	8000b14 <__addsf3>
 800471a:	4603      	mov	r3, r0
 800471c:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8004720:	4618      	mov	r0, r3
 8004722:	f7fc f9f7 	bl	8000b14 <__addsf3>
 8004726:	4603      	mov	r3, r0
 8004728:	68b9      	ldr	r1, [r7, #8]
 800472a:	4618      	mov	r0, r3
 800472c:	f7fc f9f0 	bl	8000b10 <__aeabi_fsub>
 8004730:	4603      	mov	r3, r0
 8004732:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004736:	4618      	mov	r0, r3
 8004738:	f7fc faf4 	bl	8000d24 <__aeabi_fmul>
 800473c:	4603      	mov	r3, r0
 800473e:	4619      	mov	r1, r3
 8004740:	4620      	mov	r0, r4
 8004742:	f7fc f9e7 	bl	8000b14 <__addsf3>
 8004746:	4603      	mov	r3, r0
 8004748:	461c      	mov	r4, r3
 800474a:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 800474e:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8004752:	f7fc fae7 	bl	8000d24 <__aeabi_fmul>
 8004756:	4603      	mov	r3, r0
 8004758:	461d      	mov	r5, r3
 800475a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800475c:	4619      	mov	r1, r3
 800475e:	4618      	mov	r0, r3
 8004760:	f7fc f9d8 	bl	8000b14 <__addsf3>
 8004764:	4603      	mov	r3, r0
 8004766:	4619      	mov	r1, r3
 8004768:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800476c:	f7fc f9d0 	bl	8000b10 <__aeabi_fsub>
 8004770:	4603      	mov	r3, r0
 8004772:	461e      	mov	r6, r3
 8004774:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004776:	4619      	mov	r1, r3
 8004778:	4618      	mov	r0, r3
 800477a:	f7fc f9cb 	bl	8000b14 <__addsf3>
 800477e:	4603      	mov	r3, r0
 8004780:	4619      	mov	r1, r3
 8004782:	4630      	mov	r0, r6
 8004784:	f7fc f9c4 	bl	8000b10 <__aeabi_fsub>
 8004788:	4603      	mov	r3, r0
 800478a:	6879      	ldr	r1, [r7, #4]
 800478c:	4618      	mov	r0, r3
 800478e:	f7fc f9bf 	bl	8000b10 <__aeabi_fsub>
 8004792:	4603      	mov	r3, r0
 8004794:	4619      	mov	r1, r3
 8004796:	4628      	mov	r0, r5
 8004798:	f7fc fac4 	bl	8000d24 <__aeabi_fmul>
 800479c:	4603      	mov	r3, r0
 800479e:	4619      	mov	r1, r3
 80047a0:	4620      	mov	r0, r4
 80047a2:	f7fc f9b5 	bl	8000b10 <__aeabi_fsub>
 80047a6:	4603      	mov	r3, r0
 80047a8:	461c      	mov	r4, r3
 80047aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80047b0:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80047b4:	4618      	mov	r0, r3
 80047b6:	f7fc fab5 	bl	8000d24 <__aeabi_fmul>
 80047ba:	4603      	mov	r3, r0
 80047bc:	461d      	mov	r5, r3
 80047be:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 80047c2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80047c4:	f7fc faae 	bl	8000d24 <__aeabi_fmul>
 80047c8:	4603      	mov	r3, r0
 80047ca:	4619      	mov	r1, r3
 80047cc:	4628      	mov	r0, r5
 80047ce:	f7fc f99f 	bl	8000b10 <__aeabi_fsub>
 80047d2:	4603      	mov	r3, r0
 80047d4:	461d      	mov	r5, r3
 80047d6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80047d8:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80047dc:	f7fc f998 	bl	8000b10 <__aeabi_fsub>
 80047e0:	4603      	mov	r3, r0
 80047e2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80047e4:	4618      	mov	r0, r3
 80047e6:	f7fc f993 	bl	8000b10 <__aeabi_fsub>
 80047ea:	4603      	mov	r3, r0
 80047ec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80047ee:	4618      	mov	r0, r3
 80047f0:	f7fc fa98 	bl	8000d24 <__aeabi_fmul>
 80047f4:	4603      	mov	r3, r0
 80047f6:	461e      	mov	r6, r3
 80047f8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80047fa:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80047fc:	f7fc f988 	bl	8000b10 <__aeabi_fsub>
 8004800:	4603      	mov	r3, r0
 8004802:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004804:	4618      	mov	r0, r3
 8004806:	f7fc fa8d 	bl	8000d24 <__aeabi_fmul>
 800480a:	4603      	mov	r3, r0
 800480c:	4619      	mov	r1, r3
 800480e:	4630      	mov	r0, r6
 8004810:	f7fc f980 	bl	8000b14 <__addsf3>
 8004814:	4603      	mov	r3, r0
 8004816:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800481a:	4618      	mov	r0, r3
 800481c:	f7fc f978 	bl	8000b10 <__aeabi_fsub>
 8004820:	4603      	mov	r3, r0
 8004822:	4619      	mov	r1, r3
 8004824:	4628      	mov	r0, r5
 8004826:	f7fc fa7d 	bl	8000d24 <__aeabi_fmul>
 800482a:	4603      	mov	r3, r0
 800482c:	4619      	mov	r1, r3
 800482e:	4620      	mov	r0, r4
 8004830:	f7fc f970 	bl	8000b14 <__addsf3>
 8004834:	4603      	mov	r3, r0
 8004836:	461c      	mov	r4, r3
 8004838:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 800483c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800483e:	f7fc fa71 	bl	8000d24 <__aeabi_fmul>
 8004842:	4603      	mov	r3, r0
 8004844:	461d      	mov	r5, r3
 8004846:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800484a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800484c:	f7fc fa6a 	bl	8000d24 <__aeabi_fmul>
 8004850:	4603      	mov	r3, r0
 8004852:	4619      	mov	r1, r3
 8004854:	4628      	mov	r0, r5
 8004856:	f7fc f95d 	bl	8000b14 <__addsf3>
 800485a:	4603      	mov	r3, r0
 800485c:	461d      	mov	r5, r3
 800485e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8004860:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8004862:	f7fc f955 	bl	8000b10 <__aeabi_fsub>
 8004866:	4603      	mov	r3, r0
 8004868:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800486a:	4618      	mov	r0, r3
 800486c:	f7fc fa5a 	bl	8000d24 <__aeabi_fmul>
 8004870:	4603      	mov	r3, r0
 8004872:	461e      	mov	r6, r3
 8004874:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8004876:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800487a:	f7fc f94b 	bl	8000b14 <__addsf3>
 800487e:	4603      	mov	r3, r0
 8004880:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004882:	4618      	mov	r0, r3
 8004884:	f7fc fa4e 	bl	8000d24 <__aeabi_fmul>
 8004888:	4603      	mov	r3, r0
 800488a:	4619      	mov	r1, r3
 800488c:	4630      	mov	r0, r6
 800488e:	f7fc f941 	bl	8000b14 <__addsf3>
 8004892:	4603      	mov	r3, r0
 8004894:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8004898:	4618      	mov	r0, r3
 800489a:	f7fc f939 	bl	8000b10 <__aeabi_fsub>
 800489e:	4603      	mov	r3, r0
 80048a0:	4619      	mov	r1, r3
 80048a2:	4628      	mov	r0, r5
 80048a4:	f7fc fa3e 	bl	8000d24 <__aeabi_fmul>
 80048a8:	4603      	mov	r3, r0
 80048aa:	4619      	mov	r1, r3
 80048ac:	4620      	mov	r0, r4
 80048ae:	f7fc f931 	bl	8000b14 <__addsf3>
 80048b2:	4603      	mov	r3, r0
 80048b4:	461c      	mov	r4, r3
 80048b6:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 80048ba:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80048bc:	f7fc fa32 	bl	8000d24 <__aeabi_fmul>
 80048c0:	4603      	mov	r3, r0
 80048c2:	461d      	mov	r5, r3
 80048c4:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80048c8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80048ca:	f7fc fa2b 	bl	8000d24 <__aeabi_fmul>
 80048ce:	4603      	mov	r3, r0
 80048d0:	4619      	mov	r1, r3
 80048d2:	4628      	mov	r0, r5
 80048d4:	f7fc f91c 	bl	8000b10 <__aeabi_fsub>
 80048d8:	4603      	mov	r3, r0
 80048da:	461d      	mov	r5, r3
 80048dc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80048de:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80048e0:	f7fc f918 	bl	8000b14 <__addsf3>
 80048e4:	4603      	mov	r3, r0
 80048e6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80048e8:	4618      	mov	r0, r3
 80048ea:	f7fc fa1b 	bl	8000d24 <__aeabi_fmul>
 80048ee:	4603      	mov	r3, r0
 80048f0:	461e      	mov	r6, r3
 80048f2:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80048f4:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80048f8:	f7fc f90a 	bl	8000b10 <__aeabi_fsub>
 80048fc:	4603      	mov	r3, r0
 80048fe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004900:	4618      	mov	r0, r3
 8004902:	f7fc f905 	bl	8000b10 <__aeabi_fsub>
 8004906:	4603      	mov	r3, r0
 8004908:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800490a:	4618      	mov	r0, r3
 800490c:	f7fc fa0a 	bl	8000d24 <__aeabi_fmul>
 8004910:	4603      	mov	r3, r0
 8004912:	4619      	mov	r1, r3
 8004914:	4630      	mov	r0, r6
 8004916:	f7fc f8fd 	bl	8000b14 <__addsf3>
 800491a:	4603      	mov	r3, r0
 800491c:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8004920:	4618      	mov	r0, r3
 8004922:	f7fc f8f5 	bl	8000b10 <__aeabi_fsub>
 8004926:	4603      	mov	r3, r0
 8004928:	4619      	mov	r1, r3
 800492a:	4628      	mov	r0, r5
 800492c:	f7fc f9fa 	bl	8000d24 <__aeabi_fmul>
 8004930:	4603      	mov	r3, r0
 8004932:	4619      	mov	r1, r3
 8004934:	4620      	mov	r0, r4
 8004936:	f7fc f8ed 	bl	8000b14 <__addsf3>
 800493a:	4603      	mov	r3, r0
 800493c:	62bb      	str	r3, [r7, #40]	; 0x28
    s4 = _2q2 * (2.0f * q2q4 - _2q1q3 - ax) + _2q3 * (2.0f * q1q2 + _2q3q4 - ay) + (-_4bx * q4 + _2bz * q2) * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (-_2bx * q1 + _2bz * q3) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + _2bx * q2 * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 800493e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004940:	4619      	mov	r1, r3
 8004942:	4618      	mov	r0, r3
 8004944:	f7fc f8e6 	bl	8000b14 <__addsf3>
 8004948:	4603      	mov	r3, r0
 800494a:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800494e:	4618      	mov	r0, r3
 8004950:	f7fc f8de 	bl	8000b10 <__aeabi_fsub>
 8004954:	4603      	mov	r3, r0
 8004956:	68f9      	ldr	r1, [r7, #12]
 8004958:	4618      	mov	r0, r3
 800495a:	f7fc f8d9 	bl	8000b10 <__aeabi_fsub>
 800495e:	4603      	mov	r3, r0
 8004960:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8004964:	4618      	mov	r0, r3
 8004966:	f7fc f9dd 	bl	8000d24 <__aeabi_fmul>
 800496a:	4603      	mov	r3, r0
 800496c:	461c      	mov	r4, r3
 800496e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004972:	4619      	mov	r1, r3
 8004974:	4618      	mov	r0, r3
 8004976:	f7fc f8cd 	bl	8000b14 <__addsf3>
 800497a:	4603      	mov	r3, r0
 800497c:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8004980:	4618      	mov	r0, r3
 8004982:	f7fc f8c7 	bl	8000b14 <__addsf3>
 8004986:	4603      	mov	r3, r0
 8004988:	68b9      	ldr	r1, [r7, #8]
 800498a:	4618      	mov	r0, r3
 800498c:	f7fc f8c0 	bl	8000b10 <__aeabi_fsub>
 8004990:	4603      	mov	r3, r0
 8004992:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8004996:	4618      	mov	r0, r3
 8004998:	f7fc f9c4 	bl	8000d24 <__aeabi_fmul>
 800499c:	4603      	mov	r3, r0
 800499e:	4619      	mov	r1, r3
 80049a0:	4620      	mov	r0, r4
 80049a2:	f7fc f8b7 	bl	8000b14 <__addsf3>
 80049a6:	4603      	mov	r3, r0
 80049a8:	461c      	mov	r4, r3
 80049aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80049b0:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80049b4:	4618      	mov	r0, r3
 80049b6:	f7fc f9b5 	bl	8000d24 <__aeabi_fmul>
 80049ba:	4603      	mov	r3, r0
 80049bc:	461d      	mov	r5, r3
 80049be:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80049c2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80049c4:	f7fc f9ae 	bl	8000d24 <__aeabi_fmul>
 80049c8:	4603      	mov	r3, r0
 80049ca:	4619      	mov	r1, r3
 80049cc:	4628      	mov	r0, r5
 80049ce:	f7fc f8a1 	bl	8000b14 <__addsf3>
 80049d2:	4603      	mov	r3, r0
 80049d4:	461d      	mov	r5, r3
 80049d6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80049d8:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80049dc:	f7fc f898 	bl	8000b10 <__aeabi_fsub>
 80049e0:	4603      	mov	r3, r0
 80049e2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80049e4:	4618      	mov	r0, r3
 80049e6:	f7fc f893 	bl	8000b10 <__aeabi_fsub>
 80049ea:	4603      	mov	r3, r0
 80049ec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80049ee:	4618      	mov	r0, r3
 80049f0:	f7fc f998 	bl	8000d24 <__aeabi_fmul>
 80049f4:	4603      	mov	r3, r0
 80049f6:	461e      	mov	r6, r3
 80049f8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80049fa:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80049fc:	f7fc f888 	bl	8000b10 <__aeabi_fsub>
 8004a00:	4603      	mov	r3, r0
 8004a02:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004a04:	4618      	mov	r0, r3
 8004a06:	f7fc f98d 	bl	8000d24 <__aeabi_fmul>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	4630      	mov	r0, r6
 8004a10:	f7fc f880 	bl	8000b14 <__addsf3>
 8004a14:	4603      	mov	r3, r0
 8004a16:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f7fc f878 	bl	8000b10 <__aeabi_fsub>
 8004a20:	4603      	mov	r3, r0
 8004a22:	4619      	mov	r1, r3
 8004a24:	4628      	mov	r0, r5
 8004a26:	f7fc f97d 	bl	8000d24 <__aeabi_fmul>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	4620      	mov	r0, r4
 8004a30:	f7fc f870 	bl	8000b14 <__addsf3>
 8004a34:	4603      	mov	r3, r0
 8004a36:	461c      	mov	r4, r3
 8004a38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a3a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004a3e:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8004a42:	4618      	mov	r0, r3
 8004a44:	f7fc f96e 	bl	8000d24 <__aeabi_fmul>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	461d      	mov	r5, r3
 8004a4c:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004a50:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004a52:	f7fc f967 	bl	8000d24 <__aeabi_fmul>
 8004a56:	4603      	mov	r3, r0
 8004a58:	4619      	mov	r1, r3
 8004a5a:	4628      	mov	r0, r5
 8004a5c:	f7fc f85a 	bl	8000b14 <__addsf3>
 8004a60:	4603      	mov	r3, r0
 8004a62:	461d      	mov	r5, r3
 8004a64:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8004a66:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8004a68:	f7fc f852 	bl	8000b10 <__aeabi_fsub>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004a70:	4618      	mov	r0, r3
 8004a72:	f7fc f957 	bl	8000d24 <__aeabi_fmul>
 8004a76:	4603      	mov	r3, r0
 8004a78:	461e      	mov	r6, r3
 8004a7a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8004a7c:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8004a80:	f7fc f848 	bl	8000b14 <__addsf3>
 8004a84:	4603      	mov	r3, r0
 8004a86:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f7fc f94b 	bl	8000d24 <__aeabi_fmul>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	4619      	mov	r1, r3
 8004a92:	4630      	mov	r0, r6
 8004a94:	f7fc f83e 	bl	8000b14 <__addsf3>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f7fc f836 	bl	8000b10 <__aeabi_fsub>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	4628      	mov	r0, r5
 8004aaa:	f7fc f93b 	bl	8000d24 <__aeabi_fmul>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	4620      	mov	r0, r4
 8004ab4:	f7fc f82e 	bl	8000b14 <__addsf3>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	461c      	mov	r4, r3
 8004abc:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8004ac0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004ac2:	f7fc f92f 	bl	8000d24 <__aeabi_fmul>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	461d      	mov	r5, r3
 8004aca:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8004acc:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8004ace:	f7fc f821 	bl	8000b14 <__addsf3>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f7fc f924 	bl	8000d24 <__aeabi_fmul>
 8004adc:	4603      	mov	r3, r0
 8004ade:	461e      	mov	r6, r3
 8004ae0:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8004ae2:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8004ae6:	f7fc f813 	bl	8000b10 <__aeabi_fsub>
 8004aea:	4603      	mov	r3, r0
 8004aec:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004aee:	4618      	mov	r0, r3
 8004af0:	f7fc f80e 	bl	8000b10 <__aeabi_fsub>
 8004af4:	4603      	mov	r3, r0
 8004af6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004af8:	4618      	mov	r0, r3
 8004afa:	f7fc f913 	bl	8000d24 <__aeabi_fmul>
 8004afe:	4603      	mov	r3, r0
 8004b00:	4619      	mov	r1, r3
 8004b02:	4630      	mov	r0, r6
 8004b04:	f7fc f806 	bl	8000b14 <__addsf3>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f7fb fffe 	bl	8000b10 <__aeabi_fsub>
 8004b14:	4603      	mov	r3, r0
 8004b16:	4619      	mov	r1, r3
 8004b18:	4628      	mov	r0, r5
 8004b1a:	f7fc f903 	bl	8000d24 <__aeabi_fmul>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	4619      	mov	r1, r3
 8004b22:	4620      	mov	r0, r4
 8004b24:	f7fb fff6 	bl	8000b14 <__addsf3>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	627b      	str	r3, [r7, #36]	; 0x24
    norm = sqrtf(s1 * s1 + s2 * s2 + s3 * s3 + s4 * s4);    // normalise step magnitude
 8004b2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b30:	f7fc f8f8 	bl	8000d24 <__aeabi_fmul>
 8004b34:	4603      	mov	r3, r0
 8004b36:	461c      	mov	r4, r3
 8004b38:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004b3c:	f7fc f8f2 	bl	8000d24 <__aeabi_fmul>
 8004b40:	4603      	mov	r3, r0
 8004b42:	4619      	mov	r1, r3
 8004b44:	4620      	mov	r0, r4
 8004b46:	f7fb ffe5 	bl	8000b14 <__addsf3>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	461c      	mov	r4, r3
 8004b4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b52:	f7fc f8e7 	bl	8000d24 <__aeabi_fmul>
 8004b56:	4603      	mov	r3, r0
 8004b58:	4619      	mov	r1, r3
 8004b5a:	4620      	mov	r0, r4
 8004b5c:	f7fb ffda 	bl	8000b14 <__addsf3>
 8004b60:	4603      	mov	r3, r0
 8004b62:	461c      	mov	r4, r3
 8004b64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b66:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004b68:	f7fc f8dc 	bl	8000d24 <__aeabi_fmul>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	4619      	mov	r1, r3
 8004b70:	4620      	mov	r0, r4
 8004b72:	f7fb ffcf 	bl	8000b14 <__addsf3>
 8004b76:	4603      	mov	r3, r0
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f003 ffe7 	bl	8008b4c <sqrtf>
 8004b7e:	65f8      	str	r0, [r7, #92]	; 0x5c
    norm = 1.0f/norm;
 8004b80:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004b82:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004b86:	f7fc f981 	bl	8000e8c <__aeabi_fdiv>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	65fb      	str	r3, [r7, #92]	; 0x5c
    s1 *= norm;
 8004b8e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004b90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b92:	f7fc f8c7 	bl	8000d24 <__aeabi_fmul>
 8004b96:	4603      	mov	r3, r0
 8004b98:	633b      	str	r3, [r7, #48]	; 0x30
    s2 *= norm;
 8004b9a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004b9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004b9e:	f7fc f8c1 	bl	8000d24 <__aeabi_fmul>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
    s3 *= norm;
 8004ba6:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004ba8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004baa:	f7fc f8bb 	bl	8000d24 <__aeabi_fmul>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	62bb      	str	r3, [r7, #40]	; 0x28
    s4 *= norm;
 8004bb2:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004bb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004bb6:	f7fc f8b5 	bl	8000d24 <__aeabi_fmul>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	627b      	str	r3, [r7, #36]	; 0x24

    // Compute rate of change of quaternion
    qDot1 = 0.5f * (-q2 * gx - q3 * gy - q4 * gz) - beta * s1;
 8004bbe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004bc2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004bc6:	6839      	ldr	r1, [r7, #0]
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f7fc f8ab 	bl	8000d24 <__aeabi_fmul>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	461c      	mov	r4, r3
 8004bd2:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8004bd6:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8004bda:	f7fc f8a3 	bl	8000d24 <__aeabi_fmul>
 8004bde:	4603      	mov	r3, r0
 8004be0:	4619      	mov	r1, r3
 8004be2:	4620      	mov	r0, r4
 8004be4:	f7fb ff94 	bl	8000b10 <__aeabi_fsub>
 8004be8:	4603      	mov	r3, r0
 8004bea:	461c      	mov	r4, r3
 8004bec:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8004bf0:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8004bf4:	f7fc f896 	bl	8000d24 <__aeabi_fmul>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	4619      	mov	r1, r3
 8004bfc:	4620      	mov	r0, r4
 8004bfe:	f7fb ff87 	bl	8000b10 <__aeabi_fsub>
 8004c02:	4603      	mov	r3, r0
 8004c04:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f7fc f88b 	bl	8000d24 <__aeabi_fmul>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	461c      	mov	r4, r3
 8004c12:	4ba4      	ldr	r3, [pc, #656]	; (8004ea4 <QuaternionUpdate+0x1178>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f7fc f883 	bl	8000d24 <__aeabi_fmul>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	4619      	mov	r1, r3
 8004c22:	4620      	mov	r0, r4
 8004c24:	f7fb ff74 	bl	8000b10 <__aeabi_fsub>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	623b      	str	r3, [r7, #32]
    qDot2 = 0.5f * (q1 * gx + q3 * gz - q4 * gy) - beta * s2;
 8004c2c:	6839      	ldr	r1, [r7, #0]
 8004c2e:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8004c32:	f7fc f877 	bl	8000d24 <__aeabi_fmul>
 8004c36:	4603      	mov	r3, r0
 8004c38:	461c      	mov	r4, r3
 8004c3a:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8004c3e:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8004c42:	f7fc f86f 	bl	8000d24 <__aeabi_fmul>
 8004c46:	4603      	mov	r3, r0
 8004c48:	4619      	mov	r1, r3
 8004c4a:	4620      	mov	r0, r4
 8004c4c:	f7fb ff62 	bl	8000b14 <__addsf3>
 8004c50:	4603      	mov	r3, r0
 8004c52:	461c      	mov	r4, r3
 8004c54:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8004c58:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8004c5c:	f7fc f862 	bl	8000d24 <__aeabi_fmul>
 8004c60:	4603      	mov	r3, r0
 8004c62:	4619      	mov	r1, r3
 8004c64:	4620      	mov	r0, r4
 8004c66:	f7fb ff53 	bl	8000b10 <__aeabi_fsub>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004c70:	4618      	mov	r0, r3
 8004c72:	f7fc f857 	bl	8000d24 <__aeabi_fmul>
 8004c76:	4603      	mov	r3, r0
 8004c78:	461c      	mov	r4, r3
 8004c7a:	4b8a      	ldr	r3, [pc, #552]	; (8004ea4 <QuaternionUpdate+0x1178>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c80:	4618      	mov	r0, r3
 8004c82:	f7fc f84f 	bl	8000d24 <__aeabi_fmul>
 8004c86:	4603      	mov	r3, r0
 8004c88:	4619      	mov	r1, r3
 8004c8a:	4620      	mov	r0, r4
 8004c8c:	f7fb ff40 	bl	8000b10 <__aeabi_fsub>
 8004c90:	4603      	mov	r3, r0
 8004c92:	61fb      	str	r3, [r7, #28]
    qDot3 = 0.5f * (q1 * gy - q2 * gz + q4 * gx) - beta * s3;
 8004c94:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8004c98:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8004c9c:	f7fc f842 	bl	8000d24 <__aeabi_fmul>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	461c      	mov	r4, r3
 8004ca4:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8004ca8:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8004cac:	f7fc f83a 	bl	8000d24 <__aeabi_fmul>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	4620      	mov	r0, r4
 8004cb6:	f7fb ff2b 	bl	8000b10 <__aeabi_fsub>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	461c      	mov	r4, r3
 8004cbe:	6839      	ldr	r1, [r7, #0]
 8004cc0:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8004cc4:	f7fc f82e 	bl	8000d24 <__aeabi_fmul>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	4619      	mov	r1, r3
 8004ccc:	4620      	mov	r0, r4
 8004cce:	f7fb ff21 	bl	8000b14 <__addsf3>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f7fc f823 	bl	8000d24 <__aeabi_fmul>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	461c      	mov	r4, r3
 8004ce2:	4b70      	ldr	r3, [pc, #448]	; (8004ea4 <QuaternionUpdate+0x1178>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f7fc f81b 	bl	8000d24 <__aeabi_fmul>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	4620      	mov	r0, r4
 8004cf4:	f7fb ff0c 	bl	8000b10 <__aeabi_fsub>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	61bb      	str	r3, [r7, #24]
    qDot4 = 0.5f * (q1 * gz + q2 * gy - q3 * gx) - beta * s4;
 8004cfc:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8004d00:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8004d04:	f7fc f80e 	bl	8000d24 <__aeabi_fmul>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	461c      	mov	r4, r3
 8004d0c:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8004d10:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8004d14:	f7fc f806 	bl	8000d24 <__aeabi_fmul>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	4619      	mov	r1, r3
 8004d1c:	4620      	mov	r0, r4
 8004d1e:	f7fb fef9 	bl	8000b14 <__addsf3>
 8004d22:	4603      	mov	r3, r0
 8004d24:	461c      	mov	r4, r3
 8004d26:	6839      	ldr	r1, [r7, #0]
 8004d28:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8004d2c:	f7fb fffa 	bl	8000d24 <__aeabi_fmul>
 8004d30:	4603      	mov	r3, r0
 8004d32:	4619      	mov	r1, r3
 8004d34:	4620      	mov	r0, r4
 8004d36:	f7fb feeb 	bl	8000b10 <__aeabi_fsub>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004d40:	4618      	mov	r0, r3
 8004d42:	f7fb ffef 	bl	8000d24 <__aeabi_fmul>
 8004d46:	4603      	mov	r3, r0
 8004d48:	461c      	mov	r4, r3
 8004d4a:	4b56      	ldr	r3, [pc, #344]	; (8004ea4 <QuaternionUpdate+0x1178>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d50:	4618      	mov	r0, r3
 8004d52:	f7fb ffe7 	bl	8000d24 <__aeabi_fmul>
 8004d56:	4603      	mov	r3, r0
 8004d58:	4619      	mov	r1, r3
 8004d5a:	4620      	mov	r0, r4
 8004d5c:	f7fb fed8 	bl	8000b10 <__aeabi_fsub>
 8004d60:	4603      	mov	r3, r0
 8004d62:	617b      	str	r3, [r7, #20]

    // Integrate to yield quaternion
    q1 += qDot1 * deltat;
 8004d64:	4b50      	ldr	r3, [pc, #320]	; (8004ea8 <QuaternionUpdate+0x117c>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	6a39      	ldr	r1, [r7, #32]
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f7fb ffda 	bl	8000d24 <__aeabi_fmul>
 8004d70:	4603      	mov	r3, r0
 8004d72:	4619      	mov	r1, r3
 8004d74:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8004d78:	f7fb fecc 	bl	8000b14 <__addsf3>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    q2 += qDot2 * deltat;
 8004d82:	4b49      	ldr	r3, [pc, #292]	; (8004ea8 <QuaternionUpdate+0x117c>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	69f9      	ldr	r1, [r7, #28]
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f7fb ffcb 	bl	8000d24 <__aeabi_fmul>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	4619      	mov	r1, r3
 8004d92:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8004d96:	f7fb febd 	bl	8000b14 <__addsf3>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    q3 += qDot3 * deltat;
 8004da0:	4b41      	ldr	r3, [pc, #260]	; (8004ea8 <QuaternionUpdate+0x117c>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	69b9      	ldr	r1, [r7, #24]
 8004da6:	4618      	mov	r0, r3
 8004da8:	f7fb ffbc 	bl	8000d24 <__aeabi_fmul>
 8004dac:	4603      	mov	r3, r0
 8004dae:	4619      	mov	r1, r3
 8004db0:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8004db4:	f7fb feae 	bl	8000b14 <__addsf3>
 8004db8:	4603      	mov	r3, r0
 8004dba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    q4 += qDot4 * deltat;
 8004dbe:	4b3a      	ldr	r3, [pc, #232]	; (8004ea8 <QuaternionUpdate+0x117c>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	6979      	ldr	r1, [r7, #20]
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f7fb ffad 	bl	8000d24 <__aeabi_fmul>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	4619      	mov	r1, r3
 8004dce:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8004dd2:	f7fb fe9f 	bl	8000b14 <__addsf3>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    norm = sqrtf(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);    // normalise quaternion
 8004ddc:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8004de0:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8004de4:	f7fb ff9e 	bl	8000d24 <__aeabi_fmul>
 8004de8:	4603      	mov	r3, r0
 8004dea:	461c      	mov	r4, r3
 8004dec:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8004df0:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8004df4:	f7fb ff96 	bl	8000d24 <__aeabi_fmul>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	4619      	mov	r1, r3
 8004dfc:	4620      	mov	r0, r4
 8004dfe:	f7fb fe89 	bl	8000b14 <__addsf3>
 8004e02:	4603      	mov	r3, r0
 8004e04:	461c      	mov	r4, r3
 8004e06:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004e0a:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8004e0e:	f7fb ff89 	bl	8000d24 <__aeabi_fmul>
 8004e12:	4603      	mov	r3, r0
 8004e14:	4619      	mov	r1, r3
 8004e16:	4620      	mov	r0, r4
 8004e18:	f7fb fe7c 	bl	8000b14 <__addsf3>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	461c      	mov	r4, r3
 8004e20:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8004e24:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8004e28:	f7fb ff7c 	bl	8000d24 <__aeabi_fmul>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	4619      	mov	r1, r3
 8004e30:	4620      	mov	r0, r4
 8004e32:	f7fb fe6f 	bl	8000b14 <__addsf3>
 8004e36:	4603      	mov	r3, r0
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f003 fe87 	bl	8008b4c <sqrtf>
 8004e3e:	65f8      	str	r0, [r7, #92]	; 0x5c
    norm = 1.0f/norm;
 8004e40:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004e42:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004e46:	f7fc f821 	bl	8000e8c <__aeabi_fdiv>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	65fb      	str	r3, [r7, #92]	; 0x5c
    q[0] = q1 * norm;
 8004e4e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004e50:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8004e54:	f7fb ff66 	bl	8000d24 <__aeabi_fmul>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	4b13      	ldr	r3, [pc, #76]	; (8004eac <QuaternionUpdate+0x1180>)
 8004e5e:	601a      	str	r2, [r3, #0]
    q[1] = q2 * norm;
 8004e60:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004e62:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8004e66:	f7fb ff5d 	bl	8000d24 <__aeabi_fmul>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	4b0f      	ldr	r3, [pc, #60]	; (8004eac <QuaternionUpdate+0x1180>)
 8004e70:	605a      	str	r2, [r3, #4]
    q[2] = q3 * norm;
 8004e72:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004e74:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8004e78:	f7fb ff54 	bl	8000d24 <__aeabi_fmul>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	461a      	mov	r2, r3
 8004e80:	4b0a      	ldr	r3, [pc, #40]	; (8004eac <QuaternionUpdate+0x1180>)
 8004e82:	609a      	str	r2, [r3, #8]
    q[3] = q4 * norm;
 8004e84:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004e86:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8004e8a:	f7fb ff4b 	bl	8000d24 <__aeabi_fmul>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	461a      	mov	r2, r3
 8004e92:	4b06      	ldr	r3, [pc, #24]	; (8004eac <QuaternionUpdate+0x1180>)
 8004e94:	60da      	str	r2, [r3, #12]
 8004e96:	e002      	b.n	8004e9e <QuaternionUpdate+0x1172>
    if (norm == 0.0f) return; // handle NaN
 8004e98:	bf00      	nop
 8004e9a:	e000      	b.n	8004e9e <QuaternionUpdate+0x1172>
    if (norm == 0.0f) return; // handle NaN
 8004e9c:	bf00      	nop

}
 8004e9e:	37b4      	adds	r7, #180	; 0xb4
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ea4:	20000004 	.word	0x20000004
 8004ea8:	20004300 	.word	0x20004300
 8004eac:	20000008 	.word	0x20000008

08004eb0 <readSensor>:
 *  Created on: Aug 21, 2022
 *      Author: usuario
 */
#include "sharp.h"

 void readSensor(uint32_t *value){
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]

 }
 8004eb8:	bf00      	nop
 8004eba:	370c      	adds	r7, #12
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bc80      	pop	{r7}
 8004ec0:	4770      	bx	lr
	...

08004ec4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b085      	sub	sp, #20
 8004ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004eca:	4b15      	ldr	r3, [pc, #84]	; (8004f20 <HAL_MspInit+0x5c>)
 8004ecc:	699b      	ldr	r3, [r3, #24]
 8004ece:	4a14      	ldr	r2, [pc, #80]	; (8004f20 <HAL_MspInit+0x5c>)
 8004ed0:	f043 0301 	orr.w	r3, r3, #1
 8004ed4:	6193      	str	r3, [r2, #24]
 8004ed6:	4b12      	ldr	r3, [pc, #72]	; (8004f20 <HAL_MspInit+0x5c>)
 8004ed8:	699b      	ldr	r3, [r3, #24]
 8004eda:	f003 0301 	and.w	r3, r3, #1
 8004ede:	60bb      	str	r3, [r7, #8]
 8004ee0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004ee2:	4b0f      	ldr	r3, [pc, #60]	; (8004f20 <HAL_MspInit+0x5c>)
 8004ee4:	69db      	ldr	r3, [r3, #28]
 8004ee6:	4a0e      	ldr	r2, [pc, #56]	; (8004f20 <HAL_MspInit+0x5c>)
 8004ee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004eec:	61d3      	str	r3, [r2, #28]
 8004eee:	4b0c      	ldr	r3, [pc, #48]	; (8004f20 <HAL_MspInit+0x5c>)
 8004ef0:	69db      	ldr	r3, [r3, #28]
 8004ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ef6:	607b      	str	r3, [r7, #4]
 8004ef8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004efa:	4b0a      	ldr	r3, [pc, #40]	; (8004f24 <HAL_MspInit+0x60>)
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	60fb      	str	r3, [r7, #12]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004f06:	60fb      	str	r3, [r7, #12]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004f0e:	60fb      	str	r3, [r7, #12]
 8004f10:	4a04      	ldr	r2, [pc, #16]	; (8004f24 <HAL_MspInit+0x60>)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004f16:	bf00      	nop
 8004f18:	3714      	adds	r7, #20
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bc80      	pop	{r7}
 8004f1e:	4770      	bx	lr
 8004f20:	40021000 	.word	0x40021000
 8004f24:	40010000 	.word	0x40010000

08004f28 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b088      	sub	sp, #32
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f30:	f107 0310 	add.w	r3, r7, #16
 8004f34:	2200      	movs	r2, #0
 8004f36:	601a      	str	r2, [r3, #0]
 8004f38:	605a      	str	r2, [r3, #4]
 8004f3a:	609a      	str	r2, [r3, #8]
 8004f3c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a28      	ldr	r2, [pc, #160]	; (8004fe4 <HAL_ADC_MspInit+0xbc>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d149      	bne.n	8004fdc <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004f48:	4b27      	ldr	r3, [pc, #156]	; (8004fe8 <HAL_ADC_MspInit+0xc0>)
 8004f4a:	699b      	ldr	r3, [r3, #24]
 8004f4c:	4a26      	ldr	r2, [pc, #152]	; (8004fe8 <HAL_ADC_MspInit+0xc0>)
 8004f4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f52:	6193      	str	r3, [r2, #24]
 8004f54:	4b24      	ldr	r3, [pc, #144]	; (8004fe8 <HAL_ADC_MspInit+0xc0>)
 8004f56:	699b      	ldr	r3, [r3, #24]
 8004f58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f5c:	60fb      	str	r3, [r7, #12]
 8004f5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f60:	4b21      	ldr	r3, [pc, #132]	; (8004fe8 <HAL_ADC_MspInit+0xc0>)
 8004f62:	699b      	ldr	r3, [r3, #24]
 8004f64:	4a20      	ldr	r2, [pc, #128]	; (8004fe8 <HAL_ADC_MspInit+0xc0>)
 8004f66:	f043 0304 	orr.w	r3, r3, #4
 8004f6a:	6193      	str	r3, [r2, #24]
 8004f6c:	4b1e      	ldr	r3, [pc, #120]	; (8004fe8 <HAL_ADC_MspInit+0xc0>)
 8004f6e:	699b      	ldr	r3, [r3, #24]
 8004f70:	f003 0304 	and.w	r3, r3, #4
 8004f74:	60bb      	str	r3, [r7, #8]
 8004f76:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = CNY70_Pin|SHARP_D_Pin|SHARP_C_Pin|SHARP_I_Pin;
 8004f78:	230f      	movs	r3, #15
 8004f7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f80:	f107 0310 	add.w	r3, r7, #16
 8004f84:	4619      	mov	r1, r3
 8004f86:	4819      	ldr	r0, [pc, #100]	; (8004fec <HAL_ADC_MspInit+0xc4>)
 8004f88:	f001 f9b2 	bl	80062f0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8004f8c:	4b18      	ldr	r3, [pc, #96]	; (8004ff0 <HAL_ADC_MspInit+0xc8>)
 8004f8e:	4a19      	ldr	r2, [pc, #100]	; (8004ff4 <HAL_ADC_MspInit+0xcc>)
 8004f90:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004f92:	4b17      	ldr	r3, [pc, #92]	; (8004ff0 <HAL_ADC_MspInit+0xc8>)
 8004f94:	2200      	movs	r2, #0
 8004f96:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004f98:	4b15      	ldr	r3, [pc, #84]	; (8004ff0 <HAL_ADC_MspInit+0xc8>)
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004f9e:	4b14      	ldr	r3, [pc, #80]	; (8004ff0 <HAL_ADC_MspInit+0xc8>)
 8004fa0:	2280      	movs	r2, #128	; 0x80
 8004fa2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004fa4:	4b12      	ldr	r3, [pc, #72]	; (8004ff0 <HAL_ADC_MspInit+0xc8>)
 8004fa6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004faa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004fac:	4b10      	ldr	r3, [pc, #64]	; (8004ff0 <HAL_ADC_MspInit+0xc8>)
 8004fae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004fb2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004fb4:	4b0e      	ldr	r3, [pc, #56]	; (8004ff0 <HAL_ADC_MspInit+0xc8>)
 8004fb6:	2220      	movs	r2, #32
 8004fb8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004fba:	4b0d      	ldr	r3, [pc, #52]	; (8004ff0 <HAL_ADC_MspInit+0xc8>)
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004fc0:	480b      	ldr	r0, [pc, #44]	; (8004ff0 <HAL_ADC_MspInit+0xc8>)
 8004fc2:	f000 ffa7 	bl	8005f14 <HAL_DMA_Init>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d001      	beq.n	8004fd0 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8004fcc:	f7fc fba2 	bl	8001714 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a07      	ldr	r2, [pc, #28]	; (8004ff0 <HAL_ADC_MspInit+0xc8>)
 8004fd4:	621a      	str	r2, [r3, #32]
 8004fd6:	4a06      	ldr	r2, [pc, #24]	; (8004ff0 <HAL_ADC_MspInit+0xc8>)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004fdc:	bf00      	nop
 8004fde:	3720      	adds	r7, #32
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}
 8004fe4:	40012400 	.word	0x40012400
 8004fe8:	40021000 	.word	0x40021000
 8004fec:	40010800 	.word	0x40010800
 8004ff0:	200000d4 	.word	0x200000d4
 8004ff4:	40020008 	.word	0x40020008

08004ff8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b088      	sub	sp, #32
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005000:	f107 0310 	add.w	r3, r7, #16
 8005004:	2200      	movs	r2, #0
 8005006:	601a      	str	r2, [r3, #0]
 8005008:	605a      	str	r2, [r3, #4]
 800500a:	609a      	str	r2, [r3, #8]
 800500c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a16      	ldr	r2, [pc, #88]	; (800506c <HAL_I2C_MspInit+0x74>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d124      	bne.n	8005062 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005018:	4b15      	ldr	r3, [pc, #84]	; (8005070 <HAL_I2C_MspInit+0x78>)
 800501a:	699b      	ldr	r3, [r3, #24]
 800501c:	4a14      	ldr	r2, [pc, #80]	; (8005070 <HAL_I2C_MspInit+0x78>)
 800501e:	f043 0308 	orr.w	r3, r3, #8
 8005022:	6193      	str	r3, [r2, #24]
 8005024:	4b12      	ldr	r3, [pc, #72]	; (8005070 <HAL_I2C_MspInit+0x78>)
 8005026:	699b      	ldr	r3, [r3, #24]
 8005028:	f003 0308 	and.w	r3, r3, #8
 800502c:	60fb      	str	r3, [r7, #12]
 800502e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 8005030:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005034:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005036:	2312      	movs	r3, #18
 8005038:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800503a:	2303      	movs	r3, #3
 800503c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800503e:	f107 0310 	add.w	r3, r7, #16
 8005042:	4619      	mov	r1, r3
 8005044:	480b      	ldr	r0, [pc, #44]	; (8005074 <HAL_I2C_MspInit+0x7c>)
 8005046:	f001 f953 	bl	80062f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800504a:	4b09      	ldr	r3, [pc, #36]	; (8005070 <HAL_I2C_MspInit+0x78>)
 800504c:	69db      	ldr	r3, [r3, #28]
 800504e:	4a08      	ldr	r2, [pc, #32]	; (8005070 <HAL_I2C_MspInit+0x78>)
 8005050:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005054:	61d3      	str	r3, [r2, #28]
 8005056:	4b06      	ldr	r3, [pc, #24]	; (8005070 <HAL_I2C_MspInit+0x78>)
 8005058:	69db      	ldr	r3, [r3, #28]
 800505a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800505e:	60bb      	str	r3, [r7, #8]
 8005060:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8005062:	bf00      	nop
 8005064:	3720      	adds	r7, #32
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
 800506a:	bf00      	nop
 800506c:	40005800 	.word	0x40005800
 8005070:	40021000 	.word	0x40021000
 8005074:	40010c00 	.word	0x40010c00

08005078 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b088      	sub	sp, #32
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005080:	f107 0310 	add.w	r3, r7, #16
 8005084:	2200      	movs	r2, #0
 8005086:	601a      	str	r2, [r3, #0]
 8005088:	605a      	str	r2, [r3, #4]
 800508a:	609a      	str	r2, [r3, #8]
 800508c:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a16      	ldr	r2, [pc, #88]	; (80050ec <HAL_TIM_Encoder_MspInit+0x74>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d124      	bne.n	80050e2 <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005098:	4b15      	ldr	r3, [pc, #84]	; (80050f0 <HAL_TIM_Encoder_MspInit+0x78>)
 800509a:	699b      	ldr	r3, [r3, #24]
 800509c:	4a14      	ldr	r2, [pc, #80]	; (80050f0 <HAL_TIM_Encoder_MspInit+0x78>)
 800509e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80050a2:	6193      	str	r3, [r2, #24]
 80050a4:	4b12      	ldr	r3, [pc, #72]	; (80050f0 <HAL_TIM_Encoder_MspInit+0x78>)
 80050a6:	699b      	ldr	r3, [r3, #24]
 80050a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050ac:	60fb      	str	r3, [r7, #12]
 80050ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050b0:	4b0f      	ldr	r3, [pc, #60]	; (80050f0 <HAL_TIM_Encoder_MspInit+0x78>)
 80050b2:	699b      	ldr	r3, [r3, #24]
 80050b4:	4a0e      	ldr	r2, [pc, #56]	; (80050f0 <HAL_TIM_Encoder_MspInit+0x78>)
 80050b6:	f043 0304 	orr.w	r3, r3, #4
 80050ba:	6193      	str	r3, [r2, #24]
 80050bc:	4b0c      	ldr	r3, [pc, #48]	; (80050f0 <HAL_TIM_Encoder_MspInit+0x78>)
 80050be:	699b      	ldr	r3, [r3, #24]
 80050c0:	f003 0304 	and.w	r3, r3, #4
 80050c4:	60bb      	str	r3, [r7, #8]
 80050c6:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = MB2_Pin|MB1_Pin;
 80050c8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80050cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80050ce:	2300      	movs	r3, #0
 80050d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050d2:	2300      	movs	r3, #0
 80050d4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050d6:	f107 0310 	add.w	r3, r7, #16
 80050da:	4619      	mov	r1, r3
 80050dc:	4805      	ldr	r0, [pc, #20]	; (80050f4 <HAL_TIM_Encoder_MspInit+0x7c>)
 80050de:	f001 f907 	bl	80062f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80050e2:	bf00      	nop
 80050e4:	3720      	adds	r7, #32
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	40012c00 	.word	0x40012c00
 80050f0:	40021000 	.word	0x40021000
 80050f4:	40010800 	.word	0x40010800

080050f8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b08a      	sub	sp, #40	; 0x28
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005100:	f107 0318 	add.w	r3, r7, #24
 8005104:	2200      	movs	r2, #0
 8005106:	601a      	str	r2, [r3, #0]
 8005108:	605a      	str	r2, [r3, #4]
 800510a:	609a      	str	r2, [r3, #8]
 800510c:	60da      	str	r2, [r3, #12]
  if(htim_pwm->Instance==TIM3)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a1e      	ldr	r2, [pc, #120]	; (800518c <HAL_TIM_PWM_MspInit+0x94>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d10c      	bne.n	8005132 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005118:	4b1d      	ldr	r3, [pc, #116]	; (8005190 <HAL_TIM_PWM_MspInit+0x98>)
 800511a:	69db      	ldr	r3, [r3, #28]
 800511c:	4a1c      	ldr	r2, [pc, #112]	; (8005190 <HAL_TIM_PWM_MspInit+0x98>)
 800511e:	f043 0302 	orr.w	r3, r3, #2
 8005122:	61d3      	str	r3, [r2, #28]
 8005124:	4b1a      	ldr	r3, [pc, #104]	; (8005190 <HAL_TIM_PWM_MspInit+0x98>)
 8005126:	69db      	ldr	r3, [r3, #28]
 8005128:	f003 0302 	and.w	r3, r3, #2
 800512c:	617b      	str	r3, [r7, #20]
 800512e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8005130:	e028      	b.n	8005184 <HAL_TIM_PWM_MspInit+0x8c>
  else if(htim_pwm->Instance==TIM4)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a17      	ldr	r2, [pc, #92]	; (8005194 <HAL_TIM_PWM_MspInit+0x9c>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d123      	bne.n	8005184 <HAL_TIM_PWM_MspInit+0x8c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800513c:	4b14      	ldr	r3, [pc, #80]	; (8005190 <HAL_TIM_PWM_MspInit+0x98>)
 800513e:	69db      	ldr	r3, [r3, #28]
 8005140:	4a13      	ldr	r2, [pc, #76]	; (8005190 <HAL_TIM_PWM_MspInit+0x98>)
 8005142:	f043 0304 	orr.w	r3, r3, #4
 8005146:	61d3      	str	r3, [r2, #28]
 8005148:	4b11      	ldr	r3, [pc, #68]	; (8005190 <HAL_TIM_PWM_MspInit+0x98>)
 800514a:	69db      	ldr	r3, [r3, #28]
 800514c:	f003 0304 	and.w	r3, r3, #4
 8005150:	613b      	str	r3, [r7, #16]
 8005152:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005154:	4b0e      	ldr	r3, [pc, #56]	; (8005190 <HAL_TIM_PWM_MspInit+0x98>)
 8005156:	699b      	ldr	r3, [r3, #24]
 8005158:	4a0d      	ldr	r2, [pc, #52]	; (8005190 <HAL_TIM_PWM_MspInit+0x98>)
 800515a:	f043 0308 	orr.w	r3, r3, #8
 800515e:	6193      	str	r3, [r2, #24]
 8005160:	4b0b      	ldr	r3, [pc, #44]	; (8005190 <HAL_TIM_PWM_MspInit+0x98>)
 8005162:	699b      	ldr	r3, [r3, #24]
 8005164:	f003 0308 	and.w	r3, r3, #8
 8005168:	60fb      	str	r3, [r7, #12]
 800516a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MA2_Pin|MA1_Pin;
 800516c:	23c0      	movs	r3, #192	; 0xc0
 800516e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005170:	2300      	movs	r3, #0
 8005172:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005174:	2300      	movs	r3, #0
 8005176:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005178:	f107 0318 	add.w	r3, r7, #24
 800517c:	4619      	mov	r1, r3
 800517e:	4806      	ldr	r0, [pc, #24]	; (8005198 <HAL_TIM_PWM_MspInit+0xa0>)
 8005180:	f001 f8b6 	bl	80062f0 <HAL_GPIO_Init>
}
 8005184:	bf00      	nop
 8005186:	3728      	adds	r7, #40	; 0x28
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}
 800518c:	40000400 	.word	0x40000400
 8005190:	40021000 	.word	0x40021000
 8005194:	40000800 	.word	0x40000800
 8005198:	40010c00 	.word	0x40010c00

0800519c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b08a      	sub	sp, #40	; 0x28
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051a4:	f107 0314 	add.w	r3, r7, #20
 80051a8:	2200      	movs	r2, #0
 80051aa:	601a      	str	r2, [r3, #0]
 80051ac:	605a      	str	r2, [r3, #4]
 80051ae:	609a      	str	r2, [r3, #8]
 80051b0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a28      	ldr	r2, [pc, #160]	; (8005258 <HAL_TIM_MspPostInit+0xbc>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d12a      	bne.n	8005212 <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80051bc:	4b27      	ldr	r3, [pc, #156]	; (800525c <HAL_TIM_MspPostInit+0xc0>)
 80051be:	699b      	ldr	r3, [r3, #24]
 80051c0:	4a26      	ldr	r2, [pc, #152]	; (800525c <HAL_TIM_MspPostInit+0xc0>)
 80051c2:	f043 0308 	orr.w	r3, r3, #8
 80051c6:	6193      	str	r3, [r2, #24]
 80051c8:	4b24      	ldr	r3, [pc, #144]	; (800525c <HAL_TIM_MspPostInit+0xc0>)
 80051ca:	699b      	ldr	r3, [r3, #24]
 80051cc:	f003 0308 	and.w	r3, r3, #8
 80051d0:	613b      	str	r3, [r7, #16]
 80051d2:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = PWMA_Pin;
 80051d4:	2320      	movs	r3, #32
 80051d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051d8:	2302      	movs	r3, #2
 80051da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051dc:	2302      	movs	r3, #2
 80051de:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(PWMA_GPIO_Port, &GPIO_InitStruct);
 80051e0:	f107 0314 	add.w	r3, r7, #20
 80051e4:	4619      	mov	r1, r3
 80051e6:	481e      	ldr	r0, [pc, #120]	; (8005260 <HAL_TIM_MspPostInit+0xc4>)
 80051e8:	f001 f882 	bl	80062f0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 80051ec:	4b1d      	ldr	r3, [pc, #116]	; (8005264 <HAL_TIM_MspPostInit+0xc8>)
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	627b      	str	r3, [r7, #36]	; 0x24
 80051f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80051f8:	627b      	str	r3, [r7, #36]	; 0x24
 80051fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8005200:	627b      	str	r3, [r7, #36]	; 0x24
 8005202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005204:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005208:	627b      	str	r3, [r7, #36]	; 0x24
 800520a:	4a16      	ldr	r2, [pc, #88]	; (8005264 <HAL_TIM_MspPostInit+0xc8>)
 800520c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520e:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8005210:	e01d      	b.n	800524e <HAL_TIM_MspPostInit+0xb2>
  else if(htim->Instance==TIM4)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a14      	ldr	r2, [pc, #80]	; (8005268 <HAL_TIM_MspPostInit+0xcc>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d118      	bne.n	800524e <HAL_TIM_MspPostInit+0xb2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800521c:	4b0f      	ldr	r3, [pc, #60]	; (800525c <HAL_TIM_MspPostInit+0xc0>)
 800521e:	699b      	ldr	r3, [r3, #24]
 8005220:	4a0e      	ldr	r2, [pc, #56]	; (800525c <HAL_TIM_MspPostInit+0xc0>)
 8005222:	f043 0308 	orr.w	r3, r3, #8
 8005226:	6193      	str	r3, [r2, #24]
 8005228:	4b0c      	ldr	r3, [pc, #48]	; (800525c <HAL_TIM_MspPostInit+0xc0>)
 800522a:	699b      	ldr	r3, [r3, #24]
 800522c:	f003 0308 	and.w	r3, r3, #8
 8005230:	60fb      	str	r3, [r7, #12]
 8005232:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWMAB8_Pin|PWMB_Pin;
 8005234:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005238:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800523a:	2302      	movs	r3, #2
 800523c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800523e:	2302      	movs	r3, #2
 8005240:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005242:	f107 0314 	add.w	r3, r7, #20
 8005246:	4619      	mov	r1, r3
 8005248:	4805      	ldr	r0, [pc, #20]	; (8005260 <HAL_TIM_MspPostInit+0xc4>)
 800524a:	f001 f851 	bl	80062f0 <HAL_GPIO_Init>
}
 800524e:	bf00      	nop
 8005250:	3728      	adds	r7, #40	; 0x28
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
 8005256:	bf00      	nop
 8005258:	40000400 	.word	0x40000400
 800525c:	40021000 	.word	0x40021000
 8005260:	40010c00 	.word	0x40010c00
 8005264:	40010000 	.word	0x40010000
 8005268:	40000800 	.word	0x40000800

0800526c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800526c:	b480      	push	{r7}
 800526e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005270:	e7fe      	b.n	8005270 <NMI_Handler+0x4>

08005272 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005272:	b480      	push	{r7}
 8005274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005276:	e7fe      	b.n	8005276 <HardFault_Handler+0x4>

08005278 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005278:	b480      	push	{r7}
 800527a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800527c:	e7fe      	b.n	800527c <MemManage_Handler+0x4>

0800527e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800527e:	b480      	push	{r7}
 8005280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005282:	e7fe      	b.n	8005282 <BusFault_Handler+0x4>

08005284 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005284:	b480      	push	{r7}
 8005286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005288:	e7fe      	b.n	8005288 <UsageFault_Handler+0x4>

0800528a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800528a:	b480      	push	{r7}
 800528c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800528e:	bf00      	nop
 8005290:	46bd      	mov	sp, r7
 8005292:	bc80      	pop	{r7}
 8005294:	4770      	bx	lr

08005296 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005296:	b480      	push	{r7}
 8005298:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800529a:	bf00      	nop
 800529c:	46bd      	mov	sp, r7
 800529e:	bc80      	pop	{r7}
 80052a0:	4770      	bx	lr

080052a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80052a2:	b480      	push	{r7}
 80052a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80052a6:	bf00      	nop
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bc80      	pop	{r7}
 80052ac:	4770      	bx	lr

080052ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80052ae:	b580      	push	{r7, lr}
 80052b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80052b2:	f000 f91f 	bl	80054f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80052b6:	bf00      	nop
 80052b8:	bd80      	pop	{r7, pc}
	...

080052bc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80052c0:	4802      	ldr	r0, [pc, #8]	; (80052cc <DMA1_Channel1_IRQHandler+0x10>)
 80052c2:	f000 fee1 	bl	8006088 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80052c6:	bf00      	nop
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	200000d4 	.word	0x200000d4

080052d0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b086      	sub	sp, #24
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80052dc:	2300      	movs	r3, #0
 80052de:	617b      	str	r3, [r7, #20]
 80052e0:	e00a      	b.n	80052f8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80052e2:	f3af 8000 	nop.w
 80052e6:	4601      	mov	r1, r0
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	1c5a      	adds	r2, r3, #1
 80052ec:	60ba      	str	r2, [r7, #8]
 80052ee:	b2ca      	uxtb	r2, r1
 80052f0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	3301      	adds	r3, #1
 80052f6:	617b      	str	r3, [r7, #20]
 80052f8:	697a      	ldr	r2, [r7, #20]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	dbf0      	blt.n	80052e2 <_read+0x12>
	}

return len;
 8005300:	687b      	ldr	r3, [r7, #4]
}
 8005302:	4618      	mov	r0, r3
 8005304:	3718      	adds	r7, #24
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}

0800530a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800530a:	b580      	push	{r7, lr}
 800530c:	b086      	sub	sp, #24
 800530e:	af00      	add	r7, sp, #0
 8005310:	60f8      	str	r0, [r7, #12]
 8005312:	60b9      	str	r1, [r7, #8]
 8005314:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005316:	2300      	movs	r3, #0
 8005318:	617b      	str	r3, [r7, #20]
 800531a:	e009      	b.n	8005330 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	1c5a      	adds	r2, r3, #1
 8005320:	60ba      	str	r2, [r7, #8]
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	4618      	mov	r0, r3
 8005326:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	3301      	adds	r3, #1
 800532e:	617b      	str	r3, [r7, #20]
 8005330:	697a      	ldr	r2, [r7, #20]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	429a      	cmp	r2, r3
 8005336:	dbf1      	blt.n	800531c <_write+0x12>
	}
	return len;
 8005338:	687b      	ldr	r3, [r7, #4]
}
 800533a:	4618      	mov	r0, r3
 800533c:	3718      	adds	r7, #24
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}

08005342 <_close>:

int _close(int file)
{
 8005342:	b480      	push	{r7}
 8005344:	b083      	sub	sp, #12
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
	return -1;
 800534a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800534e:	4618      	mov	r0, r3
 8005350:	370c      	adds	r7, #12
 8005352:	46bd      	mov	sp, r7
 8005354:	bc80      	pop	{r7}
 8005356:	4770      	bx	lr

08005358 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005358:	b480      	push	{r7}
 800535a:	b083      	sub	sp, #12
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005368:	605a      	str	r2, [r3, #4]
	return 0;
 800536a:	2300      	movs	r3, #0
}
 800536c:	4618      	mov	r0, r3
 800536e:	370c      	adds	r7, #12
 8005370:	46bd      	mov	sp, r7
 8005372:	bc80      	pop	{r7}
 8005374:	4770      	bx	lr

08005376 <_isatty>:

int _isatty(int file)
{
 8005376:	b480      	push	{r7}
 8005378:	b083      	sub	sp, #12
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
	return 1;
 800537e:	2301      	movs	r3, #1
}
 8005380:	4618      	mov	r0, r3
 8005382:	370c      	adds	r7, #12
 8005384:	46bd      	mov	sp, r7
 8005386:	bc80      	pop	{r7}
 8005388:	4770      	bx	lr

0800538a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800538a:	b480      	push	{r7}
 800538c:	b085      	sub	sp, #20
 800538e:	af00      	add	r7, sp, #0
 8005390:	60f8      	str	r0, [r7, #12]
 8005392:	60b9      	str	r1, [r7, #8]
 8005394:	607a      	str	r2, [r7, #4]
	return 0;
 8005396:	2300      	movs	r3, #0
}
 8005398:	4618      	mov	r0, r3
 800539a:	3714      	adds	r7, #20
 800539c:	46bd      	mov	sp, r7
 800539e:	bc80      	pop	{r7}
 80053a0:	4770      	bx	lr
	...

080053a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b086      	sub	sp, #24
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80053ac:	4a14      	ldr	r2, [pc, #80]	; (8005400 <_sbrk+0x5c>)
 80053ae:	4b15      	ldr	r3, [pc, #84]	; (8005404 <_sbrk+0x60>)
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80053b8:	4b13      	ldr	r3, [pc, #76]	; (8005408 <_sbrk+0x64>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d102      	bne.n	80053c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80053c0:	4b11      	ldr	r3, [pc, #68]	; (8005408 <_sbrk+0x64>)
 80053c2:	4a12      	ldr	r2, [pc, #72]	; (800540c <_sbrk+0x68>)
 80053c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80053c6:	4b10      	ldr	r3, [pc, #64]	; (8005408 <_sbrk+0x64>)
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4413      	add	r3, r2
 80053ce:	693a      	ldr	r2, [r7, #16]
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d207      	bcs.n	80053e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80053d4:	f004 fd7e 	bl	8009ed4 <__errno>
 80053d8:	4603      	mov	r3, r0
 80053da:	220c      	movs	r2, #12
 80053dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80053de:	f04f 33ff 	mov.w	r3, #4294967295
 80053e2:	e009      	b.n	80053f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80053e4:	4b08      	ldr	r3, [pc, #32]	; (8005408 <_sbrk+0x64>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80053ea:	4b07      	ldr	r3, [pc, #28]	; (8005408 <_sbrk+0x64>)
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4413      	add	r3, r2
 80053f2:	4a05      	ldr	r2, [pc, #20]	; (8005408 <_sbrk+0x64>)
 80053f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80053f6:	68fb      	ldr	r3, [r7, #12]
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3718      	adds	r7, #24
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}
 8005400:	20005000 	.word	0x20005000
 8005404:	00000400 	.word	0x00000400
 8005408:	20004354 	.word	0x20004354
 800540c:	20004370 	.word	0x20004370

08005410 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005410:	b480      	push	{r7}
 8005412:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005414:	bf00      	nop
 8005416:	46bd      	mov	sp, r7
 8005418:	bc80      	pop	{r7}
 800541a:	4770      	bx	lr

0800541c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800541c:	480c      	ldr	r0, [pc, #48]	; (8005450 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800541e:	490d      	ldr	r1, [pc, #52]	; (8005454 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005420:	4a0d      	ldr	r2, [pc, #52]	; (8005458 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005422:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005424:	e002      	b.n	800542c <LoopCopyDataInit>

08005426 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005426:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005428:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800542a:	3304      	adds	r3, #4

0800542c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800542c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800542e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005430:	d3f9      	bcc.n	8005426 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005432:	4a0a      	ldr	r2, [pc, #40]	; (800545c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005434:	4c0a      	ldr	r4, [pc, #40]	; (8005460 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005436:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005438:	e001      	b.n	800543e <LoopFillZerobss>

0800543a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800543a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800543c:	3204      	adds	r2, #4

0800543e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800543e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005440:	d3fb      	bcc.n	800543a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005442:	f7ff ffe5 	bl	8005410 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005446:	f004 fd4b 	bl	8009ee0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800544a:	f7fb fe47 	bl	80010dc <main>
  bx lr
 800544e:	4770      	bx	lr
  ldr r0, =_sdata
 8005450:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005454:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8005458:	0800b318 	.word	0x0800b318
  ldr r2, =_sbss
 800545c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8005460:	2000436c 	.word	0x2000436c

08005464 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005464:	e7fe      	b.n	8005464 <ADC1_2_IRQHandler>
	...

08005468 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800546c:	4b08      	ldr	r3, [pc, #32]	; (8005490 <HAL_Init+0x28>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a07      	ldr	r2, [pc, #28]	; (8005490 <HAL_Init+0x28>)
 8005472:	f043 0310 	orr.w	r3, r3, #16
 8005476:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005478:	2003      	movs	r0, #3
 800547a:	f000 fd09 	bl	8005e90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800547e:	200f      	movs	r0, #15
 8005480:	f000 f808 	bl	8005494 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005484:	f7ff fd1e 	bl	8004ec4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005488:	2300      	movs	r3, #0
}
 800548a:	4618      	mov	r0, r3
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	40022000 	.word	0x40022000

08005494 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b082      	sub	sp, #8
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800549c:	4b12      	ldr	r3, [pc, #72]	; (80054e8 <HAL_InitTick+0x54>)
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	4b12      	ldr	r3, [pc, #72]	; (80054ec <HAL_InitTick+0x58>)
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	4619      	mov	r1, r3
 80054a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80054aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80054ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80054b2:	4618      	mov	r0, r3
 80054b4:	f000 fd21 	bl	8005efa <HAL_SYSTICK_Config>
 80054b8:	4603      	mov	r3, r0
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d001      	beq.n	80054c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e00e      	b.n	80054e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2b0f      	cmp	r3, #15
 80054c6:	d80a      	bhi.n	80054de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80054c8:	2200      	movs	r2, #0
 80054ca:	6879      	ldr	r1, [r7, #4]
 80054cc:	f04f 30ff 	mov.w	r0, #4294967295
 80054d0:	f000 fce9 	bl	8005ea6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80054d4:	4a06      	ldr	r2, [pc, #24]	; (80054f0 <HAL_InitTick+0x5c>)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80054da:	2300      	movs	r3, #0
 80054dc:	e000      	b.n	80054e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3708      	adds	r7, #8
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	20000018 	.word	0x20000018
 80054ec:	20000020 	.word	0x20000020
 80054f0:	2000001c 	.word	0x2000001c

080054f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80054f4:	b480      	push	{r7}
 80054f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80054f8:	4b05      	ldr	r3, [pc, #20]	; (8005510 <HAL_IncTick+0x1c>)
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	461a      	mov	r2, r3
 80054fe:	4b05      	ldr	r3, [pc, #20]	; (8005514 <HAL_IncTick+0x20>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4413      	add	r3, r2
 8005504:	4a03      	ldr	r2, [pc, #12]	; (8005514 <HAL_IncTick+0x20>)
 8005506:	6013      	str	r3, [r2, #0]
}
 8005508:	bf00      	nop
 800550a:	46bd      	mov	sp, r7
 800550c:	bc80      	pop	{r7}
 800550e:	4770      	bx	lr
 8005510:	20000020 	.word	0x20000020
 8005514:	20004358 	.word	0x20004358

08005518 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005518:	b480      	push	{r7}
 800551a:	af00      	add	r7, sp, #0
  return uwTick;
 800551c:	4b02      	ldr	r3, [pc, #8]	; (8005528 <HAL_GetTick+0x10>)
 800551e:	681b      	ldr	r3, [r3, #0]
}
 8005520:	4618      	mov	r0, r3
 8005522:	46bd      	mov	sp, r7
 8005524:	bc80      	pop	{r7}
 8005526:	4770      	bx	lr
 8005528:	20004358 	.word	0x20004358

0800552c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b084      	sub	sp, #16
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005534:	f7ff fff0 	bl	8005518 <HAL_GetTick>
 8005538:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005544:	d005      	beq.n	8005552 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005546:	4b0a      	ldr	r3, [pc, #40]	; (8005570 <HAL_Delay+0x44>)
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	461a      	mov	r2, r3
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	4413      	add	r3, r2
 8005550:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005552:	bf00      	nop
 8005554:	f7ff ffe0 	bl	8005518 <HAL_GetTick>
 8005558:	4602      	mov	r2, r0
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	68fa      	ldr	r2, [r7, #12]
 8005560:	429a      	cmp	r2, r3
 8005562:	d8f7      	bhi.n	8005554 <HAL_Delay+0x28>
  {
  }
}
 8005564:	bf00      	nop
 8005566:	bf00      	nop
 8005568:	3710      	adds	r7, #16
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}
 800556e:	bf00      	nop
 8005570:	20000020 	.word	0x20000020

08005574 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b086      	sub	sp, #24
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800557c:	2300      	movs	r3, #0
 800557e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8005580:	2300      	movs	r3, #0
 8005582:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8005584:	2300      	movs	r3, #0
 8005586:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8005588:	2300      	movs	r3, #0
 800558a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d101      	bne.n	8005596 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e0be      	b.n	8005714 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d109      	bne.n	80055b8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f7ff fcb8 	bl	8004f28 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f000 faf5 	bl	8005ba8 <ADC_ConversionStop_Disable>
 80055be:	4603      	mov	r3, r0
 80055c0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055c6:	f003 0310 	and.w	r3, r3, #16
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	f040 8099 	bne.w	8005702 <HAL_ADC_Init+0x18e>
 80055d0:	7dfb      	ldrb	r3, [r7, #23]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	f040 8095 	bne.w	8005702 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055dc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80055e0:	f023 0302 	bic.w	r3, r3, #2
 80055e4:	f043 0202 	orr.w	r2, r3, #2
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80055f4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	7b1b      	ldrb	r3, [r3, #12]
 80055fa:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80055fc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80055fe:	68ba      	ldr	r2, [r7, #8]
 8005600:	4313      	orrs	r3, r2
 8005602:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800560c:	d003      	beq.n	8005616 <HAL_ADC_Init+0xa2>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	2b01      	cmp	r3, #1
 8005614:	d102      	bne.n	800561c <HAL_ADC_Init+0xa8>
 8005616:	f44f 7380 	mov.w	r3, #256	; 0x100
 800561a:	e000      	b.n	800561e <HAL_ADC_Init+0xaa>
 800561c:	2300      	movs	r3, #0
 800561e:	693a      	ldr	r2, [r7, #16]
 8005620:	4313      	orrs	r3, r2
 8005622:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	7d1b      	ldrb	r3, [r3, #20]
 8005628:	2b01      	cmp	r3, #1
 800562a:	d119      	bne.n	8005660 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	7b1b      	ldrb	r3, [r3, #12]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d109      	bne.n	8005648 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	699b      	ldr	r3, [r3, #24]
 8005638:	3b01      	subs	r3, #1
 800563a:	035a      	lsls	r2, r3, #13
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	4313      	orrs	r3, r2
 8005640:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005644:	613b      	str	r3, [r7, #16]
 8005646:	e00b      	b.n	8005660 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800564c:	f043 0220 	orr.w	r2, r3, #32
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005658:	f043 0201 	orr.w	r2, r3, #1
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	693a      	ldr	r2, [r7, #16]
 8005670:	430a      	orrs	r2, r1
 8005672:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	689a      	ldr	r2, [r3, #8]
 800567a:	4b28      	ldr	r3, [pc, #160]	; (800571c <HAL_ADC_Init+0x1a8>)
 800567c:	4013      	ands	r3, r2
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	6812      	ldr	r2, [r2, #0]
 8005682:	68b9      	ldr	r1, [r7, #8]
 8005684:	430b      	orrs	r3, r1
 8005686:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005690:	d003      	beq.n	800569a <HAL_ADC_Init+0x126>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	2b01      	cmp	r3, #1
 8005698:	d104      	bne.n	80056a4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	691b      	ldr	r3, [r3, #16]
 800569e:	3b01      	subs	r3, #1
 80056a0:	051b      	lsls	r3, r3, #20
 80056a2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056aa:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	430a      	orrs	r2, r1
 80056b6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	689a      	ldr	r2, [r3, #8]
 80056be:	4b18      	ldr	r3, [pc, #96]	; (8005720 <HAL_ADC_Init+0x1ac>)
 80056c0:	4013      	ands	r3, r2
 80056c2:	68ba      	ldr	r2, [r7, #8]
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d10b      	bne.n	80056e0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056d2:	f023 0303 	bic.w	r3, r3, #3
 80056d6:	f043 0201 	orr.w	r2, r3, #1
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80056de:	e018      	b.n	8005712 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056e4:	f023 0312 	bic.w	r3, r3, #18
 80056e8:	f043 0210 	orr.w	r2, r3, #16
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f4:	f043 0201 	orr.w	r2, r3, #1
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005700:	e007      	b.n	8005712 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005706:	f043 0210 	orr.w	r2, r3, #16
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8005712:	7dfb      	ldrb	r3, [r7, #23]
}
 8005714:	4618      	mov	r0, r3
 8005716:	3718      	adds	r7, #24
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}
 800571c:	ffe1f7fd 	.word	0xffe1f7fd
 8005720:	ff1f0efe 	.word	0xff1f0efe

08005724 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b086      	sub	sp, #24
 8005728:	af00      	add	r7, sp, #0
 800572a:	60f8      	str	r0, [r7, #12]
 800572c:	60b9      	str	r1, [r7, #8]
 800572e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005730:	2300      	movs	r3, #0
 8005732:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a64      	ldr	r2, [pc, #400]	; (80058cc <HAL_ADC_Start_DMA+0x1a8>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d004      	beq.n	8005748 <HAL_ADC_Start_DMA+0x24>
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a63      	ldr	r2, [pc, #396]	; (80058d0 <HAL_ADC_Start_DMA+0x1ac>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d106      	bne.n	8005756 <HAL_ADC_Start_DMA+0x32>
 8005748:	4b60      	ldr	r3, [pc, #384]	; (80058cc <HAL_ADC_Start_DMA+0x1a8>)
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8005750:	2b00      	cmp	r3, #0
 8005752:	f040 80b3 	bne.w	80058bc <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800575c:	2b01      	cmp	r3, #1
 800575e:	d101      	bne.n	8005764 <HAL_ADC_Start_DMA+0x40>
 8005760:	2302      	movs	r3, #2
 8005762:	e0ae      	b.n	80058c2 <HAL_ADC_Start_DMA+0x19e>
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2201      	movs	r2, #1
 8005768:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800576c:	68f8      	ldr	r0, [r7, #12]
 800576e:	f000 f9c1 	bl	8005af4 <ADC_Enable>
 8005772:	4603      	mov	r3, r0
 8005774:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8005776:	7dfb      	ldrb	r3, [r7, #23]
 8005778:	2b00      	cmp	r3, #0
 800577a:	f040 809a 	bne.w	80058b2 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005782:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005786:	f023 0301 	bic.w	r3, r3, #1
 800578a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a4e      	ldr	r2, [pc, #312]	; (80058d0 <HAL_ADC_Start_DMA+0x1ac>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d105      	bne.n	80057a8 <HAL_ADC_Start_DMA+0x84>
 800579c:	4b4b      	ldr	r3, [pc, #300]	; (80058cc <HAL_ADC_Start_DMA+0x1a8>)
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d115      	bne.n	80057d4 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ac:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d026      	beq.n	8005810 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80057ca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80057d2:	e01d      	b.n	8005810 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057d8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a39      	ldr	r2, [pc, #228]	; (80058cc <HAL_ADC_Start_DMA+0x1a8>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d004      	beq.n	80057f4 <HAL_ADC_Start_DMA+0xd0>
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a38      	ldr	r2, [pc, #224]	; (80058d0 <HAL_ADC_Start_DMA+0x1ac>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d10d      	bne.n	8005810 <HAL_ADC_Start_DMA+0xec>
 80057f4:	4b35      	ldr	r3, [pc, #212]	; (80058cc <HAL_ADC_Start_DMA+0x1a8>)
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d007      	beq.n	8005810 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005804:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005808:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005814:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005818:	2b00      	cmp	r3, #0
 800581a:	d006      	beq.n	800582a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005820:	f023 0206 	bic.w	r2, r3, #6
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	62da      	str	r2, [r3, #44]	; 0x2c
 8005828:	e002      	b.n	8005830 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2200      	movs	r2, #0
 800582e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2200      	movs	r2, #0
 8005834:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	6a1b      	ldr	r3, [r3, #32]
 800583c:	4a25      	ldr	r2, [pc, #148]	; (80058d4 <HAL_ADC_Start_DMA+0x1b0>)
 800583e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	6a1b      	ldr	r3, [r3, #32]
 8005844:	4a24      	ldr	r2, [pc, #144]	; (80058d8 <HAL_ADC_Start_DMA+0x1b4>)
 8005846:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6a1b      	ldr	r3, [r3, #32]
 800584c:	4a23      	ldr	r2, [pc, #140]	; (80058dc <HAL_ADC_Start_DMA+0x1b8>)
 800584e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f06f 0202 	mvn.w	r2, #2
 8005858:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	689a      	ldr	r2, [r3, #8]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005868:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6a18      	ldr	r0, [r3, #32]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	334c      	adds	r3, #76	; 0x4c
 8005874:	4619      	mov	r1, r3
 8005876:	68ba      	ldr	r2, [r7, #8]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f000 fba5 	bl	8005fc8 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8005888:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800588c:	d108      	bne.n	80058a0 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	689a      	ldr	r2, [r3, #8]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800589c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800589e:	e00f      	b.n	80058c0 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	689a      	ldr	r2, [r3, #8]
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80058ae:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80058b0:	e006      	b.n	80058c0 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2200      	movs	r2, #0
 80058b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80058ba:	e001      	b.n	80058c0 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80058c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3718      	adds	r7, #24
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	bf00      	nop
 80058cc:	40012400 	.word	0x40012400
 80058d0:	40012800 	.word	0x40012800
 80058d4:	08005c2b 	.word	0x08005c2b
 80058d8:	08005ca7 	.word	0x08005ca7
 80058dc:	08005cc3 	.word	0x08005cc3

080058e0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80058e8:	bf00      	nop
 80058ea:	370c      	adds	r7, #12
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bc80      	pop	{r7}
 80058f0:	4770      	bx	lr

080058f2 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80058f2:	b480      	push	{r7}
 80058f4:	b083      	sub	sp, #12
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80058fa:	bf00      	nop
 80058fc:	370c      	adds	r7, #12
 80058fe:	46bd      	mov	sp, r7
 8005900:	bc80      	pop	{r7}
 8005902:	4770      	bx	lr

08005904 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8005904:	b480      	push	{r7}
 8005906:	b085      	sub	sp, #20
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800590e:	2300      	movs	r3, #0
 8005910:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8005912:	2300      	movs	r3, #0
 8005914:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800591c:	2b01      	cmp	r3, #1
 800591e:	d101      	bne.n	8005924 <HAL_ADC_ConfigChannel+0x20>
 8005920:	2302      	movs	r3, #2
 8005922:	e0dc      	b.n	8005ade <HAL_ADC_ConfigChannel+0x1da>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	2b06      	cmp	r3, #6
 8005932:	d81c      	bhi.n	800596e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	685a      	ldr	r2, [r3, #4]
 800593e:	4613      	mov	r3, r2
 8005940:	009b      	lsls	r3, r3, #2
 8005942:	4413      	add	r3, r2
 8005944:	3b05      	subs	r3, #5
 8005946:	221f      	movs	r2, #31
 8005948:	fa02 f303 	lsl.w	r3, r2, r3
 800594c:	43db      	mvns	r3, r3
 800594e:	4019      	ands	r1, r3
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	6818      	ldr	r0, [r3, #0]
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	685a      	ldr	r2, [r3, #4]
 8005958:	4613      	mov	r3, r2
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	4413      	add	r3, r2
 800595e:	3b05      	subs	r3, #5
 8005960:	fa00 f203 	lsl.w	r2, r0, r3
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	430a      	orrs	r2, r1
 800596a:	635a      	str	r2, [r3, #52]	; 0x34
 800596c:	e03c      	b.n	80059e8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	2b0c      	cmp	r3, #12
 8005974:	d81c      	bhi.n	80059b0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	685a      	ldr	r2, [r3, #4]
 8005980:	4613      	mov	r3, r2
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	4413      	add	r3, r2
 8005986:	3b23      	subs	r3, #35	; 0x23
 8005988:	221f      	movs	r2, #31
 800598a:	fa02 f303 	lsl.w	r3, r2, r3
 800598e:	43db      	mvns	r3, r3
 8005990:	4019      	ands	r1, r3
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	6818      	ldr	r0, [r3, #0]
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	685a      	ldr	r2, [r3, #4]
 800599a:	4613      	mov	r3, r2
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	4413      	add	r3, r2
 80059a0:	3b23      	subs	r3, #35	; 0x23
 80059a2:	fa00 f203 	lsl.w	r2, r0, r3
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	430a      	orrs	r2, r1
 80059ac:	631a      	str	r2, [r3, #48]	; 0x30
 80059ae:	e01b      	b.n	80059e8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	685a      	ldr	r2, [r3, #4]
 80059ba:	4613      	mov	r3, r2
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	4413      	add	r3, r2
 80059c0:	3b41      	subs	r3, #65	; 0x41
 80059c2:	221f      	movs	r2, #31
 80059c4:	fa02 f303 	lsl.w	r3, r2, r3
 80059c8:	43db      	mvns	r3, r3
 80059ca:	4019      	ands	r1, r3
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	6818      	ldr	r0, [r3, #0]
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	685a      	ldr	r2, [r3, #4]
 80059d4:	4613      	mov	r3, r2
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	4413      	add	r3, r2
 80059da:	3b41      	subs	r3, #65	; 0x41
 80059dc:	fa00 f203 	lsl.w	r2, r0, r3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	430a      	orrs	r2, r1
 80059e6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	2b09      	cmp	r3, #9
 80059ee:	d91c      	bls.n	8005a2a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	68d9      	ldr	r1, [r3, #12]
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	4613      	mov	r3, r2
 80059fc:	005b      	lsls	r3, r3, #1
 80059fe:	4413      	add	r3, r2
 8005a00:	3b1e      	subs	r3, #30
 8005a02:	2207      	movs	r2, #7
 8005a04:	fa02 f303 	lsl.w	r3, r2, r3
 8005a08:	43db      	mvns	r3, r3
 8005a0a:	4019      	ands	r1, r3
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	6898      	ldr	r0, [r3, #8]
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	4613      	mov	r3, r2
 8005a16:	005b      	lsls	r3, r3, #1
 8005a18:	4413      	add	r3, r2
 8005a1a:	3b1e      	subs	r3, #30
 8005a1c:	fa00 f203 	lsl.w	r2, r0, r3
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	430a      	orrs	r2, r1
 8005a26:	60da      	str	r2, [r3, #12]
 8005a28:	e019      	b.n	8005a5e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	6919      	ldr	r1, [r3, #16]
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	4613      	mov	r3, r2
 8005a36:	005b      	lsls	r3, r3, #1
 8005a38:	4413      	add	r3, r2
 8005a3a:	2207      	movs	r2, #7
 8005a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a40:	43db      	mvns	r3, r3
 8005a42:	4019      	ands	r1, r3
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	6898      	ldr	r0, [r3, #8]
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	4613      	mov	r3, r2
 8005a4e:	005b      	lsls	r3, r3, #1
 8005a50:	4413      	add	r3, r2
 8005a52:	fa00 f203 	lsl.w	r2, r0, r3
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	430a      	orrs	r2, r1
 8005a5c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2b10      	cmp	r3, #16
 8005a64:	d003      	beq.n	8005a6e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005a6a:	2b11      	cmp	r3, #17
 8005a6c:	d132      	bne.n	8005ad4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a1d      	ldr	r2, [pc, #116]	; (8005ae8 <HAL_ADC_ConfigChannel+0x1e4>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d125      	bne.n	8005ac4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d126      	bne.n	8005ad4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	689a      	ldr	r2, [r3, #8]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005a94:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	2b10      	cmp	r3, #16
 8005a9c:	d11a      	bne.n	8005ad4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005a9e:	4b13      	ldr	r3, [pc, #76]	; (8005aec <HAL_ADC_ConfigChannel+0x1e8>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a13      	ldr	r2, [pc, #76]	; (8005af0 <HAL_ADC_ConfigChannel+0x1ec>)
 8005aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8005aa8:	0c9a      	lsrs	r2, r3, #18
 8005aaa:	4613      	mov	r3, r2
 8005aac:	009b      	lsls	r3, r3, #2
 8005aae:	4413      	add	r3, r2
 8005ab0:	005b      	lsls	r3, r3, #1
 8005ab2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005ab4:	e002      	b.n	8005abc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	3b01      	subs	r3, #1
 8005aba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d1f9      	bne.n	8005ab6 <HAL_ADC_ConfigChannel+0x1b2>
 8005ac2:	e007      	b.n	8005ad4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ac8:	f043 0220 	orr.w	r2, r3, #32
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8005adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3714      	adds	r7, #20
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bc80      	pop	{r7}
 8005ae6:	4770      	bx	lr
 8005ae8:	40012400 	.word	0x40012400
 8005aec:	20000018 	.word	0x20000018
 8005af0:	431bde83 	.word	0x431bde83

08005af4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b084      	sub	sp, #16
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005afc:	2300      	movs	r3, #0
 8005afe:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8005b00:	2300      	movs	r3, #0
 8005b02:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	f003 0301 	and.w	r3, r3, #1
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d040      	beq.n	8005b94 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	689a      	ldr	r2, [r3, #8]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f042 0201 	orr.w	r2, r2, #1
 8005b20:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005b22:	4b1f      	ldr	r3, [pc, #124]	; (8005ba0 <ADC_Enable+0xac>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a1f      	ldr	r2, [pc, #124]	; (8005ba4 <ADC_Enable+0xb0>)
 8005b28:	fba2 2303 	umull	r2, r3, r2, r3
 8005b2c:	0c9b      	lsrs	r3, r3, #18
 8005b2e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8005b30:	e002      	b.n	8005b38 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	3b01      	subs	r3, #1
 8005b36:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d1f9      	bne.n	8005b32 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005b3e:	f7ff fceb 	bl	8005518 <HAL_GetTick>
 8005b42:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005b44:	e01f      	b.n	8005b86 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005b46:	f7ff fce7 	bl	8005518 <HAL_GetTick>
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	1ad3      	subs	r3, r2, r3
 8005b50:	2b02      	cmp	r3, #2
 8005b52:	d918      	bls.n	8005b86 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	f003 0301 	and.w	r3, r3, #1
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d011      	beq.n	8005b86 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b66:	f043 0210 	orr.w	r2, r3, #16
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b72:	f043 0201 	orr.w	r2, r3, #1
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	e007      	b.n	8005b96 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	f003 0301 	and.w	r3, r3, #1
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d1d8      	bne.n	8005b46 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8005b94:	2300      	movs	r3, #0
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3710      	adds	r7, #16
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	20000018 	.word	0x20000018
 8005ba4:	431bde83 	.word	0x431bde83

08005ba8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b084      	sub	sp, #16
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	f003 0301 	and.w	r3, r3, #1
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d12e      	bne.n	8005c20 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	689a      	ldr	r2, [r3, #8]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f022 0201 	bic.w	r2, r2, #1
 8005bd0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005bd2:	f7ff fca1 	bl	8005518 <HAL_GetTick>
 8005bd6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8005bd8:	e01b      	b.n	8005c12 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005bda:	f7ff fc9d 	bl	8005518 <HAL_GetTick>
 8005bde:	4602      	mov	r2, r0
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	1ad3      	subs	r3, r2, r3
 8005be4:	2b02      	cmp	r3, #2
 8005be6:	d914      	bls.n	8005c12 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	f003 0301 	and.w	r3, r3, #1
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d10d      	bne.n	8005c12 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bfa:	f043 0210 	orr.w	r2, r3, #16
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c06:	f043 0201 	orr.w	r2, r3, #1
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e007      	b.n	8005c22 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	f003 0301 	and.w	r3, r3, #1
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d0dc      	beq.n	8005bda <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8005c20:	2300      	movs	r3, #0
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3710      	adds	r7, #16
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}

08005c2a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005c2a:	b580      	push	{r7, lr}
 8005c2c:	b084      	sub	sp, #16
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c36:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c3c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d127      	bne.n	8005c94 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c48:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8005c5a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8005c5e:	d115      	bne.n	8005c8c <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d111      	bne.n	8005c8c <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d105      	bne.n	8005c8c <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c84:	f043 0201 	orr.w	r2, r3, #1
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005c8c:	68f8      	ldr	r0, [r7, #12]
 8005c8e:	f7fb fd33 	bl	80016f8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8005c92:	e004      	b.n	8005c9e <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6a1b      	ldr	r3, [r3, #32]
 8005c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	4798      	blx	r3
}
 8005c9e:	bf00      	nop
 8005ca0:	3710      	adds	r7, #16
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}

08005ca6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005ca6:	b580      	push	{r7, lr}
 8005ca8:	b084      	sub	sp, #16
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb2:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005cb4:	68f8      	ldr	r0, [r7, #12]
 8005cb6:	f7ff fe13 	bl	80058e0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005cba:	bf00      	nop
 8005cbc:	3710      	adds	r7, #16
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}

08005cc2 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8005cc2:	b580      	push	{r7, lr}
 8005cc4:	b084      	sub	sp, #16
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cce:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cd4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce0:	f043 0204 	orr.w	r2, r3, #4
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005ce8:	68f8      	ldr	r0, [r7, #12]
 8005cea:	f7ff fe02 	bl	80058f2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005cee:	bf00      	nop
 8005cf0:	3710      	adds	r7, #16
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}
	...

08005cf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b085      	sub	sp, #20
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f003 0307 	and.w	r3, r3, #7
 8005d06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005d08:	4b0c      	ldr	r3, [pc, #48]	; (8005d3c <__NVIC_SetPriorityGrouping+0x44>)
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005d0e:	68ba      	ldr	r2, [r7, #8]
 8005d10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005d14:	4013      	ands	r3, r2
 8005d16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005d20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005d24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005d2a:	4a04      	ldr	r2, [pc, #16]	; (8005d3c <__NVIC_SetPriorityGrouping+0x44>)
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	60d3      	str	r3, [r2, #12]
}
 8005d30:	bf00      	nop
 8005d32:	3714      	adds	r7, #20
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bc80      	pop	{r7}
 8005d38:	4770      	bx	lr
 8005d3a:	bf00      	nop
 8005d3c:	e000ed00 	.word	0xe000ed00

08005d40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005d40:	b480      	push	{r7}
 8005d42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005d44:	4b04      	ldr	r3, [pc, #16]	; (8005d58 <__NVIC_GetPriorityGrouping+0x18>)
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	0a1b      	lsrs	r3, r3, #8
 8005d4a:	f003 0307 	and.w	r3, r3, #7
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bc80      	pop	{r7}
 8005d54:	4770      	bx	lr
 8005d56:	bf00      	nop
 8005d58:	e000ed00 	.word	0xe000ed00

08005d5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b083      	sub	sp, #12
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	4603      	mov	r3, r0
 8005d64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	db0b      	blt.n	8005d86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005d6e:	79fb      	ldrb	r3, [r7, #7]
 8005d70:	f003 021f 	and.w	r2, r3, #31
 8005d74:	4906      	ldr	r1, [pc, #24]	; (8005d90 <__NVIC_EnableIRQ+0x34>)
 8005d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d7a:	095b      	lsrs	r3, r3, #5
 8005d7c:	2001      	movs	r0, #1
 8005d7e:	fa00 f202 	lsl.w	r2, r0, r2
 8005d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005d86:	bf00      	nop
 8005d88:	370c      	adds	r7, #12
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bc80      	pop	{r7}
 8005d8e:	4770      	bx	lr
 8005d90:	e000e100 	.word	0xe000e100

08005d94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b083      	sub	sp, #12
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	6039      	str	r1, [r7, #0]
 8005d9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	db0a      	blt.n	8005dbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	b2da      	uxtb	r2, r3
 8005dac:	490c      	ldr	r1, [pc, #48]	; (8005de0 <__NVIC_SetPriority+0x4c>)
 8005dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005db2:	0112      	lsls	r2, r2, #4
 8005db4:	b2d2      	uxtb	r2, r2
 8005db6:	440b      	add	r3, r1
 8005db8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005dbc:	e00a      	b.n	8005dd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	b2da      	uxtb	r2, r3
 8005dc2:	4908      	ldr	r1, [pc, #32]	; (8005de4 <__NVIC_SetPriority+0x50>)
 8005dc4:	79fb      	ldrb	r3, [r7, #7]
 8005dc6:	f003 030f 	and.w	r3, r3, #15
 8005dca:	3b04      	subs	r3, #4
 8005dcc:	0112      	lsls	r2, r2, #4
 8005dce:	b2d2      	uxtb	r2, r2
 8005dd0:	440b      	add	r3, r1
 8005dd2:	761a      	strb	r2, [r3, #24]
}
 8005dd4:	bf00      	nop
 8005dd6:	370c      	adds	r7, #12
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bc80      	pop	{r7}
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop
 8005de0:	e000e100 	.word	0xe000e100
 8005de4:	e000ed00 	.word	0xe000ed00

08005de8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b089      	sub	sp, #36	; 0x24
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	60f8      	str	r0, [r7, #12]
 8005df0:	60b9      	str	r1, [r7, #8]
 8005df2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f003 0307 	and.w	r3, r3, #7
 8005dfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	f1c3 0307 	rsb	r3, r3, #7
 8005e02:	2b04      	cmp	r3, #4
 8005e04:	bf28      	it	cs
 8005e06:	2304      	movcs	r3, #4
 8005e08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005e0a:	69fb      	ldr	r3, [r7, #28]
 8005e0c:	3304      	adds	r3, #4
 8005e0e:	2b06      	cmp	r3, #6
 8005e10:	d902      	bls.n	8005e18 <NVIC_EncodePriority+0x30>
 8005e12:	69fb      	ldr	r3, [r7, #28]
 8005e14:	3b03      	subs	r3, #3
 8005e16:	e000      	b.n	8005e1a <NVIC_EncodePriority+0x32>
 8005e18:	2300      	movs	r3, #0
 8005e1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8005e20:	69bb      	ldr	r3, [r7, #24]
 8005e22:	fa02 f303 	lsl.w	r3, r2, r3
 8005e26:	43da      	mvns	r2, r3
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	401a      	ands	r2, r3
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005e30:	f04f 31ff 	mov.w	r1, #4294967295
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	fa01 f303 	lsl.w	r3, r1, r3
 8005e3a:	43d9      	mvns	r1, r3
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e40:	4313      	orrs	r3, r2
         );
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3724      	adds	r7, #36	; 0x24
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bc80      	pop	{r7}
 8005e4a:	4770      	bx	lr

08005e4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b082      	sub	sp, #8
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	3b01      	subs	r3, #1
 8005e58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005e5c:	d301      	bcc.n	8005e62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005e5e:	2301      	movs	r3, #1
 8005e60:	e00f      	b.n	8005e82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005e62:	4a0a      	ldr	r2, [pc, #40]	; (8005e8c <SysTick_Config+0x40>)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	3b01      	subs	r3, #1
 8005e68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005e6a:	210f      	movs	r1, #15
 8005e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e70:	f7ff ff90 	bl	8005d94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005e74:	4b05      	ldr	r3, [pc, #20]	; (8005e8c <SysTick_Config+0x40>)
 8005e76:	2200      	movs	r2, #0
 8005e78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005e7a:	4b04      	ldr	r3, [pc, #16]	; (8005e8c <SysTick_Config+0x40>)
 8005e7c:	2207      	movs	r2, #7
 8005e7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005e80:	2300      	movs	r3, #0
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3708      	adds	r7, #8
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
 8005e8a:	bf00      	nop
 8005e8c:	e000e010 	.word	0xe000e010

08005e90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b082      	sub	sp, #8
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f7ff ff2d 	bl	8005cf8 <__NVIC_SetPriorityGrouping>
}
 8005e9e:	bf00      	nop
 8005ea0:	3708      	adds	r7, #8
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}

08005ea6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005ea6:	b580      	push	{r7, lr}
 8005ea8:	b086      	sub	sp, #24
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	4603      	mov	r3, r0
 8005eae:	60b9      	str	r1, [r7, #8]
 8005eb0:	607a      	str	r2, [r7, #4]
 8005eb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005eb8:	f7ff ff42 	bl	8005d40 <__NVIC_GetPriorityGrouping>
 8005ebc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	68b9      	ldr	r1, [r7, #8]
 8005ec2:	6978      	ldr	r0, [r7, #20]
 8005ec4:	f7ff ff90 	bl	8005de8 <NVIC_EncodePriority>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ece:	4611      	mov	r1, r2
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f7ff ff5f 	bl	8005d94 <__NVIC_SetPriority>
}
 8005ed6:	bf00      	nop
 8005ed8:	3718      	adds	r7, #24
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}

08005ede <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ede:	b580      	push	{r7, lr}
 8005ee0:	b082      	sub	sp, #8
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005eec:	4618      	mov	r0, r3
 8005eee:	f7ff ff35 	bl	8005d5c <__NVIC_EnableIRQ>
}
 8005ef2:	bf00      	nop
 8005ef4:	3708      	adds	r7, #8
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}

08005efa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005efa:	b580      	push	{r7, lr}
 8005efc:	b082      	sub	sp, #8
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f7ff ffa2 	bl	8005e4c <SysTick_Config>
 8005f08:	4603      	mov	r3, r0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3708      	adds	r7, #8
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
	...

08005f14 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b085      	sub	sp, #20
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d101      	bne.n	8005f2a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	e043      	b.n	8005fb2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	461a      	mov	r2, r3
 8005f30:	4b22      	ldr	r3, [pc, #136]	; (8005fbc <HAL_DMA_Init+0xa8>)
 8005f32:	4413      	add	r3, r2
 8005f34:	4a22      	ldr	r2, [pc, #136]	; (8005fc0 <HAL_DMA_Init+0xac>)
 8005f36:	fba2 2303 	umull	r2, r3, r2, r3
 8005f3a:	091b      	lsrs	r3, r3, #4
 8005f3c:	009a      	lsls	r2, r3, #2
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	4a1f      	ldr	r2, [pc, #124]	; (8005fc4 <HAL_DMA_Init+0xb0>)
 8005f46:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2202      	movs	r2, #2
 8005f4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005f5e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005f62:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8005f6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	695b      	ldr	r3, [r3, #20]
 8005f7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	69db      	ldr	r3, [r3, #28]
 8005f8a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005f8c:	68fa      	ldr	r2, [r7, #12]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	68fa      	ldr	r2, [r7, #12]
 8005f98:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2200      	movs	r2, #0
 8005fac:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005fb0:	2300      	movs	r3, #0
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3714      	adds	r7, #20
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bc80      	pop	{r7}
 8005fba:	4770      	bx	lr
 8005fbc:	bffdfff8 	.word	0xbffdfff8
 8005fc0:	cccccccd 	.word	0xcccccccd
 8005fc4:	40020000 	.word	0x40020000

08005fc8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b086      	sub	sp, #24
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	60f8      	str	r0, [r7, #12]
 8005fd0:	60b9      	str	r1, [r7, #8]
 8005fd2:	607a      	str	r2, [r7, #4]
 8005fd4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d101      	bne.n	8005fe8 <HAL_DMA_Start_IT+0x20>
 8005fe4:	2302      	movs	r3, #2
 8005fe6:	e04a      	b.n	800607e <HAL_DMA_Start_IT+0xb6>
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2201      	movs	r2, #1
 8005fec:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d13a      	bne.n	8006070 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2202      	movs	r2, #2
 8005ffe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2200      	movs	r2, #0
 8006006:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f022 0201 	bic.w	r2, r2, #1
 8006016:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	687a      	ldr	r2, [r7, #4]
 800601c:	68b9      	ldr	r1, [r7, #8]
 800601e:	68f8      	ldr	r0, [r7, #12]
 8006020:	f000 f938 	bl	8006294 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006028:	2b00      	cmp	r3, #0
 800602a:	d008      	beq.n	800603e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f042 020e 	orr.w	r2, r2, #14
 800603a:	601a      	str	r2, [r3, #0]
 800603c:	e00f      	b.n	800605e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f022 0204 	bic.w	r2, r2, #4
 800604c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f042 020a 	orr.w	r2, r2, #10
 800605c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f042 0201 	orr.w	r2, r2, #1
 800606c:	601a      	str	r2, [r3, #0]
 800606e:	e005      	b.n	800607c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2200      	movs	r2, #0
 8006074:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8006078:	2302      	movs	r3, #2
 800607a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800607c:	7dfb      	ldrb	r3, [r7, #23]
}
 800607e:	4618      	mov	r0, r3
 8006080:	3718      	adds	r7, #24
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
	...

08006088 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b084      	sub	sp, #16
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a4:	2204      	movs	r2, #4
 80060a6:	409a      	lsls	r2, r3
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	4013      	ands	r3, r2
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d04f      	beq.n	8006150 <HAL_DMA_IRQHandler+0xc8>
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	f003 0304 	and.w	r3, r3, #4
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d04a      	beq.n	8006150 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f003 0320 	and.w	r3, r3, #32
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d107      	bne.n	80060d8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f022 0204 	bic.w	r2, r2, #4
 80060d6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a66      	ldr	r2, [pc, #408]	; (8006278 <HAL_DMA_IRQHandler+0x1f0>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d029      	beq.n	8006136 <HAL_DMA_IRQHandler+0xae>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a65      	ldr	r2, [pc, #404]	; (800627c <HAL_DMA_IRQHandler+0x1f4>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d022      	beq.n	8006132 <HAL_DMA_IRQHandler+0xaa>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a63      	ldr	r2, [pc, #396]	; (8006280 <HAL_DMA_IRQHandler+0x1f8>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d01a      	beq.n	800612c <HAL_DMA_IRQHandler+0xa4>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a62      	ldr	r2, [pc, #392]	; (8006284 <HAL_DMA_IRQHandler+0x1fc>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d012      	beq.n	8006126 <HAL_DMA_IRQHandler+0x9e>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a60      	ldr	r2, [pc, #384]	; (8006288 <HAL_DMA_IRQHandler+0x200>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d00a      	beq.n	8006120 <HAL_DMA_IRQHandler+0x98>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a5f      	ldr	r2, [pc, #380]	; (800628c <HAL_DMA_IRQHandler+0x204>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d102      	bne.n	800611a <HAL_DMA_IRQHandler+0x92>
 8006114:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006118:	e00e      	b.n	8006138 <HAL_DMA_IRQHandler+0xb0>
 800611a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800611e:	e00b      	b.n	8006138 <HAL_DMA_IRQHandler+0xb0>
 8006120:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006124:	e008      	b.n	8006138 <HAL_DMA_IRQHandler+0xb0>
 8006126:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800612a:	e005      	b.n	8006138 <HAL_DMA_IRQHandler+0xb0>
 800612c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006130:	e002      	b.n	8006138 <HAL_DMA_IRQHandler+0xb0>
 8006132:	2340      	movs	r3, #64	; 0x40
 8006134:	e000      	b.n	8006138 <HAL_DMA_IRQHandler+0xb0>
 8006136:	2304      	movs	r3, #4
 8006138:	4a55      	ldr	r2, [pc, #340]	; (8006290 <HAL_DMA_IRQHandler+0x208>)
 800613a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006140:	2b00      	cmp	r3, #0
 8006142:	f000 8094 	beq.w	800626e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800614e:	e08e      	b.n	800626e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006154:	2202      	movs	r2, #2
 8006156:	409a      	lsls	r2, r3
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	4013      	ands	r3, r2
 800615c:	2b00      	cmp	r3, #0
 800615e:	d056      	beq.n	800620e <HAL_DMA_IRQHandler+0x186>
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	f003 0302 	and.w	r3, r3, #2
 8006166:	2b00      	cmp	r3, #0
 8006168:	d051      	beq.n	800620e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f003 0320 	and.w	r3, r3, #32
 8006174:	2b00      	cmp	r3, #0
 8006176:	d10b      	bne.n	8006190 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f022 020a 	bic.w	r2, r2, #10
 8006186:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a38      	ldr	r2, [pc, #224]	; (8006278 <HAL_DMA_IRQHandler+0x1f0>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d029      	beq.n	80061ee <HAL_DMA_IRQHandler+0x166>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a37      	ldr	r2, [pc, #220]	; (800627c <HAL_DMA_IRQHandler+0x1f4>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d022      	beq.n	80061ea <HAL_DMA_IRQHandler+0x162>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a35      	ldr	r2, [pc, #212]	; (8006280 <HAL_DMA_IRQHandler+0x1f8>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d01a      	beq.n	80061e4 <HAL_DMA_IRQHandler+0x15c>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a34      	ldr	r2, [pc, #208]	; (8006284 <HAL_DMA_IRQHandler+0x1fc>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d012      	beq.n	80061de <HAL_DMA_IRQHandler+0x156>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a32      	ldr	r2, [pc, #200]	; (8006288 <HAL_DMA_IRQHandler+0x200>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d00a      	beq.n	80061d8 <HAL_DMA_IRQHandler+0x150>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a31      	ldr	r2, [pc, #196]	; (800628c <HAL_DMA_IRQHandler+0x204>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d102      	bne.n	80061d2 <HAL_DMA_IRQHandler+0x14a>
 80061cc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80061d0:	e00e      	b.n	80061f0 <HAL_DMA_IRQHandler+0x168>
 80061d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80061d6:	e00b      	b.n	80061f0 <HAL_DMA_IRQHandler+0x168>
 80061d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80061dc:	e008      	b.n	80061f0 <HAL_DMA_IRQHandler+0x168>
 80061de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80061e2:	e005      	b.n	80061f0 <HAL_DMA_IRQHandler+0x168>
 80061e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80061e8:	e002      	b.n	80061f0 <HAL_DMA_IRQHandler+0x168>
 80061ea:	2320      	movs	r3, #32
 80061ec:	e000      	b.n	80061f0 <HAL_DMA_IRQHandler+0x168>
 80061ee:	2302      	movs	r3, #2
 80061f0:	4a27      	ldr	r2, [pc, #156]	; (8006290 <HAL_DMA_IRQHandler+0x208>)
 80061f2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2200      	movs	r2, #0
 80061f8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006200:	2b00      	cmp	r3, #0
 8006202:	d034      	beq.n	800626e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800620c:	e02f      	b.n	800626e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006212:	2208      	movs	r2, #8
 8006214:	409a      	lsls	r2, r3
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	4013      	ands	r3, r2
 800621a:	2b00      	cmp	r3, #0
 800621c:	d028      	beq.n	8006270 <HAL_DMA_IRQHandler+0x1e8>
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	f003 0308 	and.w	r3, r3, #8
 8006224:	2b00      	cmp	r3, #0
 8006226:	d023      	beq.n	8006270 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f022 020e 	bic.w	r2, r2, #14
 8006236:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006240:	2101      	movs	r1, #1
 8006242:	fa01 f202 	lsl.w	r2, r1, r2
 8006246:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2201      	movs	r2, #1
 800624c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2201      	movs	r2, #1
 8006252:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006262:	2b00      	cmp	r3, #0
 8006264:	d004      	beq.n	8006270 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	4798      	blx	r3
    }
  }
  return;
 800626e:	bf00      	nop
 8006270:	bf00      	nop
}
 8006272:	3710      	adds	r7, #16
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}
 8006278:	40020008 	.word	0x40020008
 800627c:	4002001c 	.word	0x4002001c
 8006280:	40020030 	.word	0x40020030
 8006284:	40020044 	.word	0x40020044
 8006288:	40020058 	.word	0x40020058
 800628c:	4002006c 	.word	0x4002006c
 8006290:	40020000 	.word	0x40020000

08006294 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006294:	b480      	push	{r7}
 8006296:	b085      	sub	sp, #20
 8006298:	af00      	add	r7, sp, #0
 800629a:	60f8      	str	r0, [r7, #12]
 800629c:	60b9      	str	r1, [r7, #8]
 800629e:	607a      	str	r2, [r7, #4]
 80062a0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062aa:	2101      	movs	r1, #1
 80062ac:	fa01 f202 	lsl.w	r2, r1, r2
 80062b0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	683a      	ldr	r2, [r7, #0]
 80062b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	2b10      	cmp	r3, #16
 80062c0:	d108      	bne.n	80062d4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	68ba      	ldr	r2, [r7, #8]
 80062d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80062d2:	e007      	b.n	80062e4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	68ba      	ldr	r2, [r7, #8]
 80062da:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	60da      	str	r2, [r3, #12]
}
 80062e4:	bf00      	nop
 80062e6:	3714      	adds	r7, #20
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bc80      	pop	{r7}
 80062ec:	4770      	bx	lr
	...

080062f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b08b      	sub	sp, #44	; 0x2c
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80062fa:	2300      	movs	r3, #0
 80062fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80062fe:	2300      	movs	r3, #0
 8006300:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006302:	e169      	b.n	80065d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8006304:	2201      	movs	r2, #1
 8006306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006308:	fa02 f303 	lsl.w	r3, r2, r3
 800630c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	69fa      	ldr	r2, [r7, #28]
 8006314:	4013      	ands	r3, r2
 8006316:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8006318:	69ba      	ldr	r2, [r7, #24]
 800631a:	69fb      	ldr	r3, [r7, #28]
 800631c:	429a      	cmp	r2, r3
 800631e:	f040 8158 	bne.w	80065d2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	4a9a      	ldr	r2, [pc, #616]	; (8006590 <HAL_GPIO_Init+0x2a0>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d05e      	beq.n	80063ea <HAL_GPIO_Init+0xfa>
 800632c:	4a98      	ldr	r2, [pc, #608]	; (8006590 <HAL_GPIO_Init+0x2a0>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d875      	bhi.n	800641e <HAL_GPIO_Init+0x12e>
 8006332:	4a98      	ldr	r2, [pc, #608]	; (8006594 <HAL_GPIO_Init+0x2a4>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d058      	beq.n	80063ea <HAL_GPIO_Init+0xfa>
 8006338:	4a96      	ldr	r2, [pc, #600]	; (8006594 <HAL_GPIO_Init+0x2a4>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d86f      	bhi.n	800641e <HAL_GPIO_Init+0x12e>
 800633e:	4a96      	ldr	r2, [pc, #600]	; (8006598 <HAL_GPIO_Init+0x2a8>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d052      	beq.n	80063ea <HAL_GPIO_Init+0xfa>
 8006344:	4a94      	ldr	r2, [pc, #592]	; (8006598 <HAL_GPIO_Init+0x2a8>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d869      	bhi.n	800641e <HAL_GPIO_Init+0x12e>
 800634a:	4a94      	ldr	r2, [pc, #592]	; (800659c <HAL_GPIO_Init+0x2ac>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d04c      	beq.n	80063ea <HAL_GPIO_Init+0xfa>
 8006350:	4a92      	ldr	r2, [pc, #584]	; (800659c <HAL_GPIO_Init+0x2ac>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d863      	bhi.n	800641e <HAL_GPIO_Init+0x12e>
 8006356:	4a92      	ldr	r2, [pc, #584]	; (80065a0 <HAL_GPIO_Init+0x2b0>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d046      	beq.n	80063ea <HAL_GPIO_Init+0xfa>
 800635c:	4a90      	ldr	r2, [pc, #576]	; (80065a0 <HAL_GPIO_Init+0x2b0>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d85d      	bhi.n	800641e <HAL_GPIO_Init+0x12e>
 8006362:	2b12      	cmp	r3, #18
 8006364:	d82a      	bhi.n	80063bc <HAL_GPIO_Init+0xcc>
 8006366:	2b12      	cmp	r3, #18
 8006368:	d859      	bhi.n	800641e <HAL_GPIO_Init+0x12e>
 800636a:	a201      	add	r2, pc, #4	; (adr r2, 8006370 <HAL_GPIO_Init+0x80>)
 800636c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006370:	080063eb 	.word	0x080063eb
 8006374:	080063c5 	.word	0x080063c5
 8006378:	080063d7 	.word	0x080063d7
 800637c:	08006419 	.word	0x08006419
 8006380:	0800641f 	.word	0x0800641f
 8006384:	0800641f 	.word	0x0800641f
 8006388:	0800641f 	.word	0x0800641f
 800638c:	0800641f 	.word	0x0800641f
 8006390:	0800641f 	.word	0x0800641f
 8006394:	0800641f 	.word	0x0800641f
 8006398:	0800641f 	.word	0x0800641f
 800639c:	0800641f 	.word	0x0800641f
 80063a0:	0800641f 	.word	0x0800641f
 80063a4:	0800641f 	.word	0x0800641f
 80063a8:	0800641f 	.word	0x0800641f
 80063ac:	0800641f 	.word	0x0800641f
 80063b0:	0800641f 	.word	0x0800641f
 80063b4:	080063cd 	.word	0x080063cd
 80063b8:	080063e1 	.word	0x080063e1
 80063bc:	4a79      	ldr	r2, [pc, #484]	; (80065a4 <HAL_GPIO_Init+0x2b4>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d013      	beq.n	80063ea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80063c2:	e02c      	b.n	800641e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	623b      	str	r3, [r7, #32]
          break;
 80063ca:	e029      	b.n	8006420 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	68db      	ldr	r3, [r3, #12]
 80063d0:	3304      	adds	r3, #4
 80063d2:	623b      	str	r3, [r7, #32]
          break;
 80063d4:	e024      	b.n	8006420 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	68db      	ldr	r3, [r3, #12]
 80063da:	3308      	adds	r3, #8
 80063dc:	623b      	str	r3, [r7, #32]
          break;
 80063de:	e01f      	b.n	8006420 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	68db      	ldr	r3, [r3, #12]
 80063e4:	330c      	adds	r3, #12
 80063e6:	623b      	str	r3, [r7, #32]
          break;
 80063e8:	e01a      	b.n	8006420 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d102      	bne.n	80063f8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80063f2:	2304      	movs	r3, #4
 80063f4:	623b      	str	r3, [r7, #32]
          break;
 80063f6:	e013      	b.n	8006420 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d105      	bne.n	800640c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006400:	2308      	movs	r3, #8
 8006402:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	69fa      	ldr	r2, [r7, #28]
 8006408:	611a      	str	r2, [r3, #16]
          break;
 800640a:	e009      	b.n	8006420 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800640c:	2308      	movs	r3, #8
 800640e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	69fa      	ldr	r2, [r7, #28]
 8006414:	615a      	str	r2, [r3, #20]
          break;
 8006416:	e003      	b.n	8006420 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006418:	2300      	movs	r3, #0
 800641a:	623b      	str	r3, [r7, #32]
          break;
 800641c:	e000      	b.n	8006420 <HAL_GPIO_Init+0x130>
          break;
 800641e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006420:	69bb      	ldr	r3, [r7, #24]
 8006422:	2bff      	cmp	r3, #255	; 0xff
 8006424:	d801      	bhi.n	800642a <HAL_GPIO_Init+0x13a>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	e001      	b.n	800642e <HAL_GPIO_Init+0x13e>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	3304      	adds	r3, #4
 800642e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006430:	69bb      	ldr	r3, [r7, #24]
 8006432:	2bff      	cmp	r3, #255	; 0xff
 8006434:	d802      	bhi.n	800643c <HAL_GPIO_Init+0x14c>
 8006436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006438:	009b      	lsls	r3, r3, #2
 800643a:	e002      	b.n	8006442 <HAL_GPIO_Init+0x152>
 800643c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643e:	3b08      	subs	r3, #8
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	681a      	ldr	r2, [r3, #0]
 8006448:	210f      	movs	r1, #15
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	fa01 f303 	lsl.w	r3, r1, r3
 8006450:	43db      	mvns	r3, r3
 8006452:	401a      	ands	r2, r3
 8006454:	6a39      	ldr	r1, [r7, #32]
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	fa01 f303 	lsl.w	r3, r1, r3
 800645c:	431a      	orrs	r2, r3
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800646a:	2b00      	cmp	r3, #0
 800646c:	f000 80b1 	beq.w	80065d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006470:	4b4d      	ldr	r3, [pc, #308]	; (80065a8 <HAL_GPIO_Init+0x2b8>)
 8006472:	699b      	ldr	r3, [r3, #24]
 8006474:	4a4c      	ldr	r2, [pc, #304]	; (80065a8 <HAL_GPIO_Init+0x2b8>)
 8006476:	f043 0301 	orr.w	r3, r3, #1
 800647a:	6193      	str	r3, [r2, #24]
 800647c:	4b4a      	ldr	r3, [pc, #296]	; (80065a8 <HAL_GPIO_Init+0x2b8>)
 800647e:	699b      	ldr	r3, [r3, #24]
 8006480:	f003 0301 	and.w	r3, r3, #1
 8006484:	60bb      	str	r3, [r7, #8]
 8006486:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8006488:	4a48      	ldr	r2, [pc, #288]	; (80065ac <HAL_GPIO_Init+0x2bc>)
 800648a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648c:	089b      	lsrs	r3, r3, #2
 800648e:	3302      	adds	r3, #2
 8006490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006494:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8006496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006498:	f003 0303 	and.w	r3, r3, #3
 800649c:	009b      	lsls	r3, r3, #2
 800649e:	220f      	movs	r2, #15
 80064a0:	fa02 f303 	lsl.w	r3, r2, r3
 80064a4:	43db      	mvns	r3, r3
 80064a6:	68fa      	ldr	r2, [r7, #12]
 80064a8:	4013      	ands	r3, r2
 80064aa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	4a40      	ldr	r2, [pc, #256]	; (80065b0 <HAL_GPIO_Init+0x2c0>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d013      	beq.n	80064dc <HAL_GPIO_Init+0x1ec>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	4a3f      	ldr	r2, [pc, #252]	; (80065b4 <HAL_GPIO_Init+0x2c4>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d00d      	beq.n	80064d8 <HAL_GPIO_Init+0x1e8>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	4a3e      	ldr	r2, [pc, #248]	; (80065b8 <HAL_GPIO_Init+0x2c8>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d007      	beq.n	80064d4 <HAL_GPIO_Init+0x1e4>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	4a3d      	ldr	r2, [pc, #244]	; (80065bc <HAL_GPIO_Init+0x2cc>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d101      	bne.n	80064d0 <HAL_GPIO_Init+0x1e0>
 80064cc:	2303      	movs	r3, #3
 80064ce:	e006      	b.n	80064de <HAL_GPIO_Init+0x1ee>
 80064d0:	2304      	movs	r3, #4
 80064d2:	e004      	b.n	80064de <HAL_GPIO_Init+0x1ee>
 80064d4:	2302      	movs	r3, #2
 80064d6:	e002      	b.n	80064de <HAL_GPIO_Init+0x1ee>
 80064d8:	2301      	movs	r3, #1
 80064da:	e000      	b.n	80064de <HAL_GPIO_Init+0x1ee>
 80064dc:	2300      	movs	r3, #0
 80064de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064e0:	f002 0203 	and.w	r2, r2, #3
 80064e4:	0092      	lsls	r2, r2, #2
 80064e6:	4093      	lsls	r3, r2
 80064e8:	68fa      	ldr	r2, [r7, #12]
 80064ea:	4313      	orrs	r3, r2
 80064ec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80064ee:	492f      	ldr	r1, [pc, #188]	; (80065ac <HAL_GPIO_Init+0x2bc>)
 80064f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f2:	089b      	lsrs	r3, r3, #2
 80064f4:	3302      	adds	r3, #2
 80064f6:	68fa      	ldr	r2, [r7, #12]
 80064f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006504:	2b00      	cmp	r3, #0
 8006506:	d006      	beq.n	8006516 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006508:	4b2d      	ldr	r3, [pc, #180]	; (80065c0 <HAL_GPIO_Init+0x2d0>)
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	492c      	ldr	r1, [pc, #176]	; (80065c0 <HAL_GPIO_Init+0x2d0>)
 800650e:	69bb      	ldr	r3, [r7, #24]
 8006510:	4313      	orrs	r3, r2
 8006512:	600b      	str	r3, [r1, #0]
 8006514:	e006      	b.n	8006524 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006516:	4b2a      	ldr	r3, [pc, #168]	; (80065c0 <HAL_GPIO_Init+0x2d0>)
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	69bb      	ldr	r3, [r7, #24]
 800651c:	43db      	mvns	r3, r3
 800651e:	4928      	ldr	r1, [pc, #160]	; (80065c0 <HAL_GPIO_Init+0x2d0>)
 8006520:	4013      	ands	r3, r2
 8006522:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800652c:	2b00      	cmp	r3, #0
 800652e:	d006      	beq.n	800653e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006530:	4b23      	ldr	r3, [pc, #140]	; (80065c0 <HAL_GPIO_Init+0x2d0>)
 8006532:	685a      	ldr	r2, [r3, #4]
 8006534:	4922      	ldr	r1, [pc, #136]	; (80065c0 <HAL_GPIO_Init+0x2d0>)
 8006536:	69bb      	ldr	r3, [r7, #24]
 8006538:	4313      	orrs	r3, r2
 800653a:	604b      	str	r3, [r1, #4]
 800653c:	e006      	b.n	800654c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800653e:	4b20      	ldr	r3, [pc, #128]	; (80065c0 <HAL_GPIO_Init+0x2d0>)
 8006540:	685a      	ldr	r2, [r3, #4]
 8006542:	69bb      	ldr	r3, [r7, #24]
 8006544:	43db      	mvns	r3, r3
 8006546:	491e      	ldr	r1, [pc, #120]	; (80065c0 <HAL_GPIO_Init+0x2d0>)
 8006548:	4013      	ands	r3, r2
 800654a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006554:	2b00      	cmp	r3, #0
 8006556:	d006      	beq.n	8006566 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006558:	4b19      	ldr	r3, [pc, #100]	; (80065c0 <HAL_GPIO_Init+0x2d0>)
 800655a:	689a      	ldr	r2, [r3, #8]
 800655c:	4918      	ldr	r1, [pc, #96]	; (80065c0 <HAL_GPIO_Init+0x2d0>)
 800655e:	69bb      	ldr	r3, [r7, #24]
 8006560:	4313      	orrs	r3, r2
 8006562:	608b      	str	r3, [r1, #8]
 8006564:	e006      	b.n	8006574 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006566:	4b16      	ldr	r3, [pc, #88]	; (80065c0 <HAL_GPIO_Init+0x2d0>)
 8006568:	689a      	ldr	r2, [r3, #8]
 800656a:	69bb      	ldr	r3, [r7, #24]
 800656c:	43db      	mvns	r3, r3
 800656e:	4914      	ldr	r1, [pc, #80]	; (80065c0 <HAL_GPIO_Init+0x2d0>)
 8006570:	4013      	ands	r3, r2
 8006572:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800657c:	2b00      	cmp	r3, #0
 800657e:	d021      	beq.n	80065c4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006580:	4b0f      	ldr	r3, [pc, #60]	; (80065c0 <HAL_GPIO_Init+0x2d0>)
 8006582:	68da      	ldr	r2, [r3, #12]
 8006584:	490e      	ldr	r1, [pc, #56]	; (80065c0 <HAL_GPIO_Init+0x2d0>)
 8006586:	69bb      	ldr	r3, [r7, #24]
 8006588:	4313      	orrs	r3, r2
 800658a:	60cb      	str	r3, [r1, #12]
 800658c:	e021      	b.n	80065d2 <HAL_GPIO_Init+0x2e2>
 800658e:	bf00      	nop
 8006590:	10320000 	.word	0x10320000
 8006594:	10310000 	.word	0x10310000
 8006598:	10220000 	.word	0x10220000
 800659c:	10210000 	.word	0x10210000
 80065a0:	10120000 	.word	0x10120000
 80065a4:	10110000 	.word	0x10110000
 80065a8:	40021000 	.word	0x40021000
 80065ac:	40010000 	.word	0x40010000
 80065b0:	40010800 	.word	0x40010800
 80065b4:	40010c00 	.word	0x40010c00
 80065b8:	40011000 	.word	0x40011000
 80065bc:	40011400 	.word	0x40011400
 80065c0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80065c4:	4b0b      	ldr	r3, [pc, #44]	; (80065f4 <HAL_GPIO_Init+0x304>)
 80065c6:	68da      	ldr	r2, [r3, #12]
 80065c8:	69bb      	ldr	r3, [r7, #24]
 80065ca:	43db      	mvns	r3, r3
 80065cc:	4909      	ldr	r1, [pc, #36]	; (80065f4 <HAL_GPIO_Init+0x304>)
 80065ce:	4013      	ands	r3, r2
 80065d0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80065d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d4:	3301      	adds	r3, #1
 80065d6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065de:	fa22 f303 	lsr.w	r3, r2, r3
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	f47f ae8e 	bne.w	8006304 <HAL_GPIO_Init+0x14>
  }
}
 80065e8:	bf00      	nop
 80065ea:	bf00      	nop
 80065ec:	372c      	adds	r7, #44	; 0x2c
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bc80      	pop	{r7}
 80065f2:	4770      	bx	lr
 80065f4:	40010400 	.word	0x40010400

080065f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b083      	sub	sp, #12
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	460b      	mov	r3, r1
 8006602:	807b      	strh	r3, [r7, #2]
 8006604:	4613      	mov	r3, r2
 8006606:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006608:	787b      	ldrb	r3, [r7, #1]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d003      	beq.n	8006616 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800660e:	887a      	ldrh	r2, [r7, #2]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006614:	e003      	b.n	800661e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006616:	887b      	ldrh	r3, [r7, #2]
 8006618:	041a      	lsls	r2, r3, #16
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	611a      	str	r2, [r3, #16]
}
 800661e:	bf00      	nop
 8006620:	370c      	adds	r7, #12
 8006622:	46bd      	mov	sp, r7
 8006624:	bc80      	pop	{r7}
 8006626:	4770      	bx	lr

08006628 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b084      	sub	sp, #16
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d101      	bne.n	800663a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	e12b      	b.n	8006892 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006640:	b2db      	uxtb	r3, r3
 8006642:	2b00      	cmp	r3, #0
 8006644:	d106      	bne.n	8006654 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2200      	movs	r2, #0
 800664a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f7fe fcd2 	bl	8004ff8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2224      	movs	r2, #36	; 0x24
 8006658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f022 0201 	bic.w	r2, r2, #1
 800666a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800667a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800668a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800668c:	f001 fba0 	bl	8007dd0 <HAL_RCC_GetPCLK1Freq>
 8006690:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	4a81      	ldr	r2, [pc, #516]	; (800689c <HAL_I2C_Init+0x274>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d807      	bhi.n	80066ac <HAL_I2C_Init+0x84>
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	4a80      	ldr	r2, [pc, #512]	; (80068a0 <HAL_I2C_Init+0x278>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	bf94      	ite	ls
 80066a4:	2301      	movls	r3, #1
 80066a6:	2300      	movhi	r3, #0
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	e006      	b.n	80066ba <HAL_I2C_Init+0x92>
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	4a7d      	ldr	r2, [pc, #500]	; (80068a4 <HAL_I2C_Init+0x27c>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	bf94      	ite	ls
 80066b4:	2301      	movls	r3, #1
 80066b6:	2300      	movhi	r3, #0
 80066b8:	b2db      	uxtb	r3, r3
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d001      	beq.n	80066c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	e0e7      	b.n	8006892 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	4a78      	ldr	r2, [pc, #480]	; (80068a8 <HAL_I2C_Init+0x280>)
 80066c6:	fba2 2303 	umull	r2, r3, r2, r3
 80066ca:	0c9b      	lsrs	r3, r3, #18
 80066cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	68ba      	ldr	r2, [r7, #8]
 80066de:	430a      	orrs	r2, r1
 80066e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	6a1b      	ldr	r3, [r3, #32]
 80066e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	4a6a      	ldr	r2, [pc, #424]	; (800689c <HAL_I2C_Init+0x274>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d802      	bhi.n	80066fc <HAL_I2C_Init+0xd4>
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	3301      	adds	r3, #1
 80066fa:	e009      	b.n	8006710 <HAL_I2C_Init+0xe8>
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006702:	fb02 f303 	mul.w	r3, r2, r3
 8006706:	4a69      	ldr	r2, [pc, #420]	; (80068ac <HAL_I2C_Init+0x284>)
 8006708:	fba2 2303 	umull	r2, r3, r2, r3
 800670c:	099b      	lsrs	r3, r3, #6
 800670e:	3301      	adds	r3, #1
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	6812      	ldr	r2, [r2, #0]
 8006714:	430b      	orrs	r3, r1
 8006716:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	69db      	ldr	r3, [r3, #28]
 800671e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006722:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	495c      	ldr	r1, [pc, #368]	; (800689c <HAL_I2C_Init+0x274>)
 800672c:	428b      	cmp	r3, r1
 800672e:	d819      	bhi.n	8006764 <HAL_I2C_Init+0x13c>
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	1e59      	subs	r1, r3, #1
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	005b      	lsls	r3, r3, #1
 800673a:	fbb1 f3f3 	udiv	r3, r1, r3
 800673e:	1c59      	adds	r1, r3, #1
 8006740:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006744:	400b      	ands	r3, r1
 8006746:	2b00      	cmp	r3, #0
 8006748:	d00a      	beq.n	8006760 <HAL_I2C_Init+0x138>
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	1e59      	subs	r1, r3, #1
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	005b      	lsls	r3, r3, #1
 8006754:	fbb1 f3f3 	udiv	r3, r1, r3
 8006758:	3301      	adds	r3, #1
 800675a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800675e:	e051      	b.n	8006804 <HAL_I2C_Init+0x1dc>
 8006760:	2304      	movs	r3, #4
 8006762:	e04f      	b.n	8006804 <HAL_I2C_Init+0x1dc>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d111      	bne.n	8006790 <HAL_I2C_Init+0x168>
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	1e58      	subs	r0, r3, #1
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6859      	ldr	r1, [r3, #4]
 8006774:	460b      	mov	r3, r1
 8006776:	005b      	lsls	r3, r3, #1
 8006778:	440b      	add	r3, r1
 800677a:	fbb0 f3f3 	udiv	r3, r0, r3
 800677e:	3301      	adds	r3, #1
 8006780:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006784:	2b00      	cmp	r3, #0
 8006786:	bf0c      	ite	eq
 8006788:	2301      	moveq	r3, #1
 800678a:	2300      	movne	r3, #0
 800678c:	b2db      	uxtb	r3, r3
 800678e:	e012      	b.n	80067b6 <HAL_I2C_Init+0x18e>
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	1e58      	subs	r0, r3, #1
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6859      	ldr	r1, [r3, #4]
 8006798:	460b      	mov	r3, r1
 800679a:	009b      	lsls	r3, r3, #2
 800679c:	440b      	add	r3, r1
 800679e:	0099      	lsls	r1, r3, #2
 80067a0:	440b      	add	r3, r1
 80067a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80067a6:	3301      	adds	r3, #1
 80067a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	bf0c      	ite	eq
 80067b0:	2301      	moveq	r3, #1
 80067b2:	2300      	movne	r3, #0
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d001      	beq.n	80067be <HAL_I2C_Init+0x196>
 80067ba:	2301      	movs	r3, #1
 80067bc:	e022      	b.n	8006804 <HAL_I2C_Init+0x1dc>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d10e      	bne.n	80067e4 <HAL_I2C_Init+0x1bc>
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	1e58      	subs	r0, r3, #1
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6859      	ldr	r1, [r3, #4]
 80067ce:	460b      	mov	r3, r1
 80067d0:	005b      	lsls	r3, r3, #1
 80067d2:	440b      	add	r3, r1
 80067d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80067d8:	3301      	adds	r3, #1
 80067da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067e2:	e00f      	b.n	8006804 <HAL_I2C_Init+0x1dc>
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	1e58      	subs	r0, r3, #1
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6859      	ldr	r1, [r3, #4]
 80067ec:	460b      	mov	r3, r1
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	440b      	add	r3, r1
 80067f2:	0099      	lsls	r1, r3, #2
 80067f4:	440b      	add	r3, r1
 80067f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80067fa:	3301      	adds	r3, #1
 80067fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006800:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006804:	6879      	ldr	r1, [r7, #4]
 8006806:	6809      	ldr	r1, [r1, #0]
 8006808:	4313      	orrs	r3, r2
 800680a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	69da      	ldr	r2, [r3, #28]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6a1b      	ldr	r3, [r3, #32]
 800681e:	431a      	orrs	r2, r3
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	430a      	orrs	r2, r1
 8006826:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006832:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006836:	687a      	ldr	r2, [r7, #4]
 8006838:	6911      	ldr	r1, [r2, #16]
 800683a:	687a      	ldr	r2, [r7, #4]
 800683c:	68d2      	ldr	r2, [r2, #12]
 800683e:	4311      	orrs	r1, r2
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	6812      	ldr	r2, [r2, #0]
 8006844:	430b      	orrs	r3, r1
 8006846:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	68db      	ldr	r3, [r3, #12]
 800684e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	695a      	ldr	r2, [r3, #20]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	699b      	ldr	r3, [r3, #24]
 800685a:	431a      	orrs	r2, r3
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	430a      	orrs	r2, r1
 8006862:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	681a      	ldr	r2, [r3, #0]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f042 0201 	orr.w	r2, r2, #1
 8006872:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2220      	movs	r2, #32
 800687e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2200      	movs	r2, #0
 8006886:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006890:	2300      	movs	r3, #0
}
 8006892:	4618      	mov	r0, r3
 8006894:	3710      	adds	r7, #16
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
 800689a:	bf00      	nop
 800689c:	000186a0 	.word	0x000186a0
 80068a0:	001e847f 	.word	0x001e847f
 80068a4:	003d08ff 	.word	0x003d08ff
 80068a8:	431bde83 	.word	0x431bde83
 80068ac:	10624dd3 	.word	0x10624dd3

080068b0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b088      	sub	sp, #32
 80068b4:	af02      	add	r7, sp, #8
 80068b6:	60f8      	str	r0, [r7, #12]
 80068b8:	4608      	mov	r0, r1
 80068ba:	4611      	mov	r1, r2
 80068bc:	461a      	mov	r2, r3
 80068be:	4603      	mov	r3, r0
 80068c0:	817b      	strh	r3, [r7, #10]
 80068c2:	460b      	mov	r3, r1
 80068c4:	813b      	strh	r3, [r7, #8]
 80068c6:	4613      	mov	r3, r2
 80068c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80068ca:	f7fe fe25 	bl	8005518 <HAL_GetTick>
 80068ce:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	2b20      	cmp	r3, #32
 80068da:	f040 80d9 	bne.w	8006a90 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	9300      	str	r3, [sp, #0]
 80068e2:	2319      	movs	r3, #25
 80068e4:	2201      	movs	r2, #1
 80068e6:	496d      	ldr	r1, [pc, #436]	; (8006a9c <HAL_I2C_Mem_Write+0x1ec>)
 80068e8:	68f8      	ldr	r0, [r7, #12]
 80068ea:	f000 fcc1 	bl	8007270 <I2C_WaitOnFlagUntilTimeout>
 80068ee:	4603      	mov	r3, r0
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d001      	beq.n	80068f8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80068f4:	2302      	movs	r3, #2
 80068f6:	e0cc      	b.n	8006a92 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068fe:	2b01      	cmp	r3, #1
 8006900:	d101      	bne.n	8006906 <HAL_I2C_Mem_Write+0x56>
 8006902:	2302      	movs	r3, #2
 8006904:	e0c5      	b.n	8006a92 <HAL_I2C_Mem_Write+0x1e2>
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2201      	movs	r2, #1
 800690a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f003 0301 	and.w	r3, r3, #1
 8006918:	2b01      	cmp	r3, #1
 800691a:	d007      	beq.n	800692c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f042 0201 	orr.w	r2, r2, #1
 800692a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	681a      	ldr	r2, [r3, #0]
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800693a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2221      	movs	r2, #33	; 0x21
 8006940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2240      	movs	r2, #64	; 0x40
 8006948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2200      	movs	r2, #0
 8006950:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	6a3a      	ldr	r2, [r7, #32]
 8006956:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800695c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006962:	b29a      	uxth	r2, r3
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	4a4d      	ldr	r2, [pc, #308]	; (8006aa0 <HAL_I2C_Mem_Write+0x1f0>)
 800696c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800696e:	88f8      	ldrh	r0, [r7, #6]
 8006970:	893a      	ldrh	r2, [r7, #8]
 8006972:	8979      	ldrh	r1, [r7, #10]
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	9301      	str	r3, [sp, #4]
 8006978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800697a:	9300      	str	r3, [sp, #0]
 800697c:	4603      	mov	r3, r0
 800697e:	68f8      	ldr	r0, [r7, #12]
 8006980:	f000 faf8 	bl	8006f74 <I2C_RequestMemoryWrite>
 8006984:	4603      	mov	r3, r0
 8006986:	2b00      	cmp	r3, #0
 8006988:	d052      	beq.n	8006a30 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800698a:	2301      	movs	r3, #1
 800698c:	e081      	b.n	8006a92 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800698e:	697a      	ldr	r2, [r7, #20]
 8006990:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006992:	68f8      	ldr	r0, [r7, #12]
 8006994:	f000 fd42 	bl	800741c <I2C_WaitOnTXEFlagUntilTimeout>
 8006998:	4603      	mov	r3, r0
 800699a:	2b00      	cmp	r3, #0
 800699c:	d00d      	beq.n	80069ba <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a2:	2b04      	cmp	r3, #4
 80069a4:	d107      	bne.n	80069b6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80069b6:	2301      	movs	r3, #1
 80069b8:	e06b      	b.n	8006a92 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069be:	781a      	ldrb	r2, [r3, #0]
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ca:	1c5a      	adds	r2, r3, #1
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069d4:	3b01      	subs	r3, #1
 80069d6:	b29a      	uxth	r2, r3
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	3b01      	subs	r3, #1
 80069e4:	b29a      	uxth	r2, r3
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	695b      	ldr	r3, [r3, #20]
 80069f0:	f003 0304 	and.w	r3, r3, #4
 80069f4:	2b04      	cmp	r3, #4
 80069f6:	d11b      	bne.n	8006a30 <HAL_I2C_Mem_Write+0x180>
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d017      	beq.n	8006a30 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a04:	781a      	ldrb	r2, [r3, #0]
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a10:	1c5a      	adds	r2, r3, #1
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a1a:	3b01      	subs	r3, #1
 8006a1c:	b29a      	uxth	r2, r3
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	3b01      	subs	r3, #1
 8006a2a:	b29a      	uxth	r2, r3
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d1aa      	bne.n	800698e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a38:	697a      	ldr	r2, [r7, #20]
 8006a3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a3c:	68f8      	ldr	r0, [r7, #12]
 8006a3e:	f000 fd2e 	bl	800749e <I2C_WaitOnBTFFlagUntilTimeout>
 8006a42:	4603      	mov	r3, r0
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d00d      	beq.n	8006a64 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a4c:	2b04      	cmp	r3, #4
 8006a4e:	d107      	bne.n	8006a60 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a5e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006a60:	2301      	movs	r3, #1
 8006a62:	e016      	b.n	8006a92 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2220      	movs	r2, #32
 8006a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2200      	movs	r2, #0
 8006a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	e000      	b.n	8006a92 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006a90:	2302      	movs	r3, #2
  }
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3718      	adds	r7, #24
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}
 8006a9a:	bf00      	nop
 8006a9c:	00100002 	.word	0x00100002
 8006aa0:	ffff0000 	.word	0xffff0000

08006aa4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b08c      	sub	sp, #48	; 0x30
 8006aa8:	af02      	add	r7, sp, #8
 8006aaa:	60f8      	str	r0, [r7, #12]
 8006aac:	4608      	mov	r0, r1
 8006aae:	4611      	mov	r1, r2
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	817b      	strh	r3, [r7, #10]
 8006ab6:	460b      	mov	r3, r1
 8006ab8:	813b      	strh	r3, [r7, #8]
 8006aba:	4613      	mov	r3, r2
 8006abc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006ac2:	f7fe fd29 	bl	8005518 <HAL_GetTick>
 8006ac6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ace:	b2db      	uxtb	r3, r3
 8006ad0:	2b20      	cmp	r3, #32
 8006ad2:	f040 8244 	bne.w	8006f5e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad8:	9300      	str	r3, [sp, #0]
 8006ada:	2319      	movs	r3, #25
 8006adc:	2201      	movs	r2, #1
 8006ade:	4982      	ldr	r1, [pc, #520]	; (8006ce8 <HAL_I2C_Mem_Read+0x244>)
 8006ae0:	68f8      	ldr	r0, [r7, #12]
 8006ae2:	f000 fbc5 	bl	8007270 <I2C_WaitOnFlagUntilTimeout>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d001      	beq.n	8006af0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8006aec:	2302      	movs	r3, #2
 8006aee:	e237      	b.n	8006f60 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006af6:	2b01      	cmp	r3, #1
 8006af8:	d101      	bne.n	8006afe <HAL_I2C_Mem_Read+0x5a>
 8006afa:	2302      	movs	r3, #2
 8006afc:	e230      	b.n	8006f60 <HAL_I2C_Mem_Read+0x4bc>
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2201      	movs	r2, #1
 8006b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f003 0301 	and.w	r3, r3, #1
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	d007      	beq.n	8006b24 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	681a      	ldr	r2, [r3, #0]
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f042 0201 	orr.w	r2, r2, #1
 8006b22:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b32:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2222      	movs	r2, #34	; 0x22
 8006b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2240      	movs	r2, #64	; 0x40
 8006b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2200      	movs	r2, #0
 8006b48:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006b54:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b5a:	b29a      	uxth	r2, r3
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	4a62      	ldr	r2, [pc, #392]	; (8006cec <HAL_I2C_Mem_Read+0x248>)
 8006b64:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006b66:	88f8      	ldrh	r0, [r7, #6]
 8006b68:	893a      	ldrh	r2, [r7, #8]
 8006b6a:	8979      	ldrh	r1, [r7, #10]
 8006b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6e:	9301      	str	r3, [sp, #4]
 8006b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b72:	9300      	str	r3, [sp, #0]
 8006b74:	4603      	mov	r3, r0
 8006b76:	68f8      	ldr	r0, [r7, #12]
 8006b78:	f000 fa92 	bl	80070a0 <I2C_RequestMemoryRead>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d001      	beq.n	8006b86 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	e1ec      	b.n	8006f60 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d113      	bne.n	8006bb6 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b8e:	2300      	movs	r3, #0
 8006b90:	61fb      	str	r3, [r7, #28]
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	695b      	ldr	r3, [r3, #20]
 8006b98:	61fb      	str	r3, [r7, #28]
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	699b      	ldr	r3, [r3, #24]
 8006ba0:	61fb      	str	r3, [r7, #28]
 8006ba2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	681a      	ldr	r2, [r3, #0]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bb2:	601a      	str	r2, [r3, #0]
 8006bb4:	e1c0      	b.n	8006f38 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d11e      	bne.n	8006bfc <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bcc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006bce:	b672      	cpsid	i
}
 8006bd0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	61bb      	str	r3, [r7, #24]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	695b      	ldr	r3, [r3, #20]
 8006bdc:	61bb      	str	r3, [r7, #24]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	699b      	ldr	r3, [r3, #24]
 8006be4:	61bb      	str	r3, [r7, #24]
 8006be6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	681a      	ldr	r2, [r3, #0]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bf6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006bf8:	b662      	cpsie	i
}
 8006bfa:	e035      	b.n	8006c68 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c00:	2b02      	cmp	r3, #2
 8006c02:	d11e      	bne.n	8006c42 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	681a      	ldr	r2, [r3, #0]
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c12:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006c14:	b672      	cpsid	i
}
 8006c16:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c18:	2300      	movs	r3, #0
 8006c1a:	617b      	str	r3, [r7, #20]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	695b      	ldr	r3, [r3, #20]
 8006c22:	617b      	str	r3, [r7, #20]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	699b      	ldr	r3, [r3, #24]
 8006c2a:	617b      	str	r3, [r7, #20]
 8006c2c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c3c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006c3e:	b662      	cpsie	i
}
 8006c40:	e012      	b.n	8006c68 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006c50:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c52:	2300      	movs	r3, #0
 8006c54:	613b      	str	r3, [r7, #16]
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	695b      	ldr	r3, [r3, #20]
 8006c5c:	613b      	str	r3, [r7, #16]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	699b      	ldr	r3, [r3, #24]
 8006c64:	613b      	str	r3, [r7, #16]
 8006c66:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8006c68:	e166      	b.n	8006f38 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c6e:	2b03      	cmp	r3, #3
 8006c70:	f200 811f 	bhi.w	8006eb2 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d123      	bne.n	8006cc4 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c7e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006c80:	68f8      	ldr	r0, [r7, #12]
 8006c82:	f000 fc4d 	bl	8007520 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006c86:	4603      	mov	r3, r0
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d001      	beq.n	8006c90 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	e167      	b.n	8006f60 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	691a      	ldr	r2, [r3, #16]
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c9a:	b2d2      	uxtb	r2, r2
 8006c9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca2:	1c5a      	adds	r2, r3, #1
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cac:	3b01      	subs	r3, #1
 8006cae:	b29a      	uxth	r2, r3
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	3b01      	subs	r3, #1
 8006cbc:	b29a      	uxth	r2, r3
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006cc2:	e139      	b.n	8006f38 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cc8:	2b02      	cmp	r3, #2
 8006cca:	d152      	bne.n	8006d72 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cce:	9300      	str	r3, [sp, #0]
 8006cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	4906      	ldr	r1, [pc, #24]	; (8006cf0 <HAL_I2C_Mem_Read+0x24c>)
 8006cd6:	68f8      	ldr	r0, [r7, #12]
 8006cd8:	f000 faca 	bl	8007270 <I2C_WaitOnFlagUntilTimeout>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d008      	beq.n	8006cf4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	e13c      	b.n	8006f60 <HAL_I2C_Mem_Read+0x4bc>
 8006ce6:	bf00      	nop
 8006ce8:	00100002 	.word	0x00100002
 8006cec:	ffff0000 	.word	0xffff0000
 8006cf0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8006cf4:	b672      	cpsid	i
}
 8006cf6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	691a      	ldr	r2, [r3, #16]
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d12:	b2d2      	uxtb	r2, r2
 8006d14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d1a:	1c5a      	adds	r2, r3, #1
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d24:	3b01      	subs	r3, #1
 8006d26:	b29a      	uxth	r2, r3
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d30:	b29b      	uxth	r3, r3
 8006d32:	3b01      	subs	r3, #1
 8006d34:	b29a      	uxth	r2, r3
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8006d3a:	b662      	cpsie	i
}
 8006d3c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	691a      	ldr	r2, [r3, #16]
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d48:	b2d2      	uxtb	r2, r2
 8006d4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d50:	1c5a      	adds	r2, r3, #1
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d5a:	3b01      	subs	r3, #1
 8006d5c:	b29a      	uxth	r2, r3
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d66:	b29b      	uxth	r3, r3
 8006d68:	3b01      	subs	r3, #1
 8006d6a:	b29a      	uxth	r2, r3
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006d70:	e0e2      	b.n	8006f38 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d74:	9300      	str	r3, [sp, #0]
 8006d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d78:	2200      	movs	r2, #0
 8006d7a:	497b      	ldr	r1, [pc, #492]	; (8006f68 <HAL_I2C_Mem_Read+0x4c4>)
 8006d7c:	68f8      	ldr	r0, [r7, #12]
 8006d7e:	f000 fa77 	bl	8007270 <I2C_WaitOnFlagUntilTimeout>
 8006d82:	4603      	mov	r3, r0
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d001      	beq.n	8006d8c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	e0e9      	b.n	8006f60 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	681a      	ldr	r2, [r3, #0]
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d9a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006d9c:	b672      	cpsid	i
}
 8006d9e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	691a      	ldr	r2, [r3, #16]
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006daa:	b2d2      	uxtb	r2, r2
 8006dac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db2:	1c5a      	adds	r2, r3, #1
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dbc:	3b01      	subs	r3, #1
 8006dbe:	b29a      	uxth	r2, r3
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	3b01      	subs	r3, #1
 8006dcc:	b29a      	uxth	r2, r3
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006dd2:	4b66      	ldr	r3, [pc, #408]	; (8006f6c <HAL_I2C_Mem_Read+0x4c8>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	08db      	lsrs	r3, r3, #3
 8006dd8:	4a65      	ldr	r2, [pc, #404]	; (8006f70 <HAL_I2C_Mem_Read+0x4cc>)
 8006dda:	fba2 2303 	umull	r2, r3, r2, r3
 8006dde:	0a1a      	lsrs	r2, r3, #8
 8006de0:	4613      	mov	r3, r2
 8006de2:	009b      	lsls	r3, r3, #2
 8006de4:	4413      	add	r3, r2
 8006de6:	00da      	lsls	r2, r3, #3
 8006de8:	1ad3      	subs	r3, r2, r3
 8006dea:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8006dec:	6a3b      	ldr	r3, [r7, #32]
 8006dee:	3b01      	subs	r3, #1
 8006df0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8006df2:	6a3b      	ldr	r3, [r7, #32]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d118      	bne.n	8006e2a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2220      	movs	r2, #32
 8006e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e12:	f043 0220 	orr.w	r2, r3, #32
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8006e1a:	b662      	cpsie	i
}
 8006e1c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2200      	movs	r2, #0
 8006e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8006e26:	2301      	movs	r3, #1
 8006e28:	e09a      	b.n	8006f60 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	695b      	ldr	r3, [r3, #20]
 8006e30:	f003 0304 	and.w	r3, r3, #4
 8006e34:	2b04      	cmp	r3, #4
 8006e36:	d1d9      	bne.n	8006dec <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	691a      	ldr	r2, [r3, #16]
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e52:	b2d2      	uxtb	r2, r2
 8006e54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e5a:	1c5a      	adds	r2, r3, #1
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e64:	3b01      	subs	r3, #1
 8006e66:	b29a      	uxth	r2, r3
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	3b01      	subs	r3, #1
 8006e74:	b29a      	uxth	r2, r3
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8006e7a:	b662      	cpsie	i
}
 8006e7c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	691a      	ldr	r2, [r3, #16]
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e88:	b2d2      	uxtb	r2, r2
 8006e8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e90:	1c5a      	adds	r2, r3, #1
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e9a:	3b01      	subs	r3, #1
 8006e9c:	b29a      	uxth	r2, r3
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	3b01      	subs	r3, #1
 8006eaa:	b29a      	uxth	r2, r3
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006eb0:	e042      	b.n	8006f38 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006eb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006eb4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006eb6:	68f8      	ldr	r0, [r7, #12]
 8006eb8:	f000 fb32 	bl	8007520 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d001      	beq.n	8006ec6 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	e04c      	b.n	8006f60 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	691a      	ldr	r2, [r3, #16]
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed0:	b2d2      	uxtb	r2, r2
 8006ed2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed8:	1c5a      	adds	r2, r3, #1
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ee2:	3b01      	subs	r3, #1
 8006ee4:	b29a      	uxth	r2, r3
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	3b01      	subs	r3, #1
 8006ef2:	b29a      	uxth	r2, r3
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	695b      	ldr	r3, [r3, #20]
 8006efe:	f003 0304 	and.w	r3, r3, #4
 8006f02:	2b04      	cmp	r3, #4
 8006f04:	d118      	bne.n	8006f38 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	691a      	ldr	r2, [r3, #16]
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f10:	b2d2      	uxtb	r2, r2
 8006f12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f18:	1c5a      	adds	r2, r3, #1
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f22:	3b01      	subs	r3, #1
 8006f24:	b29a      	uxth	r2, r3
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	3b01      	subs	r3, #1
 8006f32:	b29a      	uxth	r2, r3
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	f47f ae94 	bne.w	8006c6a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2220      	movs	r2, #32
 8006f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2200      	movs	r2, #0
 8006f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	e000      	b.n	8006f60 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8006f5e:	2302      	movs	r3, #2
  }
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3728      	adds	r7, #40	; 0x28
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}
 8006f68:	00010004 	.word	0x00010004
 8006f6c:	20000018 	.word	0x20000018
 8006f70:	14f8b589 	.word	0x14f8b589

08006f74 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b088      	sub	sp, #32
 8006f78:	af02      	add	r7, sp, #8
 8006f7a:	60f8      	str	r0, [r7, #12]
 8006f7c:	4608      	mov	r0, r1
 8006f7e:	4611      	mov	r1, r2
 8006f80:	461a      	mov	r2, r3
 8006f82:	4603      	mov	r3, r0
 8006f84:	817b      	strh	r3, [r7, #10]
 8006f86:	460b      	mov	r3, r1
 8006f88:	813b      	strh	r3, [r7, #8]
 8006f8a:	4613      	mov	r3, r2
 8006f8c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	681a      	ldr	r2, [r3, #0]
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f9c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa0:	9300      	str	r3, [sp, #0]
 8006fa2:	6a3b      	ldr	r3, [r7, #32]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006faa:	68f8      	ldr	r0, [r7, #12]
 8006fac:	f000 f960 	bl	8007270 <I2C_WaitOnFlagUntilTimeout>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d00d      	beq.n	8006fd2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fc4:	d103      	bne.n	8006fce <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006fcc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006fce:	2303      	movs	r3, #3
 8006fd0:	e05f      	b.n	8007092 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006fd2:	897b      	ldrh	r3, [r7, #10]
 8006fd4:	b2db      	uxtb	r3, r3
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006fe0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe4:	6a3a      	ldr	r2, [r7, #32]
 8006fe6:	492d      	ldr	r1, [pc, #180]	; (800709c <I2C_RequestMemoryWrite+0x128>)
 8006fe8:	68f8      	ldr	r0, [r7, #12]
 8006fea:	f000 f998 	bl	800731e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d001      	beq.n	8006ff8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	e04c      	b.n	8007092 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	617b      	str	r3, [r7, #20]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	695b      	ldr	r3, [r3, #20]
 8007002:	617b      	str	r3, [r7, #20]
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	699b      	ldr	r3, [r3, #24]
 800700a:	617b      	str	r3, [r7, #20]
 800700c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800700e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007010:	6a39      	ldr	r1, [r7, #32]
 8007012:	68f8      	ldr	r0, [r7, #12]
 8007014:	f000 fa02 	bl	800741c <I2C_WaitOnTXEFlagUntilTimeout>
 8007018:	4603      	mov	r3, r0
 800701a:	2b00      	cmp	r3, #0
 800701c:	d00d      	beq.n	800703a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007022:	2b04      	cmp	r3, #4
 8007024:	d107      	bne.n	8007036 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007034:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	e02b      	b.n	8007092 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800703a:	88fb      	ldrh	r3, [r7, #6]
 800703c:	2b01      	cmp	r3, #1
 800703e:	d105      	bne.n	800704c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007040:	893b      	ldrh	r3, [r7, #8]
 8007042:	b2da      	uxtb	r2, r3
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	611a      	str	r2, [r3, #16]
 800704a:	e021      	b.n	8007090 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800704c:	893b      	ldrh	r3, [r7, #8]
 800704e:	0a1b      	lsrs	r3, r3, #8
 8007050:	b29b      	uxth	r3, r3
 8007052:	b2da      	uxtb	r2, r3
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800705a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800705c:	6a39      	ldr	r1, [r7, #32]
 800705e:	68f8      	ldr	r0, [r7, #12]
 8007060:	f000 f9dc 	bl	800741c <I2C_WaitOnTXEFlagUntilTimeout>
 8007064:	4603      	mov	r3, r0
 8007066:	2b00      	cmp	r3, #0
 8007068:	d00d      	beq.n	8007086 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800706e:	2b04      	cmp	r3, #4
 8007070:	d107      	bne.n	8007082 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007080:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007082:	2301      	movs	r3, #1
 8007084:	e005      	b.n	8007092 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007086:	893b      	ldrh	r3, [r7, #8]
 8007088:	b2da      	uxtb	r2, r3
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007090:	2300      	movs	r3, #0
}
 8007092:	4618      	mov	r0, r3
 8007094:	3718      	adds	r7, #24
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}
 800709a:	bf00      	nop
 800709c:	00010002 	.word	0x00010002

080070a0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b088      	sub	sp, #32
 80070a4:	af02      	add	r7, sp, #8
 80070a6:	60f8      	str	r0, [r7, #12]
 80070a8:	4608      	mov	r0, r1
 80070aa:	4611      	mov	r1, r2
 80070ac:	461a      	mov	r2, r3
 80070ae:	4603      	mov	r3, r0
 80070b0:	817b      	strh	r3, [r7, #10]
 80070b2:	460b      	mov	r3, r1
 80070b4:	813b      	strh	r3, [r7, #8]
 80070b6:	4613      	mov	r3, r2
 80070b8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80070c8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	681a      	ldr	r2, [r3, #0]
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80070d8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80070da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070dc:	9300      	str	r3, [sp, #0]
 80070de:	6a3b      	ldr	r3, [r7, #32]
 80070e0:	2200      	movs	r2, #0
 80070e2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80070e6:	68f8      	ldr	r0, [r7, #12]
 80070e8:	f000 f8c2 	bl	8007270 <I2C_WaitOnFlagUntilTimeout>
 80070ec:	4603      	mov	r3, r0
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d00d      	beq.n	800710e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007100:	d103      	bne.n	800710a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007108:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800710a:	2303      	movs	r3, #3
 800710c:	e0aa      	b.n	8007264 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800710e:	897b      	ldrh	r3, [r7, #10]
 8007110:	b2db      	uxtb	r3, r3
 8007112:	461a      	mov	r2, r3
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800711c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800711e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007120:	6a3a      	ldr	r2, [r7, #32]
 8007122:	4952      	ldr	r1, [pc, #328]	; (800726c <I2C_RequestMemoryRead+0x1cc>)
 8007124:	68f8      	ldr	r0, [r7, #12]
 8007126:	f000 f8fa 	bl	800731e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800712a:	4603      	mov	r3, r0
 800712c:	2b00      	cmp	r3, #0
 800712e:	d001      	beq.n	8007134 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007130:	2301      	movs	r3, #1
 8007132:	e097      	b.n	8007264 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007134:	2300      	movs	r3, #0
 8007136:	617b      	str	r3, [r7, #20]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	695b      	ldr	r3, [r3, #20]
 800713e:	617b      	str	r3, [r7, #20]
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	699b      	ldr	r3, [r3, #24]
 8007146:	617b      	str	r3, [r7, #20]
 8007148:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800714a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800714c:	6a39      	ldr	r1, [r7, #32]
 800714e:	68f8      	ldr	r0, [r7, #12]
 8007150:	f000 f964 	bl	800741c <I2C_WaitOnTXEFlagUntilTimeout>
 8007154:	4603      	mov	r3, r0
 8007156:	2b00      	cmp	r3, #0
 8007158:	d00d      	beq.n	8007176 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800715e:	2b04      	cmp	r3, #4
 8007160:	d107      	bne.n	8007172 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007170:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007172:	2301      	movs	r3, #1
 8007174:	e076      	b.n	8007264 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007176:	88fb      	ldrh	r3, [r7, #6]
 8007178:	2b01      	cmp	r3, #1
 800717a:	d105      	bne.n	8007188 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800717c:	893b      	ldrh	r3, [r7, #8]
 800717e:	b2da      	uxtb	r2, r3
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	611a      	str	r2, [r3, #16]
 8007186:	e021      	b.n	80071cc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007188:	893b      	ldrh	r3, [r7, #8]
 800718a:	0a1b      	lsrs	r3, r3, #8
 800718c:	b29b      	uxth	r3, r3
 800718e:	b2da      	uxtb	r2, r3
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007196:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007198:	6a39      	ldr	r1, [r7, #32]
 800719a:	68f8      	ldr	r0, [r7, #12]
 800719c:	f000 f93e 	bl	800741c <I2C_WaitOnTXEFlagUntilTimeout>
 80071a0:	4603      	mov	r3, r0
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d00d      	beq.n	80071c2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071aa:	2b04      	cmp	r3, #4
 80071ac:	d107      	bne.n	80071be <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	681a      	ldr	r2, [r3, #0]
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071bc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80071be:	2301      	movs	r3, #1
 80071c0:	e050      	b.n	8007264 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80071c2:	893b      	ldrh	r3, [r7, #8]
 80071c4:	b2da      	uxtb	r2, r3
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80071cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071ce:	6a39      	ldr	r1, [r7, #32]
 80071d0:	68f8      	ldr	r0, [r7, #12]
 80071d2:	f000 f923 	bl	800741c <I2C_WaitOnTXEFlagUntilTimeout>
 80071d6:	4603      	mov	r3, r0
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d00d      	beq.n	80071f8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e0:	2b04      	cmp	r3, #4
 80071e2:	d107      	bne.n	80071f4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	681a      	ldr	r2, [r3, #0]
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071f2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80071f4:	2301      	movs	r3, #1
 80071f6:	e035      	b.n	8007264 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	681a      	ldr	r2, [r3, #0]
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007206:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720a:	9300      	str	r3, [sp, #0]
 800720c:	6a3b      	ldr	r3, [r7, #32]
 800720e:	2200      	movs	r2, #0
 8007210:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007214:	68f8      	ldr	r0, [r7, #12]
 8007216:	f000 f82b 	bl	8007270 <I2C_WaitOnFlagUntilTimeout>
 800721a:	4603      	mov	r3, r0
 800721c:	2b00      	cmp	r3, #0
 800721e:	d00d      	beq.n	800723c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800722a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800722e:	d103      	bne.n	8007238 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007236:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007238:	2303      	movs	r3, #3
 800723a:	e013      	b.n	8007264 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800723c:	897b      	ldrh	r3, [r7, #10]
 800723e:	b2db      	uxtb	r3, r3
 8007240:	f043 0301 	orr.w	r3, r3, #1
 8007244:	b2da      	uxtb	r2, r3
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800724c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800724e:	6a3a      	ldr	r2, [r7, #32]
 8007250:	4906      	ldr	r1, [pc, #24]	; (800726c <I2C_RequestMemoryRead+0x1cc>)
 8007252:	68f8      	ldr	r0, [r7, #12]
 8007254:	f000 f863 	bl	800731e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007258:	4603      	mov	r3, r0
 800725a:	2b00      	cmp	r3, #0
 800725c:	d001      	beq.n	8007262 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	e000      	b.n	8007264 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007262:	2300      	movs	r3, #0
}
 8007264:	4618      	mov	r0, r3
 8007266:	3718      	adds	r7, #24
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}
 800726c:	00010002 	.word	0x00010002

08007270 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b084      	sub	sp, #16
 8007274:	af00      	add	r7, sp, #0
 8007276:	60f8      	str	r0, [r7, #12]
 8007278:	60b9      	str	r1, [r7, #8]
 800727a:	603b      	str	r3, [r7, #0]
 800727c:	4613      	mov	r3, r2
 800727e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007280:	e025      	b.n	80072ce <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007288:	d021      	beq.n	80072ce <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800728a:	f7fe f945 	bl	8005518 <HAL_GetTick>
 800728e:	4602      	mov	r2, r0
 8007290:	69bb      	ldr	r3, [r7, #24]
 8007292:	1ad3      	subs	r3, r2, r3
 8007294:	683a      	ldr	r2, [r7, #0]
 8007296:	429a      	cmp	r2, r3
 8007298:	d302      	bcc.n	80072a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d116      	bne.n	80072ce <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2200      	movs	r2, #0
 80072a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2220      	movs	r2, #32
 80072aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2200      	movs	r2, #0
 80072b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ba:	f043 0220 	orr.w	r2, r3, #32
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2200      	movs	r2, #0
 80072c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80072ca:	2301      	movs	r3, #1
 80072cc:	e023      	b.n	8007316 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	0c1b      	lsrs	r3, r3, #16
 80072d2:	b2db      	uxtb	r3, r3
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d10d      	bne.n	80072f4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	695b      	ldr	r3, [r3, #20]
 80072de:	43da      	mvns	r2, r3
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	4013      	ands	r3, r2
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	bf0c      	ite	eq
 80072ea:	2301      	moveq	r3, #1
 80072ec:	2300      	movne	r3, #0
 80072ee:	b2db      	uxtb	r3, r3
 80072f0:	461a      	mov	r2, r3
 80072f2:	e00c      	b.n	800730e <I2C_WaitOnFlagUntilTimeout+0x9e>
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	699b      	ldr	r3, [r3, #24]
 80072fa:	43da      	mvns	r2, r3
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	4013      	ands	r3, r2
 8007300:	b29b      	uxth	r3, r3
 8007302:	2b00      	cmp	r3, #0
 8007304:	bf0c      	ite	eq
 8007306:	2301      	moveq	r3, #1
 8007308:	2300      	movne	r3, #0
 800730a:	b2db      	uxtb	r3, r3
 800730c:	461a      	mov	r2, r3
 800730e:	79fb      	ldrb	r3, [r7, #7]
 8007310:	429a      	cmp	r2, r3
 8007312:	d0b6      	beq.n	8007282 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007314:	2300      	movs	r3, #0
}
 8007316:	4618      	mov	r0, r3
 8007318:	3710      	adds	r7, #16
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}

0800731e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800731e:	b580      	push	{r7, lr}
 8007320:	b084      	sub	sp, #16
 8007322:	af00      	add	r7, sp, #0
 8007324:	60f8      	str	r0, [r7, #12]
 8007326:	60b9      	str	r1, [r7, #8]
 8007328:	607a      	str	r2, [r7, #4]
 800732a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800732c:	e051      	b.n	80073d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	695b      	ldr	r3, [r3, #20]
 8007334:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007338:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800733c:	d123      	bne.n	8007386 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800734c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007356:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2200      	movs	r2, #0
 800735c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2220      	movs	r2, #32
 8007362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2200      	movs	r2, #0
 800736a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007372:	f043 0204 	orr.w	r2, r3, #4
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2200      	movs	r2, #0
 800737e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007382:	2301      	movs	r3, #1
 8007384:	e046      	b.n	8007414 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800738c:	d021      	beq.n	80073d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800738e:	f7fe f8c3 	bl	8005518 <HAL_GetTick>
 8007392:	4602      	mov	r2, r0
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	1ad3      	subs	r3, r2, r3
 8007398:	687a      	ldr	r2, [r7, #4]
 800739a:	429a      	cmp	r2, r3
 800739c:	d302      	bcc.n	80073a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d116      	bne.n	80073d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2200      	movs	r2, #0
 80073a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2220      	movs	r2, #32
 80073ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2200      	movs	r2, #0
 80073b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073be:	f043 0220 	orr.w	r2, r3, #32
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2200      	movs	r2, #0
 80073ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80073ce:	2301      	movs	r3, #1
 80073d0:	e020      	b.n	8007414 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	0c1b      	lsrs	r3, r3, #16
 80073d6:	b2db      	uxtb	r3, r3
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d10c      	bne.n	80073f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	695b      	ldr	r3, [r3, #20]
 80073e2:	43da      	mvns	r2, r3
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	4013      	ands	r3, r2
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	bf14      	ite	ne
 80073ee:	2301      	movne	r3, #1
 80073f0:	2300      	moveq	r3, #0
 80073f2:	b2db      	uxtb	r3, r3
 80073f4:	e00b      	b.n	800740e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	699b      	ldr	r3, [r3, #24]
 80073fc:	43da      	mvns	r2, r3
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	4013      	ands	r3, r2
 8007402:	b29b      	uxth	r3, r3
 8007404:	2b00      	cmp	r3, #0
 8007406:	bf14      	ite	ne
 8007408:	2301      	movne	r3, #1
 800740a:	2300      	moveq	r3, #0
 800740c:	b2db      	uxtb	r3, r3
 800740e:	2b00      	cmp	r3, #0
 8007410:	d18d      	bne.n	800732e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007412:	2300      	movs	r3, #0
}
 8007414:	4618      	mov	r0, r3
 8007416:	3710      	adds	r7, #16
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}

0800741c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b084      	sub	sp, #16
 8007420:	af00      	add	r7, sp, #0
 8007422:	60f8      	str	r0, [r7, #12]
 8007424:	60b9      	str	r1, [r7, #8]
 8007426:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007428:	e02d      	b.n	8007486 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800742a:	68f8      	ldr	r0, [r7, #12]
 800742c:	f000 f8ce 	bl	80075cc <I2C_IsAcknowledgeFailed>
 8007430:	4603      	mov	r3, r0
 8007432:	2b00      	cmp	r3, #0
 8007434:	d001      	beq.n	800743a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007436:	2301      	movs	r3, #1
 8007438:	e02d      	b.n	8007496 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007440:	d021      	beq.n	8007486 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007442:	f7fe f869 	bl	8005518 <HAL_GetTick>
 8007446:	4602      	mov	r2, r0
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	1ad3      	subs	r3, r2, r3
 800744c:	68ba      	ldr	r2, [r7, #8]
 800744e:	429a      	cmp	r2, r3
 8007450:	d302      	bcc.n	8007458 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d116      	bne.n	8007486 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2200      	movs	r2, #0
 800745c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2220      	movs	r2, #32
 8007462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2200      	movs	r2, #0
 800746a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007472:	f043 0220 	orr.w	r2, r3, #32
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2200      	movs	r2, #0
 800747e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007482:	2301      	movs	r3, #1
 8007484:	e007      	b.n	8007496 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	695b      	ldr	r3, [r3, #20]
 800748c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007490:	2b80      	cmp	r3, #128	; 0x80
 8007492:	d1ca      	bne.n	800742a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007494:	2300      	movs	r3, #0
}
 8007496:	4618      	mov	r0, r3
 8007498:	3710      	adds	r7, #16
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}

0800749e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800749e:	b580      	push	{r7, lr}
 80074a0:	b084      	sub	sp, #16
 80074a2:	af00      	add	r7, sp, #0
 80074a4:	60f8      	str	r0, [r7, #12]
 80074a6:	60b9      	str	r1, [r7, #8]
 80074a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80074aa:	e02d      	b.n	8007508 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80074ac:	68f8      	ldr	r0, [r7, #12]
 80074ae:	f000 f88d 	bl	80075cc <I2C_IsAcknowledgeFailed>
 80074b2:	4603      	mov	r3, r0
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d001      	beq.n	80074bc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80074b8:	2301      	movs	r3, #1
 80074ba:	e02d      	b.n	8007518 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074c2:	d021      	beq.n	8007508 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074c4:	f7fe f828 	bl	8005518 <HAL_GetTick>
 80074c8:	4602      	mov	r2, r0
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	1ad3      	subs	r3, r2, r3
 80074ce:	68ba      	ldr	r2, [r7, #8]
 80074d0:	429a      	cmp	r2, r3
 80074d2:	d302      	bcc.n	80074da <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d116      	bne.n	8007508 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2200      	movs	r2, #0
 80074de:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2220      	movs	r2, #32
 80074e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2200      	movs	r2, #0
 80074ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074f4:	f043 0220 	orr.w	r2, r3, #32
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2200      	movs	r2, #0
 8007500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007504:	2301      	movs	r3, #1
 8007506:	e007      	b.n	8007518 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	695b      	ldr	r3, [r3, #20]
 800750e:	f003 0304 	and.w	r3, r3, #4
 8007512:	2b04      	cmp	r3, #4
 8007514:	d1ca      	bne.n	80074ac <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007516:	2300      	movs	r3, #0
}
 8007518:	4618      	mov	r0, r3
 800751a:	3710      	adds	r7, #16
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}

08007520 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b084      	sub	sp, #16
 8007524:	af00      	add	r7, sp, #0
 8007526:	60f8      	str	r0, [r7, #12]
 8007528:	60b9      	str	r1, [r7, #8]
 800752a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800752c:	e042      	b.n	80075b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	695b      	ldr	r3, [r3, #20]
 8007534:	f003 0310 	and.w	r3, r3, #16
 8007538:	2b10      	cmp	r3, #16
 800753a:	d119      	bne.n	8007570 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f06f 0210 	mvn.w	r2, #16
 8007544:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2200      	movs	r2, #0
 800754a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2220      	movs	r2, #32
 8007550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	2200      	movs	r2, #0
 8007558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2200      	movs	r2, #0
 8007568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800756c:	2301      	movs	r3, #1
 800756e:	e029      	b.n	80075c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007570:	f7fd ffd2 	bl	8005518 <HAL_GetTick>
 8007574:	4602      	mov	r2, r0
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	1ad3      	subs	r3, r2, r3
 800757a:	68ba      	ldr	r2, [r7, #8]
 800757c:	429a      	cmp	r2, r3
 800757e:	d302      	bcc.n	8007586 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d116      	bne.n	80075b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2200      	movs	r2, #0
 800758a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2220      	movs	r2, #32
 8007590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2200      	movs	r2, #0
 8007598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a0:	f043 0220 	orr.w	r2, r3, #32
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2200      	movs	r2, #0
 80075ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80075b0:	2301      	movs	r3, #1
 80075b2:	e007      	b.n	80075c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	695b      	ldr	r3, [r3, #20]
 80075ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075be:	2b40      	cmp	r3, #64	; 0x40
 80075c0:	d1b5      	bne.n	800752e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80075c2:	2300      	movs	r3, #0
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3710      	adds	r7, #16
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b083      	sub	sp, #12
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	695b      	ldr	r3, [r3, #20]
 80075da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075e2:	d11b      	bne.n	800761c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80075ec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2200      	movs	r2, #0
 80075f2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2220      	movs	r2, #32
 80075f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2200      	movs	r2, #0
 8007600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007608:	f043 0204 	orr.w	r2, r3, #4
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2200      	movs	r2, #0
 8007614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007618:	2301      	movs	r3, #1
 800761a:	e000      	b.n	800761e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800761c:	2300      	movs	r3, #0
}
 800761e:	4618      	mov	r0, r3
 8007620:	370c      	adds	r7, #12
 8007622:	46bd      	mov	sp, r7
 8007624:	bc80      	pop	{r7}
 8007626:	4770      	bx	lr

08007628 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b086      	sub	sp, #24
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d101      	bne.n	800763a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007636:	2301      	movs	r3, #1
 8007638:	e272      	b.n	8007b20 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f003 0301 	and.w	r3, r3, #1
 8007642:	2b00      	cmp	r3, #0
 8007644:	f000 8087 	beq.w	8007756 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007648:	4b92      	ldr	r3, [pc, #584]	; (8007894 <HAL_RCC_OscConfig+0x26c>)
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	f003 030c 	and.w	r3, r3, #12
 8007650:	2b04      	cmp	r3, #4
 8007652:	d00c      	beq.n	800766e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007654:	4b8f      	ldr	r3, [pc, #572]	; (8007894 <HAL_RCC_OscConfig+0x26c>)
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	f003 030c 	and.w	r3, r3, #12
 800765c:	2b08      	cmp	r3, #8
 800765e:	d112      	bne.n	8007686 <HAL_RCC_OscConfig+0x5e>
 8007660:	4b8c      	ldr	r3, [pc, #560]	; (8007894 <HAL_RCC_OscConfig+0x26c>)
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007668:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800766c:	d10b      	bne.n	8007686 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800766e:	4b89      	ldr	r3, [pc, #548]	; (8007894 <HAL_RCC_OscConfig+0x26c>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007676:	2b00      	cmp	r3, #0
 8007678:	d06c      	beq.n	8007754 <HAL_RCC_OscConfig+0x12c>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d168      	bne.n	8007754 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007682:	2301      	movs	r3, #1
 8007684:	e24c      	b.n	8007b20 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	685b      	ldr	r3, [r3, #4]
 800768a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800768e:	d106      	bne.n	800769e <HAL_RCC_OscConfig+0x76>
 8007690:	4b80      	ldr	r3, [pc, #512]	; (8007894 <HAL_RCC_OscConfig+0x26c>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a7f      	ldr	r2, [pc, #508]	; (8007894 <HAL_RCC_OscConfig+0x26c>)
 8007696:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800769a:	6013      	str	r3, [r2, #0]
 800769c:	e02e      	b.n	80076fc <HAL_RCC_OscConfig+0xd4>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d10c      	bne.n	80076c0 <HAL_RCC_OscConfig+0x98>
 80076a6:	4b7b      	ldr	r3, [pc, #492]	; (8007894 <HAL_RCC_OscConfig+0x26c>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a7a      	ldr	r2, [pc, #488]	; (8007894 <HAL_RCC_OscConfig+0x26c>)
 80076ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076b0:	6013      	str	r3, [r2, #0]
 80076b2:	4b78      	ldr	r3, [pc, #480]	; (8007894 <HAL_RCC_OscConfig+0x26c>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a77      	ldr	r2, [pc, #476]	; (8007894 <HAL_RCC_OscConfig+0x26c>)
 80076b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80076bc:	6013      	str	r3, [r2, #0]
 80076be:	e01d      	b.n	80076fc <HAL_RCC_OscConfig+0xd4>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80076c8:	d10c      	bne.n	80076e4 <HAL_RCC_OscConfig+0xbc>
 80076ca:	4b72      	ldr	r3, [pc, #456]	; (8007894 <HAL_RCC_OscConfig+0x26c>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a71      	ldr	r2, [pc, #452]	; (8007894 <HAL_RCC_OscConfig+0x26c>)
 80076d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80076d4:	6013      	str	r3, [r2, #0]
 80076d6:	4b6f      	ldr	r3, [pc, #444]	; (8007894 <HAL_RCC_OscConfig+0x26c>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a6e      	ldr	r2, [pc, #440]	; (8007894 <HAL_RCC_OscConfig+0x26c>)
 80076dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076e0:	6013      	str	r3, [r2, #0]
 80076e2:	e00b      	b.n	80076fc <HAL_RCC_OscConfig+0xd4>
 80076e4:	4b6b      	ldr	r3, [pc, #428]	; (8007894 <HAL_RCC_OscConfig+0x26c>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a6a      	ldr	r2, [pc, #424]	; (8007894 <HAL_RCC_OscConfig+0x26c>)
 80076ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076ee:	6013      	str	r3, [r2, #0]
 80076f0:	4b68      	ldr	r3, [pc, #416]	; (8007894 <HAL_RCC_OscConfig+0x26c>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a67      	ldr	r2, [pc, #412]	; (8007894 <HAL_RCC_OscConfig+0x26c>)
 80076f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80076fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d013      	beq.n	800772c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007704:	f7fd ff08 	bl	8005518 <HAL_GetTick>
 8007708:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800770a:	e008      	b.n	800771e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800770c:	f7fd ff04 	bl	8005518 <HAL_GetTick>
 8007710:	4602      	mov	r2, r0
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	1ad3      	subs	r3, r2, r3
 8007716:	2b64      	cmp	r3, #100	; 0x64
 8007718:	d901      	bls.n	800771e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800771a:	2303      	movs	r3, #3
 800771c:	e200      	b.n	8007b20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800771e:	4b5d      	ldr	r3, [pc, #372]	; (8007894 <HAL_RCC_OscConfig+0x26c>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007726:	2b00      	cmp	r3, #0
 8007728:	d0f0      	beq.n	800770c <HAL_RCC_OscConfig+0xe4>
 800772a:	e014      	b.n	8007756 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800772c:	f7fd fef4 	bl	8005518 <HAL_GetTick>
 8007730:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007732:	e008      	b.n	8007746 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007734:	f7fd fef0 	bl	8005518 <HAL_GetTick>
 8007738:	4602      	mov	r2, r0
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	1ad3      	subs	r3, r2, r3
 800773e:	2b64      	cmp	r3, #100	; 0x64
 8007740:	d901      	bls.n	8007746 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007742:	2303      	movs	r3, #3
 8007744:	e1ec      	b.n	8007b20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007746:	4b53      	ldr	r3, [pc, #332]	; (8007894 <HAL_RCC_OscConfig+0x26c>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800774e:	2b00      	cmp	r3, #0
 8007750:	d1f0      	bne.n	8007734 <HAL_RCC_OscConfig+0x10c>
 8007752:	e000      	b.n	8007756 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007754:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f003 0302 	and.w	r3, r3, #2
 800775e:	2b00      	cmp	r3, #0
 8007760:	d063      	beq.n	800782a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007762:	4b4c      	ldr	r3, [pc, #304]	; (8007894 <HAL_RCC_OscConfig+0x26c>)
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	f003 030c 	and.w	r3, r3, #12
 800776a:	2b00      	cmp	r3, #0
 800776c:	d00b      	beq.n	8007786 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800776e:	4b49      	ldr	r3, [pc, #292]	; (8007894 <HAL_RCC_OscConfig+0x26c>)
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	f003 030c 	and.w	r3, r3, #12
 8007776:	2b08      	cmp	r3, #8
 8007778:	d11c      	bne.n	80077b4 <HAL_RCC_OscConfig+0x18c>
 800777a:	4b46      	ldr	r3, [pc, #280]	; (8007894 <HAL_RCC_OscConfig+0x26c>)
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007782:	2b00      	cmp	r3, #0
 8007784:	d116      	bne.n	80077b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007786:	4b43      	ldr	r3, [pc, #268]	; (8007894 <HAL_RCC_OscConfig+0x26c>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f003 0302 	and.w	r3, r3, #2
 800778e:	2b00      	cmp	r3, #0
 8007790:	d005      	beq.n	800779e <HAL_RCC_OscConfig+0x176>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	691b      	ldr	r3, [r3, #16]
 8007796:	2b01      	cmp	r3, #1
 8007798:	d001      	beq.n	800779e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800779a:	2301      	movs	r3, #1
 800779c:	e1c0      	b.n	8007b20 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800779e:	4b3d      	ldr	r3, [pc, #244]	; (8007894 <HAL_RCC_OscConfig+0x26c>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	695b      	ldr	r3, [r3, #20]
 80077aa:	00db      	lsls	r3, r3, #3
 80077ac:	4939      	ldr	r1, [pc, #228]	; (8007894 <HAL_RCC_OscConfig+0x26c>)
 80077ae:	4313      	orrs	r3, r2
 80077b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80077b2:	e03a      	b.n	800782a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	691b      	ldr	r3, [r3, #16]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d020      	beq.n	80077fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80077bc:	4b36      	ldr	r3, [pc, #216]	; (8007898 <HAL_RCC_OscConfig+0x270>)
 80077be:	2201      	movs	r2, #1
 80077c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077c2:	f7fd fea9 	bl	8005518 <HAL_GetTick>
 80077c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077c8:	e008      	b.n	80077dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80077ca:	f7fd fea5 	bl	8005518 <HAL_GetTick>
 80077ce:	4602      	mov	r2, r0
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	1ad3      	subs	r3, r2, r3
 80077d4:	2b02      	cmp	r3, #2
 80077d6:	d901      	bls.n	80077dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80077d8:	2303      	movs	r3, #3
 80077da:	e1a1      	b.n	8007b20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077dc:	4b2d      	ldr	r3, [pc, #180]	; (8007894 <HAL_RCC_OscConfig+0x26c>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f003 0302 	and.w	r3, r3, #2
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d0f0      	beq.n	80077ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077e8:	4b2a      	ldr	r3, [pc, #168]	; (8007894 <HAL_RCC_OscConfig+0x26c>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	695b      	ldr	r3, [r3, #20]
 80077f4:	00db      	lsls	r3, r3, #3
 80077f6:	4927      	ldr	r1, [pc, #156]	; (8007894 <HAL_RCC_OscConfig+0x26c>)
 80077f8:	4313      	orrs	r3, r2
 80077fa:	600b      	str	r3, [r1, #0]
 80077fc:	e015      	b.n	800782a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80077fe:	4b26      	ldr	r3, [pc, #152]	; (8007898 <HAL_RCC_OscConfig+0x270>)
 8007800:	2200      	movs	r2, #0
 8007802:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007804:	f7fd fe88 	bl	8005518 <HAL_GetTick>
 8007808:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800780a:	e008      	b.n	800781e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800780c:	f7fd fe84 	bl	8005518 <HAL_GetTick>
 8007810:	4602      	mov	r2, r0
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	1ad3      	subs	r3, r2, r3
 8007816:	2b02      	cmp	r3, #2
 8007818:	d901      	bls.n	800781e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800781a:	2303      	movs	r3, #3
 800781c:	e180      	b.n	8007b20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800781e:	4b1d      	ldr	r3, [pc, #116]	; (8007894 <HAL_RCC_OscConfig+0x26c>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f003 0302 	and.w	r3, r3, #2
 8007826:	2b00      	cmp	r3, #0
 8007828:	d1f0      	bne.n	800780c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f003 0308 	and.w	r3, r3, #8
 8007832:	2b00      	cmp	r3, #0
 8007834:	d03a      	beq.n	80078ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	699b      	ldr	r3, [r3, #24]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d019      	beq.n	8007872 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800783e:	4b17      	ldr	r3, [pc, #92]	; (800789c <HAL_RCC_OscConfig+0x274>)
 8007840:	2201      	movs	r2, #1
 8007842:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007844:	f7fd fe68 	bl	8005518 <HAL_GetTick>
 8007848:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800784a:	e008      	b.n	800785e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800784c:	f7fd fe64 	bl	8005518 <HAL_GetTick>
 8007850:	4602      	mov	r2, r0
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	1ad3      	subs	r3, r2, r3
 8007856:	2b02      	cmp	r3, #2
 8007858:	d901      	bls.n	800785e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800785a:	2303      	movs	r3, #3
 800785c:	e160      	b.n	8007b20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800785e:	4b0d      	ldr	r3, [pc, #52]	; (8007894 <HAL_RCC_OscConfig+0x26c>)
 8007860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007862:	f003 0302 	and.w	r3, r3, #2
 8007866:	2b00      	cmp	r3, #0
 8007868:	d0f0      	beq.n	800784c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800786a:	2001      	movs	r0, #1
 800786c:	f000 fac4 	bl	8007df8 <RCC_Delay>
 8007870:	e01c      	b.n	80078ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007872:	4b0a      	ldr	r3, [pc, #40]	; (800789c <HAL_RCC_OscConfig+0x274>)
 8007874:	2200      	movs	r2, #0
 8007876:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007878:	f7fd fe4e 	bl	8005518 <HAL_GetTick>
 800787c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800787e:	e00f      	b.n	80078a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007880:	f7fd fe4a 	bl	8005518 <HAL_GetTick>
 8007884:	4602      	mov	r2, r0
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	1ad3      	subs	r3, r2, r3
 800788a:	2b02      	cmp	r3, #2
 800788c:	d908      	bls.n	80078a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800788e:	2303      	movs	r3, #3
 8007890:	e146      	b.n	8007b20 <HAL_RCC_OscConfig+0x4f8>
 8007892:	bf00      	nop
 8007894:	40021000 	.word	0x40021000
 8007898:	42420000 	.word	0x42420000
 800789c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80078a0:	4b92      	ldr	r3, [pc, #584]	; (8007aec <HAL_RCC_OscConfig+0x4c4>)
 80078a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a4:	f003 0302 	and.w	r3, r3, #2
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d1e9      	bne.n	8007880 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f003 0304 	and.w	r3, r3, #4
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	f000 80a6 	beq.w	8007a06 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80078ba:	2300      	movs	r3, #0
 80078bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80078be:	4b8b      	ldr	r3, [pc, #556]	; (8007aec <HAL_RCC_OscConfig+0x4c4>)
 80078c0:	69db      	ldr	r3, [r3, #28]
 80078c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d10d      	bne.n	80078e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80078ca:	4b88      	ldr	r3, [pc, #544]	; (8007aec <HAL_RCC_OscConfig+0x4c4>)
 80078cc:	69db      	ldr	r3, [r3, #28]
 80078ce:	4a87      	ldr	r2, [pc, #540]	; (8007aec <HAL_RCC_OscConfig+0x4c4>)
 80078d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078d4:	61d3      	str	r3, [r2, #28]
 80078d6:	4b85      	ldr	r3, [pc, #532]	; (8007aec <HAL_RCC_OscConfig+0x4c4>)
 80078d8:	69db      	ldr	r3, [r3, #28]
 80078da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078de:	60bb      	str	r3, [r7, #8]
 80078e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80078e2:	2301      	movs	r3, #1
 80078e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078e6:	4b82      	ldr	r3, [pc, #520]	; (8007af0 <HAL_RCC_OscConfig+0x4c8>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d118      	bne.n	8007924 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80078f2:	4b7f      	ldr	r3, [pc, #508]	; (8007af0 <HAL_RCC_OscConfig+0x4c8>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4a7e      	ldr	r2, [pc, #504]	; (8007af0 <HAL_RCC_OscConfig+0x4c8>)
 80078f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80078fe:	f7fd fe0b 	bl	8005518 <HAL_GetTick>
 8007902:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007904:	e008      	b.n	8007918 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007906:	f7fd fe07 	bl	8005518 <HAL_GetTick>
 800790a:	4602      	mov	r2, r0
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	1ad3      	subs	r3, r2, r3
 8007910:	2b64      	cmp	r3, #100	; 0x64
 8007912:	d901      	bls.n	8007918 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007914:	2303      	movs	r3, #3
 8007916:	e103      	b.n	8007b20 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007918:	4b75      	ldr	r3, [pc, #468]	; (8007af0 <HAL_RCC_OscConfig+0x4c8>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007920:	2b00      	cmp	r3, #0
 8007922:	d0f0      	beq.n	8007906 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	68db      	ldr	r3, [r3, #12]
 8007928:	2b01      	cmp	r3, #1
 800792a:	d106      	bne.n	800793a <HAL_RCC_OscConfig+0x312>
 800792c:	4b6f      	ldr	r3, [pc, #444]	; (8007aec <HAL_RCC_OscConfig+0x4c4>)
 800792e:	6a1b      	ldr	r3, [r3, #32]
 8007930:	4a6e      	ldr	r2, [pc, #440]	; (8007aec <HAL_RCC_OscConfig+0x4c4>)
 8007932:	f043 0301 	orr.w	r3, r3, #1
 8007936:	6213      	str	r3, [r2, #32]
 8007938:	e02d      	b.n	8007996 <HAL_RCC_OscConfig+0x36e>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	68db      	ldr	r3, [r3, #12]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d10c      	bne.n	800795c <HAL_RCC_OscConfig+0x334>
 8007942:	4b6a      	ldr	r3, [pc, #424]	; (8007aec <HAL_RCC_OscConfig+0x4c4>)
 8007944:	6a1b      	ldr	r3, [r3, #32]
 8007946:	4a69      	ldr	r2, [pc, #420]	; (8007aec <HAL_RCC_OscConfig+0x4c4>)
 8007948:	f023 0301 	bic.w	r3, r3, #1
 800794c:	6213      	str	r3, [r2, #32]
 800794e:	4b67      	ldr	r3, [pc, #412]	; (8007aec <HAL_RCC_OscConfig+0x4c4>)
 8007950:	6a1b      	ldr	r3, [r3, #32]
 8007952:	4a66      	ldr	r2, [pc, #408]	; (8007aec <HAL_RCC_OscConfig+0x4c4>)
 8007954:	f023 0304 	bic.w	r3, r3, #4
 8007958:	6213      	str	r3, [r2, #32]
 800795a:	e01c      	b.n	8007996 <HAL_RCC_OscConfig+0x36e>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	68db      	ldr	r3, [r3, #12]
 8007960:	2b05      	cmp	r3, #5
 8007962:	d10c      	bne.n	800797e <HAL_RCC_OscConfig+0x356>
 8007964:	4b61      	ldr	r3, [pc, #388]	; (8007aec <HAL_RCC_OscConfig+0x4c4>)
 8007966:	6a1b      	ldr	r3, [r3, #32]
 8007968:	4a60      	ldr	r2, [pc, #384]	; (8007aec <HAL_RCC_OscConfig+0x4c4>)
 800796a:	f043 0304 	orr.w	r3, r3, #4
 800796e:	6213      	str	r3, [r2, #32]
 8007970:	4b5e      	ldr	r3, [pc, #376]	; (8007aec <HAL_RCC_OscConfig+0x4c4>)
 8007972:	6a1b      	ldr	r3, [r3, #32]
 8007974:	4a5d      	ldr	r2, [pc, #372]	; (8007aec <HAL_RCC_OscConfig+0x4c4>)
 8007976:	f043 0301 	orr.w	r3, r3, #1
 800797a:	6213      	str	r3, [r2, #32]
 800797c:	e00b      	b.n	8007996 <HAL_RCC_OscConfig+0x36e>
 800797e:	4b5b      	ldr	r3, [pc, #364]	; (8007aec <HAL_RCC_OscConfig+0x4c4>)
 8007980:	6a1b      	ldr	r3, [r3, #32]
 8007982:	4a5a      	ldr	r2, [pc, #360]	; (8007aec <HAL_RCC_OscConfig+0x4c4>)
 8007984:	f023 0301 	bic.w	r3, r3, #1
 8007988:	6213      	str	r3, [r2, #32]
 800798a:	4b58      	ldr	r3, [pc, #352]	; (8007aec <HAL_RCC_OscConfig+0x4c4>)
 800798c:	6a1b      	ldr	r3, [r3, #32]
 800798e:	4a57      	ldr	r2, [pc, #348]	; (8007aec <HAL_RCC_OscConfig+0x4c4>)
 8007990:	f023 0304 	bic.w	r3, r3, #4
 8007994:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	68db      	ldr	r3, [r3, #12]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d015      	beq.n	80079ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800799e:	f7fd fdbb 	bl	8005518 <HAL_GetTick>
 80079a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079a4:	e00a      	b.n	80079bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079a6:	f7fd fdb7 	bl	8005518 <HAL_GetTick>
 80079aa:	4602      	mov	r2, r0
 80079ac:	693b      	ldr	r3, [r7, #16]
 80079ae:	1ad3      	subs	r3, r2, r3
 80079b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d901      	bls.n	80079bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80079b8:	2303      	movs	r3, #3
 80079ba:	e0b1      	b.n	8007b20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079bc:	4b4b      	ldr	r3, [pc, #300]	; (8007aec <HAL_RCC_OscConfig+0x4c4>)
 80079be:	6a1b      	ldr	r3, [r3, #32]
 80079c0:	f003 0302 	and.w	r3, r3, #2
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d0ee      	beq.n	80079a6 <HAL_RCC_OscConfig+0x37e>
 80079c8:	e014      	b.n	80079f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80079ca:	f7fd fda5 	bl	8005518 <HAL_GetTick>
 80079ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80079d0:	e00a      	b.n	80079e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079d2:	f7fd fda1 	bl	8005518 <HAL_GetTick>
 80079d6:	4602      	mov	r2, r0
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	1ad3      	subs	r3, r2, r3
 80079dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d901      	bls.n	80079e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80079e4:	2303      	movs	r3, #3
 80079e6:	e09b      	b.n	8007b20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80079e8:	4b40      	ldr	r3, [pc, #256]	; (8007aec <HAL_RCC_OscConfig+0x4c4>)
 80079ea:	6a1b      	ldr	r3, [r3, #32]
 80079ec:	f003 0302 	and.w	r3, r3, #2
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d1ee      	bne.n	80079d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80079f4:	7dfb      	ldrb	r3, [r7, #23]
 80079f6:	2b01      	cmp	r3, #1
 80079f8:	d105      	bne.n	8007a06 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80079fa:	4b3c      	ldr	r3, [pc, #240]	; (8007aec <HAL_RCC_OscConfig+0x4c4>)
 80079fc:	69db      	ldr	r3, [r3, #28]
 80079fe:	4a3b      	ldr	r2, [pc, #236]	; (8007aec <HAL_RCC_OscConfig+0x4c4>)
 8007a00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a04:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	69db      	ldr	r3, [r3, #28]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	f000 8087 	beq.w	8007b1e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007a10:	4b36      	ldr	r3, [pc, #216]	; (8007aec <HAL_RCC_OscConfig+0x4c4>)
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	f003 030c 	and.w	r3, r3, #12
 8007a18:	2b08      	cmp	r3, #8
 8007a1a:	d061      	beq.n	8007ae0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	69db      	ldr	r3, [r3, #28]
 8007a20:	2b02      	cmp	r3, #2
 8007a22:	d146      	bne.n	8007ab2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a24:	4b33      	ldr	r3, [pc, #204]	; (8007af4 <HAL_RCC_OscConfig+0x4cc>)
 8007a26:	2200      	movs	r2, #0
 8007a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a2a:	f7fd fd75 	bl	8005518 <HAL_GetTick>
 8007a2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007a30:	e008      	b.n	8007a44 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a32:	f7fd fd71 	bl	8005518 <HAL_GetTick>
 8007a36:	4602      	mov	r2, r0
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	1ad3      	subs	r3, r2, r3
 8007a3c:	2b02      	cmp	r3, #2
 8007a3e:	d901      	bls.n	8007a44 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007a40:	2303      	movs	r3, #3
 8007a42:	e06d      	b.n	8007b20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007a44:	4b29      	ldr	r3, [pc, #164]	; (8007aec <HAL_RCC_OscConfig+0x4c4>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d1f0      	bne.n	8007a32 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6a1b      	ldr	r3, [r3, #32]
 8007a54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a58:	d108      	bne.n	8007a6c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007a5a:	4b24      	ldr	r3, [pc, #144]	; (8007aec <HAL_RCC_OscConfig+0x4c4>)
 8007a5c:	685b      	ldr	r3, [r3, #4]
 8007a5e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	689b      	ldr	r3, [r3, #8]
 8007a66:	4921      	ldr	r1, [pc, #132]	; (8007aec <HAL_RCC_OscConfig+0x4c4>)
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007a6c:	4b1f      	ldr	r3, [pc, #124]	; (8007aec <HAL_RCC_OscConfig+0x4c4>)
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6a19      	ldr	r1, [r3, #32]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a7c:	430b      	orrs	r3, r1
 8007a7e:	491b      	ldr	r1, [pc, #108]	; (8007aec <HAL_RCC_OscConfig+0x4c4>)
 8007a80:	4313      	orrs	r3, r2
 8007a82:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007a84:	4b1b      	ldr	r3, [pc, #108]	; (8007af4 <HAL_RCC_OscConfig+0x4cc>)
 8007a86:	2201      	movs	r2, #1
 8007a88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a8a:	f7fd fd45 	bl	8005518 <HAL_GetTick>
 8007a8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007a90:	e008      	b.n	8007aa4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a92:	f7fd fd41 	bl	8005518 <HAL_GetTick>
 8007a96:	4602      	mov	r2, r0
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	1ad3      	subs	r3, r2, r3
 8007a9c:	2b02      	cmp	r3, #2
 8007a9e:	d901      	bls.n	8007aa4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007aa0:	2303      	movs	r3, #3
 8007aa2:	e03d      	b.n	8007b20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007aa4:	4b11      	ldr	r3, [pc, #68]	; (8007aec <HAL_RCC_OscConfig+0x4c4>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d0f0      	beq.n	8007a92 <HAL_RCC_OscConfig+0x46a>
 8007ab0:	e035      	b.n	8007b1e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ab2:	4b10      	ldr	r3, [pc, #64]	; (8007af4 <HAL_RCC_OscConfig+0x4cc>)
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ab8:	f7fd fd2e 	bl	8005518 <HAL_GetTick>
 8007abc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007abe:	e008      	b.n	8007ad2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ac0:	f7fd fd2a 	bl	8005518 <HAL_GetTick>
 8007ac4:	4602      	mov	r2, r0
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	1ad3      	subs	r3, r2, r3
 8007aca:	2b02      	cmp	r3, #2
 8007acc:	d901      	bls.n	8007ad2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007ace:	2303      	movs	r3, #3
 8007ad0:	e026      	b.n	8007b20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007ad2:	4b06      	ldr	r3, [pc, #24]	; (8007aec <HAL_RCC_OscConfig+0x4c4>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d1f0      	bne.n	8007ac0 <HAL_RCC_OscConfig+0x498>
 8007ade:	e01e      	b.n	8007b1e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	69db      	ldr	r3, [r3, #28]
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d107      	bne.n	8007af8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8007ae8:	2301      	movs	r3, #1
 8007aea:	e019      	b.n	8007b20 <HAL_RCC_OscConfig+0x4f8>
 8007aec:	40021000 	.word	0x40021000
 8007af0:	40007000 	.word	0x40007000
 8007af4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007af8:	4b0b      	ldr	r3, [pc, #44]	; (8007b28 <HAL_RCC_OscConfig+0x500>)
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6a1b      	ldr	r3, [r3, #32]
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d106      	bne.n	8007b1a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b16:	429a      	cmp	r2, r3
 8007b18:	d001      	beq.n	8007b1e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	e000      	b.n	8007b20 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8007b1e:	2300      	movs	r3, #0
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3718      	adds	r7, #24
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}
 8007b28:	40021000 	.word	0x40021000

08007b2c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b084      	sub	sp, #16
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d101      	bne.n	8007b40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	e0d0      	b.n	8007ce2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007b40:	4b6a      	ldr	r3, [pc, #424]	; (8007cec <HAL_RCC_ClockConfig+0x1c0>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f003 0307 	and.w	r3, r3, #7
 8007b48:	683a      	ldr	r2, [r7, #0]
 8007b4a:	429a      	cmp	r2, r3
 8007b4c:	d910      	bls.n	8007b70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b4e:	4b67      	ldr	r3, [pc, #412]	; (8007cec <HAL_RCC_ClockConfig+0x1c0>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f023 0207 	bic.w	r2, r3, #7
 8007b56:	4965      	ldr	r1, [pc, #404]	; (8007cec <HAL_RCC_ClockConfig+0x1c0>)
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b5e:	4b63      	ldr	r3, [pc, #396]	; (8007cec <HAL_RCC_ClockConfig+0x1c0>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f003 0307 	and.w	r3, r3, #7
 8007b66:	683a      	ldr	r2, [r7, #0]
 8007b68:	429a      	cmp	r2, r3
 8007b6a:	d001      	beq.n	8007b70 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	e0b8      	b.n	8007ce2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f003 0302 	and.w	r3, r3, #2
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d020      	beq.n	8007bbe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f003 0304 	and.w	r3, r3, #4
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d005      	beq.n	8007b94 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007b88:	4b59      	ldr	r3, [pc, #356]	; (8007cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	4a58      	ldr	r2, [pc, #352]	; (8007cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8007b8e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007b92:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f003 0308 	and.w	r3, r3, #8
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d005      	beq.n	8007bac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007ba0:	4b53      	ldr	r3, [pc, #332]	; (8007cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	4a52      	ldr	r2, [pc, #328]	; (8007cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8007ba6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8007baa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007bac:	4b50      	ldr	r3, [pc, #320]	; (8007cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	689b      	ldr	r3, [r3, #8]
 8007bb8:	494d      	ldr	r1, [pc, #308]	; (8007cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f003 0301 	and.w	r3, r3, #1
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d040      	beq.n	8007c4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	2b01      	cmp	r3, #1
 8007bd0:	d107      	bne.n	8007be2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007bd2:	4b47      	ldr	r3, [pc, #284]	; (8007cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d115      	bne.n	8007c0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007bde:	2301      	movs	r3, #1
 8007be0:	e07f      	b.n	8007ce2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	2b02      	cmp	r3, #2
 8007be8:	d107      	bne.n	8007bfa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007bea:	4b41      	ldr	r3, [pc, #260]	; (8007cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d109      	bne.n	8007c0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	e073      	b.n	8007ce2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007bfa:	4b3d      	ldr	r3, [pc, #244]	; (8007cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f003 0302 	and.w	r3, r3, #2
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d101      	bne.n	8007c0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c06:	2301      	movs	r3, #1
 8007c08:	e06b      	b.n	8007ce2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007c0a:	4b39      	ldr	r3, [pc, #228]	; (8007cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	f023 0203 	bic.w	r2, r3, #3
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	4936      	ldr	r1, [pc, #216]	; (8007cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8007c18:	4313      	orrs	r3, r2
 8007c1a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007c1c:	f7fd fc7c 	bl	8005518 <HAL_GetTick>
 8007c20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c22:	e00a      	b.n	8007c3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c24:	f7fd fc78 	bl	8005518 <HAL_GetTick>
 8007c28:	4602      	mov	r2, r0
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	1ad3      	subs	r3, r2, r3
 8007c2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d901      	bls.n	8007c3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007c36:	2303      	movs	r3, #3
 8007c38:	e053      	b.n	8007ce2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c3a:	4b2d      	ldr	r3, [pc, #180]	; (8007cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	f003 020c 	and.w	r2, r3, #12
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	009b      	lsls	r3, r3, #2
 8007c48:	429a      	cmp	r2, r3
 8007c4a:	d1eb      	bne.n	8007c24 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007c4c:	4b27      	ldr	r3, [pc, #156]	; (8007cec <HAL_RCC_ClockConfig+0x1c0>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f003 0307 	and.w	r3, r3, #7
 8007c54:	683a      	ldr	r2, [r7, #0]
 8007c56:	429a      	cmp	r2, r3
 8007c58:	d210      	bcs.n	8007c7c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c5a:	4b24      	ldr	r3, [pc, #144]	; (8007cec <HAL_RCC_ClockConfig+0x1c0>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f023 0207 	bic.w	r2, r3, #7
 8007c62:	4922      	ldr	r1, [pc, #136]	; (8007cec <HAL_RCC_ClockConfig+0x1c0>)
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	4313      	orrs	r3, r2
 8007c68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c6a:	4b20      	ldr	r3, [pc, #128]	; (8007cec <HAL_RCC_ClockConfig+0x1c0>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f003 0307 	and.w	r3, r3, #7
 8007c72:	683a      	ldr	r2, [r7, #0]
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d001      	beq.n	8007c7c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007c78:	2301      	movs	r3, #1
 8007c7a:	e032      	b.n	8007ce2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f003 0304 	and.w	r3, r3, #4
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d008      	beq.n	8007c9a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007c88:	4b19      	ldr	r3, [pc, #100]	; (8007cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8007c8a:	685b      	ldr	r3, [r3, #4]
 8007c8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	68db      	ldr	r3, [r3, #12]
 8007c94:	4916      	ldr	r1, [pc, #88]	; (8007cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8007c96:	4313      	orrs	r3, r2
 8007c98:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f003 0308 	and.w	r3, r3, #8
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d009      	beq.n	8007cba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007ca6:	4b12      	ldr	r3, [pc, #72]	; (8007cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	691b      	ldr	r3, [r3, #16]
 8007cb2:	00db      	lsls	r3, r3, #3
 8007cb4:	490e      	ldr	r1, [pc, #56]	; (8007cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007cba:	f000 f821 	bl	8007d00 <HAL_RCC_GetSysClockFreq>
 8007cbe:	4602      	mov	r2, r0
 8007cc0:	4b0b      	ldr	r3, [pc, #44]	; (8007cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	091b      	lsrs	r3, r3, #4
 8007cc6:	f003 030f 	and.w	r3, r3, #15
 8007cca:	490a      	ldr	r1, [pc, #40]	; (8007cf4 <HAL_RCC_ClockConfig+0x1c8>)
 8007ccc:	5ccb      	ldrb	r3, [r1, r3]
 8007cce:	fa22 f303 	lsr.w	r3, r2, r3
 8007cd2:	4a09      	ldr	r2, [pc, #36]	; (8007cf8 <HAL_RCC_ClockConfig+0x1cc>)
 8007cd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007cd6:	4b09      	ldr	r3, [pc, #36]	; (8007cfc <HAL_RCC_ClockConfig+0x1d0>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f7fd fbda 	bl	8005494 <HAL_InitTick>

  return HAL_OK;
 8007ce0:	2300      	movs	r3, #0
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3710      	adds	r7, #16
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}
 8007cea:	bf00      	nop
 8007cec:	40022000 	.word	0x40022000
 8007cf0:	40021000 	.word	0x40021000
 8007cf4:	0800b1f8 	.word	0x0800b1f8
 8007cf8:	20000018 	.word	0x20000018
 8007cfc:	2000001c 	.word	0x2000001c

08007d00 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007d00:	b490      	push	{r4, r7}
 8007d02:	b08a      	sub	sp, #40	; 0x28
 8007d04:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8007d06:	4b29      	ldr	r3, [pc, #164]	; (8007dac <HAL_RCC_GetSysClockFreq+0xac>)
 8007d08:	1d3c      	adds	r4, r7, #4
 8007d0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007d0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8007d10:	f240 2301 	movw	r3, #513	; 0x201
 8007d14:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007d16:	2300      	movs	r3, #0
 8007d18:	61fb      	str	r3, [r7, #28]
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	61bb      	str	r3, [r7, #24]
 8007d1e:	2300      	movs	r3, #0
 8007d20:	627b      	str	r3, [r7, #36]	; 0x24
 8007d22:	2300      	movs	r3, #0
 8007d24:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8007d26:	2300      	movs	r3, #0
 8007d28:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007d2a:	4b21      	ldr	r3, [pc, #132]	; (8007db0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007d30:	69fb      	ldr	r3, [r7, #28]
 8007d32:	f003 030c 	and.w	r3, r3, #12
 8007d36:	2b04      	cmp	r3, #4
 8007d38:	d002      	beq.n	8007d40 <HAL_RCC_GetSysClockFreq+0x40>
 8007d3a:	2b08      	cmp	r3, #8
 8007d3c:	d003      	beq.n	8007d46 <HAL_RCC_GetSysClockFreq+0x46>
 8007d3e:	e02b      	b.n	8007d98 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007d40:	4b1c      	ldr	r3, [pc, #112]	; (8007db4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8007d42:	623b      	str	r3, [r7, #32]
      break;
 8007d44:	e02b      	b.n	8007d9e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007d46:	69fb      	ldr	r3, [r7, #28]
 8007d48:	0c9b      	lsrs	r3, r3, #18
 8007d4a:	f003 030f 	and.w	r3, r3, #15
 8007d4e:	3328      	adds	r3, #40	; 0x28
 8007d50:	443b      	add	r3, r7
 8007d52:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8007d56:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007d58:	69fb      	ldr	r3, [r7, #28]
 8007d5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d012      	beq.n	8007d88 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007d62:	4b13      	ldr	r3, [pc, #76]	; (8007db0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8007d64:	685b      	ldr	r3, [r3, #4]
 8007d66:	0c5b      	lsrs	r3, r3, #17
 8007d68:	f003 0301 	and.w	r3, r3, #1
 8007d6c:	3328      	adds	r3, #40	; 0x28
 8007d6e:	443b      	add	r3, r7
 8007d70:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8007d74:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	4a0e      	ldr	r2, [pc, #56]	; (8007db4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8007d7a:	fb03 f202 	mul.w	r2, r3, r2
 8007d7e:	69bb      	ldr	r3, [r7, #24]
 8007d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d84:	627b      	str	r3, [r7, #36]	; 0x24
 8007d86:	e004      	b.n	8007d92 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	4a0b      	ldr	r2, [pc, #44]	; (8007db8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007d8c:	fb02 f303 	mul.w	r3, r2, r3
 8007d90:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8007d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d94:	623b      	str	r3, [r7, #32]
      break;
 8007d96:	e002      	b.n	8007d9e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007d98:	4b06      	ldr	r3, [pc, #24]	; (8007db4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8007d9a:	623b      	str	r3, [r7, #32]
      break;
 8007d9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007d9e:	6a3b      	ldr	r3, [r7, #32]
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3728      	adds	r7, #40	; 0x28
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bc90      	pop	{r4, r7}
 8007da8:	4770      	bx	lr
 8007daa:	bf00      	nop
 8007dac:	0800b1e8 	.word	0x0800b1e8
 8007db0:	40021000 	.word	0x40021000
 8007db4:	007a1200 	.word	0x007a1200
 8007db8:	003d0900 	.word	0x003d0900

08007dbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007dc0:	4b02      	ldr	r3, [pc, #8]	; (8007dcc <HAL_RCC_GetHCLKFreq+0x10>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bc80      	pop	{r7}
 8007dca:	4770      	bx	lr
 8007dcc:	20000018 	.word	0x20000018

08007dd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007dd4:	f7ff fff2 	bl	8007dbc <HAL_RCC_GetHCLKFreq>
 8007dd8:	4602      	mov	r2, r0
 8007dda:	4b05      	ldr	r3, [pc, #20]	; (8007df0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	0a1b      	lsrs	r3, r3, #8
 8007de0:	f003 0307 	and.w	r3, r3, #7
 8007de4:	4903      	ldr	r1, [pc, #12]	; (8007df4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007de6:	5ccb      	ldrb	r3, [r1, r3]
 8007de8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	bd80      	pop	{r7, pc}
 8007df0:	40021000 	.word	0x40021000
 8007df4:	0800b208 	.word	0x0800b208

08007df8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b085      	sub	sp, #20
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007e00:	4b0a      	ldr	r3, [pc, #40]	; (8007e2c <RCC_Delay+0x34>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a0a      	ldr	r2, [pc, #40]	; (8007e30 <RCC_Delay+0x38>)
 8007e06:	fba2 2303 	umull	r2, r3, r2, r3
 8007e0a:	0a5b      	lsrs	r3, r3, #9
 8007e0c:	687a      	ldr	r2, [r7, #4]
 8007e0e:	fb02 f303 	mul.w	r3, r2, r3
 8007e12:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007e14:	bf00      	nop
  }
  while (Delay --);
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	1e5a      	subs	r2, r3, #1
 8007e1a:	60fa      	str	r2, [r7, #12]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d1f9      	bne.n	8007e14 <RCC_Delay+0x1c>
}
 8007e20:	bf00      	nop
 8007e22:	bf00      	nop
 8007e24:	3714      	adds	r7, #20
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bc80      	pop	{r7}
 8007e2a:	4770      	bx	lr
 8007e2c:	20000018 	.word	0x20000018
 8007e30:	10624dd3 	.word	0x10624dd3

08007e34 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b086      	sub	sp, #24
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	613b      	str	r3, [r7, #16]
 8007e40:	2300      	movs	r3, #0
 8007e42:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f003 0301 	and.w	r3, r3, #1
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d07d      	beq.n	8007f4c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8007e50:	2300      	movs	r3, #0
 8007e52:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007e54:	4b4f      	ldr	r3, [pc, #316]	; (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007e56:	69db      	ldr	r3, [r3, #28]
 8007e58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d10d      	bne.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007e60:	4b4c      	ldr	r3, [pc, #304]	; (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007e62:	69db      	ldr	r3, [r3, #28]
 8007e64:	4a4b      	ldr	r2, [pc, #300]	; (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007e66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e6a:	61d3      	str	r3, [r2, #28]
 8007e6c:	4b49      	ldr	r3, [pc, #292]	; (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007e6e:	69db      	ldr	r3, [r3, #28]
 8007e70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e74:	60bb      	str	r3, [r7, #8]
 8007e76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007e78:	2301      	movs	r3, #1
 8007e7a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e7c:	4b46      	ldr	r3, [pc, #280]	; (8007f98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d118      	bne.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007e88:	4b43      	ldr	r3, [pc, #268]	; (8007f98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4a42      	ldr	r2, [pc, #264]	; (8007f98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007e8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e92:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007e94:	f7fd fb40 	bl	8005518 <HAL_GetTick>
 8007e98:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e9a:	e008      	b.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e9c:	f7fd fb3c 	bl	8005518 <HAL_GetTick>
 8007ea0:	4602      	mov	r2, r0
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	1ad3      	subs	r3, r2, r3
 8007ea6:	2b64      	cmp	r3, #100	; 0x64
 8007ea8:	d901      	bls.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8007eaa:	2303      	movs	r3, #3
 8007eac:	e06d      	b.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007eae:	4b3a      	ldr	r3, [pc, #232]	; (8007f98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d0f0      	beq.n	8007e9c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007eba:	4b36      	ldr	r3, [pc, #216]	; (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007ebc:	6a1b      	ldr	r3, [r3, #32]
 8007ebe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ec2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d02e      	beq.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ed2:	68fa      	ldr	r2, [r7, #12]
 8007ed4:	429a      	cmp	r2, r3
 8007ed6:	d027      	beq.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007ed8:	4b2e      	ldr	r3, [pc, #184]	; (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007eda:	6a1b      	ldr	r3, [r3, #32]
 8007edc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ee0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007ee2:	4b2e      	ldr	r3, [pc, #184]	; (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007ee4:	2201      	movs	r2, #1
 8007ee6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007ee8:	4b2c      	ldr	r3, [pc, #176]	; (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007eea:	2200      	movs	r2, #0
 8007eec:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007eee:	4a29      	ldr	r2, [pc, #164]	; (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f003 0301 	and.w	r3, r3, #1
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d014      	beq.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007efe:	f7fd fb0b 	bl	8005518 <HAL_GetTick>
 8007f02:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f04:	e00a      	b.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f06:	f7fd fb07 	bl	8005518 <HAL_GetTick>
 8007f0a:	4602      	mov	r2, r0
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	1ad3      	subs	r3, r2, r3
 8007f10:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d901      	bls.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007f18:	2303      	movs	r3, #3
 8007f1a:	e036      	b.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f1c:	4b1d      	ldr	r3, [pc, #116]	; (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f1e:	6a1b      	ldr	r3, [r3, #32]
 8007f20:	f003 0302 	and.w	r3, r3, #2
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d0ee      	beq.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007f28:	4b1a      	ldr	r3, [pc, #104]	; (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f2a:	6a1b      	ldr	r3, [r3, #32]
 8007f2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	4917      	ldr	r1, [pc, #92]	; (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f36:	4313      	orrs	r3, r2
 8007f38:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007f3a:	7dfb      	ldrb	r3, [r7, #23]
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	d105      	bne.n	8007f4c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007f40:	4b14      	ldr	r3, [pc, #80]	; (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f42:	69db      	ldr	r3, [r3, #28]
 8007f44:	4a13      	ldr	r2, [pc, #76]	; (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f4a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f003 0302 	and.w	r3, r3, #2
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d008      	beq.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007f58:	4b0e      	ldr	r3, [pc, #56]	; (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f5a:	685b      	ldr	r3, [r3, #4]
 8007f5c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	689b      	ldr	r3, [r3, #8]
 8007f64:	490b      	ldr	r1, [pc, #44]	; (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f66:	4313      	orrs	r3, r2
 8007f68:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f003 0310 	and.w	r3, r3, #16
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d008      	beq.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007f76:	4b07      	ldr	r3, [pc, #28]	; (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	68db      	ldr	r3, [r3, #12]
 8007f82:	4904      	ldr	r1, [pc, #16]	; (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f84:	4313      	orrs	r3, r2
 8007f86:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007f88:	2300      	movs	r3, #0
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3718      	adds	r7, #24
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}
 8007f92:	bf00      	nop
 8007f94:	40021000 	.word	0x40021000
 8007f98:	40007000 	.word	0x40007000
 8007f9c:	42420440 	.word	0x42420440

08007fa0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b082      	sub	sp, #8
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d101      	bne.n	8007fb2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007fae:	2301      	movs	r3, #1
 8007fb0:	e041      	b.n	8008036 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fb8:	b2db      	uxtb	r3, r3
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d106      	bne.n	8007fcc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f7fd f896 	bl	80050f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2202      	movs	r2, #2
 8007fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681a      	ldr	r2, [r3, #0]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	3304      	adds	r3, #4
 8007fdc:	4619      	mov	r1, r3
 8007fde:	4610      	mov	r0, r2
 8007fe0:	f000 fabe 	bl	8008560 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2201      	movs	r2, #1
 8007ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2201      	movs	r2, #1
 8008000:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2201      	movs	r2, #1
 8008008:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2201      	movs	r2, #1
 8008010:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2201      	movs	r2, #1
 8008018:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2201      	movs	r2, #1
 8008020:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2201      	movs	r2, #1
 8008028:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2201      	movs	r2, #1
 8008030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008034:	2300      	movs	r3, #0
}
 8008036:	4618      	mov	r0, r3
 8008038:	3708      	adds	r7, #8
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
	...

08008040 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b084      	sub	sp, #16
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
 8008048:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d109      	bne.n	8008064 <HAL_TIM_PWM_Start+0x24>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008056:	b2db      	uxtb	r3, r3
 8008058:	2b01      	cmp	r3, #1
 800805a:	bf14      	ite	ne
 800805c:	2301      	movne	r3, #1
 800805e:	2300      	moveq	r3, #0
 8008060:	b2db      	uxtb	r3, r3
 8008062:	e022      	b.n	80080aa <HAL_TIM_PWM_Start+0x6a>
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	2b04      	cmp	r3, #4
 8008068:	d109      	bne.n	800807e <HAL_TIM_PWM_Start+0x3e>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008070:	b2db      	uxtb	r3, r3
 8008072:	2b01      	cmp	r3, #1
 8008074:	bf14      	ite	ne
 8008076:	2301      	movne	r3, #1
 8008078:	2300      	moveq	r3, #0
 800807a:	b2db      	uxtb	r3, r3
 800807c:	e015      	b.n	80080aa <HAL_TIM_PWM_Start+0x6a>
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	2b08      	cmp	r3, #8
 8008082:	d109      	bne.n	8008098 <HAL_TIM_PWM_Start+0x58>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800808a:	b2db      	uxtb	r3, r3
 800808c:	2b01      	cmp	r3, #1
 800808e:	bf14      	ite	ne
 8008090:	2301      	movne	r3, #1
 8008092:	2300      	moveq	r3, #0
 8008094:	b2db      	uxtb	r3, r3
 8008096:	e008      	b.n	80080aa <HAL_TIM_PWM_Start+0x6a>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800809e:	b2db      	uxtb	r3, r3
 80080a0:	2b01      	cmp	r3, #1
 80080a2:	bf14      	ite	ne
 80080a4:	2301      	movne	r3, #1
 80080a6:	2300      	moveq	r3, #0
 80080a8:	b2db      	uxtb	r3, r3
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d001      	beq.n	80080b2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80080ae:	2301      	movs	r3, #1
 80080b0:	e05e      	b.n	8008170 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d104      	bne.n	80080c2 <HAL_TIM_PWM_Start+0x82>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2202      	movs	r2, #2
 80080bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80080c0:	e013      	b.n	80080ea <HAL_TIM_PWM_Start+0xaa>
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	2b04      	cmp	r3, #4
 80080c6:	d104      	bne.n	80080d2 <HAL_TIM_PWM_Start+0x92>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2202      	movs	r2, #2
 80080cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80080d0:	e00b      	b.n	80080ea <HAL_TIM_PWM_Start+0xaa>
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	2b08      	cmp	r3, #8
 80080d6:	d104      	bne.n	80080e2 <HAL_TIM_PWM_Start+0xa2>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2202      	movs	r2, #2
 80080dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80080e0:	e003      	b.n	80080ea <HAL_TIM_PWM_Start+0xaa>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2202      	movs	r2, #2
 80080e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	2201      	movs	r2, #1
 80080f0:	6839      	ldr	r1, [r7, #0]
 80080f2:	4618      	mov	r0, r3
 80080f4:	f000 fc1e 	bl	8008934 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4a1e      	ldr	r2, [pc, #120]	; (8008178 <HAL_TIM_PWM_Start+0x138>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d107      	bne.n	8008112 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008110:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a18      	ldr	r2, [pc, #96]	; (8008178 <HAL_TIM_PWM_Start+0x138>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d00e      	beq.n	800813a <HAL_TIM_PWM_Start+0xfa>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008124:	d009      	beq.n	800813a <HAL_TIM_PWM_Start+0xfa>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4a14      	ldr	r2, [pc, #80]	; (800817c <HAL_TIM_PWM_Start+0x13c>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d004      	beq.n	800813a <HAL_TIM_PWM_Start+0xfa>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a12      	ldr	r2, [pc, #72]	; (8008180 <HAL_TIM_PWM_Start+0x140>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d111      	bne.n	800815e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	689b      	ldr	r3, [r3, #8]
 8008140:	f003 0307 	and.w	r3, r3, #7
 8008144:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	2b06      	cmp	r3, #6
 800814a:	d010      	beq.n	800816e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	681a      	ldr	r2, [r3, #0]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f042 0201 	orr.w	r2, r2, #1
 800815a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800815c:	e007      	b.n	800816e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	681a      	ldr	r2, [r3, #0]
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f042 0201 	orr.w	r2, r2, #1
 800816c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800816e:	2300      	movs	r3, #0
}
 8008170:	4618      	mov	r0, r3
 8008172:	3710      	adds	r7, #16
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}
 8008178:	40012c00 	.word	0x40012c00
 800817c:	40000400 	.word	0x40000400
 8008180:	40000800 	.word	0x40000800

08008184 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b086      	sub	sp, #24
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d101      	bne.n	8008198 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008194:	2301      	movs	r3, #1
 8008196:	e093      	b.n	80082c0 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800819e:	b2db      	uxtb	r3, r3
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d106      	bne.n	80081b2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2200      	movs	r2, #0
 80081a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f7fc ff63 	bl	8005078 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2202      	movs	r2, #2
 80081b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	689b      	ldr	r3, [r3, #8]
 80081c0:	687a      	ldr	r2, [r7, #4]
 80081c2:	6812      	ldr	r2, [r2, #0]
 80081c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80081c8:	f023 0307 	bic.w	r3, r3, #7
 80081cc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681a      	ldr	r2, [r3, #0]
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	3304      	adds	r3, #4
 80081d6:	4619      	mov	r1, r3
 80081d8:	4610      	mov	r0, r2
 80081da:	f000 f9c1 	bl	8008560 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	689b      	ldr	r3, [r3, #8]
 80081e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	699b      	ldr	r3, [r3, #24]
 80081ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	6a1b      	ldr	r3, [r3, #32]
 80081f4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	697a      	ldr	r2, [r7, #20]
 80081fc:	4313      	orrs	r3, r2
 80081fe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008206:	f023 0303 	bic.w	r3, r3, #3
 800820a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	689a      	ldr	r2, [r3, #8]
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	699b      	ldr	r3, [r3, #24]
 8008214:	021b      	lsls	r3, r3, #8
 8008216:	4313      	orrs	r3, r2
 8008218:	693a      	ldr	r2, [r7, #16]
 800821a:	4313      	orrs	r3, r2
 800821c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008224:	f023 030c 	bic.w	r3, r3, #12
 8008228:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008230:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008234:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	68da      	ldr	r2, [r3, #12]
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	69db      	ldr	r3, [r3, #28]
 800823e:	021b      	lsls	r3, r3, #8
 8008240:	4313      	orrs	r3, r2
 8008242:	693a      	ldr	r2, [r7, #16]
 8008244:	4313      	orrs	r3, r2
 8008246:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	691b      	ldr	r3, [r3, #16]
 800824c:	011a      	lsls	r2, r3, #4
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	6a1b      	ldr	r3, [r3, #32]
 8008252:	031b      	lsls	r3, r3, #12
 8008254:	4313      	orrs	r3, r2
 8008256:	693a      	ldr	r2, [r7, #16]
 8008258:	4313      	orrs	r3, r2
 800825a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008262:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	685a      	ldr	r2, [r3, #4]
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	695b      	ldr	r3, [r3, #20]
 800826c:	011b      	lsls	r3, r3, #4
 800826e:	4313      	orrs	r3, r2
 8008270:	68fa      	ldr	r2, [r7, #12]
 8008272:	4313      	orrs	r3, r2
 8008274:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	697a      	ldr	r2, [r7, #20]
 800827c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	693a      	ldr	r2, [r7, #16]
 8008284:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	68fa      	ldr	r2, [r7, #12]
 800828c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2201      	movs	r2, #1
 8008292:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2201      	movs	r2, #1
 800829a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2201      	movs	r2, #1
 80082a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2201      	movs	r2, #1
 80082aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2201      	movs	r2, #1
 80082b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2201      	movs	r2, #1
 80082ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80082be:	2300      	movs	r3, #0
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3718      	adds	r7, #24
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}

080082c8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b084      	sub	sp, #16
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
 80082d0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80082d8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80082e0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80082e8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80082f0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d110      	bne.n	800831a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80082f8:	7bfb      	ldrb	r3, [r7, #15]
 80082fa:	2b01      	cmp	r3, #1
 80082fc:	d102      	bne.n	8008304 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80082fe:	7b7b      	ldrb	r3, [r7, #13]
 8008300:	2b01      	cmp	r3, #1
 8008302:	d001      	beq.n	8008308 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008304:	2301      	movs	r3, #1
 8008306:	e069      	b.n	80083dc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2202      	movs	r2, #2
 800830c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2202      	movs	r2, #2
 8008314:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008318:	e031      	b.n	800837e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	2b04      	cmp	r3, #4
 800831e:	d110      	bne.n	8008342 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008320:	7bbb      	ldrb	r3, [r7, #14]
 8008322:	2b01      	cmp	r3, #1
 8008324:	d102      	bne.n	800832c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008326:	7b3b      	ldrb	r3, [r7, #12]
 8008328:	2b01      	cmp	r3, #1
 800832a:	d001      	beq.n	8008330 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800832c:	2301      	movs	r3, #1
 800832e:	e055      	b.n	80083dc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2202      	movs	r2, #2
 8008334:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2202      	movs	r2, #2
 800833c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008340:	e01d      	b.n	800837e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008342:	7bfb      	ldrb	r3, [r7, #15]
 8008344:	2b01      	cmp	r3, #1
 8008346:	d108      	bne.n	800835a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008348:	7bbb      	ldrb	r3, [r7, #14]
 800834a:	2b01      	cmp	r3, #1
 800834c:	d105      	bne.n	800835a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800834e:	7b7b      	ldrb	r3, [r7, #13]
 8008350:	2b01      	cmp	r3, #1
 8008352:	d102      	bne.n	800835a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008354:	7b3b      	ldrb	r3, [r7, #12]
 8008356:	2b01      	cmp	r3, #1
 8008358:	d001      	beq.n	800835e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800835a:	2301      	movs	r3, #1
 800835c:	e03e      	b.n	80083dc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2202      	movs	r2, #2
 8008362:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2202      	movs	r2, #2
 800836a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2202      	movs	r2, #2
 8008372:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2202      	movs	r2, #2
 800837a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d003      	beq.n	800838c <HAL_TIM_Encoder_Start+0xc4>
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	2b04      	cmp	r3, #4
 8008388:	d008      	beq.n	800839c <HAL_TIM_Encoder_Start+0xd4>
 800838a:	e00f      	b.n	80083ac <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	2201      	movs	r2, #1
 8008392:	2100      	movs	r1, #0
 8008394:	4618      	mov	r0, r3
 8008396:	f000 facd 	bl	8008934 <TIM_CCxChannelCmd>
      break;
 800839a:	e016      	b.n	80083ca <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	2201      	movs	r2, #1
 80083a2:	2104      	movs	r1, #4
 80083a4:	4618      	mov	r0, r3
 80083a6:	f000 fac5 	bl	8008934 <TIM_CCxChannelCmd>
      break;
 80083aa:	e00e      	b.n	80083ca <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	2201      	movs	r2, #1
 80083b2:	2100      	movs	r1, #0
 80083b4:	4618      	mov	r0, r3
 80083b6:	f000 fabd 	bl	8008934 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	2201      	movs	r2, #1
 80083c0:	2104      	movs	r1, #4
 80083c2:	4618      	mov	r0, r3
 80083c4:	f000 fab6 	bl	8008934 <TIM_CCxChannelCmd>
      break;
 80083c8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	681a      	ldr	r2, [r3, #0]
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f042 0201 	orr.w	r2, r2, #1
 80083d8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80083da:	2300      	movs	r3, #0
}
 80083dc:	4618      	mov	r0, r3
 80083de:	3710      	adds	r7, #16
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}

080083e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b084      	sub	sp, #16
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	60f8      	str	r0, [r7, #12]
 80083ec:	60b9      	str	r1, [r7, #8]
 80083ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083f6:	2b01      	cmp	r3, #1
 80083f8:	d101      	bne.n	80083fe <HAL_TIM_PWM_ConfigChannel+0x1a>
 80083fa:	2302      	movs	r3, #2
 80083fc:	e0ac      	b.n	8008558 <HAL_TIM_PWM_ConfigChannel+0x174>
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2201      	movs	r2, #1
 8008402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2b0c      	cmp	r3, #12
 800840a:	f200 809f 	bhi.w	800854c <HAL_TIM_PWM_ConfigChannel+0x168>
 800840e:	a201      	add	r2, pc, #4	; (adr r2, 8008414 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8008410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008414:	08008449 	.word	0x08008449
 8008418:	0800854d 	.word	0x0800854d
 800841c:	0800854d 	.word	0x0800854d
 8008420:	0800854d 	.word	0x0800854d
 8008424:	08008489 	.word	0x08008489
 8008428:	0800854d 	.word	0x0800854d
 800842c:	0800854d 	.word	0x0800854d
 8008430:	0800854d 	.word	0x0800854d
 8008434:	080084cb 	.word	0x080084cb
 8008438:	0800854d 	.word	0x0800854d
 800843c:	0800854d 	.word	0x0800854d
 8008440:	0800854d 	.word	0x0800854d
 8008444:	0800850b 	.word	0x0800850b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	68b9      	ldr	r1, [r7, #8]
 800844e:	4618      	mov	r0, r3
 8008450:	f000 f8e8 	bl	8008624 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	699a      	ldr	r2, [r3, #24]
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f042 0208 	orr.w	r2, r2, #8
 8008462:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	699a      	ldr	r2, [r3, #24]
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f022 0204 	bic.w	r2, r2, #4
 8008472:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	6999      	ldr	r1, [r3, #24]
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	691a      	ldr	r2, [r3, #16]
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	430a      	orrs	r2, r1
 8008484:	619a      	str	r2, [r3, #24]
      break;
 8008486:	e062      	b.n	800854e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	68b9      	ldr	r1, [r7, #8]
 800848e:	4618      	mov	r0, r3
 8008490:	f000 f92e 	bl	80086f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	699a      	ldr	r2, [r3, #24]
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80084a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	699a      	ldr	r2, [r3, #24]
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80084b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	6999      	ldr	r1, [r3, #24]
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	691b      	ldr	r3, [r3, #16]
 80084be:	021a      	lsls	r2, r3, #8
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	430a      	orrs	r2, r1
 80084c6:	619a      	str	r2, [r3, #24]
      break;
 80084c8:	e041      	b.n	800854e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	68b9      	ldr	r1, [r7, #8]
 80084d0:	4618      	mov	r0, r3
 80084d2:	f000 f977 	bl	80087c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	69da      	ldr	r2, [r3, #28]
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f042 0208 	orr.w	r2, r2, #8
 80084e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	69da      	ldr	r2, [r3, #28]
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f022 0204 	bic.w	r2, r2, #4
 80084f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	69d9      	ldr	r1, [r3, #28]
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	691a      	ldr	r2, [r3, #16]
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	430a      	orrs	r2, r1
 8008506:	61da      	str	r2, [r3, #28]
      break;
 8008508:	e021      	b.n	800854e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	68b9      	ldr	r1, [r7, #8]
 8008510:	4618      	mov	r0, r3
 8008512:	f000 f9c1 	bl	8008898 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	69da      	ldr	r2, [r3, #28]
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008524:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	69da      	ldr	r2, [r3, #28]
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008534:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	69d9      	ldr	r1, [r3, #28]
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	691b      	ldr	r3, [r3, #16]
 8008540:	021a      	lsls	r2, r3, #8
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	430a      	orrs	r2, r1
 8008548:	61da      	str	r2, [r3, #28]
      break;
 800854a:	e000      	b.n	800854e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800854c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	2200      	movs	r2, #0
 8008552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008556:	2300      	movs	r3, #0
}
 8008558:	4618      	mov	r0, r3
 800855a:	3710      	adds	r7, #16
 800855c:	46bd      	mov	sp, r7
 800855e:	bd80      	pop	{r7, pc}

08008560 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008560:	b480      	push	{r7}
 8008562:	b085      	sub	sp, #20
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	4a29      	ldr	r2, [pc, #164]	; (8008618 <TIM_Base_SetConfig+0xb8>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d00b      	beq.n	8008590 <TIM_Base_SetConfig+0x30>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800857e:	d007      	beq.n	8008590 <TIM_Base_SetConfig+0x30>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	4a26      	ldr	r2, [pc, #152]	; (800861c <TIM_Base_SetConfig+0xbc>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d003      	beq.n	8008590 <TIM_Base_SetConfig+0x30>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	4a25      	ldr	r2, [pc, #148]	; (8008620 <TIM_Base_SetConfig+0xc0>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d108      	bne.n	80085a2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008596:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	685b      	ldr	r3, [r3, #4]
 800859c:	68fa      	ldr	r2, [r7, #12]
 800859e:	4313      	orrs	r3, r2
 80085a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	4a1c      	ldr	r2, [pc, #112]	; (8008618 <TIM_Base_SetConfig+0xb8>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d00b      	beq.n	80085c2 <TIM_Base_SetConfig+0x62>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085b0:	d007      	beq.n	80085c2 <TIM_Base_SetConfig+0x62>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	4a19      	ldr	r2, [pc, #100]	; (800861c <TIM_Base_SetConfig+0xbc>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d003      	beq.n	80085c2 <TIM_Base_SetConfig+0x62>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	4a18      	ldr	r2, [pc, #96]	; (8008620 <TIM_Base_SetConfig+0xc0>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d108      	bne.n	80085d4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	68db      	ldr	r3, [r3, #12]
 80085ce:	68fa      	ldr	r2, [r7, #12]
 80085d0:	4313      	orrs	r3, r2
 80085d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	695b      	ldr	r3, [r3, #20]
 80085de:	4313      	orrs	r3, r2
 80085e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	68fa      	ldr	r2, [r7, #12]
 80085e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	689a      	ldr	r2, [r3, #8]
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	681a      	ldr	r2, [r3, #0]
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	4a07      	ldr	r2, [pc, #28]	; (8008618 <TIM_Base_SetConfig+0xb8>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d103      	bne.n	8008608 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	691a      	ldr	r2, [r3, #16]
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2201      	movs	r2, #1
 800860c:	615a      	str	r2, [r3, #20]
}
 800860e:	bf00      	nop
 8008610:	3714      	adds	r7, #20
 8008612:	46bd      	mov	sp, r7
 8008614:	bc80      	pop	{r7}
 8008616:	4770      	bx	lr
 8008618:	40012c00 	.word	0x40012c00
 800861c:	40000400 	.word	0x40000400
 8008620:	40000800 	.word	0x40000800

08008624 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008624:	b480      	push	{r7}
 8008626:	b087      	sub	sp, #28
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
 800862c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6a1b      	ldr	r3, [r3, #32]
 8008632:	f023 0201 	bic.w	r2, r3, #1
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6a1b      	ldr	r3, [r3, #32]
 800863e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	685b      	ldr	r3, [r3, #4]
 8008644:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	699b      	ldr	r3, [r3, #24]
 800864a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008652:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	f023 0303 	bic.w	r3, r3, #3
 800865a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	68fa      	ldr	r2, [r7, #12]
 8008662:	4313      	orrs	r3, r2
 8008664:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	f023 0302 	bic.w	r3, r3, #2
 800866c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	689b      	ldr	r3, [r3, #8]
 8008672:	697a      	ldr	r2, [r7, #20]
 8008674:	4313      	orrs	r3, r2
 8008676:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	4a1c      	ldr	r2, [pc, #112]	; (80086ec <TIM_OC1_SetConfig+0xc8>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d10c      	bne.n	800869a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	f023 0308 	bic.w	r3, r3, #8
 8008686:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	68db      	ldr	r3, [r3, #12]
 800868c:	697a      	ldr	r2, [r7, #20]
 800868e:	4313      	orrs	r3, r2
 8008690:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	f023 0304 	bic.w	r3, r3, #4
 8008698:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	4a13      	ldr	r2, [pc, #76]	; (80086ec <TIM_OC1_SetConfig+0xc8>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d111      	bne.n	80086c6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80086a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80086b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	695b      	ldr	r3, [r3, #20]
 80086b6:	693a      	ldr	r2, [r7, #16]
 80086b8:	4313      	orrs	r3, r2
 80086ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	699b      	ldr	r3, [r3, #24]
 80086c0:	693a      	ldr	r2, [r7, #16]
 80086c2:	4313      	orrs	r3, r2
 80086c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	693a      	ldr	r2, [r7, #16]
 80086ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	68fa      	ldr	r2, [r7, #12]
 80086d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	685a      	ldr	r2, [r3, #4]
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	697a      	ldr	r2, [r7, #20]
 80086de:	621a      	str	r2, [r3, #32]
}
 80086e0:	bf00      	nop
 80086e2:	371c      	adds	r7, #28
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bc80      	pop	{r7}
 80086e8:	4770      	bx	lr
 80086ea:	bf00      	nop
 80086ec:	40012c00 	.word	0x40012c00

080086f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80086f0:	b480      	push	{r7}
 80086f2:	b087      	sub	sp, #28
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
 80086f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6a1b      	ldr	r3, [r3, #32]
 80086fe:	f023 0210 	bic.w	r2, r3, #16
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6a1b      	ldr	r3, [r3, #32]
 800870a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	685b      	ldr	r3, [r3, #4]
 8008710:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	699b      	ldr	r3, [r3, #24]
 8008716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800871e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008726:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	021b      	lsls	r3, r3, #8
 800872e:	68fa      	ldr	r2, [r7, #12]
 8008730:	4313      	orrs	r3, r2
 8008732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	f023 0320 	bic.w	r3, r3, #32
 800873a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	689b      	ldr	r3, [r3, #8]
 8008740:	011b      	lsls	r3, r3, #4
 8008742:	697a      	ldr	r2, [r7, #20]
 8008744:	4313      	orrs	r3, r2
 8008746:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	4a1d      	ldr	r2, [pc, #116]	; (80087c0 <TIM_OC2_SetConfig+0xd0>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d10d      	bne.n	800876c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008756:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	68db      	ldr	r3, [r3, #12]
 800875c:	011b      	lsls	r3, r3, #4
 800875e:	697a      	ldr	r2, [r7, #20]
 8008760:	4313      	orrs	r3, r2
 8008762:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800876a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	4a14      	ldr	r2, [pc, #80]	; (80087c0 <TIM_OC2_SetConfig+0xd0>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d113      	bne.n	800879c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800877a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008782:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	695b      	ldr	r3, [r3, #20]
 8008788:	009b      	lsls	r3, r3, #2
 800878a:	693a      	ldr	r2, [r7, #16]
 800878c:	4313      	orrs	r3, r2
 800878e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	699b      	ldr	r3, [r3, #24]
 8008794:	009b      	lsls	r3, r3, #2
 8008796:	693a      	ldr	r2, [r7, #16]
 8008798:	4313      	orrs	r3, r2
 800879a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	693a      	ldr	r2, [r7, #16]
 80087a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	68fa      	ldr	r2, [r7, #12]
 80087a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	685a      	ldr	r2, [r3, #4]
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	697a      	ldr	r2, [r7, #20]
 80087b4:	621a      	str	r2, [r3, #32]
}
 80087b6:	bf00      	nop
 80087b8:	371c      	adds	r7, #28
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bc80      	pop	{r7}
 80087be:	4770      	bx	lr
 80087c0:	40012c00 	.word	0x40012c00

080087c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b087      	sub	sp, #28
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
 80087cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6a1b      	ldr	r3, [r3, #32]
 80087d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6a1b      	ldr	r3, [r3, #32]
 80087de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	685b      	ldr	r3, [r3, #4]
 80087e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	69db      	ldr	r3, [r3, #28]
 80087ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	f023 0303 	bic.w	r3, r3, #3
 80087fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	68fa      	ldr	r2, [r7, #12]
 8008802:	4313      	orrs	r3, r2
 8008804:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800880c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	689b      	ldr	r3, [r3, #8]
 8008812:	021b      	lsls	r3, r3, #8
 8008814:	697a      	ldr	r2, [r7, #20]
 8008816:	4313      	orrs	r3, r2
 8008818:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	4a1d      	ldr	r2, [pc, #116]	; (8008894 <TIM_OC3_SetConfig+0xd0>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d10d      	bne.n	800883e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008828:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	68db      	ldr	r3, [r3, #12]
 800882e:	021b      	lsls	r3, r3, #8
 8008830:	697a      	ldr	r2, [r7, #20]
 8008832:	4313      	orrs	r3, r2
 8008834:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800883c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	4a14      	ldr	r2, [pc, #80]	; (8008894 <TIM_OC3_SetConfig+0xd0>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d113      	bne.n	800886e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008846:	693b      	ldr	r3, [r7, #16]
 8008848:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800884c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008854:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	695b      	ldr	r3, [r3, #20]
 800885a:	011b      	lsls	r3, r3, #4
 800885c:	693a      	ldr	r2, [r7, #16]
 800885e:	4313      	orrs	r3, r2
 8008860:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	699b      	ldr	r3, [r3, #24]
 8008866:	011b      	lsls	r3, r3, #4
 8008868:	693a      	ldr	r2, [r7, #16]
 800886a:	4313      	orrs	r3, r2
 800886c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	693a      	ldr	r2, [r7, #16]
 8008872:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	68fa      	ldr	r2, [r7, #12]
 8008878:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	685a      	ldr	r2, [r3, #4]
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	697a      	ldr	r2, [r7, #20]
 8008886:	621a      	str	r2, [r3, #32]
}
 8008888:	bf00      	nop
 800888a:	371c      	adds	r7, #28
 800888c:	46bd      	mov	sp, r7
 800888e:	bc80      	pop	{r7}
 8008890:	4770      	bx	lr
 8008892:	bf00      	nop
 8008894:	40012c00 	.word	0x40012c00

08008898 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008898:	b480      	push	{r7}
 800889a:	b087      	sub	sp, #28
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
 80088a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6a1b      	ldr	r3, [r3, #32]
 80088a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6a1b      	ldr	r3, [r3, #32]
 80088b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	685b      	ldr	r3, [r3, #4]
 80088b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	69db      	ldr	r3, [r3, #28]
 80088be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	021b      	lsls	r3, r3, #8
 80088d6:	68fa      	ldr	r2, [r7, #12]
 80088d8:	4313      	orrs	r3, r2
 80088da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80088dc:	693b      	ldr	r3, [r7, #16]
 80088de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80088e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	689b      	ldr	r3, [r3, #8]
 80088e8:	031b      	lsls	r3, r3, #12
 80088ea:	693a      	ldr	r2, [r7, #16]
 80088ec:	4313      	orrs	r3, r2
 80088ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	4a0f      	ldr	r2, [pc, #60]	; (8008930 <TIM_OC4_SetConfig+0x98>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d109      	bne.n	800890c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80088fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	695b      	ldr	r3, [r3, #20]
 8008904:	019b      	lsls	r3, r3, #6
 8008906:	697a      	ldr	r2, [r7, #20]
 8008908:	4313      	orrs	r3, r2
 800890a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	697a      	ldr	r2, [r7, #20]
 8008910:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	68fa      	ldr	r2, [r7, #12]
 8008916:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	685a      	ldr	r2, [r3, #4]
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	693a      	ldr	r2, [r7, #16]
 8008924:	621a      	str	r2, [r3, #32]
}
 8008926:	bf00      	nop
 8008928:	371c      	adds	r7, #28
 800892a:	46bd      	mov	sp, r7
 800892c:	bc80      	pop	{r7}
 800892e:	4770      	bx	lr
 8008930:	40012c00 	.word	0x40012c00

08008934 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008934:	b480      	push	{r7}
 8008936:	b087      	sub	sp, #28
 8008938:	af00      	add	r7, sp, #0
 800893a:	60f8      	str	r0, [r7, #12]
 800893c:	60b9      	str	r1, [r7, #8]
 800893e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	f003 031f 	and.w	r3, r3, #31
 8008946:	2201      	movs	r2, #1
 8008948:	fa02 f303 	lsl.w	r3, r2, r3
 800894c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	6a1a      	ldr	r2, [r3, #32]
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	43db      	mvns	r3, r3
 8008956:	401a      	ands	r2, r3
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	6a1a      	ldr	r2, [r3, #32]
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	f003 031f 	and.w	r3, r3, #31
 8008966:	6879      	ldr	r1, [r7, #4]
 8008968:	fa01 f303 	lsl.w	r3, r1, r3
 800896c:	431a      	orrs	r2, r3
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	621a      	str	r2, [r3, #32]
}
 8008972:	bf00      	nop
 8008974:	371c      	adds	r7, #28
 8008976:	46bd      	mov	sp, r7
 8008978:	bc80      	pop	{r7}
 800897a:	4770      	bx	lr

0800897c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800897c:	b480      	push	{r7}
 800897e:	b085      	sub	sp, #20
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
 8008984:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800898c:	2b01      	cmp	r3, #1
 800898e:	d101      	bne.n	8008994 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008990:	2302      	movs	r3, #2
 8008992:	e046      	b.n	8008a22 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2201      	movs	r2, #1
 8008998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2202      	movs	r2, #2
 80089a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	685b      	ldr	r3, [r3, #4]
 80089aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	689b      	ldr	r3, [r3, #8]
 80089b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	68fa      	ldr	r2, [r7, #12]
 80089c2:	4313      	orrs	r3, r2
 80089c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	68fa      	ldr	r2, [r7, #12]
 80089cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	4a16      	ldr	r2, [pc, #88]	; (8008a2c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d00e      	beq.n	80089f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089e0:	d009      	beq.n	80089f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	4a12      	ldr	r2, [pc, #72]	; (8008a30 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d004      	beq.n	80089f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	4a10      	ldr	r2, [pc, #64]	; (8008a34 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d10c      	bne.n	8008a10 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80089fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	685b      	ldr	r3, [r3, #4]
 8008a02:	68ba      	ldr	r2, [r7, #8]
 8008a04:	4313      	orrs	r3, r2
 8008a06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	68ba      	ldr	r2, [r7, #8]
 8008a0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2201      	movs	r2, #1
 8008a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008a20:	2300      	movs	r3, #0
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3714      	adds	r7, #20
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bc80      	pop	{r7}
 8008a2a:	4770      	bx	lr
 8008a2c:	40012c00 	.word	0x40012c00
 8008a30:	40000400 	.word	0x40000400
 8008a34:	40000800 	.word	0x40000800

08008a38 <pow>:
 8008a38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a3c:	4614      	mov	r4, r2
 8008a3e:	461d      	mov	r5, r3
 8008a40:	4680      	mov	r8, r0
 8008a42:	4689      	mov	r9, r1
 8008a44:	f000 f89c 	bl	8008b80 <__ieee754_pow>
 8008a48:	4622      	mov	r2, r4
 8008a4a:	4606      	mov	r6, r0
 8008a4c:	460f      	mov	r7, r1
 8008a4e:	462b      	mov	r3, r5
 8008a50:	4620      	mov	r0, r4
 8008a52:	4629      	mov	r1, r5
 8008a54:	f7f7 ffd2 	bl	80009fc <__aeabi_dcmpun>
 8008a58:	bbc8      	cbnz	r0, 8008ace <pow+0x96>
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	4640      	mov	r0, r8
 8008a60:	4649      	mov	r1, r9
 8008a62:	f7f7 ff99 	bl	8000998 <__aeabi_dcmpeq>
 8008a66:	b1b8      	cbz	r0, 8008a98 <pow+0x60>
 8008a68:	2200      	movs	r2, #0
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	4620      	mov	r0, r4
 8008a6e:	4629      	mov	r1, r5
 8008a70:	f7f7 ff92 	bl	8000998 <__aeabi_dcmpeq>
 8008a74:	2800      	cmp	r0, #0
 8008a76:	d141      	bne.n	8008afc <pow+0xc4>
 8008a78:	4620      	mov	r0, r4
 8008a7a:	4629      	mov	r1, r5
 8008a7c:	f001 f890 	bl	8009ba0 <finite>
 8008a80:	b328      	cbz	r0, 8008ace <pow+0x96>
 8008a82:	2200      	movs	r2, #0
 8008a84:	2300      	movs	r3, #0
 8008a86:	4620      	mov	r0, r4
 8008a88:	4629      	mov	r1, r5
 8008a8a:	f7f7 ff8f 	bl	80009ac <__aeabi_dcmplt>
 8008a8e:	b1f0      	cbz	r0, 8008ace <pow+0x96>
 8008a90:	f001 fa20 	bl	8009ed4 <__errno>
 8008a94:	2322      	movs	r3, #34	; 0x22
 8008a96:	e019      	b.n	8008acc <pow+0x94>
 8008a98:	4630      	mov	r0, r6
 8008a9a:	4639      	mov	r1, r7
 8008a9c:	f001 f880 	bl	8009ba0 <finite>
 8008aa0:	b9c8      	cbnz	r0, 8008ad6 <pow+0x9e>
 8008aa2:	4640      	mov	r0, r8
 8008aa4:	4649      	mov	r1, r9
 8008aa6:	f001 f87b 	bl	8009ba0 <finite>
 8008aaa:	b1a0      	cbz	r0, 8008ad6 <pow+0x9e>
 8008aac:	4620      	mov	r0, r4
 8008aae:	4629      	mov	r1, r5
 8008ab0:	f001 f876 	bl	8009ba0 <finite>
 8008ab4:	b178      	cbz	r0, 8008ad6 <pow+0x9e>
 8008ab6:	4632      	mov	r2, r6
 8008ab8:	463b      	mov	r3, r7
 8008aba:	4630      	mov	r0, r6
 8008abc:	4639      	mov	r1, r7
 8008abe:	f7f7 ff9d 	bl	80009fc <__aeabi_dcmpun>
 8008ac2:	2800      	cmp	r0, #0
 8008ac4:	d0e4      	beq.n	8008a90 <pow+0x58>
 8008ac6:	f001 fa05 	bl	8009ed4 <__errno>
 8008aca:	2321      	movs	r3, #33	; 0x21
 8008acc:	6003      	str	r3, [r0, #0]
 8008ace:	4630      	mov	r0, r6
 8008ad0:	4639      	mov	r1, r7
 8008ad2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	2300      	movs	r3, #0
 8008ada:	4630      	mov	r0, r6
 8008adc:	4639      	mov	r1, r7
 8008ade:	f7f7 ff5b 	bl	8000998 <__aeabi_dcmpeq>
 8008ae2:	2800      	cmp	r0, #0
 8008ae4:	d0f3      	beq.n	8008ace <pow+0x96>
 8008ae6:	4640      	mov	r0, r8
 8008ae8:	4649      	mov	r1, r9
 8008aea:	f001 f859 	bl	8009ba0 <finite>
 8008aee:	2800      	cmp	r0, #0
 8008af0:	d0ed      	beq.n	8008ace <pow+0x96>
 8008af2:	4620      	mov	r0, r4
 8008af4:	4629      	mov	r1, r5
 8008af6:	f001 f853 	bl	8009ba0 <finite>
 8008afa:	e7c8      	b.n	8008a8e <pow+0x56>
 8008afc:	2600      	movs	r6, #0
 8008afe:	4f01      	ldr	r7, [pc, #4]	; (8008b04 <pow+0xcc>)
 8008b00:	e7e5      	b.n	8008ace <pow+0x96>
 8008b02:	bf00      	nop
 8008b04:	3ff00000 	.word	0x3ff00000

08008b08 <asinf>:
 8008b08:	b538      	push	{r3, r4, r5, lr}
 8008b0a:	4604      	mov	r4, r0
 8008b0c:	f000 fdfe 	bl	800970c <__ieee754_asinf>
 8008b10:	4621      	mov	r1, r4
 8008b12:	4605      	mov	r5, r0
 8008b14:	4620      	mov	r0, r4
 8008b16:	f7f8 facb 	bl	80010b0 <__aeabi_fcmpun>
 8008b1a:	b980      	cbnz	r0, 8008b3e <asinf+0x36>
 8008b1c:	4620      	mov	r0, r4
 8008b1e:	f001 f9d1 	bl	8009ec4 <fabsf>
 8008b22:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008b26:	f7f8 fab9 	bl	800109c <__aeabi_fcmpgt>
 8008b2a:	b140      	cbz	r0, 8008b3e <asinf+0x36>
 8008b2c:	f001 f9d2 	bl	8009ed4 <__errno>
 8008b30:	2321      	movs	r3, #33	; 0x21
 8008b32:	6003      	str	r3, [r0, #0]
 8008b34:	4803      	ldr	r0, [pc, #12]	; (8008b44 <asinf+0x3c>)
 8008b36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b3a:	f001 b9c7 	b.w	8009ecc <nanf>
 8008b3e:	4628      	mov	r0, r5
 8008b40:	bd38      	pop	{r3, r4, r5, pc}
 8008b42:	bf00      	nop
 8008b44:	0800b2e1 	.word	0x0800b2e1

08008b48 <atan2f>:
 8008b48:	f000 bf24 	b.w	8009994 <__ieee754_atan2f>

08008b4c <sqrtf>:
 8008b4c:	b538      	push	{r3, r4, r5, lr}
 8008b4e:	4605      	mov	r5, r0
 8008b50:	f000 ffa6 	bl	8009aa0 <__ieee754_sqrtf>
 8008b54:	4629      	mov	r1, r5
 8008b56:	4604      	mov	r4, r0
 8008b58:	4628      	mov	r0, r5
 8008b5a:	f7f8 faa9 	bl	80010b0 <__aeabi_fcmpun>
 8008b5e:	b968      	cbnz	r0, 8008b7c <sqrtf+0x30>
 8008b60:	2100      	movs	r1, #0
 8008b62:	4628      	mov	r0, r5
 8008b64:	f7f8 fa7c 	bl	8001060 <__aeabi_fcmplt>
 8008b68:	b140      	cbz	r0, 8008b7c <sqrtf+0x30>
 8008b6a:	f001 f9b3 	bl	8009ed4 <__errno>
 8008b6e:	2321      	movs	r3, #33	; 0x21
 8008b70:	2100      	movs	r1, #0
 8008b72:	6003      	str	r3, [r0, #0]
 8008b74:	4608      	mov	r0, r1
 8008b76:	f7f8 f989 	bl	8000e8c <__aeabi_fdiv>
 8008b7a:	4604      	mov	r4, r0
 8008b7c:	4620      	mov	r0, r4
 8008b7e:	bd38      	pop	{r3, r4, r5, pc}

08008b80 <__ieee754_pow>:
 8008b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b84:	b093      	sub	sp, #76	; 0x4c
 8008b86:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008b8a:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 8008b8e:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8008b92:	4689      	mov	r9, r1
 8008b94:	ea56 0102 	orrs.w	r1, r6, r2
 8008b98:	4680      	mov	r8, r0
 8008b9a:	d111      	bne.n	8008bc0 <__ieee754_pow+0x40>
 8008b9c:	1803      	adds	r3, r0, r0
 8008b9e:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8008ba2:	4152      	adcs	r2, r2
 8008ba4:	4299      	cmp	r1, r3
 8008ba6:	4b82      	ldr	r3, [pc, #520]	; (8008db0 <__ieee754_pow+0x230>)
 8008ba8:	4193      	sbcs	r3, r2
 8008baa:	f080 84b9 	bcs.w	8009520 <__ieee754_pow+0x9a0>
 8008bae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008bb2:	4640      	mov	r0, r8
 8008bb4:	4649      	mov	r1, r9
 8008bb6:	f7f7 fad1 	bl	800015c <__adddf3>
 8008bba:	4683      	mov	fp, r0
 8008bbc:	468c      	mov	ip, r1
 8008bbe:	e06f      	b.n	8008ca0 <__ieee754_pow+0x120>
 8008bc0:	4b7c      	ldr	r3, [pc, #496]	; (8008db4 <__ieee754_pow+0x234>)
 8008bc2:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8008bc6:	429c      	cmp	r4, r3
 8008bc8:	464d      	mov	r5, r9
 8008bca:	4682      	mov	sl, r0
 8008bcc:	dc06      	bgt.n	8008bdc <__ieee754_pow+0x5c>
 8008bce:	d101      	bne.n	8008bd4 <__ieee754_pow+0x54>
 8008bd0:	2800      	cmp	r0, #0
 8008bd2:	d1ec      	bne.n	8008bae <__ieee754_pow+0x2e>
 8008bd4:	429e      	cmp	r6, r3
 8008bd6:	dc01      	bgt.n	8008bdc <__ieee754_pow+0x5c>
 8008bd8:	d10f      	bne.n	8008bfa <__ieee754_pow+0x7a>
 8008bda:	b172      	cbz	r2, 8008bfa <__ieee754_pow+0x7a>
 8008bdc:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8008be0:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8008be4:	ea55 050a 	orrs.w	r5, r5, sl
 8008be8:	d1e1      	bne.n	8008bae <__ieee754_pow+0x2e>
 8008bea:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008bee:	18db      	adds	r3, r3, r3
 8008bf0:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8008bf4:	4152      	adcs	r2, r2
 8008bf6:	429d      	cmp	r5, r3
 8008bf8:	e7d5      	b.n	8008ba6 <__ieee754_pow+0x26>
 8008bfa:	2d00      	cmp	r5, #0
 8008bfc:	da39      	bge.n	8008c72 <__ieee754_pow+0xf2>
 8008bfe:	4b6e      	ldr	r3, [pc, #440]	; (8008db8 <__ieee754_pow+0x238>)
 8008c00:	429e      	cmp	r6, r3
 8008c02:	dc52      	bgt.n	8008caa <__ieee754_pow+0x12a>
 8008c04:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8008c08:	429e      	cmp	r6, r3
 8008c0a:	f340 849c 	ble.w	8009546 <__ieee754_pow+0x9c6>
 8008c0e:	1533      	asrs	r3, r6, #20
 8008c10:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008c14:	2b14      	cmp	r3, #20
 8008c16:	dd0f      	ble.n	8008c38 <__ieee754_pow+0xb8>
 8008c18:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8008c1c:	fa22 f103 	lsr.w	r1, r2, r3
 8008c20:	fa01 f303 	lsl.w	r3, r1, r3
 8008c24:	4293      	cmp	r3, r2
 8008c26:	f040 848e 	bne.w	8009546 <__ieee754_pow+0x9c6>
 8008c2a:	f001 0101 	and.w	r1, r1, #1
 8008c2e:	f1c1 0302 	rsb	r3, r1, #2
 8008c32:	9300      	str	r3, [sp, #0]
 8008c34:	b182      	cbz	r2, 8008c58 <__ieee754_pow+0xd8>
 8008c36:	e05d      	b.n	8008cf4 <__ieee754_pow+0x174>
 8008c38:	2a00      	cmp	r2, #0
 8008c3a:	d159      	bne.n	8008cf0 <__ieee754_pow+0x170>
 8008c3c:	f1c3 0314 	rsb	r3, r3, #20
 8008c40:	fa46 f103 	asr.w	r1, r6, r3
 8008c44:	fa01 f303 	lsl.w	r3, r1, r3
 8008c48:	42b3      	cmp	r3, r6
 8008c4a:	f040 8479 	bne.w	8009540 <__ieee754_pow+0x9c0>
 8008c4e:	f001 0101 	and.w	r1, r1, #1
 8008c52:	f1c1 0302 	rsb	r3, r1, #2
 8008c56:	9300      	str	r3, [sp, #0]
 8008c58:	4b58      	ldr	r3, [pc, #352]	; (8008dbc <__ieee754_pow+0x23c>)
 8008c5a:	429e      	cmp	r6, r3
 8008c5c:	d132      	bne.n	8008cc4 <__ieee754_pow+0x144>
 8008c5e:	2f00      	cmp	r7, #0
 8008c60:	f280 846a 	bge.w	8009538 <__ieee754_pow+0x9b8>
 8008c64:	4642      	mov	r2, r8
 8008c66:	464b      	mov	r3, r9
 8008c68:	2000      	movs	r0, #0
 8008c6a:	4954      	ldr	r1, [pc, #336]	; (8008dbc <__ieee754_pow+0x23c>)
 8008c6c:	f7f7 fd56 	bl	800071c <__aeabi_ddiv>
 8008c70:	e7a3      	b.n	8008bba <__ieee754_pow+0x3a>
 8008c72:	2300      	movs	r3, #0
 8008c74:	9300      	str	r3, [sp, #0]
 8008c76:	2a00      	cmp	r2, #0
 8008c78:	d13c      	bne.n	8008cf4 <__ieee754_pow+0x174>
 8008c7a:	4b4e      	ldr	r3, [pc, #312]	; (8008db4 <__ieee754_pow+0x234>)
 8008c7c:	429e      	cmp	r6, r3
 8008c7e:	d1eb      	bne.n	8008c58 <__ieee754_pow+0xd8>
 8008c80:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8008c84:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8008c88:	ea53 030a 	orrs.w	r3, r3, sl
 8008c8c:	f000 8448 	beq.w	8009520 <__ieee754_pow+0x9a0>
 8008c90:	4b4b      	ldr	r3, [pc, #300]	; (8008dc0 <__ieee754_pow+0x240>)
 8008c92:	429c      	cmp	r4, r3
 8008c94:	dd0b      	ble.n	8008cae <__ieee754_pow+0x12e>
 8008c96:	2f00      	cmp	r7, #0
 8008c98:	f2c0 8448 	blt.w	800952c <__ieee754_pow+0x9ac>
 8008c9c:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8008ca0:	4658      	mov	r0, fp
 8008ca2:	4661      	mov	r1, ip
 8008ca4:	b013      	add	sp, #76	; 0x4c
 8008ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008caa:	2302      	movs	r3, #2
 8008cac:	e7e2      	b.n	8008c74 <__ieee754_pow+0xf4>
 8008cae:	2f00      	cmp	r7, #0
 8008cb0:	f04f 0b00 	mov.w	fp, #0
 8008cb4:	f04f 0c00 	mov.w	ip, #0
 8008cb8:	daf2      	bge.n	8008ca0 <__ieee754_pow+0x120>
 8008cba:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8008cbe:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8008cc2:	e7ed      	b.n	8008ca0 <__ieee754_pow+0x120>
 8008cc4:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8008cc8:	d106      	bne.n	8008cd8 <__ieee754_pow+0x158>
 8008cca:	4642      	mov	r2, r8
 8008ccc:	464b      	mov	r3, r9
 8008cce:	4640      	mov	r0, r8
 8008cd0:	4649      	mov	r1, r9
 8008cd2:	f7f7 fbf9 	bl	80004c8 <__aeabi_dmul>
 8008cd6:	e770      	b.n	8008bba <__ieee754_pow+0x3a>
 8008cd8:	4b3a      	ldr	r3, [pc, #232]	; (8008dc4 <__ieee754_pow+0x244>)
 8008cda:	429f      	cmp	r7, r3
 8008cdc:	d10a      	bne.n	8008cf4 <__ieee754_pow+0x174>
 8008cde:	2d00      	cmp	r5, #0
 8008ce0:	db08      	blt.n	8008cf4 <__ieee754_pow+0x174>
 8008ce2:	4640      	mov	r0, r8
 8008ce4:	4649      	mov	r1, r9
 8008ce6:	b013      	add	sp, #76	; 0x4c
 8008ce8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cec:	f000 bc5e 	b.w	80095ac <__ieee754_sqrt>
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	9300      	str	r3, [sp, #0]
 8008cf4:	4640      	mov	r0, r8
 8008cf6:	4649      	mov	r1, r9
 8008cf8:	f000 ff4f 	bl	8009b9a <fabs>
 8008cfc:	4683      	mov	fp, r0
 8008cfe:	468c      	mov	ip, r1
 8008d00:	f1ba 0f00 	cmp.w	sl, #0
 8008d04:	d128      	bne.n	8008d58 <__ieee754_pow+0x1d8>
 8008d06:	b124      	cbz	r4, 8008d12 <__ieee754_pow+0x192>
 8008d08:	4b2c      	ldr	r3, [pc, #176]	; (8008dbc <__ieee754_pow+0x23c>)
 8008d0a:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8008d0e:	429a      	cmp	r2, r3
 8008d10:	d122      	bne.n	8008d58 <__ieee754_pow+0x1d8>
 8008d12:	2f00      	cmp	r7, #0
 8008d14:	da07      	bge.n	8008d26 <__ieee754_pow+0x1a6>
 8008d16:	465a      	mov	r2, fp
 8008d18:	4663      	mov	r3, ip
 8008d1a:	2000      	movs	r0, #0
 8008d1c:	4927      	ldr	r1, [pc, #156]	; (8008dbc <__ieee754_pow+0x23c>)
 8008d1e:	f7f7 fcfd 	bl	800071c <__aeabi_ddiv>
 8008d22:	4683      	mov	fp, r0
 8008d24:	468c      	mov	ip, r1
 8008d26:	2d00      	cmp	r5, #0
 8008d28:	daba      	bge.n	8008ca0 <__ieee754_pow+0x120>
 8008d2a:	9b00      	ldr	r3, [sp, #0]
 8008d2c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008d30:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008d34:	4323      	orrs	r3, r4
 8008d36:	d108      	bne.n	8008d4a <__ieee754_pow+0x1ca>
 8008d38:	465a      	mov	r2, fp
 8008d3a:	4663      	mov	r3, ip
 8008d3c:	4658      	mov	r0, fp
 8008d3e:	4661      	mov	r1, ip
 8008d40:	f7f7 fa0a 	bl	8000158 <__aeabi_dsub>
 8008d44:	4602      	mov	r2, r0
 8008d46:	460b      	mov	r3, r1
 8008d48:	e790      	b.n	8008c6c <__ieee754_pow+0xec>
 8008d4a:	9b00      	ldr	r3, [sp, #0]
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	d1a7      	bne.n	8008ca0 <__ieee754_pow+0x120>
 8008d50:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8008d54:	469c      	mov	ip, r3
 8008d56:	e7a3      	b.n	8008ca0 <__ieee754_pow+0x120>
 8008d58:	0feb      	lsrs	r3, r5, #31
 8008d5a:	3b01      	subs	r3, #1
 8008d5c:	930c      	str	r3, [sp, #48]	; 0x30
 8008d5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008d60:	9b00      	ldr	r3, [sp, #0]
 8008d62:	4313      	orrs	r3, r2
 8008d64:	d104      	bne.n	8008d70 <__ieee754_pow+0x1f0>
 8008d66:	4642      	mov	r2, r8
 8008d68:	464b      	mov	r3, r9
 8008d6a:	4640      	mov	r0, r8
 8008d6c:	4649      	mov	r1, r9
 8008d6e:	e7e7      	b.n	8008d40 <__ieee754_pow+0x1c0>
 8008d70:	4b15      	ldr	r3, [pc, #84]	; (8008dc8 <__ieee754_pow+0x248>)
 8008d72:	429e      	cmp	r6, r3
 8008d74:	f340 80f6 	ble.w	8008f64 <__ieee754_pow+0x3e4>
 8008d78:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8008d7c:	429e      	cmp	r6, r3
 8008d7e:	4b10      	ldr	r3, [pc, #64]	; (8008dc0 <__ieee754_pow+0x240>)
 8008d80:	dd09      	ble.n	8008d96 <__ieee754_pow+0x216>
 8008d82:	429c      	cmp	r4, r3
 8008d84:	dc0c      	bgt.n	8008da0 <__ieee754_pow+0x220>
 8008d86:	2f00      	cmp	r7, #0
 8008d88:	da0c      	bge.n	8008da4 <__ieee754_pow+0x224>
 8008d8a:	2000      	movs	r0, #0
 8008d8c:	b013      	add	sp, #76	; 0x4c
 8008d8e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d92:	f000 befd 	b.w	8009b90 <__math_oflow>
 8008d96:	429c      	cmp	r4, r3
 8008d98:	dbf5      	blt.n	8008d86 <__ieee754_pow+0x206>
 8008d9a:	4b08      	ldr	r3, [pc, #32]	; (8008dbc <__ieee754_pow+0x23c>)
 8008d9c:	429c      	cmp	r4, r3
 8008d9e:	dd15      	ble.n	8008dcc <__ieee754_pow+0x24c>
 8008da0:	2f00      	cmp	r7, #0
 8008da2:	dcf2      	bgt.n	8008d8a <__ieee754_pow+0x20a>
 8008da4:	2000      	movs	r0, #0
 8008da6:	b013      	add	sp, #76	; 0x4c
 8008da8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dac:	f000 beeb 	b.w	8009b86 <__math_uflow>
 8008db0:	fff00000 	.word	0xfff00000
 8008db4:	7ff00000 	.word	0x7ff00000
 8008db8:	433fffff 	.word	0x433fffff
 8008dbc:	3ff00000 	.word	0x3ff00000
 8008dc0:	3fefffff 	.word	0x3fefffff
 8008dc4:	3fe00000 	.word	0x3fe00000
 8008dc8:	41e00000 	.word	0x41e00000
 8008dcc:	4661      	mov	r1, ip
 8008dce:	2200      	movs	r2, #0
 8008dd0:	4658      	mov	r0, fp
 8008dd2:	4b5f      	ldr	r3, [pc, #380]	; (8008f50 <__ieee754_pow+0x3d0>)
 8008dd4:	f7f7 f9c0 	bl	8000158 <__aeabi_dsub>
 8008dd8:	a355      	add	r3, pc, #340	; (adr r3, 8008f30 <__ieee754_pow+0x3b0>)
 8008dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dde:	4604      	mov	r4, r0
 8008de0:	460d      	mov	r5, r1
 8008de2:	f7f7 fb71 	bl	80004c8 <__aeabi_dmul>
 8008de6:	a354      	add	r3, pc, #336	; (adr r3, 8008f38 <__ieee754_pow+0x3b8>)
 8008de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dec:	4606      	mov	r6, r0
 8008dee:	460f      	mov	r7, r1
 8008df0:	4620      	mov	r0, r4
 8008df2:	4629      	mov	r1, r5
 8008df4:	f7f7 fb68 	bl	80004c8 <__aeabi_dmul>
 8008df8:	2200      	movs	r2, #0
 8008dfa:	4682      	mov	sl, r0
 8008dfc:	468b      	mov	fp, r1
 8008dfe:	4620      	mov	r0, r4
 8008e00:	4629      	mov	r1, r5
 8008e02:	4b54      	ldr	r3, [pc, #336]	; (8008f54 <__ieee754_pow+0x3d4>)
 8008e04:	f7f7 fb60 	bl	80004c8 <__aeabi_dmul>
 8008e08:	4602      	mov	r2, r0
 8008e0a:	460b      	mov	r3, r1
 8008e0c:	a14c      	add	r1, pc, #304	; (adr r1, 8008f40 <__ieee754_pow+0x3c0>)
 8008e0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e12:	f7f7 f9a1 	bl	8000158 <__aeabi_dsub>
 8008e16:	4622      	mov	r2, r4
 8008e18:	462b      	mov	r3, r5
 8008e1a:	f7f7 fb55 	bl	80004c8 <__aeabi_dmul>
 8008e1e:	4602      	mov	r2, r0
 8008e20:	460b      	mov	r3, r1
 8008e22:	2000      	movs	r0, #0
 8008e24:	494c      	ldr	r1, [pc, #304]	; (8008f58 <__ieee754_pow+0x3d8>)
 8008e26:	f7f7 f997 	bl	8000158 <__aeabi_dsub>
 8008e2a:	4622      	mov	r2, r4
 8008e2c:	462b      	mov	r3, r5
 8008e2e:	4680      	mov	r8, r0
 8008e30:	4689      	mov	r9, r1
 8008e32:	4620      	mov	r0, r4
 8008e34:	4629      	mov	r1, r5
 8008e36:	f7f7 fb47 	bl	80004c8 <__aeabi_dmul>
 8008e3a:	4602      	mov	r2, r0
 8008e3c:	460b      	mov	r3, r1
 8008e3e:	4640      	mov	r0, r8
 8008e40:	4649      	mov	r1, r9
 8008e42:	f7f7 fb41 	bl	80004c8 <__aeabi_dmul>
 8008e46:	a340      	add	r3, pc, #256	; (adr r3, 8008f48 <__ieee754_pow+0x3c8>)
 8008e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e4c:	f7f7 fb3c 	bl	80004c8 <__aeabi_dmul>
 8008e50:	4602      	mov	r2, r0
 8008e52:	460b      	mov	r3, r1
 8008e54:	4650      	mov	r0, sl
 8008e56:	4659      	mov	r1, fp
 8008e58:	f7f7 f97e 	bl	8000158 <__aeabi_dsub>
 8008e5c:	f04f 0a00 	mov.w	sl, #0
 8008e60:	4602      	mov	r2, r0
 8008e62:	460b      	mov	r3, r1
 8008e64:	4604      	mov	r4, r0
 8008e66:	460d      	mov	r5, r1
 8008e68:	4630      	mov	r0, r6
 8008e6a:	4639      	mov	r1, r7
 8008e6c:	f7f7 f976 	bl	800015c <__adddf3>
 8008e70:	4632      	mov	r2, r6
 8008e72:	463b      	mov	r3, r7
 8008e74:	4650      	mov	r0, sl
 8008e76:	468b      	mov	fp, r1
 8008e78:	f7f7 f96e 	bl	8000158 <__aeabi_dsub>
 8008e7c:	4602      	mov	r2, r0
 8008e7e:	460b      	mov	r3, r1
 8008e80:	4620      	mov	r0, r4
 8008e82:	4629      	mov	r1, r5
 8008e84:	f7f7 f968 	bl	8000158 <__aeabi_dsub>
 8008e88:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008e8c:	9b00      	ldr	r3, [sp, #0]
 8008e8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e90:	3b01      	subs	r3, #1
 8008e92:	4313      	orrs	r3, r2
 8008e94:	f04f 0600 	mov.w	r6, #0
 8008e98:	f04f 0200 	mov.w	r2, #0
 8008e9c:	bf0c      	ite	eq
 8008e9e:	4b2f      	ldreq	r3, [pc, #188]	; (8008f5c <__ieee754_pow+0x3dc>)
 8008ea0:	4b2b      	ldrne	r3, [pc, #172]	; (8008f50 <__ieee754_pow+0x3d0>)
 8008ea2:	4604      	mov	r4, r0
 8008ea4:	460d      	mov	r5, r1
 8008ea6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008eaa:	e9cd 2300 	strd	r2, r3, [sp]
 8008eae:	4632      	mov	r2, r6
 8008eb0:	463b      	mov	r3, r7
 8008eb2:	f7f7 f951 	bl	8000158 <__aeabi_dsub>
 8008eb6:	4652      	mov	r2, sl
 8008eb8:	465b      	mov	r3, fp
 8008eba:	f7f7 fb05 	bl	80004c8 <__aeabi_dmul>
 8008ebe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ec2:	4680      	mov	r8, r0
 8008ec4:	4689      	mov	r9, r1
 8008ec6:	4620      	mov	r0, r4
 8008ec8:	4629      	mov	r1, r5
 8008eca:	f7f7 fafd 	bl	80004c8 <__aeabi_dmul>
 8008ece:	4602      	mov	r2, r0
 8008ed0:	460b      	mov	r3, r1
 8008ed2:	4640      	mov	r0, r8
 8008ed4:	4649      	mov	r1, r9
 8008ed6:	f7f7 f941 	bl	800015c <__adddf3>
 8008eda:	4632      	mov	r2, r6
 8008edc:	463b      	mov	r3, r7
 8008ede:	4680      	mov	r8, r0
 8008ee0:	4689      	mov	r9, r1
 8008ee2:	4650      	mov	r0, sl
 8008ee4:	4659      	mov	r1, fp
 8008ee6:	f7f7 faef 	bl	80004c8 <__aeabi_dmul>
 8008eea:	4604      	mov	r4, r0
 8008eec:	460d      	mov	r5, r1
 8008eee:	460b      	mov	r3, r1
 8008ef0:	4602      	mov	r2, r0
 8008ef2:	4649      	mov	r1, r9
 8008ef4:	4640      	mov	r0, r8
 8008ef6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8008efa:	f7f7 f92f 	bl	800015c <__adddf3>
 8008efe:	4b18      	ldr	r3, [pc, #96]	; (8008f60 <__ieee754_pow+0x3e0>)
 8008f00:	4682      	mov	sl, r0
 8008f02:	4299      	cmp	r1, r3
 8008f04:	460f      	mov	r7, r1
 8008f06:	460e      	mov	r6, r1
 8008f08:	f340 82e5 	ble.w	80094d6 <__ieee754_pow+0x956>
 8008f0c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8008f10:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8008f14:	4303      	orrs	r3, r0
 8008f16:	f000 81df 	beq.w	80092d8 <__ieee754_pow+0x758>
 8008f1a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	2300      	movs	r3, #0
 8008f22:	f7f7 fd43 	bl	80009ac <__aeabi_dcmplt>
 8008f26:	3800      	subs	r0, #0
 8008f28:	bf18      	it	ne
 8008f2a:	2001      	movne	r0, #1
 8008f2c:	e72e      	b.n	8008d8c <__ieee754_pow+0x20c>
 8008f2e:	bf00      	nop
 8008f30:	60000000 	.word	0x60000000
 8008f34:	3ff71547 	.word	0x3ff71547
 8008f38:	f85ddf44 	.word	0xf85ddf44
 8008f3c:	3e54ae0b 	.word	0x3e54ae0b
 8008f40:	55555555 	.word	0x55555555
 8008f44:	3fd55555 	.word	0x3fd55555
 8008f48:	652b82fe 	.word	0x652b82fe
 8008f4c:	3ff71547 	.word	0x3ff71547
 8008f50:	3ff00000 	.word	0x3ff00000
 8008f54:	3fd00000 	.word	0x3fd00000
 8008f58:	3fe00000 	.word	0x3fe00000
 8008f5c:	bff00000 	.word	0xbff00000
 8008f60:	408fffff 	.word	0x408fffff
 8008f64:	4bd2      	ldr	r3, [pc, #840]	; (80092b0 <__ieee754_pow+0x730>)
 8008f66:	2200      	movs	r2, #0
 8008f68:	402b      	ands	r3, r5
 8008f6a:	b943      	cbnz	r3, 8008f7e <__ieee754_pow+0x3fe>
 8008f6c:	4658      	mov	r0, fp
 8008f6e:	4661      	mov	r1, ip
 8008f70:	4bd0      	ldr	r3, [pc, #832]	; (80092b4 <__ieee754_pow+0x734>)
 8008f72:	f7f7 faa9 	bl	80004c8 <__aeabi_dmul>
 8008f76:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8008f7a:	4683      	mov	fp, r0
 8008f7c:	460c      	mov	r4, r1
 8008f7e:	1523      	asrs	r3, r4, #20
 8008f80:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008f84:	4413      	add	r3, r2
 8008f86:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f88:	4bcb      	ldr	r3, [pc, #812]	; (80092b8 <__ieee754_pow+0x738>)
 8008f8a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008f8e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008f92:	429c      	cmp	r4, r3
 8008f94:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008f98:	dd08      	ble.n	8008fac <__ieee754_pow+0x42c>
 8008f9a:	4bc8      	ldr	r3, [pc, #800]	; (80092bc <__ieee754_pow+0x73c>)
 8008f9c:	429c      	cmp	r4, r3
 8008f9e:	f340 8199 	ble.w	80092d4 <__ieee754_pow+0x754>
 8008fa2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008fa4:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8008fa8:	3301      	adds	r3, #1
 8008faa:	930b      	str	r3, [sp, #44]	; 0x2c
 8008fac:	2600      	movs	r6, #0
 8008fae:	00f3      	lsls	r3, r6, #3
 8008fb0:	930d      	str	r3, [sp, #52]	; 0x34
 8008fb2:	4bc3      	ldr	r3, [pc, #780]	; (80092c0 <__ieee754_pow+0x740>)
 8008fb4:	4658      	mov	r0, fp
 8008fb6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008fba:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008fbe:	4629      	mov	r1, r5
 8008fc0:	461a      	mov	r2, r3
 8008fc2:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8008fc6:	4623      	mov	r3, r4
 8008fc8:	f7f7 f8c6 	bl	8000158 <__aeabi_dsub>
 8008fcc:	46da      	mov	sl, fp
 8008fce:	462b      	mov	r3, r5
 8008fd0:	4652      	mov	r2, sl
 8008fd2:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8008fd6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008fda:	f7f7 f8bf 	bl	800015c <__adddf3>
 8008fde:	4602      	mov	r2, r0
 8008fe0:	460b      	mov	r3, r1
 8008fe2:	2000      	movs	r0, #0
 8008fe4:	49b7      	ldr	r1, [pc, #732]	; (80092c4 <__ieee754_pow+0x744>)
 8008fe6:	f7f7 fb99 	bl	800071c <__aeabi_ddiv>
 8008fea:	4602      	mov	r2, r0
 8008fec:	460b      	mov	r3, r1
 8008fee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008ff2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008ff6:	f7f7 fa67 	bl	80004c8 <__aeabi_dmul>
 8008ffa:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008ffe:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8009002:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009006:	2300      	movs	r3, #0
 8009008:	2200      	movs	r2, #0
 800900a:	46ab      	mov	fp, r5
 800900c:	106d      	asrs	r5, r5, #1
 800900e:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8009012:	9304      	str	r3, [sp, #16]
 8009014:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009018:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800901c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8009020:	4640      	mov	r0, r8
 8009022:	4649      	mov	r1, r9
 8009024:	4614      	mov	r4, r2
 8009026:	461d      	mov	r5, r3
 8009028:	f7f7 fa4e 	bl	80004c8 <__aeabi_dmul>
 800902c:	4602      	mov	r2, r0
 800902e:	460b      	mov	r3, r1
 8009030:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009034:	f7f7 f890 	bl	8000158 <__aeabi_dsub>
 8009038:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800903c:	4606      	mov	r6, r0
 800903e:	460f      	mov	r7, r1
 8009040:	4620      	mov	r0, r4
 8009042:	4629      	mov	r1, r5
 8009044:	f7f7 f888 	bl	8000158 <__aeabi_dsub>
 8009048:	4602      	mov	r2, r0
 800904a:	460b      	mov	r3, r1
 800904c:	4650      	mov	r0, sl
 800904e:	4659      	mov	r1, fp
 8009050:	f7f7 f882 	bl	8000158 <__aeabi_dsub>
 8009054:	4642      	mov	r2, r8
 8009056:	464b      	mov	r3, r9
 8009058:	f7f7 fa36 	bl	80004c8 <__aeabi_dmul>
 800905c:	4602      	mov	r2, r0
 800905e:	460b      	mov	r3, r1
 8009060:	4630      	mov	r0, r6
 8009062:	4639      	mov	r1, r7
 8009064:	f7f7 f878 	bl	8000158 <__aeabi_dsub>
 8009068:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800906c:	f7f7 fa2c 	bl	80004c8 <__aeabi_dmul>
 8009070:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009074:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009078:	4610      	mov	r0, r2
 800907a:	4619      	mov	r1, r3
 800907c:	f7f7 fa24 	bl	80004c8 <__aeabi_dmul>
 8009080:	a379      	add	r3, pc, #484	; (adr r3, 8009268 <__ieee754_pow+0x6e8>)
 8009082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009086:	4604      	mov	r4, r0
 8009088:	460d      	mov	r5, r1
 800908a:	f7f7 fa1d 	bl	80004c8 <__aeabi_dmul>
 800908e:	a378      	add	r3, pc, #480	; (adr r3, 8009270 <__ieee754_pow+0x6f0>)
 8009090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009094:	f7f7 f862 	bl	800015c <__adddf3>
 8009098:	4622      	mov	r2, r4
 800909a:	462b      	mov	r3, r5
 800909c:	f7f7 fa14 	bl	80004c8 <__aeabi_dmul>
 80090a0:	a375      	add	r3, pc, #468	; (adr r3, 8009278 <__ieee754_pow+0x6f8>)
 80090a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090a6:	f7f7 f859 	bl	800015c <__adddf3>
 80090aa:	4622      	mov	r2, r4
 80090ac:	462b      	mov	r3, r5
 80090ae:	f7f7 fa0b 	bl	80004c8 <__aeabi_dmul>
 80090b2:	a373      	add	r3, pc, #460	; (adr r3, 8009280 <__ieee754_pow+0x700>)
 80090b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090b8:	f7f7 f850 	bl	800015c <__adddf3>
 80090bc:	4622      	mov	r2, r4
 80090be:	462b      	mov	r3, r5
 80090c0:	f7f7 fa02 	bl	80004c8 <__aeabi_dmul>
 80090c4:	a370      	add	r3, pc, #448	; (adr r3, 8009288 <__ieee754_pow+0x708>)
 80090c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ca:	f7f7 f847 	bl	800015c <__adddf3>
 80090ce:	4622      	mov	r2, r4
 80090d0:	462b      	mov	r3, r5
 80090d2:	f7f7 f9f9 	bl	80004c8 <__aeabi_dmul>
 80090d6:	a36e      	add	r3, pc, #440	; (adr r3, 8009290 <__ieee754_pow+0x710>)
 80090d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090dc:	f7f7 f83e 	bl	800015c <__adddf3>
 80090e0:	4622      	mov	r2, r4
 80090e2:	4606      	mov	r6, r0
 80090e4:	460f      	mov	r7, r1
 80090e6:	462b      	mov	r3, r5
 80090e8:	4620      	mov	r0, r4
 80090ea:	4629      	mov	r1, r5
 80090ec:	f7f7 f9ec 	bl	80004c8 <__aeabi_dmul>
 80090f0:	4602      	mov	r2, r0
 80090f2:	460b      	mov	r3, r1
 80090f4:	4630      	mov	r0, r6
 80090f6:	4639      	mov	r1, r7
 80090f8:	f7f7 f9e6 	bl	80004c8 <__aeabi_dmul>
 80090fc:	4604      	mov	r4, r0
 80090fe:	460d      	mov	r5, r1
 8009100:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009104:	4642      	mov	r2, r8
 8009106:	464b      	mov	r3, r9
 8009108:	f7f7 f828 	bl	800015c <__adddf3>
 800910c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009110:	f7f7 f9da 	bl	80004c8 <__aeabi_dmul>
 8009114:	4622      	mov	r2, r4
 8009116:	462b      	mov	r3, r5
 8009118:	f7f7 f820 	bl	800015c <__adddf3>
 800911c:	4642      	mov	r2, r8
 800911e:	4606      	mov	r6, r0
 8009120:	460f      	mov	r7, r1
 8009122:	464b      	mov	r3, r9
 8009124:	4640      	mov	r0, r8
 8009126:	4649      	mov	r1, r9
 8009128:	f7f7 f9ce 	bl	80004c8 <__aeabi_dmul>
 800912c:	2200      	movs	r2, #0
 800912e:	4b66      	ldr	r3, [pc, #408]	; (80092c8 <__ieee754_pow+0x748>)
 8009130:	4682      	mov	sl, r0
 8009132:	468b      	mov	fp, r1
 8009134:	f7f7 f812 	bl	800015c <__adddf3>
 8009138:	4632      	mov	r2, r6
 800913a:	463b      	mov	r3, r7
 800913c:	f7f7 f80e 	bl	800015c <__adddf3>
 8009140:	2400      	movs	r4, #0
 8009142:	460d      	mov	r5, r1
 8009144:	4622      	mov	r2, r4
 8009146:	460b      	mov	r3, r1
 8009148:	4640      	mov	r0, r8
 800914a:	4649      	mov	r1, r9
 800914c:	f7f7 f9bc 	bl	80004c8 <__aeabi_dmul>
 8009150:	2200      	movs	r2, #0
 8009152:	4680      	mov	r8, r0
 8009154:	4689      	mov	r9, r1
 8009156:	4620      	mov	r0, r4
 8009158:	4629      	mov	r1, r5
 800915a:	4b5b      	ldr	r3, [pc, #364]	; (80092c8 <__ieee754_pow+0x748>)
 800915c:	f7f6 fffc 	bl	8000158 <__aeabi_dsub>
 8009160:	4652      	mov	r2, sl
 8009162:	465b      	mov	r3, fp
 8009164:	f7f6 fff8 	bl	8000158 <__aeabi_dsub>
 8009168:	4602      	mov	r2, r0
 800916a:	460b      	mov	r3, r1
 800916c:	4630      	mov	r0, r6
 800916e:	4639      	mov	r1, r7
 8009170:	f7f6 fff2 	bl	8000158 <__aeabi_dsub>
 8009174:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009178:	f7f7 f9a6 	bl	80004c8 <__aeabi_dmul>
 800917c:	4622      	mov	r2, r4
 800917e:	4606      	mov	r6, r0
 8009180:	460f      	mov	r7, r1
 8009182:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009186:	462b      	mov	r3, r5
 8009188:	f7f7 f99e 	bl	80004c8 <__aeabi_dmul>
 800918c:	4602      	mov	r2, r0
 800918e:	460b      	mov	r3, r1
 8009190:	4630      	mov	r0, r6
 8009192:	4639      	mov	r1, r7
 8009194:	f7f6 ffe2 	bl	800015c <__adddf3>
 8009198:	2400      	movs	r4, #0
 800919a:	4606      	mov	r6, r0
 800919c:	460f      	mov	r7, r1
 800919e:	4602      	mov	r2, r0
 80091a0:	460b      	mov	r3, r1
 80091a2:	4640      	mov	r0, r8
 80091a4:	4649      	mov	r1, r9
 80091a6:	f7f6 ffd9 	bl	800015c <__adddf3>
 80091aa:	a33b      	add	r3, pc, #236	; (adr r3, 8009298 <__ieee754_pow+0x718>)
 80091ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091b0:	4620      	mov	r0, r4
 80091b2:	460d      	mov	r5, r1
 80091b4:	f7f7 f988 	bl	80004c8 <__aeabi_dmul>
 80091b8:	4642      	mov	r2, r8
 80091ba:	464b      	mov	r3, r9
 80091bc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80091c0:	4620      	mov	r0, r4
 80091c2:	4629      	mov	r1, r5
 80091c4:	f7f6 ffc8 	bl	8000158 <__aeabi_dsub>
 80091c8:	4602      	mov	r2, r0
 80091ca:	460b      	mov	r3, r1
 80091cc:	4630      	mov	r0, r6
 80091ce:	4639      	mov	r1, r7
 80091d0:	f7f6 ffc2 	bl	8000158 <__aeabi_dsub>
 80091d4:	a332      	add	r3, pc, #200	; (adr r3, 80092a0 <__ieee754_pow+0x720>)
 80091d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091da:	f7f7 f975 	bl	80004c8 <__aeabi_dmul>
 80091de:	a332      	add	r3, pc, #200	; (adr r3, 80092a8 <__ieee754_pow+0x728>)
 80091e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091e4:	4606      	mov	r6, r0
 80091e6:	460f      	mov	r7, r1
 80091e8:	4620      	mov	r0, r4
 80091ea:	4629      	mov	r1, r5
 80091ec:	f7f7 f96c 	bl	80004c8 <__aeabi_dmul>
 80091f0:	4602      	mov	r2, r0
 80091f2:	460b      	mov	r3, r1
 80091f4:	4630      	mov	r0, r6
 80091f6:	4639      	mov	r1, r7
 80091f8:	f7f6 ffb0 	bl	800015c <__adddf3>
 80091fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80091fe:	4b33      	ldr	r3, [pc, #204]	; (80092cc <__ieee754_pow+0x74c>)
 8009200:	f04f 0a00 	mov.w	sl, #0
 8009204:	4413      	add	r3, r2
 8009206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800920a:	f7f6 ffa7 	bl	800015c <__adddf3>
 800920e:	4680      	mov	r8, r0
 8009210:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009212:	4689      	mov	r9, r1
 8009214:	f7f7 f8ee 	bl	80003f4 <__aeabi_i2d>
 8009218:	4604      	mov	r4, r0
 800921a:	460d      	mov	r5, r1
 800921c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800921e:	4b2c      	ldr	r3, [pc, #176]	; (80092d0 <__ieee754_pow+0x750>)
 8009220:	4413      	add	r3, r2
 8009222:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009226:	4642      	mov	r2, r8
 8009228:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800922c:	464b      	mov	r3, r9
 800922e:	f7f6 ff95 	bl	800015c <__adddf3>
 8009232:	4632      	mov	r2, r6
 8009234:	463b      	mov	r3, r7
 8009236:	f7f6 ff91 	bl	800015c <__adddf3>
 800923a:	4622      	mov	r2, r4
 800923c:	462b      	mov	r3, r5
 800923e:	f7f6 ff8d 	bl	800015c <__adddf3>
 8009242:	4622      	mov	r2, r4
 8009244:	462b      	mov	r3, r5
 8009246:	4650      	mov	r0, sl
 8009248:	468b      	mov	fp, r1
 800924a:	f7f6 ff85 	bl	8000158 <__aeabi_dsub>
 800924e:	4632      	mov	r2, r6
 8009250:	463b      	mov	r3, r7
 8009252:	f7f6 ff81 	bl	8000158 <__aeabi_dsub>
 8009256:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800925a:	f7f6 ff7d 	bl	8000158 <__aeabi_dsub>
 800925e:	4602      	mov	r2, r0
 8009260:	460b      	mov	r3, r1
 8009262:	4640      	mov	r0, r8
 8009264:	4649      	mov	r1, r9
 8009266:	e60d      	b.n	8008e84 <__ieee754_pow+0x304>
 8009268:	4a454eef 	.word	0x4a454eef
 800926c:	3fca7e28 	.word	0x3fca7e28
 8009270:	93c9db65 	.word	0x93c9db65
 8009274:	3fcd864a 	.word	0x3fcd864a
 8009278:	a91d4101 	.word	0xa91d4101
 800927c:	3fd17460 	.word	0x3fd17460
 8009280:	518f264d 	.word	0x518f264d
 8009284:	3fd55555 	.word	0x3fd55555
 8009288:	db6fabff 	.word	0xdb6fabff
 800928c:	3fdb6db6 	.word	0x3fdb6db6
 8009290:	33333303 	.word	0x33333303
 8009294:	3fe33333 	.word	0x3fe33333
 8009298:	e0000000 	.word	0xe0000000
 800929c:	3feec709 	.word	0x3feec709
 80092a0:	dc3a03fd 	.word	0xdc3a03fd
 80092a4:	3feec709 	.word	0x3feec709
 80092a8:	145b01f5 	.word	0x145b01f5
 80092ac:	be3e2fe0 	.word	0xbe3e2fe0
 80092b0:	7ff00000 	.word	0x7ff00000
 80092b4:	43400000 	.word	0x43400000
 80092b8:	0003988e 	.word	0x0003988e
 80092bc:	000bb679 	.word	0x000bb679
 80092c0:	0800b210 	.word	0x0800b210
 80092c4:	3ff00000 	.word	0x3ff00000
 80092c8:	40080000 	.word	0x40080000
 80092cc:	0800b230 	.word	0x0800b230
 80092d0:	0800b220 	.word	0x0800b220
 80092d4:	2601      	movs	r6, #1
 80092d6:	e66a      	b.n	8008fae <__ieee754_pow+0x42e>
 80092d8:	a39d      	add	r3, pc, #628	; (adr r3, 8009550 <__ieee754_pow+0x9d0>)
 80092da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092de:	4640      	mov	r0, r8
 80092e0:	4649      	mov	r1, r9
 80092e2:	f7f6 ff3b 	bl	800015c <__adddf3>
 80092e6:	4622      	mov	r2, r4
 80092e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80092ec:	462b      	mov	r3, r5
 80092ee:	4650      	mov	r0, sl
 80092f0:	4639      	mov	r1, r7
 80092f2:	f7f6 ff31 	bl	8000158 <__aeabi_dsub>
 80092f6:	4602      	mov	r2, r0
 80092f8:	460b      	mov	r3, r1
 80092fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80092fe:	f7f7 fb73 	bl	80009e8 <__aeabi_dcmpgt>
 8009302:	2800      	cmp	r0, #0
 8009304:	f47f ae09 	bne.w	8008f1a <__ieee754_pow+0x39a>
 8009308:	4aa3      	ldr	r2, [pc, #652]	; (8009598 <__ieee754_pow+0xa18>)
 800930a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800930e:	4293      	cmp	r3, r2
 8009310:	f340 8101 	ble.w	8009516 <__ieee754_pow+0x996>
 8009314:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009318:	2000      	movs	r0, #0
 800931a:	151b      	asrs	r3, r3, #20
 800931c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009320:	fa4a f303 	asr.w	r3, sl, r3
 8009324:	4433      	add	r3, r6
 8009326:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800932a:	4f9c      	ldr	r7, [pc, #624]	; (800959c <__ieee754_pow+0xa1c>)
 800932c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009330:	4117      	asrs	r7, r2
 8009332:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8009336:	ea23 0107 	bic.w	r1, r3, r7
 800933a:	f1c2 0214 	rsb	r2, r2, #20
 800933e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8009342:	460b      	mov	r3, r1
 8009344:	fa4a fa02 	asr.w	sl, sl, r2
 8009348:	2e00      	cmp	r6, #0
 800934a:	4602      	mov	r2, r0
 800934c:	4629      	mov	r1, r5
 800934e:	4620      	mov	r0, r4
 8009350:	bfb8      	it	lt
 8009352:	f1ca 0a00 	rsblt	sl, sl, #0
 8009356:	f7f6 feff 	bl	8000158 <__aeabi_dsub>
 800935a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800935e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009362:	2400      	movs	r4, #0
 8009364:	4642      	mov	r2, r8
 8009366:	464b      	mov	r3, r9
 8009368:	f7f6 fef8 	bl	800015c <__adddf3>
 800936c:	a37a      	add	r3, pc, #488	; (adr r3, 8009558 <__ieee754_pow+0x9d8>)
 800936e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009372:	4620      	mov	r0, r4
 8009374:	460d      	mov	r5, r1
 8009376:	f7f7 f8a7 	bl	80004c8 <__aeabi_dmul>
 800937a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800937e:	4606      	mov	r6, r0
 8009380:	460f      	mov	r7, r1
 8009382:	4620      	mov	r0, r4
 8009384:	4629      	mov	r1, r5
 8009386:	f7f6 fee7 	bl	8000158 <__aeabi_dsub>
 800938a:	4602      	mov	r2, r0
 800938c:	460b      	mov	r3, r1
 800938e:	4640      	mov	r0, r8
 8009390:	4649      	mov	r1, r9
 8009392:	f7f6 fee1 	bl	8000158 <__aeabi_dsub>
 8009396:	a372      	add	r3, pc, #456	; (adr r3, 8009560 <__ieee754_pow+0x9e0>)
 8009398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800939c:	f7f7 f894 	bl	80004c8 <__aeabi_dmul>
 80093a0:	a371      	add	r3, pc, #452	; (adr r3, 8009568 <__ieee754_pow+0x9e8>)
 80093a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093a6:	4680      	mov	r8, r0
 80093a8:	4689      	mov	r9, r1
 80093aa:	4620      	mov	r0, r4
 80093ac:	4629      	mov	r1, r5
 80093ae:	f7f7 f88b 	bl	80004c8 <__aeabi_dmul>
 80093b2:	4602      	mov	r2, r0
 80093b4:	460b      	mov	r3, r1
 80093b6:	4640      	mov	r0, r8
 80093b8:	4649      	mov	r1, r9
 80093ba:	f7f6 fecf 	bl	800015c <__adddf3>
 80093be:	4604      	mov	r4, r0
 80093c0:	460d      	mov	r5, r1
 80093c2:	4602      	mov	r2, r0
 80093c4:	460b      	mov	r3, r1
 80093c6:	4630      	mov	r0, r6
 80093c8:	4639      	mov	r1, r7
 80093ca:	f7f6 fec7 	bl	800015c <__adddf3>
 80093ce:	4632      	mov	r2, r6
 80093d0:	463b      	mov	r3, r7
 80093d2:	4680      	mov	r8, r0
 80093d4:	4689      	mov	r9, r1
 80093d6:	f7f6 febf 	bl	8000158 <__aeabi_dsub>
 80093da:	4602      	mov	r2, r0
 80093dc:	460b      	mov	r3, r1
 80093de:	4620      	mov	r0, r4
 80093e0:	4629      	mov	r1, r5
 80093e2:	f7f6 feb9 	bl	8000158 <__aeabi_dsub>
 80093e6:	4642      	mov	r2, r8
 80093e8:	4606      	mov	r6, r0
 80093ea:	460f      	mov	r7, r1
 80093ec:	464b      	mov	r3, r9
 80093ee:	4640      	mov	r0, r8
 80093f0:	4649      	mov	r1, r9
 80093f2:	f7f7 f869 	bl	80004c8 <__aeabi_dmul>
 80093f6:	a35e      	add	r3, pc, #376	; (adr r3, 8009570 <__ieee754_pow+0x9f0>)
 80093f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093fc:	4604      	mov	r4, r0
 80093fe:	460d      	mov	r5, r1
 8009400:	f7f7 f862 	bl	80004c8 <__aeabi_dmul>
 8009404:	a35c      	add	r3, pc, #368	; (adr r3, 8009578 <__ieee754_pow+0x9f8>)
 8009406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800940a:	f7f6 fea5 	bl	8000158 <__aeabi_dsub>
 800940e:	4622      	mov	r2, r4
 8009410:	462b      	mov	r3, r5
 8009412:	f7f7 f859 	bl	80004c8 <__aeabi_dmul>
 8009416:	a35a      	add	r3, pc, #360	; (adr r3, 8009580 <__ieee754_pow+0xa00>)
 8009418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800941c:	f7f6 fe9e 	bl	800015c <__adddf3>
 8009420:	4622      	mov	r2, r4
 8009422:	462b      	mov	r3, r5
 8009424:	f7f7 f850 	bl	80004c8 <__aeabi_dmul>
 8009428:	a357      	add	r3, pc, #348	; (adr r3, 8009588 <__ieee754_pow+0xa08>)
 800942a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800942e:	f7f6 fe93 	bl	8000158 <__aeabi_dsub>
 8009432:	4622      	mov	r2, r4
 8009434:	462b      	mov	r3, r5
 8009436:	f7f7 f847 	bl	80004c8 <__aeabi_dmul>
 800943a:	a355      	add	r3, pc, #340	; (adr r3, 8009590 <__ieee754_pow+0xa10>)
 800943c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009440:	f7f6 fe8c 	bl	800015c <__adddf3>
 8009444:	4622      	mov	r2, r4
 8009446:	462b      	mov	r3, r5
 8009448:	f7f7 f83e 	bl	80004c8 <__aeabi_dmul>
 800944c:	4602      	mov	r2, r0
 800944e:	460b      	mov	r3, r1
 8009450:	4640      	mov	r0, r8
 8009452:	4649      	mov	r1, r9
 8009454:	f7f6 fe80 	bl	8000158 <__aeabi_dsub>
 8009458:	4604      	mov	r4, r0
 800945a:	460d      	mov	r5, r1
 800945c:	4602      	mov	r2, r0
 800945e:	460b      	mov	r3, r1
 8009460:	4640      	mov	r0, r8
 8009462:	4649      	mov	r1, r9
 8009464:	f7f7 f830 	bl	80004c8 <__aeabi_dmul>
 8009468:	2200      	movs	r2, #0
 800946a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800946e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009472:	4620      	mov	r0, r4
 8009474:	4629      	mov	r1, r5
 8009476:	f7f6 fe6f 	bl	8000158 <__aeabi_dsub>
 800947a:	4602      	mov	r2, r0
 800947c:	460b      	mov	r3, r1
 800947e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009482:	f7f7 f94b 	bl	800071c <__aeabi_ddiv>
 8009486:	4632      	mov	r2, r6
 8009488:	4604      	mov	r4, r0
 800948a:	460d      	mov	r5, r1
 800948c:	463b      	mov	r3, r7
 800948e:	4640      	mov	r0, r8
 8009490:	4649      	mov	r1, r9
 8009492:	f7f7 f819 	bl	80004c8 <__aeabi_dmul>
 8009496:	4632      	mov	r2, r6
 8009498:	463b      	mov	r3, r7
 800949a:	f7f6 fe5f 	bl	800015c <__adddf3>
 800949e:	4602      	mov	r2, r0
 80094a0:	460b      	mov	r3, r1
 80094a2:	4620      	mov	r0, r4
 80094a4:	4629      	mov	r1, r5
 80094a6:	f7f6 fe57 	bl	8000158 <__aeabi_dsub>
 80094aa:	4642      	mov	r2, r8
 80094ac:	464b      	mov	r3, r9
 80094ae:	f7f6 fe53 	bl	8000158 <__aeabi_dsub>
 80094b2:	4602      	mov	r2, r0
 80094b4:	460b      	mov	r3, r1
 80094b6:	2000      	movs	r0, #0
 80094b8:	4939      	ldr	r1, [pc, #228]	; (80095a0 <__ieee754_pow+0xa20>)
 80094ba:	f7f6 fe4d 	bl	8000158 <__aeabi_dsub>
 80094be:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80094c2:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80094c6:	da29      	bge.n	800951c <__ieee754_pow+0x99c>
 80094c8:	4652      	mov	r2, sl
 80094ca:	f000 fb71 	bl	8009bb0 <scalbn>
 80094ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80094d2:	f7ff bbfe 	b.w	8008cd2 <__ieee754_pow+0x152>
 80094d6:	4b33      	ldr	r3, [pc, #204]	; (80095a4 <__ieee754_pow+0xa24>)
 80094d8:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80094dc:	429f      	cmp	r7, r3
 80094de:	f77f af13 	ble.w	8009308 <__ieee754_pow+0x788>
 80094e2:	4b31      	ldr	r3, [pc, #196]	; (80095a8 <__ieee754_pow+0xa28>)
 80094e4:	440b      	add	r3, r1
 80094e6:	4303      	orrs	r3, r0
 80094e8:	d009      	beq.n	80094fe <__ieee754_pow+0x97e>
 80094ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 80094ee:	2200      	movs	r2, #0
 80094f0:	2300      	movs	r3, #0
 80094f2:	f7f7 fa5b 	bl	80009ac <__aeabi_dcmplt>
 80094f6:	3800      	subs	r0, #0
 80094f8:	bf18      	it	ne
 80094fa:	2001      	movne	r0, #1
 80094fc:	e453      	b.n	8008da6 <__ieee754_pow+0x226>
 80094fe:	4622      	mov	r2, r4
 8009500:	462b      	mov	r3, r5
 8009502:	f7f6 fe29 	bl	8000158 <__aeabi_dsub>
 8009506:	4642      	mov	r2, r8
 8009508:	464b      	mov	r3, r9
 800950a:	f7f7 fa63 	bl	80009d4 <__aeabi_dcmpge>
 800950e:	2800      	cmp	r0, #0
 8009510:	f43f aefa 	beq.w	8009308 <__ieee754_pow+0x788>
 8009514:	e7e9      	b.n	80094ea <__ieee754_pow+0x96a>
 8009516:	f04f 0a00 	mov.w	sl, #0
 800951a:	e720      	b.n	800935e <__ieee754_pow+0x7de>
 800951c:	4621      	mov	r1, r4
 800951e:	e7d6      	b.n	80094ce <__ieee754_pow+0x94e>
 8009520:	f04f 0b00 	mov.w	fp, #0
 8009524:	f8df c078 	ldr.w	ip, [pc, #120]	; 80095a0 <__ieee754_pow+0xa20>
 8009528:	f7ff bbba 	b.w	8008ca0 <__ieee754_pow+0x120>
 800952c:	f04f 0b00 	mov.w	fp, #0
 8009530:	f04f 0c00 	mov.w	ip, #0
 8009534:	f7ff bbb4 	b.w	8008ca0 <__ieee754_pow+0x120>
 8009538:	4640      	mov	r0, r8
 800953a:	4649      	mov	r1, r9
 800953c:	f7ff bb3d 	b.w	8008bba <__ieee754_pow+0x3a>
 8009540:	9200      	str	r2, [sp, #0]
 8009542:	f7ff bb89 	b.w	8008c58 <__ieee754_pow+0xd8>
 8009546:	2300      	movs	r3, #0
 8009548:	f7ff bb73 	b.w	8008c32 <__ieee754_pow+0xb2>
 800954c:	f3af 8000 	nop.w
 8009550:	652b82fe 	.word	0x652b82fe
 8009554:	3c971547 	.word	0x3c971547
 8009558:	00000000 	.word	0x00000000
 800955c:	3fe62e43 	.word	0x3fe62e43
 8009560:	fefa39ef 	.word	0xfefa39ef
 8009564:	3fe62e42 	.word	0x3fe62e42
 8009568:	0ca86c39 	.word	0x0ca86c39
 800956c:	be205c61 	.word	0xbe205c61
 8009570:	72bea4d0 	.word	0x72bea4d0
 8009574:	3e663769 	.word	0x3e663769
 8009578:	c5d26bf1 	.word	0xc5d26bf1
 800957c:	3ebbbd41 	.word	0x3ebbbd41
 8009580:	af25de2c 	.word	0xaf25de2c
 8009584:	3f11566a 	.word	0x3f11566a
 8009588:	16bebd93 	.word	0x16bebd93
 800958c:	3f66c16c 	.word	0x3f66c16c
 8009590:	5555553e 	.word	0x5555553e
 8009594:	3fc55555 	.word	0x3fc55555
 8009598:	3fe00000 	.word	0x3fe00000
 800959c:	000fffff 	.word	0x000fffff
 80095a0:	3ff00000 	.word	0x3ff00000
 80095a4:	4090cbff 	.word	0x4090cbff
 80095a8:	3f6f3400 	.word	0x3f6f3400

080095ac <__ieee754_sqrt>:
 80095ac:	f8df c158 	ldr.w	ip, [pc, #344]	; 8009708 <__ieee754_sqrt+0x15c>
 80095b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095b4:	ea3c 0c01 	bics.w	ip, ip, r1
 80095b8:	4606      	mov	r6, r0
 80095ba:	460d      	mov	r5, r1
 80095bc:	460c      	mov	r4, r1
 80095be:	460a      	mov	r2, r1
 80095c0:	4607      	mov	r7, r0
 80095c2:	4603      	mov	r3, r0
 80095c4:	d10f      	bne.n	80095e6 <__ieee754_sqrt+0x3a>
 80095c6:	4602      	mov	r2, r0
 80095c8:	460b      	mov	r3, r1
 80095ca:	f7f6 ff7d 	bl	80004c8 <__aeabi_dmul>
 80095ce:	4602      	mov	r2, r0
 80095d0:	460b      	mov	r3, r1
 80095d2:	4630      	mov	r0, r6
 80095d4:	4629      	mov	r1, r5
 80095d6:	f7f6 fdc1 	bl	800015c <__adddf3>
 80095da:	4606      	mov	r6, r0
 80095dc:	460d      	mov	r5, r1
 80095de:	4630      	mov	r0, r6
 80095e0:	4629      	mov	r1, r5
 80095e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095e6:	2900      	cmp	r1, #0
 80095e8:	dc0e      	bgt.n	8009608 <__ieee754_sqrt+0x5c>
 80095ea:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80095ee:	ea5c 0707 	orrs.w	r7, ip, r7
 80095f2:	d0f4      	beq.n	80095de <__ieee754_sqrt+0x32>
 80095f4:	b141      	cbz	r1, 8009608 <__ieee754_sqrt+0x5c>
 80095f6:	4602      	mov	r2, r0
 80095f8:	460b      	mov	r3, r1
 80095fa:	f7f6 fdad 	bl	8000158 <__aeabi_dsub>
 80095fe:	4602      	mov	r2, r0
 8009600:	460b      	mov	r3, r1
 8009602:	f7f7 f88b 	bl	800071c <__aeabi_ddiv>
 8009606:	e7e8      	b.n	80095da <__ieee754_sqrt+0x2e>
 8009608:	1521      	asrs	r1, r4, #20
 800960a:	d075      	beq.n	80096f8 <__ieee754_sqrt+0x14c>
 800960c:	07cc      	lsls	r4, r1, #31
 800960e:	f04f 0400 	mov.w	r4, #0
 8009612:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8009616:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800961a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800961e:	bf5e      	ittt	pl
 8009620:	0fd9      	lsrpl	r1, r3, #31
 8009622:	005b      	lslpl	r3, r3, #1
 8009624:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8009628:	0fd9      	lsrs	r1, r3, #31
 800962a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800962e:	2516      	movs	r5, #22
 8009630:	4620      	mov	r0, r4
 8009632:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009636:	107f      	asrs	r7, r7, #1
 8009638:	005b      	lsls	r3, r3, #1
 800963a:	1846      	adds	r6, r0, r1
 800963c:	4296      	cmp	r6, r2
 800963e:	bfde      	ittt	le
 8009640:	1b92      	suble	r2, r2, r6
 8009642:	1870      	addle	r0, r6, r1
 8009644:	1864      	addle	r4, r4, r1
 8009646:	0052      	lsls	r2, r2, #1
 8009648:	3d01      	subs	r5, #1
 800964a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800964e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009652:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009656:	d1f0      	bne.n	800963a <__ieee754_sqrt+0x8e>
 8009658:	4629      	mov	r1, r5
 800965a:	f04f 0e20 	mov.w	lr, #32
 800965e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009662:	4282      	cmp	r2, r0
 8009664:	eb06 0c05 	add.w	ip, r6, r5
 8009668:	dc02      	bgt.n	8009670 <__ieee754_sqrt+0xc4>
 800966a:	d113      	bne.n	8009694 <__ieee754_sqrt+0xe8>
 800966c:	459c      	cmp	ip, r3
 800966e:	d811      	bhi.n	8009694 <__ieee754_sqrt+0xe8>
 8009670:	f1bc 0f00 	cmp.w	ip, #0
 8009674:	eb0c 0506 	add.w	r5, ip, r6
 8009678:	da43      	bge.n	8009702 <__ieee754_sqrt+0x156>
 800967a:	2d00      	cmp	r5, #0
 800967c:	db41      	blt.n	8009702 <__ieee754_sqrt+0x156>
 800967e:	f100 0801 	add.w	r8, r0, #1
 8009682:	1a12      	subs	r2, r2, r0
 8009684:	4640      	mov	r0, r8
 8009686:	459c      	cmp	ip, r3
 8009688:	bf88      	it	hi
 800968a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800968e:	eba3 030c 	sub.w	r3, r3, ip
 8009692:	4431      	add	r1, r6
 8009694:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8009698:	f1be 0e01 	subs.w	lr, lr, #1
 800969c:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 80096a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80096a4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80096a8:	d1db      	bne.n	8009662 <__ieee754_sqrt+0xb6>
 80096aa:	4313      	orrs	r3, r2
 80096ac:	d006      	beq.n	80096bc <__ieee754_sqrt+0x110>
 80096ae:	1c48      	adds	r0, r1, #1
 80096b0:	bf0b      	itete	eq
 80096b2:	4671      	moveq	r1, lr
 80096b4:	3101      	addne	r1, #1
 80096b6:	3401      	addeq	r4, #1
 80096b8:	f021 0101 	bicne.w	r1, r1, #1
 80096bc:	1063      	asrs	r3, r4, #1
 80096be:	0849      	lsrs	r1, r1, #1
 80096c0:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80096c4:	07e2      	lsls	r2, r4, #31
 80096c6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80096ca:	bf48      	it	mi
 80096cc:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80096d0:	460e      	mov	r6, r1
 80096d2:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80096d6:	e782      	b.n	80095de <__ieee754_sqrt+0x32>
 80096d8:	0ada      	lsrs	r2, r3, #11
 80096da:	3815      	subs	r0, #21
 80096dc:	055b      	lsls	r3, r3, #21
 80096de:	2a00      	cmp	r2, #0
 80096e0:	d0fa      	beq.n	80096d8 <__ieee754_sqrt+0x12c>
 80096e2:	02d5      	lsls	r5, r2, #11
 80096e4:	d50a      	bpl.n	80096fc <__ieee754_sqrt+0x150>
 80096e6:	f1c1 0420 	rsb	r4, r1, #32
 80096ea:	fa23 f404 	lsr.w	r4, r3, r4
 80096ee:	1e4d      	subs	r5, r1, #1
 80096f0:	408b      	lsls	r3, r1
 80096f2:	4322      	orrs	r2, r4
 80096f4:	1b41      	subs	r1, r0, r5
 80096f6:	e789      	b.n	800960c <__ieee754_sqrt+0x60>
 80096f8:	4608      	mov	r0, r1
 80096fa:	e7f0      	b.n	80096de <__ieee754_sqrt+0x132>
 80096fc:	0052      	lsls	r2, r2, #1
 80096fe:	3101      	adds	r1, #1
 8009700:	e7ef      	b.n	80096e2 <__ieee754_sqrt+0x136>
 8009702:	4680      	mov	r8, r0
 8009704:	e7bd      	b.n	8009682 <__ieee754_sqrt+0xd6>
 8009706:	bf00      	nop
 8009708:	7ff00000 	.word	0x7ff00000

0800970c <__ieee754_asinf>:
 800970c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009710:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 8009714:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8009718:	4604      	mov	r4, r0
 800971a:	4605      	mov	r5, r0
 800971c:	d10c      	bne.n	8009738 <__ieee754_asinf+0x2c>
 800971e:	498d      	ldr	r1, [pc, #564]	; (8009954 <__ieee754_asinf+0x248>)
 8009720:	f7f7 fb00 	bl	8000d24 <__aeabi_fmul>
 8009724:	498c      	ldr	r1, [pc, #560]	; (8009958 <__ieee754_asinf+0x24c>)
 8009726:	4605      	mov	r5, r0
 8009728:	4620      	mov	r0, r4
 800972a:	f7f7 fafb 	bl	8000d24 <__aeabi_fmul>
 800972e:	4601      	mov	r1, r0
 8009730:	4628      	mov	r0, r5
 8009732:	f7f7 f9ef 	bl	8000b14 <__addsf3>
 8009736:	e006      	b.n	8009746 <__ieee754_asinf+0x3a>
 8009738:	dd07      	ble.n	800974a <__ieee754_asinf+0x3e>
 800973a:	4601      	mov	r1, r0
 800973c:	f7f7 f9e8 	bl	8000b10 <__aeabi_fsub>
 8009740:	4601      	mov	r1, r0
 8009742:	f7f7 fba3 	bl	8000e8c <__aeabi_fdiv>
 8009746:	4604      	mov	r4, r0
 8009748:	e00e      	b.n	8009768 <__ieee754_asinf+0x5c>
 800974a:	f1b8 5f7c 	cmp.w	r8, #1056964608	; 0x3f000000
 800974e:	da58      	bge.n	8009802 <__ieee754_asinf+0xf6>
 8009750:	f1b8 5f48 	cmp.w	r8, #838860800	; 0x32000000
 8009754:	da0b      	bge.n	800976e <__ieee754_asinf+0x62>
 8009756:	4981      	ldr	r1, [pc, #516]	; (800995c <__ieee754_asinf+0x250>)
 8009758:	f7f7 f9dc 	bl	8000b14 <__addsf3>
 800975c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009760:	f7f7 fc9c 	bl	800109c <__aeabi_fcmpgt>
 8009764:	2800      	cmp	r0, #0
 8009766:	d04c      	beq.n	8009802 <__ieee754_asinf+0xf6>
 8009768:	4620      	mov	r0, r4
 800976a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800976e:	4601      	mov	r1, r0
 8009770:	f7f7 fad8 	bl	8000d24 <__aeabi_fmul>
 8009774:	4605      	mov	r5, r0
 8009776:	497a      	ldr	r1, [pc, #488]	; (8009960 <__ieee754_asinf+0x254>)
 8009778:	f7f7 fad4 	bl	8000d24 <__aeabi_fmul>
 800977c:	4979      	ldr	r1, [pc, #484]	; (8009964 <__ieee754_asinf+0x258>)
 800977e:	f7f7 f9c9 	bl	8000b14 <__addsf3>
 8009782:	4629      	mov	r1, r5
 8009784:	f7f7 face 	bl	8000d24 <__aeabi_fmul>
 8009788:	4977      	ldr	r1, [pc, #476]	; (8009968 <__ieee754_asinf+0x25c>)
 800978a:	f7f7 f9c1 	bl	8000b10 <__aeabi_fsub>
 800978e:	4629      	mov	r1, r5
 8009790:	f7f7 fac8 	bl	8000d24 <__aeabi_fmul>
 8009794:	4975      	ldr	r1, [pc, #468]	; (800996c <__ieee754_asinf+0x260>)
 8009796:	f7f7 f9bd 	bl	8000b14 <__addsf3>
 800979a:	4629      	mov	r1, r5
 800979c:	f7f7 fac2 	bl	8000d24 <__aeabi_fmul>
 80097a0:	4973      	ldr	r1, [pc, #460]	; (8009970 <__ieee754_asinf+0x264>)
 80097a2:	f7f7 f9b5 	bl	8000b10 <__aeabi_fsub>
 80097a6:	4629      	mov	r1, r5
 80097a8:	f7f7 fabc 	bl	8000d24 <__aeabi_fmul>
 80097ac:	4971      	ldr	r1, [pc, #452]	; (8009974 <__ieee754_asinf+0x268>)
 80097ae:	f7f7 f9b1 	bl	8000b14 <__addsf3>
 80097b2:	4629      	mov	r1, r5
 80097b4:	f7f7 fab6 	bl	8000d24 <__aeabi_fmul>
 80097b8:	496f      	ldr	r1, [pc, #444]	; (8009978 <__ieee754_asinf+0x26c>)
 80097ba:	4606      	mov	r6, r0
 80097bc:	4628      	mov	r0, r5
 80097be:	f7f7 fab1 	bl	8000d24 <__aeabi_fmul>
 80097c2:	496e      	ldr	r1, [pc, #440]	; (800997c <__ieee754_asinf+0x270>)
 80097c4:	f7f7 f9a4 	bl	8000b10 <__aeabi_fsub>
 80097c8:	4629      	mov	r1, r5
 80097ca:	f7f7 faab 	bl	8000d24 <__aeabi_fmul>
 80097ce:	496c      	ldr	r1, [pc, #432]	; (8009980 <__ieee754_asinf+0x274>)
 80097d0:	f7f7 f9a0 	bl	8000b14 <__addsf3>
 80097d4:	4629      	mov	r1, r5
 80097d6:	f7f7 faa5 	bl	8000d24 <__aeabi_fmul>
 80097da:	496a      	ldr	r1, [pc, #424]	; (8009984 <__ieee754_asinf+0x278>)
 80097dc:	f7f7 f998 	bl	8000b10 <__aeabi_fsub>
 80097e0:	4629      	mov	r1, r5
 80097e2:	f7f7 fa9f 	bl	8000d24 <__aeabi_fmul>
 80097e6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80097ea:	f7f7 f993 	bl	8000b14 <__addsf3>
 80097ee:	4601      	mov	r1, r0
 80097f0:	4630      	mov	r0, r6
 80097f2:	f7f7 fb4b 	bl	8000e8c <__aeabi_fdiv>
 80097f6:	4621      	mov	r1, r4
 80097f8:	f7f7 fa94 	bl	8000d24 <__aeabi_fmul>
 80097fc:	4601      	mov	r1, r0
 80097fe:	4620      	mov	r0, r4
 8009800:	e797      	b.n	8009732 <__ieee754_asinf+0x26>
 8009802:	4620      	mov	r0, r4
 8009804:	f000 fb5e 	bl	8009ec4 <fabsf>
 8009808:	4601      	mov	r1, r0
 800980a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800980e:	f7f7 f97f 	bl	8000b10 <__aeabi_fsub>
 8009812:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8009816:	f7f7 fa85 	bl	8000d24 <__aeabi_fmul>
 800981a:	4606      	mov	r6, r0
 800981c:	4950      	ldr	r1, [pc, #320]	; (8009960 <__ieee754_asinf+0x254>)
 800981e:	f7f7 fa81 	bl	8000d24 <__aeabi_fmul>
 8009822:	4950      	ldr	r1, [pc, #320]	; (8009964 <__ieee754_asinf+0x258>)
 8009824:	f7f7 f976 	bl	8000b14 <__addsf3>
 8009828:	4631      	mov	r1, r6
 800982a:	f7f7 fa7b 	bl	8000d24 <__aeabi_fmul>
 800982e:	494e      	ldr	r1, [pc, #312]	; (8009968 <__ieee754_asinf+0x25c>)
 8009830:	f7f7 f96e 	bl	8000b10 <__aeabi_fsub>
 8009834:	4631      	mov	r1, r6
 8009836:	f7f7 fa75 	bl	8000d24 <__aeabi_fmul>
 800983a:	494c      	ldr	r1, [pc, #304]	; (800996c <__ieee754_asinf+0x260>)
 800983c:	f7f7 f96a 	bl	8000b14 <__addsf3>
 8009840:	4631      	mov	r1, r6
 8009842:	f7f7 fa6f 	bl	8000d24 <__aeabi_fmul>
 8009846:	494a      	ldr	r1, [pc, #296]	; (8009970 <__ieee754_asinf+0x264>)
 8009848:	f7f7 f962 	bl	8000b10 <__aeabi_fsub>
 800984c:	4631      	mov	r1, r6
 800984e:	f7f7 fa69 	bl	8000d24 <__aeabi_fmul>
 8009852:	4948      	ldr	r1, [pc, #288]	; (8009974 <__ieee754_asinf+0x268>)
 8009854:	f7f7 f95e 	bl	8000b14 <__addsf3>
 8009858:	4631      	mov	r1, r6
 800985a:	f7f7 fa63 	bl	8000d24 <__aeabi_fmul>
 800985e:	4946      	ldr	r1, [pc, #280]	; (8009978 <__ieee754_asinf+0x26c>)
 8009860:	4681      	mov	r9, r0
 8009862:	4630      	mov	r0, r6
 8009864:	f7f7 fa5e 	bl	8000d24 <__aeabi_fmul>
 8009868:	4944      	ldr	r1, [pc, #272]	; (800997c <__ieee754_asinf+0x270>)
 800986a:	f7f7 f951 	bl	8000b10 <__aeabi_fsub>
 800986e:	4631      	mov	r1, r6
 8009870:	f7f7 fa58 	bl	8000d24 <__aeabi_fmul>
 8009874:	4942      	ldr	r1, [pc, #264]	; (8009980 <__ieee754_asinf+0x274>)
 8009876:	f7f7 f94d 	bl	8000b14 <__addsf3>
 800987a:	4631      	mov	r1, r6
 800987c:	f7f7 fa52 	bl	8000d24 <__aeabi_fmul>
 8009880:	4940      	ldr	r1, [pc, #256]	; (8009984 <__ieee754_asinf+0x278>)
 8009882:	f7f7 f945 	bl	8000b10 <__aeabi_fsub>
 8009886:	4631      	mov	r1, r6
 8009888:	f7f7 fa4c 	bl	8000d24 <__aeabi_fmul>
 800988c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009890:	f7f7 f940 	bl	8000b14 <__addsf3>
 8009894:	4682      	mov	sl, r0
 8009896:	4630      	mov	r0, r6
 8009898:	f000 f902 	bl	8009aa0 <__ieee754_sqrtf>
 800989c:	4b3a      	ldr	r3, [pc, #232]	; (8009988 <__ieee754_asinf+0x27c>)
 800989e:	4607      	mov	r7, r0
 80098a0:	4598      	cmp	r8, r3
 80098a2:	dd1a      	ble.n	80098da <__ieee754_asinf+0x1ce>
 80098a4:	4651      	mov	r1, sl
 80098a6:	4648      	mov	r0, r9
 80098a8:	f7f7 faf0 	bl	8000e8c <__aeabi_fdiv>
 80098ac:	4639      	mov	r1, r7
 80098ae:	f7f7 fa39 	bl	8000d24 <__aeabi_fmul>
 80098b2:	4639      	mov	r1, r7
 80098b4:	f7f7 f92e 	bl	8000b14 <__addsf3>
 80098b8:	4601      	mov	r1, r0
 80098ba:	f7f7 f92b 	bl	8000b14 <__addsf3>
 80098be:	4933      	ldr	r1, [pc, #204]	; (800998c <__ieee754_asinf+0x280>)
 80098c0:	f7f7 f928 	bl	8000b14 <__addsf3>
 80098c4:	4601      	mov	r1, r0
 80098c6:	4823      	ldr	r0, [pc, #140]	; (8009954 <__ieee754_asinf+0x248>)
 80098c8:	f7f7 f922 	bl	8000b10 <__aeabi_fsub>
 80098cc:	2d00      	cmp	r5, #0
 80098ce:	4604      	mov	r4, r0
 80098d0:	f73f af4a 	bgt.w	8009768 <__ieee754_asinf+0x5c>
 80098d4:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80098d8:	e735      	b.n	8009746 <__ieee754_asinf+0x3a>
 80098da:	4601      	mov	r1, r0
 80098dc:	f420 687f 	bic.w	r8, r0, #4080	; 0xff0
 80098e0:	f7f7 f918 	bl	8000b14 <__addsf3>
 80098e4:	4651      	mov	r1, sl
 80098e6:	4604      	mov	r4, r0
 80098e8:	4648      	mov	r0, r9
 80098ea:	f7f7 facf 	bl	8000e8c <__aeabi_fdiv>
 80098ee:	4601      	mov	r1, r0
 80098f0:	4620      	mov	r0, r4
 80098f2:	f7f7 fa17 	bl	8000d24 <__aeabi_fmul>
 80098f6:	f028 080f 	bic.w	r8, r8, #15
 80098fa:	4681      	mov	r9, r0
 80098fc:	4641      	mov	r1, r8
 80098fe:	4640      	mov	r0, r8
 8009900:	f7f7 fa10 	bl	8000d24 <__aeabi_fmul>
 8009904:	4601      	mov	r1, r0
 8009906:	4630      	mov	r0, r6
 8009908:	f7f7 f902 	bl	8000b10 <__aeabi_fsub>
 800990c:	4641      	mov	r1, r8
 800990e:	4604      	mov	r4, r0
 8009910:	4638      	mov	r0, r7
 8009912:	f7f7 f8ff 	bl	8000b14 <__addsf3>
 8009916:	4601      	mov	r1, r0
 8009918:	4620      	mov	r0, r4
 800991a:	f7f7 fab7 	bl	8000e8c <__aeabi_fdiv>
 800991e:	4601      	mov	r1, r0
 8009920:	f7f7 f8f8 	bl	8000b14 <__addsf3>
 8009924:	4601      	mov	r1, r0
 8009926:	480c      	ldr	r0, [pc, #48]	; (8009958 <__ieee754_asinf+0x24c>)
 8009928:	f7f7 f8f2 	bl	8000b10 <__aeabi_fsub>
 800992c:	4601      	mov	r1, r0
 800992e:	4648      	mov	r0, r9
 8009930:	f7f7 f8ee 	bl	8000b10 <__aeabi_fsub>
 8009934:	4641      	mov	r1, r8
 8009936:	4604      	mov	r4, r0
 8009938:	4640      	mov	r0, r8
 800993a:	f7f7 f8eb 	bl	8000b14 <__addsf3>
 800993e:	4601      	mov	r1, r0
 8009940:	4813      	ldr	r0, [pc, #76]	; (8009990 <__ieee754_asinf+0x284>)
 8009942:	f7f7 f8e5 	bl	8000b10 <__aeabi_fsub>
 8009946:	4601      	mov	r1, r0
 8009948:	4620      	mov	r0, r4
 800994a:	f7f7 f8e1 	bl	8000b10 <__aeabi_fsub>
 800994e:	4601      	mov	r1, r0
 8009950:	480f      	ldr	r0, [pc, #60]	; (8009990 <__ieee754_asinf+0x284>)
 8009952:	e7b9      	b.n	80098c8 <__ieee754_asinf+0x1bc>
 8009954:	3fc90fdb 	.word	0x3fc90fdb
 8009958:	b33bbd2e 	.word	0xb33bbd2e
 800995c:	7149f2ca 	.word	0x7149f2ca
 8009960:	3811ef08 	.word	0x3811ef08
 8009964:	3a4f7f04 	.word	0x3a4f7f04
 8009968:	3d241146 	.word	0x3d241146
 800996c:	3e4e0aa8 	.word	0x3e4e0aa8
 8009970:	3ea6b090 	.word	0x3ea6b090
 8009974:	3e2aaaab 	.word	0x3e2aaaab
 8009978:	3d9dc62e 	.word	0x3d9dc62e
 800997c:	3f303361 	.word	0x3f303361
 8009980:	4001572d 	.word	0x4001572d
 8009984:	4019d139 	.word	0x4019d139
 8009988:	3f799999 	.word	0x3f799999
 800998c:	333bbd2e 	.word	0x333bbd2e
 8009990:	3f490fdb 	.word	0x3f490fdb

08009994 <__ieee754_atan2f>:
 8009994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009996:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800999a:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800999e:	4603      	mov	r3, r0
 80099a0:	dc05      	bgt.n	80099ae <__ieee754_atan2f+0x1a>
 80099a2:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 80099a6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80099aa:	4607      	mov	r7, r0
 80099ac:	dd04      	ble.n	80099b8 <__ieee754_atan2f+0x24>
 80099ae:	4618      	mov	r0, r3
 80099b0:	f7f7 f8b0 	bl	8000b14 <__addsf3>
 80099b4:	4603      	mov	r3, r0
 80099b6:	e011      	b.n	80099dc <__ieee754_atan2f+0x48>
 80099b8:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 80099bc:	d103      	bne.n	80099c6 <__ieee754_atan2f+0x32>
 80099be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80099c2:	f000 b973 	b.w	8009cac <atanf>
 80099c6:	178c      	asrs	r4, r1, #30
 80099c8:	f004 0402 	and.w	r4, r4, #2
 80099cc:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80099d0:	b932      	cbnz	r2, 80099e0 <__ieee754_atan2f+0x4c>
 80099d2:	2c02      	cmp	r4, #2
 80099d4:	d04c      	beq.n	8009a70 <__ieee754_atan2f+0xdc>
 80099d6:	2c03      	cmp	r4, #3
 80099d8:	d100      	bne.n	80099dc <__ieee754_atan2f+0x48>
 80099da:	4b29      	ldr	r3, [pc, #164]	; (8009a80 <__ieee754_atan2f+0xec>)
 80099dc:	4618      	mov	r0, r3
 80099de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099e0:	b91e      	cbnz	r6, 80099ea <__ieee754_atan2f+0x56>
 80099e2:	2f00      	cmp	r7, #0
 80099e4:	da4a      	bge.n	8009a7c <__ieee754_atan2f+0xe8>
 80099e6:	4b27      	ldr	r3, [pc, #156]	; (8009a84 <__ieee754_atan2f+0xf0>)
 80099e8:	e7f8      	b.n	80099dc <__ieee754_atan2f+0x48>
 80099ea:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 80099ee:	d10e      	bne.n	8009a0e <__ieee754_atan2f+0x7a>
 80099f0:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80099f4:	f104 34ff 	add.w	r4, r4, #4294967295
 80099f8:	d105      	bne.n	8009a06 <__ieee754_atan2f+0x72>
 80099fa:	2c02      	cmp	r4, #2
 80099fc:	d83a      	bhi.n	8009a74 <__ieee754_atan2f+0xe0>
 80099fe:	4b22      	ldr	r3, [pc, #136]	; (8009a88 <__ieee754_atan2f+0xf4>)
 8009a00:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8009a04:	e7ea      	b.n	80099dc <__ieee754_atan2f+0x48>
 8009a06:	2c02      	cmp	r4, #2
 8009a08:	d836      	bhi.n	8009a78 <__ieee754_atan2f+0xe4>
 8009a0a:	4b20      	ldr	r3, [pc, #128]	; (8009a8c <__ieee754_atan2f+0xf8>)
 8009a0c:	e7f8      	b.n	8009a00 <__ieee754_atan2f+0x6c>
 8009a0e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8009a12:	d0e6      	beq.n	80099e2 <__ieee754_atan2f+0x4e>
 8009a14:	1b92      	subs	r2, r2, r6
 8009a16:	f1b2 5ff4 	cmp.w	r2, #511705088	; 0x1e800000
 8009a1a:	ea4f 50e2 	mov.w	r0, r2, asr #23
 8009a1e:	da17      	bge.n	8009a50 <__ieee754_atan2f+0xbc>
 8009a20:	2900      	cmp	r1, #0
 8009a22:	da01      	bge.n	8009a28 <__ieee754_atan2f+0x94>
 8009a24:	303c      	adds	r0, #60	; 0x3c
 8009a26:	db15      	blt.n	8009a54 <__ieee754_atan2f+0xc0>
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f7f7 fa2f 	bl	8000e8c <__aeabi_fdiv>
 8009a2e:	f000 fa49 	bl	8009ec4 <fabsf>
 8009a32:	f000 f93b 	bl	8009cac <atanf>
 8009a36:	4603      	mov	r3, r0
 8009a38:	2c01      	cmp	r4, #1
 8009a3a:	d00d      	beq.n	8009a58 <__ieee754_atan2f+0xc4>
 8009a3c:	2c02      	cmp	r4, #2
 8009a3e:	d00e      	beq.n	8009a5e <__ieee754_atan2f+0xca>
 8009a40:	2c00      	cmp	r4, #0
 8009a42:	d0cb      	beq.n	80099dc <__ieee754_atan2f+0x48>
 8009a44:	4912      	ldr	r1, [pc, #72]	; (8009a90 <__ieee754_atan2f+0xfc>)
 8009a46:	4618      	mov	r0, r3
 8009a48:	f7f7 f864 	bl	8000b14 <__addsf3>
 8009a4c:	4911      	ldr	r1, [pc, #68]	; (8009a94 <__ieee754_atan2f+0x100>)
 8009a4e:	e00c      	b.n	8009a6a <__ieee754_atan2f+0xd6>
 8009a50:	4b11      	ldr	r3, [pc, #68]	; (8009a98 <__ieee754_atan2f+0x104>)
 8009a52:	e7f1      	b.n	8009a38 <__ieee754_atan2f+0xa4>
 8009a54:	2300      	movs	r3, #0
 8009a56:	e7ef      	b.n	8009a38 <__ieee754_atan2f+0xa4>
 8009a58:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009a5c:	e7be      	b.n	80099dc <__ieee754_atan2f+0x48>
 8009a5e:	490c      	ldr	r1, [pc, #48]	; (8009a90 <__ieee754_atan2f+0xfc>)
 8009a60:	4618      	mov	r0, r3
 8009a62:	f7f7 f857 	bl	8000b14 <__addsf3>
 8009a66:	4601      	mov	r1, r0
 8009a68:	480a      	ldr	r0, [pc, #40]	; (8009a94 <__ieee754_atan2f+0x100>)
 8009a6a:	f7f7 f851 	bl	8000b10 <__aeabi_fsub>
 8009a6e:	e7a1      	b.n	80099b4 <__ieee754_atan2f+0x20>
 8009a70:	4b08      	ldr	r3, [pc, #32]	; (8009a94 <__ieee754_atan2f+0x100>)
 8009a72:	e7b3      	b.n	80099dc <__ieee754_atan2f+0x48>
 8009a74:	4b09      	ldr	r3, [pc, #36]	; (8009a9c <__ieee754_atan2f+0x108>)
 8009a76:	e7b1      	b.n	80099dc <__ieee754_atan2f+0x48>
 8009a78:	2300      	movs	r3, #0
 8009a7a:	e7af      	b.n	80099dc <__ieee754_atan2f+0x48>
 8009a7c:	4b06      	ldr	r3, [pc, #24]	; (8009a98 <__ieee754_atan2f+0x104>)
 8009a7e:	e7ad      	b.n	80099dc <__ieee754_atan2f+0x48>
 8009a80:	c0490fdb 	.word	0xc0490fdb
 8009a84:	bfc90fdb 	.word	0xbfc90fdb
 8009a88:	0800b240 	.word	0x0800b240
 8009a8c:	0800b24c 	.word	0x0800b24c
 8009a90:	33bbbd2e 	.word	0x33bbbd2e
 8009a94:	40490fdb 	.word	0x40490fdb
 8009a98:	3fc90fdb 	.word	0x3fc90fdb
 8009a9c:	3f490fdb 	.word	0x3f490fdb

08009aa0 <__ieee754_sqrtf>:
 8009aa0:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8009aa4:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8009aa8:	b570      	push	{r4, r5, r6, lr}
 8009aaa:	4603      	mov	r3, r0
 8009aac:	4604      	mov	r4, r0
 8009aae:	d309      	bcc.n	8009ac4 <__ieee754_sqrtf+0x24>
 8009ab0:	4601      	mov	r1, r0
 8009ab2:	f7f7 f937 	bl	8000d24 <__aeabi_fmul>
 8009ab6:	4601      	mov	r1, r0
 8009ab8:	4620      	mov	r0, r4
 8009aba:	f7f7 f82b 	bl	8000b14 <__addsf3>
 8009abe:	4604      	mov	r4, r0
 8009ac0:	4620      	mov	r0, r4
 8009ac2:	bd70      	pop	{r4, r5, r6, pc}
 8009ac4:	2a00      	cmp	r2, #0
 8009ac6:	d0fb      	beq.n	8009ac0 <__ieee754_sqrtf+0x20>
 8009ac8:	2800      	cmp	r0, #0
 8009aca:	da06      	bge.n	8009ada <__ieee754_sqrtf+0x3a>
 8009acc:	4601      	mov	r1, r0
 8009ace:	f7f7 f81f 	bl	8000b10 <__aeabi_fsub>
 8009ad2:	4601      	mov	r1, r0
 8009ad4:	f7f7 f9da 	bl	8000e8c <__aeabi_fdiv>
 8009ad8:	e7f1      	b.n	8009abe <__ieee754_sqrtf+0x1e>
 8009ada:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 8009ade:	ea4f 51e0 	mov.w	r1, r0, asr #23
 8009ae2:	d029      	beq.n	8009b38 <__ieee754_sqrtf+0x98>
 8009ae4:	f3c3 0216 	ubfx	r2, r3, #0, #23
 8009ae8:	07cb      	lsls	r3, r1, #31
 8009aea:	f04f 0300 	mov.w	r3, #0
 8009aee:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 8009af2:	f04f 0419 	mov.w	r4, #25
 8009af6:	461e      	mov	r6, r3
 8009af8:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8009afc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8009b00:	bf58      	it	pl
 8009b02:	0052      	lslpl	r2, r2, #1
 8009b04:	1040      	asrs	r0, r0, #1
 8009b06:	0052      	lsls	r2, r2, #1
 8009b08:	1875      	adds	r5, r6, r1
 8009b0a:	4295      	cmp	r5, r2
 8009b0c:	bfde      	ittt	le
 8009b0e:	186e      	addle	r6, r5, r1
 8009b10:	1b52      	suble	r2, r2, r5
 8009b12:	185b      	addle	r3, r3, r1
 8009b14:	3c01      	subs	r4, #1
 8009b16:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8009b1a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009b1e:	d1f3      	bne.n	8009b08 <__ieee754_sqrtf+0x68>
 8009b20:	b112      	cbz	r2, 8009b28 <__ieee754_sqrtf+0x88>
 8009b22:	3301      	adds	r3, #1
 8009b24:	f023 0301 	bic.w	r3, r3, #1
 8009b28:	105c      	asrs	r4, r3, #1
 8009b2a:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 8009b2e:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 8009b32:	e7c5      	b.n	8009ac0 <__ieee754_sqrtf+0x20>
 8009b34:	005b      	lsls	r3, r3, #1
 8009b36:	3201      	adds	r2, #1
 8009b38:	0218      	lsls	r0, r3, #8
 8009b3a:	d5fb      	bpl.n	8009b34 <__ieee754_sqrtf+0x94>
 8009b3c:	3a01      	subs	r2, #1
 8009b3e:	1a89      	subs	r1, r1, r2
 8009b40:	e7d0      	b.n	8009ae4 <__ieee754_sqrtf+0x44>

08009b42 <with_errno>:
 8009b42:	b570      	push	{r4, r5, r6, lr}
 8009b44:	4604      	mov	r4, r0
 8009b46:	460d      	mov	r5, r1
 8009b48:	4616      	mov	r6, r2
 8009b4a:	f000 f9c3 	bl	8009ed4 <__errno>
 8009b4e:	4629      	mov	r1, r5
 8009b50:	6006      	str	r6, [r0, #0]
 8009b52:	4620      	mov	r0, r4
 8009b54:	bd70      	pop	{r4, r5, r6, pc}

08009b56 <xflow>:
 8009b56:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009b58:	4615      	mov	r5, r2
 8009b5a:	461c      	mov	r4, r3
 8009b5c:	b180      	cbz	r0, 8009b80 <xflow+0x2a>
 8009b5e:	4610      	mov	r0, r2
 8009b60:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009b64:	e9cd 0100 	strd	r0, r1, [sp]
 8009b68:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b6c:	4628      	mov	r0, r5
 8009b6e:	4621      	mov	r1, r4
 8009b70:	f7f6 fcaa 	bl	80004c8 <__aeabi_dmul>
 8009b74:	2222      	movs	r2, #34	; 0x22
 8009b76:	b003      	add	sp, #12
 8009b78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009b7c:	f7ff bfe1 	b.w	8009b42 <with_errno>
 8009b80:	4610      	mov	r0, r2
 8009b82:	4619      	mov	r1, r3
 8009b84:	e7ee      	b.n	8009b64 <xflow+0xe>

08009b86 <__math_uflow>:
 8009b86:	2200      	movs	r2, #0
 8009b88:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009b8c:	f7ff bfe3 	b.w	8009b56 <xflow>

08009b90 <__math_oflow>:
 8009b90:	2200      	movs	r2, #0
 8009b92:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8009b96:	f7ff bfde 	b.w	8009b56 <xflow>

08009b9a <fabs>:
 8009b9a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009b9e:	4770      	bx	lr

08009ba0 <finite>:
 8009ba0:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8009ba4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8009ba8:	0fc0      	lsrs	r0, r0, #31
 8009baa:	4770      	bx	lr
 8009bac:	0000      	movs	r0, r0
	...

08009bb0 <scalbn>:
 8009bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bb2:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8009bb6:	4604      	mov	r4, r0
 8009bb8:	460d      	mov	r5, r1
 8009bba:	4617      	mov	r7, r2
 8009bbc:	460b      	mov	r3, r1
 8009bbe:	b996      	cbnz	r6, 8009be6 <scalbn+0x36>
 8009bc0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009bc4:	4303      	orrs	r3, r0
 8009bc6:	d039      	beq.n	8009c3c <scalbn+0x8c>
 8009bc8:	4b33      	ldr	r3, [pc, #204]	; (8009c98 <scalbn+0xe8>)
 8009bca:	2200      	movs	r2, #0
 8009bcc:	f7f6 fc7c 	bl	80004c8 <__aeabi_dmul>
 8009bd0:	4b32      	ldr	r3, [pc, #200]	; (8009c9c <scalbn+0xec>)
 8009bd2:	4604      	mov	r4, r0
 8009bd4:	429f      	cmp	r7, r3
 8009bd6:	460d      	mov	r5, r1
 8009bd8:	da0f      	bge.n	8009bfa <scalbn+0x4a>
 8009bda:	a32b      	add	r3, pc, #172	; (adr r3, 8009c88 <scalbn+0xd8>)
 8009bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009be0:	f7f6 fc72 	bl	80004c8 <__aeabi_dmul>
 8009be4:	e006      	b.n	8009bf4 <scalbn+0x44>
 8009be6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8009bea:	4296      	cmp	r6, r2
 8009bec:	d10a      	bne.n	8009c04 <scalbn+0x54>
 8009bee:	4602      	mov	r2, r0
 8009bf0:	f7f6 fab4 	bl	800015c <__adddf3>
 8009bf4:	4604      	mov	r4, r0
 8009bf6:	460d      	mov	r5, r1
 8009bf8:	e020      	b.n	8009c3c <scalbn+0x8c>
 8009bfa:	460b      	mov	r3, r1
 8009bfc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8009c00:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8009c04:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8009c08:	19b9      	adds	r1, r7, r6
 8009c0a:	4291      	cmp	r1, r2
 8009c0c:	dd0e      	ble.n	8009c2c <scalbn+0x7c>
 8009c0e:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8009c12:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8009c16:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8009c1a:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8009c1e:	4820      	ldr	r0, [pc, #128]	; (8009ca0 <scalbn+0xf0>)
 8009c20:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8009c24:	a31a      	add	r3, pc, #104	; (adr r3, 8009c90 <scalbn+0xe0>)
 8009c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c2a:	e7d9      	b.n	8009be0 <scalbn+0x30>
 8009c2c:	2900      	cmp	r1, #0
 8009c2e:	dd08      	ble.n	8009c42 <scalbn+0x92>
 8009c30:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009c34:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009c38:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8009c3c:	4620      	mov	r0, r4
 8009c3e:	4629      	mov	r1, r5
 8009c40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c42:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8009c46:	da12      	bge.n	8009c6e <scalbn+0xbe>
 8009c48:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009c4c:	429f      	cmp	r7, r3
 8009c4e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8009c52:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 8009c56:	dcdc      	bgt.n	8009c12 <scalbn+0x62>
 8009c58:	a30b      	add	r3, pc, #44	; (adr r3, 8009c88 <scalbn+0xd8>)
 8009c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c5e:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8009c62:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8009c66:	480f      	ldr	r0, [pc, #60]	; (8009ca4 <scalbn+0xf4>)
 8009c68:	f041 011f 	orr.w	r1, r1, #31
 8009c6c:	e7b8      	b.n	8009be0 <scalbn+0x30>
 8009c6e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009c72:	3136      	adds	r1, #54	; 0x36
 8009c74:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009c78:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8009c7c:	4620      	mov	r0, r4
 8009c7e:	4629      	mov	r1, r5
 8009c80:	2200      	movs	r2, #0
 8009c82:	4b09      	ldr	r3, [pc, #36]	; (8009ca8 <scalbn+0xf8>)
 8009c84:	e7ac      	b.n	8009be0 <scalbn+0x30>
 8009c86:	bf00      	nop
 8009c88:	c2f8f359 	.word	0xc2f8f359
 8009c8c:	01a56e1f 	.word	0x01a56e1f
 8009c90:	8800759c 	.word	0x8800759c
 8009c94:	7e37e43c 	.word	0x7e37e43c
 8009c98:	43500000 	.word	0x43500000
 8009c9c:	ffff3cb0 	.word	0xffff3cb0
 8009ca0:	8800759c 	.word	0x8800759c
 8009ca4:	c2f8f359 	.word	0xc2f8f359
 8009ca8:	3c900000 	.word	0x3c900000

08009cac <atanf>:
 8009cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cb0:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 8009cb4:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 8009cb8:	4604      	mov	r4, r0
 8009cba:	4680      	mov	r8, r0
 8009cbc:	db0e      	blt.n	8009cdc <atanf+0x30>
 8009cbe:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8009cc2:	dd04      	ble.n	8009cce <atanf+0x22>
 8009cc4:	4601      	mov	r1, r0
 8009cc6:	f7f6 ff25 	bl	8000b14 <__addsf3>
 8009cca:	4604      	mov	r4, r0
 8009ccc:	e003      	b.n	8009cd6 <atanf+0x2a>
 8009cce:	2800      	cmp	r0, #0
 8009cd0:	f300 80ce 	bgt.w	8009e70 <atanf+0x1c4>
 8009cd4:	4c67      	ldr	r4, [pc, #412]	; (8009e74 <atanf+0x1c8>)
 8009cd6:	4620      	mov	r0, r4
 8009cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cdc:	4b66      	ldr	r3, [pc, #408]	; (8009e78 <atanf+0x1cc>)
 8009cde:	429d      	cmp	r5, r3
 8009ce0:	dc0e      	bgt.n	8009d00 <atanf+0x54>
 8009ce2:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 8009ce6:	da08      	bge.n	8009cfa <atanf+0x4e>
 8009ce8:	4964      	ldr	r1, [pc, #400]	; (8009e7c <atanf+0x1d0>)
 8009cea:	f7f6 ff13 	bl	8000b14 <__addsf3>
 8009cee:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009cf2:	f7f7 f9d3 	bl	800109c <__aeabi_fcmpgt>
 8009cf6:	2800      	cmp	r0, #0
 8009cf8:	d1ed      	bne.n	8009cd6 <atanf+0x2a>
 8009cfa:	f04f 36ff 	mov.w	r6, #4294967295
 8009cfe:	e01c      	b.n	8009d3a <atanf+0x8e>
 8009d00:	f000 f8e0 	bl	8009ec4 <fabsf>
 8009d04:	4b5e      	ldr	r3, [pc, #376]	; (8009e80 <atanf+0x1d4>)
 8009d06:	4604      	mov	r4, r0
 8009d08:	429d      	cmp	r5, r3
 8009d0a:	dc7c      	bgt.n	8009e06 <atanf+0x15a>
 8009d0c:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8009d10:	429d      	cmp	r5, r3
 8009d12:	dc67      	bgt.n	8009de4 <atanf+0x138>
 8009d14:	4601      	mov	r1, r0
 8009d16:	f7f6 fefd 	bl	8000b14 <__addsf3>
 8009d1a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009d1e:	f7f6 fef7 	bl	8000b10 <__aeabi_fsub>
 8009d22:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8009d26:	4605      	mov	r5, r0
 8009d28:	4620      	mov	r0, r4
 8009d2a:	f7f6 fef3 	bl	8000b14 <__addsf3>
 8009d2e:	4601      	mov	r1, r0
 8009d30:	4628      	mov	r0, r5
 8009d32:	f7f7 f8ab 	bl	8000e8c <__aeabi_fdiv>
 8009d36:	2600      	movs	r6, #0
 8009d38:	4604      	mov	r4, r0
 8009d3a:	4621      	mov	r1, r4
 8009d3c:	4620      	mov	r0, r4
 8009d3e:	f7f6 fff1 	bl	8000d24 <__aeabi_fmul>
 8009d42:	4601      	mov	r1, r0
 8009d44:	4607      	mov	r7, r0
 8009d46:	f7f6 ffed 	bl	8000d24 <__aeabi_fmul>
 8009d4a:	4605      	mov	r5, r0
 8009d4c:	494d      	ldr	r1, [pc, #308]	; (8009e84 <atanf+0x1d8>)
 8009d4e:	f7f6 ffe9 	bl	8000d24 <__aeabi_fmul>
 8009d52:	494d      	ldr	r1, [pc, #308]	; (8009e88 <atanf+0x1dc>)
 8009d54:	f7f6 fede 	bl	8000b14 <__addsf3>
 8009d58:	4629      	mov	r1, r5
 8009d5a:	f7f6 ffe3 	bl	8000d24 <__aeabi_fmul>
 8009d5e:	494b      	ldr	r1, [pc, #300]	; (8009e8c <atanf+0x1e0>)
 8009d60:	f7f6 fed8 	bl	8000b14 <__addsf3>
 8009d64:	4629      	mov	r1, r5
 8009d66:	f7f6 ffdd 	bl	8000d24 <__aeabi_fmul>
 8009d6a:	4949      	ldr	r1, [pc, #292]	; (8009e90 <atanf+0x1e4>)
 8009d6c:	f7f6 fed2 	bl	8000b14 <__addsf3>
 8009d70:	4629      	mov	r1, r5
 8009d72:	f7f6 ffd7 	bl	8000d24 <__aeabi_fmul>
 8009d76:	4947      	ldr	r1, [pc, #284]	; (8009e94 <atanf+0x1e8>)
 8009d78:	f7f6 fecc 	bl	8000b14 <__addsf3>
 8009d7c:	4629      	mov	r1, r5
 8009d7e:	f7f6 ffd1 	bl	8000d24 <__aeabi_fmul>
 8009d82:	4945      	ldr	r1, [pc, #276]	; (8009e98 <atanf+0x1ec>)
 8009d84:	f7f6 fec6 	bl	8000b14 <__addsf3>
 8009d88:	4639      	mov	r1, r7
 8009d8a:	f7f6 ffcb 	bl	8000d24 <__aeabi_fmul>
 8009d8e:	4943      	ldr	r1, [pc, #268]	; (8009e9c <atanf+0x1f0>)
 8009d90:	4607      	mov	r7, r0
 8009d92:	4628      	mov	r0, r5
 8009d94:	f7f6 ffc6 	bl	8000d24 <__aeabi_fmul>
 8009d98:	4941      	ldr	r1, [pc, #260]	; (8009ea0 <atanf+0x1f4>)
 8009d9a:	f7f6 feb9 	bl	8000b10 <__aeabi_fsub>
 8009d9e:	4629      	mov	r1, r5
 8009da0:	f7f6 ffc0 	bl	8000d24 <__aeabi_fmul>
 8009da4:	493f      	ldr	r1, [pc, #252]	; (8009ea4 <atanf+0x1f8>)
 8009da6:	f7f6 feb3 	bl	8000b10 <__aeabi_fsub>
 8009daa:	4629      	mov	r1, r5
 8009dac:	f7f6 ffba 	bl	8000d24 <__aeabi_fmul>
 8009db0:	493d      	ldr	r1, [pc, #244]	; (8009ea8 <atanf+0x1fc>)
 8009db2:	f7f6 fead 	bl	8000b10 <__aeabi_fsub>
 8009db6:	4629      	mov	r1, r5
 8009db8:	f7f6 ffb4 	bl	8000d24 <__aeabi_fmul>
 8009dbc:	493b      	ldr	r1, [pc, #236]	; (8009eac <atanf+0x200>)
 8009dbe:	f7f6 fea7 	bl	8000b10 <__aeabi_fsub>
 8009dc2:	4629      	mov	r1, r5
 8009dc4:	f7f6 ffae 	bl	8000d24 <__aeabi_fmul>
 8009dc8:	4601      	mov	r1, r0
 8009dca:	4638      	mov	r0, r7
 8009dcc:	f7f6 fea2 	bl	8000b14 <__addsf3>
 8009dd0:	4621      	mov	r1, r4
 8009dd2:	f7f6 ffa7 	bl	8000d24 <__aeabi_fmul>
 8009dd6:	1c73      	adds	r3, r6, #1
 8009dd8:	4601      	mov	r1, r0
 8009dda:	d133      	bne.n	8009e44 <atanf+0x198>
 8009ddc:	4620      	mov	r0, r4
 8009dde:	f7f6 fe97 	bl	8000b10 <__aeabi_fsub>
 8009de2:	e772      	b.n	8009cca <atanf+0x1e>
 8009de4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009de8:	f7f6 fe92 	bl	8000b10 <__aeabi_fsub>
 8009dec:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009df0:	4605      	mov	r5, r0
 8009df2:	4620      	mov	r0, r4
 8009df4:	f7f6 fe8e 	bl	8000b14 <__addsf3>
 8009df8:	4601      	mov	r1, r0
 8009dfa:	4628      	mov	r0, r5
 8009dfc:	f7f7 f846 	bl	8000e8c <__aeabi_fdiv>
 8009e00:	2601      	movs	r6, #1
 8009e02:	4604      	mov	r4, r0
 8009e04:	e799      	b.n	8009d3a <atanf+0x8e>
 8009e06:	4b2a      	ldr	r3, [pc, #168]	; (8009eb0 <atanf+0x204>)
 8009e08:	429d      	cmp	r5, r3
 8009e0a:	dc14      	bgt.n	8009e36 <atanf+0x18a>
 8009e0c:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8009e10:	f7f6 fe7e 	bl	8000b10 <__aeabi_fsub>
 8009e14:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8009e18:	4605      	mov	r5, r0
 8009e1a:	4620      	mov	r0, r4
 8009e1c:	f7f6 ff82 	bl	8000d24 <__aeabi_fmul>
 8009e20:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009e24:	f7f6 fe76 	bl	8000b14 <__addsf3>
 8009e28:	4601      	mov	r1, r0
 8009e2a:	4628      	mov	r0, r5
 8009e2c:	f7f7 f82e 	bl	8000e8c <__aeabi_fdiv>
 8009e30:	2602      	movs	r6, #2
 8009e32:	4604      	mov	r4, r0
 8009e34:	e781      	b.n	8009d3a <atanf+0x8e>
 8009e36:	4601      	mov	r1, r0
 8009e38:	481e      	ldr	r0, [pc, #120]	; (8009eb4 <atanf+0x208>)
 8009e3a:	f7f7 f827 	bl	8000e8c <__aeabi_fdiv>
 8009e3e:	2603      	movs	r6, #3
 8009e40:	4604      	mov	r4, r0
 8009e42:	e77a      	b.n	8009d3a <atanf+0x8e>
 8009e44:	4b1c      	ldr	r3, [pc, #112]	; (8009eb8 <atanf+0x20c>)
 8009e46:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 8009e4a:	f7f6 fe61 	bl	8000b10 <__aeabi_fsub>
 8009e4e:	4621      	mov	r1, r4
 8009e50:	f7f6 fe5e 	bl	8000b10 <__aeabi_fsub>
 8009e54:	4b19      	ldr	r3, [pc, #100]	; (8009ebc <atanf+0x210>)
 8009e56:	4601      	mov	r1, r0
 8009e58:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009e5c:	f7f6 fe58 	bl	8000b10 <__aeabi_fsub>
 8009e60:	f1b8 0f00 	cmp.w	r8, #0
 8009e64:	4604      	mov	r4, r0
 8009e66:	f6bf af36 	bge.w	8009cd6 <atanf+0x2a>
 8009e6a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8009e6e:	e72c      	b.n	8009cca <atanf+0x1e>
 8009e70:	4c13      	ldr	r4, [pc, #76]	; (8009ec0 <atanf+0x214>)
 8009e72:	e730      	b.n	8009cd6 <atanf+0x2a>
 8009e74:	bfc90fdb 	.word	0xbfc90fdb
 8009e78:	3edfffff 	.word	0x3edfffff
 8009e7c:	7149f2ca 	.word	0x7149f2ca
 8009e80:	3f97ffff 	.word	0x3f97ffff
 8009e84:	3c8569d7 	.word	0x3c8569d7
 8009e88:	3d4bda59 	.word	0x3d4bda59
 8009e8c:	3d886b35 	.word	0x3d886b35
 8009e90:	3dba2e6e 	.word	0x3dba2e6e
 8009e94:	3e124925 	.word	0x3e124925
 8009e98:	3eaaaaab 	.word	0x3eaaaaab
 8009e9c:	bd15a221 	.word	0xbd15a221
 8009ea0:	3d6ef16b 	.word	0x3d6ef16b
 8009ea4:	3d9d8795 	.word	0x3d9d8795
 8009ea8:	3de38e38 	.word	0x3de38e38
 8009eac:	3e4ccccd 	.word	0x3e4ccccd
 8009eb0:	401bffff 	.word	0x401bffff
 8009eb4:	bf800000 	.word	0xbf800000
 8009eb8:	0800b268 	.word	0x0800b268
 8009ebc:	0800b258 	.word	0x0800b258
 8009ec0:	3fc90fdb 	.word	0x3fc90fdb

08009ec4 <fabsf>:
 8009ec4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8009ec8:	4770      	bx	lr
	...

08009ecc <nanf>:
 8009ecc:	4800      	ldr	r0, [pc, #0]	; (8009ed0 <nanf+0x4>)
 8009ece:	4770      	bx	lr
 8009ed0:	7fc00000 	.word	0x7fc00000

08009ed4 <__errno>:
 8009ed4:	4b01      	ldr	r3, [pc, #4]	; (8009edc <__errno+0x8>)
 8009ed6:	6818      	ldr	r0, [r3, #0]
 8009ed8:	4770      	bx	lr
 8009eda:	bf00      	nop
 8009edc:	20000024 	.word	0x20000024

08009ee0 <__libc_init_array>:
 8009ee0:	b570      	push	{r4, r5, r6, lr}
 8009ee2:	2600      	movs	r6, #0
 8009ee4:	4d0c      	ldr	r5, [pc, #48]	; (8009f18 <__libc_init_array+0x38>)
 8009ee6:	4c0d      	ldr	r4, [pc, #52]	; (8009f1c <__libc_init_array+0x3c>)
 8009ee8:	1b64      	subs	r4, r4, r5
 8009eea:	10a4      	asrs	r4, r4, #2
 8009eec:	42a6      	cmp	r6, r4
 8009eee:	d109      	bne.n	8009f04 <__libc_init_array+0x24>
 8009ef0:	f001 f82c 	bl	800af4c <_init>
 8009ef4:	2600      	movs	r6, #0
 8009ef6:	4d0a      	ldr	r5, [pc, #40]	; (8009f20 <__libc_init_array+0x40>)
 8009ef8:	4c0a      	ldr	r4, [pc, #40]	; (8009f24 <__libc_init_array+0x44>)
 8009efa:	1b64      	subs	r4, r4, r5
 8009efc:	10a4      	asrs	r4, r4, #2
 8009efe:	42a6      	cmp	r6, r4
 8009f00:	d105      	bne.n	8009f0e <__libc_init_array+0x2e>
 8009f02:	bd70      	pop	{r4, r5, r6, pc}
 8009f04:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f08:	4798      	blx	r3
 8009f0a:	3601      	adds	r6, #1
 8009f0c:	e7ee      	b.n	8009eec <__libc_init_array+0xc>
 8009f0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f12:	4798      	blx	r3
 8009f14:	3601      	adds	r6, #1
 8009f16:	e7f2      	b.n	8009efe <__libc_init_array+0x1e>
 8009f18:	0800b310 	.word	0x0800b310
 8009f1c:	0800b310 	.word	0x0800b310
 8009f20:	0800b310 	.word	0x0800b310
 8009f24:	0800b314 	.word	0x0800b314

08009f28 <memset>:
 8009f28:	4603      	mov	r3, r0
 8009f2a:	4402      	add	r2, r0
 8009f2c:	4293      	cmp	r3, r2
 8009f2e:	d100      	bne.n	8009f32 <memset+0xa>
 8009f30:	4770      	bx	lr
 8009f32:	f803 1b01 	strb.w	r1, [r3], #1
 8009f36:	e7f9      	b.n	8009f2c <memset+0x4>

08009f38 <iprintf>:
 8009f38:	b40f      	push	{r0, r1, r2, r3}
 8009f3a:	4b0a      	ldr	r3, [pc, #40]	; (8009f64 <iprintf+0x2c>)
 8009f3c:	b513      	push	{r0, r1, r4, lr}
 8009f3e:	681c      	ldr	r4, [r3, #0]
 8009f40:	b124      	cbz	r4, 8009f4c <iprintf+0x14>
 8009f42:	69a3      	ldr	r3, [r4, #24]
 8009f44:	b913      	cbnz	r3, 8009f4c <iprintf+0x14>
 8009f46:	4620      	mov	r0, r4
 8009f48:	f000 fa5a 	bl	800a400 <__sinit>
 8009f4c:	ab05      	add	r3, sp, #20
 8009f4e:	4620      	mov	r0, r4
 8009f50:	9a04      	ldr	r2, [sp, #16]
 8009f52:	68a1      	ldr	r1, [r4, #8]
 8009f54:	9301      	str	r3, [sp, #4]
 8009f56:	f000 fc5d 	bl	800a814 <_vfiprintf_r>
 8009f5a:	b002      	add	sp, #8
 8009f5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f60:	b004      	add	sp, #16
 8009f62:	4770      	bx	lr
 8009f64:	20000024 	.word	0x20000024

08009f68 <_puts_r>:
 8009f68:	b570      	push	{r4, r5, r6, lr}
 8009f6a:	460e      	mov	r6, r1
 8009f6c:	4605      	mov	r5, r0
 8009f6e:	b118      	cbz	r0, 8009f78 <_puts_r+0x10>
 8009f70:	6983      	ldr	r3, [r0, #24]
 8009f72:	b90b      	cbnz	r3, 8009f78 <_puts_r+0x10>
 8009f74:	f000 fa44 	bl	800a400 <__sinit>
 8009f78:	69ab      	ldr	r3, [r5, #24]
 8009f7a:	68ac      	ldr	r4, [r5, #8]
 8009f7c:	b913      	cbnz	r3, 8009f84 <_puts_r+0x1c>
 8009f7e:	4628      	mov	r0, r5
 8009f80:	f000 fa3e 	bl	800a400 <__sinit>
 8009f84:	4b2c      	ldr	r3, [pc, #176]	; (800a038 <_puts_r+0xd0>)
 8009f86:	429c      	cmp	r4, r3
 8009f88:	d120      	bne.n	8009fcc <_puts_r+0x64>
 8009f8a:	686c      	ldr	r4, [r5, #4]
 8009f8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f8e:	07db      	lsls	r3, r3, #31
 8009f90:	d405      	bmi.n	8009f9e <_puts_r+0x36>
 8009f92:	89a3      	ldrh	r3, [r4, #12]
 8009f94:	0598      	lsls	r0, r3, #22
 8009f96:	d402      	bmi.n	8009f9e <_puts_r+0x36>
 8009f98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f9a:	f000 facf 	bl	800a53c <__retarget_lock_acquire_recursive>
 8009f9e:	89a3      	ldrh	r3, [r4, #12]
 8009fa0:	0719      	lsls	r1, r3, #28
 8009fa2:	d51d      	bpl.n	8009fe0 <_puts_r+0x78>
 8009fa4:	6923      	ldr	r3, [r4, #16]
 8009fa6:	b1db      	cbz	r3, 8009fe0 <_puts_r+0x78>
 8009fa8:	3e01      	subs	r6, #1
 8009faa:	68a3      	ldr	r3, [r4, #8]
 8009fac:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009fb0:	3b01      	subs	r3, #1
 8009fb2:	60a3      	str	r3, [r4, #8]
 8009fb4:	bb39      	cbnz	r1, 800a006 <_puts_r+0x9e>
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	da38      	bge.n	800a02c <_puts_r+0xc4>
 8009fba:	4622      	mov	r2, r4
 8009fbc:	210a      	movs	r1, #10
 8009fbe:	4628      	mov	r0, r5
 8009fc0:	f000 f848 	bl	800a054 <__swbuf_r>
 8009fc4:	3001      	adds	r0, #1
 8009fc6:	d011      	beq.n	8009fec <_puts_r+0x84>
 8009fc8:	250a      	movs	r5, #10
 8009fca:	e011      	b.n	8009ff0 <_puts_r+0x88>
 8009fcc:	4b1b      	ldr	r3, [pc, #108]	; (800a03c <_puts_r+0xd4>)
 8009fce:	429c      	cmp	r4, r3
 8009fd0:	d101      	bne.n	8009fd6 <_puts_r+0x6e>
 8009fd2:	68ac      	ldr	r4, [r5, #8]
 8009fd4:	e7da      	b.n	8009f8c <_puts_r+0x24>
 8009fd6:	4b1a      	ldr	r3, [pc, #104]	; (800a040 <_puts_r+0xd8>)
 8009fd8:	429c      	cmp	r4, r3
 8009fda:	bf08      	it	eq
 8009fdc:	68ec      	ldreq	r4, [r5, #12]
 8009fde:	e7d5      	b.n	8009f8c <_puts_r+0x24>
 8009fe0:	4621      	mov	r1, r4
 8009fe2:	4628      	mov	r0, r5
 8009fe4:	f000 f888 	bl	800a0f8 <__swsetup_r>
 8009fe8:	2800      	cmp	r0, #0
 8009fea:	d0dd      	beq.n	8009fa8 <_puts_r+0x40>
 8009fec:	f04f 35ff 	mov.w	r5, #4294967295
 8009ff0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009ff2:	07da      	lsls	r2, r3, #31
 8009ff4:	d405      	bmi.n	800a002 <_puts_r+0x9a>
 8009ff6:	89a3      	ldrh	r3, [r4, #12]
 8009ff8:	059b      	lsls	r3, r3, #22
 8009ffa:	d402      	bmi.n	800a002 <_puts_r+0x9a>
 8009ffc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ffe:	f000 fa9e 	bl	800a53e <__retarget_lock_release_recursive>
 800a002:	4628      	mov	r0, r5
 800a004:	bd70      	pop	{r4, r5, r6, pc}
 800a006:	2b00      	cmp	r3, #0
 800a008:	da04      	bge.n	800a014 <_puts_r+0xac>
 800a00a:	69a2      	ldr	r2, [r4, #24]
 800a00c:	429a      	cmp	r2, r3
 800a00e:	dc06      	bgt.n	800a01e <_puts_r+0xb6>
 800a010:	290a      	cmp	r1, #10
 800a012:	d004      	beq.n	800a01e <_puts_r+0xb6>
 800a014:	6823      	ldr	r3, [r4, #0]
 800a016:	1c5a      	adds	r2, r3, #1
 800a018:	6022      	str	r2, [r4, #0]
 800a01a:	7019      	strb	r1, [r3, #0]
 800a01c:	e7c5      	b.n	8009faa <_puts_r+0x42>
 800a01e:	4622      	mov	r2, r4
 800a020:	4628      	mov	r0, r5
 800a022:	f000 f817 	bl	800a054 <__swbuf_r>
 800a026:	3001      	adds	r0, #1
 800a028:	d1bf      	bne.n	8009faa <_puts_r+0x42>
 800a02a:	e7df      	b.n	8009fec <_puts_r+0x84>
 800a02c:	250a      	movs	r5, #10
 800a02e:	6823      	ldr	r3, [r4, #0]
 800a030:	1c5a      	adds	r2, r3, #1
 800a032:	6022      	str	r2, [r4, #0]
 800a034:	701d      	strb	r5, [r3, #0]
 800a036:	e7db      	b.n	8009ff0 <_puts_r+0x88>
 800a038:	0800b29c 	.word	0x0800b29c
 800a03c:	0800b2bc 	.word	0x0800b2bc
 800a040:	0800b27c 	.word	0x0800b27c

0800a044 <puts>:
 800a044:	4b02      	ldr	r3, [pc, #8]	; (800a050 <puts+0xc>)
 800a046:	4601      	mov	r1, r0
 800a048:	6818      	ldr	r0, [r3, #0]
 800a04a:	f7ff bf8d 	b.w	8009f68 <_puts_r>
 800a04e:	bf00      	nop
 800a050:	20000024 	.word	0x20000024

0800a054 <__swbuf_r>:
 800a054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a056:	460e      	mov	r6, r1
 800a058:	4614      	mov	r4, r2
 800a05a:	4605      	mov	r5, r0
 800a05c:	b118      	cbz	r0, 800a066 <__swbuf_r+0x12>
 800a05e:	6983      	ldr	r3, [r0, #24]
 800a060:	b90b      	cbnz	r3, 800a066 <__swbuf_r+0x12>
 800a062:	f000 f9cd 	bl	800a400 <__sinit>
 800a066:	4b21      	ldr	r3, [pc, #132]	; (800a0ec <__swbuf_r+0x98>)
 800a068:	429c      	cmp	r4, r3
 800a06a:	d12b      	bne.n	800a0c4 <__swbuf_r+0x70>
 800a06c:	686c      	ldr	r4, [r5, #4]
 800a06e:	69a3      	ldr	r3, [r4, #24]
 800a070:	60a3      	str	r3, [r4, #8]
 800a072:	89a3      	ldrh	r3, [r4, #12]
 800a074:	071a      	lsls	r2, r3, #28
 800a076:	d52f      	bpl.n	800a0d8 <__swbuf_r+0x84>
 800a078:	6923      	ldr	r3, [r4, #16]
 800a07a:	b36b      	cbz	r3, 800a0d8 <__swbuf_r+0x84>
 800a07c:	6923      	ldr	r3, [r4, #16]
 800a07e:	6820      	ldr	r0, [r4, #0]
 800a080:	b2f6      	uxtb	r6, r6
 800a082:	1ac0      	subs	r0, r0, r3
 800a084:	6963      	ldr	r3, [r4, #20]
 800a086:	4637      	mov	r7, r6
 800a088:	4283      	cmp	r3, r0
 800a08a:	dc04      	bgt.n	800a096 <__swbuf_r+0x42>
 800a08c:	4621      	mov	r1, r4
 800a08e:	4628      	mov	r0, r5
 800a090:	f000 f922 	bl	800a2d8 <_fflush_r>
 800a094:	bb30      	cbnz	r0, 800a0e4 <__swbuf_r+0x90>
 800a096:	68a3      	ldr	r3, [r4, #8]
 800a098:	3001      	adds	r0, #1
 800a09a:	3b01      	subs	r3, #1
 800a09c:	60a3      	str	r3, [r4, #8]
 800a09e:	6823      	ldr	r3, [r4, #0]
 800a0a0:	1c5a      	adds	r2, r3, #1
 800a0a2:	6022      	str	r2, [r4, #0]
 800a0a4:	701e      	strb	r6, [r3, #0]
 800a0a6:	6963      	ldr	r3, [r4, #20]
 800a0a8:	4283      	cmp	r3, r0
 800a0aa:	d004      	beq.n	800a0b6 <__swbuf_r+0x62>
 800a0ac:	89a3      	ldrh	r3, [r4, #12]
 800a0ae:	07db      	lsls	r3, r3, #31
 800a0b0:	d506      	bpl.n	800a0c0 <__swbuf_r+0x6c>
 800a0b2:	2e0a      	cmp	r6, #10
 800a0b4:	d104      	bne.n	800a0c0 <__swbuf_r+0x6c>
 800a0b6:	4621      	mov	r1, r4
 800a0b8:	4628      	mov	r0, r5
 800a0ba:	f000 f90d 	bl	800a2d8 <_fflush_r>
 800a0be:	b988      	cbnz	r0, 800a0e4 <__swbuf_r+0x90>
 800a0c0:	4638      	mov	r0, r7
 800a0c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0c4:	4b0a      	ldr	r3, [pc, #40]	; (800a0f0 <__swbuf_r+0x9c>)
 800a0c6:	429c      	cmp	r4, r3
 800a0c8:	d101      	bne.n	800a0ce <__swbuf_r+0x7a>
 800a0ca:	68ac      	ldr	r4, [r5, #8]
 800a0cc:	e7cf      	b.n	800a06e <__swbuf_r+0x1a>
 800a0ce:	4b09      	ldr	r3, [pc, #36]	; (800a0f4 <__swbuf_r+0xa0>)
 800a0d0:	429c      	cmp	r4, r3
 800a0d2:	bf08      	it	eq
 800a0d4:	68ec      	ldreq	r4, [r5, #12]
 800a0d6:	e7ca      	b.n	800a06e <__swbuf_r+0x1a>
 800a0d8:	4621      	mov	r1, r4
 800a0da:	4628      	mov	r0, r5
 800a0dc:	f000 f80c 	bl	800a0f8 <__swsetup_r>
 800a0e0:	2800      	cmp	r0, #0
 800a0e2:	d0cb      	beq.n	800a07c <__swbuf_r+0x28>
 800a0e4:	f04f 37ff 	mov.w	r7, #4294967295
 800a0e8:	e7ea      	b.n	800a0c0 <__swbuf_r+0x6c>
 800a0ea:	bf00      	nop
 800a0ec:	0800b29c 	.word	0x0800b29c
 800a0f0:	0800b2bc 	.word	0x0800b2bc
 800a0f4:	0800b27c 	.word	0x0800b27c

0800a0f8 <__swsetup_r>:
 800a0f8:	4b32      	ldr	r3, [pc, #200]	; (800a1c4 <__swsetup_r+0xcc>)
 800a0fa:	b570      	push	{r4, r5, r6, lr}
 800a0fc:	681d      	ldr	r5, [r3, #0]
 800a0fe:	4606      	mov	r6, r0
 800a100:	460c      	mov	r4, r1
 800a102:	b125      	cbz	r5, 800a10e <__swsetup_r+0x16>
 800a104:	69ab      	ldr	r3, [r5, #24]
 800a106:	b913      	cbnz	r3, 800a10e <__swsetup_r+0x16>
 800a108:	4628      	mov	r0, r5
 800a10a:	f000 f979 	bl	800a400 <__sinit>
 800a10e:	4b2e      	ldr	r3, [pc, #184]	; (800a1c8 <__swsetup_r+0xd0>)
 800a110:	429c      	cmp	r4, r3
 800a112:	d10f      	bne.n	800a134 <__swsetup_r+0x3c>
 800a114:	686c      	ldr	r4, [r5, #4]
 800a116:	89a3      	ldrh	r3, [r4, #12]
 800a118:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a11c:	0719      	lsls	r1, r3, #28
 800a11e:	d42c      	bmi.n	800a17a <__swsetup_r+0x82>
 800a120:	06dd      	lsls	r5, r3, #27
 800a122:	d411      	bmi.n	800a148 <__swsetup_r+0x50>
 800a124:	2309      	movs	r3, #9
 800a126:	6033      	str	r3, [r6, #0]
 800a128:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a12c:	f04f 30ff 	mov.w	r0, #4294967295
 800a130:	81a3      	strh	r3, [r4, #12]
 800a132:	e03e      	b.n	800a1b2 <__swsetup_r+0xba>
 800a134:	4b25      	ldr	r3, [pc, #148]	; (800a1cc <__swsetup_r+0xd4>)
 800a136:	429c      	cmp	r4, r3
 800a138:	d101      	bne.n	800a13e <__swsetup_r+0x46>
 800a13a:	68ac      	ldr	r4, [r5, #8]
 800a13c:	e7eb      	b.n	800a116 <__swsetup_r+0x1e>
 800a13e:	4b24      	ldr	r3, [pc, #144]	; (800a1d0 <__swsetup_r+0xd8>)
 800a140:	429c      	cmp	r4, r3
 800a142:	bf08      	it	eq
 800a144:	68ec      	ldreq	r4, [r5, #12]
 800a146:	e7e6      	b.n	800a116 <__swsetup_r+0x1e>
 800a148:	0758      	lsls	r0, r3, #29
 800a14a:	d512      	bpl.n	800a172 <__swsetup_r+0x7a>
 800a14c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a14e:	b141      	cbz	r1, 800a162 <__swsetup_r+0x6a>
 800a150:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a154:	4299      	cmp	r1, r3
 800a156:	d002      	beq.n	800a15e <__swsetup_r+0x66>
 800a158:	4630      	mov	r0, r6
 800a15a:	f000 fa57 	bl	800a60c <_free_r>
 800a15e:	2300      	movs	r3, #0
 800a160:	6363      	str	r3, [r4, #52]	; 0x34
 800a162:	89a3      	ldrh	r3, [r4, #12]
 800a164:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a168:	81a3      	strh	r3, [r4, #12]
 800a16a:	2300      	movs	r3, #0
 800a16c:	6063      	str	r3, [r4, #4]
 800a16e:	6923      	ldr	r3, [r4, #16]
 800a170:	6023      	str	r3, [r4, #0]
 800a172:	89a3      	ldrh	r3, [r4, #12]
 800a174:	f043 0308 	orr.w	r3, r3, #8
 800a178:	81a3      	strh	r3, [r4, #12]
 800a17a:	6923      	ldr	r3, [r4, #16]
 800a17c:	b94b      	cbnz	r3, 800a192 <__swsetup_r+0x9a>
 800a17e:	89a3      	ldrh	r3, [r4, #12]
 800a180:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a184:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a188:	d003      	beq.n	800a192 <__swsetup_r+0x9a>
 800a18a:	4621      	mov	r1, r4
 800a18c:	4630      	mov	r0, r6
 800a18e:	f000 f9fd 	bl	800a58c <__smakebuf_r>
 800a192:	89a0      	ldrh	r0, [r4, #12]
 800a194:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a198:	f010 0301 	ands.w	r3, r0, #1
 800a19c:	d00a      	beq.n	800a1b4 <__swsetup_r+0xbc>
 800a19e:	2300      	movs	r3, #0
 800a1a0:	60a3      	str	r3, [r4, #8]
 800a1a2:	6963      	ldr	r3, [r4, #20]
 800a1a4:	425b      	negs	r3, r3
 800a1a6:	61a3      	str	r3, [r4, #24]
 800a1a8:	6923      	ldr	r3, [r4, #16]
 800a1aa:	b943      	cbnz	r3, 800a1be <__swsetup_r+0xc6>
 800a1ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a1b0:	d1ba      	bne.n	800a128 <__swsetup_r+0x30>
 800a1b2:	bd70      	pop	{r4, r5, r6, pc}
 800a1b4:	0781      	lsls	r1, r0, #30
 800a1b6:	bf58      	it	pl
 800a1b8:	6963      	ldrpl	r3, [r4, #20]
 800a1ba:	60a3      	str	r3, [r4, #8]
 800a1bc:	e7f4      	b.n	800a1a8 <__swsetup_r+0xb0>
 800a1be:	2000      	movs	r0, #0
 800a1c0:	e7f7      	b.n	800a1b2 <__swsetup_r+0xba>
 800a1c2:	bf00      	nop
 800a1c4:	20000024 	.word	0x20000024
 800a1c8:	0800b29c 	.word	0x0800b29c
 800a1cc:	0800b2bc 	.word	0x0800b2bc
 800a1d0:	0800b27c 	.word	0x0800b27c

0800a1d4 <__sflush_r>:
 800a1d4:	898a      	ldrh	r2, [r1, #12]
 800a1d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1d8:	4605      	mov	r5, r0
 800a1da:	0710      	lsls	r0, r2, #28
 800a1dc:	460c      	mov	r4, r1
 800a1de:	d457      	bmi.n	800a290 <__sflush_r+0xbc>
 800a1e0:	684b      	ldr	r3, [r1, #4]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	dc04      	bgt.n	800a1f0 <__sflush_r+0x1c>
 800a1e6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	dc01      	bgt.n	800a1f0 <__sflush_r+0x1c>
 800a1ec:	2000      	movs	r0, #0
 800a1ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a1f2:	2e00      	cmp	r6, #0
 800a1f4:	d0fa      	beq.n	800a1ec <__sflush_r+0x18>
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a1fc:	682f      	ldr	r7, [r5, #0]
 800a1fe:	602b      	str	r3, [r5, #0]
 800a200:	d032      	beq.n	800a268 <__sflush_r+0x94>
 800a202:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a204:	89a3      	ldrh	r3, [r4, #12]
 800a206:	075a      	lsls	r2, r3, #29
 800a208:	d505      	bpl.n	800a216 <__sflush_r+0x42>
 800a20a:	6863      	ldr	r3, [r4, #4]
 800a20c:	1ac0      	subs	r0, r0, r3
 800a20e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a210:	b10b      	cbz	r3, 800a216 <__sflush_r+0x42>
 800a212:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a214:	1ac0      	subs	r0, r0, r3
 800a216:	2300      	movs	r3, #0
 800a218:	4602      	mov	r2, r0
 800a21a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a21c:	4628      	mov	r0, r5
 800a21e:	6a21      	ldr	r1, [r4, #32]
 800a220:	47b0      	blx	r6
 800a222:	1c43      	adds	r3, r0, #1
 800a224:	89a3      	ldrh	r3, [r4, #12]
 800a226:	d106      	bne.n	800a236 <__sflush_r+0x62>
 800a228:	6829      	ldr	r1, [r5, #0]
 800a22a:	291d      	cmp	r1, #29
 800a22c:	d82c      	bhi.n	800a288 <__sflush_r+0xb4>
 800a22e:	4a29      	ldr	r2, [pc, #164]	; (800a2d4 <__sflush_r+0x100>)
 800a230:	40ca      	lsrs	r2, r1
 800a232:	07d6      	lsls	r6, r2, #31
 800a234:	d528      	bpl.n	800a288 <__sflush_r+0xb4>
 800a236:	2200      	movs	r2, #0
 800a238:	6062      	str	r2, [r4, #4]
 800a23a:	6922      	ldr	r2, [r4, #16]
 800a23c:	04d9      	lsls	r1, r3, #19
 800a23e:	6022      	str	r2, [r4, #0]
 800a240:	d504      	bpl.n	800a24c <__sflush_r+0x78>
 800a242:	1c42      	adds	r2, r0, #1
 800a244:	d101      	bne.n	800a24a <__sflush_r+0x76>
 800a246:	682b      	ldr	r3, [r5, #0]
 800a248:	b903      	cbnz	r3, 800a24c <__sflush_r+0x78>
 800a24a:	6560      	str	r0, [r4, #84]	; 0x54
 800a24c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a24e:	602f      	str	r7, [r5, #0]
 800a250:	2900      	cmp	r1, #0
 800a252:	d0cb      	beq.n	800a1ec <__sflush_r+0x18>
 800a254:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a258:	4299      	cmp	r1, r3
 800a25a:	d002      	beq.n	800a262 <__sflush_r+0x8e>
 800a25c:	4628      	mov	r0, r5
 800a25e:	f000 f9d5 	bl	800a60c <_free_r>
 800a262:	2000      	movs	r0, #0
 800a264:	6360      	str	r0, [r4, #52]	; 0x34
 800a266:	e7c2      	b.n	800a1ee <__sflush_r+0x1a>
 800a268:	6a21      	ldr	r1, [r4, #32]
 800a26a:	2301      	movs	r3, #1
 800a26c:	4628      	mov	r0, r5
 800a26e:	47b0      	blx	r6
 800a270:	1c41      	adds	r1, r0, #1
 800a272:	d1c7      	bne.n	800a204 <__sflush_r+0x30>
 800a274:	682b      	ldr	r3, [r5, #0]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d0c4      	beq.n	800a204 <__sflush_r+0x30>
 800a27a:	2b1d      	cmp	r3, #29
 800a27c:	d001      	beq.n	800a282 <__sflush_r+0xae>
 800a27e:	2b16      	cmp	r3, #22
 800a280:	d101      	bne.n	800a286 <__sflush_r+0xb2>
 800a282:	602f      	str	r7, [r5, #0]
 800a284:	e7b2      	b.n	800a1ec <__sflush_r+0x18>
 800a286:	89a3      	ldrh	r3, [r4, #12]
 800a288:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a28c:	81a3      	strh	r3, [r4, #12]
 800a28e:	e7ae      	b.n	800a1ee <__sflush_r+0x1a>
 800a290:	690f      	ldr	r7, [r1, #16]
 800a292:	2f00      	cmp	r7, #0
 800a294:	d0aa      	beq.n	800a1ec <__sflush_r+0x18>
 800a296:	0793      	lsls	r3, r2, #30
 800a298:	bf18      	it	ne
 800a29a:	2300      	movne	r3, #0
 800a29c:	680e      	ldr	r6, [r1, #0]
 800a29e:	bf08      	it	eq
 800a2a0:	694b      	ldreq	r3, [r1, #20]
 800a2a2:	1bf6      	subs	r6, r6, r7
 800a2a4:	600f      	str	r7, [r1, #0]
 800a2a6:	608b      	str	r3, [r1, #8]
 800a2a8:	2e00      	cmp	r6, #0
 800a2aa:	dd9f      	ble.n	800a1ec <__sflush_r+0x18>
 800a2ac:	4633      	mov	r3, r6
 800a2ae:	463a      	mov	r2, r7
 800a2b0:	4628      	mov	r0, r5
 800a2b2:	6a21      	ldr	r1, [r4, #32]
 800a2b4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800a2b8:	47e0      	blx	ip
 800a2ba:	2800      	cmp	r0, #0
 800a2bc:	dc06      	bgt.n	800a2cc <__sflush_r+0xf8>
 800a2be:	89a3      	ldrh	r3, [r4, #12]
 800a2c0:	f04f 30ff 	mov.w	r0, #4294967295
 800a2c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2c8:	81a3      	strh	r3, [r4, #12]
 800a2ca:	e790      	b.n	800a1ee <__sflush_r+0x1a>
 800a2cc:	4407      	add	r7, r0
 800a2ce:	1a36      	subs	r6, r6, r0
 800a2d0:	e7ea      	b.n	800a2a8 <__sflush_r+0xd4>
 800a2d2:	bf00      	nop
 800a2d4:	20400001 	.word	0x20400001

0800a2d8 <_fflush_r>:
 800a2d8:	b538      	push	{r3, r4, r5, lr}
 800a2da:	690b      	ldr	r3, [r1, #16]
 800a2dc:	4605      	mov	r5, r0
 800a2de:	460c      	mov	r4, r1
 800a2e0:	b913      	cbnz	r3, 800a2e8 <_fflush_r+0x10>
 800a2e2:	2500      	movs	r5, #0
 800a2e4:	4628      	mov	r0, r5
 800a2e6:	bd38      	pop	{r3, r4, r5, pc}
 800a2e8:	b118      	cbz	r0, 800a2f2 <_fflush_r+0x1a>
 800a2ea:	6983      	ldr	r3, [r0, #24]
 800a2ec:	b90b      	cbnz	r3, 800a2f2 <_fflush_r+0x1a>
 800a2ee:	f000 f887 	bl	800a400 <__sinit>
 800a2f2:	4b14      	ldr	r3, [pc, #80]	; (800a344 <_fflush_r+0x6c>)
 800a2f4:	429c      	cmp	r4, r3
 800a2f6:	d11b      	bne.n	800a330 <_fflush_r+0x58>
 800a2f8:	686c      	ldr	r4, [r5, #4]
 800a2fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d0ef      	beq.n	800a2e2 <_fflush_r+0xa>
 800a302:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a304:	07d0      	lsls	r0, r2, #31
 800a306:	d404      	bmi.n	800a312 <_fflush_r+0x3a>
 800a308:	0599      	lsls	r1, r3, #22
 800a30a:	d402      	bmi.n	800a312 <_fflush_r+0x3a>
 800a30c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a30e:	f000 f915 	bl	800a53c <__retarget_lock_acquire_recursive>
 800a312:	4628      	mov	r0, r5
 800a314:	4621      	mov	r1, r4
 800a316:	f7ff ff5d 	bl	800a1d4 <__sflush_r>
 800a31a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a31c:	4605      	mov	r5, r0
 800a31e:	07da      	lsls	r2, r3, #31
 800a320:	d4e0      	bmi.n	800a2e4 <_fflush_r+0xc>
 800a322:	89a3      	ldrh	r3, [r4, #12]
 800a324:	059b      	lsls	r3, r3, #22
 800a326:	d4dd      	bmi.n	800a2e4 <_fflush_r+0xc>
 800a328:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a32a:	f000 f908 	bl	800a53e <__retarget_lock_release_recursive>
 800a32e:	e7d9      	b.n	800a2e4 <_fflush_r+0xc>
 800a330:	4b05      	ldr	r3, [pc, #20]	; (800a348 <_fflush_r+0x70>)
 800a332:	429c      	cmp	r4, r3
 800a334:	d101      	bne.n	800a33a <_fflush_r+0x62>
 800a336:	68ac      	ldr	r4, [r5, #8]
 800a338:	e7df      	b.n	800a2fa <_fflush_r+0x22>
 800a33a:	4b04      	ldr	r3, [pc, #16]	; (800a34c <_fflush_r+0x74>)
 800a33c:	429c      	cmp	r4, r3
 800a33e:	bf08      	it	eq
 800a340:	68ec      	ldreq	r4, [r5, #12]
 800a342:	e7da      	b.n	800a2fa <_fflush_r+0x22>
 800a344:	0800b29c 	.word	0x0800b29c
 800a348:	0800b2bc 	.word	0x0800b2bc
 800a34c:	0800b27c 	.word	0x0800b27c

0800a350 <std>:
 800a350:	2300      	movs	r3, #0
 800a352:	b510      	push	{r4, lr}
 800a354:	4604      	mov	r4, r0
 800a356:	e9c0 3300 	strd	r3, r3, [r0]
 800a35a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a35e:	6083      	str	r3, [r0, #8]
 800a360:	8181      	strh	r1, [r0, #12]
 800a362:	6643      	str	r3, [r0, #100]	; 0x64
 800a364:	81c2      	strh	r2, [r0, #14]
 800a366:	6183      	str	r3, [r0, #24]
 800a368:	4619      	mov	r1, r3
 800a36a:	2208      	movs	r2, #8
 800a36c:	305c      	adds	r0, #92	; 0x5c
 800a36e:	f7ff fddb 	bl	8009f28 <memset>
 800a372:	4b05      	ldr	r3, [pc, #20]	; (800a388 <std+0x38>)
 800a374:	6224      	str	r4, [r4, #32]
 800a376:	6263      	str	r3, [r4, #36]	; 0x24
 800a378:	4b04      	ldr	r3, [pc, #16]	; (800a38c <std+0x3c>)
 800a37a:	62a3      	str	r3, [r4, #40]	; 0x28
 800a37c:	4b04      	ldr	r3, [pc, #16]	; (800a390 <std+0x40>)
 800a37e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a380:	4b04      	ldr	r3, [pc, #16]	; (800a394 <std+0x44>)
 800a382:	6323      	str	r3, [r4, #48]	; 0x30
 800a384:	bd10      	pop	{r4, pc}
 800a386:	bf00      	nop
 800a388:	0800adc1 	.word	0x0800adc1
 800a38c:	0800ade3 	.word	0x0800ade3
 800a390:	0800ae1b 	.word	0x0800ae1b
 800a394:	0800ae3f 	.word	0x0800ae3f

0800a398 <_cleanup_r>:
 800a398:	4901      	ldr	r1, [pc, #4]	; (800a3a0 <_cleanup_r+0x8>)
 800a39a:	f000 b8af 	b.w	800a4fc <_fwalk_reent>
 800a39e:	bf00      	nop
 800a3a0:	0800a2d9 	.word	0x0800a2d9

0800a3a4 <__sfmoreglue>:
 800a3a4:	2268      	movs	r2, #104	; 0x68
 800a3a6:	b570      	push	{r4, r5, r6, lr}
 800a3a8:	1e4d      	subs	r5, r1, #1
 800a3aa:	4355      	muls	r5, r2
 800a3ac:	460e      	mov	r6, r1
 800a3ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a3b2:	f000 f993 	bl	800a6dc <_malloc_r>
 800a3b6:	4604      	mov	r4, r0
 800a3b8:	b140      	cbz	r0, 800a3cc <__sfmoreglue+0x28>
 800a3ba:	2100      	movs	r1, #0
 800a3bc:	e9c0 1600 	strd	r1, r6, [r0]
 800a3c0:	300c      	adds	r0, #12
 800a3c2:	60a0      	str	r0, [r4, #8]
 800a3c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a3c8:	f7ff fdae 	bl	8009f28 <memset>
 800a3cc:	4620      	mov	r0, r4
 800a3ce:	bd70      	pop	{r4, r5, r6, pc}

0800a3d0 <__sfp_lock_acquire>:
 800a3d0:	4801      	ldr	r0, [pc, #4]	; (800a3d8 <__sfp_lock_acquire+0x8>)
 800a3d2:	f000 b8b3 	b.w	800a53c <__retarget_lock_acquire_recursive>
 800a3d6:	bf00      	nop
 800a3d8:	2000435d 	.word	0x2000435d

0800a3dc <__sfp_lock_release>:
 800a3dc:	4801      	ldr	r0, [pc, #4]	; (800a3e4 <__sfp_lock_release+0x8>)
 800a3de:	f000 b8ae 	b.w	800a53e <__retarget_lock_release_recursive>
 800a3e2:	bf00      	nop
 800a3e4:	2000435d 	.word	0x2000435d

0800a3e8 <__sinit_lock_acquire>:
 800a3e8:	4801      	ldr	r0, [pc, #4]	; (800a3f0 <__sinit_lock_acquire+0x8>)
 800a3ea:	f000 b8a7 	b.w	800a53c <__retarget_lock_acquire_recursive>
 800a3ee:	bf00      	nop
 800a3f0:	2000435e 	.word	0x2000435e

0800a3f4 <__sinit_lock_release>:
 800a3f4:	4801      	ldr	r0, [pc, #4]	; (800a3fc <__sinit_lock_release+0x8>)
 800a3f6:	f000 b8a2 	b.w	800a53e <__retarget_lock_release_recursive>
 800a3fa:	bf00      	nop
 800a3fc:	2000435e 	.word	0x2000435e

0800a400 <__sinit>:
 800a400:	b510      	push	{r4, lr}
 800a402:	4604      	mov	r4, r0
 800a404:	f7ff fff0 	bl	800a3e8 <__sinit_lock_acquire>
 800a408:	69a3      	ldr	r3, [r4, #24]
 800a40a:	b11b      	cbz	r3, 800a414 <__sinit+0x14>
 800a40c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a410:	f7ff bff0 	b.w	800a3f4 <__sinit_lock_release>
 800a414:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a418:	6523      	str	r3, [r4, #80]	; 0x50
 800a41a:	4b13      	ldr	r3, [pc, #76]	; (800a468 <__sinit+0x68>)
 800a41c:	4a13      	ldr	r2, [pc, #76]	; (800a46c <__sinit+0x6c>)
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	62a2      	str	r2, [r4, #40]	; 0x28
 800a422:	42a3      	cmp	r3, r4
 800a424:	bf08      	it	eq
 800a426:	2301      	moveq	r3, #1
 800a428:	4620      	mov	r0, r4
 800a42a:	bf08      	it	eq
 800a42c:	61a3      	streq	r3, [r4, #24]
 800a42e:	f000 f81f 	bl	800a470 <__sfp>
 800a432:	6060      	str	r0, [r4, #4]
 800a434:	4620      	mov	r0, r4
 800a436:	f000 f81b 	bl	800a470 <__sfp>
 800a43a:	60a0      	str	r0, [r4, #8]
 800a43c:	4620      	mov	r0, r4
 800a43e:	f000 f817 	bl	800a470 <__sfp>
 800a442:	2200      	movs	r2, #0
 800a444:	2104      	movs	r1, #4
 800a446:	60e0      	str	r0, [r4, #12]
 800a448:	6860      	ldr	r0, [r4, #4]
 800a44a:	f7ff ff81 	bl	800a350 <std>
 800a44e:	2201      	movs	r2, #1
 800a450:	2109      	movs	r1, #9
 800a452:	68a0      	ldr	r0, [r4, #8]
 800a454:	f7ff ff7c 	bl	800a350 <std>
 800a458:	2202      	movs	r2, #2
 800a45a:	2112      	movs	r1, #18
 800a45c:	68e0      	ldr	r0, [r4, #12]
 800a45e:	f7ff ff77 	bl	800a350 <std>
 800a462:	2301      	movs	r3, #1
 800a464:	61a3      	str	r3, [r4, #24]
 800a466:	e7d1      	b.n	800a40c <__sinit+0xc>
 800a468:	0800b278 	.word	0x0800b278
 800a46c:	0800a399 	.word	0x0800a399

0800a470 <__sfp>:
 800a470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a472:	4607      	mov	r7, r0
 800a474:	f7ff ffac 	bl	800a3d0 <__sfp_lock_acquire>
 800a478:	4b1e      	ldr	r3, [pc, #120]	; (800a4f4 <__sfp+0x84>)
 800a47a:	681e      	ldr	r6, [r3, #0]
 800a47c:	69b3      	ldr	r3, [r6, #24]
 800a47e:	b913      	cbnz	r3, 800a486 <__sfp+0x16>
 800a480:	4630      	mov	r0, r6
 800a482:	f7ff ffbd 	bl	800a400 <__sinit>
 800a486:	3648      	adds	r6, #72	; 0x48
 800a488:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a48c:	3b01      	subs	r3, #1
 800a48e:	d503      	bpl.n	800a498 <__sfp+0x28>
 800a490:	6833      	ldr	r3, [r6, #0]
 800a492:	b30b      	cbz	r3, 800a4d8 <__sfp+0x68>
 800a494:	6836      	ldr	r6, [r6, #0]
 800a496:	e7f7      	b.n	800a488 <__sfp+0x18>
 800a498:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a49c:	b9d5      	cbnz	r5, 800a4d4 <__sfp+0x64>
 800a49e:	4b16      	ldr	r3, [pc, #88]	; (800a4f8 <__sfp+0x88>)
 800a4a0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a4a4:	60e3      	str	r3, [r4, #12]
 800a4a6:	6665      	str	r5, [r4, #100]	; 0x64
 800a4a8:	f000 f847 	bl	800a53a <__retarget_lock_init_recursive>
 800a4ac:	f7ff ff96 	bl	800a3dc <__sfp_lock_release>
 800a4b0:	2208      	movs	r2, #8
 800a4b2:	4629      	mov	r1, r5
 800a4b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a4b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a4bc:	6025      	str	r5, [r4, #0]
 800a4be:	61a5      	str	r5, [r4, #24]
 800a4c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a4c4:	f7ff fd30 	bl	8009f28 <memset>
 800a4c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a4cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a4d0:	4620      	mov	r0, r4
 800a4d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4d4:	3468      	adds	r4, #104	; 0x68
 800a4d6:	e7d9      	b.n	800a48c <__sfp+0x1c>
 800a4d8:	2104      	movs	r1, #4
 800a4da:	4638      	mov	r0, r7
 800a4dc:	f7ff ff62 	bl	800a3a4 <__sfmoreglue>
 800a4e0:	4604      	mov	r4, r0
 800a4e2:	6030      	str	r0, [r6, #0]
 800a4e4:	2800      	cmp	r0, #0
 800a4e6:	d1d5      	bne.n	800a494 <__sfp+0x24>
 800a4e8:	f7ff ff78 	bl	800a3dc <__sfp_lock_release>
 800a4ec:	230c      	movs	r3, #12
 800a4ee:	603b      	str	r3, [r7, #0]
 800a4f0:	e7ee      	b.n	800a4d0 <__sfp+0x60>
 800a4f2:	bf00      	nop
 800a4f4:	0800b278 	.word	0x0800b278
 800a4f8:	ffff0001 	.word	0xffff0001

0800a4fc <_fwalk_reent>:
 800a4fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a500:	4606      	mov	r6, r0
 800a502:	4688      	mov	r8, r1
 800a504:	2700      	movs	r7, #0
 800a506:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a50a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a50e:	f1b9 0901 	subs.w	r9, r9, #1
 800a512:	d505      	bpl.n	800a520 <_fwalk_reent+0x24>
 800a514:	6824      	ldr	r4, [r4, #0]
 800a516:	2c00      	cmp	r4, #0
 800a518:	d1f7      	bne.n	800a50a <_fwalk_reent+0xe>
 800a51a:	4638      	mov	r0, r7
 800a51c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a520:	89ab      	ldrh	r3, [r5, #12]
 800a522:	2b01      	cmp	r3, #1
 800a524:	d907      	bls.n	800a536 <_fwalk_reent+0x3a>
 800a526:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a52a:	3301      	adds	r3, #1
 800a52c:	d003      	beq.n	800a536 <_fwalk_reent+0x3a>
 800a52e:	4629      	mov	r1, r5
 800a530:	4630      	mov	r0, r6
 800a532:	47c0      	blx	r8
 800a534:	4307      	orrs	r7, r0
 800a536:	3568      	adds	r5, #104	; 0x68
 800a538:	e7e9      	b.n	800a50e <_fwalk_reent+0x12>

0800a53a <__retarget_lock_init_recursive>:
 800a53a:	4770      	bx	lr

0800a53c <__retarget_lock_acquire_recursive>:
 800a53c:	4770      	bx	lr

0800a53e <__retarget_lock_release_recursive>:
 800a53e:	4770      	bx	lr

0800a540 <__swhatbuf_r>:
 800a540:	b570      	push	{r4, r5, r6, lr}
 800a542:	460e      	mov	r6, r1
 800a544:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a548:	4614      	mov	r4, r2
 800a54a:	2900      	cmp	r1, #0
 800a54c:	461d      	mov	r5, r3
 800a54e:	b096      	sub	sp, #88	; 0x58
 800a550:	da08      	bge.n	800a564 <__swhatbuf_r+0x24>
 800a552:	2200      	movs	r2, #0
 800a554:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a558:	602a      	str	r2, [r5, #0]
 800a55a:	061a      	lsls	r2, r3, #24
 800a55c:	d410      	bmi.n	800a580 <__swhatbuf_r+0x40>
 800a55e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a562:	e00e      	b.n	800a582 <__swhatbuf_r+0x42>
 800a564:	466a      	mov	r2, sp
 800a566:	f000 fc91 	bl	800ae8c <_fstat_r>
 800a56a:	2800      	cmp	r0, #0
 800a56c:	dbf1      	blt.n	800a552 <__swhatbuf_r+0x12>
 800a56e:	9a01      	ldr	r2, [sp, #4]
 800a570:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a574:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a578:	425a      	negs	r2, r3
 800a57a:	415a      	adcs	r2, r3
 800a57c:	602a      	str	r2, [r5, #0]
 800a57e:	e7ee      	b.n	800a55e <__swhatbuf_r+0x1e>
 800a580:	2340      	movs	r3, #64	; 0x40
 800a582:	2000      	movs	r0, #0
 800a584:	6023      	str	r3, [r4, #0]
 800a586:	b016      	add	sp, #88	; 0x58
 800a588:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a58c <__smakebuf_r>:
 800a58c:	898b      	ldrh	r3, [r1, #12]
 800a58e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a590:	079d      	lsls	r5, r3, #30
 800a592:	4606      	mov	r6, r0
 800a594:	460c      	mov	r4, r1
 800a596:	d507      	bpl.n	800a5a8 <__smakebuf_r+0x1c>
 800a598:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a59c:	6023      	str	r3, [r4, #0]
 800a59e:	6123      	str	r3, [r4, #16]
 800a5a0:	2301      	movs	r3, #1
 800a5a2:	6163      	str	r3, [r4, #20]
 800a5a4:	b002      	add	sp, #8
 800a5a6:	bd70      	pop	{r4, r5, r6, pc}
 800a5a8:	466a      	mov	r2, sp
 800a5aa:	ab01      	add	r3, sp, #4
 800a5ac:	f7ff ffc8 	bl	800a540 <__swhatbuf_r>
 800a5b0:	9900      	ldr	r1, [sp, #0]
 800a5b2:	4605      	mov	r5, r0
 800a5b4:	4630      	mov	r0, r6
 800a5b6:	f000 f891 	bl	800a6dc <_malloc_r>
 800a5ba:	b948      	cbnz	r0, 800a5d0 <__smakebuf_r+0x44>
 800a5bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5c0:	059a      	lsls	r2, r3, #22
 800a5c2:	d4ef      	bmi.n	800a5a4 <__smakebuf_r+0x18>
 800a5c4:	f023 0303 	bic.w	r3, r3, #3
 800a5c8:	f043 0302 	orr.w	r3, r3, #2
 800a5cc:	81a3      	strh	r3, [r4, #12]
 800a5ce:	e7e3      	b.n	800a598 <__smakebuf_r+0xc>
 800a5d0:	4b0d      	ldr	r3, [pc, #52]	; (800a608 <__smakebuf_r+0x7c>)
 800a5d2:	62b3      	str	r3, [r6, #40]	; 0x28
 800a5d4:	89a3      	ldrh	r3, [r4, #12]
 800a5d6:	6020      	str	r0, [r4, #0]
 800a5d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5dc:	81a3      	strh	r3, [r4, #12]
 800a5de:	9b00      	ldr	r3, [sp, #0]
 800a5e0:	6120      	str	r0, [r4, #16]
 800a5e2:	6163      	str	r3, [r4, #20]
 800a5e4:	9b01      	ldr	r3, [sp, #4]
 800a5e6:	b15b      	cbz	r3, 800a600 <__smakebuf_r+0x74>
 800a5e8:	4630      	mov	r0, r6
 800a5ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a5ee:	f000 fc5f 	bl	800aeb0 <_isatty_r>
 800a5f2:	b128      	cbz	r0, 800a600 <__smakebuf_r+0x74>
 800a5f4:	89a3      	ldrh	r3, [r4, #12]
 800a5f6:	f023 0303 	bic.w	r3, r3, #3
 800a5fa:	f043 0301 	orr.w	r3, r3, #1
 800a5fe:	81a3      	strh	r3, [r4, #12]
 800a600:	89a0      	ldrh	r0, [r4, #12]
 800a602:	4305      	orrs	r5, r0
 800a604:	81a5      	strh	r5, [r4, #12]
 800a606:	e7cd      	b.n	800a5a4 <__smakebuf_r+0x18>
 800a608:	0800a399 	.word	0x0800a399

0800a60c <_free_r>:
 800a60c:	b538      	push	{r3, r4, r5, lr}
 800a60e:	4605      	mov	r5, r0
 800a610:	2900      	cmp	r1, #0
 800a612:	d040      	beq.n	800a696 <_free_r+0x8a>
 800a614:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a618:	1f0c      	subs	r4, r1, #4
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	bfb8      	it	lt
 800a61e:	18e4      	addlt	r4, r4, r3
 800a620:	f000 fc76 	bl	800af10 <__malloc_lock>
 800a624:	4a1c      	ldr	r2, [pc, #112]	; (800a698 <_free_r+0x8c>)
 800a626:	6813      	ldr	r3, [r2, #0]
 800a628:	b933      	cbnz	r3, 800a638 <_free_r+0x2c>
 800a62a:	6063      	str	r3, [r4, #4]
 800a62c:	6014      	str	r4, [r2, #0]
 800a62e:	4628      	mov	r0, r5
 800a630:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a634:	f000 bc72 	b.w	800af1c <__malloc_unlock>
 800a638:	42a3      	cmp	r3, r4
 800a63a:	d908      	bls.n	800a64e <_free_r+0x42>
 800a63c:	6820      	ldr	r0, [r4, #0]
 800a63e:	1821      	adds	r1, r4, r0
 800a640:	428b      	cmp	r3, r1
 800a642:	bf01      	itttt	eq
 800a644:	6819      	ldreq	r1, [r3, #0]
 800a646:	685b      	ldreq	r3, [r3, #4]
 800a648:	1809      	addeq	r1, r1, r0
 800a64a:	6021      	streq	r1, [r4, #0]
 800a64c:	e7ed      	b.n	800a62a <_free_r+0x1e>
 800a64e:	461a      	mov	r2, r3
 800a650:	685b      	ldr	r3, [r3, #4]
 800a652:	b10b      	cbz	r3, 800a658 <_free_r+0x4c>
 800a654:	42a3      	cmp	r3, r4
 800a656:	d9fa      	bls.n	800a64e <_free_r+0x42>
 800a658:	6811      	ldr	r1, [r2, #0]
 800a65a:	1850      	adds	r0, r2, r1
 800a65c:	42a0      	cmp	r0, r4
 800a65e:	d10b      	bne.n	800a678 <_free_r+0x6c>
 800a660:	6820      	ldr	r0, [r4, #0]
 800a662:	4401      	add	r1, r0
 800a664:	1850      	adds	r0, r2, r1
 800a666:	4283      	cmp	r3, r0
 800a668:	6011      	str	r1, [r2, #0]
 800a66a:	d1e0      	bne.n	800a62e <_free_r+0x22>
 800a66c:	6818      	ldr	r0, [r3, #0]
 800a66e:	685b      	ldr	r3, [r3, #4]
 800a670:	4401      	add	r1, r0
 800a672:	6011      	str	r1, [r2, #0]
 800a674:	6053      	str	r3, [r2, #4]
 800a676:	e7da      	b.n	800a62e <_free_r+0x22>
 800a678:	d902      	bls.n	800a680 <_free_r+0x74>
 800a67a:	230c      	movs	r3, #12
 800a67c:	602b      	str	r3, [r5, #0]
 800a67e:	e7d6      	b.n	800a62e <_free_r+0x22>
 800a680:	6820      	ldr	r0, [r4, #0]
 800a682:	1821      	adds	r1, r4, r0
 800a684:	428b      	cmp	r3, r1
 800a686:	bf01      	itttt	eq
 800a688:	6819      	ldreq	r1, [r3, #0]
 800a68a:	685b      	ldreq	r3, [r3, #4]
 800a68c:	1809      	addeq	r1, r1, r0
 800a68e:	6021      	streq	r1, [r4, #0]
 800a690:	6063      	str	r3, [r4, #4]
 800a692:	6054      	str	r4, [r2, #4]
 800a694:	e7cb      	b.n	800a62e <_free_r+0x22>
 800a696:	bd38      	pop	{r3, r4, r5, pc}
 800a698:	20004360 	.word	0x20004360

0800a69c <sbrk_aligned>:
 800a69c:	b570      	push	{r4, r5, r6, lr}
 800a69e:	4e0e      	ldr	r6, [pc, #56]	; (800a6d8 <sbrk_aligned+0x3c>)
 800a6a0:	460c      	mov	r4, r1
 800a6a2:	6831      	ldr	r1, [r6, #0]
 800a6a4:	4605      	mov	r5, r0
 800a6a6:	b911      	cbnz	r1, 800a6ae <sbrk_aligned+0x12>
 800a6a8:	f000 fb7a 	bl	800ada0 <_sbrk_r>
 800a6ac:	6030      	str	r0, [r6, #0]
 800a6ae:	4621      	mov	r1, r4
 800a6b0:	4628      	mov	r0, r5
 800a6b2:	f000 fb75 	bl	800ada0 <_sbrk_r>
 800a6b6:	1c43      	adds	r3, r0, #1
 800a6b8:	d00a      	beq.n	800a6d0 <sbrk_aligned+0x34>
 800a6ba:	1cc4      	adds	r4, r0, #3
 800a6bc:	f024 0403 	bic.w	r4, r4, #3
 800a6c0:	42a0      	cmp	r0, r4
 800a6c2:	d007      	beq.n	800a6d4 <sbrk_aligned+0x38>
 800a6c4:	1a21      	subs	r1, r4, r0
 800a6c6:	4628      	mov	r0, r5
 800a6c8:	f000 fb6a 	bl	800ada0 <_sbrk_r>
 800a6cc:	3001      	adds	r0, #1
 800a6ce:	d101      	bne.n	800a6d4 <sbrk_aligned+0x38>
 800a6d0:	f04f 34ff 	mov.w	r4, #4294967295
 800a6d4:	4620      	mov	r0, r4
 800a6d6:	bd70      	pop	{r4, r5, r6, pc}
 800a6d8:	20004364 	.word	0x20004364

0800a6dc <_malloc_r>:
 800a6dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6e0:	1ccd      	adds	r5, r1, #3
 800a6e2:	f025 0503 	bic.w	r5, r5, #3
 800a6e6:	3508      	adds	r5, #8
 800a6e8:	2d0c      	cmp	r5, #12
 800a6ea:	bf38      	it	cc
 800a6ec:	250c      	movcc	r5, #12
 800a6ee:	2d00      	cmp	r5, #0
 800a6f0:	4607      	mov	r7, r0
 800a6f2:	db01      	blt.n	800a6f8 <_malloc_r+0x1c>
 800a6f4:	42a9      	cmp	r1, r5
 800a6f6:	d905      	bls.n	800a704 <_malloc_r+0x28>
 800a6f8:	230c      	movs	r3, #12
 800a6fa:	2600      	movs	r6, #0
 800a6fc:	603b      	str	r3, [r7, #0]
 800a6fe:	4630      	mov	r0, r6
 800a700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a704:	4e2e      	ldr	r6, [pc, #184]	; (800a7c0 <_malloc_r+0xe4>)
 800a706:	f000 fc03 	bl	800af10 <__malloc_lock>
 800a70a:	6833      	ldr	r3, [r6, #0]
 800a70c:	461c      	mov	r4, r3
 800a70e:	bb34      	cbnz	r4, 800a75e <_malloc_r+0x82>
 800a710:	4629      	mov	r1, r5
 800a712:	4638      	mov	r0, r7
 800a714:	f7ff ffc2 	bl	800a69c <sbrk_aligned>
 800a718:	1c43      	adds	r3, r0, #1
 800a71a:	4604      	mov	r4, r0
 800a71c:	d14d      	bne.n	800a7ba <_malloc_r+0xde>
 800a71e:	6834      	ldr	r4, [r6, #0]
 800a720:	4626      	mov	r6, r4
 800a722:	2e00      	cmp	r6, #0
 800a724:	d140      	bne.n	800a7a8 <_malloc_r+0xcc>
 800a726:	6823      	ldr	r3, [r4, #0]
 800a728:	4631      	mov	r1, r6
 800a72a:	4638      	mov	r0, r7
 800a72c:	eb04 0803 	add.w	r8, r4, r3
 800a730:	f000 fb36 	bl	800ada0 <_sbrk_r>
 800a734:	4580      	cmp	r8, r0
 800a736:	d13a      	bne.n	800a7ae <_malloc_r+0xd2>
 800a738:	6821      	ldr	r1, [r4, #0]
 800a73a:	3503      	adds	r5, #3
 800a73c:	1a6d      	subs	r5, r5, r1
 800a73e:	f025 0503 	bic.w	r5, r5, #3
 800a742:	3508      	adds	r5, #8
 800a744:	2d0c      	cmp	r5, #12
 800a746:	bf38      	it	cc
 800a748:	250c      	movcc	r5, #12
 800a74a:	4638      	mov	r0, r7
 800a74c:	4629      	mov	r1, r5
 800a74e:	f7ff ffa5 	bl	800a69c <sbrk_aligned>
 800a752:	3001      	adds	r0, #1
 800a754:	d02b      	beq.n	800a7ae <_malloc_r+0xd2>
 800a756:	6823      	ldr	r3, [r4, #0]
 800a758:	442b      	add	r3, r5
 800a75a:	6023      	str	r3, [r4, #0]
 800a75c:	e00e      	b.n	800a77c <_malloc_r+0xa0>
 800a75e:	6822      	ldr	r2, [r4, #0]
 800a760:	1b52      	subs	r2, r2, r5
 800a762:	d41e      	bmi.n	800a7a2 <_malloc_r+0xc6>
 800a764:	2a0b      	cmp	r2, #11
 800a766:	d916      	bls.n	800a796 <_malloc_r+0xba>
 800a768:	1961      	adds	r1, r4, r5
 800a76a:	42a3      	cmp	r3, r4
 800a76c:	6025      	str	r5, [r4, #0]
 800a76e:	bf18      	it	ne
 800a770:	6059      	strne	r1, [r3, #4]
 800a772:	6863      	ldr	r3, [r4, #4]
 800a774:	bf08      	it	eq
 800a776:	6031      	streq	r1, [r6, #0]
 800a778:	5162      	str	r2, [r4, r5]
 800a77a:	604b      	str	r3, [r1, #4]
 800a77c:	4638      	mov	r0, r7
 800a77e:	f104 060b 	add.w	r6, r4, #11
 800a782:	f000 fbcb 	bl	800af1c <__malloc_unlock>
 800a786:	f026 0607 	bic.w	r6, r6, #7
 800a78a:	1d23      	adds	r3, r4, #4
 800a78c:	1af2      	subs	r2, r6, r3
 800a78e:	d0b6      	beq.n	800a6fe <_malloc_r+0x22>
 800a790:	1b9b      	subs	r3, r3, r6
 800a792:	50a3      	str	r3, [r4, r2]
 800a794:	e7b3      	b.n	800a6fe <_malloc_r+0x22>
 800a796:	6862      	ldr	r2, [r4, #4]
 800a798:	42a3      	cmp	r3, r4
 800a79a:	bf0c      	ite	eq
 800a79c:	6032      	streq	r2, [r6, #0]
 800a79e:	605a      	strne	r2, [r3, #4]
 800a7a0:	e7ec      	b.n	800a77c <_malloc_r+0xa0>
 800a7a2:	4623      	mov	r3, r4
 800a7a4:	6864      	ldr	r4, [r4, #4]
 800a7a6:	e7b2      	b.n	800a70e <_malloc_r+0x32>
 800a7a8:	4634      	mov	r4, r6
 800a7aa:	6876      	ldr	r6, [r6, #4]
 800a7ac:	e7b9      	b.n	800a722 <_malloc_r+0x46>
 800a7ae:	230c      	movs	r3, #12
 800a7b0:	4638      	mov	r0, r7
 800a7b2:	603b      	str	r3, [r7, #0]
 800a7b4:	f000 fbb2 	bl	800af1c <__malloc_unlock>
 800a7b8:	e7a1      	b.n	800a6fe <_malloc_r+0x22>
 800a7ba:	6025      	str	r5, [r4, #0]
 800a7bc:	e7de      	b.n	800a77c <_malloc_r+0xa0>
 800a7be:	bf00      	nop
 800a7c0:	20004360 	.word	0x20004360

0800a7c4 <__sfputc_r>:
 800a7c4:	6893      	ldr	r3, [r2, #8]
 800a7c6:	b410      	push	{r4}
 800a7c8:	3b01      	subs	r3, #1
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	6093      	str	r3, [r2, #8]
 800a7ce:	da07      	bge.n	800a7e0 <__sfputc_r+0x1c>
 800a7d0:	6994      	ldr	r4, [r2, #24]
 800a7d2:	42a3      	cmp	r3, r4
 800a7d4:	db01      	blt.n	800a7da <__sfputc_r+0x16>
 800a7d6:	290a      	cmp	r1, #10
 800a7d8:	d102      	bne.n	800a7e0 <__sfputc_r+0x1c>
 800a7da:	bc10      	pop	{r4}
 800a7dc:	f7ff bc3a 	b.w	800a054 <__swbuf_r>
 800a7e0:	6813      	ldr	r3, [r2, #0]
 800a7e2:	1c58      	adds	r0, r3, #1
 800a7e4:	6010      	str	r0, [r2, #0]
 800a7e6:	7019      	strb	r1, [r3, #0]
 800a7e8:	4608      	mov	r0, r1
 800a7ea:	bc10      	pop	{r4}
 800a7ec:	4770      	bx	lr

0800a7ee <__sfputs_r>:
 800a7ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7f0:	4606      	mov	r6, r0
 800a7f2:	460f      	mov	r7, r1
 800a7f4:	4614      	mov	r4, r2
 800a7f6:	18d5      	adds	r5, r2, r3
 800a7f8:	42ac      	cmp	r4, r5
 800a7fa:	d101      	bne.n	800a800 <__sfputs_r+0x12>
 800a7fc:	2000      	movs	r0, #0
 800a7fe:	e007      	b.n	800a810 <__sfputs_r+0x22>
 800a800:	463a      	mov	r2, r7
 800a802:	4630      	mov	r0, r6
 800a804:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a808:	f7ff ffdc 	bl	800a7c4 <__sfputc_r>
 800a80c:	1c43      	adds	r3, r0, #1
 800a80e:	d1f3      	bne.n	800a7f8 <__sfputs_r+0xa>
 800a810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a814 <_vfiprintf_r>:
 800a814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a818:	460d      	mov	r5, r1
 800a81a:	4614      	mov	r4, r2
 800a81c:	4698      	mov	r8, r3
 800a81e:	4606      	mov	r6, r0
 800a820:	b09d      	sub	sp, #116	; 0x74
 800a822:	b118      	cbz	r0, 800a82c <_vfiprintf_r+0x18>
 800a824:	6983      	ldr	r3, [r0, #24]
 800a826:	b90b      	cbnz	r3, 800a82c <_vfiprintf_r+0x18>
 800a828:	f7ff fdea 	bl	800a400 <__sinit>
 800a82c:	4b89      	ldr	r3, [pc, #548]	; (800aa54 <_vfiprintf_r+0x240>)
 800a82e:	429d      	cmp	r5, r3
 800a830:	d11b      	bne.n	800a86a <_vfiprintf_r+0x56>
 800a832:	6875      	ldr	r5, [r6, #4]
 800a834:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a836:	07d9      	lsls	r1, r3, #31
 800a838:	d405      	bmi.n	800a846 <_vfiprintf_r+0x32>
 800a83a:	89ab      	ldrh	r3, [r5, #12]
 800a83c:	059a      	lsls	r2, r3, #22
 800a83e:	d402      	bmi.n	800a846 <_vfiprintf_r+0x32>
 800a840:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a842:	f7ff fe7b 	bl	800a53c <__retarget_lock_acquire_recursive>
 800a846:	89ab      	ldrh	r3, [r5, #12]
 800a848:	071b      	lsls	r3, r3, #28
 800a84a:	d501      	bpl.n	800a850 <_vfiprintf_r+0x3c>
 800a84c:	692b      	ldr	r3, [r5, #16]
 800a84e:	b9eb      	cbnz	r3, 800a88c <_vfiprintf_r+0x78>
 800a850:	4629      	mov	r1, r5
 800a852:	4630      	mov	r0, r6
 800a854:	f7ff fc50 	bl	800a0f8 <__swsetup_r>
 800a858:	b1c0      	cbz	r0, 800a88c <_vfiprintf_r+0x78>
 800a85a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a85c:	07dc      	lsls	r4, r3, #31
 800a85e:	d50e      	bpl.n	800a87e <_vfiprintf_r+0x6a>
 800a860:	f04f 30ff 	mov.w	r0, #4294967295
 800a864:	b01d      	add	sp, #116	; 0x74
 800a866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a86a:	4b7b      	ldr	r3, [pc, #492]	; (800aa58 <_vfiprintf_r+0x244>)
 800a86c:	429d      	cmp	r5, r3
 800a86e:	d101      	bne.n	800a874 <_vfiprintf_r+0x60>
 800a870:	68b5      	ldr	r5, [r6, #8]
 800a872:	e7df      	b.n	800a834 <_vfiprintf_r+0x20>
 800a874:	4b79      	ldr	r3, [pc, #484]	; (800aa5c <_vfiprintf_r+0x248>)
 800a876:	429d      	cmp	r5, r3
 800a878:	bf08      	it	eq
 800a87a:	68f5      	ldreq	r5, [r6, #12]
 800a87c:	e7da      	b.n	800a834 <_vfiprintf_r+0x20>
 800a87e:	89ab      	ldrh	r3, [r5, #12]
 800a880:	0598      	lsls	r0, r3, #22
 800a882:	d4ed      	bmi.n	800a860 <_vfiprintf_r+0x4c>
 800a884:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a886:	f7ff fe5a 	bl	800a53e <__retarget_lock_release_recursive>
 800a88a:	e7e9      	b.n	800a860 <_vfiprintf_r+0x4c>
 800a88c:	2300      	movs	r3, #0
 800a88e:	9309      	str	r3, [sp, #36]	; 0x24
 800a890:	2320      	movs	r3, #32
 800a892:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a896:	2330      	movs	r3, #48	; 0x30
 800a898:	f04f 0901 	mov.w	r9, #1
 800a89c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a8a0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800aa60 <_vfiprintf_r+0x24c>
 800a8a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a8a8:	4623      	mov	r3, r4
 800a8aa:	469a      	mov	sl, r3
 800a8ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a8b0:	b10a      	cbz	r2, 800a8b6 <_vfiprintf_r+0xa2>
 800a8b2:	2a25      	cmp	r2, #37	; 0x25
 800a8b4:	d1f9      	bne.n	800a8aa <_vfiprintf_r+0x96>
 800a8b6:	ebba 0b04 	subs.w	fp, sl, r4
 800a8ba:	d00b      	beq.n	800a8d4 <_vfiprintf_r+0xc0>
 800a8bc:	465b      	mov	r3, fp
 800a8be:	4622      	mov	r2, r4
 800a8c0:	4629      	mov	r1, r5
 800a8c2:	4630      	mov	r0, r6
 800a8c4:	f7ff ff93 	bl	800a7ee <__sfputs_r>
 800a8c8:	3001      	adds	r0, #1
 800a8ca:	f000 80aa 	beq.w	800aa22 <_vfiprintf_r+0x20e>
 800a8ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a8d0:	445a      	add	r2, fp
 800a8d2:	9209      	str	r2, [sp, #36]	; 0x24
 800a8d4:	f89a 3000 	ldrb.w	r3, [sl]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	f000 80a2 	beq.w	800aa22 <_vfiprintf_r+0x20e>
 800a8de:	2300      	movs	r3, #0
 800a8e0:	f04f 32ff 	mov.w	r2, #4294967295
 800a8e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a8e8:	f10a 0a01 	add.w	sl, sl, #1
 800a8ec:	9304      	str	r3, [sp, #16]
 800a8ee:	9307      	str	r3, [sp, #28]
 800a8f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a8f4:	931a      	str	r3, [sp, #104]	; 0x68
 800a8f6:	4654      	mov	r4, sl
 800a8f8:	2205      	movs	r2, #5
 800a8fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8fe:	4858      	ldr	r0, [pc, #352]	; (800aa60 <_vfiprintf_r+0x24c>)
 800a900:	f000 faf8 	bl	800aef4 <memchr>
 800a904:	9a04      	ldr	r2, [sp, #16]
 800a906:	b9d8      	cbnz	r0, 800a940 <_vfiprintf_r+0x12c>
 800a908:	06d1      	lsls	r1, r2, #27
 800a90a:	bf44      	itt	mi
 800a90c:	2320      	movmi	r3, #32
 800a90e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a912:	0713      	lsls	r3, r2, #28
 800a914:	bf44      	itt	mi
 800a916:	232b      	movmi	r3, #43	; 0x2b
 800a918:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a91c:	f89a 3000 	ldrb.w	r3, [sl]
 800a920:	2b2a      	cmp	r3, #42	; 0x2a
 800a922:	d015      	beq.n	800a950 <_vfiprintf_r+0x13c>
 800a924:	4654      	mov	r4, sl
 800a926:	2000      	movs	r0, #0
 800a928:	f04f 0c0a 	mov.w	ip, #10
 800a92c:	9a07      	ldr	r2, [sp, #28]
 800a92e:	4621      	mov	r1, r4
 800a930:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a934:	3b30      	subs	r3, #48	; 0x30
 800a936:	2b09      	cmp	r3, #9
 800a938:	d94e      	bls.n	800a9d8 <_vfiprintf_r+0x1c4>
 800a93a:	b1b0      	cbz	r0, 800a96a <_vfiprintf_r+0x156>
 800a93c:	9207      	str	r2, [sp, #28]
 800a93e:	e014      	b.n	800a96a <_vfiprintf_r+0x156>
 800a940:	eba0 0308 	sub.w	r3, r0, r8
 800a944:	fa09 f303 	lsl.w	r3, r9, r3
 800a948:	4313      	orrs	r3, r2
 800a94a:	46a2      	mov	sl, r4
 800a94c:	9304      	str	r3, [sp, #16]
 800a94e:	e7d2      	b.n	800a8f6 <_vfiprintf_r+0xe2>
 800a950:	9b03      	ldr	r3, [sp, #12]
 800a952:	1d19      	adds	r1, r3, #4
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	9103      	str	r1, [sp, #12]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	bfbb      	ittet	lt
 800a95c:	425b      	neglt	r3, r3
 800a95e:	f042 0202 	orrlt.w	r2, r2, #2
 800a962:	9307      	strge	r3, [sp, #28]
 800a964:	9307      	strlt	r3, [sp, #28]
 800a966:	bfb8      	it	lt
 800a968:	9204      	strlt	r2, [sp, #16]
 800a96a:	7823      	ldrb	r3, [r4, #0]
 800a96c:	2b2e      	cmp	r3, #46	; 0x2e
 800a96e:	d10c      	bne.n	800a98a <_vfiprintf_r+0x176>
 800a970:	7863      	ldrb	r3, [r4, #1]
 800a972:	2b2a      	cmp	r3, #42	; 0x2a
 800a974:	d135      	bne.n	800a9e2 <_vfiprintf_r+0x1ce>
 800a976:	9b03      	ldr	r3, [sp, #12]
 800a978:	3402      	adds	r4, #2
 800a97a:	1d1a      	adds	r2, r3, #4
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	9203      	str	r2, [sp, #12]
 800a980:	2b00      	cmp	r3, #0
 800a982:	bfb8      	it	lt
 800a984:	f04f 33ff 	movlt.w	r3, #4294967295
 800a988:	9305      	str	r3, [sp, #20]
 800a98a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800aa64 <_vfiprintf_r+0x250>
 800a98e:	2203      	movs	r2, #3
 800a990:	4650      	mov	r0, sl
 800a992:	7821      	ldrb	r1, [r4, #0]
 800a994:	f000 faae 	bl	800aef4 <memchr>
 800a998:	b140      	cbz	r0, 800a9ac <_vfiprintf_r+0x198>
 800a99a:	2340      	movs	r3, #64	; 0x40
 800a99c:	eba0 000a 	sub.w	r0, r0, sl
 800a9a0:	fa03 f000 	lsl.w	r0, r3, r0
 800a9a4:	9b04      	ldr	r3, [sp, #16]
 800a9a6:	3401      	adds	r4, #1
 800a9a8:	4303      	orrs	r3, r0
 800a9aa:	9304      	str	r3, [sp, #16]
 800a9ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9b0:	2206      	movs	r2, #6
 800a9b2:	482d      	ldr	r0, [pc, #180]	; (800aa68 <_vfiprintf_r+0x254>)
 800a9b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a9b8:	f000 fa9c 	bl	800aef4 <memchr>
 800a9bc:	2800      	cmp	r0, #0
 800a9be:	d03f      	beq.n	800aa40 <_vfiprintf_r+0x22c>
 800a9c0:	4b2a      	ldr	r3, [pc, #168]	; (800aa6c <_vfiprintf_r+0x258>)
 800a9c2:	bb1b      	cbnz	r3, 800aa0c <_vfiprintf_r+0x1f8>
 800a9c4:	9b03      	ldr	r3, [sp, #12]
 800a9c6:	3307      	adds	r3, #7
 800a9c8:	f023 0307 	bic.w	r3, r3, #7
 800a9cc:	3308      	adds	r3, #8
 800a9ce:	9303      	str	r3, [sp, #12]
 800a9d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9d2:	443b      	add	r3, r7
 800a9d4:	9309      	str	r3, [sp, #36]	; 0x24
 800a9d6:	e767      	b.n	800a8a8 <_vfiprintf_r+0x94>
 800a9d8:	460c      	mov	r4, r1
 800a9da:	2001      	movs	r0, #1
 800a9dc:	fb0c 3202 	mla	r2, ip, r2, r3
 800a9e0:	e7a5      	b.n	800a92e <_vfiprintf_r+0x11a>
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	f04f 0c0a 	mov.w	ip, #10
 800a9e8:	4619      	mov	r1, r3
 800a9ea:	3401      	adds	r4, #1
 800a9ec:	9305      	str	r3, [sp, #20]
 800a9ee:	4620      	mov	r0, r4
 800a9f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a9f4:	3a30      	subs	r2, #48	; 0x30
 800a9f6:	2a09      	cmp	r2, #9
 800a9f8:	d903      	bls.n	800aa02 <_vfiprintf_r+0x1ee>
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d0c5      	beq.n	800a98a <_vfiprintf_r+0x176>
 800a9fe:	9105      	str	r1, [sp, #20]
 800aa00:	e7c3      	b.n	800a98a <_vfiprintf_r+0x176>
 800aa02:	4604      	mov	r4, r0
 800aa04:	2301      	movs	r3, #1
 800aa06:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa0a:	e7f0      	b.n	800a9ee <_vfiprintf_r+0x1da>
 800aa0c:	ab03      	add	r3, sp, #12
 800aa0e:	9300      	str	r3, [sp, #0]
 800aa10:	462a      	mov	r2, r5
 800aa12:	4630      	mov	r0, r6
 800aa14:	4b16      	ldr	r3, [pc, #88]	; (800aa70 <_vfiprintf_r+0x25c>)
 800aa16:	a904      	add	r1, sp, #16
 800aa18:	f3af 8000 	nop.w
 800aa1c:	4607      	mov	r7, r0
 800aa1e:	1c78      	adds	r0, r7, #1
 800aa20:	d1d6      	bne.n	800a9d0 <_vfiprintf_r+0x1bc>
 800aa22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa24:	07d9      	lsls	r1, r3, #31
 800aa26:	d405      	bmi.n	800aa34 <_vfiprintf_r+0x220>
 800aa28:	89ab      	ldrh	r3, [r5, #12]
 800aa2a:	059a      	lsls	r2, r3, #22
 800aa2c:	d402      	bmi.n	800aa34 <_vfiprintf_r+0x220>
 800aa2e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa30:	f7ff fd85 	bl	800a53e <__retarget_lock_release_recursive>
 800aa34:	89ab      	ldrh	r3, [r5, #12]
 800aa36:	065b      	lsls	r3, r3, #25
 800aa38:	f53f af12 	bmi.w	800a860 <_vfiprintf_r+0x4c>
 800aa3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aa3e:	e711      	b.n	800a864 <_vfiprintf_r+0x50>
 800aa40:	ab03      	add	r3, sp, #12
 800aa42:	9300      	str	r3, [sp, #0]
 800aa44:	462a      	mov	r2, r5
 800aa46:	4630      	mov	r0, r6
 800aa48:	4b09      	ldr	r3, [pc, #36]	; (800aa70 <_vfiprintf_r+0x25c>)
 800aa4a:	a904      	add	r1, sp, #16
 800aa4c:	f000 f882 	bl	800ab54 <_printf_i>
 800aa50:	e7e4      	b.n	800aa1c <_vfiprintf_r+0x208>
 800aa52:	bf00      	nop
 800aa54:	0800b29c 	.word	0x0800b29c
 800aa58:	0800b2bc 	.word	0x0800b2bc
 800aa5c:	0800b27c 	.word	0x0800b27c
 800aa60:	0800b2dc 	.word	0x0800b2dc
 800aa64:	0800b2e2 	.word	0x0800b2e2
 800aa68:	0800b2e6 	.word	0x0800b2e6
 800aa6c:	00000000 	.word	0x00000000
 800aa70:	0800a7ef 	.word	0x0800a7ef

0800aa74 <_printf_common>:
 800aa74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa78:	4616      	mov	r6, r2
 800aa7a:	4699      	mov	r9, r3
 800aa7c:	688a      	ldr	r2, [r1, #8]
 800aa7e:	690b      	ldr	r3, [r1, #16]
 800aa80:	4607      	mov	r7, r0
 800aa82:	4293      	cmp	r3, r2
 800aa84:	bfb8      	it	lt
 800aa86:	4613      	movlt	r3, r2
 800aa88:	6033      	str	r3, [r6, #0]
 800aa8a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aa8e:	460c      	mov	r4, r1
 800aa90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aa94:	b10a      	cbz	r2, 800aa9a <_printf_common+0x26>
 800aa96:	3301      	adds	r3, #1
 800aa98:	6033      	str	r3, [r6, #0]
 800aa9a:	6823      	ldr	r3, [r4, #0]
 800aa9c:	0699      	lsls	r1, r3, #26
 800aa9e:	bf42      	ittt	mi
 800aaa0:	6833      	ldrmi	r3, [r6, #0]
 800aaa2:	3302      	addmi	r3, #2
 800aaa4:	6033      	strmi	r3, [r6, #0]
 800aaa6:	6825      	ldr	r5, [r4, #0]
 800aaa8:	f015 0506 	ands.w	r5, r5, #6
 800aaac:	d106      	bne.n	800aabc <_printf_common+0x48>
 800aaae:	f104 0a19 	add.w	sl, r4, #25
 800aab2:	68e3      	ldr	r3, [r4, #12]
 800aab4:	6832      	ldr	r2, [r6, #0]
 800aab6:	1a9b      	subs	r3, r3, r2
 800aab8:	42ab      	cmp	r3, r5
 800aaba:	dc28      	bgt.n	800ab0e <_printf_common+0x9a>
 800aabc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aac0:	1e13      	subs	r3, r2, #0
 800aac2:	6822      	ldr	r2, [r4, #0]
 800aac4:	bf18      	it	ne
 800aac6:	2301      	movne	r3, #1
 800aac8:	0692      	lsls	r2, r2, #26
 800aaca:	d42d      	bmi.n	800ab28 <_printf_common+0xb4>
 800aacc:	4649      	mov	r1, r9
 800aace:	4638      	mov	r0, r7
 800aad0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aad4:	47c0      	blx	r8
 800aad6:	3001      	adds	r0, #1
 800aad8:	d020      	beq.n	800ab1c <_printf_common+0xa8>
 800aada:	6823      	ldr	r3, [r4, #0]
 800aadc:	68e5      	ldr	r5, [r4, #12]
 800aade:	f003 0306 	and.w	r3, r3, #6
 800aae2:	2b04      	cmp	r3, #4
 800aae4:	bf18      	it	ne
 800aae6:	2500      	movne	r5, #0
 800aae8:	6832      	ldr	r2, [r6, #0]
 800aaea:	f04f 0600 	mov.w	r6, #0
 800aaee:	68a3      	ldr	r3, [r4, #8]
 800aaf0:	bf08      	it	eq
 800aaf2:	1aad      	subeq	r5, r5, r2
 800aaf4:	6922      	ldr	r2, [r4, #16]
 800aaf6:	bf08      	it	eq
 800aaf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aafc:	4293      	cmp	r3, r2
 800aafe:	bfc4      	itt	gt
 800ab00:	1a9b      	subgt	r3, r3, r2
 800ab02:	18ed      	addgt	r5, r5, r3
 800ab04:	341a      	adds	r4, #26
 800ab06:	42b5      	cmp	r5, r6
 800ab08:	d11a      	bne.n	800ab40 <_printf_common+0xcc>
 800ab0a:	2000      	movs	r0, #0
 800ab0c:	e008      	b.n	800ab20 <_printf_common+0xac>
 800ab0e:	2301      	movs	r3, #1
 800ab10:	4652      	mov	r2, sl
 800ab12:	4649      	mov	r1, r9
 800ab14:	4638      	mov	r0, r7
 800ab16:	47c0      	blx	r8
 800ab18:	3001      	adds	r0, #1
 800ab1a:	d103      	bne.n	800ab24 <_printf_common+0xb0>
 800ab1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ab20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab24:	3501      	adds	r5, #1
 800ab26:	e7c4      	b.n	800aab2 <_printf_common+0x3e>
 800ab28:	2030      	movs	r0, #48	; 0x30
 800ab2a:	18e1      	adds	r1, r4, r3
 800ab2c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ab30:	1c5a      	adds	r2, r3, #1
 800ab32:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ab36:	4422      	add	r2, r4
 800ab38:	3302      	adds	r3, #2
 800ab3a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ab3e:	e7c5      	b.n	800aacc <_printf_common+0x58>
 800ab40:	2301      	movs	r3, #1
 800ab42:	4622      	mov	r2, r4
 800ab44:	4649      	mov	r1, r9
 800ab46:	4638      	mov	r0, r7
 800ab48:	47c0      	blx	r8
 800ab4a:	3001      	adds	r0, #1
 800ab4c:	d0e6      	beq.n	800ab1c <_printf_common+0xa8>
 800ab4e:	3601      	adds	r6, #1
 800ab50:	e7d9      	b.n	800ab06 <_printf_common+0x92>
	...

0800ab54 <_printf_i>:
 800ab54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab58:	7e0f      	ldrb	r7, [r1, #24]
 800ab5a:	4691      	mov	r9, r2
 800ab5c:	2f78      	cmp	r7, #120	; 0x78
 800ab5e:	4680      	mov	r8, r0
 800ab60:	460c      	mov	r4, r1
 800ab62:	469a      	mov	sl, r3
 800ab64:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ab66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ab6a:	d807      	bhi.n	800ab7c <_printf_i+0x28>
 800ab6c:	2f62      	cmp	r7, #98	; 0x62
 800ab6e:	d80a      	bhi.n	800ab86 <_printf_i+0x32>
 800ab70:	2f00      	cmp	r7, #0
 800ab72:	f000 80d9 	beq.w	800ad28 <_printf_i+0x1d4>
 800ab76:	2f58      	cmp	r7, #88	; 0x58
 800ab78:	f000 80a4 	beq.w	800acc4 <_printf_i+0x170>
 800ab7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ab80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ab84:	e03a      	b.n	800abfc <_printf_i+0xa8>
 800ab86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ab8a:	2b15      	cmp	r3, #21
 800ab8c:	d8f6      	bhi.n	800ab7c <_printf_i+0x28>
 800ab8e:	a101      	add	r1, pc, #4	; (adr r1, 800ab94 <_printf_i+0x40>)
 800ab90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ab94:	0800abed 	.word	0x0800abed
 800ab98:	0800ac01 	.word	0x0800ac01
 800ab9c:	0800ab7d 	.word	0x0800ab7d
 800aba0:	0800ab7d 	.word	0x0800ab7d
 800aba4:	0800ab7d 	.word	0x0800ab7d
 800aba8:	0800ab7d 	.word	0x0800ab7d
 800abac:	0800ac01 	.word	0x0800ac01
 800abb0:	0800ab7d 	.word	0x0800ab7d
 800abb4:	0800ab7d 	.word	0x0800ab7d
 800abb8:	0800ab7d 	.word	0x0800ab7d
 800abbc:	0800ab7d 	.word	0x0800ab7d
 800abc0:	0800ad0f 	.word	0x0800ad0f
 800abc4:	0800ac31 	.word	0x0800ac31
 800abc8:	0800acf1 	.word	0x0800acf1
 800abcc:	0800ab7d 	.word	0x0800ab7d
 800abd0:	0800ab7d 	.word	0x0800ab7d
 800abd4:	0800ad31 	.word	0x0800ad31
 800abd8:	0800ab7d 	.word	0x0800ab7d
 800abdc:	0800ac31 	.word	0x0800ac31
 800abe0:	0800ab7d 	.word	0x0800ab7d
 800abe4:	0800ab7d 	.word	0x0800ab7d
 800abe8:	0800acf9 	.word	0x0800acf9
 800abec:	682b      	ldr	r3, [r5, #0]
 800abee:	1d1a      	adds	r2, r3, #4
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	602a      	str	r2, [r5, #0]
 800abf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800abf8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800abfc:	2301      	movs	r3, #1
 800abfe:	e0a4      	b.n	800ad4a <_printf_i+0x1f6>
 800ac00:	6820      	ldr	r0, [r4, #0]
 800ac02:	6829      	ldr	r1, [r5, #0]
 800ac04:	0606      	lsls	r6, r0, #24
 800ac06:	f101 0304 	add.w	r3, r1, #4
 800ac0a:	d50a      	bpl.n	800ac22 <_printf_i+0xce>
 800ac0c:	680e      	ldr	r6, [r1, #0]
 800ac0e:	602b      	str	r3, [r5, #0]
 800ac10:	2e00      	cmp	r6, #0
 800ac12:	da03      	bge.n	800ac1c <_printf_i+0xc8>
 800ac14:	232d      	movs	r3, #45	; 0x2d
 800ac16:	4276      	negs	r6, r6
 800ac18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac1c:	230a      	movs	r3, #10
 800ac1e:	485e      	ldr	r0, [pc, #376]	; (800ad98 <_printf_i+0x244>)
 800ac20:	e019      	b.n	800ac56 <_printf_i+0x102>
 800ac22:	680e      	ldr	r6, [r1, #0]
 800ac24:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ac28:	602b      	str	r3, [r5, #0]
 800ac2a:	bf18      	it	ne
 800ac2c:	b236      	sxthne	r6, r6
 800ac2e:	e7ef      	b.n	800ac10 <_printf_i+0xbc>
 800ac30:	682b      	ldr	r3, [r5, #0]
 800ac32:	6820      	ldr	r0, [r4, #0]
 800ac34:	1d19      	adds	r1, r3, #4
 800ac36:	6029      	str	r1, [r5, #0]
 800ac38:	0601      	lsls	r1, r0, #24
 800ac3a:	d501      	bpl.n	800ac40 <_printf_i+0xec>
 800ac3c:	681e      	ldr	r6, [r3, #0]
 800ac3e:	e002      	b.n	800ac46 <_printf_i+0xf2>
 800ac40:	0646      	lsls	r6, r0, #25
 800ac42:	d5fb      	bpl.n	800ac3c <_printf_i+0xe8>
 800ac44:	881e      	ldrh	r6, [r3, #0]
 800ac46:	2f6f      	cmp	r7, #111	; 0x6f
 800ac48:	bf0c      	ite	eq
 800ac4a:	2308      	moveq	r3, #8
 800ac4c:	230a      	movne	r3, #10
 800ac4e:	4852      	ldr	r0, [pc, #328]	; (800ad98 <_printf_i+0x244>)
 800ac50:	2100      	movs	r1, #0
 800ac52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ac56:	6865      	ldr	r5, [r4, #4]
 800ac58:	2d00      	cmp	r5, #0
 800ac5a:	bfa8      	it	ge
 800ac5c:	6821      	ldrge	r1, [r4, #0]
 800ac5e:	60a5      	str	r5, [r4, #8]
 800ac60:	bfa4      	itt	ge
 800ac62:	f021 0104 	bicge.w	r1, r1, #4
 800ac66:	6021      	strge	r1, [r4, #0]
 800ac68:	b90e      	cbnz	r6, 800ac6e <_printf_i+0x11a>
 800ac6a:	2d00      	cmp	r5, #0
 800ac6c:	d04d      	beq.n	800ad0a <_printf_i+0x1b6>
 800ac6e:	4615      	mov	r5, r2
 800ac70:	fbb6 f1f3 	udiv	r1, r6, r3
 800ac74:	fb03 6711 	mls	r7, r3, r1, r6
 800ac78:	5dc7      	ldrb	r7, [r0, r7]
 800ac7a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ac7e:	4637      	mov	r7, r6
 800ac80:	42bb      	cmp	r3, r7
 800ac82:	460e      	mov	r6, r1
 800ac84:	d9f4      	bls.n	800ac70 <_printf_i+0x11c>
 800ac86:	2b08      	cmp	r3, #8
 800ac88:	d10b      	bne.n	800aca2 <_printf_i+0x14e>
 800ac8a:	6823      	ldr	r3, [r4, #0]
 800ac8c:	07de      	lsls	r6, r3, #31
 800ac8e:	d508      	bpl.n	800aca2 <_printf_i+0x14e>
 800ac90:	6923      	ldr	r3, [r4, #16]
 800ac92:	6861      	ldr	r1, [r4, #4]
 800ac94:	4299      	cmp	r1, r3
 800ac96:	bfde      	ittt	le
 800ac98:	2330      	movle	r3, #48	; 0x30
 800ac9a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ac9e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800aca2:	1b52      	subs	r2, r2, r5
 800aca4:	6122      	str	r2, [r4, #16]
 800aca6:	464b      	mov	r3, r9
 800aca8:	4621      	mov	r1, r4
 800acaa:	4640      	mov	r0, r8
 800acac:	f8cd a000 	str.w	sl, [sp]
 800acb0:	aa03      	add	r2, sp, #12
 800acb2:	f7ff fedf 	bl	800aa74 <_printf_common>
 800acb6:	3001      	adds	r0, #1
 800acb8:	d14c      	bne.n	800ad54 <_printf_i+0x200>
 800acba:	f04f 30ff 	mov.w	r0, #4294967295
 800acbe:	b004      	add	sp, #16
 800acc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acc4:	4834      	ldr	r0, [pc, #208]	; (800ad98 <_printf_i+0x244>)
 800acc6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800acca:	6829      	ldr	r1, [r5, #0]
 800accc:	6823      	ldr	r3, [r4, #0]
 800acce:	f851 6b04 	ldr.w	r6, [r1], #4
 800acd2:	6029      	str	r1, [r5, #0]
 800acd4:	061d      	lsls	r5, r3, #24
 800acd6:	d514      	bpl.n	800ad02 <_printf_i+0x1ae>
 800acd8:	07df      	lsls	r7, r3, #31
 800acda:	bf44      	itt	mi
 800acdc:	f043 0320 	orrmi.w	r3, r3, #32
 800ace0:	6023      	strmi	r3, [r4, #0]
 800ace2:	b91e      	cbnz	r6, 800acec <_printf_i+0x198>
 800ace4:	6823      	ldr	r3, [r4, #0]
 800ace6:	f023 0320 	bic.w	r3, r3, #32
 800acea:	6023      	str	r3, [r4, #0]
 800acec:	2310      	movs	r3, #16
 800acee:	e7af      	b.n	800ac50 <_printf_i+0xfc>
 800acf0:	6823      	ldr	r3, [r4, #0]
 800acf2:	f043 0320 	orr.w	r3, r3, #32
 800acf6:	6023      	str	r3, [r4, #0]
 800acf8:	2378      	movs	r3, #120	; 0x78
 800acfa:	4828      	ldr	r0, [pc, #160]	; (800ad9c <_printf_i+0x248>)
 800acfc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ad00:	e7e3      	b.n	800acca <_printf_i+0x176>
 800ad02:	0659      	lsls	r1, r3, #25
 800ad04:	bf48      	it	mi
 800ad06:	b2b6      	uxthmi	r6, r6
 800ad08:	e7e6      	b.n	800acd8 <_printf_i+0x184>
 800ad0a:	4615      	mov	r5, r2
 800ad0c:	e7bb      	b.n	800ac86 <_printf_i+0x132>
 800ad0e:	682b      	ldr	r3, [r5, #0]
 800ad10:	6826      	ldr	r6, [r4, #0]
 800ad12:	1d18      	adds	r0, r3, #4
 800ad14:	6961      	ldr	r1, [r4, #20]
 800ad16:	6028      	str	r0, [r5, #0]
 800ad18:	0635      	lsls	r5, r6, #24
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	d501      	bpl.n	800ad22 <_printf_i+0x1ce>
 800ad1e:	6019      	str	r1, [r3, #0]
 800ad20:	e002      	b.n	800ad28 <_printf_i+0x1d4>
 800ad22:	0670      	lsls	r0, r6, #25
 800ad24:	d5fb      	bpl.n	800ad1e <_printf_i+0x1ca>
 800ad26:	8019      	strh	r1, [r3, #0]
 800ad28:	2300      	movs	r3, #0
 800ad2a:	4615      	mov	r5, r2
 800ad2c:	6123      	str	r3, [r4, #16]
 800ad2e:	e7ba      	b.n	800aca6 <_printf_i+0x152>
 800ad30:	682b      	ldr	r3, [r5, #0]
 800ad32:	2100      	movs	r1, #0
 800ad34:	1d1a      	adds	r2, r3, #4
 800ad36:	602a      	str	r2, [r5, #0]
 800ad38:	681d      	ldr	r5, [r3, #0]
 800ad3a:	6862      	ldr	r2, [r4, #4]
 800ad3c:	4628      	mov	r0, r5
 800ad3e:	f000 f8d9 	bl	800aef4 <memchr>
 800ad42:	b108      	cbz	r0, 800ad48 <_printf_i+0x1f4>
 800ad44:	1b40      	subs	r0, r0, r5
 800ad46:	6060      	str	r0, [r4, #4]
 800ad48:	6863      	ldr	r3, [r4, #4]
 800ad4a:	6123      	str	r3, [r4, #16]
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad52:	e7a8      	b.n	800aca6 <_printf_i+0x152>
 800ad54:	462a      	mov	r2, r5
 800ad56:	4649      	mov	r1, r9
 800ad58:	4640      	mov	r0, r8
 800ad5a:	6923      	ldr	r3, [r4, #16]
 800ad5c:	47d0      	blx	sl
 800ad5e:	3001      	adds	r0, #1
 800ad60:	d0ab      	beq.n	800acba <_printf_i+0x166>
 800ad62:	6823      	ldr	r3, [r4, #0]
 800ad64:	079b      	lsls	r3, r3, #30
 800ad66:	d413      	bmi.n	800ad90 <_printf_i+0x23c>
 800ad68:	68e0      	ldr	r0, [r4, #12]
 800ad6a:	9b03      	ldr	r3, [sp, #12]
 800ad6c:	4298      	cmp	r0, r3
 800ad6e:	bfb8      	it	lt
 800ad70:	4618      	movlt	r0, r3
 800ad72:	e7a4      	b.n	800acbe <_printf_i+0x16a>
 800ad74:	2301      	movs	r3, #1
 800ad76:	4632      	mov	r2, r6
 800ad78:	4649      	mov	r1, r9
 800ad7a:	4640      	mov	r0, r8
 800ad7c:	47d0      	blx	sl
 800ad7e:	3001      	adds	r0, #1
 800ad80:	d09b      	beq.n	800acba <_printf_i+0x166>
 800ad82:	3501      	adds	r5, #1
 800ad84:	68e3      	ldr	r3, [r4, #12]
 800ad86:	9903      	ldr	r1, [sp, #12]
 800ad88:	1a5b      	subs	r3, r3, r1
 800ad8a:	42ab      	cmp	r3, r5
 800ad8c:	dcf2      	bgt.n	800ad74 <_printf_i+0x220>
 800ad8e:	e7eb      	b.n	800ad68 <_printf_i+0x214>
 800ad90:	2500      	movs	r5, #0
 800ad92:	f104 0619 	add.w	r6, r4, #25
 800ad96:	e7f5      	b.n	800ad84 <_printf_i+0x230>
 800ad98:	0800b2ed 	.word	0x0800b2ed
 800ad9c:	0800b2fe 	.word	0x0800b2fe

0800ada0 <_sbrk_r>:
 800ada0:	b538      	push	{r3, r4, r5, lr}
 800ada2:	2300      	movs	r3, #0
 800ada4:	4d05      	ldr	r5, [pc, #20]	; (800adbc <_sbrk_r+0x1c>)
 800ada6:	4604      	mov	r4, r0
 800ada8:	4608      	mov	r0, r1
 800adaa:	602b      	str	r3, [r5, #0]
 800adac:	f7fa fafa 	bl	80053a4 <_sbrk>
 800adb0:	1c43      	adds	r3, r0, #1
 800adb2:	d102      	bne.n	800adba <_sbrk_r+0x1a>
 800adb4:	682b      	ldr	r3, [r5, #0]
 800adb6:	b103      	cbz	r3, 800adba <_sbrk_r+0x1a>
 800adb8:	6023      	str	r3, [r4, #0]
 800adba:	bd38      	pop	{r3, r4, r5, pc}
 800adbc:	20004368 	.word	0x20004368

0800adc0 <__sread>:
 800adc0:	b510      	push	{r4, lr}
 800adc2:	460c      	mov	r4, r1
 800adc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adc8:	f000 f8ae 	bl	800af28 <_read_r>
 800adcc:	2800      	cmp	r0, #0
 800adce:	bfab      	itete	ge
 800add0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800add2:	89a3      	ldrhlt	r3, [r4, #12]
 800add4:	181b      	addge	r3, r3, r0
 800add6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800adda:	bfac      	ite	ge
 800addc:	6563      	strge	r3, [r4, #84]	; 0x54
 800adde:	81a3      	strhlt	r3, [r4, #12]
 800ade0:	bd10      	pop	{r4, pc}

0800ade2 <__swrite>:
 800ade2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ade6:	461f      	mov	r7, r3
 800ade8:	898b      	ldrh	r3, [r1, #12]
 800adea:	4605      	mov	r5, r0
 800adec:	05db      	lsls	r3, r3, #23
 800adee:	460c      	mov	r4, r1
 800adf0:	4616      	mov	r6, r2
 800adf2:	d505      	bpl.n	800ae00 <__swrite+0x1e>
 800adf4:	2302      	movs	r3, #2
 800adf6:	2200      	movs	r2, #0
 800adf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adfc:	f000 f868 	bl	800aed0 <_lseek_r>
 800ae00:	89a3      	ldrh	r3, [r4, #12]
 800ae02:	4632      	mov	r2, r6
 800ae04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ae08:	81a3      	strh	r3, [r4, #12]
 800ae0a:	4628      	mov	r0, r5
 800ae0c:	463b      	mov	r3, r7
 800ae0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae16:	f000 b817 	b.w	800ae48 <_write_r>

0800ae1a <__sseek>:
 800ae1a:	b510      	push	{r4, lr}
 800ae1c:	460c      	mov	r4, r1
 800ae1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae22:	f000 f855 	bl	800aed0 <_lseek_r>
 800ae26:	1c43      	adds	r3, r0, #1
 800ae28:	89a3      	ldrh	r3, [r4, #12]
 800ae2a:	bf15      	itete	ne
 800ae2c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ae2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ae32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ae36:	81a3      	strheq	r3, [r4, #12]
 800ae38:	bf18      	it	ne
 800ae3a:	81a3      	strhne	r3, [r4, #12]
 800ae3c:	bd10      	pop	{r4, pc}

0800ae3e <__sclose>:
 800ae3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae42:	f000 b813 	b.w	800ae6c <_close_r>
	...

0800ae48 <_write_r>:
 800ae48:	b538      	push	{r3, r4, r5, lr}
 800ae4a:	4604      	mov	r4, r0
 800ae4c:	4608      	mov	r0, r1
 800ae4e:	4611      	mov	r1, r2
 800ae50:	2200      	movs	r2, #0
 800ae52:	4d05      	ldr	r5, [pc, #20]	; (800ae68 <_write_r+0x20>)
 800ae54:	602a      	str	r2, [r5, #0]
 800ae56:	461a      	mov	r2, r3
 800ae58:	f7fa fa57 	bl	800530a <_write>
 800ae5c:	1c43      	adds	r3, r0, #1
 800ae5e:	d102      	bne.n	800ae66 <_write_r+0x1e>
 800ae60:	682b      	ldr	r3, [r5, #0]
 800ae62:	b103      	cbz	r3, 800ae66 <_write_r+0x1e>
 800ae64:	6023      	str	r3, [r4, #0]
 800ae66:	bd38      	pop	{r3, r4, r5, pc}
 800ae68:	20004368 	.word	0x20004368

0800ae6c <_close_r>:
 800ae6c:	b538      	push	{r3, r4, r5, lr}
 800ae6e:	2300      	movs	r3, #0
 800ae70:	4d05      	ldr	r5, [pc, #20]	; (800ae88 <_close_r+0x1c>)
 800ae72:	4604      	mov	r4, r0
 800ae74:	4608      	mov	r0, r1
 800ae76:	602b      	str	r3, [r5, #0]
 800ae78:	f7fa fa63 	bl	8005342 <_close>
 800ae7c:	1c43      	adds	r3, r0, #1
 800ae7e:	d102      	bne.n	800ae86 <_close_r+0x1a>
 800ae80:	682b      	ldr	r3, [r5, #0]
 800ae82:	b103      	cbz	r3, 800ae86 <_close_r+0x1a>
 800ae84:	6023      	str	r3, [r4, #0]
 800ae86:	bd38      	pop	{r3, r4, r5, pc}
 800ae88:	20004368 	.word	0x20004368

0800ae8c <_fstat_r>:
 800ae8c:	b538      	push	{r3, r4, r5, lr}
 800ae8e:	2300      	movs	r3, #0
 800ae90:	4d06      	ldr	r5, [pc, #24]	; (800aeac <_fstat_r+0x20>)
 800ae92:	4604      	mov	r4, r0
 800ae94:	4608      	mov	r0, r1
 800ae96:	4611      	mov	r1, r2
 800ae98:	602b      	str	r3, [r5, #0]
 800ae9a:	f7fa fa5d 	bl	8005358 <_fstat>
 800ae9e:	1c43      	adds	r3, r0, #1
 800aea0:	d102      	bne.n	800aea8 <_fstat_r+0x1c>
 800aea2:	682b      	ldr	r3, [r5, #0]
 800aea4:	b103      	cbz	r3, 800aea8 <_fstat_r+0x1c>
 800aea6:	6023      	str	r3, [r4, #0]
 800aea8:	bd38      	pop	{r3, r4, r5, pc}
 800aeaa:	bf00      	nop
 800aeac:	20004368 	.word	0x20004368

0800aeb0 <_isatty_r>:
 800aeb0:	b538      	push	{r3, r4, r5, lr}
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	4d05      	ldr	r5, [pc, #20]	; (800aecc <_isatty_r+0x1c>)
 800aeb6:	4604      	mov	r4, r0
 800aeb8:	4608      	mov	r0, r1
 800aeba:	602b      	str	r3, [r5, #0]
 800aebc:	f7fa fa5b 	bl	8005376 <_isatty>
 800aec0:	1c43      	adds	r3, r0, #1
 800aec2:	d102      	bne.n	800aeca <_isatty_r+0x1a>
 800aec4:	682b      	ldr	r3, [r5, #0]
 800aec6:	b103      	cbz	r3, 800aeca <_isatty_r+0x1a>
 800aec8:	6023      	str	r3, [r4, #0]
 800aeca:	bd38      	pop	{r3, r4, r5, pc}
 800aecc:	20004368 	.word	0x20004368

0800aed0 <_lseek_r>:
 800aed0:	b538      	push	{r3, r4, r5, lr}
 800aed2:	4604      	mov	r4, r0
 800aed4:	4608      	mov	r0, r1
 800aed6:	4611      	mov	r1, r2
 800aed8:	2200      	movs	r2, #0
 800aeda:	4d05      	ldr	r5, [pc, #20]	; (800aef0 <_lseek_r+0x20>)
 800aedc:	602a      	str	r2, [r5, #0]
 800aede:	461a      	mov	r2, r3
 800aee0:	f7fa fa53 	bl	800538a <_lseek>
 800aee4:	1c43      	adds	r3, r0, #1
 800aee6:	d102      	bne.n	800aeee <_lseek_r+0x1e>
 800aee8:	682b      	ldr	r3, [r5, #0]
 800aeea:	b103      	cbz	r3, 800aeee <_lseek_r+0x1e>
 800aeec:	6023      	str	r3, [r4, #0]
 800aeee:	bd38      	pop	{r3, r4, r5, pc}
 800aef0:	20004368 	.word	0x20004368

0800aef4 <memchr>:
 800aef4:	4603      	mov	r3, r0
 800aef6:	b510      	push	{r4, lr}
 800aef8:	b2c9      	uxtb	r1, r1
 800aefa:	4402      	add	r2, r0
 800aefc:	4293      	cmp	r3, r2
 800aefe:	4618      	mov	r0, r3
 800af00:	d101      	bne.n	800af06 <memchr+0x12>
 800af02:	2000      	movs	r0, #0
 800af04:	e003      	b.n	800af0e <memchr+0x1a>
 800af06:	7804      	ldrb	r4, [r0, #0]
 800af08:	3301      	adds	r3, #1
 800af0a:	428c      	cmp	r4, r1
 800af0c:	d1f6      	bne.n	800aefc <memchr+0x8>
 800af0e:	bd10      	pop	{r4, pc}

0800af10 <__malloc_lock>:
 800af10:	4801      	ldr	r0, [pc, #4]	; (800af18 <__malloc_lock+0x8>)
 800af12:	f7ff bb13 	b.w	800a53c <__retarget_lock_acquire_recursive>
 800af16:	bf00      	nop
 800af18:	2000435c 	.word	0x2000435c

0800af1c <__malloc_unlock>:
 800af1c:	4801      	ldr	r0, [pc, #4]	; (800af24 <__malloc_unlock+0x8>)
 800af1e:	f7ff bb0e 	b.w	800a53e <__retarget_lock_release_recursive>
 800af22:	bf00      	nop
 800af24:	2000435c 	.word	0x2000435c

0800af28 <_read_r>:
 800af28:	b538      	push	{r3, r4, r5, lr}
 800af2a:	4604      	mov	r4, r0
 800af2c:	4608      	mov	r0, r1
 800af2e:	4611      	mov	r1, r2
 800af30:	2200      	movs	r2, #0
 800af32:	4d05      	ldr	r5, [pc, #20]	; (800af48 <_read_r+0x20>)
 800af34:	602a      	str	r2, [r5, #0]
 800af36:	461a      	mov	r2, r3
 800af38:	f7fa f9ca 	bl	80052d0 <_read>
 800af3c:	1c43      	adds	r3, r0, #1
 800af3e:	d102      	bne.n	800af46 <_read_r+0x1e>
 800af40:	682b      	ldr	r3, [r5, #0]
 800af42:	b103      	cbz	r3, 800af46 <_read_r+0x1e>
 800af44:	6023      	str	r3, [r4, #0]
 800af46:	bd38      	pop	{r3, r4, r5, pc}
 800af48:	20004368 	.word	0x20004368

0800af4c <_init>:
 800af4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af4e:	bf00      	nop
 800af50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af52:	bc08      	pop	{r3}
 800af54:	469e      	mov	lr, r3
 800af56:	4770      	bx	lr

0800af58 <_fini>:
 800af58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af5a:	bf00      	nop
 800af5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af5e:	bc08      	pop	{r3}
 800af60:	469e      	mov	lr, r3
 800af62:	4770      	bx	lr
