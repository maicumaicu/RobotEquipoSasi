
RobotAlgoritmoSasi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b02c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000260  0800b140  0800b140  0001b140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b3a0  0800b3a0  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  0800b3a0  0800b3a0  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b3a0  0800b3a0  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b3a0  0800b3a0  0001b3a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b3a4  0800b3a4  0001b3a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800b3a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000042f8  20000088  0800b430  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004380  0800b430  00024380  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f1bc  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002553  00000000  00000000  0002f26d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa0  00000000  00000000  000317c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e90  00000000  00000000  00032760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019fef  00000000  00000000  000335f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000133e4  00000000  00000000  0004d5df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000929a5  00000000  00000000  000609c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f3368  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050dc  00000000  00000000  000f33b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000088 	.word	0x20000088
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b124 	.word	0x0800b124

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000008c 	.word	0x2000008c
 800014c:	0800b124 	.word	0x0800b124

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2uiz>:
 8000a28:	004a      	lsls	r2, r1, #1
 8000a2a:	d211      	bcs.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d211      	bcs.n	8000a56 <__aeabi_d2uiz+0x2e>
 8000a32:	d50d      	bpl.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d40e      	bmi.n	8000a5c <__aeabi_d2uiz+0x34>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4e:	4770      	bx	lr
 8000a50:	f04f 0000 	mov.w	r0, #0
 8000a54:	4770      	bx	lr
 8000a56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_d2uiz+0x3a>
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0000 	mov.w	r0, #0
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2f>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a70:	bf24      	itt	cs
 8000a72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a7a:	d90d      	bls.n	8000a98 <__aeabi_d2f+0x30>
 8000a7c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a88:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a90:	bf08      	it	eq
 8000a92:	f020 0001 	biceq.w	r0, r0, #1
 8000a96:	4770      	bx	lr
 8000a98:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a9c:	d121      	bne.n	8000ae2 <__aeabi_d2f+0x7a>
 8000a9e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aa2:	bfbc      	itt	lt
 8000aa4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	4770      	bxlt	lr
 8000aaa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab2:	f1c2 0218 	rsb	r2, r2, #24
 8000ab6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aba:	fa10 f30c 	lsls.w	r3, r0, ip
 8000abe:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac2:	bf18      	it	ne
 8000ac4:	f040 0001 	orrne.w	r0, r0, #1
 8000ac8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000acc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad4:	ea40 000c 	orr.w	r0, r0, ip
 8000ad8:	fa23 f302 	lsr.w	r3, r3, r2
 8000adc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae0:	e7cc      	b.n	8000a7c <__aeabi_d2f+0x14>
 8000ae2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ae6:	d107      	bne.n	8000af8 <__aeabi_d2f+0x90>
 8000ae8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aec:	bf1e      	ittt	ne
 8000aee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000af2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000af6:	4770      	bxne	lr
 8000af8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000afc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_frsub>:
 8000b08:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b0c:	e002      	b.n	8000b14 <__addsf3>
 8000b0e:	bf00      	nop

08000b10 <__aeabi_fsub>:
 8000b10:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b14 <__addsf3>:
 8000b14:	0042      	lsls	r2, r0, #1
 8000b16:	bf1f      	itttt	ne
 8000b18:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b1c:	ea92 0f03 	teqne	r2, r3
 8000b20:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b24:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b28:	d06a      	beq.n	8000c00 <__addsf3+0xec>
 8000b2a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b2e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b32:	bfc1      	itttt	gt
 8000b34:	18d2      	addgt	r2, r2, r3
 8000b36:	4041      	eorgt	r1, r0
 8000b38:	4048      	eorgt	r0, r1
 8000b3a:	4041      	eorgt	r1, r0
 8000b3c:	bfb8      	it	lt
 8000b3e:	425b      	neglt	r3, r3
 8000b40:	2b19      	cmp	r3, #25
 8000b42:	bf88      	it	hi
 8000b44:	4770      	bxhi	lr
 8000b46:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b52:	bf18      	it	ne
 8000b54:	4240      	negne	r0, r0
 8000b56:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b5a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b5e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4249      	negne	r1, r1
 8000b66:	ea92 0f03 	teq	r2, r3
 8000b6a:	d03f      	beq.n	8000bec <__addsf3+0xd8>
 8000b6c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b70:	fa41 fc03 	asr.w	ip, r1, r3
 8000b74:	eb10 000c 	adds.w	r0, r0, ip
 8000b78:	f1c3 0320 	rsb	r3, r3, #32
 8000b7c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b80:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b84:	d502      	bpl.n	8000b8c <__addsf3+0x78>
 8000b86:	4249      	negs	r1, r1
 8000b88:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b8c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b90:	d313      	bcc.n	8000bba <__addsf3+0xa6>
 8000b92:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b96:	d306      	bcc.n	8000ba6 <__addsf3+0x92>
 8000b98:	0840      	lsrs	r0, r0, #1
 8000b9a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b9e:	f102 0201 	add.w	r2, r2, #1
 8000ba2:	2afe      	cmp	r2, #254	; 0xfe
 8000ba4:	d251      	bcs.n	8000c4a <__addsf3+0x136>
 8000ba6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000baa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bae:	bf08      	it	eq
 8000bb0:	f020 0001 	biceq.w	r0, r0, #1
 8000bb4:	ea40 0003 	orr.w	r0, r0, r3
 8000bb8:	4770      	bx	lr
 8000bba:	0049      	lsls	r1, r1, #1
 8000bbc:	eb40 0000 	adc.w	r0, r0, r0
 8000bc0:	3a01      	subs	r2, #1
 8000bc2:	bf28      	it	cs
 8000bc4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bc8:	d2ed      	bcs.n	8000ba6 <__addsf3+0x92>
 8000bca:	fab0 fc80 	clz	ip, r0
 8000bce:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bd2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bd6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bda:	bfaa      	itet	ge
 8000bdc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000be0:	4252      	neglt	r2, r2
 8000be2:	4318      	orrge	r0, r3
 8000be4:	bfbc      	itt	lt
 8000be6:	40d0      	lsrlt	r0, r2
 8000be8:	4318      	orrlt	r0, r3
 8000bea:	4770      	bx	lr
 8000bec:	f092 0f00 	teq	r2, #0
 8000bf0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bf4:	bf06      	itte	eq
 8000bf6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bfa:	3201      	addeq	r2, #1
 8000bfc:	3b01      	subne	r3, #1
 8000bfe:	e7b5      	b.n	8000b6c <__addsf3+0x58>
 8000c00:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c04:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c08:	bf18      	it	ne
 8000c0a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c0e:	d021      	beq.n	8000c54 <__addsf3+0x140>
 8000c10:	ea92 0f03 	teq	r2, r3
 8000c14:	d004      	beq.n	8000c20 <__addsf3+0x10c>
 8000c16:	f092 0f00 	teq	r2, #0
 8000c1a:	bf08      	it	eq
 8000c1c:	4608      	moveq	r0, r1
 8000c1e:	4770      	bx	lr
 8000c20:	ea90 0f01 	teq	r0, r1
 8000c24:	bf1c      	itt	ne
 8000c26:	2000      	movne	r0, #0
 8000c28:	4770      	bxne	lr
 8000c2a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c2e:	d104      	bne.n	8000c3a <__addsf3+0x126>
 8000c30:	0040      	lsls	r0, r0, #1
 8000c32:	bf28      	it	cs
 8000c34:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c38:	4770      	bx	lr
 8000c3a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c3e:	bf3c      	itt	cc
 8000c40:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bxcc	lr
 8000c46:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c4a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c4e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c52:	4770      	bx	lr
 8000c54:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c58:	bf16      	itet	ne
 8000c5a:	4608      	movne	r0, r1
 8000c5c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c60:	4601      	movne	r1, r0
 8000c62:	0242      	lsls	r2, r0, #9
 8000c64:	bf06      	itte	eq
 8000c66:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c6a:	ea90 0f01 	teqeq	r0, r1
 8000c6e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c72:	4770      	bx	lr

08000c74 <__aeabi_ui2f>:
 8000c74:	f04f 0300 	mov.w	r3, #0
 8000c78:	e004      	b.n	8000c84 <__aeabi_i2f+0x8>
 8000c7a:	bf00      	nop

08000c7c <__aeabi_i2f>:
 8000c7c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c80:	bf48      	it	mi
 8000c82:	4240      	negmi	r0, r0
 8000c84:	ea5f 0c00 	movs.w	ip, r0
 8000c88:	bf08      	it	eq
 8000c8a:	4770      	bxeq	lr
 8000c8c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c90:	4601      	mov	r1, r0
 8000c92:	f04f 0000 	mov.w	r0, #0
 8000c96:	e01c      	b.n	8000cd2 <__aeabi_l2f+0x2a>

08000c98 <__aeabi_ul2f>:
 8000c98:	ea50 0201 	orrs.w	r2, r0, r1
 8000c9c:	bf08      	it	eq
 8000c9e:	4770      	bxeq	lr
 8000ca0:	f04f 0300 	mov.w	r3, #0
 8000ca4:	e00a      	b.n	8000cbc <__aeabi_l2f+0x14>
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_l2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cb4:	d502      	bpl.n	8000cbc <__aeabi_l2f+0x14>
 8000cb6:	4240      	negs	r0, r0
 8000cb8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cbc:	ea5f 0c01 	movs.w	ip, r1
 8000cc0:	bf02      	ittt	eq
 8000cc2:	4684      	moveq	ip, r0
 8000cc4:	4601      	moveq	r1, r0
 8000cc6:	2000      	moveq	r0, #0
 8000cc8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ccc:	bf08      	it	eq
 8000cce:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cd2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cd6:	fabc f28c 	clz	r2, ip
 8000cda:	3a08      	subs	r2, #8
 8000cdc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ce0:	db10      	blt.n	8000d04 <__aeabi_l2f+0x5c>
 8000ce2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ce6:	4463      	add	r3, ip
 8000ce8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cec:	f1c2 0220 	rsb	r2, r2, #32
 8000cf0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cf4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf8:	eb43 0002 	adc.w	r0, r3, r2
 8000cfc:	bf08      	it	eq
 8000cfe:	f020 0001 	biceq.w	r0, r0, #1
 8000d02:	4770      	bx	lr
 8000d04:	f102 0220 	add.w	r2, r2, #32
 8000d08:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d14:	fa21 f202 	lsr.w	r2, r1, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d22:	4770      	bx	lr

08000d24 <__aeabi_fmul>:
 8000d24:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d28:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d2c:	bf1e      	ittt	ne
 8000d2e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d32:	ea92 0f0c 	teqne	r2, ip
 8000d36:	ea93 0f0c 	teqne	r3, ip
 8000d3a:	d06f      	beq.n	8000e1c <__aeabi_fmul+0xf8>
 8000d3c:	441a      	add	r2, r3
 8000d3e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d42:	0240      	lsls	r0, r0, #9
 8000d44:	bf18      	it	ne
 8000d46:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d4a:	d01e      	beq.n	8000d8a <__aeabi_fmul+0x66>
 8000d4c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d50:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d54:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d58:	fba0 3101 	umull	r3, r1, r0, r1
 8000d5c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d60:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d64:	bf3e      	ittt	cc
 8000d66:	0049      	lslcc	r1, r1, #1
 8000d68:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d6c:	005b      	lslcc	r3, r3, #1
 8000d6e:	ea40 0001 	orr.w	r0, r0, r1
 8000d72:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d76:	2afd      	cmp	r2, #253	; 0xfd
 8000d78:	d81d      	bhi.n	8000db6 <__aeabi_fmul+0x92>
 8000d7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d82:	bf08      	it	eq
 8000d84:	f020 0001 	biceq.w	r0, r0, #1
 8000d88:	4770      	bx	lr
 8000d8a:	f090 0f00 	teq	r0, #0
 8000d8e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d92:	bf08      	it	eq
 8000d94:	0249      	lsleq	r1, r1, #9
 8000d96:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d9a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d9e:	3a7f      	subs	r2, #127	; 0x7f
 8000da0:	bfc2      	ittt	gt
 8000da2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000da6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000daa:	4770      	bxgt	lr
 8000dac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000db0:	f04f 0300 	mov.w	r3, #0
 8000db4:	3a01      	subs	r2, #1
 8000db6:	dc5d      	bgt.n	8000e74 <__aeabi_fmul+0x150>
 8000db8:	f112 0f19 	cmn.w	r2, #25
 8000dbc:	bfdc      	itt	le
 8000dbe:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dc2:	4770      	bxle	lr
 8000dc4:	f1c2 0200 	rsb	r2, r2, #0
 8000dc8:	0041      	lsls	r1, r0, #1
 8000dca:	fa21 f102 	lsr.w	r1, r1, r2
 8000dce:	f1c2 0220 	rsb	r2, r2, #32
 8000dd2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dd6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dda:	f140 0000 	adc.w	r0, r0, #0
 8000dde:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000de2:	bf08      	it	eq
 8000de4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000de8:	4770      	bx	lr
 8000dea:	f092 0f00 	teq	r2, #0
 8000dee:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000df2:	bf02      	ittt	eq
 8000df4:	0040      	lsleq	r0, r0, #1
 8000df6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dfa:	3a01      	subeq	r2, #1
 8000dfc:	d0f9      	beq.n	8000df2 <__aeabi_fmul+0xce>
 8000dfe:	ea40 000c 	orr.w	r0, r0, ip
 8000e02:	f093 0f00 	teq	r3, #0
 8000e06:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e0a:	bf02      	ittt	eq
 8000e0c:	0049      	lsleq	r1, r1, #1
 8000e0e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e12:	3b01      	subeq	r3, #1
 8000e14:	d0f9      	beq.n	8000e0a <__aeabi_fmul+0xe6>
 8000e16:	ea41 010c 	orr.w	r1, r1, ip
 8000e1a:	e78f      	b.n	8000d3c <__aeabi_fmul+0x18>
 8000e1c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e20:	ea92 0f0c 	teq	r2, ip
 8000e24:	bf18      	it	ne
 8000e26:	ea93 0f0c 	teqne	r3, ip
 8000e2a:	d00a      	beq.n	8000e42 <__aeabi_fmul+0x11e>
 8000e2c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e30:	bf18      	it	ne
 8000e32:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e36:	d1d8      	bne.n	8000dea <__aeabi_fmul+0xc6>
 8000e38:	ea80 0001 	eor.w	r0, r0, r1
 8000e3c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e40:	4770      	bx	lr
 8000e42:	f090 0f00 	teq	r0, #0
 8000e46:	bf17      	itett	ne
 8000e48:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e4c:	4608      	moveq	r0, r1
 8000e4e:	f091 0f00 	teqne	r1, #0
 8000e52:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e56:	d014      	beq.n	8000e82 <__aeabi_fmul+0x15e>
 8000e58:	ea92 0f0c 	teq	r2, ip
 8000e5c:	d101      	bne.n	8000e62 <__aeabi_fmul+0x13e>
 8000e5e:	0242      	lsls	r2, r0, #9
 8000e60:	d10f      	bne.n	8000e82 <__aeabi_fmul+0x15e>
 8000e62:	ea93 0f0c 	teq	r3, ip
 8000e66:	d103      	bne.n	8000e70 <__aeabi_fmul+0x14c>
 8000e68:	024b      	lsls	r3, r1, #9
 8000e6a:	bf18      	it	ne
 8000e6c:	4608      	movne	r0, r1
 8000e6e:	d108      	bne.n	8000e82 <__aeabi_fmul+0x15e>
 8000e70:	ea80 0001 	eor.w	r0, r0, r1
 8000e74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e78:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e7c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e80:	4770      	bx	lr
 8000e82:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e86:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e8a:	4770      	bx	lr

08000e8c <__aeabi_fdiv>:
 8000e8c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e90:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e94:	bf1e      	ittt	ne
 8000e96:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e9a:	ea92 0f0c 	teqne	r2, ip
 8000e9e:	ea93 0f0c 	teqne	r3, ip
 8000ea2:	d069      	beq.n	8000f78 <__aeabi_fdiv+0xec>
 8000ea4:	eba2 0203 	sub.w	r2, r2, r3
 8000ea8:	ea80 0c01 	eor.w	ip, r0, r1
 8000eac:	0249      	lsls	r1, r1, #9
 8000eae:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000eb2:	d037      	beq.n	8000f24 <__aeabi_fdiv+0x98>
 8000eb4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000eb8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ebc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ec0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ec4:	428b      	cmp	r3, r1
 8000ec6:	bf38      	it	cc
 8000ec8:	005b      	lslcc	r3, r3, #1
 8000eca:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ece:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	bf24      	itt	cs
 8000ed6:	1a5b      	subcs	r3, r3, r1
 8000ed8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000edc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ee0:	bf24      	itt	cs
 8000ee2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ee6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eea:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eee:	bf24      	itt	cs
 8000ef0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ef4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ef8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000efc:	bf24      	itt	cs
 8000efe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f02:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f06:	011b      	lsls	r3, r3, #4
 8000f08:	bf18      	it	ne
 8000f0a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f0e:	d1e0      	bne.n	8000ed2 <__aeabi_fdiv+0x46>
 8000f10:	2afd      	cmp	r2, #253	; 0xfd
 8000f12:	f63f af50 	bhi.w	8000db6 <__aeabi_fmul+0x92>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f1c:	bf08      	it	eq
 8000f1e:	f020 0001 	biceq.w	r0, r0, #1
 8000f22:	4770      	bx	lr
 8000f24:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f28:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f2c:	327f      	adds	r2, #127	; 0x7f
 8000f2e:	bfc2      	ittt	gt
 8000f30:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f34:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f38:	4770      	bxgt	lr
 8000f3a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f3e:	f04f 0300 	mov.w	r3, #0
 8000f42:	3a01      	subs	r2, #1
 8000f44:	e737      	b.n	8000db6 <__aeabi_fmul+0x92>
 8000f46:	f092 0f00 	teq	r2, #0
 8000f4a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f4e:	bf02      	ittt	eq
 8000f50:	0040      	lsleq	r0, r0, #1
 8000f52:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f56:	3a01      	subeq	r2, #1
 8000f58:	d0f9      	beq.n	8000f4e <__aeabi_fdiv+0xc2>
 8000f5a:	ea40 000c 	orr.w	r0, r0, ip
 8000f5e:	f093 0f00 	teq	r3, #0
 8000f62:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f66:	bf02      	ittt	eq
 8000f68:	0049      	lsleq	r1, r1, #1
 8000f6a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f6e:	3b01      	subeq	r3, #1
 8000f70:	d0f9      	beq.n	8000f66 <__aeabi_fdiv+0xda>
 8000f72:	ea41 010c 	orr.w	r1, r1, ip
 8000f76:	e795      	b.n	8000ea4 <__aeabi_fdiv+0x18>
 8000f78:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f7c:	ea92 0f0c 	teq	r2, ip
 8000f80:	d108      	bne.n	8000f94 <__aeabi_fdiv+0x108>
 8000f82:	0242      	lsls	r2, r0, #9
 8000f84:	f47f af7d 	bne.w	8000e82 <__aeabi_fmul+0x15e>
 8000f88:	ea93 0f0c 	teq	r3, ip
 8000f8c:	f47f af70 	bne.w	8000e70 <__aeabi_fmul+0x14c>
 8000f90:	4608      	mov	r0, r1
 8000f92:	e776      	b.n	8000e82 <__aeabi_fmul+0x15e>
 8000f94:	ea93 0f0c 	teq	r3, ip
 8000f98:	d104      	bne.n	8000fa4 <__aeabi_fdiv+0x118>
 8000f9a:	024b      	lsls	r3, r1, #9
 8000f9c:	f43f af4c 	beq.w	8000e38 <__aeabi_fmul+0x114>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e76e      	b.n	8000e82 <__aeabi_fmul+0x15e>
 8000fa4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fa8:	bf18      	it	ne
 8000faa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fae:	d1ca      	bne.n	8000f46 <__aeabi_fdiv+0xba>
 8000fb0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fb4:	f47f af5c 	bne.w	8000e70 <__aeabi_fmul+0x14c>
 8000fb8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fbc:	f47f af3c 	bne.w	8000e38 <__aeabi_fmul+0x114>
 8000fc0:	e75f      	b.n	8000e82 <__aeabi_fmul+0x15e>
 8000fc2:	bf00      	nop

08000fc4 <__gesf2>:
 8000fc4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fc8:	e006      	b.n	8000fd8 <__cmpsf2+0x4>
 8000fca:	bf00      	nop

08000fcc <__lesf2>:
 8000fcc:	f04f 0c01 	mov.w	ip, #1
 8000fd0:	e002      	b.n	8000fd8 <__cmpsf2+0x4>
 8000fd2:	bf00      	nop

08000fd4 <__cmpsf2>:
 8000fd4:	f04f 0c01 	mov.w	ip, #1
 8000fd8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fdc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fe0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fe4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fe8:	bf18      	it	ne
 8000fea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fee:	d011      	beq.n	8001014 <__cmpsf2+0x40>
 8000ff0:	b001      	add	sp, #4
 8000ff2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ff6:	bf18      	it	ne
 8000ff8:	ea90 0f01 	teqne	r0, r1
 8000ffc:	bf58      	it	pl
 8000ffe:	ebb2 0003 	subspl.w	r0, r2, r3
 8001002:	bf88      	it	hi
 8001004:	17c8      	asrhi	r0, r1, #31
 8001006:	bf38      	it	cc
 8001008:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800100c:	bf18      	it	ne
 800100e:	f040 0001 	orrne.w	r0, r0, #1
 8001012:	4770      	bx	lr
 8001014:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001018:	d102      	bne.n	8001020 <__cmpsf2+0x4c>
 800101a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800101e:	d105      	bne.n	800102c <__cmpsf2+0x58>
 8001020:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001024:	d1e4      	bne.n	8000ff0 <__cmpsf2+0x1c>
 8001026:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800102a:	d0e1      	beq.n	8000ff0 <__cmpsf2+0x1c>
 800102c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <__aeabi_cfrcmple>:
 8001034:	4684      	mov	ip, r0
 8001036:	4608      	mov	r0, r1
 8001038:	4661      	mov	r1, ip
 800103a:	e7ff      	b.n	800103c <__aeabi_cfcmpeq>

0800103c <__aeabi_cfcmpeq>:
 800103c:	b50f      	push	{r0, r1, r2, r3, lr}
 800103e:	f7ff ffc9 	bl	8000fd4 <__cmpsf2>
 8001042:	2800      	cmp	r0, #0
 8001044:	bf48      	it	mi
 8001046:	f110 0f00 	cmnmi.w	r0, #0
 800104a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800104c <__aeabi_fcmpeq>:
 800104c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001050:	f7ff fff4 	bl	800103c <__aeabi_cfcmpeq>
 8001054:	bf0c      	ite	eq
 8001056:	2001      	moveq	r0, #1
 8001058:	2000      	movne	r0, #0
 800105a:	f85d fb08 	ldr.w	pc, [sp], #8
 800105e:	bf00      	nop

08001060 <__aeabi_fcmplt>:
 8001060:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001064:	f7ff ffea 	bl	800103c <__aeabi_cfcmpeq>
 8001068:	bf34      	ite	cc
 800106a:	2001      	movcc	r0, #1
 800106c:	2000      	movcs	r0, #0
 800106e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001072:	bf00      	nop

08001074 <__aeabi_fcmple>:
 8001074:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001078:	f7ff ffe0 	bl	800103c <__aeabi_cfcmpeq>
 800107c:	bf94      	ite	ls
 800107e:	2001      	movls	r0, #1
 8001080:	2000      	movhi	r0, #0
 8001082:	f85d fb08 	ldr.w	pc, [sp], #8
 8001086:	bf00      	nop

08001088 <__aeabi_fcmpge>:
 8001088:	f84d ed08 	str.w	lr, [sp, #-8]!
 800108c:	f7ff ffd2 	bl	8001034 <__aeabi_cfrcmple>
 8001090:	bf94      	ite	ls
 8001092:	2001      	movls	r0, #1
 8001094:	2000      	movhi	r0, #0
 8001096:	f85d fb08 	ldr.w	pc, [sp], #8
 800109a:	bf00      	nop

0800109c <__aeabi_fcmpgt>:
 800109c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a0:	f7ff ffc8 	bl	8001034 <__aeabi_cfrcmple>
 80010a4:	bf34      	ite	cc
 80010a6:	2001      	movcc	r0, #1
 80010a8:	2000      	movcs	r0, #0
 80010aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ae:	bf00      	nop

080010b0 <__aeabi_fcmpun>:
 80010b0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010b4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010b8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010bc:	d102      	bne.n	80010c4 <__aeabi_fcmpun+0x14>
 80010be:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010c2:	d108      	bne.n	80010d6 <__aeabi_fcmpun+0x26>
 80010c4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010c8:	d102      	bne.n	80010d0 <__aeabi_fcmpun+0x20>
 80010ca:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ce:	d102      	bne.n	80010d6 <__aeabi_fcmpun+0x26>
 80010d0:	f04f 0000 	mov.w	r0, #0
 80010d4:	4770      	bx	lr
 80010d6:	f04f 0001 	mov.w	r0, #1
 80010da:	4770      	bx	lr

080010dc <__aeabi_f2uiz>:
 80010dc:	0042      	lsls	r2, r0, #1
 80010de:	d20e      	bcs.n	80010fe <__aeabi_f2uiz+0x22>
 80010e0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010e4:	d30b      	bcc.n	80010fe <__aeabi_f2uiz+0x22>
 80010e6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010ea:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010ee:	d409      	bmi.n	8001104 <__aeabi_f2uiz+0x28>
 80010f0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010f8:	fa23 f002 	lsr.w	r0, r3, r2
 80010fc:	4770      	bx	lr
 80010fe:	f04f 0000 	mov.w	r0, #0
 8001102:	4770      	bx	lr
 8001104:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001108:	d101      	bne.n	800110e <__aeabi_f2uiz+0x32>
 800110a:	0242      	lsls	r2, r0, #9
 800110c:	d102      	bne.n	8001114 <__aeabi_f2uiz+0x38>
 800110e:	f04f 30ff 	mov.w	r0, #4294967295
 8001112:	4770      	bx	lr
 8001114:	f04f 0000 	mov.w	r0, #0
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop

0800111c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001120:	f004 fa8c 	bl	800563c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001124:	f000 f862 	bl	80011ec <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001128:	f000 faac 	bl	8001684 <MX_GPIO_Init>
	MX_DMA_Init();
 800112c:	f000 fa8c 	bl	8001648 <MX_DMA_Init>
	MX_TIM4_Init();
 8001130:	f000 fa02 	bl	8001538 <MX_TIM4_Init>
	MX_I2C2_Init();
 8001134:	f000 f920 	bl	8001378 <MX_I2C2_Init>
	MX_TIM1_Init();
 8001138:	f000 f94c 	bl	80013d4 <MX_TIM1_Init>
	MX_TIM3_Init();
 800113c:	f000 f9a2 	bl	8001484 <MX_TIM3_Init>
	MX_ADC1_Init();
 8001140:	f000 f8b0 	bl	80012a4 <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001144:	2108      	movs	r1, #8
 8001146:	481f      	ldr	r0, [pc, #124]	; (80011c4 <main+0xa8>)
 8001148:	f007 f864 	bl	8008214 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800114c:	210c      	movs	r1, #12
 800114e:	481d      	ldr	r0, [pc, #116]	; (80011c4 <main+0xa8>)
 8001150:	f007 f860 	bl	8008214 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001154:	213c      	movs	r1, #60	; 0x3c
 8001156:	481b      	ldr	r0, [pc, #108]	; (80011c4 <main+0xa8>)
 8001158:	f007 f9a0 	bl	800849c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 800115c:	213c      	movs	r1, #60	; 0x3c
 800115e:	481a      	ldr	r0, [pc, #104]	; (80011c8 <main+0xac>)
 8001160:	f007 f99c 	bl	800849c <HAL_TIM_Encoder_Start>
	HAL_GPIO_WritePin(STBY, GPIO_PIN_SET);
 8001164:	2201      	movs	r2, #1
 8001166:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800116a:	4818      	ldr	r0, [pc, #96]	; (80011cc <main+0xb0>)
 800116c:	f005 fb2e 	bl	80067cc <HAL_GPIO_WritePin>
	powerA = TIM4->CCR3 = 30000;
 8001170:	4b17      	ldr	r3, [pc, #92]	; (80011d0 <main+0xb4>)
 8001172:	f247 5230 	movw	r2, #30000	; 0x7530
 8001176:	63da      	str	r2, [r3, #60]	; 0x3c
 8001178:	4b16      	ldr	r3, [pc, #88]	; (80011d4 <main+0xb8>)
 800117a:	f247 5230 	movw	r2, #30000	; 0x7530
 800117e:	601a      	str	r2, [r3, #0]
	powerB = TIM4->CCR4 = 30000;
 8001180:	4b13      	ldr	r3, [pc, #76]	; (80011d0 <main+0xb4>)
 8001182:	f247 5230 	movw	r2, #30000	; 0x7530
 8001186:	641a      	str	r2, [r3, #64]	; 0x40
 8001188:	4b13      	ldr	r3, [pc, #76]	; (80011d8 <main+0xbc>)
 800118a:	f247 5230 	movw	r2, #30000	; 0x7530
 800118e:	601a      	str	r2, [r3, #0]
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_buf, ADC_BUF_LEN);
 8001190:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001194:	4911      	ldr	r1, [pc, #68]	; (80011dc <main+0xc0>)
 8001196:	4812      	ldr	r0, [pc, #72]	; (80011e0 <main+0xc4>)
 8001198:	f004 fbae 	bl	80058f8 <HAL_ADC_Start_DMA>
	while (MPU9255_Init(&hi2c2) == 1)
 800119c:	bf00      	nop
 800119e:	4811      	ldr	r0, [pc, #68]	; (80011e4 <main+0xc8>)
 80011a0:	f000 fb62 	bl	8001868 <MPU9255_Init>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d0f9      	beq.n	800119e <main+0x82>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		/* USER CODE BEGIN 3 */
		readAll(&hi2c2, &MPU9255);
 80011aa:	490f      	ldr	r1, [pc, #60]	; (80011e8 <main+0xcc>)
 80011ac:	480d      	ldr	r0, [pc, #52]	; (80011e4 <main+0xc8>)
 80011ae:	f000 fbdb 	bl	8001968 <readAll>
		MPU9255.yaw;
		//runMotor(ADELANTE, MOTOR_A);
		//runMotor(ADELANTE, MOTOR_B);
		//sprintf(MSG, TIM4->CNT);
		runForward(powerA, powerB);
 80011b2:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <main+0xb8>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a08      	ldr	r2, [pc, #32]	; (80011d8 <main+0xbc>)
 80011b8:	6812      	ldr	r2, [r2, #0]
 80011ba:	4611      	mov	r1, r2
 80011bc:	4618      	mov	r0, r3
 80011be:	f000 fada 	bl	8001776 <runForward>
		readAll(&hi2c2, &MPU9255);
 80011c2:	e7f2      	b.n	80011aa <main+0x8e>
 80011c4:	200001fc 	.word	0x200001fc
 80011c8:	2000016c 	.word	0x2000016c
 80011cc:	40010800 	.word	0x40010800
 80011d0:	40000800 	.word	0x40000800
 80011d4:	20004278 	.word	0x20004278
 80011d8:	2000427c 	.word	0x2000427c
 80011dc:	20000248 	.word	0x20000248
 80011e0:	200000a4 	.word	0x200000a4
 80011e4:	20000118 	.word	0x20000118
 80011e8:	20004248 	.word	0x20004248

080011ec <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b094      	sub	sp, #80	; 0x50
 80011f0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80011f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011f6:	2228      	movs	r2, #40	; 0x28
 80011f8:	2100      	movs	r1, #0
 80011fa:	4618      	mov	r0, r3
 80011fc:	f008 ff80 	bl	800a100 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001200:	f107 0314 	add.w	r3, r7, #20
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]
 800120e:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8001210:	1d3b      	adds	r3, r7, #4
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]
 8001218:	609a      	str	r2, [r3, #8]
 800121a:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800121c:	2301      	movs	r3, #1
 800121e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001220:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001224:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001226:	2300      	movs	r3, #0
 8001228:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800122a:	2301      	movs	r3, #1
 800122c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800122e:	2302      	movs	r3, #2
 8001230:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001232:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001236:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001238:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800123c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800123e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001242:	4618      	mov	r0, r3
 8001244:	f006 fada 	bl	80077fc <HAL_RCC_OscConfig>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <SystemClock_Config+0x66>
		Error_Handler();
 800124e:	f000 fa8d 	bl	800176c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001252:	230f      	movs	r3, #15
 8001254:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001256:	2302      	movs	r3, #2
 8001258:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800125a:	2300      	movs	r3, #0
 800125c:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800125e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001262:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001264:	2300      	movs	r3, #0
 8001266:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001268:	f107 0314 	add.w	r3, r7, #20
 800126c:	2102      	movs	r1, #2
 800126e:	4618      	mov	r0, r3
 8001270:	f006 fd46 	bl	8007d00 <HAL_RCC_ClockConfig>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <SystemClock_Config+0x92>
		Error_Handler();
 800127a:	f000 fa77 	bl	800176c <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800127e:	2302      	movs	r3, #2
 8001280:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001282:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001286:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001288:	1d3b      	adds	r3, r7, #4
 800128a:	4618      	mov	r0, r3
 800128c:	f006 febc 	bl	8008008 <HAL_RCCEx_PeriphCLKConfig>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <SystemClock_Config+0xae>
		Error_Handler();
 8001296:	f000 fa69 	bl	800176c <Error_Handler>
	}
}
 800129a:	bf00      	nop
 800129c:	3750      	adds	r7, #80	; 0x50
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
	...

080012a4 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80012aa:	1d3b      	adds	r3, r7, #4
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 80012b4:	4b2e      	ldr	r3, [pc, #184]	; (8001370 <MX_ADC1_Init+0xcc>)
 80012b6:	4a2f      	ldr	r2, [pc, #188]	; (8001374 <MX_ADC1_Init+0xd0>)
 80012b8:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80012ba:	4b2d      	ldr	r3, [pc, #180]	; (8001370 <MX_ADC1_Init+0xcc>)
 80012bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012c0:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = ENABLE;
 80012c2:	4b2b      	ldr	r3, [pc, #172]	; (8001370 <MX_ADC1_Init+0xcc>)
 80012c4:	2201      	movs	r2, #1
 80012c6:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012c8:	4b29      	ldr	r3, [pc, #164]	; (8001370 <MX_ADC1_Init+0xcc>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012ce:	4b28      	ldr	r3, [pc, #160]	; (8001370 <MX_ADC1_Init+0xcc>)
 80012d0:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80012d4:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012d6:	4b26      	ldr	r3, [pc, #152]	; (8001370 <MX_ADC1_Init+0xcc>)
 80012d8:	2200      	movs	r2, #0
 80012da:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 4;
 80012dc:	4b24      	ldr	r3, [pc, #144]	; (8001370 <MX_ADC1_Init+0xcc>)
 80012de:	2204      	movs	r2, #4
 80012e0:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80012e2:	4823      	ldr	r0, [pc, #140]	; (8001370 <MX_ADC1_Init+0xcc>)
 80012e4:	f004 fa30 	bl	8005748 <HAL_ADC_Init>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_ADC1_Init+0x4e>
		Error_Handler();
 80012ee:	f000 fa3d 	bl	800176c <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 80012f2:	2300      	movs	r3, #0
 80012f4:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80012f6:	2301      	movs	r3, #1
 80012f8:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80012fa:	2300      	movs	r3, #0
 80012fc:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80012fe:	1d3b      	adds	r3, r7, #4
 8001300:	4619      	mov	r1, r3
 8001302:	481b      	ldr	r0, [pc, #108]	; (8001370 <MX_ADC1_Init+0xcc>)
 8001304:	f004 fbe8 	bl	8005ad8 <HAL_ADC_ConfigChannel>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_ADC1_Init+0x6e>
		Error_Handler();
 800130e:	f000 fa2d 	bl	800176c <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8001312:	2301      	movs	r3, #1
 8001314:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8001316:	2302      	movs	r3, #2
 8001318:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800131a:	1d3b      	adds	r3, r7, #4
 800131c:	4619      	mov	r1, r3
 800131e:	4814      	ldr	r0, [pc, #80]	; (8001370 <MX_ADC1_Init+0xcc>)
 8001320:	f004 fbda 	bl	8005ad8 <HAL_ADC_ConfigChannel>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_ADC1_Init+0x8a>
		Error_Handler();
 800132a:	f000 fa1f 	bl	800176c <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 800132e:	2302      	movs	r3, #2
 8001330:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_3;
 8001332:	2303      	movs	r3, #3
 8001334:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001336:	1d3b      	adds	r3, r7, #4
 8001338:	4619      	mov	r1, r3
 800133a:	480d      	ldr	r0, [pc, #52]	; (8001370 <MX_ADC1_Init+0xcc>)
 800133c:	f004 fbcc 	bl	8005ad8 <HAL_ADC_ConfigChannel>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_ADC1_Init+0xa6>
		Error_Handler();
 8001346:	f000 fa11 	bl	800176c <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 800134a:	2303      	movs	r3, #3
 800134c:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_4;
 800134e:	2304      	movs	r3, #4
 8001350:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001352:	1d3b      	adds	r3, r7, #4
 8001354:	4619      	mov	r1, r3
 8001356:	4806      	ldr	r0, [pc, #24]	; (8001370 <MX_ADC1_Init+0xcc>)
 8001358:	f004 fbbe 	bl	8005ad8 <HAL_ADC_ConfigChannel>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_ADC1_Init+0xc2>
		Error_Handler();
 8001362:	f000 fa03 	bl	800176c <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001366:	bf00      	nop
 8001368:	3710      	adds	r7, #16
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	200000a4 	.word	0x200000a4
 8001374:	40012400 	.word	0x40012400

08001378 <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 800137c:	4b12      	ldr	r3, [pc, #72]	; (80013c8 <MX_I2C2_Init+0x50>)
 800137e:	4a13      	ldr	r2, [pc, #76]	; (80013cc <MX_I2C2_Init+0x54>)
 8001380:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 400000;
 8001382:	4b11      	ldr	r3, [pc, #68]	; (80013c8 <MX_I2C2_Init+0x50>)
 8001384:	4a12      	ldr	r2, [pc, #72]	; (80013d0 <MX_I2C2_Init+0x58>)
 8001386:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001388:	4b0f      	ldr	r3, [pc, #60]	; (80013c8 <MX_I2C2_Init+0x50>)
 800138a:	2200      	movs	r2, #0
 800138c:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 800138e:	4b0e      	ldr	r3, [pc, #56]	; (80013c8 <MX_I2C2_Init+0x50>)
 8001390:	2200      	movs	r2, #0
 8001392:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001394:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <MX_I2C2_Init+0x50>)
 8001396:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800139a:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800139c:	4b0a      	ldr	r3, [pc, #40]	; (80013c8 <MX_I2C2_Init+0x50>)
 800139e:	2200      	movs	r2, #0
 80013a0:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 80013a2:	4b09      	ldr	r3, [pc, #36]	; (80013c8 <MX_I2C2_Init+0x50>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013a8:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <MX_I2C2_Init+0x50>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013ae:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <MX_I2C2_Init+0x50>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 80013b4:	4804      	ldr	r0, [pc, #16]	; (80013c8 <MX_I2C2_Init+0x50>)
 80013b6:	f005 fa21 	bl	80067fc <HAL_I2C_Init>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_I2C2_Init+0x4c>
		Error_Handler();
 80013c0:	f000 f9d4 	bl	800176c <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 80013c4:	bf00      	nop
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	20000118 	.word	0x20000118
 80013cc:	40005800 	.word	0x40005800
 80013d0:	00061a80 	.word	0x00061a80

080013d4 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b08c      	sub	sp, #48	; 0x30
 80013d8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 80013da:	f107 030c 	add.w	r3, r7, #12
 80013de:	2224      	movs	r2, #36	; 0x24
 80013e0:	2100      	movs	r1, #0
 80013e2:	4618      	mov	r0, r3
 80013e4:	f008 fe8c 	bl	800a100 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80013e8:	1d3b      	adds	r3, r7, #4
 80013ea:	2200      	movs	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80013f0:	4b22      	ldr	r3, [pc, #136]	; (800147c <MX_TIM1_Init+0xa8>)
 80013f2:	4a23      	ldr	r2, [pc, #140]	; (8001480 <MX_TIM1_Init+0xac>)
 80013f4:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 80013f6:	4b21      	ldr	r3, [pc, #132]	; (800147c <MX_TIM1_Init+0xa8>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013fc:	4b1f      	ldr	r3, [pc, #124]	; (800147c <MX_TIM1_Init+0xa8>)
 80013fe:	2200      	movs	r2, #0
 8001400:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8001402:	4b1e      	ldr	r3, [pc, #120]	; (800147c <MX_TIM1_Init+0xa8>)
 8001404:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001408:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800140a:	4b1c      	ldr	r3, [pc, #112]	; (800147c <MX_TIM1_Init+0xa8>)
 800140c:	2200      	movs	r2, #0
 800140e:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001410:	4b1a      	ldr	r3, [pc, #104]	; (800147c <MX_TIM1_Init+0xa8>)
 8001412:	2200      	movs	r2, #0
 8001414:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001416:	4b19      	ldr	r3, [pc, #100]	; (800147c <MX_TIM1_Init+0xa8>)
 8001418:	2200      	movs	r2, #0
 800141a:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800141c:	2303      	movs	r3, #3
 800141e:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001420:	2300      	movs	r3, #0
 8001422:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001424:	2301      	movs	r3, #1
 8001426:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001428:	2300      	movs	r3, #0
 800142a:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 10;
 800142c:	230a      	movs	r3, #10
 800142e:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001430:	2300      	movs	r3, #0
 8001432:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001434:	2301      	movs	r3, #1
 8001436:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001438:	2300      	movs	r3, #0
 800143a:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 800143c:	2300      	movs	r3, #0
 800143e:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK) {
 8001440:	f107 030c 	add.w	r3, r7, #12
 8001444:	4619      	mov	r1, r3
 8001446:	480d      	ldr	r0, [pc, #52]	; (800147c <MX_TIM1_Init+0xa8>)
 8001448:	f006 ff86 	bl	8008358 <HAL_TIM_Encoder_Init>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_TIM1_Init+0x82>
		Error_Handler();
 8001452:	f000 f98b 	bl	800176c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001456:	2300      	movs	r3, #0
 8001458:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800145a:	2300      	movs	r3, #0
 800145c:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800145e:	1d3b      	adds	r3, r7, #4
 8001460:	4619      	mov	r1, r3
 8001462:	4806      	ldr	r0, [pc, #24]	; (800147c <MX_TIM1_Init+0xa8>)
 8001464:	f007 fb74 	bl	8008b50 <HAL_TIMEx_MasterConfigSynchronization>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_TIM1_Init+0x9e>
			!= HAL_OK) {
		Error_Handler();
 800146e:	f000 f97d 	bl	800176c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8001472:	bf00      	nop
 8001474:	3730      	adds	r7, #48	; 0x30
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	2000016c 	.word	0x2000016c
 8001480:	40012c00 	.word	0x40012c00

08001484 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8001484:	b580      	push	{r7, lr}
 8001486:	b08a      	sub	sp, #40	; 0x28
 8001488:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800148a:	f107 0320 	add.w	r3, r7, #32
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001494:	1d3b      	adds	r3, r7, #4
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	605a      	str	r2, [r3, #4]
 800149c:	609a      	str	r2, [r3, #8]
 800149e:	60da      	str	r2, [r3, #12]
 80014a0:	611a      	str	r2, [r3, #16]
 80014a2:	615a      	str	r2, [r3, #20]
 80014a4:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80014a6:	4b22      	ldr	r3, [pc, #136]	; (8001530 <MX_TIM3_Init+0xac>)
 80014a8:	4a22      	ldr	r2, [pc, #136]	; (8001534 <MX_TIM3_Init+0xb0>)
 80014aa:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 80014ac:	4b20      	ldr	r3, [pc, #128]	; (8001530 <MX_TIM3_Init+0xac>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014b2:	4b1f      	ldr	r3, [pc, #124]	; (8001530 <MX_TIM3_Init+0xac>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 80014b8:	4b1d      	ldr	r3, [pc, #116]	; (8001530 <MX_TIM3_Init+0xac>)
 80014ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014be:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014c0:	4b1b      	ldr	r3, [pc, #108]	; (8001530 <MX_TIM3_Init+0xac>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014c6:	4b1a      	ldr	r3, [pc, #104]	; (8001530 <MX_TIM3_Init+0xac>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 80014cc:	4818      	ldr	r0, [pc, #96]	; (8001530 <MX_TIM3_Init+0xac>)
 80014ce:	f006 fe51 	bl	8008174 <HAL_TIM_PWM_Init>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_TIM3_Init+0x58>
		Error_Handler();
 80014d8:	f000 f948 	bl	800176c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014dc:	2300      	movs	r3, #0
 80014de:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014e0:	2300      	movs	r3, #0
 80014e2:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80014e4:	f107 0320 	add.w	r3, r7, #32
 80014e8:	4619      	mov	r1, r3
 80014ea:	4811      	ldr	r0, [pc, #68]	; (8001530 <MX_TIM3_Init+0xac>)
 80014ec:	f007 fb30 	bl	8008b50 <HAL_TIMEx_MasterConfigSynchronization>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_TIM3_Init+0x76>
			!= HAL_OK) {
		Error_Handler();
 80014f6:	f000 f939 	bl	800176c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014fa:	2360      	movs	r3, #96	; 0x60
 80014fc:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80014fe:	2300      	movs	r3, #0
 8001500:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001502:	2300      	movs	r3, #0
 8001504:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001506:	2300      	movs	r3, #0
 8001508:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 800150a:	1d3b      	adds	r3, r7, #4
 800150c:	2204      	movs	r2, #4
 800150e:	4619      	mov	r1, r3
 8001510:	4807      	ldr	r0, [pc, #28]	; (8001530 <MX_TIM3_Init+0xac>)
 8001512:	f007 f851 	bl	80085b8 <HAL_TIM_PWM_ConfigChannel>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <MX_TIM3_Init+0x9c>
			!= HAL_OK) {
		Error_Handler();
 800151c:	f000 f926 	bl	800176c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8001520:	4803      	ldr	r0, [pc, #12]	; (8001530 <MX_TIM3_Init+0xac>)
 8001522:	f003 ff25 	bl	8005370 <HAL_TIM_MspPostInit>

}
 8001526:	bf00      	nop
 8001528:	3728      	adds	r7, #40	; 0x28
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	200001b4 	.word	0x200001b4
 8001534:	40000400 	.word	0x40000400

08001538 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8001538:	b580      	push	{r7, lr}
 800153a:	b092      	sub	sp, #72	; 0x48
 800153c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 800153e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001542:	2224      	movs	r2, #36	; 0x24
 8001544:	2100      	movs	r1, #0
 8001546:	4618      	mov	r0, r3
 8001548:	f008 fdda 	bl	800a100 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800154c:	f107 031c 	add.w	r3, r7, #28
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001556:	463b      	mov	r3, r7
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	605a      	str	r2, [r3, #4]
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	60da      	str	r2, [r3, #12]
 8001562:	611a      	str	r2, [r3, #16]
 8001564:	615a      	str	r2, [r3, #20]
 8001566:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8001568:	4b35      	ldr	r3, [pc, #212]	; (8001640 <MX_TIM4_Init+0x108>)
 800156a:	4a36      	ldr	r2, [pc, #216]	; (8001644 <MX_TIM4_Init+0x10c>)
 800156c:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 800156e:	4b34      	ldr	r3, [pc, #208]	; (8001640 <MX_TIM4_Init+0x108>)
 8001570:	2200      	movs	r2, #0
 8001572:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001574:	4b32      	ldr	r3, [pc, #200]	; (8001640 <MX_TIM4_Init+0x108>)
 8001576:	2200      	movs	r2, #0
 8001578:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 800157a:	4b31      	ldr	r3, [pc, #196]	; (8001640 <MX_TIM4_Init+0x108>)
 800157c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001580:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001582:	4b2f      	ldr	r3, [pc, #188]	; (8001640 <MX_TIM4_Init+0x108>)
 8001584:	2200      	movs	r2, #0
 8001586:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001588:	4b2d      	ldr	r3, [pc, #180]	; (8001640 <MX_TIM4_Init+0x108>)
 800158a:	2280      	movs	r2, #128	; 0x80
 800158c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 800158e:	482c      	ldr	r0, [pc, #176]	; (8001640 <MX_TIM4_Init+0x108>)
 8001590:	f006 fdf0 	bl	8008174 <HAL_TIM_PWM_Init>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_TIM4_Init+0x66>
		Error_Handler();
 800159a:	f000 f8e7 	bl	800176c <Error_Handler>
	}
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800159e:	2303      	movs	r3, #3
 80015a0:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80015a2:	2300      	movs	r3, #0
 80015a4:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80015a6:	2301      	movs	r3, #1
 80015a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80015aa:	2300      	movs	r3, #0
 80015ac:	633b      	str	r3, [r7, #48]	; 0x30
	sConfig.IC1Filter = 10;
 80015ae:	230a      	movs	r3, #10
 80015b0:	637b      	str	r3, [r7, #52]	; 0x34
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80015b2:	2300      	movs	r3, #0
 80015b4:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80015b6:	2301      	movs	r3, #1
 80015b8:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80015ba:	2300      	movs	r3, #0
 80015bc:	643b      	str	r3, [r7, #64]	; 0x40
	sConfig.IC2Filter = 0;
 80015be:	2300      	movs	r3, #0
 80015c0:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK) {
 80015c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c6:	4619      	mov	r1, r3
 80015c8:	481d      	ldr	r0, [pc, #116]	; (8001640 <MX_TIM4_Init+0x108>)
 80015ca:	f006 fec5 	bl	8008358 <HAL_TIM_Encoder_Init>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_TIM4_Init+0xa0>
		Error_Handler();
 80015d4:	f000 f8ca 	bl	800176c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015d8:	2300      	movs	r3, #0
 80015da:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015dc:	2300      	movs	r3, #0
 80015de:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 80015e0:	f107 031c 	add.w	r3, r7, #28
 80015e4:	4619      	mov	r1, r3
 80015e6:	4816      	ldr	r0, [pc, #88]	; (8001640 <MX_TIM4_Init+0x108>)
 80015e8:	f007 fab2 	bl	8008b50 <HAL_TIMEx_MasterConfigSynchronization>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_TIM4_Init+0xbe>
			!= HAL_OK) {
		Error_Handler();
 80015f2:	f000 f8bb 	bl	800176c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015f6:	2360      	movs	r3, #96	; 0x60
 80015f8:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 80015fa:	2300      	movs	r3, #0
 80015fc:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015fe:	2300      	movs	r3, #0
 8001600:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001602:	2300      	movs	r3, #0
 8001604:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3)
 8001606:	463b      	mov	r3, r7
 8001608:	2208      	movs	r2, #8
 800160a:	4619      	mov	r1, r3
 800160c:	480c      	ldr	r0, [pc, #48]	; (8001640 <MX_TIM4_Init+0x108>)
 800160e:	f006 ffd3 	bl	80085b8 <HAL_TIM_PWM_ConfigChannel>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_TIM4_Init+0xe4>
			!= HAL_OK) {
		Error_Handler();
 8001618:	f000 f8a8 	bl	800176c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4)
 800161c:	463b      	mov	r3, r7
 800161e:	220c      	movs	r2, #12
 8001620:	4619      	mov	r1, r3
 8001622:	4807      	ldr	r0, [pc, #28]	; (8001640 <MX_TIM4_Init+0x108>)
 8001624:	f006 ffc8 	bl	80085b8 <HAL_TIM_PWM_ConfigChannel>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MX_TIM4_Init+0xfa>
			!= HAL_OK) {
		Error_Handler();
 800162e:	f000 f89d 	bl	800176c <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 8001632:	4803      	ldr	r0, [pc, #12]	; (8001640 <MX_TIM4_Init+0x108>)
 8001634:	f003 fe9c 	bl	8005370 <HAL_TIM_MspPostInit>

}
 8001638:	bf00      	nop
 800163a:	3748      	adds	r7, #72	; 0x48
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	200001fc 	.word	0x200001fc
 8001644:	40000800 	.word	0x40000800

08001648 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800164e:	4b0c      	ldr	r3, [pc, #48]	; (8001680 <MX_DMA_Init+0x38>)
 8001650:	695b      	ldr	r3, [r3, #20]
 8001652:	4a0b      	ldr	r2, [pc, #44]	; (8001680 <MX_DMA_Init+0x38>)
 8001654:	f043 0301 	orr.w	r3, r3, #1
 8001658:	6153      	str	r3, [r2, #20]
 800165a:	4b09      	ldr	r3, [pc, #36]	; (8001680 <MX_DMA_Init+0x38>)
 800165c:	695b      	ldr	r3, [r3, #20]
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	607b      	str	r3, [r7, #4]
 8001664:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001666:	2200      	movs	r2, #0
 8001668:	2100      	movs	r1, #0
 800166a:	200b      	movs	r0, #11
 800166c:	f004 fd05 	bl	800607a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001670:	200b      	movs	r0, #11
 8001672:	f004 fd1e 	bl	80060b2 <HAL_NVIC_EnableIRQ>

}
 8001676:	bf00      	nop
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40021000 	.word	0x40021000

08001684 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001684:	b580      	push	{r7, lr}
 8001686:	b088      	sub	sp, #32
 8001688:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800168a:	f107 0310 	add.w	r3, r7, #16
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	605a      	str	r2, [r3, #4]
 8001694:	609a      	str	r2, [r3, #8]
 8001696:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001698:	4b28      	ldr	r3, [pc, #160]	; (800173c <MX_GPIO_Init+0xb8>)
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	4a27      	ldr	r2, [pc, #156]	; (800173c <MX_GPIO_Init+0xb8>)
 800169e:	f043 0320 	orr.w	r3, r3, #32
 80016a2:	6193      	str	r3, [r2, #24]
 80016a4:	4b25      	ldr	r3, [pc, #148]	; (800173c <MX_GPIO_Init+0xb8>)
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	f003 0320 	and.w	r3, r3, #32
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80016b0:	4b22      	ldr	r3, [pc, #136]	; (800173c <MX_GPIO_Init+0xb8>)
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	4a21      	ldr	r2, [pc, #132]	; (800173c <MX_GPIO_Init+0xb8>)
 80016b6:	f043 0304 	orr.w	r3, r3, #4
 80016ba:	6193      	str	r3, [r2, #24]
 80016bc:	4b1f      	ldr	r3, [pc, #124]	; (800173c <MX_GPIO_Init+0xb8>)
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	f003 0304 	and.w	r3, r3, #4
 80016c4:	60bb      	str	r3, [r7, #8]
 80016c6:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80016c8:	4b1c      	ldr	r3, [pc, #112]	; (800173c <MX_GPIO_Init+0xb8>)
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	4a1b      	ldr	r2, [pc, #108]	; (800173c <MX_GPIO_Init+0xb8>)
 80016ce:	f043 0308 	orr.w	r3, r3, #8
 80016d2:	6193      	str	r3, [r2, #24]
 80016d4:	4b19      	ldr	r3, [pc, #100]	; (800173c <MX_GPIO_Init+0xb8>)
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	f003 0308 	and.w	r3, r3, #8
 80016dc:	607b      	str	r3, [r7, #4]
 80016de:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 80016e0:	2200      	movs	r2, #0
 80016e2:	f24f 0118 	movw	r1, #61464	; 0xf018
 80016e6:	4816      	ldr	r0, [pc, #88]	; (8001740 <MX_GPIO_Init+0xbc>)
 80016e8:	f005 f870 	bl	80067cc <HAL_GPIO_WritePin>
	BTN1_Pin | BTN2_Pin | BTN3_Pin | LED_Pin | AIN1_Pin | AIN2_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, BIN2_Pin | BIN1_Pin | STBY_Pin, GPIO_PIN_RESET);
 80016ec:	2200      	movs	r2, #0
 80016ee:	f44f 4118 	mov.w	r1, #38912	; 0x9800
 80016f2:	4814      	ldr	r0, [pc, #80]	; (8001744 <MX_GPIO_Init+0xc0>)
 80016f4:	f005 f86a 	bl	80067cc <HAL_GPIO_WritePin>

	/*Configure GPIO pins : BTN1_Pin BTN2_Pin BTN3_Pin LED_Pin
	 AIN1_Pin AIN2_Pin */
	GPIO_InitStruct.Pin = BTN1_Pin | BTN2_Pin | BTN3_Pin | LED_Pin | AIN1_Pin
 80016f8:	f24f 0318 	movw	r3, #61464	; 0xf018
 80016fc:	613b      	str	r3, [r7, #16]
			| AIN2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016fe:	2301      	movs	r3, #1
 8001700:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	2300      	movs	r3, #0
 8001704:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001706:	2302      	movs	r3, #2
 8001708:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800170a:	f107 0310 	add.w	r3, r7, #16
 800170e:	4619      	mov	r1, r3
 8001710:	480b      	ldr	r0, [pc, #44]	; (8001740 <MX_GPIO_Init+0xbc>)
 8001712:	f004 fed7 	bl	80064c4 <HAL_GPIO_Init>

	/*Configure GPIO pins : BIN2_Pin BIN1_Pin STBY_Pin */
	GPIO_InitStruct.Pin = BIN2_Pin | BIN1_Pin | STBY_Pin;
 8001716:	f44f 4318 	mov.w	r3, #38912	; 0x9800
 800171a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800171c:	2301      	movs	r3, #1
 800171e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001724:	2302      	movs	r3, #2
 8001726:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001728:	f107 0310 	add.w	r3, r7, #16
 800172c:	4619      	mov	r1, r3
 800172e:	4805      	ldr	r0, [pc, #20]	; (8001744 <MX_GPIO_Init+0xc0>)
 8001730:	f004 fec8 	bl	80064c4 <HAL_GPIO_Init>

}
 8001734:	bf00      	nop
 8001736:	3720      	adds	r7, #32
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40021000 	.word	0x40021000
 8001740:	40010c00 	.word	0x40010c00
 8001744:	40010800 	.word	0x40010800

08001748 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
	values = readSensor(adc_buf);
 8001750:	4804      	ldr	r0, [pc, #16]	; (8001764 <HAL_ADC_ConvCpltCallback+0x1c>)
 8001752:	f003 fb9b 	bl	8004e8c <readSensor>
 8001756:	4603      	mov	r3, r0
 8001758:	4a03      	ldr	r2, [pc, #12]	; (8001768 <HAL_ADC_ConvCpltCallback+0x20>)
 800175a:	6013      	str	r3, [r2, #0]
}
 800175c:	bf00      	nop
 800175e:	3708      	adds	r7, #8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	20000248 	.word	0x20000248
 8001768:	20000244 	.word	0x20000244

0800176c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001770:	b672      	cpsid	i
}
 8001772:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001774:	e7fe      	b.n	8001774 <Error_Handler+0x8>

08001776 <runForward>:
float calcularDistancia(int counter) {
  return ((counter- 32767.5) * 2.51 / 10);
}


void runForward() {
 8001776:	b580      	push	{r7, lr}
 8001778:	af00      	add	r7, sp, #0
	runMotor(ADELANTE, MOTOR_A);
 800177a:	2100      	movs	r1, #0
 800177c:	2000      	movs	r0, #0
 800177e:	f000 f807 	bl	8001790 <runMotor>
	runMotor(ADELANTE, MOTOR_B);
 8001782:	2101      	movs	r1, #1
 8001784:	2000      	movs	r0, #0
 8001786:	f000 f803 	bl	8001790 <runMotor>
}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
	...

08001790 <runMotor>:
	} else {
		TIM4->CCR3 = power;
	}
}

void runMotor(int dir, int motor) {
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
	switch (dir) {
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2b05      	cmp	r3, #5
 800179e:	d03f      	beq.n	8001820 <runMotor+0x90>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2b05      	cmp	r3, #5
 80017a4:	dc57      	bgt.n	8001856 <runMotor+0xc6>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d003      	beq.n	80017b4 <runMotor+0x24>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d01b      	beq.n	80017ea <runMotor+0x5a>
			HAL_GPIO_WritePin(BIN1, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(BIN2, GPIO_PIN_RESET);
		}
		break;
	}
}
 80017b2:	e050      	b.n	8001856 <runMotor+0xc6>
		if (motor == MOTOR_A) {
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d10a      	bne.n	80017d0 <runMotor+0x40>
			HAL_GPIO_WritePin(AIN1, GPIO_PIN_SET);
 80017ba:	2201      	movs	r2, #1
 80017bc:	2108      	movs	r1, #8
 80017be:	4828      	ldr	r0, [pc, #160]	; (8001860 <runMotor+0xd0>)
 80017c0:	f005 f804 	bl	80067cc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(AIN2, GPIO_PIN_RESET);
 80017c4:	2200      	movs	r2, #0
 80017c6:	2110      	movs	r1, #16
 80017c8:	4825      	ldr	r0, [pc, #148]	; (8001860 <runMotor+0xd0>)
 80017ca:	f004 ffff 	bl	80067cc <HAL_GPIO_WritePin>
		break;
 80017ce:	e042      	b.n	8001856 <runMotor+0xc6>
			HAL_GPIO_WritePin(BIN1, GPIO_PIN_SET);
 80017d0:	2201      	movs	r2, #1
 80017d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017d6:	4823      	ldr	r0, [pc, #140]	; (8001864 <runMotor+0xd4>)
 80017d8:	f004 fff8 	bl	80067cc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BIN2, GPIO_PIN_RESET);
 80017dc:	2200      	movs	r2, #0
 80017de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017e2:	4820      	ldr	r0, [pc, #128]	; (8001864 <runMotor+0xd4>)
 80017e4:	f004 fff2 	bl	80067cc <HAL_GPIO_WritePin>
		break;
 80017e8:	e035      	b.n	8001856 <runMotor+0xc6>
		if (motor == MOTOR_A) {
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d10a      	bne.n	8001806 <runMotor+0x76>
			HAL_GPIO_WritePin(AIN1, GPIO_PIN_RESET);
 80017f0:	2200      	movs	r2, #0
 80017f2:	2108      	movs	r1, #8
 80017f4:	481a      	ldr	r0, [pc, #104]	; (8001860 <runMotor+0xd0>)
 80017f6:	f004 ffe9 	bl	80067cc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(AIN2, GPIO_PIN_SET);
 80017fa:	2201      	movs	r2, #1
 80017fc:	2110      	movs	r1, #16
 80017fe:	4818      	ldr	r0, [pc, #96]	; (8001860 <runMotor+0xd0>)
 8001800:	f004 ffe4 	bl	80067cc <HAL_GPIO_WritePin>
		break;
 8001804:	e027      	b.n	8001856 <runMotor+0xc6>
			HAL_GPIO_WritePin(BIN1, GPIO_PIN_RESET);
 8001806:	2200      	movs	r2, #0
 8001808:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800180c:	4815      	ldr	r0, [pc, #84]	; (8001864 <runMotor+0xd4>)
 800180e:	f004 ffdd 	bl	80067cc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BIN2, GPIO_PIN_SET);
 8001812:	2201      	movs	r2, #1
 8001814:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001818:	4812      	ldr	r0, [pc, #72]	; (8001864 <runMotor+0xd4>)
 800181a:	f004 ffd7 	bl	80067cc <HAL_GPIO_WritePin>
		break;
 800181e:	e01a      	b.n	8001856 <runMotor+0xc6>
		if (motor == MOTOR_A) {
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d10a      	bne.n	800183c <runMotor+0xac>
			HAL_GPIO_WritePin(AIN1, GPIO_PIN_RESET);
 8001826:	2200      	movs	r2, #0
 8001828:	2108      	movs	r1, #8
 800182a:	480d      	ldr	r0, [pc, #52]	; (8001860 <runMotor+0xd0>)
 800182c:	f004 ffce 	bl	80067cc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(AIN2, GPIO_PIN_RESET);
 8001830:	2200      	movs	r2, #0
 8001832:	2110      	movs	r1, #16
 8001834:	480a      	ldr	r0, [pc, #40]	; (8001860 <runMotor+0xd0>)
 8001836:	f004 ffc9 	bl	80067cc <HAL_GPIO_WritePin>
		break;
 800183a:	e00b      	b.n	8001854 <runMotor+0xc4>
			HAL_GPIO_WritePin(BIN1, GPIO_PIN_RESET);
 800183c:	2200      	movs	r2, #0
 800183e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001842:	4808      	ldr	r0, [pc, #32]	; (8001864 <runMotor+0xd4>)
 8001844:	f004 ffc2 	bl	80067cc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BIN2, GPIO_PIN_RESET);
 8001848:	2200      	movs	r2, #0
 800184a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800184e:	4805      	ldr	r0, [pc, #20]	; (8001864 <runMotor+0xd4>)
 8001850:	f004 ffbc 	bl	80067cc <HAL_GPIO_WritePin>
		break;
 8001854:	bf00      	nop
}
 8001856:	bf00      	nop
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40010c00 	.word	0x40010c00
 8001864:	40010800 	.word	0x40010800

08001868 <MPU9255_Init>:

//===================================================================================================================
//====== MAIN INIT FUNCTION
//===================================================================================================================

uint8_t MPU9255_Init(I2C_HandleTypeDef *I2Cx){
 8001868:	b580      	push	{r7, lr}
 800186a:	b088      	sub	sp, #32
 800186c:	af04      	add	r7, sp, #16
 800186e:	6078      	str	r0, [r7, #4]
	//pre-def. vars
	uint8_t readData;
	uint8_t writeData;
	printf("**************************** \r\n");
 8001870:	4833      	ldr	r0, [pc, #204]	; (8001940 <MPU9255_Init+0xd8>)
 8001872:	f008 fcd3 	bl	800a21c <puts>
	printf("MPU9250 STM32 Implementation \r\n");
 8001876:	4833      	ldr	r0, [pc, #204]	; (8001944 <MPU9255_Init+0xdc>)
 8001878:	f008 fcd0 	bl	800a21c <puts>
	printf("**************************** \r\n");
 800187c:	4830      	ldr	r0, [pc, #192]	; (8001940 <MPU9255_Init+0xd8>)
 800187e:	f008 fccd 	bl	800a21c <puts>

	//read MPU9255 WHOAMI
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, WHO_AM_I_MPU9250, 1, &readData, 1, i2c_timeout);
 8001882:	2364      	movs	r3, #100	; 0x64
 8001884:	9302      	str	r3, [sp, #8]
 8001886:	2301      	movs	r3, #1
 8001888:	9301      	str	r3, [sp, #4]
 800188a:	f107 030f 	add.w	r3, r7, #15
 800188e:	9300      	str	r3, [sp, #0]
 8001890:	2301      	movs	r3, #1
 8001892:	2275      	movs	r2, #117	; 0x75
 8001894:	21d0      	movs	r1, #208	; 0xd0
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f005 f9ee 	bl	8006c78 <HAL_I2C_Mem_Read>

	if (SerialDebugA) {printf("MPU -WHO AM I- is: (Must return 113) %d\r\n", readData);}
 800189c:	7bfb      	ldrb	r3, [r7, #15]
 800189e:	4619      	mov	r1, r3
 80018a0:	4829      	ldr	r0, [pc, #164]	; (8001948 <MPU9255_Init+0xe0>)
 80018a2:	f008 fc35 	bl	800a110 <iprintf>

	if (readData == 113) {
 80018a6:	7bfb      	ldrb	r3, [r7, #15]
 80018a8:	2b71      	cmp	r3, #113	; 0x71
 80018aa:	d143      	bne.n	8001934 <MPU9255_Init+0xcc>

		//Start by performing self test and reporting values
		MPU9250SelfTest(I2Cx, SelfTest);
 80018ac:	4927      	ldr	r1, [pc, #156]	; (800194c <MPU9255_Init+0xe4>)
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f001 fd22 	bl	80032f8 <MPU9250SelfTest>

		//Calibrate gyro and accelerometers, load biases in bias registers
		calibrateMPU9250(I2Cx, gyroBias, accelBias);
 80018b4:	4a26      	ldr	r2, [pc, #152]	; (8001950 <MPU9255_Init+0xe8>)
 80018b6:	4927      	ldr	r1, [pc, #156]	; (8001954 <MPU9255_Init+0xec>)
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f001 f87f 	bl	80029bc <calibrateMPU9250>
		HAL_Delay(1000);
 80018be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018c2:	f003 ff1d 	bl	8005700 <HAL_Delay>

		//init Gyro and Accelerometer
		initMPU9250(I2Cx);
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f000 ff92 	bl	80027f0 <initMPU9250>

		//enable Mag bypass
		writeData = 0x22;
 80018cc:	2322      	movs	r3, #34	; 0x22
 80018ce:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, INT_PIN_CFG, 1, &writeData, 1, i2c_timeout);
 80018d0:	2364      	movs	r3, #100	; 0x64
 80018d2:	9302      	str	r3, [sp, #8]
 80018d4:	2301      	movs	r3, #1
 80018d6:	9301      	str	r3, [sp, #4]
 80018d8:	f107 030e 	add.w	r3, r7, #14
 80018dc:	9300      	str	r3, [sp, #0]
 80018de:	2301      	movs	r3, #1
 80018e0:	2237      	movs	r2, #55	; 0x37
 80018e2:	21d0      	movs	r1, #208	; 0xd0
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f005 f8cd 	bl	8006a84 <HAL_I2C_Mem_Write>

		//Read the WHO_AM_I register of the magnetometer
		HAL_I2C_Mem_Read(I2Cx, AK8963_ADDRESS, AK8963_WHO_AM_I, 1, &readData, 1, i2c_timeout);// Read WHO_AM_I register for AK8963
 80018ea:	2364      	movs	r3, #100	; 0x64
 80018ec:	9302      	str	r3, [sp, #8]
 80018ee:	2301      	movs	r3, #1
 80018f0:	9301      	str	r3, [sp, #4]
 80018f2:	f107 030f 	add.w	r3, r7, #15
 80018f6:	9300      	str	r3, [sp, #0]
 80018f8:	2301      	movs	r3, #1
 80018fa:	2200      	movs	r2, #0
 80018fc:	2118      	movs	r1, #24
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f005 f9ba 	bl	8006c78 <HAL_I2C_Mem_Read>
		if (SerialDebugA) {printf("MAG -WHO AM I- is: (Must return 72) %d\r\n", readData);}
 8001904:	7bfb      	ldrb	r3, [r7, #15]
 8001906:	4619      	mov	r1, r3
 8001908:	4813      	ldr	r0, [pc, #76]	; (8001958 <MPU9255_Init+0xf0>)
 800190a:	f008 fc01 	bl	800a110 <iprintf>
		HAL_Delay(1000);
 800190e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001912:	f003 fef5 	bl	8005700 <HAL_Delay>

		//Get magnetometer calibration from AK8963 ROM
		initAK8963(I2Cx, magCalibration);  // Initialize device for active mode read of magnetometer
 8001916:	4911      	ldr	r1, [pc, #68]	; (800195c <MPU9255_Init+0xf4>)
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f000 fd1d 	bl	8002358 <initAK8963>

		calibrateMag(I2Cx, magBias, magScale);
 800191e:	4a10      	ldr	r2, [pc, #64]	; (8001960 <MPU9255_Init+0xf8>)
 8001920:	4910      	ldr	r1, [pc, #64]	; (8001964 <MPU9255_Init+0xfc>)
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f000 fdf0 	bl	8002508 <calibrateMag>

		HAL_Delay(1000);
 8001928:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800192c:	f003 fee8 	bl	8005700 <HAL_Delay>
		return 0;
 8001930:	2300      	movs	r3, #0
 8001932:	e000      	b.n	8001936 <MPU9255_Init+0xce>
	}
	return 1; // Loop forever if communication doesn't happen
 8001934:	2301      	movs	r3, #1
}
 8001936:	4618      	mov	r0, r3
 8001938:	3710      	adds	r7, #16
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	0800b140 	.word	0x0800b140
 8001944:	0800b160 	.word	0x0800b160
 8001948:	0800b180 	.word	0x0800b180
 800194c:	200042e0 	.word	0x200042e0
 8001950:	200042bc 	.word	0x200042bc
 8001954:	200042b0 	.word	0x200042b0
 8001958:	0800b1ac 	.word	0x0800b1ac
 800195c:	200042a4 	.word	0x200042a4
 8001960:	200042d4 	.word	0x200042d4
 8001964:	200042c8 	.word	0x200042c8

08001968 <readAll>:

void readAll(I2C_HandleTypeDef *I2Cx, MPU9255_t*DataStruct) {
 8001968:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800196c:	b08b      	sub	sp, #44	; 0x2c
 800196e:	af06      	add	r7, sp, #24
 8001970:	6078      	str	r0, [r7, #4]
 8001972:	6039      	str	r1, [r7, #0]
	uint8_t Data;

	// If intPin goes high, all data registers have new data
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, INT_STATUS, 1, &Data, 1, i2c_timeout);
 8001974:	2364      	movs	r3, #100	; 0x64
 8001976:	9302      	str	r3, [sp, #8]
 8001978:	2301      	movs	r3, #1
 800197a:	9301      	str	r3, [sp, #4]
 800197c:	f107 030f 	add.w	r3, r7, #15
 8001980:	9300      	str	r3, [sp, #0]
 8001982:	2301      	movs	r3, #1
 8001984:	223a      	movs	r2, #58	; 0x3a
 8001986:	21d0      	movs	r1, #208	; 0xd0
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f005 f975 	bl	8006c78 <HAL_I2C_Mem_Read>
	if (Data & 0x01) {  // On interrupt, check if data ready interrupt
 800198e:	7bfb      	ldrb	r3, [r7, #15]
 8001990:	f003 0301 	and.w	r3, r3, #1
 8001994:	2b00      	cmp	r3, #0
 8001996:	f000 8123 	beq.w	8001be0 <readAll+0x278>
		readAccelData(I2Cx, accelCount);  // Read the x/y/z adc values
 800199a:	4997      	ldr	r1, [pc, #604]	; (8001bf8 <readAll+0x290>)
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f000 fc29 	bl	80021f4 <readAccelData>
		getAres();
 80019a2:	f000 fbf9 	bl	8002198 <getAres>

		// Now we'll calculate the accleration value into actual g's
		ax = (float)accelCount[0]*aRes; // - accelBias[0];  // get actual g value, this depends on scale being set
 80019a6:	4b94      	ldr	r3, [pc, #592]	; (8001bf8 <readAll+0x290>)
 80019a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff f965 	bl	8000c7c <__aeabi_i2f>
 80019b2:	4602      	mov	r2, r0
 80019b4:	4b91      	ldr	r3, [pc, #580]	; (8001bfc <readAll+0x294>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4619      	mov	r1, r3
 80019ba:	4610      	mov	r0, r2
 80019bc:	f7ff f9b2 	bl	8000d24 <__aeabi_fmul>
 80019c0:	4603      	mov	r3, r0
 80019c2:	461a      	mov	r2, r3
 80019c4:	4b8e      	ldr	r3, [pc, #568]	; (8001c00 <readAll+0x298>)
 80019c6:	601a      	str	r2, [r3, #0]
		ay = (float)accelCount[1]*aRes; // - accelBias[1];
 80019c8:	4b8b      	ldr	r3, [pc, #556]	; (8001bf8 <readAll+0x290>)
 80019ca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7ff f954 	bl	8000c7c <__aeabi_i2f>
 80019d4:	4602      	mov	r2, r0
 80019d6:	4b89      	ldr	r3, [pc, #548]	; (8001bfc <readAll+0x294>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4619      	mov	r1, r3
 80019dc:	4610      	mov	r0, r2
 80019de:	f7ff f9a1 	bl	8000d24 <__aeabi_fmul>
 80019e2:	4603      	mov	r3, r0
 80019e4:	461a      	mov	r2, r3
 80019e6:	4b87      	ldr	r3, [pc, #540]	; (8001c04 <readAll+0x29c>)
 80019e8:	601a      	str	r2, [r3, #0]
		az = (float)accelCount[2]*aRes; // - accelBias[2];
 80019ea:	4b83      	ldr	r3, [pc, #524]	; (8001bf8 <readAll+0x290>)
 80019ec:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff f943 	bl	8000c7c <__aeabi_i2f>
 80019f6:	4602      	mov	r2, r0
 80019f8:	4b80      	ldr	r3, [pc, #512]	; (8001bfc <readAll+0x294>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4619      	mov	r1, r3
 80019fe:	4610      	mov	r0, r2
 8001a00:	f7ff f990 	bl	8000d24 <__aeabi_fmul>
 8001a04:	4603      	mov	r3, r0
 8001a06:	461a      	mov	r2, r3
 8001a08:	4b7f      	ldr	r3, [pc, #508]	; (8001c08 <readAll+0x2a0>)
 8001a0a:	601a      	str	r2, [r3, #0]

		DataStruct->AccelX = ax;
 8001a0c:	4b7c      	ldr	r3, [pc, #496]	; (8001c00 <readAll+0x298>)
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	601a      	str	r2, [r3, #0]
		DataStruct->AccelY = ay;
 8001a14:	4b7b      	ldr	r3, [pc, #492]	; (8001c04 <readAll+0x29c>)
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	605a      	str	r2, [r3, #4]
		DataStruct->AccelZ = az;
 8001a1c:	4b7a      	ldr	r3, [pc, #488]	; (8001c08 <readAll+0x2a0>)
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	609a      	str	r2, [r3, #8]

		readGyroData(I2Cx, gyroCount);  // Read the x/y/z adc values
 8001a24:	4979      	ldr	r1, [pc, #484]	; (8001c0c <readAll+0x2a4>)
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f000 fc17 	bl	800225a <readGyroData>
		getGres();
 8001a2c:	f000 fb82 	bl	8002134 <getGres>

		// Calculate the gyro value into actual degrees per second
		gx = (float)gyroCount[0]*gRes;  // get actual gyro value, this depends on scale being set
 8001a30:	4b76      	ldr	r3, [pc, #472]	; (8001c0c <readAll+0x2a4>)
 8001a32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff f920 	bl	8000c7c <__aeabi_i2f>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	4b74      	ldr	r3, [pc, #464]	; (8001c10 <readAll+0x2a8>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4619      	mov	r1, r3
 8001a44:	4610      	mov	r0, r2
 8001a46:	f7ff f96d 	bl	8000d24 <__aeabi_fmul>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	4b71      	ldr	r3, [pc, #452]	; (8001c14 <readAll+0x2ac>)
 8001a50:	601a      	str	r2, [r3, #0]
		gy = (float)gyroCount[1]*gRes;
 8001a52:	4b6e      	ldr	r3, [pc, #440]	; (8001c0c <readAll+0x2a4>)
 8001a54:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff f90f 	bl	8000c7c <__aeabi_i2f>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	4b6b      	ldr	r3, [pc, #428]	; (8001c10 <readAll+0x2a8>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4619      	mov	r1, r3
 8001a66:	4610      	mov	r0, r2
 8001a68:	f7ff f95c 	bl	8000d24 <__aeabi_fmul>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	461a      	mov	r2, r3
 8001a70:	4b69      	ldr	r3, [pc, #420]	; (8001c18 <readAll+0x2b0>)
 8001a72:	601a      	str	r2, [r3, #0]
		gz = (float)gyroCount[2]*gRes;
 8001a74:	4b65      	ldr	r3, [pc, #404]	; (8001c0c <readAll+0x2a4>)
 8001a76:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff f8fe 	bl	8000c7c <__aeabi_i2f>
 8001a80:	4602      	mov	r2, r0
 8001a82:	4b63      	ldr	r3, [pc, #396]	; (8001c10 <readAll+0x2a8>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4619      	mov	r1, r3
 8001a88:	4610      	mov	r0, r2
 8001a8a:	f7ff f94b 	bl	8000d24 <__aeabi_fmul>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	461a      	mov	r2, r3
 8001a92:	4b62      	ldr	r3, [pc, #392]	; (8001c1c <readAll+0x2b4>)
 8001a94:	601a      	str	r2, [r3, #0]

		DataStruct->GyroX = gx;
 8001a96:	4b5f      	ldr	r3, [pc, #380]	; (8001c14 <readAll+0x2ac>)
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	60da      	str	r2, [r3, #12]
		DataStruct->GyroY = gy;
 8001a9e:	4b5e      	ldr	r3, [pc, #376]	; (8001c18 <readAll+0x2b0>)
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	611a      	str	r2, [r3, #16]
		DataStruct->GyroZ = gz;
 8001aa6:	4b5d      	ldr	r3, [pc, #372]	; (8001c1c <readAll+0x2b4>)
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	615a      	str	r2, [r3, #20]

		readMagData(I2Cx, magCount);  // Read the x/y/z adc values
 8001aae:	495c      	ldr	r1, [pc, #368]	; (8001c20 <readAll+0x2b8>)
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f000 fc05 	bl	80022c0 <readMagData>
		getMres();
 8001ab6:	f000 fb1f 	bl	80020f8 <getMres>

		// Calculate the magnetometer values in milliGauss
		// Include factory calibration per data sheet and user environmental corrections
		mx = (float)magCount[0]*mRes*magCalibration[0] - magBias[0];  // get actual magnetometer value, this depends on scale being set
 8001aba:	4b59      	ldr	r3, [pc, #356]	; (8001c20 <readAll+0x2b8>)
 8001abc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff f8db 	bl	8000c7c <__aeabi_i2f>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	4b56      	ldr	r3, [pc, #344]	; (8001c24 <readAll+0x2bc>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4619      	mov	r1, r3
 8001ace:	4610      	mov	r0, r2
 8001ad0:	f7ff f928 	bl	8000d24 <__aeabi_fmul>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	4b53      	ldr	r3, [pc, #332]	; (8001c28 <readAll+0x2c0>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4619      	mov	r1, r3
 8001ade:	4610      	mov	r0, r2
 8001ae0:	f7ff f920 	bl	8000d24 <__aeabi_fmul>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	4b50      	ldr	r3, [pc, #320]	; (8001c2c <readAll+0x2c4>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4619      	mov	r1, r3
 8001aee:	4610      	mov	r0, r2
 8001af0:	f7ff f80e 	bl	8000b10 <__aeabi_fsub>
 8001af4:	4603      	mov	r3, r0
 8001af6:	461a      	mov	r2, r3
 8001af8:	4b4d      	ldr	r3, [pc, #308]	; (8001c30 <readAll+0x2c8>)
 8001afa:	601a      	str	r2, [r3, #0]
		my = (float)magCount[1]*mRes*magCalibration[1] - magBias[1];
 8001afc:	4b48      	ldr	r3, [pc, #288]	; (8001c20 <readAll+0x2b8>)
 8001afe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7ff f8ba 	bl	8000c7c <__aeabi_i2f>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	4b46      	ldr	r3, [pc, #280]	; (8001c24 <readAll+0x2bc>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4610      	mov	r0, r2
 8001b12:	f7ff f907 	bl	8000d24 <__aeabi_fmul>
 8001b16:	4603      	mov	r3, r0
 8001b18:	461a      	mov	r2, r3
 8001b1a:	4b43      	ldr	r3, [pc, #268]	; (8001c28 <readAll+0x2c0>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4610      	mov	r0, r2
 8001b22:	f7ff f8ff 	bl	8000d24 <__aeabi_fmul>
 8001b26:	4603      	mov	r3, r0
 8001b28:	461a      	mov	r2, r3
 8001b2a:	4b40      	ldr	r3, [pc, #256]	; (8001c2c <readAll+0x2c4>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4610      	mov	r0, r2
 8001b32:	f7fe ffed 	bl	8000b10 <__aeabi_fsub>
 8001b36:	4603      	mov	r3, r0
 8001b38:	461a      	mov	r2, r3
 8001b3a:	4b3e      	ldr	r3, [pc, #248]	; (8001c34 <readAll+0x2cc>)
 8001b3c:	601a      	str	r2, [r3, #0]
		mz = (float)magCount[2]*mRes*magCalibration[2] - magBias[2];
 8001b3e:	4b38      	ldr	r3, [pc, #224]	; (8001c20 <readAll+0x2b8>)
 8001b40:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff f899 	bl	8000c7c <__aeabi_i2f>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	4b35      	ldr	r3, [pc, #212]	; (8001c24 <readAll+0x2bc>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4619      	mov	r1, r3
 8001b52:	4610      	mov	r0, r2
 8001b54:	f7ff f8e6 	bl	8000d24 <__aeabi_fmul>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	4b32      	ldr	r3, [pc, #200]	; (8001c28 <readAll+0x2c0>)
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	4619      	mov	r1, r3
 8001b62:	4610      	mov	r0, r2
 8001b64:	f7ff f8de 	bl	8000d24 <__aeabi_fmul>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	4b2f      	ldr	r3, [pc, #188]	; (8001c2c <readAll+0x2c4>)
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	4619      	mov	r1, r3
 8001b72:	4610      	mov	r0, r2
 8001b74:	f7fe ffcc 	bl	8000b10 <__aeabi_fsub>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	4b2e      	ldr	r3, [pc, #184]	; (8001c38 <readAll+0x2d0>)
 8001b7e:	601a      	str	r2, [r3, #0]
		mx *= magScale[0];
 8001b80:	4b2e      	ldr	r3, [pc, #184]	; (8001c3c <readAll+0x2d4>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a2a      	ldr	r2, [pc, #168]	; (8001c30 <readAll+0x2c8>)
 8001b86:	6812      	ldr	r2, [r2, #0]
 8001b88:	4611      	mov	r1, r2
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7ff f8ca 	bl	8000d24 <__aeabi_fmul>
 8001b90:	4603      	mov	r3, r0
 8001b92:	461a      	mov	r2, r3
 8001b94:	4b26      	ldr	r3, [pc, #152]	; (8001c30 <readAll+0x2c8>)
 8001b96:	601a      	str	r2, [r3, #0]
		my *= magScale[1];
 8001b98:	4b28      	ldr	r3, [pc, #160]	; (8001c3c <readAll+0x2d4>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	4a25      	ldr	r2, [pc, #148]	; (8001c34 <readAll+0x2cc>)
 8001b9e:	6812      	ldr	r2, [r2, #0]
 8001ba0:	4611      	mov	r1, r2
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff f8be 	bl	8000d24 <__aeabi_fmul>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	461a      	mov	r2, r3
 8001bac:	4b21      	ldr	r3, [pc, #132]	; (8001c34 <readAll+0x2cc>)
 8001bae:	601a      	str	r2, [r3, #0]
		mz *= magScale[2];
 8001bb0:	4b22      	ldr	r3, [pc, #136]	; (8001c3c <readAll+0x2d4>)
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	4a20      	ldr	r2, [pc, #128]	; (8001c38 <readAll+0x2d0>)
 8001bb6:	6812      	ldr	r2, [r2, #0]
 8001bb8:	4611      	mov	r1, r2
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7ff f8b2 	bl	8000d24 <__aeabi_fmul>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	4b1c      	ldr	r3, [pc, #112]	; (8001c38 <readAll+0x2d0>)
 8001bc6:	601a      	str	r2, [r3, #0]

		DataStruct->MagX = mx;
 8001bc8:	4b19      	ldr	r3, [pc, #100]	; (8001c30 <readAll+0x2c8>)
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	619a      	str	r2, [r3, #24]
		DataStruct->MagY = my;
 8001bd0:	4b18      	ldr	r3, [pc, #96]	; (8001c34 <readAll+0x2cc>)
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	61da      	str	r2, [r3, #28]
		DataStruct->MagZ = mz;
 8001bd8:	4b17      	ldr	r3, [pc, #92]	; (8001c38 <readAll+0x2d0>)
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	621a      	str	r2, [r3, #32]
	}

	//Now = __HAL_TIM_GET_COUNTER(&htim1);
	Now = HAL_GetTick();
 8001be0:	f003 fd84 	bl	80056ec <HAL_GetTick>
 8001be4:	4603      	mov	r3, r0
 8001be6:	4a16      	ldr	r2, [pc, #88]	; (8001c40 <readAll+0x2d8>)
 8001be8:	6013      	str	r3, [r2, #0]
	deltat = ((Now - lastUpdate)/1000.0f); // set integration time by time elapsed since last filter update
 8001bea:	4b15      	ldr	r3, [pc, #84]	; (8001c40 <readAll+0x2d8>)
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	4b15      	ldr	r3, [pc, #84]	; (8001c44 <readAll+0x2dc>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	e027      	b.n	8001c48 <readAll+0x2e0>
 8001bf8:	2000428c 	.word	0x2000428c
 8001bfc:	20004280 	.word	0x20004280
 8001c00:	20004314 	.word	0x20004314
 8001c04:	20004318 	.word	0x20004318
 8001c08:	2000431c 	.word	0x2000431c
 8001c0c:	20004294 	.word	0x20004294
 8001c10:	20004284 	.word	0x20004284
 8001c14:	20004320 	.word	0x20004320
 8001c18:	20004324 	.word	0x20004324
 8001c1c:	20004328 	.word	0x20004328
 8001c20:	2000429c 	.word	0x2000429c
 8001c24:	20004288 	.word	0x20004288
 8001c28:	200042a4 	.word	0x200042a4
 8001c2c:	200042c8 	.word	0x200042c8
 8001c30:	2000432c 	.word	0x2000432c
 8001c34:	20004330 	.word	0x20004330
 8001c38:	20004334 	.word	0x20004334
 8001c3c:	200042d4 	.word	0x200042d4
 8001c40:	20004310 	.word	0x20004310
 8001c44:	2000430c 	.word	0x2000430c
 8001c48:	f7ff f814 	bl	8000c74 <__aeabi_ui2f>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	499c      	ldr	r1, [pc, #624]	; (8001ec0 <readAll+0x558>)
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff f91b 	bl	8000e8c <__aeabi_fdiv>
 8001c56:	4603      	mov	r3, r0
 8001c58:	461a      	mov	r2, r3
 8001c5a:	4b9a      	ldr	r3, [pc, #616]	; (8001ec4 <readAll+0x55c>)
 8001c5c:	601a      	str	r2, [r3, #0]
	lastUpdate = Now;
 8001c5e:	4b9a      	ldr	r3, [pc, #616]	; (8001ec8 <readAll+0x560>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a9a      	ldr	r2, [pc, #616]	; (8001ecc <readAll+0x564>)
 8001c64:	6013      	str	r3, [r2, #0]
	sum += deltat; // sum for averaging filter update rate
 8001c66:	4b9a      	ldr	r3, [pc, #616]	; (8001ed0 <readAll+0x568>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a96      	ldr	r2, [pc, #600]	; (8001ec4 <readAll+0x55c>)
 8001c6c:	6812      	ldr	r2, [r2, #0]
 8001c6e:	4611      	mov	r1, r2
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7fe ff4f 	bl	8000b14 <__addsf3>
 8001c76:	4603      	mov	r3, r0
 8001c78:	461a      	mov	r2, r3
 8001c7a:	4b95      	ldr	r3, [pc, #596]	; (8001ed0 <readAll+0x568>)
 8001c7c:	601a      	str	r2, [r3, #0]

	// Calculate quaternions based on Madgwick's filter
	//Since MPU9250's mag. and IMU modules are different and seperate (AK8963 and MPU6050), their...
	//...coordinate systems also different. So, to compensate this, order should be my - mx - mz
	//QuaternionUpdate(-ax, ay, az, gx*PI/180.0f, -gy*PI/180.0f, -gz*PI/180.0f,  my,  -mx, mz);
	QuaternionUpdate(ax, ay, az, gx*PI/180.0f, gy*PI/180.0f, gz*PI/180.0f,  my,  mx, mz);
 8001c7e:	4b95      	ldr	r3, [pc, #596]	; (8001ed4 <readAll+0x56c>)
 8001c80:	681c      	ldr	r4, [r3, #0]
 8001c82:	4b95      	ldr	r3, [pc, #596]	; (8001ed8 <readAll+0x570>)
 8001c84:	681d      	ldr	r5, [r3, #0]
 8001c86:	4b95      	ldr	r3, [pc, #596]	; (8001edc <readAll+0x574>)
 8001c88:	681e      	ldr	r6, [r3, #0]
 8001c8a:	4b95      	ldr	r3, [pc, #596]	; (8001ee0 <readAll+0x578>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7fe fbc2 	bl	8000418 <__aeabi_f2d>
 8001c94:	a388      	add	r3, pc, #544	; (adr r3, 8001eb8 <readAll+0x550>)
 8001c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c9a:	f7fe fc15 	bl	80004c8 <__aeabi_dmul>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	4610      	mov	r0, r2
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	f04f 0200 	mov.w	r2, #0
 8001caa:	4b8e      	ldr	r3, [pc, #568]	; (8001ee4 <readAll+0x57c>)
 8001cac:	f7fe fd36 	bl	800071c <__aeabi_ddiv>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	4610      	mov	r0, r2
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	f7fe fed6 	bl	8000a68 <__aeabi_d2f>
 8001cbc:	4681      	mov	r9, r0
 8001cbe:	4b8a      	ldr	r3, [pc, #552]	; (8001ee8 <readAll+0x580>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7fe fba8 	bl	8000418 <__aeabi_f2d>
 8001cc8:	a37b      	add	r3, pc, #492	; (adr r3, 8001eb8 <readAll+0x550>)
 8001cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cce:	f7fe fbfb 	bl	80004c8 <__aeabi_dmul>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	4610      	mov	r0, r2
 8001cd8:	4619      	mov	r1, r3
 8001cda:	f04f 0200 	mov.w	r2, #0
 8001cde:	4b81      	ldr	r3, [pc, #516]	; (8001ee4 <readAll+0x57c>)
 8001ce0:	f7fe fd1c 	bl	800071c <__aeabi_ddiv>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	4610      	mov	r0, r2
 8001cea:	4619      	mov	r1, r3
 8001cec:	f7fe febc 	bl	8000a68 <__aeabi_d2f>
 8001cf0:	4680      	mov	r8, r0
 8001cf2:	4b7e      	ldr	r3, [pc, #504]	; (8001eec <readAll+0x584>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7fe fb8e 	bl	8000418 <__aeabi_f2d>
 8001cfc:	a36e      	add	r3, pc, #440	; (adr r3, 8001eb8 <readAll+0x550>)
 8001cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d02:	f7fe fbe1 	bl	80004c8 <__aeabi_dmul>
 8001d06:	4602      	mov	r2, r0
 8001d08:	460b      	mov	r3, r1
 8001d0a:	4610      	mov	r0, r2
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	f04f 0200 	mov.w	r2, #0
 8001d12:	4b74      	ldr	r3, [pc, #464]	; (8001ee4 <readAll+0x57c>)
 8001d14:	f7fe fd02 	bl	800071c <__aeabi_ddiv>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	4610      	mov	r0, r2
 8001d1e:	4619      	mov	r1, r3
 8001d20:	f7fe fea2 	bl	8000a68 <__aeabi_d2f>
 8001d24:	4b72      	ldr	r3, [pc, #456]	; (8001ef0 <readAll+0x588>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a72      	ldr	r2, [pc, #456]	; (8001ef4 <readAll+0x58c>)
 8001d2a:	6812      	ldr	r2, [r2, #0]
 8001d2c:	4972      	ldr	r1, [pc, #456]	; (8001ef8 <readAll+0x590>)
 8001d2e:	6809      	ldr	r1, [r1, #0]
 8001d30:	9104      	str	r1, [sp, #16]
 8001d32:	9203      	str	r2, [sp, #12]
 8001d34:	9302      	str	r3, [sp, #8]
 8001d36:	9001      	str	r0, [sp, #4]
 8001d38:	f8cd 8000 	str.w	r8, [sp]
 8001d3c:	464b      	mov	r3, r9
 8001d3e:	4632      	mov	r2, r6
 8001d40:	4629      	mov	r1, r5
 8001d42:	4620      	mov	r0, r4
 8001d44:	f001 ffe0 	bl	8003d08 <QuaternionUpdate>

	// Convert quaternions to Euler angles
	a12 =   2.0f * (q[1] * q[2] + q[0] * q[3]);
 8001d48:	4b6c      	ldr	r3, [pc, #432]	; (8001efc <readAll+0x594>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	4a6b      	ldr	r2, [pc, #428]	; (8001efc <readAll+0x594>)
 8001d4e:	6892      	ldr	r2, [r2, #8]
 8001d50:	4611      	mov	r1, r2
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7fe ffe6 	bl	8000d24 <__aeabi_fmul>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	461c      	mov	r4, r3
 8001d5c:	4b67      	ldr	r3, [pc, #412]	; (8001efc <readAll+0x594>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a66      	ldr	r2, [pc, #408]	; (8001efc <readAll+0x594>)
 8001d62:	68d2      	ldr	r2, [r2, #12]
 8001d64:	4611      	mov	r1, r2
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7fe ffdc 	bl	8000d24 <__aeabi_fmul>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4620      	mov	r0, r4
 8001d72:	f7fe fecf 	bl	8000b14 <__addsf3>
 8001d76:	4603      	mov	r3, r0
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7fe feca 	bl	8000b14 <__addsf3>
 8001d80:	4603      	mov	r3, r0
 8001d82:	461a      	mov	r2, r3
 8001d84:	4b5e      	ldr	r3, [pc, #376]	; (8001f00 <readAll+0x598>)
 8001d86:	601a      	str	r2, [r3, #0]
	a22 =   q[0] * q[0] + q[1] * q[1] - q[2] * q[2] - q[3] * q[3];
 8001d88:	4b5c      	ldr	r3, [pc, #368]	; (8001efc <readAll+0x594>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a5b      	ldr	r2, [pc, #364]	; (8001efc <readAll+0x594>)
 8001d8e:	6812      	ldr	r2, [r2, #0]
 8001d90:	4611      	mov	r1, r2
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7fe ffc6 	bl	8000d24 <__aeabi_fmul>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	461c      	mov	r4, r3
 8001d9c:	4b57      	ldr	r3, [pc, #348]	; (8001efc <readAll+0x594>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	4a56      	ldr	r2, [pc, #344]	; (8001efc <readAll+0x594>)
 8001da2:	6852      	ldr	r2, [r2, #4]
 8001da4:	4611      	mov	r1, r2
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7fe ffbc 	bl	8000d24 <__aeabi_fmul>
 8001dac:	4603      	mov	r3, r0
 8001dae:	4619      	mov	r1, r3
 8001db0:	4620      	mov	r0, r4
 8001db2:	f7fe feaf 	bl	8000b14 <__addsf3>
 8001db6:	4603      	mov	r3, r0
 8001db8:	461c      	mov	r4, r3
 8001dba:	4b50      	ldr	r3, [pc, #320]	; (8001efc <readAll+0x594>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	4a4f      	ldr	r2, [pc, #316]	; (8001efc <readAll+0x594>)
 8001dc0:	6892      	ldr	r2, [r2, #8]
 8001dc2:	4611      	mov	r1, r2
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7fe ffad 	bl	8000d24 <__aeabi_fmul>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4620      	mov	r0, r4
 8001dd0:	f7fe fe9e 	bl	8000b10 <__aeabi_fsub>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	461c      	mov	r4, r3
 8001dd8:	4b48      	ldr	r3, [pc, #288]	; (8001efc <readAll+0x594>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	4a47      	ldr	r2, [pc, #284]	; (8001efc <readAll+0x594>)
 8001dde:	68d2      	ldr	r2, [r2, #12]
 8001de0:	4611      	mov	r1, r2
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7fe ff9e 	bl	8000d24 <__aeabi_fmul>
 8001de8:	4603      	mov	r3, r0
 8001dea:	4619      	mov	r1, r3
 8001dec:	4620      	mov	r0, r4
 8001dee:	f7fe fe8f 	bl	8000b10 <__aeabi_fsub>
 8001df2:	4603      	mov	r3, r0
 8001df4:	461a      	mov	r2, r3
 8001df6:	4b43      	ldr	r3, [pc, #268]	; (8001f04 <readAll+0x59c>)
 8001df8:	601a      	str	r2, [r3, #0]
	a31 =   2.0f * (q[0] * q[1] + q[2] * q[3]);
 8001dfa:	4b40      	ldr	r3, [pc, #256]	; (8001efc <readAll+0x594>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a3f      	ldr	r2, [pc, #252]	; (8001efc <readAll+0x594>)
 8001e00:	6852      	ldr	r2, [r2, #4]
 8001e02:	4611      	mov	r1, r2
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7fe ff8d 	bl	8000d24 <__aeabi_fmul>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	461c      	mov	r4, r3
 8001e0e:	4b3b      	ldr	r3, [pc, #236]	; (8001efc <readAll+0x594>)
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	4a3a      	ldr	r2, [pc, #232]	; (8001efc <readAll+0x594>)
 8001e14:	68d2      	ldr	r2, [r2, #12]
 8001e16:	4611      	mov	r1, r2
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7fe ff83 	bl	8000d24 <__aeabi_fmul>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	4619      	mov	r1, r3
 8001e22:	4620      	mov	r0, r4
 8001e24:	f7fe fe76 	bl	8000b14 <__addsf3>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7fe fe71 	bl	8000b14 <__addsf3>
 8001e32:	4603      	mov	r3, r0
 8001e34:	461a      	mov	r2, r3
 8001e36:	4b34      	ldr	r3, [pc, #208]	; (8001f08 <readAll+0x5a0>)
 8001e38:	601a      	str	r2, [r3, #0]
	a32 =   2.0f * (q[1] * q[3] - q[0] * q[2]);
 8001e3a:	4b30      	ldr	r3, [pc, #192]	; (8001efc <readAll+0x594>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	4a2f      	ldr	r2, [pc, #188]	; (8001efc <readAll+0x594>)
 8001e40:	68d2      	ldr	r2, [r2, #12]
 8001e42:	4611      	mov	r1, r2
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7fe ff6d 	bl	8000d24 <__aeabi_fmul>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	461c      	mov	r4, r3
 8001e4e:	4b2b      	ldr	r3, [pc, #172]	; (8001efc <readAll+0x594>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a2a      	ldr	r2, [pc, #168]	; (8001efc <readAll+0x594>)
 8001e54:	6892      	ldr	r2, [r2, #8]
 8001e56:	4611      	mov	r1, r2
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7fe ff63 	bl	8000d24 <__aeabi_fmul>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	4619      	mov	r1, r3
 8001e62:	4620      	mov	r0, r4
 8001e64:	f7fe fe54 	bl	8000b10 <__aeabi_fsub>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7fe fe51 	bl	8000b14 <__addsf3>
 8001e72:	4603      	mov	r3, r0
 8001e74:	461a      	mov	r2, r3
 8001e76:	4b25      	ldr	r3, [pc, #148]	; (8001f0c <readAll+0x5a4>)
 8001e78:	601a      	str	r2, [r3, #0]
	a33 =   q[0] * q[0] - q[1] * q[1] - q[2] * q[2] + q[3] * q[3];
 8001e7a:	4b20      	ldr	r3, [pc, #128]	; (8001efc <readAll+0x594>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a1f      	ldr	r2, [pc, #124]	; (8001efc <readAll+0x594>)
 8001e80:	6812      	ldr	r2, [r2, #0]
 8001e82:	4611      	mov	r1, r2
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7fe ff4d 	bl	8000d24 <__aeabi_fmul>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	461c      	mov	r4, r3
 8001e8e:	4b1b      	ldr	r3, [pc, #108]	; (8001efc <readAll+0x594>)
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	4a1a      	ldr	r2, [pc, #104]	; (8001efc <readAll+0x594>)
 8001e94:	6852      	ldr	r2, [r2, #4]
 8001e96:	4611      	mov	r1, r2
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7fe ff43 	bl	8000d24 <__aeabi_fmul>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4620      	mov	r0, r4
 8001ea4:	f7fe fe34 	bl	8000b10 <__aeabi_fsub>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	461c      	mov	r4, r3
 8001eac:	4b13      	ldr	r3, [pc, #76]	; (8001efc <readAll+0x594>)
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	4a12      	ldr	r2, [pc, #72]	; (8001efc <readAll+0x594>)
 8001eb2:	6892      	ldr	r2, [r2, #8]
 8001eb4:	e02c      	b.n	8001f10 <readAll+0x5a8>
 8001eb6:	bf00      	nop
 8001eb8:	35f80991 	.word	0x35f80991
 8001ebc:	40092492 	.word	0x40092492
 8001ec0:	447a0000 	.word	0x447a0000
 8001ec4:	20004304 	.word	0x20004304
 8001ec8:	20004310 	.word	0x20004310
 8001ecc:	2000430c 	.word	0x2000430c
 8001ed0:	20004308 	.word	0x20004308
 8001ed4:	20004314 	.word	0x20004314
 8001ed8:	20004318 	.word	0x20004318
 8001edc:	2000431c 	.word	0x2000431c
 8001ee0:	20004320 	.word	0x20004320
 8001ee4:	40668000 	.word	0x40668000
 8001ee8:	20004324 	.word	0x20004324
 8001eec:	20004328 	.word	0x20004328
 8001ef0:	20004330 	.word	0x20004330
 8001ef4:	2000432c 	.word	0x2000432c
 8001ef8:	20004334 	.word	0x20004334
 8001efc:	20000008 	.word	0x20000008
 8001f00:	20004344 	.word	0x20004344
 8001f04:	20004348 	.word	0x20004348
 8001f08:	2000434c 	.word	0x2000434c
 8001f0c:	20004350 	.word	0x20004350
 8001f10:	4611      	mov	r1, r2
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7fe ff06 	bl	8000d24 <__aeabi_fmul>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	4620      	mov	r0, r4
 8001f1e:	f7fe fdf7 	bl	8000b10 <__aeabi_fsub>
 8001f22:	4603      	mov	r3, r0
 8001f24:	461c      	mov	r4, r3
 8001f26:	4b62      	ldr	r3, [pc, #392]	; (80020b0 <readAll+0x748>)
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	4a61      	ldr	r2, [pc, #388]	; (80020b0 <readAll+0x748>)
 8001f2c:	68d2      	ldr	r2, [r2, #12]
 8001f2e:	4611      	mov	r1, r2
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7fe fef7 	bl	8000d24 <__aeabi_fmul>
 8001f36:	4603      	mov	r3, r0
 8001f38:	4619      	mov	r1, r3
 8001f3a:	4620      	mov	r0, r4
 8001f3c:	f7fe fdea 	bl	8000b14 <__addsf3>
 8001f40:	4603      	mov	r3, r0
 8001f42:	461a      	mov	r2, r3
 8001f44:	4b5b      	ldr	r3, [pc, #364]	; (80020b4 <readAll+0x74c>)
 8001f46:	601a      	str	r2, [r3, #0]

	pitch = -asinf(a32);
 8001f48:	4b5b      	ldr	r3, [pc, #364]	; (80020b8 <readAll+0x750>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f006 fec5 	bl	8008cdc <asinf>
 8001f52:	4603      	mov	r3, r0
 8001f54:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001f58:	4a58      	ldr	r2, [pc, #352]	; (80020bc <readAll+0x754>)
 8001f5a:	6013      	str	r3, [r2, #0]
	roll  = atan2f(a31, a33);
 8001f5c:	4b58      	ldr	r3, [pc, #352]	; (80020c0 <readAll+0x758>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a54      	ldr	r2, [pc, #336]	; (80020b4 <readAll+0x74c>)
 8001f62:	6812      	ldr	r2, [r2, #0]
 8001f64:	4611      	mov	r1, r2
 8001f66:	4618      	mov	r0, r3
 8001f68:	f006 fed8 	bl	8008d1c <atan2f>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	4a55      	ldr	r2, [pc, #340]	; (80020c4 <readAll+0x75c>)
 8001f70:	6013      	str	r3, [r2, #0]
	yaw   = atan2f(a12, a22);
 8001f72:	4b55      	ldr	r3, [pc, #340]	; (80020c8 <readAll+0x760>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a55      	ldr	r2, [pc, #340]	; (80020cc <readAll+0x764>)
 8001f78:	6812      	ldr	r2, [r2, #0]
 8001f7a:	4611      	mov	r1, r2
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f006 fecd 	bl	8008d1c <atan2f>
 8001f82:	4603      	mov	r3, r0
 8001f84:	4a52      	ldr	r2, [pc, #328]	; (80020d0 <readAll+0x768>)
 8001f86:	6013      	str	r3, [r2, #0]
	pitch *= 180.0f / PI;
 8001f88:	4b4c      	ldr	r3, [pc, #304]	; (80020bc <readAll+0x754>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7fe fa43 	bl	8000418 <__aeabi_f2d>
 8001f92:	a345      	add	r3, pc, #276	; (adr r3, 80020a8 <readAll+0x740>)
 8001f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f98:	f7fe fa96 	bl	80004c8 <__aeabi_dmul>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	4610      	mov	r0, r2
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	f7fe fd60 	bl	8000a68 <__aeabi_d2f>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	4a44      	ldr	r2, [pc, #272]	; (80020bc <readAll+0x754>)
 8001fac:	6013      	str	r3, [r2, #0]
	yaw   *= 180.0f / PI;
 8001fae:	4b48      	ldr	r3, [pc, #288]	; (80020d0 <readAll+0x768>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7fe fa30 	bl	8000418 <__aeabi_f2d>
 8001fb8:	a33b      	add	r3, pc, #236	; (adr r3, 80020a8 <readAll+0x740>)
 8001fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fbe:	f7fe fa83 	bl	80004c8 <__aeabi_dmul>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	4610      	mov	r0, r2
 8001fc8:	4619      	mov	r1, r3
 8001fca:	f7fe fd4d 	bl	8000a68 <__aeabi_d2f>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	4a3f      	ldr	r2, [pc, #252]	; (80020d0 <readAll+0x768>)
 8001fd2:	6013      	str	r3, [r2, #0]
	yaw   += 5.53f; // Declination
 8001fd4:	4b3e      	ldr	r3, [pc, #248]	; (80020d0 <readAll+0x768>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	493e      	ldr	r1, [pc, #248]	; (80020d4 <readAll+0x76c>)
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7fe fd9a 	bl	8000b14 <__addsf3>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	4b3a      	ldr	r3, [pc, #232]	; (80020d0 <readAll+0x768>)
 8001fe6:	601a      	str	r2, [r3, #0]

	if(yaw < 0) yaw   += 360.0f; // Ensure yaw stays between 0 and 360
 8001fe8:	4b39      	ldr	r3, [pc, #228]	; (80020d0 <readAll+0x768>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f04f 0100 	mov.w	r1, #0
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7ff f835 	bl	8001060 <__aeabi_fcmplt>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d009      	beq.n	8002010 <readAll+0x6a8>
 8001ffc:	4b34      	ldr	r3, [pc, #208]	; (80020d0 <readAll+0x768>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4935      	ldr	r1, [pc, #212]	; (80020d8 <readAll+0x770>)
 8002002:	4618      	mov	r0, r3
 8002004:	f7fe fd86 	bl	8000b14 <__addsf3>
 8002008:	4603      	mov	r3, r0
 800200a:	461a      	mov	r2, r3
 800200c:	4b30      	ldr	r3, [pc, #192]	; (80020d0 <readAll+0x768>)
 800200e:	601a      	str	r2, [r3, #0]
	roll  *= 180.0f / PI;
 8002010:	4b2c      	ldr	r3, [pc, #176]	; (80020c4 <readAll+0x75c>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4618      	mov	r0, r3
 8002016:	f7fe f9ff 	bl	8000418 <__aeabi_f2d>
 800201a:	a323      	add	r3, pc, #140	; (adr r3, 80020a8 <readAll+0x740>)
 800201c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002020:	f7fe fa52 	bl	80004c8 <__aeabi_dmul>
 8002024:	4602      	mov	r2, r0
 8002026:	460b      	mov	r3, r1
 8002028:	4610      	mov	r0, r2
 800202a:	4619      	mov	r1, r3
 800202c:	f7fe fd1c 	bl	8000a68 <__aeabi_d2f>
 8002030:	4603      	mov	r3, r0
 8002032:	4a24      	ldr	r2, [pc, #144]	; (80020c4 <readAll+0x75c>)
 8002034:	6013      	str	r3, [r2, #0]
	lin_ax = ax + a31;
 8002036:	4b29      	ldr	r3, [pc, #164]	; (80020dc <readAll+0x774>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a21      	ldr	r2, [pc, #132]	; (80020c0 <readAll+0x758>)
 800203c:	6812      	ldr	r2, [r2, #0]
 800203e:	4611      	mov	r1, r2
 8002040:	4618      	mov	r0, r3
 8002042:	f7fe fd67 	bl	8000b14 <__addsf3>
 8002046:	4603      	mov	r3, r0
 8002048:	461a      	mov	r2, r3
 800204a:	4b25      	ldr	r3, [pc, #148]	; (80020e0 <readAll+0x778>)
 800204c:	601a      	str	r2, [r3, #0]
	lin_ay = ay + a32;
 800204e:	4b25      	ldr	r3, [pc, #148]	; (80020e4 <readAll+0x77c>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a19      	ldr	r2, [pc, #100]	; (80020b8 <readAll+0x750>)
 8002054:	6812      	ldr	r2, [r2, #0]
 8002056:	4611      	mov	r1, r2
 8002058:	4618      	mov	r0, r3
 800205a:	f7fe fd5b 	bl	8000b14 <__addsf3>
 800205e:	4603      	mov	r3, r0
 8002060:	461a      	mov	r2, r3
 8002062:	4b21      	ldr	r3, [pc, #132]	; (80020e8 <readAll+0x780>)
 8002064:	601a      	str	r2, [r3, #0]
	lin_az = az - a33;
 8002066:	4b21      	ldr	r3, [pc, #132]	; (80020ec <readAll+0x784>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a12      	ldr	r2, [pc, #72]	; (80020b4 <readAll+0x74c>)
 800206c:	6812      	ldr	r2, [r2, #0]
 800206e:	4611      	mov	r1, r2
 8002070:	4618      	mov	r0, r3
 8002072:	f7fe fd4d 	bl	8000b10 <__aeabi_fsub>
 8002076:	4603      	mov	r3, r0
 8002078:	461a      	mov	r2, r3
 800207a:	4b1d      	ldr	r3, [pc, #116]	; (80020f0 <readAll+0x788>)
 800207c:	601a      	str	r2, [r3, #0]


	DataStruct->yaw = yaw;
 800207e:	4b14      	ldr	r3, [pc, #80]	; (80020d0 <readAll+0x768>)
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	62da      	str	r2, [r3, #44]	; 0x2c
	DataStruct->pitch = pitch;
 8002086:	4b0d      	ldr	r3, [pc, #52]	; (80020bc <readAll+0x754>)
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	625a      	str	r2, [r3, #36]	; 0x24
	DataStruct->roll = roll;
 800208e:	4b0d      	ldr	r3, [pc, #52]	; (80020c4 <readAll+0x75c>)
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	629a      	str	r2, [r3, #40]	; 0x28

	sum = 0;
 8002096:	4b17      	ldr	r3, [pc, #92]	; (80020f4 <readAll+0x78c>)
 8002098:	f04f 0200 	mov.w	r2, #0
 800209c:	601a      	str	r2, [r3, #0]
	}
 800209e:	bf00      	nop
 80020a0:	3714      	adds	r7, #20
 80020a2:	46bd      	mov	sp, r7
 80020a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80020a8:	d0051a32 	.word	0xd0051a32
 80020ac:	404ca2e8 	.word	0x404ca2e8
 80020b0:	20000008 	.word	0x20000008
 80020b4:	20004354 	.word	0x20004354
 80020b8:	20004350 	.word	0x20004350
 80020bc:	200042f8 	.word	0x200042f8
 80020c0:	2000434c 	.word	0x2000434c
 80020c4:	20004300 	.word	0x20004300
 80020c8:	20004344 	.word	0x20004344
 80020cc:	20004348 	.word	0x20004348
 80020d0:	200042fc 	.word	0x200042fc
 80020d4:	40b0f5c3 	.word	0x40b0f5c3
 80020d8:	43b40000 	.word	0x43b40000
 80020dc:	20004314 	.word	0x20004314
 80020e0:	20004338 	.word	0x20004338
 80020e4:	20004318 	.word	0x20004318
 80020e8:	2000433c 	.word	0x2000433c
 80020ec:	2000431c 	.word	0x2000431c
 80020f0:	20004340 	.word	0x20004340
 80020f4:	20004308 	.word	0x20004308

080020f8 <getMres>:

//==========================================================================================================
//====== FUNCTIONS TO READ AND WRITE DATA FROM REGISTERS AND ALSO INITS KALMAN AND QUATERNION FILTERS ======
//==========================================================================================================

void getMres() {
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  switch (Mscale)
 80020fc:	4b09      	ldr	r3, [pc, #36]	; (8002124 <getMres+0x2c>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d002      	beq.n	800210a <getMres+0x12>
 8002104:	2b01      	cmp	r3, #1
 8002106:	d004      	beq.n	8002112 <getMres+0x1a>
          break;
    case MFS_16BITS:
          mRes = 10.*4912./32760.0; // Proper scale to return milliGauss
          break;
  }
}
 8002108:	e007      	b.n	800211a <getMres+0x22>
          mRes = 10.*4912./8190.; // Proper scale to return milliGauss
 800210a:	4b07      	ldr	r3, [pc, #28]	; (8002128 <getMres+0x30>)
 800210c:	4a07      	ldr	r2, [pc, #28]	; (800212c <getMres+0x34>)
 800210e:	601a      	str	r2, [r3, #0]
          break;
 8002110:	e003      	b.n	800211a <getMres+0x22>
          mRes = 10.*4912./32760.0; // Proper scale to return milliGauss
 8002112:	4b05      	ldr	r3, [pc, #20]	; (8002128 <getMres+0x30>)
 8002114:	4a06      	ldr	r2, [pc, #24]	; (8002130 <getMres+0x38>)
 8002116:	601a      	str	r2, [r3, #0]
          break;
 8002118:	bf00      	nop
}
 800211a:	bf00      	nop
 800211c:	46bd      	mov	sp, r7
 800211e:	bc80      	pop	{r7}
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	20000002 	.word	0x20000002
 8002128:	20004288 	.word	0x20004288
 800212c:	40bfebff 	.word	0x40bfebff
 8002130:	3fbfebff 	.word	0x3fbfebff

08002134 <getGres>:

void getGres() {
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  switch (Gscale)
 8002138:	4b11      	ldr	r3, [pc, #68]	; (8002180 <getGres+0x4c>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	2b03      	cmp	r3, #3
 800213e:	d81b      	bhi.n	8002178 <getGres+0x44>
 8002140:	a201      	add	r2, pc, #4	; (adr r2, 8002148 <getGres+0x14>)
 8002142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002146:	bf00      	nop
 8002148:	08002159 	.word	0x08002159
 800214c:	08002161 	.word	0x08002161
 8002150:	08002169 	.word	0x08002169
 8002154:	08002171 	.word	0x08002171
  {
  // Possible gyro scales (and their register bit settings) are:
  // 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case GFS_250DPS:
          gRes = 250.0/32768.0;
 8002158:	4b0a      	ldr	r3, [pc, #40]	; (8002184 <getGres+0x50>)
 800215a:	4a0b      	ldr	r2, [pc, #44]	; (8002188 <getGres+0x54>)
 800215c:	601a      	str	r2, [r3, #0]
          break;
 800215e:	e00b      	b.n	8002178 <getGres+0x44>
    case GFS_500DPS:
          gRes = 500.0/32768.0;
 8002160:	4b08      	ldr	r3, [pc, #32]	; (8002184 <getGres+0x50>)
 8002162:	4a0a      	ldr	r2, [pc, #40]	; (800218c <getGres+0x58>)
 8002164:	601a      	str	r2, [r3, #0]
          break;
 8002166:	e007      	b.n	8002178 <getGres+0x44>
    case GFS_1000DPS:
          gRes = 1000.0/32768.0;
 8002168:	4b06      	ldr	r3, [pc, #24]	; (8002184 <getGres+0x50>)
 800216a:	4a09      	ldr	r2, [pc, #36]	; (8002190 <getGres+0x5c>)
 800216c:	601a      	str	r2, [r3, #0]
          break;
 800216e:	e003      	b.n	8002178 <getGres+0x44>
    case GFS_2000DPS:
          gRes = 2000.0/32768.0;
 8002170:	4b04      	ldr	r3, [pc, #16]	; (8002184 <getGres+0x50>)
 8002172:	4a08      	ldr	r2, [pc, #32]	; (8002194 <getGres+0x60>)
 8002174:	601a      	str	r2, [r3, #0]
          break;
 8002176:	bf00      	nop
  }
}
 8002178:	bf00      	nop
 800217a:	46bd      	mov	sp, r7
 800217c:	bc80      	pop	{r7}
 800217e:	4770      	bx	lr
 8002180:	20000000 	.word	0x20000000
 8002184:	20004284 	.word	0x20004284
 8002188:	3bfa0000 	.word	0x3bfa0000
 800218c:	3c7a0000 	.word	0x3c7a0000
 8002190:	3cfa0000 	.word	0x3cfa0000
 8002194:	3d7a0000 	.word	0x3d7a0000

08002198 <getAres>:

void getAres() {
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  switch (Ascale)
 800219c:	4b13      	ldr	r3, [pc, #76]	; (80021ec <getAres+0x54>)
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	2b03      	cmp	r3, #3
 80021a2:	d81f      	bhi.n	80021e4 <getAres+0x4c>
 80021a4:	a201      	add	r2, pc, #4	; (adr r2, 80021ac <getAres+0x14>)
 80021a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021aa:	bf00      	nop
 80021ac:	080021bd 	.word	0x080021bd
 80021b0:	080021c7 	.word	0x080021c7
 80021b4:	080021d1 	.word	0x080021d1
 80021b8:	080021db 	.word	0x080021db
  {
  // Possible accelerometer scales (and their register bit settings) are:
  // 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case AFS_2G:
          aRes = 2.0/32768.0;
 80021bc:	4b0c      	ldr	r3, [pc, #48]	; (80021f0 <getAres+0x58>)
 80021be:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 80021c2:	601a      	str	r2, [r3, #0]
          break;
 80021c4:	e00e      	b.n	80021e4 <getAres+0x4c>
    case AFS_4G:
          aRes = 4.0/32768.0;
 80021c6:	4b0a      	ldr	r3, [pc, #40]	; (80021f0 <getAres+0x58>)
 80021c8:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 80021cc:	601a      	str	r2, [r3, #0]
          break;
 80021ce:	e009      	b.n	80021e4 <getAres+0x4c>
    case AFS_8G:
          aRes = 8.0/32768.0;
 80021d0:	4b07      	ldr	r3, [pc, #28]	; (80021f0 <getAres+0x58>)
 80021d2:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 80021d6:	601a      	str	r2, [r3, #0]
          break;
 80021d8:	e004      	b.n	80021e4 <getAres+0x4c>
    case AFS_16G:
          aRes = 16.0/32768.0;
 80021da:	4b05      	ldr	r3, [pc, #20]	; (80021f0 <getAres+0x58>)
 80021dc:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 80021e0:	601a      	str	r2, [r3, #0]
          break;
 80021e2:	bf00      	nop
  }
}
 80021e4:	bf00      	nop
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bc80      	pop	{r7}
 80021ea:	4770      	bx	lr
 80021ec:	20000001 	.word	0x20000001
 80021f0:	20004280 	.word	0x20004280

080021f4 <readAccelData>:

//read raw Accelerometer values from registers
void readAccelData(I2C_HandleTypeDef *I2Cx, int16_t * destination){
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b088      	sub	sp, #32
 80021f8:	af04      	add	r7, sp, #16
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
  uint8_t rawAccelData[6];  // x/y/z accel register data stored here
  HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ACCEL_XOUT_H, 1, &rawAccelData[0], 6, i2c_timeout); // Read the six raw data registers into data array
 80021fe:	2364      	movs	r3, #100	; 0x64
 8002200:	9302      	str	r3, [sp, #8]
 8002202:	2306      	movs	r3, #6
 8002204:	9301      	str	r3, [sp, #4]
 8002206:	f107 0308 	add.w	r3, r7, #8
 800220a:	9300      	str	r3, [sp, #0]
 800220c:	2301      	movs	r3, #1
 800220e:	223b      	movs	r2, #59	; 0x3b
 8002210:	21d0      	movs	r1, #208	; 0xd0
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f004 fd30 	bl	8006c78 <HAL_I2C_Mem_Read>
  destination[0] = ((int16_t)rawAccelData[0] << 8) | rawAccelData[1];  // Turn the MSB and LSB into a signed 16-bit value
 8002218:	7a3b      	ldrb	r3, [r7, #8]
 800221a:	021b      	lsls	r3, r3, #8
 800221c:	b21a      	sxth	r2, r3
 800221e:	7a7b      	ldrb	r3, [r7, #9]
 8002220:	b21b      	sxth	r3, r3
 8002222:	4313      	orrs	r3, r2
 8002224:	b21a      	sxth	r2, r3
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	801a      	strh	r2, [r3, #0]
  destination[1] = ((int16_t)rawAccelData[2] << 8) | rawAccelData[3];
 800222a:	7abb      	ldrb	r3, [r7, #10]
 800222c:	021b      	lsls	r3, r3, #8
 800222e:	b219      	sxth	r1, r3
 8002230:	7afb      	ldrb	r3, [r7, #11]
 8002232:	b21a      	sxth	r2, r3
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	3302      	adds	r3, #2
 8002238:	430a      	orrs	r2, r1
 800223a:	b212      	sxth	r2, r2
 800223c:	801a      	strh	r2, [r3, #0]
  destination[2] = ((int16_t)rawAccelData[4] << 8) | rawAccelData[5];
 800223e:	7b3b      	ldrb	r3, [r7, #12]
 8002240:	021b      	lsls	r3, r3, #8
 8002242:	b219      	sxth	r1, r3
 8002244:	7b7b      	ldrb	r3, [r7, #13]
 8002246:	b21a      	sxth	r2, r3
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	3304      	adds	r3, #4
 800224c:	430a      	orrs	r2, r1
 800224e:	b212      	sxth	r2, r2
 8002250:	801a      	strh	r2, [r3, #0]
	printf("Acc X: %d\r\n", destination[0]);
	printf("Acc Y: %d\r\n", destination[1]);
	printf("Acc Z: %d\r\n", destination[2]);
	printf("-------------------------\r\n");
  }
}
 8002252:	bf00      	nop
 8002254:	3710      	adds	r7, #16
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <readGyroData>:

//read raw Gyro values from registers
void readGyroData(I2C_HandleTypeDef *I2Cx, int16_t * destination){
 800225a:	b580      	push	{r7, lr}
 800225c:	b088      	sub	sp, #32
 800225e:	af04      	add	r7, sp, #16
 8002260:	6078      	str	r0, [r7, #4]
 8002262:	6039      	str	r1, [r7, #0]
  uint8_t rawGyroData[6];  // x/y/z gyro register data stored here
  HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, GYRO_XOUT_H, 1, &rawGyroData[0], 6, i2c_timeout);  // Read the six raw data registers sequentially into data array
 8002264:	2364      	movs	r3, #100	; 0x64
 8002266:	9302      	str	r3, [sp, #8]
 8002268:	2306      	movs	r3, #6
 800226a:	9301      	str	r3, [sp, #4]
 800226c:	f107 0308 	add.w	r3, r7, #8
 8002270:	9300      	str	r3, [sp, #0]
 8002272:	2301      	movs	r3, #1
 8002274:	2243      	movs	r2, #67	; 0x43
 8002276:	21d0      	movs	r1, #208	; 0xd0
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f004 fcfd 	bl	8006c78 <HAL_I2C_Mem_Read>
  destination[0] = ((int16_t)rawGyroData[0] << 8) | rawGyroData[1];  // Turn the MSB and LSB into a signed 16-bit value
 800227e:	7a3b      	ldrb	r3, [r7, #8]
 8002280:	021b      	lsls	r3, r3, #8
 8002282:	b21a      	sxth	r2, r3
 8002284:	7a7b      	ldrb	r3, [r7, #9]
 8002286:	b21b      	sxth	r3, r3
 8002288:	4313      	orrs	r3, r2
 800228a:	b21a      	sxth	r2, r3
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	801a      	strh	r2, [r3, #0]
  destination[1] = ((int16_t)rawGyroData[2] << 8) | rawGyroData[3];
 8002290:	7abb      	ldrb	r3, [r7, #10]
 8002292:	021b      	lsls	r3, r3, #8
 8002294:	b219      	sxth	r1, r3
 8002296:	7afb      	ldrb	r3, [r7, #11]
 8002298:	b21a      	sxth	r2, r3
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	3302      	adds	r3, #2
 800229e:	430a      	orrs	r2, r1
 80022a0:	b212      	sxth	r2, r2
 80022a2:	801a      	strh	r2, [r3, #0]
  destination[2] = ((int16_t)rawGyroData[4] << 8) | rawGyroData[5];
 80022a4:	7b3b      	ldrb	r3, [r7, #12]
 80022a6:	021b      	lsls	r3, r3, #8
 80022a8:	b219      	sxth	r1, r3
 80022aa:	7b7b      	ldrb	r3, [r7, #13]
 80022ac:	b21a      	sxth	r2, r3
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	3304      	adds	r3, #4
 80022b2:	430a      	orrs	r2, r1
 80022b4:	b212      	sxth	r2, r2
 80022b6:	801a      	strh	r2, [r3, #0]
	printf("Gyro X: %d\r\n", destination[0]);
	printf("Gyro Y: %d\r\n", destination[1]);
	printf("Gyro Z: %d\r\n", destination[2]);
	printf("---------------------------\r\n");
  }
}
 80022b8:	bf00      	nop
 80022ba:	3710      	adds	r7, #16
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <readMagData>:

void readMagData(I2C_HandleTypeDef *I2Cx, int16_t * destination){
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b08a      	sub	sp, #40	; 0x28
 80022c4:	af04      	add	r7, sp, #16
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]

	uint8_t readData;

	HAL_I2C_Mem_Read(I2Cx, AK8963_ADDRESS, AK8963_ST1, 1, &readData, 1, i2c_timeout);
 80022ca:	2364      	movs	r3, #100	; 0x64
 80022cc:	9302      	str	r3, [sp, #8]
 80022ce:	2301      	movs	r3, #1
 80022d0:	9301      	str	r3, [sp, #4]
 80022d2:	f107 0316 	add.w	r3, r7, #22
 80022d6:	9300      	str	r3, [sp, #0]
 80022d8:	2301      	movs	r3, #1
 80022da:	2202      	movs	r2, #2
 80022dc:	2118      	movs	r1, #24
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f004 fcca 	bl	8006c78 <HAL_I2C_Mem_Read>
	if( (readData & 0x01) == 0x01 ){
 80022e4:	7dbb      	ldrb	r3, [r7, #22]
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d030      	beq.n	8002350 <readMagData+0x90>
		uint8_t rawMagData[7];  // x/y/z gyro register data, ST2 register stored here, must read ST2 at end of data acquisition
		HAL_I2C_Mem_Read(I2Cx, AK8963_ADDRESS, AK8963_XOUT_L, 1, &rawMagData[0], 7, i2c_timeout);  // Read the six raw data and ST2 registers sequentially into data array
 80022ee:	2364      	movs	r3, #100	; 0x64
 80022f0:	9302      	str	r3, [sp, #8]
 80022f2:	2307      	movs	r3, #7
 80022f4:	9301      	str	r3, [sp, #4]
 80022f6:	f107 030c 	add.w	r3, r7, #12
 80022fa:	9300      	str	r3, [sp, #0]
 80022fc:	2301      	movs	r3, #1
 80022fe:	2203      	movs	r2, #3
 8002300:	2118      	movs	r1, #24
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f004 fcb8 	bl	8006c78 <HAL_I2C_Mem_Read>
		uint8_t c = rawMagData[6];
 8002308:	7cbb      	ldrb	r3, [r7, #18]
 800230a:	75fb      	strb	r3, [r7, #23]
		if(!(c & 0x08)) {
 800230c:	7dfb      	ldrb	r3, [r7, #23]
 800230e:	f003 0308 	and.w	r3, r3, #8
 8002312:	2b00      	cmp	r3, #0
 8002314:	d11c      	bne.n	8002350 <readMagData+0x90>
			destination[0] = ((int16_t)rawMagData[1] << 8) | rawMagData[0] ;  // Turn the MSB and LSB into a signed 16-bit value
 8002316:	7b7b      	ldrb	r3, [r7, #13]
 8002318:	021b      	lsls	r3, r3, #8
 800231a:	b21a      	sxth	r2, r3
 800231c:	7b3b      	ldrb	r3, [r7, #12]
 800231e:	b21b      	sxth	r3, r3
 8002320:	4313      	orrs	r3, r2
 8002322:	b21a      	sxth	r2, r3
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	801a      	strh	r2, [r3, #0]
			destination[1] = ((int16_t)rawMagData[3] << 8) | rawMagData[2] ;  // Data stored as little Endian
 8002328:	7bfb      	ldrb	r3, [r7, #15]
 800232a:	021b      	lsls	r3, r3, #8
 800232c:	b219      	sxth	r1, r3
 800232e:	7bbb      	ldrb	r3, [r7, #14]
 8002330:	b21a      	sxth	r2, r3
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	3302      	adds	r3, #2
 8002336:	430a      	orrs	r2, r1
 8002338:	b212      	sxth	r2, r2
 800233a:	801a      	strh	r2, [r3, #0]
			destination[2] = ((int16_t)rawMagData[5] << 8) | rawMagData[4] ;
 800233c:	7c7b      	ldrb	r3, [r7, #17]
 800233e:	021b      	lsls	r3, r3, #8
 8002340:	b219      	sxth	r1, r3
 8002342:	7c3b      	ldrb	r3, [r7, #16]
 8002344:	b21a      	sxth	r2, r3
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	3304      	adds	r3, #4
 800234a:	430a      	orrs	r2, r1
 800234c:	b212      	sxth	r2, r2
 800234e:	801a      	strh	r2, [r3, #0]
				printf("Mag Z: %d\r\n", destination[2]);
				printf("-------------------------\r\n");
			}
		}
	}
}
 8002350:	bf00      	nop
 8002352:	3718      	adds	r7, #24
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <initAK8963>:

void initAK8963(I2C_HandleTypeDef *I2Cx, float * destination){
 8002358:	b590      	push	{r4, r7, lr}
 800235a:	b089      	sub	sp, #36	; 0x24
 800235c:	af04      	add	r7, sp, #16
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
  //First extract the factory calibration for each magnetometer axis
  // x/y/z gyro calibration data stored here
  uint8_t rawMagCalData[3];

  //Power down magnetometer
  writeData = 0x00;
 8002362:	2300      	movs	r3, #0
 8002364:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Write(I2Cx, AK8963_ADDRESS, AK8963_CNTL, 1, &writeData, 1, i2c_timeout);
 8002366:	2364      	movs	r3, #100	; 0x64
 8002368:	9302      	str	r3, [sp, #8]
 800236a:	2301      	movs	r3, #1
 800236c:	9301      	str	r3, [sp, #4]
 800236e:	f107 030f 	add.w	r3, r7, #15
 8002372:	9300      	str	r3, [sp, #0]
 8002374:	2301      	movs	r3, #1
 8002376:	220a      	movs	r2, #10
 8002378:	2118      	movs	r1, #24
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f004 fb82 	bl	8006a84 <HAL_I2C_Mem_Write>
  HAL_Delay(100);
 8002380:	2064      	movs	r0, #100	; 0x64
 8002382:	f003 f9bd 	bl	8005700 <HAL_Delay>

  writeData = 0x0F;
 8002386:	230f      	movs	r3, #15
 8002388:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Write(I2Cx, AK8963_ADDRESS, AK8963_CNTL, 1, &writeData, 1, i2c_timeout);// Enter Fuse ROM access mode
 800238a:	2364      	movs	r3, #100	; 0x64
 800238c:	9302      	str	r3, [sp, #8]
 800238e:	2301      	movs	r3, #1
 8002390:	9301      	str	r3, [sp, #4]
 8002392:	f107 030f 	add.w	r3, r7, #15
 8002396:	9300      	str	r3, [sp, #0]
 8002398:	2301      	movs	r3, #1
 800239a:	220a      	movs	r2, #10
 800239c:	2118      	movs	r1, #24
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f004 fb70 	bl	8006a84 <HAL_I2C_Mem_Write>
  HAL_Delay(100);
 80023a4:	2064      	movs	r0, #100	; 0x64
 80023a6:	f003 f9ab 	bl	8005700 <HAL_Delay>


  HAL_I2C_Mem_Read(I2Cx, AK8963_ADDRESS, AK8963_ASAX, 1, &rawMagCalData[0], 3, i2c_timeout);// Read the x-, y-, and z-axis calibration values
 80023aa:	2364      	movs	r3, #100	; 0x64
 80023ac:	9302      	str	r3, [sp, #8]
 80023ae:	2303      	movs	r3, #3
 80023b0:	9301      	str	r3, [sp, #4]
 80023b2:	f107 030c 	add.w	r3, r7, #12
 80023b6:	9300      	str	r3, [sp, #0]
 80023b8:	2301      	movs	r3, #1
 80023ba:	2210      	movs	r2, #16
 80023bc:	2118      	movs	r1, #24
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f004 fc5a 	bl	8006c78 <HAL_I2C_Mem_Read>
  destination[0] =  (float)(rawMagCalData[0] - 128)/256. + 1.;   // Return x-axis sensitivity adjustment values, etc.
 80023c4:	7b3b      	ldrb	r3, [r7, #12]
 80023c6:	3b80      	subs	r3, #128	; 0x80
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7fe fc57 	bl	8000c7c <__aeabi_i2f>
 80023ce:	4603      	mov	r3, r0
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7fe f821 	bl	8000418 <__aeabi_f2d>
 80023d6:	f04f 0200 	mov.w	r2, #0
 80023da:	4b46      	ldr	r3, [pc, #280]	; (80024f4 <initAK8963+0x19c>)
 80023dc:	f7fe f99e 	bl	800071c <__aeabi_ddiv>
 80023e0:	4602      	mov	r2, r0
 80023e2:	460b      	mov	r3, r1
 80023e4:	4610      	mov	r0, r2
 80023e6:	4619      	mov	r1, r3
 80023e8:	f04f 0200 	mov.w	r2, #0
 80023ec:	4b42      	ldr	r3, [pc, #264]	; (80024f8 <initAK8963+0x1a0>)
 80023ee:	f7fd feb5 	bl	800015c <__adddf3>
 80023f2:	4602      	mov	r2, r0
 80023f4:	460b      	mov	r3, r1
 80023f6:	4610      	mov	r0, r2
 80023f8:	4619      	mov	r1, r3
 80023fa:	f7fe fb35 	bl	8000a68 <__aeabi_d2f>
 80023fe:	4602      	mov	r2, r0
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	601a      	str	r2, [r3, #0]
  destination[1] =  (float)(rawMagCalData[1] - 128)/256. + 1.;
 8002404:	7b7b      	ldrb	r3, [r7, #13]
 8002406:	3b80      	subs	r3, #128	; 0x80
 8002408:	4618      	mov	r0, r3
 800240a:	f7fe fc37 	bl	8000c7c <__aeabi_i2f>
 800240e:	4603      	mov	r3, r0
 8002410:	4618      	mov	r0, r3
 8002412:	f7fe f801 	bl	8000418 <__aeabi_f2d>
 8002416:	f04f 0200 	mov.w	r2, #0
 800241a:	4b36      	ldr	r3, [pc, #216]	; (80024f4 <initAK8963+0x19c>)
 800241c:	f7fe f97e 	bl	800071c <__aeabi_ddiv>
 8002420:	4602      	mov	r2, r0
 8002422:	460b      	mov	r3, r1
 8002424:	4610      	mov	r0, r2
 8002426:	4619      	mov	r1, r3
 8002428:	f04f 0200 	mov.w	r2, #0
 800242c:	4b32      	ldr	r3, [pc, #200]	; (80024f8 <initAK8963+0x1a0>)
 800242e:	f7fd fe95 	bl	800015c <__adddf3>
 8002432:	4602      	mov	r2, r0
 8002434:	460b      	mov	r3, r1
 8002436:	4610      	mov	r0, r2
 8002438:	4619      	mov	r1, r3
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	1d1c      	adds	r4, r3, #4
 800243e:	f7fe fb13 	bl	8000a68 <__aeabi_d2f>
 8002442:	4603      	mov	r3, r0
 8002444:	6023      	str	r3, [r4, #0]
  destination[2] =  (float)(rawMagCalData[2] - 128)/256. + 1.;
 8002446:	7bbb      	ldrb	r3, [r7, #14]
 8002448:	3b80      	subs	r3, #128	; 0x80
 800244a:	4618      	mov	r0, r3
 800244c:	f7fe fc16 	bl	8000c7c <__aeabi_i2f>
 8002450:	4603      	mov	r3, r0
 8002452:	4618      	mov	r0, r3
 8002454:	f7fd ffe0 	bl	8000418 <__aeabi_f2d>
 8002458:	f04f 0200 	mov.w	r2, #0
 800245c:	4b25      	ldr	r3, [pc, #148]	; (80024f4 <initAK8963+0x19c>)
 800245e:	f7fe f95d 	bl	800071c <__aeabi_ddiv>
 8002462:	4602      	mov	r2, r0
 8002464:	460b      	mov	r3, r1
 8002466:	4610      	mov	r0, r2
 8002468:	4619      	mov	r1, r3
 800246a:	f04f 0200 	mov.w	r2, #0
 800246e:	4b22      	ldr	r3, [pc, #136]	; (80024f8 <initAK8963+0x1a0>)
 8002470:	f7fd fe74 	bl	800015c <__adddf3>
 8002474:	4602      	mov	r2, r0
 8002476:	460b      	mov	r3, r1
 8002478:	4610      	mov	r0, r2
 800247a:	4619      	mov	r1, r3
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	f103 0408 	add.w	r4, r3, #8
 8002482:	f7fe faf1 	bl	8000a68 <__aeabi_d2f>
 8002486:	4603      	mov	r3, r0
 8002488:	6023      	str	r3, [r4, #0]
	printf("Mag cal off Y: %f\r\n", destination[1]);
	printf("Mag cal off Z: %f\r\n", destination[2]);
	printf("-------------------------\r\n");*/
  }

  writeData = 0x00;
 800248a:	2300      	movs	r3, #0
 800248c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Write(I2Cx, AK8963_ADDRESS, AK8963_CNTL, 1, &writeData, 1, i2c_timeout);// Power down magnetometer
 800248e:	2364      	movs	r3, #100	; 0x64
 8002490:	9302      	str	r3, [sp, #8]
 8002492:	2301      	movs	r3, #1
 8002494:	9301      	str	r3, [sp, #4]
 8002496:	f107 030f 	add.w	r3, r7, #15
 800249a:	9300      	str	r3, [sp, #0]
 800249c:	2301      	movs	r3, #1
 800249e:	220a      	movs	r2, #10
 80024a0:	2118      	movs	r1, #24
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f004 faee 	bl	8006a84 <HAL_I2C_Mem_Write>
  HAL_Delay(100);
 80024a8:	2064      	movs	r0, #100	; 0x64
 80024aa:	f003 f929 	bl	8005700 <HAL_Delay>

  // Configure the magnetometer for continuous read and highest resolution
  // set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
  // and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
  writeData = Mscale << 4 | Mmode;
 80024ae:	4b13      	ldr	r3, [pc, #76]	; (80024fc <initAK8963+0x1a4>)
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	011b      	lsls	r3, r3, #4
 80024b4:	b25a      	sxtb	r2, r3
 80024b6:	4b12      	ldr	r3, [pc, #72]	; (8002500 <initAK8963+0x1a8>)
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	b25b      	sxtb	r3, r3
 80024bc:	4313      	orrs	r3, r2
 80024be:	b25b      	sxtb	r3, r3
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Write(I2Cx, AK8963_ADDRESS, AK8963_CNTL, 1, &writeData, 1, i2c_timeout);// Set magnetometer data resolution and sample ODR
 80024c4:	2364      	movs	r3, #100	; 0x64
 80024c6:	9302      	str	r3, [sp, #8]
 80024c8:	2301      	movs	r3, #1
 80024ca:	9301      	str	r3, [sp, #4]
 80024cc:	f107 030f 	add.w	r3, r7, #15
 80024d0:	9300      	str	r3, [sp, #0]
 80024d2:	2301      	movs	r3, #1
 80024d4:	220a      	movs	r2, #10
 80024d6:	2118      	movs	r1, #24
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f004 fad3 	bl	8006a84 <HAL_I2C_Mem_Write>

//writeData = 0x16;
//HAL_I2C_Mem_Write(I2Cx, AK8963_ADDRESS, AK8963_CNTL, 1, &writeData, 1, i2c_timeout);
  HAL_Delay(10);
 80024de:	200a      	movs	r0, #10
 80024e0:	f003 f90e 	bl	8005700 <HAL_Delay>

  if(SerialDebugA){printf("MAG Init Succesful! \r\n");}
 80024e4:	4807      	ldr	r0, [pc, #28]	; (8002504 <initAK8963+0x1ac>)
 80024e6:	f007 fe99 	bl	800a21c <puts>
}
 80024ea:	bf00      	nop
 80024ec:	3714      	adds	r7, #20
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd90      	pop	{r4, r7, pc}
 80024f2:	bf00      	nop
 80024f4:	40700000 	.word	0x40700000
 80024f8:	3ff00000 	.word	0x3ff00000
 80024fc:	20000002 	.word	0x20000002
 8002500:	20000003 	.word	0x20000003
 8002504:	0800b1d8 	.word	0x0800b1d8

08002508 <calibrateMag>:

void calibrateMag(I2C_HandleTypeDef *I2Cx, float * dest1, float * dest2){
 8002508:	b590      	push	{r4, r7, lr}
 800250a:	b095      	sub	sp, #84	; 0x54
 800250c:	af00      	add	r7, sp, #0
 800250e:	60f8      	str	r0, [r7, #12]
 8002510:	60b9      	str	r1, [r7, #8]
 8002512:	607a      	str	r2, [r7, #4]

  uint16_t ii = 0, sample_count = 0;
 8002514:	2300      	movs	r3, #0
 8002516:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800251a:	2300      	movs	r3, #0
 800251c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
  int32_t mag_bias[3] = {0, 0, 0}, mag_scale[3] = {0, 0, 0};
 8002520:	2300      	movs	r3, #0
 8002522:	63bb      	str	r3, [r7, #56]	; 0x38
 8002524:	2300      	movs	r3, #0
 8002526:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002528:	2300      	movs	r3, #0
 800252a:	643b      	str	r3, [r7, #64]	; 0x40
 800252c:	2300      	movs	r3, #0
 800252e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002530:	2300      	movs	r3, #0
 8002532:	633b      	str	r3, [r7, #48]	; 0x30
 8002534:	2300      	movs	r3, #0
 8002536:	637b      	str	r3, [r7, #52]	; 0x34
  int16_t mag_max[3] = {-32767, -32767, -32767}, mag_min[3] = {32767, 32767, 32767}, mag_temp[3] = {0, 0, 0};
 8002538:	4aa5      	ldr	r2, [pc, #660]	; (80027d0 <calibrateMag+0x2c8>)
 800253a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800253e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002542:	6018      	str	r0, [r3, #0]
 8002544:	3304      	adds	r3, #4
 8002546:	8019      	strh	r1, [r3, #0]
 8002548:	4aa2      	ldr	r2, [pc, #648]	; (80027d4 <calibrateMag+0x2cc>)
 800254a:	f107 031c 	add.w	r3, r7, #28
 800254e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002552:	6018      	str	r0, [r3, #0]
 8002554:	3304      	adds	r3, #4
 8002556:	8019      	strh	r1, [r3, #0]
 8002558:	2300      	movs	r3, #0
 800255a:	82bb      	strh	r3, [r7, #20]
 800255c:	2300      	movs	r3, #0
 800255e:	82fb      	strh	r3, [r7, #22]
 8002560:	2300      	movs	r3, #0
 8002562:	833b      	strh	r3, [r7, #24]

  if (SerialDebugA){printf("Mag Calibration: Wave device in a figure eight until done!\r\n");}
 8002564:	489c      	ldr	r0, [pc, #624]	; (80027d8 <calibrateMag+0x2d0>)
 8002566:	f007 fe59 	bl	800a21c <puts>
  HAL_Delay(4000);
 800256a:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800256e:	f003 f8c7 	bl	8005700 <HAL_Delay>

    // shoot for ~fifteen seconds of mag data
    if(Mmode == 0x02) sample_count = 128;  // at 8 Hz ODR, new mag data is available every 125 ms
 8002572:	4b9a      	ldr	r3, [pc, #616]	; (80027dc <calibrateMag+0x2d4>)
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	2b02      	cmp	r3, #2
 8002578:	d102      	bne.n	8002580 <calibrateMag+0x78>
 800257a:	2380      	movs	r3, #128	; 0x80
 800257c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
    if(Mmode == 0x06) sample_count = 1500;  // at 100 Hz ODR, new mag data is available every 10 ms
 8002580:	4b96      	ldr	r3, [pc, #600]	; (80027dc <calibrateMag+0x2d4>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	2b06      	cmp	r3, #6
 8002586:	d103      	bne.n	8002590 <calibrateMag+0x88>
 8002588:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800258c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
   for(ii = 0; ii < sample_count; ii++) {
 8002590:	2300      	movs	r3, #0
 8002592:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002596:	e055      	b.n	8002644 <calibrateMag+0x13c>
    readMagData(I2Cx, mag_temp);  // Read the mag data
 8002598:	f107 0314 	add.w	r3, r7, #20
 800259c:	4619      	mov	r1, r3
 800259e:	68f8      	ldr	r0, [r7, #12]
 80025a0:	f7ff fe8e 	bl	80022c0 <readMagData>
    for (int jj = 0; jj < 3; jj++) {
 80025a4:	2300      	movs	r3, #0
 80025a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80025a8:	e036      	b.n	8002618 <calibrateMag+0x110>
      if(mag_temp[jj] > mag_max[jj]) mag_max[jj] = mag_temp[jj];
 80025aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	3350      	adds	r3, #80	; 0x50
 80025b0:	443b      	add	r3, r7
 80025b2:	f933 2c3c 	ldrsh.w	r2, [r3, #-60]
 80025b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	3350      	adds	r3, #80	; 0x50
 80025bc:	443b      	add	r3, r7
 80025be:	f933 3c2c 	ldrsh.w	r3, [r3, #-44]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	dd0b      	ble.n	80025de <calibrateMag+0xd6>
 80025c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	3350      	adds	r3, #80	; 0x50
 80025cc:	443b      	add	r3, r7
 80025ce:	f933 2c3c 	ldrsh.w	r2, [r3, #-60]
 80025d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	3350      	adds	r3, #80	; 0x50
 80025d8:	443b      	add	r3, r7
 80025da:	f823 2c2c 	strh.w	r2, [r3, #-44]
      if(mag_temp[jj] < mag_min[jj]) mag_min[jj] = mag_temp[jj];
 80025de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	3350      	adds	r3, #80	; 0x50
 80025e4:	443b      	add	r3, r7
 80025e6:	f933 2c3c 	ldrsh.w	r2, [r3, #-60]
 80025ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	3350      	adds	r3, #80	; 0x50
 80025f0:	443b      	add	r3, r7
 80025f2:	f933 3c34 	ldrsh.w	r3, [r3, #-52]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	da0b      	bge.n	8002612 <calibrateMag+0x10a>
 80025fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	3350      	adds	r3, #80	; 0x50
 8002600:	443b      	add	r3, r7
 8002602:	f933 2c3c 	ldrsh.w	r2, [r3, #-60]
 8002606:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	3350      	adds	r3, #80	; 0x50
 800260c:	443b      	add	r3, r7
 800260e:	f823 2c34 	strh.w	r2, [r3, #-52]
    for (int jj = 0; jj < 3; jj++) {
 8002612:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002614:	3301      	adds	r3, #1
 8002616:	64bb      	str	r3, [r7, #72]	; 0x48
 8002618:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800261a:	2b02      	cmp	r3, #2
 800261c:	ddc5      	ble.n	80025aa <calibrateMag+0xa2>
    }
    if(Mmode == 0x02) HAL_Delay(135);  // at 8 Hz ODR, new mag data is available every 125 ms
 800261e:	4b6f      	ldr	r3, [pc, #444]	; (80027dc <calibrateMag+0x2d4>)
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	2b02      	cmp	r3, #2
 8002624:	d102      	bne.n	800262c <calibrateMag+0x124>
 8002626:	2087      	movs	r0, #135	; 0x87
 8002628:	f003 f86a 	bl	8005700 <HAL_Delay>
    if(Mmode == 0x06) HAL_Delay(12);  // at 100 Hz ODR, new mag data is available every 10 ms
 800262c:	4b6b      	ldr	r3, [pc, #428]	; (80027dc <calibrateMag+0x2d4>)
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	2b06      	cmp	r3, #6
 8002632:	d102      	bne.n	800263a <calibrateMag+0x132>
 8002634:	200c      	movs	r0, #12
 8002636:	f003 f863 	bl	8005700 <HAL_Delay>
   for(ii = 0; ii < sample_count; ii++) {
 800263a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800263e:	3301      	adds	r3, #1
 8002640:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002644:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8002648:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800264c:	429a      	cmp	r2, r3
 800264e:	d3a3      	bcc.n	8002598 <calibrateMag+0x90>
    }

    // Get hard iron correction
    mag_bias[0]  = (mag_max[0] + mag_min[0])/2;  // get average x mag bias in counts
 8002650:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8002654:	461a      	mov	r2, r3
 8002656:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800265a:	4413      	add	r3, r2
 800265c:	0fda      	lsrs	r2, r3, #31
 800265e:	4413      	add	r3, r2
 8002660:	105b      	asrs	r3, r3, #1
 8002662:	63bb      	str	r3, [r7, #56]	; 0x38
    mag_bias[1]  = (mag_max[1] + mag_min[1])/2;  // get average y mag bias in counts
 8002664:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8002668:	461a      	mov	r2, r3
 800266a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800266e:	4413      	add	r3, r2
 8002670:	0fda      	lsrs	r2, r3, #31
 8002672:	4413      	add	r3, r2
 8002674:	105b      	asrs	r3, r3, #1
 8002676:	63fb      	str	r3, [r7, #60]	; 0x3c
    mag_bias[2]  = (mag_max[2] + mag_min[2])/2;  // get average z mag bias in counts
 8002678:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800267c:	461a      	mov	r2, r3
 800267e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002682:	4413      	add	r3, r2
 8002684:	0fda      	lsrs	r2, r3, #31
 8002686:	4413      	add	r3, r2
 8002688:	105b      	asrs	r3, r3, #1
 800268a:	643b      	str	r3, [r7, #64]	; 0x40

    dest1[0] = (float) mag_bias[0]*mRes*magCalibration[0];  // save mag biases in G for main program
 800268c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800268e:	4618      	mov	r0, r3
 8002690:	f7fe faf4 	bl	8000c7c <__aeabi_i2f>
 8002694:	4602      	mov	r2, r0
 8002696:	4b52      	ldr	r3, [pc, #328]	; (80027e0 <calibrateMag+0x2d8>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4619      	mov	r1, r3
 800269c:	4610      	mov	r0, r2
 800269e:	f7fe fb41 	bl	8000d24 <__aeabi_fmul>
 80026a2:	4603      	mov	r3, r0
 80026a4:	461a      	mov	r2, r3
 80026a6:	4b4f      	ldr	r3, [pc, #316]	; (80027e4 <calibrateMag+0x2dc>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4619      	mov	r1, r3
 80026ac:	4610      	mov	r0, r2
 80026ae:	f7fe fb39 	bl	8000d24 <__aeabi_fmul>
 80026b2:	4603      	mov	r3, r0
 80026b4:	461a      	mov	r2, r3
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	601a      	str	r2, [r3, #0]
    dest1[1] = (float) mag_bias[1]*mRes*magCalibration[1];
 80026ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026bc:	4618      	mov	r0, r3
 80026be:	f7fe fadd 	bl	8000c7c <__aeabi_i2f>
 80026c2:	4602      	mov	r2, r0
 80026c4:	4b46      	ldr	r3, [pc, #280]	; (80027e0 <calibrateMag+0x2d8>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4619      	mov	r1, r3
 80026ca:	4610      	mov	r0, r2
 80026cc:	f7fe fb2a 	bl	8000d24 <__aeabi_fmul>
 80026d0:	4603      	mov	r3, r0
 80026d2:	4618      	mov	r0, r3
 80026d4:	4b43      	ldr	r3, [pc, #268]	; (80027e4 <calibrateMag+0x2dc>)
 80026d6:	685a      	ldr	r2, [r3, #4]
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	1d1c      	adds	r4, r3, #4
 80026dc:	4611      	mov	r1, r2
 80026de:	f7fe fb21 	bl	8000d24 <__aeabi_fmul>
 80026e2:	4603      	mov	r3, r0
 80026e4:	6023      	str	r3, [r4, #0]
    dest1[2] = (float) mag_bias[2]*mRes*magCalibration[2];
 80026e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7fe fac7 	bl	8000c7c <__aeabi_i2f>
 80026ee:	4602      	mov	r2, r0
 80026f0:	4b3b      	ldr	r3, [pc, #236]	; (80027e0 <calibrateMag+0x2d8>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4619      	mov	r1, r3
 80026f6:	4610      	mov	r0, r2
 80026f8:	f7fe fb14 	bl	8000d24 <__aeabi_fmul>
 80026fc:	4603      	mov	r3, r0
 80026fe:	4618      	mov	r0, r3
 8002700:	4b38      	ldr	r3, [pc, #224]	; (80027e4 <calibrateMag+0x2dc>)
 8002702:	689a      	ldr	r2, [r3, #8]
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	f103 0408 	add.w	r4, r3, #8
 800270a:	4611      	mov	r1, r2
 800270c:	f7fe fb0a 	bl	8000d24 <__aeabi_fmul>
 8002710:	4603      	mov	r3, r0
 8002712:	6023      	str	r3, [r4, #0]

    // Get soft iron correction estimate
    mag_scale[0]  = (mag_max[0] - mag_min[0])/2;  // get average x axis max chord length in counts
 8002714:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8002718:	461a      	mov	r2, r3
 800271a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	0fda      	lsrs	r2, r3, #31
 8002722:	4413      	add	r3, r2
 8002724:	105b      	asrs	r3, r3, #1
 8002726:	62fb      	str	r3, [r7, #44]	; 0x2c
    mag_scale[1]  = (mag_max[1] - mag_min[1])/2;  // get average y axis max chord length in counts
 8002728:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800272c:	461a      	mov	r2, r3
 800272e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	0fda      	lsrs	r2, r3, #31
 8002736:	4413      	add	r3, r2
 8002738:	105b      	asrs	r3, r3, #1
 800273a:	633b      	str	r3, [r7, #48]	; 0x30
    mag_scale[2]  = (mag_max[2] - mag_min[2])/2;  // get average z axis max chord length in counts
 800273c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8002740:	461a      	mov	r2, r3
 8002742:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	0fda      	lsrs	r2, r3, #31
 800274a:	4413      	add	r3, r2
 800274c:	105b      	asrs	r3, r3, #1
 800274e:	637b      	str	r3, [r7, #52]	; 0x34

    float avg_rad = mag_scale[0] + mag_scale[1] + mag_scale[2];
 8002750:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002754:	441a      	add	r2, r3
 8002756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002758:	4413      	add	r3, r2
 800275a:	4618      	mov	r0, r3
 800275c:	f7fe fa8e 	bl	8000c7c <__aeabi_i2f>
 8002760:	4603      	mov	r3, r0
 8002762:	647b      	str	r3, [r7, #68]	; 0x44
    avg_rad /= 3.0;
 8002764:	4920      	ldr	r1, [pc, #128]	; (80027e8 <calibrateMag+0x2e0>)
 8002766:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002768:	f7fe fb90 	bl	8000e8c <__aeabi_fdiv>
 800276c:	4603      	mov	r3, r0
 800276e:	647b      	str	r3, [r7, #68]	; 0x44

    dest2[0] = avg_rad/((float)mag_scale[0]);
 8002770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002772:	4618      	mov	r0, r3
 8002774:	f7fe fa82 	bl	8000c7c <__aeabi_i2f>
 8002778:	4603      	mov	r3, r0
 800277a:	4619      	mov	r1, r3
 800277c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800277e:	f7fe fb85 	bl	8000e8c <__aeabi_fdiv>
 8002782:	4603      	mov	r3, r0
 8002784:	461a      	mov	r2, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	601a      	str	r2, [r3, #0]
    dest2[1] = avg_rad/((float)mag_scale[1]);
 800278a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800278c:	4618      	mov	r0, r3
 800278e:	f7fe fa75 	bl	8000c7c <__aeabi_i2f>
 8002792:	4602      	mov	r2, r0
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	1d1c      	adds	r4, r3, #4
 8002798:	4611      	mov	r1, r2
 800279a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800279c:	f7fe fb76 	bl	8000e8c <__aeabi_fdiv>
 80027a0:	4603      	mov	r3, r0
 80027a2:	6023      	str	r3, [r4, #0]
    dest2[2] = avg_rad/((float)mag_scale[2]);
 80027a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7fe fa68 	bl	8000c7c <__aeabi_i2f>
 80027ac:	4602      	mov	r2, r0
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f103 0408 	add.w	r4, r3, #8
 80027b4:	4611      	mov	r1, r2
 80027b6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80027b8:	f7fe fb68 	bl	8000e8c <__aeabi_fdiv>
 80027bc:	4603      	mov	r3, r0
 80027be:	6023      	str	r3, [r4, #0]

    if (SerialDebugA){printf("Mag Calibration done!\r\n");}
 80027c0:	480a      	ldr	r0, [pc, #40]	; (80027ec <calibrateMag+0x2e4>)
 80027c2:	f007 fd2b 	bl	800a21c <puts>
}
 80027c6:	bf00      	nop
 80027c8:	3754      	adds	r7, #84	; 0x54
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd90      	pop	{r4, r7, pc}
 80027ce:	bf00      	nop
 80027d0:	0800b244 	.word	0x0800b244
 80027d4:	0800b24c 	.word	0x0800b24c
 80027d8:	0800b1f0 	.word	0x0800b1f0
 80027dc:	20000003 	.word	0x20000003
 80027e0:	20004288 	.word	0x20004288
 80027e4:	200042a4 	.word	0x200042a4
 80027e8:	40400000 	.word	0x40400000
 80027ec:	0800b22c 	.word	0x0800b22c

080027f0 <initMPU9250>:


void initMPU9250(I2C_HandleTypeDef *I2Cx){
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b088      	sub	sp, #32
 80027f4:	af04      	add	r7, sp, #16
 80027f6:	6078      	str	r0, [r7, #4]
	//pre def. vars
	uint8_t readData;
	uint8_t writeData;

	//Wake up device
	writeData = 0x00;
 80027f8:	2300      	movs	r3, #0
 80027fa:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);
 80027fc:	2364      	movs	r3, #100	; 0x64
 80027fe:	9302      	str	r3, [sp, #8]
 8002800:	2301      	movs	r3, #1
 8002802:	9301      	str	r3, [sp, #4]
 8002804:	f107 030e 	add.w	r3, r7, #14
 8002808:	9300      	str	r3, [sp, #0]
 800280a:	2301      	movs	r3, #1
 800280c:	226b      	movs	r2, #107	; 0x6b
 800280e:	21d0      	movs	r1, #208	; 0xd0
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f004 f937 	bl	8006a84 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8002816:	2064      	movs	r0, #100	; 0x64
 8002818:	f002 ff72 	bl	8005700 <HAL_Delay>

	writeData = 0x01;
 800281c:	2301      	movs	r3, #1
 800281e:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);
 8002820:	2364      	movs	r3, #100	; 0x64
 8002822:	9302      	str	r3, [sp, #8]
 8002824:	2301      	movs	r3, #1
 8002826:	9301      	str	r3, [sp, #4]
 8002828:	f107 030e 	add.w	r3, r7, #14
 800282c:	9300      	str	r3, [sp, #0]
 800282e:	2301      	movs	r3, #1
 8002830:	226b      	movs	r2, #107	; 0x6b
 8002832:	21d0      	movs	r1, #208	; 0xd0
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f004 f925 	bl	8006a84 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 800283a:	2064      	movs	r0, #100	; 0x64
 800283c:	f002 ff60 	bl	8005700 <HAL_Delay>

	writeData = 0x03;
 8002840:	2303      	movs	r3, #3
 8002842:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, CONFIG, 1, &writeData, 1, i2c_timeout);
 8002844:	2364      	movs	r3, #100	; 0x64
 8002846:	9302      	str	r3, [sp, #8]
 8002848:	2301      	movs	r3, #1
 800284a:	9301      	str	r3, [sp, #4]
 800284c:	f107 030e 	add.w	r3, r7, #14
 8002850:	9300      	str	r3, [sp, #0]
 8002852:	2301      	movs	r3, #1
 8002854:	221a      	movs	r2, #26
 8002856:	21d0      	movs	r1, #208	; 0xd0
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f004 f913 	bl	8006a84 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 800285e:	2064      	movs	r0, #100	; 0x64
 8002860:	f002 ff4e 	bl	8005700 <HAL_Delay>

	writeData = 0x04;
 8002864:	2304      	movs	r3, #4
 8002866:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, SMPLRT_DIV, 1, &writeData, 1, i2c_timeout);
 8002868:	2364      	movs	r3, #100	; 0x64
 800286a:	9302      	str	r3, [sp, #8]
 800286c:	2301      	movs	r3, #1
 800286e:	9301      	str	r3, [sp, #4]
 8002870:	f107 030e 	add.w	r3, r7, #14
 8002874:	9300      	str	r3, [sp, #0]
 8002876:	2301      	movs	r3, #1
 8002878:	2219      	movs	r2, #25
 800287a:	21d0      	movs	r1, #208	; 0xd0
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f004 f901 	bl	8006a84 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8002882:	2064      	movs	r0, #100	; 0x64
 8002884:	f002 ff3c 	bl	8005700 <HAL_Delay>

	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &readData, 1, i2c_timeout);
 8002888:	2364      	movs	r3, #100	; 0x64
 800288a:	9302      	str	r3, [sp, #8]
 800288c:	2301      	movs	r3, #1
 800288e:	9301      	str	r3, [sp, #4]
 8002890:	f107 030f 	add.w	r3, r7, #15
 8002894:	9300      	str	r3, [sp, #0]
 8002896:	2301      	movs	r3, #1
 8002898:	221b      	movs	r2, #27
 800289a:	21d0      	movs	r1, #208	; 0xd0
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f004 f9eb 	bl	8006c78 <HAL_I2C_Mem_Read>
	readData = readData & ~0x03; // Clear Fchoice bits [1:0]
 80028a2:	7bfb      	ldrb	r3, [r7, #15]
 80028a4:	f023 0303 	bic.w	r3, r3, #3
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	73fb      	strb	r3, [r7, #15]
	readData = readData & ~0x18; // Clear GFS bits [4:3]
 80028ac:	7bfb      	ldrb	r3, [r7, #15]
 80028ae:	f023 0318 	bic.w	r3, r3, #24
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	73fb      	strb	r3, [r7, #15]
	readData = readData | Gscale << 3; // Set full scale range for the gyro
 80028b6:	4b3e      	ldr	r3, [pc, #248]	; (80029b0 <initMPU9250+0x1c0>)
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	00db      	lsls	r3, r3, #3
 80028bc:	b25a      	sxtb	r2, r3
 80028be:	7bfb      	ldrb	r3, [r7, #15]
 80028c0:	b25b      	sxtb	r3, r3
 80028c2:	4313      	orrs	r3, r2
 80028c4:	b25b      	sxtb	r3, r3
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(100);
 80028ca:	2064      	movs	r0, #100	; 0x64
 80028cc:	f002 ff18 	bl	8005700 <HAL_Delay>

	writeData = readData;
 80028d0:	7bfb      	ldrb	r3, [r7, #15]
 80028d2:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);
 80028d4:	2364      	movs	r3, #100	; 0x64
 80028d6:	9302      	str	r3, [sp, #8]
 80028d8:	2301      	movs	r3, #1
 80028da:	9301      	str	r3, [sp, #4]
 80028dc:	f107 030e 	add.w	r3, r7, #14
 80028e0:	9300      	str	r3, [sp, #0]
 80028e2:	2301      	movs	r3, #1
 80028e4:	221b      	movs	r2, #27
 80028e6:	21d0      	movs	r1, #208	; 0xd0
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f004 f8cb 	bl	8006a84 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 80028ee:	2064      	movs	r0, #100	; 0x64
 80028f0:	f002 ff06 	bl	8005700 <HAL_Delay>

	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &readData, 1, i2c_timeout);
 80028f4:	2364      	movs	r3, #100	; 0x64
 80028f6:	9302      	str	r3, [sp, #8]
 80028f8:	2301      	movs	r3, #1
 80028fa:	9301      	str	r3, [sp, #4]
 80028fc:	f107 030f 	add.w	r3, r7, #15
 8002900:	9300      	str	r3, [sp, #0]
 8002902:	2301      	movs	r3, #1
 8002904:	221c      	movs	r2, #28
 8002906:	21d0      	movs	r1, #208	; 0xd0
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f004 f9b5 	bl	8006c78 <HAL_I2C_Mem_Read>
	readData = readData & ~0x18;  // Clear AFS bits [4:3]
 800290e:	7bfb      	ldrb	r3, [r7, #15]
 8002910:	f023 0318 	bic.w	r3, r3, #24
 8002914:	b2db      	uxtb	r3, r3
 8002916:	73fb      	strb	r3, [r7, #15]
	readData = readData | Ascale << 3; // Set full scale range for the accelerometer
 8002918:	4b26      	ldr	r3, [pc, #152]	; (80029b4 <initMPU9250+0x1c4>)
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	00db      	lsls	r3, r3, #3
 800291e:	b25a      	sxtb	r2, r3
 8002920:	7bfb      	ldrb	r3, [r7, #15]
 8002922:	b25b      	sxtb	r3, r3
 8002924:	4313      	orrs	r3, r2
 8002926:	b25b      	sxtb	r3, r3
 8002928:	b2db      	uxtb	r3, r3
 800292a:	73fb      	strb	r3, [r7, #15]

	writeData = readData;
 800292c:	7bfb      	ldrb	r3, [r7, #15]
 800292e:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);
 8002930:	2364      	movs	r3, #100	; 0x64
 8002932:	9302      	str	r3, [sp, #8]
 8002934:	2301      	movs	r3, #1
 8002936:	9301      	str	r3, [sp, #4]
 8002938:	f107 030e 	add.w	r3, r7, #14
 800293c:	9300      	str	r3, [sp, #0]
 800293e:	2301      	movs	r3, #1
 8002940:	221c      	movs	r2, #28
 8002942:	21d0      	movs	r1, #208	; 0xd0
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f004 f89d 	bl	8006a84 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 800294a:	2064      	movs	r0, #100	; 0x64
 800294c:	f002 fed8 	bl	8005700 <HAL_Delay>
	//**
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG2, 1, &readData, 1, i2c_timeout);
 8002950:	2364      	movs	r3, #100	; 0x64
 8002952:	9302      	str	r3, [sp, #8]
 8002954:	2301      	movs	r3, #1
 8002956:	9301      	str	r3, [sp, #4]
 8002958:	f107 030f 	add.w	r3, r7, #15
 800295c:	9300      	str	r3, [sp, #0]
 800295e:	2301      	movs	r3, #1
 8002960:	221d      	movs	r2, #29
 8002962:	21d0      	movs	r1, #208	; 0xd0
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f004 f987 	bl	8006c78 <HAL_I2C_Mem_Read>
	readData = readData & ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 800296a:	7bfb      	ldrb	r3, [r7, #15]
 800296c:	f023 030f 	bic.w	r3, r3, #15
 8002970:	b2db      	uxtb	r3, r3
 8002972:	73fb      	strb	r3, [r7, #15]
	readData = readData | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 8002974:	7bfb      	ldrb	r3, [r7, #15]
 8002976:	f043 0303 	orr.w	r3, r3, #3
 800297a:	b2db      	uxtb	r3, r3
 800297c:	73fb      	strb	r3, [r7, #15]

	writeData = readData;
 800297e:	7bfb      	ldrb	r3, [r7, #15]
 8002980:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG2, 1, &writeData, 1, i2c_timeout);
 8002982:	2364      	movs	r3, #100	; 0x64
 8002984:	9302      	str	r3, [sp, #8]
 8002986:	2301      	movs	r3, #1
 8002988:	9301      	str	r3, [sp, #4]
 800298a:	f107 030e 	add.w	r3, r7, #14
 800298e:	9300      	str	r3, [sp, #0]
 8002990:	2301      	movs	r3, #1
 8002992:	221d      	movs	r2, #29
 8002994:	21d0      	movs	r1, #208	; 0xd0
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f004 f874 	bl	8006a84 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 800299c:	2064      	movs	r0, #100	; 0x64
 800299e:	f002 feaf 	bl	8005700 <HAL_Delay>

	if(SerialDebugA){printf("MPU Init Succesful! \r\n");}
 80029a2:	4805      	ldr	r0, [pc, #20]	; (80029b8 <initMPU9250+0x1c8>)
 80029a4:	f007 fc3a 	bl	800a21c <puts>
}
 80029a8:	bf00      	nop
 80029aa:	3710      	adds	r7, #16
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	20000000 	.word	0x20000000
 80029b4:	20000001 	.word	0x20000001
 80029b8:	0800b254 	.word	0x0800b254

080029bc <calibrateMPU9250>:


// Function which accumulates gyro and accelerometer data after device initialization. It calculates the average
// of the at-rest readings and then loads the resulting offsets into accelerometer and gyro bias registers.
void calibrateMPU9250(I2C_HandleTypeDef *I2Cx, float * dest1, float * dest2){
 80029bc:	b5b0      	push	{r4, r5, r7, lr}
 80029be:	b0a4      	sub	sp, #144	; 0x90
 80029c0:	af04      	add	r7, sp, #16
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	607a      	str	r2, [r7, #4]
  //pre def. vars
  uint8_t writeData;

	uint8_t calibData[12]; // data array to hold accelerometer and gyro x, y, z, data
	uint16_t ii, packet_count, fifo_count;
	int32_t gyro_bias[3]  = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
 80029c8:	2300      	movs	r3, #0
 80029ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029cc:	2300      	movs	r3, #0
 80029ce:	643b      	str	r3, [r7, #64]	; 0x40
 80029d0:	2300      	movs	r3, #0
 80029d2:	647b      	str	r3, [r7, #68]	; 0x44
 80029d4:	2300      	movs	r3, #0
 80029d6:	633b      	str	r3, [r7, #48]	; 0x30
 80029d8:	2300      	movs	r3, #0
 80029da:	637b      	str	r3, [r7, #52]	; 0x34
 80029dc:	2300      	movs	r3, #0
 80029de:	63bb      	str	r3, [r7, #56]	; 0x38

	// reset device
	writeData = 0x80;
 80029e0:	2380      	movs	r3, #128	; 0x80
 80029e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);// Write a one to bit 7 reset bit; toggle reset device
 80029e6:	2364      	movs	r3, #100	; 0x64
 80029e8:	9302      	str	r3, [sp, #8]
 80029ea:	2301      	movs	r3, #1
 80029ec:	9301      	str	r3, [sp, #4]
 80029ee:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80029f2:	9300      	str	r3, [sp, #0]
 80029f4:	2301      	movs	r3, #1
 80029f6:	226b      	movs	r2, #107	; 0x6b
 80029f8:	21d0      	movs	r1, #208	; 0xd0
 80029fa:	68f8      	ldr	r0, [r7, #12]
 80029fc:	f004 f842 	bl	8006a84 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8002a00:	2064      	movs	r0, #100	; 0x64
 8002a02:	f002 fe7d 	bl	8005700 <HAL_Delay>

	// get stable time source; Auto select clock source to be PLL gyroscope reference if ready
	// else use the internal oscillator, bits 2:0 = 001
	writeData = 0x01;
 8002a06:	2301      	movs	r3, #1
 8002a08:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);
 8002a0c:	2364      	movs	r3, #100	; 0x64
 8002a0e:	9302      	str	r3, [sp, #8]
 8002a10:	2301      	movs	r3, #1
 8002a12:	9301      	str	r3, [sp, #4]
 8002a14:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8002a18:	9300      	str	r3, [sp, #0]
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	226b      	movs	r2, #107	; 0x6b
 8002a1e:	21d0      	movs	r1, #208	; 0xd0
 8002a20:	68f8      	ldr	r0, [r7, #12]
 8002a22:	f004 f82f 	bl	8006a84 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8002a26:	2300      	movs	r3, #0
 8002a28:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_2, 1, &writeData, 1, i2c_timeout);
 8002a2c:	2364      	movs	r3, #100	; 0x64
 8002a2e:	9302      	str	r3, [sp, #8]
 8002a30:	2301      	movs	r3, #1
 8002a32:	9301      	str	r3, [sp, #4]
 8002a34:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8002a38:	9300      	str	r3, [sp, #0]
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	226c      	movs	r2, #108	; 0x6c
 8002a3e:	21d0      	movs	r1, #208	; 0xd0
 8002a40:	68f8      	ldr	r0, [r7, #12]
 8002a42:	f004 f81f 	bl	8006a84 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 8002a46:	20c8      	movs	r0, #200	; 0xc8
 8002a48:	f002 fe5a 	bl	8005700 <HAL_Delay>

	// Configure device for bias calculation
	writeData = 0x00;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, INT_ENABLE, 1, &writeData, 1, i2c_timeout);// Disable all interrupts
 8002a52:	2364      	movs	r3, #100	; 0x64
 8002a54:	9302      	str	r3, [sp, #8]
 8002a56:	2301      	movs	r3, #1
 8002a58:	9301      	str	r3, [sp, #4]
 8002a5a:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8002a5e:	9300      	str	r3, [sp, #0]
 8002a60:	2301      	movs	r3, #1
 8002a62:	2238      	movs	r2, #56	; 0x38
 8002a64:	21d0      	movs	r1, #208	; 0xd0
 8002a66:	68f8      	ldr	r0, [r7, #12]
 8002a68:	f004 f80c 	bl	8006a84 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, FIFO_EN, 1, &writeData, 1, i2c_timeout);// Disable FIFO
 8002a72:	2364      	movs	r3, #100	; 0x64
 8002a74:	9302      	str	r3, [sp, #8]
 8002a76:	2301      	movs	r3, #1
 8002a78:	9301      	str	r3, [sp, #4]
 8002a7a:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8002a7e:	9300      	str	r3, [sp, #0]
 8002a80:	2301      	movs	r3, #1
 8002a82:	2223      	movs	r2, #35	; 0x23
 8002a84:	21d0      	movs	r1, #208	; 0xd0
 8002a86:	68f8      	ldr	r0, [r7, #12]
 8002a88:	f003 fffc 	bl	8006a84 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);// Turn on internal clock source
 8002a92:	2364      	movs	r3, #100	; 0x64
 8002a94:	9302      	str	r3, [sp, #8]
 8002a96:	2301      	movs	r3, #1
 8002a98:	9301      	str	r3, [sp, #4]
 8002a9a:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8002a9e:	9300      	str	r3, [sp, #0]
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	226b      	movs	r2, #107	; 0x6b
 8002aa4:	21d0      	movs	r1, #208	; 0xd0
 8002aa6:	68f8      	ldr	r0, [r7, #12]
 8002aa8:	f003 ffec 	bl	8006a84 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8002aac:	2300      	movs	r3, #0
 8002aae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, I2C_MST_CTRL, 1, &writeData, 1, i2c_timeout);// Disable I2C master
 8002ab2:	2364      	movs	r3, #100	; 0x64
 8002ab4:	9302      	str	r3, [sp, #8]
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	9301      	str	r3, [sp, #4]
 8002aba:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8002abe:	9300      	str	r3, [sp, #0]
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	2224      	movs	r2, #36	; 0x24
 8002ac4:	21d0      	movs	r1, #208	; 0xd0
 8002ac6:	68f8      	ldr	r0, [r7, #12]
 8002ac8:	f003 ffdc 	bl	8006a84 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8002acc:	2300      	movs	r3, #0
 8002ace:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, USER_CTRL, 1, &writeData, 1, i2c_timeout);// Disable FIFO and I2C master modes
 8002ad2:	2364      	movs	r3, #100	; 0x64
 8002ad4:	9302      	str	r3, [sp, #8]
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	9301      	str	r3, [sp, #4]
 8002ada:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8002ade:	9300      	str	r3, [sp, #0]
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	226a      	movs	r2, #106	; 0x6a
 8002ae4:	21d0      	movs	r1, #208	; 0xd0
 8002ae6:	68f8      	ldr	r0, [r7, #12]
 8002ae8:	f003 ffcc 	bl	8006a84 <HAL_I2C_Mem_Write>
	writeData = 0x0C;
 8002aec:	230c      	movs	r3, #12
 8002aee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, USER_CTRL, 1, &writeData, 1, i2c_timeout);// Reset FIFO and DMP
 8002af2:	2364      	movs	r3, #100	; 0x64
 8002af4:	9302      	str	r3, [sp, #8]
 8002af6:	2301      	movs	r3, #1
 8002af8:	9301      	str	r3, [sp, #4]
 8002afa:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8002afe:	9300      	str	r3, [sp, #0]
 8002b00:	2301      	movs	r3, #1
 8002b02:	226a      	movs	r2, #106	; 0x6a
 8002b04:	21d0      	movs	r1, #208	; 0xd0
 8002b06:	68f8      	ldr	r0, [r7, #12]
 8002b08:	f003 ffbc 	bl	8006a84 <HAL_I2C_Mem_Write>
	HAL_Delay(15);
 8002b0c:	200f      	movs	r0, #15
 8002b0e:	f002 fdf7 	bl	8005700 <HAL_Delay>

	// Configure MPU6050 gyro and accelerometer for bias calculation
	writeData = 0x01;
 8002b12:	2301      	movs	r3, #1
 8002b14:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, CONFIG, 1, &writeData, 1, i2c_timeout);// Set low-pass filter to 188 Hz
 8002b18:	2364      	movs	r3, #100	; 0x64
 8002b1a:	9302      	str	r3, [sp, #8]
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	9301      	str	r3, [sp, #4]
 8002b20:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8002b24:	9300      	str	r3, [sp, #0]
 8002b26:	2301      	movs	r3, #1
 8002b28:	221a      	movs	r2, #26
 8002b2a:	21d0      	movs	r1, #208	; 0xd0
 8002b2c:	68f8      	ldr	r0, [r7, #12]
 8002b2e:	f003 ffa9 	bl	8006a84 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8002b32:	2300      	movs	r3, #0
 8002b34:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, SMPLRT_DIV, 1, &writeData, 1, i2c_timeout);// Set sample rate to 1 kHz
 8002b38:	2364      	movs	r3, #100	; 0x64
 8002b3a:	9302      	str	r3, [sp, #8]
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	9301      	str	r3, [sp, #4]
 8002b40:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8002b44:	9300      	str	r3, [sp, #0]
 8002b46:	2301      	movs	r3, #1
 8002b48:	2219      	movs	r2, #25
 8002b4a:	21d0      	movs	r1, #208	; 0xd0
 8002b4c:	68f8      	ldr	r0, [r7, #12]
 8002b4e:	f003 ff99 	bl	8006a84 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8002b52:	2300      	movs	r3, #0
 8002b54:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);// Set gyro full-scale to 250 degrees per second, maximum sensitivity
 8002b58:	2364      	movs	r3, #100	; 0x64
 8002b5a:	9302      	str	r3, [sp, #8]
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	9301      	str	r3, [sp, #4]
 8002b60:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8002b64:	9300      	str	r3, [sp, #0]
 8002b66:	2301      	movs	r3, #1
 8002b68:	221b      	movs	r2, #27
 8002b6a:	21d0      	movs	r1, #208	; 0xd0
 8002b6c:	68f8      	ldr	r0, [r7, #12]
 8002b6e:	f003 ff89 	bl	8006a84 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8002b72:	2300      	movs	r3, #0
 8002b74:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);// Set accelerometer full-scale to 2 g, maximum sensitivity
 8002b78:	2364      	movs	r3, #100	; 0x64
 8002b7a:	9302      	str	r3, [sp, #8]
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	9301      	str	r3, [sp, #4]
 8002b80:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8002b84:	9300      	str	r3, [sp, #0]
 8002b86:	2301      	movs	r3, #1
 8002b88:	221c      	movs	r2, #28
 8002b8a:	21d0      	movs	r1, #208	; 0xd0
 8002b8c:	68f8      	ldr	r0, [r7, #12]
 8002b8e:	f003 ff79 	bl	8006a84 <HAL_I2C_Mem_Write>

	uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
 8002b92:	2383      	movs	r3, #131	; 0x83
 8002b94:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
	uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g
 8002b98:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002b9c:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

	// Configure FIFO to capture accelerometer and gyro data for bias calculation
	writeData = 0x40;
 8002ba0:	2340      	movs	r3, #64	; 0x40
 8002ba2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, USER_CTRL, 1, &writeData, 1, i2c_timeout);// Enable FIFO
 8002ba6:	2364      	movs	r3, #100	; 0x64
 8002ba8:	9302      	str	r3, [sp, #8]
 8002baa:	2301      	movs	r3, #1
 8002bac:	9301      	str	r3, [sp, #4]
 8002bae:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8002bb2:	9300      	str	r3, [sp, #0]
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	226a      	movs	r2, #106	; 0x6a
 8002bb8:	21d0      	movs	r1, #208	; 0xd0
 8002bba:	68f8      	ldr	r0, [r7, #12]
 8002bbc:	f003 ff62 	bl	8006a84 <HAL_I2C_Mem_Write>
	writeData = 0x78;
 8002bc0:	2378      	movs	r3, #120	; 0x78
 8002bc2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, FIFO_EN, 1, &writeData, 1, i2c_timeout);// Enable gyro and accelerometer sensors for FIFO  (max size 512 bytes in MPU-9150)
 8002bc6:	2364      	movs	r3, #100	; 0x64
 8002bc8:	9302      	str	r3, [sp, #8]
 8002bca:	2301      	movs	r3, #1
 8002bcc:	9301      	str	r3, [sp, #4]
 8002bce:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8002bd2:	9300      	str	r3, [sp, #0]
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	2223      	movs	r2, #35	; 0x23
 8002bd8:	21d0      	movs	r1, #208	; 0xd0
 8002bda:	68f8      	ldr	r0, [r7, #12]
 8002bdc:	f003 ff52 	bl	8006a84 <HAL_I2C_Mem_Write>
	HAL_Delay(40); // accumulate 40 samples in 40 milliseconds = 480 bytes
 8002be0:	2028      	movs	r0, #40	; 0x28
 8002be2:	f002 fd8d 	bl	8005700 <HAL_Delay>

	// At end of sample accumulation, turn off FIFO sensor read
	writeData = 0x00;
 8002be6:	2300      	movs	r3, #0
 8002be8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, FIFO_EN, 1, &writeData, 1, i2c_timeout);// Disable gyro and accelerometer sensors for FIFO
 8002bec:	2364      	movs	r3, #100	; 0x64
 8002bee:	9302      	str	r3, [sp, #8]
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	9301      	str	r3, [sp, #4]
 8002bf4:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8002bf8:	9300      	str	r3, [sp, #0]
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	2223      	movs	r2, #35	; 0x23
 8002bfe:	21d0      	movs	r1, #208	; 0xd0
 8002c00:	68f8      	ldr	r0, [r7, #12]
 8002c02:	f003 ff3f 	bl	8006a84 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, FIFO_COUNTH, 1, &calibData[0], 2, i2c_timeout);// read FIFO sample count
 8002c06:	2364      	movs	r3, #100	; 0x64
 8002c08:	9302      	str	r3, [sp, #8]
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	9301      	str	r3, [sp, #4]
 8002c0e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002c12:	9300      	str	r3, [sp, #0]
 8002c14:	2301      	movs	r3, #1
 8002c16:	2272      	movs	r2, #114	; 0x72
 8002c18:	21d0      	movs	r1, #208	; 0xd0
 8002c1a:	68f8      	ldr	r0, [r7, #12]
 8002c1c:	f004 f82c 	bl	8006c78 <HAL_I2C_Mem_Read>
	fifo_count = ((uint16_t)calibData[0] << 8) | calibData[1];
 8002c20:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002c24:	021b      	lsls	r3, r3, #8
 8002c26:	b21a      	sxth	r2, r3
 8002c28:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8002c2c:	b21b      	sxth	r3, r3
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	b21b      	sxth	r3, r3
 8002c32:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
	packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
 8002c36:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002c3a:	4a5a      	ldr	r2, [pc, #360]	; (8002da4 <calibrateMPU9250+0x3e8>)
 8002c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c40:	08db      	lsrs	r3, r3, #3
 8002c42:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

	for (ii = 0; ii < packet_count; ii++) {
 8002c46:	2300      	movs	r3, #0
 8002c48:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8002c4c:	e077      	b.n	8002d3e <calibrateMPU9250+0x382>
		int16_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};
 8002c4e:	2300      	movs	r3, #0
 8002c50:	833b      	strh	r3, [r7, #24]
 8002c52:	2300      	movs	r3, #0
 8002c54:	837b      	strh	r3, [r7, #26]
 8002c56:	2300      	movs	r3, #0
 8002c58:	83bb      	strh	r3, [r7, #28]
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	823b      	strh	r3, [r7, #16]
 8002c5e:	2300      	movs	r3, #0
 8002c60:	827b      	strh	r3, [r7, #18]
 8002c62:	2300      	movs	r3, #0
 8002c64:	82bb      	strh	r3, [r7, #20]
		HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, FIFO_R_W, 1, &calibData[0], 12, i2c_timeout);
 8002c66:	2364      	movs	r3, #100	; 0x64
 8002c68:	9302      	str	r3, [sp, #8]
 8002c6a:	230c      	movs	r3, #12
 8002c6c:	9301      	str	r3, [sp, #4]
 8002c6e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002c72:	9300      	str	r3, [sp, #0]
 8002c74:	2301      	movs	r3, #1
 8002c76:	2274      	movs	r2, #116	; 0x74
 8002c78:	21d0      	movs	r1, #208	; 0xd0
 8002c7a:	68f8      	ldr	r0, [r7, #12]
 8002c7c:	f003 fffc 	bl	8006c78 <HAL_I2C_Mem_Read>

		//Form signed 16-bit integer for each sample in FIFO
		accel_temp[0] = (int16_t) (((int16_t)calibData[0] << 8) | calibData[1]  ) ;
 8002c80:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002c84:	021b      	lsls	r3, r3, #8
 8002c86:	b21a      	sxth	r2, r3
 8002c88:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8002c8c:	b21b      	sxth	r3, r3
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	b21b      	sxth	r3, r3
 8002c92:	833b      	strh	r3, [r7, #24]
		accel_temp[1] = (int16_t) (((int16_t)calibData[2] << 8) | calibData[3]  ) ;
 8002c94:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002c98:	021b      	lsls	r3, r3, #8
 8002c9a:	b21a      	sxth	r2, r3
 8002c9c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002ca0:	b21b      	sxth	r3, r3
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	b21b      	sxth	r3, r3
 8002ca6:	837b      	strh	r3, [r7, #26]
		accel_temp[2] = (int16_t) (((int16_t)calibData[4] << 8) | calibData[5]  ) ;
 8002ca8:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002cac:	021b      	lsls	r3, r3, #8
 8002cae:	b21a      	sxth	r2, r3
 8002cb0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002cb4:	b21b      	sxth	r3, r3
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	b21b      	sxth	r3, r3
 8002cba:	83bb      	strh	r3, [r7, #28]
		gyro_temp[0]  = (int16_t) (((int16_t)calibData[6] << 8) | calibData[7]  ) ;
 8002cbc:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002cc0:	021b      	lsls	r3, r3, #8
 8002cc2:	b21a      	sxth	r2, r3
 8002cc4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002cc8:	b21b      	sxth	r3, r3
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	b21b      	sxth	r3, r3
 8002cce:	823b      	strh	r3, [r7, #16]
		gyro_temp[1]  = (int16_t) (((int16_t)calibData[8] << 8) | calibData[9]  ) ;
 8002cd0:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8002cd4:	021b      	lsls	r3, r3, #8
 8002cd6:	b21a      	sxth	r2, r3
 8002cd8:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8002cdc:	b21b      	sxth	r3, r3
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	b21b      	sxth	r3, r3
 8002ce2:	827b      	strh	r3, [r7, #18]
		gyro_temp[2]  = (int16_t) (((int16_t)calibData[10] << 8) | calibData[11]) ;
 8002ce4:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8002ce8:	021b      	lsls	r3, r3, #8
 8002cea:	b21a      	sxth	r2, r3
 8002cec:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8002cf0:	b21b      	sxth	r3, r3
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	b21b      	sxth	r3, r3
 8002cf6:	82bb      	strh	r3, [r7, #20]

		//Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
		accel_bias[0] += (int32_t) accel_temp[0];
 8002cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cfa:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002cfe:	4413      	add	r3, r2
 8002d00:	633b      	str	r3, [r7, #48]	; 0x30
		accel_bias[1] += (int32_t) accel_temp[1];
 8002d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d04:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8002d08:	4413      	add	r3, r2
 8002d0a:	637b      	str	r3, [r7, #52]	; 0x34
		accel_bias[2] += (int32_t) accel_temp[2];
 8002d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d0e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8002d12:	4413      	add	r3, r2
 8002d14:	63bb      	str	r3, [r7, #56]	; 0x38
		gyro_bias[0]  += (int32_t) gyro_temp[0];
 8002d16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d18:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002d1c:	4413      	add	r3, r2
 8002d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
		gyro_bias[1]  += (int32_t) gyro_temp[1];
 8002d20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d22:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002d26:	4413      	add	r3, r2
 8002d28:	643b      	str	r3, [r7, #64]	; 0x40
		gyro_bias[2]  += (int32_t) gyro_temp[2];
 8002d2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d2c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002d30:	4413      	add	r3, r2
 8002d32:	647b      	str	r3, [r7, #68]	; 0x44
	for (ii = 0; ii < packet_count; ii++) {
 8002d34:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002d38:	3301      	adds	r3, #1
 8002d3a:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8002d3e:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8002d42:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d381      	bcc.n	8002c4e <calibrateMPU9250+0x292>
	}

	//Normalize sums to get average count biases
	accel_bias[0] /= (int32_t) packet_count;
 8002d4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d4c:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002d50:	fb92 f3f3 	sdiv	r3, r2, r3
 8002d54:	633b      	str	r3, [r7, #48]	; 0x30
	accel_bias[1] /= (int32_t) packet_count;
 8002d56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d58:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002d5c:	fb92 f3f3 	sdiv	r3, r2, r3
 8002d60:	637b      	str	r3, [r7, #52]	; 0x34
	accel_bias[2] /= (int32_t) packet_count;
 8002d62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d64:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002d68:	fb92 f3f3 	sdiv	r3, r2, r3
 8002d6c:	63bb      	str	r3, [r7, #56]	; 0x38
	gyro_bias[0]  /= (int32_t) packet_count;
 8002d6e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d70:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002d74:	fb92 f3f3 	sdiv	r3, r2, r3
 8002d78:	63fb      	str	r3, [r7, #60]	; 0x3c
	gyro_bias[1]  /= (int32_t) packet_count;
 8002d7a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002d7c:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002d80:	fb92 f3f3 	sdiv	r3, r2, r3
 8002d84:	643b      	str	r3, [r7, #64]	; 0x40
	gyro_bias[2]  /= (int32_t) packet_count;
 8002d86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d88:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002d8c:	fb92 f3f3 	sdiv	r3, r2, r3
 8002d90:	647b      	str	r3, [r7, #68]	; 0x44

	//Remove gravity from the z-axis accelerometer bias calculation
	if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}
 8002d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	dd07      	ble.n	8002da8 <calibrateMPU9250+0x3ec>
 8002d98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d9a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	63bb      	str	r3, [r7, #56]	; 0x38
 8002da2:	e006      	b.n	8002db2 <calibrateMPU9250+0x3f6>
 8002da4:	aaaaaaab 	.word	0xaaaaaaab
	else {accel_bias[2] += (int32_t) accelsensitivity;}
 8002da8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002daa:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002dae:	4413      	add	r3, r2
 8002db0:	63bb      	str	r3, [r7, #56]	; 0x38

	//Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
	calibData[0] = (-gyro_bias[0]/4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 8002db2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002db4:	425b      	negs	r3, r3
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	da00      	bge.n	8002dbc <calibrateMPU9250+0x400>
 8002dba:	3303      	adds	r3, #3
 8002dbc:	109b      	asrs	r3, r3, #2
 8002dbe:	121b      	asrs	r3, r3, #8
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	calibData[1] = (-gyro_bias[0]/4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
 8002dc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dc8:	425b      	negs	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	da00      	bge.n	8002dd0 <calibrateMPU9250+0x414>
 8002dce:	3303      	adds	r3, #3
 8002dd0:	109b      	asrs	r3, r3, #2
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	calibData[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
 8002dd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dda:	425b      	negs	r3, r3
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	da00      	bge.n	8002de2 <calibrateMPU9250+0x426>
 8002de0:	3303      	adds	r3, #3
 8002de2:	109b      	asrs	r3, r3, #2
 8002de4:	121b      	asrs	r3, r3, #8
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	calibData[3] = (-gyro_bias[1]/4)       & 0xFF;
 8002dec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dee:	425b      	negs	r3, r3
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	da00      	bge.n	8002df6 <calibrateMPU9250+0x43a>
 8002df4:	3303      	adds	r3, #3
 8002df6:	109b      	asrs	r3, r3, #2
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	calibData[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
 8002dfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e00:	425b      	negs	r3, r3
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	da00      	bge.n	8002e08 <calibrateMPU9250+0x44c>
 8002e06:	3303      	adds	r3, #3
 8002e08:	109b      	asrs	r3, r3, #2
 8002e0a:	121b      	asrs	r3, r3, #8
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	calibData[5] = (-gyro_bias[2]/4)       & 0xFF;
 8002e12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e14:	425b      	negs	r3, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	da00      	bge.n	8002e1c <calibrateMPU9250+0x460>
 8002e1a:	3303      	adds	r3, #3
 8002e1c:	109b      	asrs	r3, r3, #2
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

	//Push gyro biases to hardware registers
	writeData = calibData[0];
 8002e24:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002e28:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, XG_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 8002e2c:	2364      	movs	r3, #100	; 0x64
 8002e2e:	9302      	str	r3, [sp, #8]
 8002e30:	2301      	movs	r3, #1
 8002e32:	9301      	str	r3, [sp, #4]
 8002e34:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8002e38:	9300      	str	r3, [sp, #0]
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	2213      	movs	r2, #19
 8002e3e:	21d0      	movs	r1, #208	; 0xd0
 8002e40:	68f8      	ldr	r0, [r7, #12]
 8002e42:	f003 fe1f 	bl	8006a84 <HAL_I2C_Mem_Write>
	writeData = calibData[1];
 8002e46:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8002e4a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, XG_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 8002e4e:	2364      	movs	r3, #100	; 0x64
 8002e50:	9302      	str	r3, [sp, #8]
 8002e52:	2301      	movs	r3, #1
 8002e54:	9301      	str	r3, [sp, #4]
 8002e56:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8002e5a:	9300      	str	r3, [sp, #0]
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	2214      	movs	r2, #20
 8002e60:	21d0      	movs	r1, #208	; 0xd0
 8002e62:	68f8      	ldr	r0, [r7, #12]
 8002e64:	f003 fe0e 	bl	8006a84 <HAL_I2C_Mem_Write>
	writeData = calibData[2];
 8002e68:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002e6c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, YG_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 8002e70:	2364      	movs	r3, #100	; 0x64
 8002e72:	9302      	str	r3, [sp, #8]
 8002e74:	2301      	movs	r3, #1
 8002e76:	9301      	str	r3, [sp, #4]
 8002e78:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8002e7c:	9300      	str	r3, [sp, #0]
 8002e7e:	2301      	movs	r3, #1
 8002e80:	2215      	movs	r2, #21
 8002e82:	21d0      	movs	r1, #208	; 0xd0
 8002e84:	68f8      	ldr	r0, [r7, #12]
 8002e86:	f003 fdfd 	bl	8006a84 <HAL_I2C_Mem_Write>
	writeData = calibData[3];
 8002e8a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002e8e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, YG_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 8002e92:	2364      	movs	r3, #100	; 0x64
 8002e94:	9302      	str	r3, [sp, #8]
 8002e96:	2301      	movs	r3, #1
 8002e98:	9301      	str	r3, [sp, #4]
 8002e9a:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8002e9e:	9300      	str	r3, [sp, #0]
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	2216      	movs	r2, #22
 8002ea4:	21d0      	movs	r1, #208	; 0xd0
 8002ea6:	68f8      	ldr	r0, [r7, #12]
 8002ea8:	f003 fdec 	bl	8006a84 <HAL_I2C_Mem_Write>
	writeData = calibData[4];
 8002eac:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002eb0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ZG_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 8002eb4:	2364      	movs	r3, #100	; 0x64
 8002eb6:	9302      	str	r3, [sp, #8]
 8002eb8:	2301      	movs	r3, #1
 8002eba:	9301      	str	r3, [sp, #4]
 8002ebc:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8002ec0:	9300      	str	r3, [sp, #0]
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	2217      	movs	r2, #23
 8002ec6:	21d0      	movs	r1, #208	; 0xd0
 8002ec8:	68f8      	ldr	r0, [r7, #12]
 8002eca:	f003 fddb 	bl	8006a84 <HAL_I2C_Mem_Write>
	writeData = calibData[5];
 8002ece:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002ed2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ZG_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 8002ed6:	2364      	movs	r3, #100	; 0x64
 8002ed8:	9302      	str	r3, [sp, #8]
 8002eda:	2301      	movs	r3, #1
 8002edc:	9301      	str	r3, [sp, #4]
 8002ede:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8002ee2:	9300      	str	r3, [sp, #0]
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	2218      	movs	r2, #24
 8002ee8:	21d0      	movs	r1, #208	; 0xd0
 8002eea:	68f8      	ldr	r0, [r7, #12]
 8002eec:	f003 fdca 	bl	8006a84 <HAL_I2C_Mem_Write>

	//Output scaled gyro biases for display in the main program
	dest1[0] = (float) gyro_bias[0]/(float) gyrosensitivity;
 8002ef0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f7fd fec2 	bl	8000c7c <__aeabi_i2f>
 8002ef8:	4604      	mov	r4, r0
 8002efa:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7fd feb8 	bl	8000c74 <__aeabi_ui2f>
 8002f04:	4603      	mov	r3, r0
 8002f06:	4619      	mov	r1, r3
 8002f08:	4620      	mov	r0, r4
 8002f0a:	f7fd ffbf 	bl	8000e8c <__aeabi_fdiv>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	461a      	mov	r2, r3
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	601a      	str	r2, [r3, #0]
	dest1[1] = (float) gyro_bias[1]/(float) gyrosensitivity;
 8002f16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7fd feaf 	bl	8000c7c <__aeabi_i2f>
 8002f1e:	4605      	mov	r5, r0
 8002f20:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7fd fea5 	bl	8000c74 <__aeabi_ui2f>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	1d1c      	adds	r4, r3, #4
 8002f30:	4611      	mov	r1, r2
 8002f32:	4628      	mov	r0, r5
 8002f34:	f7fd ffaa 	bl	8000e8c <__aeabi_fdiv>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	6023      	str	r3, [r4, #0]
	dest1[2] = (float) gyro_bias[2]/(float) gyrosensitivity;
 8002f3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7fd fe9c 	bl	8000c7c <__aeabi_i2f>
 8002f44:	4605      	mov	r5, r0
 8002f46:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7fd fe92 	bl	8000c74 <__aeabi_ui2f>
 8002f50:	4602      	mov	r2, r0
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	f103 0408 	add.w	r4, r3, #8
 8002f58:	4611      	mov	r1, r2
 8002f5a:	4628      	mov	r0, r5
 8002f5c:	f7fd ff96 	bl	8000e8c <__aeabi_fdiv>
 8002f60:	4603      	mov	r3, r0
 8002f62:	6023      	str	r3, [r4, #0]

	if(SerialDebugA){
		float gyroBiasX = (float) gyro_bias[0]/(float) gyrosensitivity;
 8002f64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7fd fe88 	bl	8000c7c <__aeabi_i2f>
 8002f6c:	4604      	mov	r4, r0
 8002f6e:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7fd fe7e 	bl	8000c74 <__aeabi_ui2f>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	4620      	mov	r0, r4
 8002f7e:	f7fd ff85 	bl	8000e8c <__aeabi_fdiv>
 8002f82:	4603      	mov	r3, r0
 8002f84:	673b      	str	r3, [r7, #112]	; 0x70
		float gyroBiasY = (float) gyro_bias[1]/(float) gyrosensitivity;
 8002f86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7fd fe77 	bl	8000c7c <__aeabi_i2f>
 8002f8e:	4604      	mov	r4, r0
 8002f90:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7fd fe6d 	bl	8000c74 <__aeabi_ui2f>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	4620      	mov	r0, r4
 8002fa0:	f7fd ff74 	bl	8000e8c <__aeabi_fdiv>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	66fb      	str	r3, [r7, #108]	; 0x6c
		float gyroBiasZ = (float) gyro_bias[2]/(float) gyrosensitivity;
 8002fa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7fd fe66 	bl	8000c7c <__aeabi_i2f>
 8002fb0:	4604      	mov	r4, r0
 8002fb2:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7fd fe5c 	bl	8000c74 <__aeabi_ui2f>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	4620      	mov	r0, r4
 8002fc2:	f7fd ff63 	bl	8000e8c <__aeabi_fdiv>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	66bb      	str	r3, [r7, #104]	; 0x68

		printf("-------------------------\r\n");*/
	}

	//Construct the accelerometer biases for push to the hardware accelerometer bias registers.
	int32_t accel_bias_reg[3] = {0, 0, 0}; //A place to hold the factory accelerometer trim biases
 8002fca:	2300      	movs	r3, #0
 8002fcc:	627b      	str	r3, [r7, #36]	; 0x24
 8002fce:	2300      	movs	r3, #0
 8002fd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, XA_OFFSET_H, 1, &calibData[0], 2, i2c_timeout); //Read factory accelerometer trim values
 8002fd6:	2364      	movs	r3, #100	; 0x64
 8002fd8:	9302      	str	r3, [sp, #8]
 8002fda:	2302      	movs	r3, #2
 8002fdc:	9301      	str	r3, [sp, #4]
 8002fde:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002fe2:	9300      	str	r3, [sp, #0]
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	2277      	movs	r2, #119	; 0x77
 8002fe8:	21d0      	movs	r1, #208	; 0xd0
 8002fea:	68f8      	ldr	r0, [r7, #12]
 8002fec:	f003 fe44 	bl	8006c78 <HAL_I2C_Mem_Read>
	accel_bias_reg[0] = (int32_t) (((int16_t)calibData[0] << 8) | calibData[1]);
 8002ff0:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002ff4:	021b      	lsls	r3, r3, #8
 8002ff6:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, YA_OFFSET_H, 1, &calibData[0], 2, i2c_timeout);
 8002ffe:	2364      	movs	r3, #100	; 0x64
 8003000:	9302      	str	r3, [sp, #8]
 8003002:	2302      	movs	r3, #2
 8003004:	9301      	str	r3, [sp, #4]
 8003006:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800300a:	9300      	str	r3, [sp, #0]
 800300c:	2301      	movs	r3, #1
 800300e:	227a      	movs	r2, #122	; 0x7a
 8003010:	21d0      	movs	r1, #208	; 0xd0
 8003012:	68f8      	ldr	r0, [r7, #12]
 8003014:	f003 fe30 	bl	8006c78 <HAL_I2C_Mem_Read>
	accel_bias_reg[1] = (int32_t) (((int16_t)calibData[0] << 8) | calibData[1]);
 8003018:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800301c:	021b      	lsls	r3, r3, #8
 800301e:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8003022:	4313      	orrs	r3, r2
 8003024:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ZA_OFFSET_H, 1, &calibData[0], 2, i2c_timeout);
 8003026:	2364      	movs	r3, #100	; 0x64
 8003028:	9302      	str	r3, [sp, #8]
 800302a:	2302      	movs	r3, #2
 800302c:	9301      	str	r3, [sp, #4]
 800302e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003032:	9300      	str	r3, [sp, #0]
 8003034:	2301      	movs	r3, #1
 8003036:	227d      	movs	r2, #125	; 0x7d
 8003038:	21d0      	movs	r1, #208	; 0xd0
 800303a:	68f8      	ldr	r0, [r7, #12]
 800303c:	f003 fe1c 	bl	8006c78 <HAL_I2C_Mem_Read>
	accel_bias_reg[2] = (int32_t) (((int16_t)calibData[0] << 8) | calibData[1]);
 8003040:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003044:	021b      	lsls	r3, r3, #8
 8003046:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 800304a:	4313      	orrs	r3, r2
 800304c:	62fb      	str	r3, [r7, #44]	; 0x2c

	//Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
	uint32_t mask = 1uL;
 800304e:	2301      	movs	r3, #1
 8003050:	667b      	str	r3, [r7, #100]	; 0x64
	//Define array to hold mask bit for each accelerometer bias axis
	uint8_t mask_bit[3] = {0, 0, 0};
 8003052:	4aa7      	ldr	r2, [pc, #668]	; (80032f0 <calibrateMPU9250+0x934>)
 8003054:	f107 0320 	add.w	r3, r7, #32
 8003058:	6812      	ldr	r2, [r2, #0]
 800305a:	4611      	mov	r1, r2
 800305c:	8019      	strh	r1, [r3, #0]
 800305e:	3302      	adds	r3, #2
 8003060:	0c12      	lsrs	r2, r2, #16
 8003062:	701a      	strb	r2, [r3, #0]

	for(ii = 0; ii < 3; ii++) {
 8003064:	2300      	movs	r3, #0
 8003066:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 800306a:	e017      	b.n	800309c <calibrateMPU9250+0x6e0>
		//If temperature compensation bit is set, record that fact in mask_bit
		if((accel_bias_reg[ii] & mask)) mask_bit[ii] = 0x01;
 800306c:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	3380      	adds	r3, #128	; 0x80
 8003074:	443b      	add	r3, r7
 8003076:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 800307a:	461a      	mov	r2, r3
 800307c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800307e:	4013      	ands	r3, r2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d006      	beq.n	8003092 <calibrateMPU9250+0x6d6>
 8003084:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8003088:	3380      	adds	r3, #128	; 0x80
 800308a:	443b      	add	r3, r7
 800308c:	2201      	movs	r2, #1
 800308e:	f803 2c60 	strb.w	r2, [r3, #-96]
	for(ii = 0; ii < 3; ii++) {
 8003092:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8003096:	3301      	adds	r3, #1
 8003098:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 800309c:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d9e3      	bls.n	800306c <calibrateMPU9250+0x6b0>
	}

	//Construct total accelerometer bias, including calculated average accelerometer bias from above
	accel_bias_reg[0] -= (accel_bias[0]/8); //Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
 80030a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	da00      	bge.n	80030ae <calibrateMPU9250+0x6f2>
 80030ac:	3307      	adds	r3, #7
 80030ae:	10db      	asrs	r3, r3, #3
 80030b0:	425b      	negs	r3, r3
 80030b2:	4413      	add	r3, r2
 80030b4:	627b      	str	r3, [r7, #36]	; 0x24
	accel_bias_reg[1] -= (accel_bias[1]/8);
 80030b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	da00      	bge.n	80030c0 <calibrateMPU9250+0x704>
 80030be:	3307      	adds	r3, #7
 80030c0:	10db      	asrs	r3, r3, #3
 80030c2:	425b      	negs	r3, r3
 80030c4:	4413      	add	r3, r2
 80030c6:	62bb      	str	r3, [r7, #40]	; 0x28
	accel_bias_reg[2] -= (accel_bias[2]/8);
 80030c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	da00      	bge.n	80030d2 <calibrateMPU9250+0x716>
 80030d0:	3307      	adds	r3, #7
 80030d2:	10db      	asrs	r3, r3, #3
 80030d4:	425b      	negs	r3, r3
 80030d6:	4413      	add	r3, r2
 80030d8:	62fb      	str	r3, [r7, #44]	; 0x2c

	calibData[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 80030da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030dc:	121b      	asrs	r3, r3, #8
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	calibData[1] = (accel_bias_reg[0])      & 0xFF;
 80030e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	calibData[1] = calibData[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 80030ec:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 80030f0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	calibData[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 80030fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030fe:	121b      	asrs	r3, r3, #8
 8003100:	b2db      	uxtb	r3, r3
 8003102:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	calibData[3] = (accel_bias_reg[1])      & 0xFF;
 8003106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003108:	b2db      	uxtb	r3, r3
 800310a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	calibData[3] = calibData[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 800310e:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8003112:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003116:	4313      	orrs	r3, r2
 8003118:	b2db      	uxtb	r3, r3
 800311a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	calibData[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 800311e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003120:	121b      	asrs	r3, r3, #8
 8003122:	b2db      	uxtb	r3, r3
 8003124:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	calibData[5] = (accel_bias_reg[2])      & 0xFF;
 8003128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800312a:	b2db      	uxtb	r3, r3
 800312c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	calibData[5] = calibData[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8003130:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8003134:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8003138:	4313      	orrs	r3, r2
 800313a:	b2db      	uxtb	r3, r3
 800313c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

	//Push accelerometer biases to hardware registers
	writeData = calibData[0];
 8003140:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003144:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, XA_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 8003148:	2364      	movs	r3, #100	; 0x64
 800314a:	9302      	str	r3, [sp, #8]
 800314c:	2301      	movs	r3, #1
 800314e:	9301      	str	r3, [sp, #4]
 8003150:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8003154:	9300      	str	r3, [sp, #0]
 8003156:	2301      	movs	r3, #1
 8003158:	2277      	movs	r2, #119	; 0x77
 800315a:	21d0      	movs	r1, #208	; 0xd0
 800315c:	68f8      	ldr	r0, [r7, #12]
 800315e:	f003 fc91 	bl	8006a84 <HAL_I2C_Mem_Write>
	writeData = calibData[1];
 8003162:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8003166:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, XA_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 800316a:	2364      	movs	r3, #100	; 0x64
 800316c:	9302      	str	r3, [sp, #8]
 800316e:	2301      	movs	r3, #1
 8003170:	9301      	str	r3, [sp, #4]
 8003172:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8003176:	9300      	str	r3, [sp, #0]
 8003178:	2301      	movs	r3, #1
 800317a:	2278      	movs	r2, #120	; 0x78
 800317c:	21d0      	movs	r1, #208	; 0xd0
 800317e:	68f8      	ldr	r0, [r7, #12]
 8003180:	f003 fc80 	bl	8006a84 <HAL_I2C_Mem_Write>
	writeData = calibData[2];
 8003184:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8003188:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, YA_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 800318c:	2364      	movs	r3, #100	; 0x64
 800318e:	9302      	str	r3, [sp, #8]
 8003190:	2301      	movs	r3, #1
 8003192:	9301      	str	r3, [sp, #4]
 8003194:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8003198:	9300      	str	r3, [sp, #0]
 800319a:	2301      	movs	r3, #1
 800319c:	227a      	movs	r2, #122	; 0x7a
 800319e:	21d0      	movs	r1, #208	; 0xd0
 80031a0:	68f8      	ldr	r0, [r7, #12]
 80031a2:	f003 fc6f 	bl	8006a84 <HAL_I2C_Mem_Write>
	writeData = calibData[3];
 80031a6:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80031aa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, YA_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 80031ae:	2364      	movs	r3, #100	; 0x64
 80031b0:	9302      	str	r3, [sp, #8]
 80031b2:	2301      	movs	r3, #1
 80031b4:	9301      	str	r3, [sp, #4]
 80031b6:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80031ba:	9300      	str	r3, [sp, #0]
 80031bc:	2301      	movs	r3, #1
 80031be:	227b      	movs	r2, #123	; 0x7b
 80031c0:	21d0      	movs	r1, #208	; 0xd0
 80031c2:	68f8      	ldr	r0, [r7, #12]
 80031c4:	f003 fc5e 	bl	8006a84 <HAL_I2C_Mem_Write>
	writeData = calibData[4];
 80031c8:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80031cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ZA_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 80031d0:	2364      	movs	r3, #100	; 0x64
 80031d2:	9302      	str	r3, [sp, #8]
 80031d4:	2301      	movs	r3, #1
 80031d6:	9301      	str	r3, [sp, #4]
 80031d8:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80031dc:	9300      	str	r3, [sp, #0]
 80031de:	2301      	movs	r3, #1
 80031e0:	227d      	movs	r2, #125	; 0x7d
 80031e2:	21d0      	movs	r1, #208	; 0xd0
 80031e4:	68f8      	ldr	r0, [r7, #12]
 80031e6:	f003 fc4d 	bl	8006a84 <HAL_I2C_Mem_Write>
	writeData = calibData[5];
 80031ea:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80031ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ZA_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 80031f2:	2364      	movs	r3, #100	; 0x64
 80031f4:	9302      	str	r3, [sp, #8]
 80031f6:	2301      	movs	r3, #1
 80031f8:	9301      	str	r3, [sp, #4]
 80031fa:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80031fe:	9300      	str	r3, [sp, #0]
 8003200:	2301      	movs	r3, #1
 8003202:	227e      	movs	r2, #126	; 0x7e
 8003204:	21d0      	movs	r1, #208	; 0xd0
 8003206:	68f8      	ldr	r0, [r7, #12]
 8003208:	f003 fc3c 	bl	8006a84 <HAL_I2C_Mem_Write>

	//Output scaled gyro biases for display in the main program
	dest2[0] = (float) accel_bias[0]/(float) accelsensitivity;
 800320c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800320e:	4618      	mov	r0, r3
 8003210:	f7fd fd34 	bl	8000c7c <__aeabi_i2f>
 8003214:	4604      	mov	r4, r0
 8003216:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800321a:	4618      	mov	r0, r3
 800321c:	f7fd fd2a 	bl	8000c74 <__aeabi_ui2f>
 8003220:	4603      	mov	r3, r0
 8003222:	4619      	mov	r1, r3
 8003224:	4620      	mov	r0, r4
 8003226:	f7fd fe31 	bl	8000e8c <__aeabi_fdiv>
 800322a:	4603      	mov	r3, r0
 800322c:	461a      	mov	r2, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	601a      	str	r2, [r3, #0]
	dest2[1] = (float) accel_bias[1]/(float) accelsensitivity;
 8003232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003234:	4618      	mov	r0, r3
 8003236:	f7fd fd21 	bl	8000c7c <__aeabi_i2f>
 800323a:	4605      	mov	r5, r0
 800323c:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8003240:	4618      	mov	r0, r3
 8003242:	f7fd fd17 	bl	8000c74 <__aeabi_ui2f>
 8003246:	4602      	mov	r2, r0
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	1d1c      	adds	r4, r3, #4
 800324c:	4611      	mov	r1, r2
 800324e:	4628      	mov	r0, r5
 8003250:	f7fd fe1c 	bl	8000e8c <__aeabi_fdiv>
 8003254:	4603      	mov	r3, r0
 8003256:	6023      	str	r3, [r4, #0]
	dest2[2] = (float) accel_bias[2]/(float) accelsensitivity;
 8003258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800325a:	4618      	mov	r0, r3
 800325c:	f7fd fd0e 	bl	8000c7c <__aeabi_i2f>
 8003260:	4605      	mov	r5, r0
 8003262:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8003266:	4618      	mov	r0, r3
 8003268:	f7fd fd04 	bl	8000c74 <__aeabi_ui2f>
 800326c:	4602      	mov	r2, r0
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f103 0408 	add.w	r4, r3, #8
 8003274:	4611      	mov	r1, r2
 8003276:	4628      	mov	r0, r5
 8003278:	f7fd fe08 	bl	8000e8c <__aeabi_fdiv>
 800327c:	4603      	mov	r3, r0
 800327e:	6023      	str	r3, [r4, #0]

	if(SerialDebugA){
		float accelBiasX = (float) accel_bias[0]/(float) accelsensitivity;
 8003280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003282:	4618      	mov	r0, r3
 8003284:	f7fd fcfa 	bl	8000c7c <__aeabi_i2f>
 8003288:	4604      	mov	r4, r0
 800328a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800328e:	4618      	mov	r0, r3
 8003290:	f7fd fcf0 	bl	8000c74 <__aeabi_ui2f>
 8003294:	4603      	mov	r3, r0
 8003296:	4619      	mov	r1, r3
 8003298:	4620      	mov	r0, r4
 800329a:	f7fd fdf7 	bl	8000e8c <__aeabi_fdiv>
 800329e:	4603      	mov	r3, r0
 80032a0:	663b      	str	r3, [r7, #96]	; 0x60
		float accelBiasY = (float) accel_bias[1]/(float) accelsensitivity;
 80032a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7fd fce9 	bl	8000c7c <__aeabi_i2f>
 80032aa:	4604      	mov	r4, r0
 80032ac:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7fd fcdf 	bl	8000c74 <__aeabi_ui2f>
 80032b6:	4603      	mov	r3, r0
 80032b8:	4619      	mov	r1, r3
 80032ba:	4620      	mov	r0, r4
 80032bc:	f7fd fde6 	bl	8000e8c <__aeabi_fdiv>
 80032c0:	4603      	mov	r3, r0
 80032c2:	65fb      	str	r3, [r7, #92]	; 0x5c
		float accelBiasZ = (float) accel_bias[2]/(float) accelsensitivity;
 80032c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7fd fcd8 	bl	8000c7c <__aeabi_i2f>
 80032cc:	4604      	mov	r4, r0
 80032ce:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7fd fcce 	bl	8000c74 <__aeabi_ui2f>
 80032d8:	4603      	mov	r3, r0
 80032da:	4619      	mov	r1, r3
 80032dc:	4620      	mov	r0, r4
 80032de:	f7fd fdd5 	bl	8000e8c <__aeabi_fdiv>
 80032e2:	4603      	mov	r3, r0
 80032e4:	65bb      	str	r3, [r7, #88]	; 0x58
		printf("Accel bias Y: %f\r\n", accelBiasY);
		printf("Accel bias Z: %f\r\n", accelBiasZ);

		printf("-------------------------\r\n");*/
	}
}
 80032e6:	bf00      	nop
 80032e8:	3780      	adds	r7, #128	; 0x80
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bdb0      	pop	{r4, r5, r7, pc}
 80032ee:	bf00      	nop
 80032f0:	0800b26c 	.word	0x0800b26c
 80032f4:	00000000 	.word	0x00000000

080032f8 <MPU9250SelfTest>:


// Accelerometer and gyroscope self test; check calibration wrt factory settings
void MPU9250SelfTest(I2C_HandleTypeDef *I2Cx, float * destination) {
 80032f8:	b5b0      	push	{r4, r5, r7, lr}
 80032fa:	b0b0      	sub	sp, #192	; 0xc0
 80032fc:	af04      	add	r7, sp, #16
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
	uint8_t writeData;

	uint8_t rawTestData[6] = {0, 0, 0, 0, 0, 0};
 8003302:	4aa2      	ldr	r2, [pc, #648]	; (800358c <MPU9250SelfTest+0x294>)
 8003304:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003308:	e892 0003 	ldmia.w	r2, {r0, r1}
 800330c:	6018      	str	r0, [r3, #0]
 800330e:	3304      	adds	r3, #4
 8003310:	8019      	strh	r1, [r3, #0]
	uint8_t selfTest[6];
	int32_t gAvg[3] = {0}, aAvg[3] = {0}, aSTAvg[3] = {0}, gSTAvg[3] = {0};
 8003312:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003316:	2200      	movs	r2, #0
 8003318:	601a      	str	r2, [r3, #0]
 800331a:	605a      	str	r2, [r3, #4]
 800331c:	609a      	str	r2, [r3, #8]
 800331e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003322:	2200      	movs	r2, #0
 8003324:	601a      	str	r2, [r3, #0]
 8003326:	605a      	str	r2, [r3, #4]
 8003328:	609a      	str	r2, [r3, #8]
 800332a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800332e:	2200      	movs	r2, #0
 8003330:	601a      	str	r2, [r3, #0]
 8003332:	605a      	str	r2, [r3, #4]
 8003334:	609a      	str	r2, [r3, #8]
 8003336:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800333a:	2200      	movs	r2, #0
 800333c:	601a      	str	r2, [r3, #0]
 800333e:	605a      	str	r2, [r3, #4]
 8003340:	609a      	str	r2, [r3, #8]
	float factoryTrim[6];
	uint8_t FS = 0;
 8003342:	2300      	movs	r3, #0
 8003344:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

	writeData = 0x00;
 8003348:	2300      	movs	r3, #0
 800334a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, SMPLRT_DIV, 1, &writeData, 1, i2c_timeout);// Set gyro sample rate to 1 kHz
 800334e:	2364      	movs	r3, #100	; 0x64
 8003350:	9302      	str	r3, [sp, #8]
 8003352:	2301      	movs	r3, #1
 8003354:	9301      	str	r3, [sp, #4]
 8003356:	f107 037b 	add.w	r3, r7, #123	; 0x7b
 800335a:	9300      	str	r3, [sp, #0]
 800335c:	2301      	movs	r3, #1
 800335e:	2219      	movs	r2, #25
 8003360:	21d0      	movs	r1, #208	; 0xd0
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f003 fb8e 	bl	8006a84 <HAL_I2C_Mem_Write>
	writeData = 0x02;
 8003368:	2302      	movs	r3, #2
 800336a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, CONFIG, 1, &writeData, 1, i2c_timeout);// Set gyro sample rate to 1 kHz and DLPF to 92 Hz
 800336e:	2364      	movs	r3, #100	; 0x64
 8003370:	9302      	str	r3, [sp, #8]
 8003372:	2301      	movs	r3, #1
 8003374:	9301      	str	r3, [sp, #4]
 8003376:	f107 037b 	add.w	r3, r7, #123	; 0x7b
 800337a:	9300      	str	r3, [sp, #0]
 800337c:	2301      	movs	r3, #1
 800337e:	221a      	movs	r2, #26
 8003380:	21d0      	movs	r1, #208	; 0xd0
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f003 fb7e 	bl	8006a84 <HAL_I2C_Mem_Write>
	writeData = FS<<3;
 8003388:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800338c:	00db      	lsls	r3, r3, #3
 800338e:	b2db      	uxtb	r3, r3
 8003390:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);// Set full scale range for the gyro to 250 dps
 8003394:	2364      	movs	r3, #100	; 0x64
 8003396:	9302      	str	r3, [sp, #8]
 8003398:	2301      	movs	r3, #1
 800339a:	9301      	str	r3, [sp, #4]
 800339c:	f107 037b 	add.w	r3, r7, #123	; 0x7b
 80033a0:	9300      	str	r3, [sp, #0]
 80033a2:	2301      	movs	r3, #1
 80033a4:	221b      	movs	r2, #27
 80033a6:	21d0      	movs	r1, #208	; 0xd0
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f003 fb6b 	bl	8006a84 <HAL_I2C_Mem_Write>
	writeData = 0x02;
 80033ae:	2302      	movs	r3, #2
 80033b0:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG2, 1, &writeData, 1, i2c_timeout);// Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
 80033b4:	2364      	movs	r3, #100	; 0x64
 80033b6:	9302      	str	r3, [sp, #8]
 80033b8:	2301      	movs	r3, #1
 80033ba:	9301      	str	r3, [sp, #4]
 80033bc:	f107 037b 	add.w	r3, r7, #123	; 0x7b
 80033c0:	9300      	str	r3, [sp, #0]
 80033c2:	2301      	movs	r3, #1
 80033c4:	221d      	movs	r2, #29
 80033c6:	21d0      	movs	r1, #208	; 0xd0
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f003 fb5b 	bl	8006a84 <HAL_I2C_Mem_Write>
	writeData = FS<<3;
 80033ce:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80033d2:	00db      	lsls	r3, r3, #3
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);// Set full scale range for the accelerometer to 2 g
 80033da:	2364      	movs	r3, #100	; 0x64
 80033dc:	9302      	str	r3, [sp, #8]
 80033de:	2301      	movs	r3, #1
 80033e0:	9301      	str	r3, [sp, #4]
 80033e2:	f107 037b 	add.w	r3, r7, #123	; 0x7b
 80033e6:	9300      	str	r3, [sp, #0]
 80033e8:	2301      	movs	r3, #1
 80033ea:	221c      	movs	r2, #28
 80033ec:	21d0      	movs	r1, #208	; 0xd0
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f003 fb48 	bl	8006a84 <HAL_I2C_Mem_Write>

	//get average current values of gyro and acclerometer
	for( int ii = 0; ii < 200; ii++) {
 80033f4:	2300      	movs	r3, #0
 80033f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80033fa:	e066      	b.n	80034ca <MPU9250SelfTest+0x1d2>

		HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ACCEL_XOUT_H, 1, &rawTestData[0], 6, i2c_timeout);// Read the six raw data registers into data array
 80033fc:	2364      	movs	r3, #100	; 0x64
 80033fe:	9302      	str	r3, [sp, #8]
 8003400:	2306      	movs	r3, #6
 8003402:	9301      	str	r3, [sp, #4]
 8003404:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003408:	9300      	str	r3, [sp, #0]
 800340a:	2301      	movs	r3, #1
 800340c:	223b      	movs	r2, #59	; 0x3b
 800340e:	21d0      	movs	r1, #208	; 0xd0
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f003 fc31 	bl	8006c78 <HAL_I2C_Mem_Read>
		aAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 8003416:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003418:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 800341c:	0212      	lsls	r2, r2, #8
 800341e:	b211      	sxth	r1, r2
 8003420:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 8003424:	b212      	sxth	r2, r2
 8003426:	430a      	orrs	r2, r1
 8003428:	b212      	sxth	r2, r2
 800342a:	4413      	add	r3, r2
 800342c:	657b      	str	r3, [r7, #84]	; 0x54
		aAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]) ;
 800342e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003430:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 8003434:	0212      	lsls	r2, r2, #8
 8003436:	b211      	sxth	r1, r2
 8003438:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 800343c:	b212      	sxth	r2, r2
 800343e:	430a      	orrs	r2, r1
 8003440:	b212      	sxth	r2, r2
 8003442:	4413      	add	r3, r2
 8003444:	65bb      	str	r3, [r7, #88]	; 0x58
		aAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]) ;
 8003446:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003448:	f897 2078 	ldrb.w	r2, [r7, #120]	; 0x78
 800344c:	0212      	lsls	r2, r2, #8
 800344e:	b211      	sxth	r1, r2
 8003450:	f897 2079 	ldrb.w	r2, [r7, #121]	; 0x79
 8003454:	b212      	sxth	r2, r2
 8003456:	430a      	orrs	r2, r1
 8003458:	b212      	sxth	r2, r2
 800345a:	4413      	add	r3, r2
 800345c:	65fb      	str	r3, [r7, #92]	; 0x5c

		HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, GYRO_XOUT_H, 1, &rawTestData[0], 6, i2c_timeout);// Read the six raw data registers sequentially into data array
 800345e:	2364      	movs	r3, #100	; 0x64
 8003460:	9302      	str	r3, [sp, #8]
 8003462:	2306      	movs	r3, #6
 8003464:	9301      	str	r3, [sp, #4]
 8003466:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800346a:	9300      	str	r3, [sp, #0]
 800346c:	2301      	movs	r3, #1
 800346e:	2243      	movs	r2, #67	; 0x43
 8003470:	21d0      	movs	r1, #208	; 0xd0
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f003 fc00 	bl	8006c78 <HAL_I2C_Mem_Read>
		gAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 8003478:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800347a:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 800347e:	0212      	lsls	r2, r2, #8
 8003480:	b211      	sxth	r1, r2
 8003482:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 8003486:	b212      	sxth	r2, r2
 8003488:	430a      	orrs	r2, r1
 800348a:	b212      	sxth	r2, r2
 800348c:	4413      	add	r3, r2
 800348e:	663b      	str	r3, [r7, #96]	; 0x60
		gAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]) ;
 8003490:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003492:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 8003496:	0212      	lsls	r2, r2, #8
 8003498:	b211      	sxth	r1, r2
 800349a:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 800349e:	b212      	sxth	r2, r2
 80034a0:	430a      	orrs	r2, r1
 80034a2:	b212      	sxth	r2, r2
 80034a4:	4413      	add	r3, r2
 80034a6:	667b      	str	r3, [r7, #100]	; 0x64
		gAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]) ;
 80034a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034aa:	f897 2078 	ldrb.w	r2, [r7, #120]	; 0x78
 80034ae:	0212      	lsls	r2, r2, #8
 80034b0:	b211      	sxth	r1, r2
 80034b2:	f897 2079 	ldrb.w	r2, [r7, #121]	; 0x79
 80034b6:	b212      	sxth	r2, r2
 80034b8:	430a      	orrs	r2, r1
 80034ba:	b212      	sxth	r2, r2
 80034bc:	4413      	add	r3, r2
 80034be:	66bb      	str	r3, [r7, #104]	; 0x68
	for( int ii = 0; ii < 200; ii++) {
 80034c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80034c4:	3301      	adds	r3, #1
 80034c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80034ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80034ce:	2bc7      	cmp	r3, #199	; 0xc7
 80034d0:	dd94      	ble.n	80033fc <MPU9250SelfTest+0x104>
	}

	//Get average of 200 values and store as average current readings
	for (int ii =0; ii < 3; ii++) {
 80034d2:	2300      	movs	r3, #0
 80034d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80034d8:	e02c      	b.n	8003534 <MPU9250SelfTest+0x23c>
		aAvg[ii] /= 200;
 80034da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	33b0      	adds	r3, #176	; 0xb0
 80034e2:	443b      	add	r3, r7
 80034e4:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 80034e8:	4a29      	ldr	r2, [pc, #164]	; (8003590 <MPU9250SelfTest+0x298>)
 80034ea:	fb82 1203 	smull	r1, r2, r2, r3
 80034ee:	1192      	asrs	r2, r2, #6
 80034f0:	17db      	asrs	r3, r3, #31
 80034f2:	1ad2      	subs	r2, r2, r3
 80034f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	33b0      	adds	r3, #176	; 0xb0
 80034fc:	443b      	add	r3, r7
 80034fe:	f843 2c5c 	str.w	r2, [r3, #-92]
		gAvg[ii] /= 200;
 8003502:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	33b0      	adds	r3, #176	; 0xb0
 800350a:	443b      	add	r3, r7
 800350c:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8003510:	4a1f      	ldr	r2, [pc, #124]	; (8003590 <MPU9250SelfTest+0x298>)
 8003512:	fb82 1203 	smull	r1, r2, r2, r3
 8003516:	1192      	asrs	r2, r2, #6
 8003518:	17db      	asrs	r3, r3, #31
 800351a:	1ad2      	subs	r2, r2, r3
 800351c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	33b0      	adds	r3, #176	; 0xb0
 8003524:	443b      	add	r3, r7
 8003526:	f843 2c50 	str.w	r2, [r3, #-80]
	for (int ii =0; ii < 3; ii++) {
 800352a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800352e:	3301      	adds	r3, #1
 8003530:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003534:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003538:	2b02      	cmp	r3, #2
 800353a:	ddce      	ble.n	80034da <MPU9250SelfTest+0x1e2>
	}

	//Configure the accelerometer for self-test
	writeData = 0xE0;
 800353c:	23e0      	movs	r3, #224	; 0xe0
 800353e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);// Enable self test on all three axes and set accelerometer range to +/- 2 g
 8003542:	2364      	movs	r3, #100	; 0x64
 8003544:	9302      	str	r3, [sp, #8]
 8003546:	2301      	movs	r3, #1
 8003548:	9301      	str	r3, [sp, #4]
 800354a:	f107 037b 	add.w	r3, r7, #123	; 0x7b
 800354e:	9300      	str	r3, [sp, #0]
 8003550:	2301      	movs	r3, #1
 8003552:	221c      	movs	r2, #28
 8003554:	21d0      	movs	r1, #208	; 0xd0
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f003 fa94 	bl	8006a84 <HAL_I2C_Mem_Write>
	writeData = 0xE0;
 800355c:	23e0      	movs	r3, #224	; 0xe0
 800355e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);// Enable self test on all three axes and set gyro range to +/- 250 degrees/s
 8003562:	2364      	movs	r3, #100	; 0x64
 8003564:	9302      	str	r3, [sp, #8]
 8003566:	2301      	movs	r3, #1
 8003568:	9301      	str	r3, [sp, #4]
 800356a:	f107 037b 	add.w	r3, r7, #123	; 0x7b
 800356e:	9300      	str	r3, [sp, #0]
 8003570:	2301      	movs	r3, #1
 8003572:	221b      	movs	r2, #27
 8003574:	21d0      	movs	r1, #208	; 0xd0
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f003 fa84 	bl	8006a84 <HAL_I2C_Mem_Write>
	HAL_Delay(25);  // Delay a while to let the device stabilize
 800357c:	2019      	movs	r0, #25
 800357e:	f002 f8bf 	bl	8005700 <HAL_Delay>

	//get average self-test values of gyro and acclerometer
	for( int ii = 0; ii < 200; ii++) {
 8003582:	2300      	movs	r3, #0
 8003584:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003588:	e06b      	b.n	8003662 <MPU9250SelfTest+0x36a>
 800358a:	bf00      	nop
 800358c:	0800b270 	.word	0x0800b270
 8003590:	51eb851f 	.word	0x51eb851f

		HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ACCEL_XOUT_H, 1, &rawTestData[0], 6, i2c_timeout);// Read the six raw data registers into data array
 8003594:	2364      	movs	r3, #100	; 0x64
 8003596:	9302      	str	r3, [sp, #8]
 8003598:	2306      	movs	r3, #6
 800359a:	9301      	str	r3, [sp, #4]
 800359c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80035a0:	9300      	str	r3, [sp, #0]
 80035a2:	2301      	movs	r3, #1
 80035a4:	223b      	movs	r2, #59	; 0x3b
 80035a6:	21d0      	movs	r1, #208	; 0xd0
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f003 fb65 	bl	8006c78 <HAL_I2C_Mem_Read>
		aSTAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 80035ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035b0:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 80035b4:	0212      	lsls	r2, r2, #8
 80035b6:	b211      	sxth	r1, r2
 80035b8:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 80035bc:	b212      	sxth	r2, r2
 80035be:	430a      	orrs	r2, r1
 80035c0:	b212      	sxth	r2, r2
 80035c2:	4413      	add	r3, r2
 80035c4:	64bb      	str	r3, [r7, #72]	; 0x48
		aSTAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]) ;
 80035c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035c8:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 80035cc:	0212      	lsls	r2, r2, #8
 80035ce:	b211      	sxth	r1, r2
 80035d0:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 80035d4:	b212      	sxth	r2, r2
 80035d6:	430a      	orrs	r2, r1
 80035d8:	b212      	sxth	r2, r2
 80035da:	4413      	add	r3, r2
 80035dc:	64fb      	str	r3, [r7, #76]	; 0x4c
		aSTAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]) ;
 80035de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035e0:	f897 2078 	ldrb.w	r2, [r7, #120]	; 0x78
 80035e4:	0212      	lsls	r2, r2, #8
 80035e6:	b211      	sxth	r1, r2
 80035e8:	f897 2079 	ldrb.w	r2, [r7, #121]	; 0x79
 80035ec:	b212      	sxth	r2, r2
 80035ee:	430a      	orrs	r2, r1
 80035f0:	b212      	sxth	r2, r2
 80035f2:	4413      	add	r3, r2
 80035f4:	653b      	str	r3, [r7, #80]	; 0x50

		HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, GYRO_XOUT_H, 1, &rawTestData[0], 6, i2c_timeout);// Read the six raw data registers sequentially into data array
 80035f6:	2364      	movs	r3, #100	; 0x64
 80035f8:	9302      	str	r3, [sp, #8]
 80035fa:	2306      	movs	r3, #6
 80035fc:	9301      	str	r3, [sp, #4]
 80035fe:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003602:	9300      	str	r3, [sp, #0]
 8003604:	2301      	movs	r3, #1
 8003606:	2243      	movs	r2, #67	; 0x43
 8003608:	21d0      	movs	r1, #208	; 0xd0
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f003 fb34 	bl	8006c78 <HAL_I2C_Mem_Read>
		gSTAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 8003610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003612:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 8003616:	0212      	lsls	r2, r2, #8
 8003618:	b211      	sxth	r1, r2
 800361a:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 800361e:	b212      	sxth	r2, r2
 8003620:	430a      	orrs	r2, r1
 8003622:	b212      	sxth	r2, r2
 8003624:	4413      	add	r3, r2
 8003626:	63fb      	str	r3, [r7, #60]	; 0x3c
		gSTAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]) ;
 8003628:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800362a:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 800362e:	0212      	lsls	r2, r2, #8
 8003630:	b211      	sxth	r1, r2
 8003632:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8003636:	b212      	sxth	r2, r2
 8003638:	430a      	orrs	r2, r1
 800363a:	b212      	sxth	r2, r2
 800363c:	4413      	add	r3, r2
 800363e:	643b      	str	r3, [r7, #64]	; 0x40
		gSTAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]) ;
 8003640:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003642:	f897 2078 	ldrb.w	r2, [r7, #120]	; 0x78
 8003646:	0212      	lsls	r2, r2, #8
 8003648:	b211      	sxth	r1, r2
 800364a:	f897 2079 	ldrb.w	r2, [r7, #121]	; 0x79
 800364e:	b212      	sxth	r2, r2
 8003650:	430a      	orrs	r2, r1
 8003652:	b212      	sxth	r2, r2
 8003654:	4413      	add	r3, r2
 8003656:	647b      	str	r3, [r7, #68]	; 0x44
	for( int ii = 0; ii < 200; ii++) {
 8003658:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800365c:	3301      	adds	r3, #1
 800365e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003662:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003666:	2bc7      	cmp	r3, #199	; 0xc7
 8003668:	dd94      	ble.n	8003594 <MPU9250SelfTest+0x29c>
	}

	//Get average of 200 values and store as average self-test readings
	for (int ii =0; ii < 3; ii++) {
 800366a:	2300      	movs	r3, #0
 800366c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003670:	e02c      	b.n	80036cc <MPU9250SelfTest+0x3d4>
		aSTAvg[ii] /= 200;
 8003672:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	33b0      	adds	r3, #176	; 0xb0
 800367a:	443b      	add	r3, r7
 800367c:	f853 3c68 	ldr.w	r3, [r3, #-104]
 8003680:	4ad7      	ldr	r2, [pc, #860]	; (80039e0 <MPU9250SelfTest+0x6e8>)
 8003682:	fb82 1203 	smull	r1, r2, r2, r3
 8003686:	1192      	asrs	r2, r2, #6
 8003688:	17db      	asrs	r3, r3, #31
 800368a:	1ad2      	subs	r2, r2, r3
 800368c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	33b0      	adds	r3, #176	; 0xb0
 8003694:	443b      	add	r3, r7
 8003696:	f843 2c68 	str.w	r2, [r3, #-104]
		gSTAvg[ii] /= 200;
 800369a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	33b0      	adds	r3, #176	; 0xb0
 80036a2:	443b      	add	r3, r7
 80036a4:	f853 3c74 	ldr.w	r3, [r3, #-116]
 80036a8:	4acd      	ldr	r2, [pc, #820]	; (80039e0 <MPU9250SelfTest+0x6e8>)
 80036aa:	fb82 1203 	smull	r1, r2, r2, r3
 80036ae:	1192      	asrs	r2, r2, #6
 80036b0:	17db      	asrs	r3, r3, #31
 80036b2:	1ad2      	subs	r2, r2, r3
 80036b4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	33b0      	adds	r3, #176	; 0xb0
 80036bc:	443b      	add	r3, r7
 80036be:	f843 2c74 	str.w	r2, [r3, #-116]
	for (int ii =0; ii < 3; ii++) {
 80036c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80036c6:	3301      	adds	r3, #1
 80036c8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80036cc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	ddce      	ble.n	8003672 <MPU9250SelfTest+0x37a>
	}

	//Configure the gyro and accelerometer for normal operation
	writeData = 0x00;
 80036d4:	2300      	movs	r3, #0
 80036d6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);
 80036da:	2364      	movs	r3, #100	; 0x64
 80036dc:	9302      	str	r3, [sp, #8]
 80036de:	2301      	movs	r3, #1
 80036e0:	9301      	str	r3, [sp, #4]
 80036e2:	f107 037b 	add.w	r3, r7, #123	; 0x7b
 80036e6:	9300      	str	r3, [sp, #0]
 80036e8:	2301      	movs	r3, #1
 80036ea:	221c      	movs	r2, #28
 80036ec:	21d0      	movs	r1, #208	; 0xd0
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f003 f9c8 	bl	8006a84 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 80036f4:	2300      	movs	r3, #0
 80036f6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);
 80036fa:	2364      	movs	r3, #100	; 0x64
 80036fc:	9302      	str	r3, [sp, #8]
 80036fe:	2301      	movs	r3, #1
 8003700:	9301      	str	r3, [sp, #4]
 8003702:	f107 037b 	add.w	r3, r7, #123	; 0x7b
 8003706:	9300      	str	r3, [sp, #0]
 8003708:	2301      	movs	r3, #1
 800370a:	221b      	movs	r2, #27
 800370c:	21d0      	movs	r1, #208	; 0xd0
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f003 f9b8 	bl	8006a84 <HAL_I2C_Mem_Write>
	HAL_Delay(25);  // Delay a while to let the device stabilize
 8003714:	2019      	movs	r0, #25
 8003716:	f001 fff3 	bl	8005700 <HAL_Delay>

	//Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_X_ACCEL, 1, &selfTest[0], 1, i2c_timeout);// X-axis accel self-test results
 800371a:	2364      	movs	r3, #100	; 0x64
 800371c:	9302      	str	r3, [sp, #8]
 800371e:	2301      	movs	r3, #1
 8003720:	9301      	str	r3, [sp, #4]
 8003722:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003726:	9300      	str	r3, [sp, #0]
 8003728:	2301      	movs	r3, #1
 800372a:	220d      	movs	r2, #13
 800372c:	21d0      	movs	r1, #208	; 0xd0
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f003 faa2 	bl	8006c78 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_Y_ACCEL, 1, &selfTest[1], 1, i2c_timeout);// Y-axis accel self-test results
 8003734:	2364      	movs	r3, #100	; 0x64
 8003736:	9302      	str	r3, [sp, #8]
 8003738:	2301      	movs	r3, #1
 800373a:	9301      	str	r3, [sp, #4]
 800373c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003740:	3301      	adds	r3, #1
 8003742:	9300      	str	r3, [sp, #0]
 8003744:	2301      	movs	r3, #1
 8003746:	220e      	movs	r2, #14
 8003748:	21d0      	movs	r1, #208	; 0xd0
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f003 fa94 	bl	8006c78 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_Z_ACCEL, 1, &selfTest[2], 1, i2c_timeout);// Z-axis accel self-test results
 8003750:	2364      	movs	r3, #100	; 0x64
 8003752:	9302      	str	r3, [sp, #8]
 8003754:	2301      	movs	r3, #1
 8003756:	9301      	str	r3, [sp, #4]
 8003758:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800375c:	3302      	adds	r3, #2
 800375e:	9300      	str	r3, [sp, #0]
 8003760:	2301      	movs	r3, #1
 8003762:	220f      	movs	r2, #15
 8003764:	21d0      	movs	r1, #208	; 0xd0
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f003 fa86 	bl	8006c78 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_X_GYRO, 1, &selfTest[3], 1, i2c_timeout);// X-axis gyro self-test results
 800376c:	2364      	movs	r3, #100	; 0x64
 800376e:	9302      	str	r3, [sp, #8]
 8003770:	2301      	movs	r3, #1
 8003772:	9301      	str	r3, [sp, #4]
 8003774:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003778:	3303      	adds	r3, #3
 800377a:	9300      	str	r3, [sp, #0]
 800377c:	2301      	movs	r3, #1
 800377e:	2200      	movs	r2, #0
 8003780:	21d0      	movs	r1, #208	; 0xd0
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f003 fa78 	bl	8006c78 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_Y_GYRO, 1, &selfTest[4], 1, i2c_timeout);// Y-axis gyro self-test results
 8003788:	2364      	movs	r3, #100	; 0x64
 800378a:	9302      	str	r3, [sp, #8]
 800378c:	2301      	movs	r3, #1
 800378e:	9301      	str	r3, [sp, #4]
 8003790:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003794:	3304      	adds	r3, #4
 8003796:	9300      	str	r3, [sp, #0]
 8003798:	2301      	movs	r3, #1
 800379a:	2201      	movs	r2, #1
 800379c:	21d0      	movs	r1, #208	; 0xd0
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f003 fa6a 	bl	8006c78 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_Z_GYRO, 1, &selfTest[5], 1, i2c_timeout);// Z-axis gyro self-test results
 80037a4:	2364      	movs	r3, #100	; 0x64
 80037a6:	9302      	str	r3, [sp, #8]
 80037a8:	2301      	movs	r3, #1
 80037aa:	9301      	str	r3, [sp, #4]
 80037ac:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80037b0:	3305      	adds	r3, #5
 80037b2:	9300      	str	r3, [sp, #0]
 80037b4:	2301      	movs	r3, #1
 80037b6:	2202      	movs	r2, #2
 80037b8:	21d0      	movs	r1, #208	; 0xd0
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f003 fa5c 	bl	8006c78 <HAL_I2C_Mem_Read>

	//Retrieve factory self-test value from self-test code reads
	factoryTrim[0] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[0] - 1.0) )); // FT[Xa] factory trim calculation
 80037c0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80037c4:	f640 223c 	movw	r2, #2620	; 0xa3c
 80037c8:	fa02 f303 	lsl.w	r3, r2, r3
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7fd fa55 	bl	8000c7c <__aeabi_i2f>
 80037d2:	4603      	mov	r3, r0
 80037d4:	4618      	mov	r0, r3
 80037d6:	f7fc fe1f 	bl	8000418 <__aeabi_f2d>
 80037da:	4604      	mov	r4, r0
 80037dc:	460d      	mov	r5, r1
 80037de:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7fd fa46 	bl	8000c74 <__aeabi_ui2f>
 80037e8:	4603      	mov	r3, r0
 80037ea:	4618      	mov	r0, r3
 80037ec:	f7fc fe14 	bl	8000418 <__aeabi_f2d>
 80037f0:	f04f 0200 	mov.w	r2, #0
 80037f4:	4b7b      	ldr	r3, [pc, #492]	; (80039e4 <MPU9250SelfTest+0x6ec>)
 80037f6:	f7fc fcaf 	bl	8000158 <__aeabi_dsub>
 80037fa:	4602      	mov	r2, r0
 80037fc:	460b      	mov	r3, r1
 80037fe:	a176      	add	r1, pc, #472	; (adr r1, 80039d8 <MPU9250SelfTest+0x6e0>)
 8003800:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003804:	f005 fa02 	bl	8008c0c <pow>
 8003808:	4602      	mov	r2, r0
 800380a:	460b      	mov	r3, r1
 800380c:	4620      	mov	r0, r4
 800380e:	4629      	mov	r1, r5
 8003810:	f7fc fe5a 	bl	80004c8 <__aeabi_dmul>
 8003814:	4602      	mov	r2, r0
 8003816:	460b      	mov	r3, r1
 8003818:	4610      	mov	r0, r2
 800381a:	4619      	mov	r1, r3
 800381c:	f7fd f924 	bl	8000a68 <__aeabi_d2f>
 8003820:	4603      	mov	r3, r0
 8003822:	627b      	str	r3, [r7, #36]	; 0x24
	factoryTrim[1] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[1] - 1.0) )); // FT[Ya] factory trim calculation
 8003824:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8003828:	f640 223c 	movw	r2, #2620	; 0xa3c
 800382c:	fa02 f303 	lsl.w	r3, r2, r3
 8003830:	4618      	mov	r0, r3
 8003832:	f7fd fa23 	bl	8000c7c <__aeabi_i2f>
 8003836:	4603      	mov	r3, r0
 8003838:	4618      	mov	r0, r3
 800383a:	f7fc fded 	bl	8000418 <__aeabi_f2d>
 800383e:	4604      	mov	r4, r0
 8003840:	460d      	mov	r5, r1
 8003842:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8003846:	4618      	mov	r0, r3
 8003848:	f7fd fa14 	bl	8000c74 <__aeabi_ui2f>
 800384c:	4603      	mov	r3, r0
 800384e:	4618      	mov	r0, r3
 8003850:	f7fc fde2 	bl	8000418 <__aeabi_f2d>
 8003854:	f04f 0200 	mov.w	r2, #0
 8003858:	4b62      	ldr	r3, [pc, #392]	; (80039e4 <MPU9250SelfTest+0x6ec>)
 800385a:	f7fc fc7d 	bl	8000158 <__aeabi_dsub>
 800385e:	4602      	mov	r2, r0
 8003860:	460b      	mov	r3, r1
 8003862:	a15d      	add	r1, pc, #372	; (adr r1, 80039d8 <MPU9250SelfTest+0x6e0>)
 8003864:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003868:	f005 f9d0 	bl	8008c0c <pow>
 800386c:	4602      	mov	r2, r0
 800386e:	460b      	mov	r3, r1
 8003870:	4620      	mov	r0, r4
 8003872:	4629      	mov	r1, r5
 8003874:	f7fc fe28 	bl	80004c8 <__aeabi_dmul>
 8003878:	4602      	mov	r2, r0
 800387a:	460b      	mov	r3, r1
 800387c:	4610      	mov	r0, r2
 800387e:	4619      	mov	r1, r3
 8003880:	f7fd f8f2 	bl	8000a68 <__aeabi_d2f>
 8003884:	4603      	mov	r3, r0
 8003886:	62bb      	str	r3, [r7, #40]	; 0x28
	factoryTrim[2] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[2] - 1.0) )); // FT[Za] factory trim calculation
 8003888:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800388c:	f640 223c 	movw	r2, #2620	; 0xa3c
 8003890:	fa02 f303 	lsl.w	r3, r2, r3
 8003894:	4618      	mov	r0, r3
 8003896:	f7fd f9f1 	bl	8000c7c <__aeabi_i2f>
 800389a:	4603      	mov	r3, r0
 800389c:	4618      	mov	r0, r3
 800389e:	f7fc fdbb 	bl	8000418 <__aeabi_f2d>
 80038a2:	4604      	mov	r4, r0
 80038a4:	460d      	mov	r5, r1
 80038a6:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7fd f9e2 	bl	8000c74 <__aeabi_ui2f>
 80038b0:	4603      	mov	r3, r0
 80038b2:	4618      	mov	r0, r3
 80038b4:	f7fc fdb0 	bl	8000418 <__aeabi_f2d>
 80038b8:	f04f 0200 	mov.w	r2, #0
 80038bc:	4b49      	ldr	r3, [pc, #292]	; (80039e4 <MPU9250SelfTest+0x6ec>)
 80038be:	f7fc fc4b 	bl	8000158 <__aeabi_dsub>
 80038c2:	4602      	mov	r2, r0
 80038c4:	460b      	mov	r3, r1
 80038c6:	a144      	add	r1, pc, #272	; (adr r1, 80039d8 <MPU9250SelfTest+0x6e0>)
 80038c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80038cc:	f005 f99e 	bl	8008c0c <pow>
 80038d0:	4602      	mov	r2, r0
 80038d2:	460b      	mov	r3, r1
 80038d4:	4620      	mov	r0, r4
 80038d6:	4629      	mov	r1, r5
 80038d8:	f7fc fdf6 	bl	80004c8 <__aeabi_dmul>
 80038dc:	4602      	mov	r2, r0
 80038de:	460b      	mov	r3, r1
 80038e0:	4610      	mov	r0, r2
 80038e2:	4619      	mov	r1, r3
 80038e4:	f7fd f8c0 	bl	8000a68 <__aeabi_d2f>
 80038e8:	4603      	mov	r3, r0
 80038ea:	62fb      	str	r3, [r7, #44]	; 0x2c
	factoryTrim[3] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[3] - 1.0) )); // FT[Xg] factory trim calculation
 80038ec:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80038f0:	f640 223c 	movw	r2, #2620	; 0xa3c
 80038f4:	fa02 f303 	lsl.w	r3, r2, r3
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7fd f9bf 	bl	8000c7c <__aeabi_i2f>
 80038fe:	4603      	mov	r3, r0
 8003900:	4618      	mov	r0, r3
 8003902:	f7fc fd89 	bl	8000418 <__aeabi_f2d>
 8003906:	4604      	mov	r4, r0
 8003908:	460d      	mov	r5, r1
 800390a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800390e:	4618      	mov	r0, r3
 8003910:	f7fd f9b0 	bl	8000c74 <__aeabi_ui2f>
 8003914:	4603      	mov	r3, r0
 8003916:	4618      	mov	r0, r3
 8003918:	f7fc fd7e 	bl	8000418 <__aeabi_f2d>
 800391c:	f04f 0200 	mov.w	r2, #0
 8003920:	4b30      	ldr	r3, [pc, #192]	; (80039e4 <MPU9250SelfTest+0x6ec>)
 8003922:	f7fc fc19 	bl	8000158 <__aeabi_dsub>
 8003926:	4602      	mov	r2, r0
 8003928:	460b      	mov	r3, r1
 800392a:	a12b      	add	r1, pc, #172	; (adr r1, 80039d8 <MPU9250SelfTest+0x6e0>)
 800392c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003930:	f005 f96c 	bl	8008c0c <pow>
 8003934:	4602      	mov	r2, r0
 8003936:	460b      	mov	r3, r1
 8003938:	4620      	mov	r0, r4
 800393a:	4629      	mov	r1, r5
 800393c:	f7fc fdc4 	bl	80004c8 <__aeabi_dmul>
 8003940:	4602      	mov	r2, r0
 8003942:	460b      	mov	r3, r1
 8003944:	4610      	mov	r0, r2
 8003946:	4619      	mov	r1, r3
 8003948:	f7fd f88e 	bl	8000a68 <__aeabi_d2f>
 800394c:	4603      	mov	r3, r0
 800394e:	633b      	str	r3, [r7, #48]	; 0x30
	factoryTrim[4] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[4] - 1.0) )); // FT[Yg] factory trim calculation
 8003950:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8003954:	f640 223c 	movw	r2, #2620	; 0xa3c
 8003958:	fa02 f303 	lsl.w	r3, r2, r3
 800395c:	4618      	mov	r0, r3
 800395e:	f7fd f98d 	bl	8000c7c <__aeabi_i2f>
 8003962:	4603      	mov	r3, r0
 8003964:	4618      	mov	r0, r3
 8003966:	f7fc fd57 	bl	8000418 <__aeabi_f2d>
 800396a:	4604      	mov	r4, r0
 800396c:	460d      	mov	r5, r1
 800396e:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8003972:	4618      	mov	r0, r3
 8003974:	f7fd f97e 	bl	8000c74 <__aeabi_ui2f>
 8003978:	4603      	mov	r3, r0
 800397a:	4618      	mov	r0, r3
 800397c:	f7fc fd4c 	bl	8000418 <__aeabi_f2d>
 8003980:	f04f 0200 	mov.w	r2, #0
 8003984:	4b17      	ldr	r3, [pc, #92]	; (80039e4 <MPU9250SelfTest+0x6ec>)
 8003986:	f7fc fbe7 	bl	8000158 <__aeabi_dsub>
 800398a:	4602      	mov	r2, r0
 800398c:	460b      	mov	r3, r1
 800398e:	a112      	add	r1, pc, #72	; (adr r1, 80039d8 <MPU9250SelfTest+0x6e0>)
 8003990:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003994:	f005 f93a 	bl	8008c0c <pow>
 8003998:	4602      	mov	r2, r0
 800399a:	460b      	mov	r3, r1
 800399c:	4620      	mov	r0, r4
 800399e:	4629      	mov	r1, r5
 80039a0:	f7fc fd92 	bl	80004c8 <__aeabi_dmul>
 80039a4:	4602      	mov	r2, r0
 80039a6:	460b      	mov	r3, r1
 80039a8:	4610      	mov	r0, r2
 80039aa:	4619      	mov	r1, r3
 80039ac:	f7fd f85c 	bl	8000a68 <__aeabi_d2f>
 80039b0:	4603      	mov	r3, r0
 80039b2:	637b      	str	r3, [r7, #52]	; 0x34
	factoryTrim[5] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[5] - 1.0) )); // FT[Zg] factory trim calculation
 80039b4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80039b8:	f640 223c 	movw	r2, #2620	; 0xa3c
 80039bc:	fa02 f303 	lsl.w	r3, r2, r3
 80039c0:	4618      	mov	r0, r3
 80039c2:	f7fd f95b 	bl	8000c7c <__aeabi_i2f>
 80039c6:	4603      	mov	r3, r0
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7fc fd25 	bl	8000418 <__aeabi_f2d>
 80039ce:	4604      	mov	r4, r0
 80039d0:	e00a      	b.n	80039e8 <MPU9250SelfTest+0x6f0>
 80039d2:	bf00      	nop
 80039d4:	f3af 8000 	nop.w
 80039d8:	c28f5c29 	.word	0xc28f5c29
 80039dc:	3ff028f5 	.word	0x3ff028f5
 80039e0:	51eb851f 	.word	0x51eb851f
 80039e4:	3ff00000 	.word	0x3ff00000
 80039e8:	460d      	mov	r5, r1
 80039ea:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7fd f940 	bl	8000c74 <__aeabi_ui2f>
 80039f4:	4603      	mov	r3, r0
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7fc fd0e 	bl	8000418 <__aeabi_f2d>
 80039fc:	f04f 0200 	mov.w	r2, #0
 8003a00:	4bbf      	ldr	r3, [pc, #764]	; (8003d00 <MPU9250SelfTest+0xa08>)
 8003a02:	f7fc fba9 	bl	8000158 <__aeabi_dsub>
 8003a06:	4602      	mov	r2, r0
 8003a08:	460b      	mov	r3, r1
 8003a0a:	a1bb      	add	r1, pc, #748	; (adr r1, 8003cf8 <MPU9250SelfTest+0xa00>)
 8003a0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003a10:	f005 f8fc 	bl	8008c0c <pow>
 8003a14:	4602      	mov	r2, r0
 8003a16:	460b      	mov	r3, r1
 8003a18:	4620      	mov	r0, r4
 8003a1a:	4629      	mov	r1, r5
 8003a1c:	f7fc fd54 	bl	80004c8 <__aeabi_dmul>
 8003a20:	4602      	mov	r2, r0
 8003a22:	460b      	mov	r3, r1
 8003a24:	4610      	mov	r0, r2
 8003a26:	4619      	mov	r1, r3
 8003a28:	f7fd f81e 	bl	8000a68 <__aeabi_d2f>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	63bb      	str	r3, [r7, #56]	; 0x38

	uint32_t testResults[6];

	//Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
	//To get percent, must multiply by 100
	for (int i = 0; i < 3; i++) {
 8003a30:	2300      	movs	r3, #0
 8003a32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003a36:	e092      	b.n	8003b5e <MPU9250SelfTest+0x866>
		testResults[i]   = 100.0*((float)(aSTAvg[i] - aAvg[i]))/factoryTrim[i] - 100.;   // Report percent differences
 8003a38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	33b0      	adds	r3, #176	; 0xb0
 8003a40:	443b      	add	r3, r7
 8003a42:	f853 2c68 	ldr.w	r2, [r3, #-104]
 8003a46:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	33b0      	adds	r3, #176	; 0xb0
 8003a4e:	443b      	add	r3, r7
 8003a50:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7fd f910 	bl	8000c7c <__aeabi_i2f>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f7fc fcda 	bl	8000418 <__aeabi_f2d>
 8003a64:	f04f 0200 	mov.w	r2, #0
 8003a68:	4ba6      	ldr	r3, [pc, #664]	; (8003d04 <MPU9250SelfTest+0xa0c>)
 8003a6a:	f7fc fd2d 	bl	80004c8 <__aeabi_dmul>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	460b      	mov	r3, r1
 8003a72:	4614      	mov	r4, r2
 8003a74:	461d      	mov	r5, r3
 8003a76:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	33b0      	adds	r3, #176	; 0xb0
 8003a7e:	443b      	add	r3, r7
 8003a80:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7fc fcc7 	bl	8000418 <__aeabi_f2d>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	4620      	mov	r0, r4
 8003a90:	4629      	mov	r1, r5
 8003a92:	f7fc fe43 	bl	800071c <__aeabi_ddiv>
 8003a96:	4602      	mov	r2, r0
 8003a98:	460b      	mov	r3, r1
 8003a9a:	4610      	mov	r0, r2
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	f04f 0200 	mov.w	r2, #0
 8003aa2:	4b98      	ldr	r3, [pc, #608]	; (8003d04 <MPU9250SelfTest+0xa0c>)
 8003aa4:	f7fc fb58 	bl	8000158 <__aeabi_dsub>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	460b      	mov	r3, r1
 8003aac:	4610      	mov	r0, r2
 8003aae:	4619      	mov	r1, r3
 8003ab0:	f7fc ffba 	bl	8000a28 <__aeabi_d2uiz>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	33b0      	adds	r3, #176	; 0xb0
 8003abe:	443b      	add	r3, r7
 8003ac0:	f843 2ca4 	str.w	r2, [r3, #-164]
		testResults[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3] - 100.; // Report percent differences
 8003ac4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	33b0      	adds	r3, #176	; 0xb0
 8003acc:	443b      	add	r3, r7
 8003ace:	f853 2c74 	ldr.w	r2, [r3, #-116]
 8003ad2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	33b0      	adds	r3, #176	; 0xb0
 8003ada:	443b      	add	r3, r7
 8003adc:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f7fd f8ca 	bl	8000c7c <__aeabi_i2f>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7fc fc94 	bl	8000418 <__aeabi_f2d>
 8003af0:	f04f 0200 	mov.w	r2, #0
 8003af4:	4b83      	ldr	r3, [pc, #524]	; (8003d04 <MPU9250SelfTest+0xa0c>)
 8003af6:	f7fc fce7 	bl	80004c8 <__aeabi_dmul>
 8003afa:	4602      	mov	r2, r0
 8003afc:	460b      	mov	r3, r1
 8003afe:	4614      	mov	r4, r2
 8003b00:	461d      	mov	r5, r3
 8003b02:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003b06:	3303      	adds	r3, #3
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	33b0      	adds	r3, #176	; 0xb0
 8003b0c:	443b      	add	r3, r7
 8003b0e:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 8003b12:	4618      	mov	r0, r3
 8003b14:	f7fc fc80 	bl	8000418 <__aeabi_f2d>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	4620      	mov	r0, r4
 8003b1e:	4629      	mov	r1, r5
 8003b20:	f7fc fdfc 	bl	800071c <__aeabi_ddiv>
 8003b24:	4602      	mov	r2, r0
 8003b26:	460b      	mov	r3, r1
 8003b28:	4610      	mov	r0, r2
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	f04f 0200 	mov.w	r2, #0
 8003b30:	4b74      	ldr	r3, [pc, #464]	; (8003d04 <MPU9250SelfTest+0xa0c>)
 8003b32:	f7fc fb11 	bl	8000158 <__aeabi_dsub>
 8003b36:	4602      	mov	r2, r0
 8003b38:	460b      	mov	r3, r1
 8003b3a:	4610      	mov	r0, r2
 8003b3c:	4619      	mov	r1, r3
 8003b3e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003b42:	1cdc      	adds	r4, r3, #3
 8003b44:	f7fc ff70 	bl	8000a28 <__aeabi_d2uiz>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	00a3      	lsls	r3, r4, #2
 8003b4c:	33b0      	adds	r3, #176	; 0xb0
 8003b4e:	443b      	add	r3, r7
 8003b50:	f843 2ca4 	str.w	r2, [r3, #-164]
	for (int i = 0; i < 3; i++) {
 8003b54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003b58:	3301      	adds	r3, #1
 8003b5a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003b5e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	f77f af68 	ble.w	8003a38 <MPU9250SelfTest+0x740>
	}

	if(SerialDebugA){
		float testResultAccelX = testResults[0];
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f7fd f882 	bl	8000c74 <__aeabi_ui2f>
 8003b70:	4603      	mov	r3, r0
 8003b72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		float testResultAccelY = testResults[1];
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f7fd f87b 	bl	8000c74 <__aeabi_ui2f>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		float testResultAccelZ = testResults[2];
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	4618      	mov	r0, r3
 8003b88:	f7fd f874 	bl	8000c74 <__aeabi_ui2f>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		float testResultGyroX = testResults[3];
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	4618      	mov	r0, r3
 8003b96:	f7fd f86d 	bl	8000c74 <__aeabi_ui2f>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		float testResultGyroY = testResults[4];
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f7fd f866 	bl	8000c74 <__aeabi_ui2f>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		float testResultGyroZ = testResults[5];
 8003bae:	6a3b      	ldr	r3, [r7, #32]
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f7fd f85f 	bl	8000c74 <__aeabi_ui2f>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	67fb      	str	r3, [r7, #124]	; 0x7c
		printf("Gyro Test Y: %f\r\n", testResultGyroY);
		printf("Gyro Test Z: %f\r\n", testResultGyroZ);
		printf("-------------------------\r\n");*/
	}

   for (int i = 0; i < 3; i++) {
 8003bba:	2300      	movs	r3, #0
 8003bbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003bc0:	e090      	b.n	8003ce4 <MPU9250SelfTest+0x9ec>
     destination[i]   = 100.0*((float)(aSTAvg[i] - aAvg[i]))/factoryTrim[i] - 100.;   // Report percent differences
 8003bc2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	33b0      	adds	r3, #176	; 0xb0
 8003bca:	443b      	add	r3, r7
 8003bcc:	f853 2c68 	ldr.w	r2, [r3, #-104]
 8003bd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	33b0      	adds	r3, #176	; 0xb0
 8003bd8:	443b      	add	r3, r7
 8003bda:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7fd f84b 	bl	8000c7c <__aeabi_i2f>
 8003be6:	4603      	mov	r3, r0
 8003be8:	4618      	mov	r0, r3
 8003bea:	f7fc fc15 	bl	8000418 <__aeabi_f2d>
 8003bee:	f04f 0200 	mov.w	r2, #0
 8003bf2:	4b44      	ldr	r3, [pc, #272]	; (8003d04 <MPU9250SelfTest+0xa0c>)
 8003bf4:	f7fc fc68 	bl	80004c8 <__aeabi_dmul>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	4614      	mov	r4, r2
 8003bfe:	461d      	mov	r5, r3
 8003c00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	33b0      	adds	r3, #176	; 0xb0
 8003c08:	443b      	add	r3, r7
 8003c0a:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f7fc fc02 	bl	8000418 <__aeabi_f2d>
 8003c14:	4602      	mov	r2, r0
 8003c16:	460b      	mov	r3, r1
 8003c18:	4620      	mov	r0, r4
 8003c1a:	4629      	mov	r1, r5
 8003c1c:	f7fc fd7e 	bl	800071c <__aeabi_ddiv>
 8003c20:	4602      	mov	r2, r0
 8003c22:	460b      	mov	r3, r1
 8003c24:	4610      	mov	r0, r2
 8003c26:	4619      	mov	r1, r3
 8003c28:	f04f 0200 	mov.w	r2, #0
 8003c2c:	4b35      	ldr	r3, [pc, #212]	; (8003d04 <MPU9250SelfTest+0xa0c>)
 8003c2e:	f7fc fa93 	bl	8000158 <__aeabi_dsub>
 8003c32:	4602      	mov	r2, r0
 8003c34:	460b      	mov	r3, r1
 8003c36:	4610      	mov	r0, r2
 8003c38:	4619      	mov	r1, r3
 8003c3a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	683a      	ldr	r2, [r7, #0]
 8003c42:	18d4      	adds	r4, r2, r3
 8003c44:	f7fc ff10 	bl	8000a68 <__aeabi_d2f>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	6023      	str	r3, [r4, #0]
     destination[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3] - 100.; // Report percent differences
 8003c4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	33b0      	adds	r3, #176	; 0xb0
 8003c54:	443b      	add	r3, r7
 8003c56:	f853 2c74 	ldr.w	r2, [r3, #-116]
 8003c5a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	33b0      	adds	r3, #176	; 0xb0
 8003c62:	443b      	add	r3, r7
 8003c64:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f7fd f806 	bl	8000c7c <__aeabi_i2f>
 8003c70:	4603      	mov	r3, r0
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7fc fbd0 	bl	8000418 <__aeabi_f2d>
 8003c78:	f04f 0200 	mov.w	r2, #0
 8003c7c:	4b21      	ldr	r3, [pc, #132]	; (8003d04 <MPU9250SelfTest+0xa0c>)
 8003c7e:	f7fc fc23 	bl	80004c8 <__aeabi_dmul>
 8003c82:	4602      	mov	r2, r0
 8003c84:	460b      	mov	r3, r1
 8003c86:	4614      	mov	r4, r2
 8003c88:	461d      	mov	r5, r3
 8003c8a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c8e:	3303      	adds	r3, #3
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	33b0      	adds	r3, #176	; 0xb0
 8003c94:	443b      	add	r3, r7
 8003c96:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7fc fbbc 	bl	8000418 <__aeabi_f2d>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	4620      	mov	r0, r4
 8003ca6:	4629      	mov	r1, r5
 8003ca8:	f7fc fd38 	bl	800071c <__aeabi_ddiv>
 8003cac:	4602      	mov	r2, r0
 8003cae:	460b      	mov	r3, r1
 8003cb0:	4610      	mov	r0, r2
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	f04f 0200 	mov.w	r2, #0
 8003cb8:	4b12      	ldr	r3, [pc, #72]	; (8003d04 <MPU9250SelfTest+0xa0c>)
 8003cba:	f7fc fa4d 	bl	8000158 <__aeabi_dsub>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	4610      	mov	r0, r2
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003cca:	3303      	adds	r3, #3
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	683a      	ldr	r2, [r7, #0]
 8003cd0:	18d4      	adds	r4, r2, r3
 8003cd2:	f7fc fec9 	bl	8000a68 <__aeabi_d2f>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	6023      	str	r3, [r4, #0]
   for (int i = 0; i < 3; i++) {
 8003cda:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003cde:	3301      	adds	r3, #1
 8003ce0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003ce4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	f77f af6a 	ble.w	8003bc2 <MPU9250SelfTest+0x8ca>
   }
}
 8003cee:	bf00      	nop
 8003cf0:	bf00      	nop
 8003cf2:	37b0      	adds	r7, #176	; 0xb0
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bdb0      	pop	{r4, r5, r7, pc}
 8003cf8:	c28f5c29 	.word	0xc28f5c29
 8003cfc:	3ff028f5 	.word	0x3ff028f5
 8003d00:	3ff00000 	.word	0x3ff00000
 8003d04:	40590000 	.word	0x40590000

08003d08 <QuaternionUpdate>:

void QuaternionUpdate(float ax, float ay, float az, float gx, float gy, float gz, float mx, float my, float mz){
 8003d08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d0a:	b0ad      	sub	sp, #180	; 0xb4
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	60b9      	str	r1, [r7, #8]
 8003d12:	607a      	str	r2, [r7, #4]
 8003d14:	603b      	str	r3, [r7, #0]
    float q1 = q[0], q2 = q[1], q3 = q[2], q4 = q[3];   // short name local variable for readability
 8003d16:	4b8a      	ldr	r3, [pc, #552]	; (8003f40 <QuaternionUpdate+0x238>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003d1e:	4b88      	ldr	r3, [pc, #544]	; (8003f40 <QuaternionUpdate+0x238>)
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003d26:	4b86      	ldr	r3, [pc, #536]	; (8003f40 <QuaternionUpdate+0x238>)
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003d2e:	4b84      	ldr	r3, [pc, #528]	; (8003f40 <QuaternionUpdate+0x238>)
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    float _2q1my;
    float _2q1mz;
    float _2q2mx;
    float _4bx;
    float _4bz;
    float _2q1 = 2.0f * q1;
 8003d36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f7fc fee9 	bl	8000b14 <__addsf3>
 8003d42:	4603      	mov	r3, r0
 8003d44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    float _2q2 = 2.0f * q2;
 8003d48:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f7fc fee0 	bl	8000b14 <__addsf3>
 8003d54:	4603      	mov	r3, r0
 8003d56:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    float _2q3 = 2.0f * q3;
 8003d5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003d5e:	4619      	mov	r1, r3
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7fc fed7 	bl	8000b14 <__addsf3>
 8003d66:	4603      	mov	r3, r0
 8003d68:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    float _2q4 = 2.0f * q4;
 8003d6c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003d70:	4619      	mov	r1, r3
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7fc fece 	bl	8000b14 <__addsf3>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    float _2q1q3 = 2.0f * q1 * q3;
 8003d7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d82:	4619      	mov	r1, r3
 8003d84:	4618      	mov	r0, r3
 8003d86:	f7fc fec5 	bl	8000b14 <__addsf3>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8003d92:	f7fc ffc7 	bl	8000d24 <__aeabi_fmul>
 8003d96:	4603      	mov	r3, r0
 8003d98:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float _2q3q4 = 2.0f * q3 * q4;
 8003d9c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003da0:	4619      	mov	r1, r3
 8003da2:	4618      	mov	r0, r3
 8003da4:	f7fc feb6 	bl	8000b14 <__addsf3>
 8003da8:	4603      	mov	r3, r0
 8003daa:	4619      	mov	r1, r3
 8003dac:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8003db0:	f7fc ffb8 	bl	8000d24 <__aeabi_fmul>
 8003db4:	4603      	mov	r3, r0
 8003db6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float q1q1 = q1 * q1;
 8003dba:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8003dbe:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8003dc2:	f7fc ffaf 	bl	8000d24 <__aeabi_fmul>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    float q1q2 = q1 * q2;
 8003dcc:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8003dd0:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8003dd4:	f7fc ffa6 	bl	8000d24 <__aeabi_fmul>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float q1q3 = q1 * q3;
 8003dde:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003de2:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8003de6:	f7fc ff9d 	bl	8000d24 <__aeabi_fmul>
 8003dea:	4603      	mov	r3, r0
 8003dec:	67fb      	str	r3, [r7, #124]	; 0x7c
    float q1q4 = q1 * q4;
 8003dee:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8003df2:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8003df6:	f7fc ff95 	bl	8000d24 <__aeabi_fmul>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	67bb      	str	r3, [r7, #120]	; 0x78
    float q2q2 = q2 * q2;
 8003dfe:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8003e02:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8003e06:	f7fc ff8d 	bl	8000d24 <__aeabi_fmul>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	677b      	str	r3, [r7, #116]	; 0x74
    float q2q3 = q2 * q3;
 8003e0e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003e12:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8003e16:	f7fc ff85 	bl	8000d24 <__aeabi_fmul>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	673b      	str	r3, [r7, #112]	; 0x70
    float q2q4 = q2 * q4;
 8003e1e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8003e22:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8003e26:	f7fc ff7d 	bl	8000d24 <__aeabi_fmul>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	66fb      	str	r3, [r7, #108]	; 0x6c
    float q3q3 = q3 * q3;
 8003e2e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003e32:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8003e36:	f7fc ff75 	bl	8000d24 <__aeabi_fmul>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	66bb      	str	r3, [r7, #104]	; 0x68
    float q3q4 = q3 * q4;
 8003e3e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8003e42:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8003e46:	f7fc ff6d 	bl	8000d24 <__aeabi_fmul>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	667b      	str	r3, [r7, #100]	; 0x64
    float q4q4 = q4 * q4;
 8003e4e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8003e52:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8003e56:	f7fc ff65 	bl	8000d24 <__aeabi_fmul>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	663b      	str	r3, [r7, #96]	; 0x60

    // Normalise accelerometer measurement
    norm = sqrtf(ax * ax + ay * ay + az * az);
 8003e5e:	68f9      	ldr	r1, [r7, #12]
 8003e60:	68f8      	ldr	r0, [r7, #12]
 8003e62:	f7fc ff5f 	bl	8000d24 <__aeabi_fmul>
 8003e66:	4603      	mov	r3, r0
 8003e68:	461c      	mov	r4, r3
 8003e6a:	68b9      	ldr	r1, [r7, #8]
 8003e6c:	68b8      	ldr	r0, [r7, #8]
 8003e6e:	f7fc ff59 	bl	8000d24 <__aeabi_fmul>
 8003e72:	4603      	mov	r3, r0
 8003e74:	4619      	mov	r1, r3
 8003e76:	4620      	mov	r0, r4
 8003e78:	f7fc fe4c 	bl	8000b14 <__addsf3>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	461c      	mov	r4, r3
 8003e80:	6879      	ldr	r1, [r7, #4]
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f7fc ff4e 	bl	8000d24 <__aeabi_fmul>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	4620      	mov	r0, r4
 8003e8e:	f7fc fe41 	bl	8000b14 <__addsf3>
 8003e92:	4603      	mov	r3, r0
 8003e94:	4618      	mov	r0, r3
 8003e96:	f004 ff43 	bl	8008d20 <sqrtf>
 8003e9a:	65f8      	str	r0, [r7, #92]	; 0x5c
    if (norm == 0.0f) return; // handle NaN
 8003e9c:	f04f 0100 	mov.w	r1, #0
 8003ea0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8003ea2:	f7fd f8d3 	bl	800104c <__aeabi_fcmpeq>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	f040 87e3 	bne.w	8004e74 <QuaternionUpdate+0x116c>
    norm = 1.0f/norm;
 8003eae:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8003eb0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003eb4:	f7fc ffea 	bl	8000e8c <__aeabi_fdiv>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	65fb      	str	r3, [r7, #92]	; 0x5c
    ax *= norm;
 8003ebc:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8003ebe:	68f8      	ldr	r0, [r7, #12]
 8003ec0:	f7fc ff30 	bl	8000d24 <__aeabi_fmul>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	60fb      	str	r3, [r7, #12]
    ay *= norm;
 8003ec8:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8003eca:	68b8      	ldr	r0, [r7, #8]
 8003ecc:	f7fc ff2a 	bl	8000d24 <__aeabi_fmul>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	60bb      	str	r3, [r7, #8]
    az *= norm;
 8003ed4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f7fc ff24 	bl	8000d24 <__aeabi_fmul>
 8003edc:	4603      	mov	r3, r0
 8003ede:	607b      	str	r3, [r7, #4]

    // Normalise magnetometer measurement
    norm = sqrtf(mx * mx + my * my + mz * mz);
 8003ee0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8003ee4:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8003ee8:	f7fc ff1c 	bl	8000d24 <__aeabi_fmul>
 8003eec:	4603      	mov	r3, r0
 8003eee:	461c      	mov	r4, r3
 8003ef0:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8003ef4:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8003ef8:	f7fc ff14 	bl	8000d24 <__aeabi_fmul>
 8003efc:	4603      	mov	r3, r0
 8003efe:	4619      	mov	r1, r3
 8003f00:	4620      	mov	r0, r4
 8003f02:	f7fc fe07 	bl	8000b14 <__addsf3>
 8003f06:	4603      	mov	r3, r0
 8003f08:	461c      	mov	r4, r3
 8003f0a:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8003f0e:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8003f12:	f7fc ff07 	bl	8000d24 <__aeabi_fmul>
 8003f16:	4603      	mov	r3, r0
 8003f18:	4619      	mov	r1, r3
 8003f1a:	4620      	mov	r0, r4
 8003f1c:	f7fc fdfa 	bl	8000b14 <__addsf3>
 8003f20:	4603      	mov	r3, r0
 8003f22:	4618      	mov	r0, r3
 8003f24:	f004 fefc 	bl	8008d20 <sqrtf>
 8003f28:	65f8      	str	r0, [r7, #92]	; 0x5c
    if (norm == 0.0f) return; // handle NaN
 8003f2a:	f04f 0100 	mov.w	r1, #0
 8003f2e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8003f30:	f7fd f88c 	bl	800104c <__aeabi_fcmpeq>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	f040 879e 	bne.w	8004e78 <QuaternionUpdate+0x1170>
 8003f3c:	e002      	b.n	8003f44 <QuaternionUpdate+0x23c>
 8003f3e:	bf00      	nop
 8003f40:	20000008 	.word	0x20000008
    norm = 1.0f/norm;
 8003f44:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8003f46:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003f4a:	f7fc ff9f 	bl	8000e8c <__aeabi_fdiv>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	65fb      	str	r3, [r7, #92]	; 0x5c
    mx *= norm;
 8003f52:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8003f54:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8003f58:	f7fc fee4 	bl	8000d24 <__aeabi_fmul>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    my *= norm;
 8003f62:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8003f64:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8003f68:	f7fc fedc 	bl	8000d24 <__aeabi_fmul>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    mz *= norm;
 8003f72:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8003f74:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8003f78:	f7fc fed4 	bl	8000d24 <__aeabi_fmul>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

    // Reference direction of Earth's magnetic field
    _2q1mx = 2.0f * q1 * mx;
 8003f82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f86:	4619      	mov	r1, r3
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f7fc fdc3 	bl	8000b14 <__addsf3>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	4619      	mov	r1, r3
 8003f92:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8003f96:	f7fc fec5 	bl	8000d24 <__aeabi_fmul>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	65bb      	str	r3, [r7, #88]	; 0x58
    _2q1my = 2.0f * q1 * my;
 8003f9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f7fc fdb5 	bl	8000b14 <__addsf3>
 8003faa:	4603      	mov	r3, r0
 8003fac:	4619      	mov	r1, r3
 8003fae:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8003fb2:	f7fc feb7 	bl	8000d24 <__aeabi_fmul>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	657b      	str	r3, [r7, #84]	; 0x54
    _2q1mz = 2.0f * q1 * mz;
 8003fba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f7fc fda7 	bl	8000b14 <__addsf3>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	4619      	mov	r1, r3
 8003fca:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8003fce:	f7fc fea9 	bl	8000d24 <__aeabi_fmul>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	653b      	str	r3, [r7, #80]	; 0x50
    _2q2mx = 2.0f * q2 * mx;
 8003fd6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003fda:	4619      	mov	r1, r3
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f7fc fd99 	bl	8000b14 <__addsf3>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8003fea:	f7fc fe9b 	bl	8000d24 <__aeabi_fmul>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	64fb      	str	r3, [r7, #76]	; 0x4c
    hx = mx * q1q1 - _2q1my * q4 + _2q1mz * q3 + mx * q2q2 + _2q2 * my * q3 + _2q2 * mz * q4 - mx * q3q3 - mx * q4q4;
 8003ff2:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8003ff6:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8003ffa:	f7fc fe93 	bl	8000d24 <__aeabi_fmul>
 8003ffe:	4603      	mov	r3, r0
 8004000:	461c      	mov	r4, r3
 8004002:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8004006:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004008:	f7fc fe8c 	bl	8000d24 <__aeabi_fmul>
 800400c:	4603      	mov	r3, r0
 800400e:	4619      	mov	r1, r3
 8004010:	4620      	mov	r0, r4
 8004012:	f7fc fd7d 	bl	8000b10 <__aeabi_fsub>
 8004016:	4603      	mov	r3, r0
 8004018:	461c      	mov	r4, r3
 800401a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800401e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8004020:	f7fc fe80 	bl	8000d24 <__aeabi_fmul>
 8004024:	4603      	mov	r3, r0
 8004026:	4619      	mov	r1, r3
 8004028:	4620      	mov	r0, r4
 800402a:	f7fc fd73 	bl	8000b14 <__addsf3>
 800402e:	4603      	mov	r3, r0
 8004030:	461c      	mov	r4, r3
 8004032:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8004034:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8004038:	f7fc fe74 	bl	8000d24 <__aeabi_fmul>
 800403c:	4603      	mov	r3, r0
 800403e:	4619      	mov	r1, r3
 8004040:	4620      	mov	r0, r4
 8004042:	f7fc fd67 	bl	8000b14 <__addsf3>
 8004046:	4603      	mov	r3, r0
 8004048:	461c      	mov	r4, r3
 800404a:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 800404e:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8004052:	f7fc fe67 	bl	8000d24 <__aeabi_fmul>
 8004056:	4603      	mov	r3, r0
 8004058:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800405c:	4618      	mov	r0, r3
 800405e:	f7fc fe61 	bl	8000d24 <__aeabi_fmul>
 8004062:	4603      	mov	r3, r0
 8004064:	4619      	mov	r1, r3
 8004066:	4620      	mov	r0, r4
 8004068:	f7fc fd54 	bl	8000b14 <__addsf3>
 800406c:	4603      	mov	r3, r0
 800406e:	461c      	mov	r4, r3
 8004070:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8004074:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8004078:	f7fc fe54 	bl	8000d24 <__aeabi_fmul>
 800407c:	4603      	mov	r3, r0
 800407e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8004082:	4618      	mov	r0, r3
 8004084:	f7fc fe4e 	bl	8000d24 <__aeabi_fmul>
 8004088:	4603      	mov	r3, r0
 800408a:	4619      	mov	r1, r3
 800408c:	4620      	mov	r0, r4
 800408e:	f7fc fd41 	bl	8000b14 <__addsf3>
 8004092:	4603      	mov	r3, r0
 8004094:	461c      	mov	r4, r3
 8004096:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004098:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 800409c:	f7fc fe42 	bl	8000d24 <__aeabi_fmul>
 80040a0:	4603      	mov	r3, r0
 80040a2:	4619      	mov	r1, r3
 80040a4:	4620      	mov	r0, r4
 80040a6:	f7fc fd33 	bl	8000b10 <__aeabi_fsub>
 80040aa:	4603      	mov	r3, r0
 80040ac:	461c      	mov	r4, r3
 80040ae:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80040b0:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80040b4:	f7fc fe36 	bl	8000d24 <__aeabi_fmul>
 80040b8:	4603      	mov	r3, r0
 80040ba:	4619      	mov	r1, r3
 80040bc:	4620      	mov	r0, r4
 80040be:	f7fc fd27 	bl	8000b10 <__aeabi_fsub>
 80040c2:	4603      	mov	r3, r0
 80040c4:	64bb      	str	r3, [r7, #72]	; 0x48
    hy = _2q1mx * q4 + my * q1q1 - _2q1mz * q2 + _2q2mx * q3 - my * q2q2 + my * q3q3 + _2q3 * mz * q4 - my * q4q4;
 80040c6:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80040ca:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80040cc:	f7fc fe2a 	bl	8000d24 <__aeabi_fmul>
 80040d0:	4603      	mov	r3, r0
 80040d2:	461c      	mov	r4, r3
 80040d4:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80040d8:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 80040dc:	f7fc fe22 	bl	8000d24 <__aeabi_fmul>
 80040e0:	4603      	mov	r3, r0
 80040e2:	4619      	mov	r1, r3
 80040e4:	4620      	mov	r0, r4
 80040e6:	f7fc fd15 	bl	8000b14 <__addsf3>
 80040ea:	4603      	mov	r3, r0
 80040ec:	461c      	mov	r4, r3
 80040ee:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80040f2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80040f4:	f7fc fe16 	bl	8000d24 <__aeabi_fmul>
 80040f8:	4603      	mov	r3, r0
 80040fa:	4619      	mov	r1, r3
 80040fc:	4620      	mov	r0, r4
 80040fe:	f7fc fd07 	bl	8000b10 <__aeabi_fsub>
 8004102:	4603      	mov	r3, r0
 8004104:	461c      	mov	r4, r3
 8004106:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800410a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800410c:	f7fc fe0a 	bl	8000d24 <__aeabi_fmul>
 8004110:	4603      	mov	r3, r0
 8004112:	4619      	mov	r1, r3
 8004114:	4620      	mov	r0, r4
 8004116:	f7fc fcfd 	bl	8000b14 <__addsf3>
 800411a:	4603      	mov	r3, r0
 800411c:	461c      	mov	r4, r3
 800411e:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8004120:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8004124:	f7fc fdfe 	bl	8000d24 <__aeabi_fmul>
 8004128:	4603      	mov	r3, r0
 800412a:	4619      	mov	r1, r3
 800412c:	4620      	mov	r0, r4
 800412e:	f7fc fcef 	bl	8000b10 <__aeabi_fsub>
 8004132:	4603      	mov	r3, r0
 8004134:	461c      	mov	r4, r3
 8004136:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004138:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800413c:	f7fc fdf2 	bl	8000d24 <__aeabi_fmul>
 8004140:	4603      	mov	r3, r0
 8004142:	4619      	mov	r1, r3
 8004144:	4620      	mov	r0, r4
 8004146:	f7fc fce5 	bl	8000b14 <__addsf3>
 800414a:	4603      	mov	r3, r0
 800414c:	461c      	mov	r4, r3
 800414e:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8004152:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8004156:	f7fc fde5 	bl	8000d24 <__aeabi_fmul>
 800415a:	4603      	mov	r3, r0
 800415c:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8004160:	4618      	mov	r0, r3
 8004162:	f7fc fddf 	bl	8000d24 <__aeabi_fmul>
 8004166:	4603      	mov	r3, r0
 8004168:	4619      	mov	r1, r3
 800416a:	4620      	mov	r0, r4
 800416c:	f7fc fcd2 	bl	8000b14 <__addsf3>
 8004170:	4603      	mov	r3, r0
 8004172:	461c      	mov	r4, r3
 8004174:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004176:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800417a:	f7fc fdd3 	bl	8000d24 <__aeabi_fmul>
 800417e:	4603      	mov	r3, r0
 8004180:	4619      	mov	r1, r3
 8004182:	4620      	mov	r0, r4
 8004184:	f7fc fcc4 	bl	8000b10 <__aeabi_fsub>
 8004188:	4603      	mov	r3, r0
 800418a:	647b      	str	r3, [r7, #68]	; 0x44
    _2bx = sqrtf(hx * hx + hy * hy);
 800418c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800418e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004190:	f7fc fdc8 	bl	8000d24 <__aeabi_fmul>
 8004194:	4603      	mov	r3, r0
 8004196:	461c      	mov	r4, r3
 8004198:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800419a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800419c:	f7fc fdc2 	bl	8000d24 <__aeabi_fmul>
 80041a0:	4603      	mov	r3, r0
 80041a2:	4619      	mov	r1, r3
 80041a4:	4620      	mov	r0, r4
 80041a6:	f7fc fcb5 	bl	8000b14 <__addsf3>
 80041aa:	4603      	mov	r3, r0
 80041ac:	4618      	mov	r0, r3
 80041ae:	f004 fdb7 	bl	8008d20 <sqrtf>
 80041b2:	6438      	str	r0, [r7, #64]	; 0x40
    _2bz = -_2q1mx * q3 + _2q1my * q2 + mz * q1q1 + _2q2mx * q4 - mz * q2q2 + _2q3 * my * q4 - mz * q3q3 + mz * q4q4;
 80041b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041b6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80041ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80041be:	4618      	mov	r0, r3
 80041c0:	f7fc fdb0 	bl	8000d24 <__aeabi_fmul>
 80041c4:	4603      	mov	r3, r0
 80041c6:	461c      	mov	r4, r3
 80041c8:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80041cc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80041ce:	f7fc fda9 	bl	8000d24 <__aeabi_fmul>
 80041d2:	4603      	mov	r3, r0
 80041d4:	4619      	mov	r1, r3
 80041d6:	4620      	mov	r0, r4
 80041d8:	f7fc fc9c 	bl	8000b14 <__addsf3>
 80041dc:	4603      	mov	r3, r0
 80041de:	461c      	mov	r4, r3
 80041e0:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80041e4:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 80041e8:	f7fc fd9c 	bl	8000d24 <__aeabi_fmul>
 80041ec:	4603      	mov	r3, r0
 80041ee:	4619      	mov	r1, r3
 80041f0:	4620      	mov	r0, r4
 80041f2:	f7fc fc8f 	bl	8000b14 <__addsf3>
 80041f6:	4603      	mov	r3, r0
 80041f8:	461c      	mov	r4, r3
 80041fa:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80041fe:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004200:	f7fc fd90 	bl	8000d24 <__aeabi_fmul>
 8004204:	4603      	mov	r3, r0
 8004206:	4619      	mov	r1, r3
 8004208:	4620      	mov	r0, r4
 800420a:	f7fc fc83 	bl	8000b14 <__addsf3>
 800420e:	4603      	mov	r3, r0
 8004210:	461c      	mov	r4, r3
 8004212:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8004214:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8004218:	f7fc fd84 	bl	8000d24 <__aeabi_fmul>
 800421c:	4603      	mov	r3, r0
 800421e:	4619      	mov	r1, r3
 8004220:	4620      	mov	r0, r4
 8004222:	f7fc fc75 	bl	8000b10 <__aeabi_fsub>
 8004226:	4603      	mov	r3, r0
 8004228:	461c      	mov	r4, r3
 800422a:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 800422e:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8004232:	f7fc fd77 	bl	8000d24 <__aeabi_fmul>
 8004236:	4603      	mov	r3, r0
 8004238:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800423c:	4618      	mov	r0, r3
 800423e:	f7fc fd71 	bl	8000d24 <__aeabi_fmul>
 8004242:	4603      	mov	r3, r0
 8004244:	4619      	mov	r1, r3
 8004246:	4620      	mov	r0, r4
 8004248:	f7fc fc64 	bl	8000b14 <__addsf3>
 800424c:	4603      	mov	r3, r0
 800424e:	461c      	mov	r4, r3
 8004250:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004252:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8004256:	f7fc fd65 	bl	8000d24 <__aeabi_fmul>
 800425a:	4603      	mov	r3, r0
 800425c:	4619      	mov	r1, r3
 800425e:	4620      	mov	r0, r4
 8004260:	f7fc fc56 	bl	8000b10 <__aeabi_fsub>
 8004264:	4603      	mov	r3, r0
 8004266:	461c      	mov	r4, r3
 8004268:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800426a:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800426e:	f7fc fd59 	bl	8000d24 <__aeabi_fmul>
 8004272:	4603      	mov	r3, r0
 8004274:	4619      	mov	r1, r3
 8004276:	4620      	mov	r0, r4
 8004278:	f7fc fc4c 	bl	8000b14 <__addsf3>
 800427c:	4603      	mov	r3, r0
 800427e:	63fb      	str	r3, [r7, #60]	; 0x3c
    _4bx = 2.0f * _2bx;
 8004280:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004282:	4619      	mov	r1, r3
 8004284:	4618      	mov	r0, r3
 8004286:	f7fc fc45 	bl	8000b14 <__addsf3>
 800428a:	4603      	mov	r3, r0
 800428c:	63bb      	str	r3, [r7, #56]	; 0x38
    _4bz = 2.0f * _2bz;
 800428e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004290:	4619      	mov	r1, r3
 8004292:	4618      	mov	r0, r3
 8004294:	f7fc fc3e 	bl	8000b14 <__addsf3>
 8004298:	4603      	mov	r3, r0
 800429a:	637b      	str	r3, [r7, #52]	; 0x34

    // Gradient decent algorithm corrective step
    s1 = -_2q3 * (2.0f * q2q4 - _2q1q3 - ax) + _2q2 * (2.0f * q1q2 + _2q3q4 - ay) - _2bz * q3 * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (-_2bx * q4 + _2bz * q2) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + _2bx * q3 * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 800429c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80042a0:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 80042a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042a6:	4619      	mov	r1, r3
 80042a8:	4618      	mov	r0, r3
 80042aa:	f7fc fc33 	bl	8000b14 <__addsf3>
 80042ae:	4603      	mov	r3, r0
 80042b0:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80042b4:	4618      	mov	r0, r3
 80042b6:	f7fc fc2b 	bl	8000b10 <__aeabi_fsub>
 80042ba:	4603      	mov	r3, r0
 80042bc:	68f9      	ldr	r1, [r7, #12]
 80042be:	4618      	mov	r0, r3
 80042c0:	f7fc fc26 	bl	8000b10 <__aeabi_fsub>
 80042c4:	4603      	mov	r3, r0
 80042c6:	4619      	mov	r1, r3
 80042c8:	4620      	mov	r0, r4
 80042ca:	f7fc fd2b 	bl	8000d24 <__aeabi_fmul>
 80042ce:	4603      	mov	r3, r0
 80042d0:	461c      	mov	r4, r3
 80042d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80042d6:	4619      	mov	r1, r3
 80042d8:	4618      	mov	r0, r3
 80042da:	f7fc fc1b 	bl	8000b14 <__addsf3>
 80042de:	4603      	mov	r3, r0
 80042e0:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80042e4:	4618      	mov	r0, r3
 80042e6:	f7fc fc15 	bl	8000b14 <__addsf3>
 80042ea:	4603      	mov	r3, r0
 80042ec:	68b9      	ldr	r1, [r7, #8]
 80042ee:	4618      	mov	r0, r3
 80042f0:	f7fc fc0e 	bl	8000b10 <__aeabi_fsub>
 80042f4:	4603      	mov	r3, r0
 80042f6:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80042fa:	4618      	mov	r0, r3
 80042fc:	f7fc fd12 	bl	8000d24 <__aeabi_fmul>
 8004300:	4603      	mov	r3, r0
 8004302:	4619      	mov	r1, r3
 8004304:	4620      	mov	r0, r4
 8004306:	f7fc fc05 	bl	8000b14 <__addsf3>
 800430a:	4603      	mov	r3, r0
 800430c:	461c      	mov	r4, r3
 800430e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004312:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004314:	f7fc fd06 	bl	8000d24 <__aeabi_fmul>
 8004318:	4603      	mov	r3, r0
 800431a:	461d      	mov	r5, r3
 800431c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800431e:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8004322:	f7fc fbf5 	bl	8000b10 <__aeabi_fsub>
 8004326:	4603      	mov	r3, r0
 8004328:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800432a:	4618      	mov	r0, r3
 800432c:	f7fc fbf0 	bl	8000b10 <__aeabi_fsub>
 8004330:	4603      	mov	r3, r0
 8004332:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004334:	4618      	mov	r0, r3
 8004336:	f7fc fcf5 	bl	8000d24 <__aeabi_fmul>
 800433a:	4603      	mov	r3, r0
 800433c:	461e      	mov	r6, r3
 800433e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004340:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004342:	f7fc fbe5 	bl	8000b10 <__aeabi_fsub>
 8004346:	4603      	mov	r3, r0
 8004348:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800434a:	4618      	mov	r0, r3
 800434c:	f7fc fcea 	bl	8000d24 <__aeabi_fmul>
 8004350:	4603      	mov	r3, r0
 8004352:	4619      	mov	r1, r3
 8004354:	4630      	mov	r0, r6
 8004356:	f7fc fbdd 	bl	8000b14 <__addsf3>
 800435a:	4603      	mov	r3, r0
 800435c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8004360:	4618      	mov	r0, r3
 8004362:	f7fc fbd5 	bl	8000b10 <__aeabi_fsub>
 8004366:	4603      	mov	r3, r0
 8004368:	4619      	mov	r1, r3
 800436a:	4628      	mov	r0, r5
 800436c:	f7fc fcda 	bl	8000d24 <__aeabi_fmul>
 8004370:	4603      	mov	r3, r0
 8004372:	4619      	mov	r1, r3
 8004374:	4620      	mov	r0, r4
 8004376:	f7fc fbcb 	bl	8000b10 <__aeabi_fsub>
 800437a:	4603      	mov	r3, r0
 800437c:	461c      	mov	r4, r3
 800437e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004380:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004384:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8004388:	4618      	mov	r0, r3
 800438a:	f7fc fccb 	bl	8000d24 <__aeabi_fmul>
 800438e:	4603      	mov	r3, r0
 8004390:	461d      	mov	r5, r3
 8004392:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8004396:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004398:	f7fc fcc4 	bl	8000d24 <__aeabi_fmul>
 800439c:	4603      	mov	r3, r0
 800439e:	4619      	mov	r1, r3
 80043a0:	4628      	mov	r0, r5
 80043a2:	f7fc fbb7 	bl	8000b14 <__addsf3>
 80043a6:	4603      	mov	r3, r0
 80043a8:	461d      	mov	r5, r3
 80043aa:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80043ac:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80043ae:	f7fc fbaf 	bl	8000b10 <__aeabi_fsub>
 80043b2:	4603      	mov	r3, r0
 80043b4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80043b6:	4618      	mov	r0, r3
 80043b8:	f7fc fcb4 	bl	8000d24 <__aeabi_fmul>
 80043bc:	4603      	mov	r3, r0
 80043be:	461e      	mov	r6, r3
 80043c0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80043c2:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80043c6:	f7fc fba5 	bl	8000b14 <__addsf3>
 80043ca:	4603      	mov	r3, r0
 80043cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80043ce:	4618      	mov	r0, r3
 80043d0:	f7fc fca8 	bl	8000d24 <__aeabi_fmul>
 80043d4:	4603      	mov	r3, r0
 80043d6:	4619      	mov	r1, r3
 80043d8:	4630      	mov	r0, r6
 80043da:	f7fc fb9b 	bl	8000b14 <__addsf3>
 80043de:	4603      	mov	r3, r0
 80043e0:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 80043e4:	4618      	mov	r0, r3
 80043e6:	f7fc fb93 	bl	8000b10 <__aeabi_fsub>
 80043ea:	4603      	mov	r3, r0
 80043ec:	4619      	mov	r1, r3
 80043ee:	4628      	mov	r0, r5
 80043f0:	f7fc fc98 	bl	8000d24 <__aeabi_fmul>
 80043f4:	4603      	mov	r3, r0
 80043f6:	4619      	mov	r1, r3
 80043f8:	4620      	mov	r0, r4
 80043fa:	f7fc fb8b 	bl	8000b14 <__addsf3>
 80043fe:	4603      	mov	r3, r0
 8004400:	461c      	mov	r4, r3
 8004402:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004406:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004408:	f7fc fc8c 	bl	8000d24 <__aeabi_fmul>
 800440c:	4603      	mov	r3, r0
 800440e:	461d      	mov	r5, r3
 8004410:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8004412:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8004414:	f7fc fb7e 	bl	8000b14 <__addsf3>
 8004418:	4603      	mov	r3, r0
 800441a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800441c:	4618      	mov	r0, r3
 800441e:	f7fc fc81 	bl	8000d24 <__aeabi_fmul>
 8004422:	4603      	mov	r3, r0
 8004424:	461e      	mov	r6, r3
 8004426:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8004428:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 800442c:	f7fc fb70 	bl	8000b10 <__aeabi_fsub>
 8004430:	4603      	mov	r3, r0
 8004432:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004434:	4618      	mov	r0, r3
 8004436:	f7fc fb6b 	bl	8000b10 <__aeabi_fsub>
 800443a:	4603      	mov	r3, r0
 800443c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800443e:	4618      	mov	r0, r3
 8004440:	f7fc fc70 	bl	8000d24 <__aeabi_fmul>
 8004444:	4603      	mov	r3, r0
 8004446:	4619      	mov	r1, r3
 8004448:	4630      	mov	r0, r6
 800444a:	f7fc fb63 	bl	8000b14 <__addsf3>
 800444e:	4603      	mov	r3, r0
 8004450:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8004454:	4618      	mov	r0, r3
 8004456:	f7fc fb5b 	bl	8000b10 <__aeabi_fsub>
 800445a:	4603      	mov	r3, r0
 800445c:	4619      	mov	r1, r3
 800445e:	4628      	mov	r0, r5
 8004460:	f7fc fc60 	bl	8000d24 <__aeabi_fmul>
 8004464:	4603      	mov	r3, r0
 8004466:	4619      	mov	r1, r3
 8004468:	4620      	mov	r0, r4
 800446a:	f7fc fb53 	bl	8000b14 <__addsf3>
 800446e:	4603      	mov	r3, r0
 8004470:	633b      	str	r3, [r7, #48]	; 0x30
    s2 = _2q4 * (2.0f * q2q4 - _2q1q3 - ax) + _2q1 * (2.0f * q1q2 + _2q3q4 - ay) - 4.0f * q2 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az) + _2bz * q4 * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (_2bx * q3 + _2bz * q1) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + (_2bx * q4 - _4bz * q2) * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8004472:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004474:	4619      	mov	r1, r3
 8004476:	4618      	mov	r0, r3
 8004478:	f7fc fb4c 	bl	8000b14 <__addsf3>
 800447c:	4603      	mov	r3, r0
 800447e:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8004482:	4618      	mov	r0, r3
 8004484:	f7fc fb44 	bl	8000b10 <__aeabi_fsub>
 8004488:	4603      	mov	r3, r0
 800448a:	68f9      	ldr	r1, [r7, #12]
 800448c:	4618      	mov	r0, r3
 800448e:	f7fc fb3f 	bl	8000b10 <__aeabi_fsub>
 8004492:	4603      	mov	r3, r0
 8004494:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004498:	4618      	mov	r0, r3
 800449a:	f7fc fc43 	bl	8000d24 <__aeabi_fmul>
 800449e:	4603      	mov	r3, r0
 80044a0:	461c      	mov	r4, r3
 80044a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80044a6:	4619      	mov	r1, r3
 80044a8:	4618      	mov	r0, r3
 80044aa:	f7fc fb33 	bl	8000b14 <__addsf3>
 80044ae:	4603      	mov	r3, r0
 80044b0:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80044b4:	4618      	mov	r0, r3
 80044b6:	f7fc fb2d 	bl	8000b14 <__addsf3>
 80044ba:	4603      	mov	r3, r0
 80044bc:	68b9      	ldr	r1, [r7, #8]
 80044be:	4618      	mov	r0, r3
 80044c0:	f7fc fb26 	bl	8000b10 <__aeabi_fsub>
 80044c4:	4603      	mov	r3, r0
 80044c6:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80044ca:	4618      	mov	r0, r3
 80044cc:	f7fc fc2a 	bl	8000d24 <__aeabi_fmul>
 80044d0:	4603      	mov	r3, r0
 80044d2:	4619      	mov	r1, r3
 80044d4:	4620      	mov	r0, r4
 80044d6:	f7fc fb1d 	bl	8000b14 <__addsf3>
 80044da:	4603      	mov	r3, r0
 80044dc:	461c      	mov	r4, r3
 80044de:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80044e2:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 80044e6:	f7fc fc1d 	bl	8000d24 <__aeabi_fmul>
 80044ea:	4603      	mov	r3, r0
 80044ec:	461d      	mov	r5, r3
 80044ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044f0:	4619      	mov	r1, r3
 80044f2:	4618      	mov	r0, r3
 80044f4:	f7fc fb0e 	bl	8000b14 <__addsf3>
 80044f8:	4603      	mov	r3, r0
 80044fa:	4619      	mov	r1, r3
 80044fc:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004500:	f7fc fb06 	bl	8000b10 <__aeabi_fsub>
 8004504:	4603      	mov	r3, r0
 8004506:	461e      	mov	r6, r3
 8004508:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800450a:	4619      	mov	r1, r3
 800450c:	4618      	mov	r0, r3
 800450e:	f7fc fb01 	bl	8000b14 <__addsf3>
 8004512:	4603      	mov	r3, r0
 8004514:	4619      	mov	r1, r3
 8004516:	4630      	mov	r0, r6
 8004518:	f7fc fafa 	bl	8000b10 <__aeabi_fsub>
 800451c:	4603      	mov	r3, r0
 800451e:	6879      	ldr	r1, [r7, #4]
 8004520:	4618      	mov	r0, r3
 8004522:	f7fc faf5 	bl	8000b10 <__aeabi_fsub>
 8004526:	4603      	mov	r3, r0
 8004528:	4619      	mov	r1, r3
 800452a:	4628      	mov	r0, r5
 800452c:	f7fc fbfa 	bl	8000d24 <__aeabi_fmul>
 8004530:	4603      	mov	r3, r0
 8004532:	4619      	mov	r1, r3
 8004534:	4620      	mov	r0, r4
 8004536:	f7fc faeb 	bl	8000b10 <__aeabi_fsub>
 800453a:	4603      	mov	r3, r0
 800453c:	461c      	mov	r4, r3
 800453e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8004542:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004544:	f7fc fbee 	bl	8000d24 <__aeabi_fmul>
 8004548:	4603      	mov	r3, r0
 800454a:	461d      	mov	r5, r3
 800454c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800454e:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8004552:	f7fc fadd 	bl	8000b10 <__aeabi_fsub>
 8004556:	4603      	mov	r3, r0
 8004558:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800455a:	4618      	mov	r0, r3
 800455c:	f7fc fad8 	bl	8000b10 <__aeabi_fsub>
 8004560:	4603      	mov	r3, r0
 8004562:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004564:	4618      	mov	r0, r3
 8004566:	f7fc fbdd 	bl	8000d24 <__aeabi_fmul>
 800456a:	4603      	mov	r3, r0
 800456c:	461e      	mov	r6, r3
 800456e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004570:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004572:	f7fc facd 	bl	8000b10 <__aeabi_fsub>
 8004576:	4603      	mov	r3, r0
 8004578:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800457a:	4618      	mov	r0, r3
 800457c:	f7fc fbd2 	bl	8000d24 <__aeabi_fmul>
 8004580:	4603      	mov	r3, r0
 8004582:	4619      	mov	r1, r3
 8004584:	4630      	mov	r0, r6
 8004586:	f7fc fac5 	bl	8000b14 <__addsf3>
 800458a:	4603      	mov	r3, r0
 800458c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8004590:	4618      	mov	r0, r3
 8004592:	f7fc fabd 	bl	8000b10 <__aeabi_fsub>
 8004596:	4603      	mov	r3, r0
 8004598:	4619      	mov	r1, r3
 800459a:	4628      	mov	r0, r5
 800459c:	f7fc fbc2 	bl	8000d24 <__aeabi_fmul>
 80045a0:	4603      	mov	r3, r0
 80045a2:	4619      	mov	r1, r3
 80045a4:	4620      	mov	r0, r4
 80045a6:	f7fc fab5 	bl	8000b14 <__addsf3>
 80045aa:	4603      	mov	r3, r0
 80045ac:	461c      	mov	r4, r3
 80045ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80045b2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80045b4:	f7fc fbb6 	bl	8000d24 <__aeabi_fmul>
 80045b8:	4603      	mov	r3, r0
 80045ba:	461d      	mov	r5, r3
 80045bc:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 80045c0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80045c2:	f7fc fbaf 	bl	8000d24 <__aeabi_fmul>
 80045c6:	4603      	mov	r3, r0
 80045c8:	4619      	mov	r1, r3
 80045ca:	4628      	mov	r0, r5
 80045cc:	f7fc faa2 	bl	8000b14 <__addsf3>
 80045d0:	4603      	mov	r3, r0
 80045d2:	461d      	mov	r5, r3
 80045d4:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80045d6:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80045d8:	f7fc fa9a 	bl	8000b10 <__aeabi_fsub>
 80045dc:	4603      	mov	r3, r0
 80045de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80045e0:	4618      	mov	r0, r3
 80045e2:	f7fc fb9f 	bl	8000d24 <__aeabi_fmul>
 80045e6:	4603      	mov	r3, r0
 80045e8:	461e      	mov	r6, r3
 80045ea:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80045ec:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80045f0:	f7fc fa90 	bl	8000b14 <__addsf3>
 80045f4:	4603      	mov	r3, r0
 80045f6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80045f8:	4618      	mov	r0, r3
 80045fa:	f7fc fb93 	bl	8000d24 <__aeabi_fmul>
 80045fe:	4603      	mov	r3, r0
 8004600:	4619      	mov	r1, r3
 8004602:	4630      	mov	r0, r6
 8004604:	f7fc fa86 	bl	8000b14 <__addsf3>
 8004608:	4603      	mov	r3, r0
 800460a:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 800460e:	4618      	mov	r0, r3
 8004610:	f7fc fa7e 	bl	8000b10 <__aeabi_fsub>
 8004614:	4603      	mov	r3, r0
 8004616:	4619      	mov	r1, r3
 8004618:	4628      	mov	r0, r5
 800461a:	f7fc fb83 	bl	8000d24 <__aeabi_fmul>
 800461e:	4603      	mov	r3, r0
 8004620:	4619      	mov	r1, r3
 8004622:	4620      	mov	r0, r4
 8004624:	f7fc fa76 	bl	8000b14 <__addsf3>
 8004628:	4603      	mov	r3, r0
 800462a:	461c      	mov	r4, r3
 800462c:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8004630:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004632:	f7fc fb77 	bl	8000d24 <__aeabi_fmul>
 8004636:	4603      	mov	r3, r0
 8004638:	461d      	mov	r5, r3
 800463a:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 800463e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004640:	f7fc fb70 	bl	8000d24 <__aeabi_fmul>
 8004644:	4603      	mov	r3, r0
 8004646:	4619      	mov	r1, r3
 8004648:	4628      	mov	r0, r5
 800464a:	f7fc fa61 	bl	8000b10 <__aeabi_fsub>
 800464e:	4603      	mov	r3, r0
 8004650:	461d      	mov	r5, r3
 8004652:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8004654:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8004656:	f7fc fa5d 	bl	8000b14 <__addsf3>
 800465a:	4603      	mov	r3, r0
 800465c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800465e:	4618      	mov	r0, r3
 8004660:	f7fc fb60 	bl	8000d24 <__aeabi_fmul>
 8004664:	4603      	mov	r3, r0
 8004666:	461e      	mov	r6, r3
 8004668:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800466a:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 800466e:	f7fc fa4f 	bl	8000b10 <__aeabi_fsub>
 8004672:	4603      	mov	r3, r0
 8004674:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004676:	4618      	mov	r0, r3
 8004678:	f7fc fa4a 	bl	8000b10 <__aeabi_fsub>
 800467c:	4603      	mov	r3, r0
 800467e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004680:	4618      	mov	r0, r3
 8004682:	f7fc fb4f 	bl	8000d24 <__aeabi_fmul>
 8004686:	4603      	mov	r3, r0
 8004688:	4619      	mov	r1, r3
 800468a:	4630      	mov	r0, r6
 800468c:	f7fc fa42 	bl	8000b14 <__addsf3>
 8004690:	4603      	mov	r3, r0
 8004692:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8004696:	4618      	mov	r0, r3
 8004698:	f7fc fa3a 	bl	8000b10 <__aeabi_fsub>
 800469c:	4603      	mov	r3, r0
 800469e:	4619      	mov	r1, r3
 80046a0:	4628      	mov	r0, r5
 80046a2:	f7fc fb3f 	bl	8000d24 <__aeabi_fmul>
 80046a6:	4603      	mov	r3, r0
 80046a8:	4619      	mov	r1, r3
 80046aa:	4620      	mov	r0, r4
 80046ac:	f7fc fa32 	bl	8000b14 <__addsf3>
 80046b0:	4603      	mov	r3, r0
 80046b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    s3 = -_2q1 * (2.0f * q2q4 - _2q1q3 - ax) + _2q4 * (2.0f * q1q2 + _2q3q4 - ay) - 4.0f * q3 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az) + (-_4bx * q3 - _2bz * q1) * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (_2bx * q2 + _2bz * q4) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + (_2bx * q1 - _4bz * q3) * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 80046b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80046b8:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 80046bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046be:	4619      	mov	r1, r3
 80046c0:	4618      	mov	r0, r3
 80046c2:	f7fc fa27 	bl	8000b14 <__addsf3>
 80046c6:	4603      	mov	r3, r0
 80046c8:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80046cc:	4618      	mov	r0, r3
 80046ce:	f7fc fa1f 	bl	8000b10 <__aeabi_fsub>
 80046d2:	4603      	mov	r3, r0
 80046d4:	68f9      	ldr	r1, [r7, #12]
 80046d6:	4618      	mov	r0, r3
 80046d8:	f7fc fa1a 	bl	8000b10 <__aeabi_fsub>
 80046dc:	4603      	mov	r3, r0
 80046de:	4619      	mov	r1, r3
 80046e0:	4620      	mov	r0, r4
 80046e2:	f7fc fb1f 	bl	8000d24 <__aeabi_fmul>
 80046e6:	4603      	mov	r3, r0
 80046e8:	461c      	mov	r4, r3
 80046ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80046ee:	4619      	mov	r1, r3
 80046f0:	4618      	mov	r0, r3
 80046f2:	f7fc fa0f 	bl	8000b14 <__addsf3>
 80046f6:	4603      	mov	r3, r0
 80046f8:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80046fc:	4618      	mov	r0, r3
 80046fe:	f7fc fa09 	bl	8000b14 <__addsf3>
 8004702:	4603      	mov	r3, r0
 8004704:	68b9      	ldr	r1, [r7, #8]
 8004706:	4618      	mov	r0, r3
 8004708:	f7fc fa02 	bl	8000b10 <__aeabi_fsub>
 800470c:	4603      	mov	r3, r0
 800470e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004712:	4618      	mov	r0, r3
 8004714:	f7fc fb06 	bl	8000d24 <__aeabi_fmul>
 8004718:	4603      	mov	r3, r0
 800471a:	4619      	mov	r1, r3
 800471c:	4620      	mov	r0, r4
 800471e:	f7fc f9f9 	bl	8000b14 <__addsf3>
 8004722:	4603      	mov	r3, r0
 8004724:	461c      	mov	r4, r3
 8004726:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 800472a:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 800472e:	f7fc faf9 	bl	8000d24 <__aeabi_fmul>
 8004732:	4603      	mov	r3, r0
 8004734:	461d      	mov	r5, r3
 8004736:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004738:	4619      	mov	r1, r3
 800473a:	4618      	mov	r0, r3
 800473c:	f7fc f9ea 	bl	8000b14 <__addsf3>
 8004740:	4603      	mov	r3, r0
 8004742:	4619      	mov	r1, r3
 8004744:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004748:	f7fc f9e2 	bl	8000b10 <__aeabi_fsub>
 800474c:	4603      	mov	r3, r0
 800474e:	461e      	mov	r6, r3
 8004750:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004752:	4619      	mov	r1, r3
 8004754:	4618      	mov	r0, r3
 8004756:	f7fc f9dd 	bl	8000b14 <__addsf3>
 800475a:	4603      	mov	r3, r0
 800475c:	4619      	mov	r1, r3
 800475e:	4630      	mov	r0, r6
 8004760:	f7fc f9d6 	bl	8000b10 <__aeabi_fsub>
 8004764:	4603      	mov	r3, r0
 8004766:	6879      	ldr	r1, [r7, #4]
 8004768:	4618      	mov	r0, r3
 800476a:	f7fc f9d1 	bl	8000b10 <__aeabi_fsub>
 800476e:	4603      	mov	r3, r0
 8004770:	4619      	mov	r1, r3
 8004772:	4628      	mov	r0, r5
 8004774:	f7fc fad6 	bl	8000d24 <__aeabi_fmul>
 8004778:	4603      	mov	r3, r0
 800477a:	4619      	mov	r1, r3
 800477c:	4620      	mov	r0, r4
 800477e:	f7fc f9c7 	bl	8000b10 <__aeabi_fsub>
 8004782:	4603      	mov	r3, r0
 8004784:	461c      	mov	r4, r3
 8004786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004788:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800478c:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004790:	4618      	mov	r0, r3
 8004792:	f7fc fac7 	bl	8000d24 <__aeabi_fmul>
 8004796:	4603      	mov	r3, r0
 8004798:	461d      	mov	r5, r3
 800479a:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800479e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80047a0:	f7fc fac0 	bl	8000d24 <__aeabi_fmul>
 80047a4:	4603      	mov	r3, r0
 80047a6:	4619      	mov	r1, r3
 80047a8:	4628      	mov	r0, r5
 80047aa:	f7fc f9b1 	bl	8000b10 <__aeabi_fsub>
 80047ae:	4603      	mov	r3, r0
 80047b0:	461d      	mov	r5, r3
 80047b2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80047b4:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80047b8:	f7fc f9aa 	bl	8000b10 <__aeabi_fsub>
 80047bc:	4603      	mov	r3, r0
 80047be:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80047c0:	4618      	mov	r0, r3
 80047c2:	f7fc f9a5 	bl	8000b10 <__aeabi_fsub>
 80047c6:	4603      	mov	r3, r0
 80047c8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80047ca:	4618      	mov	r0, r3
 80047cc:	f7fc faaa 	bl	8000d24 <__aeabi_fmul>
 80047d0:	4603      	mov	r3, r0
 80047d2:	461e      	mov	r6, r3
 80047d4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80047d6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80047d8:	f7fc f99a 	bl	8000b10 <__aeabi_fsub>
 80047dc:	4603      	mov	r3, r0
 80047de:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80047e0:	4618      	mov	r0, r3
 80047e2:	f7fc fa9f 	bl	8000d24 <__aeabi_fmul>
 80047e6:	4603      	mov	r3, r0
 80047e8:	4619      	mov	r1, r3
 80047ea:	4630      	mov	r0, r6
 80047ec:	f7fc f992 	bl	8000b14 <__addsf3>
 80047f0:	4603      	mov	r3, r0
 80047f2:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80047f6:	4618      	mov	r0, r3
 80047f8:	f7fc f98a 	bl	8000b10 <__aeabi_fsub>
 80047fc:	4603      	mov	r3, r0
 80047fe:	4619      	mov	r1, r3
 8004800:	4628      	mov	r0, r5
 8004802:	f7fc fa8f 	bl	8000d24 <__aeabi_fmul>
 8004806:	4603      	mov	r3, r0
 8004808:	4619      	mov	r1, r3
 800480a:	4620      	mov	r0, r4
 800480c:	f7fc f982 	bl	8000b14 <__addsf3>
 8004810:	4603      	mov	r3, r0
 8004812:	461c      	mov	r4, r3
 8004814:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8004818:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800481a:	f7fc fa83 	bl	8000d24 <__aeabi_fmul>
 800481e:	4603      	mov	r3, r0
 8004820:	461d      	mov	r5, r3
 8004822:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8004826:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004828:	f7fc fa7c 	bl	8000d24 <__aeabi_fmul>
 800482c:	4603      	mov	r3, r0
 800482e:	4619      	mov	r1, r3
 8004830:	4628      	mov	r0, r5
 8004832:	f7fc f96f 	bl	8000b14 <__addsf3>
 8004836:	4603      	mov	r3, r0
 8004838:	461d      	mov	r5, r3
 800483a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800483c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800483e:	f7fc f967 	bl	8000b10 <__aeabi_fsub>
 8004842:	4603      	mov	r3, r0
 8004844:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004846:	4618      	mov	r0, r3
 8004848:	f7fc fa6c 	bl	8000d24 <__aeabi_fmul>
 800484c:	4603      	mov	r3, r0
 800484e:	461e      	mov	r6, r3
 8004850:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8004852:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8004856:	f7fc f95d 	bl	8000b14 <__addsf3>
 800485a:	4603      	mov	r3, r0
 800485c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800485e:	4618      	mov	r0, r3
 8004860:	f7fc fa60 	bl	8000d24 <__aeabi_fmul>
 8004864:	4603      	mov	r3, r0
 8004866:	4619      	mov	r1, r3
 8004868:	4630      	mov	r0, r6
 800486a:	f7fc f953 	bl	8000b14 <__addsf3>
 800486e:	4603      	mov	r3, r0
 8004870:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8004874:	4618      	mov	r0, r3
 8004876:	f7fc f94b 	bl	8000b10 <__aeabi_fsub>
 800487a:	4603      	mov	r3, r0
 800487c:	4619      	mov	r1, r3
 800487e:	4628      	mov	r0, r5
 8004880:	f7fc fa50 	bl	8000d24 <__aeabi_fmul>
 8004884:	4603      	mov	r3, r0
 8004886:	4619      	mov	r1, r3
 8004888:	4620      	mov	r0, r4
 800488a:	f7fc f943 	bl	8000b14 <__addsf3>
 800488e:	4603      	mov	r3, r0
 8004890:	461c      	mov	r4, r3
 8004892:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8004896:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004898:	f7fc fa44 	bl	8000d24 <__aeabi_fmul>
 800489c:	4603      	mov	r3, r0
 800489e:	461d      	mov	r5, r3
 80048a0:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80048a4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80048a6:	f7fc fa3d 	bl	8000d24 <__aeabi_fmul>
 80048aa:	4603      	mov	r3, r0
 80048ac:	4619      	mov	r1, r3
 80048ae:	4628      	mov	r0, r5
 80048b0:	f7fc f92e 	bl	8000b10 <__aeabi_fsub>
 80048b4:	4603      	mov	r3, r0
 80048b6:	461d      	mov	r5, r3
 80048b8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80048ba:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80048bc:	f7fc f92a 	bl	8000b14 <__addsf3>
 80048c0:	4603      	mov	r3, r0
 80048c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80048c4:	4618      	mov	r0, r3
 80048c6:	f7fc fa2d 	bl	8000d24 <__aeabi_fmul>
 80048ca:	4603      	mov	r3, r0
 80048cc:	461e      	mov	r6, r3
 80048ce:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80048d0:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80048d4:	f7fc f91c 	bl	8000b10 <__aeabi_fsub>
 80048d8:	4603      	mov	r3, r0
 80048da:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80048dc:	4618      	mov	r0, r3
 80048de:	f7fc f917 	bl	8000b10 <__aeabi_fsub>
 80048e2:	4603      	mov	r3, r0
 80048e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80048e6:	4618      	mov	r0, r3
 80048e8:	f7fc fa1c 	bl	8000d24 <__aeabi_fmul>
 80048ec:	4603      	mov	r3, r0
 80048ee:	4619      	mov	r1, r3
 80048f0:	4630      	mov	r0, r6
 80048f2:	f7fc f90f 	bl	8000b14 <__addsf3>
 80048f6:	4603      	mov	r3, r0
 80048f8:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80048fc:	4618      	mov	r0, r3
 80048fe:	f7fc f907 	bl	8000b10 <__aeabi_fsub>
 8004902:	4603      	mov	r3, r0
 8004904:	4619      	mov	r1, r3
 8004906:	4628      	mov	r0, r5
 8004908:	f7fc fa0c 	bl	8000d24 <__aeabi_fmul>
 800490c:	4603      	mov	r3, r0
 800490e:	4619      	mov	r1, r3
 8004910:	4620      	mov	r0, r4
 8004912:	f7fc f8ff 	bl	8000b14 <__addsf3>
 8004916:	4603      	mov	r3, r0
 8004918:	62bb      	str	r3, [r7, #40]	; 0x28
    s4 = _2q2 * (2.0f * q2q4 - _2q1q3 - ax) + _2q3 * (2.0f * q1q2 + _2q3q4 - ay) + (-_4bx * q4 + _2bz * q2) * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (-_2bx * q1 + _2bz * q3) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + _2bx * q2 * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 800491a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800491c:	4619      	mov	r1, r3
 800491e:	4618      	mov	r0, r3
 8004920:	f7fc f8f8 	bl	8000b14 <__addsf3>
 8004924:	4603      	mov	r3, r0
 8004926:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800492a:	4618      	mov	r0, r3
 800492c:	f7fc f8f0 	bl	8000b10 <__aeabi_fsub>
 8004930:	4603      	mov	r3, r0
 8004932:	68f9      	ldr	r1, [r7, #12]
 8004934:	4618      	mov	r0, r3
 8004936:	f7fc f8eb 	bl	8000b10 <__aeabi_fsub>
 800493a:	4603      	mov	r3, r0
 800493c:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8004940:	4618      	mov	r0, r3
 8004942:	f7fc f9ef 	bl	8000d24 <__aeabi_fmul>
 8004946:	4603      	mov	r3, r0
 8004948:	461c      	mov	r4, r3
 800494a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800494e:	4619      	mov	r1, r3
 8004950:	4618      	mov	r0, r3
 8004952:	f7fc f8df 	bl	8000b14 <__addsf3>
 8004956:	4603      	mov	r3, r0
 8004958:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800495c:	4618      	mov	r0, r3
 800495e:	f7fc f8d9 	bl	8000b14 <__addsf3>
 8004962:	4603      	mov	r3, r0
 8004964:	68b9      	ldr	r1, [r7, #8]
 8004966:	4618      	mov	r0, r3
 8004968:	f7fc f8d2 	bl	8000b10 <__aeabi_fsub>
 800496c:	4603      	mov	r3, r0
 800496e:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8004972:	4618      	mov	r0, r3
 8004974:	f7fc f9d6 	bl	8000d24 <__aeabi_fmul>
 8004978:	4603      	mov	r3, r0
 800497a:	4619      	mov	r1, r3
 800497c:	4620      	mov	r0, r4
 800497e:	f7fc f8c9 	bl	8000b14 <__addsf3>
 8004982:	4603      	mov	r3, r0
 8004984:	461c      	mov	r4, r3
 8004986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004988:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800498c:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8004990:	4618      	mov	r0, r3
 8004992:	f7fc f9c7 	bl	8000d24 <__aeabi_fmul>
 8004996:	4603      	mov	r3, r0
 8004998:	461d      	mov	r5, r3
 800499a:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 800499e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80049a0:	f7fc f9c0 	bl	8000d24 <__aeabi_fmul>
 80049a4:	4603      	mov	r3, r0
 80049a6:	4619      	mov	r1, r3
 80049a8:	4628      	mov	r0, r5
 80049aa:	f7fc f8b3 	bl	8000b14 <__addsf3>
 80049ae:	4603      	mov	r3, r0
 80049b0:	461d      	mov	r5, r3
 80049b2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80049b4:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80049b8:	f7fc f8aa 	bl	8000b10 <__aeabi_fsub>
 80049bc:	4603      	mov	r3, r0
 80049be:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80049c0:	4618      	mov	r0, r3
 80049c2:	f7fc f8a5 	bl	8000b10 <__aeabi_fsub>
 80049c6:	4603      	mov	r3, r0
 80049c8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80049ca:	4618      	mov	r0, r3
 80049cc:	f7fc f9aa 	bl	8000d24 <__aeabi_fmul>
 80049d0:	4603      	mov	r3, r0
 80049d2:	461e      	mov	r6, r3
 80049d4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80049d6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80049d8:	f7fc f89a 	bl	8000b10 <__aeabi_fsub>
 80049dc:	4603      	mov	r3, r0
 80049de:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80049e0:	4618      	mov	r0, r3
 80049e2:	f7fc f99f 	bl	8000d24 <__aeabi_fmul>
 80049e6:	4603      	mov	r3, r0
 80049e8:	4619      	mov	r1, r3
 80049ea:	4630      	mov	r0, r6
 80049ec:	f7fc f892 	bl	8000b14 <__addsf3>
 80049f0:	4603      	mov	r3, r0
 80049f2:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80049f6:	4618      	mov	r0, r3
 80049f8:	f7fc f88a 	bl	8000b10 <__aeabi_fsub>
 80049fc:	4603      	mov	r3, r0
 80049fe:	4619      	mov	r1, r3
 8004a00:	4628      	mov	r0, r5
 8004a02:	f7fc f98f 	bl	8000d24 <__aeabi_fmul>
 8004a06:	4603      	mov	r3, r0
 8004a08:	4619      	mov	r1, r3
 8004a0a:	4620      	mov	r0, r4
 8004a0c:	f7fc f882 	bl	8000b14 <__addsf3>
 8004a10:	4603      	mov	r3, r0
 8004a12:	461c      	mov	r4, r3
 8004a14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a16:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004a1a:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f7fc f980 	bl	8000d24 <__aeabi_fmul>
 8004a24:	4603      	mov	r3, r0
 8004a26:	461d      	mov	r5, r3
 8004a28:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004a2c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004a2e:	f7fc f979 	bl	8000d24 <__aeabi_fmul>
 8004a32:	4603      	mov	r3, r0
 8004a34:	4619      	mov	r1, r3
 8004a36:	4628      	mov	r0, r5
 8004a38:	f7fc f86c 	bl	8000b14 <__addsf3>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	461d      	mov	r5, r3
 8004a40:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8004a42:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8004a44:	f7fc f864 	bl	8000b10 <__aeabi_fsub>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f7fc f969 	bl	8000d24 <__aeabi_fmul>
 8004a52:	4603      	mov	r3, r0
 8004a54:	461e      	mov	r6, r3
 8004a56:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8004a58:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8004a5c:	f7fc f85a 	bl	8000b14 <__addsf3>
 8004a60:	4603      	mov	r3, r0
 8004a62:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004a64:	4618      	mov	r0, r3
 8004a66:	f7fc f95d 	bl	8000d24 <__aeabi_fmul>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	4630      	mov	r0, r6
 8004a70:	f7fc f850 	bl	8000b14 <__addsf3>
 8004a74:	4603      	mov	r3, r0
 8004a76:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f7fc f848 	bl	8000b10 <__aeabi_fsub>
 8004a80:	4603      	mov	r3, r0
 8004a82:	4619      	mov	r1, r3
 8004a84:	4628      	mov	r0, r5
 8004a86:	f7fc f94d 	bl	8000d24 <__aeabi_fmul>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	4620      	mov	r0, r4
 8004a90:	f7fc f840 	bl	8000b14 <__addsf3>
 8004a94:	4603      	mov	r3, r0
 8004a96:	461c      	mov	r4, r3
 8004a98:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8004a9c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004a9e:	f7fc f941 	bl	8000d24 <__aeabi_fmul>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	461d      	mov	r5, r3
 8004aa6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8004aa8:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8004aaa:	f7fc f833 	bl	8000b14 <__addsf3>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7fc f936 	bl	8000d24 <__aeabi_fmul>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	461e      	mov	r6, r3
 8004abc:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8004abe:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8004ac2:	f7fc f825 	bl	8000b10 <__aeabi_fsub>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004aca:	4618      	mov	r0, r3
 8004acc:	f7fc f820 	bl	8000b10 <__aeabi_fsub>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f7fc f925 	bl	8000d24 <__aeabi_fmul>
 8004ada:	4603      	mov	r3, r0
 8004adc:	4619      	mov	r1, r3
 8004ade:	4630      	mov	r0, r6
 8004ae0:	f7fc f818 	bl	8000b14 <__addsf3>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8004aea:	4618      	mov	r0, r3
 8004aec:	f7fc f810 	bl	8000b10 <__aeabi_fsub>
 8004af0:	4603      	mov	r3, r0
 8004af2:	4619      	mov	r1, r3
 8004af4:	4628      	mov	r0, r5
 8004af6:	f7fc f915 	bl	8000d24 <__aeabi_fmul>
 8004afa:	4603      	mov	r3, r0
 8004afc:	4619      	mov	r1, r3
 8004afe:	4620      	mov	r0, r4
 8004b00:	f7fc f808 	bl	8000b14 <__addsf3>
 8004b04:	4603      	mov	r3, r0
 8004b06:	627b      	str	r3, [r7, #36]	; 0x24
    norm = sqrtf(s1 * s1 + s2 * s2 + s3 * s3 + s4 * s4);    // normalise step magnitude
 8004b08:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b0c:	f7fc f90a 	bl	8000d24 <__aeabi_fmul>
 8004b10:	4603      	mov	r3, r0
 8004b12:	461c      	mov	r4, r3
 8004b14:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004b18:	f7fc f904 	bl	8000d24 <__aeabi_fmul>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	4619      	mov	r1, r3
 8004b20:	4620      	mov	r0, r4
 8004b22:	f7fb fff7 	bl	8000b14 <__addsf3>
 8004b26:	4603      	mov	r3, r0
 8004b28:	461c      	mov	r4, r3
 8004b2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b2e:	f7fc f8f9 	bl	8000d24 <__aeabi_fmul>
 8004b32:	4603      	mov	r3, r0
 8004b34:	4619      	mov	r1, r3
 8004b36:	4620      	mov	r0, r4
 8004b38:	f7fb ffec 	bl	8000b14 <__addsf3>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	461c      	mov	r4, r3
 8004b40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004b44:	f7fc f8ee 	bl	8000d24 <__aeabi_fmul>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	4619      	mov	r1, r3
 8004b4c:	4620      	mov	r0, r4
 8004b4e:	f7fb ffe1 	bl	8000b14 <__addsf3>
 8004b52:	4603      	mov	r3, r0
 8004b54:	4618      	mov	r0, r3
 8004b56:	f004 f8e3 	bl	8008d20 <sqrtf>
 8004b5a:	65f8      	str	r0, [r7, #92]	; 0x5c
    norm = 1.0f/norm;
 8004b5c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004b5e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004b62:	f7fc f993 	bl	8000e8c <__aeabi_fdiv>
 8004b66:	4603      	mov	r3, r0
 8004b68:	65fb      	str	r3, [r7, #92]	; 0x5c
    s1 *= norm;
 8004b6a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004b6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b6e:	f7fc f8d9 	bl	8000d24 <__aeabi_fmul>
 8004b72:	4603      	mov	r3, r0
 8004b74:	633b      	str	r3, [r7, #48]	; 0x30
    s2 *= norm;
 8004b76:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004b78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004b7a:	f7fc f8d3 	bl	8000d24 <__aeabi_fmul>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	62fb      	str	r3, [r7, #44]	; 0x2c
    s3 *= norm;
 8004b82:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004b84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b86:	f7fc f8cd 	bl	8000d24 <__aeabi_fmul>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	62bb      	str	r3, [r7, #40]	; 0x28
    s4 *= norm;
 8004b8e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004b90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004b92:	f7fc f8c7 	bl	8000d24 <__aeabi_fmul>
 8004b96:	4603      	mov	r3, r0
 8004b98:	627b      	str	r3, [r7, #36]	; 0x24

    // Compute rate of change of quaternion
    qDot1 = 0.5f * (-q2 * gx - q3 * gy - q4 * gz) - beta * s1;
 8004b9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004b9e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004ba2:	6839      	ldr	r1, [r7, #0]
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f7fc f8bd 	bl	8000d24 <__aeabi_fmul>
 8004baa:	4603      	mov	r3, r0
 8004bac:	461c      	mov	r4, r3
 8004bae:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8004bb2:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8004bb6:	f7fc f8b5 	bl	8000d24 <__aeabi_fmul>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	4620      	mov	r0, r4
 8004bc0:	f7fb ffa6 	bl	8000b10 <__aeabi_fsub>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	461c      	mov	r4, r3
 8004bc8:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8004bcc:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8004bd0:	f7fc f8a8 	bl	8000d24 <__aeabi_fmul>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	4620      	mov	r0, r4
 8004bda:	f7fb ff99 	bl	8000b10 <__aeabi_fsub>
 8004bde:	4603      	mov	r3, r0
 8004be0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004be4:	4618      	mov	r0, r3
 8004be6:	f7fc f89d 	bl	8000d24 <__aeabi_fmul>
 8004bea:	4603      	mov	r3, r0
 8004bec:	461c      	mov	r4, r3
 8004bee:	4ba4      	ldr	r3, [pc, #656]	; (8004e80 <QuaternionUpdate+0x1178>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f7fc f895 	bl	8000d24 <__aeabi_fmul>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	4620      	mov	r0, r4
 8004c00:	f7fb ff86 	bl	8000b10 <__aeabi_fsub>
 8004c04:	4603      	mov	r3, r0
 8004c06:	623b      	str	r3, [r7, #32]
    qDot2 = 0.5f * (q1 * gx + q3 * gz - q4 * gy) - beta * s2;
 8004c08:	6839      	ldr	r1, [r7, #0]
 8004c0a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8004c0e:	f7fc f889 	bl	8000d24 <__aeabi_fmul>
 8004c12:	4603      	mov	r3, r0
 8004c14:	461c      	mov	r4, r3
 8004c16:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8004c1a:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8004c1e:	f7fc f881 	bl	8000d24 <__aeabi_fmul>
 8004c22:	4603      	mov	r3, r0
 8004c24:	4619      	mov	r1, r3
 8004c26:	4620      	mov	r0, r4
 8004c28:	f7fb ff74 	bl	8000b14 <__addsf3>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	461c      	mov	r4, r3
 8004c30:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8004c34:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8004c38:	f7fc f874 	bl	8000d24 <__aeabi_fmul>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	4619      	mov	r1, r3
 8004c40:	4620      	mov	r0, r4
 8004c42:	f7fb ff65 	bl	8000b10 <__aeabi_fsub>
 8004c46:	4603      	mov	r3, r0
 8004c48:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f7fc f869 	bl	8000d24 <__aeabi_fmul>
 8004c52:	4603      	mov	r3, r0
 8004c54:	461c      	mov	r4, r3
 8004c56:	4b8a      	ldr	r3, [pc, #552]	; (8004e80 <QuaternionUpdate+0x1178>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f7fc f861 	bl	8000d24 <__aeabi_fmul>
 8004c62:	4603      	mov	r3, r0
 8004c64:	4619      	mov	r1, r3
 8004c66:	4620      	mov	r0, r4
 8004c68:	f7fb ff52 	bl	8000b10 <__aeabi_fsub>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	61fb      	str	r3, [r7, #28]
    qDot3 = 0.5f * (q1 * gy - q2 * gz + q4 * gx) - beta * s3;
 8004c70:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8004c74:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8004c78:	f7fc f854 	bl	8000d24 <__aeabi_fmul>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	461c      	mov	r4, r3
 8004c80:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8004c84:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8004c88:	f7fc f84c 	bl	8000d24 <__aeabi_fmul>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	4619      	mov	r1, r3
 8004c90:	4620      	mov	r0, r4
 8004c92:	f7fb ff3d 	bl	8000b10 <__aeabi_fsub>
 8004c96:	4603      	mov	r3, r0
 8004c98:	461c      	mov	r4, r3
 8004c9a:	6839      	ldr	r1, [r7, #0]
 8004c9c:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8004ca0:	f7fc f840 	bl	8000d24 <__aeabi_fmul>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	4620      	mov	r0, r4
 8004caa:	f7fb ff33 	bl	8000b14 <__addsf3>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f7fc f835 	bl	8000d24 <__aeabi_fmul>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	461c      	mov	r4, r3
 8004cbe:	4b70      	ldr	r3, [pc, #448]	; (8004e80 <QuaternionUpdate+0x1178>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f7fc f82d 	bl	8000d24 <__aeabi_fmul>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	4619      	mov	r1, r3
 8004cce:	4620      	mov	r0, r4
 8004cd0:	f7fb ff1e 	bl	8000b10 <__aeabi_fsub>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	61bb      	str	r3, [r7, #24]
    qDot4 = 0.5f * (q1 * gz + q2 * gy - q3 * gx) - beta * s4;
 8004cd8:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8004cdc:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8004ce0:	f7fc f820 	bl	8000d24 <__aeabi_fmul>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	461c      	mov	r4, r3
 8004ce8:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8004cec:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8004cf0:	f7fc f818 	bl	8000d24 <__aeabi_fmul>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	4619      	mov	r1, r3
 8004cf8:	4620      	mov	r0, r4
 8004cfa:	f7fb ff0b 	bl	8000b14 <__addsf3>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	461c      	mov	r4, r3
 8004d02:	6839      	ldr	r1, [r7, #0]
 8004d04:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8004d08:	f7fc f80c 	bl	8000d24 <__aeabi_fmul>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	4619      	mov	r1, r3
 8004d10:	4620      	mov	r0, r4
 8004d12:	f7fb fefd 	bl	8000b10 <__aeabi_fsub>
 8004d16:	4603      	mov	r3, r0
 8004d18:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f7fc f801 	bl	8000d24 <__aeabi_fmul>
 8004d22:	4603      	mov	r3, r0
 8004d24:	461c      	mov	r4, r3
 8004d26:	4b56      	ldr	r3, [pc, #344]	; (8004e80 <QuaternionUpdate+0x1178>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f7fb fff9 	bl	8000d24 <__aeabi_fmul>
 8004d32:	4603      	mov	r3, r0
 8004d34:	4619      	mov	r1, r3
 8004d36:	4620      	mov	r0, r4
 8004d38:	f7fb feea 	bl	8000b10 <__aeabi_fsub>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	617b      	str	r3, [r7, #20]

    // Integrate to yield quaternion
    q1 += qDot1 * deltat;
 8004d40:	4b50      	ldr	r3, [pc, #320]	; (8004e84 <QuaternionUpdate+0x117c>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	6a39      	ldr	r1, [r7, #32]
 8004d46:	4618      	mov	r0, r3
 8004d48:	f7fb ffec 	bl	8000d24 <__aeabi_fmul>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	4619      	mov	r1, r3
 8004d50:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8004d54:	f7fb fede 	bl	8000b14 <__addsf3>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    q2 += qDot2 * deltat;
 8004d5e:	4b49      	ldr	r3, [pc, #292]	; (8004e84 <QuaternionUpdate+0x117c>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	69f9      	ldr	r1, [r7, #28]
 8004d64:	4618      	mov	r0, r3
 8004d66:	f7fb ffdd 	bl	8000d24 <__aeabi_fmul>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	4619      	mov	r1, r3
 8004d6e:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8004d72:	f7fb fecf 	bl	8000b14 <__addsf3>
 8004d76:	4603      	mov	r3, r0
 8004d78:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    q3 += qDot3 * deltat;
 8004d7c:	4b41      	ldr	r3, [pc, #260]	; (8004e84 <QuaternionUpdate+0x117c>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	69b9      	ldr	r1, [r7, #24]
 8004d82:	4618      	mov	r0, r3
 8004d84:	f7fb ffce 	bl	8000d24 <__aeabi_fmul>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8004d90:	f7fb fec0 	bl	8000b14 <__addsf3>
 8004d94:	4603      	mov	r3, r0
 8004d96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    q4 += qDot4 * deltat;
 8004d9a:	4b3a      	ldr	r3, [pc, #232]	; (8004e84 <QuaternionUpdate+0x117c>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	6979      	ldr	r1, [r7, #20]
 8004da0:	4618      	mov	r0, r3
 8004da2:	f7fb ffbf 	bl	8000d24 <__aeabi_fmul>
 8004da6:	4603      	mov	r3, r0
 8004da8:	4619      	mov	r1, r3
 8004daa:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8004dae:	f7fb feb1 	bl	8000b14 <__addsf3>
 8004db2:	4603      	mov	r3, r0
 8004db4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    norm = sqrtf(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);    // normalise quaternion
 8004db8:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8004dbc:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8004dc0:	f7fb ffb0 	bl	8000d24 <__aeabi_fmul>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	461c      	mov	r4, r3
 8004dc8:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8004dcc:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8004dd0:	f7fb ffa8 	bl	8000d24 <__aeabi_fmul>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	4619      	mov	r1, r3
 8004dd8:	4620      	mov	r0, r4
 8004dda:	f7fb fe9b 	bl	8000b14 <__addsf3>
 8004dde:	4603      	mov	r3, r0
 8004de0:	461c      	mov	r4, r3
 8004de2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004de6:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8004dea:	f7fb ff9b 	bl	8000d24 <__aeabi_fmul>
 8004dee:	4603      	mov	r3, r0
 8004df0:	4619      	mov	r1, r3
 8004df2:	4620      	mov	r0, r4
 8004df4:	f7fb fe8e 	bl	8000b14 <__addsf3>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	461c      	mov	r4, r3
 8004dfc:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8004e00:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8004e04:	f7fb ff8e 	bl	8000d24 <__aeabi_fmul>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	4620      	mov	r0, r4
 8004e0e:	f7fb fe81 	bl	8000b14 <__addsf3>
 8004e12:	4603      	mov	r3, r0
 8004e14:	4618      	mov	r0, r3
 8004e16:	f003 ff83 	bl	8008d20 <sqrtf>
 8004e1a:	65f8      	str	r0, [r7, #92]	; 0x5c
    norm = 1.0f/norm;
 8004e1c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004e1e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004e22:	f7fc f833 	bl	8000e8c <__aeabi_fdiv>
 8004e26:	4603      	mov	r3, r0
 8004e28:	65fb      	str	r3, [r7, #92]	; 0x5c
    q[0] = q1 * norm;
 8004e2a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004e2c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8004e30:	f7fb ff78 	bl	8000d24 <__aeabi_fmul>
 8004e34:	4603      	mov	r3, r0
 8004e36:	461a      	mov	r2, r3
 8004e38:	4b13      	ldr	r3, [pc, #76]	; (8004e88 <QuaternionUpdate+0x1180>)
 8004e3a:	601a      	str	r2, [r3, #0]
    q[1] = q2 * norm;
 8004e3c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004e3e:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8004e42:	f7fb ff6f 	bl	8000d24 <__aeabi_fmul>
 8004e46:	4603      	mov	r3, r0
 8004e48:	461a      	mov	r2, r3
 8004e4a:	4b0f      	ldr	r3, [pc, #60]	; (8004e88 <QuaternionUpdate+0x1180>)
 8004e4c:	605a      	str	r2, [r3, #4]
    q[2] = q3 * norm;
 8004e4e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004e50:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8004e54:	f7fb ff66 	bl	8000d24 <__aeabi_fmul>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	4b0a      	ldr	r3, [pc, #40]	; (8004e88 <QuaternionUpdate+0x1180>)
 8004e5e:	609a      	str	r2, [r3, #8]
    q[3] = q4 * norm;
 8004e60:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004e62:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8004e66:	f7fb ff5d 	bl	8000d24 <__aeabi_fmul>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	4b06      	ldr	r3, [pc, #24]	; (8004e88 <QuaternionUpdate+0x1180>)
 8004e70:	60da      	str	r2, [r3, #12]
 8004e72:	e002      	b.n	8004e7a <QuaternionUpdate+0x1172>
    if (norm == 0.0f) return; // handle NaN
 8004e74:	bf00      	nop
 8004e76:	e000      	b.n	8004e7a <QuaternionUpdate+0x1172>
    if (norm == 0.0f) return; // handle NaN
 8004e78:	bf00      	nop

}
 8004e7a:	37b4      	adds	r7, #180	; 0xb4
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e80:	20000004 	.word	0x20000004
 8004e84:	20004304 	.word	0x20004304
 8004e88:	20000008 	.word	0x20000008

08004e8c <readSensor>:
 *      Author: usuario
 */
#include "sharp.h"
#include <math.h>

uint32_t* readSensor(uint32_t *value) {
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b0ac      	sub	sp, #176	; 0xb0
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
	uint32_t CNY70[10];
	uint32_t SHARP_1[10];
	uint32_t SHARP_2[10];
	uint32_t SHARP_3[10];
	static uint32_t Sensors[4];
	for (int i = 0; i < 10; i++) {
 8004e94:	2300      	movs	r3, #0
 8004e96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004e9a:	e03b      	b.n	8004f14 <readSensor+0x88>
		CNY70[i] = value[i * 4];
 8004e9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004ea0:	011b      	lsls	r3, r3, #4
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	4413      	add	r3, r2
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	33b0      	adds	r3, #176	; 0xb0
 8004eb0:	443b      	add	r3, r7
 8004eb2:	f843 2c2c 	str.w	r2, [r3, #-44]
		SHARP_1[i] = value[i * 4 + 1];
 8004eb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004eba:	011b      	lsls	r3, r3, #4
 8004ebc:	3304      	adds	r3, #4
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	4413      	add	r3, r2
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	33b0      	adds	r3, #176	; 0xb0
 8004ecc:	443b      	add	r3, r7
 8004ece:	f843 2c54 	str.w	r2, [r3, #-84]
		SHARP_2[i] = value[i * 4 + 2];
 8004ed2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004ed6:	011b      	lsls	r3, r3, #4
 8004ed8:	3308      	adds	r3, #8
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	4413      	add	r3, r2
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	33b0      	adds	r3, #176	; 0xb0
 8004ee8:	443b      	add	r3, r7
 8004eea:	f843 2c7c 	str.w	r2, [r3, #-124]
		SHARP_3[i] = value[i * 4 + 3];
 8004eee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004ef2:	011b      	lsls	r3, r3, #4
 8004ef4:	330c      	adds	r3, #12
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	4413      	add	r3, r2
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	33b0      	adds	r3, #176	; 0xb0
 8004f04:	443b      	add	r3, r7
 8004f06:	f843 2ca4 	str.w	r2, [r3, #-164]
	for (int i = 0; i < 10; i++) {
 8004f0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004f0e:	3301      	adds	r3, #1
 8004f10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004f14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004f18:	2b09      	cmp	r3, #9
 8004f1a:	ddbf      	ble.n	8004e9c <readSensor+0x10>
	}
	Sensors[0] = lecSensor(10, CNY70);
 8004f1c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8004f20:	4619      	mov	r1, r3
 8004f22:	200a      	movs	r0, #10
 8004f24:	f000 f838 	bl	8004f98 <lecSensor>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f7fc f8d6 	bl	80010dc <__aeabi_f2uiz>
 8004f30:	4603      	mov	r3, r0
 8004f32:	4a17      	ldr	r2, [pc, #92]	; (8004f90 <readSensor+0x104>)
 8004f34:	6013      	str	r3, [r2, #0]
	Sensors[1] = lecSensor(10, SHARP_1);
 8004f36:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	200a      	movs	r0, #10
 8004f3e:	f000 f82b 	bl	8004f98 <lecSensor>
 8004f42:	4603      	mov	r3, r0
 8004f44:	4618      	mov	r0, r3
 8004f46:	f7fc f8c9 	bl	80010dc <__aeabi_f2uiz>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	4a10      	ldr	r2, [pc, #64]	; (8004f90 <readSensor+0x104>)
 8004f4e:	6053      	str	r3, [r2, #4]
	Sensors[2] = lecSensor(10, SHARP_2);
 8004f50:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004f54:	4619      	mov	r1, r3
 8004f56:	200a      	movs	r0, #10
 8004f58:	f000 f81e 	bl	8004f98 <lecSensor>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f7fc f8bc 	bl	80010dc <__aeabi_f2uiz>
 8004f64:	4603      	mov	r3, r0
 8004f66:	4a0a      	ldr	r2, [pc, #40]	; (8004f90 <readSensor+0x104>)
 8004f68:	6093      	str	r3, [r2, #8]
	Sensors[3] = lecSensor(10, SHARP_3);
 8004f6a:	f107 030c 	add.w	r3, r7, #12
 8004f6e:	4619      	mov	r1, r3
 8004f70:	200a      	movs	r0, #10
 8004f72:	f000 f811 	bl	8004f98 <lecSensor>
 8004f76:	4603      	mov	r3, r0
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f7fc f8af 	bl	80010dc <__aeabi_f2uiz>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	4a03      	ldr	r2, [pc, #12]	; (8004f90 <readSensor+0x104>)
 8004f82:	60d3      	str	r3, [r2, #12]
	return Sensors;
 8004f84:	4b02      	ldr	r3, [pc, #8]	; (8004f90 <readSensor+0x104>)
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	37b0      	adds	r7, #176	; 0xb0
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	20004358 	.word	0x20004358
 8004f94:	00000000 	.word	0x00000000

08004f98 <lecSensor>:

float lecSensor(int n, uint32_t *values) {
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b086      	sub	sp, #24
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
	long suma = 0;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < n; i++) {
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	613b      	str	r3, [r7, #16]
 8004faa:	e00a      	b.n	8004fc2 <lecSensor+0x2a>
		suma = suma + values[i];
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	683a      	ldr	r2, [r7, #0]
 8004fb2:	4413      	add	r3, r2
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	4413      	add	r3, r2
 8004fba:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < n; i++) {
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	3301      	adds	r3, #1
 8004fc0:	613b      	str	r3, [r7, #16]
 8004fc2:	693a      	ldr	r2, [r7, #16]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	dbf0      	blt.n	8004fac <lecSensor+0x14>
	}
	float adc = suma / n;
 8004fca:	697a      	ldr	r2, [r7, #20]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	fb92 f3f3 	sdiv	r3, r2, r3
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f7fb fe52 	bl	8000c7c <__aeabi_i2f>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	60bb      	str	r3, [r7, #8]
	float volts = adc * 0.0008056640; // value from sensor * (5/1024)
 8004fdc:	68b8      	ldr	r0, [r7, #8]
 8004fde:	f7fb fa1b 	bl	8000418 <__aeabi_f2d>
 8004fe2:	a323      	add	r3, pc, #140	; (adr r3, 8005070 <lecSensor+0xd8>)
 8004fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe8:	f7fb fa6e 	bl	80004c8 <__aeabi_dmul>
 8004fec:	4602      	mov	r2, r0
 8004fee:	460b      	mov	r3, r1
 8004ff0:	4610      	mov	r0, r2
 8004ff2:	4619      	mov	r1, r3
 8004ff4:	f7fb fd38 	bl	8000a68 <__aeabi_d2f>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	60fb      	str	r3, [r7, #12]
	if (volts <= 0.35)
 8004ffc:	68f8      	ldr	r0, [r7, #12]
 8004ffe:	f7fb fa0b 	bl	8000418 <__aeabi_f2d>
 8005002:	a31d      	add	r3, pc, #116	; (adr r3, 8005078 <lecSensor+0xe0>)
 8005004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005008:	f7fb fcda 	bl	80009c0 <__aeabi_dcmple>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d001      	beq.n	8005016 <lecSensor+0x7e>
		volts = 0.35;
 8005012:	4b1d      	ldr	r3, [pc, #116]	; (8005088 <lecSensor+0xf0>)
 8005014:	60fb      	str	r3, [r7, #12]
	volts = pow(volts - 0.3, 0.25);/*convertimos a cm con un aproximacion grafica*/
 8005016:	68f8      	ldr	r0, [r7, #12]
 8005018:	f7fb f9fe 	bl	8000418 <__aeabi_f2d>
 800501c:	a318      	add	r3, pc, #96	; (adr r3, 8005080 <lecSensor+0xe8>)
 800501e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005022:	f7fb f899 	bl	8000158 <__aeabi_dsub>
 8005026:	4602      	mov	r2, r0
 8005028:	460b      	mov	r3, r1
 800502a:	4610      	mov	r0, r2
 800502c:	4619      	mov	r1, r3
 800502e:	f04f 0200 	mov.w	r2, #0
 8005032:	4b16      	ldr	r3, [pc, #88]	; (800508c <lecSensor+0xf4>)
 8005034:	f003 fdea 	bl	8008c0c <pow>
 8005038:	4602      	mov	r2, r0
 800503a:	460b      	mov	r3, r1
 800503c:	4610      	mov	r0, r2
 800503e:	4619      	mov	r1, r3
 8005040:	f7fb fd12 	bl	8000a68 <__aeabi_d2f>
 8005044:	4603      	mov	r3, r0
 8005046:	60fb      	str	r3, [r7, #12]
	volts = 27.5 / volts; /*no preguntar por los valores*/
 8005048:	68f9      	ldr	r1, [r7, #12]
 800504a:	4811      	ldr	r0, [pc, #68]	; (8005090 <lecSensor+0xf8>)
 800504c:	f7fb ff1e 	bl	8000e8c <__aeabi_fdiv>
 8005050:	4603      	mov	r3, r0
 8005052:	60fb      	str	r3, [r7, #12]
	volts -= 18;
 8005054:	490f      	ldr	r1, [pc, #60]	; (8005094 <lecSensor+0xfc>)
 8005056:	68f8      	ldr	r0, [r7, #12]
 8005058:	f7fb fd5a 	bl	8000b10 <__aeabi_fsub>
 800505c:	4603      	mov	r3, r0
 800505e:	60fb      	str	r3, [r7, #12]

	return volts;
 8005060:	68fb      	ldr	r3, [r7, #12]

}
 8005062:	4618      	mov	r0, r3
 8005064:	3718      	adds	r7, #24
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
 800506a:	bf00      	nop
 800506c:	f3af 8000 	nop.w
 8005070:	440a4e96 	.word	0x440a4e96
 8005074:	3f4a6666 	.word	0x3f4a6666
 8005078:	66666666 	.word	0x66666666
 800507c:	3fd66666 	.word	0x3fd66666
 8005080:	33333333 	.word	0x33333333
 8005084:	3fd33333 	.word	0x3fd33333
 8005088:	3eb33333 	.word	0x3eb33333
 800508c:	3fd00000 	.word	0x3fd00000
 8005090:	41dc0000 	.word	0x41dc0000
 8005094:	41900000 	.word	0x41900000

08005098 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005098:	b480      	push	{r7}
 800509a:	b085      	sub	sp, #20
 800509c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800509e:	4b15      	ldr	r3, [pc, #84]	; (80050f4 <HAL_MspInit+0x5c>)
 80050a0:	699b      	ldr	r3, [r3, #24]
 80050a2:	4a14      	ldr	r2, [pc, #80]	; (80050f4 <HAL_MspInit+0x5c>)
 80050a4:	f043 0301 	orr.w	r3, r3, #1
 80050a8:	6193      	str	r3, [r2, #24]
 80050aa:	4b12      	ldr	r3, [pc, #72]	; (80050f4 <HAL_MspInit+0x5c>)
 80050ac:	699b      	ldr	r3, [r3, #24]
 80050ae:	f003 0301 	and.w	r3, r3, #1
 80050b2:	60bb      	str	r3, [r7, #8]
 80050b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80050b6:	4b0f      	ldr	r3, [pc, #60]	; (80050f4 <HAL_MspInit+0x5c>)
 80050b8:	69db      	ldr	r3, [r3, #28]
 80050ba:	4a0e      	ldr	r2, [pc, #56]	; (80050f4 <HAL_MspInit+0x5c>)
 80050bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050c0:	61d3      	str	r3, [r2, #28]
 80050c2:	4b0c      	ldr	r3, [pc, #48]	; (80050f4 <HAL_MspInit+0x5c>)
 80050c4:	69db      	ldr	r3, [r3, #28]
 80050c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050ca:	607b      	str	r3, [r7, #4]
 80050cc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80050ce:	4b0a      	ldr	r3, [pc, #40]	; (80050f8 <HAL_MspInit+0x60>)
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	60fb      	str	r3, [r7, #12]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80050da:	60fb      	str	r3, [r7, #12]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80050e2:	60fb      	str	r3, [r7, #12]
 80050e4:	4a04      	ldr	r2, [pc, #16]	; (80050f8 <HAL_MspInit+0x60>)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80050ea:	bf00      	nop
 80050ec:	3714      	adds	r7, #20
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bc80      	pop	{r7}
 80050f2:	4770      	bx	lr
 80050f4:	40021000 	.word	0x40021000
 80050f8:	40010000 	.word	0x40010000

080050fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b088      	sub	sp, #32
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005104:	f107 0310 	add.w	r3, r7, #16
 8005108:	2200      	movs	r2, #0
 800510a:	601a      	str	r2, [r3, #0]
 800510c:	605a      	str	r2, [r3, #4]
 800510e:	609a      	str	r2, [r3, #8]
 8005110:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a28      	ldr	r2, [pc, #160]	; (80051b8 <HAL_ADC_MspInit+0xbc>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d149      	bne.n	80051b0 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800511c:	4b27      	ldr	r3, [pc, #156]	; (80051bc <HAL_ADC_MspInit+0xc0>)
 800511e:	699b      	ldr	r3, [r3, #24]
 8005120:	4a26      	ldr	r2, [pc, #152]	; (80051bc <HAL_ADC_MspInit+0xc0>)
 8005122:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005126:	6193      	str	r3, [r2, #24]
 8005128:	4b24      	ldr	r3, [pc, #144]	; (80051bc <HAL_ADC_MspInit+0xc0>)
 800512a:	699b      	ldr	r3, [r3, #24]
 800512c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005130:	60fb      	str	r3, [r7, #12]
 8005132:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005134:	4b21      	ldr	r3, [pc, #132]	; (80051bc <HAL_ADC_MspInit+0xc0>)
 8005136:	699b      	ldr	r3, [r3, #24]
 8005138:	4a20      	ldr	r2, [pc, #128]	; (80051bc <HAL_ADC_MspInit+0xc0>)
 800513a:	f043 0304 	orr.w	r3, r3, #4
 800513e:	6193      	str	r3, [r2, #24]
 8005140:	4b1e      	ldr	r3, [pc, #120]	; (80051bc <HAL_ADC_MspInit+0xc0>)
 8005142:	699b      	ldr	r3, [r3, #24]
 8005144:	f003 0304 	and.w	r3, r3, #4
 8005148:	60bb      	str	r3, [r7, #8]
 800514a:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = CNY70_Pin|SHARP_D_Pin|SHARP_C_Pin|SHARP_I_Pin;
 800514c:	230f      	movs	r3, #15
 800514e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005150:	2303      	movs	r3, #3
 8005152:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005154:	f107 0310 	add.w	r3, r7, #16
 8005158:	4619      	mov	r1, r3
 800515a:	4819      	ldr	r0, [pc, #100]	; (80051c0 <HAL_ADC_MspInit+0xc4>)
 800515c:	f001 f9b2 	bl	80064c4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8005160:	4b18      	ldr	r3, [pc, #96]	; (80051c4 <HAL_ADC_MspInit+0xc8>)
 8005162:	4a19      	ldr	r2, [pc, #100]	; (80051c8 <HAL_ADC_MspInit+0xcc>)
 8005164:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005166:	4b17      	ldr	r3, [pc, #92]	; (80051c4 <HAL_ADC_MspInit+0xc8>)
 8005168:	2200      	movs	r2, #0
 800516a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800516c:	4b15      	ldr	r3, [pc, #84]	; (80051c4 <HAL_ADC_MspInit+0xc8>)
 800516e:	2200      	movs	r2, #0
 8005170:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005172:	4b14      	ldr	r3, [pc, #80]	; (80051c4 <HAL_ADC_MspInit+0xc8>)
 8005174:	2280      	movs	r2, #128	; 0x80
 8005176:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005178:	4b12      	ldr	r3, [pc, #72]	; (80051c4 <HAL_ADC_MspInit+0xc8>)
 800517a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800517e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005180:	4b10      	ldr	r3, [pc, #64]	; (80051c4 <HAL_ADC_MspInit+0xc8>)
 8005182:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005186:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005188:	4b0e      	ldr	r3, [pc, #56]	; (80051c4 <HAL_ADC_MspInit+0xc8>)
 800518a:	2220      	movs	r2, #32
 800518c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800518e:	4b0d      	ldr	r3, [pc, #52]	; (80051c4 <HAL_ADC_MspInit+0xc8>)
 8005190:	2200      	movs	r2, #0
 8005192:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005194:	480b      	ldr	r0, [pc, #44]	; (80051c4 <HAL_ADC_MspInit+0xc8>)
 8005196:	f000 ffa7 	bl	80060e8 <HAL_DMA_Init>
 800519a:	4603      	mov	r3, r0
 800519c:	2b00      	cmp	r3, #0
 800519e:	d001      	beq.n	80051a4 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80051a0:	f7fc fae4 	bl	800176c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	4a07      	ldr	r2, [pc, #28]	; (80051c4 <HAL_ADC_MspInit+0xc8>)
 80051a8:	621a      	str	r2, [r3, #32]
 80051aa:	4a06      	ldr	r2, [pc, #24]	; (80051c4 <HAL_ADC_MspInit+0xc8>)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80051b0:	bf00      	nop
 80051b2:	3720      	adds	r7, #32
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}
 80051b8:	40012400 	.word	0x40012400
 80051bc:	40021000 	.word	0x40021000
 80051c0:	40010800 	.word	0x40010800
 80051c4:	200000d4 	.word	0x200000d4
 80051c8:	40020008 	.word	0x40020008

080051cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b088      	sub	sp, #32
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051d4:	f107 0310 	add.w	r3, r7, #16
 80051d8:	2200      	movs	r2, #0
 80051da:	601a      	str	r2, [r3, #0]
 80051dc:	605a      	str	r2, [r3, #4]
 80051de:	609a      	str	r2, [r3, #8]
 80051e0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a16      	ldr	r2, [pc, #88]	; (8005240 <HAL_I2C_MspInit+0x74>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d124      	bne.n	8005236 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80051ec:	4b15      	ldr	r3, [pc, #84]	; (8005244 <HAL_I2C_MspInit+0x78>)
 80051ee:	699b      	ldr	r3, [r3, #24]
 80051f0:	4a14      	ldr	r2, [pc, #80]	; (8005244 <HAL_I2C_MspInit+0x78>)
 80051f2:	f043 0308 	orr.w	r3, r3, #8
 80051f6:	6193      	str	r3, [r2, #24]
 80051f8:	4b12      	ldr	r3, [pc, #72]	; (8005244 <HAL_I2C_MspInit+0x78>)
 80051fa:	699b      	ldr	r3, [r3, #24]
 80051fc:	f003 0308 	and.w	r3, r3, #8
 8005200:	60fb      	str	r3, [r7, #12]
 8005202:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 8005204:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005208:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800520a:	2312      	movs	r3, #18
 800520c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800520e:	2303      	movs	r3, #3
 8005210:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005212:	f107 0310 	add.w	r3, r7, #16
 8005216:	4619      	mov	r1, r3
 8005218:	480b      	ldr	r0, [pc, #44]	; (8005248 <HAL_I2C_MspInit+0x7c>)
 800521a:	f001 f953 	bl	80064c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800521e:	4b09      	ldr	r3, [pc, #36]	; (8005244 <HAL_I2C_MspInit+0x78>)
 8005220:	69db      	ldr	r3, [r3, #28]
 8005222:	4a08      	ldr	r2, [pc, #32]	; (8005244 <HAL_I2C_MspInit+0x78>)
 8005224:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005228:	61d3      	str	r3, [r2, #28]
 800522a:	4b06      	ldr	r3, [pc, #24]	; (8005244 <HAL_I2C_MspInit+0x78>)
 800522c:	69db      	ldr	r3, [r3, #28]
 800522e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005232:	60bb      	str	r3, [r7, #8]
 8005234:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8005236:	bf00      	nop
 8005238:	3720      	adds	r7, #32
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
 800523e:	bf00      	nop
 8005240:	40005800 	.word	0x40005800
 8005244:	40021000 	.word	0x40021000
 8005248:	40010c00 	.word	0x40010c00

0800524c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b088      	sub	sp, #32
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005254:	f107 0310 	add.w	r3, r7, #16
 8005258:	2200      	movs	r2, #0
 800525a:	601a      	str	r2, [r3, #0]
 800525c:	605a      	str	r2, [r3, #4]
 800525e:	609a      	str	r2, [r3, #8]
 8005260:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a16      	ldr	r2, [pc, #88]	; (80052c0 <HAL_TIM_Encoder_MspInit+0x74>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d124      	bne.n	80052b6 <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800526c:	4b15      	ldr	r3, [pc, #84]	; (80052c4 <HAL_TIM_Encoder_MspInit+0x78>)
 800526e:	699b      	ldr	r3, [r3, #24]
 8005270:	4a14      	ldr	r2, [pc, #80]	; (80052c4 <HAL_TIM_Encoder_MspInit+0x78>)
 8005272:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005276:	6193      	str	r3, [r2, #24]
 8005278:	4b12      	ldr	r3, [pc, #72]	; (80052c4 <HAL_TIM_Encoder_MspInit+0x78>)
 800527a:	699b      	ldr	r3, [r3, #24]
 800527c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005280:	60fb      	str	r3, [r7, #12]
 8005282:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005284:	4b0f      	ldr	r3, [pc, #60]	; (80052c4 <HAL_TIM_Encoder_MspInit+0x78>)
 8005286:	699b      	ldr	r3, [r3, #24]
 8005288:	4a0e      	ldr	r2, [pc, #56]	; (80052c4 <HAL_TIM_Encoder_MspInit+0x78>)
 800528a:	f043 0304 	orr.w	r3, r3, #4
 800528e:	6193      	str	r3, [r2, #24]
 8005290:	4b0c      	ldr	r3, [pc, #48]	; (80052c4 <HAL_TIM_Encoder_MspInit+0x78>)
 8005292:	699b      	ldr	r3, [r3, #24]
 8005294:	f003 0304 	and.w	r3, r3, #4
 8005298:	60bb      	str	r3, [r7, #8]
 800529a:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = MB2_Pin|MB1_Pin;
 800529c:	f44f 7340 	mov.w	r3, #768	; 0x300
 80052a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80052a2:	2300      	movs	r3, #0
 80052a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052a6:	2300      	movs	r3, #0
 80052a8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052aa:	f107 0310 	add.w	r3, r7, #16
 80052ae:	4619      	mov	r1, r3
 80052b0:	4805      	ldr	r0, [pc, #20]	; (80052c8 <HAL_TIM_Encoder_MspInit+0x7c>)
 80052b2:	f001 f907 	bl	80064c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80052b6:	bf00      	nop
 80052b8:	3720      	adds	r7, #32
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	40012c00 	.word	0x40012c00
 80052c4:	40021000 	.word	0x40021000
 80052c8:	40010800 	.word	0x40010800

080052cc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b08a      	sub	sp, #40	; 0x28
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052d4:	f107 0318 	add.w	r3, r7, #24
 80052d8:	2200      	movs	r2, #0
 80052da:	601a      	str	r2, [r3, #0]
 80052dc:	605a      	str	r2, [r3, #4]
 80052de:	609a      	str	r2, [r3, #8]
 80052e0:	60da      	str	r2, [r3, #12]
  if(htim_pwm->Instance==TIM3)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a1e      	ldr	r2, [pc, #120]	; (8005360 <HAL_TIM_PWM_MspInit+0x94>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d10c      	bne.n	8005306 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80052ec:	4b1d      	ldr	r3, [pc, #116]	; (8005364 <HAL_TIM_PWM_MspInit+0x98>)
 80052ee:	69db      	ldr	r3, [r3, #28]
 80052f0:	4a1c      	ldr	r2, [pc, #112]	; (8005364 <HAL_TIM_PWM_MspInit+0x98>)
 80052f2:	f043 0302 	orr.w	r3, r3, #2
 80052f6:	61d3      	str	r3, [r2, #28]
 80052f8:	4b1a      	ldr	r3, [pc, #104]	; (8005364 <HAL_TIM_PWM_MspInit+0x98>)
 80052fa:	69db      	ldr	r3, [r3, #28]
 80052fc:	f003 0302 	and.w	r3, r3, #2
 8005300:	617b      	str	r3, [r7, #20]
 8005302:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8005304:	e028      	b.n	8005358 <HAL_TIM_PWM_MspInit+0x8c>
  else if(htim_pwm->Instance==TIM4)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a17      	ldr	r2, [pc, #92]	; (8005368 <HAL_TIM_PWM_MspInit+0x9c>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d123      	bne.n	8005358 <HAL_TIM_PWM_MspInit+0x8c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005310:	4b14      	ldr	r3, [pc, #80]	; (8005364 <HAL_TIM_PWM_MspInit+0x98>)
 8005312:	69db      	ldr	r3, [r3, #28]
 8005314:	4a13      	ldr	r2, [pc, #76]	; (8005364 <HAL_TIM_PWM_MspInit+0x98>)
 8005316:	f043 0304 	orr.w	r3, r3, #4
 800531a:	61d3      	str	r3, [r2, #28]
 800531c:	4b11      	ldr	r3, [pc, #68]	; (8005364 <HAL_TIM_PWM_MspInit+0x98>)
 800531e:	69db      	ldr	r3, [r3, #28]
 8005320:	f003 0304 	and.w	r3, r3, #4
 8005324:	613b      	str	r3, [r7, #16]
 8005326:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005328:	4b0e      	ldr	r3, [pc, #56]	; (8005364 <HAL_TIM_PWM_MspInit+0x98>)
 800532a:	699b      	ldr	r3, [r3, #24]
 800532c:	4a0d      	ldr	r2, [pc, #52]	; (8005364 <HAL_TIM_PWM_MspInit+0x98>)
 800532e:	f043 0308 	orr.w	r3, r3, #8
 8005332:	6193      	str	r3, [r2, #24]
 8005334:	4b0b      	ldr	r3, [pc, #44]	; (8005364 <HAL_TIM_PWM_MspInit+0x98>)
 8005336:	699b      	ldr	r3, [r3, #24]
 8005338:	f003 0308 	and.w	r3, r3, #8
 800533c:	60fb      	str	r3, [r7, #12]
 800533e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MA2_Pin|MA1_Pin;
 8005340:	23c0      	movs	r3, #192	; 0xc0
 8005342:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005344:	2300      	movs	r3, #0
 8005346:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005348:	2300      	movs	r3, #0
 800534a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800534c:	f107 0318 	add.w	r3, r7, #24
 8005350:	4619      	mov	r1, r3
 8005352:	4806      	ldr	r0, [pc, #24]	; (800536c <HAL_TIM_PWM_MspInit+0xa0>)
 8005354:	f001 f8b6 	bl	80064c4 <HAL_GPIO_Init>
}
 8005358:	bf00      	nop
 800535a:	3728      	adds	r7, #40	; 0x28
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}
 8005360:	40000400 	.word	0x40000400
 8005364:	40021000 	.word	0x40021000
 8005368:	40000800 	.word	0x40000800
 800536c:	40010c00 	.word	0x40010c00

08005370 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b08a      	sub	sp, #40	; 0x28
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005378:	f107 0314 	add.w	r3, r7, #20
 800537c:	2200      	movs	r2, #0
 800537e:	601a      	str	r2, [r3, #0]
 8005380:	605a      	str	r2, [r3, #4]
 8005382:	609a      	str	r2, [r3, #8]
 8005384:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a28      	ldr	r2, [pc, #160]	; (800542c <HAL_TIM_MspPostInit+0xbc>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d12a      	bne.n	80053e6 <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005390:	4b27      	ldr	r3, [pc, #156]	; (8005430 <HAL_TIM_MspPostInit+0xc0>)
 8005392:	699b      	ldr	r3, [r3, #24]
 8005394:	4a26      	ldr	r2, [pc, #152]	; (8005430 <HAL_TIM_MspPostInit+0xc0>)
 8005396:	f043 0308 	orr.w	r3, r3, #8
 800539a:	6193      	str	r3, [r2, #24]
 800539c:	4b24      	ldr	r3, [pc, #144]	; (8005430 <HAL_TIM_MspPostInit+0xc0>)
 800539e:	699b      	ldr	r3, [r3, #24]
 80053a0:	f003 0308 	and.w	r3, r3, #8
 80053a4:	613b      	str	r3, [r7, #16]
 80053a6:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = PWMA_Pin;
 80053a8:	2320      	movs	r3, #32
 80053aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053ac:	2302      	movs	r3, #2
 80053ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053b0:	2302      	movs	r3, #2
 80053b2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(PWMA_GPIO_Port, &GPIO_InitStruct);
 80053b4:	f107 0314 	add.w	r3, r7, #20
 80053b8:	4619      	mov	r1, r3
 80053ba:	481e      	ldr	r0, [pc, #120]	; (8005434 <HAL_TIM_MspPostInit+0xc4>)
 80053bc:	f001 f882 	bl	80064c4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 80053c0:	4b1d      	ldr	r3, [pc, #116]	; (8005438 <HAL_TIM_MspPostInit+0xc8>)
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	627b      	str	r3, [r7, #36]	; 0x24
 80053c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80053cc:	627b      	str	r3, [r7, #36]	; 0x24
 80053ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80053d4:	627b      	str	r3, [r7, #36]	; 0x24
 80053d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80053dc:	627b      	str	r3, [r7, #36]	; 0x24
 80053de:	4a16      	ldr	r2, [pc, #88]	; (8005438 <HAL_TIM_MspPostInit+0xc8>)
 80053e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e2:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80053e4:	e01d      	b.n	8005422 <HAL_TIM_MspPostInit+0xb2>
  else if(htim->Instance==TIM4)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a14      	ldr	r2, [pc, #80]	; (800543c <HAL_TIM_MspPostInit+0xcc>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d118      	bne.n	8005422 <HAL_TIM_MspPostInit+0xb2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80053f0:	4b0f      	ldr	r3, [pc, #60]	; (8005430 <HAL_TIM_MspPostInit+0xc0>)
 80053f2:	699b      	ldr	r3, [r3, #24]
 80053f4:	4a0e      	ldr	r2, [pc, #56]	; (8005430 <HAL_TIM_MspPostInit+0xc0>)
 80053f6:	f043 0308 	orr.w	r3, r3, #8
 80053fa:	6193      	str	r3, [r2, #24]
 80053fc:	4b0c      	ldr	r3, [pc, #48]	; (8005430 <HAL_TIM_MspPostInit+0xc0>)
 80053fe:	699b      	ldr	r3, [r3, #24]
 8005400:	f003 0308 	and.w	r3, r3, #8
 8005404:	60fb      	str	r3, [r7, #12]
 8005406:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWMAB8_Pin|PWMB_Pin;
 8005408:	f44f 7340 	mov.w	r3, #768	; 0x300
 800540c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800540e:	2302      	movs	r3, #2
 8005410:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005412:	2302      	movs	r3, #2
 8005414:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005416:	f107 0314 	add.w	r3, r7, #20
 800541a:	4619      	mov	r1, r3
 800541c:	4805      	ldr	r0, [pc, #20]	; (8005434 <HAL_TIM_MspPostInit+0xc4>)
 800541e:	f001 f851 	bl	80064c4 <HAL_GPIO_Init>
}
 8005422:	bf00      	nop
 8005424:	3728      	adds	r7, #40	; 0x28
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	40000400 	.word	0x40000400
 8005430:	40021000 	.word	0x40021000
 8005434:	40010c00 	.word	0x40010c00
 8005438:	40010000 	.word	0x40010000
 800543c:	40000800 	.word	0x40000800

08005440 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005440:	b480      	push	{r7}
 8005442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005444:	e7fe      	b.n	8005444 <NMI_Handler+0x4>

08005446 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005446:	b480      	push	{r7}
 8005448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800544a:	e7fe      	b.n	800544a <HardFault_Handler+0x4>

0800544c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800544c:	b480      	push	{r7}
 800544e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005450:	e7fe      	b.n	8005450 <MemManage_Handler+0x4>

08005452 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005452:	b480      	push	{r7}
 8005454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005456:	e7fe      	b.n	8005456 <BusFault_Handler+0x4>

08005458 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005458:	b480      	push	{r7}
 800545a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800545c:	e7fe      	b.n	800545c <UsageFault_Handler+0x4>

0800545e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800545e:	b480      	push	{r7}
 8005460:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005462:	bf00      	nop
 8005464:	46bd      	mov	sp, r7
 8005466:	bc80      	pop	{r7}
 8005468:	4770      	bx	lr

0800546a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800546a:	b480      	push	{r7}
 800546c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800546e:	bf00      	nop
 8005470:	46bd      	mov	sp, r7
 8005472:	bc80      	pop	{r7}
 8005474:	4770      	bx	lr

08005476 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005476:	b480      	push	{r7}
 8005478:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800547a:	bf00      	nop
 800547c:	46bd      	mov	sp, r7
 800547e:	bc80      	pop	{r7}
 8005480:	4770      	bx	lr

08005482 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005482:	b580      	push	{r7, lr}
 8005484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005486:	f000 f91f 	bl	80056c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800548a:	bf00      	nop
 800548c:	bd80      	pop	{r7, pc}
	...

08005490 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005494:	4802      	ldr	r0, [pc, #8]	; (80054a0 <DMA1_Channel1_IRQHandler+0x10>)
 8005496:	f000 fee1 	bl	800625c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800549a:	bf00      	nop
 800549c:	bd80      	pop	{r7, pc}
 800549e:	bf00      	nop
 80054a0:	200000d4 	.word	0x200000d4

080054a4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b086      	sub	sp, #24
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	60b9      	str	r1, [r7, #8]
 80054ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80054b0:	2300      	movs	r3, #0
 80054b2:	617b      	str	r3, [r7, #20]
 80054b4:	e00a      	b.n	80054cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80054b6:	f3af 8000 	nop.w
 80054ba:	4601      	mov	r1, r0
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	1c5a      	adds	r2, r3, #1
 80054c0:	60ba      	str	r2, [r7, #8]
 80054c2:	b2ca      	uxtb	r2, r1
 80054c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	3301      	adds	r3, #1
 80054ca:	617b      	str	r3, [r7, #20]
 80054cc:	697a      	ldr	r2, [r7, #20]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	dbf0      	blt.n	80054b6 <_read+0x12>
	}

return len;
 80054d4:	687b      	ldr	r3, [r7, #4]
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3718      	adds	r7, #24
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}

080054de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80054de:	b580      	push	{r7, lr}
 80054e0:	b086      	sub	sp, #24
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	60f8      	str	r0, [r7, #12]
 80054e6:	60b9      	str	r1, [r7, #8]
 80054e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80054ea:	2300      	movs	r3, #0
 80054ec:	617b      	str	r3, [r7, #20]
 80054ee:	e009      	b.n	8005504 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	1c5a      	adds	r2, r3, #1
 80054f4:	60ba      	str	r2, [r7, #8]
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	4618      	mov	r0, r3
 80054fa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	3301      	adds	r3, #1
 8005502:	617b      	str	r3, [r7, #20]
 8005504:	697a      	ldr	r2, [r7, #20]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	429a      	cmp	r2, r3
 800550a:	dbf1      	blt.n	80054f0 <_write+0x12>
	}
	return len;
 800550c:	687b      	ldr	r3, [r7, #4]
}
 800550e:	4618      	mov	r0, r3
 8005510:	3718      	adds	r7, #24
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}

08005516 <_close>:

int _close(int file)
{
 8005516:	b480      	push	{r7}
 8005518:	b083      	sub	sp, #12
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
	return -1;
 800551e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005522:	4618      	mov	r0, r3
 8005524:	370c      	adds	r7, #12
 8005526:	46bd      	mov	sp, r7
 8005528:	bc80      	pop	{r7}
 800552a:	4770      	bx	lr

0800552c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800552c:	b480      	push	{r7}
 800552e:	b083      	sub	sp, #12
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800553c:	605a      	str	r2, [r3, #4]
	return 0;
 800553e:	2300      	movs	r3, #0
}
 8005540:	4618      	mov	r0, r3
 8005542:	370c      	adds	r7, #12
 8005544:	46bd      	mov	sp, r7
 8005546:	bc80      	pop	{r7}
 8005548:	4770      	bx	lr

0800554a <_isatty>:

int _isatty(int file)
{
 800554a:	b480      	push	{r7}
 800554c:	b083      	sub	sp, #12
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
	return 1;
 8005552:	2301      	movs	r3, #1
}
 8005554:	4618      	mov	r0, r3
 8005556:	370c      	adds	r7, #12
 8005558:	46bd      	mov	sp, r7
 800555a:	bc80      	pop	{r7}
 800555c:	4770      	bx	lr

0800555e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800555e:	b480      	push	{r7}
 8005560:	b085      	sub	sp, #20
 8005562:	af00      	add	r7, sp, #0
 8005564:	60f8      	str	r0, [r7, #12]
 8005566:	60b9      	str	r1, [r7, #8]
 8005568:	607a      	str	r2, [r7, #4]
	return 0;
 800556a:	2300      	movs	r3, #0
}
 800556c:	4618      	mov	r0, r3
 800556e:	3714      	adds	r7, #20
 8005570:	46bd      	mov	sp, r7
 8005572:	bc80      	pop	{r7}
 8005574:	4770      	bx	lr
	...

08005578 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b086      	sub	sp, #24
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005580:	4a14      	ldr	r2, [pc, #80]	; (80055d4 <_sbrk+0x5c>)
 8005582:	4b15      	ldr	r3, [pc, #84]	; (80055d8 <_sbrk+0x60>)
 8005584:	1ad3      	subs	r3, r2, r3
 8005586:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800558c:	4b13      	ldr	r3, [pc, #76]	; (80055dc <_sbrk+0x64>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d102      	bne.n	800559a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005594:	4b11      	ldr	r3, [pc, #68]	; (80055dc <_sbrk+0x64>)
 8005596:	4a12      	ldr	r2, [pc, #72]	; (80055e0 <_sbrk+0x68>)
 8005598:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800559a:	4b10      	ldr	r3, [pc, #64]	; (80055dc <_sbrk+0x64>)
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4413      	add	r3, r2
 80055a2:	693a      	ldr	r2, [r7, #16]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d207      	bcs.n	80055b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80055a8:	f004 fd80 	bl	800a0ac <__errno>
 80055ac:	4603      	mov	r3, r0
 80055ae:	220c      	movs	r2, #12
 80055b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80055b2:	f04f 33ff 	mov.w	r3, #4294967295
 80055b6:	e009      	b.n	80055cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80055b8:	4b08      	ldr	r3, [pc, #32]	; (80055dc <_sbrk+0x64>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80055be:	4b07      	ldr	r3, [pc, #28]	; (80055dc <_sbrk+0x64>)
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4413      	add	r3, r2
 80055c6:	4a05      	ldr	r2, [pc, #20]	; (80055dc <_sbrk+0x64>)
 80055c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80055ca:	68fb      	ldr	r3, [r7, #12]
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3718      	adds	r7, #24
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}
 80055d4:	20005000 	.word	0x20005000
 80055d8:	00000400 	.word	0x00000400
 80055dc:	20004368 	.word	0x20004368
 80055e0:	20004380 	.word	0x20004380

080055e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80055e4:	b480      	push	{r7}
 80055e6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80055e8:	bf00      	nop
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bc80      	pop	{r7}
 80055ee:	4770      	bx	lr

080055f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80055f0:	480c      	ldr	r0, [pc, #48]	; (8005624 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80055f2:	490d      	ldr	r1, [pc, #52]	; (8005628 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80055f4:	4a0d      	ldr	r2, [pc, #52]	; (800562c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80055f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80055f8:	e002      	b.n	8005600 <LoopCopyDataInit>

080055fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80055fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80055fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80055fe:	3304      	adds	r3, #4

08005600 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005600:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005602:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005604:	d3f9      	bcc.n	80055fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005606:	4a0a      	ldr	r2, [pc, #40]	; (8005630 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005608:	4c0a      	ldr	r4, [pc, #40]	; (8005634 <LoopFillZerobss+0x22>)
  movs r3, #0
 800560a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800560c:	e001      	b.n	8005612 <LoopFillZerobss>

0800560e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800560e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005610:	3204      	adds	r2, #4

08005612 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005612:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005614:	d3fb      	bcc.n	800560e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005616:	f7ff ffe5 	bl	80055e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800561a:	f004 fd4d 	bl	800a0b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800561e:	f7fb fd7d 	bl	800111c <main>
  bx lr
 8005622:	4770      	bx	lr
  ldr r0, =_sdata
 8005624:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005628:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 800562c:	0800b3a8 	.word	0x0800b3a8
  ldr r2, =_sbss
 8005630:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8005634:	20004380 	.word	0x20004380

08005638 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005638:	e7fe      	b.n	8005638 <ADC1_2_IRQHandler>
	...

0800563c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005640:	4b08      	ldr	r3, [pc, #32]	; (8005664 <HAL_Init+0x28>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a07      	ldr	r2, [pc, #28]	; (8005664 <HAL_Init+0x28>)
 8005646:	f043 0310 	orr.w	r3, r3, #16
 800564a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800564c:	2003      	movs	r0, #3
 800564e:	f000 fd09 	bl	8006064 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005652:	200f      	movs	r0, #15
 8005654:	f000 f808 	bl	8005668 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005658:	f7ff fd1e 	bl	8005098 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800565c:	2300      	movs	r3, #0
}
 800565e:	4618      	mov	r0, r3
 8005660:	bd80      	pop	{r7, pc}
 8005662:	bf00      	nop
 8005664:	40022000 	.word	0x40022000

08005668 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b082      	sub	sp, #8
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005670:	4b12      	ldr	r3, [pc, #72]	; (80056bc <HAL_InitTick+0x54>)
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	4b12      	ldr	r3, [pc, #72]	; (80056c0 <HAL_InitTick+0x58>)
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	4619      	mov	r1, r3
 800567a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800567e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005682:	fbb2 f3f3 	udiv	r3, r2, r3
 8005686:	4618      	mov	r0, r3
 8005688:	f000 fd21 	bl	80060ce <HAL_SYSTICK_Config>
 800568c:	4603      	mov	r3, r0
 800568e:	2b00      	cmp	r3, #0
 8005690:	d001      	beq.n	8005696 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e00e      	b.n	80056b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2b0f      	cmp	r3, #15
 800569a:	d80a      	bhi.n	80056b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800569c:	2200      	movs	r2, #0
 800569e:	6879      	ldr	r1, [r7, #4]
 80056a0:	f04f 30ff 	mov.w	r0, #4294967295
 80056a4:	f000 fce9 	bl	800607a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80056a8:	4a06      	ldr	r2, [pc, #24]	; (80056c4 <HAL_InitTick+0x5c>)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80056ae:	2300      	movs	r3, #0
 80056b0:	e000      	b.n	80056b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3708      	adds	r7, #8
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}
 80056bc:	20000018 	.word	0x20000018
 80056c0:	20000020 	.word	0x20000020
 80056c4:	2000001c 	.word	0x2000001c

080056c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80056c8:	b480      	push	{r7}
 80056ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80056cc:	4b05      	ldr	r3, [pc, #20]	; (80056e4 <HAL_IncTick+0x1c>)
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	461a      	mov	r2, r3
 80056d2:	4b05      	ldr	r3, [pc, #20]	; (80056e8 <HAL_IncTick+0x20>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4413      	add	r3, r2
 80056d8:	4a03      	ldr	r2, [pc, #12]	; (80056e8 <HAL_IncTick+0x20>)
 80056da:	6013      	str	r3, [r2, #0]
}
 80056dc:	bf00      	nop
 80056de:	46bd      	mov	sp, r7
 80056e0:	bc80      	pop	{r7}
 80056e2:	4770      	bx	lr
 80056e4:	20000020 	.word	0x20000020
 80056e8:	2000436c 	.word	0x2000436c

080056ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80056ec:	b480      	push	{r7}
 80056ee:	af00      	add	r7, sp, #0
  return uwTick;
 80056f0:	4b02      	ldr	r3, [pc, #8]	; (80056fc <HAL_GetTick+0x10>)
 80056f2:	681b      	ldr	r3, [r3, #0]
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bc80      	pop	{r7}
 80056fa:	4770      	bx	lr
 80056fc:	2000436c 	.word	0x2000436c

08005700 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b084      	sub	sp, #16
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005708:	f7ff fff0 	bl	80056ec <HAL_GetTick>
 800570c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005718:	d005      	beq.n	8005726 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800571a:	4b0a      	ldr	r3, [pc, #40]	; (8005744 <HAL_Delay+0x44>)
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	461a      	mov	r2, r3
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	4413      	add	r3, r2
 8005724:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005726:	bf00      	nop
 8005728:	f7ff ffe0 	bl	80056ec <HAL_GetTick>
 800572c:	4602      	mov	r2, r0
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	68fa      	ldr	r2, [r7, #12]
 8005734:	429a      	cmp	r2, r3
 8005736:	d8f7      	bhi.n	8005728 <HAL_Delay+0x28>
  {
  }
}
 8005738:	bf00      	nop
 800573a:	bf00      	nop
 800573c:	3710      	adds	r7, #16
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	20000020 	.word	0x20000020

08005748 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b086      	sub	sp, #24
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005750:	2300      	movs	r3, #0
 8005752:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8005754:	2300      	movs	r3, #0
 8005756:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8005758:	2300      	movs	r3, #0
 800575a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800575c:	2300      	movs	r3, #0
 800575e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d101      	bne.n	800576a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e0be      	b.n	80058e8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005774:	2b00      	cmp	r3, #0
 8005776:	d109      	bne.n	800578c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f7ff fcb8 	bl	80050fc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f000 faf5 	bl	8005d7c <ADC_ConversionStop_Disable>
 8005792:	4603      	mov	r3, r0
 8005794:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800579a:	f003 0310 	and.w	r3, r3, #16
 800579e:	2b00      	cmp	r3, #0
 80057a0:	f040 8099 	bne.w	80058d6 <HAL_ADC_Init+0x18e>
 80057a4:	7dfb      	ldrb	r3, [r7, #23]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	f040 8095 	bne.w	80058d6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057b0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80057b4:	f023 0302 	bic.w	r3, r3, #2
 80057b8:	f043 0202 	orr.w	r2, r3, #2
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80057c8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	7b1b      	ldrb	r3, [r3, #12]
 80057ce:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80057d0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80057d2:	68ba      	ldr	r2, [r7, #8]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057e0:	d003      	beq.n	80057ea <HAL_ADC_Init+0xa2>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d102      	bne.n	80057f0 <HAL_ADC_Init+0xa8>
 80057ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80057ee:	e000      	b.n	80057f2 <HAL_ADC_Init+0xaa>
 80057f0:	2300      	movs	r3, #0
 80057f2:	693a      	ldr	r2, [r7, #16]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	7d1b      	ldrb	r3, [r3, #20]
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d119      	bne.n	8005834 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	7b1b      	ldrb	r3, [r3, #12]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d109      	bne.n	800581c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	699b      	ldr	r3, [r3, #24]
 800580c:	3b01      	subs	r3, #1
 800580e:	035a      	lsls	r2, r3, #13
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	4313      	orrs	r3, r2
 8005814:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005818:	613b      	str	r3, [r7, #16]
 800581a:	e00b      	b.n	8005834 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005820:	f043 0220 	orr.w	r2, r3, #32
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800582c:	f043 0201 	orr.w	r2, r3, #1
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	693a      	ldr	r2, [r7, #16]
 8005844:	430a      	orrs	r2, r1
 8005846:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	689a      	ldr	r2, [r3, #8]
 800584e:	4b28      	ldr	r3, [pc, #160]	; (80058f0 <HAL_ADC_Init+0x1a8>)
 8005850:	4013      	ands	r3, r2
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	6812      	ldr	r2, [r2, #0]
 8005856:	68b9      	ldr	r1, [r7, #8]
 8005858:	430b      	orrs	r3, r1
 800585a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005864:	d003      	beq.n	800586e <HAL_ADC_Init+0x126>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	2b01      	cmp	r3, #1
 800586c:	d104      	bne.n	8005878 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	3b01      	subs	r3, #1
 8005874:	051b      	lsls	r3, r3, #20
 8005876:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800587e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	68fa      	ldr	r2, [r7, #12]
 8005888:	430a      	orrs	r2, r1
 800588a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	689a      	ldr	r2, [r3, #8]
 8005892:	4b18      	ldr	r3, [pc, #96]	; (80058f4 <HAL_ADC_Init+0x1ac>)
 8005894:	4013      	ands	r3, r2
 8005896:	68ba      	ldr	r2, [r7, #8]
 8005898:	429a      	cmp	r2, r3
 800589a:	d10b      	bne.n	80058b4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058a6:	f023 0303 	bic.w	r3, r3, #3
 80058aa:	f043 0201 	orr.w	r2, r3, #1
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80058b2:	e018      	b.n	80058e6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b8:	f023 0312 	bic.w	r3, r3, #18
 80058bc:	f043 0210 	orr.w	r2, r3, #16
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c8:	f043 0201 	orr.w	r2, r3, #1
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80058d4:	e007      	b.n	80058e6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058da:	f043 0210 	orr.w	r2, r3, #16
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80058e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3718      	adds	r7, #24
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}
 80058f0:	ffe1f7fd 	.word	0xffe1f7fd
 80058f4:	ff1f0efe 	.word	0xff1f0efe

080058f8 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b086      	sub	sp, #24
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005904:	2300      	movs	r3, #0
 8005906:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a64      	ldr	r2, [pc, #400]	; (8005aa0 <HAL_ADC_Start_DMA+0x1a8>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d004      	beq.n	800591c <HAL_ADC_Start_DMA+0x24>
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a63      	ldr	r2, [pc, #396]	; (8005aa4 <HAL_ADC_Start_DMA+0x1ac>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d106      	bne.n	800592a <HAL_ADC_Start_DMA+0x32>
 800591c:	4b60      	ldr	r3, [pc, #384]	; (8005aa0 <HAL_ADC_Start_DMA+0x1a8>)
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8005924:	2b00      	cmp	r3, #0
 8005926:	f040 80b3 	bne.w	8005a90 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005930:	2b01      	cmp	r3, #1
 8005932:	d101      	bne.n	8005938 <HAL_ADC_Start_DMA+0x40>
 8005934:	2302      	movs	r3, #2
 8005936:	e0ae      	b.n	8005a96 <HAL_ADC_Start_DMA+0x19e>
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8005940:	68f8      	ldr	r0, [r7, #12]
 8005942:	f000 f9c1 	bl	8005cc8 <ADC_Enable>
 8005946:	4603      	mov	r3, r0
 8005948:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800594a:	7dfb      	ldrb	r3, [r7, #23]
 800594c:	2b00      	cmp	r3, #0
 800594e:	f040 809a 	bne.w	8005a86 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005956:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800595a:	f023 0301 	bic.w	r3, r3, #1
 800595e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a4e      	ldr	r2, [pc, #312]	; (8005aa4 <HAL_ADC_Start_DMA+0x1ac>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d105      	bne.n	800597c <HAL_ADC_Start_DMA+0x84>
 8005970:	4b4b      	ldr	r3, [pc, #300]	; (8005aa0 <HAL_ADC_Start_DMA+0x1a8>)
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8005978:	2b00      	cmp	r3, #0
 800597a:	d115      	bne.n	80059a8 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005980:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005992:	2b00      	cmp	r3, #0
 8005994:	d026      	beq.n	80059e4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800599a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800599e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80059a6:	e01d      	b.n	80059e4 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ac:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a39      	ldr	r2, [pc, #228]	; (8005aa0 <HAL_ADC_Start_DMA+0x1a8>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d004      	beq.n	80059c8 <HAL_ADC_Start_DMA+0xd0>
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a38      	ldr	r2, [pc, #224]	; (8005aa4 <HAL_ADC_Start_DMA+0x1ac>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d10d      	bne.n	80059e4 <HAL_ADC_Start_DMA+0xec>
 80059c8:	4b35      	ldr	r3, [pc, #212]	; (8005aa0 <HAL_ADC_Start_DMA+0x1a8>)
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d007      	beq.n	80059e4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80059dc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d006      	beq.n	80059fe <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f4:	f023 0206 	bic.w	r2, r3, #6
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	62da      	str	r2, [r3, #44]	; 0x2c
 80059fc:	e002      	b.n	8005a04 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2200      	movs	r2, #0
 8005a02:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2200      	movs	r2, #0
 8005a08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	6a1b      	ldr	r3, [r3, #32]
 8005a10:	4a25      	ldr	r2, [pc, #148]	; (8005aa8 <HAL_ADC_Start_DMA+0x1b0>)
 8005a12:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	6a1b      	ldr	r3, [r3, #32]
 8005a18:	4a24      	ldr	r2, [pc, #144]	; (8005aac <HAL_ADC_Start_DMA+0x1b4>)
 8005a1a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	6a1b      	ldr	r3, [r3, #32]
 8005a20:	4a23      	ldr	r2, [pc, #140]	; (8005ab0 <HAL_ADC_Start_DMA+0x1b8>)
 8005a22:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f06f 0202 	mvn.w	r2, #2
 8005a2c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	689a      	ldr	r2, [r3, #8]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a3c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	6a18      	ldr	r0, [r3, #32]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	334c      	adds	r3, #76	; 0x4c
 8005a48:	4619      	mov	r1, r3
 8005a4a:	68ba      	ldr	r2, [r7, #8]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f000 fba5 	bl	800619c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8005a5c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8005a60:	d108      	bne.n	8005a74 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	689a      	ldr	r2, [r3, #8]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8005a70:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8005a72:	e00f      	b.n	8005a94 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	689a      	ldr	r2, [r3, #8]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005a82:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8005a84:	e006      	b.n	8005a94 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8005a8e:	e001      	b.n	8005a94 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8005a94:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3718      	adds	r7, #24
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
 8005a9e:	bf00      	nop
 8005aa0:	40012400 	.word	0x40012400
 8005aa4:	40012800 	.word	0x40012800
 8005aa8:	08005dff 	.word	0x08005dff
 8005aac:	08005e7b 	.word	0x08005e7b
 8005ab0:	08005e97 	.word	0x08005e97

08005ab4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b083      	sub	sp, #12
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005abc:	bf00      	nop
 8005abe:	370c      	adds	r7, #12
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bc80      	pop	{r7}
 8005ac4:	4770      	bx	lr

08005ac6 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005ac6:	b480      	push	{r7}
 8005ac8:	b083      	sub	sp, #12
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005ace:	bf00      	nop
 8005ad0:	370c      	adds	r7, #12
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bc80      	pop	{r7}
 8005ad6:	4770      	bx	lr

08005ad8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8005ad8:	b480      	push	{r7}
 8005ada:	b085      	sub	sp, #20
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d101      	bne.n	8005af8 <HAL_ADC_ConfigChannel+0x20>
 8005af4:	2302      	movs	r3, #2
 8005af6:	e0dc      	b.n	8005cb2 <HAL_ADC_ConfigChannel+0x1da>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	2b06      	cmp	r3, #6
 8005b06:	d81c      	bhi.n	8005b42 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	685a      	ldr	r2, [r3, #4]
 8005b12:	4613      	mov	r3, r2
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	4413      	add	r3, r2
 8005b18:	3b05      	subs	r3, #5
 8005b1a:	221f      	movs	r2, #31
 8005b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b20:	43db      	mvns	r3, r3
 8005b22:	4019      	ands	r1, r3
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	6818      	ldr	r0, [r3, #0]
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	685a      	ldr	r2, [r3, #4]
 8005b2c:	4613      	mov	r3, r2
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	4413      	add	r3, r2
 8005b32:	3b05      	subs	r3, #5
 8005b34:	fa00 f203 	lsl.w	r2, r0, r3
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	430a      	orrs	r2, r1
 8005b3e:	635a      	str	r2, [r3, #52]	; 0x34
 8005b40:	e03c      	b.n	8005bbc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	2b0c      	cmp	r3, #12
 8005b48:	d81c      	bhi.n	8005b84 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	685a      	ldr	r2, [r3, #4]
 8005b54:	4613      	mov	r3, r2
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	4413      	add	r3, r2
 8005b5a:	3b23      	subs	r3, #35	; 0x23
 8005b5c:	221f      	movs	r2, #31
 8005b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b62:	43db      	mvns	r3, r3
 8005b64:	4019      	ands	r1, r3
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	6818      	ldr	r0, [r3, #0]
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	685a      	ldr	r2, [r3, #4]
 8005b6e:	4613      	mov	r3, r2
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	4413      	add	r3, r2
 8005b74:	3b23      	subs	r3, #35	; 0x23
 8005b76:	fa00 f203 	lsl.w	r2, r0, r3
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	430a      	orrs	r2, r1
 8005b80:	631a      	str	r2, [r3, #48]	; 0x30
 8005b82:	e01b      	b.n	8005bbc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	685a      	ldr	r2, [r3, #4]
 8005b8e:	4613      	mov	r3, r2
 8005b90:	009b      	lsls	r3, r3, #2
 8005b92:	4413      	add	r3, r2
 8005b94:	3b41      	subs	r3, #65	; 0x41
 8005b96:	221f      	movs	r2, #31
 8005b98:	fa02 f303 	lsl.w	r3, r2, r3
 8005b9c:	43db      	mvns	r3, r3
 8005b9e:	4019      	ands	r1, r3
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	6818      	ldr	r0, [r3, #0]
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	685a      	ldr	r2, [r3, #4]
 8005ba8:	4613      	mov	r3, r2
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	4413      	add	r3, r2
 8005bae:	3b41      	subs	r3, #65	; 0x41
 8005bb0:	fa00 f203 	lsl.w	r2, r0, r3
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	430a      	orrs	r2, r1
 8005bba:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	2b09      	cmp	r3, #9
 8005bc2:	d91c      	bls.n	8005bfe <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	68d9      	ldr	r1, [r3, #12]
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	4613      	mov	r3, r2
 8005bd0:	005b      	lsls	r3, r3, #1
 8005bd2:	4413      	add	r3, r2
 8005bd4:	3b1e      	subs	r3, #30
 8005bd6:	2207      	movs	r2, #7
 8005bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bdc:	43db      	mvns	r3, r3
 8005bde:	4019      	ands	r1, r3
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	6898      	ldr	r0, [r3, #8]
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	4613      	mov	r3, r2
 8005bea:	005b      	lsls	r3, r3, #1
 8005bec:	4413      	add	r3, r2
 8005bee:	3b1e      	subs	r3, #30
 8005bf0:	fa00 f203 	lsl.w	r2, r0, r3
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	430a      	orrs	r2, r1
 8005bfa:	60da      	str	r2, [r3, #12]
 8005bfc:	e019      	b.n	8005c32 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	6919      	ldr	r1, [r3, #16]
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	4613      	mov	r3, r2
 8005c0a:	005b      	lsls	r3, r3, #1
 8005c0c:	4413      	add	r3, r2
 8005c0e:	2207      	movs	r2, #7
 8005c10:	fa02 f303 	lsl.w	r3, r2, r3
 8005c14:	43db      	mvns	r3, r3
 8005c16:	4019      	ands	r1, r3
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	6898      	ldr	r0, [r3, #8]
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	4613      	mov	r3, r2
 8005c22:	005b      	lsls	r3, r3, #1
 8005c24:	4413      	add	r3, r2
 8005c26:	fa00 f203 	lsl.w	r2, r0, r3
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	430a      	orrs	r2, r1
 8005c30:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	2b10      	cmp	r3, #16
 8005c38:	d003      	beq.n	8005c42 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005c3e:	2b11      	cmp	r3, #17
 8005c40:	d132      	bne.n	8005ca8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a1d      	ldr	r2, [pc, #116]	; (8005cbc <HAL_ADC_ConfigChannel+0x1e4>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d125      	bne.n	8005c98 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d126      	bne.n	8005ca8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	689a      	ldr	r2, [r3, #8]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005c68:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	2b10      	cmp	r3, #16
 8005c70:	d11a      	bne.n	8005ca8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005c72:	4b13      	ldr	r3, [pc, #76]	; (8005cc0 <HAL_ADC_ConfigChannel+0x1e8>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a13      	ldr	r2, [pc, #76]	; (8005cc4 <HAL_ADC_ConfigChannel+0x1ec>)
 8005c78:	fba2 2303 	umull	r2, r3, r2, r3
 8005c7c:	0c9a      	lsrs	r2, r3, #18
 8005c7e:	4613      	mov	r3, r2
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	4413      	add	r3, r2
 8005c84:	005b      	lsls	r3, r3, #1
 8005c86:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005c88:	e002      	b.n	8005c90 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	3b01      	subs	r3, #1
 8005c8e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d1f9      	bne.n	8005c8a <HAL_ADC_ConfigChannel+0x1b2>
 8005c96:	e007      	b.n	8005ca8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c9c:	f043 0220 	orr.w	r2, r3, #32
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8005cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3714      	adds	r7, #20
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bc80      	pop	{r7}
 8005cba:	4770      	bx	lr
 8005cbc:	40012400 	.word	0x40012400
 8005cc0:	20000018 	.word	0x20000018
 8005cc4:	431bde83 	.word	0x431bde83

08005cc8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b084      	sub	sp, #16
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	f003 0301 	and.w	r3, r3, #1
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d040      	beq.n	8005d68 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	689a      	ldr	r2, [r3, #8]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f042 0201 	orr.w	r2, r2, #1
 8005cf4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005cf6:	4b1f      	ldr	r3, [pc, #124]	; (8005d74 <ADC_Enable+0xac>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a1f      	ldr	r2, [pc, #124]	; (8005d78 <ADC_Enable+0xb0>)
 8005cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8005d00:	0c9b      	lsrs	r3, r3, #18
 8005d02:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8005d04:	e002      	b.n	8005d0c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	3b01      	subs	r3, #1
 8005d0a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d1f9      	bne.n	8005d06 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005d12:	f7ff fceb 	bl	80056ec <HAL_GetTick>
 8005d16:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005d18:	e01f      	b.n	8005d5a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005d1a:	f7ff fce7 	bl	80056ec <HAL_GetTick>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	1ad3      	subs	r3, r2, r3
 8005d24:	2b02      	cmp	r3, #2
 8005d26:	d918      	bls.n	8005d5a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	f003 0301 	and.w	r3, r3, #1
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d011      	beq.n	8005d5a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d3a:	f043 0210 	orr.w	r2, r3, #16
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d46:	f043 0201 	orr.w	r2, r3, #1
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	e007      	b.n	8005d6a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	f003 0301 	and.w	r3, r3, #1
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d1d8      	bne.n	8005d1a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8005d68:	2300      	movs	r3, #0
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3710      	adds	r7, #16
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	bf00      	nop
 8005d74:	20000018 	.word	0x20000018
 8005d78:	431bde83 	.word	0x431bde83

08005d7c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b084      	sub	sp, #16
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d84:	2300      	movs	r3, #0
 8005d86:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	f003 0301 	and.w	r3, r3, #1
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d12e      	bne.n	8005df4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	689a      	ldr	r2, [r3, #8]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f022 0201 	bic.w	r2, r2, #1
 8005da4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005da6:	f7ff fca1 	bl	80056ec <HAL_GetTick>
 8005daa:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8005dac:	e01b      	b.n	8005de6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005dae:	f7ff fc9d 	bl	80056ec <HAL_GetTick>
 8005db2:	4602      	mov	r2, r0
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	1ad3      	subs	r3, r2, r3
 8005db8:	2b02      	cmp	r3, #2
 8005dba:	d914      	bls.n	8005de6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	f003 0301 	and.w	r3, r3, #1
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d10d      	bne.n	8005de6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dce:	f043 0210 	orr.w	r2, r3, #16
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dda:	f043 0201 	orr.w	r2, r3, #1
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	e007      	b.n	8005df6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	f003 0301 	and.w	r3, r3, #1
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d0dc      	beq.n	8005dae <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3710      	adds	r7, #16
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}

08005dfe <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005dfe:	b580      	push	{r7, lr}
 8005e00:	b084      	sub	sp, #16
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e10:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d127      	bne.n	8005e68 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e1c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8005e2e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8005e32:	d115      	bne.n	8005e60 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d111      	bne.n	8005e60 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e40:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d105      	bne.n	8005e60 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e58:	f043 0201 	orr.w	r2, r3, #1
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005e60:	68f8      	ldr	r0, [r7, #12]
 8005e62:	f7fb fc71 	bl	8001748 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8005e66:	e004      	b.n	8005e72 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	6a1b      	ldr	r3, [r3, #32]
 8005e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	4798      	blx	r3
}
 8005e72:	bf00      	nop
 8005e74:	3710      	adds	r7, #16
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}

08005e7a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005e7a:	b580      	push	{r7, lr}
 8005e7c:	b084      	sub	sp, #16
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e86:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005e88:	68f8      	ldr	r0, [r7, #12]
 8005e8a:	f7ff fe13 	bl	8005ab4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005e8e:	bf00      	nop
 8005e90:	3710      	adds	r7, #16
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}

08005e96 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8005e96:	b580      	push	{r7, lr}
 8005e98:	b084      	sub	sp, #16
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb4:	f043 0204 	orr.w	r2, r3, #4
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005ebc:	68f8      	ldr	r0, [r7, #12]
 8005ebe:	f7ff fe02 	bl	8005ac6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005ec2:	bf00      	nop
 8005ec4:	3710      	adds	r7, #16
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
	...

08005ecc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b085      	sub	sp, #20
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f003 0307 	and.w	r3, r3, #7
 8005eda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005edc:	4b0c      	ldr	r3, [pc, #48]	; (8005f10 <__NVIC_SetPriorityGrouping+0x44>)
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005ee2:	68ba      	ldr	r2, [r7, #8]
 8005ee4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005ee8:	4013      	ands	r3, r2
 8005eea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005ef4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005ef8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005efc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005efe:	4a04      	ldr	r2, [pc, #16]	; (8005f10 <__NVIC_SetPriorityGrouping+0x44>)
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	60d3      	str	r3, [r2, #12]
}
 8005f04:	bf00      	nop
 8005f06:	3714      	adds	r7, #20
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bc80      	pop	{r7}
 8005f0c:	4770      	bx	lr
 8005f0e:	bf00      	nop
 8005f10:	e000ed00 	.word	0xe000ed00

08005f14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005f14:	b480      	push	{r7}
 8005f16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005f18:	4b04      	ldr	r3, [pc, #16]	; (8005f2c <__NVIC_GetPriorityGrouping+0x18>)
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	0a1b      	lsrs	r3, r3, #8
 8005f1e:	f003 0307 	and.w	r3, r3, #7
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bc80      	pop	{r7}
 8005f28:	4770      	bx	lr
 8005f2a:	bf00      	nop
 8005f2c:	e000ed00 	.word	0xe000ed00

08005f30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b083      	sub	sp, #12
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	4603      	mov	r3, r0
 8005f38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	db0b      	blt.n	8005f5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005f42:	79fb      	ldrb	r3, [r7, #7]
 8005f44:	f003 021f 	and.w	r2, r3, #31
 8005f48:	4906      	ldr	r1, [pc, #24]	; (8005f64 <__NVIC_EnableIRQ+0x34>)
 8005f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f4e:	095b      	lsrs	r3, r3, #5
 8005f50:	2001      	movs	r0, #1
 8005f52:	fa00 f202 	lsl.w	r2, r0, r2
 8005f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005f5a:	bf00      	nop
 8005f5c:	370c      	adds	r7, #12
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bc80      	pop	{r7}
 8005f62:	4770      	bx	lr
 8005f64:	e000e100 	.word	0xe000e100

08005f68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b083      	sub	sp, #12
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	4603      	mov	r3, r0
 8005f70:	6039      	str	r1, [r7, #0]
 8005f72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	db0a      	blt.n	8005f92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	b2da      	uxtb	r2, r3
 8005f80:	490c      	ldr	r1, [pc, #48]	; (8005fb4 <__NVIC_SetPriority+0x4c>)
 8005f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f86:	0112      	lsls	r2, r2, #4
 8005f88:	b2d2      	uxtb	r2, r2
 8005f8a:	440b      	add	r3, r1
 8005f8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005f90:	e00a      	b.n	8005fa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	b2da      	uxtb	r2, r3
 8005f96:	4908      	ldr	r1, [pc, #32]	; (8005fb8 <__NVIC_SetPriority+0x50>)
 8005f98:	79fb      	ldrb	r3, [r7, #7]
 8005f9a:	f003 030f 	and.w	r3, r3, #15
 8005f9e:	3b04      	subs	r3, #4
 8005fa0:	0112      	lsls	r2, r2, #4
 8005fa2:	b2d2      	uxtb	r2, r2
 8005fa4:	440b      	add	r3, r1
 8005fa6:	761a      	strb	r2, [r3, #24]
}
 8005fa8:	bf00      	nop
 8005faa:	370c      	adds	r7, #12
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bc80      	pop	{r7}
 8005fb0:	4770      	bx	lr
 8005fb2:	bf00      	nop
 8005fb4:	e000e100 	.word	0xe000e100
 8005fb8:	e000ed00 	.word	0xe000ed00

08005fbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b089      	sub	sp, #36	; 0x24
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f003 0307 	and.w	r3, r3, #7
 8005fce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005fd0:	69fb      	ldr	r3, [r7, #28]
 8005fd2:	f1c3 0307 	rsb	r3, r3, #7
 8005fd6:	2b04      	cmp	r3, #4
 8005fd8:	bf28      	it	cs
 8005fda:	2304      	movcs	r3, #4
 8005fdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005fde:	69fb      	ldr	r3, [r7, #28]
 8005fe0:	3304      	adds	r3, #4
 8005fe2:	2b06      	cmp	r3, #6
 8005fe4:	d902      	bls.n	8005fec <NVIC_EncodePriority+0x30>
 8005fe6:	69fb      	ldr	r3, [r7, #28]
 8005fe8:	3b03      	subs	r3, #3
 8005fea:	e000      	b.n	8005fee <NVIC_EncodePriority+0x32>
 8005fec:	2300      	movs	r3, #0
 8005fee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ff4:	69bb      	ldr	r3, [r7, #24]
 8005ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8005ffa:	43da      	mvns	r2, r3
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	401a      	ands	r2, r3
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006004:	f04f 31ff 	mov.w	r1, #4294967295
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	fa01 f303 	lsl.w	r3, r1, r3
 800600e:	43d9      	mvns	r1, r3
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006014:	4313      	orrs	r3, r2
         );
}
 8006016:	4618      	mov	r0, r3
 8006018:	3724      	adds	r7, #36	; 0x24
 800601a:	46bd      	mov	sp, r7
 800601c:	bc80      	pop	{r7}
 800601e:	4770      	bx	lr

08006020 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b082      	sub	sp, #8
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	3b01      	subs	r3, #1
 800602c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006030:	d301      	bcc.n	8006036 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006032:	2301      	movs	r3, #1
 8006034:	e00f      	b.n	8006056 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006036:	4a0a      	ldr	r2, [pc, #40]	; (8006060 <SysTick_Config+0x40>)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	3b01      	subs	r3, #1
 800603c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800603e:	210f      	movs	r1, #15
 8006040:	f04f 30ff 	mov.w	r0, #4294967295
 8006044:	f7ff ff90 	bl	8005f68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006048:	4b05      	ldr	r3, [pc, #20]	; (8006060 <SysTick_Config+0x40>)
 800604a:	2200      	movs	r2, #0
 800604c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800604e:	4b04      	ldr	r3, [pc, #16]	; (8006060 <SysTick_Config+0x40>)
 8006050:	2207      	movs	r2, #7
 8006052:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006054:	2300      	movs	r3, #0
}
 8006056:	4618      	mov	r0, r3
 8006058:	3708      	adds	r7, #8
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
 800605e:	bf00      	nop
 8006060:	e000e010 	.word	0xe000e010

08006064 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b082      	sub	sp, #8
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f7ff ff2d 	bl	8005ecc <__NVIC_SetPriorityGrouping>
}
 8006072:	bf00      	nop
 8006074:	3708      	adds	r7, #8
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}

0800607a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800607a:	b580      	push	{r7, lr}
 800607c:	b086      	sub	sp, #24
 800607e:	af00      	add	r7, sp, #0
 8006080:	4603      	mov	r3, r0
 8006082:	60b9      	str	r1, [r7, #8]
 8006084:	607a      	str	r2, [r7, #4]
 8006086:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006088:	2300      	movs	r3, #0
 800608a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800608c:	f7ff ff42 	bl	8005f14 <__NVIC_GetPriorityGrouping>
 8006090:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	68b9      	ldr	r1, [r7, #8]
 8006096:	6978      	ldr	r0, [r7, #20]
 8006098:	f7ff ff90 	bl	8005fbc <NVIC_EncodePriority>
 800609c:	4602      	mov	r2, r0
 800609e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060a2:	4611      	mov	r1, r2
 80060a4:	4618      	mov	r0, r3
 80060a6:	f7ff ff5f 	bl	8005f68 <__NVIC_SetPriority>
}
 80060aa:	bf00      	nop
 80060ac:	3718      	adds	r7, #24
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}

080060b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80060b2:	b580      	push	{r7, lr}
 80060b4:	b082      	sub	sp, #8
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	4603      	mov	r3, r0
 80060ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80060bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060c0:	4618      	mov	r0, r3
 80060c2:	f7ff ff35 	bl	8005f30 <__NVIC_EnableIRQ>
}
 80060c6:	bf00      	nop
 80060c8:	3708      	adds	r7, #8
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}

080060ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80060ce:	b580      	push	{r7, lr}
 80060d0:	b082      	sub	sp, #8
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f7ff ffa2 	bl	8006020 <SysTick_Config>
 80060dc:	4603      	mov	r3, r0
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3708      	adds	r7, #8
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}
	...

080060e8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b085      	sub	sp, #20
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80060f0:	2300      	movs	r3, #0
 80060f2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d101      	bne.n	80060fe <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	e043      	b.n	8006186 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	461a      	mov	r2, r3
 8006104:	4b22      	ldr	r3, [pc, #136]	; (8006190 <HAL_DMA_Init+0xa8>)
 8006106:	4413      	add	r3, r2
 8006108:	4a22      	ldr	r2, [pc, #136]	; (8006194 <HAL_DMA_Init+0xac>)
 800610a:	fba2 2303 	umull	r2, r3, r2, r3
 800610e:	091b      	lsrs	r3, r3, #4
 8006110:	009a      	lsls	r2, r3, #2
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	4a1f      	ldr	r2, [pc, #124]	; (8006198 <HAL_DMA_Init+0xb0>)
 800611a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2202      	movs	r2, #2
 8006120:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006132:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8006136:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8006140:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	68db      	ldr	r3, [r3, #12]
 8006146:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800614c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	695b      	ldr	r3, [r3, #20]
 8006152:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006158:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	69db      	ldr	r3, [r3, #28]
 800615e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006160:	68fa      	ldr	r2, [r7, #12]
 8006162:	4313      	orrs	r3, r2
 8006164:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	68fa      	ldr	r2, [r7, #12]
 800616c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2200      	movs	r2, #0
 8006172:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006184:	2300      	movs	r3, #0
}
 8006186:	4618      	mov	r0, r3
 8006188:	3714      	adds	r7, #20
 800618a:	46bd      	mov	sp, r7
 800618c:	bc80      	pop	{r7}
 800618e:	4770      	bx	lr
 8006190:	bffdfff8 	.word	0xbffdfff8
 8006194:	cccccccd 	.word	0xcccccccd
 8006198:	40020000 	.word	0x40020000

0800619c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b086      	sub	sp, #24
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	607a      	str	r2, [r7, #4]
 80061a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80061aa:	2300      	movs	r3, #0
 80061ac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d101      	bne.n	80061bc <HAL_DMA_Start_IT+0x20>
 80061b8:	2302      	movs	r3, #2
 80061ba:	e04a      	b.n	8006252 <HAL_DMA_Start_IT+0xb6>
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d13a      	bne.n	8006244 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2202      	movs	r2, #2
 80061d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2200      	movs	r2, #0
 80061da:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f022 0201 	bic.w	r2, r2, #1
 80061ea:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	687a      	ldr	r2, [r7, #4]
 80061f0:	68b9      	ldr	r1, [r7, #8]
 80061f2:	68f8      	ldr	r0, [r7, #12]
 80061f4:	f000 f938 	bl	8006468 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d008      	beq.n	8006212 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f042 020e 	orr.w	r2, r2, #14
 800620e:	601a      	str	r2, [r3, #0]
 8006210:	e00f      	b.n	8006232 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f022 0204 	bic.w	r2, r2, #4
 8006220:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f042 020a 	orr.w	r2, r2, #10
 8006230:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f042 0201 	orr.w	r2, r2, #1
 8006240:	601a      	str	r2, [r3, #0]
 8006242:	e005      	b.n	8006250 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2200      	movs	r2, #0
 8006248:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800624c:	2302      	movs	r3, #2
 800624e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8006250:	7dfb      	ldrb	r3, [r7, #23]
}
 8006252:	4618      	mov	r0, r3
 8006254:	3718      	adds	r7, #24
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}
	...

0800625c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b084      	sub	sp, #16
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006278:	2204      	movs	r2, #4
 800627a:	409a      	lsls	r2, r3
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	4013      	ands	r3, r2
 8006280:	2b00      	cmp	r3, #0
 8006282:	d04f      	beq.n	8006324 <HAL_DMA_IRQHandler+0xc8>
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	f003 0304 	and.w	r3, r3, #4
 800628a:	2b00      	cmp	r3, #0
 800628c:	d04a      	beq.n	8006324 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f003 0320 	and.w	r3, r3, #32
 8006298:	2b00      	cmp	r3, #0
 800629a:	d107      	bne.n	80062ac <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f022 0204 	bic.w	r2, r2, #4
 80062aa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a66      	ldr	r2, [pc, #408]	; (800644c <HAL_DMA_IRQHandler+0x1f0>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d029      	beq.n	800630a <HAL_DMA_IRQHandler+0xae>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a65      	ldr	r2, [pc, #404]	; (8006450 <HAL_DMA_IRQHandler+0x1f4>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d022      	beq.n	8006306 <HAL_DMA_IRQHandler+0xaa>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a63      	ldr	r2, [pc, #396]	; (8006454 <HAL_DMA_IRQHandler+0x1f8>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d01a      	beq.n	8006300 <HAL_DMA_IRQHandler+0xa4>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a62      	ldr	r2, [pc, #392]	; (8006458 <HAL_DMA_IRQHandler+0x1fc>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d012      	beq.n	80062fa <HAL_DMA_IRQHandler+0x9e>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a60      	ldr	r2, [pc, #384]	; (800645c <HAL_DMA_IRQHandler+0x200>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d00a      	beq.n	80062f4 <HAL_DMA_IRQHandler+0x98>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a5f      	ldr	r2, [pc, #380]	; (8006460 <HAL_DMA_IRQHandler+0x204>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d102      	bne.n	80062ee <HAL_DMA_IRQHandler+0x92>
 80062e8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80062ec:	e00e      	b.n	800630c <HAL_DMA_IRQHandler+0xb0>
 80062ee:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80062f2:	e00b      	b.n	800630c <HAL_DMA_IRQHandler+0xb0>
 80062f4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80062f8:	e008      	b.n	800630c <HAL_DMA_IRQHandler+0xb0>
 80062fa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80062fe:	e005      	b.n	800630c <HAL_DMA_IRQHandler+0xb0>
 8006300:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006304:	e002      	b.n	800630c <HAL_DMA_IRQHandler+0xb0>
 8006306:	2340      	movs	r3, #64	; 0x40
 8006308:	e000      	b.n	800630c <HAL_DMA_IRQHandler+0xb0>
 800630a:	2304      	movs	r3, #4
 800630c:	4a55      	ldr	r2, [pc, #340]	; (8006464 <HAL_DMA_IRQHandler+0x208>)
 800630e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006314:	2b00      	cmp	r3, #0
 8006316:	f000 8094 	beq.w	8006442 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8006322:	e08e      	b.n	8006442 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006328:	2202      	movs	r2, #2
 800632a:	409a      	lsls	r2, r3
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	4013      	ands	r3, r2
 8006330:	2b00      	cmp	r3, #0
 8006332:	d056      	beq.n	80063e2 <HAL_DMA_IRQHandler+0x186>
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	f003 0302 	and.w	r3, r3, #2
 800633a:	2b00      	cmp	r3, #0
 800633c:	d051      	beq.n	80063e2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 0320 	and.w	r3, r3, #32
 8006348:	2b00      	cmp	r3, #0
 800634a:	d10b      	bne.n	8006364 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f022 020a 	bic.w	r2, r2, #10
 800635a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2201      	movs	r2, #1
 8006360:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a38      	ldr	r2, [pc, #224]	; (800644c <HAL_DMA_IRQHandler+0x1f0>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d029      	beq.n	80063c2 <HAL_DMA_IRQHandler+0x166>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a37      	ldr	r2, [pc, #220]	; (8006450 <HAL_DMA_IRQHandler+0x1f4>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d022      	beq.n	80063be <HAL_DMA_IRQHandler+0x162>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a35      	ldr	r2, [pc, #212]	; (8006454 <HAL_DMA_IRQHandler+0x1f8>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d01a      	beq.n	80063b8 <HAL_DMA_IRQHandler+0x15c>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a34      	ldr	r2, [pc, #208]	; (8006458 <HAL_DMA_IRQHandler+0x1fc>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d012      	beq.n	80063b2 <HAL_DMA_IRQHandler+0x156>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a32      	ldr	r2, [pc, #200]	; (800645c <HAL_DMA_IRQHandler+0x200>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d00a      	beq.n	80063ac <HAL_DMA_IRQHandler+0x150>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a31      	ldr	r2, [pc, #196]	; (8006460 <HAL_DMA_IRQHandler+0x204>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d102      	bne.n	80063a6 <HAL_DMA_IRQHandler+0x14a>
 80063a0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80063a4:	e00e      	b.n	80063c4 <HAL_DMA_IRQHandler+0x168>
 80063a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80063aa:	e00b      	b.n	80063c4 <HAL_DMA_IRQHandler+0x168>
 80063ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80063b0:	e008      	b.n	80063c4 <HAL_DMA_IRQHandler+0x168>
 80063b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80063b6:	e005      	b.n	80063c4 <HAL_DMA_IRQHandler+0x168>
 80063b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063bc:	e002      	b.n	80063c4 <HAL_DMA_IRQHandler+0x168>
 80063be:	2320      	movs	r3, #32
 80063c0:	e000      	b.n	80063c4 <HAL_DMA_IRQHandler+0x168>
 80063c2:	2302      	movs	r3, #2
 80063c4:	4a27      	ldr	r2, [pc, #156]	; (8006464 <HAL_DMA_IRQHandler+0x208>)
 80063c6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d034      	beq.n	8006442 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80063e0:	e02f      	b.n	8006442 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e6:	2208      	movs	r2, #8
 80063e8:	409a      	lsls	r2, r3
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	4013      	ands	r3, r2
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d028      	beq.n	8006444 <HAL_DMA_IRQHandler+0x1e8>
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	f003 0308 	and.w	r3, r3, #8
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d023      	beq.n	8006444 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	681a      	ldr	r2, [r3, #0]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f022 020e 	bic.w	r2, r2, #14
 800640a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006414:	2101      	movs	r1, #1
 8006416:	fa01 f202 	lsl.w	r2, r1, r2
 800641a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2201      	movs	r2, #1
 8006420:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2201      	movs	r2, #1
 8006426:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006436:	2b00      	cmp	r3, #0
 8006438:	d004      	beq.n	8006444 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	4798      	blx	r3
    }
  }
  return;
 8006442:	bf00      	nop
 8006444:	bf00      	nop
}
 8006446:	3710      	adds	r7, #16
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}
 800644c:	40020008 	.word	0x40020008
 8006450:	4002001c 	.word	0x4002001c
 8006454:	40020030 	.word	0x40020030
 8006458:	40020044 	.word	0x40020044
 800645c:	40020058 	.word	0x40020058
 8006460:	4002006c 	.word	0x4002006c
 8006464:	40020000 	.word	0x40020000

08006468 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006468:	b480      	push	{r7}
 800646a:	b085      	sub	sp, #20
 800646c:	af00      	add	r7, sp, #0
 800646e:	60f8      	str	r0, [r7, #12]
 8006470:	60b9      	str	r1, [r7, #8]
 8006472:	607a      	str	r2, [r7, #4]
 8006474:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800647e:	2101      	movs	r1, #1
 8006480:	fa01 f202 	lsl.w	r2, r1, r2
 8006484:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	683a      	ldr	r2, [r7, #0]
 800648c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	2b10      	cmp	r3, #16
 8006494:	d108      	bne.n	80064a8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	68ba      	ldr	r2, [r7, #8]
 80064a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80064a6:	e007      	b.n	80064b8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	68ba      	ldr	r2, [r7, #8]
 80064ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	687a      	ldr	r2, [r7, #4]
 80064b6:	60da      	str	r2, [r3, #12]
}
 80064b8:	bf00      	nop
 80064ba:	3714      	adds	r7, #20
 80064bc:	46bd      	mov	sp, r7
 80064be:	bc80      	pop	{r7}
 80064c0:	4770      	bx	lr
	...

080064c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b08b      	sub	sp, #44	; 0x2c
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80064ce:	2300      	movs	r3, #0
 80064d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80064d2:	2300      	movs	r3, #0
 80064d4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80064d6:	e169      	b.n	80067ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80064d8:	2201      	movs	r2, #1
 80064da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064dc:	fa02 f303 	lsl.w	r3, r2, r3
 80064e0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	69fa      	ldr	r2, [r7, #28]
 80064e8:	4013      	ands	r3, r2
 80064ea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80064ec:	69ba      	ldr	r2, [r7, #24]
 80064ee:	69fb      	ldr	r3, [r7, #28]
 80064f0:	429a      	cmp	r2, r3
 80064f2:	f040 8158 	bne.w	80067a6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	4a9a      	ldr	r2, [pc, #616]	; (8006764 <HAL_GPIO_Init+0x2a0>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d05e      	beq.n	80065be <HAL_GPIO_Init+0xfa>
 8006500:	4a98      	ldr	r2, [pc, #608]	; (8006764 <HAL_GPIO_Init+0x2a0>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d875      	bhi.n	80065f2 <HAL_GPIO_Init+0x12e>
 8006506:	4a98      	ldr	r2, [pc, #608]	; (8006768 <HAL_GPIO_Init+0x2a4>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d058      	beq.n	80065be <HAL_GPIO_Init+0xfa>
 800650c:	4a96      	ldr	r2, [pc, #600]	; (8006768 <HAL_GPIO_Init+0x2a4>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d86f      	bhi.n	80065f2 <HAL_GPIO_Init+0x12e>
 8006512:	4a96      	ldr	r2, [pc, #600]	; (800676c <HAL_GPIO_Init+0x2a8>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d052      	beq.n	80065be <HAL_GPIO_Init+0xfa>
 8006518:	4a94      	ldr	r2, [pc, #592]	; (800676c <HAL_GPIO_Init+0x2a8>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d869      	bhi.n	80065f2 <HAL_GPIO_Init+0x12e>
 800651e:	4a94      	ldr	r2, [pc, #592]	; (8006770 <HAL_GPIO_Init+0x2ac>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d04c      	beq.n	80065be <HAL_GPIO_Init+0xfa>
 8006524:	4a92      	ldr	r2, [pc, #584]	; (8006770 <HAL_GPIO_Init+0x2ac>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d863      	bhi.n	80065f2 <HAL_GPIO_Init+0x12e>
 800652a:	4a92      	ldr	r2, [pc, #584]	; (8006774 <HAL_GPIO_Init+0x2b0>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d046      	beq.n	80065be <HAL_GPIO_Init+0xfa>
 8006530:	4a90      	ldr	r2, [pc, #576]	; (8006774 <HAL_GPIO_Init+0x2b0>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d85d      	bhi.n	80065f2 <HAL_GPIO_Init+0x12e>
 8006536:	2b12      	cmp	r3, #18
 8006538:	d82a      	bhi.n	8006590 <HAL_GPIO_Init+0xcc>
 800653a:	2b12      	cmp	r3, #18
 800653c:	d859      	bhi.n	80065f2 <HAL_GPIO_Init+0x12e>
 800653e:	a201      	add	r2, pc, #4	; (adr r2, 8006544 <HAL_GPIO_Init+0x80>)
 8006540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006544:	080065bf 	.word	0x080065bf
 8006548:	08006599 	.word	0x08006599
 800654c:	080065ab 	.word	0x080065ab
 8006550:	080065ed 	.word	0x080065ed
 8006554:	080065f3 	.word	0x080065f3
 8006558:	080065f3 	.word	0x080065f3
 800655c:	080065f3 	.word	0x080065f3
 8006560:	080065f3 	.word	0x080065f3
 8006564:	080065f3 	.word	0x080065f3
 8006568:	080065f3 	.word	0x080065f3
 800656c:	080065f3 	.word	0x080065f3
 8006570:	080065f3 	.word	0x080065f3
 8006574:	080065f3 	.word	0x080065f3
 8006578:	080065f3 	.word	0x080065f3
 800657c:	080065f3 	.word	0x080065f3
 8006580:	080065f3 	.word	0x080065f3
 8006584:	080065f3 	.word	0x080065f3
 8006588:	080065a1 	.word	0x080065a1
 800658c:	080065b5 	.word	0x080065b5
 8006590:	4a79      	ldr	r2, [pc, #484]	; (8006778 <HAL_GPIO_Init+0x2b4>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d013      	beq.n	80065be <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8006596:	e02c      	b.n	80065f2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	68db      	ldr	r3, [r3, #12]
 800659c:	623b      	str	r3, [r7, #32]
          break;
 800659e:	e029      	b.n	80065f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	3304      	adds	r3, #4
 80065a6:	623b      	str	r3, [r7, #32]
          break;
 80065a8:	e024      	b.n	80065f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	68db      	ldr	r3, [r3, #12]
 80065ae:	3308      	adds	r3, #8
 80065b0:	623b      	str	r3, [r7, #32]
          break;
 80065b2:	e01f      	b.n	80065f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	330c      	adds	r3, #12
 80065ba:	623b      	str	r3, [r7, #32]
          break;
 80065bc:	e01a      	b.n	80065f4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d102      	bne.n	80065cc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80065c6:	2304      	movs	r3, #4
 80065c8:	623b      	str	r3, [r7, #32]
          break;
 80065ca:	e013      	b.n	80065f4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d105      	bne.n	80065e0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80065d4:	2308      	movs	r3, #8
 80065d6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	69fa      	ldr	r2, [r7, #28]
 80065dc:	611a      	str	r2, [r3, #16]
          break;
 80065de:	e009      	b.n	80065f4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80065e0:	2308      	movs	r3, #8
 80065e2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	69fa      	ldr	r2, [r7, #28]
 80065e8:	615a      	str	r2, [r3, #20]
          break;
 80065ea:	e003      	b.n	80065f4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80065ec:	2300      	movs	r3, #0
 80065ee:	623b      	str	r3, [r7, #32]
          break;
 80065f0:	e000      	b.n	80065f4 <HAL_GPIO_Init+0x130>
          break;
 80065f2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80065f4:	69bb      	ldr	r3, [r7, #24]
 80065f6:	2bff      	cmp	r3, #255	; 0xff
 80065f8:	d801      	bhi.n	80065fe <HAL_GPIO_Init+0x13a>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	e001      	b.n	8006602 <HAL_GPIO_Init+0x13e>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	3304      	adds	r3, #4
 8006602:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006604:	69bb      	ldr	r3, [r7, #24]
 8006606:	2bff      	cmp	r3, #255	; 0xff
 8006608:	d802      	bhi.n	8006610 <HAL_GPIO_Init+0x14c>
 800660a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660c:	009b      	lsls	r3, r3, #2
 800660e:	e002      	b.n	8006616 <HAL_GPIO_Init+0x152>
 8006610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006612:	3b08      	subs	r3, #8
 8006614:	009b      	lsls	r3, r3, #2
 8006616:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	210f      	movs	r1, #15
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	fa01 f303 	lsl.w	r3, r1, r3
 8006624:	43db      	mvns	r3, r3
 8006626:	401a      	ands	r2, r3
 8006628:	6a39      	ldr	r1, [r7, #32]
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	fa01 f303 	lsl.w	r3, r1, r3
 8006630:	431a      	orrs	r2, r3
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800663e:	2b00      	cmp	r3, #0
 8006640:	f000 80b1 	beq.w	80067a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006644:	4b4d      	ldr	r3, [pc, #308]	; (800677c <HAL_GPIO_Init+0x2b8>)
 8006646:	699b      	ldr	r3, [r3, #24]
 8006648:	4a4c      	ldr	r2, [pc, #304]	; (800677c <HAL_GPIO_Init+0x2b8>)
 800664a:	f043 0301 	orr.w	r3, r3, #1
 800664e:	6193      	str	r3, [r2, #24]
 8006650:	4b4a      	ldr	r3, [pc, #296]	; (800677c <HAL_GPIO_Init+0x2b8>)
 8006652:	699b      	ldr	r3, [r3, #24]
 8006654:	f003 0301 	and.w	r3, r3, #1
 8006658:	60bb      	str	r3, [r7, #8]
 800665a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800665c:	4a48      	ldr	r2, [pc, #288]	; (8006780 <HAL_GPIO_Init+0x2bc>)
 800665e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006660:	089b      	lsrs	r3, r3, #2
 8006662:	3302      	adds	r3, #2
 8006664:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006668:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800666a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666c:	f003 0303 	and.w	r3, r3, #3
 8006670:	009b      	lsls	r3, r3, #2
 8006672:	220f      	movs	r2, #15
 8006674:	fa02 f303 	lsl.w	r3, r2, r3
 8006678:	43db      	mvns	r3, r3
 800667a:	68fa      	ldr	r2, [r7, #12]
 800667c:	4013      	ands	r3, r2
 800667e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	4a40      	ldr	r2, [pc, #256]	; (8006784 <HAL_GPIO_Init+0x2c0>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d013      	beq.n	80066b0 <HAL_GPIO_Init+0x1ec>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	4a3f      	ldr	r2, [pc, #252]	; (8006788 <HAL_GPIO_Init+0x2c4>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d00d      	beq.n	80066ac <HAL_GPIO_Init+0x1e8>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	4a3e      	ldr	r2, [pc, #248]	; (800678c <HAL_GPIO_Init+0x2c8>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d007      	beq.n	80066a8 <HAL_GPIO_Init+0x1e4>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	4a3d      	ldr	r2, [pc, #244]	; (8006790 <HAL_GPIO_Init+0x2cc>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d101      	bne.n	80066a4 <HAL_GPIO_Init+0x1e0>
 80066a0:	2303      	movs	r3, #3
 80066a2:	e006      	b.n	80066b2 <HAL_GPIO_Init+0x1ee>
 80066a4:	2304      	movs	r3, #4
 80066a6:	e004      	b.n	80066b2 <HAL_GPIO_Init+0x1ee>
 80066a8:	2302      	movs	r3, #2
 80066aa:	e002      	b.n	80066b2 <HAL_GPIO_Init+0x1ee>
 80066ac:	2301      	movs	r3, #1
 80066ae:	e000      	b.n	80066b2 <HAL_GPIO_Init+0x1ee>
 80066b0:	2300      	movs	r3, #0
 80066b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066b4:	f002 0203 	and.w	r2, r2, #3
 80066b8:	0092      	lsls	r2, r2, #2
 80066ba:	4093      	lsls	r3, r2
 80066bc:	68fa      	ldr	r2, [r7, #12]
 80066be:	4313      	orrs	r3, r2
 80066c0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80066c2:	492f      	ldr	r1, [pc, #188]	; (8006780 <HAL_GPIO_Init+0x2bc>)
 80066c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c6:	089b      	lsrs	r3, r3, #2
 80066c8:	3302      	adds	r3, #2
 80066ca:	68fa      	ldr	r2, [r7, #12]
 80066cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d006      	beq.n	80066ea <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80066dc:	4b2d      	ldr	r3, [pc, #180]	; (8006794 <HAL_GPIO_Init+0x2d0>)
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	492c      	ldr	r1, [pc, #176]	; (8006794 <HAL_GPIO_Init+0x2d0>)
 80066e2:	69bb      	ldr	r3, [r7, #24]
 80066e4:	4313      	orrs	r3, r2
 80066e6:	600b      	str	r3, [r1, #0]
 80066e8:	e006      	b.n	80066f8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80066ea:	4b2a      	ldr	r3, [pc, #168]	; (8006794 <HAL_GPIO_Init+0x2d0>)
 80066ec:	681a      	ldr	r2, [r3, #0]
 80066ee:	69bb      	ldr	r3, [r7, #24]
 80066f0:	43db      	mvns	r3, r3
 80066f2:	4928      	ldr	r1, [pc, #160]	; (8006794 <HAL_GPIO_Init+0x2d0>)
 80066f4:	4013      	ands	r3, r2
 80066f6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006700:	2b00      	cmp	r3, #0
 8006702:	d006      	beq.n	8006712 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006704:	4b23      	ldr	r3, [pc, #140]	; (8006794 <HAL_GPIO_Init+0x2d0>)
 8006706:	685a      	ldr	r2, [r3, #4]
 8006708:	4922      	ldr	r1, [pc, #136]	; (8006794 <HAL_GPIO_Init+0x2d0>)
 800670a:	69bb      	ldr	r3, [r7, #24]
 800670c:	4313      	orrs	r3, r2
 800670e:	604b      	str	r3, [r1, #4]
 8006710:	e006      	b.n	8006720 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006712:	4b20      	ldr	r3, [pc, #128]	; (8006794 <HAL_GPIO_Init+0x2d0>)
 8006714:	685a      	ldr	r2, [r3, #4]
 8006716:	69bb      	ldr	r3, [r7, #24]
 8006718:	43db      	mvns	r3, r3
 800671a:	491e      	ldr	r1, [pc, #120]	; (8006794 <HAL_GPIO_Init+0x2d0>)
 800671c:	4013      	ands	r3, r2
 800671e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006728:	2b00      	cmp	r3, #0
 800672a:	d006      	beq.n	800673a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800672c:	4b19      	ldr	r3, [pc, #100]	; (8006794 <HAL_GPIO_Init+0x2d0>)
 800672e:	689a      	ldr	r2, [r3, #8]
 8006730:	4918      	ldr	r1, [pc, #96]	; (8006794 <HAL_GPIO_Init+0x2d0>)
 8006732:	69bb      	ldr	r3, [r7, #24]
 8006734:	4313      	orrs	r3, r2
 8006736:	608b      	str	r3, [r1, #8]
 8006738:	e006      	b.n	8006748 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800673a:	4b16      	ldr	r3, [pc, #88]	; (8006794 <HAL_GPIO_Init+0x2d0>)
 800673c:	689a      	ldr	r2, [r3, #8]
 800673e:	69bb      	ldr	r3, [r7, #24]
 8006740:	43db      	mvns	r3, r3
 8006742:	4914      	ldr	r1, [pc, #80]	; (8006794 <HAL_GPIO_Init+0x2d0>)
 8006744:	4013      	ands	r3, r2
 8006746:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006750:	2b00      	cmp	r3, #0
 8006752:	d021      	beq.n	8006798 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006754:	4b0f      	ldr	r3, [pc, #60]	; (8006794 <HAL_GPIO_Init+0x2d0>)
 8006756:	68da      	ldr	r2, [r3, #12]
 8006758:	490e      	ldr	r1, [pc, #56]	; (8006794 <HAL_GPIO_Init+0x2d0>)
 800675a:	69bb      	ldr	r3, [r7, #24]
 800675c:	4313      	orrs	r3, r2
 800675e:	60cb      	str	r3, [r1, #12]
 8006760:	e021      	b.n	80067a6 <HAL_GPIO_Init+0x2e2>
 8006762:	bf00      	nop
 8006764:	10320000 	.word	0x10320000
 8006768:	10310000 	.word	0x10310000
 800676c:	10220000 	.word	0x10220000
 8006770:	10210000 	.word	0x10210000
 8006774:	10120000 	.word	0x10120000
 8006778:	10110000 	.word	0x10110000
 800677c:	40021000 	.word	0x40021000
 8006780:	40010000 	.word	0x40010000
 8006784:	40010800 	.word	0x40010800
 8006788:	40010c00 	.word	0x40010c00
 800678c:	40011000 	.word	0x40011000
 8006790:	40011400 	.word	0x40011400
 8006794:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006798:	4b0b      	ldr	r3, [pc, #44]	; (80067c8 <HAL_GPIO_Init+0x304>)
 800679a:	68da      	ldr	r2, [r3, #12]
 800679c:	69bb      	ldr	r3, [r7, #24]
 800679e:	43db      	mvns	r3, r3
 80067a0:	4909      	ldr	r1, [pc, #36]	; (80067c8 <HAL_GPIO_Init+0x304>)
 80067a2:	4013      	ands	r3, r2
 80067a4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80067a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a8:	3301      	adds	r3, #1
 80067aa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b2:	fa22 f303 	lsr.w	r3, r2, r3
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	f47f ae8e 	bne.w	80064d8 <HAL_GPIO_Init+0x14>
  }
}
 80067bc:	bf00      	nop
 80067be:	bf00      	nop
 80067c0:	372c      	adds	r7, #44	; 0x2c
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bc80      	pop	{r7}
 80067c6:	4770      	bx	lr
 80067c8:	40010400 	.word	0x40010400

080067cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b083      	sub	sp, #12
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	460b      	mov	r3, r1
 80067d6:	807b      	strh	r3, [r7, #2]
 80067d8:	4613      	mov	r3, r2
 80067da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80067dc:	787b      	ldrb	r3, [r7, #1]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d003      	beq.n	80067ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80067e2:	887a      	ldrh	r2, [r7, #2]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80067e8:	e003      	b.n	80067f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80067ea:	887b      	ldrh	r3, [r7, #2]
 80067ec:	041a      	lsls	r2, r3, #16
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	611a      	str	r2, [r3, #16]
}
 80067f2:	bf00      	nop
 80067f4:	370c      	adds	r7, #12
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bc80      	pop	{r7}
 80067fa:	4770      	bx	lr

080067fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b084      	sub	sp, #16
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d101      	bne.n	800680e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	e12b      	b.n	8006a66 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006814:	b2db      	uxtb	r3, r3
 8006816:	2b00      	cmp	r3, #0
 8006818:	d106      	bne.n	8006828 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2200      	movs	r2, #0
 800681e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f7fe fcd2 	bl	80051cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2224      	movs	r2, #36	; 0x24
 800682c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f022 0201 	bic.w	r2, r2, #1
 800683e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800684e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	681a      	ldr	r2, [r3, #0]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800685e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006860:	f001 fba0 	bl	8007fa4 <HAL_RCC_GetPCLK1Freq>
 8006864:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	4a81      	ldr	r2, [pc, #516]	; (8006a70 <HAL_I2C_Init+0x274>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d807      	bhi.n	8006880 <HAL_I2C_Init+0x84>
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	4a80      	ldr	r2, [pc, #512]	; (8006a74 <HAL_I2C_Init+0x278>)
 8006874:	4293      	cmp	r3, r2
 8006876:	bf94      	ite	ls
 8006878:	2301      	movls	r3, #1
 800687a:	2300      	movhi	r3, #0
 800687c:	b2db      	uxtb	r3, r3
 800687e:	e006      	b.n	800688e <HAL_I2C_Init+0x92>
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	4a7d      	ldr	r2, [pc, #500]	; (8006a78 <HAL_I2C_Init+0x27c>)
 8006884:	4293      	cmp	r3, r2
 8006886:	bf94      	ite	ls
 8006888:	2301      	movls	r3, #1
 800688a:	2300      	movhi	r3, #0
 800688c:	b2db      	uxtb	r3, r3
 800688e:	2b00      	cmp	r3, #0
 8006890:	d001      	beq.n	8006896 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	e0e7      	b.n	8006a66 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	4a78      	ldr	r2, [pc, #480]	; (8006a7c <HAL_I2C_Init+0x280>)
 800689a:	fba2 2303 	umull	r2, r3, r2, r3
 800689e:	0c9b      	lsrs	r3, r3, #18
 80068a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	68ba      	ldr	r2, [r7, #8]
 80068b2:	430a      	orrs	r2, r1
 80068b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	6a1b      	ldr	r3, [r3, #32]
 80068bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	4a6a      	ldr	r2, [pc, #424]	; (8006a70 <HAL_I2C_Init+0x274>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d802      	bhi.n	80068d0 <HAL_I2C_Init+0xd4>
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	3301      	adds	r3, #1
 80068ce:	e009      	b.n	80068e4 <HAL_I2C_Init+0xe8>
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80068d6:	fb02 f303 	mul.w	r3, r2, r3
 80068da:	4a69      	ldr	r2, [pc, #420]	; (8006a80 <HAL_I2C_Init+0x284>)
 80068dc:	fba2 2303 	umull	r2, r3, r2, r3
 80068e0:	099b      	lsrs	r3, r3, #6
 80068e2:	3301      	adds	r3, #1
 80068e4:	687a      	ldr	r2, [r7, #4]
 80068e6:	6812      	ldr	r2, [r2, #0]
 80068e8:	430b      	orrs	r3, r1
 80068ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	69db      	ldr	r3, [r3, #28]
 80068f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80068f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	495c      	ldr	r1, [pc, #368]	; (8006a70 <HAL_I2C_Init+0x274>)
 8006900:	428b      	cmp	r3, r1
 8006902:	d819      	bhi.n	8006938 <HAL_I2C_Init+0x13c>
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	1e59      	subs	r1, r3, #1
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	005b      	lsls	r3, r3, #1
 800690e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006912:	1c59      	adds	r1, r3, #1
 8006914:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006918:	400b      	ands	r3, r1
 800691a:	2b00      	cmp	r3, #0
 800691c:	d00a      	beq.n	8006934 <HAL_I2C_Init+0x138>
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	1e59      	subs	r1, r3, #1
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	005b      	lsls	r3, r3, #1
 8006928:	fbb1 f3f3 	udiv	r3, r1, r3
 800692c:	3301      	adds	r3, #1
 800692e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006932:	e051      	b.n	80069d8 <HAL_I2C_Init+0x1dc>
 8006934:	2304      	movs	r3, #4
 8006936:	e04f      	b.n	80069d8 <HAL_I2C_Init+0x1dc>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d111      	bne.n	8006964 <HAL_I2C_Init+0x168>
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	1e58      	subs	r0, r3, #1
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6859      	ldr	r1, [r3, #4]
 8006948:	460b      	mov	r3, r1
 800694a:	005b      	lsls	r3, r3, #1
 800694c:	440b      	add	r3, r1
 800694e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006952:	3301      	adds	r3, #1
 8006954:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006958:	2b00      	cmp	r3, #0
 800695a:	bf0c      	ite	eq
 800695c:	2301      	moveq	r3, #1
 800695e:	2300      	movne	r3, #0
 8006960:	b2db      	uxtb	r3, r3
 8006962:	e012      	b.n	800698a <HAL_I2C_Init+0x18e>
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	1e58      	subs	r0, r3, #1
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6859      	ldr	r1, [r3, #4]
 800696c:	460b      	mov	r3, r1
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	440b      	add	r3, r1
 8006972:	0099      	lsls	r1, r3, #2
 8006974:	440b      	add	r3, r1
 8006976:	fbb0 f3f3 	udiv	r3, r0, r3
 800697a:	3301      	adds	r3, #1
 800697c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006980:	2b00      	cmp	r3, #0
 8006982:	bf0c      	ite	eq
 8006984:	2301      	moveq	r3, #1
 8006986:	2300      	movne	r3, #0
 8006988:	b2db      	uxtb	r3, r3
 800698a:	2b00      	cmp	r3, #0
 800698c:	d001      	beq.n	8006992 <HAL_I2C_Init+0x196>
 800698e:	2301      	movs	r3, #1
 8006990:	e022      	b.n	80069d8 <HAL_I2C_Init+0x1dc>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d10e      	bne.n	80069b8 <HAL_I2C_Init+0x1bc>
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	1e58      	subs	r0, r3, #1
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6859      	ldr	r1, [r3, #4]
 80069a2:	460b      	mov	r3, r1
 80069a4:	005b      	lsls	r3, r3, #1
 80069a6:	440b      	add	r3, r1
 80069a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80069ac:	3301      	adds	r3, #1
 80069ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069b6:	e00f      	b.n	80069d8 <HAL_I2C_Init+0x1dc>
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	1e58      	subs	r0, r3, #1
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6859      	ldr	r1, [r3, #4]
 80069c0:	460b      	mov	r3, r1
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	440b      	add	r3, r1
 80069c6:	0099      	lsls	r1, r3, #2
 80069c8:	440b      	add	r3, r1
 80069ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80069ce:	3301      	adds	r3, #1
 80069d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80069d8:	6879      	ldr	r1, [r7, #4]
 80069da:	6809      	ldr	r1, [r1, #0]
 80069dc:	4313      	orrs	r3, r2
 80069de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	69da      	ldr	r2, [r3, #28]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6a1b      	ldr	r3, [r3, #32]
 80069f2:	431a      	orrs	r2, r3
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	430a      	orrs	r2, r1
 80069fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006a06:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	6911      	ldr	r1, [r2, #16]
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	68d2      	ldr	r2, [r2, #12]
 8006a12:	4311      	orrs	r1, r2
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	6812      	ldr	r2, [r2, #0]
 8006a18:	430b      	orrs	r3, r1
 8006a1a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	68db      	ldr	r3, [r3, #12]
 8006a22:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	695a      	ldr	r2, [r3, #20]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	699b      	ldr	r3, [r3, #24]
 8006a2e:	431a      	orrs	r2, r3
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	430a      	orrs	r2, r1
 8006a36:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	681a      	ldr	r2, [r3, #0]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f042 0201 	orr.w	r2, r2, #1
 8006a46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2220      	movs	r2, #32
 8006a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006a64:	2300      	movs	r3, #0
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3710      	adds	r7, #16
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}
 8006a6e:	bf00      	nop
 8006a70:	000186a0 	.word	0x000186a0
 8006a74:	001e847f 	.word	0x001e847f
 8006a78:	003d08ff 	.word	0x003d08ff
 8006a7c:	431bde83 	.word	0x431bde83
 8006a80:	10624dd3 	.word	0x10624dd3

08006a84 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b088      	sub	sp, #32
 8006a88:	af02      	add	r7, sp, #8
 8006a8a:	60f8      	str	r0, [r7, #12]
 8006a8c:	4608      	mov	r0, r1
 8006a8e:	4611      	mov	r1, r2
 8006a90:	461a      	mov	r2, r3
 8006a92:	4603      	mov	r3, r0
 8006a94:	817b      	strh	r3, [r7, #10]
 8006a96:	460b      	mov	r3, r1
 8006a98:	813b      	strh	r3, [r7, #8]
 8006a9a:	4613      	mov	r3, r2
 8006a9c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006a9e:	f7fe fe25 	bl	80056ec <HAL_GetTick>
 8006aa2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006aaa:	b2db      	uxtb	r3, r3
 8006aac:	2b20      	cmp	r3, #32
 8006aae:	f040 80d9 	bne.w	8006c64 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	9300      	str	r3, [sp, #0]
 8006ab6:	2319      	movs	r3, #25
 8006ab8:	2201      	movs	r2, #1
 8006aba:	496d      	ldr	r1, [pc, #436]	; (8006c70 <HAL_I2C_Mem_Write+0x1ec>)
 8006abc:	68f8      	ldr	r0, [r7, #12]
 8006abe:	f000 fcc1 	bl	8007444 <I2C_WaitOnFlagUntilTimeout>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d001      	beq.n	8006acc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006ac8:	2302      	movs	r3, #2
 8006aca:	e0cc      	b.n	8006c66 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ad2:	2b01      	cmp	r3, #1
 8006ad4:	d101      	bne.n	8006ada <HAL_I2C_Mem_Write+0x56>
 8006ad6:	2302      	movs	r3, #2
 8006ad8:	e0c5      	b.n	8006c66 <HAL_I2C_Mem_Write+0x1e2>
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2201      	movs	r2, #1
 8006ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f003 0301 	and.w	r3, r3, #1
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d007      	beq.n	8006b00 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	681a      	ldr	r2, [r3, #0]
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f042 0201 	orr.w	r2, r2, #1
 8006afe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	681a      	ldr	r2, [r3, #0]
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b0e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2221      	movs	r2, #33	; 0x21
 8006b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2240      	movs	r2, #64	; 0x40
 8006b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2200      	movs	r2, #0
 8006b24:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	6a3a      	ldr	r2, [r7, #32]
 8006b2a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006b30:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b36:	b29a      	uxth	r2, r3
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	4a4d      	ldr	r2, [pc, #308]	; (8006c74 <HAL_I2C_Mem_Write+0x1f0>)
 8006b40:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006b42:	88f8      	ldrh	r0, [r7, #6]
 8006b44:	893a      	ldrh	r2, [r7, #8]
 8006b46:	8979      	ldrh	r1, [r7, #10]
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	9301      	str	r3, [sp, #4]
 8006b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b4e:	9300      	str	r3, [sp, #0]
 8006b50:	4603      	mov	r3, r0
 8006b52:	68f8      	ldr	r0, [r7, #12]
 8006b54:	f000 faf8 	bl	8007148 <I2C_RequestMemoryWrite>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d052      	beq.n	8006c04 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	e081      	b.n	8006c66 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b62:	697a      	ldr	r2, [r7, #20]
 8006b64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b66:	68f8      	ldr	r0, [r7, #12]
 8006b68:	f000 fd42 	bl	80075f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d00d      	beq.n	8006b8e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b76:	2b04      	cmp	r3, #4
 8006b78:	d107      	bne.n	8006b8a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	681a      	ldr	r2, [r3, #0]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b88:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	e06b      	b.n	8006c66 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b92:	781a      	ldrb	r2, [r3, #0]
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9e:	1c5a      	adds	r2, r3, #1
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ba8:	3b01      	subs	r3, #1
 8006baa:	b29a      	uxth	r2, r3
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	3b01      	subs	r3, #1
 8006bb8:	b29a      	uxth	r2, r3
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	695b      	ldr	r3, [r3, #20]
 8006bc4:	f003 0304 	and.w	r3, r3, #4
 8006bc8:	2b04      	cmp	r3, #4
 8006bca:	d11b      	bne.n	8006c04 <HAL_I2C_Mem_Write+0x180>
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d017      	beq.n	8006c04 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd8:	781a      	ldrb	r2, [r3, #0]
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be4:	1c5a      	adds	r2, r3, #1
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bee:	3b01      	subs	r3, #1
 8006bf0:	b29a      	uxth	r2, r3
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	3b01      	subs	r3, #1
 8006bfe:	b29a      	uxth	r2, r3
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d1aa      	bne.n	8006b62 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c0c:	697a      	ldr	r2, [r7, #20]
 8006c0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c10:	68f8      	ldr	r0, [r7, #12]
 8006c12:	f000 fd2e 	bl	8007672 <I2C_WaitOnBTFFlagUntilTimeout>
 8006c16:	4603      	mov	r3, r0
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d00d      	beq.n	8006c38 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c20:	2b04      	cmp	r3, #4
 8006c22:	d107      	bne.n	8006c34 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c32:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006c34:	2301      	movs	r3, #1
 8006c36:	e016      	b.n	8006c66 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2220      	movs	r2, #32
 8006c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2200      	movs	r2, #0
 8006c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006c60:	2300      	movs	r3, #0
 8006c62:	e000      	b.n	8006c66 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006c64:	2302      	movs	r3, #2
  }
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3718      	adds	r7, #24
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}
 8006c6e:	bf00      	nop
 8006c70:	00100002 	.word	0x00100002
 8006c74:	ffff0000 	.word	0xffff0000

08006c78 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b08c      	sub	sp, #48	; 0x30
 8006c7c:	af02      	add	r7, sp, #8
 8006c7e:	60f8      	str	r0, [r7, #12]
 8006c80:	4608      	mov	r0, r1
 8006c82:	4611      	mov	r1, r2
 8006c84:	461a      	mov	r2, r3
 8006c86:	4603      	mov	r3, r0
 8006c88:	817b      	strh	r3, [r7, #10]
 8006c8a:	460b      	mov	r3, r1
 8006c8c:	813b      	strh	r3, [r7, #8]
 8006c8e:	4613      	mov	r3, r2
 8006c90:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8006c92:	2300      	movs	r3, #0
 8006c94:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006c96:	f7fe fd29 	bl	80056ec <HAL_GetTick>
 8006c9a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	2b20      	cmp	r3, #32
 8006ca6:	f040 8244 	bne.w	8007132 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cac:	9300      	str	r3, [sp, #0]
 8006cae:	2319      	movs	r3, #25
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	4982      	ldr	r1, [pc, #520]	; (8006ebc <HAL_I2C_Mem_Read+0x244>)
 8006cb4:	68f8      	ldr	r0, [r7, #12]
 8006cb6:	f000 fbc5 	bl	8007444 <I2C_WaitOnFlagUntilTimeout>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d001      	beq.n	8006cc4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8006cc0:	2302      	movs	r3, #2
 8006cc2:	e237      	b.n	8007134 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d101      	bne.n	8006cd2 <HAL_I2C_Mem_Read+0x5a>
 8006cce:	2302      	movs	r3, #2
 8006cd0:	e230      	b.n	8007134 <HAL_I2C_Mem_Read+0x4bc>
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f003 0301 	and.w	r3, r3, #1
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d007      	beq.n	8006cf8 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f042 0201 	orr.w	r2, r2, #1
 8006cf6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d06:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2222      	movs	r2, #34	; 0x22
 8006d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2240      	movs	r2, #64	; 0x40
 8006d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d22:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006d28:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d2e:	b29a      	uxth	r2, r3
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	4a62      	ldr	r2, [pc, #392]	; (8006ec0 <HAL_I2C_Mem_Read+0x248>)
 8006d38:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006d3a:	88f8      	ldrh	r0, [r7, #6]
 8006d3c:	893a      	ldrh	r2, [r7, #8]
 8006d3e:	8979      	ldrh	r1, [r7, #10]
 8006d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d42:	9301      	str	r3, [sp, #4]
 8006d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d46:	9300      	str	r3, [sp, #0]
 8006d48:	4603      	mov	r3, r0
 8006d4a:	68f8      	ldr	r0, [r7, #12]
 8006d4c:	f000 fa92 	bl	8007274 <I2C_RequestMemoryRead>
 8006d50:	4603      	mov	r3, r0
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d001      	beq.n	8006d5a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8006d56:	2301      	movs	r3, #1
 8006d58:	e1ec      	b.n	8007134 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d113      	bne.n	8006d8a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d62:	2300      	movs	r3, #0
 8006d64:	61fb      	str	r3, [r7, #28]
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	695b      	ldr	r3, [r3, #20]
 8006d6c:	61fb      	str	r3, [r7, #28]
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	699b      	ldr	r3, [r3, #24]
 8006d74:	61fb      	str	r3, [r7, #28]
 8006d76:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	681a      	ldr	r2, [r3, #0]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d86:	601a      	str	r2, [r3, #0]
 8006d88:	e1c0      	b.n	800710c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d11e      	bne.n	8006dd0 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	681a      	ldr	r2, [r3, #0]
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006da0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006da2:	b672      	cpsid	i
}
 8006da4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006da6:	2300      	movs	r3, #0
 8006da8:	61bb      	str	r3, [r7, #24]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	695b      	ldr	r3, [r3, #20]
 8006db0:	61bb      	str	r3, [r7, #24]
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	699b      	ldr	r3, [r3, #24]
 8006db8:	61bb      	str	r3, [r7, #24]
 8006dba:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	681a      	ldr	r2, [r3, #0]
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006dca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006dcc:	b662      	cpsie	i
}
 8006dce:	e035      	b.n	8006e3c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dd4:	2b02      	cmp	r3, #2
 8006dd6:	d11e      	bne.n	8006e16 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	681a      	ldr	r2, [r3, #0]
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006de6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006de8:	b672      	cpsid	i
}
 8006dea:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006dec:	2300      	movs	r3, #0
 8006dee:	617b      	str	r3, [r7, #20]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	695b      	ldr	r3, [r3, #20]
 8006df6:	617b      	str	r3, [r7, #20]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	699b      	ldr	r3, [r3, #24]
 8006dfe:	617b      	str	r3, [r7, #20]
 8006e00:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	681a      	ldr	r2, [r3, #0]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e10:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006e12:	b662      	cpsie	i
}
 8006e14:	e012      	b.n	8006e3c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006e24:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e26:	2300      	movs	r3, #0
 8006e28:	613b      	str	r3, [r7, #16]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	695b      	ldr	r3, [r3, #20]
 8006e30:	613b      	str	r3, [r7, #16]
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	699b      	ldr	r3, [r3, #24]
 8006e38:	613b      	str	r3, [r7, #16]
 8006e3a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8006e3c:	e166      	b.n	800710c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e42:	2b03      	cmp	r3, #3
 8006e44:	f200 811f 	bhi.w	8007086 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d123      	bne.n	8006e98 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e52:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006e54:	68f8      	ldr	r0, [r7, #12]
 8006e56:	f000 fc4d 	bl	80076f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d001      	beq.n	8006e64 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8006e60:	2301      	movs	r3, #1
 8006e62:	e167      	b.n	8007134 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	691a      	ldr	r2, [r3, #16]
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e6e:	b2d2      	uxtb	r2, r2
 8006e70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e76:	1c5a      	adds	r2, r3, #1
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e80:	3b01      	subs	r3, #1
 8006e82:	b29a      	uxth	r2, r3
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	3b01      	subs	r3, #1
 8006e90:	b29a      	uxth	r2, r3
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006e96:	e139      	b.n	800710c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e9c:	2b02      	cmp	r3, #2
 8006e9e:	d152      	bne.n	8006f46 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea2:	9300      	str	r3, [sp, #0]
 8006ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	4906      	ldr	r1, [pc, #24]	; (8006ec4 <HAL_I2C_Mem_Read+0x24c>)
 8006eaa:	68f8      	ldr	r0, [r7, #12]
 8006eac:	f000 faca 	bl	8007444 <I2C_WaitOnFlagUntilTimeout>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d008      	beq.n	8006ec8 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	e13c      	b.n	8007134 <HAL_I2C_Mem_Read+0x4bc>
 8006eba:	bf00      	nop
 8006ebc:	00100002 	.word	0x00100002
 8006ec0:	ffff0000 	.word	0xffff0000
 8006ec4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8006ec8:	b672      	cpsid	i
}
 8006eca:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	681a      	ldr	r2, [r3, #0]
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006eda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	691a      	ldr	r2, [r3, #16]
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee6:	b2d2      	uxtb	r2, r2
 8006ee8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eee:	1c5a      	adds	r2, r3, #1
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ef8:	3b01      	subs	r3, #1
 8006efa:	b29a      	uxth	r2, r3
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f04:	b29b      	uxth	r3, r3
 8006f06:	3b01      	subs	r3, #1
 8006f08:	b29a      	uxth	r2, r3
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8006f0e:	b662      	cpsie	i
}
 8006f10:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	691a      	ldr	r2, [r3, #16]
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f1c:	b2d2      	uxtb	r2, r2
 8006f1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f24:	1c5a      	adds	r2, r3, #1
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f2e:	3b01      	subs	r3, #1
 8006f30:	b29a      	uxth	r2, r3
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	3b01      	subs	r3, #1
 8006f3e:	b29a      	uxth	r2, r3
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006f44:	e0e2      	b.n	800710c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f48:	9300      	str	r3, [sp, #0]
 8006f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	497b      	ldr	r1, [pc, #492]	; (800713c <HAL_I2C_Mem_Read+0x4c4>)
 8006f50:	68f8      	ldr	r0, [r7, #12]
 8006f52:	f000 fa77 	bl	8007444 <I2C_WaitOnFlagUntilTimeout>
 8006f56:	4603      	mov	r3, r0
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d001      	beq.n	8006f60 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	e0e9      	b.n	8007134 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f6e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006f70:	b672      	cpsid	i
}
 8006f72:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	691a      	ldr	r2, [r3, #16]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f7e:	b2d2      	uxtb	r2, r2
 8006f80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f86:	1c5a      	adds	r2, r3, #1
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f90:	3b01      	subs	r3, #1
 8006f92:	b29a      	uxth	r2, r3
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	3b01      	subs	r3, #1
 8006fa0:	b29a      	uxth	r2, r3
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006fa6:	4b66      	ldr	r3, [pc, #408]	; (8007140 <HAL_I2C_Mem_Read+0x4c8>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	08db      	lsrs	r3, r3, #3
 8006fac:	4a65      	ldr	r2, [pc, #404]	; (8007144 <HAL_I2C_Mem_Read+0x4cc>)
 8006fae:	fba2 2303 	umull	r2, r3, r2, r3
 8006fb2:	0a1a      	lsrs	r2, r3, #8
 8006fb4:	4613      	mov	r3, r2
 8006fb6:	009b      	lsls	r3, r3, #2
 8006fb8:	4413      	add	r3, r2
 8006fba:	00da      	lsls	r2, r3, #3
 8006fbc:	1ad3      	subs	r3, r2, r3
 8006fbe:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8006fc0:	6a3b      	ldr	r3, [r7, #32]
 8006fc2:	3b01      	subs	r3, #1
 8006fc4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8006fc6:	6a3b      	ldr	r3, [r7, #32]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d118      	bne.n	8006ffe <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2220      	movs	r2, #32
 8006fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fe6:	f043 0220 	orr.w	r2, r3, #32
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8006fee:	b662      	cpsie	i
}
 8006ff0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	e09a      	b.n	8007134 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	695b      	ldr	r3, [r3, #20]
 8007004:	f003 0304 	and.w	r3, r3, #4
 8007008:	2b04      	cmp	r3, #4
 800700a:	d1d9      	bne.n	8006fc0 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	681a      	ldr	r2, [r3, #0]
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800701a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	691a      	ldr	r2, [r3, #16]
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007026:	b2d2      	uxtb	r2, r2
 8007028:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800702e:	1c5a      	adds	r2, r3, #1
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007038:	3b01      	subs	r3, #1
 800703a:	b29a      	uxth	r2, r3
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007044:	b29b      	uxth	r3, r3
 8007046:	3b01      	subs	r3, #1
 8007048:	b29a      	uxth	r2, r3
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800704e:	b662      	cpsie	i
}
 8007050:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	691a      	ldr	r2, [r3, #16]
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800705c:	b2d2      	uxtb	r2, r2
 800705e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007064:	1c5a      	adds	r2, r3, #1
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800706e:	3b01      	subs	r3, #1
 8007070:	b29a      	uxth	r2, r3
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800707a:	b29b      	uxth	r3, r3
 800707c:	3b01      	subs	r3, #1
 800707e:	b29a      	uxth	r2, r3
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007084:	e042      	b.n	800710c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007086:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007088:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800708a:	68f8      	ldr	r0, [r7, #12]
 800708c:	f000 fb32 	bl	80076f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007090:	4603      	mov	r3, r0
 8007092:	2b00      	cmp	r3, #0
 8007094:	d001      	beq.n	800709a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8007096:	2301      	movs	r3, #1
 8007098:	e04c      	b.n	8007134 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	691a      	ldr	r2, [r3, #16]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a4:	b2d2      	uxtb	r2, r2
 80070a6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ac:	1c5a      	adds	r2, r3, #1
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070b6:	3b01      	subs	r3, #1
 80070b8:	b29a      	uxth	r2, r3
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	3b01      	subs	r3, #1
 80070c6:	b29a      	uxth	r2, r3
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	695b      	ldr	r3, [r3, #20]
 80070d2:	f003 0304 	and.w	r3, r3, #4
 80070d6:	2b04      	cmp	r3, #4
 80070d8:	d118      	bne.n	800710c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	691a      	ldr	r2, [r3, #16]
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e4:	b2d2      	uxtb	r2, r2
 80070e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ec:	1c5a      	adds	r2, r3, #1
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070f6:	3b01      	subs	r3, #1
 80070f8:	b29a      	uxth	r2, r3
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007102:	b29b      	uxth	r3, r3
 8007104:	3b01      	subs	r3, #1
 8007106:	b29a      	uxth	r2, r3
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007110:	2b00      	cmp	r3, #0
 8007112:	f47f ae94 	bne.w	8006e3e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2220      	movs	r2, #32
 800711a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2200      	movs	r2, #0
 8007122:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2200      	movs	r2, #0
 800712a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800712e:	2300      	movs	r3, #0
 8007130:	e000      	b.n	8007134 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8007132:	2302      	movs	r3, #2
  }
}
 8007134:	4618      	mov	r0, r3
 8007136:	3728      	adds	r7, #40	; 0x28
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}
 800713c:	00010004 	.word	0x00010004
 8007140:	20000018 	.word	0x20000018
 8007144:	14f8b589 	.word	0x14f8b589

08007148 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b088      	sub	sp, #32
 800714c:	af02      	add	r7, sp, #8
 800714e:	60f8      	str	r0, [r7, #12]
 8007150:	4608      	mov	r0, r1
 8007152:	4611      	mov	r1, r2
 8007154:	461a      	mov	r2, r3
 8007156:	4603      	mov	r3, r0
 8007158:	817b      	strh	r3, [r7, #10]
 800715a:	460b      	mov	r3, r1
 800715c:	813b      	strh	r3, [r7, #8]
 800715e:	4613      	mov	r3, r2
 8007160:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007170:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007174:	9300      	str	r3, [sp, #0]
 8007176:	6a3b      	ldr	r3, [r7, #32]
 8007178:	2200      	movs	r2, #0
 800717a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800717e:	68f8      	ldr	r0, [r7, #12]
 8007180:	f000 f960 	bl	8007444 <I2C_WaitOnFlagUntilTimeout>
 8007184:	4603      	mov	r3, r0
 8007186:	2b00      	cmp	r3, #0
 8007188:	d00d      	beq.n	80071a6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007194:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007198:	d103      	bne.n	80071a2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80071a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80071a2:	2303      	movs	r3, #3
 80071a4:	e05f      	b.n	8007266 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80071a6:	897b      	ldrh	r3, [r7, #10]
 80071a8:	b2db      	uxtb	r3, r3
 80071aa:	461a      	mov	r2, r3
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80071b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80071b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b8:	6a3a      	ldr	r2, [r7, #32]
 80071ba:	492d      	ldr	r1, [pc, #180]	; (8007270 <I2C_RequestMemoryWrite+0x128>)
 80071bc:	68f8      	ldr	r0, [r7, #12]
 80071be:	f000 f998 	bl	80074f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80071c2:	4603      	mov	r3, r0
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d001      	beq.n	80071cc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80071c8:	2301      	movs	r3, #1
 80071ca:	e04c      	b.n	8007266 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071cc:	2300      	movs	r3, #0
 80071ce:	617b      	str	r3, [r7, #20]
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	695b      	ldr	r3, [r3, #20]
 80071d6:	617b      	str	r3, [r7, #20]
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	699b      	ldr	r3, [r3, #24]
 80071de:	617b      	str	r3, [r7, #20]
 80071e0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80071e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071e4:	6a39      	ldr	r1, [r7, #32]
 80071e6:	68f8      	ldr	r0, [r7, #12]
 80071e8:	f000 fa02 	bl	80075f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80071ec:	4603      	mov	r3, r0
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d00d      	beq.n	800720e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f6:	2b04      	cmp	r3, #4
 80071f8:	d107      	bne.n	800720a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	681a      	ldr	r2, [r3, #0]
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007208:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800720a:	2301      	movs	r3, #1
 800720c:	e02b      	b.n	8007266 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800720e:	88fb      	ldrh	r3, [r7, #6]
 8007210:	2b01      	cmp	r3, #1
 8007212:	d105      	bne.n	8007220 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007214:	893b      	ldrh	r3, [r7, #8]
 8007216:	b2da      	uxtb	r2, r3
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	611a      	str	r2, [r3, #16]
 800721e:	e021      	b.n	8007264 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007220:	893b      	ldrh	r3, [r7, #8]
 8007222:	0a1b      	lsrs	r3, r3, #8
 8007224:	b29b      	uxth	r3, r3
 8007226:	b2da      	uxtb	r2, r3
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800722e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007230:	6a39      	ldr	r1, [r7, #32]
 8007232:	68f8      	ldr	r0, [r7, #12]
 8007234:	f000 f9dc 	bl	80075f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007238:	4603      	mov	r3, r0
 800723a:	2b00      	cmp	r3, #0
 800723c:	d00d      	beq.n	800725a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007242:	2b04      	cmp	r3, #4
 8007244:	d107      	bne.n	8007256 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	681a      	ldr	r2, [r3, #0]
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007254:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007256:	2301      	movs	r3, #1
 8007258:	e005      	b.n	8007266 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800725a:	893b      	ldrh	r3, [r7, #8]
 800725c:	b2da      	uxtb	r2, r3
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007264:	2300      	movs	r3, #0
}
 8007266:	4618      	mov	r0, r3
 8007268:	3718      	adds	r7, #24
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}
 800726e:	bf00      	nop
 8007270:	00010002 	.word	0x00010002

08007274 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b088      	sub	sp, #32
 8007278:	af02      	add	r7, sp, #8
 800727a:	60f8      	str	r0, [r7, #12]
 800727c:	4608      	mov	r0, r1
 800727e:	4611      	mov	r1, r2
 8007280:	461a      	mov	r2, r3
 8007282:	4603      	mov	r3, r0
 8007284:	817b      	strh	r3, [r7, #10]
 8007286:	460b      	mov	r3, r1
 8007288:	813b      	strh	r3, [r7, #8]
 800728a:	4613      	mov	r3, r2
 800728c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	681a      	ldr	r2, [r3, #0]
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800729c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	681a      	ldr	r2, [r3, #0]
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80072ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80072ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b0:	9300      	str	r3, [sp, #0]
 80072b2:	6a3b      	ldr	r3, [r7, #32]
 80072b4:	2200      	movs	r2, #0
 80072b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80072ba:	68f8      	ldr	r0, [r7, #12]
 80072bc:	f000 f8c2 	bl	8007444 <I2C_WaitOnFlagUntilTimeout>
 80072c0:	4603      	mov	r3, r0
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d00d      	beq.n	80072e2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072d4:	d103      	bne.n	80072de <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80072dc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80072de:	2303      	movs	r3, #3
 80072e0:	e0aa      	b.n	8007438 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80072e2:	897b      	ldrh	r3, [r7, #10]
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	461a      	mov	r2, r3
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80072f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80072f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f4:	6a3a      	ldr	r2, [r7, #32]
 80072f6:	4952      	ldr	r1, [pc, #328]	; (8007440 <I2C_RequestMemoryRead+0x1cc>)
 80072f8:	68f8      	ldr	r0, [r7, #12]
 80072fa:	f000 f8fa 	bl	80074f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80072fe:	4603      	mov	r3, r0
 8007300:	2b00      	cmp	r3, #0
 8007302:	d001      	beq.n	8007308 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007304:	2301      	movs	r3, #1
 8007306:	e097      	b.n	8007438 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007308:	2300      	movs	r3, #0
 800730a:	617b      	str	r3, [r7, #20]
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	695b      	ldr	r3, [r3, #20]
 8007312:	617b      	str	r3, [r7, #20]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	699b      	ldr	r3, [r3, #24]
 800731a:	617b      	str	r3, [r7, #20]
 800731c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800731e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007320:	6a39      	ldr	r1, [r7, #32]
 8007322:	68f8      	ldr	r0, [r7, #12]
 8007324:	f000 f964 	bl	80075f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007328:	4603      	mov	r3, r0
 800732a:	2b00      	cmp	r3, #0
 800732c:	d00d      	beq.n	800734a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007332:	2b04      	cmp	r3, #4
 8007334:	d107      	bne.n	8007346 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007344:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007346:	2301      	movs	r3, #1
 8007348:	e076      	b.n	8007438 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800734a:	88fb      	ldrh	r3, [r7, #6]
 800734c:	2b01      	cmp	r3, #1
 800734e:	d105      	bne.n	800735c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007350:	893b      	ldrh	r3, [r7, #8]
 8007352:	b2da      	uxtb	r2, r3
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	611a      	str	r2, [r3, #16]
 800735a:	e021      	b.n	80073a0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800735c:	893b      	ldrh	r3, [r7, #8]
 800735e:	0a1b      	lsrs	r3, r3, #8
 8007360:	b29b      	uxth	r3, r3
 8007362:	b2da      	uxtb	r2, r3
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800736a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800736c:	6a39      	ldr	r1, [r7, #32]
 800736e:	68f8      	ldr	r0, [r7, #12]
 8007370:	f000 f93e 	bl	80075f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007374:	4603      	mov	r3, r0
 8007376:	2b00      	cmp	r3, #0
 8007378:	d00d      	beq.n	8007396 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800737e:	2b04      	cmp	r3, #4
 8007380:	d107      	bne.n	8007392 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	681a      	ldr	r2, [r3, #0]
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007390:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007392:	2301      	movs	r3, #1
 8007394:	e050      	b.n	8007438 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007396:	893b      	ldrh	r3, [r7, #8]
 8007398:	b2da      	uxtb	r2, r3
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80073a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073a2:	6a39      	ldr	r1, [r7, #32]
 80073a4:	68f8      	ldr	r0, [r7, #12]
 80073a6:	f000 f923 	bl	80075f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80073aa:	4603      	mov	r3, r0
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d00d      	beq.n	80073cc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b4:	2b04      	cmp	r3, #4
 80073b6:	d107      	bne.n	80073c8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	681a      	ldr	r2, [r3, #0]
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073c6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80073c8:	2301      	movs	r3, #1
 80073ca:	e035      	b.n	8007438 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	681a      	ldr	r2, [r3, #0]
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80073da:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80073dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073de:	9300      	str	r3, [sp, #0]
 80073e0:	6a3b      	ldr	r3, [r7, #32]
 80073e2:	2200      	movs	r2, #0
 80073e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80073e8:	68f8      	ldr	r0, [r7, #12]
 80073ea:	f000 f82b 	bl	8007444 <I2C_WaitOnFlagUntilTimeout>
 80073ee:	4603      	mov	r3, r0
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d00d      	beq.n	8007410 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007402:	d103      	bne.n	800740c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	f44f 7200 	mov.w	r2, #512	; 0x200
 800740a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800740c:	2303      	movs	r3, #3
 800740e:	e013      	b.n	8007438 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007410:	897b      	ldrh	r3, [r7, #10]
 8007412:	b2db      	uxtb	r3, r3
 8007414:	f043 0301 	orr.w	r3, r3, #1
 8007418:	b2da      	uxtb	r2, r3
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007422:	6a3a      	ldr	r2, [r7, #32]
 8007424:	4906      	ldr	r1, [pc, #24]	; (8007440 <I2C_RequestMemoryRead+0x1cc>)
 8007426:	68f8      	ldr	r0, [r7, #12]
 8007428:	f000 f863 	bl	80074f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800742c:	4603      	mov	r3, r0
 800742e:	2b00      	cmp	r3, #0
 8007430:	d001      	beq.n	8007436 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007432:	2301      	movs	r3, #1
 8007434:	e000      	b.n	8007438 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007436:	2300      	movs	r3, #0
}
 8007438:	4618      	mov	r0, r3
 800743a:	3718      	adds	r7, #24
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}
 8007440:	00010002 	.word	0x00010002

08007444 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b084      	sub	sp, #16
 8007448:	af00      	add	r7, sp, #0
 800744a:	60f8      	str	r0, [r7, #12]
 800744c:	60b9      	str	r1, [r7, #8]
 800744e:	603b      	str	r3, [r7, #0]
 8007450:	4613      	mov	r3, r2
 8007452:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007454:	e025      	b.n	80074a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800745c:	d021      	beq.n	80074a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800745e:	f7fe f945 	bl	80056ec <HAL_GetTick>
 8007462:	4602      	mov	r2, r0
 8007464:	69bb      	ldr	r3, [r7, #24]
 8007466:	1ad3      	subs	r3, r2, r3
 8007468:	683a      	ldr	r2, [r7, #0]
 800746a:	429a      	cmp	r2, r3
 800746c:	d302      	bcc.n	8007474 <I2C_WaitOnFlagUntilTimeout+0x30>
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d116      	bne.n	80074a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2200      	movs	r2, #0
 8007478:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2220      	movs	r2, #32
 800747e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2200      	movs	r2, #0
 8007486:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800748e:	f043 0220 	orr.w	r2, r3, #32
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2200      	movs	r2, #0
 800749a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800749e:	2301      	movs	r3, #1
 80074a0:	e023      	b.n	80074ea <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	0c1b      	lsrs	r3, r3, #16
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d10d      	bne.n	80074c8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	695b      	ldr	r3, [r3, #20]
 80074b2:	43da      	mvns	r2, r3
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	4013      	ands	r3, r2
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	bf0c      	ite	eq
 80074be:	2301      	moveq	r3, #1
 80074c0:	2300      	movne	r3, #0
 80074c2:	b2db      	uxtb	r3, r3
 80074c4:	461a      	mov	r2, r3
 80074c6:	e00c      	b.n	80074e2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	699b      	ldr	r3, [r3, #24]
 80074ce:	43da      	mvns	r2, r3
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	4013      	ands	r3, r2
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	bf0c      	ite	eq
 80074da:	2301      	moveq	r3, #1
 80074dc:	2300      	movne	r3, #0
 80074de:	b2db      	uxtb	r3, r3
 80074e0:	461a      	mov	r2, r3
 80074e2:	79fb      	ldrb	r3, [r7, #7]
 80074e4:	429a      	cmp	r2, r3
 80074e6:	d0b6      	beq.n	8007456 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80074e8:	2300      	movs	r3, #0
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3710      	adds	r7, #16
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}

080074f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80074f2:	b580      	push	{r7, lr}
 80074f4:	b084      	sub	sp, #16
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	60f8      	str	r0, [r7, #12]
 80074fa:	60b9      	str	r1, [r7, #8]
 80074fc:	607a      	str	r2, [r7, #4]
 80074fe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007500:	e051      	b.n	80075a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	695b      	ldr	r3, [r3, #20]
 8007508:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800750c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007510:	d123      	bne.n	800755a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	681a      	ldr	r2, [r3, #0]
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007520:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800752a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2200      	movs	r2, #0
 8007530:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2220      	movs	r2, #32
 8007536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2200      	movs	r2, #0
 800753e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007546:	f043 0204 	orr.w	r2, r3, #4
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2200      	movs	r2, #0
 8007552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007556:	2301      	movs	r3, #1
 8007558:	e046      	b.n	80075e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007560:	d021      	beq.n	80075a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007562:	f7fe f8c3 	bl	80056ec <HAL_GetTick>
 8007566:	4602      	mov	r2, r0
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	1ad3      	subs	r3, r2, r3
 800756c:	687a      	ldr	r2, [r7, #4]
 800756e:	429a      	cmp	r2, r3
 8007570:	d302      	bcc.n	8007578 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d116      	bne.n	80075a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	2200      	movs	r2, #0
 800757c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2220      	movs	r2, #32
 8007582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2200      	movs	r2, #0
 800758a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007592:	f043 0220 	orr.w	r2, r3, #32
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2200      	movs	r2, #0
 800759e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80075a2:	2301      	movs	r3, #1
 80075a4:	e020      	b.n	80075e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	0c1b      	lsrs	r3, r3, #16
 80075aa:	b2db      	uxtb	r3, r3
 80075ac:	2b01      	cmp	r3, #1
 80075ae:	d10c      	bne.n	80075ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	695b      	ldr	r3, [r3, #20]
 80075b6:	43da      	mvns	r2, r3
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	4013      	ands	r3, r2
 80075bc:	b29b      	uxth	r3, r3
 80075be:	2b00      	cmp	r3, #0
 80075c0:	bf14      	ite	ne
 80075c2:	2301      	movne	r3, #1
 80075c4:	2300      	moveq	r3, #0
 80075c6:	b2db      	uxtb	r3, r3
 80075c8:	e00b      	b.n	80075e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	699b      	ldr	r3, [r3, #24]
 80075d0:	43da      	mvns	r2, r3
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	4013      	ands	r3, r2
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	2b00      	cmp	r3, #0
 80075da:	bf14      	ite	ne
 80075dc:	2301      	movne	r3, #1
 80075de:	2300      	moveq	r3, #0
 80075e0:	b2db      	uxtb	r3, r3
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d18d      	bne.n	8007502 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80075e6:	2300      	movs	r3, #0
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3710      	adds	r7, #16
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}

080075f0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b084      	sub	sp, #16
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	60f8      	str	r0, [r7, #12]
 80075f8:	60b9      	str	r1, [r7, #8]
 80075fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80075fc:	e02d      	b.n	800765a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80075fe:	68f8      	ldr	r0, [r7, #12]
 8007600:	f000 f8ce 	bl	80077a0 <I2C_IsAcknowledgeFailed>
 8007604:	4603      	mov	r3, r0
 8007606:	2b00      	cmp	r3, #0
 8007608:	d001      	beq.n	800760e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800760a:	2301      	movs	r3, #1
 800760c:	e02d      	b.n	800766a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007614:	d021      	beq.n	800765a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007616:	f7fe f869 	bl	80056ec <HAL_GetTick>
 800761a:	4602      	mov	r2, r0
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	1ad3      	subs	r3, r2, r3
 8007620:	68ba      	ldr	r2, [r7, #8]
 8007622:	429a      	cmp	r2, r3
 8007624:	d302      	bcc.n	800762c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d116      	bne.n	800765a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2200      	movs	r2, #0
 8007630:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2220      	movs	r2, #32
 8007636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2200      	movs	r2, #0
 800763e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007646:	f043 0220 	orr.w	r2, r3, #32
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2200      	movs	r2, #0
 8007652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007656:	2301      	movs	r3, #1
 8007658:	e007      	b.n	800766a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	695b      	ldr	r3, [r3, #20]
 8007660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007664:	2b80      	cmp	r3, #128	; 0x80
 8007666:	d1ca      	bne.n	80075fe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007668:	2300      	movs	r3, #0
}
 800766a:	4618      	mov	r0, r3
 800766c:	3710      	adds	r7, #16
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}

08007672 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007672:	b580      	push	{r7, lr}
 8007674:	b084      	sub	sp, #16
 8007676:	af00      	add	r7, sp, #0
 8007678:	60f8      	str	r0, [r7, #12]
 800767a:	60b9      	str	r1, [r7, #8]
 800767c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800767e:	e02d      	b.n	80076dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007680:	68f8      	ldr	r0, [r7, #12]
 8007682:	f000 f88d 	bl	80077a0 <I2C_IsAcknowledgeFailed>
 8007686:	4603      	mov	r3, r0
 8007688:	2b00      	cmp	r3, #0
 800768a:	d001      	beq.n	8007690 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800768c:	2301      	movs	r3, #1
 800768e:	e02d      	b.n	80076ec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007696:	d021      	beq.n	80076dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007698:	f7fe f828 	bl	80056ec <HAL_GetTick>
 800769c:	4602      	mov	r2, r0
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	1ad3      	subs	r3, r2, r3
 80076a2:	68ba      	ldr	r2, [r7, #8]
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d302      	bcc.n	80076ae <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d116      	bne.n	80076dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2200      	movs	r2, #0
 80076b2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	2220      	movs	r2, #32
 80076b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2200      	movs	r2, #0
 80076c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076c8:	f043 0220 	orr.w	r2, r3, #32
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	2200      	movs	r2, #0
 80076d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	e007      	b.n	80076ec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	695b      	ldr	r3, [r3, #20]
 80076e2:	f003 0304 	and.w	r3, r3, #4
 80076e6:	2b04      	cmp	r3, #4
 80076e8:	d1ca      	bne.n	8007680 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80076ea:	2300      	movs	r3, #0
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	3710      	adds	r7, #16
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}

080076f4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b084      	sub	sp, #16
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	60f8      	str	r0, [r7, #12]
 80076fc:	60b9      	str	r1, [r7, #8]
 80076fe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007700:	e042      	b.n	8007788 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	695b      	ldr	r3, [r3, #20]
 8007708:	f003 0310 	and.w	r3, r3, #16
 800770c:	2b10      	cmp	r3, #16
 800770e:	d119      	bne.n	8007744 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f06f 0210 	mvn.w	r2, #16
 8007718:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2200      	movs	r2, #0
 800771e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	2220      	movs	r2, #32
 8007724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	2200      	movs	r2, #0
 800772c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2200      	movs	r2, #0
 800773c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007740:	2301      	movs	r3, #1
 8007742:	e029      	b.n	8007798 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007744:	f7fd ffd2 	bl	80056ec <HAL_GetTick>
 8007748:	4602      	mov	r2, r0
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	1ad3      	subs	r3, r2, r3
 800774e:	68ba      	ldr	r2, [r7, #8]
 8007750:	429a      	cmp	r2, r3
 8007752:	d302      	bcc.n	800775a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d116      	bne.n	8007788 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	2200      	movs	r2, #0
 800775e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2220      	movs	r2, #32
 8007764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2200      	movs	r2, #0
 800776c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007774:	f043 0220 	orr.w	r2, r3, #32
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	2200      	movs	r2, #0
 8007780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007784:	2301      	movs	r3, #1
 8007786:	e007      	b.n	8007798 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	695b      	ldr	r3, [r3, #20]
 800778e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007792:	2b40      	cmp	r3, #64	; 0x40
 8007794:	d1b5      	bne.n	8007702 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007796:	2300      	movs	r3, #0
}
 8007798:	4618      	mov	r0, r3
 800779a:	3710      	adds	r7, #16
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}

080077a0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b083      	sub	sp, #12
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	695b      	ldr	r3, [r3, #20]
 80077ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077b6:	d11b      	bne.n	80077f0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80077c0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2200      	movs	r2, #0
 80077c6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2220      	movs	r2, #32
 80077cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2200      	movs	r2, #0
 80077d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077dc:	f043 0204 	orr.w	r2, r3, #4
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2200      	movs	r2, #0
 80077e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80077ec:	2301      	movs	r3, #1
 80077ee:	e000      	b.n	80077f2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80077f0:	2300      	movs	r3, #0
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	370c      	adds	r7, #12
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bc80      	pop	{r7}
 80077fa:	4770      	bx	lr

080077fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b086      	sub	sp, #24
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d101      	bne.n	800780e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800780a:	2301      	movs	r3, #1
 800780c:	e272      	b.n	8007cf4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f003 0301 	and.w	r3, r3, #1
 8007816:	2b00      	cmp	r3, #0
 8007818:	f000 8087 	beq.w	800792a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800781c:	4b92      	ldr	r3, [pc, #584]	; (8007a68 <HAL_RCC_OscConfig+0x26c>)
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	f003 030c 	and.w	r3, r3, #12
 8007824:	2b04      	cmp	r3, #4
 8007826:	d00c      	beq.n	8007842 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007828:	4b8f      	ldr	r3, [pc, #572]	; (8007a68 <HAL_RCC_OscConfig+0x26c>)
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	f003 030c 	and.w	r3, r3, #12
 8007830:	2b08      	cmp	r3, #8
 8007832:	d112      	bne.n	800785a <HAL_RCC_OscConfig+0x5e>
 8007834:	4b8c      	ldr	r3, [pc, #560]	; (8007a68 <HAL_RCC_OscConfig+0x26c>)
 8007836:	685b      	ldr	r3, [r3, #4]
 8007838:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800783c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007840:	d10b      	bne.n	800785a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007842:	4b89      	ldr	r3, [pc, #548]	; (8007a68 <HAL_RCC_OscConfig+0x26c>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800784a:	2b00      	cmp	r3, #0
 800784c:	d06c      	beq.n	8007928 <HAL_RCC_OscConfig+0x12c>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d168      	bne.n	8007928 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007856:	2301      	movs	r3, #1
 8007858:	e24c      	b.n	8007cf4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007862:	d106      	bne.n	8007872 <HAL_RCC_OscConfig+0x76>
 8007864:	4b80      	ldr	r3, [pc, #512]	; (8007a68 <HAL_RCC_OscConfig+0x26c>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a7f      	ldr	r2, [pc, #508]	; (8007a68 <HAL_RCC_OscConfig+0x26c>)
 800786a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800786e:	6013      	str	r3, [r2, #0]
 8007870:	e02e      	b.n	80078d0 <HAL_RCC_OscConfig+0xd4>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d10c      	bne.n	8007894 <HAL_RCC_OscConfig+0x98>
 800787a:	4b7b      	ldr	r3, [pc, #492]	; (8007a68 <HAL_RCC_OscConfig+0x26c>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4a7a      	ldr	r2, [pc, #488]	; (8007a68 <HAL_RCC_OscConfig+0x26c>)
 8007880:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007884:	6013      	str	r3, [r2, #0]
 8007886:	4b78      	ldr	r3, [pc, #480]	; (8007a68 <HAL_RCC_OscConfig+0x26c>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a77      	ldr	r2, [pc, #476]	; (8007a68 <HAL_RCC_OscConfig+0x26c>)
 800788c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007890:	6013      	str	r3, [r2, #0]
 8007892:	e01d      	b.n	80078d0 <HAL_RCC_OscConfig+0xd4>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800789c:	d10c      	bne.n	80078b8 <HAL_RCC_OscConfig+0xbc>
 800789e:	4b72      	ldr	r3, [pc, #456]	; (8007a68 <HAL_RCC_OscConfig+0x26c>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a71      	ldr	r2, [pc, #452]	; (8007a68 <HAL_RCC_OscConfig+0x26c>)
 80078a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80078a8:	6013      	str	r3, [r2, #0]
 80078aa:	4b6f      	ldr	r3, [pc, #444]	; (8007a68 <HAL_RCC_OscConfig+0x26c>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a6e      	ldr	r2, [pc, #440]	; (8007a68 <HAL_RCC_OscConfig+0x26c>)
 80078b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80078b4:	6013      	str	r3, [r2, #0]
 80078b6:	e00b      	b.n	80078d0 <HAL_RCC_OscConfig+0xd4>
 80078b8:	4b6b      	ldr	r3, [pc, #428]	; (8007a68 <HAL_RCC_OscConfig+0x26c>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a6a      	ldr	r2, [pc, #424]	; (8007a68 <HAL_RCC_OscConfig+0x26c>)
 80078be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078c2:	6013      	str	r3, [r2, #0]
 80078c4:	4b68      	ldr	r3, [pc, #416]	; (8007a68 <HAL_RCC_OscConfig+0x26c>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a67      	ldr	r2, [pc, #412]	; (8007a68 <HAL_RCC_OscConfig+0x26c>)
 80078ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80078ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d013      	beq.n	8007900 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078d8:	f7fd ff08 	bl	80056ec <HAL_GetTick>
 80078dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078de:	e008      	b.n	80078f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80078e0:	f7fd ff04 	bl	80056ec <HAL_GetTick>
 80078e4:	4602      	mov	r2, r0
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	1ad3      	subs	r3, r2, r3
 80078ea:	2b64      	cmp	r3, #100	; 0x64
 80078ec:	d901      	bls.n	80078f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80078ee:	2303      	movs	r3, #3
 80078f0:	e200      	b.n	8007cf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078f2:	4b5d      	ldr	r3, [pc, #372]	; (8007a68 <HAL_RCC_OscConfig+0x26c>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d0f0      	beq.n	80078e0 <HAL_RCC_OscConfig+0xe4>
 80078fe:	e014      	b.n	800792a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007900:	f7fd fef4 	bl	80056ec <HAL_GetTick>
 8007904:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007906:	e008      	b.n	800791a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007908:	f7fd fef0 	bl	80056ec <HAL_GetTick>
 800790c:	4602      	mov	r2, r0
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	1ad3      	subs	r3, r2, r3
 8007912:	2b64      	cmp	r3, #100	; 0x64
 8007914:	d901      	bls.n	800791a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007916:	2303      	movs	r3, #3
 8007918:	e1ec      	b.n	8007cf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800791a:	4b53      	ldr	r3, [pc, #332]	; (8007a68 <HAL_RCC_OscConfig+0x26c>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007922:	2b00      	cmp	r3, #0
 8007924:	d1f0      	bne.n	8007908 <HAL_RCC_OscConfig+0x10c>
 8007926:	e000      	b.n	800792a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007928:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f003 0302 	and.w	r3, r3, #2
 8007932:	2b00      	cmp	r3, #0
 8007934:	d063      	beq.n	80079fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007936:	4b4c      	ldr	r3, [pc, #304]	; (8007a68 <HAL_RCC_OscConfig+0x26c>)
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	f003 030c 	and.w	r3, r3, #12
 800793e:	2b00      	cmp	r3, #0
 8007940:	d00b      	beq.n	800795a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8007942:	4b49      	ldr	r3, [pc, #292]	; (8007a68 <HAL_RCC_OscConfig+0x26c>)
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	f003 030c 	and.w	r3, r3, #12
 800794a:	2b08      	cmp	r3, #8
 800794c:	d11c      	bne.n	8007988 <HAL_RCC_OscConfig+0x18c>
 800794e:	4b46      	ldr	r3, [pc, #280]	; (8007a68 <HAL_RCC_OscConfig+0x26c>)
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007956:	2b00      	cmp	r3, #0
 8007958:	d116      	bne.n	8007988 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800795a:	4b43      	ldr	r3, [pc, #268]	; (8007a68 <HAL_RCC_OscConfig+0x26c>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f003 0302 	and.w	r3, r3, #2
 8007962:	2b00      	cmp	r3, #0
 8007964:	d005      	beq.n	8007972 <HAL_RCC_OscConfig+0x176>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	691b      	ldr	r3, [r3, #16]
 800796a:	2b01      	cmp	r3, #1
 800796c:	d001      	beq.n	8007972 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800796e:	2301      	movs	r3, #1
 8007970:	e1c0      	b.n	8007cf4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007972:	4b3d      	ldr	r3, [pc, #244]	; (8007a68 <HAL_RCC_OscConfig+0x26c>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	695b      	ldr	r3, [r3, #20]
 800797e:	00db      	lsls	r3, r3, #3
 8007980:	4939      	ldr	r1, [pc, #228]	; (8007a68 <HAL_RCC_OscConfig+0x26c>)
 8007982:	4313      	orrs	r3, r2
 8007984:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007986:	e03a      	b.n	80079fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	691b      	ldr	r3, [r3, #16]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d020      	beq.n	80079d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007990:	4b36      	ldr	r3, [pc, #216]	; (8007a6c <HAL_RCC_OscConfig+0x270>)
 8007992:	2201      	movs	r2, #1
 8007994:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007996:	f7fd fea9 	bl	80056ec <HAL_GetTick>
 800799a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800799c:	e008      	b.n	80079b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800799e:	f7fd fea5 	bl	80056ec <HAL_GetTick>
 80079a2:	4602      	mov	r2, r0
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	1ad3      	subs	r3, r2, r3
 80079a8:	2b02      	cmp	r3, #2
 80079aa:	d901      	bls.n	80079b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80079ac:	2303      	movs	r3, #3
 80079ae:	e1a1      	b.n	8007cf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80079b0:	4b2d      	ldr	r3, [pc, #180]	; (8007a68 <HAL_RCC_OscConfig+0x26c>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f003 0302 	and.w	r3, r3, #2
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d0f0      	beq.n	800799e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80079bc:	4b2a      	ldr	r3, [pc, #168]	; (8007a68 <HAL_RCC_OscConfig+0x26c>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	695b      	ldr	r3, [r3, #20]
 80079c8:	00db      	lsls	r3, r3, #3
 80079ca:	4927      	ldr	r1, [pc, #156]	; (8007a68 <HAL_RCC_OscConfig+0x26c>)
 80079cc:	4313      	orrs	r3, r2
 80079ce:	600b      	str	r3, [r1, #0]
 80079d0:	e015      	b.n	80079fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80079d2:	4b26      	ldr	r3, [pc, #152]	; (8007a6c <HAL_RCC_OscConfig+0x270>)
 80079d4:	2200      	movs	r2, #0
 80079d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079d8:	f7fd fe88 	bl	80056ec <HAL_GetTick>
 80079dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80079de:	e008      	b.n	80079f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80079e0:	f7fd fe84 	bl	80056ec <HAL_GetTick>
 80079e4:	4602      	mov	r2, r0
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	1ad3      	subs	r3, r2, r3
 80079ea:	2b02      	cmp	r3, #2
 80079ec:	d901      	bls.n	80079f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80079ee:	2303      	movs	r3, #3
 80079f0:	e180      	b.n	8007cf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80079f2:	4b1d      	ldr	r3, [pc, #116]	; (8007a68 <HAL_RCC_OscConfig+0x26c>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f003 0302 	and.w	r3, r3, #2
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d1f0      	bne.n	80079e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f003 0308 	and.w	r3, r3, #8
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d03a      	beq.n	8007a80 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	699b      	ldr	r3, [r3, #24]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d019      	beq.n	8007a46 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007a12:	4b17      	ldr	r3, [pc, #92]	; (8007a70 <HAL_RCC_OscConfig+0x274>)
 8007a14:	2201      	movs	r2, #1
 8007a16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a18:	f7fd fe68 	bl	80056ec <HAL_GetTick>
 8007a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007a1e:	e008      	b.n	8007a32 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007a20:	f7fd fe64 	bl	80056ec <HAL_GetTick>
 8007a24:	4602      	mov	r2, r0
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	1ad3      	subs	r3, r2, r3
 8007a2a:	2b02      	cmp	r3, #2
 8007a2c:	d901      	bls.n	8007a32 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8007a2e:	2303      	movs	r3, #3
 8007a30:	e160      	b.n	8007cf4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007a32:	4b0d      	ldr	r3, [pc, #52]	; (8007a68 <HAL_RCC_OscConfig+0x26c>)
 8007a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a36:	f003 0302 	and.w	r3, r3, #2
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d0f0      	beq.n	8007a20 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8007a3e:	2001      	movs	r0, #1
 8007a40:	f000 fac4 	bl	8007fcc <RCC_Delay>
 8007a44:	e01c      	b.n	8007a80 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007a46:	4b0a      	ldr	r3, [pc, #40]	; (8007a70 <HAL_RCC_OscConfig+0x274>)
 8007a48:	2200      	movs	r2, #0
 8007a4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a4c:	f7fd fe4e 	bl	80056ec <HAL_GetTick>
 8007a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a52:	e00f      	b.n	8007a74 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007a54:	f7fd fe4a 	bl	80056ec <HAL_GetTick>
 8007a58:	4602      	mov	r2, r0
 8007a5a:	693b      	ldr	r3, [r7, #16]
 8007a5c:	1ad3      	subs	r3, r2, r3
 8007a5e:	2b02      	cmp	r3, #2
 8007a60:	d908      	bls.n	8007a74 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8007a62:	2303      	movs	r3, #3
 8007a64:	e146      	b.n	8007cf4 <HAL_RCC_OscConfig+0x4f8>
 8007a66:	bf00      	nop
 8007a68:	40021000 	.word	0x40021000
 8007a6c:	42420000 	.word	0x42420000
 8007a70:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a74:	4b92      	ldr	r3, [pc, #584]	; (8007cc0 <HAL_RCC_OscConfig+0x4c4>)
 8007a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a78:	f003 0302 	and.w	r3, r3, #2
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d1e9      	bne.n	8007a54 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f003 0304 	and.w	r3, r3, #4
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	f000 80a6 	beq.w	8007bda <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007a92:	4b8b      	ldr	r3, [pc, #556]	; (8007cc0 <HAL_RCC_OscConfig+0x4c4>)
 8007a94:	69db      	ldr	r3, [r3, #28]
 8007a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d10d      	bne.n	8007aba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a9e:	4b88      	ldr	r3, [pc, #544]	; (8007cc0 <HAL_RCC_OscConfig+0x4c4>)
 8007aa0:	69db      	ldr	r3, [r3, #28]
 8007aa2:	4a87      	ldr	r2, [pc, #540]	; (8007cc0 <HAL_RCC_OscConfig+0x4c4>)
 8007aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007aa8:	61d3      	str	r3, [r2, #28]
 8007aaa:	4b85      	ldr	r3, [pc, #532]	; (8007cc0 <HAL_RCC_OscConfig+0x4c4>)
 8007aac:	69db      	ldr	r3, [r3, #28]
 8007aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ab2:	60bb      	str	r3, [r7, #8]
 8007ab4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007aba:	4b82      	ldr	r3, [pc, #520]	; (8007cc4 <HAL_RCC_OscConfig+0x4c8>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d118      	bne.n	8007af8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007ac6:	4b7f      	ldr	r3, [pc, #508]	; (8007cc4 <HAL_RCC_OscConfig+0x4c8>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a7e      	ldr	r2, [pc, #504]	; (8007cc4 <HAL_RCC_OscConfig+0x4c8>)
 8007acc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ad0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007ad2:	f7fd fe0b 	bl	80056ec <HAL_GetTick>
 8007ad6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ad8:	e008      	b.n	8007aec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ada:	f7fd fe07 	bl	80056ec <HAL_GetTick>
 8007ade:	4602      	mov	r2, r0
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	1ad3      	subs	r3, r2, r3
 8007ae4:	2b64      	cmp	r3, #100	; 0x64
 8007ae6:	d901      	bls.n	8007aec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007ae8:	2303      	movs	r3, #3
 8007aea:	e103      	b.n	8007cf4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007aec:	4b75      	ldr	r3, [pc, #468]	; (8007cc4 <HAL_RCC_OscConfig+0x4c8>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d0f0      	beq.n	8007ada <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	68db      	ldr	r3, [r3, #12]
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	d106      	bne.n	8007b0e <HAL_RCC_OscConfig+0x312>
 8007b00:	4b6f      	ldr	r3, [pc, #444]	; (8007cc0 <HAL_RCC_OscConfig+0x4c4>)
 8007b02:	6a1b      	ldr	r3, [r3, #32]
 8007b04:	4a6e      	ldr	r2, [pc, #440]	; (8007cc0 <HAL_RCC_OscConfig+0x4c4>)
 8007b06:	f043 0301 	orr.w	r3, r3, #1
 8007b0a:	6213      	str	r3, [r2, #32]
 8007b0c:	e02d      	b.n	8007b6a <HAL_RCC_OscConfig+0x36e>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	68db      	ldr	r3, [r3, #12]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d10c      	bne.n	8007b30 <HAL_RCC_OscConfig+0x334>
 8007b16:	4b6a      	ldr	r3, [pc, #424]	; (8007cc0 <HAL_RCC_OscConfig+0x4c4>)
 8007b18:	6a1b      	ldr	r3, [r3, #32]
 8007b1a:	4a69      	ldr	r2, [pc, #420]	; (8007cc0 <HAL_RCC_OscConfig+0x4c4>)
 8007b1c:	f023 0301 	bic.w	r3, r3, #1
 8007b20:	6213      	str	r3, [r2, #32]
 8007b22:	4b67      	ldr	r3, [pc, #412]	; (8007cc0 <HAL_RCC_OscConfig+0x4c4>)
 8007b24:	6a1b      	ldr	r3, [r3, #32]
 8007b26:	4a66      	ldr	r2, [pc, #408]	; (8007cc0 <HAL_RCC_OscConfig+0x4c4>)
 8007b28:	f023 0304 	bic.w	r3, r3, #4
 8007b2c:	6213      	str	r3, [r2, #32]
 8007b2e:	e01c      	b.n	8007b6a <HAL_RCC_OscConfig+0x36e>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	68db      	ldr	r3, [r3, #12]
 8007b34:	2b05      	cmp	r3, #5
 8007b36:	d10c      	bne.n	8007b52 <HAL_RCC_OscConfig+0x356>
 8007b38:	4b61      	ldr	r3, [pc, #388]	; (8007cc0 <HAL_RCC_OscConfig+0x4c4>)
 8007b3a:	6a1b      	ldr	r3, [r3, #32]
 8007b3c:	4a60      	ldr	r2, [pc, #384]	; (8007cc0 <HAL_RCC_OscConfig+0x4c4>)
 8007b3e:	f043 0304 	orr.w	r3, r3, #4
 8007b42:	6213      	str	r3, [r2, #32]
 8007b44:	4b5e      	ldr	r3, [pc, #376]	; (8007cc0 <HAL_RCC_OscConfig+0x4c4>)
 8007b46:	6a1b      	ldr	r3, [r3, #32]
 8007b48:	4a5d      	ldr	r2, [pc, #372]	; (8007cc0 <HAL_RCC_OscConfig+0x4c4>)
 8007b4a:	f043 0301 	orr.w	r3, r3, #1
 8007b4e:	6213      	str	r3, [r2, #32]
 8007b50:	e00b      	b.n	8007b6a <HAL_RCC_OscConfig+0x36e>
 8007b52:	4b5b      	ldr	r3, [pc, #364]	; (8007cc0 <HAL_RCC_OscConfig+0x4c4>)
 8007b54:	6a1b      	ldr	r3, [r3, #32]
 8007b56:	4a5a      	ldr	r2, [pc, #360]	; (8007cc0 <HAL_RCC_OscConfig+0x4c4>)
 8007b58:	f023 0301 	bic.w	r3, r3, #1
 8007b5c:	6213      	str	r3, [r2, #32]
 8007b5e:	4b58      	ldr	r3, [pc, #352]	; (8007cc0 <HAL_RCC_OscConfig+0x4c4>)
 8007b60:	6a1b      	ldr	r3, [r3, #32]
 8007b62:	4a57      	ldr	r2, [pc, #348]	; (8007cc0 <HAL_RCC_OscConfig+0x4c4>)
 8007b64:	f023 0304 	bic.w	r3, r3, #4
 8007b68:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	68db      	ldr	r3, [r3, #12]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d015      	beq.n	8007b9e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b72:	f7fd fdbb 	bl	80056ec <HAL_GetTick>
 8007b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b78:	e00a      	b.n	8007b90 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b7a:	f7fd fdb7 	bl	80056ec <HAL_GetTick>
 8007b7e:	4602      	mov	r2, r0
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	1ad3      	subs	r3, r2, r3
 8007b84:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d901      	bls.n	8007b90 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007b8c:	2303      	movs	r3, #3
 8007b8e:	e0b1      	b.n	8007cf4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b90:	4b4b      	ldr	r3, [pc, #300]	; (8007cc0 <HAL_RCC_OscConfig+0x4c4>)
 8007b92:	6a1b      	ldr	r3, [r3, #32]
 8007b94:	f003 0302 	and.w	r3, r3, #2
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d0ee      	beq.n	8007b7a <HAL_RCC_OscConfig+0x37e>
 8007b9c:	e014      	b.n	8007bc8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b9e:	f7fd fda5 	bl	80056ec <HAL_GetTick>
 8007ba2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007ba4:	e00a      	b.n	8007bbc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ba6:	f7fd fda1 	bl	80056ec <HAL_GetTick>
 8007baa:	4602      	mov	r2, r0
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	1ad3      	subs	r3, r2, r3
 8007bb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d901      	bls.n	8007bbc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007bb8:	2303      	movs	r3, #3
 8007bba:	e09b      	b.n	8007cf4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007bbc:	4b40      	ldr	r3, [pc, #256]	; (8007cc0 <HAL_RCC_OscConfig+0x4c4>)
 8007bbe:	6a1b      	ldr	r3, [r3, #32]
 8007bc0:	f003 0302 	and.w	r3, r3, #2
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d1ee      	bne.n	8007ba6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007bc8:	7dfb      	ldrb	r3, [r7, #23]
 8007bca:	2b01      	cmp	r3, #1
 8007bcc:	d105      	bne.n	8007bda <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007bce:	4b3c      	ldr	r3, [pc, #240]	; (8007cc0 <HAL_RCC_OscConfig+0x4c4>)
 8007bd0:	69db      	ldr	r3, [r3, #28]
 8007bd2:	4a3b      	ldr	r2, [pc, #236]	; (8007cc0 <HAL_RCC_OscConfig+0x4c4>)
 8007bd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007bd8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	69db      	ldr	r3, [r3, #28]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	f000 8087 	beq.w	8007cf2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007be4:	4b36      	ldr	r3, [pc, #216]	; (8007cc0 <HAL_RCC_OscConfig+0x4c4>)
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	f003 030c 	and.w	r3, r3, #12
 8007bec:	2b08      	cmp	r3, #8
 8007bee:	d061      	beq.n	8007cb4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	69db      	ldr	r3, [r3, #28]
 8007bf4:	2b02      	cmp	r3, #2
 8007bf6:	d146      	bne.n	8007c86 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007bf8:	4b33      	ldr	r3, [pc, #204]	; (8007cc8 <HAL_RCC_OscConfig+0x4cc>)
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007bfe:	f7fd fd75 	bl	80056ec <HAL_GetTick>
 8007c02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007c04:	e008      	b.n	8007c18 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c06:	f7fd fd71 	bl	80056ec <HAL_GetTick>
 8007c0a:	4602      	mov	r2, r0
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	1ad3      	subs	r3, r2, r3
 8007c10:	2b02      	cmp	r3, #2
 8007c12:	d901      	bls.n	8007c18 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007c14:	2303      	movs	r3, #3
 8007c16:	e06d      	b.n	8007cf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007c18:	4b29      	ldr	r3, [pc, #164]	; (8007cc0 <HAL_RCC_OscConfig+0x4c4>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d1f0      	bne.n	8007c06 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6a1b      	ldr	r3, [r3, #32]
 8007c28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c2c:	d108      	bne.n	8007c40 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007c2e:	4b24      	ldr	r3, [pc, #144]	; (8007cc0 <HAL_RCC_OscConfig+0x4c4>)
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	689b      	ldr	r3, [r3, #8]
 8007c3a:	4921      	ldr	r1, [pc, #132]	; (8007cc0 <HAL_RCC_OscConfig+0x4c4>)
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007c40:	4b1f      	ldr	r3, [pc, #124]	; (8007cc0 <HAL_RCC_OscConfig+0x4c4>)
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6a19      	ldr	r1, [r3, #32]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c50:	430b      	orrs	r3, r1
 8007c52:	491b      	ldr	r1, [pc, #108]	; (8007cc0 <HAL_RCC_OscConfig+0x4c4>)
 8007c54:	4313      	orrs	r3, r2
 8007c56:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007c58:	4b1b      	ldr	r3, [pc, #108]	; (8007cc8 <HAL_RCC_OscConfig+0x4cc>)
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c5e:	f7fd fd45 	bl	80056ec <HAL_GetTick>
 8007c62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007c64:	e008      	b.n	8007c78 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c66:	f7fd fd41 	bl	80056ec <HAL_GetTick>
 8007c6a:	4602      	mov	r2, r0
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	1ad3      	subs	r3, r2, r3
 8007c70:	2b02      	cmp	r3, #2
 8007c72:	d901      	bls.n	8007c78 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007c74:	2303      	movs	r3, #3
 8007c76:	e03d      	b.n	8007cf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007c78:	4b11      	ldr	r3, [pc, #68]	; (8007cc0 <HAL_RCC_OscConfig+0x4c4>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d0f0      	beq.n	8007c66 <HAL_RCC_OscConfig+0x46a>
 8007c84:	e035      	b.n	8007cf2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c86:	4b10      	ldr	r3, [pc, #64]	; (8007cc8 <HAL_RCC_OscConfig+0x4cc>)
 8007c88:	2200      	movs	r2, #0
 8007c8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c8c:	f7fd fd2e 	bl	80056ec <HAL_GetTick>
 8007c90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007c92:	e008      	b.n	8007ca6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c94:	f7fd fd2a 	bl	80056ec <HAL_GetTick>
 8007c98:	4602      	mov	r2, r0
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	1ad3      	subs	r3, r2, r3
 8007c9e:	2b02      	cmp	r3, #2
 8007ca0:	d901      	bls.n	8007ca6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007ca2:	2303      	movs	r3, #3
 8007ca4:	e026      	b.n	8007cf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007ca6:	4b06      	ldr	r3, [pc, #24]	; (8007cc0 <HAL_RCC_OscConfig+0x4c4>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d1f0      	bne.n	8007c94 <HAL_RCC_OscConfig+0x498>
 8007cb2:	e01e      	b.n	8007cf2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	69db      	ldr	r3, [r3, #28]
 8007cb8:	2b01      	cmp	r3, #1
 8007cba:	d107      	bne.n	8007ccc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	e019      	b.n	8007cf4 <HAL_RCC_OscConfig+0x4f8>
 8007cc0:	40021000 	.word	0x40021000
 8007cc4:	40007000 	.word	0x40007000
 8007cc8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007ccc:	4b0b      	ldr	r3, [pc, #44]	; (8007cfc <HAL_RCC_OscConfig+0x500>)
 8007cce:	685b      	ldr	r3, [r3, #4]
 8007cd0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6a1b      	ldr	r3, [r3, #32]
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	d106      	bne.n	8007cee <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007cea:	429a      	cmp	r2, r3
 8007cec:	d001      	beq.n	8007cf2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8007cee:	2301      	movs	r3, #1
 8007cf0:	e000      	b.n	8007cf4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8007cf2:	2300      	movs	r3, #0
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	3718      	adds	r7, #24
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}
 8007cfc:	40021000 	.word	0x40021000

08007d00 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b084      	sub	sp, #16
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d101      	bne.n	8007d14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007d10:	2301      	movs	r3, #1
 8007d12:	e0d0      	b.n	8007eb6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007d14:	4b6a      	ldr	r3, [pc, #424]	; (8007ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f003 0307 	and.w	r3, r3, #7
 8007d1c:	683a      	ldr	r2, [r7, #0]
 8007d1e:	429a      	cmp	r2, r3
 8007d20:	d910      	bls.n	8007d44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d22:	4b67      	ldr	r3, [pc, #412]	; (8007ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f023 0207 	bic.w	r2, r3, #7
 8007d2a:	4965      	ldr	r1, [pc, #404]	; (8007ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d32:	4b63      	ldr	r3, [pc, #396]	; (8007ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f003 0307 	and.w	r3, r3, #7
 8007d3a:	683a      	ldr	r2, [r7, #0]
 8007d3c:	429a      	cmp	r2, r3
 8007d3e:	d001      	beq.n	8007d44 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007d40:	2301      	movs	r3, #1
 8007d42:	e0b8      	b.n	8007eb6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f003 0302 	and.w	r3, r3, #2
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d020      	beq.n	8007d92 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f003 0304 	and.w	r3, r3, #4
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d005      	beq.n	8007d68 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007d5c:	4b59      	ldr	r3, [pc, #356]	; (8007ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8007d5e:	685b      	ldr	r3, [r3, #4]
 8007d60:	4a58      	ldr	r2, [pc, #352]	; (8007ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8007d62:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007d66:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f003 0308 	and.w	r3, r3, #8
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d005      	beq.n	8007d80 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007d74:	4b53      	ldr	r3, [pc, #332]	; (8007ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	4a52      	ldr	r2, [pc, #328]	; (8007ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8007d7a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8007d7e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d80:	4b50      	ldr	r3, [pc, #320]	; (8007ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	689b      	ldr	r3, [r3, #8]
 8007d8c:	494d      	ldr	r1, [pc, #308]	; (8007ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f003 0301 	and.w	r3, r3, #1
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d040      	beq.n	8007e20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	2b01      	cmp	r3, #1
 8007da4:	d107      	bne.n	8007db6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007da6:	4b47      	ldr	r3, [pc, #284]	; (8007ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d115      	bne.n	8007dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007db2:	2301      	movs	r3, #1
 8007db4:	e07f      	b.n	8007eb6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	2b02      	cmp	r3, #2
 8007dbc:	d107      	bne.n	8007dce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007dbe:	4b41      	ldr	r3, [pc, #260]	; (8007ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d109      	bne.n	8007dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007dca:	2301      	movs	r3, #1
 8007dcc:	e073      	b.n	8007eb6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007dce:	4b3d      	ldr	r3, [pc, #244]	; (8007ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f003 0302 	and.w	r3, r3, #2
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d101      	bne.n	8007dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	e06b      	b.n	8007eb6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007dde:	4b39      	ldr	r3, [pc, #228]	; (8007ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	f023 0203 	bic.w	r2, r3, #3
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	685b      	ldr	r3, [r3, #4]
 8007dea:	4936      	ldr	r1, [pc, #216]	; (8007ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8007dec:	4313      	orrs	r3, r2
 8007dee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007df0:	f7fd fc7c 	bl	80056ec <HAL_GetTick>
 8007df4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007df6:	e00a      	b.n	8007e0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007df8:	f7fd fc78 	bl	80056ec <HAL_GetTick>
 8007dfc:	4602      	mov	r2, r0
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	1ad3      	subs	r3, r2, r3
 8007e02:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d901      	bls.n	8007e0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007e0a:	2303      	movs	r3, #3
 8007e0c:	e053      	b.n	8007eb6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e0e:	4b2d      	ldr	r3, [pc, #180]	; (8007ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	f003 020c 	and.w	r2, r3, #12
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	009b      	lsls	r3, r3, #2
 8007e1c:	429a      	cmp	r2, r3
 8007e1e:	d1eb      	bne.n	8007df8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007e20:	4b27      	ldr	r3, [pc, #156]	; (8007ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f003 0307 	and.w	r3, r3, #7
 8007e28:	683a      	ldr	r2, [r7, #0]
 8007e2a:	429a      	cmp	r2, r3
 8007e2c:	d210      	bcs.n	8007e50 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e2e:	4b24      	ldr	r3, [pc, #144]	; (8007ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f023 0207 	bic.w	r2, r3, #7
 8007e36:	4922      	ldr	r1, [pc, #136]	; (8007ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	4313      	orrs	r3, r2
 8007e3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e3e:	4b20      	ldr	r3, [pc, #128]	; (8007ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f003 0307 	and.w	r3, r3, #7
 8007e46:	683a      	ldr	r2, [r7, #0]
 8007e48:	429a      	cmp	r2, r3
 8007e4a:	d001      	beq.n	8007e50 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	e032      	b.n	8007eb6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f003 0304 	and.w	r3, r3, #4
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d008      	beq.n	8007e6e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007e5c:	4b19      	ldr	r3, [pc, #100]	; (8007ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	68db      	ldr	r3, [r3, #12]
 8007e68:	4916      	ldr	r1, [pc, #88]	; (8007ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f003 0308 	and.w	r3, r3, #8
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d009      	beq.n	8007e8e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007e7a:	4b12      	ldr	r3, [pc, #72]	; (8007ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	691b      	ldr	r3, [r3, #16]
 8007e86:	00db      	lsls	r3, r3, #3
 8007e88:	490e      	ldr	r1, [pc, #56]	; (8007ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007e8e:	f000 f821 	bl	8007ed4 <HAL_RCC_GetSysClockFreq>
 8007e92:	4602      	mov	r2, r0
 8007e94:	4b0b      	ldr	r3, [pc, #44]	; (8007ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8007e96:	685b      	ldr	r3, [r3, #4]
 8007e98:	091b      	lsrs	r3, r3, #4
 8007e9a:	f003 030f 	and.w	r3, r3, #15
 8007e9e:	490a      	ldr	r1, [pc, #40]	; (8007ec8 <HAL_RCC_ClockConfig+0x1c8>)
 8007ea0:	5ccb      	ldrb	r3, [r1, r3]
 8007ea2:	fa22 f303 	lsr.w	r3, r2, r3
 8007ea6:	4a09      	ldr	r2, [pc, #36]	; (8007ecc <HAL_RCC_ClockConfig+0x1cc>)
 8007ea8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007eaa:	4b09      	ldr	r3, [pc, #36]	; (8007ed0 <HAL_RCC_ClockConfig+0x1d0>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f7fd fbda 	bl	8005668 <HAL_InitTick>

  return HAL_OK;
 8007eb4:	2300      	movs	r3, #0
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3710      	adds	r7, #16
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}
 8007ebe:	bf00      	nop
 8007ec0:	40022000 	.word	0x40022000
 8007ec4:	40021000 	.word	0x40021000
 8007ec8:	0800b288 	.word	0x0800b288
 8007ecc:	20000018 	.word	0x20000018
 8007ed0:	2000001c 	.word	0x2000001c

08007ed4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007ed4:	b490      	push	{r4, r7}
 8007ed6:	b08a      	sub	sp, #40	; 0x28
 8007ed8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8007eda:	4b29      	ldr	r3, [pc, #164]	; (8007f80 <HAL_RCC_GetSysClockFreq+0xac>)
 8007edc:	1d3c      	adds	r4, r7, #4
 8007ede:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007ee0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8007ee4:	f240 2301 	movw	r3, #513	; 0x201
 8007ee8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007eea:	2300      	movs	r3, #0
 8007eec:	61fb      	str	r3, [r7, #28]
 8007eee:	2300      	movs	r3, #0
 8007ef0:	61bb      	str	r3, [r7, #24]
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	627b      	str	r3, [r7, #36]	; 0x24
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8007efa:	2300      	movs	r3, #0
 8007efc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007efe:	4b21      	ldr	r3, [pc, #132]	; (8007f84 <HAL_RCC_GetSysClockFreq+0xb0>)
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007f04:	69fb      	ldr	r3, [r7, #28]
 8007f06:	f003 030c 	and.w	r3, r3, #12
 8007f0a:	2b04      	cmp	r3, #4
 8007f0c:	d002      	beq.n	8007f14 <HAL_RCC_GetSysClockFreq+0x40>
 8007f0e:	2b08      	cmp	r3, #8
 8007f10:	d003      	beq.n	8007f1a <HAL_RCC_GetSysClockFreq+0x46>
 8007f12:	e02b      	b.n	8007f6c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007f14:	4b1c      	ldr	r3, [pc, #112]	; (8007f88 <HAL_RCC_GetSysClockFreq+0xb4>)
 8007f16:	623b      	str	r3, [r7, #32]
      break;
 8007f18:	e02b      	b.n	8007f72 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007f1a:	69fb      	ldr	r3, [r7, #28]
 8007f1c:	0c9b      	lsrs	r3, r3, #18
 8007f1e:	f003 030f 	and.w	r3, r3, #15
 8007f22:	3328      	adds	r3, #40	; 0x28
 8007f24:	443b      	add	r3, r7
 8007f26:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8007f2a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007f2c:	69fb      	ldr	r3, [r7, #28]
 8007f2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d012      	beq.n	8007f5c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007f36:	4b13      	ldr	r3, [pc, #76]	; (8007f84 <HAL_RCC_GetSysClockFreq+0xb0>)
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	0c5b      	lsrs	r3, r3, #17
 8007f3c:	f003 0301 	and.w	r3, r3, #1
 8007f40:	3328      	adds	r3, #40	; 0x28
 8007f42:	443b      	add	r3, r7
 8007f44:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8007f48:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	4a0e      	ldr	r2, [pc, #56]	; (8007f88 <HAL_RCC_GetSysClockFreq+0xb4>)
 8007f4e:	fb03 f202 	mul.w	r2, r3, r2
 8007f52:	69bb      	ldr	r3, [r7, #24]
 8007f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f58:	627b      	str	r3, [r7, #36]	; 0x24
 8007f5a:	e004      	b.n	8007f66 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	4a0b      	ldr	r2, [pc, #44]	; (8007f8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8007f60:	fb02 f303 	mul.w	r3, r2, r3
 8007f64:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8007f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f68:	623b      	str	r3, [r7, #32]
      break;
 8007f6a:	e002      	b.n	8007f72 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007f6c:	4b06      	ldr	r3, [pc, #24]	; (8007f88 <HAL_RCC_GetSysClockFreq+0xb4>)
 8007f6e:	623b      	str	r3, [r7, #32]
      break;
 8007f70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007f72:	6a3b      	ldr	r3, [r7, #32]
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	3728      	adds	r7, #40	; 0x28
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bc90      	pop	{r4, r7}
 8007f7c:	4770      	bx	lr
 8007f7e:	bf00      	nop
 8007f80:	0800b278 	.word	0x0800b278
 8007f84:	40021000 	.word	0x40021000
 8007f88:	007a1200 	.word	0x007a1200
 8007f8c:	003d0900 	.word	0x003d0900

08007f90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007f90:	b480      	push	{r7}
 8007f92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007f94:	4b02      	ldr	r3, [pc, #8]	; (8007fa0 <HAL_RCC_GetHCLKFreq+0x10>)
 8007f96:	681b      	ldr	r3, [r3, #0]
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bc80      	pop	{r7}
 8007f9e:	4770      	bx	lr
 8007fa0:	20000018 	.word	0x20000018

08007fa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007fa8:	f7ff fff2 	bl	8007f90 <HAL_RCC_GetHCLKFreq>
 8007fac:	4602      	mov	r2, r0
 8007fae:	4b05      	ldr	r3, [pc, #20]	; (8007fc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	0a1b      	lsrs	r3, r3, #8
 8007fb4:	f003 0307 	and.w	r3, r3, #7
 8007fb8:	4903      	ldr	r1, [pc, #12]	; (8007fc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007fba:	5ccb      	ldrb	r3, [r1, r3]
 8007fbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	bd80      	pop	{r7, pc}
 8007fc4:	40021000 	.word	0x40021000
 8007fc8:	0800b298 	.word	0x0800b298

08007fcc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b085      	sub	sp, #20
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007fd4:	4b0a      	ldr	r3, [pc, #40]	; (8008000 <RCC_Delay+0x34>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a0a      	ldr	r2, [pc, #40]	; (8008004 <RCC_Delay+0x38>)
 8007fda:	fba2 2303 	umull	r2, r3, r2, r3
 8007fde:	0a5b      	lsrs	r3, r3, #9
 8007fe0:	687a      	ldr	r2, [r7, #4]
 8007fe2:	fb02 f303 	mul.w	r3, r2, r3
 8007fe6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007fe8:	bf00      	nop
  }
  while (Delay --);
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	1e5a      	subs	r2, r3, #1
 8007fee:	60fa      	str	r2, [r7, #12]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d1f9      	bne.n	8007fe8 <RCC_Delay+0x1c>
}
 8007ff4:	bf00      	nop
 8007ff6:	bf00      	nop
 8007ff8:	3714      	adds	r7, #20
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bc80      	pop	{r7}
 8007ffe:	4770      	bx	lr
 8008000:	20000018 	.word	0x20000018
 8008004:	10624dd3 	.word	0x10624dd3

08008008 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b086      	sub	sp, #24
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8008010:	2300      	movs	r3, #0
 8008012:	613b      	str	r3, [r7, #16]
 8008014:	2300      	movs	r3, #0
 8008016:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f003 0301 	and.w	r3, r3, #1
 8008020:	2b00      	cmp	r3, #0
 8008022:	d07d      	beq.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8008024:	2300      	movs	r3, #0
 8008026:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008028:	4b4f      	ldr	r3, [pc, #316]	; (8008168 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800802a:	69db      	ldr	r3, [r3, #28]
 800802c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008030:	2b00      	cmp	r3, #0
 8008032:	d10d      	bne.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008034:	4b4c      	ldr	r3, [pc, #304]	; (8008168 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008036:	69db      	ldr	r3, [r3, #28]
 8008038:	4a4b      	ldr	r2, [pc, #300]	; (8008168 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800803a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800803e:	61d3      	str	r3, [r2, #28]
 8008040:	4b49      	ldr	r3, [pc, #292]	; (8008168 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008042:	69db      	ldr	r3, [r3, #28]
 8008044:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008048:	60bb      	str	r3, [r7, #8]
 800804a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800804c:	2301      	movs	r3, #1
 800804e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008050:	4b46      	ldr	r3, [pc, #280]	; (800816c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008058:	2b00      	cmp	r3, #0
 800805a:	d118      	bne.n	800808e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800805c:	4b43      	ldr	r3, [pc, #268]	; (800816c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a42      	ldr	r2, [pc, #264]	; (800816c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008062:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008066:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008068:	f7fd fb40 	bl	80056ec <HAL_GetTick>
 800806c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800806e:	e008      	b.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008070:	f7fd fb3c 	bl	80056ec <HAL_GetTick>
 8008074:	4602      	mov	r2, r0
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	1ad3      	subs	r3, r2, r3
 800807a:	2b64      	cmp	r3, #100	; 0x64
 800807c:	d901      	bls.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800807e:	2303      	movs	r3, #3
 8008080:	e06d      	b.n	800815e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008082:	4b3a      	ldr	r3, [pc, #232]	; (800816c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800808a:	2b00      	cmp	r3, #0
 800808c:	d0f0      	beq.n	8008070 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800808e:	4b36      	ldr	r3, [pc, #216]	; (8008168 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008090:	6a1b      	ldr	r3, [r3, #32]
 8008092:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008096:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d02e      	beq.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	685b      	ldr	r3, [r3, #4]
 80080a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080a6:	68fa      	ldr	r2, [r7, #12]
 80080a8:	429a      	cmp	r2, r3
 80080aa:	d027      	beq.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80080ac:	4b2e      	ldr	r3, [pc, #184]	; (8008168 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80080ae:	6a1b      	ldr	r3, [r3, #32]
 80080b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080b4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80080b6:	4b2e      	ldr	r3, [pc, #184]	; (8008170 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80080b8:	2201      	movs	r2, #1
 80080ba:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80080bc:	4b2c      	ldr	r3, [pc, #176]	; (8008170 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80080be:	2200      	movs	r2, #0
 80080c0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80080c2:	4a29      	ldr	r2, [pc, #164]	; (8008168 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	f003 0301 	and.w	r3, r3, #1
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d014      	beq.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080d2:	f7fd fb0b 	bl	80056ec <HAL_GetTick>
 80080d6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80080d8:	e00a      	b.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80080da:	f7fd fb07 	bl	80056ec <HAL_GetTick>
 80080de:	4602      	mov	r2, r0
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	1ad3      	subs	r3, r2, r3
 80080e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d901      	bls.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80080ec:	2303      	movs	r3, #3
 80080ee:	e036      	b.n	800815e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80080f0:	4b1d      	ldr	r3, [pc, #116]	; (8008168 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80080f2:	6a1b      	ldr	r3, [r3, #32]
 80080f4:	f003 0302 	and.w	r3, r3, #2
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d0ee      	beq.n	80080da <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80080fc:	4b1a      	ldr	r3, [pc, #104]	; (8008168 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80080fe:	6a1b      	ldr	r3, [r3, #32]
 8008100:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	685b      	ldr	r3, [r3, #4]
 8008108:	4917      	ldr	r1, [pc, #92]	; (8008168 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800810a:	4313      	orrs	r3, r2
 800810c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800810e:	7dfb      	ldrb	r3, [r7, #23]
 8008110:	2b01      	cmp	r3, #1
 8008112:	d105      	bne.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008114:	4b14      	ldr	r3, [pc, #80]	; (8008168 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008116:	69db      	ldr	r3, [r3, #28]
 8008118:	4a13      	ldr	r2, [pc, #76]	; (8008168 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800811a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800811e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f003 0302 	and.w	r3, r3, #2
 8008128:	2b00      	cmp	r3, #0
 800812a:	d008      	beq.n	800813e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800812c:	4b0e      	ldr	r3, [pc, #56]	; (8008168 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800812e:	685b      	ldr	r3, [r3, #4]
 8008130:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	689b      	ldr	r3, [r3, #8]
 8008138:	490b      	ldr	r1, [pc, #44]	; (8008168 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800813a:	4313      	orrs	r3, r2
 800813c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f003 0310 	and.w	r3, r3, #16
 8008146:	2b00      	cmp	r3, #0
 8008148:	d008      	beq.n	800815c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800814a:	4b07      	ldr	r3, [pc, #28]	; (8008168 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	68db      	ldr	r3, [r3, #12]
 8008156:	4904      	ldr	r1, [pc, #16]	; (8008168 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008158:	4313      	orrs	r3, r2
 800815a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800815c:	2300      	movs	r3, #0
}
 800815e:	4618      	mov	r0, r3
 8008160:	3718      	adds	r7, #24
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}
 8008166:	bf00      	nop
 8008168:	40021000 	.word	0x40021000
 800816c:	40007000 	.word	0x40007000
 8008170:	42420440 	.word	0x42420440

08008174 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b082      	sub	sp, #8
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d101      	bne.n	8008186 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008182:	2301      	movs	r3, #1
 8008184:	e041      	b.n	800820a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800818c:	b2db      	uxtb	r3, r3
 800818e:	2b00      	cmp	r3, #0
 8008190:	d106      	bne.n	80081a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2200      	movs	r2, #0
 8008196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f7fd f896 	bl	80052cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2202      	movs	r2, #2
 80081a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681a      	ldr	r2, [r3, #0]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	3304      	adds	r3, #4
 80081b0:	4619      	mov	r1, r3
 80081b2:	4610      	mov	r0, r2
 80081b4:	f000 fabe 	bl	8008734 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2201      	movs	r2, #1
 80081bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2201      	movs	r2, #1
 80081c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2201      	movs	r2, #1
 80081cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2201      	movs	r2, #1
 80081d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2201      	movs	r2, #1
 80081dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2201      	movs	r2, #1
 80081e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2201      	movs	r2, #1
 80081ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2201      	movs	r2, #1
 80081f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2201      	movs	r2, #1
 80081fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2201      	movs	r2, #1
 8008204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008208:	2300      	movs	r3, #0
}
 800820a:	4618      	mov	r0, r3
 800820c:	3708      	adds	r7, #8
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}
	...

08008214 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b084      	sub	sp, #16
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d109      	bne.n	8008238 <HAL_TIM_PWM_Start+0x24>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800822a:	b2db      	uxtb	r3, r3
 800822c:	2b01      	cmp	r3, #1
 800822e:	bf14      	ite	ne
 8008230:	2301      	movne	r3, #1
 8008232:	2300      	moveq	r3, #0
 8008234:	b2db      	uxtb	r3, r3
 8008236:	e022      	b.n	800827e <HAL_TIM_PWM_Start+0x6a>
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	2b04      	cmp	r3, #4
 800823c:	d109      	bne.n	8008252 <HAL_TIM_PWM_Start+0x3e>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008244:	b2db      	uxtb	r3, r3
 8008246:	2b01      	cmp	r3, #1
 8008248:	bf14      	ite	ne
 800824a:	2301      	movne	r3, #1
 800824c:	2300      	moveq	r3, #0
 800824e:	b2db      	uxtb	r3, r3
 8008250:	e015      	b.n	800827e <HAL_TIM_PWM_Start+0x6a>
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	2b08      	cmp	r3, #8
 8008256:	d109      	bne.n	800826c <HAL_TIM_PWM_Start+0x58>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800825e:	b2db      	uxtb	r3, r3
 8008260:	2b01      	cmp	r3, #1
 8008262:	bf14      	ite	ne
 8008264:	2301      	movne	r3, #1
 8008266:	2300      	moveq	r3, #0
 8008268:	b2db      	uxtb	r3, r3
 800826a:	e008      	b.n	800827e <HAL_TIM_PWM_Start+0x6a>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008272:	b2db      	uxtb	r3, r3
 8008274:	2b01      	cmp	r3, #1
 8008276:	bf14      	ite	ne
 8008278:	2301      	movne	r3, #1
 800827a:	2300      	moveq	r3, #0
 800827c:	b2db      	uxtb	r3, r3
 800827e:	2b00      	cmp	r3, #0
 8008280:	d001      	beq.n	8008286 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008282:	2301      	movs	r3, #1
 8008284:	e05e      	b.n	8008344 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d104      	bne.n	8008296 <HAL_TIM_PWM_Start+0x82>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2202      	movs	r2, #2
 8008290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008294:	e013      	b.n	80082be <HAL_TIM_PWM_Start+0xaa>
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	2b04      	cmp	r3, #4
 800829a:	d104      	bne.n	80082a6 <HAL_TIM_PWM_Start+0x92>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2202      	movs	r2, #2
 80082a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80082a4:	e00b      	b.n	80082be <HAL_TIM_PWM_Start+0xaa>
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	2b08      	cmp	r3, #8
 80082aa:	d104      	bne.n	80082b6 <HAL_TIM_PWM_Start+0xa2>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2202      	movs	r2, #2
 80082b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80082b4:	e003      	b.n	80082be <HAL_TIM_PWM_Start+0xaa>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2202      	movs	r2, #2
 80082ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	2201      	movs	r2, #1
 80082c4:	6839      	ldr	r1, [r7, #0]
 80082c6:	4618      	mov	r0, r3
 80082c8:	f000 fc1e 	bl	8008b08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4a1e      	ldr	r2, [pc, #120]	; (800834c <HAL_TIM_PWM_Start+0x138>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d107      	bne.n	80082e6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80082e4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4a18      	ldr	r2, [pc, #96]	; (800834c <HAL_TIM_PWM_Start+0x138>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d00e      	beq.n	800830e <HAL_TIM_PWM_Start+0xfa>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082f8:	d009      	beq.n	800830e <HAL_TIM_PWM_Start+0xfa>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a14      	ldr	r2, [pc, #80]	; (8008350 <HAL_TIM_PWM_Start+0x13c>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d004      	beq.n	800830e <HAL_TIM_PWM_Start+0xfa>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a12      	ldr	r2, [pc, #72]	; (8008354 <HAL_TIM_PWM_Start+0x140>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d111      	bne.n	8008332 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	689b      	ldr	r3, [r3, #8]
 8008314:	f003 0307 	and.w	r3, r3, #7
 8008318:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	2b06      	cmp	r3, #6
 800831e:	d010      	beq.n	8008342 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	681a      	ldr	r2, [r3, #0]
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f042 0201 	orr.w	r2, r2, #1
 800832e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008330:	e007      	b.n	8008342 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	681a      	ldr	r2, [r3, #0]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f042 0201 	orr.w	r2, r2, #1
 8008340:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008342:	2300      	movs	r3, #0
}
 8008344:	4618      	mov	r0, r3
 8008346:	3710      	adds	r7, #16
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}
 800834c:	40012c00 	.word	0x40012c00
 8008350:	40000400 	.word	0x40000400
 8008354:	40000800 	.word	0x40000800

08008358 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b086      	sub	sp, #24
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d101      	bne.n	800836c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008368:	2301      	movs	r3, #1
 800836a:	e093      	b.n	8008494 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008372:	b2db      	uxtb	r3, r3
 8008374:	2b00      	cmp	r3, #0
 8008376:	d106      	bne.n	8008386 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2200      	movs	r2, #0
 800837c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f7fc ff63 	bl	800524c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2202      	movs	r2, #2
 800838a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	689b      	ldr	r3, [r3, #8]
 8008394:	687a      	ldr	r2, [r7, #4]
 8008396:	6812      	ldr	r2, [r2, #0]
 8008398:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800839c:	f023 0307 	bic.w	r3, r3, #7
 80083a0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681a      	ldr	r2, [r3, #0]
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	3304      	adds	r3, #4
 80083aa:	4619      	mov	r1, r3
 80083ac:	4610      	mov	r0, r2
 80083ae:	f000 f9c1 	bl	8008734 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	689b      	ldr	r3, [r3, #8]
 80083b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	699b      	ldr	r3, [r3, #24]
 80083c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	6a1b      	ldr	r3, [r3, #32]
 80083c8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	697a      	ldr	r2, [r7, #20]
 80083d0:	4313      	orrs	r3, r2
 80083d2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083da:	f023 0303 	bic.w	r3, r3, #3
 80083de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	689a      	ldr	r2, [r3, #8]
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	699b      	ldr	r3, [r3, #24]
 80083e8:	021b      	lsls	r3, r3, #8
 80083ea:	4313      	orrs	r3, r2
 80083ec:	693a      	ldr	r2, [r7, #16]
 80083ee:	4313      	orrs	r3, r2
 80083f0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80083f8:	f023 030c 	bic.w	r3, r3, #12
 80083fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008404:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008408:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	68da      	ldr	r2, [r3, #12]
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	69db      	ldr	r3, [r3, #28]
 8008412:	021b      	lsls	r3, r3, #8
 8008414:	4313      	orrs	r3, r2
 8008416:	693a      	ldr	r2, [r7, #16]
 8008418:	4313      	orrs	r3, r2
 800841a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	691b      	ldr	r3, [r3, #16]
 8008420:	011a      	lsls	r2, r3, #4
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	6a1b      	ldr	r3, [r3, #32]
 8008426:	031b      	lsls	r3, r3, #12
 8008428:	4313      	orrs	r3, r2
 800842a:	693a      	ldr	r2, [r7, #16]
 800842c:	4313      	orrs	r3, r2
 800842e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008436:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	685a      	ldr	r2, [r3, #4]
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	695b      	ldr	r3, [r3, #20]
 8008440:	011b      	lsls	r3, r3, #4
 8008442:	4313      	orrs	r3, r2
 8008444:	68fa      	ldr	r2, [r7, #12]
 8008446:	4313      	orrs	r3, r2
 8008448:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	697a      	ldr	r2, [r7, #20]
 8008450:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	693a      	ldr	r2, [r7, #16]
 8008458:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	68fa      	ldr	r2, [r7, #12]
 8008460:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2201      	movs	r2, #1
 8008466:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2201      	movs	r2, #1
 800846e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2201      	movs	r2, #1
 8008476:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2201      	movs	r2, #1
 800847e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2201      	movs	r2, #1
 8008486:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2201      	movs	r2, #1
 800848e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008492:	2300      	movs	r3, #0
}
 8008494:	4618      	mov	r0, r3
 8008496:	3718      	adds	r7, #24
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}

0800849c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b084      	sub	sp, #16
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
 80084a4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80084ac:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80084b4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80084bc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80084c4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d110      	bne.n	80084ee <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80084cc:	7bfb      	ldrb	r3, [r7, #15]
 80084ce:	2b01      	cmp	r3, #1
 80084d0:	d102      	bne.n	80084d8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80084d2:	7b7b      	ldrb	r3, [r7, #13]
 80084d4:	2b01      	cmp	r3, #1
 80084d6:	d001      	beq.n	80084dc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80084d8:	2301      	movs	r3, #1
 80084da:	e069      	b.n	80085b0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2202      	movs	r2, #2
 80084e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2202      	movs	r2, #2
 80084e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80084ec:	e031      	b.n	8008552 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	2b04      	cmp	r3, #4
 80084f2:	d110      	bne.n	8008516 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80084f4:	7bbb      	ldrb	r3, [r7, #14]
 80084f6:	2b01      	cmp	r3, #1
 80084f8:	d102      	bne.n	8008500 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80084fa:	7b3b      	ldrb	r3, [r7, #12]
 80084fc:	2b01      	cmp	r3, #1
 80084fe:	d001      	beq.n	8008504 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008500:	2301      	movs	r3, #1
 8008502:	e055      	b.n	80085b0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2202      	movs	r2, #2
 8008508:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2202      	movs	r2, #2
 8008510:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008514:	e01d      	b.n	8008552 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008516:	7bfb      	ldrb	r3, [r7, #15]
 8008518:	2b01      	cmp	r3, #1
 800851a:	d108      	bne.n	800852e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800851c:	7bbb      	ldrb	r3, [r7, #14]
 800851e:	2b01      	cmp	r3, #1
 8008520:	d105      	bne.n	800852e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008522:	7b7b      	ldrb	r3, [r7, #13]
 8008524:	2b01      	cmp	r3, #1
 8008526:	d102      	bne.n	800852e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008528:	7b3b      	ldrb	r3, [r7, #12]
 800852a:	2b01      	cmp	r3, #1
 800852c:	d001      	beq.n	8008532 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800852e:	2301      	movs	r3, #1
 8008530:	e03e      	b.n	80085b0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2202      	movs	r2, #2
 8008536:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2202      	movs	r2, #2
 800853e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2202      	movs	r2, #2
 8008546:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2202      	movs	r2, #2
 800854e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d003      	beq.n	8008560 <HAL_TIM_Encoder_Start+0xc4>
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	2b04      	cmp	r3, #4
 800855c:	d008      	beq.n	8008570 <HAL_TIM_Encoder_Start+0xd4>
 800855e:	e00f      	b.n	8008580 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	2201      	movs	r2, #1
 8008566:	2100      	movs	r1, #0
 8008568:	4618      	mov	r0, r3
 800856a:	f000 facd 	bl	8008b08 <TIM_CCxChannelCmd>
      break;
 800856e:	e016      	b.n	800859e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	2201      	movs	r2, #1
 8008576:	2104      	movs	r1, #4
 8008578:	4618      	mov	r0, r3
 800857a:	f000 fac5 	bl	8008b08 <TIM_CCxChannelCmd>
      break;
 800857e:	e00e      	b.n	800859e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	2201      	movs	r2, #1
 8008586:	2100      	movs	r1, #0
 8008588:	4618      	mov	r0, r3
 800858a:	f000 fabd 	bl	8008b08 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	2201      	movs	r2, #1
 8008594:	2104      	movs	r1, #4
 8008596:	4618      	mov	r0, r3
 8008598:	f000 fab6 	bl	8008b08 <TIM_CCxChannelCmd>
      break;
 800859c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	681a      	ldr	r2, [r3, #0]
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f042 0201 	orr.w	r2, r2, #1
 80085ac:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80085ae:	2300      	movs	r3, #0
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	3710      	adds	r7, #16
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}

080085b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b084      	sub	sp, #16
 80085bc:	af00      	add	r7, sp, #0
 80085be:	60f8      	str	r0, [r7, #12]
 80085c0:	60b9      	str	r1, [r7, #8]
 80085c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085ca:	2b01      	cmp	r3, #1
 80085cc:	d101      	bne.n	80085d2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80085ce:	2302      	movs	r3, #2
 80085d0:	e0ac      	b.n	800872c <HAL_TIM_PWM_ConfigChannel+0x174>
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	2201      	movs	r2, #1
 80085d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2b0c      	cmp	r3, #12
 80085de:	f200 809f 	bhi.w	8008720 <HAL_TIM_PWM_ConfigChannel+0x168>
 80085e2:	a201      	add	r2, pc, #4	; (adr r2, 80085e8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80085e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085e8:	0800861d 	.word	0x0800861d
 80085ec:	08008721 	.word	0x08008721
 80085f0:	08008721 	.word	0x08008721
 80085f4:	08008721 	.word	0x08008721
 80085f8:	0800865d 	.word	0x0800865d
 80085fc:	08008721 	.word	0x08008721
 8008600:	08008721 	.word	0x08008721
 8008604:	08008721 	.word	0x08008721
 8008608:	0800869f 	.word	0x0800869f
 800860c:	08008721 	.word	0x08008721
 8008610:	08008721 	.word	0x08008721
 8008614:	08008721 	.word	0x08008721
 8008618:	080086df 	.word	0x080086df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	68b9      	ldr	r1, [r7, #8]
 8008622:	4618      	mov	r0, r3
 8008624:	f000 f8e8 	bl	80087f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	699a      	ldr	r2, [r3, #24]
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f042 0208 	orr.w	r2, r2, #8
 8008636:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	699a      	ldr	r2, [r3, #24]
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f022 0204 	bic.w	r2, r2, #4
 8008646:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	6999      	ldr	r1, [r3, #24]
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	691a      	ldr	r2, [r3, #16]
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	430a      	orrs	r2, r1
 8008658:	619a      	str	r2, [r3, #24]
      break;
 800865a:	e062      	b.n	8008722 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	68b9      	ldr	r1, [r7, #8]
 8008662:	4618      	mov	r0, r3
 8008664:	f000 f92e 	bl	80088c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	699a      	ldr	r2, [r3, #24]
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008676:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	699a      	ldr	r2, [r3, #24]
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008686:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	6999      	ldr	r1, [r3, #24]
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	691b      	ldr	r3, [r3, #16]
 8008692:	021a      	lsls	r2, r3, #8
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	430a      	orrs	r2, r1
 800869a:	619a      	str	r2, [r3, #24]
      break;
 800869c:	e041      	b.n	8008722 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	68b9      	ldr	r1, [r7, #8]
 80086a4:	4618      	mov	r0, r3
 80086a6:	f000 f977 	bl	8008998 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	69da      	ldr	r2, [r3, #28]
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f042 0208 	orr.w	r2, r2, #8
 80086b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	69da      	ldr	r2, [r3, #28]
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f022 0204 	bic.w	r2, r2, #4
 80086c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	69d9      	ldr	r1, [r3, #28]
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	691a      	ldr	r2, [r3, #16]
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	430a      	orrs	r2, r1
 80086da:	61da      	str	r2, [r3, #28]
      break;
 80086dc:	e021      	b.n	8008722 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	68b9      	ldr	r1, [r7, #8]
 80086e4:	4618      	mov	r0, r3
 80086e6:	f000 f9c1 	bl	8008a6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	69da      	ldr	r2, [r3, #28]
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80086f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	69da      	ldr	r2, [r3, #28]
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008708:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	69d9      	ldr	r1, [r3, #28]
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	691b      	ldr	r3, [r3, #16]
 8008714:	021a      	lsls	r2, r3, #8
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	430a      	orrs	r2, r1
 800871c:	61da      	str	r2, [r3, #28]
      break;
 800871e:	e000      	b.n	8008722 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8008720:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	2200      	movs	r2, #0
 8008726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800872a:	2300      	movs	r3, #0
}
 800872c:	4618      	mov	r0, r3
 800872e:	3710      	adds	r7, #16
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}

08008734 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008734:	b480      	push	{r7}
 8008736:	b085      	sub	sp, #20
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
 800873c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	4a29      	ldr	r2, [pc, #164]	; (80087ec <TIM_Base_SetConfig+0xb8>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d00b      	beq.n	8008764 <TIM_Base_SetConfig+0x30>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008752:	d007      	beq.n	8008764 <TIM_Base_SetConfig+0x30>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	4a26      	ldr	r2, [pc, #152]	; (80087f0 <TIM_Base_SetConfig+0xbc>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d003      	beq.n	8008764 <TIM_Base_SetConfig+0x30>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	4a25      	ldr	r2, [pc, #148]	; (80087f4 <TIM_Base_SetConfig+0xc0>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d108      	bne.n	8008776 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800876a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	685b      	ldr	r3, [r3, #4]
 8008770:	68fa      	ldr	r2, [r7, #12]
 8008772:	4313      	orrs	r3, r2
 8008774:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	4a1c      	ldr	r2, [pc, #112]	; (80087ec <TIM_Base_SetConfig+0xb8>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d00b      	beq.n	8008796 <TIM_Base_SetConfig+0x62>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008784:	d007      	beq.n	8008796 <TIM_Base_SetConfig+0x62>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	4a19      	ldr	r2, [pc, #100]	; (80087f0 <TIM_Base_SetConfig+0xbc>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d003      	beq.n	8008796 <TIM_Base_SetConfig+0x62>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	4a18      	ldr	r2, [pc, #96]	; (80087f4 <TIM_Base_SetConfig+0xc0>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d108      	bne.n	80087a8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800879c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	68db      	ldr	r3, [r3, #12]
 80087a2:	68fa      	ldr	r2, [r7, #12]
 80087a4:	4313      	orrs	r3, r2
 80087a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	695b      	ldr	r3, [r3, #20]
 80087b2:	4313      	orrs	r3, r2
 80087b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	68fa      	ldr	r2, [r7, #12]
 80087ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	689a      	ldr	r2, [r3, #8]
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	681a      	ldr	r2, [r3, #0]
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	4a07      	ldr	r2, [pc, #28]	; (80087ec <TIM_Base_SetConfig+0xb8>)
 80087d0:	4293      	cmp	r3, r2
 80087d2:	d103      	bne.n	80087dc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	691a      	ldr	r2, [r3, #16]
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2201      	movs	r2, #1
 80087e0:	615a      	str	r2, [r3, #20]
}
 80087e2:	bf00      	nop
 80087e4:	3714      	adds	r7, #20
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bc80      	pop	{r7}
 80087ea:	4770      	bx	lr
 80087ec:	40012c00 	.word	0x40012c00
 80087f0:	40000400 	.word	0x40000400
 80087f4:	40000800 	.word	0x40000800

080087f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80087f8:	b480      	push	{r7}
 80087fa:	b087      	sub	sp, #28
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
 8008800:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6a1b      	ldr	r3, [r3, #32]
 8008806:	f023 0201 	bic.w	r2, r3, #1
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6a1b      	ldr	r3, [r3, #32]
 8008812:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	685b      	ldr	r3, [r3, #4]
 8008818:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	699b      	ldr	r3, [r3, #24]
 800881e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008826:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	f023 0303 	bic.w	r3, r3, #3
 800882e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	68fa      	ldr	r2, [r7, #12]
 8008836:	4313      	orrs	r3, r2
 8008838:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800883a:	697b      	ldr	r3, [r7, #20]
 800883c:	f023 0302 	bic.w	r3, r3, #2
 8008840:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	689b      	ldr	r3, [r3, #8]
 8008846:	697a      	ldr	r2, [r7, #20]
 8008848:	4313      	orrs	r3, r2
 800884a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	4a1c      	ldr	r2, [pc, #112]	; (80088c0 <TIM_OC1_SetConfig+0xc8>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d10c      	bne.n	800886e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	f023 0308 	bic.w	r3, r3, #8
 800885a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	68db      	ldr	r3, [r3, #12]
 8008860:	697a      	ldr	r2, [r7, #20]
 8008862:	4313      	orrs	r3, r2
 8008864:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	f023 0304 	bic.w	r3, r3, #4
 800886c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	4a13      	ldr	r2, [pc, #76]	; (80088c0 <TIM_OC1_SetConfig+0xc8>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d111      	bne.n	800889a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008876:	693b      	ldr	r3, [r7, #16]
 8008878:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800887c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800887e:	693b      	ldr	r3, [r7, #16]
 8008880:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008884:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	695b      	ldr	r3, [r3, #20]
 800888a:	693a      	ldr	r2, [r7, #16]
 800888c:	4313      	orrs	r3, r2
 800888e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	699b      	ldr	r3, [r3, #24]
 8008894:	693a      	ldr	r2, [r7, #16]
 8008896:	4313      	orrs	r3, r2
 8008898:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	693a      	ldr	r2, [r7, #16]
 800889e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	68fa      	ldr	r2, [r7, #12]
 80088a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	685a      	ldr	r2, [r3, #4]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	697a      	ldr	r2, [r7, #20]
 80088b2:	621a      	str	r2, [r3, #32]
}
 80088b4:	bf00      	nop
 80088b6:	371c      	adds	r7, #28
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bc80      	pop	{r7}
 80088bc:	4770      	bx	lr
 80088be:	bf00      	nop
 80088c0:	40012c00 	.word	0x40012c00

080088c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80088c4:	b480      	push	{r7}
 80088c6:	b087      	sub	sp, #28
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
 80088cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6a1b      	ldr	r3, [r3, #32]
 80088d2:	f023 0210 	bic.w	r2, r3, #16
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6a1b      	ldr	r3, [r3, #32]
 80088de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	685b      	ldr	r3, [r3, #4]
 80088e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	699b      	ldr	r3, [r3, #24]
 80088ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	021b      	lsls	r3, r3, #8
 8008902:	68fa      	ldr	r2, [r7, #12]
 8008904:	4313      	orrs	r3, r2
 8008906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	f023 0320 	bic.w	r3, r3, #32
 800890e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	689b      	ldr	r3, [r3, #8]
 8008914:	011b      	lsls	r3, r3, #4
 8008916:	697a      	ldr	r2, [r7, #20]
 8008918:	4313      	orrs	r3, r2
 800891a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	4a1d      	ldr	r2, [pc, #116]	; (8008994 <TIM_OC2_SetConfig+0xd0>)
 8008920:	4293      	cmp	r3, r2
 8008922:	d10d      	bne.n	8008940 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800892a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	68db      	ldr	r3, [r3, #12]
 8008930:	011b      	lsls	r3, r3, #4
 8008932:	697a      	ldr	r2, [r7, #20]
 8008934:	4313      	orrs	r3, r2
 8008936:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800893e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	4a14      	ldr	r2, [pc, #80]	; (8008994 <TIM_OC2_SetConfig+0xd0>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d113      	bne.n	8008970 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008948:	693b      	ldr	r3, [r7, #16]
 800894a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800894e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008950:	693b      	ldr	r3, [r7, #16]
 8008952:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008956:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	695b      	ldr	r3, [r3, #20]
 800895c:	009b      	lsls	r3, r3, #2
 800895e:	693a      	ldr	r2, [r7, #16]
 8008960:	4313      	orrs	r3, r2
 8008962:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	699b      	ldr	r3, [r3, #24]
 8008968:	009b      	lsls	r3, r3, #2
 800896a:	693a      	ldr	r2, [r7, #16]
 800896c:	4313      	orrs	r3, r2
 800896e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	693a      	ldr	r2, [r7, #16]
 8008974:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	68fa      	ldr	r2, [r7, #12]
 800897a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	685a      	ldr	r2, [r3, #4]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	697a      	ldr	r2, [r7, #20]
 8008988:	621a      	str	r2, [r3, #32]
}
 800898a:	bf00      	nop
 800898c:	371c      	adds	r7, #28
 800898e:	46bd      	mov	sp, r7
 8008990:	bc80      	pop	{r7}
 8008992:	4770      	bx	lr
 8008994:	40012c00 	.word	0x40012c00

08008998 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008998:	b480      	push	{r7}
 800899a:	b087      	sub	sp, #28
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
 80089a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6a1b      	ldr	r3, [r3, #32]
 80089a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6a1b      	ldr	r3, [r3, #32]
 80089b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	685b      	ldr	r3, [r3, #4]
 80089b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	69db      	ldr	r3, [r3, #28]
 80089be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	f023 0303 	bic.w	r3, r3, #3
 80089ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	68fa      	ldr	r2, [r7, #12]
 80089d6:	4313      	orrs	r3, r2
 80089d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80089e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	689b      	ldr	r3, [r3, #8]
 80089e6:	021b      	lsls	r3, r3, #8
 80089e8:	697a      	ldr	r2, [r7, #20]
 80089ea:	4313      	orrs	r3, r2
 80089ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	4a1d      	ldr	r2, [pc, #116]	; (8008a68 <TIM_OC3_SetConfig+0xd0>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d10d      	bne.n	8008a12 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80089f6:	697b      	ldr	r3, [r7, #20]
 80089f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80089fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	68db      	ldr	r3, [r3, #12]
 8008a02:	021b      	lsls	r3, r3, #8
 8008a04:	697a      	ldr	r2, [r7, #20]
 8008a06:	4313      	orrs	r3, r2
 8008a08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008a10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	4a14      	ldr	r2, [pc, #80]	; (8008a68 <TIM_OC3_SetConfig+0xd0>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d113      	bne.n	8008a42 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008a1a:	693b      	ldr	r3, [r7, #16]
 8008a1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008a22:	693b      	ldr	r3, [r7, #16]
 8008a24:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008a28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	695b      	ldr	r3, [r3, #20]
 8008a2e:	011b      	lsls	r3, r3, #4
 8008a30:	693a      	ldr	r2, [r7, #16]
 8008a32:	4313      	orrs	r3, r2
 8008a34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	699b      	ldr	r3, [r3, #24]
 8008a3a:	011b      	lsls	r3, r3, #4
 8008a3c:	693a      	ldr	r2, [r7, #16]
 8008a3e:	4313      	orrs	r3, r2
 8008a40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	693a      	ldr	r2, [r7, #16]
 8008a46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	68fa      	ldr	r2, [r7, #12]
 8008a4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	685a      	ldr	r2, [r3, #4]
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	697a      	ldr	r2, [r7, #20]
 8008a5a:	621a      	str	r2, [r3, #32]
}
 8008a5c:	bf00      	nop
 8008a5e:	371c      	adds	r7, #28
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bc80      	pop	{r7}
 8008a64:	4770      	bx	lr
 8008a66:	bf00      	nop
 8008a68:	40012c00 	.word	0x40012c00

08008a6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b087      	sub	sp, #28
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
 8008a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6a1b      	ldr	r3, [r3, #32]
 8008a7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6a1b      	ldr	r3, [r3, #32]
 8008a86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	69db      	ldr	r3, [r3, #28]
 8008a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008aa2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	021b      	lsls	r3, r3, #8
 8008aaa:	68fa      	ldr	r2, [r7, #12]
 8008aac:	4313      	orrs	r3, r2
 8008aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008ab6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	689b      	ldr	r3, [r3, #8]
 8008abc:	031b      	lsls	r3, r3, #12
 8008abe:	693a      	ldr	r2, [r7, #16]
 8008ac0:	4313      	orrs	r3, r2
 8008ac2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	4a0f      	ldr	r2, [pc, #60]	; (8008b04 <TIM_OC4_SetConfig+0x98>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d109      	bne.n	8008ae0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ad2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	695b      	ldr	r3, [r3, #20]
 8008ad8:	019b      	lsls	r3, r3, #6
 8008ada:	697a      	ldr	r2, [r7, #20]
 8008adc:	4313      	orrs	r3, r2
 8008ade:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	697a      	ldr	r2, [r7, #20]
 8008ae4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	68fa      	ldr	r2, [r7, #12]
 8008aea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	685a      	ldr	r2, [r3, #4]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	693a      	ldr	r2, [r7, #16]
 8008af8:	621a      	str	r2, [r3, #32]
}
 8008afa:	bf00      	nop
 8008afc:	371c      	adds	r7, #28
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bc80      	pop	{r7}
 8008b02:	4770      	bx	lr
 8008b04:	40012c00 	.word	0x40012c00

08008b08 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b087      	sub	sp, #28
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	60f8      	str	r0, [r7, #12]
 8008b10:	60b9      	str	r1, [r7, #8]
 8008b12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	f003 031f 	and.w	r3, r3, #31
 8008b1a:	2201      	movs	r2, #1
 8008b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8008b20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	6a1a      	ldr	r2, [r3, #32]
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	43db      	mvns	r3, r3
 8008b2a:	401a      	ands	r2, r3
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	6a1a      	ldr	r2, [r3, #32]
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	f003 031f 	and.w	r3, r3, #31
 8008b3a:	6879      	ldr	r1, [r7, #4]
 8008b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8008b40:	431a      	orrs	r2, r3
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	621a      	str	r2, [r3, #32]
}
 8008b46:	bf00      	nop
 8008b48:	371c      	adds	r7, #28
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bc80      	pop	{r7}
 8008b4e:	4770      	bx	lr

08008b50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b085      	sub	sp, #20
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
 8008b58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b60:	2b01      	cmp	r3, #1
 8008b62:	d101      	bne.n	8008b68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008b64:	2302      	movs	r3, #2
 8008b66:	e046      	b.n	8008bf6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2201      	movs	r2, #1
 8008b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2202      	movs	r2, #2
 8008b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	685b      	ldr	r3, [r3, #4]
 8008b7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	689b      	ldr	r3, [r3, #8]
 8008b86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	68fa      	ldr	r2, [r7, #12]
 8008b96:	4313      	orrs	r3, r2
 8008b98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	68fa      	ldr	r2, [r7, #12]
 8008ba0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	4a16      	ldr	r2, [pc, #88]	; (8008c00 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d00e      	beq.n	8008bca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bb4:	d009      	beq.n	8008bca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	4a12      	ldr	r2, [pc, #72]	; (8008c04 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d004      	beq.n	8008bca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	4a10      	ldr	r2, [pc, #64]	; (8008c08 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d10c      	bne.n	8008be4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008bd0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	68ba      	ldr	r2, [r7, #8]
 8008bd8:	4313      	orrs	r3, r2
 8008bda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	68ba      	ldr	r2, [r7, #8]
 8008be2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2201      	movs	r2, #1
 8008be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008bf4:	2300      	movs	r3, #0
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	3714      	adds	r7, #20
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bc80      	pop	{r7}
 8008bfe:	4770      	bx	lr
 8008c00:	40012c00 	.word	0x40012c00
 8008c04:	40000400 	.word	0x40000400
 8008c08:	40000800 	.word	0x40000800

08008c0c <pow>:
 8008c0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c10:	4614      	mov	r4, r2
 8008c12:	461d      	mov	r5, r3
 8008c14:	4680      	mov	r8, r0
 8008c16:	4689      	mov	r9, r1
 8008c18:	f000 f89e 	bl	8008d58 <__ieee754_pow>
 8008c1c:	4622      	mov	r2, r4
 8008c1e:	4606      	mov	r6, r0
 8008c20:	460f      	mov	r7, r1
 8008c22:	462b      	mov	r3, r5
 8008c24:	4620      	mov	r0, r4
 8008c26:	4629      	mov	r1, r5
 8008c28:	f7f7 fee8 	bl	80009fc <__aeabi_dcmpun>
 8008c2c:	bbc8      	cbnz	r0, 8008ca2 <pow+0x96>
 8008c2e:	2200      	movs	r2, #0
 8008c30:	2300      	movs	r3, #0
 8008c32:	4640      	mov	r0, r8
 8008c34:	4649      	mov	r1, r9
 8008c36:	f7f7 feaf 	bl	8000998 <__aeabi_dcmpeq>
 8008c3a:	b1b8      	cbz	r0, 8008c6c <pow+0x60>
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	2300      	movs	r3, #0
 8008c40:	4620      	mov	r0, r4
 8008c42:	4629      	mov	r1, r5
 8008c44:	f7f7 fea8 	bl	8000998 <__aeabi_dcmpeq>
 8008c48:	2800      	cmp	r0, #0
 8008c4a:	d141      	bne.n	8008cd0 <pow+0xc4>
 8008c4c:	4620      	mov	r0, r4
 8008c4e:	4629      	mov	r1, r5
 8008c50:	f001 f892 	bl	8009d78 <finite>
 8008c54:	b328      	cbz	r0, 8008ca2 <pow+0x96>
 8008c56:	2200      	movs	r2, #0
 8008c58:	2300      	movs	r3, #0
 8008c5a:	4620      	mov	r0, r4
 8008c5c:	4629      	mov	r1, r5
 8008c5e:	f7f7 fea5 	bl	80009ac <__aeabi_dcmplt>
 8008c62:	b1f0      	cbz	r0, 8008ca2 <pow+0x96>
 8008c64:	f001 fa22 	bl	800a0ac <__errno>
 8008c68:	2322      	movs	r3, #34	; 0x22
 8008c6a:	e019      	b.n	8008ca0 <pow+0x94>
 8008c6c:	4630      	mov	r0, r6
 8008c6e:	4639      	mov	r1, r7
 8008c70:	f001 f882 	bl	8009d78 <finite>
 8008c74:	b9c8      	cbnz	r0, 8008caa <pow+0x9e>
 8008c76:	4640      	mov	r0, r8
 8008c78:	4649      	mov	r1, r9
 8008c7a:	f001 f87d 	bl	8009d78 <finite>
 8008c7e:	b1a0      	cbz	r0, 8008caa <pow+0x9e>
 8008c80:	4620      	mov	r0, r4
 8008c82:	4629      	mov	r1, r5
 8008c84:	f001 f878 	bl	8009d78 <finite>
 8008c88:	b178      	cbz	r0, 8008caa <pow+0x9e>
 8008c8a:	4632      	mov	r2, r6
 8008c8c:	463b      	mov	r3, r7
 8008c8e:	4630      	mov	r0, r6
 8008c90:	4639      	mov	r1, r7
 8008c92:	f7f7 feb3 	bl	80009fc <__aeabi_dcmpun>
 8008c96:	2800      	cmp	r0, #0
 8008c98:	d0e4      	beq.n	8008c64 <pow+0x58>
 8008c9a:	f001 fa07 	bl	800a0ac <__errno>
 8008c9e:	2321      	movs	r3, #33	; 0x21
 8008ca0:	6003      	str	r3, [r0, #0]
 8008ca2:	4630      	mov	r0, r6
 8008ca4:	4639      	mov	r1, r7
 8008ca6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008caa:	2200      	movs	r2, #0
 8008cac:	2300      	movs	r3, #0
 8008cae:	4630      	mov	r0, r6
 8008cb0:	4639      	mov	r1, r7
 8008cb2:	f7f7 fe71 	bl	8000998 <__aeabi_dcmpeq>
 8008cb6:	2800      	cmp	r0, #0
 8008cb8:	d0f3      	beq.n	8008ca2 <pow+0x96>
 8008cba:	4640      	mov	r0, r8
 8008cbc:	4649      	mov	r1, r9
 8008cbe:	f001 f85b 	bl	8009d78 <finite>
 8008cc2:	2800      	cmp	r0, #0
 8008cc4:	d0ed      	beq.n	8008ca2 <pow+0x96>
 8008cc6:	4620      	mov	r0, r4
 8008cc8:	4629      	mov	r1, r5
 8008cca:	f001 f855 	bl	8009d78 <finite>
 8008cce:	e7c8      	b.n	8008c62 <pow+0x56>
 8008cd0:	2600      	movs	r6, #0
 8008cd2:	4f01      	ldr	r7, [pc, #4]	; (8008cd8 <pow+0xcc>)
 8008cd4:	e7e5      	b.n	8008ca2 <pow+0x96>
 8008cd6:	bf00      	nop
 8008cd8:	3ff00000 	.word	0x3ff00000

08008cdc <asinf>:
 8008cdc:	b538      	push	{r3, r4, r5, lr}
 8008cde:	4604      	mov	r4, r0
 8008ce0:	f000 fe00 	bl	80098e4 <__ieee754_asinf>
 8008ce4:	4621      	mov	r1, r4
 8008ce6:	4605      	mov	r5, r0
 8008ce8:	4620      	mov	r0, r4
 8008cea:	f7f8 f9e1 	bl	80010b0 <__aeabi_fcmpun>
 8008cee:	b980      	cbnz	r0, 8008d12 <asinf+0x36>
 8008cf0:	4620      	mov	r0, r4
 8008cf2:	f001 f9d3 	bl	800a09c <fabsf>
 8008cf6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008cfa:	f7f8 f9cf 	bl	800109c <__aeabi_fcmpgt>
 8008cfe:	b140      	cbz	r0, 8008d12 <asinf+0x36>
 8008d00:	f001 f9d4 	bl	800a0ac <__errno>
 8008d04:	2321      	movs	r3, #33	; 0x21
 8008d06:	6003      	str	r3, [r0, #0]
 8008d08:	4803      	ldr	r0, [pc, #12]	; (8008d18 <asinf+0x3c>)
 8008d0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d0e:	f001 b9c9 	b.w	800a0a4 <nanf>
 8008d12:	4628      	mov	r0, r5
 8008d14:	bd38      	pop	{r3, r4, r5, pc}
 8008d16:	bf00      	nop
 8008d18:	0800b371 	.word	0x0800b371

08008d1c <atan2f>:
 8008d1c:	f000 bf26 	b.w	8009b6c <__ieee754_atan2f>

08008d20 <sqrtf>:
 8008d20:	b538      	push	{r3, r4, r5, lr}
 8008d22:	4605      	mov	r5, r0
 8008d24:	f000 ffa8 	bl	8009c78 <__ieee754_sqrtf>
 8008d28:	4629      	mov	r1, r5
 8008d2a:	4604      	mov	r4, r0
 8008d2c:	4628      	mov	r0, r5
 8008d2e:	f7f8 f9bf 	bl	80010b0 <__aeabi_fcmpun>
 8008d32:	b968      	cbnz	r0, 8008d50 <sqrtf+0x30>
 8008d34:	2100      	movs	r1, #0
 8008d36:	4628      	mov	r0, r5
 8008d38:	f7f8 f992 	bl	8001060 <__aeabi_fcmplt>
 8008d3c:	b140      	cbz	r0, 8008d50 <sqrtf+0x30>
 8008d3e:	f001 f9b5 	bl	800a0ac <__errno>
 8008d42:	2321      	movs	r3, #33	; 0x21
 8008d44:	2100      	movs	r1, #0
 8008d46:	6003      	str	r3, [r0, #0]
 8008d48:	4608      	mov	r0, r1
 8008d4a:	f7f8 f89f 	bl	8000e8c <__aeabi_fdiv>
 8008d4e:	4604      	mov	r4, r0
 8008d50:	4620      	mov	r0, r4
 8008d52:	bd38      	pop	{r3, r4, r5, pc}
 8008d54:	0000      	movs	r0, r0
	...

08008d58 <__ieee754_pow>:
 8008d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d5c:	b093      	sub	sp, #76	; 0x4c
 8008d5e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008d62:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 8008d66:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8008d6a:	4689      	mov	r9, r1
 8008d6c:	ea56 0102 	orrs.w	r1, r6, r2
 8008d70:	4680      	mov	r8, r0
 8008d72:	d111      	bne.n	8008d98 <__ieee754_pow+0x40>
 8008d74:	1803      	adds	r3, r0, r0
 8008d76:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8008d7a:	4152      	adcs	r2, r2
 8008d7c:	4299      	cmp	r1, r3
 8008d7e:	4b82      	ldr	r3, [pc, #520]	; (8008f88 <__ieee754_pow+0x230>)
 8008d80:	4193      	sbcs	r3, r2
 8008d82:	f080 84b9 	bcs.w	80096f8 <__ieee754_pow+0x9a0>
 8008d86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d8a:	4640      	mov	r0, r8
 8008d8c:	4649      	mov	r1, r9
 8008d8e:	f7f7 f9e5 	bl	800015c <__adddf3>
 8008d92:	4683      	mov	fp, r0
 8008d94:	468c      	mov	ip, r1
 8008d96:	e06f      	b.n	8008e78 <__ieee754_pow+0x120>
 8008d98:	4b7c      	ldr	r3, [pc, #496]	; (8008f8c <__ieee754_pow+0x234>)
 8008d9a:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8008d9e:	429c      	cmp	r4, r3
 8008da0:	464d      	mov	r5, r9
 8008da2:	4682      	mov	sl, r0
 8008da4:	dc06      	bgt.n	8008db4 <__ieee754_pow+0x5c>
 8008da6:	d101      	bne.n	8008dac <__ieee754_pow+0x54>
 8008da8:	2800      	cmp	r0, #0
 8008daa:	d1ec      	bne.n	8008d86 <__ieee754_pow+0x2e>
 8008dac:	429e      	cmp	r6, r3
 8008dae:	dc01      	bgt.n	8008db4 <__ieee754_pow+0x5c>
 8008db0:	d10f      	bne.n	8008dd2 <__ieee754_pow+0x7a>
 8008db2:	b172      	cbz	r2, 8008dd2 <__ieee754_pow+0x7a>
 8008db4:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8008db8:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8008dbc:	ea55 050a 	orrs.w	r5, r5, sl
 8008dc0:	d1e1      	bne.n	8008d86 <__ieee754_pow+0x2e>
 8008dc2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008dc6:	18db      	adds	r3, r3, r3
 8008dc8:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8008dcc:	4152      	adcs	r2, r2
 8008dce:	429d      	cmp	r5, r3
 8008dd0:	e7d5      	b.n	8008d7e <__ieee754_pow+0x26>
 8008dd2:	2d00      	cmp	r5, #0
 8008dd4:	da39      	bge.n	8008e4a <__ieee754_pow+0xf2>
 8008dd6:	4b6e      	ldr	r3, [pc, #440]	; (8008f90 <__ieee754_pow+0x238>)
 8008dd8:	429e      	cmp	r6, r3
 8008dda:	dc52      	bgt.n	8008e82 <__ieee754_pow+0x12a>
 8008ddc:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8008de0:	429e      	cmp	r6, r3
 8008de2:	f340 849c 	ble.w	800971e <__ieee754_pow+0x9c6>
 8008de6:	1533      	asrs	r3, r6, #20
 8008de8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008dec:	2b14      	cmp	r3, #20
 8008dee:	dd0f      	ble.n	8008e10 <__ieee754_pow+0xb8>
 8008df0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8008df4:	fa22 f103 	lsr.w	r1, r2, r3
 8008df8:	fa01 f303 	lsl.w	r3, r1, r3
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	f040 848e 	bne.w	800971e <__ieee754_pow+0x9c6>
 8008e02:	f001 0101 	and.w	r1, r1, #1
 8008e06:	f1c1 0302 	rsb	r3, r1, #2
 8008e0a:	9300      	str	r3, [sp, #0]
 8008e0c:	b182      	cbz	r2, 8008e30 <__ieee754_pow+0xd8>
 8008e0e:	e05d      	b.n	8008ecc <__ieee754_pow+0x174>
 8008e10:	2a00      	cmp	r2, #0
 8008e12:	d159      	bne.n	8008ec8 <__ieee754_pow+0x170>
 8008e14:	f1c3 0314 	rsb	r3, r3, #20
 8008e18:	fa46 f103 	asr.w	r1, r6, r3
 8008e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8008e20:	42b3      	cmp	r3, r6
 8008e22:	f040 8479 	bne.w	8009718 <__ieee754_pow+0x9c0>
 8008e26:	f001 0101 	and.w	r1, r1, #1
 8008e2a:	f1c1 0302 	rsb	r3, r1, #2
 8008e2e:	9300      	str	r3, [sp, #0]
 8008e30:	4b58      	ldr	r3, [pc, #352]	; (8008f94 <__ieee754_pow+0x23c>)
 8008e32:	429e      	cmp	r6, r3
 8008e34:	d132      	bne.n	8008e9c <__ieee754_pow+0x144>
 8008e36:	2f00      	cmp	r7, #0
 8008e38:	f280 846a 	bge.w	8009710 <__ieee754_pow+0x9b8>
 8008e3c:	4642      	mov	r2, r8
 8008e3e:	464b      	mov	r3, r9
 8008e40:	2000      	movs	r0, #0
 8008e42:	4954      	ldr	r1, [pc, #336]	; (8008f94 <__ieee754_pow+0x23c>)
 8008e44:	f7f7 fc6a 	bl	800071c <__aeabi_ddiv>
 8008e48:	e7a3      	b.n	8008d92 <__ieee754_pow+0x3a>
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	9300      	str	r3, [sp, #0]
 8008e4e:	2a00      	cmp	r2, #0
 8008e50:	d13c      	bne.n	8008ecc <__ieee754_pow+0x174>
 8008e52:	4b4e      	ldr	r3, [pc, #312]	; (8008f8c <__ieee754_pow+0x234>)
 8008e54:	429e      	cmp	r6, r3
 8008e56:	d1eb      	bne.n	8008e30 <__ieee754_pow+0xd8>
 8008e58:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8008e5c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8008e60:	ea53 030a 	orrs.w	r3, r3, sl
 8008e64:	f000 8448 	beq.w	80096f8 <__ieee754_pow+0x9a0>
 8008e68:	4b4b      	ldr	r3, [pc, #300]	; (8008f98 <__ieee754_pow+0x240>)
 8008e6a:	429c      	cmp	r4, r3
 8008e6c:	dd0b      	ble.n	8008e86 <__ieee754_pow+0x12e>
 8008e6e:	2f00      	cmp	r7, #0
 8008e70:	f2c0 8448 	blt.w	8009704 <__ieee754_pow+0x9ac>
 8008e74:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8008e78:	4658      	mov	r0, fp
 8008e7a:	4661      	mov	r1, ip
 8008e7c:	b013      	add	sp, #76	; 0x4c
 8008e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e82:	2302      	movs	r3, #2
 8008e84:	e7e2      	b.n	8008e4c <__ieee754_pow+0xf4>
 8008e86:	2f00      	cmp	r7, #0
 8008e88:	f04f 0b00 	mov.w	fp, #0
 8008e8c:	f04f 0c00 	mov.w	ip, #0
 8008e90:	daf2      	bge.n	8008e78 <__ieee754_pow+0x120>
 8008e92:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8008e96:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8008e9a:	e7ed      	b.n	8008e78 <__ieee754_pow+0x120>
 8008e9c:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8008ea0:	d106      	bne.n	8008eb0 <__ieee754_pow+0x158>
 8008ea2:	4642      	mov	r2, r8
 8008ea4:	464b      	mov	r3, r9
 8008ea6:	4640      	mov	r0, r8
 8008ea8:	4649      	mov	r1, r9
 8008eaa:	f7f7 fb0d 	bl	80004c8 <__aeabi_dmul>
 8008eae:	e770      	b.n	8008d92 <__ieee754_pow+0x3a>
 8008eb0:	4b3a      	ldr	r3, [pc, #232]	; (8008f9c <__ieee754_pow+0x244>)
 8008eb2:	429f      	cmp	r7, r3
 8008eb4:	d10a      	bne.n	8008ecc <__ieee754_pow+0x174>
 8008eb6:	2d00      	cmp	r5, #0
 8008eb8:	db08      	blt.n	8008ecc <__ieee754_pow+0x174>
 8008eba:	4640      	mov	r0, r8
 8008ebc:	4649      	mov	r1, r9
 8008ebe:	b013      	add	sp, #76	; 0x4c
 8008ec0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ec4:	f000 bc5e 	b.w	8009784 <__ieee754_sqrt>
 8008ec8:	2300      	movs	r3, #0
 8008eca:	9300      	str	r3, [sp, #0]
 8008ecc:	4640      	mov	r0, r8
 8008ece:	4649      	mov	r1, r9
 8008ed0:	f000 ff4f 	bl	8009d72 <fabs>
 8008ed4:	4683      	mov	fp, r0
 8008ed6:	468c      	mov	ip, r1
 8008ed8:	f1ba 0f00 	cmp.w	sl, #0
 8008edc:	d128      	bne.n	8008f30 <__ieee754_pow+0x1d8>
 8008ede:	b124      	cbz	r4, 8008eea <__ieee754_pow+0x192>
 8008ee0:	4b2c      	ldr	r3, [pc, #176]	; (8008f94 <__ieee754_pow+0x23c>)
 8008ee2:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8008ee6:	429a      	cmp	r2, r3
 8008ee8:	d122      	bne.n	8008f30 <__ieee754_pow+0x1d8>
 8008eea:	2f00      	cmp	r7, #0
 8008eec:	da07      	bge.n	8008efe <__ieee754_pow+0x1a6>
 8008eee:	465a      	mov	r2, fp
 8008ef0:	4663      	mov	r3, ip
 8008ef2:	2000      	movs	r0, #0
 8008ef4:	4927      	ldr	r1, [pc, #156]	; (8008f94 <__ieee754_pow+0x23c>)
 8008ef6:	f7f7 fc11 	bl	800071c <__aeabi_ddiv>
 8008efa:	4683      	mov	fp, r0
 8008efc:	468c      	mov	ip, r1
 8008efe:	2d00      	cmp	r5, #0
 8008f00:	daba      	bge.n	8008e78 <__ieee754_pow+0x120>
 8008f02:	9b00      	ldr	r3, [sp, #0]
 8008f04:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008f08:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008f0c:	4323      	orrs	r3, r4
 8008f0e:	d108      	bne.n	8008f22 <__ieee754_pow+0x1ca>
 8008f10:	465a      	mov	r2, fp
 8008f12:	4663      	mov	r3, ip
 8008f14:	4658      	mov	r0, fp
 8008f16:	4661      	mov	r1, ip
 8008f18:	f7f7 f91e 	bl	8000158 <__aeabi_dsub>
 8008f1c:	4602      	mov	r2, r0
 8008f1e:	460b      	mov	r3, r1
 8008f20:	e790      	b.n	8008e44 <__ieee754_pow+0xec>
 8008f22:	9b00      	ldr	r3, [sp, #0]
 8008f24:	2b01      	cmp	r3, #1
 8008f26:	d1a7      	bne.n	8008e78 <__ieee754_pow+0x120>
 8008f28:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8008f2c:	469c      	mov	ip, r3
 8008f2e:	e7a3      	b.n	8008e78 <__ieee754_pow+0x120>
 8008f30:	0feb      	lsrs	r3, r5, #31
 8008f32:	3b01      	subs	r3, #1
 8008f34:	930c      	str	r3, [sp, #48]	; 0x30
 8008f36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008f38:	9b00      	ldr	r3, [sp, #0]
 8008f3a:	4313      	orrs	r3, r2
 8008f3c:	d104      	bne.n	8008f48 <__ieee754_pow+0x1f0>
 8008f3e:	4642      	mov	r2, r8
 8008f40:	464b      	mov	r3, r9
 8008f42:	4640      	mov	r0, r8
 8008f44:	4649      	mov	r1, r9
 8008f46:	e7e7      	b.n	8008f18 <__ieee754_pow+0x1c0>
 8008f48:	4b15      	ldr	r3, [pc, #84]	; (8008fa0 <__ieee754_pow+0x248>)
 8008f4a:	429e      	cmp	r6, r3
 8008f4c:	f340 80f6 	ble.w	800913c <__ieee754_pow+0x3e4>
 8008f50:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8008f54:	429e      	cmp	r6, r3
 8008f56:	4b10      	ldr	r3, [pc, #64]	; (8008f98 <__ieee754_pow+0x240>)
 8008f58:	dd09      	ble.n	8008f6e <__ieee754_pow+0x216>
 8008f5a:	429c      	cmp	r4, r3
 8008f5c:	dc0c      	bgt.n	8008f78 <__ieee754_pow+0x220>
 8008f5e:	2f00      	cmp	r7, #0
 8008f60:	da0c      	bge.n	8008f7c <__ieee754_pow+0x224>
 8008f62:	2000      	movs	r0, #0
 8008f64:	b013      	add	sp, #76	; 0x4c
 8008f66:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f6a:	f000 befd 	b.w	8009d68 <__math_oflow>
 8008f6e:	429c      	cmp	r4, r3
 8008f70:	dbf5      	blt.n	8008f5e <__ieee754_pow+0x206>
 8008f72:	4b08      	ldr	r3, [pc, #32]	; (8008f94 <__ieee754_pow+0x23c>)
 8008f74:	429c      	cmp	r4, r3
 8008f76:	dd15      	ble.n	8008fa4 <__ieee754_pow+0x24c>
 8008f78:	2f00      	cmp	r7, #0
 8008f7a:	dcf2      	bgt.n	8008f62 <__ieee754_pow+0x20a>
 8008f7c:	2000      	movs	r0, #0
 8008f7e:	b013      	add	sp, #76	; 0x4c
 8008f80:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f84:	f000 beeb 	b.w	8009d5e <__math_uflow>
 8008f88:	fff00000 	.word	0xfff00000
 8008f8c:	7ff00000 	.word	0x7ff00000
 8008f90:	433fffff 	.word	0x433fffff
 8008f94:	3ff00000 	.word	0x3ff00000
 8008f98:	3fefffff 	.word	0x3fefffff
 8008f9c:	3fe00000 	.word	0x3fe00000
 8008fa0:	41e00000 	.word	0x41e00000
 8008fa4:	4661      	mov	r1, ip
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	4658      	mov	r0, fp
 8008faa:	4b5f      	ldr	r3, [pc, #380]	; (8009128 <__ieee754_pow+0x3d0>)
 8008fac:	f7f7 f8d4 	bl	8000158 <__aeabi_dsub>
 8008fb0:	a355      	add	r3, pc, #340	; (adr r3, 8009108 <__ieee754_pow+0x3b0>)
 8008fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fb6:	4604      	mov	r4, r0
 8008fb8:	460d      	mov	r5, r1
 8008fba:	f7f7 fa85 	bl	80004c8 <__aeabi_dmul>
 8008fbe:	a354      	add	r3, pc, #336	; (adr r3, 8009110 <__ieee754_pow+0x3b8>)
 8008fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fc4:	4606      	mov	r6, r0
 8008fc6:	460f      	mov	r7, r1
 8008fc8:	4620      	mov	r0, r4
 8008fca:	4629      	mov	r1, r5
 8008fcc:	f7f7 fa7c 	bl	80004c8 <__aeabi_dmul>
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	4682      	mov	sl, r0
 8008fd4:	468b      	mov	fp, r1
 8008fd6:	4620      	mov	r0, r4
 8008fd8:	4629      	mov	r1, r5
 8008fda:	4b54      	ldr	r3, [pc, #336]	; (800912c <__ieee754_pow+0x3d4>)
 8008fdc:	f7f7 fa74 	bl	80004c8 <__aeabi_dmul>
 8008fe0:	4602      	mov	r2, r0
 8008fe2:	460b      	mov	r3, r1
 8008fe4:	a14c      	add	r1, pc, #304	; (adr r1, 8009118 <__ieee754_pow+0x3c0>)
 8008fe6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008fea:	f7f7 f8b5 	bl	8000158 <__aeabi_dsub>
 8008fee:	4622      	mov	r2, r4
 8008ff0:	462b      	mov	r3, r5
 8008ff2:	f7f7 fa69 	bl	80004c8 <__aeabi_dmul>
 8008ff6:	4602      	mov	r2, r0
 8008ff8:	460b      	mov	r3, r1
 8008ffa:	2000      	movs	r0, #0
 8008ffc:	494c      	ldr	r1, [pc, #304]	; (8009130 <__ieee754_pow+0x3d8>)
 8008ffe:	f7f7 f8ab 	bl	8000158 <__aeabi_dsub>
 8009002:	4622      	mov	r2, r4
 8009004:	462b      	mov	r3, r5
 8009006:	4680      	mov	r8, r0
 8009008:	4689      	mov	r9, r1
 800900a:	4620      	mov	r0, r4
 800900c:	4629      	mov	r1, r5
 800900e:	f7f7 fa5b 	bl	80004c8 <__aeabi_dmul>
 8009012:	4602      	mov	r2, r0
 8009014:	460b      	mov	r3, r1
 8009016:	4640      	mov	r0, r8
 8009018:	4649      	mov	r1, r9
 800901a:	f7f7 fa55 	bl	80004c8 <__aeabi_dmul>
 800901e:	a340      	add	r3, pc, #256	; (adr r3, 8009120 <__ieee754_pow+0x3c8>)
 8009020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009024:	f7f7 fa50 	bl	80004c8 <__aeabi_dmul>
 8009028:	4602      	mov	r2, r0
 800902a:	460b      	mov	r3, r1
 800902c:	4650      	mov	r0, sl
 800902e:	4659      	mov	r1, fp
 8009030:	f7f7 f892 	bl	8000158 <__aeabi_dsub>
 8009034:	f04f 0a00 	mov.w	sl, #0
 8009038:	4602      	mov	r2, r0
 800903a:	460b      	mov	r3, r1
 800903c:	4604      	mov	r4, r0
 800903e:	460d      	mov	r5, r1
 8009040:	4630      	mov	r0, r6
 8009042:	4639      	mov	r1, r7
 8009044:	f7f7 f88a 	bl	800015c <__adddf3>
 8009048:	4632      	mov	r2, r6
 800904a:	463b      	mov	r3, r7
 800904c:	4650      	mov	r0, sl
 800904e:	468b      	mov	fp, r1
 8009050:	f7f7 f882 	bl	8000158 <__aeabi_dsub>
 8009054:	4602      	mov	r2, r0
 8009056:	460b      	mov	r3, r1
 8009058:	4620      	mov	r0, r4
 800905a:	4629      	mov	r1, r5
 800905c:	f7f7 f87c 	bl	8000158 <__aeabi_dsub>
 8009060:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009064:	9b00      	ldr	r3, [sp, #0]
 8009066:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009068:	3b01      	subs	r3, #1
 800906a:	4313      	orrs	r3, r2
 800906c:	f04f 0600 	mov.w	r6, #0
 8009070:	f04f 0200 	mov.w	r2, #0
 8009074:	bf0c      	ite	eq
 8009076:	4b2f      	ldreq	r3, [pc, #188]	; (8009134 <__ieee754_pow+0x3dc>)
 8009078:	4b2b      	ldrne	r3, [pc, #172]	; (8009128 <__ieee754_pow+0x3d0>)
 800907a:	4604      	mov	r4, r0
 800907c:	460d      	mov	r5, r1
 800907e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009082:	e9cd 2300 	strd	r2, r3, [sp]
 8009086:	4632      	mov	r2, r6
 8009088:	463b      	mov	r3, r7
 800908a:	f7f7 f865 	bl	8000158 <__aeabi_dsub>
 800908e:	4652      	mov	r2, sl
 8009090:	465b      	mov	r3, fp
 8009092:	f7f7 fa19 	bl	80004c8 <__aeabi_dmul>
 8009096:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800909a:	4680      	mov	r8, r0
 800909c:	4689      	mov	r9, r1
 800909e:	4620      	mov	r0, r4
 80090a0:	4629      	mov	r1, r5
 80090a2:	f7f7 fa11 	bl	80004c8 <__aeabi_dmul>
 80090a6:	4602      	mov	r2, r0
 80090a8:	460b      	mov	r3, r1
 80090aa:	4640      	mov	r0, r8
 80090ac:	4649      	mov	r1, r9
 80090ae:	f7f7 f855 	bl	800015c <__adddf3>
 80090b2:	4632      	mov	r2, r6
 80090b4:	463b      	mov	r3, r7
 80090b6:	4680      	mov	r8, r0
 80090b8:	4689      	mov	r9, r1
 80090ba:	4650      	mov	r0, sl
 80090bc:	4659      	mov	r1, fp
 80090be:	f7f7 fa03 	bl	80004c8 <__aeabi_dmul>
 80090c2:	4604      	mov	r4, r0
 80090c4:	460d      	mov	r5, r1
 80090c6:	460b      	mov	r3, r1
 80090c8:	4602      	mov	r2, r0
 80090ca:	4649      	mov	r1, r9
 80090cc:	4640      	mov	r0, r8
 80090ce:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80090d2:	f7f7 f843 	bl	800015c <__adddf3>
 80090d6:	4b18      	ldr	r3, [pc, #96]	; (8009138 <__ieee754_pow+0x3e0>)
 80090d8:	4682      	mov	sl, r0
 80090da:	4299      	cmp	r1, r3
 80090dc:	460f      	mov	r7, r1
 80090de:	460e      	mov	r6, r1
 80090e0:	f340 82e5 	ble.w	80096ae <__ieee754_pow+0x956>
 80090e4:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80090e8:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80090ec:	4303      	orrs	r3, r0
 80090ee:	f000 81df 	beq.w	80094b0 <__ieee754_pow+0x758>
 80090f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80090f6:	2200      	movs	r2, #0
 80090f8:	2300      	movs	r3, #0
 80090fa:	f7f7 fc57 	bl	80009ac <__aeabi_dcmplt>
 80090fe:	3800      	subs	r0, #0
 8009100:	bf18      	it	ne
 8009102:	2001      	movne	r0, #1
 8009104:	e72e      	b.n	8008f64 <__ieee754_pow+0x20c>
 8009106:	bf00      	nop
 8009108:	60000000 	.word	0x60000000
 800910c:	3ff71547 	.word	0x3ff71547
 8009110:	f85ddf44 	.word	0xf85ddf44
 8009114:	3e54ae0b 	.word	0x3e54ae0b
 8009118:	55555555 	.word	0x55555555
 800911c:	3fd55555 	.word	0x3fd55555
 8009120:	652b82fe 	.word	0x652b82fe
 8009124:	3ff71547 	.word	0x3ff71547
 8009128:	3ff00000 	.word	0x3ff00000
 800912c:	3fd00000 	.word	0x3fd00000
 8009130:	3fe00000 	.word	0x3fe00000
 8009134:	bff00000 	.word	0xbff00000
 8009138:	408fffff 	.word	0x408fffff
 800913c:	4bd2      	ldr	r3, [pc, #840]	; (8009488 <__ieee754_pow+0x730>)
 800913e:	2200      	movs	r2, #0
 8009140:	402b      	ands	r3, r5
 8009142:	b943      	cbnz	r3, 8009156 <__ieee754_pow+0x3fe>
 8009144:	4658      	mov	r0, fp
 8009146:	4661      	mov	r1, ip
 8009148:	4bd0      	ldr	r3, [pc, #832]	; (800948c <__ieee754_pow+0x734>)
 800914a:	f7f7 f9bd 	bl	80004c8 <__aeabi_dmul>
 800914e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8009152:	4683      	mov	fp, r0
 8009154:	460c      	mov	r4, r1
 8009156:	1523      	asrs	r3, r4, #20
 8009158:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800915c:	4413      	add	r3, r2
 800915e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009160:	4bcb      	ldr	r3, [pc, #812]	; (8009490 <__ieee754_pow+0x738>)
 8009162:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009166:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800916a:	429c      	cmp	r4, r3
 800916c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009170:	dd08      	ble.n	8009184 <__ieee754_pow+0x42c>
 8009172:	4bc8      	ldr	r3, [pc, #800]	; (8009494 <__ieee754_pow+0x73c>)
 8009174:	429c      	cmp	r4, r3
 8009176:	f340 8199 	ble.w	80094ac <__ieee754_pow+0x754>
 800917a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800917c:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8009180:	3301      	adds	r3, #1
 8009182:	930b      	str	r3, [sp, #44]	; 0x2c
 8009184:	2600      	movs	r6, #0
 8009186:	00f3      	lsls	r3, r6, #3
 8009188:	930d      	str	r3, [sp, #52]	; 0x34
 800918a:	4bc3      	ldr	r3, [pc, #780]	; (8009498 <__ieee754_pow+0x740>)
 800918c:	4658      	mov	r0, fp
 800918e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009192:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009196:	4629      	mov	r1, r5
 8009198:	461a      	mov	r2, r3
 800919a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800919e:	4623      	mov	r3, r4
 80091a0:	f7f6 ffda 	bl	8000158 <__aeabi_dsub>
 80091a4:	46da      	mov	sl, fp
 80091a6:	462b      	mov	r3, r5
 80091a8:	4652      	mov	r2, sl
 80091aa:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80091ae:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80091b2:	f7f6 ffd3 	bl	800015c <__adddf3>
 80091b6:	4602      	mov	r2, r0
 80091b8:	460b      	mov	r3, r1
 80091ba:	2000      	movs	r0, #0
 80091bc:	49b7      	ldr	r1, [pc, #732]	; (800949c <__ieee754_pow+0x744>)
 80091be:	f7f7 faad 	bl	800071c <__aeabi_ddiv>
 80091c2:	4602      	mov	r2, r0
 80091c4:	460b      	mov	r3, r1
 80091c6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80091ca:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80091ce:	f7f7 f97b 	bl	80004c8 <__aeabi_dmul>
 80091d2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80091d6:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80091da:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80091de:	2300      	movs	r3, #0
 80091e0:	2200      	movs	r2, #0
 80091e2:	46ab      	mov	fp, r5
 80091e4:	106d      	asrs	r5, r5, #1
 80091e6:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80091ea:	9304      	str	r3, [sp, #16]
 80091ec:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80091f0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80091f4:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 80091f8:	4640      	mov	r0, r8
 80091fa:	4649      	mov	r1, r9
 80091fc:	4614      	mov	r4, r2
 80091fe:	461d      	mov	r5, r3
 8009200:	f7f7 f962 	bl	80004c8 <__aeabi_dmul>
 8009204:	4602      	mov	r2, r0
 8009206:	460b      	mov	r3, r1
 8009208:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800920c:	f7f6 ffa4 	bl	8000158 <__aeabi_dsub>
 8009210:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009214:	4606      	mov	r6, r0
 8009216:	460f      	mov	r7, r1
 8009218:	4620      	mov	r0, r4
 800921a:	4629      	mov	r1, r5
 800921c:	f7f6 ff9c 	bl	8000158 <__aeabi_dsub>
 8009220:	4602      	mov	r2, r0
 8009222:	460b      	mov	r3, r1
 8009224:	4650      	mov	r0, sl
 8009226:	4659      	mov	r1, fp
 8009228:	f7f6 ff96 	bl	8000158 <__aeabi_dsub>
 800922c:	4642      	mov	r2, r8
 800922e:	464b      	mov	r3, r9
 8009230:	f7f7 f94a 	bl	80004c8 <__aeabi_dmul>
 8009234:	4602      	mov	r2, r0
 8009236:	460b      	mov	r3, r1
 8009238:	4630      	mov	r0, r6
 800923a:	4639      	mov	r1, r7
 800923c:	f7f6 ff8c 	bl	8000158 <__aeabi_dsub>
 8009240:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009244:	f7f7 f940 	bl	80004c8 <__aeabi_dmul>
 8009248:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800924c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009250:	4610      	mov	r0, r2
 8009252:	4619      	mov	r1, r3
 8009254:	f7f7 f938 	bl	80004c8 <__aeabi_dmul>
 8009258:	a379      	add	r3, pc, #484	; (adr r3, 8009440 <__ieee754_pow+0x6e8>)
 800925a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800925e:	4604      	mov	r4, r0
 8009260:	460d      	mov	r5, r1
 8009262:	f7f7 f931 	bl	80004c8 <__aeabi_dmul>
 8009266:	a378      	add	r3, pc, #480	; (adr r3, 8009448 <__ieee754_pow+0x6f0>)
 8009268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800926c:	f7f6 ff76 	bl	800015c <__adddf3>
 8009270:	4622      	mov	r2, r4
 8009272:	462b      	mov	r3, r5
 8009274:	f7f7 f928 	bl	80004c8 <__aeabi_dmul>
 8009278:	a375      	add	r3, pc, #468	; (adr r3, 8009450 <__ieee754_pow+0x6f8>)
 800927a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800927e:	f7f6 ff6d 	bl	800015c <__adddf3>
 8009282:	4622      	mov	r2, r4
 8009284:	462b      	mov	r3, r5
 8009286:	f7f7 f91f 	bl	80004c8 <__aeabi_dmul>
 800928a:	a373      	add	r3, pc, #460	; (adr r3, 8009458 <__ieee754_pow+0x700>)
 800928c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009290:	f7f6 ff64 	bl	800015c <__adddf3>
 8009294:	4622      	mov	r2, r4
 8009296:	462b      	mov	r3, r5
 8009298:	f7f7 f916 	bl	80004c8 <__aeabi_dmul>
 800929c:	a370      	add	r3, pc, #448	; (adr r3, 8009460 <__ieee754_pow+0x708>)
 800929e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092a2:	f7f6 ff5b 	bl	800015c <__adddf3>
 80092a6:	4622      	mov	r2, r4
 80092a8:	462b      	mov	r3, r5
 80092aa:	f7f7 f90d 	bl	80004c8 <__aeabi_dmul>
 80092ae:	a36e      	add	r3, pc, #440	; (adr r3, 8009468 <__ieee754_pow+0x710>)
 80092b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b4:	f7f6 ff52 	bl	800015c <__adddf3>
 80092b8:	4622      	mov	r2, r4
 80092ba:	4606      	mov	r6, r0
 80092bc:	460f      	mov	r7, r1
 80092be:	462b      	mov	r3, r5
 80092c0:	4620      	mov	r0, r4
 80092c2:	4629      	mov	r1, r5
 80092c4:	f7f7 f900 	bl	80004c8 <__aeabi_dmul>
 80092c8:	4602      	mov	r2, r0
 80092ca:	460b      	mov	r3, r1
 80092cc:	4630      	mov	r0, r6
 80092ce:	4639      	mov	r1, r7
 80092d0:	f7f7 f8fa 	bl	80004c8 <__aeabi_dmul>
 80092d4:	4604      	mov	r4, r0
 80092d6:	460d      	mov	r5, r1
 80092d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80092dc:	4642      	mov	r2, r8
 80092de:	464b      	mov	r3, r9
 80092e0:	f7f6 ff3c 	bl	800015c <__adddf3>
 80092e4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80092e8:	f7f7 f8ee 	bl	80004c8 <__aeabi_dmul>
 80092ec:	4622      	mov	r2, r4
 80092ee:	462b      	mov	r3, r5
 80092f0:	f7f6 ff34 	bl	800015c <__adddf3>
 80092f4:	4642      	mov	r2, r8
 80092f6:	4606      	mov	r6, r0
 80092f8:	460f      	mov	r7, r1
 80092fa:	464b      	mov	r3, r9
 80092fc:	4640      	mov	r0, r8
 80092fe:	4649      	mov	r1, r9
 8009300:	f7f7 f8e2 	bl	80004c8 <__aeabi_dmul>
 8009304:	2200      	movs	r2, #0
 8009306:	4b66      	ldr	r3, [pc, #408]	; (80094a0 <__ieee754_pow+0x748>)
 8009308:	4682      	mov	sl, r0
 800930a:	468b      	mov	fp, r1
 800930c:	f7f6 ff26 	bl	800015c <__adddf3>
 8009310:	4632      	mov	r2, r6
 8009312:	463b      	mov	r3, r7
 8009314:	f7f6 ff22 	bl	800015c <__adddf3>
 8009318:	2400      	movs	r4, #0
 800931a:	460d      	mov	r5, r1
 800931c:	4622      	mov	r2, r4
 800931e:	460b      	mov	r3, r1
 8009320:	4640      	mov	r0, r8
 8009322:	4649      	mov	r1, r9
 8009324:	f7f7 f8d0 	bl	80004c8 <__aeabi_dmul>
 8009328:	2200      	movs	r2, #0
 800932a:	4680      	mov	r8, r0
 800932c:	4689      	mov	r9, r1
 800932e:	4620      	mov	r0, r4
 8009330:	4629      	mov	r1, r5
 8009332:	4b5b      	ldr	r3, [pc, #364]	; (80094a0 <__ieee754_pow+0x748>)
 8009334:	f7f6 ff10 	bl	8000158 <__aeabi_dsub>
 8009338:	4652      	mov	r2, sl
 800933a:	465b      	mov	r3, fp
 800933c:	f7f6 ff0c 	bl	8000158 <__aeabi_dsub>
 8009340:	4602      	mov	r2, r0
 8009342:	460b      	mov	r3, r1
 8009344:	4630      	mov	r0, r6
 8009346:	4639      	mov	r1, r7
 8009348:	f7f6 ff06 	bl	8000158 <__aeabi_dsub>
 800934c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009350:	f7f7 f8ba 	bl	80004c8 <__aeabi_dmul>
 8009354:	4622      	mov	r2, r4
 8009356:	4606      	mov	r6, r0
 8009358:	460f      	mov	r7, r1
 800935a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800935e:	462b      	mov	r3, r5
 8009360:	f7f7 f8b2 	bl	80004c8 <__aeabi_dmul>
 8009364:	4602      	mov	r2, r0
 8009366:	460b      	mov	r3, r1
 8009368:	4630      	mov	r0, r6
 800936a:	4639      	mov	r1, r7
 800936c:	f7f6 fef6 	bl	800015c <__adddf3>
 8009370:	2400      	movs	r4, #0
 8009372:	4606      	mov	r6, r0
 8009374:	460f      	mov	r7, r1
 8009376:	4602      	mov	r2, r0
 8009378:	460b      	mov	r3, r1
 800937a:	4640      	mov	r0, r8
 800937c:	4649      	mov	r1, r9
 800937e:	f7f6 feed 	bl	800015c <__adddf3>
 8009382:	a33b      	add	r3, pc, #236	; (adr r3, 8009470 <__ieee754_pow+0x718>)
 8009384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009388:	4620      	mov	r0, r4
 800938a:	460d      	mov	r5, r1
 800938c:	f7f7 f89c 	bl	80004c8 <__aeabi_dmul>
 8009390:	4642      	mov	r2, r8
 8009392:	464b      	mov	r3, r9
 8009394:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009398:	4620      	mov	r0, r4
 800939a:	4629      	mov	r1, r5
 800939c:	f7f6 fedc 	bl	8000158 <__aeabi_dsub>
 80093a0:	4602      	mov	r2, r0
 80093a2:	460b      	mov	r3, r1
 80093a4:	4630      	mov	r0, r6
 80093a6:	4639      	mov	r1, r7
 80093a8:	f7f6 fed6 	bl	8000158 <__aeabi_dsub>
 80093ac:	a332      	add	r3, pc, #200	; (adr r3, 8009478 <__ieee754_pow+0x720>)
 80093ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093b2:	f7f7 f889 	bl	80004c8 <__aeabi_dmul>
 80093b6:	a332      	add	r3, pc, #200	; (adr r3, 8009480 <__ieee754_pow+0x728>)
 80093b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093bc:	4606      	mov	r6, r0
 80093be:	460f      	mov	r7, r1
 80093c0:	4620      	mov	r0, r4
 80093c2:	4629      	mov	r1, r5
 80093c4:	f7f7 f880 	bl	80004c8 <__aeabi_dmul>
 80093c8:	4602      	mov	r2, r0
 80093ca:	460b      	mov	r3, r1
 80093cc:	4630      	mov	r0, r6
 80093ce:	4639      	mov	r1, r7
 80093d0:	f7f6 fec4 	bl	800015c <__adddf3>
 80093d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80093d6:	4b33      	ldr	r3, [pc, #204]	; (80094a4 <__ieee754_pow+0x74c>)
 80093d8:	f04f 0a00 	mov.w	sl, #0
 80093dc:	4413      	add	r3, r2
 80093de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093e2:	f7f6 febb 	bl	800015c <__adddf3>
 80093e6:	4680      	mov	r8, r0
 80093e8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80093ea:	4689      	mov	r9, r1
 80093ec:	f7f7 f802 	bl	80003f4 <__aeabi_i2d>
 80093f0:	4604      	mov	r4, r0
 80093f2:	460d      	mov	r5, r1
 80093f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80093f6:	4b2c      	ldr	r3, [pc, #176]	; (80094a8 <__ieee754_pow+0x750>)
 80093f8:	4413      	add	r3, r2
 80093fa:	e9d3 6700 	ldrd	r6, r7, [r3]
 80093fe:	4642      	mov	r2, r8
 8009400:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009404:	464b      	mov	r3, r9
 8009406:	f7f6 fea9 	bl	800015c <__adddf3>
 800940a:	4632      	mov	r2, r6
 800940c:	463b      	mov	r3, r7
 800940e:	f7f6 fea5 	bl	800015c <__adddf3>
 8009412:	4622      	mov	r2, r4
 8009414:	462b      	mov	r3, r5
 8009416:	f7f6 fea1 	bl	800015c <__adddf3>
 800941a:	4622      	mov	r2, r4
 800941c:	462b      	mov	r3, r5
 800941e:	4650      	mov	r0, sl
 8009420:	468b      	mov	fp, r1
 8009422:	f7f6 fe99 	bl	8000158 <__aeabi_dsub>
 8009426:	4632      	mov	r2, r6
 8009428:	463b      	mov	r3, r7
 800942a:	f7f6 fe95 	bl	8000158 <__aeabi_dsub>
 800942e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009432:	f7f6 fe91 	bl	8000158 <__aeabi_dsub>
 8009436:	4602      	mov	r2, r0
 8009438:	460b      	mov	r3, r1
 800943a:	4640      	mov	r0, r8
 800943c:	4649      	mov	r1, r9
 800943e:	e60d      	b.n	800905c <__ieee754_pow+0x304>
 8009440:	4a454eef 	.word	0x4a454eef
 8009444:	3fca7e28 	.word	0x3fca7e28
 8009448:	93c9db65 	.word	0x93c9db65
 800944c:	3fcd864a 	.word	0x3fcd864a
 8009450:	a91d4101 	.word	0xa91d4101
 8009454:	3fd17460 	.word	0x3fd17460
 8009458:	518f264d 	.word	0x518f264d
 800945c:	3fd55555 	.word	0x3fd55555
 8009460:	db6fabff 	.word	0xdb6fabff
 8009464:	3fdb6db6 	.word	0x3fdb6db6
 8009468:	33333303 	.word	0x33333303
 800946c:	3fe33333 	.word	0x3fe33333
 8009470:	e0000000 	.word	0xe0000000
 8009474:	3feec709 	.word	0x3feec709
 8009478:	dc3a03fd 	.word	0xdc3a03fd
 800947c:	3feec709 	.word	0x3feec709
 8009480:	145b01f5 	.word	0x145b01f5
 8009484:	be3e2fe0 	.word	0xbe3e2fe0
 8009488:	7ff00000 	.word	0x7ff00000
 800948c:	43400000 	.word	0x43400000
 8009490:	0003988e 	.word	0x0003988e
 8009494:	000bb679 	.word	0x000bb679
 8009498:	0800b2a0 	.word	0x0800b2a0
 800949c:	3ff00000 	.word	0x3ff00000
 80094a0:	40080000 	.word	0x40080000
 80094a4:	0800b2c0 	.word	0x0800b2c0
 80094a8:	0800b2b0 	.word	0x0800b2b0
 80094ac:	2601      	movs	r6, #1
 80094ae:	e66a      	b.n	8009186 <__ieee754_pow+0x42e>
 80094b0:	a39d      	add	r3, pc, #628	; (adr r3, 8009728 <__ieee754_pow+0x9d0>)
 80094b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094b6:	4640      	mov	r0, r8
 80094b8:	4649      	mov	r1, r9
 80094ba:	f7f6 fe4f 	bl	800015c <__adddf3>
 80094be:	4622      	mov	r2, r4
 80094c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80094c4:	462b      	mov	r3, r5
 80094c6:	4650      	mov	r0, sl
 80094c8:	4639      	mov	r1, r7
 80094ca:	f7f6 fe45 	bl	8000158 <__aeabi_dsub>
 80094ce:	4602      	mov	r2, r0
 80094d0:	460b      	mov	r3, r1
 80094d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80094d6:	f7f7 fa87 	bl	80009e8 <__aeabi_dcmpgt>
 80094da:	2800      	cmp	r0, #0
 80094dc:	f47f ae09 	bne.w	80090f2 <__ieee754_pow+0x39a>
 80094e0:	4aa3      	ldr	r2, [pc, #652]	; (8009770 <__ieee754_pow+0xa18>)
 80094e2:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 80094e6:	4293      	cmp	r3, r2
 80094e8:	f340 8101 	ble.w	80096ee <__ieee754_pow+0x996>
 80094ec:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80094f0:	2000      	movs	r0, #0
 80094f2:	151b      	asrs	r3, r3, #20
 80094f4:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80094f8:	fa4a f303 	asr.w	r3, sl, r3
 80094fc:	4433      	add	r3, r6
 80094fe:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8009502:	4f9c      	ldr	r7, [pc, #624]	; (8009774 <__ieee754_pow+0xa1c>)
 8009504:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009508:	4117      	asrs	r7, r2
 800950a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800950e:	ea23 0107 	bic.w	r1, r3, r7
 8009512:	f1c2 0214 	rsb	r2, r2, #20
 8009516:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800951a:	460b      	mov	r3, r1
 800951c:	fa4a fa02 	asr.w	sl, sl, r2
 8009520:	2e00      	cmp	r6, #0
 8009522:	4602      	mov	r2, r0
 8009524:	4629      	mov	r1, r5
 8009526:	4620      	mov	r0, r4
 8009528:	bfb8      	it	lt
 800952a:	f1ca 0a00 	rsblt	sl, sl, #0
 800952e:	f7f6 fe13 	bl	8000158 <__aeabi_dsub>
 8009532:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009536:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800953a:	2400      	movs	r4, #0
 800953c:	4642      	mov	r2, r8
 800953e:	464b      	mov	r3, r9
 8009540:	f7f6 fe0c 	bl	800015c <__adddf3>
 8009544:	a37a      	add	r3, pc, #488	; (adr r3, 8009730 <__ieee754_pow+0x9d8>)
 8009546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800954a:	4620      	mov	r0, r4
 800954c:	460d      	mov	r5, r1
 800954e:	f7f6 ffbb 	bl	80004c8 <__aeabi_dmul>
 8009552:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009556:	4606      	mov	r6, r0
 8009558:	460f      	mov	r7, r1
 800955a:	4620      	mov	r0, r4
 800955c:	4629      	mov	r1, r5
 800955e:	f7f6 fdfb 	bl	8000158 <__aeabi_dsub>
 8009562:	4602      	mov	r2, r0
 8009564:	460b      	mov	r3, r1
 8009566:	4640      	mov	r0, r8
 8009568:	4649      	mov	r1, r9
 800956a:	f7f6 fdf5 	bl	8000158 <__aeabi_dsub>
 800956e:	a372      	add	r3, pc, #456	; (adr r3, 8009738 <__ieee754_pow+0x9e0>)
 8009570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009574:	f7f6 ffa8 	bl	80004c8 <__aeabi_dmul>
 8009578:	a371      	add	r3, pc, #452	; (adr r3, 8009740 <__ieee754_pow+0x9e8>)
 800957a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800957e:	4680      	mov	r8, r0
 8009580:	4689      	mov	r9, r1
 8009582:	4620      	mov	r0, r4
 8009584:	4629      	mov	r1, r5
 8009586:	f7f6 ff9f 	bl	80004c8 <__aeabi_dmul>
 800958a:	4602      	mov	r2, r0
 800958c:	460b      	mov	r3, r1
 800958e:	4640      	mov	r0, r8
 8009590:	4649      	mov	r1, r9
 8009592:	f7f6 fde3 	bl	800015c <__adddf3>
 8009596:	4604      	mov	r4, r0
 8009598:	460d      	mov	r5, r1
 800959a:	4602      	mov	r2, r0
 800959c:	460b      	mov	r3, r1
 800959e:	4630      	mov	r0, r6
 80095a0:	4639      	mov	r1, r7
 80095a2:	f7f6 fddb 	bl	800015c <__adddf3>
 80095a6:	4632      	mov	r2, r6
 80095a8:	463b      	mov	r3, r7
 80095aa:	4680      	mov	r8, r0
 80095ac:	4689      	mov	r9, r1
 80095ae:	f7f6 fdd3 	bl	8000158 <__aeabi_dsub>
 80095b2:	4602      	mov	r2, r0
 80095b4:	460b      	mov	r3, r1
 80095b6:	4620      	mov	r0, r4
 80095b8:	4629      	mov	r1, r5
 80095ba:	f7f6 fdcd 	bl	8000158 <__aeabi_dsub>
 80095be:	4642      	mov	r2, r8
 80095c0:	4606      	mov	r6, r0
 80095c2:	460f      	mov	r7, r1
 80095c4:	464b      	mov	r3, r9
 80095c6:	4640      	mov	r0, r8
 80095c8:	4649      	mov	r1, r9
 80095ca:	f7f6 ff7d 	bl	80004c8 <__aeabi_dmul>
 80095ce:	a35e      	add	r3, pc, #376	; (adr r3, 8009748 <__ieee754_pow+0x9f0>)
 80095d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095d4:	4604      	mov	r4, r0
 80095d6:	460d      	mov	r5, r1
 80095d8:	f7f6 ff76 	bl	80004c8 <__aeabi_dmul>
 80095dc:	a35c      	add	r3, pc, #368	; (adr r3, 8009750 <__ieee754_pow+0x9f8>)
 80095de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095e2:	f7f6 fdb9 	bl	8000158 <__aeabi_dsub>
 80095e6:	4622      	mov	r2, r4
 80095e8:	462b      	mov	r3, r5
 80095ea:	f7f6 ff6d 	bl	80004c8 <__aeabi_dmul>
 80095ee:	a35a      	add	r3, pc, #360	; (adr r3, 8009758 <__ieee754_pow+0xa00>)
 80095f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095f4:	f7f6 fdb2 	bl	800015c <__adddf3>
 80095f8:	4622      	mov	r2, r4
 80095fa:	462b      	mov	r3, r5
 80095fc:	f7f6 ff64 	bl	80004c8 <__aeabi_dmul>
 8009600:	a357      	add	r3, pc, #348	; (adr r3, 8009760 <__ieee754_pow+0xa08>)
 8009602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009606:	f7f6 fda7 	bl	8000158 <__aeabi_dsub>
 800960a:	4622      	mov	r2, r4
 800960c:	462b      	mov	r3, r5
 800960e:	f7f6 ff5b 	bl	80004c8 <__aeabi_dmul>
 8009612:	a355      	add	r3, pc, #340	; (adr r3, 8009768 <__ieee754_pow+0xa10>)
 8009614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009618:	f7f6 fda0 	bl	800015c <__adddf3>
 800961c:	4622      	mov	r2, r4
 800961e:	462b      	mov	r3, r5
 8009620:	f7f6 ff52 	bl	80004c8 <__aeabi_dmul>
 8009624:	4602      	mov	r2, r0
 8009626:	460b      	mov	r3, r1
 8009628:	4640      	mov	r0, r8
 800962a:	4649      	mov	r1, r9
 800962c:	f7f6 fd94 	bl	8000158 <__aeabi_dsub>
 8009630:	4604      	mov	r4, r0
 8009632:	460d      	mov	r5, r1
 8009634:	4602      	mov	r2, r0
 8009636:	460b      	mov	r3, r1
 8009638:	4640      	mov	r0, r8
 800963a:	4649      	mov	r1, r9
 800963c:	f7f6 ff44 	bl	80004c8 <__aeabi_dmul>
 8009640:	2200      	movs	r2, #0
 8009642:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009646:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800964a:	4620      	mov	r0, r4
 800964c:	4629      	mov	r1, r5
 800964e:	f7f6 fd83 	bl	8000158 <__aeabi_dsub>
 8009652:	4602      	mov	r2, r0
 8009654:	460b      	mov	r3, r1
 8009656:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800965a:	f7f7 f85f 	bl	800071c <__aeabi_ddiv>
 800965e:	4632      	mov	r2, r6
 8009660:	4604      	mov	r4, r0
 8009662:	460d      	mov	r5, r1
 8009664:	463b      	mov	r3, r7
 8009666:	4640      	mov	r0, r8
 8009668:	4649      	mov	r1, r9
 800966a:	f7f6 ff2d 	bl	80004c8 <__aeabi_dmul>
 800966e:	4632      	mov	r2, r6
 8009670:	463b      	mov	r3, r7
 8009672:	f7f6 fd73 	bl	800015c <__adddf3>
 8009676:	4602      	mov	r2, r0
 8009678:	460b      	mov	r3, r1
 800967a:	4620      	mov	r0, r4
 800967c:	4629      	mov	r1, r5
 800967e:	f7f6 fd6b 	bl	8000158 <__aeabi_dsub>
 8009682:	4642      	mov	r2, r8
 8009684:	464b      	mov	r3, r9
 8009686:	f7f6 fd67 	bl	8000158 <__aeabi_dsub>
 800968a:	4602      	mov	r2, r0
 800968c:	460b      	mov	r3, r1
 800968e:	2000      	movs	r0, #0
 8009690:	4939      	ldr	r1, [pc, #228]	; (8009778 <__ieee754_pow+0xa20>)
 8009692:	f7f6 fd61 	bl	8000158 <__aeabi_dsub>
 8009696:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800969a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800969e:	da29      	bge.n	80096f4 <__ieee754_pow+0x99c>
 80096a0:	4652      	mov	r2, sl
 80096a2:	f000 fb71 	bl	8009d88 <scalbn>
 80096a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80096aa:	f7ff bbfe 	b.w	8008eaa <__ieee754_pow+0x152>
 80096ae:	4b33      	ldr	r3, [pc, #204]	; (800977c <__ieee754_pow+0xa24>)
 80096b0:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80096b4:	429f      	cmp	r7, r3
 80096b6:	f77f af13 	ble.w	80094e0 <__ieee754_pow+0x788>
 80096ba:	4b31      	ldr	r3, [pc, #196]	; (8009780 <__ieee754_pow+0xa28>)
 80096bc:	440b      	add	r3, r1
 80096be:	4303      	orrs	r3, r0
 80096c0:	d009      	beq.n	80096d6 <__ieee754_pow+0x97e>
 80096c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80096c6:	2200      	movs	r2, #0
 80096c8:	2300      	movs	r3, #0
 80096ca:	f7f7 f96f 	bl	80009ac <__aeabi_dcmplt>
 80096ce:	3800      	subs	r0, #0
 80096d0:	bf18      	it	ne
 80096d2:	2001      	movne	r0, #1
 80096d4:	e453      	b.n	8008f7e <__ieee754_pow+0x226>
 80096d6:	4622      	mov	r2, r4
 80096d8:	462b      	mov	r3, r5
 80096da:	f7f6 fd3d 	bl	8000158 <__aeabi_dsub>
 80096de:	4642      	mov	r2, r8
 80096e0:	464b      	mov	r3, r9
 80096e2:	f7f7 f977 	bl	80009d4 <__aeabi_dcmpge>
 80096e6:	2800      	cmp	r0, #0
 80096e8:	f43f aefa 	beq.w	80094e0 <__ieee754_pow+0x788>
 80096ec:	e7e9      	b.n	80096c2 <__ieee754_pow+0x96a>
 80096ee:	f04f 0a00 	mov.w	sl, #0
 80096f2:	e720      	b.n	8009536 <__ieee754_pow+0x7de>
 80096f4:	4621      	mov	r1, r4
 80096f6:	e7d6      	b.n	80096a6 <__ieee754_pow+0x94e>
 80096f8:	f04f 0b00 	mov.w	fp, #0
 80096fc:	f8df c078 	ldr.w	ip, [pc, #120]	; 8009778 <__ieee754_pow+0xa20>
 8009700:	f7ff bbba 	b.w	8008e78 <__ieee754_pow+0x120>
 8009704:	f04f 0b00 	mov.w	fp, #0
 8009708:	f04f 0c00 	mov.w	ip, #0
 800970c:	f7ff bbb4 	b.w	8008e78 <__ieee754_pow+0x120>
 8009710:	4640      	mov	r0, r8
 8009712:	4649      	mov	r1, r9
 8009714:	f7ff bb3d 	b.w	8008d92 <__ieee754_pow+0x3a>
 8009718:	9200      	str	r2, [sp, #0]
 800971a:	f7ff bb89 	b.w	8008e30 <__ieee754_pow+0xd8>
 800971e:	2300      	movs	r3, #0
 8009720:	f7ff bb73 	b.w	8008e0a <__ieee754_pow+0xb2>
 8009724:	f3af 8000 	nop.w
 8009728:	652b82fe 	.word	0x652b82fe
 800972c:	3c971547 	.word	0x3c971547
 8009730:	00000000 	.word	0x00000000
 8009734:	3fe62e43 	.word	0x3fe62e43
 8009738:	fefa39ef 	.word	0xfefa39ef
 800973c:	3fe62e42 	.word	0x3fe62e42
 8009740:	0ca86c39 	.word	0x0ca86c39
 8009744:	be205c61 	.word	0xbe205c61
 8009748:	72bea4d0 	.word	0x72bea4d0
 800974c:	3e663769 	.word	0x3e663769
 8009750:	c5d26bf1 	.word	0xc5d26bf1
 8009754:	3ebbbd41 	.word	0x3ebbbd41
 8009758:	af25de2c 	.word	0xaf25de2c
 800975c:	3f11566a 	.word	0x3f11566a
 8009760:	16bebd93 	.word	0x16bebd93
 8009764:	3f66c16c 	.word	0x3f66c16c
 8009768:	5555553e 	.word	0x5555553e
 800976c:	3fc55555 	.word	0x3fc55555
 8009770:	3fe00000 	.word	0x3fe00000
 8009774:	000fffff 	.word	0x000fffff
 8009778:	3ff00000 	.word	0x3ff00000
 800977c:	4090cbff 	.word	0x4090cbff
 8009780:	3f6f3400 	.word	0x3f6f3400

08009784 <__ieee754_sqrt>:
 8009784:	f8df c158 	ldr.w	ip, [pc, #344]	; 80098e0 <__ieee754_sqrt+0x15c>
 8009788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800978c:	ea3c 0c01 	bics.w	ip, ip, r1
 8009790:	4606      	mov	r6, r0
 8009792:	460d      	mov	r5, r1
 8009794:	460c      	mov	r4, r1
 8009796:	460a      	mov	r2, r1
 8009798:	4607      	mov	r7, r0
 800979a:	4603      	mov	r3, r0
 800979c:	d10f      	bne.n	80097be <__ieee754_sqrt+0x3a>
 800979e:	4602      	mov	r2, r0
 80097a0:	460b      	mov	r3, r1
 80097a2:	f7f6 fe91 	bl	80004c8 <__aeabi_dmul>
 80097a6:	4602      	mov	r2, r0
 80097a8:	460b      	mov	r3, r1
 80097aa:	4630      	mov	r0, r6
 80097ac:	4629      	mov	r1, r5
 80097ae:	f7f6 fcd5 	bl	800015c <__adddf3>
 80097b2:	4606      	mov	r6, r0
 80097b4:	460d      	mov	r5, r1
 80097b6:	4630      	mov	r0, r6
 80097b8:	4629      	mov	r1, r5
 80097ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097be:	2900      	cmp	r1, #0
 80097c0:	dc0e      	bgt.n	80097e0 <__ieee754_sqrt+0x5c>
 80097c2:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80097c6:	ea5c 0707 	orrs.w	r7, ip, r7
 80097ca:	d0f4      	beq.n	80097b6 <__ieee754_sqrt+0x32>
 80097cc:	b141      	cbz	r1, 80097e0 <__ieee754_sqrt+0x5c>
 80097ce:	4602      	mov	r2, r0
 80097d0:	460b      	mov	r3, r1
 80097d2:	f7f6 fcc1 	bl	8000158 <__aeabi_dsub>
 80097d6:	4602      	mov	r2, r0
 80097d8:	460b      	mov	r3, r1
 80097da:	f7f6 ff9f 	bl	800071c <__aeabi_ddiv>
 80097de:	e7e8      	b.n	80097b2 <__ieee754_sqrt+0x2e>
 80097e0:	1521      	asrs	r1, r4, #20
 80097e2:	d075      	beq.n	80098d0 <__ieee754_sqrt+0x14c>
 80097e4:	07cc      	lsls	r4, r1, #31
 80097e6:	f04f 0400 	mov.w	r4, #0
 80097ea:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80097ee:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 80097f2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80097f6:	bf5e      	ittt	pl
 80097f8:	0fd9      	lsrpl	r1, r3, #31
 80097fa:	005b      	lslpl	r3, r3, #1
 80097fc:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8009800:	0fd9      	lsrs	r1, r3, #31
 8009802:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8009806:	2516      	movs	r5, #22
 8009808:	4620      	mov	r0, r4
 800980a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800980e:	107f      	asrs	r7, r7, #1
 8009810:	005b      	lsls	r3, r3, #1
 8009812:	1846      	adds	r6, r0, r1
 8009814:	4296      	cmp	r6, r2
 8009816:	bfde      	ittt	le
 8009818:	1b92      	suble	r2, r2, r6
 800981a:	1870      	addle	r0, r6, r1
 800981c:	1864      	addle	r4, r4, r1
 800981e:	0052      	lsls	r2, r2, #1
 8009820:	3d01      	subs	r5, #1
 8009822:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8009826:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800982a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800982e:	d1f0      	bne.n	8009812 <__ieee754_sqrt+0x8e>
 8009830:	4629      	mov	r1, r5
 8009832:	f04f 0e20 	mov.w	lr, #32
 8009836:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800983a:	4282      	cmp	r2, r0
 800983c:	eb06 0c05 	add.w	ip, r6, r5
 8009840:	dc02      	bgt.n	8009848 <__ieee754_sqrt+0xc4>
 8009842:	d113      	bne.n	800986c <__ieee754_sqrt+0xe8>
 8009844:	459c      	cmp	ip, r3
 8009846:	d811      	bhi.n	800986c <__ieee754_sqrt+0xe8>
 8009848:	f1bc 0f00 	cmp.w	ip, #0
 800984c:	eb0c 0506 	add.w	r5, ip, r6
 8009850:	da43      	bge.n	80098da <__ieee754_sqrt+0x156>
 8009852:	2d00      	cmp	r5, #0
 8009854:	db41      	blt.n	80098da <__ieee754_sqrt+0x156>
 8009856:	f100 0801 	add.w	r8, r0, #1
 800985a:	1a12      	subs	r2, r2, r0
 800985c:	4640      	mov	r0, r8
 800985e:	459c      	cmp	ip, r3
 8009860:	bf88      	it	hi
 8009862:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8009866:	eba3 030c 	sub.w	r3, r3, ip
 800986a:	4431      	add	r1, r6
 800986c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8009870:	f1be 0e01 	subs.w	lr, lr, #1
 8009874:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8009878:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800987c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009880:	d1db      	bne.n	800983a <__ieee754_sqrt+0xb6>
 8009882:	4313      	orrs	r3, r2
 8009884:	d006      	beq.n	8009894 <__ieee754_sqrt+0x110>
 8009886:	1c48      	adds	r0, r1, #1
 8009888:	bf0b      	itete	eq
 800988a:	4671      	moveq	r1, lr
 800988c:	3101      	addne	r1, #1
 800988e:	3401      	addeq	r4, #1
 8009890:	f021 0101 	bicne.w	r1, r1, #1
 8009894:	1063      	asrs	r3, r4, #1
 8009896:	0849      	lsrs	r1, r1, #1
 8009898:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800989c:	07e2      	lsls	r2, r4, #31
 800989e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80098a2:	bf48      	it	mi
 80098a4:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80098a8:	460e      	mov	r6, r1
 80098aa:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80098ae:	e782      	b.n	80097b6 <__ieee754_sqrt+0x32>
 80098b0:	0ada      	lsrs	r2, r3, #11
 80098b2:	3815      	subs	r0, #21
 80098b4:	055b      	lsls	r3, r3, #21
 80098b6:	2a00      	cmp	r2, #0
 80098b8:	d0fa      	beq.n	80098b0 <__ieee754_sqrt+0x12c>
 80098ba:	02d5      	lsls	r5, r2, #11
 80098bc:	d50a      	bpl.n	80098d4 <__ieee754_sqrt+0x150>
 80098be:	f1c1 0420 	rsb	r4, r1, #32
 80098c2:	fa23 f404 	lsr.w	r4, r3, r4
 80098c6:	1e4d      	subs	r5, r1, #1
 80098c8:	408b      	lsls	r3, r1
 80098ca:	4322      	orrs	r2, r4
 80098cc:	1b41      	subs	r1, r0, r5
 80098ce:	e789      	b.n	80097e4 <__ieee754_sqrt+0x60>
 80098d0:	4608      	mov	r0, r1
 80098d2:	e7f0      	b.n	80098b6 <__ieee754_sqrt+0x132>
 80098d4:	0052      	lsls	r2, r2, #1
 80098d6:	3101      	adds	r1, #1
 80098d8:	e7ef      	b.n	80098ba <__ieee754_sqrt+0x136>
 80098da:	4680      	mov	r8, r0
 80098dc:	e7bd      	b.n	800985a <__ieee754_sqrt+0xd6>
 80098de:	bf00      	nop
 80098e0:	7ff00000 	.word	0x7ff00000

080098e4 <__ieee754_asinf>:
 80098e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098e8:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 80098ec:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 80098f0:	4604      	mov	r4, r0
 80098f2:	4605      	mov	r5, r0
 80098f4:	d10c      	bne.n	8009910 <__ieee754_asinf+0x2c>
 80098f6:	498d      	ldr	r1, [pc, #564]	; (8009b2c <__ieee754_asinf+0x248>)
 80098f8:	f7f7 fa14 	bl	8000d24 <__aeabi_fmul>
 80098fc:	498c      	ldr	r1, [pc, #560]	; (8009b30 <__ieee754_asinf+0x24c>)
 80098fe:	4605      	mov	r5, r0
 8009900:	4620      	mov	r0, r4
 8009902:	f7f7 fa0f 	bl	8000d24 <__aeabi_fmul>
 8009906:	4601      	mov	r1, r0
 8009908:	4628      	mov	r0, r5
 800990a:	f7f7 f903 	bl	8000b14 <__addsf3>
 800990e:	e006      	b.n	800991e <__ieee754_asinf+0x3a>
 8009910:	dd07      	ble.n	8009922 <__ieee754_asinf+0x3e>
 8009912:	4601      	mov	r1, r0
 8009914:	f7f7 f8fc 	bl	8000b10 <__aeabi_fsub>
 8009918:	4601      	mov	r1, r0
 800991a:	f7f7 fab7 	bl	8000e8c <__aeabi_fdiv>
 800991e:	4604      	mov	r4, r0
 8009920:	e00e      	b.n	8009940 <__ieee754_asinf+0x5c>
 8009922:	f1b8 5f7c 	cmp.w	r8, #1056964608	; 0x3f000000
 8009926:	da58      	bge.n	80099da <__ieee754_asinf+0xf6>
 8009928:	f1b8 5f48 	cmp.w	r8, #838860800	; 0x32000000
 800992c:	da0b      	bge.n	8009946 <__ieee754_asinf+0x62>
 800992e:	4981      	ldr	r1, [pc, #516]	; (8009b34 <__ieee754_asinf+0x250>)
 8009930:	f7f7 f8f0 	bl	8000b14 <__addsf3>
 8009934:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009938:	f7f7 fbb0 	bl	800109c <__aeabi_fcmpgt>
 800993c:	2800      	cmp	r0, #0
 800993e:	d04c      	beq.n	80099da <__ieee754_asinf+0xf6>
 8009940:	4620      	mov	r0, r4
 8009942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009946:	4601      	mov	r1, r0
 8009948:	f7f7 f9ec 	bl	8000d24 <__aeabi_fmul>
 800994c:	4605      	mov	r5, r0
 800994e:	497a      	ldr	r1, [pc, #488]	; (8009b38 <__ieee754_asinf+0x254>)
 8009950:	f7f7 f9e8 	bl	8000d24 <__aeabi_fmul>
 8009954:	4979      	ldr	r1, [pc, #484]	; (8009b3c <__ieee754_asinf+0x258>)
 8009956:	f7f7 f8dd 	bl	8000b14 <__addsf3>
 800995a:	4629      	mov	r1, r5
 800995c:	f7f7 f9e2 	bl	8000d24 <__aeabi_fmul>
 8009960:	4977      	ldr	r1, [pc, #476]	; (8009b40 <__ieee754_asinf+0x25c>)
 8009962:	f7f7 f8d5 	bl	8000b10 <__aeabi_fsub>
 8009966:	4629      	mov	r1, r5
 8009968:	f7f7 f9dc 	bl	8000d24 <__aeabi_fmul>
 800996c:	4975      	ldr	r1, [pc, #468]	; (8009b44 <__ieee754_asinf+0x260>)
 800996e:	f7f7 f8d1 	bl	8000b14 <__addsf3>
 8009972:	4629      	mov	r1, r5
 8009974:	f7f7 f9d6 	bl	8000d24 <__aeabi_fmul>
 8009978:	4973      	ldr	r1, [pc, #460]	; (8009b48 <__ieee754_asinf+0x264>)
 800997a:	f7f7 f8c9 	bl	8000b10 <__aeabi_fsub>
 800997e:	4629      	mov	r1, r5
 8009980:	f7f7 f9d0 	bl	8000d24 <__aeabi_fmul>
 8009984:	4971      	ldr	r1, [pc, #452]	; (8009b4c <__ieee754_asinf+0x268>)
 8009986:	f7f7 f8c5 	bl	8000b14 <__addsf3>
 800998a:	4629      	mov	r1, r5
 800998c:	f7f7 f9ca 	bl	8000d24 <__aeabi_fmul>
 8009990:	496f      	ldr	r1, [pc, #444]	; (8009b50 <__ieee754_asinf+0x26c>)
 8009992:	4606      	mov	r6, r0
 8009994:	4628      	mov	r0, r5
 8009996:	f7f7 f9c5 	bl	8000d24 <__aeabi_fmul>
 800999a:	496e      	ldr	r1, [pc, #440]	; (8009b54 <__ieee754_asinf+0x270>)
 800999c:	f7f7 f8b8 	bl	8000b10 <__aeabi_fsub>
 80099a0:	4629      	mov	r1, r5
 80099a2:	f7f7 f9bf 	bl	8000d24 <__aeabi_fmul>
 80099a6:	496c      	ldr	r1, [pc, #432]	; (8009b58 <__ieee754_asinf+0x274>)
 80099a8:	f7f7 f8b4 	bl	8000b14 <__addsf3>
 80099ac:	4629      	mov	r1, r5
 80099ae:	f7f7 f9b9 	bl	8000d24 <__aeabi_fmul>
 80099b2:	496a      	ldr	r1, [pc, #424]	; (8009b5c <__ieee754_asinf+0x278>)
 80099b4:	f7f7 f8ac 	bl	8000b10 <__aeabi_fsub>
 80099b8:	4629      	mov	r1, r5
 80099ba:	f7f7 f9b3 	bl	8000d24 <__aeabi_fmul>
 80099be:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80099c2:	f7f7 f8a7 	bl	8000b14 <__addsf3>
 80099c6:	4601      	mov	r1, r0
 80099c8:	4630      	mov	r0, r6
 80099ca:	f7f7 fa5f 	bl	8000e8c <__aeabi_fdiv>
 80099ce:	4621      	mov	r1, r4
 80099d0:	f7f7 f9a8 	bl	8000d24 <__aeabi_fmul>
 80099d4:	4601      	mov	r1, r0
 80099d6:	4620      	mov	r0, r4
 80099d8:	e797      	b.n	800990a <__ieee754_asinf+0x26>
 80099da:	4620      	mov	r0, r4
 80099dc:	f000 fb5e 	bl	800a09c <fabsf>
 80099e0:	4601      	mov	r1, r0
 80099e2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80099e6:	f7f7 f893 	bl	8000b10 <__aeabi_fsub>
 80099ea:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80099ee:	f7f7 f999 	bl	8000d24 <__aeabi_fmul>
 80099f2:	4606      	mov	r6, r0
 80099f4:	4950      	ldr	r1, [pc, #320]	; (8009b38 <__ieee754_asinf+0x254>)
 80099f6:	f7f7 f995 	bl	8000d24 <__aeabi_fmul>
 80099fa:	4950      	ldr	r1, [pc, #320]	; (8009b3c <__ieee754_asinf+0x258>)
 80099fc:	f7f7 f88a 	bl	8000b14 <__addsf3>
 8009a00:	4631      	mov	r1, r6
 8009a02:	f7f7 f98f 	bl	8000d24 <__aeabi_fmul>
 8009a06:	494e      	ldr	r1, [pc, #312]	; (8009b40 <__ieee754_asinf+0x25c>)
 8009a08:	f7f7 f882 	bl	8000b10 <__aeabi_fsub>
 8009a0c:	4631      	mov	r1, r6
 8009a0e:	f7f7 f989 	bl	8000d24 <__aeabi_fmul>
 8009a12:	494c      	ldr	r1, [pc, #304]	; (8009b44 <__ieee754_asinf+0x260>)
 8009a14:	f7f7 f87e 	bl	8000b14 <__addsf3>
 8009a18:	4631      	mov	r1, r6
 8009a1a:	f7f7 f983 	bl	8000d24 <__aeabi_fmul>
 8009a1e:	494a      	ldr	r1, [pc, #296]	; (8009b48 <__ieee754_asinf+0x264>)
 8009a20:	f7f7 f876 	bl	8000b10 <__aeabi_fsub>
 8009a24:	4631      	mov	r1, r6
 8009a26:	f7f7 f97d 	bl	8000d24 <__aeabi_fmul>
 8009a2a:	4948      	ldr	r1, [pc, #288]	; (8009b4c <__ieee754_asinf+0x268>)
 8009a2c:	f7f7 f872 	bl	8000b14 <__addsf3>
 8009a30:	4631      	mov	r1, r6
 8009a32:	f7f7 f977 	bl	8000d24 <__aeabi_fmul>
 8009a36:	4946      	ldr	r1, [pc, #280]	; (8009b50 <__ieee754_asinf+0x26c>)
 8009a38:	4681      	mov	r9, r0
 8009a3a:	4630      	mov	r0, r6
 8009a3c:	f7f7 f972 	bl	8000d24 <__aeabi_fmul>
 8009a40:	4944      	ldr	r1, [pc, #272]	; (8009b54 <__ieee754_asinf+0x270>)
 8009a42:	f7f7 f865 	bl	8000b10 <__aeabi_fsub>
 8009a46:	4631      	mov	r1, r6
 8009a48:	f7f7 f96c 	bl	8000d24 <__aeabi_fmul>
 8009a4c:	4942      	ldr	r1, [pc, #264]	; (8009b58 <__ieee754_asinf+0x274>)
 8009a4e:	f7f7 f861 	bl	8000b14 <__addsf3>
 8009a52:	4631      	mov	r1, r6
 8009a54:	f7f7 f966 	bl	8000d24 <__aeabi_fmul>
 8009a58:	4940      	ldr	r1, [pc, #256]	; (8009b5c <__ieee754_asinf+0x278>)
 8009a5a:	f7f7 f859 	bl	8000b10 <__aeabi_fsub>
 8009a5e:	4631      	mov	r1, r6
 8009a60:	f7f7 f960 	bl	8000d24 <__aeabi_fmul>
 8009a64:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009a68:	f7f7 f854 	bl	8000b14 <__addsf3>
 8009a6c:	4682      	mov	sl, r0
 8009a6e:	4630      	mov	r0, r6
 8009a70:	f000 f902 	bl	8009c78 <__ieee754_sqrtf>
 8009a74:	4b3a      	ldr	r3, [pc, #232]	; (8009b60 <__ieee754_asinf+0x27c>)
 8009a76:	4607      	mov	r7, r0
 8009a78:	4598      	cmp	r8, r3
 8009a7a:	dd1a      	ble.n	8009ab2 <__ieee754_asinf+0x1ce>
 8009a7c:	4651      	mov	r1, sl
 8009a7e:	4648      	mov	r0, r9
 8009a80:	f7f7 fa04 	bl	8000e8c <__aeabi_fdiv>
 8009a84:	4639      	mov	r1, r7
 8009a86:	f7f7 f94d 	bl	8000d24 <__aeabi_fmul>
 8009a8a:	4639      	mov	r1, r7
 8009a8c:	f7f7 f842 	bl	8000b14 <__addsf3>
 8009a90:	4601      	mov	r1, r0
 8009a92:	f7f7 f83f 	bl	8000b14 <__addsf3>
 8009a96:	4933      	ldr	r1, [pc, #204]	; (8009b64 <__ieee754_asinf+0x280>)
 8009a98:	f7f7 f83c 	bl	8000b14 <__addsf3>
 8009a9c:	4601      	mov	r1, r0
 8009a9e:	4823      	ldr	r0, [pc, #140]	; (8009b2c <__ieee754_asinf+0x248>)
 8009aa0:	f7f7 f836 	bl	8000b10 <__aeabi_fsub>
 8009aa4:	2d00      	cmp	r5, #0
 8009aa6:	4604      	mov	r4, r0
 8009aa8:	f73f af4a 	bgt.w	8009940 <__ieee754_asinf+0x5c>
 8009aac:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8009ab0:	e735      	b.n	800991e <__ieee754_asinf+0x3a>
 8009ab2:	4601      	mov	r1, r0
 8009ab4:	f420 687f 	bic.w	r8, r0, #4080	; 0xff0
 8009ab8:	f7f7 f82c 	bl	8000b14 <__addsf3>
 8009abc:	4651      	mov	r1, sl
 8009abe:	4604      	mov	r4, r0
 8009ac0:	4648      	mov	r0, r9
 8009ac2:	f7f7 f9e3 	bl	8000e8c <__aeabi_fdiv>
 8009ac6:	4601      	mov	r1, r0
 8009ac8:	4620      	mov	r0, r4
 8009aca:	f7f7 f92b 	bl	8000d24 <__aeabi_fmul>
 8009ace:	f028 080f 	bic.w	r8, r8, #15
 8009ad2:	4681      	mov	r9, r0
 8009ad4:	4641      	mov	r1, r8
 8009ad6:	4640      	mov	r0, r8
 8009ad8:	f7f7 f924 	bl	8000d24 <__aeabi_fmul>
 8009adc:	4601      	mov	r1, r0
 8009ade:	4630      	mov	r0, r6
 8009ae0:	f7f7 f816 	bl	8000b10 <__aeabi_fsub>
 8009ae4:	4641      	mov	r1, r8
 8009ae6:	4604      	mov	r4, r0
 8009ae8:	4638      	mov	r0, r7
 8009aea:	f7f7 f813 	bl	8000b14 <__addsf3>
 8009aee:	4601      	mov	r1, r0
 8009af0:	4620      	mov	r0, r4
 8009af2:	f7f7 f9cb 	bl	8000e8c <__aeabi_fdiv>
 8009af6:	4601      	mov	r1, r0
 8009af8:	f7f7 f80c 	bl	8000b14 <__addsf3>
 8009afc:	4601      	mov	r1, r0
 8009afe:	480c      	ldr	r0, [pc, #48]	; (8009b30 <__ieee754_asinf+0x24c>)
 8009b00:	f7f7 f806 	bl	8000b10 <__aeabi_fsub>
 8009b04:	4601      	mov	r1, r0
 8009b06:	4648      	mov	r0, r9
 8009b08:	f7f7 f802 	bl	8000b10 <__aeabi_fsub>
 8009b0c:	4641      	mov	r1, r8
 8009b0e:	4604      	mov	r4, r0
 8009b10:	4640      	mov	r0, r8
 8009b12:	f7f6 ffff 	bl	8000b14 <__addsf3>
 8009b16:	4601      	mov	r1, r0
 8009b18:	4813      	ldr	r0, [pc, #76]	; (8009b68 <__ieee754_asinf+0x284>)
 8009b1a:	f7f6 fff9 	bl	8000b10 <__aeabi_fsub>
 8009b1e:	4601      	mov	r1, r0
 8009b20:	4620      	mov	r0, r4
 8009b22:	f7f6 fff5 	bl	8000b10 <__aeabi_fsub>
 8009b26:	4601      	mov	r1, r0
 8009b28:	480f      	ldr	r0, [pc, #60]	; (8009b68 <__ieee754_asinf+0x284>)
 8009b2a:	e7b9      	b.n	8009aa0 <__ieee754_asinf+0x1bc>
 8009b2c:	3fc90fdb 	.word	0x3fc90fdb
 8009b30:	b33bbd2e 	.word	0xb33bbd2e
 8009b34:	7149f2ca 	.word	0x7149f2ca
 8009b38:	3811ef08 	.word	0x3811ef08
 8009b3c:	3a4f7f04 	.word	0x3a4f7f04
 8009b40:	3d241146 	.word	0x3d241146
 8009b44:	3e4e0aa8 	.word	0x3e4e0aa8
 8009b48:	3ea6b090 	.word	0x3ea6b090
 8009b4c:	3e2aaaab 	.word	0x3e2aaaab
 8009b50:	3d9dc62e 	.word	0x3d9dc62e
 8009b54:	3f303361 	.word	0x3f303361
 8009b58:	4001572d 	.word	0x4001572d
 8009b5c:	4019d139 	.word	0x4019d139
 8009b60:	3f799999 	.word	0x3f799999
 8009b64:	333bbd2e 	.word	0x333bbd2e
 8009b68:	3f490fdb 	.word	0x3f490fdb

08009b6c <__ieee754_atan2f>:
 8009b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b6e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009b72:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8009b76:	4603      	mov	r3, r0
 8009b78:	dc05      	bgt.n	8009b86 <__ieee754_atan2f+0x1a>
 8009b7a:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8009b7e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8009b82:	4607      	mov	r7, r0
 8009b84:	dd04      	ble.n	8009b90 <__ieee754_atan2f+0x24>
 8009b86:	4618      	mov	r0, r3
 8009b88:	f7f6 ffc4 	bl	8000b14 <__addsf3>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	e011      	b.n	8009bb4 <__ieee754_atan2f+0x48>
 8009b90:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8009b94:	d103      	bne.n	8009b9e <__ieee754_atan2f+0x32>
 8009b96:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009b9a:	f000 b973 	b.w	8009e84 <atanf>
 8009b9e:	178c      	asrs	r4, r1, #30
 8009ba0:	f004 0402 	and.w	r4, r4, #2
 8009ba4:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8009ba8:	b932      	cbnz	r2, 8009bb8 <__ieee754_atan2f+0x4c>
 8009baa:	2c02      	cmp	r4, #2
 8009bac:	d04c      	beq.n	8009c48 <__ieee754_atan2f+0xdc>
 8009bae:	2c03      	cmp	r4, #3
 8009bb0:	d100      	bne.n	8009bb4 <__ieee754_atan2f+0x48>
 8009bb2:	4b29      	ldr	r3, [pc, #164]	; (8009c58 <__ieee754_atan2f+0xec>)
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bb8:	b91e      	cbnz	r6, 8009bc2 <__ieee754_atan2f+0x56>
 8009bba:	2f00      	cmp	r7, #0
 8009bbc:	da4a      	bge.n	8009c54 <__ieee754_atan2f+0xe8>
 8009bbe:	4b27      	ldr	r3, [pc, #156]	; (8009c5c <__ieee754_atan2f+0xf0>)
 8009bc0:	e7f8      	b.n	8009bb4 <__ieee754_atan2f+0x48>
 8009bc2:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8009bc6:	d10e      	bne.n	8009be6 <__ieee754_atan2f+0x7a>
 8009bc8:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8009bcc:	f104 34ff 	add.w	r4, r4, #4294967295
 8009bd0:	d105      	bne.n	8009bde <__ieee754_atan2f+0x72>
 8009bd2:	2c02      	cmp	r4, #2
 8009bd4:	d83a      	bhi.n	8009c4c <__ieee754_atan2f+0xe0>
 8009bd6:	4b22      	ldr	r3, [pc, #136]	; (8009c60 <__ieee754_atan2f+0xf4>)
 8009bd8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8009bdc:	e7ea      	b.n	8009bb4 <__ieee754_atan2f+0x48>
 8009bde:	2c02      	cmp	r4, #2
 8009be0:	d836      	bhi.n	8009c50 <__ieee754_atan2f+0xe4>
 8009be2:	4b20      	ldr	r3, [pc, #128]	; (8009c64 <__ieee754_atan2f+0xf8>)
 8009be4:	e7f8      	b.n	8009bd8 <__ieee754_atan2f+0x6c>
 8009be6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8009bea:	d0e6      	beq.n	8009bba <__ieee754_atan2f+0x4e>
 8009bec:	1b92      	subs	r2, r2, r6
 8009bee:	f1b2 5ff4 	cmp.w	r2, #511705088	; 0x1e800000
 8009bf2:	ea4f 50e2 	mov.w	r0, r2, asr #23
 8009bf6:	da17      	bge.n	8009c28 <__ieee754_atan2f+0xbc>
 8009bf8:	2900      	cmp	r1, #0
 8009bfa:	da01      	bge.n	8009c00 <__ieee754_atan2f+0x94>
 8009bfc:	303c      	adds	r0, #60	; 0x3c
 8009bfe:	db15      	blt.n	8009c2c <__ieee754_atan2f+0xc0>
 8009c00:	4618      	mov	r0, r3
 8009c02:	f7f7 f943 	bl	8000e8c <__aeabi_fdiv>
 8009c06:	f000 fa49 	bl	800a09c <fabsf>
 8009c0a:	f000 f93b 	bl	8009e84 <atanf>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	2c01      	cmp	r4, #1
 8009c12:	d00d      	beq.n	8009c30 <__ieee754_atan2f+0xc4>
 8009c14:	2c02      	cmp	r4, #2
 8009c16:	d00e      	beq.n	8009c36 <__ieee754_atan2f+0xca>
 8009c18:	2c00      	cmp	r4, #0
 8009c1a:	d0cb      	beq.n	8009bb4 <__ieee754_atan2f+0x48>
 8009c1c:	4912      	ldr	r1, [pc, #72]	; (8009c68 <__ieee754_atan2f+0xfc>)
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f7f6 ff78 	bl	8000b14 <__addsf3>
 8009c24:	4911      	ldr	r1, [pc, #68]	; (8009c6c <__ieee754_atan2f+0x100>)
 8009c26:	e00c      	b.n	8009c42 <__ieee754_atan2f+0xd6>
 8009c28:	4b11      	ldr	r3, [pc, #68]	; (8009c70 <__ieee754_atan2f+0x104>)
 8009c2a:	e7f1      	b.n	8009c10 <__ieee754_atan2f+0xa4>
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	e7ef      	b.n	8009c10 <__ieee754_atan2f+0xa4>
 8009c30:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009c34:	e7be      	b.n	8009bb4 <__ieee754_atan2f+0x48>
 8009c36:	490c      	ldr	r1, [pc, #48]	; (8009c68 <__ieee754_atan2f+0xfc>)
 8009c38:	4618      	mov	r0, r3
 8009c3a:	f7f6 ff6b 	bl	8000b14 <__addsf3>
 8009c3e:	4601      	mov	r1, r0
 8009c40:	480a      	ldr	r0, [pc, #40]	; (8009c6c <__ieee754_atan2f+0x100>)
 8009c42:	f7f6 ff65 	bl	8000b10 <__aeabi_fsub>
 8009c46:	e7a1      	b.n	8009b8c <__ieee754_atan2f+0x20>
 8009c48:	4b08      	ldr	r3, [pc, #32]	; (8009c6c <__ieee754_atan2f+0x100>)
 8009c4a:	e7b3      	b.n	8009bb4 <__ieee754_atan2f+0x48>
 8009c4c:	4b09      	ldr	r3, [pc, #36]	; (8009c74 <__ieee754_atan2f+0x108>)
 8009c4e:	e7b1      	b.n	8009bb4 <__ieee754_atan2f+0x48>
 8009c50:	2300      	movs	r3, #0
 8009c52:	e7af      	b.n	8009bb4 <__ieee754_atan2f+0x48>
 8009c54:	4b06      	ldr	r3, [pc, #24]	; (8009c70 <__ieee754_atan2f+0x104>)
 8009c56:	e7ad      	b.n	8009bb4 <__ieee754_atan2f+0x48>
 8009c58:	c0490fdb 	.word	0xc0490fdb
 8009c5c:	bfc90fdb 	.word	0xbfc90fdb
 8009c60:	0800b2d0 	.word	0x0800b2d0
 8009c64:	0800b2dc 	.word	0x0800b2dc
 8009c68:	33bbbd2e 	.word	0x33bbbd2e
 8009c6c:	40490fdb 	.word	0x40490fdb
 8009c70:	3fc90fdb 	.word	0x3fc90fdb
 8009c74:	3f490fdb 	.word	0x3f490fdb

08009c78 <__ieee754_sqrtf>:
 8009c78:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8009c7c:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8009c80:	b570      	push	{r4, r5, r6, lr}
 8009c82:	4603      	mov	r3, r0
 8009c84:	4604      	mov	r4, r0
 8009c86:	d309      	bcc.n	8009c9c <__ieee754_sqrtf+0x24>
 8009c88:	4601      	mov	r1, r0
 8009c8a:	f7f7 f84b 	bl	8000d24 <__aeabi_fmul>
 8009c8e:	4601      	mov	r1, r0
 8009c90:	4620      	mov	r0, r4
 8009c92:	f7f6 ff3f 	bl	8000b14 <__addsf3>
 8009c96:	4604      	mov	r4, r0
 8009c98:	4620      	mov	r0, r4
 8009c9a:	bd70      	pop	{r4, r5, r6, pc}
 8009c9c:	2a00      	cmp	r2, #0
 8009c9e:	d0fb      	beq.n	8009c98 <__ieee754_sqrtf+0x20>
 8009ca0:	2800      	cmp	r0, #0
 8009ca2:	da06      	bge.n	8009cb2 <__ieee754_sqrtf+0x3a>
 8009ca4:	4601      	mov	r1, r0
 8009ca6:	f7f6 ff33 	bl	8000b10 <__aeabi_fsub>
 8009caa:	4601      	mov	r1, r0
 8009cac:	f7f7 f8ee 	bl	8000e8c <__aeabi_fdiv>
 8009cb0:	e7f1      	b.n	8009c96 <__ieee754_sqrtf+0x1e>
 8009cb2:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 8009cb6:	ea4f 51e0 	mov.w	r1, r0, asr #23
 8009cba:	d029      	beq.n	8009d10 <__ieee754_sqrtf+0x98>
 8009cbc:	f3c3 0216 	ubfx	r2, r3, #0, #23
 8009cc0:	07cb      	lsls	r3, r1, #31
 8009cc2:	f04f 0300 	mov.w	r3, #0
 8009cc6:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 8009cca:	f04f 0419 	mov.w	r4, #25
 8009cce:	461e      	mov	r6, r3
 8009cd0:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8009cd4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8009cd8:	bf58      	it	pl
 8009cda:	0052      	lslpl	r2, r2, #1
 8009cdc:	1040      	asrs	r0, r0, #1
 8009cde:	0052      	lsls	r2, r2, #1
 8009ce0:	1875      	adds	r5, r6, r1
 8009ce2:	4295      	cmp	r5, r2
 8009ce4:	bfde      	ittt	le
 8009ce6:	186e      	addle	r6, r5, r1
 8009ce8:	1b52      	suble	r2, r2, r5
 8009cea:	185b      	addle	r3, r3, r1
 8009cec:	3c01      	subs	r4, #1
 8009cee:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8009cf2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009cf6:	d1f3      	bne.n	8009ce0 <__ieee754_sqrtf+0x68>
 8009cf8:	b112      	cbz	r2, 8009d00 <__ieee754_sqrtf+0x88>
 8009cfa:	3301      	adds	r3, #1
 8009cfc:	f023 0301 	bic.w	r3, r3, #1
 8009d00:	105c      	asrs	r4, r3, #1
 8009d02:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 8009d06:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 8009d0a:	e7c5      	b.n	8009c98 <__ieee754_sqrtf+0x20>
 8009d0c:	005b      	lsls	r3, r3, #1
 8009d0e:	3201      	adds	r2, #1
 8009d10:	0218      	lsls	r0, r3, #8
 8009d12:	d5fb      	bpl.n	8009d0c <__ieee754_sqrtf+0x94>
 8009d14:	3a01      	subs	r2, #1
 8009d16:	1a89      	subs	r1, r1, r2
 8009d18:	e7d0      	b.n	8009cbc <__ieee754_sqrtf+0x44>

08009d1a <with_errno>:
 8009d1a:	b570      	push	{r4, r5, r6, lr}
 8009d1c:	4604      	mov	r4, r0
 8009d1e:	460d      	mov	r5, r1
 8009d20:	4616      	mov	r6, r2
 8009d22:	f000 f9c3 	bl	800a0ac <__errno>
 8009d26:	4629      	mov	r1, r5
 8009d28:	6006      	str	r6, [r0, #0]
 8009d2a:	4620      	mov	r0, r4
 8009d2c:	bd70      	pop	{r4, r5, r6, pc}

08009d2e <xflow>:
 8009d2e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009d30:	4615      	mov	r5, r2
 8009d32:	461c      	mov	r4, r3
 8009d34:	b180      	cbz	r0, 8009d58 <xflow+0x2a>
 8009d36:	4610      	mov	r0, r2
 8009d38:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009d3c:	e9cd 0100 	strd	r0, r1, [sp]
 8009d40:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009d44:	4628      	mov	r0, r5
 8009d46:	4621      	mov	r1, r4
 8009d48:	f7f6 fbbe 	bl	80004c8 <__aeabi_dmul>
 8009d4c:	2222      	movs	r2, #34	; 0x22
 8009d4e:	b003      	add	sp, #12
 8009d50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009d54:	f7ff bfe1 	b.w	8009d1a <with_errno>
 8009d58:	4610      	mov	r0, r2
 8009d5a:	4619      	mov	r1, r3
 8009d5c:	e7ee      	b.n	8009d3c <xflow+0xe>

08009d5e <__math_uflow>:
 8009d5e:	2200      	movs	r2, #0
 8009d60:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009d64:	f7ff bfe3 	b.w	8009d2e <xflow>

08009d68 <__math_oflow>:
 8009d68:	2200      	movs	r2, #0
 8009d6a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8009d6e:	f7ff bfde 	b.w	8009d2e <xflow>

08009d72 <fabs>:
 8009d72:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009d76:	4770      	bx	lr

08009d78 <finite>:
 8009d78:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8009d7c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8009d80:	0fc0      	lsrs	r0, r0, #31
 8009d82:	4770      	bx	lr
 8009d84:	0000      	movs	r0, r0
	...

08009d88 <scalbn>:
 8009d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d8a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8009d8e:	4604      	mov	r4, r0
 8009d90:	460d      	mov	r5, r1
 8009d92:	4617      	mov	r7, r2
 8009d94:	460b      	mov	r3, r1
 8009d96:	b996      	cbnz	r6, 8009dbe <scalbn+0x36>
 8009d98:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009d9c:	4303      	orrs	r3, r0
 8009d9e:	d039      	beq.n	8009e14 <scalbn+0x8c>
 8009da0:	4b33      	ldr	r3, [pc, #204]	; (8009e70 <scalbn+0xe8>)
 8009da2:	2200      	movs	r2, #0
 8009da4:	f7f6 fb90 	bl	80004c8 <__aeabi_dmul>
 8009da8:	4b32      	ldr	r3, [pc, #200]	; (8009e74 <scalbn+0xec>)
 8009daa:	4604      	mov	r4, r0
 8009dac:	429f      	cmp	r7, r3
 8009dae:	460d      	mov	r5, r1
 8009db0:	da0f      	bge.n	8009dd2 <scalbn+0x4a>
 8009db2:	a32b      	add	r3, pc, #172	; (adr r3, 8009e60 <scalbn+0xd8>)
 8009db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009db8:	f7f6 fb86 	bl	80004c8 <__aeabi_dmul>
 8009dbc:	e006      	b.n	8009dcc <scalbn+0x44>
 8009dbe:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8009dc2:	4296      	cmp	r6, r2
 8009dc4:	d10a      	bne.n	8009ddc <scalbn+0x54>
 8009dc6:	4602      	mov	r2, r0
 8009dc8:	f7f6 f9c8 	bl	800015c <__adddf3>
 8009dcc:	4604      	mov	r4, r0
 8009dce:	460d      	mov	r5, r1
 8009dd0:	e020      	b.n	8009e14 <scalbn+0x8c>
 8009dd2:	460b      	mov	r3, r1
 8009dd4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8009dd8:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8009ddc:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8009de0:	19b9      	adds	r1, r7, r6
 8009de2:	4291      	cmp	r1, r2
 8009de4:	dd0e      	ble.n	8009e04 <scalbn+0x7c>
 8009de6:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8009dea:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8009dee:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8009df2:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8009df6:	4820      	ldr	r0, [pc, #128]	; (8009e78 <scalbn+0xf0>)
 8009df8:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8009dfc:	a31a      	add	r3, pc, #104	; (adr r3, 8009e68 <scalbn+0xe0>)
 8009dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e02:	e7d9      	b.n	8009db8 <scalbn+0x30>
 8009e04:	2900      	cmp	r1, #0
 8009e06:	dd08      	ble.n	8009e1a <scalbn+0x92>
 8009e08:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009e0c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009e10:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8009e14:	4620      	mov	r0, r4
 8009e16:	4629      	mov	r1, r5
 8009e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e1a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8009e1e:	da12      	bge.n	8009e46 <scalbn+0xbe>
 8009e20:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009e24:	429f      	cmp	r7, r3
 8009e26:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8009e2a:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 8009e2e:	dcdc      	bgt.n	8009dea <scalbn+0x62>
 8009e30:	a30b      	add	r3, pc, #44	; (adr r3, 8009e60 <scalbn+0xd8>)
 8009e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e36:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8009e3a:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8009e3e:	480f      	ldr	r0, [pc, #60]	; (8009e7c <scalbn+0xf4>)
 8009e40:	f041 011f 	orr.w	r1, r1, #31
 8009e44:	e7b8      	b.n	8009db8 <scalbn+0x30>
 8009e46:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009e4a:	3136      	adds	r1, #54	; 0x36
 8009e4c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009e50:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8009e54:	4620      	mov	r0, r4
 8009e56:	4629      	mov	r1, r5
 8009e58:	2200      	movs	r2, #0
 8009e5a:	4b09      	ldr	r3, [pc, #36]	; (8009e80 <scalbn+0xf8>)
 8009e5c:	e7ac      	b.n	8009db8 <scalbn+0x30>
 8009e5e:	bf00      	nop
 8009e60:	c2f8f359 	.word	0xc2f8f359
 8009e64:	01a56e1f 	.word	0x01a56e1f
 8009e68:	8800759c 	.word	0x8800759c
 8009e6c:	7e37e43c 	.word	0x7e37e43c
 8009e70:	43500000 	.word	0x43500000
 8009e74:	ffff3cb0 	.word	0xffff3cb0
 8009e78:	8800759c 	.word	0x8800759c
 8009e7c:	c2f8f359 	.word	0xc2f8f359
 8009e80:	3c900000 	.word	0x3c900000

08009e84 <atanf>:
 8009e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e88:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 8009e8c:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 8009e90:	4604      	mov	r4, r0
 8009e92:	4680      	mov	r8, r0
 8009e94:	db0e      	blt.n	8009eb4 <atanf+0x30>
 8009e96:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8009e9a:	dd04      	ble.n	8009ea6 <atanf+0x22>
 8009e9c:	4601      	mov	r1, r0
 8009e9e:	f7f6 fe39 	bl	8000b14 <__addsf3>
 8009ea2:	4604      	mov	r4, r0
 8009ea4:	e003      	b.n	8009eae <atanf+0x2a>
 8009ea6:	2800      	cmp	r0, #0
 8009ea8:	f300 80ce 	bgt.w	800a048 <atanf+0x1c4>
 8009eac:	4c67      	ldr	r4, [pc, #412]	; (800a04c <atanf+0x1c8>)
 8009eae:	4620      	mov	r0, r4
 8009eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009eb4:	4b66      	ldr	r3, [pc, #408]	; (800a050 <atanf+0x1cc>)
 8009eb6:	429d      	cmp	r5, r3
 8009eb8:	dc0e      	bgt.n	8009ed8 <atanf+0x54>
 8009eba:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 8009ebe:	da08      	bge.n	8009ed2 <atanf+0x4e>
 8009ec0:	4964      	ldr	r1, [pc, #400]	; (800a054 <atanf+0x1d0>)
 8009ec2:	f7f6 fe27 	bl	8000b14 <__addsf3>
 8009ec6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009eca:	f7f7 f8e7 	bl	800109c <__aeabi_fcmpgt>
 8009ece:	2800      	cmp	r0, #0
 8009ed0:	d1ed      	bne.n	8009eae <atanf+0x2a>
 8009ed2:	f04f 36ff 	mov.w	r6, #4294967295
 8009ed6:	e01c      	b.n	8009f12 <atanf+0x8e>
 8009ed8:	f000 f8e0 	bl	800a09c <fabsf>
 8009edc:	4b5e      	ldr	r3, [pc, #376]	; (800a058 <atanf+0x1d4>)
 8009ede:	4604      	mov	r4, r0
 8009ee0:	429d      	cmp	r5, r3
 8009ee2:	dc7c      	bgt.n	8009fde <atanf+0x15a>
 8009ee4:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8009ee8:	429d      	cmp	r5, r3
 8009eea:	dc67      	bgt.n	8009fbc <atanf+0x138>
 8009eec:	4601      	mov	r1, r0
 8009eee:	f7f6 fe11 	bl	8000b14 <__addsf3>
 8009ef2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009ef6:	f7f6 fe0b 	bl	8000b10 <__aeabi_fsub>
 8009efa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8009efe:	4605      	mov	r5, r0
 8009f00:	4620      	mov	r0, r4
 8009f02:	f7f6 fe07 	bl	8000b14 <__addsf3>
 8009f06:	4601      	mov	r1, r0
 8009f08:	4628      	mov	r0, r5
 8009f0a:	f7f6 ffbf 	bl	8000e8c <__aeabi_fdiv>
 8009f0e:	2600      	movs	r6, #0
 8009f10:	4604      	mov	r4, r0
 8009f12:	4621      	mov	r1, r4
 8009f14:	4620      	mov	r0, r4
 8009f16:	f7f6 ff05 	bl	8000d24 <__aeabi_fmul>
 8009f1a:	4601      	mov	r1, r0
 8009f1c:	4607      	mov	r7, r0
 8009f1e:	f7f6 ff01 	bl	8000d24 <__aeabi_fmul>
 8009f22:	4605      	mov	r5, r0
 8009f24:	494d      	ldr	r1, [pc, #308]	; (800a05c <atanf+0x1d8>)
 8009f26:	f7f6 fefd 	bl	8000d24 <__aeabi_fmul>
 8009f2a:	494d      	ldr	r1, [pc, #308]	; (800a060 <atanf+0x1dc>)
 8009f2c:	f7f6 fdf2 	bl	8000b14 <__addsf3>
 8009f30:	4629      	mov	r1, r5
 8009f32:	f7f6 fef7 	bl	8000d24 <__aeabi_fmul>
 8009f36:	494b      	ldr	r1, [pc, #300]	; (800a064 <atanf+0x1e0>)
 8009f38:	f7f6 fdec 	bl	8000b14 <__addsf3>
 8009f3c:	4629      	mov	r1, r5
 8009f3e:	f7f6 fef1 	bl	8000d24 <__aeabi_fmul>
 8009f42:	4949      	ldr	r1, [pc, #292]	; (800a068 <atanf+0x1e4>)
 8009f44:	f7f6 fde6 	bl	8000b14 <__addsf3>
 8009f48:	4629      	mov	r1, r5
 8009f4a:	f7f6 feeb 	bl	8000d24 <__aeabi_fmul>
 8009f4e:	4947      	ldr	r1, [pc, #284]	; (800a06c <atanf+0x1e8>)
 8009f50:	f7f6 fde0 	bl	8000b14 <__addsf3>
 8009f54:	4629      	mov	r1, r5
 8009f56:	f7f6 fee5 	bl	8000d24 <__aeabi_fmul>
 8009f5a:	4945      	ldr	r1, [pc, #276]	; (800a070 <atanf+0x1ec>)
 8009f5c:	f7f6 fdda 	bl	8000b14 <__addsf3>
 8009f60:	4639      	mov	r1, r7
 8009f62:	f7f6 fedf 	bl	8000d24 <__aeabi_fmul>
 8009f66:	4943      	ldr	r1, [pc, #268]	; (800a074 <atanf+0x1f0>)
 8009f68:	4607      	mov	r7, r0
 8009f6a:	4628      	mov	r0, r5
 8009f6c:	f7f6 feda 	bl	8000d24 <__aeabi_fmul>
 8009f70:	4941      	ldr	r1, [pc, #260]	; (800a078 <atanf+0x1f4>)
 8009f72:	f7f6 fdcd 	bl	8000b10 <__aeabi_fsub>
 8009f76:	4629      	mov	r1, r5
 8009f78:	f7f6 fed4 	bl	8000d24 <__aeabi_fmul>
 8009f7c:	493f      	ldr	r1, [pc, #252]	; (800a07c <atanf+0x1f8>)
 8009f7e:	f7f6 fdc7 	bl	8000b10 <__aeabi_fsub>
 8009f82:	4629      	mov	r1, r5
 8009f84:	f7f6 fece 	bl	8000d24 <__aeabi_fmul>
 8009f88:	493d      	ldr	r1, [pc, #244]	; (800a080 <atanf+0x1fc>)
 8009f8a:	f7f6 fdc1 	bl	8000b10 <__aeabi_fsub>
 8009f8e:	4629      	mov	r1, r5
 8009f90:	f7f6 fec8 	bl	8000d24 <__aeabi_fmul>
 8009f94:	493b      	ldr	r1, [pc, #236]	; (800a084 <atanf+0x200>)
 8009f96:	f7f6 fdbb 	bl	8000b10 <__aeabi_fsub>
 8009f9a:	4629      	mov	r1, r5
 8009f9c:	f7f6 fec2 	bl	8000d24 <__aeabi_fmul>
 8009fa0:	4601      	mov	r1, r0
 8009fa2:	4638      	mov	r0, r7
 8009fa4:	f7f6 fdb6 	bl	8000b14 <__addsf3>
 8009fa8:	4621      	mov	r1, r4
 8009faa:	f7f6 febb 	bl	8000d24 <__aeabi_fmul>
 8009fae:	1c73      	adds	r3, r6, #1
 8009fb0:	4601      	mov	r1, r0
 8009fb2:	d133      	bne.n	800a01c <atanf+0x198>
 8009fb4:	4620      	mov	r0, r4
 8009fb6:	f7f6 fdab 	bl	8000b10 <__aeabi_fsub>
 8009fba:	e772      	b.n	8009ea2 <atanf+0x1e>
 8009fbc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009fc0:	f7f6 fda6 	bl	8000b10 <__aeabi_fsub>
 8009fc4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009fc8:	4605      	mov	r5, r0
 8009fca:	4620      	mov	r0, r4
 8009fcc:	f7f6 fda2 	bl	8000b14 <__addsf3>
 8009fd0:	4601      	mov	r1, r0
 8009fd2:	4628      	mov	r0, r5
 8009fd4:	f7f6 ff5a 	bl	8000e8c <__aeabi_fdiv>
 8009fd8:	2601      	movs	r6, #1
 8009fda:	4604      	mov	r4, r0
 8009fdc:	e799      	b.n	8009f12 <atanf+0x8e>
 8009fde:	4b2a      	ldr	r3, [pc, #168]	; (800a088 <atanf+0x204>)
 8009fe0:	429d      	cmp	r5, r3
 8009fe2:	dc14      	bgt.n	800a00e <atanf+0x18a>
 8009fe4:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8009fe8:	f7f6 fd92 	bl	8000b10 <__aeabi_fsub>
 8009fec:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8009ff0:	4605      	mov	r5, r0
 8009ff2:	4620      	mov	r0, r4
 8009ff4:	f7f6 fe96 	bl	8000d24 <__aeabi_fmul>
 8009ff8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009ffc:	f7f6 fd8a 	bl	8000b14 <__addsf3>
 800a000:	4601      	mov	r1, r0
 800a002:	4628      	mov	r0, r5
 800a004:	f7f6 ff42 	bl	8000e8c <__aeabi_fdiv>
 800a008:	2602      	movs	r6, #2
 800a00a:	4604      	mov	r4, r0
 800a00c:	e781      	b.n	8009f12 <atanf+0x8e>
 800a00e:	4601      	mov	r1, r0
 800a010:	481e      	ldr	r0, [pc, #120]	; (800a08c <atanf+0x208>)
 800a012:	f7f6 ff3b 	bl	8000e8c <__aeabi_fdiv>
 800a016:	2603      	movs	r6, #3
 800a018:	4604      	mov	r4, r0
 800a01a:	e77a      	b.n	8009f12 <atanf+0x8e>
 800a01c:	4b1c      	ldr	r3, [pc, #112]	; (800a090 <atanf+0x20c>)
 800a01e:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800a022:	f7f6 fd75 	bl	8000b10 <__aeabi_fsub>
 800a026:	4621      	mov	r1, r4
 800a028:	f7f6 fd72 	bl	8000b10 <__aeabi_fsub>
 800a02c:	4b19      	ldr	r3, [pc, #100]	; (800a094 <atanf+0x210>)
 800a02e:	4601      	mov	r1, r0
 800a030:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a034:	f7f6 fd6c 	bl	8000b10 <__aeabi_fsub>
 800a038:	f1b8 0f00 	cmp.w	r8, #0
 800a03c:	4604      	mov	r4, r0
 800a03e:	f6bf af36 	bge.w	8009eae <atanf+0x2a>
 800a042:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800a046:	e72c      	b.n	8009ea2 <atanf+0x1e>
 800a048:	4c13      	ldr	r4, [pc, #76]	; (800a098 <atanf+0x214>)
 800a04a:	e730      	b.n	8009eae <atanf+0x2a>
 800a04c:	bfc90fdb 	.word	0xbfc90fdb
 800a050:	3edfffff 	.word	0x3edfffff
 800a054:	7149f2ca 	.word	0x7149f2ca
 800a058:	3f97ffff 	.word	0x3f97ffff
 800a05c:	3c8569d7 	.word	0x3c8569d7
 800a060:	3d4bda59 	.word	0x3d4bda59
 800a064:	3d886b35 	.word	0x3d886b35
 800a068:	3dba2e6e 	.word	0x3dba2e6e
 800a06c:	3e124925 	.word	0x3e124925
 800a070:	3eaaaaab 	.word	0x3eaaaaab
 800a074:	bd15a221 	.word	0xbd15a221
 800a078:	3d6ef16b 	.word	0x3d6ef16b
 800a07c:	3d9d8795 	.word	0x3d9d8795
 800a080:	3de38e38 	.word	0x3de38e38
 800a084:	3e4ccccd 	.word	0x3e4ccccd
 800a088:	401bffff 	.word	0x401bffff
 800a08c:	bf800000 	.word	0xbf800000
 800a090:	0800b2f8 	.word	0x0800b2f8
 800a094:	0800b2e8 	.word	0x0800b2e8
 800a098:	3fc90fdb 	.word	0x3fc90fdb

0800a09c <fabsf>:
 800a09c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800a0a0:	4770      	bx	lr
	...

0800a0a4 <nanf>:
 800a0a4:	4800      	ldr	r0, [pc, #0]	; (800a0a8 <nanf+0x4>)
 800a0a6:	4770      	bx	lr
 800a0a8:	7fc00000 	.word	0x7fc00000

0800a0ac <__errno>:
 800a0ac:	4b01      	ldr	r3, [pc, #4]	; (800a0b4 <__errno+0x8>)
 800a0ae:	6818      	ldr	r0, [r3, #0]
 800a0b0:	4770      	bx	lr
 800a0b2:	bf00      	nop
 800a0b4:	20000024 	.word	0x20000024

0800a0b8 <__libc_init_array>:
 800a0b8:	b570      	push	{r4, r5, r6, lr}
 800a0ba:	2600      	movs	r6, #0
 800a0bc:	4d0c      	ldr	r5, [pc, #48]	; (800a0f0 <__libc_init_array+0x38>)
 800a0be:	4c0d      	ldr	r4, [pc, #52]	; (800a0f4 <__libc_init_array+0x3c>)
 800a0c0:	1b64      	subs	r4, r4, r5
 800a0c2:	10a4      	asrs	r4, r4, #2
 800a0c4:	42a6      	cmp	r6, r4
 800a0c6:	d109      	bne.n	800a0dc <__libc_init_array+0x24>
 800a0c8:	f001 f82c 	bl	800b124 <_init>
 800a0cc:	2600      	movs	r6, #0
 800a0ce:	4d0a      	ldr	r5, [pc, #40]	; (800a0f8 <__libc_init_array+0x40>)
 800a0d0:	4c0a      	ldr	r4, [pc, #40]	; (800a0fc <__libc_init_array+0x44>)
 800a0d2:	1b64      	subs	r4, r4, r5
 800a0d4:	10a4      	asrs	r4, r4, #2
 800a0d6:	42a6      	cmp	r6, r4
 800a0d8:	d105      	bne.n	800a0e6 <__libc_init_array+0x2e>
 800a0da:	bd70      	pop	{r4, r5, r6, pc}
 800a0dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0e0:	4798      	blx	r3
 800a0e2:	3601      	adds	r6, #1
 800a0e4:	e7ee      	b.n	800a0c4 <__libc_init_array+0xc>
 800a0e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0ea:	4798      	blx	r3
 800a0ec:	3601      	adds	r6, #1
 800a0ee:	e7f2      	b.n	800a0d6 <__libc_init_array+0x1e>
 800a0f0:	0800b3a0 	.word	0x0800b3a0
 800a0f4:	0800b3a0 	.word	0x0800b3a0
 800a0f8:	0800b3a0 	.word	0x0800b3a0
 800a0fc:	0800b3a4 	.word	0x0800b3a4

0800a100 <memset>:
 800a100:	4603      	mov	r3, r0
 800a102:	4402      	add	r2, r0
 800a104:	4293      	cmp	r3, r2
 800a106:	d100      	bne.n	800a10a <memset+0xa>
 800a108:	4770      	bx	lr
 800a10a:	f803 1b01 	strb.w	r1, [r3], #1
 800a10e:	e7f9      	b.n	800a104 <memset+0x4>

0800a110 <iprintf>:
 800a110:	b40f      	push	{r0, r1, r2, r3}
 800a112:	4b0a      	ldr	r3, [pc, #40]	; (800a13c <iprintf+0x2c>)
 800a114:	b513      	push	{r0, r1, r4, lr}
 800a116:	681c      	ldr	r4, [r3, #0]
 800a118:	b124      	cbz	r4, 800a124 <iprintf+0x14>
 800a11a:	69a3      	ldr	r3, [r4, #24]
 800a11c:	b913      	cbnz	r3, 800a124 <iprintf+0x14>
 800a11e:	4620      	mov	r0, r4
 800a120:	f000 fa5a 	bl	800a5d8 <__sinit>
 800a124:	ab05      	add	r3, sp, #20
 800a126:	4620      	mov	r0, r4
 800a128:	9a04      	ldr	r2, [sp, #16]
 800a12a:	68a1      	ldr	r1, [r4, #8]
 800a12c:	9301      	str	r3, [sp, #4]
 800a12e:	f000 fc5d 	bl	800a9ec <_vfiprintf_r>
 800a132:	b002      	add	sp, #8
 800a134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a138:	b004      	add	sp, #16
 800a13a:	4770      	bx	lr
 800a13c:	20000024 	.word	0x20000024

0800a140 <_puts_r>:
 800a140:	b570      	push	{r4, r5, r6, lr}
 800a142:	460e      	mov	r6, r1
 800a144:	4605      	mov	r5, r0
 800a146:	b118      	cbz	r0, 800a150 <_puts_r+0x10>
 800a148:	6983      	ldr	r3, [r0, #24]
 800a14a:	b90b      	cbnz	r3, 800a150 <_puts_r+0x10>
 800a14c:	f000 fa44 	bl	800a5d8 <__sinit>
 800a150:	69ab      	ldr	r3, [r5, #24]
 800a152:	68ac      	ldr	r4, [r5, #8]
 800a154:	b913      	cbnz	r3, 800a15c <_puts_r+0x1c>
 800a156:	4628      	mov	r0, r5
 800a158:	f000 fa3e 	bl	800a5d8 <__sinit>
 800a15c:	4b2c      	ldr	r3, [pc, #176]	; (800a210 <_puts_r+0xd0>)
 800a15e:	429c      	cmp	r4, r3
 800a160:	d120      	bne.n	800a1a4 <_puts_r+0x64>
 800a162:	686c      	ldr	r4, [r5, #4]
 800a164:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a166:	07db      	lsls	r3, r3, #31
 800a168:	d405      	bmi.n	800a176 <_puts_r+0x36>
 800a16a:	89a3      	ldrh	r3, [r4, #12]
 800a16c:	0598      	lsls	r0, r3, #22
 800a16e:	d402      	bmi.n	800a176 <_puts_r+0x36>
 800a170:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a172:	f000 facf 	bl	800a714 <__retarget_lock_acquire_recursive>
 800a176:	89a3      	ldrh	r3, [r4, #12]
 800a178:	0719      	lsls	r1, r3, #28
 800a17a:	d51d      	bpl.n	800a1b8 <_puts_r+0x78>
 800a17c:	6923      	ldr	r3, [r4, #16]
 800a17e:	b1db      	cbz	r3, 800a1b8 <_puts_r+0x78>
 800a180:	3e01      	subs	r6, #1
 800a182:	68a3      	ldr	r3, [r4, #8]
 800a184:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a188:	3b01      	subs	r3, #1
 800a18a:	60a3      	str	r3, [r4, #8]
 800a18c:	bb39      	cbnz	r1, 800a1de <_puts_r+0x9e>
 800a18e:	2b00      	cmp	r3, #0
 800a190:	da38      	bge.n	800a204 <_puts_r+0xc4>
 800a192:	4622      	mov	r2, r4
 800a194:	210a      	movs	r1, #10
 800a196:	4628      	mov	r0, r5
 800a198:	f000 f848 	bl	800a22c <__swbuf_r>
 800a19c:	3001      	adds	r0, #1
 800a19e:	d011      	beq.n	800a1c4 <_puts_r+0x84>
 800a1a0:	250a      	movs	r5, #10
 800a1a2:	e011      	b.n	800a1c8 <_puts_r+0x88>
 800a1a4:	4b1b      	ldr	r3, [pc, #108]	; (800a214 <_puts_r+0xd4>)
 800a1a6:	429c      	cmp	r4, r3
 800a1a8:	d101      	bne.n	800a1ae <_puts_r+0x6e>
 800a1aa:	68ac      	ldr	r4, [r5, #8]
 800a1ac:	e7da      	b.n	800a164 <_puts_r+0x24>
 800a1ae:	4b1a      	ldr	r3, [pc, #104]	; (800a218 <_puts_r+0xd8>)
 800a1b0:	429c      	cmp	r4, r3
 800a1b2:	bf08      	it	eq
 800a1b4:	68ec      	ldreq	r4, [r5, #12]
 800a1b6:	e7d5      	b.n	800a164 <_puts_r+0x24>
 800a1b8:	4621      	mov	r1, r4
 800a1ba:	4628      	mov	r0, r5
 800a1bc:	f000 f888 	bl	800a2d0 <__swsetup_r>
 800a1c0:	2800      	cmp	r0, #0
 800a1c2:	d0dd      	beq.n	800a180 <_puts_r+0x40>
 800a1c4:	f04f 35ff 	mov.w	r5, #4294967295
 800a1c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a1ca:	07da      	lsls	r2, r3, #31
 800a1cc:	d405      	bmi.n	800a1da <_puts_r+0x9a>
 800a1ce:	89a3      	ldrh	r3, [r4, #12]
 800a1d0:	059b      	lsls	r3, r3, #22
 800a1d2:	d402      	bmi.n	800a1da <_puts_r+0x9a>
 800a1d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a1d6:	f000 fa9e 	bl	800a716 <__retarget_lock_release_recursive>
 800a1da:	4628      	mov	r0, r5
 800a1dc:	bd70      	pop	{r4, r5, r6, pc}
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	da04      	bge.n	800a1ec <_puts_r+0xac>
 800a1e2:	69a2      	ldr	r2, [r4, #24]
 800a1e4:	429a      	cmp	r2, r3
 800a1e6:	dc06      	bgt.n	800a1f6 <_puts_r+0xb6>
 800a1e8:	290a      	cmp	r1, #10
 800a1ea:	d004      	beq.n	800a1f6 <_puts_r+0xb6>
 800a1ec:	6823      	ldr	r3, [r4, #0]
 800a1ee:	1c5a      	adds	r2, r3, #1
 800a1f0:	6022      	str	r2, [r4, #0]
 800a1f2:	7019      	strb	r1, [r3, #0]
 800a1f4:	e7c5      	b.n	800a182 <_puts_r+0x42>
 800a1f6:	4622      	mov	r2, r4
 800a1f8:	4628      	mov	r0, r5
 800a1fa:	f000 f817 	bl	800a22c <__swbuf_r>
 800a1fe:	3001      	adds	r0, #1
 800a200:	d1bf      	bne.n	800a182 <_puts_r+0x42>
 800a202:	e7df      	b.n	800a1c4 <_puts_r+0x84>
 800a204:	250a      	movs	r5, #10
 800a206:	6823      	ldr	r3, [r4, #0]
 800a208:	1c5a      	adds	r2, r3, #1
 800a20a:	6022      	str	r2, [r4, #0]
 800a20c:	701d      	strb	r5, [r3, #0]
 800a20e:	e7db      	b.n	800a1c8 <_puts_r+0x88>
 800a210:	0800b32c 	.word	0x0800b32c
 800a214:	0800b34c 	.word	0x0800b34c
 800a218:	0800b30c 	.word	0x0800b30c

0800a21c <puts>:
 800a21c:	4b02      	ldr	r3, [pc, #8]	; (800a228 <puts+0xc>)
 800a21e:	4601      	mov	r1, r0
 800a220:	6818      	ldr	r0, [r3, #0]
 800a222:	f7ff bf8d 	b.w	800a140 <_puts_r>
 800a226:	bf00      	nop
 800a228:	20000024 	.word	0x20000024

0800a22c <__swbuf_r>:
 800a22c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a22e:	460e      	mov	r6, r1
 800a230:	4614      	mov	r4, r2
 800a232:	4605      	mov	r5, r0
 800a234:	b118      	cbz	r0, 800a23e <__swbuf_r+0x12>
 800a236:	6983      	ldr	r3, [r0, #24]
 800a238:	b90b      	cbnz	r3, 800a23e <__swbuf_r+0x12>
 800a23a:	f000 f9cd 	bl	800a5d8 <__sinit>
 800a23e:	4b21      	ldr	r3, [pc, #132]	; (800a2c4 <__swbuf_r+0x98>)
 800a240:	429c      	cmp	r4, r3
 800a242:	d12b      	bne.n	800a29c <__swbuf_r+0x70>
 800a244:	686c      	ldr	r4, [r5, #4]
 800a246:	69a3      	ldr	r3, [r4, #24]
 800a248:	60a3      	str	r3, [r4, #8]
 800a24a:	89a3      	ldrh	r3, [r4, #12]
 800a24c:	071a      	lsls	r2, r3, #28
 800a24e:	d52f      	bpl.n	800a2b0 <__swbuf_r+0x84>
 800a250:	6923      	ldr	r3, [r4, #16]
 800a252:	b36b      	cbz	r3, 800a2b0 <__swbuf_r+0x84>
 800a254:	6923      	ldr	r3, [r4, #16]
 800a256:	6820      	ldr	r0, [r4, #0]
 800a258:	b2f6      	uxtb	r6, r6
 800a25a:	1ac0      	subs	r0, r0, r3
 800a25c:	6963      	ldr	r3, [r4, #20]
 800a25e:	4637      	mov	r7, r6
 800a260:	4283      	cmp	r3, r0
 800a262:	dc04      	bgt.n	800a26e <__swbuf_r+0x42>
 800a264:	4621      	mov	r1, r4
 800a266:	4628      	mov	r0, r5
 800a268:	f000 f922 	bl	800a4b0 <_fflush_r>
 800a26c:	bb30      	cbnz	r0, 800a2bc <__swbuf_r+0x90>
 800a26e:	68a3      	ldr	r3, [r4, #8]
 800a270:	3001      	adds	r0, #1
 800a272:	3b01      	subs	r3, #1
 800a274:	60a3      	str	r3, [r4, #8]
 800a276:	6823      	ldr	r3, [r4, #0]
 800a278:	1c5a      	adds	r2, r3, #1
 800a27a:	6022      	str	r2, [r4, #0]
 800a27c:	701e      	strb	r6, [r3, #0]
 800a27e:	6963      	ldr	r3, [r4, #20]
 800a280:	4283      	cmp	r3, r0
 800a282:	d004      	beq.n	800a28e <__swbuf_r+0x62>
 800a284:	89a3      	ldrh	r3, [r4, #12]
 800a286:	07db      	lsls	r3, r3, #31
 800a288:	d506      	bpl.n	800a298 <__swbuf_r+0x6c>
 800a28a:	2e0a      	cmp	r6, #10
 800a28c:	d104      	bne.n	800a298 <__swbuf_r+0x6c>
 800a28e:	4621      	mov	r1, r4
 800a290:	4628      	mov	r0, r5
 800a292:	f000 f90d 	bl	800a4b0 <_fflush_r>
 800a296:	b988      	cbnz	r0, 800a2bc <__swbuf_r+0x90>
 800a298:	4638      	mov	r0, r7
 800a29a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a29c:	4b0a      	ldr	r3, [pc, #40]	; (800a2c8 <__swbuf_r+0x9c>)
 800a29e:	429c      	cmp	r4, r3
 800a2a0:	d101      	bne.n	800a2a6 <__swbuf_r+0x7a>
 800a2a2:	68ac      	ldr	r4, [r5, #8]
 800a2a4:	e7cf      	b.n	800a246 <__swbuf_r+0x1a>
 800a2a6:	4b09      	ldr	r3, [pc, #36]	; (800a2cc <__swbuf_r+0xa0>)
 800a2a8:	429c      	cmp	r4, r3
 800a2aa:	bf08      	it	eq
 800a2ac:	68ec      	ldreq	r4, [r5, #12]
 800a2ae:	e7ca      	b.n	800a246 <__swbuf_r+0x1a>
 800a2b0:	4621      	mov	r1, r4
 800a2b2:	4628      	mov	r0, r5
 800a2b4:	f000 f80c 	bl	800a2d0 <__swsetup_r>
 800a2b8:	2800      	cmp	r0, #0
 800a2ba:	d0cb      	beq.n	800a254 <__swbuf_r+0x28>
 800a2bc:	f04f 37ff 	mov.w	r7, #4294967295
 800a2c0:	e7ea      	b.n	800a298 <__swbuf_r+0x6c>
 800a2c2:	bf00      	nop
 800a2c4:	0800b32c 	.word	0x0800b32c
 800a2c8:	0800b34c 	.word	0x0800b34c
 800a2cc:	0800b30c 	.word	0x0800b30c

0800a2d0 <__swsetup_r>:
 800a2d0:	4b32      	ldr	r3, [pc, #200]	; (800a39c <__swsetup_r+0xcc>)
 800a2d2:	b570      	push	{r4, r5, r6, lr}
 800a2d4:	681d      	ldr	r5, [r3, #0]
 800a2d6:	4606      	mov	r6, r0
 800a2d8:	460c      	mov	r4, r1
 800a2da:	b125      	cbz	r5, 800a2e6 <__swsetup_r+0x16>
 800a2dc:	69ab      	ldr	r3, [r5, #24]
 800a2de:	b913      	cbnz	r3, 800a2e6 <__swsetup_r+0x16>
 800a2e0:	4628      	mov	r0, r5
 800a2e2:	f000 f979 	bl	800a5d8 <__sinit>
 800a2e6:	4b2e      	ldr	r3, [pc, #184]	; (800a3a0 <__swsetup_r+0xd0>)
 800a2e8:	429c      	cmp	r4, r3
 800a2ea:	d10f      	bne.n	800a30c <__swsetup_r+0x3c>
 800a2ec:	686c      	ldr	r4, [r5, #4]
 800a2ee:	89a3      	ldrh	r3, [r4, #12]
 800a2f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a2f4:	0719      	lsls	r1, r3, #28
 800a2f6:	d42c      	bmi.n	800a352 <__swsetup_r+0x82>
 800a2f8:	06dd      	lsls	r5, r3, #27
 800a2fa:	d411      	bmi.n	800a320 <__swsetup_r+0x50>
 800a2fc:	2309      	movs	r3, #9
 800a2fe:	6033      	str	r3, [r6, #0]
 800a300:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a304:	f04f 30ff 	mov.w	r0, #4294967295
 800a308:	81a3      	strh	r3, [r4, #12]
 800a30a:	e03e      	b.n	800a38a <__swsetup_r+0xba>
 800a30c:	4b25      	ldr	r3, [pc, #148]	; (800a3a4 <__swsetup_r+0xd4>)
 800a30e:	429c      	cmp	r4, r3
 800a310:	d101      	bne.n	800a316 <__swsetup_r+0x46>
 800a312:	68ac      	ldr	r4, [r5, #8]
 800a314:	e7eb      	b.n	800a2ee <__swsetup_r+0x1e>
 800a316:	4b24      	ldr	r3, [pc, #144]	; (800a3a8 <__swsetup_r+0xd8>)
 800a318:	429c      	cmp	r4, r3
 800a31a:	bf08      	it	eq
 800a31c:	68ec      	ldreq	r4, [r5, #12]
 800a31e:	e7e6      	b.n	800a2ee <__swsetup_r+0x1e>
 800a320:	0758      	lsls	r0, r3, #29
 800a322:	d512      	bpl.n	800a34a <__swsetup_r+0x7a>
 800a324:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a326:	b141      	cbz	r1, 800a33a <__swsetup_r+0x6a>
 800a328:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a32c:	4299      	cmp	r1, r3
 800a32e:	d002      	beq.n	800a336 <__swsetup_r+0x66>
 800a330:	4630      	mov	r0, r6
 800a332:	f000 fa57 	bl	800a7e4 <_free_r>
 800a336:	2300      	movs	r3, #0
 800a338:	6363      	str	r3, [r4, #52]	; 0x34
 800a33a:	89a3      	ldrh	r3, [r4, #12]
 800a33c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a340:	81a3      	strh	r3, [r4, #12]
 800a342:	2300      	movs	r3, #0
 800a344:	6063      	str	r3, [r4, #4]
 800a346:	6923      	ldr	r3, [r4, #16]
 800a348:	6023      	str	r3, [r4, #0]
 800a34a:	89a3      	ldrh	r3, [r4, #12]
 800a34c:	f043 0308 	orr.w	r3, r3, #8
 800a350:	81a3      	strh	r3, [r4, #12]
 800a352:	6923      	ldr	r3, [r4, #16]
 800a354:	b94b      	cbnz	r3, 800a36a <__swsetup_r+0x9a>
 800a356:	89a3      	ldrh	r3, [r4, #12]
 800a358:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a35c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a360:	d003      	beq.n	800a36a <__swsetup_r+0x9a>
 800a362:	4621      	mov	r1, r4
 800a364:	4630      	mov	r0, r6
 800a366:	f000 f9fd 	bl	800a764 <__smakebuf_r>
 800a36a:	89a0      	ldrh	r0, [r4, #12]
 800a36c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a370:	f010 0301 	ands.w	r3, r0, #1
 800a374:	d00a      	beq.n	800a38c <__swsetup_r+0xbc>
 800a376:	2300      	movs	r3, #0
 800a378:	60a3      	str	r3, [r4, #8]
 800a37a:	6963      	ldr	r3, [r4, #20]
 800a37c:	425b      	negs	r3, r3
 800a37e:	61a3      	str	r3, [r4, #24]
 800a380:	6923      	ldr	r3, [r4, #16]
 800a382:	b943      	cbnz	r3, 800a396 <__swsetup_r+0xc6>
 800a384:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a388:	d1ba      	bne.n	800a300 <__swsetup_r+0x30>
 800a38a:	bd70      	pop	{r4, r5, r6, pc}
 800a38c:	0781      	lsls	r1, r0, #30
 800a38e:	bf58      	it	pl
 800a390:	6963      	ldrpl	r3, [r4, #20]
 800a392:	60a3      	str	r3, [r4, #8]
 800a394:	e7f4      	b.n	800a380 <__swsetup_r+0xb0>
 800a396:	2000      	movs	r0, #0
 800a398:	e7f7      	b.n	800a38a <__swsetup_r+0xba>
 800a39a:	bf00      	nop
 800a39c:	20000024 	.word	0x20000024
 800a3a0:	0800b32c 	.word	0x0800b32c
 800a3a4:	0800b34c 	.word	0x0800b34c
 800a3a8:	0800b30c 	.word	0x0800b30c

0800a3ac <__sflush_r>:
 800a3ac:	898a      	ldrh	r2, [r1, #12]
 800a3ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3b0:	4605      	mov	r5, r0
 800a3b2:	0710      	lsls	r0, r2, #28
 800a3b4:	460c      	mov	r4, r1
 800a3b6:	d457      	bmi.n	800a468 <__sflush_r+0xbc>
 800a3b8:	684b      	ldr	r3, [r1, #4]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	dc04      	bgt.n	800a3c8 <__sflush_r+0x1c>
 800a3be:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	dc01      	bgt.n	800a3c8 <__sflush_r+0x1c>
 800a3c4:	2000      	movs	r0, #0
 800a3c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a3ca:	2e00      	cmp	r6, #0
 800a3cc:	d0fa      	beq.n	800a3c4 <__sflush_r+0x18>
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a3d4:	682f      	ldr	r7, [r5, #0]
 800a3d6:	602b      	str	r3, [r5, #0]
 800a3d8:	d032      	beq.n	800a440 <__sflush_r+0x94>
 800a3da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a3dc:	89a3      	ldrh	r3, [r4, #12]
 800a3de:	075a      	lsls	r2, r3, #29
 800a3e0:	d505      	bpl.n	800a3ee <__sflush_r+0x42>
 800a3e2:	6863      	ldr	r3, [r4, #4]
 800a3e4:	1ac0      	subs	r0, r0, r3
 800a3e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a3e8:	b10b      	cbz	r3, 800a3ee <__sflush_r+0x42>
 800a3ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a3ec:	1ac0      	subs	r0, r0, r3
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	4602      	mov	r2, r0
 800a3f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a3f4:	4628      	mov	r0, r5
 800a3f6:	6a21      	ldr	r1, [r4, #32]
 800a3f8:	47b0      	blx	r6
 800a3fa:	1c43      	adds	r3, r0, #1
 800a3fc:	89a3      	ldrh	r3, [r4, #12]
 800a3fe:	d106      	bne.n	800a40e <__sflush_r+0x62>
 800a400:	6829      	ldr	r1, [r5, #0]
 800a402:	291d      	cmp	r1, #29
 800a404:	d82c      	bhi.n	800a460 <__sflush_r+0xb4>
 800a406:	4a29      	ldr	r2, [pc, #164]	; (800a4ac <__sflush_r+0x100>)
 800a408:	40ca      	lsrs	r2, r1
 800a40a:	07d6      	lsls	r6, r2, #31
 800a40c:	d528      	bpl.n	800a460 <__sflush_r+0xb4>
 800a40e:	2200      	movs	r2, #0
 800a410:	6062      	str	r2, [r4, #4]
 800a412:	6922      	ldr	r2, [r4, #16]
 800a414:	04d9      	lsls	r1, r3, #19
 800a416:	6022      	str	r2, [r4, #0]
 800a418:	d504      	bpl.n	800a424 <__sflush_r+0x78>
 800a41a:	1c42      	adds	r2, r0, #1
 800a41c:	d101      	bne.n	800a422 <__sflush_r+0x76>
 800a41e:	682b      	ldr	r3, [r5, #0]
 800a420:	b903      	cbnz	r3, 800a424 <__sflush_r+0x78>
 800a422:	6560      	str	r0, [r4, #84]	; 0x54
 800a424:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a426:	602f      	str	r7, [r5, #0]
 800a428:	2900      	cmp	r1, #0
 800a42a:	d0cb      	beq.n	800a3c4 <__sflush_r+0x18>
 800a42c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a430:	4299      	cmp	r1, r3
 800a432:	d002      	beq.n	800a43a <__sflush_r+0x8e>
 800a434:	4628      	mov	r0, r5
 800a436:	f000 f9d5 	bl	800a7e4 <_free_r>
 800a43a:	2000      	movs	r0, #0
 800a43c:	6360      	str	r0, [r4, #52]	; 0x34
 800a43e:	e7c2      	b.n	800a3c6 <__sflush_r+0x1a>
 800a440:	6a21      	ldr	r1, [r4, #32]
 800a442:	2301      	movs	r3, #1
 800a444:	4628      	mov	r0, r5
 800a446:	47b0      	blx	r6
 800a448:	1c41      	adds	r1, r0, #1
 800a44a:	d1c7      	bne.n	800a3dc <__sflush_r+0x30>
 800a44c:	682b      	ldr	r3, [r5, #0]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d0c4      	beq.n	800a3dc <__sflush_r+0x30>
 800a452:	2b1d      	cmp	r3, #29
 800a454:	d001      	beq.n	800a45a <__sflush_r+0xae>
 800a456:	2b16      	cmp	r3, #22
 800a458:	d101      	bne.n	800a45e <__sflush_r+0xb2>
 800a45a:	602f      	str	r7, [r5, #0]
 800a45c:	e7b2      	b.n	800a3c4 <__sflush_r+0x18>
 800a45e:	89a3      	ldrh	r3, [r4, #12]
 800a460:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a464:	81a3      	strh	r3, [r4, #12]
 800a466:	e7ae      	b.n	800a3c6 <__sflush_r+0x1a>
 800a468:	690f      	ldr	r7, [r1, #16]
 800a46a:	2f00      	cmp	r7, #0
 800a46c:	d0aa      	beq.n	800a3c4 <__sflush_r+0x18>
 800a46e:	0793      	lsls	r3, r2, #30
 800a470:	bf18      	it	ne
 800a472:	2300      	movne	r3, #0
 800a474:	680e      	ldr	r6, [r1, #0]
 800a476:	bf08      	it	eq
 800a478:	694b      	ldreq	r3, [r1, #20]
 800a47a:	1bf6      	subs	r6, r6, r7
 800a47c:	600f      	str	r7, [r1, #0]
 800a47e:	608b      	str	r3, [r1, #8]
 800a480:	2e00      	cmp	r6, #0
 800a482:	dd9f      	ble.n	800a3c4 <__sflush_r+0x18>
 800a484:	4633      	mov	r3, r6
 800a486:	463a      	mov	r2, r7
 800a488:	4628      	mov	r0, r5
 800a48a:	6a21      	ldr	r1, [r4, #32]
 800a48c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800a490:	47e0      	blx	ip
 800a492:	2800      	cmp	r0, #0
 800a494:	dc06      	bgt.n	800a4a4 <__sflush_r+0xf8>
 800a496:	89a3      	ldrh	r3, [r4, #12]
 800a498:	f04f 30ff 	mov.w	r0, #4294967295
 800a49c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4a0:	81a3      	strh	r3, [r4, #12]
 800a4a2:	e790      	b.n	800a3c6 <__sflush_r+0x1a>
 800a4a4:	4407      	add	r7, r0
 800a4a6:	1a36      	subs	r6, r6, r0
 800a4a8:	e7ea      	b.n	800a480 <__sflush_r+0xd4>
 800a4aa:	bf00      	nop
 800a4ac:	20400001 	.word	0x20400001

0800a4b0 <_fflush_r>:
 800a4b0:	b538      	push	{r3, r4, r5, lr}
 800a4b2:	690b      	ldr	r3, [r1, #16]
 800a4b4:	4605      	mov	r5, r0
 800a4b6:	460c      	mov	r4, r1
 800a4b8:	b913      	cbnz	r3, 800a4c0 <_fflush_r+0x10>
 800a4ba:	2500      	movs	r5, #0
 800a4bc:	4628      	mov	r0, r5
 800a4be:	bd38      	pop	{r3, r4, r5, pc}
 800a4c0:	b118      	cbz	r0, 800a4ca <_fflush_r+0x1a>
 800a4c2:	6983      	ldr	r3, [r0, #24]
 800a4c4:	b90b      	cbnz	r3, 800a4ca <_fflush_r+0x1a>
 800a4c6:	f000 f887 	bl	800a5d8 <__sinit>
 800a4ca:	4b14      	ldr	r3, [pc, #80]	; (800a51c <_fflush_r+0x6c>)
 800a4cc:	429c      	cmp	r4, r3
 800a4ce:	d11b      	bne.n	800a508 <_fflush_r+0x58>
 800a4d0:	686c      	ldr	r4, [r5, #4]
 800a4d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d0ef      	beq.n	800a4ba <_fflush_r+0xa>
 800a4da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a4dc:	07d0      	lsls	r0, r2, #31
 800a4de:	d404      	bmi.n	800a4ea <_fflush_r+0x3a>
 800a4e0:	0599      	lsls	r1, r3, #22
 800a4e2:	d402      	bmi.n	800a4ea <_fflush_r+0x3a>
 800a4e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a4e6:	f000 f915 	bl	800a714 <__retarget_lock_acquire_recursive>
 800a4ea:	4628      	mov	r0, r5
 800a4ec:	4621      	mov	r1, r4
 800a4ee:	f7ff ff5d 	bl	800a3ac <__sflush_r>
 800a4f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a4f4:	4605      	mov	r5, r0
 800a4f6:	07da      	lsls	r2, r3, #31
 800a4f8:	d4e0      	bmi.n	800a4bc <_fflush_r+0xc>
 800a4fa:	89a3      	ldrh	r3, [r4, #12]
 800a4fc:	059b      	lsls	r3, r3, #22
 800a4fe:	d4dd      	bmi.n	800a4bc <_fflush_r+0xc>
 800a500:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a502:	f000 f908 	bl	800a716 <__retarget_lock_release_recursive>
 800a506:	e7d9      	b.n	800a4bc <_fflush_r+0xc>
 800a508:	4b05      	ldr	r3, [pc, #20]	; (800a520 <_fflush_r+0x70>)
 800a50a:	429c      	cmp	r4, r3
 800a50c:	d101      	bne.n	800a512 <_fflush_r+0x62>
 800a50e:	68ac      	ldr	r4, [r5, #8]
 800a510:	e7df      	b.n	800a4d2 <_fflush_r+0x22>
 800a512:	4b04      	ldr	r3, [pc, #16]	; (800a524 <_fflush_r+0x74>)
 800a514:	429c      	cmp	r4, r3
 800a516:	bf08      	it	eq
 800a518:	68ec      	ldreq	r4, [r5, #12]
 800a51a:	e7da      	b.n	800a4d2 <_fflush_r+0x22>
 800a51c:	0800b32c 	.word	0x0800b32c
 800a520:	0800b34c 	.word	0x0800b34c
 800a524:	0800b30c 	.word	0x0800b30c

0800a528 <std>:
 800a528:	2300      	movs	r3, #0
 800a52a:	b510      	push	{r4, lr}
 800a52c:	4604      	mov	r4, r0
 800a52e:	e9c0 3300 	strd	r3, r3, [r0]
 800a532:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a536:	6083      	str	r3, [r0, #8]
 800a538:	8181      	strh	r1, [r0, #12]
 800a53a:	6643      	str	r3, [r0, #100]	; 0x64
 800a53c:	81c2      	strh	r2, [r0, #14]
 800a53e:	6183      	str	r3, [r0, #24]
 800a540:	4619      	mov	r1, r3
 800a542:	2208      	movs	r2, #8
 800a544:	305c      	adds	r0, #92	; 0x5c
 800a546:	f7ff fddb 	bl	800a100 <memset>
 800a54a:	4b05      	ldr	r3, [pc, #20]	; (800a560 <std+0x38>)
 800a54c:	6224      	str	r4, [r4, #32]
 800a54e:	6263      	str	r3, [r4, #36]	; 0x24
 800a550:	4b04      	ldr	r3, [pc, #16]	; (800a564 <std+0x3c>)
 800a552:	62a3      	str	r3, [r4, #40]	; 0x28
 800a554:	4b04      	ldr	r3, [pc, #16]	; (800a568 <std+0x40>)
 800a556:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a558:	4b04      	ldr	r3, [pc, #16]	; (800a56c <std+0x44>)
 800a55a:	6323      	str	r3, [r4, #48]	; 0x30
 800a55c:	bd10      	pop	{r4, pc}
 800a55e:	bf00      	nop
 800a560:	0800af99 	.word	0x0800af99
 800a564:	0800afbb 	.word	0x0800afbb
 800a568:	0800aff3 	.word	0x0800aff3
 800a56c:	0800b017 	.word	0x0800b017

0800a570 <_cleanup_r>:
 800a570:	4901      	ldr	r1, [pc, #4]	; (800a578 <_cleanup_r+0x8>)
 800a572:	f000 b8af 	b.w	800a6d4 <_fwalk_reent>
 800a576:	bf00      	nop
 800a578:	0800a4b1 	.word	0x0800a4b1

0800a57c <__sfmoreglue>:
 800a57c:	2268      	movs	r2, #104	; 0x68
 800a57e:	b570      	push	{r4, r5, r6, lr}
 800a580:	1e4d      	subs	r5, r1, #1
 800a582:	4355      	muls	r5, r2
 800a584:	460e      	mov	r6, r1
 800a586:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a58a:	f000 f993 	bl	800a8b4 <_malloc_r>
 800a58e:	4604      	mov	r4, r0
 800a590:	b140      	cbz	r0, 800a5a4 <__sfmoreglue+0x28>
 800a592:	2100      	movs	r1, #0
 800a594:	e9c0 1600 	strd	r1, r6, [r0]
 800a598:	300c      	adds	r0, #12
 800a59a:	60a0      	str	r0, [r4, #8]
 800a59c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a5a0:	f7ff fdae 	bl	800a100 <memset>
 800a5a4:	4620      	mov	r0, r4
 800a5a6:	bd70      	pop	{r4, r5, r6, pc}

0800a5a8 <__sfp_lock_acquire>:
 800a5a8:	4801      	ldr	r0, [pc, #4]	; (800a5b0 <__sfp_lock_acquire+0x8>)
 800a5aa:	f000 b8b3 	b.w	800a714 <__retarget_lock_acquire_recursive>
 800a5ae:	bf00      	nop
 800a5b0:	20004371 	.word	0x20004371

0800a5b4 <__sfp_lock_release>:
 800a5b4:	4801      	ldr	r0, [pc, #4]	; (800a5bc <__sfp_lock_release+0x8>)
 800a5b6:	f000 b8ae 	b.w	800a716 <__retarget_lock_release_recursive>
 800a5ba:	bf00      	nop
 800a5bc:	20004371 	.word	0x20004371

0800a5c0 <__sinit_lock_acquire>:
 800a5c0:	4801      	ldr	r0, [pc, #4]	; (800a5c8 <__sinit_lock_acquire+0x8>)
 800a5c2:	f000 b8a7 	b.w	800a714 <__retarget_lock_acquire_recursive>
 800a5c6:	bf00      	nop
 800a5c8:	20004372 	.word	0x20004372

0800a5cc <__sinit_lock_release>:
 800a5cc:	4801      	ldr	r0, [pc, #4]	; (800a5d4 <__sinit_lock_release+0x8>)
 800a5ce:	f000 b8a2 	b.w	800a716 <__retarget_lock_release_recursive>
 800a5d2:	bf00      	nop
 800a5d4:	20004372 	.word	0x20004372

0800a5d8 <__sinit>:
 800a5d8:	b510      	push	{r4, lr}
 800a5da:	4604      	mov	r4, r0
 800a5dc:	f7ff fff0 	bl	800a5c0 <__sinit_lock_acquire>
 800a5e0:	69a3      	ldr	r3, [r4, #24]
 800a5e2:	b11b      	cbz	r3, 800a5ec <__sinit+0x14>
 800a5e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5e8:	f7ff bff0 	b.w	800a5cc <__sinit_lock_release>
 800a5ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a5f0:	6523      	str	r3, [r4, #80]	; 0x50
 800a5f2:	4b13      	ldr	r3, [pc, #76]	; (800a640 <__sinit+0x68>)
 800a5f4:	4a13      	ldr	r2, [pc, #76]	; (800a644 <__sinit+0x6c>)
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	62a2      	str	r2, [r4, #40]	; 0x28
 800a5fa:	42a3      	cmp	r3, r4
 800a5fc:	bf08      	it	eq
 800a5fe:	2301      	moveq	r3, #1
 800a600:	4620      	mov	r0, r4
 800a602:	bf08      	it	eq
 800a604:	61a3      	streq	r3, [r4, #24]
 800a606:	f000 f81f 	bl	800a648 <__sfp>
 800a60a:	6060      	str	r0, [r4, #4]
 800a60c:	4620      	mov	r0, r4
 800a60e:	f000 f81b 	bl	800a648 <__sfp>
 800a612:	60a0      	str	r0, [r4, #8]
 800a614:	4620      	mov	r0, r4
 800a616:	f000 f817 	bl	800a648 <__sfp>
 800a61a:	2200      	movs	r2, #0
 800a61c:	2104      	movs	r1, #4
 800a61e:	60e0      	str	r0, [r4, #12]
 800a620:	6860      	ldr	r0, [r4, #4]
 800a622:	f7ff ff81 	bl	800a528 <std>
 800a626:	2201      	movs	r2, #1
 800a628:	2109      	movs	r1, #9
 800a62a:	68a0      	ldr	r0, [r4, #8]
 800a62c:	f7ff ff7c 	bl	800a528 <std>
 800a630:	2202      	movs	r2, #2
 800a632:	2112      	movs	r1, #18
 800a634:	68e0      	ldr	r0, [r4, #12]
 800a636:	f7ff ff77 	bl	800a528 <std>
 800a63a:	2301      	movs	r3, #1
 800a63c:	61a3      	str	r3, [r4, #24]
 800a63e:	e7d1      	b.n	800a5e4 <__sinit+0xc>
 800a640:	0800b308 	.word	0x0800b308
 800a644:	0800a571 	.word	0x0800a571

0800a648 <__sfp>:
 800a648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a64a:	4607      	mov	r7, r0
 800a64c:	f7ff ffac 	bl	800a5a8 <__sfp_lock_acquire>
 800a650:	4b1e      	ldr	r3, [pc, #120]	; (800a6cc <__sfp+0x84>)
 800a652:	681e      	ldr	r6, [r3, #0]
 800a654:	69b3      	ldr	r3, [r6, #24]
 800a656:	b913      	cbnz	r3, 800a65e <__sfp+0x16>
 800a658:	4630      	mov	r0, r6
 800a65a:	f7ff ffbd 	bl	800a5d8 <__sinit>
 800a65e:	3648      	adds	r6, #72	; 0x48
 800a660:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a664:	3b01      	subs	r3, #1
 800a666:	d503      	bpl.n	800a670 <__sfp+0x28>
 800a668:	6833      	ldr	r3, [r6, #0]
 800a66a:	b30b      	cbz	r3, 800a6b0 <__sfp+0x68>
 800a66c:	6836      	ldr	r6, [r6, #0]
 800a66e:	e7f7      	b.n	800a660 <__sfp+0x18>
 800a670:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a674:	b9d5      	cbnz	r5, 800a6ac <__sfp+0x64>
 800a676:	4b16      	ldr	r3, [pc, #88]	; (800a6d0 <__sfp+0x88>)
 800a678:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a67c:	60e3      	str	r3, [r4, #12]
 800a67e:	6665      	str	r5, [r4, #100]	; 0x64
 800a680:	f000 f847 	bl	800a712 <__retarget_lock_init_recursive>
 800a684:	f7ff ff96 	bl	800a5b4 <__sfp_lock_release>
 800a688:	2208      	movs	r2, #8
 800a68a:	4629      	mov	r1, r5
 800a68c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a690:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a694:	6025      	str	r5, [r4, #0]
 800a696:	61a5      	str	r5, [r4, #24]
 800a698:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a69c:	f7ff fd30 	bl	800a100 <memset>
 800a6a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a6a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a6a8:	4620      	mov	r0, r4
 800a6aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6ac:	3468      	adds	r4, #104	; 0x68
 800a6ae:	e7d9      	b.n	800a664 <__sfp+0x1c>
 800a6b0:	2104      	movs	r1, #4
 800a6b2:	4638      	mov	r0, r7
 800a6b4:	f7ff ff62 	bl	800a57c <__sfmoreglue>
 800a6b8:	4604      	mov	r4, r0
 800a6ba:	6030      	str	r0, [r6, #0]
 800a6bc:	2800      	cmp	r0, #0
 800a6be:	d1d5      	bne.n	800a66c <__sfp+0x24>
 800a6c0:	f7ff ff78 	bl	800a5b4 <__sfp_lock_release>
 800a6c4:	230c      	movs	r3, #12
 800a6c6:	603b      	str	r3, [r7, #0]
 800a6c8:	e7ee      	b.n	800a6a8 <__sfp+0x60>
 800a6ca:	bf00      	nop
 800a6cc:	0800b308 	.word	0x0800b308
 800a6d0:	ffff0001 	.word	0xffff0001

0800a6d4 <_fwalk_reent>:
 800a6d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6d8:	4606      	mov	r6, r0
 800a6da:	4688      	mov	r8, r1
 800a6dc:	2700      	movs	r7, #0
 800a6de:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a6e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a6e6:	f1b9 0901 	subs.w	r9, r9, #1
 800a6ea:	d505      	bpl.n	800a6f8 <_fwalk_reent+0x24>
 800a6ec:	6824      	ldr	r4, [r4, #0]
 800a6ee:	2c00      	cmp	r4, #0
 800a6f0:	d1f7      	bne.n	800a6e2 <_fwalk_reent+0xe>
 800a6f2:	4638      	mov	r0, r7
 800a6f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6f8:	89ab      	ldrh	r3, [r5, #12]
 800a6fa:	2b01      	cmp	r3, #1
 800a6fc:	d907      	bls.n	800a70e <_fwalk_reent+0x3a>
 800a6fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a702:	3301      	adds	r3, #1
 800a704:	d003      	beq.n	800a70e <_fwalk_reent+0x3a>
 800a706:	4629      	mov	r1, r5
 800a708:	4630      	mov	r0, r6
 800a70a:	47c0      	blx	r8
 800a70c:	4307      	orrs	r7, r0
 800a70e:	3568      	adds	r5, #104	; 0x68
 800a710:	e7e9      	b.n	800a6e6 <_fwalk_reent+0x12>

0800a712 <__retarget_lock_init_recursive>:
 800a712:	4770      	bx	lr

0800a714 <__retarget_lock_acquire_recursive>:
 800a714:	4770      	bx	lr

0800a716 <__retarget_lock_release_recursive>:
 800a716:	4770      	bx	lr

0800a718 <__swhatbuf_r>:
 800a718:	b570      	push	{r4, r5, r6, lr}
 800a71a:	460e      	mov	r6, r1
 800a71c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a720:	4614      	mov	r4, r2
 800a722:	2900      	cmp	r1, #0
 800a724:	461d      	mov	r5, r3
 800a726:	b096      	sub	sp, #88	; 0x58
 800a728:	da08      	bge.n	800a73c <__swhatbuf_r+0x24>
 800a72a:	2200      	movs	r2, #0
 800a72c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a730:	602a      	str	r2, [r5, #0]
 800a732:	061a      	lsls	r2, r3, #24
 800a734:	d410      	bmi.n	800a758 <__swhatbuf_r+0x40>
 800a736:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a73a:	e00e      	b.n	800a75a <__swhatbuf_r+0x42>
 800a73c:	466a      	mov	r2, sp
 800a73e:	f000 fc91 	bl	800b064 <_fstat_r>
 800a742:	2800      	cmp	r0, #0
 800a744:	dbf1      	blt.n	800a72a <__swhatbuf_r+0x12>
 800a746:	9a01      	ldr	r2, [sp, #4]
 800a748:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a74c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a750:	425a      	negs	r2, r3
 800a752:	415a      	adcs	r2, r3
 800a754:	602a      	str	r2, [r5, #0]
 800a756:	e7ee      	b.n	800a736 <__swhatbuf_r+0x1e>
 800a758:	2340      	movs	r3, #64	; 0x40
 800a75a:	2000      	movs	r0, #0
 800a75c:	6023      	str	r3, [r4, #0]
 800a75e:	b016      	add	sp, #88	; 0x58
 800a760:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a764 <__smakebuf_r>:
 800a764:	898b      	ldrh	r3, [r1, #12]
 800a766:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a768:	079d      	lsls	r5, r3, #30
 800a76a:	4606      	mov	r6, r0
 800a76c:	460c      	mov	r4, r1
 800a76e:	d507      	bpl.n	800a780 <__smakebuf_r+0x1c>
 800a770:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a774:	6023      	str	r3, [r4, #0]
 800a776:	6123      	str	r3, [r4, #16]
 800a778:	2301      	movs	r3, #1
 800a77a:	6163      	str	r3, [r4, #20]
 800a77c:	b002      	add	sp, #8
 800a77e:	bd70      	pop	{r4, r5, r6, pc}
 800a780:	466a      	mov	r2, sp
 800a782:	ab01      	add	r3, sp, #4
 800a784:	f7ff ffc8 	bl	800a718 <__swhatbuf_r>
 800a788:	9900      	ldr	r1, [sp, #0]
 800a78a:	4605      	mov	r5, r0
 800a78c:	4630      	mov	r0, r6
 800a78e:	f000 f891 	bl	800a8b4 <_malloc_r>
 800a792:	b948      	cbnz	r0, 800a7a8 <__smakebuf_r+0x44>
 800a794:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a798:	059a      	lsls	r2, r3, #22
 800a79a:	d4ef      	bmi.n	800a77c <__smakebuf_r+0x18>
 800a79c:	f023 0303 	bic.w	r3, r3, #3
 800a7a0:	f043 0302 	orr.w	r3, r3, #2
 800a7a4:	81a3      	strh	r3, [r4, #12]
 800a7a6:	e7e3      	b.n	800a770 <__smakebuf_r+0xc>
 800a7a8:	4b0d      	ldr	r3, [pc, #52]	; (800a7e0 <__smakebuf_r+0x7c>)
 800a7aa:	62b3      	str	r3, [r6, #40]	; 0x28
 800a7ac:	89a3      	ldrh	r3, [r4, #12]
 800a7ae:	6020      	str	r0, [r4, #0]
 800a7b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7b4:	81a3      	strh	r3, [r4, #12]
 800a7b6:	9b00      	ldr	r3, [sp, #0]
 800a7b8:	6120      	str	r0, [r4, #16]
 800a7ba:	6163      	str	r3, [r4, #20]
 800a7bc:	9b01      	ldr	r3, [sp, #4]
 800a7be:	b15b      	cbz	r3, 800a7d8 <__smakebuf_r+0x74>
 800a7c0:	4630      	mov	r0, r6
 800a7c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a7c6:	f000 fc5f 	bl	800b088 <_isatty_r>
 800a7ca:	b128      	cbz	r0, 800a7d8 <__smakebuf_r+0x74>
 800a7cc:	89a3      	ldrh	r3, [r4, #12]
 800a7ce:	f023 0303 	bic.w	r3, r3, #3
 800a7d2:	f043 0301 	orr.w	r3, r3, #1
 800a7d6:	81a3      	strh	r3, [r4, #12]
 800a7d8:	89a0      	ldrh	r0, [r4, #12]
 800a7da:	4305      	orrs	r5, r0
 800a7dc:	81a5      	strh	r5, [r4, #12]
 800a7de:	e7cd      	b.n	800a77c <__smakebuf_r+0x18>
 800a7e0:	0800a571 	.word	0x0800a571

0800a7e4 <_free_r>:
 800a7e4:	b538      	push	{r3, r4, r5, lr}
 800a7e6:	4605      	mov	r5, r0
 800a7e8:	2900      	cmp	r1, #0
 800a7ea:	d040      	beq.n	800a86e <_free_r+0x8a>
 800a7ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a7f0:	1f0c      	subs	r4, r1, #4
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	bfb8      	it	lt
 800a7f6:	18e4      	addlt	r4, r4, r3
 800a7f8:	f000 fc76 	bl	800b0e8 <__malloc_lock>
 800a7fc:	4a1c      	ldr	r2, [pc, #112]	; (800a870 <_free_r+0x8c>)
 800a7fe:	6813      	ldr	r3, [r2, #0]
 800a800:	b933      	cbnz	r3, 800a810 <_free_r+0x2c>
 800a802:	6063      	str	r3, [r4, #4]
 800a804:	6014      	str	r4, [r2, #0]
 800a806:	4628      	mov	r0, r5
 800a808:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a80c:	f000 bc72 	b.w	800b0f4 <__malloc_unlock>
 800a810:	42a3      	cmp	r3, r4
 800a812:	d908      	bls.n	800a826 <_free_r+0x42>
 800a814:	6820      	ldr	r0, [r4, #0]
 800a816:	1821      	adds	r1, r4, r0
 800a818:	428b      	cmp	r3, r1
 800a81a:	bf01      	itttt	eq
 800a81c:	6819      	ldreq	r1, [r3, #0]
 800a81e:	685b      	ldreq	r3, [r3, #4]
 800a820:	1809      	addeq	r1, r1, r0
 800a822:	6021      	streq	r1, [r4, #0]
 800a824:	e7ed      	b.n	800a802 <_free_r+0x1e>
 800a826:	461a      	mov	r2, r3
 800a828:	685b      	ldr	r3, [r3, #4]
 800a82a:	b10b      	cbz	r3, 800a830 <_free_r+0x4c>
 800a82c:	42a3      	cmp	r3, r4
 800a82e:	d9fa      	bls.n	800a826 <_free_r+0x42>
 800a830:	6811      	ldr	r1, [r2, #0]
 800a832:	1850      	adds	r0, r2, r1
 800a834:	42a0      	cmp	r0, r4
 800a836:	d10b      	bne.n	800a850 <_free_r+0x6c>
 800a838:	6820      	ldr	r0, [r4, #0]
 800a83a:	4401      	add	r1, r0
 800a83c:	1850      	adds	r0, r2, r1
 800a83e:	4283      	cmp	r3, r0
 800a840:	6011      	str	r1, [r2, #0]
 800a842:	d1e0      	bne.n	800a806 <_free_r+0x22>
 800a844:	6818      	ldr	r0, [r3, #0]
 800a846:	685b      	ldr	r3, [r3, #4]
 800a848:	4401      	add	r1, r0
 800a84a:	6011      	str	r1, [r2, #0]
 800a84c:	6053      	str	r3, [r2, #4]
 800a84e:	e7da      	b.n	800a806 <_free_r+0x22>
 800a850:	d902      	bls.n	800a858 <_free_r+0x74>
 800a852:	230c      	movs	r3, #12
 800a854:	602b      	str	r3, [r5, #0]
 800a856:	e7d6      	b.n	800a806 <_free_r+0x22>
 800a858:	6820      	ldr	r0, [r4, #0]
 800a85a:	1821      	adds	r1, r4, r0
 800a85c:	428b      	cmp	r3, r1
 800a85e:	bf01      	itttt	eq
 800a860:	6819      	ldreq	r1, [r3, #0]
 800a862:	685b      	ldreq	r3, [r3, #4]
 800a864:	1809      	addeq	r1, r1, r0
 800a866:	6021      	streq	r1, [r4, #0]
 800a868:	6063      	str	r3, [r4, #4]
 800a86a:	6054      	str	r4, [r2, #4]
 800a86c:	e7cb      	b.n	800a806 <_free_r+0x22>
 800a86e:	bd38      	pop	{r3, r4, r5, pc}
 800a870:	20004374 	.word	0x20004374

0800a874 <sbrk_aligned>:
 800a874:	b570      	push	{r4, r5, r6, lr}
 800a876:	4e0e      	ldr	r6, [pc, #56]	; (800a8b0 <sbrk_aligned+0x3c>)
 800a878:	460c      	mov	r4, r1
 800a87a:	6831      	ldr	r1, [r6, #0]
 800a87c:	4605      	mov	r5, r0
 800a87e:	b911      	cbnz	r1, 800a886 <sbrk_aligned+0x12>
 800a880:	f000 fb7a 	bl	800af78 <_sbrk_r>
 800a884:	6030      	str	r0, [r6, #0]
 800a886:	4621      	mov	r1, r4
 800a888:	4628      	mov	r0, r5
 800a88a:	f000 fb75 	bl	800af78 <_sbrk_r>
 800a88e:	1c43      	adds	r3, r0, #1
 800a890:	d00a      	beq.n	800a8a8 <sbrk_aligned+0x34>
 800a892:	1cc4      	adds	r4, r0, #3
 800a894:	f024 0403 	bic.w	r4, r4, #3
 800a898:	42a0      	cmp	r0, r4
 800a89a:	d007      	beq.n	800a8ac <sbrk_aligned+0x38>
 800a89c:	1a21      	subs	r1, r4, r0
 800a89e:	4628      	mov	r0, r5
 800a8a0:	f000 fb6a 	bl	800af78 <_sbrk_r>
 800a8a4:	3001      	adds	r0, #1
 800a8a6:	d101      	bne.n	800a8ac <sbrk_aligned+0x38>
 800a8a8:	f04f 34ff 	mov.w	r4, #4294967295
 800a8ac:	4620      	mov	r0, r4
 800a8ae:	bd70      	pop	{r4, r5, r6, pc}
 800a8b0:	20004378 	.word	0x20004378

0800a8b4 <_malloc_r>:
 800a8b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8b8:	1ccd      	adds	r5, r1, #3
 800a8ba:	f025 0503 	bic.w	r5, r5, #3
 800a8be:	3508      	adds	r5, #8
 800a8c0:	2d0c      	cmp	r5, #12
 800a8c2:	bf38      	it	cc
 800a8c4:	250c      	movcc	r5, #12
 800a8c6:	2d00      	cmp	r5, #0
 800a8c8:	4607      	mov	r7, r0
 800a8ca:	db01      	blt.n	800a8d0 <_malloc_r+0x1c>
 800a8cc:	42a9      	cmp	r1, r5
 800a8ce:	d905      	bls.n	800a8dc <_malloc_r+0x28>
 800a8d0:	230c      	movs	r3, #12
 800a8d2:	2600      	movs	r6, #0
 800a8d4:	603b      	str	r3, [r7, #0]
 800a8d6:	4630      	mov	r0, r6
 800a8d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8dc:	4e2e      	ldr	r6, [pc, #184]	; (800a998 <_malloc_r+0xe4>)
 800a8de:	f000 fc03 	bl	800b0e8 <__malloc_lock>
 800a8e2:	6833      	ldr	r3, [r6, #0]
 800a8e4:	461c      	mov	r4, r3
 800a8e6:	bb34      	cbnz	r4, 800a936 <_malloc_r+0x82>
 800a8e8:	4629      	mov	r1, r5
 800a8ea:	4638      	mov	r0, r7
 800a8ec:	f7ff ffc2 	bl	800a874 <sbrk_aligned>
 800a8f0:	1c43      	adds	r3, r0, #1
 800a8f2:	4604      	mov	r4, r0
 800a8f4:	d14d      	bne.n	800a992 <_malloc_r+0xde>
 800a8f6:	6834      	ldr	r4, [r6, #0]
 800a8f8:	4626      	mov	r6, r4
 800a8fa:	2e00      	cmp	r6, #0
 800a8fc:	d140      	bne.n	800a980 <_malloc_r+0xcc>
 800a8fe:	6823      	ldr	r3, [r4, #0]
 800a900:	4631      	mov	r1, r6
 800a902:	4638      	mov	r0, r7
 800a904:	eb04 0803 	add.w	r8, r4, r3
 800a908:	f000 fb36 	bl	800af78 <_sbrk_r>
 800a90c:	4580      	cmp	r8, r0
 800a90e:	d13a      	bne.n	800a986 <_malloc_r+0xd2>
 800a910:	6821      	ldr	r1, [r4, #0]
 800a912:	3503      	adds	r5, #3
 800a914:	1a6d      	subs	r5, r5, r1
 800a916:	f025 0503 	bic.w	r5, r5, #3
 800a91a:	3508      	adds	r5, #8
 800a91c:	2d0c      	cmp	r5, #12
 800a91e:	bf38      	it	cc
 800a920:	250c      	movcc	r5, #12
 800a922:	4638      	mov	r0, r7
 800a924:	4629      	mov	r1, r5
 800a926:	f7ff ffa5 	bl	800a874 <sbrk_aligned>
 800a92a:	3001      	adds	r0, #1
 800a92c:	d02b      	beq.n	800a986 <_malloc_r+0xd2>
 800a92e:	6823      	ldr	r3, [r4, #0]
 800a930:	442b      	add	r3, r5
 800a932:	6023      	str	r3, [r4, #0]
 800a934:	e00e      	b.n	800a954 <_malloc_r+0xa0>
 800a936:	6822      	ldr	r2, [r4, #0]
 800a938:	1b52      	subs	r2, r2, r5
 800a93a:	d41e      	bmi.n	800a97a <_malloc_r+0xc6>
 800a93c:	2a0b      	cmp	r2, #11
 800a93e:	d916      	bls.n	800a96e <_malloc_r+0xba>
 800a940:	1961      	adds	r1, r4, r5
 800a942:	42a3      	cmp	r3, r4
 800a944:	6025      	str	r5, [r4, #0]
 800a946:	bf18      	it	ne
 800a948:	6059      	strne	r1, [r3, #4]
 800a94a:	6863      	ldr	r3, [r4, #4]
 800a94c:	bf08      	it	eq
 800a94e:	6031      	streq	r1, [r6, #0]
 800a950:	5162      	str	r2, [r4, r5]
 800a952:	604b      	str	r3, [r1, #4]
 800a954:	4638      	mov	r0, r7
 800a956:	f104 060b 	add.w	r6, r4, #11
 800a95a:	f000 fbcb 	bl	800b0f4 <__malloc_unlock>
 800a95e:	f026 0607 	bic.w	r6, r6, #7
 800a962:	1d23      	adds	r3, r4, #4
 800a964:	1af2      	subs	r2, r6, r3
 800a966:	d0b6      	beq.n	800a8d6 <_malloc_r+0x22>
 800a968:	1b9b      	subs	r3, r3, r6
 800a96a:	50a3      	str	r3, [r4, r2]
 800a96c:	e7b3      	b.n	800a8d6 <_malloc_r+0x22>
 800a96e:	6862      	ldr	r2, [r4, #4]
 800a970:	42a3      	cmp	r3, r4
 800a972:	bf0c      	ite	eq
 800a974:	6032      	streq	r2, [r6, #0]
 800a976:	605a      	strne	r2, [r3, #4]
 800a978:	e7ec      	b.n	800a954 <_malloc_r+0xa0>
 800a97a:	4623      	mov	r3, r4
 800a97c:	6864      	ldr	r4, [r4, #4]
 800a97e:	e7b2      	b.n	800a8e6 <_malloc_r+0x32>
 800a980:	4634      	mov	r4, r6
 800a982:	6876      	ldr	r6, [r6, #4]
 800a984:	e7b9      	b.n	800a8fa <_malloc_r+0x46>
 800a986:	230c      	movs	r3, #12
 800a988:	4638      	mov	r0, r7
 800a98a:	603b      	str	r3, [r7, #0]
 800a98c:	f000 fbb2 	bl	800b0f4 <__malloc_unlock>
 800a990:	e7a1      	b.n	800a8d6 <_malloc_r+0x22>
 800a992:	6025      	str	r5, [r4, #0]
 800a994:	e7de      	b.n	800a954 <_malloc_r+0xa0>
 800a996:	bf00      	nop
 800a998:	20004374 	.word	0x20004374

0800a99c <__sfputc_r>:
 800a99c:	6893      	ldr	r3, [r2, #8]
 800a99e:	b410      	push	{r4}
 800a9a0:	3b01      	subs	r3, #1
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	6093      	str	r3, [r2, #8]
 800a9a6:	da07      	bge.n	800a9b8 <__sfputc_r+0x1c>
 800a9a8:	6994      	ldr	r4, [r2, #24]
 800a9aa:	42a3      	cmp	r3, r4
 800a9ac:	db01      	blt.n	800a9b2 <__sfputc_r+0x16>
 800a9ae:	290a      	cmp	r1, #10
 800a9b0:	d102      	bne.n	800a9b8 <__sfputc_r+0x1c>
 800a9b2:	bc10      	pop	{r4}
 800a9b4:	f7ff bc3a 	b.w	800a22c <__swbuf_r>
 800a9b8:	6813      	ldr	r3, [r2, #0]
 800a9ba:	1c58      	adds	r0, r3, #1
 800a9bc:	6010      	str	r0, [r2, #0]
 800a9be:	7019      	strb	r1, [r3, #0]
 800a9c0:	4608      	mov	r0, r1
 800a9c2:	bc10      	pop	{r4}
 800a9c4:	4770      	bx	lr

0800a9c6 <__sfputs_r>:
 800a9c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9c8:	4606      	mov	r6, r0
 800a9ca:	460f      	mov	r7, r1
 800a9cc:	4614      	mov	r4, r2
 800a9ce:	18d5      	adds	r5, r2, r3
 800a9d0:	42ac      	cmp	r4, r5
 800a9d2:	d101      	bne.n	800a9d8 <__sfputs_r+0x12>
 800a9d4:	2000      	movs	r0, #0
 800a9d6:	e007      	b.n	800a9e8 <__sfputs_r+0x22>
 800a9d8:	463a      	mov	r2, r7
 800a9da:	4630      	mov	r0, r6
 800a9dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9e0:	f7ff ffdc 	bl	800a99c <__sfputc_r>
 800a9e4:	1c43      	adds	r3, r0, #1
 800a9e6:	d1f3      	bne.n	800a9d0 <__sfputs_r+0xa>
 800a9e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a9ec <_vfiprintf_r>:
 800a9ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9f0:	460d      	mov	r5, r1
 800a9f2:	4614      	mov	r4, r2
 800a9f4:	4698      	mov	r8, r3
 800a9f6:	4606      	mov	r6, r0
 800a9f8:	b09d      	sub	sp, #116	; 0x74
 800a9fa:	b118      	cbz	r0, 800aa04 <_vfiprintf_r+0x18>
 800a9fc:	6983      	ldr	r3, [r0, #24]
 800a9fe:	b90b      	cbnz	r3, 800aa04 <_vfiprintf_r+0x18>
 800aa00:	f7ff fdea 	bl	800a5d8 <__sinit>
 800aa04:	4b89      	ldr	r3, [pc, #548]	; (800ac2c <_vfiprintf_r+0x240>)
 800aa06:	429d      	cmp	r5, r3
 800aa08:	d11b      	bne.n	800aa42 <_vfiprintf_r+0x56>
 800aa0a:	6875      	ldr	r5, [r6, #4]
 800aa0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa0e:	07d9      	lsls	r1, r3, #31
 800aa10:	d405      	bmi.n	800aa1e <_vfiprintf_r+0x32>
 800aa12:	89ab      	ldrh	r3, [r5, #12]
 800aa14:	059a      	lsls	r2, r3, #22
 800aa16:	d402      	bmi.n	800aa1e <_vfiprintf_r+0x32>
 800aa18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa1a:	f7ff fe7b 	bl	800a714 <__retarget_lock_acquire_recursive>
 800aa1e:	89ab      	ldrh	r3, [r5, #12]
 800aa20:	071b      	lsls	r3, r3, #28
 800aa22:	d501      	bpl.n	800aa28 <_vfiprintf_r+0x3c>
 800aa24:	692b      	ldr	r3, [r5, #16]
 800aa26:	b9eb      	cbnz	r3, 800aa64 <_vfiprintf_r+0x78>
 800aa28:	4629      	mov	r1, r5
 800aa2a:	4630      	mov	r0, r6
 800aa2c:	f7ff fc50 	bl	800a2d0 <__swsetup_r>
 800aa30:	b1c0      	cbz	r0, 800aa64 <_vfiprintf_r+0x78>
 800aa32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa34:	07dc      	lsls	r4, r3, #31
 800aa36:	d50e      	bpl.n	800aa56 <_vfiprintf_r+0x6a>
 800aa38:	f04f 30ff 	mov.w	r0, #4294967295
 800aa3c:	b01d      	add	sp, #116	; 0x74
 800aa3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa42:	4b7b      	ldr	r3, [pc, #492]	; (800ac30 <_vfiprintf_r+0x244>)
 800aa44:	429d      	cmp	r5, r3
 800aa46:	d101      	bne.n	800aa4c <_vfiprintf_r+0x60>
 800aa48:	68b5      	ldr	r5, [r6, #8]
 800aa4a:	e7df      	b.n	800aa0c <_vfiprintf_r+0x20>
 800aa4c:	4b79      	ldr	r3, [pc, #484]	; (800ac34 <_vfiprintf_r+0x248>)
 800aa4e:	429d      	cmp	r5, r3
 800aa50:	bf08      	it	eq
 800aa52:	68f5      	ldreq	r5, [r6, #12]
 800aa54:	e7da      	b.n	800aa0c <_vfiprintf_r+0x20>
 800aa56:	89ab      	ldrh	r3, [r5, #12]
 800aa58:	0598      	lsls	r0, r3, #22
 800aa5a:	d4ed      	bmi.n	800aa38 <_vfiprintf_r+0x4c>
 800aa5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa5e:	f7ff fe5a 	bl	800a716 <__retarget_lock_release_recursive>
 800aa62:	e7e9      	b.n	800aa38 <_vfiprintf_r+0x4c>
 800aa64:	2300      	movs	r3, #0
 800aa66:	9309      	str	r3, [sp, #36]	; 0x24
 800aa68:	2320      	movs	r3, #32
 800aa6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aa6e:	2330      	movs	r3, #48	; 0x30
 800aa70:	f04f 0901 	mov.w	r9, #1
 800aa74:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa78:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800ac38 <_vfiprintf_r+0x24c>
 800aa7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aa80:	4623      	mov	r3, r4
 800aa82:	469a      	mov	sl, r3
 800aa84:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa88:	b10a      	cbz	r2, 800aa8e <_vfiprintf_r+0xa2>
 800aa8a:	2a25      	cmp	r2, #37	; 0x25
 800aa8c:	d1f9      	bne.n	800aa82 <_vfiprintf_r+0x96>
 800aa8e:	ebba 0b04 	subs.w	fp, sl, r4
 800aa92:	d00b      	beq.n	800aaac <_vfiprintf_r+0xc0>
 800aa94:	465b      	mov	r3, fp
 800aa96:	4622      	mov	r2, r4
 800aa98:	4629      	mov	r1, r5
 800aa9a:	4630      	mov	r0, r6
 800aa9c:	f7ff ff93 	bl	800a9c6 <__sfputs_r>
 800aaa0:	3001      	adds	r0, #1
 800aaa2:	f000 80aa 	beq.w	800abfa <_vfiprintf_r+0x20e>
 800aaa6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aaa8:	445a      	add	r2, fp
 800aaaa:	9209      	str	r2, [sp, #36]	; 0x24
 800aaac:	f89a 3000 	ldrb.w	r3, [sl]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	f000 80a2 	beq.w	800abfa <_vfiprintf_r+0x20e>
 800aab6:	2300      	movs	r3, #0
 800aab8:	f04f 32ff 	mov.w	r2, #4294967295
 800aabc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aac0:	f10a 0a01 	add.w	sl, sl, #1
 800aac4:	9304      	str	r3, [sp, #16]
 800aac6:	9307      	str	r3, [sp, #28]
 800aac8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aacc:	931a      	str	r3, [sp, #104]	; 0x68
 800aace:	4654      	mov	r4, sl
 800aad0:	2205      	movs	r2, #5
 800aad2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aad6:	4858      	ldr	r0, [pc, #352]	; (800ac38 <_vfiprintf_r+0x24c>)
 800aad8:	f000 faf8 	bl	800b0cc <memchr>
 800aadc:	9a04      	ldr	r2, [sp, #16]
 800aade:	b9d8      	cbnz	r0, 800ab18 <_vfiprintf_r+0x12c>
 800aae0:	06d1      	lsls	r1, r2, #27
 800aae2:	bf44      	itt	mi
 800aae4:	2320      	movmi	r3, #32
 800aae6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aaea:	0713      	lsls	r3, r2, #28
 800aaec:	bf44      	itt	mi
 800aaee:	232b      	movmi	r3, #43	; 0x2b
 800aaf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aaf4:	f89a 3000 	ldrb.w	r3, [sl]
 800aaf8:	2b2a      	cmp	r3, #42	; 0x2a
 800aafa:	d015      	beq.n	800ab28 <_vfiprintf_r+0x13c>
 800aafc:	4654      	mov	r4, sl
 800aafe:	2000      	movs	r0, #0
 800ab00:	f04f 0c0a 	mov.w	ip, #10
 800ab04:	9a07      	ldr	r2, [sp, #28]
 800ab06:	4621      	mov	r1, r4
 800ab08:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab0c:	3b30      	subs	r3, #48	; 0x30
 800ab0e:	2b09      	cmp	r3, #9
 800ab10:	d94e      	bls.n	800abb0 <_vfiprintf_r+0x1c4>
 800ab12:	b1b0      	cbz	r0, 800ab42 <_vfiprintf_r+0x156>
 800ab14:	9207      	str	r2, [sp, #28]
 800ab16:	e014      	b.n	800ab42 <_vfiprintf_r+0x156>
 800ab18:	eba0 0308 	sub.w	r3, r0, r8
 800ab1c:	fa09 f303 	lsl.w	r3, r9, r3
 800ab20:	4313      	orrs	r3, r2
 800ab22:	46a2      	mov	sl, r4
 800ab24:	9304      	str	r3, [sp, #16]
 800ab26:	e7d2      	b.n	800aace <_vfiprintf_r+0xe2>
 800ab28:	9b03      	ldr	r3, [sp, #12]
 800ab2a:	1d19      	adds	r1, r3, #4
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	9103      	str	r1, [sp, #12]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	bfbb      	ittet	lt
 800ab34:	425b      	neglt	r3, r3
 800ab36:	f042 0202 	orrlt.w	r2, r2, #2
 800ab3a:	9307      	strge	r3, [sp, #28]
 800ab3c:	9307      	strlt	r3, [sp, #28]
 800ab3e:	bfb8      	it	lt
 800ab40:	9204      	strlt	r2, [sp, #16]
 800ab42:	7823      	ldrb	r3, [r4, #0]
 800ab44:	2b2e      	cmp	r3, #46	; 0x2e
 800ab46:	d10c      	bne.n	800ab62 <_vfiprintf_r+0x176>
 800ab48:	7863      	ldrb	r3, [r4, #1]
 800ab4a:	2b2a      	cmp	r3, #42	; 0x2a
 800ab4c:	d135      	bne.n	800abba <_vfiprintf_r+0x1ce>
 800ab4e:	9b03      	ldr	r3, [sp, #12]
 800ab50:	3402      	adds	r4, #2
 800ab52:	1d1a      	adds	r2, r3, #4
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	9203      	str	r2, [sp, #12]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	bfb8      	it	lt
 800ab5c:	f04f 33ff 	movlt.w	r3, #4294967295
 800ab60:	9305      	str	r3, [sp, #20]
 800ab62:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800ac3c <_vfiprintf_r+0x250>
 800ab66:	2203      	movs	r2, #3
 800ab68:	4650      	mov	r0, sl
 800ab6a:	7821      	ldrb	r1, [r4, #0]
 800ab6c:	f000 faae 	bl	800b0cc <memchr>
 800ab70:	b140      	cbz	r0, 800ab84 <_vfiprintf_r+0x198>
 800ab72:	2340      	movs	r3, #64	; 0x40
 800ab74:	eba0 000a 	sub.w	r0, r0, sl
 800ab78:	fa03 f000 	lsl.w	r0, r3, r0
 800ab7c:	9b04      	ldr	r3, [sp, #16]
 800ab7e:	3401      	adds	r4, #1
 800ab80:	4303      	orrs	r3, r0
 800ab82:	9304      	str	r3, [sp, #16]
 800ab84:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab88:	2206      	movs	r2, #6
 800ab8a:	482d      	ldr	r0, [pc, #180]	; (800ac40 <_vfiprintf_r+0x254>)
 800ab8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ab90:	f000 fa9c 	bl	800b0cc <memchr>
 800ab94:	2800      	cmp	r0, #0
 800ab96:	d03f      	beq.n	800ac18 <_vfiprintf_r+0x22c>
 800ab98:	4b2a      	ldr	r3, [pc, #168]	; (800ac44 <_vfiprintf_r+0x258>)
 800ab9a:	bb1b      	cbnz	r3, 800abe4 <_vfiprintf_r+0x1f8>
 800ab9c:	9b03      	ldr	r3, [sp, #12]
 800ab9e:	3307      	adds	r3, #7
 800aba0:	f023 0307 	bic.w	r3, r3, #7
 800aba4:	3308      	adds	r3, #8
 800aba6:	9303      	str	r3, [sp, #12]
 800aba8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abaa:	443b      	add	r3, r7
 800abac:	9309      	str	r3, [sp, #36]	; 0x24
 800abae:	e767      	b.n	800aa80 <_vfiprintf_r+0x94>
 800abb0:	460c      	mov	r4, r1
 800abb2:	2001      	movs	r0, #1
 800abb4:	fb0c 3202 	mla	r2, ip, r2, r3
 800abb8:	e7a5      	b.n	800ab06 <_vfiprintf_r+0x11a>
 800abba:	2300      	movs	r3, #0
 800abbc:	f04f 0c0a 	mov.w	ip, #10
 800abc0:	4619      	mov	r1, r3
 800abc2:	3401      	adds	r4, #1
 800abc4:	9305      	str	r3, [sp, #20]
 800abc6:	4620      	mov	r0, r4
 800abc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800abcc:	3a30      	subs	r2, #48	; 0x30
 800abce:	2a09      	cmp	r2, #9
 800abd0:	d903      	bls.n	800abda <_vfiprintf_r+0x1ee>
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d0c5      	beq.n	800ab62 <_vfiprintf_r+0x176>
 800abd6:	9105      	str	r1, [sp, #20]
 800abd8:	e7c3      	b.n	800ab62 <_vfiprintf_r+0x176>
 800abda:	4604      	mov	r4, r0
 800abdc:	2301      	movs	r3, #1
 800abde:	fb0c 2101 	mla	r1, ip, r1, r2
 800abe2:	e7f0      	b.n	800abc6 <_vfiprintf_r+0x1da>
 800abe4:	ab03      	add	r3, sp, #12
 800abe6:	9300      	str	r3, [sp, #0]
 800abe8:	462a      	mov	r2, r5
 800abea:	4630      	mov	r0, r6
 800abec:	4b16      	ldr	r3, [pc, #88]	; (800ac48 <_vfiprintf_r+0x25c>)
 800abee:	a904      	add	r1, sp, #16
 800abf0:	f3af 8000 	nop.w
 800abf4:	4607      	mov	r7, r0
 800abf6:	1c78      	adds	r0, r7, #1
 800abf8:	d1d6      	bne.n	800aba8 <_vfiprintf_r+0x1bc>
 800abfa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800abfc:	07d9      	lsls	r1, r3, #31
 800abfe:	d405      	bmi.n	800ac0c <_vfiprintf_r+0x220>
 800ac00:	89ab      	ldrh	r3, [r5, #12]
 800ac02:	059a      	lsls	r2, r3, #22
 800ac04:	d402      	bmi.n	800ac0c <_vfiprintf_r+0x220>
 800ac06:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ac08:	f7ff fd85 	bl	800a716 <__retarget_lock_release_recursive>
 800ac0c:	89ab      	ldrh	r3, [r5, #12]
 800ac0e:	065b      	lsls	r3, r3, #25
 800ac10:	f53f af12 	bmi.w	800aa38 <_vfiprintf_r+0x4c>
 800ac14:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac16:	e711      	b.n	800aa3c <_vfiprintf_r+0x50>
 800ac18:	ab03      	add	r3, sp, #12
 800ac1a:	9300      	str	r3, [sp, #0]
 800ac1c:	462a      	mov	r2, r5
 800ac1e:	4630      	mov	r0, r6
 800ac20:	4b09      	ldr	r3, [pc, #36]	; (800ac48 <_vfiprintf_r+0x25c>)
 800ac22:	a904      	add	r1, sp, #16
 800ac24:	f000 f882 	bl	800ad2c <_printf_i>
 800ac28:	e7e4      	b.n	800abf4 <_vfiprintf_r+0x208>
 800ac2a:	bf00      	nop
 800ac2c:	0800b32c 	.word	0x0800b32c
 800ac30:	0800b34c 	.word	0x0800b34c
 800ac34:	0800b30c 	.word	0x0800b30c
 800ac38:	0800b36c 	.word	0x0800b36c
 800ac3c:	0800b372 	.word	0x0800b372
 800ac40:	0800b376 	.word	0x0800b376
 800ac44:	00000000 	.word	0x00000000
 800ac48:	0800a9c7 	.word	0x0800a9c7

0800ac4c <_printf_common>:
 800ac4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac50:	4616      	mov	r6, r2
 800ac52:	4699      	mov	r9, r3
 800ac54:	688a      	ldr	r2, [r1, #8]
 800ac56:	690b      	ldr	r3, [r1, #16]
 800ac58:	4607      	mov	r7, r0
 800ac5a:	4293      	cmp	r3, r2
 800ac5c:	bfb8      	it	lt
 800ac5e:	4613      	movlt	r3, r2
 800ac60:	6033      	str	r3, [r6, #0]
 800ac62:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ac66:	460c      	mov	r4, r1
 800ac68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ac6c:	b10a      	cbz	r2, 800ac72 <_printf_common+0x26>
 800ac6e:	3301      	adds	r3, #1
 800ac70:	6033      	str	r3, [r6, #0]
 800ac72:	6823      	ldr	r3, [r4, #0]
 800ac74:	0699      	lsls	r1, r3, #26
 800ac76:	bf42      	ittt	mi
 800ac78:	6833      	ldrmi	r3, [r6, #0]
 800ac7a:	3302      	addmi	r3, #2
 800ac7c:	6033      	strmi	r3, [r6, #0]
 800ac7e:	6825      	ldr	r5, [r4, #0]
 800ac80:	f015 0506 	ands.w	r5, r5, #6
 800ac84:	d106      	bne.n	800ac94 <_printf_common+0x48>
 800ac86:	f104 0a19 	add.w	sl, r4, #25
 800ac8a:	68e3      	ldr	r3, [r4, #12]
 800ac8c:	6832      	ldr	r2, [r6, #0]
 800ac8e:	1a9b      	subs	r3, r3, r2
 800ac90:	42ab      	cmp	r3, r5
 800ac92:	dc28      	bgt.n	800ace6 <_printf_common+0x9a>
 800ac94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ac98:	1e13      	subs	r3, r2, #0
 800ac9a:	6822      	ldr	r2, [r4, #0]
 800ac9c:	bf18      	it	ne
 800ac9e:	2301      	movne	r3, #1
 800aca0:	0692      	lsls	r2, r2, #26
 800aca2:	d42d      	bmi.n	800ad00 <_printf_common+0xb4>
 800aca4:	4649      	mov	r1, r9
 800aca6:	4638      	mov	r0, r7
 800aca8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800acac:	47c0      	blx	r8
 800acae:	3001      	adds	r0, #1
 800acb0:	d020      	beq.n	800acf4 <_printf_common+0xa8>
 800acb2:	6823      	ldr	r3, [r4, #0]
 800acb4:	68e5      	ldr	r5, [r4, #12]
 800acb6:	f003 0306 	and.w	r3, r3, #6
 800acba:	2b04      	cmp	r3, #4
 800acbc:	bf18      	it	ne
 800acbe:	2500      	movne	r5, #0
 800acc0:	6832      	ldr	r2, [r6, #0]
 800acc2:	f04f 0600 	mov.w	r6, #0
 800acc6:	68a3      	ldr	r3, [r4, #8]
 800acc8:	bf08      	it	eq
 800acca:	1aad      	subeq	r5, r5, r2
 800accc:	6922      	ldr	r2, [r4, #16]
 800acce:	bf08      	it	eq
 800acd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800acd4:	4293      	cmp	r3, r2
 800acd6:	bfc4      	itt	gt
 800acd8:	1a9b      	subgt	r3, r3, r2
 800acda:	18ed      	addgt	r5, r5, r3
 800acdc:	341a      	adds	r4, #26
 800acde:	42b5      	cmp	r5, r6
 800ace0:	d11a      	bne.n	800ad18 <_printf_common+0xcc>
 800ace2:	2000      	movs	r0, #0
 800ace4:	e008      	b.n	800acf8 <_printf_common+0xac>
 800ace6:	2301      	movs	r3, #1
 800ace8:	4652      	mov	r2, sl
 800acea:	4649      	mov	r1, r9
 800acec:	4638      	mov	r0, r7
 800acee:	47c0      	blx	r8
 800acf0:	3001      	adds	r0, #1
 800acf2:	d103      	bne.n	800acfc <_printf_common+0xb0>
 800acf4:	f04f 30ff 	mov.w	r0, #4294967295
 800acf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acfc:	3501      	adds	r5, #1
 800acfe:	e7c4      	b.n	800ac8a <_printf_common+0x3e>
 800ad00:	2030      	movs	r0, #48	; 0x30
 800ad02:	18e1      	adds	r1, r4, r3
 800ad04:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ad08:	1c5a      	adds	r2, r3, #1
 800ad0a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ad0e:	4422      	add	r2, r4
 800ad10:	3302      	adds	r3, #2
 800ad12:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ad16:	e7c5      	b.n	800aca4 <_printf_common+0x58>
 800ad18:	2301      	movs	r3, #1
 800ad1a:	4622      	mov	r2, r4
 800ad1c:	4649      	mov	r1, r9
 800ad1e:	4638      	mov	r0, r7
 800ad20:	47c0      	blx	r8
 800ad22:	3001      	adds	r0, #1
 800ad24:	d0e6      	beq.n	800acf4 <_printf_common+0xa8>
 800ad26:	3601      	adds	r6, #1
 800ad28:	e7d9      	b.n	800acde <_printf_common+0x92>
	...

0800ad2c <_printf_i>:
 800ad2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad30:	7e0f      	ldrb	r7, [r1, #24]
 800ad32:	4691      	mov	r9, r2
 800ad34:	2f78      	cmp	r7, #120	; 0x78
 800ad36:	4680      	mov	r8, r0
 800ad38:	460c      	mov	r4, r1
 800ad3a:	469a      	mov	sl, r3
 800ad3c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ad3e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ad42:	d807      	bhi.n	800ad54 <_printf_i+0x28>
 800ad44:	2f62      	cmp	r7, #98	; 0x62
 800ad46:	d80a      	bhi.n	800ad5e <_printf_i+0x32>
 800ad48:	2f00      	cmp	r7, #0
 800ad4a:	f000 80d9 	beq.w	800af00 <_printf_i+0x1d4>
 800ad4e:	2f58      	cmp	r7, #88	; 0x58
 800ad50:	f000 80a4 	beq.w	800ae9c <_printf_i+0x170>
 800ad54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ad58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ad5c:	e03a      	b.n	800add4 <_printf_i+0xa8>
 800ad5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ad62:	2b15      	cmp	r3, #21
 800ad64:	d8f6      	bhi.n	800ad54 <_printf_i+0x28>
 800ad66:	a101      	add	r1, pc, #4	; (adr r1, 800ad6c <_printf_i+0x40>)
 800ad68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ad6c:	0800adc5 	.word	0x0800adc5
 800ad70:	0800add9 	.word	0x0800add9
 800ad74:	0800ad55 	.word	0x0800ad55
 800ad78:	0800ad55 	.word	0x0800ad55
 800ad7c:	0800ad55 	.word	0x0800ad55
 800ad80:	0800ad55 	.word	0x0800ad55
 800ad84:	0800add9 	.word	0x0800add9
 800ad88:	0800ad55 	.word	0x0800ad55
 800ad8c:	0800ad55 	.word	0x0800ad55
 800ad90:	0800ad55 	.word	0x0800ad55
 800ad94:	0800ad55 	.word	0x0800ad55
 800ad98:	0800aee7 	.word	0x0800aee7
 800ad9c:	0800ae09 	.word	0x0800ae09
 800ada0:	0800aec9 	.word	0x0800aec9
 800ada4:	0800ad55 	.word	0x0800ad55
 800ada8:	0800ad55 	.word	0x0800ad55
 800adac:	0800af09 	.word	0x0800af09
 800adb0:	0800ad55 	.word	0x0800ad55
 800adb4:	0800ae09 	.word	0x0800ae09
 800adb8:	0800ad55 	.word	0x0800ad55
 800adbc:	0800ad55 	.word	0x0800ad55
 800adc0:	0800aed1 	.word	0x0800aed1
 800adc4:	682b      	ldr	r3, [r5, #0]
 800adc6:	1d1a      	adds	r2, r3, #4
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	602a      	str	r2, [r5, #0]
 800adcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800add0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800add4:	2301      	movs	r3, #1
 800add6:	e0a4      	b.n	800af22 <_printf_i+0x1f6>
 800add8:	6820      	ldr	r0, [r4, #0]
 800adda:	6829      	ldr	r1, [r5, #0]
 800addc:	0606      	lsls	r6, r0, #24
 800adde:	f101 0304 	add.w	r3, r1, #4
 800ade2:	d50a      	bpl.n	800adfa <_printf_i+0xce>
 800ade4:	680e      	ldr	r6, [r1, #0]
 800ade6:	602b      	str	r3, [r5, #0]
 800ade8:	2e00      	cmp	r6, #0
 800adea:	da03      	bge.n	800adf4 <_printf_i+0xc8>
 800adec:	232d      	movs	r3, #45	; 0x2d
 800adee:	4276      	negs	r6, r6
 800adf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800adf4:	230a      	movs	r3, #10
 800adf6:	485e      	ldr	r0, [pc, #376]	; (800af70 <_printf_i+0x244>)
 800adf8:	e019      	b.n	800ae2e <_printf_i+0x102>
 800adfa:	680e      	ldr	r6, [r1, #0]
 800adfc:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ae00:	602b      	str	r3, [r5, #0]
 800ae02:	bf18      	it	ne
 800ae04:	b236      	sxthne	r6, r6
 800ae06:	e7ef      	b.n	800ade8 <_printf_i+0xbc>
 800ae08:	682b      	ldr	r3, [r5, #0]
 800ae0a:	6820      	ldr	r0, [r4, #0]
 800ae0c:	1d19      	adds	r1, r3, #4
 800ae0e:	6029      	str	r1, [r5, #0]
 800ae10:	0601      	lsls	r1, r0, #24
 800ae12:	d501      	bpl.n	800ae18 <_printf_i+0xec>
 800ae14:	681e      	ldr	r6, [r3, #0]
 800ae16:	e002      	b.n	800ae1e <_printf_i+0xf2>
 800ae18:	0646      	lsls	r6, r0, #25
 800ae1a:	d5fb      	bpl.n	800ae14 <_printf_i+0xe8>
 800ae1c:	881e      	ldrh	r6, [r3, #0]
 800ae1e:	2f6f      	cmp	r7, #111	; 0x6f
 800ae20:	bf0c      	ite	eq
 800ae22:	2308      	moveq	r3, #8
 800ae24:	230a      	movne	r3, #10
 800ae26:	4852      	ldr	r0, [pc, #328]	; (800af70 <_printf_i+0x244>)
 800ae28:	2100      	movs	r1, #0
 800ae2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ae2e:	6865      	ldr	r5, [r4, #4]
 800ae30:	2d00      	cmp	r5, #0
 800ae32:	bfa8      	it	ge
 800ae34:	6821      	ldrge	r1, [r4, #0]
 800ae36:	60a5      	str	r5, [r4, #8]
 800ae38:	bfa4      	itt	ge
 800ae3a:	f021 0104 	bicge.w	r1, r1, #4
 800ae3e:	6021      	strge	r1, [r4, #0]
 800ae40:	b90e      	cbnz	r6, 800ae46 <_printf_i+0x11a>
 800ae42:	2d00      	cmp	r5, #0
 800ae44:	d04d      	beq.n	800aee2 <_printf_i+0x1b6>
 800ae46:	4615      	mov	r5, r2
 800ae48:	fbb6 f1f3 	udiv	r1, r6, r3
 800ae4c:	fb03 6711 	mls	r7, r3, r1, r6
 800ae50:	5dc7      	ldrb	r7, [r0, r7]
 800ae52:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ae56:	4637      	mov	r7, r6
 800ae58:	42bb      	cmp	r3, r7
 800ae5a:	460e      	mov	r6, r1
 800ae5c:	d9f4      	bls.n	800ae48 <_printf_i+0x11c>
 800ae5e:	2b08      	cmp	r3, #8
 800ae60:	d10b      	bne.n	800ae7a <_printf_i+0x14e>
 800ae62:	6823      	ldr	r3, [r4, #0]
 800ae64:	07de      	lsls	r6, r3, #31
 800ae66:	d508      	bpl.n	800ae7a <_printf_i+0x14e>
 800ae68:	6923      	ldr	r3, [r4, #16]
 800ae6a:	6861      	ldr	r1, [r4, #4]
 800ae6c:	4299      	cmp	r1, r3
 800ae6e:	bfde      	ittt	le
 800ae70:	2330      	movle	r3, #48	; 0x30
 800ae72:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ae76:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ae7a:	1b52      	subs	r2, r2, r5
 800ae7c:	6122      	str	r2, [r4, #16]
 800ae7e:	464b      	mov	r3, r9
 800ae80:	4621      	mov	r1, r4
 800ae82:	4640      	mov	r0, r8
 800ae84:	f8cd a000 	str.w	sl, [sp]
 800ae88:	aa03      	add	r2, sp, #12
 800ae8a:	f7ff fedf 	bl	800ac4c <_printf_common>
 800ae8e:	3001      	adds	r0, #1
 800ae90:	d14c      	bne.n	800af2c <_printf_i+0x200>
 800ae92:	f04f 30ff 	mov.w	r0, #4294967295
 800ae96:	b004      	add	sp, #16
 800ae98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae9c:	4834      	ldr	r0, [pc, #208]	; (800af70 <_printf_i+0x244>)
 800ae9e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800aea2:	6829      	ldr	r1, [r5, #0]
 800aea4:	6823      	ldr	r3, [r4, #0]
 800aea6:	f851 6b04 	ldr.w	r6, [r1], #4
 800aeaa:	6029      	str	r1, [r5, #0]
 800aeac:	061d      	lsls	r5, r3, #24
 800aeae:	d514      	bpl.n	800aeda <_printf_i+0x1ae>
 800aeb0:	07df      	lsls	r7, r3, #31
 800aeb2:	bf44      	itt	mi
 800aeb4:	f043 0320 	orrmi.w	r3, r3, #32
 800aeb8:	6023      	strmi	r3, [r4, #0]
 800aeba:	b91e      	cbnz	r6, 800aec4 <_printf_i+0x198>
 800aebc:	6823      	ldr	r3, [r4, #0]
 800aebe:	f023 0320 	bic.w	r3, r3, #32
 800aec2:	6023      	str	r3, [r4, #0]
 800aec4:	2310      	movs	r3, #16
 800aec6:	e7af      	b.n	800ae28 <_printf_i+0xfc>
 800aec8:	6823      	ldr	r3, [r4, #0]
 800aeca:	f043 0320 	orr.w	r3, r3, #32
 800aece:	6023      	str	r3, [r4, #0]
 800aed0:	2378      	movs	r3, #120	; 0x78
 800aed2:	4828      	ldr	r0, [pc, #160]	; (800af74 <_printf_i+0x248>)
 800aed4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800aed8:	e7e3      	b.n	800aea2 <_printf_i+0x176>
 800aeda:	0659      	lsls	r1, r3, #25
 800aedc:	bf48      	it	mi
 800aede:	b2b6      	uxthmi	r6, r6
 800aee0:	e7e6      	b.n	800aeb0 <_printf_i+0x184>
 800aee2:	4615      	mov	r5, r2
 800aee4:	e7bb      	b.n	800ae5e <_printf_i+0x132>
 800aee6:	682b      	ldr	r3, [r5, #0]
 800aee8:	6826      	ldr	r6, [r4, #0]
 800aeea:	1d18      	adds	r0, r3, #4
 800aeec:	6961      	ldr	r1, [r4, #20]
 800aeee:	6028      	str	r0, [r5, #0]
 800aef0:	0635      	lsls	r5, r6, #24
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	d501      	bpl.n	800aefa <_printf_i+0x1ce>
 800aef6:	6019      	str	r1, [r3, #0]
 800aef8:	e002      	b.n	800af00 <_printf_i+0x1d4>
 800aefa:	0670      	lsls	r0, r6, #25
 800aefc:	d5fb      	bpl.n	800aef6 <_printf_i+0x1ca>
 800aefe:	8019      	strh	r1, [r3, #0]
 800af00:	2300      	movs	r3, #0
 800af02:	4615      	mov	r5, r2
 800af04:	6123      	str	r3, [r4, #16]
 800af06:	e7ba      	b.n	800ae7e <_printf_i+0x152>
 800af08:	682b      	ldr	r3, [r5, #0]
 800af0a:	2100      	movs	r1, #0
 800af0c:	1d1a      	adds	r2, r3, #4
 800af0e:	602a      	str	r2, [r5, #0]
 800af10:	681d      	ldr	r5, [r3, #0]
 800af12:	6862      	ldr	r2, [r4, #4]
 800af14:	4628      	mov	r0, r5
 800af16:	f000 f8d9 	bl	800b0cc <memchr>
 800af1a:	b108      	cbz	r0, 800af20 <_printf_i+0x1f4>
 800af1c:	1b40      	subs	r0, r0, r5
 800af1e:	6060      	str	r0, [r4, #4]
 800af20:	6863      	ldr	r3, [r4, #4]
 800af22:	6123      	str	r3, [r4, #16]
 800af24:	2300      	movs	r3, #0
 800af26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af2a:	e7a8      	b.n	800ae7e <_printf_i+0x152>
 800af2c:	462a      	mov	r2, r5
 800af2e:	4649      	mov	r1, r9
 800af30:	4640      	mov	r0, r8
 800af32:	6923      	ldr	r3, [r4, #16]
 800af34:	47d0      	blx	sl
 800af36:	3001      	adds	r0, #1
 800af38:	d0ab      	beq.n	800ae92 <_printf_i+0x166>
 800af3a:	6823      	ldr	r3, [r4, #0]
 800af3c:	079b      	lsls	r3, r3, #30
 800af3e:	d413      	bmi.n	800af68 <_printf_i+0x23c>
 800af40:	68e0      	ldr	r0, [r4, #12]
 800af42:	9b03      	ldr	r3, [sp, #12]
 800af44:	4298      	cmp	r0, r3
 800af46:	bfb8      	it	lt
 800af48:	4618      	movlt	r0, r3
 800af4a:	e7a4      	b.n	800ae96 <_printf_i+0x16a>
 800af4c:	2301      	movs	r3, #1
 800af4e:	4632      	mov	r2, r6
 800af50:	4649      	mov	r1, r9
 800af52:	4640      	mov	r0, r8
 800af54:	47d0      	blx	sl
 800af56:	3001      	adds	r0, #1
 800af58:	d09b      	beq.n	800ae92 <_printf_i+0x166>
 800af5a:	3501      	adds	r5, #1
 800af5c:	68e3      	ldr	r3, [r4, #12]
 800af5e:	9903      	ldr	r1, [sp, #12]
 800af60:	1a5b      	subs	r3, r3, r1
 800af62:	42ab      	cmp	r3, r5
 800af64:	dcf2      	bgt.n	800af4c <_printf_i+0x220>
 800af66:	e7eb      	b.n	800af40 <_printf_i+0x214>
 800af68:	2500      	movs	r5, #0
 800af6a:	f104 0619 	add.w	r6, r4, #25
 800af6e:	e7f5      	b.n	800af5c <_printf_i+0x230>
 800af70:	0800b37d 	.word	0x0800b37d
 800af74:	0800b38e 	.word	0x0800b38e

0800af78 <_sbrk_r>:
 800af78:	b538      	push	{r3, r4, r5, lr}
 800af7a:	2300      	movs	r3, #0
 800af7c:	4d05      	ldr	r5, [pc, #20]	; (800af94 <_sbrk_r+0x1c>)
 800af7e:	4604      	mov	r4, r0
 800af80:	4608      	mov	r0, r1
 800af82:	602b      	str	r3, [r5, #0]
 800af84:	f7fa faf8 	bl	8005578 <_sbrk>
 800af88:	1c43      	adds	r3, r0, #1
 800af8a:	d102      	bne.n	800af92 <_sbrk_r+0x1a>
 800af8c:	682b      	ldr	r3, [r5, #0]
 800af8e:	b103      	cbz	r3, 800af92 <_sbrk_r+0x1a>
 800af90:	6023      	str	r3, [r4, #0]
 800af92:	bd38      	pop	{r3, r4, r5, pc}
 800af94:	2000437c 	.word	0x2000437c

0800af98 <__sread>:
 800af98:	b510      	push	{r4, lr}
 800af9a:	460c      	mov	r4, r1
 800af9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afa0:	f000 f8ae 	bl	800b100 <_read_r>
 800afa4:	2800      	cmp	r0, #0
 800afa6:	bfab      	itete	ge
 800afa8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800afaa:	89a3      	ldrhlt	r3, [r4, #12]
 800afac:	181b      	addge	r3, r3, r0
 800afae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800afb2:	bfac      	ite	ge
 800afb4:	6563      	strge	r3, [r4, #84]	; 0x54
 800afb6:	81a3      	strhlt	r3, [r4, #12]
 800afb8:	bd10      	pop	{r4, pc}

0800afba <__swrite>:
 800afba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afbe:	461f      	mov	r7, r3
 800afc0:	898b      	ldrh	r3, [r1, #12]
 800afc2:	4605      	mov	r5, r0
 800afc4:	05db      	lsls	r3, r3, #23
 800afc6:	460c      	mov	r4, r1
 800afc8:	4616      	mov	r6, r2
 800afca:	d505      	bpl.n	800afd8 <__swrite+0x1e>
 800afcc:	2302      	movs	r3, #2
 800afce:	2200      	movs	r2, #0
 800afd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afd4:	f000 f868 	bl	800b0a8 <_lseek_r>
 800afd8:	89a3      	ldrh	r3, [r4, #12]
 800afda:	4632      	mov	r2, r6
 800afdc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800afe0:	81a3      	strh	r3, [r4, #12]
 800afe2:	4628      	mov	r0, r5
 800afe4:	463b      	mov	r3, r7
 800afe6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800afea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800afee:	f000 b817 	b.w	800b020 <_write_r>

0800aff2 <__sseek>:
 800aff2:	b510      	push	{r4, lr}
 800aff4:	460c      	mov	r4, r1
 800aff6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800affa:	f000 f855 	bl	800b0a8 <_lseek_r>
 800affe:	1c43      	adds	r3, r0, #1
 800b000:	89a3      	ldrh	r3, [r4, #12]
 800b002:	bf15      	itete	ne
 800b004:	6560      	strne	r0, [r4, #84]	; 0x54
 800b006:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b00a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b00e:	81a3      	strheq	r3, [r4, #12]
 800b010:	bf18      	it	ne
 800b012:	81a3      	strhne	r3, [r4, #12]
 800b014:	bd10      	pop	{r4, pc}

0800b016 <__sclose>:
 800b016:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b01a:	f000 b813 	b.w	800b044 <_close_r>
	...

0800b020 <_write_r>:
 800b020:	b538      	push	{r3, r4, r5, lr}
 800b022:	4604      	mov	r4, r0
 800b024:	4608      	mov	r0, r1
 800b026:	4611      	mov	r1, r2
 800b028:	2200      	movs	r2, #0
 800b02a:	4d05      	ldr	r5, [pc, #20]	; (800b040 <_write_r+0x20>)
 800b02c:	602a      	str	r2, [r5, #0]
 800b02e:	461a      	mov	r2, r3
 800b030:	f7fa fa55 	bl	80054de <_write>
 800b034:	1c43      	adds	r3, r0, #1
 800b036:	d102      	bne.n	800b03e <_write_r+0x1e>
 800b038:	682b      	ldr	r3, [r5, #0]
 800b03a:	b103      	cbz	r3, 800b03e <_write_r+0x1e>
 800b03c:	6023      	str	r3, [r4, #0]
 800b03e:	bd38      	pop	{r3, r4, r5, pc}
 800b040:	2000437c 	.word	0x2000437c

0800b044 <_close_r>:
 800b044:	b538      	push	{r3, r4, r5, lr}
 800b046:	2300      	movs	r3, #0
 800b048:	4d05      	ldr	r5, [pc, #20]	; (800b060 <_close_r+0x1c>)
 800b04a:	4604      	mov	r4, r0
 800b04c:	4608      	mov	r0, r1
 800b04e:	602b      	str	r3, [r5, #0]
 800b050:	f7fa fa61 	bl	8005516 <_close>
 800b054:	1c43      	adds	r3, r0, #1
 800b056:	d102      	bne.n	800b05e <_close_r+0x1a>
 800b058:	682b      	ldr	r3, [r5, #0]
 800b05a:	b103      	cbz	r3, 800b05e <_close_r+0x1a>
 800b05c:	6023      	str	r3, [r4, #0]
 800b05e:	bd38      	pop	{r3, r4, r5, pc}
 800b060:	2000437c 	.word	0x2000437c

0800b064 <_fstat_r>:
 800b064:	b538      	push	{r3, r4, r5, lr}
 800b066:	2300      	movs	r3, #0
 800b068:	4d06      	ldr	r5, [pc, #24]	; (800b084 <_fstat_r+0x20>)
 800b06a:	4604      	mov	r4, r0
 800b06c:	4608      	mov	r0, r1
 800b06e:	4611      	mov	r1, r2
 800b070:	602b      	str	r3, [r5, #0]
 800b072:	f7fa fa5b 	bl	800552c <_fstat>
 800b076:	1c43      	adds	r3, r0, #1
 800b078:	d102      	bne.n	800b080 <_fstat_r+0x1c>
 800b07a:	682b      	ldr	r3, [r5, #0]
 800b07c:	b103      	cbz	r3, 800b080 <_fstat_r+0x1c>
 800b07e:	6023      	str	r3, [r4, #0]
 800b080:	bd38      	pop	{r3, r4, r5, pc}
 800b082:	bf00      	nop
 800b084:	2000437c 	.word	0x2000437c

0800b088 <_isatty_r>:
 800b088:	b538      	push	{r3, r4, r5, lr}
 800b08a:	2300      	movs	r3, #0
 800b08c:	4d05      	ldr	r5, [pc, #20]	; (800b0a4 <_isatty_r+0x1c>)
 800b08e:	4604      	mov	r4, r0
 800b090:	4608      	mov	r0, r1
 800b092:	602b      	str	r3, [r5, #0]
 800b094:	f7fa fa59 	bl	800554a <_isatty>
 800b098:	1c43      	adds	r3, r0, #1
 800b09a:	d102      	bne.n	800b0a2 <_isatty_r+0x1a>
 800b09c:	682b      	ldr	r3, [r5, #0]
 800b09e:	b103      	cbz	r3, 800b0a2 <_isatty_r+0x1a>
 800b0a0:	6023      	str	r3, [r4, #0]
 800b0a2:	bd38      	pop	{r3, r4, r5, pc}
 800b0a4:	2000437c 	.word	0x2000437c

0800b0a8 <_lseek_r>:
 800b0a8:	b538      	push	{r3, r4, r5, lr}
 800b0aa:	4604      	mov	r4, r0
 800b0ac:	4608      	mov	r0, r1
 800b0ae:	4611      	mov	r1, r2
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	4d05      	ldr	r5, [pc, #20]	; (800b0c8 <_lseek_r+0x20>)
 800b0b4:	602a      	str	r2, [r5, #0]
 800b0b6:	461a      	mov	r2, r3
 800b0b8:	f7fa fa51 	bl	800555e <_lseek>
 800b0bc:	1c43      	adds	r3, r0, #1
 800b0be:	d102      	bne.n	800b0c6 <_lseek_r+0x1e>
 800b0c0:	682b      	ldr	r3, [r5, #0]
 800b0c2:	b103      	cbz	r3, 800b0c6 <_lseek_r+0x1e>
 800b0c4:	6023      	str	r3, [r4, #0]
 800b0c6:	bd38      	pop	{r3, r4, r5, pc}
 800b0c8:	2000437c 	.word	0x2000437c

0800b0cc <memchr>:
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	b510      	push	{r4, lr}
 800b0d0:	b2c9      	uxtb	r1, r1
 800b0d2:	4402      	add	r2, r0
 800b0d4:	4293      	cmp	r3, r2
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	d101      	bne.n	800b0de <memchr+0x12>
 800b0da:	2000      	movs	r0, #0
 800b0dc:	e003      	b.n	800b0e6 <memchr+0x1a>
 800b0de:	7804      	ldrb	r4, [r0, #0]
 800b0e0:	3301      	adds	r3, #1
 800b0e2:	428c      	cmp	r4, r1
 800b0e4:	d1f6      	bne.n	800b0d4 <memchr+0x8>
 800b0e6:	bd10      	pop	{r4, pc}

0800b0e8 <__malloc_lock>:
 800b0e8:	4801      	ldr	r0, [pc, #4]	; (800b0f0 <__malloc_lock+0x8>)
 800b0ea:	f7ff bb13 	b.w	800a714 <__retarget_lock_acquire_recursive>
 800b0ee:	bf00      	nop
 800b0f0:	20004370 	.word	0x20004370

0800b0f4 <__malloc_unlock>:
 800b0f4:	4801      	ldr	r0, [pc, #4]	; (800b0fc <__malloc_unlock+0x8>)
 800b0f6:	f7ff bb0e 	b.w	800a716 <__retarget_lock_release_recursive>
 800b0fa:	bf00      	nop
 800b0fc:	20004370 	.word	0x20004370

0800b100 <_read_r>:
 800b100:	b538      	push	{r3, r4, r5, lr}
 800b102:	4604      	mov	r4, r0
 800b104:	4608      	mov	r0, r1
 800b106:	4611      	mov	r1, r2
 800b108:	2200      	movs	r2, #0
 800b10a:	4d05      	ldr	r5, [pc, #20]	; (800b120 <_read_r+0x20>)
 800b10c:	602a      	str	r2, [r5, #0]
 800b10e:	461a      	mov	r2, r3
 800b110:	f7fa f9c8 	bl	80054a4 <_read>
 800b114:	1c43      	adds	r3, r0, #1
 800b116:	d102      	bne.n	800b11e <_read_r+0x1e>
 800b118:	682b      	ldr	r3, [r5, #0]
 800b11a:	b103      	cbz	r3, 800b11e <_read_r+0x1e>
 800b11c:	6023      	str	r3, [r4, #0]
 800b11e:	bd38      	pop	{r3, r4, r5, pc}
 800b120:	2000437c 	.word	0x2000437c

0800b124 <_init>:
 800b124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b126:	bf00      	nop
 800b128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b12a:	bc08      	pop	{r3}
 800b12c:	469e      	mov	lr, r3
 800b12e:	4770      	bx	lr

0800b130 <_fini>:
 800b130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b132:	bf00      	nop
 800b134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b136:	bc08      	pop	{r3}
 800b138:	469e      	mov	lr, r3
 800b13a:	4770      	bx	lr
