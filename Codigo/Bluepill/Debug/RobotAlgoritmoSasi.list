
RobotAlgoritmoSasi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003460  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08003570  08003570  00013570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003598  08003598  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003598  08003598  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003598  08003598  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003598  08003598  00013598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800359c  0800359c  0001359c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080035a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  2000000c  080035ac  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000148  080035ac  00020148  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c351  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bc2  00000000  00000000  0002c386  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d90  00000000  00000000  0002df48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cd0  00000000  00000000  0002ecd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001848d  00000000  00000000  0002f9a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f36e  00000000  00000000  00047e35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f81f  00000000  00000000  000571a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e69c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003af8  00000000  00000000  000e6a14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	08003558 	.word	0x08003558

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	08003558 	.word	0x08003558

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2f>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f4:	bf24      	itt	cs
 80008f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fe:	d90d      	bls.n	800091c <__aeabi_d2f+0x30>
 8000900:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800090c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000914:	bf08      	it	eq
 8000916:	f020 0001 	biceq.w	r0, r0, #1
 800091a:	4770      	bx	lr
 800091c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000920:	d121      	bne.n	8000966 <__aeabi_d2f+0x7a>
 8000922:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000926:	bfbc      	itt	lt
 8000928:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800092c:	4770      	bxlt	lr
 800092e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000936:	f1c2 0218 	rsb	r2, r2, #24
 800093a:	f1c2 0c20 	rsb	ip, r2, #32
 800093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	bf18      	it	ne
 8000948:	f040 0001 	orrne.w	r0, r0, #1
 800094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000958:	ea40 000c 	orr.w	r0, r0, ip
 800095c:	fa23 f302 	lsr.w	r3, r3, r2
 8000960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000964:	e7cc      	b.n	8000900 <__aeabi_d2f+0x14>
 8000966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800096a:	d107      	bne.n	800097c <__aeabi_d2f+0x90>
 800096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000970:	bf1e      	ittt	ne
 8000972:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000976:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800097a:	4770      	bxne	lr
 800097c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000980:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000984:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <__gesf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295
 8000990:	e006      	b.n	80009a0 <__cmpsf2+0x4>
 8000992:	bf00      	nop

08000994 <__lesf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpsf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpsf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80009a8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80009ac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009b6:	d011      	beq.n	80009dc <__cmpsf2+0x40>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80009be:	bf18      	it	ne
 80009c0:	ea90 0f01 	teqne	r0, r1
 80009c4:	bf58      	it	pl
 80009c6:	ebb2 0003 	subspl.w	r0, r2, r3
 80009ca:	bf88      	it	hi
 80009cc:	17c8      	asrhi	r0, r1, #31
 80009ce:	bf38      	it	cc
 80009d0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80009d4:	bf18      	it	ne
 80009d6:	f040 0001 	orrne.w	r0, r0, #1
 80009da:	4770      	bx	lr
 80009dc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80009e0:	d102      	bne.n	80009e8 <__cmpsf2+0x4c>
 80009e2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80009e6:	d105      	bne.n	80009f4 <__cmpsf2+0x58>
 80009e8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80009ec:	d1e4      	bne.n	80009b8 <__cmpsf2+0x1c>
 80009ee:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80009f2:	d0e1      	beq.n	80009b8 <__cmpsf2+0x1c>
 80009f4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop

080009fc <__aeabi_cfrcmple>:
 80009fc:	4684      	mov	ip, r0
 80009fe:	4608      	mov	r0, r1
 8000a00:	4661      	mov	r1, ip
 8000a02:	e7ff      	b.n	8000a04 <__aeabi_cfcmpeq>

08000a04 <__aeabi_cfcmpeq>:
 8000a04:	b50f      	push	{r0, r1, r2, r3, lr}
 8000a06:	f7ff ffc9 	bl	800099c <__cmpsf2>
 8000a0a:	2800      	cmp	r0, #0
 8000a0c:	bf48      	it	mi
 8000a0e:	f110 0f00 	cmnmi.w	r0, #0
 8000a12:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000a14 <__aeabi_fcmpeq>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff fff4 	bl	8000a04 <__aeabi_cfcmpeq>
 8000a1c:	bf0c      	ite	eq
 8000a1e:	2001      	moveq	r0, #1
 8000a20:	2000      	movne	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_fcmplt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffea 	bl	8000a04 <__aeabi_cfcmpeq>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_fcmple>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffe0 	bl	8000a04 <__aeabi_cfcmpeq>
 8000a44:	bf94      	ite	ls
 8000a46:	2001      	movls	r0, #1
 8000a48:	2000      	movhi	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_fcmpge>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffd2 	bl	80009fc <__aeabi_cfrcmple>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_fcmpgt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffc8 	bl	80009fc <__aeabi_cfrcmple>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a7c:	f000 fd00 	bl	8001480 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a80:	f000 f860 	bl	8000b44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a84:	f000 fa06 	bl	8000e94 <MX_GPIO_Init>
  MX_TIM4_Init();
 8000a88:	f000 f97c 	bl	8000d84 <MX_TIM4_Init>
  MX_ADC2_Init();
 8000a8c:	f000 f8b6 	bl	8000bfc <MX_ADC2_Init>
  MX_I2C2_Init();
 8000a90:	f000 f8f2 	bl	8000c78 <MX_I2C2_Init>
  MX_TIM1_Init();
 8000a94:	f000 f91e 	bl	8000cd4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000a98:	2108      	movs	r1, #8
 8000a9a:	4821      	ldr	r0, [pc, #132]	; (8000b20 <main+0xa8>)
 8000a9c:	f002 f834 	bl	8002b08 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000aa0:	210c      	movs	r1, #12
 8000aa2:	481f      	ldr	r0, [pc, #124]	; (8000b20 <main+0xa8>)
 8000aa4:	f002 f830 	bl	8002b08 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000aa8:	213c      	movs	r1, #60	; 0x3c
 8000aaa:	481d      	ldr	r0, [pc, #116]	; (8000b20 <main+0xa8>)
 8000aac:	f002 f970 	bl	8002d90 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8000ab0:	213c      	movs	r1, #60	; 0x3c
 8000ab2:	481c      	ldr	r0, [pc, #112]	; (8000b24 <main+0xac>)
 8000ab4:	f002 f96c 	bl	8002d90 <HAL_TIM_Encoder_Start>
	HAL_GPIO_WritePin(STBY, GPIO_PIN_SET);
 8000ab8:	2201      	movs	r2, #1
 8000aba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000abe:	481a      	ldr	r0, [pc, #104]	; (8000b28 <main+0xb0>)
 8000ac0:	f001 f9ba 	bl	8001e38 <HAL_GPIO_WritePin>
	powerA = TIM4->CCR3 = 20000;
 8000ac4:	4b19      	ldr	r3, [pc, #100]	; (8000b2c <main+0xb4>)
 8000ac6:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000aca:	63da      	str	r2, [r3, #60]	; 0x3c
 8000acc:	4b18      	ldr	r3, [pc, #96]	; (8000b30 <main+0xb8>)
 8000ace:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000ad2:	601a      	str	r2, [r3, #0]
	powerB = TIM4->CCR4 = 20000;
 8000ad4:	4b15      	ldr	r3, [pc, #84]	; (8000b2c <main+0xb4>)
 8000ad6:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000ada:	641a      	str	r2, [r3, #64]	; 0x40
 8000adc:	4b15      	ldr	r3, [pc, #84]	; (8000b34 <main+0xbc>)
 8000ade:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000ae2:	601a      	str	r2, [r3, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		//printf("hola");
		//runForward();
		if( calcularDistancia(TIM1->CNT) < 10){
 8000ae4:	4b14      	ldr	r3, [pc, #80]	; (8000b38 <main+0xc0>)
 8000ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f000 fa69 	bl	8000fc0 <calcularDistancia>
 8000aee:	4603      	mov	r3, r0
 8000af0:	4912      	ldr	r1, [pc, #72]	; (8000b3c <main+0xc4>)
 8000af2:	4618      	mov	r0, r3
 8000af4:	f7ff ff98 	bl	8000a28 <__aeabi_fcmplt>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d006      	beq.n	8000b0c <main+0x94>
			//runOff();

			HAL_GPIO_WritePin(BUILT_IN_LED_GPIO_Port,BUILT_IN_LED_Pin , GPIO_PIN_SET);
 8000afe:	2201      	movs	r2, #1
 8000b00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b04:	480e      	ldr	r0, [pc, #56]	; (8000b40 <main+0xc8>)
 8000b06:	f001 f997 	bl	8001e38 <HAL_GPIO_WritePin>
 8000b0a:	e7eb      	b.n	8000ae4 <main+0x6c>
		} else{
			runForward();
 8000b0c:	f000 fa8c 	bl	8001028 <runForward>
			HAL_GPIO_WritePin(BUILT_IN_LED_GPIO_Port,BUILT_IN_LED_Pin , GPIO_PIN_RESET);
 8000b10:	2200      	movs	r2, #0
 8000b12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b16:	480a      	ldr	r0, [pc, #40]	; (8000b40 <main+0xc8>)
 8000b18:	f001 f98e 	bl	8001e38 <HAL_GPIO_WritePin>
		if( calcularDistancia(TIM1->CNT) < 10){
 8000b1c:	e7e2      	b.n	8000ae4 <main+0x6c>
 8000b1e:	bf00      	nop
 8000b20:	200000f4 	.word	0x200000f4
 8000b24:	200000ac 	.word	0x200000ac
 8000b28:	40010800 	.word	0x40010800
 8000b2c:	40000800 	.word	0x40000800
 8000b30:	2000013c 	.word	0x2000013c
 8000b34:	20000140 	.word	0x20000140
 8000b38:	40012c00 	.word	0x40012c00
 8000b3c:	41200000 	.word	0x41200000
 8000b40:	40011000 	.word	0x40011000

08000b44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b094      	sub	sp, #80	; 0x50
 8000b48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b4e:	2228      	movs	r2, #40	; 0x28
 8000b50:	2100      	movs	r1, #0
 8000b52:	4618      	mov	r0, r3
 8000b54:	f002 fcf8 	bl	8003548 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b58:	f107 0314 	add.w	r3, r7, #20
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b68:	1d3b      	adds	r3, r7, #4
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	605a      	str	r2, [r3, #4]
 8000b70:	609a      	str	r2, [r3, #8]
 8000b72:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b74:	2301      	movs	r3, #1
 8000b76:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b82:	2301      	movs	r3, #1
 8000b84:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b86:	2302      	movs	r3, #2
 8000b88:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b8e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b90:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000b94:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f001 faa8 	bl	80020f0 <HAL_RCC_OscConfig>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000ba6:	f000 fa05 	bl	8000fb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000baa:	230f      	movs	r3, #15
 8000bac:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bba:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bc0:	f107 0314 	add.w	r3, r7, #20
 8000bc4:	2102      	movs	r1, #2
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f001 fd14 	bl	80025f4 <HAL_RCC_ClockConfig>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000bd2:	f000 f9ef 	bl	8000fb4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000bda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bde:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000be0:	1d3b      	adds	r3, r7, #4
 8000be2:	4618      	mov	r0, r3
 8000be4:	f001 fe8a 	bl	80028fc <HAL_RCCEx_PeriphCLKConfig>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000bee:	f000 f9e1 	bl	8000fb4 <Error_Handler>
  }
}
 8000bf2:	bf00      	nop
 8000bf4:	3750      	adds	r7, #80	; 0x50
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
	...

08000bfc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c02:	1d3b      	adds	r3, r7, #4
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000c0c:	4b18      	ldr	r3, [pc, #96]	; (8000c70 <MX_ADC2_Init+0x74>)
 8000c0e:	4a19      	ldr	r2, [pc, #100]	; (8000c74 <MX_ADC2_Init+0x78>)
 8000c10:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c12:	4b17      	ldr	r3, [pc, #92]	; (8000c70 <MX_ADC2_Init+0x74>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000c18:	4b15      	ldr	r3, [pc, #84]	; (8000c70 <MX_ADC2_Init+0x74>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000c1e:	4b14      	ldr	r3, [pc, #80]	; (8000c70 <MX_ADC2_Init+0x74>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c24:	4b12      	ldr	r3, [pc, #72]	; (8000c70 <MX_ADC2_Init+0x74>)
 8000c26:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000c2a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c2c:	4b10      	ldr	r3, [pc, #64]	; (8000c70 <MX_ADC2_Init+0x74>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000c32:	4b0f      	ldr	r3, [pc, #60]	; (8000c70 <MX_ADC2_Init+0x74>)
 8000c34:	2201      	movs	r2, #1
 8000c36:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000c38:	480d      	ldr	r0, [pc, #52]	; (8000c70 <MX_ADC2_Init+0x74>)
 8000c3a:	f000 fc83 	bl	8001544 <HAL_ADC_Init>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000c44:	f000 f9b6 	bl	8000fb4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000c48:	2303      	movs	r3, #3
 8000c4a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c50:	2300      	movs	r3, #0
 8000c52:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000c54:	1d3b      	adds	r3, r7, #4
 8000c56:	4619      	mov	r1, r3
 8000c58:	4805      	ldr	r0, [pc, #20]	; (8000c70 <MX_ADC2_Init+0x74>)
 8000c5a:	f000 fd4b 	bl	80016f4 <HAL_ADC_ConfigChannel>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000c64:	f000 f9a6 	bl	8000fb4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000c68:	bf00      	nop
 8000c6a:	3710      	adds	r7, #16
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	20000028 	.word	0x20000028
 8000c74:	40012800 	.word	0x40012800

08000c78 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c7c:	4b12      	ldr	r3, [pc, #72]	; (8000cc8 <MX_I2C2_Init+0x50>)
 8000c7e:	4a13      	ldr	r2, [pc, #76]	; (8000ccc <MX_I2C2_Init+0x54>)
 8000c80:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000c82:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <MX_I2C2_Init+0x50>)
 8000c84:	4a12      	ldr	r2, [pc, #72]	; (8000cd0 <MX_I2C2_Init+0x58>)
 8000c86:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c88:	4b0f      	ldr	r3, [pc, #60]	; (8000cc8 <MX_I2C2_Init+0x50>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000c8e:	4b0e      	ldr	r3, [pc, #56]	; (8000cc8 <MX_I2C2_Init+0x50>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c94:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <MX_I2C2_Init+0x50>)
 8000c96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c9a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c9c:	4b0a      	ldr	r3, [pc, #40]	; (8000cc8 <MX_I2C2_Init+0x50>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000ca2:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <MX_I2C2_Init+0x50>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ca8:	4b07      	ldr	r3, [pc, #28]	; (8000cc8 <MX_I2C2_Init+0x50>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cae:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <MX_I2C2_Init+0x50>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000cb4:	4804      	ldr	r0, [pc, #16]	; (8000cc8 <MX_I2C2_Init+0x50>)
 8000cb6:	f001 f8d7 	bl	8001e68 <HAL_I2C_Init>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000cc0:	f000 f978 	bl	8000fb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000cc4:	bf00      	nop
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20000058 	.word	0x20000058
 8000ccc:	40005800 	.word	0x40005800
 8000cd0:	000186a0 	.word	0x000186a0

08000cd4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b08c      	sub	sp, #48	; 0x30
 8000cd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000cda:	f107 030c 	add.w	r3, r7, #12
 8000cde:	2224      	movs	r2, #36	; 0x24
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f002 fc30 	bl	8003548 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ce8:	1d3b      	adds	r3, r7, #4
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
 8000cee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000cf0:	4b22      	ldr	r3, [pc, #136]	; (8000d7c <MX_TIM1_Init+0xa8>)
 8000cf2:	4a23      	ldr	r2, [pc, #140]	; (8000d80 <MX_TIM1_Init+0xac>)
 8000cf4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000cf6:	4b21      	ldr	r3, [pc, #132]	; (8000d7c <MX_TIM1_Init+0xa8>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cfc:	4b1f      	ldr	r3, [pc, #124]	; (8000d7c <MX_TIM1_Init+0xa8>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000d02:	4b1e      	ldr	r3, [pc, #120]	; (8000d7c <MX_TIM1_Init+0xa8>)
 8000d04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d08:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d0a:	4b1c      	ldr	r3, [pc, #112]	; (8000d7c <MX_TIM1_Init+0xa8>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d10:	4b1a      	ldr	r3, [pc, #104]	; (8000d7c <MX_TIM1_Init+0xa8>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d16:	4b19      	ldr	r3, [pc, #100]	; (8000d7c <MX_TIM1_Init+0xa8>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000d1c:	2303      	movs	r3, #3
 8000d1e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000d20:	2300      	movs	r3, #0
 8000d22:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000d24:	2301      	movs	r3, #1
 8000d26:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000d2c:	230a      	movs	r3, #10
 8000d2e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d30:	2300      	movs	r3, #0
 8000d32:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d34:	2301      	movs	r3, #1
 8000d36:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000d40:	f107 030c 	add.w	r3, r7, #12
 8000d44:	4619      	mov	r1, r3
 8000d46:	480d      	ldr	r0, [pc, #52]	; (8000d7c <MX_TIM1_Init+0xa8>)
 8000d48:	f001 ff80 	bl	8002c4c <HAL_TIM_Encoder_Init>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000d52:	f000 f92f 	bl	8000fb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d56:	2300      	movs	r3, #0
 8000d58:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d5e:	1d3b      	adds	r3, r7, #4
 8000d60:	4619      	mov	r1, r3
 8000d62:	4806      	ldr	r0, [pc, #24]	; (8000d7c <MX_TIM1_Init+0xa8>)
 8000d64:	f002 fb6e 	bl	8003444 <HAL_TIMEx_MasterConfigSynchronization>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000d6e:	f000 f921 	bl	8000fb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000d72:	bf00      	nop
 8000d74:	3730      	adds	r7, #48	; 0x30
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	200000ac 	.word	0x200000ac
 8000d80:	40012c00 	.word	0x40012c00

08000d84 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b092      	sub	sp, #72	; 0x48
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d8e:	2224      	movs	r2, #36	; 0x24
 8000d90:	2100      	movs	r1, #0
 8000d92:	4618      	mov	r0, r3
 8000d94:	f002 fbd8 	bl	8003548 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d98:	f107 031c 	add.w	r3, r7, #28
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000da2:	463b      	mov	r3, r7
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]
 8000dae:	611a      	str	r2, [r3, #16]
 8000db0:	615a      	str	r2, [r3, #20]
 8000db2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000db4:	4b35      	ldr	r3, [pc, #212]	; (8000e8c <MX_TIM4_Init+0x108>)
 8000db6:	4a36      	ldr	r2, [pc, #216]	; (8000e90 <MX_TIM4_Init+0x10c>)
 8000db8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000dba:	4b34      	ldr	r3, [pc, #208]	; (8000e8c <MX_TIM4_Init+0x108>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc0:	4b32      	ldr	r3, [pc, #200]	; (8000e8c <MX_TIM4_Init+0x108>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000dc6:	4b31      	ldr	r3, [pc, #196]	; (8000e8c <MX_TIM4_Init+0x108>)
 8000dc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dcc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dce:	4b2f      	ldr	r3, [pc, #188]	; (8000e8c <MX_TIM4_Init+0x108>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000dd4:	4b2d      	ldr	r3, [pc, #180]	; (8000e8c <MX_TIM4_Init+0x108>)
 8000dd6:	2280      	movs	r2, #128	; 0x80
 8000dd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000dda:	482c      	ldr	r0, [pc, #176]	; (8000e8c <MX_TIM4_Init+0x108>)
 8000ddc:	f001 fe44 	bl	8002a68 <HAL_TIM_PWM_Init>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000de6:	f000 f8e5 	bl	8000fb4 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000dea:	2303      	movs	r3, #3
 8000dec:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000dee:	2300      	movs	r3, #0
 8000df0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000df2:	2301      	movs	r3, #1
 8000df4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000df6:	2300      	movs	r3, #0
 8000df8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfig.IC1Filter = 10;
 8000dfa:	230a      	movs	r3, #10
 8000dfc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e02:	2301      	movs	r3, #1
 8000e04:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e06:	2300      	movs	r3, #0
 8000e08:	643b      	str	r3, [r7, #64]	; 0x40
  sConfig.IC2Filter = 0;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000e0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e12:	4619      	mov	r1, r3
 8000e14:	481d      	ldr	r0, [pc, #116]	; (8000e8c <MX_TIM4_Init+0x108>)
 8000e16:	f001 ff19 	bl	8002c4c <HAL_TIM_Encoder_Init>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8000e20:	f000 f8c8 	bl	8000fb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e24:	2300      	movs	r3, #0
 8000e26:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e2c:	f107 031c 	add.w	r3, r7, #28
 8000e30:	4619      	mov	r1, r3
 8000e32:	4816      	ldr	r0, [pc, #88]	; (8000e8c <MX_TIM4_Init+0x108>)
 8000e34:	f002 fb06 	bl	8003444 <HAL_TIMEx_MasterConfigSynchronization>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_TIM4_Init+0xbe>
  {
    Error_Handler();
 8000e3e:	f000 f8b9 	bl	8000fb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e42:	2360      	movs	r3, #96	; 0x60
 8000e44:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e46:	2300      	movs	r3, #0
 8000e48:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e52:	463b      	mov	r3, r7
 8000e54:	2208      	movs	r2, #8
 8000e56:	4619      	mov	r1, r3
 8000e58:	480c      	ldr	r0, [pc, #48]	; (8000e8c <MX_TIM4_Init+0x108>)
 8000e5a:	f002 f827 	bl	8002eac <HAL_TIM_PWM_ConfigChannel>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_TIM4_Init+0xe4>
  {
    Error_Handler();
 8000e64:	f000 f8a6 	bl	8000fb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e68:	463b      	mov	r3, r7
 8000e6a:	220c      	movs	r2, #12
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4807      	ldr	r0, [pc, #28]	; (8000e8c <MX_TIM4_Init+0x108>)
 8000e70:	f002 f81c 	bl	8002eac <HAL_TIM_PWM_ConfigChannel>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_TIM4_Init+0xfa>
  {
    Error_Handler();
 8000e7a:	f000 f89b 	bl	8000fb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000e7e:	4803      	ldr	r0, [pc, #12]	; (8000e8c <MX_TIM4_Init+0x108>)
 8000e80:	f000 fa76 	bl	8001370 <HAL_TIM_MspPostInit>

}
 8000e84:	bf00      	nop
 8000e86:	3748      	adds	r7, #72	; 0x48
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	200000f4 	.word	0x200000f4
 8000e90:	40000800 	.word	0x40000800

08000e94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b088      	sub	sp, #32
 8000e98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9a:	f107 0310 	add.w	r3, r7, #16
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	605a      	str	r2, [r3, #4]
 8000ea4:	609a      	str	r2, [r3, #8]
 8000ea6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ea8:	4b3e      	ldr	r3, [pc, #248]	; (8000fa4 <MX_GPIO_Init+0x110>)
 8000eaa:	699b      	ldr	r3, [r3, #24]
 8000eac:	4a3d      	ldr	r2, [pc, #244]	; (8000fa4 <MX_GPIO_Init+0x110>)
 8000eae:	f043 0310 	orr.w	r3, r3, #16
 8000eb2:	6193      	str	r3, [r2, #24]
 8000eb4:	4b3b      	ldr	r3, [pc, #236]	; (8000fa4 <MX_GPIO_Init+0x110>)
 8000eb6:	699b      	ldr	r3, [r3, #24]
 8000eb8:	f003 0310 	and.w	r3, r3, #16
 8000ebc:	60fb      	str	r3, [r7, #12]
 8000ebe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ec0:	4b38      	ldr	r3, [pc, #224]	; (8000fa4 <MX_GPIO_Init+0x110>)
 8000ec2:	699b      	ldr	r3, [r3, #24]
 8000ec4:	4a37      	ldr	r2, [pc, #220]	; (8000fa4 <MX_GPIO_Init+0x110>)
 8000ec6:	f043 0320 	orr.w	r3, r3, #32
 8000eca:	6193      	str	r3, [r2, #24]
 8000ecc:	4b35      	ldr	r3, [pc, #212]	; (8000fa4 <MX_GPIO_Init+0x110>)
 8000ece:	699b      	ldr	r3, [r3, #24]
 8000ed0:	f003 0320 	and.w	r3, r3, #32
 8000ed4:	60bb      	str	r3, [r7, #8]
 8000ed6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed8:	4b32      	ldr	r3, [pc, #200]	; (8000fa4 <MX_GPIO_Init+0x110>)
 8000eda:	699b      	ldr	r3, [r3, #24]
 8000edc:	4a31      	ldr	r2, [pc, #196]	; (8000fa4 <MX_GPIO_Init+0x110>)
 8000ede:	f043 0304 	orr.w	r3, r3, #4
 8000ee2:	6193      	str	r3, [r2, #24]
 8000ee4:	4b2f      	ldr	r3, [pc, #188]	; (8000fa4 <MX_GPIO_Init+0x110>)
 8000ee6:	699b      	ldr	r3, [r3, #24]
 8000ee8:	f003 0304 	and.w	r3, r3, #4
 8000eec:	607b      	str	r3, [r7, #4]
 8000eee:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef0:	4b2c      	ldr	r3, [pc, #176]	; (8000fa4 <MX_GPIO_Init+0x110>)
 8000ef2:	699b      	ldr	r3, [r3, #24]
 8000ef4:	4a2b      	ldr	r2, [pc, #172]	; (8000fa4 <MX_GPIO_Init+0x110>)
 8000ef6:	f043 0308 	orr.w	r3, r3, #8
 8000efa:	6193      	str	r3, [r2, #24]
 8000efc:	4b29      	ldr	r3, [pc, #164]	; (8000fa4 <MX_GPIO_Init+0x110>)
 8000efe:	699b      	ldr	r3, [r3, #24]
 8000f00:	f003 0308 	and.w	r3, r3, #8
 8000f04:	603b      	str	r3, [r7, #0]
 8000f06:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUILT_IN_LED_GPIO_Port, BUILT_IN_LED_Pin, GPIO_PIN_RESET);
 8000f08:	2200      	movs	r2, #0
 8000f0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f0e:	4826      	ldr	r0, [pc, #152]	; (8000fa8 <MX_GPIO_Init+0x114>)
 8000f10:	f000 ff92 	bl	8001e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BTN1_Pin|BTN2_Pin|BTN3_Pin|LED_Pin
 8000f14:	2200      	movs	r2, #0
 8000f16:	f24f 0130 	movw	r1, #61488	; 0xf030
 8000f1a:	4824      	ldr	r0, [pc, #144]	; (8000fac <MX_GPIO_Init+0x118>)
 8000f1c:	f000 ff8c 	bl	8001e38 <HAL_GPIO_WritePin>
                          |AIN2_Pin|AIN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BIN2_Pin|BIN1_Pin|STBY_Pin, GPIO_PIN_RESET);
 8000f20:	2200      	movs	r2, #0
 8000f22:	f44f 4118 	mov.w	r1, #38912	; 0x9800
 8000f26:	4822      	ldr	r0, [pc, #136]	; (8000fb0 <MX_GPIO_Init+0x11c>)
 8000f28:	f000 ff86 	bl	8001e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUILT_IN_LED_Pin */
  GPIO_InitStruct.Pin = BUILT_IN_LED_Pin;
 8000f2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f32:	2301      	movs	r3, #1
 8000f34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUILT_IN_LED_GPIO_Port, &GPIO_InitStruct);
 8000f3e:	f107 0310 	add.w	r3, r7, #16
 8000f42:	4619      	mov	r1, r3
 8000f44:	4818      	ldr	r0, [pc, #96]	; (8000fa8 <MX_GPIO_Init+0x114>)
 8000f46:	f000 fdf3 	bl	8001b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : CNY70_Pin SHARP_D_Pin SHARP_C_Pin */
  GPIO_InitStruct.Pin = CNY70_Pin|SHARP_D_Pin|SHARP_C_Pin;
 8000f4a:	2307      	movs	r3, #7
 8000f4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f52:	f107 0310 	add.w	r3, r7, #16
 8000f56:	4619      	mov	r1, r3
 8000f58:	4815      	ldr	r0, [pc, #84]	; (8000fb0 <MX_GPIO_Init+0x11c>)
 8000f5a:	f000 fde9 	bl	8001b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN1_Pin BTN2_Pin BTN3_Pin LED_Pin
                           AIN2_Pin AIN1_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin|BTN3_Pin|LED_Pin
 8000f5e:	f24f 0330 	movw	r3, #61488	; 0xf030
 8000f62:	613b      	str	r3, [r7, #16]
                          |AIN2_Pin|AIN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f64:	2301      	movs	r3, #1
 8000f66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f70:	f107 0310 	add.w	r3, r7, #16
 8000f74:	4619      	mov	r1, r3
 8000f76:	480d      	ldr	r0, [pc, #52]	; (8000fac <MX_GPIO_Init+0x118>)
 8000f78:	f000 fdda 	bl	8001b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : BIN2_Pin BIN1_Pin STBY_Pin */
  GPIO_InitStruct.Pin = BIN2_Pin|BIN1_Pin|STBY_Pin;
 8000f7c:	f44f 4318 	mov.w	r3, #38912	; 0x9800
 8000f80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f82:	2301      	movs	r3, #1
 8000f84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f86:	2300      	movs	r3, #0
 8000f88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8e:	f107 0310 	add.w	r3, r7, #16
 8000f92:	4619      	mov	r1, r3
 8000f94:	4806      	ldr	r0, [pc, #24]	; (8000fb0 <MX_GPIO_Init+0x11c>)
 8000f96:	f000 fdcb 	bl	8001b30 <HAL_GPIO_Init>

}
 8000f9a:	bf00      	nop
 8000f9c:	3720      	adds	r7, #32
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40021000 	.word	0x40021000
 8000fa8:	40011000 	.word	0x40011000
 8000fac:	40010c00 	.word	0x40010c00
 8000fb0:	40010800 	.word	0x40010800

08000fb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fb8:	b672      	cpsid	i
}
 8000fba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000fbc:	e7fe      	b.n	8000fbc <Error_Handler+0x8>
	...

08000fc0 <calcularDistancia>:

void toggleLed(){
	HAL_GPIO_TogglePin(LED);
}

float calcularDistancia(int counter) {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  return ((counter- 32767.5) * 2.51 / 10);
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f7ff fa13 	bl	80003f4 <__aeabi_i2d>
 8000fce:	f04f 0200 	mov.w	r2, #0
 8000fd2:	4b13      	ldr	r3, [pc, #76]	; (8001020 <calcularDistancia+0x60>)
 8000fd4:	f7ff f8c0 	bl	8000158 <__aeabi_dsub>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	460b      	mov	r3, r1
 8000fdc:	4610      	mov	r0, r2
 8000fde:	4619      	mov	r1, r3
 8000fe0:	a30d      	add	r3, pc, #52	; (adr r3, 8001018 <calcularDistancia+0x58>)
 8000fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe6:	f7ff fa6f 	bl	80004c8 <__aeabi_dmul>
 8000fea:	4602      	mov	r2, r0
 8000fec:	460b      	mov	r3, r1
 8000fee:	4610      	mov	r0, r2
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	f04f 0200 	mov.w	r2, #0
 8000ff6:	4b0b      	ldr	r3, [pc, #44]	; (8001024 <calcularDistancia+0x64>)
 8000ff8:	f7ff fb90 	bl	800071c <__aeabi_ddiv>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	460b      	mov	r3, r1
 8001000:	4610      	mov	r0, r2
 8001002:	4619      	mov	r1, r3
 8001004:	f7ff fc72 	bl	80008ec <__aeabi_d2f>
 8001008:	4603      	mov	r3, r0
}
 800100a:	4618      	mov	r0, r3
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	f3af 8000 	nop.w
 8001018:	e147ae14 	.word	0xe147ae14
 800101c:	4004147a 	.word	0x4004147a
 8001020:	40dfffe0 	.word	0x40dfffe0
 8001024:	40240000 	.word	0x40240000

08001028 <runForward>:

void runForward() {
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
	runMotor(ADELANTE, MOTOR_A);
 800102c:	2100      	movs	r1, #0
 800102e:	2000      	movs	r0, #0
 8001030:	f000 f806 	bl	8001040 <runMotor>
	runMotor(ADELANTE, MOTOR_B);
 8001034:	2101      	movs	r1, #1
 8001036:	2000      	movs	r0, #0
 8001038:	f000 f802 	bl	8001040 <runMotor>
}
 800103c:	bf00      	nop
 800103e:	bd80      	pop	{r7, pc}

08001040 <runMotor>:
	} else {
		TIM4->CCR3 = power;
	}
}

void runMotor(int dir, int motor) {
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
	switch (dir) {
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2b05      	cmp	r3, #5
 800104e:	d03f      	beq.n	80010d0 <runMotor+0x90>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2b05      	cmp	r3, #5
 8001054:	dc57      	bgt.n	8001106 <runMotor+0xc6>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d003      	beq.n	8001064 <runMotor+0x24>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2b02      	cmp	r3, #2
 8001060:	d01b      	beq.n	800109a <runMotor+0x5a>
			HAL_GPIO_WritePin(BIN1, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(BIN2, GPIO_PIN_RESET);
		}
		break;
	}
}
 8001062:	e050      	b.n	8001106 <runMotor+0xc6>
		if (motor == MOTOR_A) {
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d10a      	bne.n	8001080 <runMotor+0x40>
			HAL_GPIO_WritePin(AIN1, GPIO_PIN_SET);
 800106a:	2201      	movs	r2, #1
 800106c:	2120      	movs	r1, #32
 800106e:	4828      	ldr	r0, [pc, #160]	; (8001110 <runMotor+0xd0>)
 8001070:	f000 fee2 	bl	8001e38 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(AIN2, GPIO_PIN_RESET);
 8001074:	2200      	movs	r2, #0
 8001076:	2110      	movs	r1, #16
 8001078:	4825      	ldr	r0, [pc, #148]	; (8001110 <runMotor+0xd0>)
 800107a:	f000 fedd 	bl	8001e38 <HAL_GPIO_WritePin>
		break;
 800107e:	e042      	b.n	8001106 <runMotor+0xc6>
			HAL_GPIO_WritePin(BIN1, GPIO_PIN_SET);
 8001080:	2201      	movs	r2, #1
 8001082:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001086:	4823      	ldr	r0, [pc, #140]	; (8001114 <runMotor+0xd4>)
 8001088:	f000 fed6 	bl	8001e38 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BIN2, GPIO_PIN_RESET);
 800108c:	2200      	movs	r2, #0
 800108e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001092:	4820      	ldr	r0, [pc, #128]	; (8001114 <runMotor+0xd4>)
 8001094:	f000 fed0 	bl	8001e38 <HAL_GPIO_WritePin>
		break;
 8001098:	e035      	b.n	8001106 <runMotor+0xc6>
		if (motor == MOTOR_A) {
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d10a      	bne.n	80010b6 <runMotor+0x76>
			HAL_GPIO_WritePin(AIN1, GPIO_PIN_RESET);
 80010a0:	2200      	movs	r2, #0
 80010a2:	2120      	movs	r1, #32
 80010a4:	481a      	ldr	r0, [pc, #104]	; (8001110 <runMotor+0xd0>)
 80010a6:	f000 fec7 	bl	8001e38 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(AIN2, GPIO_PIN_SET);
 80010aa:	2201      	movs	r2, #1
 80010ac:	2110      	movs	r1, #16
 80010ae:	4818      	ldr	r0, [pc, #96]	; (8001110 <runMotor+0xd0>)
 80010b0:	f000 fec2 	bl	8001e38 <HAL_GPIO_WritePin>
		break;
 80010b4:	e027      	b.n	8001106 <runMotor+0xc6>
			HAL_GPIO_WritePin(BIN1, GPIO_PIN_RESET);
 80010b6:	2200      	movs	r2, #0
 80010b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010bc:	4815      	ldr	r0, [pc, #84]	; (8001114 <runMotor+0xd4>)
 80010be:	f000 febb 	bl	8001e38 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BIN2, GPIO_PIN_SET);
 80010c2:	2201      	movs	r2, #1
 80010c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010c8:	4812      	ldr	r0, [pc, #72]	; (8001114 <runMotor+0xd4>)
 80010ca:	f000 feb5 	bl	8001e38 <HAL_GPIO_WritePin>
		break;
 80010ce:	e01a      	b.n	8001106 <runMotor+0xc6>
		if (motor == MOTOR_A) {
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d10a      	bne.n	80010ec <runMotor+0xac>
			HAL_GPIO_WritePin(AIN1, GPIO_PIN_RESET);
 80010d6:	2200      	movs	r2, #0
 80010d8:	2120      	movs	r1, #32
 80010da:	480d      	ldr	r0, [pc, #52]	; (8001110 <runMotor+0xd0>)
 80010dc:	f000 feac 	bl	8001e38 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(AIN2, GPIO_PIN_RESET);
 80010e0:	2200      	movs	r2, #0
 80010e2:	2110      	movs	r1, #16
 80010e4:	480a      	ldr	r0, [pc, #40]	; (8001110 <runMotor+0xd0>)
 80010e6:	f000 fea7 	bl	8001e38 <HAL_GPIO_WritePin>
		break;
 80010ea:	e00b      	b.n	8001104 <runMotor+0xc4>
			HAL_GPIO_WritePin(BIN1, GPIO_PIN_RESET);
 80010ec:	2200      	movs	r2, #0
 80010ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010f2:	4808      	ldr	r0, [pc, #32]	; (8001114 <runMotor+0xd4>)
 80010f4:	f000 fea0 	bl	8001e38 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BIN2, GPIO_PIN_RESET);
 80010f8:	2200      	movs	r2, #0
 80010fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010fe:	4805      	ldr	r0, [pc, #20]	; (8001114 <runMotor+0xd4>)
 8001100:	f000 fe9a 	bl	8001e38 <HAL_GPIO_WritePin>
		break;
 8001104:	bf00      	nop
}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40010c00 	.word	0x40010c00
 8001114:	40010800 	.word	0x40010800

08001118 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800111e:	4b15      	ldr	r3, [pc, #84]	; (8001174 <HAL_MspInit+0x5c>)
 8001120:	699b      	ldr	r3, [r3, #24]
 8001122:	4a14      	ldr	r2, [pc, #80]	; (8001174 <HAL_MspInit+0x5c>)
 8001124:	f043 0301 	orr.w	r3, r3, #1
 8001128:	6193      	str	r3, [r2, #24]
 800112a:	4b12      	ldr	r3, [pc, #72]	; (8001174 <HAL_MspInit+0x5c>)
 800112c:	699b      	ldr	r3, [r3, #24]
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	60bb      	str	r3, [r7, #8]
 8001134:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001136:	4b0f      	ldr	r3, [pc, #60]	; (8001174 <HAL_MspInit+0x5c>)
 8001138:	69db      	ldr	r3, [r3, #28]
 800113a:	4a0e      	ldr	r2, [pc, #56]	; (8001174 <HAL_MspInit+0x5c>)
 800113c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001140:	61d3      	str	r3, [r2, #28]
 8001142:	4b0c      	ldr	r3, [pc, #48]	; (8001174 <HAL_MspInit+0x5c>)
 8001144:	69db      	ldr	r3, [r3, #28]
 8001146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800114a:	607b      	str	r3, [r7, #4]
 800114c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800114e:	4b0a      	ldr	r3, [pc, #40]	; (8001178 <HAL_MspInit+0x60>)
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	4a04      	ldr	r2, [pc, #16]	; (8001178 <HAL_MspInit+0x60>)
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800116a:	bf00      	nop
 800116c:	3714      	adds	r7, #20
 800116e:	46bd      	mov	sp, r7
 8001170:	bc80      	pop	{r7}
 8001172:	4770      	bx	lr
 8001174:	40021000 	.word	0x40021000
 8001178:	40010000 	.word	0x40010000

0800117c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b088      	sub	sp, #32
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001184:	f107 0310 	add.w	r3, r7, #16
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC2)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a14      	ldr	r2, [pc, #80]	; (80011e8 <HAL_ADC_MspInit+0x6c>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d121      	bne.n	80011e0 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 800119c:	4b13      	ldr	r3, [pc, #76]	; (80011ec <HAL_ADC_MspInit+0x70>)
 800119e:	699b      	ldr	r3, [r3, #24]
 80011a0:	4a12      	ldr	r2, [pc, #72]	; (80011ec <HAL_ADC_MspInit+0x70>)
 80011a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011a6:	6193      	str	r3, [r2, #24]
 80011a8:	4b10      	ldr	r3, [pc, #64]	; (80011ec <HAL_ADC_MspInit+0x70>)
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b4:	4b0d      	ldr	r3, [pc, #52]	; (80011ec <HAL_ADC_MspInit+0x70>)
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	4a0c      	ldr	r2, [pc, #48]	; (80011ec <HAL_ADC_MspInit+0x70>)
 80011ba:	f043 0304 	orr.w	r3, r3, #4
 80011be:	6193      	str	r3, [r2, #24]
 80011c0:	4b0a      	ldr	r3, [pc, #40]	; (80011ec <HAL_ADC_MspInit+0x70>)
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	f003 0304 	and.w	r3, r3, #4
 80011c8:	60bb      	str	r3, [r7, #8]
 80011ca:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PA3     ------> ADC2_IN3
    */
    GPIO_InitStruct.Pin = SHARP_I_Pin;
 80011cc:	2308      	movs	r3, #8
 80011ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011d0:	2303      	movs	r3, #3
 80011d2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(SHARP_I_GPIO_Port, &GPIO_InitStruct);
 80011d4:	f107 0310 	add.w	r3, r7, #16
 80011d8:	4619      	mov	r1, r3
 80011da:	4805      	ldr	r0, [pc, #20]	; (80011f0 <HAL_ADC_MspInit+0x74>)
 80011dc:	f000 fca8 	bl	8001b30 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80011e0:	bf00      	nop
 80011e2:	3720      	adds	r7, #32
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40012800 	.word	0x40012800
 80011ec:	40021000 	.word	0x40021000
 80011f0:	40010800 	.word	0x40010800

080011f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b088      	sub	sp, #32
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fc:	f107 0310 	add.w	r3, r7, #16
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a16      	ldr	r2, [pc, #88]	; (8001268 <HAL_I2C_MspInit+0x74>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d124      	bne.n	800125e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001214:	4b15      	ldr	r3, [pc, #84]	; (800126c <HAL_I2C_MspInit+0x78>)
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	4a14      	ldr	r2, [pc, #80]	; (800126c <HAL_I2C_MspInit+0x78>)
 800121a:	f043 0308 	orr.w	r3, r3, #8
 800121e:	6193      	str	r3, [r2, #24]
 8001220:	4b12      	ldr	r3, [pc, #72]	; (800126c <HAL_I2C_MspInit+0x78>)
 8001222:	699b      	ldr	r3, [r3, #24]
 8001224:	f003 0308 	and.w	r3, r3, #8
 8001228:	60fb      	str	r3, [r7, #12]
 800122a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 800122c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001230:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001232:	2312      	movs	r3, #18
 8001234:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001236:	2303      	movs	r3, #3
 8001238:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800123a:	f107 0310 	add.w	r3, r7, #16
 800123e:	4619      	mov	r1, r3
 8001240:	480b      	ldr	r0, [pc, #44]	; (8001270 <HAL_I2C_MspInit+0x7c>)
 8001242:	f000 fc75 	bl	8001b30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001246:	4b09      	ldr	r3, [pc, #36]	; (800126c <HAL_I2C_MspInit+0x78>)
 8001248:	69db      	ldr	r3, [r3, #28]
 800124a:	4a08      	ldr	r2, [pc, #32]	; (800126c <HAL_I2C_MspInit+0x78>)
 800124c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001250:	61d3      	str	r3, [r2, #28]
 8001252:	4b06      	ldr	r3, [pc, #24]	; (800126c <HAL_I2C_MspInit+0x78>)
 8001254:	69db      	ldr	r3, [r3, #28]
 8001256:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800125a:	60bb      	str	r3, [r7, #8]
 800125c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800125e:	bf00      	nop
 8001260:	3720      	adds	r7, #32
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40005800 	.word	0x40005800
 800126c:	40021000 	.word	0x40021000
 8001270:	40010c00 	.word	0x40010c00

08001274 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b088      	sub	sp, #32
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127c:	f107 0310 	add.w	r3, r7, #16
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a16      	ldr	r2, [pc, #88]	; (80012e8 <HAL_TIM_Encoder_MspInit+0x74>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d124      	bne.n	80012de <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001294:	4b15      	ldr	r3, [pc, #84]	; (80012ec <HAL_TIM_Encoder_MspInit+0x78>)
 8001296:	699b      	ldr	r3, [r3, #24]
 8001298:	4a14      	ldr	r2, [pc, #80]	; (80012ec <HAL_TIM_Encoder_MspInit+0x78>)
 800129a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800129e:	6193      	str	r3, [r2, #24]
 80012a0:	4b12      	ldr	r3, [pc, #72]	; (80012ec <HAL_TIM_Encoder_MspInit+0x78>)
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012a8:	60fb      	str	r3, [r7, #12]
 80012aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ac:	4b0f      	ldr	r3, [pc, #60]	; (80012ec <HAL_TIM_Encoder_MspInit+0x78>)
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	4a0e      	ldr	r2, [pc, #56]	; (80012ec <HAL_TIM_Encoder_MspInit+0x78>)
 80012b2:	f043 0304 	orr.w	r3, r3, #4
 80012b6:	6193      	str	r3, [r2, #24]
 80012b8:	4b0c      	ldr	r3, [pc, #48]	; (80012ec <HAL_TIM_Encoder_MspInit+0x78>)
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	f003 0304 	and.w	r3, r3, #4
 80012c0:	60bb      	str	r3, [r7, #8]
 80012c2:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = MB2_Pin|MB1_Pin;
 80012c4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ca:	2300      	movs	r3, #0
 80012cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d2:	f107 0310 	add.w	r3, r7, #16
 80012d6:	4619      	mov	r1, r3
 80012d8:	4805      	ldr	r0, [pc, #20]	; (80012f0 <HAL_TIM_Encoder_MspInit+0x7c>)
 80012da:	f000 fc29 	bl	8001b30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80012de:	bf00      	nop
 80012e0:	3720      	adds	r7, #32
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40012c00 	.word	0x40012c00
 80012ec:	40021000 	.word	0x40021000
 80012f0:	40010800 	.word	0x40010800

080012f4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b088      	sub	sp, #32
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fc:	f107 0310 	add.w	r3, r7, #16
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]
  if(htim_pwm->Instance==TIM4)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a15      	ldr	r2, [pc, #84]	; (8001364 <HAL_TIM_PWM_MspInit+0x70>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d123      	bne.n	800135c <HAL_TIM_PWM_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001314:	4b14      	ldr	r3, [pc, #80]	; (8001368 <HAL_TIM_PWM_MspInit+0x74>)
 8001316:	69db      	ldr	r3, [r3, #28]
 8001318:	4a13      	ldr	r2, [pc, #76]	; (8001368 <HAL_TIM_PWM_MspInit+0x74>)
 800131a:	f043 0304 	orr.w	r3, r3, #4
 800131e:	61d3      	str	r3, [r2, #28]
 8001320:	4b11      	ldr	r3, [pc, #68]	; (8001368 <HAL_TIM_PWM_MspInit+0x74>)
 8001322:	69db      	ldr	r3, [r3, #28]
 8001324:	f003 0304 	and.w	r3, r3, #4
 8001328:	60fb      	str	r3, [r7, #12]
 800132a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800132c:	4b0e      	ldr	r3, [pc, #56]	; (8001368 <HAL_TIM_PWM_MspInit+0x74>)
 800132e:	699b      	ldr	r3, [r3, #24]
 8001330:	4a0d      	ldr	r2, [pc, #52]	; (8001368 <HAL_TIM_PWM_MspInit+0x74>)
 8001332:	f043 0308 	orr.w	r3, r3, #8
 8001336:	6193      	str	r3, [r2, #24]
 8001338:	4b0b      	ldr	r3, [pc, #44]	; (8001368 <HAL_TIM_PWM_MspInit+0x74>)
 800133a:	699b      	ldr	r3, [r3, #24]
 800133c:	f003 0308 	and.w	r3, r3, #8
 8001340:	60bb      	str	r3, [r7, #8]
 8001342:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = MA2_Pin|MA1_Pin;
 8001344:	23c0      	movs	r3, #192	; 0xc0
 8001346:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134c:	2300      	movs	r3, #0
 800134e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001350:	f107 0310 	add.w	r3, r7, #16
 8001354:	4619      	mov	r1, r3
 8001356:	4805      	ldr	r0, [pc, #20]	; (800136c <HAL_TIM_PWM_MspInit+0x78>)
 8001358:	f000 fbea 	bl	8001b30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800135c:	bf00      	nop
 800135e:	3720      	adds	r7, #32
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	40000800 	.word	0x40000800
 8001368:	40021000 	.word	0x40021000
 800136c:	40010c00 	.word	0x40010c00

08001370 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b088      	sub	sp, #32
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001378:	f107 0310 	add.w	r3, r7, #16
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]
 8001384:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a10      	ldr	r2, [pc, #64]	; (80013cc <HAL_TIM_MspPostInit+0x5c>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d118      	bne.n	80013c2 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001390:	4b0f      	ldr	r3, [pc, #60]	; (80013d0 <HAL_TIM_MspPostInit+0x60>)
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	4a0e      	ldr	r2, [pc, #56]	; (80013d0 <HAL_TIM_MspPostInit+0x60>)
 8001396:	f043 0308 	orr.w	r3, r3, #8
 800139a:	6193      	str	r3, [r2, #24]
 800139c:	4b0c      	ldr	r3, [pc, #48]	; (80013d0 <HAL_TIM_MspPostInit+0x60>)
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	f003 0308 	and.w	r3, r3, #8
 80013a4:	60fb      	str	r3, [r7, #12]
 80013a6:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 80013a8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ae:	2302      	movs	r3, #2
 80013b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b2:	2302      	movs	r3, #2
 80013b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b6:	f107 0310 	add.w	r3, r7, #16
 80013ba:	4619      	mov	r1, r3
 80013bc:	4805      	ldr	r0, [pc, #20]	; (80013d4 <HAL_TIM_MspPostInit+0x64>)
 80013be:	f000 fbb7 	bl	8001b30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80013c2:	bf00      	nop
 80013c4:	3720      	adds	r7, #32
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40000800 	.word	0x40000800
 80013d0:	40021000 	.word	0x40021000
 80013d4:	40010c00 	.word	0x40010c00

080013d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013dc:	e7fe      	b.n	80013dc <NMI_Handler+0x4>

080013de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013de:	b480      	push	{r7}
 80013e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013e2:	e7fe      	b.n	80013e2 <HardFault_Handler+0x4>

080013e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013e8:	e7fe      	b.n	80013e8 <MemManage_Handler+0x4>

080013ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ea:	b480      	push	{r7}
 80013ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ee:	e7fe      	b.n	80013ee <BusFault_Handler+0x4>

080013f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013f4:	e7fe      	b.n	80013f4 <UsageFault_Handler+0x4>

080013f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013fa:	bf00      	nop
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bc80      	pop	{r7}
 8001400:	4770      	bx	lr

08001402 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	46bd      	mov	sp, r7
 800140a:	bc80      	pop	{r7}
 800140c:	4770      	bx	lr

0800140e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800140e:	b480      	push	{r7}
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	46bd      	mov	sp, r7
 8001416:	bc80      	pop	{r7}
 8001418:	4770      	bx	lr

0800141a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800141e:	f000 f875 	bl	800150c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}

08001426 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001426:	b480      	push	{r7}
 8001428:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800142a:	bf00      	nop
 800142c:	46bd      	mov	sp, r7
 800142e:	bc80      	pop	{r7}
 8001430:	4770      	bx	lr
	...

08001434 <Reset_Handler>:
 8001434:	480c      	ldr	r0, [pc, #48]	; (8001468 <LoopFillZerobss+0x12>)
 8001436:	490d      	ldr	r1, [pc, #52]	; (800146c <LoopFillZerobss+0x16>)
 8001438:	4a0d      	ldr	r2, [pc, #52]	; (8001470 <LoopFillZerobss+0x1a>)
 800143a:	2300      	movs	r3, #0
 800143c:	e002      	b.n	8001444 <LoopCopyDataInit>

0800143e <CopyDataInit>:
 800143e:	58d4      	ldr	r4, [r2, r3]
 8001440:	50c4      	str	r4, [r0, r3]
 8001442:	3304      	adds	r3, #4

08001444 <LoopCopyDataInit>:
 8001444:	18c4      	adds	r4, r0, r3
 8001446:	428c      	cmp	r4, r1
 8001448:	d3f9      	bcc.n	800143e <CopyDataInit>
 800144a:	4a0a      	ldr	r2, [pc, #40]	; (8001474 <LoopFillZerobss+0x1e>)
 800144c:	4c0a      	ldr	r4, [pc, #40]	; (8001478 <LoopFillZerobss+0x22>)
 800144e:	2300      	movs	r3, #0
 8001450:	e001      	b.n	8001456 <LoopFillZerobss>

08001452 <FillZerobss>:
 8001452:	6013      	str	r3, [r2, #0]
 8001454:	3204      	adds	r2, #4

08001456 <LoopFillZerobss>:
 8001456:	42a2      	cmp	r2, r4
 8001458:	d3fb      	bcc.n	8001452 <FillZerobss>
 800145a:	f7ff ffe4 	bl	8001426 <SystemInit>
 800145e:	f002 f84f 	bl	8003500 <__libc_init_array>
 8001462:	f7ff fb09 	bl	8000a78 <main>
 8001466:	4770      	bx	lr
 8001468:	20000000 	.word	0x20000000
 800146c:	2000000c 	.word	0x2000000c
 8001470:	080035a0 	.word	0x080035a0
 8001474:	2000000c 	.word	0x2000000c
 8001478:	20000148 	.word	0x20000148

0800147c <ADC1_2_IRQHandler>:
 800147c:	e7fe      	b.n	800147c <ADC1_2_IRQHandler>
	...

08001480 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001484:	4b08      	ldr	r3, [pc, #32]	; (80014a8 <HAL_Init+0x28>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a07      	ldr	r2, [pc, #28]	; (80014a8 <HAL_Init+0x28>)
 800148a:	f043 0310 	orr.w	r3, r3, #16
 800148e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001490:	2003      	movs	r0, #3
 8001492:	f000 fb19 	bl	8001ac8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001496:	200f      	movs	r0, #15
 8001498:	f000 f808 	bl	80014ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800149c:	f7ff fe3c 	bl	8001118 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40022000 	.word	0x40022000

080014ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014b4:	4b12      	ldr	r3, [pc, #72]	; (8001500 <HAL_InitTick+0x54>)
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	4b12      	ldr	r3, [pc, #72]	; (8001504 <HAL_InitTick+0x58>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	4619      	mov	r1, r3
 80014be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80014c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ca:	4618      	mov	r0, r3
 80014cc:	f000 fb23 	bl	8001b16 <HAL_SYSTICK_Config>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e00e      	b.n	80014f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2b0f      	cmp	r3, #15
 80014de:	d80a      	bhi.n	80014f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014e0:	2200      	movs	r2, #0
 80014e2:	6879      	ldr	r1, [r7, #4]
 80014e4:	f04f 30ff 	mov.w	r0, #4294967295
 80014e8:	f000 faf9 	bl	8001ade <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014ec:	4a06      	ldr	r2, [pc, #24]	; (8001508 <HAL_InitTick+0x5c>)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014f2:	2300      	movs	r3, #0
 80014f4:	e000      	b.n	80014f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	20000000 	.word	0x20000000
 8001504:	20000008 	.word	0x20000008
 8001508:	20000004 	.word	0x20000004

0800150c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001510:	4b05      	ldr	r3, [pc, #20]	; (8001528 <HAL_IncTick+0x1c>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	461a      	mov	r2, r3
 8001516:	4b05      	ldr	r3, [pc, #20]	; (800152c <HAL_IncTick+0x20>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4413      	add	r3, r2
 800151c:	4a03      	ldr	r2, [pc, #12]	; (800152c <HAL_IncTick+0x20>)
 800151e:	6013      	str	r3, [r2, #0]
}
 8001520:	bf00      	nop
 8001522:	46bd      	mov	sp, r7
 8001524:	bc80      	pop	{r7}
 8001526:	4770      	bx	lr
 8001528:	20000008 	.word	0x20000008
 800152c:	20000144 	.word	0x20000144

08001530 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  return uwTick;
 8001534:	4b02      	ldr	r3, [pc, #8]	; (8001540 <HAL_GetTick+0x10>)
 8001536:	681b      	ldr	r3, [r3, #0]
}
 8001538:	4618      	mov	r0, r3
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr
 8001540:	20000144 	.word	0x20000144

08001544 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b086      	sub	sp, #24
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800154c:	2300      	movs	r3, #0
 800154e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001550:	2300      	movs	r3, #0
 8001552:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001554:	2300      	movs	r3, #0
 8001556:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001558:	2300      	movs	r3, #0
 800155a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d101      	bne.n	8001566 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e0be      	b.n	80016e4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001570:	2b00      	cmp	r3, #0
 8001572:	d109      	bne.n	8001588 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2200      	movs	r2, #0
 8001578:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f7ff fdfa 	bl	800117c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f000 f9ab 	bl	80018e4 <ADC_ConversionStop_Disable>
 800158e:	4603      	mov	r3, r0
 8001590:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001596:	f003 0310 	and.w	r3, r3, #16
 800159a:	2b00      	cmp	r3, #0
 800159c:	f040 8099 	bne.w	80016d2 <HAL_ADC_Init+0x18e>
 80015a0:	7dfb      	ldrb	r3, [r7, #23]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f040 8095 	bne.w	80016d2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ac:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80015b0:	f023 0302 	bic.w	r3, r3, #2
 80015b4:	f043 0202 	orr.w	r2, r3, #2
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80015c4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	7b1b      	ldrb	r3, [r3, #12]
 80015ca:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80015cc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80015ce:	68ba      	ldr	r2, [r7, #8]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015dc:	d003      	beq.n	80015e6 <HAL_ADC_Init+0xa2>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d102      	bne.n	80015ec <HAL_ADC_Init+0xa8>
 80015e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015ea:	e000      	b.n	80015ee <HAL_ADC_Init+0xaa>
 80015ec:	2300      	movs	r3, #0
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	7d1b      	ldrb	r3, [r3, #20]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d119      	bne.n	8001630 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	7b1b      	ldrb	r3, [r3, #12]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d109      	bne.n	8001618 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	699b      	ldr	r3, [r3, #24]
 8001608:	3b01      	subs	r3, #1
 800160a:	035a      	lsls	r2, r3, #13
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	4313      	orrs	r3, r2
 8001610:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001614:	613b      	str	r3, [r7, #16]
 8001616:	e00b      	b.n	8001630 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800161c:	f043 0220 	orr.w	r2, r3, #32
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001628:	f043 0201 	orr.w	r2, r3, #1
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	693a      	ldr	r2, [r7, #16]
 8001640:	430a      	orrs	r2, r1
 8001642:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	689a      	ldr	r2, [r3, #8]
 800164a:	4b28      	ldr	r3, [pc, #160]	; (80016ec <HAL_ADC_Init+0x1a8>)
 800164c:	4013      	ands	r3, r2
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	6812      	ldr	r2, [r2, #0]
 8001652:	68b9      	ldr	r1, [r7, #8]
 8001654:	430b      	orrs	r3, r1
 8001656:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001660:	d003      	beq.n	800166a <HAL_ADC_Init+0x126>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	2b01      	cmp	r3, #1
 8001668:	d104      	bne.n	8001674 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	691b      	ldr	r3, [r3, #16]
 800166e:	3b01      	subs	r3, #1
 8001670:	051b      	lsls	r3, r3, #20
 8001672:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800167a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	68fa      	ldr	r2, [r7, #12]
 8001684:	430a      	orrs	r2, r1
 8001686:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	689a      	ldr	r2, [r3, #8]
 800168e:	4b18      	ldr	r3, [pc, #96]	; (80016f0 <HAL_ADC_Init+0x1ac>)
 8001690:	4013      	ands	r3, r2
 8001692:	68ba      	ldr	r2, [r7, #8]
 8001694:	429a      	cmp	r2, r3
 8001696:	d10b      	bne.n	80016b0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2200      	movs	r2, #0
 800169c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a2:	f023 0303 	bic.w	r3, r3, #3
 80016a6:	f043 0201 	orr.w	r2, r3, #1
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80016ae:	e018      	b.n	80016e2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b4:	f023 0312 	bic.w	r3, r3, #18
 80016b8:	f043 0210 	orr.w	r2, r3, #16
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c4:	f043 0201 	orr.w	r2, r3, #1
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80016d0:	e007      	b.n	80016e2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d6:	f043 0210 	orr.w	r2, r3, #16
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80016e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3718      	adds	r7, #24
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	ffe1f7fd 	.word	0xffe1f7fd
 80016f0:	ff1f0efe 	.word	0xff1f0efe

080016f4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016fe:	2300      	movs	r3, #0
 8001700:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001702:	2300      	movs	r3, #0
 8001704:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800170c:	2b01      	cmp	r3, #1
 800170e:	d101      	bne.n	8001714 <HAL_ADC_ConfigChannel+0x20>
 8001710:	2302      	movs	r3, #2
 8001712:	e0dc      	b.n	80018ce <HAL_ADC_ConfigChannel+0x1da>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2201      	movs	r2, #1
 8001718:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	2b06      	cmp	r3, #6
 8001722:	d81c      	bhi.n	800175e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685a      	ldr	r2, [r3, #4]
 800172e:	4613      	mov	r3, r2
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	4413      	add	r3, r2
 8001734:	3b05      	subs	r3, #5
 8001736:	221f      	movs	r2, #31
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	43db      	mvns	r3, r3
 800173e:	4019      	ands	r1, r3
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	6818      	ldr	r0, [r3, #0]
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685a      	ldr	r2, [r3, #4]
 8001748:	4613      	mov	r3, r2
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	4413      	add	r3, r2
 800174e:	3b05      	subs	r3, #5
 8001750:	fa00 f203 	lsl.w	r2, r0, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	430a      	orrs	r2, r1
 800175a:	635a      	str	r2, [r3, #52]	; 0x34
 800175c:	e03c      	b.n	80017d8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	2b0c      	cmp	r3, #12
 8001764:	d81c      	bhi.n	80017a0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685a      	ldr	r2, [r3, #4]
 8001770:	4613      	mov	r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	4413      	add	r3, r2
 8001776:	3b23      	subs	r3, #35	; 0x23
 8001778:	221f      	movs	r2, #31
 800177a:	fa02 f303 	lsl.w	r3, r2, r3
 800177e:	43db      	mvns	r3, r3
 8001780:	4019      	ands	r1, r3
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	6818      	ldr	r0, [r3, #0]
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685a      	ldr	r2, [r3, #4]
 800178a:	4613      	mov	r3, r2
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	4413      	add	r3, r2
 8001790:	3b23      	subs	r3, #35	; 0x23
 8001792:	fa00 f203 	lsl.w	r2, r0, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	430a      	orrs	r2, r1
 800179c:	631a      	str	r2, [r3, #48]	; 0x30
 800179e:	e01b      	b.n	80017d8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685a      	ldr	r2, [r3, #4]
 80017aa:	4613      	mov	r3, r2
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	4413      	add	r3, r2
 80017b0:	3b41      	subs	r3, #65	; 0x41
 80017b2:	221f      	movs	r2, #31
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	43db      	mvns	r3, r3
 80017ba:	4019      	ands	r1, r3
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	6818      	ldr	r0, [r3, #0]
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685a      	ldr	r2, [r3, #4]
 80017c4:	4613      	mov	r3, r2
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	4413      	add	r3, r2
 80017ca:	3b41      	subs	r3, #65	; 0x41
 80017cc:	fa00 f203 	lsl.w	r2, r0, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	430a      	orrs	r2, r1
 80017d6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2b09      	cmp	r3, #9
 80017de:	d91c      	bls.n	800181a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	68d9      	ldr	r1, [r3, #12]
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	4613      	mov	r3, r2
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	4413      	add	r3, r2
 80017f0:	3b1e      	subs	r3, #30
 80017f2:	2207      	movs	r2, #7
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	43db      	mvns	r3, r3
 80017fa:	4019      	ands	r1, r3
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	6898      	ldr	r0, [r3, #8]
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	4613      	mov	r3, r2
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	4413      	add	r3, r2
 800180a:	3b1e      	subs	r3, #30
 800180c:	fa00 f203 	lsl.w	r2, r0, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	430a      	orrs	r2, r1
 8001816:	60da      	str	r2, [r3, #12]
 8001818:	e019      	b.n	800184e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	6919      	ldr	r1, [r3, #16]
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	4613      	mov	r3, r2
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	4413      	add	r3, r2
 800182a:	2207      	movs	r2, #7
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	43db      	mvns	r3, r3
 8001832:	4019      	ands	r1, r3
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	6898      	ldr	r0, [r3, #8]
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	4613      	mov	r3, r2
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	4413      	add	r3, r2
 8001842:	fa00 f203 	lsl.w	r2, r0, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	430a      	orrs	r2, r1
 800184c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2b10      	cmp	r3, #16
 8001854:	d003      	beq.n	800185e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800185a:	2b11      	cmp	r3, #17
 800185c:	d132      	bne.n	80018c4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a1d      	ldr	r2, [pc, #116]	; (80018d8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d125      	bne.n	80018b4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d126      	bne.n	80018c4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	689a      	ldr	r2, [r3, #8]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001884:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2b10      	cmp	r3, #16
 800188c:	d11a      	bne.n	80018c4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800188e:	4b13      	ldr	r3, [pc, #76]	; (80018dc <HAL_ADC_ConfigChannel+0x1e8>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a13      	ldr	r2, [pc, #76]	; (80018e0 <HAL_ADC_ConfigChannel+0x1ec>)
 8001894:	fba2 2303 	umull	r2, r3, r2, r3
 8001898:	0c9a      	lsrs	r2, r3, #18
 800189a:	4613      	mov	r3, r2
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	4413      	add	r3, r2
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018a4:	e002      	b.n	80018ac <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	3b01      	subs	r3, #1
 80018aa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d1f9      	bne.n	80018a6 <HAL_ADC_ConfigChannel+0x1b2>
 80018b2:	e007      	b.n	80018c4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b8:	f043 0220 	orr.w	r2, r3, #32
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2200      	movs	r2, #0
 80018c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80018cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3714      	adds	r7, #20
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc80      	pop	{r7}
 80018d6:	4770      	bx	lr
 80018d8:	40012400 	.word	0x40012400
 80018dc:	20000000 	.word	0x20000000
 80018e0:	431bde83 	.word	0x431bde83

080018e4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80018ec:	2300      	movs	r3, #0
 80018ee:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d12e      	bne.n	800195c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	689a      	ldr	r2, [r3, #8]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f022 0201 	bic.w	r2, r2, #1
 800190c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800190e:	f7ff fe0f 	bl	8001530 <HAL_GetTick>
 8001912:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001914:	e01b      	b.n	800194e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001916:	f7ff fe0b 	bl	8001530 <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	2b02      	cmp	r3, #2
 8001922:	d914      	bls.n	800194e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	2b01      	cmp	r3, #1
 8001930:	d10d      	bne.n	800194e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001936:	f043 0210 	orr.w	r2, r3, #16
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001942:	f043 0201 	orr.w	r2, r3, #1
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e007      	b.n	800195e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	f003 0301 	and.w	r3, r3, #1
 8001958:	2b01      	cmp	r3, #1
 800195a:	d0dc      	beq.n	8001916 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3710      	adds	r7, #16
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
	...

08001968 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001968:	b480      	push	{r7}
 800196a:	b085      	sub	sp, #20
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001978:	4b0c      	ldr	r3, [pc, #48]	; (80019ac <__NVIC_SetPriorityGrouping+0x44>)
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800197e:	68ba      	ldr	r2, [r7, #8]
 8001980:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001984:	4013      	ands	r3, r2
 8001986:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001990:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001994:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001998:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800199a:	4a04      	ldr	r2, [pc, #16]	; (80019ac <__NVIC_SetPriorityGrouping+0x44>)
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	60d3      	str	r3, [r2, #12]
}
 80019a0:	bf00      	nop
 80019a2:	3714      	adds	r7, #20
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bc80      	pop	{r7}
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	e000ed00 	.word	0xe000ed00

080019b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019b4:	4b04      	ldr	r3, [pc, #16]	; (80019c8 <__NVIC_GetPriorityGrouping+0x18>)
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	0a1b      	lsrs	r3, r3, #8
 80019ba:	f003 0307 	and.w	r3, r3, #7
}
 80019be:	4618      	mov	r0, r3
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bc80      	pop	{r7}
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	e000ed00 	.word	0xe000ed00

080019cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	6039      	str	r1, [r7, #0]
 80019d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	db0a      	blt.n	80019f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	b2da      	uxtb	r2, r3
 80019e4:	490c      	ldr	r1, [pc, #48]	; (8001a18 <__NVIC_SetPriority+0x4c>)
 80019e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ea:	0112      	lsls	r2, r2, #4
 80019ec:	b2d2      	uxtb	r2, r2
 80019ee:	440b      	add	r3, r1
 80019f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019f4:	e00a      	b.n	8001a0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	b2da      	uxtb	r2, r3
 80019fa:	4908      	ldr	r1, [pc, #32]	; (8001a1c <__NVIC_SetPriority+0x50>)
 80019fc:	79fb      	ldrb	r3, [r7, #7]
 80019fe:	f003 030f 	and.w	r3, r3, #15
 8001a02:	3b04      	subs	r3, #4
 8001a04:	0112      	lsls	r2, r2, #4
 8001a06:	b2d2      	uxtb	r2, r2
 8001a08:	440b      	add	r3, r1
 8001a0a:	761a      	strb	r2, [r3, #24]
}
 8001a0c:	bf00      	nop
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bc80      	pop	{r7}
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	e000e100 	.word	0xe000e100
 8001a1c:	e000ed00 	.word	0xe000ed00

08001a20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b089      	sub	sp, #36	; 0x24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f003 0307 	and.w	r3, r3, #7
 8001a32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	f1c3 0307 	rsb	r3, r3, #7
 8001a3a:	2b04      	cmp	r3, #4
 8001a3c:	bf28      	it	cs
 8001a3e:	2304      	movcs	r3, #4
 8001a40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	3304      	adds	r3, #4
 8001a46:	2b06      	cmp	r3, #6
 8001a48:	d902      	bls.n	8001a50 <NVIC_EncodePriority+0x30>
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	3b03      	subs	r3, #3
 8001a4e:	e000      	b.n	8001a52 <NVIC_EncodePriority+0x32>
 8001a50:	2300      	movs	r3, #0
 8001a52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a54:	f04f 32ff 	mov.w	r2, #4294967295
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5e:	43da      	mvns	r2, r3
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	401a      	ands	r2, r3
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a68:	f04f 31ff 	mov.w	r1, #4294967295
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a72:	43d9      	mvns	r1, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a78:	4313      	orrs	r3, r2
         );
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3724      	adds	r7, #36	; 0x24
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bc80      	pop	{r7}
 8001a82:	4770      	bx	lr

08001a84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a94:	d301      	bcc.n	8001a9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a96:	2301      	movs	r3, #1
 8001a98:	e00f      	b.n	8001aba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a9a:	4a0a      	ldr	r2, [pc, #40]	; (8001ac4 <SysTick_Config+0x40>)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aa2:	210f      	movs	r1, #15
 8001aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa8:	f7ff ff90 	bl	80019cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001aac:	4b05      	ldr	r3, [pc, #20]	; (8001ac4 <SysTick_Config+0x40>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ab2:	4b04      	ldr	r3, [pc, #16]	; (8001ac4 <SysTick_Config+0x40>)
 8001ab4:	2207      	movs	r2, #7
 8001ab6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	e000e010 	.word	0xe000e010

08001ac8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f7ff ff49 	bl	8001968 <__NVIC_SetPriorityGrouping>
}
 8001ad6:	bf00      	nop
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b086      	sub	sp, #24
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	60b9      	str	r1, [r7, #8]
 8001ae8:	607a      	str	r2, [r7, #4]
 8001aea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001aec:	2300      	movs	r3, #0
 8001aee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001af0:	f7ff ff5e 	bl	80019b0 <__NVIC_GetPriorityGrouping>
 8001af4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	68b9      	ldr	r1, [r7, #8]
 8001afa:	6978      	ldr	r0, [r7, #20]
 8001afc:	f7ff ff90 	bl	8001a20 <NVIC_EncodePriority>
 8001b00:	4602      	mov	r2, r0
 8001b02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b06:	4611      	mov	r1, r2
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff ff5f 	bl	80019cc <__NVIC_SetPriority>
}
 8001b0e:	bf00      	nop
 8001b10:	3718      	adds	r7, #24
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b082      	sub	sp, #8
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f7ff ffb0 	bl	8001a84 <SysTick_Config>
 8001b24:	4603      	mov	r3, r0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
	...

08001b30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b08b      	sub	sp, #44	; 0x2c
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b42:	e169      	b.n	8001e18 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b44:	2201      	movs	r2, #1
 8001b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	69fa      	ldr	r2, [r7, #28]
 8001b54:	4013      	ands	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	f040 8158 	bne.w	8001e12 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	4a9a      	ldr	r2, [pc, #616]	; (8001dd0 <HAL_GPIO_Init+0x2a0>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d05e      	beq.n	8001c2a <HAL_GPIO_Init+0xfa>
 8001b6c:	4a98      	ldr	r2, [pc, #608]	; (8001dd0 <HAL_GPIO_Init+0x2a0>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d875      	bhi.n	8001c5e <HAL_GPIO_Init+0x12e>
 8001b72:	4a98      	ldr	r2, [pc, #608]	; (8001dd4 <HAL_GPIO_Init+0x2a4>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d058      	beq.n	8001c2a <HAL_GPIO_Init+0xfa>
 8001b78:	4a96      	ldr	r2, [pc, #600]	; (8001dd4 <HAL_GPIO_Init+0x2a4>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d86f      	bhi.n	8001c5e <HAL_GPIO_Init+0x12e>
 8001b7e:	4a96      	ldr	r2, [pc, #600]	; (8001dd8 <HAL_GPIO_Init+0x2a8>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d052      	beq.n	8001c2a <HAL_GPIO_Init+0xfa>
 8001b84:	4a94      	ldr	r2, [pc, #592]	; (8001dd8 <HAL_GPIO_Init+0x2a8>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d869      	bhi.n	8001c5e <HAL_GPIO_Init+0x12e>
 8001b8a:	4a94      	ldr	r2, [pc, #592]	; (8001ddc <HAL_GPIO_Init+0x2ac>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d04c      	beq.n	8001c2a <HAL_GPIO_Init+0xfa>
 8001b90:	4a92      	ldr	r2, [pc, #584]	; (8001ddc <HAL_GPIO_Init+0x2ac>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d863      	bhi.n	8001c5e <HAL_GPIO_Init+0x12e>
 8001b96:	4a92      	ldr	r2, [pc, #584]	; (8001de0 <HAL_GPIO_Init+0x2b0>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d046      	beq.n	8001c2a <HAL_GPIO_Init+0xfa>
 8001b9c:	4a90      	ldr	r2, [pc, #576]	; (8001de0 <HAL_GPIO_Init+0x2b0>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d85d      	bhi.n	8001c5e <HAL_GPIO_Init+0x12e>
 8001ba2:	2b12      	cmp	r3, #18
 8001ba4:	d82a      	bhi.n	8001bfc <HAL_GPIO_Init+0xcc>
 8001ba6:	2b12      	cmp	r3, #18
 8001ba8:	d859      	bhi.n	8001c5e <HAL_GPIO_Init+0x12e>
 8001baa:	a201      	add	r2, pc, #4	; (adr r2, 8001bb0 <HAL_GPIO_Init+0x80>)
 8001bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bb0:	08001c2b 	.word	0x08001c2b
 8001bb4:	08001c05 	.word	0x08001c05
 8001bb8:	08001c17 	.word	0x08001c17
 8001bbc:	08001c59 	.word	0x08001c59
 8001bc0:	08001c5f 	.word	0x08001c5f
 8001bc4:	08001c5f 	.word	0x08001c5f
 8001bc8:	08001c5f 	.word	0x08001c5f
 8001bcc:	08001c5f 	.word	0x08001c5f
 8001bd0:	08001c5f 	.word	0x08001c5f
 8001bd4:	08001c5f 	.word	0x08001c5f
 8001bd8:	08001c5f 	.word	0x08001c5f
 8001bdc:	08001c5f 	.word	0x08001c5f
 8001be0:	08001c5f 	.word	0x08001c5f
 8001be4:	08001c5f 	.word	0x08001c5f
 8001be8:	08001c5f 	.word	0x08001c5f
 8001bec:	08001c5f 	.word	0x08001c5f
 8001bf0:	08001c5f 	.word	0x08001c5f
 8001bf4:	08001c0d 	.word	0x08001c0d
 8001bf8:	08001c21 	.word	0x08001c21
 8001bfc:	4a79      	ldr	r2, [pc, #484]	; (8001de4 <HAL_GPIO_Init+0x2b4>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d013      	beq.n	8001c2a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c02:	e02c      	b.n	8001c5e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	623b      	str	r3, [r7, #32]
          break;
 8001c0a:	e029      	b.n	8001c60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	3304      	adds	r3, #4
 8001c12:	623b      	str	r3, [r7, #32]
          break;
 8001c14:	e024      	b.n	8001c60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	3308      	adds	r3, #8
 8001c1c:	623b      	str	r3, [r7, #32]
          break;
 8001c1e:	e01f      	b.n	8001c60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	330c      	adds	r3, #12
 8001c26:	623b      	str	r3, [r7, #32]
          break;
 8001c28:	e01a      	b.n	8001c60 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d102      	bne.n	8001c38 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c32:	2304      	movs	r3, #4
 8001c34:	623b      	str	r3, [r7, #32]
          break;
 8001c36:	e013      	b.n	8001c60 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d105      	bne.n	8001c4c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c40:	2308      	movs	r3, #8
 8001c42:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	69fa      	ldr	r2, [r7, #28]
 8001c48:	611a      	str	r2, [r3, #16]
          break;
 8001c4a:	e009      	b.n	8001c60 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c4c:	2308      	movs	r3, #8
 8001c4e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	69fa      	ldr	r2, [r7, #28]
 8001c54:	615a      	str	r2, [r3, #20]
          break;
 8001c56:	e003      	b.n	8001c60 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	623b      	str	r3, [r7, #32]
          break;
 8001c5c:	e000      	b.n	8001c60 <HAL_GPIO_Init+0x130>
          break;
 8001c5e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	2bff      	cmp	r3, #255	; 0xff
 8001c64:	d801      	bhi.n	8001c6a <HAL_GPIO_Init+0x13a>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	e001      	b.n	8001c6e <HAL_GPIO_Init+0x13e>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	3304      	adds	r3, #4
 8001c6e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	2bff      	cmp	r3, #255	; 0xff
 8001c74:	d802      	bhi.n	8001c7c <HAL_GPIO_Init+0x14c>
 8001c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	e002      	b.n	8001c82 <HAL_GPIO_Init+0x152>
 8001c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7e:	3b08      	subs	r3, #8
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	210f      	movs	r1, #15
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c90:	43db      	mvns	r3, r3
 8001c92:	401a      	ands	r2, r3
 8001c94:	6a39      	ldr	r1, [r7, #32]
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	fa01 f303 	lsl.w	r3, r1, r3
 8001c9c:	431a      	orrs	r2, r3
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	f000 80b1 	beq.w	8001e12 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001cb0:	4b4d      	ldr	r3, [pc, #308]	; (8001de8 <HAL_GPIO_Init+0x2b8>)
 8001cb2:	699b      	ldr	r3, [r3, #24]
 8001cb4:	4a4c      	ldr	r2, [pc, #304]	; (8001de8 <HAL_GPIO_Init+0x2b8>)
 8001cb6:	f043 0301 	orr.w	r3, r3, #1
 8001cba:	6193      	str	r3, [r2, #24]
 8001cbc:	4b4a      	ldr	r3, [pc, #296]	; (8001de8 <HAL_GPIO_Init+0x2b8>)
 8001cbe:	699b      	ldr	r3, [r3, #24]
 8001cc0:	f003 0301 	and.w	r3, r3, #1
 8001cc4:	60bb      	str	r3, [r7, #8]
 8001cc6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001cc8:	4a48      	ldr	r2, [pc, #288]	; (8001dec <HAL_GPIO_Init+0x2bc>)
 8001cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ccc:	089b      	lsrs	r3, r3, #2
 8001cce:	3302      	adds	r3, #2
 8001cd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cd4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd8:	f003 0303 	and.w	r3, r3, #3
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	220f      	movs	r2, #15
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	68fa      	ldr	r2, [r7, #12]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4a40      	ldr	r2, [pc, #256]	; (8001df0 <HAL_GPIO_Init+0x2c0>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d013      	beq.n	8001d1c <HAL_GPIO_Init+0x1ec>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	4a3f      	ldr	r2, [pc, #252]	; (8001df4 <HAL_GPIO_Init+0x2c4>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d00d      	beq.n	8001d18 <HAL_GPIO_Init+0x1e8>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	4a3e      	ldr	r2, [pc, #248]	; (8001df8 <HAL_GPIO_Init+0x2c8>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d007      	beq.n	8001d14 <HAL_GPIO_Init+0x1e4>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	4a3d      	ldr	r2, [pc, #244]	; (8001dfc <HAL_GPIO_Init+0x2cc>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d101      	bne.n	8001d10 <HAL_GPIO_Init+0x1e0>
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e006      	b.n	8001d1e <HAL_GPIO_Init+0x1ee>
 8001d10:	2304      	movs	r3, #4
 8001d12:	e004      	b.n	8001d1e <HAL_GPIO_Init+0x1ee>
 8001d14:	2302      	movs	r3, #2
 8001d16:	e002      	b.n	8001d1e <HAL_GPIO_Init+0x1ee>
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e000      	b.n	8001d1e <HAL_GPIO_Init+0x1ee>
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d20:	f002 0203 	and.w	r2, r2, #3
 8001d24:	0092      	lsls	r2, r2, #2
 8001d26:	4093      	lsls	r3, r2
 8001d28:	68fa      	ldr	r2, [r7, #12]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d2e:	492f      	ldr	r1, [pc, #188]	; (8001dec <HAL_GPIO_Init+0x2bc>)
 8001d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d32:	089b      	lsrs	r3, r3, #2
 8001d34:	3302      	adds	r3, #2
 8001d36:	68fa      	ldr	r2, [r7, #12]
 8001d38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d006      	beq.n	8001d56 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d48:	4b2d      	ldr	r3, [pc, #180]	; (8001e00 <HAL_GPIO_Init+0x2d0>)
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	492c      	ldr	r1, [pc, #176]	; (8001e00 <HAL_GPIO_Init+0x2d0>)
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	600b      	str	r3, [r1, #0]
 8001d54:	e006      	b.n	8001d64 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d56:	4b2a      	ldr	r3, [pc, #168]	; (8001e00 <HAL_GPIO_Init+0x2d0>)
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	4928      	ldr	r1, [pc, #160]	; (8001e00 <HAL_GPIO_Init+0x2d0>)
 8001d60:	4013      	ands	r3, r2
 8001d62:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d006      	beq.n	8001d7e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d70:	4b23      	ldr	r3, [pc, #140]	; (8001e00 <HAL_GPIO_Init+0x2d0>)
 8001d72:	685a      	ldr	r2, [r3, #4]
 8001d74:	4922      	ldr	r1, [pc, #136]	; (8001e00 <HAL_GPIO_Init+0x2d0>)
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	604b      	str	r3, [r1, #4]
 8001d7c:	e006      	b.n	8001d8c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d7e:	4b20      	ldr	r3, [pc, #128]	; (8001e00 <HAL_GPIO_Init+0x2d0>)
 8001d80:	685a      	ldr	r2, [r3, #4]
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	43db      	mvns	r3, r3
 8001d86:	491e      	ldr	r1, [pc, #120]	; (8001e00 <HAL_GPIO_Init+0x2d0>)
 8001d88:	4013      	ands	r3, r2
 8001d8a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d006      	beq.n	8001da6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d98:	4b19      	ldr	r3, [pc, #100]	; (8001e00 <HAL_GPIO_Init+0x2d0>)
 8001d9a:	689a      	ldr	r2, [r3, #8]
 8001d9c:	4918      	ldr	r1, [pc, #96]	; (8001e00 <HAL_GPIO_Init+0x2d0>)
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	608b      	str	r3, [r1, #8]
 8001da4:	e006      	b.n	8001db4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001da6:	4b16      	ldr	r3, [pc, #88]	; (8001e00 <HAL_GPIO_Init+0x2d0>)
 8001da8:	689a      	ldr	r2, [r3, #8]
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	43db      	mvns	r3, r3
 8001dae:	4914      	ldr	r1, [pc, #80]	; (8001e00 <HAL_GPIO_Init+0x2d0>)
 8001db0:	4013      	ands	r3, r2
 8001db2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d021      	beq.n	8001e04 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001dc0:	4b0f      	ldr	r3, [pc, #60]	; (8001e00 <HAL_GPIO_Init+0x2d0>)
 8001dc2:	68da      	ldr	r2, [r3, #12]
 8001dc4:	490e      	ldr	r1, [pc, #56]	; (8001e00 <HAL_GPIO_Init+0x2d0>)
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	60cb      	str	r3, [r1, #12]
 8001dcc:	e021      	b.n	8001e12 <HAL_GPIO_Init+0x2e2>
 8001dce:	bf00      	nop
 8001dd0:	10320000 	.word	0x10320000
 8001dd4:	10310000 	.word	0x10310000
 8001dd8:	10220000 	.word	0x10220000
 8001ddc:	10210000 	.word	0x10210000
 8001de0:	10120000 	.word	0x10120000
 8001de4:	10110000 	.word	0x10110000
 8001de8:	40021000 	.word	0x40021000
 8001dec:	40010000 	.word	0x40010000
 8001df0:	40010800 	.word	0x40010800
 8001df4:	40010c00 	.word	0x40010c00
 8001df8:	40011000 	.word	0x40011000
 8001dfc:	40011400 	.word	0x40011400
 8001e00:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e04:	4b0b      	ldr	r3, [pc, #44]	; (8001e34 <HAL_GPIO_Init+0x304>)
 8001e06:	68da      	ldr	r2, [r3, #12]
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	43db      	mvns	r3, r3
 8001e0c:	4909      	ldr	r1, [pc, #36]	; (8001e34 <HAL_GPIO_Init+0x304>)
 8001e0e:	4013      	ands	r3, r2
 8001e10:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e14:	3301      	adds	r3, #1
 8001e16:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	f47f ae8e 	bne.w	8001b44 <HAL_GPIO_Init+0x14>
  }
}
 8001e28:	bf00      	nop
 8001e2a:	bf00      	nop
 8001e2c:	372c      	adds	r7, #44	; 0x2c
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bc80      	pop	{r7}
 8001e32:	4770      	bx	lr
 8001e34:	40010400 	.word	0x40010400

08001e38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	460b      	mov	r3, r1
 8001e42:	807b      	strh	r3, [r7, #2]
 8001e44:	4613      	mov	r3, r2
 8001e46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e48:	787b      	ldrb	r3, [r7, #1]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d003      	beq.n	8001e56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e4e:	887a      	ldrh	r2, [r7, #2]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e54:	e003      	b.n	8001e5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e56:	887b      	ldrh	r3, [r7, #2]
 8001e58:	041a      	lsls	r2, r3, #16
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	611a      	str	r2, [r3, #16]
}
 8001e5e:	bf00      	nop
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bc80      	pop	{r7}
 8001e66:	4770      	bx	lr

08001e68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d101      	bne.n	8001e7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e12b      	b.n	80020d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d106      	bne.n	8001e94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f7ff f9b0 	bl	80011f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2224      	movs	r2, #36	; 0x24
 8001e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f022 0201 	bic.w	r2, r2, #1
 8001eaa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001eba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001eca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ecc:	f000 fce4 	bl	8002898 <HAL_RCC_GetPCLK1Freq>
 8001ed0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	4a81      	ldr	r2, [pc, #516]	; (80020dc <HAL_I2C_Init+0x274>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d807      	bhi.n	8001eec <HAL_I2C_Init+0x84>
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	4a80      	ldr	r2, [pc, #512]	; (80020e0 <HAL_I2C_Init+0x278>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	bf94      	ite	ls
 8001ee4:	2301      	movls	r3, #1
 8001ee6:	2300      	movhi	r3, #0
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	e006      	b.n	8001efa <HAL_I2C_Init+0x92>
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	4a7d      	ldr	r2, [pc, #500]	; (80020e4 <HAL_I2C_Init+0x27c>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	bf94      	ite	ls
 8001ef4:	2301      	movls	r3, #1
 8001ef6:	2300      	movhi	r3, #0
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e0e7      	b.n	80020d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	4a78      	ldr	r2, [pc, #480]	; (80020e8 <HAL_I2C_Init+0x280>)
 8001f06:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0a:	0c9b      	lsrs	r3, r3, #18
 8001f0c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	68ba      	ldr	r2, [r7, #8]
 8001f1e:	430a      	orrs	r2, r1
 8001f20:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	6a1b      	ldr	r3, [r3, #32]
 8001f28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	4a6a      	ldr	r2, [pc, #424]	; (80020dc <HAL_I2C_Init+0x274>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d802      	bhi.n	8001f3c <HAL_I2C_Init+0xd4>
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	3301      	adds	r3, #1
 8001f3a:	e009      	b.n	8001f50 <HAL_I2C_Init+0xe8>
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001f42:	fb02 f303 	mul.w	r3, r2, r3
 8001f46:	4a69      	ldr	r2, [pc, #420]	; (80020ec <HAL_I2C_Init+0x284>)
 8001f48:	fba2 2303 	umull	r2, r3, r2, r3
 8001f4c:	099b      	lsrs	r3, r3, #6
 8001f4e:	3301      	adds	r3, #1
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	6812      	ldr	r2, [r2, #0]
 8001f54:	430b      	orrs	r3, r1
 8001f56:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	69db      	ldr	r3, [r3, #28]
 8001f5e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001f62:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	495c      	ldr	r1, [pc, #368]	; (80020dc <HAL_I2C_Init+0x274>)
 8001f6c:	428b      	cmp	r3, r1
 8001f6e:	d819      	bhi.n	8001fa4 <HAL_I2C_Init+0x13c>
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	1e59      	subs	r1, r3, #1
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f7e:	1c59      	adds	r1, r3, #1
 8001f80:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001f84:	400b      	ands	r3, r1
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d00a      	beq.n	8001fa0 <HAL_I2C_Init+0x138>
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	1e59      	subs	r1, r3, #1
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f98:	3301      	adds	r3, #1
 8001f9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f9e:	e051      	b.n	8002044 <HAL_I2C_Init+0x1dc>
 8001fa0:	2304      	movs	r3, #4
 8001fa2:	e04f      	b.n	8002044 <HAL_I2C_Init+0x1dc>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d111      	bne.n	8001fd0 <HAL_I2C_Init+0x168>
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	1e58      	subs	r0, r3, #1
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6859      	ldr	r1, [r3, #4]
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	440b      	add	r3, r1
 8001fba:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	bf0c      	ite	eq
 8001fc8:	2301      	moveq	r3, #1
 8001fca:	2300      	movne	r3, #0
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	e012      	b.n	8001ff6 <HAL_I2C_Init+0x18e>
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	1e58      	subs	r0, r3, #1
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6859      	ldr	r1, [r3, #4]
 8001fd8:	460b      	mov	r3, r1
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	440b      	add	r3, r1
 8001fde:	0099      	lsls	r1, r3, #2
 8001fe0:	440b      	add	r3, r1
 8001fe2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	bf0c      	ite	eq
 8001ff0:	2301      	moveq	r3, #1
 8001ff2:	2300      	movne	r3, #0
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <HAL_I2C_Init+0x196>
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e022      	b.n	8002044 <HAL_I2C_Init+0x1dc>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d10e      	bne.n	8002024 <HAL_I2C_Init+0x1bc>
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	1e58      	subs	r0, r3, #1
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6859      	ldr	r1, [r3, #4]
 800200e:	460b      	mov	r3, r1
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	440b      	add	r3, r1
 8002014:	fbb0 f3f3 	udiv	r3, r0, r3
 8002018:	3301      	adds	r3, #1
 800201a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800201e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002022:	e00f      	b.n	8002044 <HAL_I2C_Init+0x1dc>
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	1e58      	subs	r0, r3, #1
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6859      	ldr	r1, [r3, #4]
 800202c:	460b      	mov	r3, r1
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	440b      	add	r3, r1
 8002032:	0099      	lsls	r1, r3, #2
 8002034:	440b      	add	r3, r1
 8002036:	fbb0 f3f3 	udiv	r3, r0, r3
 800203a:	3301      	adds	r3, #1
 800203c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002040:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002044:	6879      	ldr	r1, [r7, #4]
 8002046:	6809      	ldr	r1, [r1, #0]
 8002048:	4313      	orrs	r3, r2
 800204a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	69da      	ldr	r2, [r3, #28]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a1b      	ldr	r3, [r3, #32]
 800205e:	431a      	orrs	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	430a      	orrs	r2, r1
 8002066:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002072:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	6911      	ldr	r1, [r2, #16]
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	68d2      	ldr	r2, [r2, #12]
 800207e:	4311      	orrs	r1, r2
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	6812      	ldr	r2, [r2, #0]
 8002084:	430b      	orrs	r3, r1
 8002086:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	695a      	ldr	r2, [r3, #20]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	699b      	ldr	r3, [r3, #24]
 800209a:	431a      	orrs	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	430a      	orrs	r2, r1
 80020a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f042 0201 	orr.w	r2, r2, #1
 80020b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2220      	movs	r2, #32
 80020be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3710      	adds	r7, #16
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	000186a0 	.word	0x000186a0
 80020e0:	001e847f 	.word	0x001e847f
 80020e4:	003d08ff 	.word	0x003d08ff
 80020e8:	431bde83 	.word	0x431bde83
 80020ec:	10624dd3 	.word	0x10624dd3

080020f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b086      	sub	sp, #24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d101      	bne.n	8002102 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e272      	b.n	80025e8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	2b00      	cmp	r3, #0
 800210c:	f000 8087 	beq.w	800221e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002110:	4b92      	ldr	r3, [pc, #584]	; (800235c <HAL_RCC_OscConfig+0x26c>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f003 030c 	and.w	r3, r3, #12
 8002118:	2b04      	cmp	r3, #4
 800211a:	d00c      	beq.n	8002136 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800211c:	4b8f      	ldr	r3, [pc, #572]	; (800235c <HAL_RCC_OscConfig+0x26c>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f003 030c 	and.w	r3, r3, #12
 8002124:	2b08      	cmp	r3, #8
 8002126:	d112      	bne.n	800214e <HAL_RCC_OscConfig+0x5e>
 8002128:	4b8c      	ldr	r3, [pc, #560]	; (800235c <HAL_RCC_OscConfig+0x26c>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002134:	d10b      	bne.n	800214e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002136:	4b89      	ldr	r3, [pc, #548]	; (800235c <HAL_RCC_OscConfig+0x26c>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d06c      	beq.n	800221c <HAL_RCC_OscConfig+0x12c>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d168      	bne.n	800221c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e24c      	b.n	80025e8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002156:	d106      	bne.n	8002166 <HAL_RCC_OscConfig+0x76>
 8002158:	4b80      	ldr	r3, [pc, #512]	; (800235c <HAL_RCC_OscConfig+0x26c>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a7f      	ldr	r2, [pc, #508]	; (800235c <HAL_RCC_OscConfig+0x26c>)
 800215e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002162:	6013      	str	r3, [r2, #0]
 8002164:	e02e      	b.n	80021c4 <HAL_RCC_OscConfig+0xd4>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d10c      	bne.n	8002188 <HAL_RCC_OscConfig+0x98>
 800216e:	4b7b      	ldr	r3, [pc, #492]	; (800235c <HAL_RCC_OscConfig+0x26c>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a7a      	ldr	r2, [pc, #488]	; (800235c <HAL_RCC_OscConfig+0x26c>)
 8002174:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002178:	6013      	str	r3, [r2, #0]
 800217a:	4b78      	ldr	r3, [pc, #480]	; (800235c <HAL_RCC_OscConfig+0x26c>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a77      	ldr	r2, [pc, #476]	; (800235c <HAL_RCC_OscConfig+0x26c>)
 8002180:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002184:	6013      	str	r3, [r2, #0]
 8002186:	e01d      	b.n	80021c4 <HAL_RCC_OscConfig+0xd4>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002190:	d10c      	bne.n	80021ac <HAL_RCC_OscConfig+0xbc>
 8002192:	4b72      	ldr	r3, [pc, #456]	; (800235c <HAL_RCC_OscConfig+0x26c>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a71      	ldr	r2, [pc, #452]	; (800235c <HAL_RCC_OscConfig+0x26c>)
 8002198:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800219c:	6013      	str	r3, [r2, #0]
 800219e:	4b6f      	ldr	r3, [pc, #444]	; (800235c <HAL_RCC_OscConfig+0x26c>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a6e      	ldr	r2, [pc, #440]	; (800235c <HAL_RCC_OscConfig+0x26c>)
 80021a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021a8:	6013      	str	r3, [r2, #0]
 80021aa:	e00b      	b.n	80021c4 <HAL_RCC_OscConfig+0xd4>
 80021ac:	4b6b      	ldr	r3, [pc, #428]	; (800235c <HAL_RCC_OscConfig+0x26c>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a6a      	ldr	r2, [pc, #424]	; (800235c <HAL_RCC_OscConfig+0x26c>)
 80021b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021b6:	6013      	str	r3, [r2, #0]
 80021b8:	4b68      	ldr	r3, [pc, #416]	; (800235c <HAL_RCC_OscConfig+0x26c>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a67      	ldr	r2, [pc, #412]	; (800235c <HAL_RCC_OscConfig+0x26c>)
 80021be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021c2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d013      	beq.n	80021f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021cc:	f7ff f9b0 	bl	8001530 <HAL_GetTick>
 80021d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021d2:	e008      	b.n	80021e6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021d4:	f7ff f9ac 	bl	8001530 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b64      	cmp	r3, #100	; 0x64
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e200      	b.n	80025e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021e6:	4b5d      	ldr	r3, [pc, #372]	; (800235c <HAL_RCC_OscConfig+0x26c>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d0f0      	beq.n	80021d4 <HAL_RCC_OscConfig+0xe4>
 80021f2:	e014      	b.n	800221e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f4:	f7ff f99c 	bl	8001530 <HAL_GetTick>
 80021f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021fa:	e008      	b.n	800220e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021fc:	f7ff f998 	bl	8001530 <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b64      	cmp	r3, #100	; 0x64
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e1ec      	b.n	80025e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800220e:	4b53      	ldr	r3, [pc, #332]	; (800235c <HAL_RCC_OscConfig+0x26c>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1f0      	bne.n	80021fc <HAL_RCC_OscConfig+0x10c>
 800221a:	e000      	b.n	800221e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800221c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d063      	beq.n	80022f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800222a:	4b4c      	ldr	r3, [pc, #304]	; (800235c <HAL_RCC_OscConfig+0x26c>)
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f003 030c 	and.w	r3, r3, #12
 8002232:	2b00      	cmp	r3, #0
 8002234:	d00b      	beq.n	800224e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002236:	4b49      	ldr	r3, [pc, #292]	; (800235c <HAL_RCC_OscConfig+0x26c>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f003 030c 	and.w	r3, r3, #12
 800223e:	2b08      	cmp	r3, #8
 8002240:	d11c      	bne.n	800227c <HAL_RCC_OscConfig+0x18c>
 8002242:	4b46      	ldr	r3, [pc, #280]	; (800235c <HAL_RCC_OscConfig+0x26c>)
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d116      	bne.n	800227c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800224e:	4b43      	ldr	r3, [pc, #268]	; (800235c <HAL_RCC_OscConfig+0x26c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d005      	beq.n	8002266 <HAL_RCC_OscConfig+0x176>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d001      	beq.n	8002266 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e1c0      	b.n	80025e8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002266:	4b3d      	ldr	r3, [pc, #244]	; (800235c <HAL_RCC_OscConfig+0x26c>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	4939      	ldr	r1, [pc, #228]	; (800235c <HAL_RCC_OscConfig+0x26c>)
 8002276:	4313      	orrs	r3, r2
 8002278:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800227a:	e03a      	b.n	80022f2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	691b      	ldr	r3, [r3, #16]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d020      	beq.n	80022c6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002284:	4b36      	ldr	r3, [pc, #216]	; (8002360 <HAL_RCC_OscConfig+0x270>)
 8002286:	2201      	movs	r2, #1
 8002288:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800228a:	f7ff f951 	bl	8001530 <HAL_GetTick>
 800228e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002290:	e008      	b.n	80022a4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002292:	f7ff f94d 	bl	8001530 <HAL_GetTick>
 8002296:	4602      	mov	r2, r0
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	2b02      	cmp	r3, #2
 800229e:	d901      	bls.n	80022a4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80022a0:	2303      	movs	r3, #3
 80022a2:	e1a1      	b.n	80025e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022a4:	4b2d      	ldr	r3, [pc, #180]	; (800235c <HAL_RCC_OscConfig+0x26c>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0302 	and.w	r3, r3, #2
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d0f0      	beq.n	8002292 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b0:	4b2a      	ldr	r3, [pc, #168]	; (800235c <HAL_RCC_OscConfig+0x26c>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	695b      	ldr	r3, [r3, #20]
 80022bc:	00db      	lsls	r3, r3, #3
 80022be:	4927      	ldr	r1, [pc, #156]	; (800235c <HAL_RCC_OscConfig+0x26c>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	600b      	str	r3, [r1, #0]
 80022c4:	e015      	b.n	80022f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022c6:	4b26      	ldr	r3, [pc, #152]	; (8002360 <HAL_RCC_OscConfig+0x270>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022cc:	f7ff f930 	bl	8001530 <HAL_GetTick>
 80022d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022d2:	e008      	b.n	80022e6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022d4:	f7ff f92c 	bl	8001530 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e180      	b.n	80025e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022e6:	4b1d      	ldr	r3, [pc, #116]	; (800235c <HAL_RCC_OscConfig+0x26c>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d1f0      	bne.n	80022d4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0308 	and.w	r3, r3, #8
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d03a      	beq.n	8002374 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d019      	beq.n	800233a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002306:	4b17      	ldr	r3, [pc, #92]	; (8002364 <HAL_RCC_OscConfig+0x274>)
 8002308:	2201      	movs	r2, #1
 800230a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800230c:	f7ff f910 	bl	8001530 <HAL_GetTick>
 8002310:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002312:	e008      	b.n	8002326 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002314:	f7ff f90c 	bl	8001530 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b02      	cmp	r3, #2
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e160      	b.n	80025e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002326:	4b0d      	ldr	r3, [pc, #52]	; (800235c <HAL_RCC_OscConfig+0x26c>)
 8002328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d0f0      	beq.n	8002314 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002332:	2001      	movs	r0, #1
 8002334:	f000 fac4 	bl	80028c0 <RCC_Delay>
 8002338:	e01c      	b.n	8002374 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800233a:	4b0a      	ldr	r3, [pc, #40]	; (8002364 <HAL_RCC_OscConfig+0x274>)
 800233c:	2200      	movs	r2, #0
 800233e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002340:	f7ff f8f6 	bl	8001530 <HAL_GetTick>
 8002344:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002346:	e00f      	b.n	8002368 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002348:	f7ff f8f2 	bl	8001530 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b02      	cmp	r3, #2
 8002354:	d908      	bls.n	8002368 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e146      	b.n	80025e8 <HAL_RCC_OscConfig+0x4f8>
 800235a:	bf00      	nop
 800235c:	40021000 	.word	0x40021000
 8002360:	42420000 	.word	0x42420000
 8002364:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002368:	4b92      	ldr	r3, [pc, #584]	; (80025b4 <HAL_RCC_OscConfig+0x4c4>)
 800236a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	2b00      	cmp	r3, #0
 8002372:	d1e9      	bne.n	8002348 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0304 	and.w	r3, r3, #4
 800237c:	2b00      	cmp	r3, #0
 800237e:	f000 80a6 	beq.w	80024ce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002382:	2300      	movs	r3, #0
 8002384:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002386:	4b8b      	ldr	r3, [pc, #556]	; (80025b4 <HAL_RCC_OscConfig+0x4c4>)
 8002388:	69db      	ldr	r3, [r3, #28]
 800238a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d10d      	bne.n	80023ae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002392:	4b88      	ldr	r3, [pc, #544]	; (80025b4 <HAL_RCC_OscConfig+0x4c4>)
 8002394:	69db      	ldr	r3, [r3, #28]
 8002396:	4a87      	ldr	r2, [pc, #540]	; (80025b4 <HAL_RCC_OscConfig+0x4c4>)
 8002398:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800239c:	61d3      	str	r3, [r2, #28]
 800239e:	4b85      	ldr	r3, [pc, #532]	; (80025b4 <HAL_RCC_OscConfig+0x4c4>)
 80023a0:	69db      	ldr	r3, [r3, #28]
 80023a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a6:	60bb      	str	r3, [r7, #8]
 80023a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023aa:	2301      	movs	r3, #1
 80023ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ae:	4b82      	ldr	r3, [pc, #520]	; (80025b8 <HAL_RCC_OscConfig+0x4c8>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d118      	bne.n	80023ec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023ba:	4b7f      	ldr	r3, [pc, #508]	; (80025b8 <HAL_RCC_OscConfig+0x4c8>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a7e      	ldr	r2, [pc, #504]	; (80025b8 <HAL_RCC_OscConfig+0x4c8>)
 80023c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023c6:	f7ff f8b3 	bl	8001530 <HAL_GetTick>
 80023ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023cc:	e008      	b.n	80023e0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023ce:	f7ff f8af 	bl	8001530 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	2b64      	cmp	r3, #100	; 0x64
 80023da:	d901      	bls.n	80023e0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e103      	b.n	80025e8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023e0:	4b75      	ldr	r3, [pc, #468]	; (80025b8 <HAL_RCC_OscConfig+0x4c8>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d0f0      	beq.n	80023ce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d106      	bne.n	8002402 <HAL_RCC_OscConfig+0x312>
 80023f4:	4b6f      	ldr	r3, [pc, #444]	; (80025b4 <HAL_RCC_OscConfig+0x4c4>)
 80023f6:	6a1b      	ldr	r3, [r3, #32]
 80023f8:	4a6e      	ldr	r2, [pc, #440]	; (80025b4 <HAL_RCC_OscConfig+0x4c4>)
 80023fa:	f043 0301 	orr.w	r3, r3, #1
 80023fe:	6213      	str	r3, [r2, #32]
 8002400:	e02d      	b.n	800245e <HAL_RCC_OscConfig+0x36e>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d10c      	bne.n	8002424 <HAL_RCC_OscConfig+0x334>
 800240a:	4b6a      	ldr	r3, [pc, #424]	; (80025b4 <HAL_RCC_OscConfig+0x4c4>)
 800240c:	6a1b      	ldr	r3, [r3, #32]
 800240e:	4a69      	ldr	r2, [pc, #420]	; (80025b4 <HAL_RCC_OscConfig+0x4c4>)
 8002410:	f023 0301 	bic.w	r3, r3, #1
 8002414:	6213      	str	r3, [r2, #32]
 8002416:	4b67      	ldr	r3, [pc, #412]	; (80025b4 <HAL_RCC_OscConfig+0x4c4>)
 8002418:	6a1b      	ldr	r3, [r3, #32]
 800241a:	4a66      	ldr	r2, [pc, #408]	; (80025b4 <HAL_RCC_OscConfig+0x4c4>)
 800241c:	f023 0304 	bic.w	r3, r3, #4
 8002420:	6213      	str	r3, [r2, #32]
 8002422:	e01c      	b.n	800245e <HAL_RCC_OscConfig+0x36e>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	2b05      	cmp	r3, #5
 800242a:	d10c      	bne.n	8002446 <HAL_RCC_OscConfig+0x356>
 800242c:	4b61      	ldr	r3, [pc, #388]	; (80025b4 <HAL_RCC_OscConfig+0x4c4>)
 800242e:	6a1b      	ldr	r3, [r3, #32]
 8002430:	4a60      	ldr	r2, [pc, #384]	; (80025b4 <HAL_RCC_OscConfig+0x4c4>)
 8002432:	f043 0304 	orr.w	r3, r3, #4
 8002436:	6213      	str	r3, [r2, #32]
 8002438:	4b5e      	ldr	r3, [pc, #376]	; (80025b4 <HAL_RCC_OscConfig+0x4c4>)
 800243a:	6a1b      	ldr	r3, [r3, #32]
 800243c:	4a5d      	ldr	r2, [pc, #372]	; (80025b4 <HAL_RCC_OscConfig+0x4c4>)
 800243e:	f043 0301 	orr.w	r3, r3, #1
 8002442:	6213      	str	r3, [r2, #32]
 8002444:	e00b      	b.n	800245e <HAL_RCC_OscConfig+0x36e>
 8002446:	4b5b      	ldr	r3, [pc, #364]	; (80025b4 <HAL_RCC_OscConfig+0x4c4>)
 8002448:	6a1b      	ldr	r3, [r3, #32]
 800244a:	4a5a      	ldr	r2, [pc, #360]	; (80025b4 <HAL_RCC_OscConfig+0x4c4>)
 800244c:	f023 0301 	bic.w	r3, r3, #1
 8002450:	6213      	str	r3, [r2, #32]
 8002452:	4b58      	ldr	r3, [pc, #352]	; (80025b4 <HAL_RCC_OscConfig+0x4c4>)
 8002454:	6a1b      	ldr	r3, [r3, #32]
 8002456:	4a57      	ldr	r2, [pc, #348]	; (80025b4 <HAL_RCC_OscConfig+0x4c4>)
 8002458:	f023 0304 	bic.w	r3, r3, #4
 800245c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d015      	beq.n	8002492 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002466:	f7ff f863 	bl	8001530 <HAL_GetTick>
 800246a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800246c:	e00a      	b.n	8002484 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800246e:	f7ff f85f 	bl	8001530 <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	f241 3288 	movw	r2, #5000	; 0x1388
 800247c:	4293      	cmp	r3, r2
 800247e:	d901      	bls.n	8002484 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e0b1      	b.n	80025e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002484:	4b4b      	ldr	r3, [pc, #300]	; (80025b4 <HAL_RCC_OscConfig+0x4c4>)
 8002486:	6a1b      	ldr	r3, [r3, #32]
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	2b00      	cmp	r3, #0
 800248e:	d0ee      	beq.n	800246e <HAL_RCC_OscConfig+0x37e>
 8002490:	e014      	b.n	80024bc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002492:	f7ff f84d 	bl	8001530 <HAL_GetTick>
 8002496:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002498:	e00a      	b.n	80024b0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800249a:	f7ff f849 	bl	8001530 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d901      	bls.n	80024b0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e09b      	b.n	80025e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024b0:	4b40      	ldr	r3, [pc, #256]	; (80025b4 <HAL_RCC_OscConfig+0x4c4>)
 80024b2:	6a1b      	ldr	r3, [r3, #32]
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d1ee      	bne.n	800249a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024bc:	7dfb      	ldrb	r3, [r7, #23]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d105      	bne.n	80024ce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024c2:	4b3c      	ldr	r3, [pc, #240]	; (80025b4 <HAL_RCC_OscConfig+0x4c4>)
 80024c4:	69db      	ldr	r3, [r3, #28]
 80024c6:	4a3b      	ldr	r2, [pc, #236]	; (80025b4 <HAL_RCC_OscConfig+0x4c4>)
 80024c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024cc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	69db      	ldr	r3, [r3, #28]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	f000 8087 	beq.w	80025e6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024d8:	4b36      	ldr	r3, [pc, #216]	; (80025b4 <HAL_RCC_OscConfig+0x4c4>)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f003 030c 	and.w	r3, r3, #12
 80024e0:	2b08      	cmp	r3, #8
 80024e2:	d061      	beq.n	80025a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	69db      	ldr	r3, [r3, #28]
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d146      	bne.n	800257a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ec:	4b33      	ldr	r3, [pc, #204]	; (80025bc <HAL_RCC_OscConfig+0x4cc>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f2:	f7ff f81d 	bl	8001530 <HAL_GetTick>
 80024f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024f8:	e008      	b.n	800250c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024fa:	f7ff f819 	bl	8001530 <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	2b02      	cmp	r3, #2
 8002506:	d901      	bls.n	800250c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e06d      	b.n	80025e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800250c:	4b29      	ldr	r3, [pc, #164]	; (80025b4 <HAL_RCC_OscConfig+0x4c4>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d1f0      	bne.n	80024fa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a1b      	ldr	r3, [r3, #32]
 800251c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002520:	d108      	bne.n	8002534 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002522:	4b24      	ldr	r3, [pc, #144]	; (80025b4 <HAL_RCC_OscConfig+0x4c4>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	4921      	ldr	r1, [pc, #132]	; (80025b4 <HAL_RCC_OscConfig+0x4c4>)
 8002530:	4313      	orrs	r3, r2
 8002532:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002534:	4b1f      	ldr	r3, [pc, #124]	; (80025b4 <HAL_RCC_OscConfig+0x4c4>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a19      	ldr	r1, [r3, #32]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002544:	430b      	orrs	r3, r1
 8002546:	491b      	ldr	r1, [pc, #108]	; (80025b4 <HAL_RCC_OscConfig+0x4c4>)
 8002548:	4313      	orrs	r3, r2
 800254a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800254c:	4b1b      	ldr	r3, [pc, #108]	; (80025bc <HAL_RCC_OscConfig+0x4cc>)
 800254e:	2201      	movs	r2, #1
 8002550:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002552:	f7fe ffed 	bl	8001530 <HAL_GetTick>
 8002556:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002558:	e008      	b.n	800256c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800255a:	f7fe ffe9 	bl	8001530 <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	2b02      	cmp	r3, #2
 8002566:	d901      	bls.n	800256c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e03d      	b.n	80025e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800256c:	4b11      	ldr	r3, [pc, #68]	; (80025b4 <HAL_RCC_OscConfig+0x4c4>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d0f0      	beq.n	800255a <HAL_RCC_OscConfig+0x46a>
 8002578:	e035      	b.n	80025e6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800257a:	4b10      	ldr	r3, [pc, #64]	; (80025bc <HAL_RCC_OscConfig+0x4cc>)
 800257c:	2200      	movs	r2, #0
 800257e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002580:	f7fe ffd6 	bl	8001530 <HAL_GetTick>
 8002584:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002586:	e008      	b.n	800259a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002588:	f7fe ffd2 	bl	8001530 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b02      	cmp	r3, #2
 8002594:	d901      	bls.n	800259a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e026      	b.n	80025e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800259a:	4b06      	ldr	r3, [pc, #24]	; (80025b4 <HAL_RCC_OscConfig+0x4c4>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d1f0      	bne.n	8002588 <HAL_RCC_OscConfig+0x498>
 80025a6:	e01e      	b.n	80025e6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	69db      	ldr	r3, [r3, #28]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d107      	bne.n	80025c0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e019      	b.n	80025e8 <HAL_RCC_OscConfig+0x4f8>
 80025b4:	40021000 	.word	0x40021000
 80025b8:	40007000 	.word	0x40007000
 80025bc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025c0:	4b0b      	ldr	r3, [pc, #44]	; (80025f0 <HAL_RCC_OscConfig+0x500>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a1b      	ldr	r3, [r3, #32]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d106      	bne.n	80025e2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025de:	429a      	cmp	r2, r3
 80025e0:	d001      	beq.n	80025e6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e000      	b.n	80025e8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80025e6:	2300      	movs	r3, #0
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3718      	adds	r7, #24
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	40021000 	.word	0x40021000

080025f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d101      	bne.n	8002608 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e0d0      	b.n	80027aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002608:	4b6a      	ldr	r3, [pc, #424]	; (80027b4 <HAL_RCC_ClockConfig+0x1c0>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0307 	and.w	r3, r3, #7
 8002610:	683a      	ldr	r2, [r7, #0]
 8002612:	429a      	cmp	r2, r3
 8002614:	d910      	bls.n	8002638 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002616:	4b67      	ldr	r3, [pc, #412]	; (80027b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f023 0207 	bic.w	r2, r3, #7
 800261e:	4965      	ldr	r1, [pc, #404]	; (80027b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	4313      	orrs	r3, r2
 8002624:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002626:	4b63      	ldr	r3, [pc, #396]	; (80027b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0307 	and.w	r3, r3, #7
 800262e:	683a      	ldr	r2, [r7, #0]
 8002630:	429a      	cmp	r2, r3
 8002632:	d001      	beq.n	8002638 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e0b8      	b.n	80027aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0302 	and.w	r3, r3, #2
 8002640:	2b00      	cmp	r3, #0
 8002642:	d020      	beq.n	8002686 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0304 	and.w	r3, r3, #4
 800264c:	2b00      	cmp	r3, #0
 800264e:	d005      	beq.n	800265c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002650:	4b59      	ldr	r3, [pc, #356]	; (80027b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	4a58      	ldr	r2, [pc, #352]	; (80027b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002656:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800265a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0308 	and.w	r3, r3, #8
 8002664:	2b00      	cmp	r3, #0
 8002666:	d005      	beq.n	8002674 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002668:	4b53      	ldr	r3, [pc, #332]	; (80027b8 <HAL_RCC_ClockConfig+0x1c4>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	4a52      	ldr	r2, [pc, #328]	; (80027b8 <HAL_RCC_ClockConfig+0x1c4>)
 800266e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002672:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002674:	4b50      	ldr	r3, [pc, #320]	; (80027b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	494d      	ldr	r1, [pc, #308]	; (80027b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002682:	4313      	orrs	r3, r2
 8002684:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0301 	and.w	r3, r3, #1
 800268e:	2b00      	cmp	r3, #0
 8002690:	d040      	beq.n	8002714 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	2b01      	cmp	r3, #1
 8002698:	d107      	bne.n	80026aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800269a:	4b47      	ldr	r3, [pc, #284]	; (80027b8 <HAL_RCC_ClockConfig+0x1c4>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d115      	bne.n	80026d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e07f      	b.n	80027aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d107      	bne.n	80026c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026b2:	4b41      	ldr	r3, [pc, #260]	; (80027b8 <HAL_RCC_ClockConfig+0x1c4>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d109      	bne.n	80026d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e073      	b.n	80027aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026c2:	4b3d      	ldr	r3, [pc, #244]	; (80027b8 <HAL_RCC_ClockConfig+0x1c4>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d101      	bne.n	80026d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e06b      	b.n	80027aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026d2:	4b39      	ldr	r3, [pc, #228]	; (80027b8 <HAL_RCC_ClockConfig+0x1c4>)
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f023 0203 	bic.w	r2, r3, #3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	4936      	ldr	r1, [pc, #216]	; (80027b8 <HAL_RCC_ClockConfig+0x1c4>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026e4:	f7fe ff24 	bl	8001530 <HAL_GetTick>
 80026e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ea:	e00a      	b.n	8002702 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026ec:	f7fe ff20 	bl	8001530 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e053      	b.n	80027aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002702:	4b2d      	ldr	r3, [pc, #180]	; (80027b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f003 020c 	and.w	r2, r3, #12
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	429a      	cmp	r2, r3
 8002712:	d1eb      	bne.n	80026ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002714:	4b27      	ldr	r3, [pc, #156]	; (80027b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0307 	and.w	r3, r3, #7
 800271c:	683a      	ldr	r2, [r7, #0]
 800271e:	429a      	cmp	r2, r3
 8002720:	d210      	bcs.n	8002744 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002722:	4b24      	ldr	r3, [pc, #144]	; (80027b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f023 0207 	bic.w	r2, r3, #7
 800272a:	4922      	ldr	r1, [pc, #136]	; (80027b4 <HAL_RCC_ClockConfig+0x1c0>)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	4313      	orrs	r3, r2
 8002730:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002732:	4b20      	ldr	r3, [pc, #128]	; (80027b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0307 	and.w	r3, r3, #7
 800273a:	683a      	ldr	r2, [r7, #0]
 800273c:	429a      	cmp	r2, r3
 800273e:	d001      	beq.n	8002744 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e032      	b.n	80027aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0304 	and.w	r3, r3, #4
 800274c:	2b00      	cmp	r3, #0
 800274e:	d008      	beq.n	8002762 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002750:	4b19      	ldr	r3, [pc, #100]	; (80027b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	4916      	ldr	r1, [pc, #88]	; (80027b8 <HAL_RCC_ClockConfig+0x1c4>)
 800275e:	4313      	orrs	r3, r2
 8002760:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0308 	and.w	r3, r3, #8
 800276a:	2b00      	cmp	r3, #0
 800276c:	d009      	beq.n	8002782 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800276e:	4b12      	ldr	r3, [pc, #72]	; (80027b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	00db      	lsls	r3, r3, #3
 800277c:	490e      	ldr	r1, [pc, #56]	; (80027b8 <HAL_RCC_ClockConfig+0x1c4>)
 800277e:	4313      	orrs	r3, r2
 8002780:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002782:	f000 f821 	bl	80027c8 <HAL_RCC_GetSysClockFreq>
 8002786:	4602      	mov	r2, r0
 8002788:	4b0b      	ldr	r3, [pc, #44]	; (80027b8 <HAL_RCC_ClockConfig+0x1c4>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	091b      	lsrs	r3, r3, #4
 800278e:	f003 030f 	and.w	r3, r3, #15
 8002792:	490a      	ldr	r1, [pc, #40]	; (80027bc <HAL_RCC_ClockConfig+0x1c8>)
 8002794:	5ccb      	ldrb	r3, [r1, r3]
 8002796:	fa22 f303 	lsr.w	r3, r2, r3
 800279a:	4a09      	ldr	r2, [pc, #36]	; (80027c0 <HAL_RCC_ClockConfig+0x1cc>)
 800279c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800279e:	4b09      	ldr	r3, [pc, #36]	; (80027c4 <HAL_RCC_ClockConfig+0x1d0>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7fe fe82 	bl	80014ac <HAL_InitTick>

  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3710      	adds	r7, #16
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	40022000 	.word	0x40022000
 80027b8:	40021000 	.word	0x40021000
 80027bc:	08003580 	.word	0x08003580
 80027c0:	20000000 	.word	0x20000000
 80027c4:	20000004 	.word	0x20000004

080027c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027c8:	b490      	push	{r4, r7}
 80027ca:	b08a      	sub	sp, #40	; 0x28
 80027cc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80027ce:	4b29      	ldr	r3, [pc, #164]	; (8002874 <HAL_RCC_GetSysClockFreq+0xac>)
 80027d0:	1d3c      	adds	r4, r7, #4
 80027d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80027d8:	f240 2301 	movw	r3, #513	; 0x201
 80027dc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027de:	2300      	movs	r3, #0
 80027e0:	61fb      	str	r3, [r7, #28]
 80027e2:	2300      	movs	r3, #0
 80027e4:	61bb      	str	r3, [r7, #24]
 80027e6:	2300      	movs	r3, #0
 80027e8:	627b      	str	r3, [r7, #36]	; 0x24
 80027ea:	2300      	movs	r3, #0
 80027ec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80027ee:	2300      	movs	r3, #0
 80027f0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027f2:	4b21      	ldr	r3, [pc, #132]	; (8002878 <HAL_RCC_GetSysClockFreq+0xb0>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	f003 030c 	and.w	r3, r3, #12
 80027fe:	2b04      	cmp	r3, #4
 8002800:	d002      	beq.n	8002808 <HAL_RCC_GetSysClockFreq+0x40>
 8002802:	2b08      	cmp	r3, #8
 8002804:	d003      	beq.n	800280e <HAL_RCC_GetSysClockFreq+0x46>
 8002806:	e02b      	b.n	8002860 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002808:	4b1c      	ldr	r3, [pc, #112]	; (800287c <HAL_RCC_GetSysClockFreq+0xb4>)
 800280a:	623b      	str	r3, [r7, #32]
      break;
 800280c:	e02b      	b.n	8002866 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	0c9b      	lsrs	r3, r3, #18
 8002812:	f003 030f 	and.w	r3, r3, #15
 8002816:	3328      	adds	r3, #40	; 0x28
 8002818:	443b      	add	r3, r7
 800281a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800281e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d012      	beq.n	8002850 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800282a:	4b13      	ldr	r3, [pc, #76]	; (8002878 <HAL_RCC_GetSysClockFreq+0xb0>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	0c5b      	lsrs	r3, r3, #17
 8002830:	f003 0301 	and.w	r3, r3, #1
 8002834:	3328      	adds	r3, #40	; 0x28
 8002836:	443b      	add	r3, r7
 8002838:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800283c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	4a0e      	ldr	r2, [pc, #56]	; (800287c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002842:	fb03 f202 	mul.w	r2, r3, r2
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	fbb2 f3f3 	udiv	r3, r2, r3
 800284c:	627b      	str	r3, [r7, #36]	; 0x24
 800284e:	e004      	b.n	800285a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	4a0b      	ldr	r2, [pc, #44]	; (8002880 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002854:	fb02 f303 	mul.w	r3, r2, r3
 8002858:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800285a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285c:	623b      	str	r3, [r7, #32]
      break;
 800285e:	e002      	b.n	8002866 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002860:	4b06      	ldr	r3, [pc, #24]	; (800287c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002862:	623b      	str	r3, [r7, #32]
      break;
 8002864:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002866:	6a3b      	ldr	r3, [r7, #32]
}
 8002868:	4618      	mov	r0, r3
 800286a:	3728      	adds	r7, #40	; 0x28
 800286c:	46bd      	mov	sp, r7
 800286e:	bc90      	pop	{r4, r7}
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	08003570 	.word	0x08003570
 8002878:	40021000 	.word	0x40021000
 800287c:	007a1200 	.word	0x007a1200
 8002880:	003d0900 	.word	0x003d0900

08002884 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002888:	4b02      	ldr	r3, [pc, #8]	; (8002894 <HAL_RCC_GetHCLKFreq+0x10>)
 800288a:	681b      	ldr	r3, [r3, #0]
}
 800288c:	4618      	mov	r0, r3
 800288e:	46bd      	mov	sp, r7
 8002890:	bc80      	pop	{r7}
 8002892:	4770      	bx	lr
 8002894:	20000000 	.word	0x20000000

08002898 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800289c:	f7ff fff2 	bl	8002884 <HAL_RCC_GetHCLKFreq>
 80028a0:	4602      	mov	r2, r0
 80028a2:	4b05      	ldr	r3, [pc, #20]	; (80028b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	0a1b      	lsrs	r3, r3, #8
 80028a8:	f003 0307 	and.w	r3, r3, #7
 80028ac:	4903      	ldr	r1, [pc, #12]	; (80028bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80028ae:	5ccb      	ldrb	r3, [r1, r3]
 80028b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	40021000 	.word	0x40021000
 80028bc:	08003590 	.word	0x08003590

080028c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028c8:	4b0a      	ldr	r3, [pc, #40]	; (80028f4 <RCC_Delay+0x34>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a0a      	ldr	r2, [pc, #40]	; (80028f8 <RCC_Delay+0x38>)
 80028ce:	fba2 2303 	umull	r2, r3, r2, r3
 80028d2:	0a5b      	lsrs	r3, r3, #9
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	fb02 f303 	mul.w	r3, r2, r3
 80028da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028dc:	bf00      	nop
  }
  while (Delay --);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	1e5a      	subs	r2, r3, #1
 80028e2:	60fa      	str	r2, [r7, #12]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d1f9      	bne.n	80028dc <RCC_Delay+0x1c>
}
 80028e8:	bf00      	nop
 80028ea:	bf00      	nop
 80028ec:	3714      	adds	r7, #20
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bc80      	pop	{r7}
 80028f2:	4770      	bx	lr
 80028f4:	20000000 	.word	0x20000000
 80028f8:	10624dd3 	.word	0x10624dd3

080028fc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b086      	sub	sp, #24
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002904:	2300      	movs	r3, #0
 8002906:	613b      	str	r3, [r7, #16]
 8002908:	2300      	movs	r3, #0
 800290a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0301 	and.w	r3, r3, #1
 8002914:	2b00      	cmp	r3, #0
 8002916:	d07d      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002918:	2300      	movs	r3, #0
 800291a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800291c:	4b4f      	ldr	r3, [pc, #316]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800291e:	69db      	ldr	r3, [r3, #28]
 8002920:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d10d      	bne.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002928:	4b4c      	ldr	r3, [pc, #304]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800292a:	69db      	ldr	r3, [r3, #28]
 800292c:	4a4b      	ldr	r2, [pc, #300]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800292e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002932:	61d3      	str	r3, [r2, #28]
 8002934:	4b49      	ldr	r3, [pc, #292]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002936:	69db      	ldr	r3, [r3, #28]
 8002938:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800293c:	60bb      	str	r3, [r7, #8]
 800293e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002940:	2301      	movs	r3, #1
 8002942:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002944:	4b46      	ldr	r3, [pc, #280]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800294c:	2b00      	cmp	r3, #0
 800294e:	d118      	bne.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002950:	4b43      	ldr	r3, [pc, #268]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a42      	ldr	r2, [pc, #264]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002956:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800295a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800295c:	f7fe fde8 	bl	8001530 <HAL_GetTick>
 8002960:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002962:	e008      	b.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002964:	f7fe fde4 	bl	8001530 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b64      	cmp	r3, #100	; 0x64
 8002970:	d901      	bls.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e06d      	b.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002976:	4b3a      	ldr	r3, [pc, #232]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297e:	2b00      	cmp	r3, #0
 8002980:	d0f0      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002982:	4b36      	ldr	r3, [pc, #216]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002984:	6a1b      	ldr	r3, [r3, #32]
 8002986:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800298a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d02e      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	429a      	cmp	r2, r3
 800299e:	d027      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029a0:	4b2e      	ldr	r3, [pc, #184]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029a2:	6a1b      	ldr	r3, [r3, #32]
 80029a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029a8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80029aa:	4b2e      	ldr	r3, [pc, #184]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80029ac:	2201      	movs	r2, #1
 80029ae:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029b0:	4b2c      	ldr	r3, [pc, #176]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80029b6:	4a29      	ldr	r2, [pc, #164]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d014      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c6:	f7fe fdb3 	bl	8001530 <HAL_GetTick>
 80029ca:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029cc:	e00a      	b.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ce:	f7fe fdaf 	bl	8001530 <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80029dc:	4293      	cmp	r3, r2
 80029de:	d901      	bls.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e036      	b.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029e4:	4b1d      	ldr	r3, [pc, #116]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029e6:	6a1b      	ldr	r3, [r3, #32]
 80029e8:	f003 0302 	and.w	r3, r3, #2
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d0ee      	beq.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029f0:	4b1a      	ldr	r3, [pc, #104]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029f2:	6a1b      	ldr	r3, [r3, #32]
 80029f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	4917      	ldr	r1, [pc, #92]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a02:	7dfb      	ldrb	r3, [r7, #23]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d105      	bne.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a08:	4b14      	ldr	r3, [pc, #80]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a0a:	69db      	ldr	r3, [r3, #28]
 8002a0c:	4a13      	ldr	r2, [pc, #76]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a12:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0302 	and.w	r3, r3, #2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d008      	beq.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a20:	4b0e      	ldr	r3, [pc, #56]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	490b      	ldr	r1, [pc, #44]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0310 	and.w	r3, r3, #16
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d008      	beq.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a3e:	4b07      	ldr	r3, [pc, #28]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	4904      	ldr	r1, [pc, #16]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3718      	adds	r7, #24
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	40021000 	.word	0x40021000
 8002a60:	40007000 	.word	0x40007000
 8002a64:	42420440 	.word	0x42420440

08002a68 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d101      	bne.n	8002a7a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e041      	b.n	8002afe <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d106      	bne.n	8002a94 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f7fe fc30 	bl	80012f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2202      	movs	r2, #2
 8002a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	3304      	adds	r3, #4
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	4610      	mov	r0, r2
 8002aa8:	f000 fabe 	bl	8003028 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3708      	adds	r7, #8
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
	...

08002b08 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d109      	bne.n	8002b2c <HAL_TIM_PWM_Start+0x24>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	bf14      	ite	ne
 8002b24:	2301      	movne	r3, #1
 8002b26:	2300      	moveq	r3, #0
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	e022      	b.n	8002b72 <HAL_TIM_PWM_Start+0x6a>
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	2b04      	cmp	r3, #4
 8002b30:	d109      	bne.n	8002b46 <HAL_TIM_PWM_Start+0x3e>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	bf14      	ite	ne
 8002b3e:	2301      	movne	r3, #1
 8002b40:	2300      	moveq	r3, #0
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	e015      	b.n	8002b72 <HAL_TIM_PWM_Start+0x6a>
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	2b08      	cmp	r3, #8
 8002b4a:	d109      	bne.n	8002b60 <HAL_TIM_PWM_Start+0x58>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	bf14      	ite	ne
 8002b58:	2301      	movne	r3, #1
 8002b5a:	2300      	moveq	r3, #0
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	e008      	b.n	8002b72 <HAL_TIM_PWM_Start+0x6a>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	bf14      	ite	ne
 8002b6c:	2301      	movne	r3, #1
 8002b6e:	2300      	moveq	r3, #0
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e05e      	b.n	8002c38 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d104      	bne.n	8002b8a <HAL_TIM_PWM_Start+0x82>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2202      	movs	r2, #2
 8002b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b88:	e013      	b.n	8002bb2 <HAL_TIM_PWM_Start+0xaa>
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	2b04      	cmp	r3, #4
 8002b8e:	d104      	bne.n	8002b9a <HAL_TIM_PWM_Start+0x92>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2202      	movs	r2, #2
 8002b94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b98:	e00b      	b.n	8002bb2 <HAL_TIM_PWM_Start+0xaa>
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	2b08      	cmp	r3, #8
 8002b9e:	d104      	bne.n	8002baa <HAL_TIM_PWM_Start+0xa2>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2202      	movs	r2, #2
 8002ba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ba8:	e003      	b.n	8002bb2 <HAL_TIM_PWM_Start+0xaa>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2202      	movs	r2, #2
 8002bae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	6839      	ldr	r1, [r7, #0]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f000 fc1e 	bl	80033fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a1e      	ldr	r2, [pc, #120]	; (8002c40 <HAL_TIM_PWM_Start+0x138>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d107      	bne.n	8002bda <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bd8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a18      	ldr	r2, [pc, #96]	; (8002c40 <HAL_TIM_PWM_Start+0x138>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d00e      	beq.n	8002c02 <HAL_TIM_PWM_Start+0xfa>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bec:	d009      	beq.n	8002c02 <HAL_TIM_PWM_Start+0xfa>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a14      	ldr	r2, [pc, #80]	; (8002c44 <HAL_TIM_PWM_Start+0x13c>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d004      	beq.n	8002c02 <HAL_TIM_PWM_Start+0xfa>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a12      	ldr	r2, [pc, #72]	; (8002c48 <HAL_TIM_PWM_Start+0x140>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d111      	bne.n	8002c26 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f003 0307 	and.w	r3, r3, #7
 8002c0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2b06      	cmp	r3, #6
 8002c12:	d010      	beq.n	8002c36 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f042 0201 	orr.w	r2, r2, #1
 8002c22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c24:	e007      	b.n	8002c36 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f042 0201 	orr.w	r2, r2, #1
 8002c34:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c36:	2300      	movs	r3, #0
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3710      	adds	r7, #16
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	40012c00 	.word	0x40012c00
 8002c44:	40000400 	.word	0x40000400
 8002c48:	40000800 	.word	0x40000800

08002c4c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b086      	sub	sp, #24
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d101      	bne.n	8002c60 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e093      	b.n	8002d88 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d106      	bne.n	8002c7a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f7fe fafd 	bl	8001274 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2202      	movs	r2, #2
 8002c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	6812      	ldr	r2, [r2, #0]
 8002c8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c90:	f023 0307 	bic.w	r3, r3, #7
 8002c94:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	3304      	adds	r3, #4
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	4610      	mov	r0, r2
 8002ca2:	f000 f9c1 	bl	8003028 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	699b      	ldr	r3, [r3, #24]
 8002cb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	6a1b      	ldr	r3, [r3, #32]
 8002cbc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	697a      	ldr	r2, [r7, #20]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cce:	f023 0303 	bic.w	r3, r3, #3
 8002cd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	689a      	ldr	r2, [r3, #8]
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	021b      	lsls	r3, r3, #8
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	693a      	ldr	r2, [r7, #16]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002cec:	f023 030c 	bic.w	r3, r3, #12
 8002cf0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002cf8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002cfc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	68da      	ldr	r2, [r3, #12]
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	69db      	ldr	r3, [r3, #28]
 8002d06:	021b      	lsls	r3, r3, #8
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	693a      	ldr	r2, [r7, #16]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	011a      	lsls	r2, r3, #4
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	6a1b      	ldr	r3, [r3, #32]
 8002d1a:	031b      	lsls	r3, r3, #12
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	693a      	ldr	r2, [r7, #16]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002d2a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685a      	ldr	r2, [r3, #4]
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	695b      	ldr	r3, [r3, #20]
 8002d34:	011b      	lsls	r3, r3, #4
 8002d36:	4313      	orrs	r3, r2
 8002d38:	68fa      	ldr	r2, [r7, #12]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	697a      	ldr	r2, [r7, #20]
 8002d44:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	68fa      	ldr	r2, [r7, #12]
 8002d54:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2201      	movs	r2, #1
 8002d62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2201      	movs	r2, #1
 8002d72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2201      	movs	r2, #1
 8002d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d86:	2300      	movs	r3, #0
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3718      	adds	r7, #24
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002da0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002da8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002db0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002db8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d110      	bne.n	8002de2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002dc0:	7bfb      	ldrb	r3, [r7, #15]
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d102      	bne.n	8002dcc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002dc6:	7b7b      	ldrb	r3, [r7, #13]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d001      	beq.n	8002dd0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e069      	b.n	8002ea4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2202      	movs	r2, #2
 8002dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2202      	movs	r2, #2
 8002ddc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002de0:	e031      	b.n	8002e46 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	2b04      	cmp	r3, #4
 8002de6:	d110      	bne.n	8002e0a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002de8:	7bbb      	ldrb	r3, [r7, #14]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d102      	bne.n	8002df4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002dee:	7b3b      	ldrb	r3, [r7, #12]
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d001      	beq.n	8002df8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e055      	b.n	8002ea4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2202      	movs	r2, #2
 8002dfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2202      	movs	r2, #2
 8002e04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e08:	e01d      	b.n	8002e46 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002e0a:	7bfb      	ldrb	r3, [r7, #15]
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d108      	bne.n	8002e22 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002e10:	7bbb      	ldrb	r3, [r7, #14]
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d105      	bne.n	8002e22 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002e16:	7b7b      	ldrb	r3, [r7, #13]
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d102      	bne.n	8002e22 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002e1c:	7b3b      	ldrb	r3, [r7, #12]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d001      	beq.n	8002e26 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e03e      	b.n	8002ea4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2202      	movs	r2, #2
 8002e2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2202      	movs	r2, #2
 8002e32:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2202      	movs	r2, #2
 8002e3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2202      	movs	r2, #2
 8002e42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d003      	beq.n	8002e54 <HAL_TIM_Encoder_Start+0xc4>
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	2b04      	cmp	r3, #4
 8002e50:	d008      	beq.n	8002e64 <HAL_TIM_Encoder_Start+0xd4>
 8002e52:	e00f      	b.n	8002e74 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2201      	movs	r2, #1
 8002e5a:	2100      	movs	r1, #0
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f000 facd 	bl	80033fc <TIM_CCxChannelCmd>
      break;
 8002e62:	e016      	b.n	8002e92 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	2104      	movs	r1, #4
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f000 fac5 	bl	80033fc <TIM_CCxChannelCmd>
      break;
 8002e72:	e00e      	b.n	8002e92 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	2100      	movs	r1, #0
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f000 fabd 	bl	80033fc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2201      	movs	r2, #1
 8002e88:	2104      	movs	r1, #4
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f000 fab6 	bl	80033fc <TIM_CCxChannelCmd>
      break;
 8002e90:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f042 0201 	orr.w	r2, r2, #1
 8002ea0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3710      	adds	r7, #16
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d101      	bne.n	8002ec6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	e0ac      	b.n	8003020 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2b0c      	cmp	r3, #12
 8002ed2:	f200 809f 	bhi.w	8003014 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002ed6:	a201      	add	r2, pc, #4	; (adr r2, 8002edc <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002edc:	08002f11 	.word	0x08002f11
 8002ee0:	08003015 	.word	0x08003015
 8002ee4:	08003015 	.word	0x08003015
 8002ee8:	08003015 	.word	0x08003015
 8002eec:	08002f51 	.word	0x08002f51
 8002ef0:	08003015 	.word	0x08003015
 8002ef4:	08003015 	.word	0x08003015
 8002ef8:	08003015 	.word	0x08003015
 8002efc:	08002f93 	.word	0x08002f93
 8002f00:	08003015 	.word	0x08003015
 8002f04:	08003015 	.word	0x08003015
 8002f08:	08003015 	.word	0x08003015
 8002f0c:	08002fd3 	.word	0x08002fd3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	68b9      	ldr	r1, [r7, #8]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f000 f8e8 	bl	80030ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	699a      	ldr	r2, [r3, #24]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f042 0208 	orr.w	r2, r2, #8
 8002f2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	699a      	ldr	r2, [r3, #24]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f022 0204 	bic.w	r2, r2, #4
 8002f3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	6999      	ldr	r1, [r3, #24]
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	691a      	ldr	r2, [r3, #16]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	619a      	str	r2, [r3, #24]
      break;
 8002f4e:	e062      	b.n	8003016 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	68b9      	ldr	r1, [r7, #8]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f000 f92e 	bl	80031b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	699a      	ldr	r2, [r3, #24]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	699a      	ldr	r2, [r3, #24]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	6999      	ldr	r1, [r3, #24]
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	021a      	lsls	r2, r3, #8
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	430a      	orrs	r2, r1
 8002f8e:	619a      	str	r2, [r3, #24]
      break;
 8002f90:	e041      	b.n	8003016 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	68b9      	ldr	r1, [r7, #8]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f000 f977 	bl	800328c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	69da      	ldr	r2, [r3, #28]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f042 0208 	orr.w	r2, r2, #8
 8002fac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	69da      	ldr	r2, [r3, #28]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f022 0204 	bic.w	r2, r2, #4
 8002fbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	69d9      	ldr	r1, [r3, #28]
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	691a      	ldr	r2, [r3, #16]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	61da      	str	r2, [r3, #28]
      break;
 8002fd0:	e021      	b.n	8003016 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68b9      	ldr	r1, [r7, #8]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f000 f9c1 	bl	8003360 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	69da      	ldr	r2, [r3, #28]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	69da      	ldr	r2, [r3, #28]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ffc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	69d9      	ldr	r1, [r3, #28]
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	691b      	ldr	r3, [r3, #16]
 8003008:	021a      	lsls	r2, r3, #8
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	430a      	orrs	r2, r1
 8003010:	61da      	str	r2, [r3, #28]
      break;
 8003012:	e000      	b.n	8003016 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003014:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800301e:	2300      	movs	r3, #0
}
 8003020:	4618      	mov	r0, r3
 8003022:	3710      	adds	r7, #16
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003028:	b480      	push	{r7}
 800302a:	b085      	sub	sp, #20
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4a29      	ldr	r2, [pc, #164]	; (80030e0 <TIM_Base_SetConfig+0xb8>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d00b      	beq.n	8003058 <TIM_Base_SetConfig+0x30>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003046:	d007      	beq.n	8003058 <TIM_Base_SetConfig+0x30>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a26      	ldr	r2, [pc, #152]	; (80030e4 <TIM_Base_SetConfig+0xbc>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d003      	beq.n	8003058 <TIM_Base_SetConfig+0x30>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a25      	ldr	r2, [pc, #148]	; (80030e8 <TIM_Base_SetConfig+0xc0>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d108      	bne.n	800306a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800305e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	4313      	orrs	r3, r2
 8003068:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a1c      	ldr	r2, [pc, #112]	; (80030e0 <TIM_Base_SetConfig+0xb8>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d00b      	beq.n	800308a <TIM_Base_SetConfig+0x62>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003078:	d007      	beq.n	800308a <TIM_Base_SetConfig+0x62>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a19      	ldr	r2, [pc, #100]	; (80030e4 <TIM_Base_SetConfig+0xbc>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d003      	beq.n	800308a <TIM_Base_SetConfig+0x62>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a18      	ldr	r2, [pc, #96]	; (80030e8 <TIM_Base_SetConfig+0xc0>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d108      	bne.n	800309c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003090:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	4313      	orrs	r3, r2
 800309a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	695b      	ldr	r3, [r3, #20]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	689a      	ldr	r2, [r3, #8]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	4a07      	ldr	r2, [pc, #28]	; (80030e0 <TIM_Base_SetConfig+0xb8>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d103      	bne.n	80030d0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	691a      	ldr	r2, [r3, #16]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	615a      	str	r2, [r3, #20]
}
 80030d6:	bf00      	nop
 80030d8:	3714      	adds	r7, #20
 80030da:	46bd      	mov	sp, r7
 80030dc:	bc80      	pop	{r7}
 80030de:	4770      	bx	lr
 80030e0:	40012c00 	.word	0x40012c00
 80030e4:	40000400 	.word	0x40000400
 80030e8:	40000800 	.word	0x40000800

080030ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b087      	sub	sp, #28
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a1b      	ldr	r3, [r3, #32]
 80030fa:	f023 0201 	bic.w	r2, r3, #1
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a1b      	ldr	r3, [r3, #32]
 8003106:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800311a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f023 0303 	bic.w	r3, r3, #3
 8003122:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68fa      	ldr	r2, [r7, #12]
 800312a:	4313      	orrs	r3, r2
 800312c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	f023 0302 	bic.w	r3, r3, #2
 8003134:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	697a      	ldr	r2, [r7, #20]
 800313c:	4313      	orrs	r3, r2
 800313e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4a1c      	ldr	r2, [pc, #112]	; (80031b4 <TIM_OC1_SetConfig+0xc8>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d10c      	bne.n	8003162 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	f023 0308 	bic.w	r3, r3, #8
 800314e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	697a      	ldr	r2, [r7, #20]
 8003156:	4313      	orrs	r3, r2
 8003158:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	f023 0304 	bic.w	r3, r3, #4
 8003160:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a13      	ldr	r2, [pc, #76]	; (80031b4 <TIM_OC1_SetConfig+0xc8>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d111      	bne.n	800318e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003170:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003178:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	693a      	ldr	r2, [r7, #16]
 8003180:	4313      	orrs	r3, r2
 8003182:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	699b      	ldr	r3, [r3, #24]
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	4313      	orrs	r3, r2
 800318c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	68fa      	ldr	r2, [r7, #12]
 8003198:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	685a      	ldr	r2, [r3, #4]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	697a      	ldr	r2, [r7, #20]
 80031a6:	621a      	str	r2, [r3, #32]
}
 80031a8:	bf00      	nop
 80031aa:	371c      	adds	r7, #28
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bc80      	pop	{r7}
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	40012c00 	.word	0x40012c00

080031b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b087      	sub	sp, #28
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a1b      	ldr	r3, [r3, #32]
 80031c6:	f023 0210 	bic.w	r2, r3, #16
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a1b      	ldr	r3, [r3, #32]
 80031d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	699b      	ldr	r3, [r3, #24]
 80031de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	021b      	lsls	r3, r3, #8
 80031f6:	68fa      	ldr	r2, [r7, #12]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	f023 0320 	bic.w	r3, r3, #32
 8003202:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	011b      	lsls	r3, r3, #4
 800320a:	697a      	ldr	r2, [r7, #20]
 800320c:	4313      	orrs	r3, r2
 800320e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4a1d      	ldr	r2, [pc, #116]	; (8003288 <TIM_OC2_SetConfig+0xd0>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d10d      	bne.n	8003234 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800321e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	011b      	lsls	r3, r3, #4
 8003226:	697a      	ldr	r2, [r7, #20]
 8003228:	4313      	orrs	r3, r2
 800322a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003232:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4a14      	ldr	r2, [pc, #80]	; (8003288 <TIM_OC2_SetConfig+0xd0>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d113      	bne.n	8003264 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003242:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800324a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	695b      	ldr	r3, [r3, #20]
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	693a      	ldr	r2, [r7, #16]
 8003254:	4313      	orrs	r3, r2
 8003256:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	699b      	ldr	r3, [r3, #24]
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	693a      	ldr	r2, [r7, #16]
 8003260:	4313      	orrs	r3, r2
 8003262:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	693a      	ldr	r2, [r7, #16]
 8003268:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	68fa      	ldr	r2, [r7, #12]
 800326e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685a      	ldr	r2, [r3, #4]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	697a      	ldr	r2, [r7, #20]
 800327c:	621a      	str	r2, [r3, #32]
}
 800327e:	bf00      	nop
 8003280:	371c      	adds	r7, #28
 8003282:	46bd      	mov	sp, r7
 8003284:	bc80      	pop	{r7}
 8003286:	4770      	bx	lr
 8003288:	40012c00 	.word	0x40012c00

0800328c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800328c:	b480      	push	{r7}
 800328e:	b087      	sub	sp, #28
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a1b      	ldr	r3, [r3, #32]
 800329a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a1b      	ldr	r3, [r3, #32]
 80032a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	69db      	ldr	r3, [r3, #28]
 80032b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f023 0303 	bic.w	r3, r3, #3
 80032c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68fa      	ldr	r2, [r7, #12]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80032d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	021b      	lsls	r3, r3, #8
 80032dc:	697a      	ldr	r2, [r7, #20]
 80032de:	4313      	orrs	r3, r2
 80032e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a1d      	ldr	r2, [pc, #116]	; (800335c <TIM_OC3_SetConfig+0xd0>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d10d      	bne.n	8003306 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80032f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	021b      	lsls	r3, r3, #8
 80032f8:	697a      	ldr	r2, [r7, #20]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003304:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a14      	ldr	r2, [pc, #80]	; (800335c <TIM_OC3_SetConfig+0xd0>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d113      	bne.n	8003336 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003314:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800331c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	011b      	lsls	r3, r3, #4
 8003324:	693a      	ldr	r2, [r7, #16]
 8003326:	4313      	orrs	r3, r2
 8003328:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	011b      	lsls	r3, r3, #4
 8003330:	693a      	ldr	r2, [r7, #16]
 8003332:	4313      	orrs	r3, r2
 8003334:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	693a      	ldr	r2, [r7, #16]
 800333a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	68fa      	ldr	r2, [r7, #12]
 8003340:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	685a      	ldr	r2, [r3, #4]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	697a      	ldr	r2, [r7, #20]
 800334e:	621a      	str	r2, [r3, #32]
}
 8003350:	bf00      	nop
 8003352:	371c      	adds	r7, #28
 8003354:	46bd      	mov	sp, r7
 8003356:	bc80      	pop	{r7}
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	40012c00 	.word	0x40012c00

08003360 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003360:	b480      	push	{r7}
 8003362:	b087      	sub	sp, #28
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a1b      	ldr	r3, [r3, #32]
 800336e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a1b      	ldr	r3, [r3, #32]
 800337a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	69db      	ldr	r3, [r3, #28]
 8003386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800338e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003396:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	021b      	lsls	r3, r3, #8
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80033aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	031b      	lsls	r3, r3, #12
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4a0f      	ldr	r2, [pc, #60]	; (80033f8 <TIM_OC4_SetConfig+0x98>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d109      	bne.n	80033d4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	695b      	ldr	r3, [r3, #20]
 80033cc:	019b      	lsls	r3, r3, #6
 80033ce:	697a      	ldr	r2, [r7, #20]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	697a      	ldr	r2, [r7, #20]
 80033d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	685a      	ldr	r2, [r3, #4]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	693a      	ldr	r2, [r7, #16]
 80033ec:	621a      	str	r2, [r3, #32]
}
 80033ee:	bf00      	nop
 80033f0:	371c      	adds	r7, #28
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bc80      	pop	{r7}
 80033f6:	4770      	bx	lr
 80033f8:	40012c00 	.word	0x40012c00

080033fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b087      	sub	sp, #28
 8003400:	af00      	add	r7, sp, #0
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	f003 031f 	and.w	r3, r3, #31
 800340e:	2201      	movs	r2, #1
 8003410:	fa02 f303 	lsl.w	r3, r2, r3
 8003414:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	6a1a      	ldr	r2, [r3, #32]
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	43db      	mvns	r3, r3
 800341e:	401a      	ands	r2, r3
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6a1a      	ldr	r2, [r3, #32]
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	f003 031f 	and.w	r3, r3, #31
 800342e:	6879      	ldr	r1, [r7, #4]
 8003430:	fa01 f303 	lsl.w	r3, r1, r3
 8003434:	431a      	orrs	r2, r3
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	621a      	str	r2, [r3, #32]
}
 800343a:	bf00      	nop
 800343c:	371c      	adds	r7, #28
 800343e:	46bd      	mov	sp, r7
 8003440:	bc80      	pop	{r7}
 8003442:	4770      	bx	lr

08003444 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003444:	b480      	push	{r7}
 8003446:	b085      	sub	sp, #20
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003454:	2b01      	cmp	r3, #1
 8003456:	d101      	bne.n	800345c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003458:	2302      	movs	r3, #2
 800345a:	e046      	b.n	80034ea <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2202      	movs	r2, #2
 8003468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003482:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68fa      	ldr	r2, [r7, #12]
 800348a:	4313      	orrs	r3, r2
 800348c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a16      	ldr	r2, [pc, #88]	; (80034f4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d00e      	beq.n	80034be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034a8:	d009      	beq.n	80034be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a12      	ldr	r2, [pc, #72]	; (80034f8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d004      	beq.n	80034be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a10      	ldr	r2, [pc, #64]	; (80034fc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d10c      	bne.n	80034d8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	68ba      	ldr	r2, [r7, #8]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68ba      	ldr	r2, [r7, #8]
 80034d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3714      	adds	r7, #20
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bc80      	pop	{r7}
 80034f2:	4770      	bx	lr
 80034f4:	40012c00 	.word	0x40012c00
 80034f8:	40000400 	.word	0x40000400
 80034fc:	40000800 	.word	0x40000800

08003500 <__libc_init_array>:
 8003500:	b570      	push	{r4, r5, r6, lr}
 8003502:	2600      	movs	r6, #0
 8003504:	4d0c      	ldr	r5, [pc, #48]	; (8003538 <__libc_init_array+0x38>)
 8003506:	4c0d      	ldr	r4, [pc, #52]	; (800353c <__libc_init_array+0x3c>)
 8003508:	1b64      	subs	r4, r4, r5
 800350a:	10a4      	asrs	r4, r4, #2
 800350c:	42a6      	cmp	r6, r4
 800350e:	d109      	bne.n	8003524 <__libc_init_array+0x24>
 8003510:	f000 f822 	bl	8003558 <_init>
 8003514:	2600      	movs	r6, #0
 8003516:	4d0a      	ldr	r5, [pc, #40]	; (8003540 <__libc_init_array+0x40>)
 8003518:	4c0a      	ldr	r4, [pc, #40]	; (8003544 <__libc_init_array+0x44>)
 800351a:	1b64      	subs	r4, r4, r5
 800351c:	10a4      	asrs	r4, r4, #2
 800351e:	42a6      	cmp	r6, r4
 8003520:	d105      	bne.n	800352e <__libc_init_array+0x2e>
 8003522:	bd70      	pop	{r4, r5, r6, pc}
 8003524:	f855 3b04 	ldr.w	r3, [r5], #4
 8003528:	4798      	blx	r3
 800352a:	3601      	adds	r6, #1
 800352c:	e7ee      	b.n	800350c <__libc_init_array+0xc>
 800352e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003532:	4798      	blx	r3
 8003534:	3601      	adds	r6, #1
 8003536:	e7f2      	b.n	800351e <__libc_init_array+0x1e>
 8003538:	08003598 	.word	0x08003598
 800353c:	08003598 	.word	0x08003598
 8003540:	08003598 	.word	0x08003598
 8003544:	0800359c 	.word	0x0800359c

08003548 <memset>:
 8003548:	4603      	mov	r3, r0
 800354a:	4402      	add	r2, r0
 800354c:	4293      	cmp	r3, r2
 800354e:	d100      	bne.n	8003552 <memset+0xa>
 8003550:	4770      	bx	lr
 8003552:	f803 1b01 	strb.w	r1, [r3], #1
 8003556:	e7f9      	b.n	800354c <memset+0x4>

08003558 <_init>:
 8003558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800355a:	bf00      	nop
 800355c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800355e:	bc08      	pop	{r3}
 8003560:	469e      	mov	lr, r3
 8003562:	4770      	bx	lr

08003564 <_fini>:
 8003564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003566:	bf00      	nop
 8003568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800356a:	bc08      	pop	{r3}
 800356c:	469e      	mov	lr, r3
 800356e:	4770      	bx	lr
