
RobotAlgoritmoSasi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007940  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08007a50  08007a50  00017a50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007aa8  08007aa8  000200ac  2**0
                  CONTENTS
  4 .ARM          00000000  08007aa8  08007aa8  000200ac  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007aa8  08007aa8  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007aa8  08007aa8  00017aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007aac  08007aac  00017aac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  08007ab0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c68  200000ac  08007b5c  000200ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001d14  08007b5c  00021d14  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000daca  00000000  00000000  000200d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002815  00000000  00000000  0002db9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec8  00000000  00000000  000303b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000da0  00000000  00000000  00031280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019774  00000000  00000000  00032020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000116c9  00000000  00000000  0004b794  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090a92  00000000  00000000  0005ce5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ed8ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041d0  00000000  00000000  000ed940  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000ac 	.word	0x200000ac
 800012c:	00000000 	.word	0x00000000
 8000130:	08007a38 	.word	0x08007a38

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000b0 	.word	0x200000b0
 800014c:	08007a38 	.word	0x08007a38

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2f>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a30:	bf24      	itt	cs
 8000a32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a3a:	d90d      	bls.n	8000a58 <__aeabi_d2f+0x30>
 8000a3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a50:	bf08      	it	eq
 8000a52:	f020 0001 	biceq.w	r0, r0, #1
 8000a56:	4770      	bx	lr
 8000a58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a5c:	d121      	bne.n	8000aa2 <__aeabi_d2f+0x7a>
 8000a5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a62:	bfbc      	itt	lt
 8000a64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	4770      	bxlt	lr
 8000a6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a72:	f1c2 0218 	rsb	r2, r2, #24
 8000a76:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a82:	bf18      	it	ne
 8000a84:	f040 0001 	orrne.w	r0, r0, #1
 8000a88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a94:	ea40 000c 	orr.w	r0, r0, ip
 8000a98:	fa23 f302 	lsr.w	r3, r3, r2
 8000a9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa0:	e7cc      	b.n	8000a3c <__aeabi_d2f+0x14>
 8000aa2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aa6:	d107      	bne.n	8000ab8 <__aeabi_d2f+0x90>
 8000aa8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aac:	bf1e      	ittt	ne
 8000aae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ab2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ab6:	4770      	bxne	lr
 8000ab8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	; 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	3a01      	subs	r2, #1
 8000b82:	bf28      	it	cs
 8000b84:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b88:	d2ed      	bcs.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d36:	2afd      	cmp	r2, #253	; 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	; 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	; 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	; 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <__gesf2>:
 8000f84:	f04f 3cff 	mov.w	ip, #4294967295
 8000f88:	e006      	b.n	8000f98 <__cmpsf2+0x4>
 8000f8a:	bf00      	nop

08000f8c <__lesf2>:
 8000f8c:	f04f 0c01 	mov.w	ip, #1
 8000f90:	e002      	b.n	8000f98 <__cmpsf2+0x4>
 8000f92:	bf00      	nop

08000f94 <__cmpsf2>:
 8000f94:	f04f 0c01 	mov.w	ip, #1
 8000f98:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f9c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fa0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fa4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fa8:	bf18      	it	ne
 8000faa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fae:	d011      	beq.n	8000fd4 <__cmpsf2+0x40>
 8000fb0:	b001      	add	sp, #4
 8000fb2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fb6:	bf18      	it	ne
 8000fb8:	ea90 0f01 	teqne	r0, r1
 8000fbc:	bf58      	it	pl
 8000fbe:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fc2:	bf88      	it	hi
 8000fc4:	17c8      	asrhi	r0, r1, #31
 8000fc6:	bf38      	it	cc
 8000fc8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fcc:	bf18      	it	ne
 8000fce:	f040 0001 	orrne.w	r0, r0, #1
 8000fd2:	4770      	bx	lr
 8000fd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fd8:	d102      	bne.n	8000fe0 <__cmpsf2+0x4c>
 8000fda:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fde:	d105      	bne.n	8000fec <__cmpsf2+0x58>
 8000fe0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fe4:	d1e4      	bne.n	8000fb0 <__cmpsf2+0x1c>
 8000fe6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fea:	d0e1      	beq.n	8000fb0 <__cmpsf2+0x1c>
 8000fec:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_cfrcmple>:
 8000ff4:	4684      	mov	ip, r0
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	4661      	mov	r1, ip
 8000ffa:	e7ff      	b.n	8000ffc <__aeabi_cfcmpeq>

08000ffc <__aeabi_cfcmpeq>:
 8000ffc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ffe:	f7ff ffc9 	bl	8000f94 <__cmpsf2>
 8001002:	2800      	cmp	r0, #0
 8001004:	bf48      	it	mi
 8001006:	f110 0f00 	cmnmi.w	r0, #0
 800100a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800100c <__aeabi_fcmpeq>:
 800100c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001010:	f7ff fff4 	bl	8000ffc <__aeabi_cfcmpeq>
 8001014:	bf0c      	ite	eq
 8001016:	2001      	moveq	r0, #1
 8001018:	2000      	movne	r0, #0
 800101a:	f85d fb08 	ldr.w	pc, [sp], #8
 800101e:	bf00      	nop

08001020 <__aeabi_fcmplt>:
 8001020:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001024:	f7ff ffea 	bl	8000ffc <__aeabi_cfcmpeq>
 8001028:	bf34      	ite	cc
 800102a:	2001      	movcc	r0, #1
 800102c:	2000      	movcs	r0, #0
 800102e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001032:	bf00      	nop

08001034 <__aeabi_fcmple>:
 8001034:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001038:	f7ff ffe0 	bl	8000ffc <__aeabi_cfcmpeq>
 800103c:	bf94      	ite	ls
 800103e:	2001      	movls	r0, #1
 8001040:	2000      	movhi	r0, #0
 8001042:	f85d fb08 	ldr.w	pc, [sp], #8
 8001046:	bf00      	nop

08001048 <__aeabi_fcmpge>:
 8001048:	f84d ed08 	str.w	lr, [sp, #-8]!
 800104c:	f7ff ffd2 	bl	8000ff4 <__aeabi_cfrcmple>
 8001050:	bf94      	ite	ls
 8001052:	2001      	movls	r0, #1
 8001054:	2000      	movhi	r0, #0
 8001056:	f85d fb08 	ldr.w	pc, [sp], #8
 800105a:	bf00      	nop

0800105c <__aeabi_fcmpgt>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff ffc8 	bl	8000ff4 <__aeabi_cfrcmple>
 8001064:	bf34      	ite	cc
 8001066:	2001      	movcc	r0, #1
 8001068:	2000      	movcs	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_f2iz>:
 8001070:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001074:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001078:	d30f      	bcc.n	800109a <__aeabi_f2iz+0x2a>
 800107a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800107e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001082:	d90d      	bls.n	80010a0 <__aeabi_f2iz+0x30>
 8001084:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001088:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800108c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001090:	fa23 f002 	lsr.w	r0, r3, r2
 8001094:	bf18      	it	ne
 8001096:	4240      	negne	r0, r0
 8001098:	4770      	bx	lr
 800109a:	f04f 0000 	mov.w	r0, #0
 800109e:	4770      	bx	lr
 80010a0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010a4:	d101      	bne.n	80010aa <__aeabi_f2iz+0x3a>
 80010a6:	0242      	lsls	r2, r0, #9
 80010a8:	d105      	bne.n	80010b6 <__aeabi_f2iz+0x46>
 80010aa:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010ae:	bf08      	it	eq
 80010b0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80010b4:	4770      	bx	lr
 80010b6:	f04f 0000 	mov.w	r0, #0
 80010ba:	4770      	bx	lr

080010bc <MX_ADC1_Init>:
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	1d3b      	adds	r3, r7, #4
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	4b2e      	ldr	r3, [pc, #184]	; (8001188 <MX_ADC1_Init+0xcc>)
 80010ce:	4a2f      	ldr	r2, [pc, #188]	; (800118c <MX_ADC1_Init+0xd0>)
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	4b2d      	ldr	r3, [pc, #180]	; (8001188 <MX_ADC1_Init+0xcc>)
 80010d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010d8:	609a      	str	r2, [r3, #8]
 80010da:	4b2b      	ldr	r3, [pc, #172]	; (8001188 <MX_ADC1_Init+0xcc>)
 80010dc:	2201      	movs	r2, #1
 80010de:	731a      	strb	r2, [r3, #12]
 80010e0:	4b29      	ldr	r3, [pc, #164]	; (8001188 <MX_ADC1_Init+0xcc>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	751a      	strb	r2, [r3, #20]
 80010e6:	4b28      	ldr	r3, [pc, #160]	; (8001188 <MX_ADC1_Init+0xcc>)
 80010e8:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80010ec:	61da      	str	r2, [r3, #28]
 80010ee:	4b26      	ldr	r3, [pc, #152]	; (8001188 <MX_ADC1_Init+0xcc>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	605a      	str	r2, [r3, #4]
 80010f4:	4b24      	ldr	r3, [pc, #144]	; (8001188 <MX_ADC1_Init+0xcc>)
 80010f6:	2204      	movs	r2, #4
 80010f8:	611a      	str	r2, [r3, #16]
 80010fa:	4823      	ldr	r0, [pc, #140]	; (8001188 <MX_ADC1_Init+0xcc>)
 80010fc:	f002 fd72 	bl	8003be4 <HAL_ADC_Init>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_ADC1_Init+0x4e>
 8001106:	f002 f837 	bl	8003178 <Error_Handler>
 800110a:	2300      	movs	r3, #0
 800110c:	607b      	str	r3, [r7, #4]
 800110e:	2301      	movs	r3, #1
 8001110:	60bb      	str	r3, [r7, #8]
 8001112:	2303      	movs	r3, #3
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	1d3b      	adds	r3, r7, #4
 8001118:	4619      	mov	r1, r3
 800111a:	481b      	ldr	r0, [pc, #108]	; (8001188 <MX_ADC1_Init+0xcc>)
 800111c:	f002 ff2a 	bl	8003f74 <HAL_ADC_ConfigChannel>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_ADC1_Init+0x6e>
 8001126:	f002 f827 	bl	8003178 <Error_Handler>
 800112a:	2301      	movs	r3, #1
 800112c:	607b      	str	r3, [r7, #4]
 800112e:	2302      	movs	r3, #2
 8001130:	60bb      	str	r3, [r7, #8]
 8001132:	1d3b      	adds	r3, r7, #4
 8001134:	4619      	mov	r1, r3
 8001136:	4814      	ldr	r0, [pc, #80]	; (8001188 <MX_ADC1_Init+0xcc>)
 8001138:	f002 ff1c 	bl	8003f74 <HAL_ADC_ConfigChannel>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_ADC1_Init+0x8a>
 8001142:	f002 f819 	bl	8003178 <Error_Handler>
 8001146:	2302      	movs	r3, #2
 8001148:	607b      	str	r3, [r7, #4]
 800114a:	2303      	movs	r3, #3
 800114c:	60bb      	str	r3, [r7, #8]
 800114e:	1d3b      	adds	r3, r7, #4
 8001150:	4619      	mov	r1, r3
 8001152:	480d      	ldr	r0, [pc, #52]	; (8001188 <MX_ADC1_Init+0xcc>)
 8001154:	f002 ff0e 	bl	8003f74 <HAL_ADC_ConfigChannel>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_ADC1_Init+0xa6>
 800115e:	f002 f80b 	bl	8003178 <Error_Handler>
 8001162:	2303      	movs	r3, #3
 8001164:	607b      	str	r3, [r7, #4]
 8001166:	2304      	movs	r3, #4
 8001168:	60bb      	str	r3, [r7, #8]
 800116a:	1d3b      	adds	r3, r7, #4
 800116c:	4619      	mov	r1, r3
 800116e:	4806      	ldr	r0, [pc, #24]	; (8001188 <MX_ADC1_Init+0xcc>)
 8001170:	f002 ff00 	bl	8003f74 <HAL_ADC_ConfigChannel>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_ADC1_Init+0xc2>
 800117a:	f001 fffd 	bl	8003178 <Error_Handler>
 800117e:	bf00      	nop
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	200000c8 	.word	0x200000c8
 800118c:	40012400 	.word	0x40012400

08001190 <HAL_ADC_MspInit>:
 8001190:	b580      	push	{r7, lr}
 8001192:	b088      	sub	sp, #32
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	f107 0310 	add.w	r3, r7, #16
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a28      	ldr	r2, [pc, #160]	; (800124c <HAL_ADC_MspInit+0xbc>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d149      	bne.n	8001244 <HAL_ADC_MspInit+0xb4>
 80011b0:	4b27      	ldr	r3, [pc, #156]	; (8001250 <HAL_ADC_MspInit+0xc0>)
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	4a26      	ldr	r2, [pc, #152]	; (8001250 <HAL_ADC_MspInit+0xc0>)
 80011b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011ba:	6193      	str	r3, [r2, #24]
 80011bc:	4b24      	ldr	r3, [pc, #144]	; (8001250 <HAL_ADC_MspInit+0xc0>)
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	4b21      	ldr	r3, [pc, #132]	; (8001250 <HAL_ADC_MspInit+0xc0>)
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	4a20      	ldr	r2, [pc, #128]	; (8001250 <HAL_ADC_MspInit+0xc0>)
 80011ce:	f043 0304 	orr.w	r3, r3, #4
 80011d2:	6193      	str	r3, [r2, #24]
 80011d4:	4b1e      	ldr	r3, [pc, #120]	; (8001250 <HAL_ADC_MspInit+0xc0>)
 80011d6:	699b      	ldr	r3, [r3, #24]
 80011d8:	f003 0304 	and.w	r3, r3, #4
 80011dc:	60bb      	str	r3, [r7, #8]
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	230f      	movs	r3, #15
 80011e2:	613b      	str	r3, [r7, #16]
 80011e4:	2303      	movs	r3, #3
 80011e6:	617b      	str	r3, [r7, #20]
 80011e8:	f107 0310 	add.w	r3, r7, #16
 80011ec:	4619      	mov	r1, r3
 80011ee:	4819      	ldr	r0, [pc, #100]	; (8001254 <HAL_ADC_MspInit+0xc4>)
 80011f0:	f003 fc66 	bl	8004ac0 <HAL_GPIO_Init>
 80011f4:	4b18      	ldr	r3, [pc, #96]	; (8001258 <HAL_ADC_MspInit+0xc8>)
 80011f6:	4a19      	ldr	r2, [pc, #100]	; (800125c <HAL_ADC_MspInit+0xcc>)
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	4b17      	ldr	r3, [pc, #92]	; (8001258 <HAL_ADC_MspInit+0xc8>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	4b15      	ldr	r3, [pc, #84]	; (8001258 <HAL_ADC_MspInit+0xc8>)
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
 8001206:	4b14      	ldr	r3, [pc, #80]	; (8001258 <HAL_ADC_MspInit+0xc8>)
 8001208:	2280      	movs	r2, #128	; 0x80
 800120a:	60da      	str	r2, [r3, #12]
 800120c:	4b12      	ldr	r3, [pc, #72]	; (8001258 <HAL_ADC_MspInit+0xc8>)
 800120e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001212:	611a      	str	r2, [r3, #16]
 8001214:	4b10      	ldr	r3, [pc, #64]	; (8001258 <HAL_ADC_MspInit+0xc8>)
 8001216:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800121a:	615a      	str	r2, [r3, #20]
 800121c:	4b0e      	ldr	r3, [pc, #56]	; (8001258 <HAL_ADC_MspInit+0xc8>)
 800121e:	2220      	movs	r2, #32
 8001220:	619a      	str	r2, [r3, #24]
 8001222:	4b0d      	ldr	r3, [pc, #52]	; (8001258 <HAL_ADC_MspInit+0xc8>)
 8001224:	2200      	movs	r2, #0
 8001226:	61da      	str	r2, [r3, #28]
 8001228:	480b      	ldr	r0, [pc, #44]	; (8001258 <HAL_ADC_MspInit+0xc8>)
 800122a:	f003 f9ab 	bl	8004584 <HAL_DMA_Init>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <HAL_ADC_MspInit+0xa8>
 8001234:	f001 ffa0 	bl	8003178 <Error_Handler>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	4a07      	ldr	r2, [pc, #28]	; (8001258 <HAL_ADC_MspInit+0xc8>)
 800123c:	621a      	str	r2, [r3, #32]
 800123e:	4a06      	ldr	r2, [pc, #24]	; (8001258 <HAL_ADC_MspInit+0xc8>)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6253      	str	r3, [r2, #36]	; 0x24
 8001244:	bf00      	nop
 8001246:	3720      	adds	r7, #32
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	40012400 	.word	0x40012400
 8001250:	40021000 	.word	0x40021000
 8001254:	40010800 	.word	0x40010800
 8001258:	200000f8 	.word	0x200000f8
 800125c:	40020008 	.word	0x40020008

08001260 <MX_DMA_Init>:
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	4b0c      	ldr	r3, [pc, #48]	; (8001298 <MX_DMA_Init+0x38>)
 8001268:	695b      	ldr	r3, [r3, #20]
 800126a:	4a0b      	ldr	r2, [pc, #44]	; (8001298 <MX_DMA_Init+0x38>)
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	6153      	str	r3, [r2, #20]
 8001272:	4b09      	ldr	r3, [pc, #36]	; (8001298 <MX_DMA_Init+0x38>)
 8001274:	695b      	ldr	r3, [r3, #20]
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	607b      	str	r3, [r7, #4]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2200      	movs	r2, #0
 8001280:	2100      	movs	r1, #0
 8001282:	200b      	movs	r0, #11
 8001284:	f003 f947 	bl	8004516 <HAL_NVIC_SetPriority>
 8001288:	200b      	movs	r0, #11
 800128a:	f003 f960 	bl	800454e <HAL_NVIC_EnableIRQ>
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40021000 	.word	0x40021000

0800129c <MX_GPIO_Init>:
 800129c:	b580      	push	{r7, lr}
 800129e:	b088      	sub	sp, #32
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	f107 0310 	add.w	r3, r7, #16
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	605a      	str	r2, [r3, #4]
 80012ac:	609a      	str	r2, [r3, #8]
 80012ae:	60da      	str	r2, [r3, #12]
 80012b0:	4b3f      	ldr	r3, [pc, #252]	; (80013b0 <MX_GPIO_Init+0x114>)
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	4a3e      	ldr	r2, [pc, #248]	; (80013b0 <MX_GPIO_Init+0x114>)
 80012b6:	f043 0310 	orr.w	r3, r3, #16
 80012ba:	6193      	str	r3, [r2, #24]
 80012bc:	4b3c      	ldr	r3, [pc, #240]	; (80013b0 <MX_GPIO_Init+0x114>)
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	f003 0310 	and.w	r3, r3, #16
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	4b39      	ldr	r3, [pc, #228]	; (80013b0 <MX_GPIO_Init+0x114>)
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	4a38      	ldr	r2, [pc, #224]	; (80013b0 <MX_GPIO_Init+0x114>)
 80012ce:	f043 0320 	orr.w	r3, r3, #32
 80012d2:	6193      	str	r3, [r2, #24]
 80012d4:	4b36      	ldr	r3, [pc, #216]	; (80013b0 <MX_GPIO_Init+0x114>)
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	f003 0320 	and.w	r3, r3, #32
 80012dc:	60bb      	str	r3, [r7, #8]
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	4b33      	ldr	r3, [pc, #204]	; (80013b0 <MX_GPIO_Init+0x114>)
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	4a32      	ldr	r2, [pc, #200]	; (80013b0 <MX_GPIO_Init+0x114>)
 80012e6:	f043 0304 	orr.w	r3, r3, #4
 80012ea:	6193      	str	r3, [r2, #24]
 80012ec:	4b30      	ldr	r3, [pc, #192]	; (80013b0 <MX_GPIO_Init+0x114>)
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	f003 0304 	and.w	r3, r3, #4
 80012f4:	607b      	str	r3, [r7, #4]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4b2d      	ldr	r3, [pc, #180]	; (80013b0 <MX_GPIO_Init+0x114>)
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	4a2c      	ldr	r2, [pc, #176]	; (80013b0 <MX_GPIO_Init+0x114>)
 80012fe:	f043 0308 	orr.w	r3, r3, #8
 8001302:	6193      	str	r3, [r2, #24]
 8001304:	4b2a      	ldr	r3, [pc, #168]	; (80013b0 <MX_GPIO_Init+0x114>)
 8001306:	699b      	ldr	r3, [r3, #24]
 8001308:	f003 0308 	and.w	r3, r3, #8
 800130c:	603b      	str	r3, [r7, #0]
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	2200      	movs	r2, #0
 8001312:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001316:	4827      	ldr	r0, [pc, #156]	; (80013b4 <MX_GPIO_Init+0x118>)
 8001318:	f003 fd6d 	bl	8004df6 <HAL_GPIO_WritePin>
 800131c:	2200      	movs	r2, #0
 800131e:	f248 0118 	movw	r1, #32792	; 0x8018
 8001322:	4825      	ldr	r0, [pc, #148]	; (80013b8 <MX_GPIO_Init+0x11c>)
 8001324:	f003 fd67 	bl	8004df6 <HAL_GPIO_WritePin>
 8001328:	2200      	movs	r2, #0
 800132a:	f44f 4118 	mov.w	r1, #38912	; 0x9800
 800132e:	4823      	ldr	r0, [pc, #140]	; (80013bc <MX_GPIO_Init+0x120>)
 8001330:	f003 fd61 	bl	8004df6 <HAL_GPIO_WritePin>
 8001334:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001338:	613b      	str	r3, [r7, #16]
 800133a:	2301      	movs	r3, #1
 800133c:	617b      	str	r3, [r7, #20]
 800133e:	2300      	movs	r3, #0
 8001340:	61bb      	str	r3, [r7, #24]
 8001342:	2302      	movs	r3, #2
 8001344:	61fb      	str	r3, [r7, #28]
 8001346:	f107 0310 	add.w	r3, r7, #16
 800134a:	4619      	mov	r1, r3
 800134c:	4819      	ldr	r0, [pc, #100]	; (80013b4 <MX_GPIO_Init+0x118>)
 800134e:	f003 fbb7 	bl	8004ac0 <HAL_GPIO_Init>
 8001352:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001356:	613b      	str	r3, [r7, #16]
 8001358:	2300      	movs	r3, #0
 800135a:	617b      	str	r3, [r7, #20]
 800135c:	2300      	movs	r3, #0
 800135e:	61bb      	str	r3, [r7, #24]
 8001360:	f107 0310 	add.w	r3, r7, #16
 8001364:	4619      	mov	r1, r3
 8001366:	4814      	ldr	r0, [pc, #80]	; (80013b8 <MX_GPIO_Init+0x11c>)
 8001368:	f003 fbaa 	bl	8004ac0 <HAL_GPIO_Init>
 800136c:	f248 0318 	movw	r3, #32792	; 0x8018
 8001370:	613b      	str	r3, [r7, #16]
 8001372:	2301      	movs	r3, #1
 8001374:	617b      	str	r3, [r7, #20]
 8001376:	2300      	movs	r3, #0
 8001378:	61bb      	str	r3, [r7, #24]
 800137a:	2302      	movs	r3, #2
 800137c:	61fb      	str	r3, [r7, #28]
 800137e:	f107 0310 	add.w	r3, r7, #16
 8001382:	4619      	mov	r1, r3
 8001384:	480c      	ldr	r0, [pc, #48]	; (80013b8 <MX_GPIO_Init+0x11c>)
 8001386:	f003 fb9b 	bl	8004ac0 <HAL_GPIO_Init>
 800138a:	f44f 4318 	mov.w	r3, #38912	; 0x9800
 800138e:	613b      	str	r3, [r7, #16]
 8001390:	2301      	movs	r3, #1
 8001392:	617b      	str	r3, [r7, #20]
 8001394:	2300      	movs	r3, #0
 8001396:	61bb      	str	r3, [r7, #24]
 8001398:	2302      	movs	r3, #2
 800139a:	61fb      	str	r3, [r7, #28]
 800139c:	f107 0310 	add.w	r3, r7, #16
 80013a0:	4619      	mov	r1, r3
 80013a2:	4806      	ldr	r0, [pc, #24]	; (80013bc <MX_GPIO_Init+0x120>)
 80013a4:	f003 fb8c 	bl	8004ac0 <HAL_GPIO_Init>
 80013a8:	bf00      	nop
 80013aa:	3720      	adds	r7, #32
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	40021000 	.word	0x40021000
 80013b4:	40011000 	.word	0x40011000
 80013b8:	40010c00 	.word	0x40010c00
 80013bc:	40010800 	.word	0x40010800

080013c0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80013c4:	f002 fb88 	bl	8003ad8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80013c8:	f000 f856 	bl	8001478 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80013cc:	f7ff ff66 	bl	800129c <MX_GPIO_Init>
	MX_DMA_Init();
 80013d0:	f7ff ff46 	bl	8001260 <MX_DMA_Init>
	MX_TIM4_Init();
 80013d4:	f002 f9ae 	bl	8003734 <MX_TIM4_Init>
	MX_TIM3_Init();
 80013d8:	f002 f958 	bl	800368c <MX_TIM3_Init>
	MX_ADC1_Init();
 80013dc:	f7ff fe6e 	bl	80010bc <MX_ADC1_Init>
	MX_USART1_UART_Init();
 80013e0:	f002 fad6 	bl	8003990 <MX_USART1_UART_Init>
	MX_TIM2_Init();
 80013e4:	f002 f8ee 	bl	80035c4 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80013e8:	2108      	movs	r1, #8
 80013ea:	481a      	ldr	r0, [pc, #104]	; (8001454 <main+0x94>)
 80013ec:	f004 fa3c 	bl	8005868 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80013f0:	210c      	movs	r1, #12
 80013f2:	4818      	ldr	r0, [pc, #96]	; (8001454 <main+0x94>)
 80013f4:	f004 fa38 	bl	8005868 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80013f8:	213c      	movs	r1, #60	; 0x3c
 80013fa:	4817      	ldr	r0, [pc, #92]	; (8001458 <main+0x98>)
 80013fc:	f004 fb78 	bl	8005af0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001400:	213c      	movs	r1, #60	; 0x3c
 8001402:	4816      	ldr	r0, [pc, #88]	; (800145c <main+0x9c>)
 8001404:	f004 fb74 	bl	8005af0 <HAL_TIM_Encoder_Start>
	HAL_GPIO_WritePin(STBY, GPIO_PIN_SET);
 8001408:	2201      	movs	r2, #1
 800140a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800140e:	4814      	ldr	r0, [pc, #80]	; (8001460 <main+0xa0>)
 8001410:	f003 fcf1 	bl	8004df6 <HAL_GPIO_WritePin>
	TIM2->CCR3 = 15000;
 8001414:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001418:	f643 2298 	movw	r2, #15000	; 0x3a98
 800141c:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM2->CCR4 = 15000;
 800141e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001422:	f643 2298 	movw	r2, #15000	; 0x3a98
 8001426:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_buf, ADC_BUF_LEN);
 8001428:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800142c:	490d      	ldr	r1, [pc, #52]	; (8001464 <main+0xa4>)
 800142e:	480e      	ldr	r0, [pc, #56]	; (8001468 <main+0xa8>)
 8001430:	f002 fcb0 	bl	8003d94 <HAL_ADC_Start_DMA>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8001434:	2200      	movs	r2, #0
 8001436:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800143a:	480c      	ldr	r0, [pc, #48]	; (800146c <main+0xac>)
 800143c:	f003 fcdb 	bl	8004df6 <HAL_GPIO_WritePin>
	TIM3->CNT = 0;
 8001440:	4b0b      	ldr	r3, [pc, #44]	; (8001470 <main+0xb0>)
 8001442:	2200      	movs	r2, #0
 8001444:	625a      	str	r2, [r3, #36]	; 0x24
	TIM4->CNT = 0;
 8001446:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <main+0xb4>)
 8001448:	2200      	movs	r2, #0
 800144a:	625a      	str	r2, [r3, #36]	; 0x24
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		mainMachine();
 800144c:	f000 f8e0 	bl	8001610 <mainMachine>
 8001450:	e7fc      	b.n	800144c <main+0x8c>
 8001452:	bf00      	nop
 8001454:	20001bf4 	.word	0x20001bf4
 8001458:	20001c84 	.word	0x20001c84
 800145c:	20001c3c 	.word	0x20001c3c
 8001460:	40010800 	.word	0x40010800
 8001464:	2000013c 	.word	0x2000013c
 8001468:	200000c8 	.word	0x200000c8
 800146c:	40011000 	.word	0x40011000
 8001470:	40000400 	.word	0x40000400
 8001474:	40000800 	.word	0x40000800

08001478 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001478:	b580      	push	{r7, lr}
 800147a:	b094      	sub	sp, #80	; 0x50
 800147c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800147e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001482:	2228      	movs	r2, #40	; 0x28
 8001484:	2100      	movs	r1, #0
 8001486:	4618      	mov	r0, r3
 8001488:	f006 face 	bl	8007a28 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 800149c:	1d3b      	adds	r3, r7, #4
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	605a      	str	r2, [r3, #4]
 80014a4:	609a      	str	r2, [r3, #8]
 80014a6:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014a8:	2301      	movs	r3, #1
 80014aa:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80014b2:	2300      	movs	r3, #0
 80014b4:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014b6:	2301      	movs	r3, #1
 80014b8:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014ba:	2302      	movs	r3, #2
 80014bc:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014c2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80014c4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80014c8:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80014ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014ce:	4618      	mov	r0, r3
 80014d0:	f003 fcaa 	bl	8004e28 <HAL_RCC_OscConfig>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <SystemClock_Config+0x66>
		Error_Handler();
 80014da:	f001 fe4d 	bl	8003178 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80014de:	230f      	movs	r3, #15
 80014e0:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014e2:	2302      	movs	r3, #2
 80014e4:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014e6:	2300      	movs	r3, #0
 80014e8:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014ee:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014f0:	2300      	movs	r3, #0
 80014f2:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80014f4:	f107 0314 	add.w	r3, r7, #20
 80014f8:	2102      	movs	r1, #2
 80014fa:	4618      	mov	r0, r3
 80014fc:	f003 ff16 	bl	800532c <HAL_RCC_ClockConfig>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <SystemClock_Config+0x92>
		Error_Handler();
 8001506:	f001 fe37 	bl	8003178 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800150a:	2302      	movs	r3, #2
 800150c:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800150e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001512:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001514:	1d3b      	adds	r3, r7, #4
 8001516:	4618      	mov	r0, r3
 8001518:	f004 f8a0 	bl	800565c <HAL_RCCEx_PeriphCLKConfig>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <SystemClock_Config+0xae>
		Error_Handler();
 8001522:	f001 fe29 	bl	8003178 <Error_Handler>
	}
}
 8001526:	bf00      	nop
 8001528:	3750      	adds	r7, #80	; 0x50
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
	...

08001530 <intUartSend>:

/* USER CODE BEGIN 4 */
void intUartSend(int entero) {
 8001530:	b580      	push	{r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
	int m;
	int c;
	int d;
	int u;

	m = entero / 1000;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	4a30      	ldr	r2, [pc, #192]	; (80015fc <intUartSend+0xcc>)
 800153c:	fb82 1203 	smull	r1, r2, r2, r3
 8001540:	1192      	asrs	r2, r2, #6
 8001542:	17db      	asrs	r3, r3, #31
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	617b      	str	r3, [r7, #20]
	c = entero / 100 - m * 10;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	4a2d      	ldr	r2, [pc, #180]	; (8001600 <intUartSend+0xd0>)
 800154c:	fb82 1203 	smull	r1, r2, r2, r3
 8001550:	1152      	asrs	r2, r2, #5
 8001552:	17db      	asrs	r3, r3, #31
 8001554:	1ad2      	subs	r2, r2, r3
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	f06f 0109 	mvn.w	r1, #9
 800155c:	fb01 f303 	mul.w	r3, r1, r3
 8001560:	4413      	add	r3, r2
 8001562:	613b      	str	r3, [r7, #16]
	d = entero / 10 - (m * 100 + c * 10);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	4a27      	ldr	r2, [pc, #156]	; (8001604 <intUartSend+0xd4>)
 8001568:	fb82 1203 	smull	r1, r2, r2, r3
 800156c:	1092      	asrs	r2, r2, #2
 800156e:	17db      	asrs	r3, r3, #31
 8001570:	1ad1      	subs	r1, r2, r3
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	2264      	movs	r2, #100	; 0x64
 8001576:	fb02 f003 	mul.w	r0, r2, r3
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	4613      	mov	r3, r2
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	4413      	add	r3, r2
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	4403      	add	r3, r0
 8001586:	1acb      	subs	r3, r1, r3
 8001588:	60fb      	str	r3, [r7, #12]
	u = entero - (m * 1000 + c * 100 + d * 10);
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001590:	fb03 f202 	mul.w	r2, r3, r2
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	2164      	movs	r1, #100	; 0x64
 8001598:	fb01 f303 	mul.w	r3, r1, r3
 800159c:	18d1      	adds	r1, r2, r3
 800159e:	68fa      	ldr	r2, [r7, #12]
 80015a0:	4613      	mov	r3, r2
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	4413      	add	r3, r2
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	440b      	add	r3, r1
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	60bb      	str	r3, [r7, #8]

	TX_BUFFER[0] = m + '0';
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	3330      	adds	r3, #48	; 0x30
 80015b6:	b2da      	uxtb	r2, r3
 80015b8:	4b13      	ldr	r3, [pc, #76]	; (8001608 <intUartSend+0xd8>)
 80015ba:	701a      	strb	r2, [r3, #0]
	TX_BUFFER[1] = c + '0';
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	3330      	adds	r3, #48	; 0x30
 80015c2:	b2da      	uxtb	r2, r3
 80015c4:	4b10      	ldr	r3, [pc, #64]	; (8001608 <intUartSend+0xd8>)
 80015c6:	705a      	strb	r2, [r3, #1]
	TX_BUFFER[2] = d + '0';
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	3330      	adds	r3, #48	; 0x30
 80015ce:	b2da      	uxtb	r2, r3
 80015d0:	4b0d      	ldr	r3, [pc, #52]	; (8001608 <intUartSend+0xd8>)
 80015d2:	709a      	strb	r2, [r3, #2]
	TX_BUFFER[3] = u + '0';
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	3330      	adds	r3, #48	; 0x30
 80015da:	b2da      	uxtb	r2, r3
 80015dc:	4b0a      	ldr	r3, [pc, #40]	; (8001608 <intUartSend+0xd8>)
 80015de:	70da      	strb	r2, [r3, #3]
	TX_BUFFER[4] = '\n';
 80015e0:	4b09      	ldr	r3, [pc, #36]	; (8001608 <intUartSend+0xd8>)
 80015e2:	220a      	movs	r2, #10
 80015e4:	711a      	strb	r2, [r3, #4]
	HAL_UART_Transmit(&huart1, TX_BUFFER, 5, 100);
 80015e6:	2364      	movs	r3, #100	; 0x64
 80015e8:	2205      	movs	r2, #5
 80015ea:	4907      	ldr	r1, [pc, #28]	; (8001608 <intUartSend+0xd8>)
 80015ec:	4807      	ldr	r0, [pc, #28]	; (800160c <intUartSend+0xdc>)
 80015ee:	f004 fe84 	bl	80062fa <HAL_UART_Transmit>
}
 80015f2:	bf00      	nop
 80015f4:	3718      	adds	r7, #24
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	10624dd3 	.word	0x10624dd3
 8001600:	51eb851f 	.word	0x51eb851f
 8001604:	66666667 	.word	0x66666667
 8001608:	200011fc 	.word	0x200011fc
 800160c:	20001ccc 	.word	0x20001ccc

08001610 <mainMachine>:

void mainMachine() {
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
	switch (mainState) {
 8001614:	4b64      	ldr	r3, [pc, #400]	; (80017a8 <mainMachine+0x198>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2b03      	cmp	r3, #3
 800161a:	f200 80c3 	bhi.w	80017a4 <mainMachine+0x194>
 800161e:	a201      	add	r2, pc, #4	; (adr r2, 8001624 <mainMachine+0x14>)
 8001620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001624:	08001635 	.word	0x08001635
 8001628:	080016bd 	.word	0x080016bd
 800162c:	08001721 	.word	0x08001721
 8001630:	0800179b 	.word	0x0800179b
	case SETUP:
		actual.x = ALTO;
 8001634:	4b5d      	ldr	r3, [pc, #372]	; (80017ac <mainMachine+0x19c>)
 8001636:	2205      	movs	r2, #5
 8001638:	601a      	str	r2, [r3, #0]
		actual.y = ANCHO;
 800163a:	4b5c      	ldr	r3, [pc, #368]	; (80017ac <mainMachine+0x19c>)
 800163c:	2205      	movs	r2, #5
 800163e:	605a      	str	r2, [r3, #4]
		/*visual.x = 0;
		 visual.y = 0;*/
		resetAxis();
 8001640:	f001 fb7e 	bl	8002d40 <resetAxis>
		movimientoFlag = 0;
 8001644:	4b5a      	ldr	r3, [pc, #360]	; (80017b0 <mainMachine+0x1a0>)
 8001646:	2200      	movs	r2, #0
 8001648:	601a      	str	r2, [r3, #0]
		finishFlag = 0;
 800164a:	4b5a      	ldr	r3, [pc, #360]	; (80017b4 <mainMachine+0x1a4>)
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
		if (!HAL_GPIO_ReadPin(BTN1)) {
 8001650:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001654:	4858      	ldr	r0, [pc, #352]	; (80017b8 <mainMachine+0x1a8>)
 8001656:	f003 fbb7 	bl	8004dc8 <HAL_GPIO_ReadPin>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d121      	bne.n	80016a4 <mainMachine+0x94>
			// Set The LED ON!
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001660:	2201      	movs	r2, #1
 8001662:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001666:	4855      	ldr	r0, [pc, #340]	; (80017bc <mainMachine+0x1ac>)
 8001668:	f003 fbc5 	bl	8004df6 <HAL_GPIO_WritePin>
			choice = SLOW;
 800166c:	4b54      	ldr	r3, [pc, #336]	; (80017c0 <mainMachine+0x1b0>)
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]
			velocity = velocityChoice[SLOW];
 8001672:	4b54      	ldr	r3, [pc, #336]	; (80017c4 <mainMachine+0x1b4>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a54      	ldr	r2, [pc, #336]	; (80017c8 <mainMachine+0x1b8>)
 8001678:	6013      	str	r3, [r2, #0]
			TIM2->CCR3 = baseChoice[SLOW];
 800167a:	4b54      	ldr	r3, [pc, #336]	; (80017cc <mainMachine+0x1bc>)
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001682:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM2->CCR4 = baseChoice[SLOW];
 8001684:	4b51      	ldr	r3, [pc, #324]	; (80017cc <mainMachine+0x1bc>)
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800168c:	641a      	str	r2, [r3, #64]	; 0x40
			KP = KPchoice[SLOW];
 800168e:	4b50      	ldr	r3, [pc, #320]	; (80017d0 <mainMachine+0x1c0>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a50      	ldr	r2, [pc, #320]	; (80017d4 <mainMachine+0x1c4>)
 8001694:	6013      	str	r3, [r2, #0]
			KD = KDchoice[SLOW];
 8001696:	4b50      	ldr	r3, [pc, #320]	; (80017d8 <mainMachine+0x1c8>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a50      	ldr	r2, [pc, #320]	; (80017dc <mainMachine+0x1cc>)
 800169c:	6013      	str	r3, [r2, #0]
			mainState = MAPPING;
 800169e:	4b42      	ldr	r3, [pc, #264]	; (80017a8 <mainMachine+0x198>)
 80016a0:	2201      	movs	r2, #1
 80016a2:	601a      	str	r2, [r3, #0]
		}
		if (!HAL_GPIO_ReadPin(BTN2)) {
 80016a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016a8:	4843      	ldr	r0, [pc, #268]	; (80017b8 <mainMachine+0x1a8>)
 80016aa:	f003 fb8d 	bl	8004dc8 <HAL_GPIO_ReadPin>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d176      	bne.n	80017a2 <mainMachine+0x192>
			// Set The LED ON!
			mainState = RACING;
 80016b4:	4b3c      	ldr	r3, [pc, #240]	; (80017a8 <mainMachine+0x198>)
 80016b6:	2203      	movs	r2, #3
 80016b8:	601a      	str	r2, [r3, #0]
			//directions = ReadRun();
			//ShowRun();
		}
		//confirmacionCentrado();
		break;
 80016ba:	e072      	b.n	80017a2 <mainMachine+0x192>
	case MAPPING:
		if (finishFlag == 0) {
 80016bc:	4b3d      	ldr	r3, [pc, #244]	; (80017b4 <mainMachine+0x1a4>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d102      	bne.n	80016ca <mainMachine+0xba>
			robotMachine();
 80016c4:	f000 f894 	bl	80017f0 <robotMachine>
			finishFlag = 0;
			resetAxis();
			//PrintMap();
			mainState = RESOLUTION;
		}
		break;
 80016c8:	e06c      	b.n	80017a4 <mainMachine+0x194>
			TX_BUFFER[0] = 'X';
 80016ca:	4b45      	ldr	r3, [pc, #276]	; (80017e0 <mainMachine+0x1d0>)
 80016cc:	2258      	movs	r2, #88	; 0x58
 80016ce:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, TX_BUFFER, 1, 100);
 80016d0:	2364      	movs	r3, #100	; 0x64
 80016d2:	2201      	movs	r2, #1
 80016d4:	4942      	ldr	r1, [pc, #264]	; (80017e0 <mainMachine+0x1d0>)
 80016d6:	4843      	ldr	r0, [pc, #268]	; (80017e4 <mainMachine+0x1d4>)
 80016d8:	f004 fe0f 	bl	80062fa <HAL_UART_Transmit>
			intUartSend(actual.x);
 80016dc:	4b33      	ldr	r3, [pc, #204]	; (80017ac <mainMachine+0x19c>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff ff25 	bl	8001530 <intUartSend>
			TX_BUFFER[0] = 'Y';
 80016e6:	4b3e      	ldr	r3, [pc, #248]	; (80017e0 <mainMachine+0x1d0>)
 80016e8:	2259      	movs	r2, #89	; 0x59
 80016ea:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, TX_BUFFER, 1, 100);
 80016ec:	2364      	movs	r3, #100	; 0x64
 80016ee:	2201      	movs	r2, #1
 80016f0:	493b      	ldr	r1, [pc, #236]	; (80017e0 <mainMachine+0x1d0>)
 80016f2:	483c      	ldr	r0, [pc, #240]	; (80017e4 <mainMachine+0x1d4>)
 80016f4:	f004 fe01 	bl	80062fa <HAL_UART_Transmit>
			intUartSend(actual.y);
 80016f8:	4b2c      	ldr	r3, [pc, #176]	; (80017ac <mainMachine+0x19c>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff ff17 	bl	8001530 <intUartSend>
			actual.x = ALTO;
 8001702:	4b2a      	ldr	r3, [pc, #168]	; (80017ac <mainMachine+0x19c>)
 8001704:	2205      	movs	r2, #5
 8001706:	601a      	str	r2, [r3, #0]
			actual.y = ANCHO;
 8001708:	4b28      	ldr	r3, [pc, #160]	; (80017ac <mainMachine+0x19c>)
 800170a:	2205      	movs	r2, #5
 800170c:	605a      	str	r2, [r3, #4]
			finishFlag = 0;
 800170e:	4b29      	ldr	r3, [pc, #164]	; (80017b4 <mainMachine+0x1a4>)
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
			resetAxis();
 8001714:	f001 fb14 	bl	8002d40 <resetAxis>
			mainState = RESOLUTION;
 8001718:	4b23      	ldr	r3, [pc, #140]	; (80017a8 <mainMachine+0x198>)
 800171a:	2202      	movs	r2, #2
 800171c:	601a      	str	r2, [r3, #0]
		break;
 800171e:	e041      	b.n	80017a4 <mainMachine+0x194>
	case RESOLUTION:
		if (Map[actual.x][actual.y].final == 0) {
 8001720:	4b22      	ldr	r3, [pc, #136]	; (80017ac <mainMachine+0x19c>)
 8001722:	6819      	ldr	r1, [r3, #0]
 8001724:	4b21      	ldr	r3, [pc, #132]	; (80017ac <mainMachine+0x19c>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	482f      	ldr	r0, [pc, #188]	; (80017e8 <mainMachine+0x1d8>)
 800172a:	461a      	mov	r2, r3
 800172c:	0052      	lsls	r2, r2, #1
 800172e:	441a      	add	r2, r3
 8001730:	00d3      	lsls	r3, r2, #3
 8001732:	461a      	mov	r2, r3
 8001734:	460b      	mov	r3, r1
 8001736:	011b      	lsls	r3, r3, #4
 8001738:	1a5b      	subs	r3, r3, r1
 800173a:	011b      	lsls	r3, r3, #4
 800173c:	4413      	add	r3, r2
 800173e:	4403      	add	r3, r0
 8001740:	3314      	adds	r3, #20
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d124      	bne.n	8001792 <mainMachine+0x182>
			addDirection(actual.x, actual.y);
 8001748:	4b18      	ldr	r3, [pc, #96]	; (80017ac <mainMachine+0x19c>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a17      	ldr	r2, [pc, #92]	; (80017ac <mainMachine+0x19c>)
 800174e:	6852      	ldr	r2, [r2, #4]
 8001750:	4611      	mov	r1, r2
 8001752:	4618      	mov	r0, r3
 8001754:	f000 fb72 	bl	8001e3c <addDirection>
			TX_BUFFER[0] = 'X';
 8001758:	4b21      	ldr	r3, [pc, #132]	; (80017e0 <mainMachine+0x1d0>)
 800175a:	2258      	movs	r2, #88	; 0x58
 800175c:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, TX_BUFFER, 1, 100);
 800175e:	2364      	movs	r3, #100	; 0x64
 8001760:	2201      	movs	r2, #1
 8001762:	491f      	ldr	r1, [pc, #124]	; (80017e0 <mainMachine+0x1d0>)
 8001764:	481f      	ldr	r0, [pc, #124]	; (80017e4 <mainMachine+0x1d4>)
 8001766:	f004 fdc8 	bl	80062fa <HAL_UART_Transmit>
			intUartSend(actual.x);
 800176a:	4b10      	ldr	r3, [pc, #64]	; (80017ac <mainMachine+0x19c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4618      	mov	r0, r3
 8001770:	f7ff fede 	bl	8001530 <intUartSend>
			TX_BUFFER[0] = 'Y';
 8001774:	4b1a      	ldr	r3, [pc, #104]	; (80017e0 <mainMachine+0x1d0>)
 8001776:	2259      	movs	r2, #89	; 0x59
 8001778:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, TX_BUFFER, 1, 100);
 800177a:	2364      	movs	r3, #100	; 0x64
 800177c:	2201      	movs	r2, #1
 800177e:	4918      	ldr	r1, [pc, #96]	; (80017e0 <mainMachine+0x1d0>)
 8001780:	4818      	ldr	r0, [pc, #96]	; (80017e4 <mainMachine+0x1d4>)
 8001782:	f004 fdba 	bl	80062fa <HAL_UART_Transmit>
			intUartSend(actual.y);
 8001786:	4b09      	ldr	r3, [pc, #36]	; (80017ac <mainMachine+0x19c>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	4618      	mov	r0, r3
 800178c:	f7ff fed0 	bl	8001530 <intUartSend>
			//SerialBT.println(directions);
			// UploadRun(directions);
			mainState = SETUP;
		}

		break;
 8001790:	e008      	b.n	80017a4 <mainMachine+0x194>
			mainState = SETUP;
 8001792:	4b05      	ldr	r3, [pc, #20]	; (80017a8 <mainMachine+0x198>)
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
		break;
 8001798:	e004      	b.n	80017a4 <mainMachine+0x194>
	case RACING:
		runDirections(directions);
 800179a:	4814      	ldr	r0, [pc, #80]	; (80017ec <mainMachine+0x1dc>)
 800179c:	f000 fb00 	bl	8001da0 <runDirections>
		break;
 80017a0:	e000      	b.n	80017a4 <mainMachine+0x194>
		break;
 80017a2:	bf00      	nop
	}

}
 80017a4:	bf00      	nop
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	20001238 	.word	0x20001238
 80017ac:	2000125c 	.word	0x2000125c
 80017b0:	20001228 	.word	0x20001228
 80017b4:	20001224 	.word	0x20001224
 80017b8:	40010c00 	.word	0x40010c00
 80017bc:	40011000 	.word	0x40011000
 80017c0:	20001214 	.word	0x20001214
 80017c4:	20000010 	.word	0x20000010
 80017c8:	20001210 	.word	0x20001210
 80017cc:	20000018 	.word	0x20000018
 80017d0:	20000000 	.word	0x20000000
 80017d4:	20001208 	.word	0x20001208
 80017d8:	20000008 	.word	0x20000008
 80017dc:	2000120c 	.word	0x2000120c
 80017e0:	200011fc 	.word	0x200011fc
 80017e4:	20001ccc 	.word	0x20001ccc
 80017e8:	2000126c 	.word	0x2000126c
 80017ec:	20001240 	.word	0x20001240

080017f0 <robotMachine>:

void robotMachine() {
 80017f0:	b5b0      	push	{r4, r5, r7, lr}
 80017f2:	af00      	add	r7, sp, #0
	switch (robotState) {
 80017f4:	4b06      	ldr	r3, [pc, #24]	; (8001810 <robotMachine+0x20>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	f000 82aa 	beq.w	8001d52 <robotMachine+0x562>
 80017fe:	2b02      	cmp	r3, #2
 8001800:	f300 82b4 	bgt.w	8001d6c <robotMachine+0x57c>
 8001804:	2b00      	cmp	r3, #0
 8001806:	d005      	beq.n	8001814 <robotMachine+0x24>
 8001808:	2b01      	cmp	r3, #1
 800180a:	f000 81db 	beq.w	8001bc4 <robotMachine+0x3d4>
		if (movimientoFlag == 1) {
			robotState = READING;
		}
		break;
	}
}
 800180e:	e2ad      	b.n	8001d6c <robotMachine+0x57c>
 8001810:	2000123c 	.word	0x2000123c
		TX_BUFFER[0] = 'X';
 8001814:	4bb9      	ldr	r3, [pc, #740]	; (8001afc <robotMachine+0x30c>)
 8001816:	2258      	movs	r2, #88	; 0x58
 8001818:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = actual.x + '0';
 800181a:	4bb9      	ldr	r3, [pc, #740]	; (8001b00 <robotMachine+0x310>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	b2db      	uxtb	r3, r3
 8001820:	3330      	adds	r3, #48	; 0x30
 8001822:	b2da      	uxtb	r2, r3
 8001824:	4bb5      	ldr	r3, [pc, #724]	; (8001afc <robotMachine+0x30c>)
 8001826:	705a      	strb	r2, [r3, #1]
		TX_BUFFER[2] = '\n';
 8001828:	4bb4      	ldr	r3, [pc, #720]	; (8001afc <robotMachine+0x30c>)
 800182a:	220a      	movs	r2, #10
 800182c:	709a      	strb	r2, [r3, #2]
		TX_BUFFER[3] = 'Y';
 800182e:	4bb3      	ldr	r3, [pc, #716]	; (8001afc <robotMachine+0x30c>)
 8001830:	2259      	movs	r2, #89	; 0x59
 8001832:	70da      	strb	r2, [r3, #3]
		TX_BUFFER[4] = actual.y + '0';
 8001834:	4bb2      	ldr	r3, [pc, #712]	; (8001b00 <robotMachine+0x310>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	b2db      	uxtb	r3, r3
 800183a:	3330      	adds	r3, #48	; 0x30
 800183c:	b2da      	uxtb	r2, r3
 800183e:	4baf      	ldr	r3, [pc, #700]	; (8001afc <robotMachine+0x30c>)
 8001840:	711a      	strb	r2, [r3, #4]
		TX_BUFFER[5] = '\n';
 8001842:	4bae      	ldr	r3, [pc, #696]	; (8001afc <robotMachine+0x30c>)
 8001844:	220a      	movs	r2, #10
 8001846:	715a      	strb	r2, [r3, #5]
		HAL_UART_Transmit(&huart1, TX_BUFFER, 6, 100);
 8001848:	2364      	movs	r3, #100	; 0x64
 800184a:	2206      	movs	r2, #6
 800184c:	49ab      	ldr	r1, [pc, #684]	; (8001afc <robotMachine+0x30c>)
 800184e:	48ad      	ldr	r0, [pc, #692]	; (8001b04 <robotMachine+0x314>)
 8001850:	f004 fd53 	bl	80062fa <HAL_UART_Transmit>
		Map[actual.x][actual.y].visitado++;
 8001854:	4baa      	ldr	r3, [pc, #680]	; (8001b00 <robotMachine+0x310>)
 8001856:	6819      	ldr	r1, [r3, #0]
 8001858:	4ba9      	ldr	r3, [pc, #676]	; (8001b00 <robotMachine+0x310>)
 800185a:	6858      	ldr	r0, [r3, #4]
 800185c:	4caa      	ldr	r4, [pc, #680]	; (8001b08 <robotMachine+0x318>)
 800185e:	4602      	mov	r2, r0
 8001860:	0052      	lsls	r2, r2, #1
 8001862:	4402      	add	r2, r0
 8001864:	00d3      	lsls	r3, r2, #3
 8001866:	461a      	mov	r2, r3
 8001868:	460b      	mov	r3, r1
 800186a:	011b      	lsls	r3, r3, #4
 800186c:	1a5b      	subs	r3, r3, r1
 800186e:	011b      	lsls	r3, r3, #4
 8001870:	4413      	add	r3, r2
 8001872:	4423      	add	r3, r4
 8001874:	3310      	adds	r3, #16
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	1c5c      	adds	r4, r3, #1
 800187a:	4da3      	ldr	r5, [pc, #652]	; (8001b08 <robotMachine+0x318>)
 800187c:	4602      	mov	r2, r0
 800187e:	0052      	lsls	r2, r2, #1
 8001880:	4402      	add	r2, r0
 8001882:	00d3      	lsls	r3, r2, #3
 8001884:	461a      	mov	r2, r3
 8001886:	460b      	mov	r3, r1
 8001888:	011b      	lsls	r3, r3, #4
 800188a:	1a5b      	subs	r3, r3, r1
 800188c:	011b      	lsls	r3, r3, #4
 800188e:	4413      	add	r3, r2
 8001890:	442b      	add	r3, r5
 8001892:	3310      	adds	r3, #16
 8001894:	601c      	str	r4, [r3, #0]
		if (Map[actual.x][actual.y].visitado == 1) {
 8001896:	4b9a      	ldr	r3, [pc, #616]	; (8001b00 <robotMachine+0x310>)
 8001898:	6819      	ldr	r1, [r3, #0]
 800189a:	4b99      	ldr	r3, [pc, #612]	; (8001b00 <robotMachine+0x310>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	489a      	ldr	r0, [pc, #616]	; (8001b08 <robotMachine+0x318>)
 80018a0:	461a      	mov	r2, r3
 80018a2:	0052      	lsls	r2, r2, #1
 80018a4:	441a      	add	r2, r3
 80018a6:	00d3      	lsls	r3, r2, #3
 80018a8:	461a      	mov	r2, r3
 80018aa:	460b      	mov	r3, r1
 80018ac:	011b      	lsls	r3, r3, #4
 80018ae:	1a5b      	subs	r3, r3, r1
 80018b0:	011b      	lsls	r3, r3, #4
 80018b2:	4413      	add	r3, r2
 80018b4:	4403      	add	r3, r0
 80018b6:	3310      	adds	r3, #16
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	f040 80bf 	bne.w	8001a3e <robotMachine+0x24e>
			runMotor(OFF, MOTOR_A);
 80018c0:	2100      	movs	r1, #0
 80018c2:	2005      	movs	r0, #5
 80018c4:	f001 fc86 	bl	80031d4 <runMotor>
			runMotor(OFF, MOTOR_B);
 80018c8:	2101      	movs	r1, #1
 80018ca:	2005      	movs	r0, #5
 80018cc:	f001 fc82 	bl	80031d4 <runMotor>
			CreateNode(actual.x, actual.y);
 80018d0:	4b8b      	ldr	r3, [pc, #556]	; (8001b00 <robotMachine+0x310>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a8a      	ldr	r2, [pc, #552]	; (8001b00 <robotMachine+0x310>)
 80018d6:	6852      	ldr	r2, [r2, #4]
 80018d8:	4611      	mov	r1, r2
 80018da:	4618      	mov	r0, r3
 80018dc:	f001 f96a 	bl	8002bb4 <CreateNode>
			TX_BUFFER[0] = 'D';
 80018e0:	4b86      	ldr	r3, [pc, #536]	; (8001afc <robotMachine+0x30c>)
 80018e2:	2244      	movs	r2, #68	; 0x44
 80018e4:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, TX_BUFFER, 1, 100);
 80018e6:	2364      	movs	r3, #100	; 0x64
 80018e8:	2201      	movs	r2, #1
 80018ea:	4984      	ldr	r1, [pc, #528]	; (8001afc <robotMachine+0x30c>)
 80018ec:	4885      	ldr	r0, [pc, #532]	; (8001b04 <robotMachine+0x314>)
 80018ee:	f004 fd04 	bl	80062fa <HAL_UART_Transmit>
			intUartSend(Sensors[1]);
 80018f2:	4b86      	ldr	r3, [pc, #536]	; (8001b0c <robotMachine+0x31c>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff fbba 	bl	8001070 <__aeabi_f2iz>
 80018fc:	4603      	mov	r3, r0
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff fe16 	bl	8001530 <intUartSend>
			TX_BUFFER[0] = 'C';
 8001904:	4b7d      	ldr	r3, [pc, #500]	; (8001afc <robotMachine+0x30c>)
 8001906:	2243      	movs	r2, #67	; 0x43
 8001908:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, TX_BUFFER, 1, 100);
 800190a:	2364      	movs	r3, #100	; 0x64
 800190c:	2201      	movs	r2, #1
 800190e:	497b      	ldr	r1, [pc, #492]	; (8001afc <robotMachine+0x30c>)
 8001910:	487c      	ldr	r0, [pc, #496]	; (8001b04 <robotMachine+0x314>)
 8001912:	f004 fcf2 	bl	80062fa <HAL_UART_Transmit>
			intUartSend(Sensors[2]);
 8001916:	4b7d      	ldr	r3, [pc, #500]	; (8001b0c <robotMachine+0x31c>)
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff fba8 	bl	8001070 <__aeabi_f2iz>
 8001920:	4603      	mov	r3, r0
 8001922:	4618      	mov	r0, r3
 8001924:	f7ff fe04 	bl	8001530 <intUartSend>
			TX_BUFFER[0] = 'I';
 8001928:	4b74      	ldr	r3, [pc, #464]	; (8001afc <robotMachine+0x30c>)
 800192a:	2249      	movs	r2, #73	; 0x49
 800192c:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, TX_BUFFER, 1, 100);
 800192e:	2364      	movs	r3, #100	; 0x64
 8001930:	2201      	movs	r2, #1
 8001932:	4972      	ldr	r1, [pc, #456]	; (8001afc <robotMachine+0x30c>)
 8001934:	4873      	ldr	r0, [pc, #460]	; (8001b04 <robotMachine+0x314>)
 8001936:	f004 fce0 	bl	80062fa <HAL_UART_Transmit>
			intUartSend(Sensors[3]);
 800193a:	4b74      	ldr	r3, [pc, #464]	; (8001b0c <robotMachine+0x31c>)
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff fb96 	bl	8001070 <__aeabi_f2iz>
 8001944:	4603      	mov	r3, r0
 8001946:	4618      	mov	r0, r3
 8001948:	f7ff fdf2 	bl	8001530 <intUartSend>
			TX_BUFFER[0] = 'D';
 800194c:	4b6b      	ldr	r3, [pc, #428]	; (8001afc <robotMachine+0x30c>)
 800194e:	2244      	movs	r2, #68	; 0x44
 8001950:	701a      	strb	r2, [r3, #0]
			TX_BUFFER[1] = Map[actual.x][actual.y].Lados[DERECHA] + '0';
 8001952:	4b6b      	ldr	r3, [pc, #428]	; (8001b00 <robotMachine+0x310>)
 8001954:	6819      	ldr	r1, [r3, #0]
 8001956:	4b6a      	ldr	r3, [pc, #424]	; (8001b00 <robotMachine+0x310>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	486b      	ldr	r0, [pc, #428]	; (8001b08 <robotMachine+0x318>)
 800195c:	461a      	mov	r2, r3
 800195e:	0052      	lsls	r2, r2, #1
 8001960:	441a      	add	r2, r3
 8001962:	00d3      	lsls	r3, r2, #3
 8001964:	461a      	mov	r2, r3
 8001966:	460b      	mov	r3, r1
 8001968:	011b      	lsls	r3, r3, #4
 800196a:	1a5b      	subs	r3, r3, r1
 800196c:	011b      	lsls	r3, r3, #4
 800196e:	4413      	add	r3, r2
 8001970:	4403      	add	r3, r0
 8001972:	330c      	adds	r3, #12
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	b2db      	uxtb	r3, r3
 8001978:	3330      	adds	r3, #48	; 0x30
 800197a:	b2da      	uxtb	r2, r3
 800197c:	4b5f      	ldr	r3, [pc, #380]	; (8001afc <robotMachine+0x30c>)
 800197e:	705a      	strb	r2, [r3, #1]
			TX_BUFFER[2] = '\n';
 8001980:	4b5e      	ldr	r3, [pc, #376]	; (8001afc <robotMachine+0x30c>)
 8001982:	220a      	movs	r2, #10
 8001984:	709a      	strb	r2, [r3, #2]
			TX_BUFFER[3] = 'C';
 8001986:	4b5d      	ldr	r3, [pc, #372]	; (8001afc <robotMachine+0x30c>)
 8001988:	2243      	movs	r2, #67	; 0x43
 800198a:	70da      	strb	r2, [r3, #3]
			TX_BUFFER[4] = Map[actual.x][actual.y].Lados[ADELANTE] + '0';
 800198c:	4b5c      	ldr	r3, [pc, #368]	; (8001b00 <robotMachine+0x310>)
 800198e:	6819      	ldr	r1, [r3, #0]
 8001990:	4b5b      	ldr	r3, [pc, #364]	; (8001b00 <robotMachine+0x310>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	485c      	ldr	r0, [pc, #368]	; (8001b08 <robotMachine+0x318>)
 8001996:	461a      	mov	r2, r3
 8001998:	0052      	lsls	r2, r2, #1
 800199a:	441a      	add	r2, r3
 800199c:	00d3      	lsls	r3, r2, #3
 800199e:	461a      	mov	r2, r3
 80019a0:	460b      	mov	r3, r1
 80019a2:	011b      	lsls	r3, r3, #4
 80019a4:	1a5b      	subs	r3, r3, r1
 80019a6:	011b      	lsls	r3, r3, #4
 80019a8:	4413      	add	r3, r2
 80019aa:	4403      	add	r3, r0
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	3330      	adds	r3, #48	; 0x30
 80019b2:	b2da      	uxtb	r2, r3
 80019b4:	4b51      	ldr	r3, [pc, #324]	; (8001afc <robotMachine+0x30c>)
 80019b6:	711a      	strb	r2, [r3, #4]
			TX_BUFFER[5] = '\n';
 80019b8:	4b50      	ldr	r3, [pc, #320]	; (8001afc <robotMachine+0x30c>)
 80019ba:	220a      	movs	r2, #10
 80019bc:	715a      	strb	r2, [r3, #5]
			TX_BUFFER[6] = 'I';
 80019be:	4b4f      	ldr	r3, [pc, #316]	; (8001afc <robotMachine+0x30c>)
 80019c0:	2249      	movs	r2, #73	; 0x49
 80019c2:	719a      	strb	r2, [r3, #6]
			TX_BUFFER[7] = Map[actual.x][actual.y].Lados[IZQUIERDA] + '0';
 80019c4:	4b4e      	ldr	r3, [pc, #312]	; (8001b00 <robotMachine+0x310>)
 80019c6:	6819      	ldr	r1, [r3, #0]
 80019c8:	4b4d      	ldr	r3, [pc, #308]	; (8001b00 <robotMachine+0x310>)
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	484e      	ldr	r0, [pc, #312]	; (8001b08 <robotMachine+0x318>)
 80019ce:	461a      	mov	r2, r3
 80019d0:	0052      	lsls	r2, r2, #1
 80019d2:	441a      	add	r2, r3
 80019d4:	00d3      	lsls	r3, r2, #3
 80019d6:	461a      	mov	r2, r3
 80019d8:	460b      	mov	r3, r1
 80019da:	011b      	lsls	r3, r3, #4
 80019dc:	1a5b      	subs	r3, r3, r1
 80019de:	011b      	lsls	r3, r3, #4
 80019e0:	4413      	add	r3, r2
 80019e2:	4403      	add	r3, r0
 80019e4:	3304      	adds	r3, #4
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	3330      	adds	r3, #48	; 0x30
 80019ec:	b2da      	uxtb	r2, r3
 80019ee:	4b43      	ldr	r3, [pc, #268]	; (8001afc <robotMachine+0x30c>)
 80019f0:	71da      	strb	r2, [r3, #7]
			TX_BUFFER[8] = '\n';
 80019f2:	4b42      	ldr	r3, [pc, #264]	; (8001afc <robotMachine+0x30c>)
 80019f4:	220a      	movs	r2, #10
 80019f6:	721a      	strb	r2, [r3, #8]
			TX_BUFFER[9] = 'A';
 80019f8:	4b40      	ldr	r3, [pc, #256]	; (8001afc <robotMachine+0x30c>)
 80019fa:	2241      	movs	r2, #65	; 0x41
 80019fc:	725a      	strb	r2, [r3, #9]
			TX_BUFFER[10] = Map[actual.x][actual.y].Lados[ATRAS] + '0';
 80019fe:	4b40      	ldr	r3, [pc, #256]	; (8001b00 <robotMachine+0x310>)
 8001a00:	6819      	ldr	r1, [r3, #0]
 8001a02:	4b3f      	ldr	r3, [pc, #252]	; (8001b00 <robotMachine+0x310>)
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	4840      	ldr	r0, [pc, #256]	; (8001b08 <robotMachine+0x318>)
 8001a08:	461a      	mov	r2, r3
 8001a0a:	0052      	lsls	r2, r2, #1
 8001a0c:	441a      	add	r2, r3
 8001a0e:	00d3      	lsls	r3, r2, #3
 8001a10:	461a      	mov	r2, r3
 8001a12:	460b      	mov	r3, r1
 8001a14:	011b      	lsls	r3, r3, #4
 8001a16:	1a5b      	subs	r3, r3, r1
 8001a18:	011b      	lsls	r3, r3, #4
 8001a1a:	4413      	add	r3, r2
 8001a1c:	4403      	add	r3, r0
 8001a1e:	3308      	adds	r3, #8
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	3330      	adds	r3, #48	; 0x30
 8001a26:	b2da      	uxtb	r2, r3
 8001a28:	4b34      	ldr	r3, [pc, #208]	; (8001afc <robotMachine+0x30c>)
 8001a2a:	729a      	strb	r2, [r3, #10]
			TX_BUFFER[11] = '\n';
 8001a2c:	4b33      	ldr	r3, [pc, #204]	; (8001afc <robotMachine+0x30c>)
 8001a2e:	220a      	movs	r2, #10
 8001a30:	72da      	strb	r2, [r3, #11]
			HAL_UART_Transmit(&huart1, TX_BUFFER, 12, 100);
 8001a32:	2364      	movs	r3, #100	; 0x64
 8001a34:	220c      	movs	r2, #12
 8001a36:	4931      	ldr	r1, [pc, #196]	; (8001afc <robotMachine+0x30c>)
 8001a38:	4832      	ldr	r0, [pc, #200]	; (8001b04 <robotMachine+0x314>)
 8001a3a:	f004 fc5e 	bl	80062fa <HAL_UART_Transmit>
		TX_BUFFER[0] = 'D';
 8001a3e:	4b2f      	ldr	r3, [pc, #188]	; (8001afc <robotMachine+0x30c>)
 8001a40:	2244      	movs	r2, #68	; 0x44
 8001a42:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = Map[actual.x][actual.y].Lados[DERECHA] + '0';
 8001a44:	4b2e      	ldr	r3, [pc, #184]	; (8001b00 <robotMachine+0x310>)
 8001a46:	6819      	ldr	r1, [r3, #0]
 8001a48:	4b2d      	ldr	r3, [pc, #180]	; (8001b00 <robotMachine+0x310>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	482e      	ldr	r0, [pc, #184]	; (8001b08 <robotMachine+0x318>)
 8001a4e:	461a      	mov	r2, r3
 8001a50:	0052      	lsls	r2, r2, #1
 8001a52:	441a      	add	r2, r3
 8001a54:	00d3      	lsls	r3, r2, #3
 8001a56:	461a      	mov	r2, r3
 8001a58:	460b      	mov	r3, r1
 8001a5a:	011b      	lsls	r3, r3, #4
 8001a5c:	1a5b      	subs	r3, r3, r1
 8001a5e:	011b      	lsls	r3, r3, #4
 8001a60:	4413      	add	r3, r2
 8001a62:	4403      	add	r3, r0
 8001a64:	330c      	adds	r3, #12
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	3330      	adds	r3, #48	; 0x30
 8001a6c:	b2da      	uxtb	r2, r3
 8001a6e:	4b23      	ldr	r3, [pc, #140]	; (8001afc <robotMachine+0x30c>)
 8001a70:	705a      	strb	r2, [r3, #1]
		TX_BUFFER[2] = '\n';
 8001a72:	4b22      	ldr	r3, [pc, #136]	; (8001afc <robotMachine+0x30c>)
 8001a74:	220a      	movs	r2, #10
 8001a76:	709a      	strb	r2, [r3, #2]
		TX_BUFFER[3] = 'C';
 8001a78:	4b20      	ldr	r3, [pc, #128]	; (8001afc <robotMachine+0x30c>)
 8001a7a:	2243      	movs	r2, #67	; 0x43
 8001a7c:	70da      	strb	r2, [r3, #3]
		TX_BUFFER[4] = Map[actual.x][actual.y].Lados[ADELANTE] + '0';
 8001a7e:	4b20      	ldr	r3, [pc, #128]	; (8001b00 <robotMachine+0x310>)
 8001a80:	6819      	ldr	r1, [r3, #0]
 8001a82:	4b1f      	ldr	r3, [pc, #124]	; (8001b00 <robotMachine+0x310>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	4820      	ldr	r0, [pc, #128]	; (8001b08 <robotMachine+0x318>)
 8001a88:	461a      	mov	r2, r3
 8001a8a:	0052      	lsls	r2, r2, #1
 8001a8c:	441a      	add	r2, r3
 8001a8e:	00d3      	lsls	r3, r2, #3
 8001a90:	461a      	mov	r2, r3
 8001a92:	460b      	mov	r3, r1
 8001a94:	011b      	lsls	r3, r3, #4
 8001a96:	1a5b      	subs	r3, r3, r1
 8001a98:	011b      	lsls	r3, r3, #4
 8001a9a:	4413      	add	r3, r2
 8001a9c:	4403      	add	r3, r0
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	3330      	adds	r3, #48	; 0x30
 8001aa4:	b2da      	uxtb	r2, r3
 8001aa6:	4b15      	ldr	r3, [pc, #84]	; (8001afc <robotMachine+0x30c>)
 8001aa8:	711a      	strb	r2, [r3, #4]
		TX_BUFFER[5] = '\n';
 8001aaa:	4b14      	ldr	r3, [pc, #80]	; (8001afc <robotMachine+0x30c>)
 8001aac:	220a      	movs	r2, #10
 8001aae:	715a      	strb	r2, [r3, #5]
		TX_BUFFER[6] = 'I';
 8001ab0:	4b12      	ldr	r3, [pc, #72]	; (8001afc <robotMachine+0x30c>)
 8001ab2:	2249      	movs	r2, #73	; 0x49
 8001ab4:	719a      	strb	r2, [r3, #6]
		TX_BUFFER[7] = Map[actual.x][actual.y].Lados[IZQUIERDA] + '0';
 8001ab6:	4b12      	ldr	r3, [pc, #72]	; (8001b00 <robotMachine+0x310>)
 8001ab8:	6819      	ldr	r1, [r3, #0]
 8001aba:	4b11      	ldr	r3, [pc, #68]	; (8001b00 <robotMachine+0x310>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	4812      	ldr	r0, [pc, #72]	; (8001b08 <robotMachine+0x318>)
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	0052      	lsls	r2, r2, #1
 8001ac4:	441a      	add	r2, r3
 8001ac6:	00d3      	lsls	r3, r2, #3
 8001ac8:	461a      	mov	r2, r3
 8001aca:	460b      	mov	r3, r1
 8001acc:	011b      	lsls	r3, r3, #4
 8001ace:	1a5b      	subs	r3, r3, r1
 8001ad0:	011b      	lsls	r3, r3, #4
 8001ad2:	4413      	add	r3, r2
 8001ad4:	4403      	add	r3, r0
 8001ad6:	3304      	adds	r3, #4
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	3330      	adds	r3, #48	; 0x30
 8001ade:	b2da      	uxtb	r2, r3
 8001ae0:	4b06      	ldr	r3, [pc, #24]	; (8001afc <robotMachine+0x30c>)
 8001ae2:	71da      	strb	r2, [r3, #7]
		TX_BUFFER[8] = '\n';
 8001ae4:	4b05      	ldr	r3, [pc, #20]	; (8001afc <robotMachine+0x30c>)
 8001ae6:	220a      	movs	r2, #10
 8001ae8:	721a      	strb	r2, [r3, #8]
		TX_BUFFER[9] = 'A';
 8001aea:	4b04      	ldr	r3, [pc, #16]	; (8001afc <robotMachine+0x30c>)
 8001aec:	2241      	movs	r2, #65	; 0x41
 8001aee:	725a      	strb	r2, [r3, #9]
		TX_BUFFER[10] = Map[actual.x][actual.y].Lados[ATRAS] + '0';
 8001af0:	4b03      	ldr	r3, [pc, #12]	; (8001b00 <robotMachine+0x310>)
 8001af2:	6819      	ldr	r1, [r3, #0]
 8001af4:	4b02      	ldr	r3, [pc, #8]	; (8001b00 <robotMachine+0x310>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	e00a      	b.n	8001b10 <robotMachine+0x320>
 8001afa:	bf00      	nop
 8001afc:	200011fc 	.word	0x200011fc
 8001b00:	2000125c 	.word	0x2000125c
 8001b04:	20001ccc 	.word	0x20001ccc
 8001b08:	2000126c 	.word	0x2000126c
 8001b0c:	200011dc 	.word	0x200011dc
 8001b10:	4897      	ldr	r0, [pc, #604]	; (8001d70 <robotMachine+0x580>)
 8001b12:	461a      	mov	r2, r3
 8001b14:	0052      	lsls	r2, r2, #1
 8001b16:	441a      	add	r2, r3
 8001b18:	00d3      	lsls	r3, r2, #3
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	011b      	lsls	r3, r3, #4
 8001b20:	1a5b      	subs	r3, r3, r1
 8001b22:	011b      	lsls	r3, r3, #4
 8001b24:	4413      	add	r3, r2
 8001b26:	4403      	add	r3, r0
 8001b28:	3308      	adds	r3, #8
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	3330      	adds	r3, #48	; 0x30
 8001b30:	b2da      	uxtb	r2, r3
 8001b32:	4b90      	ldr	r3, [pc, #576]	; (8001d74 <robotMachine+0x584>)
 8001b34:	729a      	strb	r2, [r3, #10]
		TX_BUFFER[11] = '\n';
 8001b36:	4b8f      	ldr	r3, [pc, #572]	; (8001d74 <robotMachine+0x584>)
 8001b38:	220a      	movs	r2, #10
 8001b3a:	72da      	strb	r2, [r3, #11]
		HAL_UART_Transmit(&huart1, TX_BUFFER, 12, 100);
 8001b3c:	2364      	movs	r3, #100	; 0x64
 8001b3e:	220c      	movs	r2, #12
 8001b40:	498c      	ldr	r1, [pc, #560]	; (8001d74 <robotMachine+0x584>)
 8001b42:	488d      	ldr	r0, [pc, #564]	; (8001d78 <robotMachine+0x588>)
 8001b44:	f004 fbd9 	bl	80062fa <HAL_UART_Transmit>
		valueCNY = Sensors[0];
 8001b48:	4b8c      	ldr	r3, [pc, #560]	; (8001d7c <robotMachine+0x58c>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff fa8f 	bl	8001070 <__aeabi_f2iz>
 8001b52:	4603      	mov	r3, r0
 8001b54:	4a8a      	ldr	r2, [pc, #552]	; (8001d80 <robotMachine+0x590>)
 8001b56:	6013      	str	r3, [r2, #0]
		if (valueCNY == BLANCO) {
 8001b58:	4b89      	ldr	r3, [pc, #548]	; (8001d80 <robotMachine+0x590>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d116      	bne.n	8001b8e <robotMachine+0x39e>
			Map[actual.x][actual.y].final = 1;
 8001b60:	4b88      	ldr	r3, [pc, #544]	; (8001d84 <robotMachine+0x594>)
 8001b62:	6819      	ldr	r1, [r3, #0]
 8001b64:	4b87      	ldr	r3, [pc, #540]	; (8001d84 <robotMachine+0x594>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	4881      	ldr	r0, [pc, #516]	; (8001d70 <robotMachine+0x580>)
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	0052      	lsls	r2, r2, #1
 8001b6e:	441a      	add	r2, r3
 8001b70:	00d3      	lsls	r3, r2, #3
 8001b72:	461a      	mov	r2, r3
 8001b74:	460b      	mov	r3, r1
 8001b76:	011b      	lsls	r3, r3, #4
 8001b78:	1a5b      	subs	r3, r3, r1
 8001b7a:	011b      	lsls	r3, r3, #4
 8001b7c:	4413      	add	r3, r2
 8001b7e:	4403      	add	r3, r0
 8001b80:	3314      	adds	r3, #20
 8001b82:	2201      	movs	r2, #1
 8001b84:	601a      	str	r2, [r3, #0]
			finishFlag = 1;
 8001b86:	4b80      	ldr	r3, [pc, #512]	; (8001d88 <robotMachine+0x598>)
 8001b88:	2201      	movs	r2, #1
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	e015      	b.n	8001bba <robotMachine+0x3ca>
			Map[actual.x][actual.y].final = 0;
 8001b8e:	4b7d      	ldr	r3, [pc, #500]	; (8001d84 <robotMachine+0x594>)
 8001b90:	6819      	ldr	r1, [r3, #0]
 8001b92:	4b7c      	ldr	r3, [pc, #496]	; (8001d84 <robotMachine+0x594>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	4876      	ldr	r0, [pc, #472]	; (8001d70 <robotMachine+0x580>)
 8001b98:	461a      	mov	r2, r3
 8001b9a:	0052      	lsls	r2, r2, #1
 8001b9c:	441a      	add	r2, r3
 8001b9e:	00d3      	lsls	r3, r2, #3
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	011b      	lsls	r3, r3, #4
 8001ba6:	1a5b      	subs	r3, r3, r1
 8001ba8:	011b      	lsls	r3, r3, #4
 8001baa:	4413      	add	r3, r2
 8001bac:	4403      	add	r3, r0
 8001bae:	3314      	adds	r3, #20
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
			robotState = CHOOSING;
 8001bb4:	4b75      	ldr	r3, [pc, #468]	; (8001d8c <robotMachine+0x59c>)
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	601a      	str	r2, [r3, #0]
		HAL_Delay(1000);
 8001bba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001bbe:	f001 ffed 	bl	8003b9c <HAL_Delay>
		break;
 8001bc2:	e0d3      	b.n	8001d6c <robotMachine+0x57c>
		movimiento = ChooseNextNode(actual.x, actual.y);
 8001bc4:	4b6f      	ldr	r3, [pc, #444]	; (8001d84 <robotMachine+0x594>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a6e      	ldr	r2, [pc, #440]	; (8001d84 <robotMachine+0x594>)
 8001bca:	6852      	ldr	r2, [r2, #4]
 8001bcc:	4611      	mov	r1, r2
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f000 fa34 	bl	800203c <ChooseNextNode>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	4a6e      	ldr	r2, [pc, #440]	; (8001d90 <robotMachine+0x5a0>)
 8001bd8:	6013      	str	r3, [r2, #0]
		TX_BUFFER[0] = 'M';
 8001bda:	4b66      	ldr	r3, [pc, #408]	; (8001d74 <robotMachine+0x584>)
 8001bdc:	224d      	movs	r2, #77	; 0x4d
 8001bde:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = movimiento + '0';
 8001be0:	4b6b      	ldr	r3, [pc, #428]	; (8001d90 <robotMachine+0x5a0>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	3330      	adds	r3, #48	; 0x30
 8001be8:	b2da      	uxtb	r2, r3
 8001bea:	4b62      	ldr	r3, [pc, #392]	; (8001d74 <robotMachine+0x584>)
 8001bec:	705a      	strb	r2, [r3, #1]
		TX_BUFFER[2] = '\n';
 8001bee:	4b61      	ldr	r3, [pc, #388]	; (8001d74 <robotMachine+0x584>)
 8001bf0:	220a      	movs	r2, #10
 8001bf2:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart1, TX_BUFFER, 3, 100);
 8001bf4:	2364      	movs	r3, #100	; 0x64
 8001bf6:	2203      	movs	r2, #3
 8001bf8:	495e      	ldr	r1, [pc, #376]	; (8001d74 <robotMachine+0x584>)
 8001bfa:	485f      	ldr	r0, [pc, #380]	; (8001d78 <robotMachine+0x588>)
 8001bfc:	f004 fb7d 	bl	80062fa <HAL_UART_Transmit>
		if (movimiento == IZQUIERDA) {
 8001c00:	4b63      	ldr	r3, [pc, #396]	; (8001d90 <robotMachine+0x5a0>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d138      	bne.n	8001c7a <robotMachine+0x48a>
			if (Map[actual.x][actual.y].Lados[direcciones[ATRAS]] != 1) {
 8001c08:	4b5e      	ldr	r3, [pc, #376]	; (8001d84 <robotMachine+0x594>)
 8001c0a:	6819      	ldr	r1, [r3, #0]
 8001c0c:	4b5d      	ldr	r3, [pc, #372]	; (8001d84 <robotMachine+0x594>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	4a60      	ldr	r2, [pc, #384]	; (8001d94 <robotMachine+0x5a4>)
 8001c12:	6890      	ldr	r0, [r2, #8]
 8001c14:	4c56      	ldr	r4, [pc, #344]	; (8001d70 <robotMachine+0x580>)
 8001c16:	461a      	mov	r2, r3
 8001c18:	0052      	lsls	r2, r2, #1
 8001c1a:	441a      	add	r2, r3
 8001c1c:	0053      	lsls	r3, r2, #1
 8001c1e:	461a      	mov	r2, r3
 8001c20:	460b      	mov	r3, r1
 8001c22:	011b      	lsls	r3, r3, #4
 8001c24:	1a5b      	subs	r3, r3, r1
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	4413      	add	r3, r2
 8001c2a:	4403      	add	r3, r0
 8001c2c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d014      	beq.n	8001c5e <robotMachine+0x46e>
				Map[actual.x][actual.y].Lados[direcciones[ATRAS]] = 2;
 8001c34:	4b53      	ldr	r3, [pc, #332]	; (8001d84 <robotMachine+0x594>)
 8001c36:	6819      	ldr	r1, [r3, #0]
 8001c38:	4b52      	ldr	r3, [pc, #328]	; (8001d84 <robotMachine+0x594>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	4a55      	ldr	r2, [pc, #340]	; (8001d94 <robotMachine+0x5a4>)
 8001c3e:	6890      	ldr	r0, [r2, #8]
 8001c40:	4c4b      	ldr	r4, [pc, #300]	; (8001d70 <robotMachine+0x580>)
 8001c42:	461a      	mov	r2, r3
 8001c44:	0052      	lsls	r2, r2, #1
 8001c46:	441a      	add	r2, r3
 8001c48:	0053      	lsls	r3, r2, #1
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	011b      	lsls	r3, r3, #4
 8001c50:	1a5b      	subs	r3, r3, r1
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	4413      	add	r3, r2
 8001c56:	4403      	add	r3, r0
 8001c58:	2202      	movs	r2, #2
 8001c5a:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
			moveNode(direcciones[IZQUIERDA]);
 8001c5e:	4b4d      	ldr	r3, [pc, #308]	; (8001d94 <robotMachine+0x5a4>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f000 fe0e 	bl	8002884 <moveNode>
			rotateAxis(IZQUIERDA);
 8001c68:	2001      	movs	r0, #1
 8001c6a:	f001 f81b 	bl	8002ca4 <rotateAxis>
			counter--;
 8001c6e:	4b4a      	ldr	r3, [pc, #296]	; (8001d98 <robotMachine+0x5a8>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	3b01      	subs	r3, #1
 8001c74:	4a48      	ldr	r2, [pc, #288]	; (8001d98 <robotMachine+0x5a8>)
 8001c76:	6013      	str	r3, [r2, #0]
 8001c78:	e055      	b.n	8001d26 <robotMachine+0x536>
		} else if (movimiento == DERECHA) {
 8001c7a:	4b45      	ldr	r3, [pc, #276]	; (8001d90 <robotMachine+0x5a0>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	2b03      	cmp	r3, #3
 8001c80:	d138      	bne.n	8001cf4 <robotMachine+0x504>
			if (Map[actual.x][actual.y].Lados[direcciones[ATRAS]] != 1) {
 8001c82:	4b40      	ldr	r3, [pc, #256]	; (8001d84 <robotMachine+0x594>)
 8001c84:	6819      	ldr	r1, [r3, #0]
 8001c86:	4b3f      	ldr	r3, [pc, #252]	; (8001d84 <robotMachine+0x594>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	4a42      	ldr	r2, [pc, #264]	; (8001d94 <robotMachine+0x5a4>)
 8001c8c:	6890      	ldr	r0, [r2, #8]
 8001c8e:	4c38      	ldr	r4, [pc, #224]	; (8001d70 <robotMachine+0x580>)
 8001c90:	461a      	mov	r2, r3
 8001c92:	0052      	lsls	r2, r2, #1
 8001c94:	441a      	add	r2, r3
 8001c96:	0053      	lsls	r3, r2, #1
 8001c98:	461a      	mov	r2, r3
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	011b      	lsls	r3, r3, #4
 8001c9e:	1a5b      	subs	r3, r3, r1
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	4413      	add	r3, r2
 8001ca4:	4403      	add	r3, r0
 8001ca6:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d014      	beq.n	8001cd8 <robotMachine+0x4e8>
				Map[actual.x][actual.y].Lados[direcciones[ATRAS]] = 2;
 8001cae:	4b35      	ldr	r3, [pc, #212]	; (8001d84 <robotMachine+0x594>)
 8001cb0:	6819      	ldr	r1, [r3, #0]
 8001cb2:	4b34      	ldr	r3, [pc, #208]	; (8001d84 <robotMachine+0x594>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	4a37      	ldr	r2, [pc, #220]	; (8001d94 <robotMachine+0x5a4>)
 8001cb8:	6890      	ldr	r0, [r2, #8]
 8001cba:	4c2d      	ldr	r4, [pc, #180]	; (8001d70 <robotMachine+0x580>)
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	0052      	lsls	r2, r2, #1
 8001cc0:	441a      	add	r2, r3
 8001cc2:	0053      	lsls	r3, r2, #1
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	011b      	lsls	r3, r3, #4
 8001cca:	1a5b      	subs	r3, r3, r1
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	4413      	add	r3, r2
 8001cd0:	4403      	add	r3, r0
 8001cd2:	2202      	movs	r2, #2
 8001cd4:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
			moveNode(direcciones[DERECHA]);
 8001cd8:	4b2e      	ldr	r3, [pc, #184]	; (8001d94 <robotMachine+0x5a4>)
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f000 fdd1 	bl	8002884 <moveNode>
			rotateAxis(DERECHA);
 8001ce2:	2003      	movs	r0, #3
 8001ce4:	f000 ffde 	bl	8002ca4 <rotateAxis>
			counter++;
 8001ce8:	4b2b      	ldr	r3, [pc, #172]	; (8001d98 <robotMachine+0x5a8>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	3301      	adds	r3, #1
 8001cee:	4a2a      	ldr	r2, [pc, #168]	; (8001d98 <robotMachine+0x5a8>)
 8001cf0:	6013      	str	r3, [r2, #0]
 8001cf2:	e018      	b.n	8001d26 <robotMachine+0x536>
		} else if (movimiento == ATRAS) {
 8001cf4:	4b26      	ldr	r3, [pc, #152]	; (8001d90 <robotMachine+0x5a0>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d114      	bne.n	8001d26 <robotMachine+0x536>
			counter++;
 8001cfc:	4b26      	ldr	r3, [pc, #152]	; (8001d98 <robotMachine+0x5a8>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	3301      	adds	r3, #1
 8001d02:	4a25      	ldr	r2, [pc, #148]	; (8001d98 <robotMachine+0x5a8>)
 8001d04:	6013      	str	r3, [r2, #0]
			counter++;
 8001d06:	4b24      	ldr	r3, [pc, #144]	; (8001d98 <robotMachine+0x5a8>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	4a22      	ldr	r2, [pc, #136]	; (8001d98 <robotMachine+0x5a8>)
 8001d0e:	6013      	str	r3, [r2, #0]
			moveNode(direcciones[ATRAS]);
 8001d10:	4b20      	ldr	r3, [pc, #128]	; (8001d94 <robotMachine+0x5a4>)
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f000 fdb5 	bl	8002884 <moveNode>
			rotateAxis(DERECHA);
 8001d1a:	2003      	movs	r0, #3
 8001d1c:	f000 ffc2 	bl	8002ca4 <rotateAxis>
			rotateAxis(DERECHA);
 8001d20:	2003      	movs	r0, #3
 8001d22:	f000 ffbf 	bl	8002ca4 <rotateAxis>
		TX_BUFFER[0] = '*';
 8001d26:	4b13      	ldr	r3, [pc, #76]	; (8001d74 <robotMachine+0x584>)
 8001d28:	222a      	movs	r2, #42	; 0x2a
 8001d2a:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = '*';
 8001d2c:	4b11      	ldr	r3, [pc, #68]	; (8001d74 <robotMachine+0x584>)
 8001d2e:	222a      	movs	r2, #42	; 0x2a
 8001d30:	705a      	strb	r2, [r3, #1]
		TX_BUFFER[2] = '\n';
 8001d32:	4b10      	ldr	r3, [pc, #64]	; (8001d74 <robotMachine+0x584>)
 8001d34:	220a      	movs	r2, #10
 8001d36:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart1, TX_BUFFER, 3, 100);
 8001d38:	2364      	movs	r3, #100	; 0x64
 8001d3a:	2203      	movs	r2, #3
 8001d3c:	490d      	ldr	r1, [pc, #52]	; (8001d74 <robotMachine+0x584>)
 8001d3e:	480e      	ldr	r0, [pc, #56]	; (8001d78 <robotMachine+0x588>)
 8001d40:	f004 fadb 	bl	80062fa <HAL_UART_Transmit>
		movimientoFlag = 0;
 8001d44:	4b15      	ldr	r3, [pc, #84]	; (8001d9c <robotMachine+0x5ac>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	601a      	str	r2, [r3, #0]
		robotState = MOVING;
 8001d4a:	4b10      	ldr	r3, [pc, #64]	; (8001d8c <robotMachine+0x59c>)
 8001d4c:	2202      	movs	r2, #2
 8001d4e:	601a      	str	r2, [r3, #0]
		break;
 8001d50:	e00c      	b.n	8001d6c <robotMachine+0x57c>
		movementMachine(movimiento);
 8001d52:	4b0f      	ldr	r3, [pc, #60]	; (8001d90 <robotMachine+0x5a0>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f000 fdc6 	bl	80028e8 <movementMachine>
		if (movimientoFlag == 1) {
 8001d5c:	4b0f      	ldr	r3, [pc, #60]	; (8001d9c <robotMachine+0x5ac>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d102      	bne.n	8001d6a <robotMachine+0x57a>
			robotState = READING;
 8001d64:	4b09      	ldr	r3, [pc, #36]	; (8001d8c <robotMachine+0x59c>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
		break;
 8001d6a:	bf00      	nop
}
 8001d6c:	bf00      	nop
 8001d6e:	bdb0      	pop	{r4, r5, r7, pc}
 8001d70:	2000126c 	.word	0x2000126c
 8001d74:	200011fc 	.word	0x200011fc
 8001d78:	20001ccc 	.word	0x20001ccc
 8001d7c:	200011dc 	.word	0x200011dc
 8001d80:	2000122c 	.word	0x2000122c
 8001d84:	2000125c 	.word	0x2000125c
 8001d88:	20001224 	.word	0x20001224
 8001d8c:	2000123c 	.word	0x2000123c
 8001d90:	20001220 	.word	0x20001220
 8001d94:	200011ec 	.word	0x200011ec
 8001d98:	20001234 	.word	0x20001234
 8001d9c:	20001228 	.word	0x20001228

08001da0 <runDirections>:

void runDirections(char moves[25]) {
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
	if (moves[m] == 'a') {
 8001da8:	4b20      	ldr	r3, [pc, #128]	; (8001e2c <runDirections+0x8c>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	461a      	mov	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4413      	add	r3, r2
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	2b61      	cmp	r3, #97	; 0x61
 8001db6:	d103      	bne.n	8001dc0 <runDirections+0x20>
		movementMachine(ADELANTE);
 8001db8:	2000      	movs	r0, #0
 8001dba:	f000 fd95 	bl	80028e8 <movementMachine>
 8001dbe:	e016      	b.n	8001dee <runDirections+0x4e>
	} else if (moves[m] == 'd') {
 8001dc0:	4b1a      	ldr	r3, [pc, #104]	; (8001e2c <runDirections+0x8c>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4413      	add	r3, r2
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	2b64      	cmp	r3, #100	; 0x64
 8001dce:	d103      	bne.n	8001dd8 <runDirections+0x38>
		movementMachine(DERECHA);
 8001dd0:	2003      	movs	r0, #3
 8001dd2:	f000 fd89 	bl	80028e8 <movementMachine>
 8001dd6:	e00a      	b.n	8001dee <runDirections+0x4e>
	} else if (moves[m] == 'i') {
 8001dd8:	4b14      	ldr	r3, [pc, #80]	; (8001e2c <runDirections+0x8c>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	461a      	mov	r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4413      	add	r3, r2
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	2b69      	cmp	r3, #105	; 0x69
 8001de6:	d102      	bne.n	8001dee <runDirections+0x4e>
		movementMachine(IZQUIERDA);
 8001de8:	2001      	movs	r0, #1
 8001dea:	f000 fd7d 	bl	80028e8 <movementMachine>
	}/* else {
	 movementMachine(SUPER);
	 }*/
	TX_BUFFER[0] = moves[m];
 8001dee:	4b0f      	ldr	r3, [pc, #60]	; (8001e2c <runDirections+0x8c>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	461a      	mov	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	4413      	add	r3, r2
 8001df8:	781a      	ldrb	r2, [r3, #0]
 8001dfa:	4b0d      	ldr	r3, [pc, #52]	; (8001e30 <runDirections+0x90>)
 8001dfc:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, TX_BUFFER, 1, 100);
 8001dfe:	2364      	movs	r3, #100	; 0x64
 8001e00:	2201      	movs	r2, #1
 8001e02:	490b      	ldr	r1, [pc, #44]	; (8001e30 <runDirections+0x90>)
 8001e04:	480b      	ldr	r0, [pc, #44]	; (8001e34 <runDirections+0x94>)
 8001e06:	f004 fa78 	bl	80062fa <HAL_UART_Transmit>
	if (movimientoFlag == 1) {
 8001e0a:	4b0b      	ldr	r3, [pc, #44]	; (8001e38 <runDirections+0x98>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d107      	bne.n	8001e22 <runDirections+0x82>
		m++;
 8001e12:	4b06      	ldr	r3, [pc, #24]	; (8001e2c <runDirections+0x8c>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	3301      	adds	r3, #1
 8001e18:	4a04      	ldr	r2, [pc, #16]	; (8001e2c <runDirections+0x8c>)
 8001e1a:	6013      	str	r3, [r2, #0]
		movimientoFlag = 0;
 8001e1c:	4b06      	ldr	r3, [pc, #24]	; (8001e38 <runDirections+0x98>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	601a      	str	r2, [r3, #0]
	}
}
 8001e22:	bf00      	nop
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	20001218 	.word	0x20001218
 8001e30:	200011fc 	.word	0x200011fc
 8001e34:	20001ccc 	.word	0x20001ccc
 8001e38:	20001228 	.word	0x20001228

08001e3c <addDirection>:

void addDirection(int x, int y) {
 8001e3c:	b590      	push	{r4, r7, lr}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]

	if (Map[x][y].Lados[direcciones[ADELANTE]] != 1) {
 8001e46:	4b77      	ldr	r3, [pc, #476]	; (8002024 <addDirection+0x1e8>)
 8001e48:	6818      	ldr	r0, [r3, #0]
 8001e4a:	4c77      	ldr	r4, [pc, #476]	; (8002028 <addDirection+0x1ec>)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	6879      	ldr	r1, [r7, #4]
 8001e50:	461a      	mov	r2, r3
 8001e52:	0052      	lsls	r2, r2, #1
 8001e54:	441a      	add	r2, r3
 8001e56:	0053      	lsls	r3, r2, #1
 8001e58:	461a      	mov	r2, r3
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	011b      	lsls	r3, r3, #4
 8001e5e:	1a5b      	subs	r3, r3, r1
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	4413      	add	r3, r2
 8001e64:	4403      	add	r3, r0
 8001e66:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d01b      	beq.n	8001ea6 <addDirection+0x6a>
		Map[x][y].Lados[direcciones[ADELANTE]] = 2;
 8001e6e:	4b6d      	ldr	r3, [pc, #436]	; (8002024 <addDirection+0x1e8>)
 8001e70:	6818      	ldr	r0, [r3, #0]
 8001e72:	4c6d      	ldr	r4, [pc, #436]	; (8002028 <addDirection+0x1ec>)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	6879      	ldr	r1, [r7, #4]
 8001e78:	461a      	mov	r2, r3
 8001e7a:	0052      	lsls	r2, r2, #1
 8001e7c:	441a      	add	r2, r3
 8001e7e:	0053      	lsls	r3, r2, #1
 8001e80:	461a      	mov	r2, r3
 8001e82:	460b      	mov	r3, r1
 8001e84:	011b      	lsls	r3, r3, #4
 8001e86:	1a5b      	subs	r3, r3, r1
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	4413      	add	r3, r2
 8001e8c:	4403      	add	r3, r0
 8001e8e:	2202      	movs	r2, #2
 8001e90:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
		moveNode(ADELANTE);
 8001e94:	2000      	movs	r0, #0
 8001e96:	f000 fcf5 	bl	8002884 <moveNode>
		directions[directionsSize] = 'a';
 8001e9a:	4b64      	ldr	r3, [pc, #400]	; (800202c <addDirection+0x1f0>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a64      	ldr	r2, [pc, #400]	; (8002030 <addDirection+0x1f4>)
 8001ea0:	2161      	movs	r1, #97	; 0x61
 8001ea2:	54d1      	strb	r1, [r2, r3]
 8001ea4:	e064      	b.n	8001f70 <addDirection+0x134>
	} else if (Map[x][y].Lados[direcciones[IZQUIERDA]] != 1) {
 8001ea6:	4b5f      	ldr	r3, [pc, #380]	; (8002024 <addDirection+0x1e8>)
 8001ea8:	6858      	ldr	r0, [r3, #4]
 8001eaa:	4c5f      	ldr	r4, [pc, #380]	; (8002028 <addDirection+0x1ec>)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	6879      	ldr	r1, [r7, #4]
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	0052      	lsls	r2, r2, #1
 8001eb4:	441a      	add	r2, r3
 8001eb6:	0053      	lsls	r3, r2, #1
 8001eb8:	461a      	mov	r2, r3
 8001eba:	460b      	mov	r3, r1
 8001ebc:	011b      	lsls	r3, r3, #4
 8001ebe:	1a5b      	subs	r3, r3, r1
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	4413      	add	r3, r2
 8001ec4:	4403      	add	r3, r0
 8001ec6:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d01e      	beq.n	8001f0c <addDirection+0xd0>
		Map[x][y].Lados[direcciones[IZQUIERDA]] = 2;
 8001ece:	4b55      	ldr	r3, [pc, #340]	; (8002024 <addDirection+0x1e8>)
 8001ed0:	6858      	ldr	r0, [r3, #4]
 8001ed2:	4c55      	ldr	r4, [pc, #340]	; (8002028 <addDirection+0x1ec>)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	6879      	ldr	r1, [r7, #4]
 8001ed8:	461a      	mov	r2, r3
 8001eda:	0052      	lsls	r2, r2, #1
 8001edc:	441a      	add	r2, r3
 8001ede:	0053      	lsls	r3, r2, #1
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	011b      	lsls	r3, r3, #4
 8001ee6:	1a5b      	subs	r3, r3, r1
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	4413      	add	r3, r2
 8001eec:	4403      	add	r3, r0
 8001eee:	2202      	movs	r2, #2
 8001ef0:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
		moveNode(IZQUIERDA);
 8001ef4:	2001      	movs	r0, #1
 8001ef6:	f000 fcc5 	bl	8002884 <moveNode>
		rotateAxis(IZQUIERDA);
 8001efa:	2001      	movs	r0, #1
 8001efc:	f000 fed2 	bl	8002ca4 <rotateAxis>
		directions[directionsSize] = 'i';
 8001f00:	4b4a      	ldr	r3, [pc, #296]	; (800202c <addDirection+0x1f0>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a4a      	ldr	r2, [pc, #296]	; (8002030 <addDirection+0x1f4>)
 8001f06:	2169      	movs	r1, #105	; 0x69
 8001f08:	54d1      	strb	r1, [r2, r3]
 8001f0a:	e031      	b.n	8001f70 <addDirection+0x134>
	} else if (Map[x][y].Lados[direcciones[DERECHA]] != 1) {
 8001f0c:	4b45      	ldr	r3, [pc, #276]	; (8002024 <addDirection+0x1e8>)
 8001f0e:	68d8      	ldr	r0, [r3, #12]
 8001f10:	4c45      	ldr	r4, [pc, #276]	; (8002028 <addDirection+0x1ec>)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	6879      	ldr	r1, [r7, #4]
 8001f16:	461a      	mov	r2, r3
 8001f18:	0052      	lsls	r2, r2, #1
 8001f1a:	441a      	add	r2, r3
 8001f1c:	0053      	lsls	r3, r2, #1
 8001f1e:	461a      	mov	r2, r3
 8001f20:	460b      	mov	r3, r1
 8001f22:	011b      	lsls	r3, r3, #4
 8001f24:	1a5b      	subs	r3, r3, r1
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	4413      	add	r3, r2
 8001f2a:	4403      	add	r3, r0
 8001f2c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d01d      	beq.n	8001f70 <addDirection+0x134>
		Map[x][y].Lados[direcciones[DERECHA]] = 2;
 8001f34:	4b3b      	ldr	r3, [pc, #236]	; (8002024 <addDirection+0x1e8>)
 8001f36:	68d8      	ldr	r0, [r3, #12]
 8001f38:	4c3b      	ldr	r4, [pc, #236]	; (8002028 <addDirection+0x1ec>)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	6879      	ldr	r1, [r7, #4]
 8001f3e:	461a      	mov	r2, r3
 8001f40:	0052      	lsls	r2, r2, #1
 8001f42:	441a      	add	r2, r3
 8001f44:	0053      	lsls	r3, r2, #1
 8001f46:	461a      	mov	r2, r3
 8001f48:	460b      	mov	r3, r1
 8001f4a:	011b      	lsls	r3, r3, #4
 8001f4c:	1a5b      	subs	r3, r3, r1
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	4413      	add	r3, r2
 8001f52:	4403      	add	r3, r0
 8001f54:	2202      	movs	r2, #2
 8001f56:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
		moveNode(DERECHA);
 8001f5a:	2003      	movs	r0, #3
 8001f5c:	f000 fc92 	bl	8002884 <moveNode>
		rotateAxis(DERECHA);
 8001f60:	2003      	movs	r0, #3
 8001f62:	f000 fe9f 	bl	8002ca4 <rotateAxis>
		directions[directionsSize] = 'd';
 8001f66:	4b31      	ldr	r3, [pc, #196]	; (800202c <addDirection+0x1f0>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a31      	ldr	r2, [pc, #196]	; (8002030 <addDirection+0x1f4>)
 8001f6c:	2164      	movs	r1, #100	; 0x64
 8001f6e:	54d1      	strb	r1, [r2, r3]
	}
	intUartSend(Map[x][y].Lados[direcciones[ADELANTE]]);
 8001f70:	4b2c      	ldr	r3, [pc, #176]	; (8002024 <addDirection+0x1e8>)
 8001f72:	6818      	ldr	r0, [r3, #0]
 8001f74:	4c2c      	ldr	r4, [pc, #176]	; (8002028 <addDirection+0x1ec>)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	6879      	ldr	r1, [r7, #4]
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	0052      	lsls	r2, r2, #1
 8001f7e:	441a      	add	r2, r3
 8001f80:	0053      	lsls	r3, r2, #1
 8001f82:	461a      	mov	r2, r3
 8001f84:	460b      	mov	r3, r1
 8001f86:	011b      	lsls	r3, r3, #4
 8001f88:	1a5b      	subs	r3, r3, r1
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	4413      	add	r3, r2
 8001f8e:	4403      	add	r3, r0
 8001f90:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff facb 	bl	8001530 <intUartSend>
	intUartSend(Map[x][y].Lados[direcciones[IZQUIERDA]]);
 8001f9a:	4b22      	ldr	r3, [pc, #136]	; (8002024 <addDirection+0x1e8>)
 8001f9c:	6858      	ldr	r0, [r3, #4]
 8001f9e:	4c22      	ldr	r4, [pc, #136]	; (8002028 <addDirection+0x1ec>)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	6879      	ldr	r1, [r7, #4]
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	0052      	lsls	r2, r2, #1
 8001fa8:	441a      	add	r2, r3
 8001faa:	0053      	lsls	r3, r2, #1
 8001fac:	461a      	mov	r2, r3
 8001fae:	460b      	mov	r3, r1
 8001fb0:	011b      	lsls	r3, r3, #4
 8001fb2:	1a5b      	subs	r3, r3, r1
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	4413      	add	r3, r2
 8001fb8:	4403      	add	r3, r0
 8001fba:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff fab6 	bl	8001530 <intUartSend>
	intUartSend(Map[x][y].Lados[direcciones[DERECHA]]);
 8001fc4:	4b17      	ldr	r3, [pc, #92]	; (8002024 <addDirection+0x1e8>)
 8001fc6:	68d8      	ldr	r0, [r3, #12]
 8001fc8:	4c17      	ldr	r4, [pc, #92]	; (8002028 <addDirection+0x1ec>)
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	6879      	ldr	r1, [r7, #4]
 8001fce:	461a      	mov	r2, r3
 8001fd0:	0052      	lsls	r2, r2, #1
 8001fd2:	441a      	add	r2, r3
 8001fd4:	0053      	lsls	r3, r2, #1
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	460b      	mov	r3, r1
 8001fda:	011b      	lsls	r3, r3, #4
 8001fdc:	1a5b      	subs	r3, r3, r1
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	4413      	add	r3, r2
 8001fe2:	4403      	add	r3, r0
 8001fe4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7ff faa1 	bl	8001530 <intUartSend>
	TX_BUFFER[0] = 'D';
 8001fee:	4b11      	ldr	r3, [pc, #68]	; (8002034 <addDirection+0x1f8>)
 8001ff0:	2244      	movs	r2, #68	; 0x44
 8001ff2:	701a      	strb	r2, [r3, #0]
	TX_BUFFER[1] = directions[directionsSize];
 8001ff4:	4b0d      	ldr	r3, [pc, #52]	; (800202c <addDirection+0x1f0>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a0d      	ldr	r2, [pc, #52]	; (8002030 <addDirection+0x1f4>)
 8001ffa:	5cd2      	ldrb	r2, [r2, r3]
 8001ffc:	4b0d      	ldr	r3, [pc, #52]	; (8002034 <addDirection+0x1f8>)
 8001ffe:	705a      	strb	r2, [r3, #1]
	TX_BUFFER[2] = '\n';
 8002000:	4b0c      	ldr	r3, [pc, #48]	; (8002034 <addDirection+0x1f8>)
 8002002:	220a      	movs	r2, #10
 8002004:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(&huart1, TX_BUFFER, 3, 100);
 8002006:	2364      	movs	r3, #100	; 0x64
 8002008:	2203      	movs	r2, #3
 800200a:	490a      	ldr	r1, [pc, #40]	; (8002034 <addDirection+0x1f8>)
 800200c:	480a      	ldr	r0, [pc, #40]	; (8002038 <addDirection+0x1fc>)
 800200e:	f004 f974 	bl	80062fa <HAL_UART_Transmit>
	directionsSize++;
 8002012:	4b06      	ldr	r3, [pc, #24]	; (800202c <addDirection+0x1f0>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	3301      	adds	r3, #1
 8002018:	4a04      	ldr	r2, [pc, #16]	; (800202c <addDirection+0x1f0>)
 800201a:	6013      	str	r3, [r2, #0]

}
 800201c:	bf00      	nop
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	bd90      	pop	{r4, r7, pc}
 8002024:	200011ec 	.word	0x200011ec
 8002028:	2000126c 	.word	0x2000126c
 800202c:	2000121c 	.word	0x2000121c
 8002030:	20001240 	.word	0x20001240
 8002034:	200011fc 	.word	0x200011fc
 8002038:	20001ccc 	.word	0x20001ccc

0800203c <ChooseNextNode>:

int ChooseNextNode(int x, int y) {
 800203c:	b590      	push	{r4, r7, lr}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
	if (Map[x][y].Lados[direcciones[ADELANTE]] == 0) {
 8002046:	4b74      	ldr	r3, [pc, #464]	; (8002218 <ChooseNextNode+0x1dc>)
 8002048:	6818      	ldr	r0, [r3, #0]
 800204a:	4c74      	ldr	r4, [pc, #464]	; (800221c <ChooseNextNode+0x1e0>)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	6879      	ldr	r1, [r7, #4]
 8002050:	461a      	mov	r2, r3
 8002052:	0052      	lsls	r2, r2, #1
 8002054:	441a      	add	r2, r3
 8002056:	0053      	lsls	r3, r2, #1
 8002058:	461a      	mov	r2, r3
 800205a:	460b      	mov	r3, r1
 800205c:	011b      	lsls	r3, r3, #4
 800205e:	1a5b      	subs	r3, r3, r1
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	4413      	add	r3, r2
 8002064:	4403      	add	r3, r0
 8002066:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800206a:	2b00      	cmp	r3, #0
 800206c:	f040 80dc 	bne.w	8002228 <ChooseNextNode+0x1ec>
		TX_BUFFER[0] = 'A';
 8002070:	4b6b      	ldr	r3, [pc, #428]	; (8002220 <ChooseNextNode+0x1e4>)
 8002072:	2241      	movs	r2, #65	; 0x41
 8002074:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = '\n';
 8002076:	4b6a      	ldr	r3, [pc, #424]	; (8002220 <ChooseNextNode+0x1e4>)
 8002078:	220a      	movs	r2, #10
 800207a:	705a      	strb	r2, [r3, #1]
		HAL_UART_Transmit(&huart1, TX_BUFFER, 2, 100);
 800207c:	2364      	movs	r3, #100	; 0x64
 800207e:	2202      	movs	r2, #2
 8002080:	4967      	ldr	r1, [pc, #412]	; (8002220 <ChooseNextNode+0x1e4>)
 8002082:	4868      	ldr	r0, [pc, #416]	; (8002224 <ChooseNextNode+0x1e8>)
 8002084:	f004 f939 	bl	80062fa <HAL_UART_Transmit>
		Map[x][y].Lados[direcciones[ADELANTE]] = 2;
 8002088:	4b63      	ldr	r3, [pc, #396]	; (8002218 <ChooseNextNode+0x1dc>)
 800208a:	6818      	ldr	r0, [r3, #0]
 800208c:	4c63      	ldr	r4, [pc, #396]	; (800221c <ChooseNextNode+0x1e0>)
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	6879      	ldr	r1, [r7, #4]
 8002092:	461a      	mov	r2, r3
 8002094:	0052      	lsls	r2, r2, #1
 8002096:	441a      	add	r2, r3
 8002098:	0053      	lsls	r3, r2, #1
 800209a:	461a      	mov	r2, r3
 800209c:	460b      	mov	r3, r1
 800209e:	011b      	lsls	r3, r3, #4
 80020a0:	1a5b      	subs	r3, r3, r1
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	4413      	add	r3, r2
 80020a6:	4403      	add	r3, r0
 80020a8:	2202      	movs	r2, #2
 80020aa:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
		if (Map[x][y].visitado > 1) {
 80020ae:	485b      	ldr	r0, [pc, #364]	; (800221c <ChooseNextNode+0x1e0>)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	6879      	ldr	r1, [r7, #4]
 80020b4:	461a      	mov	r2, r3
 80020b6:	0052      	lsls	r2, r2, #1
 80020b8:	441a      	add	r2, r3
 80020ba:	00d3      	lsls	r3, r2, #3
 80020bc:	461a      	mov	r2, r3
 80020be:	460b      	mov	r3, r1
 80020c0:	011b      	lsls	r3, r3, #4
 80020c2:	1a5b      	subs	r3, r3, r1
 80020c4:	011b      	lsls	r3, r3, #4
 80020c6:	4413      	add	r3, r2
 80020c8:	4403      	add	r3, r0
 80020ca:	3310      	adds	r3, #16
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	dd03      	ble.n	80020da <ChooseNextNode+0x9e>
			EliminateNode(x, y);
 80020d2:	6839      	ldr	r1, [r7, #0]
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f000 fab5 	bl	8002644 <EliminateNode>
		}
		moveNode(direcciones[ADELANTE]);
 80020da:	4b4f      	ldr	r3, [pc, #316]	; (8002218 <ChooseNextNode+0x1dc>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4618      	mov	r0, r3
 80020e0:	f000 fbd0 	bl	8002884 <moveNode>
		if (Map[x][y].Lados[direcciones[ATRAS]] != 1)
 80020e4:	4b4c      	ldr	r3, [pc, #304]	; (8002218 <ChooseNextNode+0x1dc>)
 80020e6:	6898      	ldr	r0, [r3, #8]
 80020e8:	4c4c      	ldr	r4, [pc, #304]	; (800221c <ChooseNextNode+0x1e0>)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	6879      	ldr	r1, [r7, #4]
 80020ee:	461a      	mov	r2, r3
 80020f0:	0052      	lsls	r2, r2, #1
 80020f2:	441a      	add	r2, r3
 80020f4:	0053      	lsls	r3, r2, #1
 80020f6:	461a      	mov	r2, r3
 80020f8:	460b      	mov	r3, r1
 80020fa:	011b      	lsls	r3, r3, #4
 80020fc:	1a5b      	subs	r3, r3, r1
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	4413      	add	r3, r2
 8002102:	4403      	add	r3, r0
 8002104:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d012      	beq.n	8002132 <ChooseNextNode+0xf6>
			Map[x][y].Lados[direcciones[ATRAS]] = 2;
 800210c:	4b42      	ldr	r3, [pc, #264]	; (8002218 <ChooseNextNode+0x1dc>)
 800210e:	6898      	ldr	r0, [r3, #8]
 8002110:	4c42      	ldr	r4, [pc, #264]	; (800221c <ChooseNextNode+0x1e0>)
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	6879      	ldr	r1, [r7, #4]
 8002116:	461a      	mov	r2, r3
 8002118:	0052      	lsls	r2, r2, #1
 800211a:	441a      	add	r2, r3
 800211c:	0053      	lsls	r3, r2, #1
 800211e:	461a      	mov	r2, r3
 8002120:	460b      	mov	r3, r1
 8002122:	011b      	lsls	r3, r3, #4
 8002124:	1a5b      	subs	r3, r3, r1
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	4413      	add	r3, r2
 800212a:	4403      	add	r3, r0
 800212c:	2202      	movs	r2, #2
 800212e:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
		TX_BUFFER[0] = 'D';
 8002132:	4b3b      	ldr	r3, [pc, #236]	; (8002220 <ChooseNextNode+0x1e4>)
 8002134:	2244      	movs	r2, #68	; 0x44
 8002136:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = Map[x][y].Lados[DERECHA] + '0';
 8002138:	4838      	ldr	r0, [pc, #224]	; (800221c <ChooseNextNode+0x1e0>)
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	6879      	ldr	r1, [r7, #4]
 800213e:	461a      	mov	r2, r3
 8002140:	0052      	lsls	r2, r2, #1
 8002142:	441a      	add	r2, r3
 8002144:	00d3      	lsls	r3, r2, #3
 8002146:	461a      	mov	r2, r3
 8002148:	460b      	mov	r3, r1
 800214a:	011b      	lsls	r3, r3, #4
 800214c:	1a5b      	subs	r3, r3, r1
 800214e:	011b      	lsls	r3, r3, #4
 8002150:	4413      	add	r3, r2
 8002152:	4403      	add	r3, r0
 8002154:	330c      	adds	r3, #12
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	b2db      	uxtb	r3, r3
 800215a:	3330      	adds	r3, #48	; 0x30
 800215c:	b2da      	uxtb	r2, r3
 800215e:	4b30      	ldr	r3, [pc, #192]	; (8002220 <ChooseNextNode+0x1e4>)
 8002160:	705a      	strb	r2, [r3, #1]
		TX_BUFFER[2] = '\n';
 8002162:	4b2f      	ldr	r3, [pc, #188]	; (8002220 <ChooseNextNode+0x1e4>)
 8002164:	220a      	movs	r2, #10
 8002166:	709a      	strb	r2, [r3, #2]
		TX_BUFFER[3] = 'C';
 8002168:	4b2d      	ldr	r3, [pc, #180]	; (8002220 <ChooseNextNode+0x1e4>)
 800216a:	2243      	movs	r2, #67	; 0x43
 800216c:	70da      	strb	r2, [r3, #3]
		TX_BUFFER[4] = Map[x][y].Lados[ADELANTE] + '0';
 800216e:	482b      	ldr	r0, [pc, #172]	; (800221c <ChooseNextNode+0x1e0>)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	6879      	ldr	r1, [r7, #4]
 8002174:	461a      	mov	r2, r3
 8002176:	0052      	lsls	r2, r2, #1
 8002178:	441a      	add	r2, r3
 800217a:	00d3      	lsls	r3, r2, #3
 800217c:	461a      	mov	r2, r3
 800217e:	460b      	mov	r3, r1
 8002180:	011b      	lsls	r3, r3, #4
 8002182:	1a5b      	subs	r3, r3, r1
 8002184:	011b      	lsls	r3, r3, #4
 8002186:	4413      	add	r3, r2
 8002188:	4403      	add	r3, r0
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	b2db      	uxtb	r3, r3
 800218e:	3330      	adds	r3, #48	; 0x30
 8002190:	b2da      	uxtb	r2, r3
 8002192:	4b23      	ldr	r3, [pc, #140]	; (8002220 <ChooseNextNode+0x1e4>)
 8002194:	711a      	strb	r2, [r3, #4]
		TX_BUFFER[5] = '\n';
 8002196:	4b22      	ldr	r3, [pc, #136]	; (8002220 <ChooseNextNode+0x1e4>)
 8002198:	220a      	movs	r2, #10
 800219a:	715a      	strb	r2, [r3, #5]
		TX_BUFFER[6] = 'I';
 800219c:	4b20      	ldr	r3, [pc, #128]	; (8002220 <ChooseNextNode+0x1e4>)
 800219e:	2249      	movs	r2, #73	; 0x49
 80021a0:	719a      	strb	r2, [r3, #6]
		TX_BUFFER[7] = Map[x][y].Lados[IZQUIERDA] + '0';
 80021a2:	481e      	ldr	r0, [pc, #120]	; (800221c <ChooseNextNode+0x1e0>)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	6879      	ldr	r1, [r7, #4]
 80021a8:	461a      	mov	r2, r3
 80021aa:	0052      	lsls	r2, r2, #1
 80021ac:	441a      	add	r2, r3
 80021ae:	00d3      	lsls	r3, r2, #3
 80021b0:	461a      	mov	r2, r3
 80021b2:	460b      	mov	r3, r1
 80021b4:	011b      	lsls	r3, r3, #4
 80021b6:	1a5b      	subs	r3, r3, r1
 80021b8:	011b      	lsls	r3, r3, #4
 80021ba:	4413      	add	r3, r2
 80021bc:	4403      	add	r3, r0
 80021be:	3304      	adds	r3, #4
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	3330      	adds	r3, #48	; 0x30
 80021c6:	b2da      	uxtb	r2, r3
 80021c8:	4b15      	ldr	r3, [pc, #84]	; (8002220 <ChooseNextNode+0x1e4>)
 80021ca:	71da      	strb	r2, [r3, #7]
		TX_BUFFER[8] = '\n';
 80021cc:	4b14      	ldr	r3, [pc, #80]	; (8002220 <ChooseNextNode+0x1e4>)
 80021ce:	220a      	movs	r2, #10
 80021d0:	721a      	strb	r2, [r3, #8]
		TX_BUFFER[9] = 'A';
 80021d2:	4b13      	ldr	r3, [pc, #76]	; (8002220 <ChooseNextNode+0x1e4>)
 80021d4:	2241      	movs	r2, #65	; 0x41
 80021d6:	725a      	strb	r2, [r3, #9]
		TX_BUFFER[10] = Map[x][y].Lados[ATRAS] + '0';
 80021d8:	4810      	ldr	r0, [pc, #64]	; (800221c <ChooseNextNode+0x1e0>)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	6879      	ldr	r1, [r7, #4]
 80021de:	461a      	mov	r2, r3
 80021e0:	0052      	lsls	r2, r2, #1
 80021e2:	441a      	add	r2, r3
 80021e4:	00d3      	lsls	r3, r2, #3
 80021e6:	461a      	mov	r2, r3
 80021e8:	460b      	mov	r3, r1
 80021ea:	011b      	lsls	r3, r3, #4
 80021ec:	1a5b      	subs	r3, r3, r1
 80021ee:	011b      	lsls	r3, r3, #4
 80021f0:	4413      	add	r3, r2
 80021f2:	4403      	add	r3, r0
 80021f4:	3308      	adds	r3, #8
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	3330      	adds	r3, #48	; 0x30
 80021fc:	b2da      	uxtb	r2, r3
 80021fe:	4b08      	ldr	r3, [pc, #32]	; (8002220 <ChooseNextNode+0x1e4>)
 8002200:	729a      	strb	r2, [r3, #10]
		TX_BUFFER[11] = '\n';
 8002202:	4b07      	ldr	r3, [pc, #28]	; (8002220 <ChooseNextNode+0x1e4>)
 8002204:	220a      	movs	r2, #10
 8002206:	72da      	strb	r2, [r3, #11]
		HAL_UART_Transmit(&huart1, TX_BUFFER, 12, 100);
 8002208:	2364      	movs	r3, #100	; 0x64
 800220a:	220c      	movs	r2, #12
 800220c:	4904      	ldr	r1, [pc, #16]	; (8002220 <ChooseNextNode+0x1e4>)
 800220e:	4805      	ldr	r0, [pc, #20]	; (8002224 <ChooseNextNode+0x1e8>)
 8002210:	f004 f873 	bl	80062fa <HAL_UART_Transmit>

		return ADELANTE;
 8002214:	2300      	movs	r3, #0
 8002216:	e20b      	b.n	8002630 <ChooseNextNode+0x5f4>
 8002218:	200011ec 	.word	0x200011ec
 800221c:	2000126c 	.word	0x2000126c
 8002220:	200011fc 	.word	0x200011fc
 8002224:	20001ccc 	.word	0x20001ccc
	} else if (Map[x][y].Lados[direcciones[IZQUIERDA]] == 0) {
 8002228:	4bbc      	ldr	r3, [pc, #752]	; (800251c <ChooseNextNode+0x4e0>)
 800222a:	6858      	ldr	r0, [r3, #4]
 800222c:	4cbc      	ldr	r4, [pc, #752]	; (8002520 <ChooseNextNode+0x4e4>)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	6879      	ldr	r1, [r7, #4]
 8002232:	461a      	mov	r2, r3
 8002234:	0052      	lsls	r2, r2, #1
 8002236:	441a      	add	r2, r3
 8002238:	0053      	lsls	r3, r2, #1
 800223a:	461a      	mov	r2, r3
 800223c:	460b      	mov	r3, r1
 800223e:	011b      	lsls	r3, r3, #4
 8002240:	1a5b      	subs	r3, r3, r1
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	4413      	add	r3, r2
 8002246:	4403      	add	r3, r0
 8002248:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800224c:	2b00      	cmp	r3, #0
 800224e:	f040 80a8 	bne.w	80023a2 <ChooseNextNode+0x366>
		TX_BUFFER[0] = 'I';
 8002252:	4bb4      	ldr	r3, [pc, #720]	; (8002524 <ChooseNextNode+0x4e8>)
 8002254:	2249      	movs	r2, #73	; 0x49
 8002256:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = '\n';
 8002258:	4bb2      	ldr	r3, [pc, #712]	; (8002524 <ChooseNextNode+0x4e8>)
 800225a:	220a      	movs	r2, #10
 800225c:	705a      	strb	r2, [r3, #1]
		HAL_UART_Transmit(&huart1, TX_BUFFER, 2, 100);
 800225e:	2364      	movs	r3, #100	; 0x64
 8002260:	2202      	movs	r2, #2
 8002262:	49b0      	ldr	r1, [pc, #704]	; (8002524 <ChooseNextNode+0x4e8>)
 8002264:	48b0      	ldr	r0, [pc, #704]	; (8002528 <ChooseNextNode+0x4ec>)
 8002266:	f004 f848 	bl	80062fa <HAL_UART_Transmit>
		Map[x][y].Lados[direcciones[IZQUIERDA]] = 2;
 800226a:	4bac      	ldr	r3, [pc, #688]	; (800251c <ChooseNextNode+0x4e0>)
 800226c:	6858      	ldr	r0, [r3, #4]
 800226e:	4cac      	ldr	r4, [pc, #688]	; (8002520 <ChooseNextNode+0x4e4>)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	6879      	ldr	r1, [r7, #4]
 8002274:	461a      	mov	r2, r3
 8002276:	0052      	lsls	r2, r2, #1
 8002278:	441a      	add	r2, r3
 800227a:	0053      	lsls	r3, r2, #1
 800227c:	461a      	mov	r2, r3
 800227e:	460b      	mov	r3, r1
 8002280:	011b      	lsls	r3, r3, #4
 8002282:	1a5b      	subs	r3, r3, r1
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	4413      	add	r3, r2
 8002288:	4403      	add	r3, r0
 800228a:	2202      	movs	r2, #2
 800228c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]

		if (Map[x][y].visitado > 1) {
 8002290:	48a3      	ldr	r0, [pc, #652]	; (8002520 <ChooseNextNode+0x4e4>)
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	6879      	ldr	r1, [r7, #4]
 8002296:	461a      	mov	r2, r3
 8002298:	0052      	lsls	r2, r2, #1
 800229a:	441a      	add	r2, r3
 800229c:	00d3      	lsls	r3, r2, #3
 800229e:	461a      	mov	r2, r3
 80022a0:	460b      	mov	r3, r1
 80022a2:	011b      	lsls	r3, r3, #4
 80022a4:	1a5b      	subs	r3, r3, r1
 80022a6:	011b      	lsls	r3, r3, #4
 80022a8:	4413      	add	r3, r2
 80022aa:	4403      	add	r3, r0
 80022ac:	3310      	adds	r3, #16
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	dd03      	ble.n	80022bc <ChooseNextNode+0x280>
			EliminateNode(x, y);
 80022b4:	6839      	ldr	r1, [r7, #0]
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 f9c4 	bl	8002644 <EliminateNode>
		}
		TX_BUFFER[0] = 'D';
 80022bc:	4b99      	ldr	r3, [pc, #612]	; (8002524 <ChooseNextNode+0x4e8>)
 80022be:	2244      	movs	r2, #68	; 0x44
 80022c0:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = Map[x][y].Lados[DERECHA] + '0';
 80022c2:	4897      	ldr	r0, [pc, #604]	; (8002520 <ChooseNextNode+0x4e4>)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	6879      	ldr	r1, [r7, #4]
 80022c8:	461a      	mov	r2, r3
 80022ca:	0052      	lsls	r2, r2, #1
 80022cc:	441a      	add	r2, r3
 80022ce:	00d3      	lsls	r3, r2, #3
 80022d0:	461a      	mov	r2, r3
 80022d2:	460b      	mov	r3, r1
 80022d4:	011b      	lsls	r3, r3, #4
 80022d6:	1a5b      	subs	r3, r3, r1
 80022d8:	011b      	lsls	r3, r3, #4
 80022da:	4413      	add	r3, r2
 80022dc:	4403      	add	r3, r0
 80022de:	330c      	adds	r3, #12
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	3330      	adds	r3, #48	; 0x30
 80022e6:	b2da      	uxtb	r2, r3
 80022e8:	4b8e      	ldr	r3, [pc, #568]	; (8002524 <ChooseNextNode+0x4e8>)
 80022ea:	705a      	strb	r2, [r3, #1]
		TX_BUFFER[2] = '\n';
 80022ec:	4b8d      	ldr	r3, [pc, #564]	; (8002524 <ChooseNextNode+0x4e8>)
 80022ee:	220a      	movs	r2, #10
 80022f0:	709a      	strb	r2, [r3, #2]
		TX_BUFFER[3] = 'C';
 80022f2:	4b8c      	ldr	r3, [pc, #560]	; (8002524 <ChooseNextNode+0x4e8>)
 80022f4:	2243      	movs	r2, #67	; 0x43
 80022f6:	70da      	strb	r2, [r3, #3]
		TX_BUFFER[4] = Map[x][y].Lados[ADELANTE] + '0';
 80022f8:	4889      	ldr	r0, [pc, #548]	; (8002520 <ChooseNextNode+0x4e4>)
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	6879      	ldr	r1, [r7, #4]
 80022fe:	461a      	mov	r2, r3
 8002300:	0052      	lsls	r2, r2, #1
 8002302:	441a      	add	r2, r3
 8002304:	00d3      	lsls	r3, r2, #3
 8002306:	461a      	mov	r2, r3
 8002308:	460b      	mov	r3, r1
 800230a:	011b      	lsls	r3, r3, #4
 800230c:	1a5b      	subs	r3, r3, r1
 800230e:	011b      	lsls	r3, r3, #4
 8002310:	4413      	add	r3, r2
 8002312:	4403      	add	r3, r0
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	b2db      	uxtb	r3, r3
 8002318:	3330      	adds	r3, #48	; 0x30
 800231a:	b2da      	uxtb	r2, r3
 800231c:	4b81      	ldr	r3, [pc, #516]	; (8002524 <ChooseNextNode+0x4e8>)
 800231e:	711a      	strb	r2, [r3, #4]
		TX_BUFFER[5] = '\n';
 8002320:	4b80      	ldr	r3, [pc, #512]	; (8002524 <ChooseNextNode+0x4e8>)
 8002322:	220a      	movs	r2, #10
 8002324:	715a      	strb	r2, [r3, #5]
		TX_BUFFER[6] = 'I';
 8002326:	4b7f      	ldr	r3, [pc, #508]	; (8002524 <ChooseNextNode+0x4e8>)
 8002328:	2249      	movs	r2, #73	; 0x49
 800232a:	719a      	strb	r2, [r3, #6]
		TX_BUFFER[7] = Map[x][y].Lados[IZQUIERDA] + '0';
 800232c:	487c      	ldr	r0, [pc, #496]	; (8002520 <ChooseNextNode+0x4e4>)
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	6879      	ldr	r1, [r7, #4]
 8002332:	461a      	mov	r2, r3
 8002334:	0052      	lsls	r2, r2, #1
 8002336:	441a      	add	r2, r3
 8002338:	00d3      	lsls	r3, r2, #3
 800233a:	461a      	mov	r2, r3
 800233c:	460b      	mov	r3, r1
 800233e:	011b      	lsls	r3, r3, #4
 8002340:	1a5b      	subs	r3, r3, r1
 8002342:	011b      	lsls	r3, r3, #4
 8002344:	4413      	add	r3, r2
 8002346:	4403      	add	r3, r0
 8002348:	3304      	adds	r3, #4
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	b2db      	uxtb	r3, r3
 800234e:	3330      	adds	r3, #48	; 0x30
 8002350:	b2da      	uxtb	r2, r3
 8002352:	4b74      	ldr	r3, [pc, #464]	; (8002524 <ChooseNextNode+0x4e8>)
 8002354:	71da      	strb	r2, [r3, #7]
		TX_BUFFER[8] = '\n';
 8002356:	4b73      	ldr	r3, [pc, #460]	; (8002524 <ChooseNextNode+0x4e8>)
 8002358:	220a      	movs	r2, #10
 800235a:	721a      	strb	r2, [r3, #8]
		TX_BUFFER[9] = 'A';
 800235c:	4b71      	ldr	r3, [pc, #452]	; (8002524 <ChooseNextNode+0x4e8>)
 800235e:	2241      	movs	r2, #65	; 0x41
 8002360:	725a      	strb	r2, [r3, #9]
		TX_BUFFER[10] = Map[x][y].Lados[ATRAS] + '0';
 8002362:	486f      	ldr	r0, [pc, #444]	; (8002520 <ChooseNextNode+0x4e4>)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	6879      	ldr	r1, [r7, #4]
 8002368:	461a      	mov	r2, r3
 800236a:	0052      	lsls	r2, r2, #1
 800236c:	441a      	add	r2, r3
 800236e:	00d3      	lsls	r3, r2, #3
 8002370:	461a      	mov	r2, r3
 8002372:	460b      	mov	r3, r1
 8002374:	011b      	lsls	r3, r3, #4
 8002376:	1a5b      	subs	r3, r3, r1
 8002378:	011b      	lsls	r3, r3, #4
 800237a:	4413      	add	r3, r2
 800237c:	4403      	add	r3, r0
 800237e:	3308      	adds	r3, #8
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	b2db      	uxtb	r3, r3
 8002384:	3330      	adds	r3, #48	; 0x30
 8002386:	b2da      	uxtb	r2, r3
 8002388:	4b66      	ldr	r3, [pc, #408]	; (8002524 <ChooseNextNode+0x4e8>)
 800238a:	729a      	strb	r2, [r3, #10]
		TX_BUFFER[11] = '\n';
 800238c:	4b65      	ldr	r3, [pc, #404]	; (8002524 <ChooseNextNode+0x4e8>)
 800238e:	220a      	movs	r2, #10
 8002390:	72da      	strb	r2, [r3, #11]
		HAL_UART_Transmit(&huart1, TX_BUFFER, 12, 100);
 8002392:	2364      	movs	r3, #100	; 0x64
 8002394:	220c      	movs	r2, #12
 8002396:	4963      	ldr	r1, [pc, #396]	; (8002524 <ChooseNextNode+0x4e8>)
 8002398:	4863      	ldr	r0, [pc, #396]	; (8002528 <ChooseNextNode+0x4ec>)
 800239a:	f003 ffae 	bl	80062fa <HAL_UART_Transmit>

		return IZQUIERDA;
 800239e:	2301      	movs	r3, #1
 80023a0:	e146      	b.n	8002630 <ChooseNextNode+0x5f4>
	} else if (Map[x][y].Lados[direcciones[DERECHA]] == 0) {
 80023a2:	4b5e      	ldr	r3, [pc, #376]	; (800251c <ChooseNextNode+0x4e0>)
 80023a4:	68d8      	ldr	r0, [r3, #12]
 80023a6:	4c5e      	ldr	r4, [pc, #376]	; (8002520 <ChooseNextNode+0x4e4>)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	6879      	ldr	r1, [r7, #4]
 80023ac:	461a      	mov	r2, r3
 80023ae:	0052      	lsls	r2, r2, #1
 80023b0:	441a      	add	r2, r3
 80023b2:	0053      	lsls	r3, r2, #1
 80023b4:	461a      	mov	r2, r3
 80023b6:	460b      	mov	r3, r1
 80023b8:	011b      	lsls	r3, r3, #4
 80023ba:	1a5b      	subs	r3, r3, r1
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	4413      	add	r3, r2
 80023c0:	4403      	add	r3, r0
 80023c2:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	f040 80b0 	bne.w	800252c <ChooseNextNode+0x4f0>
		TX_BUFFER[0] = 'D';
 80023cc:	4b55      	ldr	r3, [pc, #340]	; (8002524 <ChooseNextNode+0x4e8>)
 80023ce:	2244      	movs	r2, #68	; 0x44
 80023d0:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = '\n';
 80023d2:	4b54      	ldr	r3, [pc, #336]	; (8002524 <ChooseNextNode+0x4e8>)
 80023d4:	220a      	movs	r2, #10
 80023d6:	705a      	strb	r2, [r3, #1]
		HAL_UART_Transmit(&huart1, TX_BUFFER, 2, 100);
 80023d8:	2364      	movs	r3, #100	; 0x64
 80023da:	2202      	movs	r2, #2
 80023dc:	4951      	ldr	r1, [pc, #324]	; (8002524 <ChooseNextNode+0x4e8>)
 80023de:	4852      	ldr	r0, [pc, #328]	; (8002528 <ChooseNextNode+0x4ec>)
 80023e0:	f003 ff8b 	bl	80062fa <HAL_UART_Transmit>
		Map[x][y].Lados[direcciones[DERECHA]] = 2;
 80023e4:	4b4d      	ldr	r3, [pc, #308]	; (800251c <ChooseNextNode+0x4e0>)
 80023e6:	68d8      	ldr	r0, [r3, #12]
 80023e8:	4c4d      	ldr	r4, [pc, #308]	; (8002520 <ChooseNextNode+0x4e4>)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	6879      	ldr	r1, [r7, #4]
 80023ee:	461a      	mov	r2, r3
 80023f0:	0052      	lsls	r2, r2, #1
 80023f2:	441a      	add	r2, r3
 80023f4:	0053      	lsls	r3, r2, #1
 80023f6:	461a      	mov	r2, r3
 80023f8:	460b      	mov	r3, r1
 80023fa:	011b      	lsls	r3, r3, #4
 80023fc:	1a5b      	subs	r3, r3, r1
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	4413      	add	r3, r2
 8002402:	4403      	add	r3, r0
 8002404:	2202      	movs	r2, #2
 8002406:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
		if (Map[x][y].visitado > 1) {
 800240a:	4845      	ldr	r0, [pc, #276]	; (8002520 <ChooseNextNode+0x4e4>)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	461a      	mov	r2, r3
 8002412:	0052      	lsls	r2, r2, #1
 8002414:	441a      	add	r2, r3
 8002416:	00d3      	lsls	r3, r2, #3
 8002418:	461a      	mov	r2, r3
 800241a:	460b      	mov	r3, r1
 800241c:	011b      	lsls	r3, r3, #4
 800241e:	1a5b      	subs	r3, r3, r1
 8002420:	011b      	lsls	r3, r3, #4
 8002422:	4413      	add	r3, r2
 8002424:	4403      	add	r3, r0
 8002426:	3310      	adds	r3, #16
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2b01      	cmp	r3, #1
 800242c:	dd03      	ble.n	8002436 <ChooseNextNode+0x3fa>
			EliminateNode(x, y);
 800242e:	6839      	ldr	r1, [r7, #0]
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f000 f907 	bl	8002644 <EliminateNode>
		}
		TX_BUFFER[0] = 'D';
 8002436:	4b3b      	ldr	r3, [pc, #236]	; (8002524 <ChooseNextNode+0x4e8>)
 8002438:	2244      	movs	r2, #68	; 0x44
 800243a:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = Map[x][y].Lados[DERECHA] + '0';
 800243c:	4838      	ldr	r0, [pc, #224]	; (8002520 <ChooseNextNode+0x4e4>)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	6879      	ldr	r1, [r7, #4]
 8002442:	461a      	mov	r2, r3
 8002444:	0052      	lsls	r2, r2, #1
 8002446:	441a      	add	r2, r3
 8002448:	00d3      	lsls	r3, r2, #3
 800244a:	461a      	mov	r2, r3
 800244c:	460b      	mov	r3, r1
 800244e:	011b      	lsls	r3, r3, #4
 8002450:	1a5b      	subs	r3, r3, r1
 8002452:	011b      	lsls	r3, r3, #4
 8002454:	4413      	add	r3, r2
 8002456:	4403      	add	r3, r0
 8002458:	330c      	adds	r3, #12
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	b2db      	uxtb	r3, r3
 800245e:	3330      	adds	r3, #48	; 0x30
 8002460:	b2da      	uxtb	r2, r3
 8002462:	4b30      	ldr	r3, [pc, #192]	; (8002524 <ChooseNextNode+0x4e8>)
 8002464:	705a      	strb	r2, [r3, #1]
		TX_BUFFER[2] = '\n';
 8002466:	4b2f      	ldr	r3, [pc, #188]	; (8002524 <ChooseNextNode+0x4e8>)
 8002468:	220a      	movs	r2, #10
 800246a:	709a      	strb	r2, [r3, #2]
		TX_BUFFER[3] = 'C';
 800246c:	4b2d      	ldr	r3, [pc, #180]	; (8002524 <ChooseNextNode+0x4e8>)
 800246e:	2243      	movs	r2, #67	; 0x43
 8002470:	70da      	strb	r2, [r3, #3]
		TX_BUFFER[4] = Map[x][y].Lados[ADELANTE] + '0';
 8002472:	482b      	ldr	r0, [pc, #172]	; (8002520 <ChooseNextNode+0x4e4>)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	6879      	ldr	r1, [r7, #4]
 8002478:	461a      	mov	r2, r3
 800247a:	0052      	lsls	r2, r2, #1
 800247c:	441a      	add	r2, r3
 800247e:	00d3      	lsls	r3, r2, #3
 8002480:	461a      	mov	r2, r3
 8002482:	460b      	mov	r3, r1
 8002484:	011b      	lsls	r3, r3, #4
 8002486:	1a5b      	subs	r3, r3, r1
 8002488:	011b      	lsls	r3, r3, #4
 800248a:	4413      	add	r3, r2
 800248c:	4403      	add	r3, r0
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	b2db      	uxtb	r3, r3
 8002492:	3330      	adds	r3, #48	; 0x30
 8002494:	b2da      	uxtb	r2, r3
 8002496:	4b23      	ldr	r3, [pc, #140]	; (8002524 <ChooseNextNode+0x4e8>)
 8002498:	711a      	strb	r2, [r3, #4]
		TX_BUFFER[5] = '\n';
 800249a:	4b22      	ldr	r3, [pc, #136]	; (8002524 <ChooseNextNode+0x4e8>)
 800249c:	220a      	movs	r2, #10
 800249e:	715a      	strb	r2, [r3, #5]
		TX_BUFFER[6] = 'I';
 80024a0:	4b20      	ldr	r3, [pc, #128]	; (8002524 <ChooseNextNode+0x4e8>)
 80024a2:	2249      	movs	r2, #73	; 0x49
 80024a4:	719a      	strb	r2, [r3, #6]
		TX_BUFFER[7] = Map[x][y].Lados[IZQUIERDA] + '0';
 80024a6:	481e      	ldr	r0, [pc, #120]	; (8002520 <ChooseNextNode+0x4e4>)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	6879      	ldr	r1, [r7, #4]
 80024ac:	461a      	mov	r2, r3
 80024ae:	0052      	lsls	r2, r2, #1
 80024b0:	441a      	add	r2, r3
 80024b2:	00d3      	lsls	r3, r2, #3
 80024b4:	461a      	mov	r2, r3
 80024b6:	460b      	mov	r3, r1
 80024b8:	011b      	lsls	r3, r3, #4
 80024ba:	1a5b      	subs	r3, r3, r1
 80024bc:	011b      	lsls	r3, r3, #4
 80024be:	4413      	add	r3, r2
 80024c0:	4403      	add	r3, r0
 80024c2:	3304      	adds	r3, #4
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	3330      	adds	r3, #48	; 0x30
 80024ca:	b2da      	uxtb	r2, r3
 80024cc:	4b15      	ldr	r3, [pc, #84]	; (8002524 <ChooseNextNode+0x4e8>)
 80024ce:	71da      	strb	r2, [r3, #7]
		TX_BUFFER[8] = '\n';
 80024d0:	4b14      	ldr	r3, [pc, #80]	; (8002524 <ChooseNextNode+0x4e8>)
 80024d2:	220a      	movs	r2, #10
 80024d4:	721a      	strb	r2, [r3, #8]
		TX_BUFFER[9] = 'A';
 80024d6:	4b13      	ldr	r3, [pc, #76]	; (8002524 <ChooseNextNode+0x4e8>)
 80024d8:	2241      	movs	r2, #65	; 0x41
 80024da:	725a      	strb	r2, [r3, #9]
		TX_BUFFER[10] = Map[x][y].Lados[ATRAS] + '0';
 80024dc:	4810      	ldr	r0, [pc, #64]	; (8002520 <ChooseNextNode+0x4e4>)
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	6879      	ldr	r1, [r7, #4]
 80024e2:	461a      	mov	r2, r3
 80024e4:	0052      	lsls	r2, r2, #1
 80024e6:	441a      	add	r2, r3
 80024e8:	00d3      	lsls	r3, r2, #3
 80024ea:	461a      	mov	r2, r3
 80024ec:	460b      	mov	r3, r1
 80024ee:	011b      	lsls	r3, r3, #4
 80024f0:	1a5b      	subs	r3, r3, r1
 80024f2:	011b      	lsls	r3, r3, #4
 80024f4:	4413      	add	r3, r2
 80024f6:	4403      	add	r3, r0
 80024f8:	3308      	adds	r3, #8
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	3330      	adds	r3, #48	; 0x30
 8002500:	b2da      	uxtb	r2, r3
 8002502:	4b08      	ldr	r3, [pc, #32]	; (8002524 <ChooseNextNode+0x4e8>)
 8002504:	729a      	strb	r2, [r3, #10]
		TX_BUFFER[11] = '\n';
 8002506:	4b07      	ldr	r3, [pc, #28]	; (8002524 <ChooseNextNode+0x4e8>)
 8002508:	220a      	movs	r2, #10
 800250a:	72da      	strb	r2, [r3, #11]
		HAL_UART_Transmit(&huart1, TX_BUFFER, 12, 100);
 800250c:	2364      	movs	r3, #100	; 0x64
 800250e:	220c      	movs	r2, #12
 8002510:	4904      	ldr	r1, [pc, #16]	; (8002524 <ChooseNextNode+0x4e8>)
 8002512:	4805      	ldr	r0, [pc, #20]	; (8002528 <ChooseNextNode+0x4ec>)
 8002514:	f003 fef1 	bl	80062fa <HAL_UART_Transmit>
		return DERECHA;
 8002518:	2303      	movs	r3, #3
 800251a:	e089      	b.n	8002630 <ChooseNextNode+0x5f4>
 800251c:	200011ec 	.word	0x200011ec
 8002520:	2000126c 	.word	0x2000126c
 8002524:	200011fc 	.word	0x200011fc
 8002528:	20001ccc 	.word	0x20001ccc
	} else {
		TX_BUFFER[0] = 'O';
 800252c:	4b42      	ldr	r3, [pc, #264]	; (8002638 <ChooseNextNode+0x5fc>)
 800252e:	224f      	movs	r2, #79	; 0x4f
 8002530:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = '\n';
 8002532:	4b41      	ldr	r3, [pc, #260]	; (8002638 <ChooseNextNode+0x5fc>)
 8002534:	220a      	movs	r2, #10
 8002536:	705a      	strb	r2, [r3, #1]
		HAL_UART_Transmit(&huart1, TX_BUFFER, 2, 100);
 8002538:	2364      	movs	r3, #100	; 0x64
 800253a:	2202      	movs	r2, #2
 800253c:	493e      	ldr	r1, [pc, #248]	; (8002638 <ChooseNextNode+0x5fc>)
 800253e:	483f      	ldr	r0, [pc, #252]	; (800263c <ChooseNextNode+0x600>)
 8002540:	f003 fedb 	bl	80062fa <HAL_UART_Transmit>
		TX_BUFFER[0] = 'D';
 8002544:	4b3c      	ldr	r3, [pc, #240]	; (8002638 <ChooseNextNode+0x5fc>)
 8002546:	2244      	movs	r2, #68	; 0x44
 8002548:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = Map[x][y].Lados[DERECHA] + '0';
 800254a:	483d      	ldr	r0, [pc, #244]	; (8002640 <ChooseNextNode+0x604>)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	6879      	ldr	r1, [r7, #4]
 8002550:	461a      	mov	r2, r3
 8002552:	0052      	lsls	r2, r2, #1
 8002554:	441a      	add	r2, r3
 8002556:	00d3      	lsls	r3, r2, #3
 8002558:	461a      	mov	r2, r3
 800255a:	460b      	mov	r3, r1
 800255c:	011b      	lsls	r3, r3, #4
 800255e:	1a5b      	subs	r3, r3, r1
 8002560:	011b      	lsls	r3, r3, #4
 8002562:	4413      	add	r3, r2
 8002564:	4403      	add	r3, r0
 8002566:	330c      	adds	r3, #12
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	b2db      	uxtb	r3, r3
 800256c:	3330      	adds	r3, #48	; 0x30
 800256e:	b2da      	uxtb	r2, r3
 8002570:	4b31      	ldr	r3, [pc, #196]	; (8002638 <ChooseNextNode+0x5fc>)
 8002572:	705a      	strb	r2, [r3, #1]
		TX_BUFFER[2] = '\n';
 8002574:	4b30      	ldr	r3, [pc, #192]	; (8002638 <ChooseNextNode+0x5fc>)
 8002576:	220a      	movs	r2, #10
 8002578:	709a      	strb	r2, [r3, #2]
		TX_BUFFER[3] = 'C';
 800257a:	4b2f      	ldr	r3, [pc, #188]	; (8002638 <ChooseNextNode+0x5fc>)
 800257c:	2243      	movs	r2, #67	; 0x43
 800257e:	70da      	strb	r2, [r3, #3]
		TX_BUFFER[4] = Map[x][y].Lados[ADELANTE] + '0';
 8002580:	482f      	ldr	r0, [pc, #188]	; (8002640 <ChooseNextNode+0x604>)
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	6879      	ldr	r1, [r7, #4]
 8002586:	461a      	mov	r2, r3
 8002588:	0052      	lsls	r2, r2, #1
 800258a:	441a      	add	r2, r3
 800258c:	00d3      	lsls	r3, r2, #3
 800258e:	461a      	mov	r2, r3
 8002590:	460b      	mov	r3, r1
 8002592:	011b      	lsls	r3, r3, #4
 8002594:	1a5b      	subs	r3, r3, r1
 8002596:	011b      	lsls	r3, r3, #4
 8002598:	4413      	add	r3, r2
 800259a:	4403      	add	r3, r0
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	3330      	adds	r3, #48	; 0x30
 80025a2:	b2da      	uxtb	r2, r3
 80025a4:	4b24      	ldr	r3, [pc, #144]	; (8002638 <ChooseNextNode+0x5fc>)
 80025a6:	711a      	strb	r2, [r3, #4]
		TX_BUFFER[5] = '\n';
 80025a8:	4b23      	ldr	r3, [pc, #140]	; (8002638 <ChooseNextNode+0x5fc>)
 80025aa:	220a      	movs	r2, #10
 80025ac:	715a      	strb	r2, [r3, #5]
		TX_BUFFER[6] = 'I';
 80025ae:	4b22      	ldr	r3, [pc, #136]	; (8002638 <ChooseNextNode+0x5fc>)
 80025b0:	2249      	movs	r2, #73	; 0x49
 80025b2:	719a      	strb	r2, [r3, #6]
		TX_BUFFER[7] = Map[x][y].Lados[IZQUIERDA] + '0';
 80025b4:	4822      	ldr	r0, [pc, #136]	; (8002640 <ChooseNextNode+0x604>)
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	6879      	ldr	r1, [r7, #4]
 80025ba:	461a      	mov	r2, r3
 80025bc:	0052      	lsls	r2, r2, #1
 80025be:	441a      	add	r2, r3
 80025c0:	00d3      	lsls	r3, r2, #3
 80025c2:	461a      	mov	r2, r3
 80025c4:	460b      	mov	r3, r1
 80025c6:	011b      	lsls	r3, r3, #4
 80025c8:	1a5b      	subs	r3, r3, r1
 80025ca:	011b      	lsls	r3, r3, #4
 80025cc:	4413      	add	r3, r2
 80025ce:	4403      	add	r3, r0
 80025d0:	3304      	adds	r3, #4
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	3330      	adds	r3, #48	; 0x30
 80025d8:	b2da      	uxtb	r2, r3
 80025da:	4b17      	ldr	r3, [pc, #92]	; (8002638 <ChooseNextNode+0x5fc>)
 80025dc:	71da      	strb	r2, [r3, #7]
		TX_BUFFER[8] = '\n';
 80025de:	4b16      	ldr	r3, [pc, #88]	; (8002638 <ChooseNextNode+0x5fc>)
 80025e0:	220a      	movs	r2, #10
 80025e2:	721a      	strb	r2, [r3, #8]
		TX_BUFFER[9] = 'A';
 80025e4:	4b14      	ldr	r3, [pc, #80]	; (8002638 <ChooseNextNode+0x5fc>)
 80025e6:	2241      	movs	r2, #65	; 0x41
 80025e8:	725a      	strb	r2, [r3, #9]
		TX_BUFFER[10] = Map[x][y].Lados[ATRAS] + '0';
 80025ea:	4815      	ldr	r0, [pc, #84]	; (8002640 <ChooseNextNode+0x604>)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	6879      	ldr	r1, [r7, #4]
 80025f0:	461a      	mov	r2, r3
 80025f2:	0052      	lsls	r2, r2, #1
 80025f4:	441a      	add	r2, r3
 80025f6:	00d3      	lsls	r3, r2, #3
 80025f8:	461a      	mov	r2, r3
 80025fa:	460b      	mov	r3, r1
 80025fc:	011b      	lsls	r3, r3, #4
 80025fe:	1a5b      	subs	r3, r3, r1
 8002600:	011b      	lsls	r3, r3, #4
 8002602:	4413      	add	r3, r2
 8002604:	4403      	add	r3, r0
 8002606:	3308      	adds	r3, #8
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	b2db      	uxtb	r3, r3
 800260c:	3330      	adds	r3, #48	; 0x30
 800260e:	b2da      	uxtb	r2, r3
 8002610:	4b09      	ldr	r3, [pc, #36]	; (8002638 <ChooseNextNode+0x5fc>)
 8002612:	729a      	strb	r2, [r3, #10]
		TX_BUFFER[11] = '\n';
 8002614:	4b08      	ldr	r3, [pc, #32]	; (8002638 <ChooseNextNode+0x5fc>)
 8002616:	220a      	movs	r2, #10
 8002618:	72da      	strb	r2, [r3, #11]
		HAL_UART_Transmit(&huart1, TX_BUFFER, 12, 100);
 800261a:	2364      	movs	r3, #100	; 0x64
 800261c:	220c      	movs	r2, #12
 800261e:	4906      	ldr	r1, [pc, #24]	; (8002638 <ChooseNextNode+0x5fc>)
 8002620:	4806      	ldr	r0, [pc, #24]	; (800263c <ChooseNextNode+0x600>)
 8002622:	f003 fe6a 	bl	80062fa <HAL_UART_Transmit>
		return SearchAvailableNode(x, y);
 8002626:	6839      	ldr	r1, [r7, #0]
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f000 f841 	bl	80026b0 <SearchAvailableNode>
 800262e:	4603      	mov	r3, r0
	}
	last.x = x;
	last.y = y;
}
 8002630:	4618      	mov	r0, r3
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	bd90      	pop	{r4, r7, pc}
 8002638:	200011fc 	.word	0x200011fc
 800263c:	20001ccc 	.word	0x20001ccc
 8002640:	2000126c 	.word	0x2000126c

08002644 <EliminateNode>:

void EliminateNode(int x, int y) {
 8002644:	b490      	push	{r4, r7}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
//Serial.println("Borro");
	Map[x][y].Lados[direcciones[ATRAS]] = 1;
 800264e:	4b15      	ldr	r3, [pc, #84]	; (80026a4 <EliminateNode+0x60>)
 8002650:	6898      	ldr	r0, [r3, #8]
 8002652:	4c15      	ldr	r4, [pc, #84]	; (80026a8 <EliminateNode+0x64>)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	6879      	ldr	r1, [r7, #4]
 8002658:	461a      	mov	r2, r3
 800265a:	0052      	lsls	r2, r2, #1
 800265c:	441a      	add	r2, r3
 800265e:	0053      	lsls	r3, r2, #1
 8002660:	461a      	mov	r2, r3
 8002662:	460b      	mov	r3, r1
 8002664:	011b      	lsls	r3, r3, #4
 8002666:	1a5b      	subs	r3, r3, r1
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	4413      	add	r3, r2
 800266c:	4403      	add	r3, r0
 800266e:	2201      	movs	r2, #1
 8002670:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	Map[last.x][last.y].visitado = 0;
 8002674:	4b0d      	ldr	r3, [pc, #52]	; (80026ac <EliminateNode+0x68>)
 8002676:	6819      	ldr	r1, [r3, #0]
 8002678:	4b0c      	ldr	r3, [pc, #48]	; (80026ac <EliminateNode+0x68>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	480a      	ldr	r0, [pc, #40]	; (80026a8 <EliminateNode+0x64>)
 800267e:	461a      	mov	r2, r3
 8002680:	0052      	lsls	r2, r2, #1
 8002682:	441a      	add	r2, r3
 8002684:	00d3      	lsls	r3, r2, #3
 8002686:	461a      	mov	r2, r3
 8002688:	460b      	mov	r3, r1
 800268a:	011b      	lsls	r3, r3, #4
 800268c:	1a5b      	subs	r3, r3, r1
 800268e:	011b      	lsls	r3, r3, #4
 8002690:	4413      	add	r3, r2
 8002692:	4403      	add	r3, r0
 8002694:	3310      	adds	r3, #16
 8002696:	2200      	movs	r2, #0
 8002698:	601a      	str	r2, [r3, #0]
}
 800269a:	bf00      	nop
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bc90      	pop	{r4, r7}
 80026a2:	4770      	bx	lr
 80026a4:	200011ec 	.word	0x200011ec
 80026a8:	2000126c 	.word	0x2000126c
 80026ac:	20001264 	.word	0x20001264

080026b0 <SearchAvailableNode>:

int SearchAvailableNode(int x, int y) {
 80026b0:	b590      	push	{r4, r7, lr}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
	if (Map[x][y].Lados[direcciones[ADELANTE]] != 1) {
 80026ba:	4b70      	ldr	r3, [pc, #448]	; (800287c <SearchAvailableNode+0x1cc>)
 80026bc:	6818      	ldr	r0, [r3, #0]
 80026be:	4c70      	ldr	r4, [pc, #448]	; (8002880 <SearchAvailableNode+0x1d0>)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	6879      	ldr	r1, [r7, #4]
 80026c4:	461a      	mov	r2, r3
 80026c6:	0052      	lsls	r2, r2, #1
 80026c8:	441a      	add	r2, r3
 80026ca:	0053      	lsls	r3, r2, #1
 80026cc:	461a      	mov	r2, r3
 80026ce:	460b      	mov	r3, r1
 80026d0:	011b      	lsls	r3, r3, #4
 80026d2:	1a5b      	subs	r3, r3, r1
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	4413      	add	r3, r2
 80026d8:	4403      	add	r3, r0
 80026da:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d02d      	beq.n	800273e <SearchAvailableNode+0x8e>
		//Serial.println("Adelante1");
		Map[x][y].Lados[direcciones[ADELANTE]] = 2;
 80026e2:	4b66      	ldr	r3, [pc, #408]	; (800287c <SearchAvailableNode+0x1cc>)
 80026e4:	6818      	ldr	r0, [r3, #0]
 80026e6:	4c66      	ldr	r4, [pc, #408]	; (8002880 <SearchAvailableNode+0x1d0>)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	6879      	ldr	r1, [r7, #4]
 80026ec:	461a      	mov	r2, r3
 80026ee:	0052      	lsls	r2, r2, #1
 80026f0:	441a      	add	r2, r3
 80026f2:	0053      	lsls	r3, r2, #1
 80026f4:	461a      	mov	r2, r3
 80026f6:	460b      	mov	r3, r1
 80026f8:	011b      	lsls	r3, r3, #4
 80026fa:	1a5b      	subs	r3, r3, r1
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	4413      	add	r3, r2
 8002700:	4403      	add	r3, r0
 8002702:	2202      	movs	r2, #2
 8002704:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
		moveNode(ADELANTE);
 8002708:	2000      	movs	r0, #0
 800270a:	f000 f8bb 	bl	8002884 <moveNode>
		if (Map[x][y].visitado > 1) {
 800270e:	485c      	ldr	r0, [pc, #368]	; (8002880 <SearchAvailableNode+0x1d0>)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	6879      	ldr	r1, [r7, #4]
 8002714:	461a      	mov	r2, r3
 8002716:	0052      	lsls	r2, r2, #1
 8002718:	441a      	add	r2, r3
 800271a:	00d3      	lsls	r3, r2, #3
 800271c:	461a      	mov	r2, r3
 800271e:	460b      	mov	r3, r1
 8002720:	011b      	lsls	r3, r3, #4
 8002722:	1a5b      	subs	r3, r3, r1
 8002724:	011b      	lsls	r3, r3, #4
 8002726:	4413      	add	r3, r2
 8002728:	4403      	add	r3, r0
 800272a:	3310      	adds	r3, #16
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2b01      	cmp	r3, #1
 8002730:	dd03      	ble.n	800273a <SearchAvailableNode+0x8a>
			EliminateNode(x, y);
 8002732:	6839      	ldr	r1, [r7, #0]
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f7ff ff85 	bl	8002644 <EliminateNode>
		}
		return ADELANTE;
 800273a:	2300      	movs	r3, #0
 800273c:	e09a      	b.n	8002874 <SearchAvailableNode+0x1c4>
	} else if (Map[x][y].Lados[direcciones[IZQUIERDA]] != 1) {
 800273e:	4b4f      	ldr	r3, [pc, #316]	; (800287c <SearchAvailableNode+0x1cc>)
 8002740:	6858      	ldr	r0, [r3, #4]
 8002742:	4c4f      	ldr	r4, [pc, #316]	; (8002880 <SearchAvailableNode+0x1d0>)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	6879      	ldr	r1, [r7, #4]
 8002748:	461a      	mov	r2, r3
 800274a:	0052      	lsls	r2, r2, #1
 800274c:	441a      	add	r2, r3
 800274e:	0053      	lsls	r3, r2, #1
 8002750:	461a      	mov	r2, r3
 8002752:	460b      	mov	r3, r1
 8002754:	011b      	lsls	r3, r3, #4
 8002756:	1a5b      	subs	r3, r3, r1
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	4413      	add	r3, r2
 800275c:	4403      	add	r3, r0
 800275e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d02d      	beq.n	80027c2 <SearchAvailableNode+0x112>
		//Serial.println("IZQUIERDA1");
		Map[x][y].Lados[direcciones[IZQUIERDA]] = 2;
 8002766:	4b45      	ldr	r3, [pc, #276]	; (800287c <SearchAvailableNode+0x1cc>)
 8002768:	6858      	ldr	r0, [r3, #4]
 800276a:	4c45      	ldr	r4, [pc, #276]	; (8002880 <SearchAvailableNode+0x1d0>)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	6879      	ldr	r1, [r7, #4]
 8002770:	461a      	mov	r2, r3
 8002772:	0052      	lsls	r2, r2, #1
 8002774:	441a      	add	r2, r3
 8002776:	0053      	lsls	r3, r2, #1
 8002778:	461a      	mov	r2, r3
 800277a:	460b      	mov	r3, r1
 800277c:	011b      	lsls	r3, r3, #4
 800277e:	1a5b      	subs	r3, r3, r1
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	4413      	add	r3, r2
 8002784:	4403      	add	r3, r0
 8002786:	2202      	movs	r2, #2
 8002788:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
		moveNode(IZQUIERDA);
 800278c:	2001      	movs	r0, #1
 800278e:	f000 f879 	bl	8002884 <moveNode>
		//rotateAxis(IZQUIERDA);
		if (Map[x][y].visitado > 1) {
 8002792:	483b      	ldr	r0, [pc, #236]	; (8002880 <SearchAvailableNode+0x1d0>)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	6879      	ldr	r1, [r7, #4]
 8002798:	461a      	mov	r2, r3
 800279a:	0052      	lsls	r2, r2, #1
 800279c:	441a      	add	r2, r3
 800279e:	00d3      	lsls	r3, r2, #3
 80027a0:	461a      	mov	r2, r3
 80027a2:	460b      	mov	r3, r1
 80027a4:	011b      	lsls	r3, r3, #4
 80027a6:	1a5b      	subs	r3, r3, r1
 80027a8:	011b      	lsls	r3, r3, #4
 80027aa:	4413      	add	r3, r2
 80027ac:	4403      	add	r3, r0
 80027ae:	3310      	adds	r3, #16
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	dd03      	ble.n	80027be <SearchAvailableNode+0x10e>
			EliminateNode(x, y);
 80027b6:	6839      	ldr	r1, [r7, #0]
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f7ff ff43 	bl	8002644 <EliminateNode>
		}
		return IZQUIERDA;
 80027be:	2301      	movs	r3, #1
 80027c0:	e058      	b.n	8002874 <SearchAvailableNode+0x1c4>
	} else if (Map[x][y].Lados[direcciones[DERECHA]] != 1) {
 80027c2:	4b2e      	ldr	r3, [pc, #184]	; (800287c <SearchAvailableNode+0x1cc>)
 80027c4:	68d8      	ldr	r0, [r3, #12]
 80027c6:	4c2e      	ldr	r4, [pc, #184]	; (8002880 <SearchAvailableNode+0x1d0>)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	6879      	ldr	r1, [r7, #4]
 80027cc:	461a      	mov	r2, r3
 80027ce:	0052      	lsls	r2, r2, #1
 80027d0:	441a      	add	r2, r3
 80027d2:	0053      	lsls	r3, r2, #1
 80027d4:	461a      	mov	r2, r3
 80027d6:	460b      	mov	r3, r1
 80027d8:	011b      	lsls	r3, r3, #4
 80027da:	1a5b      	subs	r3, r3, r1
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	4413      	add	r3, r2
 80027e0:	4403      	add	r3, r0
 80027e2:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d02d      	beq.n	8002846 <SearchAvailableNode+0x196>
		//Serial.println("DERECHA1");
		Map[x][y].Lados[direcciones[DERECHA]] = 2;
 80027ea:	4b24      	ldr	r3, [pc, #144]	; (800287c <SearchAvailableNode+0x1cc>)
 80027ec:	68d8      	ldr	r0, [r3, #12]
 80027ee:	4c24      	ldr	r4, [pc, #144]	; (8002880 <SearchAvailableNode+0x1d0>)
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	6879      	ldr	r1, [r7, #4]
 80027f4:	461a      	mov	r2, r3
 80027f6:	0052      	lsls	r2, r2, #1
 80027f8:	441a      	add	r2, r3
 80027fa:	0053      	lsls	r3, r2, #1
 80027fc:	461a      	mov	r2, r3
 80027fe:	460b      	mov	r3, r1
 8002800:	011b      	lsls	r3, r3, #4
 8002802:	1a5b      	subs	r3, r3, r1
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	4413      	add	r3, r2
 8002808:	4403      	add	r3, r0
 800280a:	2202      	movs	r2, #2
 800280c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
		moveNode(DERECHA);
 8002810:	2003      	movs	r0, #3
 8002812:	f000 f837 	bl	8002884 <moveNode>
		if (Map[x][y].visitado > 1) {
 8002816:	481a      	ldr	r0, [pc, #104]	; (8002880 <SearchAvailableNode+0x1d0>)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	6879      	ldr	r1, [r7, #4]
 800281c:	461a      	mov	r2, r3
 800281e:	0052      	lsls	r2, r2, #1
 8002820:	441a      	add	r2, r3
 8002822:	00d3      	lsls	r3, r2, #3
 8002824:	461a      	mov	r2, r3
 8002826:	460b      	mov	r3, r1
 8002828:	011b      	lsls	r3, r3, #4
 800282a:	1a5b      	subs	r3, r3, r1
 800282c:	011b      	lsls	r3, r3, #4
 800282e:	4413      	add	r3, r2
 8002830:	4403      	add	r3, r0
 8002832:	3310      	adds	r3, #16
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2b01      	cmp	r3, #1
 8002838:	dd03      	ble.n	8002842 <SearchAvailableNode+0x192>
			EliminateNode(x, y);
 800283a:	6839      	ldr	r1, [r7, #0]
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f7ff ff01 	bl	8002644 <EliminateNode>
		}
		//rotateAxis(DERECHA);
		return DERECHA;
 8002842:	2303      	movs	r3, #3
 8002844:	e016      	b.n	8002874 <SearchAvailableNode+0x1c4>
	} else if (Map[x][y].Lados[direcciones[ATRAS]] != 1) {
 8002846:	4b0d      	ldr	r3, [pc, #52]	; (800287c <SearchAvailableNode+0x1cc>)
 8002848:	6898      	ldr	r0, [r3, #8]
 800284a:	4c0d      	ldr	r4, [pc, #52]	; (8002880 <SearchAvailableNode+0x1d0>)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	6879      	ldr	r1, [r7, #4]
 8002850:	461a      	mov	r2, r3
 8002852:	0052      	lsls	r2, r2, #1
 8002854:	441a      	add	r2, r3
 8002856:	0053      	lsls	r3, r2, #1
 8002858:	461a      	mov	r2, r3
 800285a:	460b      	mov	r3, r1
 800285c:	011b      	lsls	r3, r3, #4
 800285e:	1a5b      	subs	r3, r3, r1
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	4413      	add	r3, r2
 8002864:	4403      	add	r3, r0
 8002866:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d001      	beq.n	8002872 <SearchAvailableNode+0x1c2>
		//Serial.println("atras1");
		return ATRAS;
 800286e:	2302      	movs	r3, #2
 8002870:	e000      	b.n	8002874 <SearchAvailableNode+0x1c4>
	}
	return 0;
 8002872:	2300      	movs	r3, #0
}
 8002874:	4618      	mov	r0, r3
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	bd90      	pop	{r4, r7, pc}
 800287c:	200011ec 	.word	0x200011ec
 8002880:	2000126c 	.word	0x2000126c

08002884 <moveNode>:
void moveNode(int lado) {
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
	switch (lado) {
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2b03      	cmp	r3, #3
 8002890:	d822      	bhi.n	80028d8 <moveNode+0x54>
 8002892:	a201      	add	r2, pc, #4	; (adr r2, 8002898 <moveNode+0x14>)
 8002894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002898:	080028a9 	.word	0x080028a9
 800289c:	080028b5 	.word	0x080028b5
 80028a0:	080028cd 	.word	0x080028cd
 80028a4:	080028c1 	.word	0x080028c1
	case ADELANTE:
		//if (visual.y != ALTO - 1) {
		actual.y++;
 80028a8:	4b0e      	ldr	r3, [pc, #56]	; (80028e4 <moveNode+0x60>)
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	3301      	adds	r3, #1
 80028ae:	4a0d      	ldr	r2, [pc, #52]	; (80028e4 <moveNode+0x60>)
 80028b0:	6053      	str	r3, [r2, #4]
		//visual.y++;
		//}
		break;
 80028b2:	e011      	b.n	80028d8 <moveNode+0x54>
	case IZQUIERDA:
		//if (visual.x != 0) {
		actual.x--;
 80028b4:	4b0b      	ldr	r3, [pc, #44]	; (80028e4 <moveNode+0x60>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	3b01      	subs	r3, #1
 80028ba:	4a0a      	ldr	r2, [pc, #40]	; (80028e4 <moveNode+0x60>)
 80028bc:	6013      	str	r3, [r2, #0]
		//visual.x--;
		//}
		break;
 80028be:	e00b      	b.n	80028d8 <moveNode+0x54>
	case DERECHA:
		// if (visual.x != ANCHO - 1) {
		actual.x++;
 80028c0:	4b08      	ldr	r3, [pc, #32]	; (80028e4 <moveNode+0x60>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	3301      	adds	r3, #1
 80028c6:	4a07      	ldr	r2, [pc, #28]	; (80028e4 <moveNode+0x60>)
 80028c8:	6013      	str	r3, [r2, #0]
		// visual.x++;
		// }
		break;
 80028ca:	e005      	b.n	80028d8 <moveNode+0x54>
	case ATRAS:
		// if (visual.y != 0) {
		actual.y--;
 80028cc:	4b05      	ldr	r3, [pc, #20]	; (80028e4 <moveNode+0x60>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	3b01      	subs	r3, #1
 80028d2:	4a04      	ldr	r2, [pc, #16]	; (80028e4 <moveNode+0x60>)
 80028d4:	6053      	str	r3, [r2, #4]
		// visual.y--;
		// }

		break;
 80028d6:	bf00      	nop
	}
}
 80028d8:	bf00      	nop
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	bc80      	pop	{r7}
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	2000125c 	.word	0x2000125c

080028e8 <movementMachine>:
void movementMachine(int move) {
 80028e8:	b590      	push	{r4, r7, lr}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
	switch (movementState) {
 80028f0:	4ba6      	ldr	r3, [pc, #664]	; (8002b8c <movementMachine+0x2a4>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2b05      	cmp	r3, #5
 80028f6:	f200 8144 	bhi.w	8002b82 <movementMachine+0x29a>
 80028fa:	a201      	add	r2, pc, #4	; (adr r2, 8002900 <movementMachine+0x18>)
 80028fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002900:	08002945 	.word	0x08002945
 8002904:	080029e7 	.word	0x080029e7
 8002908:	08002af7 	.word	0x08002af7
 800290c:	08002a6f 	.word	0x08002a6f
 8002910:	08002b83 	.word	0x08002b83
 8002914:	08002919 	.word	0x08002919
	case OFF:
		runMotor(OFF, MOTOR_A);
 8002918:	2100      	movs	r1, #0
 800291a:	2005      	movs	r0, #5
 800291c:	f000 fc5a 	bl	80031d4 <runMotor>
		runMotor(OFF, MOTOR_B);
 8002920:	2101      	movs	r1, #1
 8002922:	2005      	movs	r0, #5
 8002924:	f000 fc56 	bl	80031d4 <runMotor>
		if (move != OFF) {
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2b05      	cmp	r3, #5
 800292c:	f000 8128 	beq.w	8002b80 <movementMachine+0x298>
			movementState = move;
 8002930:	4a96      	ldr	r2, [pc, #600]	; (8002b8c <movementMachine+0x2a4>)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6013      	str	r3, [r2, #0]
			TIM3->CNT = 0;
 8002936:	4b96      	ldr	r3, [pc, #600]	; (8002b90 <movementMachine+0x2a8>)
 8002938:	2200      	movs	r2, #0
 800293a:	625a      	str	r2, [r3, #36]	; 0x24
			TIM4->CNT = 0;
 800293c:	4b95      	ldr	r3, [pc, #596]	; (8002b94 <movementMachine+0x2ac>)
 800293e:	2200      	movs	r2, #0
 8002940:	625a      	str	r2, [r3, #36]	; 0x24
		}
		break;
 8002942:	e11d      	b.n	8002b80 <movementMachine+0x298>
	case ADELANTE:

		if (calcularDistancia((TIM3->CNT) >> 1) < forwardChoice[choice]
 8002944:	4b92      	ldr	r3, [pc, #584]	; (8002b90 <movementMachine+0x2a8>)
 8002946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002948:	085b      	lsrs	r3, r3, #1
 800294a:	4618      	mov	r0, r3
 800294c:	f000 fc1c 	bl	8003188 <calcularDistancia>
 8002950:	4604      	mov	r4, r0
 8002952:	4b91      	ldr	r3, [pc, #580]	; (8002b98 <movementMachine+0x2b0>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a91      	ldr	r2, [pc, #580]	; (8002b9c <movementMachine+0x2b4>)
 8002958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800295c:	4618      	mov	r0, r3
 800295e:	f7fe f96d 	bl	8000c3c <__aeabi_i2f>
 8002962:	4603      	mov	r3, r0
 8002964:	4619      	mov	r1, r3
 8002966:	4620      	mov	r0, r4
 8002968:	f7fe fb5a 	bl	8001020 <__aeabi_fcmplt>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d021      	beq.n	80029b6 <movementMachine+0xce>
				&& calcularDistancia((TIM4->CNT) >> 1)
 8002972:	4b88      	ldr	r3, [pc, #544]	; (8002b94 <movementMachine+0x2ac>)
 8002974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002976:	085b      	lsrs	r3, r3, #1
 8002978:	4618      	mov	r0, r3
 800297a:	f000 fc05 	bl	8003188 <calcularDistancia>
 800297e:	4604      	mov	r4, r0
						< forwardChoice[choice]) {
 8002980:	4b85      	ldr	r3, [pc, #532]	; (8002b98 <movementMachine+0x2b0>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a85      	ldr	r2, [pc, #532]	; (8002b9c <movementMachine+0x2b4>)
 8002986:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800298a:	4618      	mov	r0, r3
 800298c:	f7fe f956 	bl	8000c3c <__aeabi_i2f>
 8002990:	4603      	mov	r3, r0
				&& calcularDistancia((TIM4->CNT) >> 1)
 8002992:	4619      	mov	r1, r3
 8002994:	4620      	mov	r0, r4
 8002996:	f7fe fb43 	bl	8001020 <__aeabi_fcmplt>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d00a      	beq.n	80029b6 <movementMachine+0xce>
			moveStraight();
 80029a0:	f000 fa80 	bl	8002ea4 <moveStraight>
			runMotor(ADELANTE, MOTOR_A);
 80029a4:	2100      	movs	r1, #0
 80029a6:	2000      	movs	r0, #0
 80029a8:	f000 fc14 	bl	80031d4 <runMotor>
			runMotor(ADELANTE, MOTOR_B);
 80029ac:	2101      	movs	r1, #1
 80029ae:	2000      	movs	r0, #0
 80029b0:	f000 fc10 	bl	80031d4 <runMotor>
			runMotor(OFF, MOTOR_B);
			TIM3->CNT = 0;
			TIM4->CNT = 0;
			offset = 0;
		}
		break;
 80029b4:	e0e5      	b.n	8002b82 <movementMachine+0x29a>
			movimientoFlag = 1;
 80029b6:	4b7a      	ldr	r3, [pc, #488]	; (8002ba0 <movementMachine+0x2b8>)
 80029b8:	2201      	movs	r2, #1
 80029ba:	601a      	str	r2, [r3, #0]
			movementState = OFF;
 80029bc:	4b73      	ldr	r3, [pc, #460]	; (8002b8c <movementMachine+0x2a4>)
 80029be:	2205      	movs	r2, #5
 80029c0:	601a      	str	r2, [r3, #0]
			runMotor(OFF, MOTOR_A);
 80029c2:	2100      	movs	r1, #0
 80029c4:	2005      	movs	r0, #5
 80029c6:	f000 fc05 	bl	80031d4 <runMotor>
			runMotor(OFF, MOTOR_B);
 80029ca:	2101      	movs	r1, #1
 80029cc:	2005      	movs	r0, #5
 80029ce:	f000 fc01 	bl	80031d4 <runMotor>
			TIM3->CNT = 0;
 80029d2:	4b6f      	ldr	r3, [pc, #444]	; (8002b90 <movementMachine+0x2a8>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	625a      	str	r2, [r3, #36]	; 0x24
			TIM4->CNT = 0;
 80029d8:	4b6e      	ldr	r3, [pc, #440]	; (8002b94 <movementMachine+0x2ac>)
 80029da:	2200      	movs	r2, #0
 80029dc:	625a      	str	r2, [r3, #36]	; 0x24
			offset = 0;
 80029de:	4b71      	ldr	r3, [pc, #452]	; (8002ba4 <movementMachine+0x2bc>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	601a      	str	r2, [r3, #0]
		break;
 80029e4:	e0cd      	b.n	8002b82 <movementMachine+0x29a>
	case IZQUIERDA:
		TIM2->CCR3 = baseChoice[choice];
 80029e6:	4b6c      	ldr	r3, [pc, #432]	; (8002b98 <movementMachine+0x2b0>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a6f      	ldr	r2, [pc, #444]	; (8002ba8 <movementMachine+0x2c0>)
 80029ec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80029f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80029f4:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM2->CCR4 = baseChoice[choice];
 80029f6:	4b68      	ldr	r3, [pc, #416]	; (8002b98 <movementMachine+0x2b0>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a6b      	ldr	r2, [pc, #428]	; (8002ba8 <movementMachine+0x2c0>)
 80029fc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002a00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a04:	641a      	str	r2, [r3, #64]	; 0x40
		if (calcularDistancia(TIM3->CNT) < LeftChoice[choice]) {
 8002a06:	4b62      	ldr	r3, [pc, #392]	; (8002b90 <movementMachine+0x2a8>)
 8002a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f000 fbbc 	bl	8003188 <calcularDistancia>
 8002a10:	4604      	mov	r4, r0
 8002a12:	4b61      	ldr	r3, [pc, #388]	; (8002b98 <movementMachine+0x2b0>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a65      	ldr	r2, [pc, #404]	; (8002bac <movementMachine+0x2c4>)
 8002a18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7fe f90d 	bl	8000c3c <__aeabi_i2f>
 8002a22:	4603      	mov	r3, r0
 8002a24:	4619      	mov	r1, r3
 8002a26:	4620      	mov	r0, r4
 8002a28:	f7fe fafa 	bl	8001020 <__aeabi_fcmplt>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d008      	beq.n	8002a44 <movementMachine+0x15c>
			runMotor(ATRAS, MOTOR_A);
 8002a32:	2100      	movs	r1, #0
 8002a34:	2002      	movs	r0, #2
 8002a36:	f000 fbcd 	bl	80031d4 <runMotor>
			runMotor(ADELANTE, MOTOR_B);
 8002a3a:	2101      	movs	r1, #1
 8002a3c:	2000      	movs	r0, #0
 8002a3e:	f000 fbc9 	bl	80031d4 <runMotor>
			runMotor(OFF, MOTOR_B);
			TIM3->CNT = 0;
			TIM4->CNT = 0;
			offset = 30;
		}
		break;
 8002a42:	e09e      	b.n	8002b82 <movementMachine+0x29a>
			movementState = ADELANTE;
 8002a44:	4b51      	ldr	r3, [pc, #324]	; (8002b8c <movementMachine+0x2a4>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	601a      	str	r2, [r3, #0]
			runMotor(OFF, MOTOR_A);
 8002a4a:	2100      	movs	r1, #0
 8002a4c:	2005      	movs	r0, #5
 8002a4e:	f000 fbc1 	bl	80031d4 <runMotor>
			runMotor(OFF, MOTOR_B);
 8002a52:	2101      	movs	r1, #1
 8002a54:	2005      	movs	r0, #5
 8002a56:	f000 fbbd 	bl	80031d4 <runMotor>
			TIM3->CNT = 0;
 8002a5a:	4b4d      	ldr	r3, [pc, #308]	; (8002b90 <movementMachine+0x2a8>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	625a      	str	r2, [r3, #36]	; 0x24
			TIM4->CNT = 0;
 8002a60:	4b4c      	ldr	r3, [pc, #304]	; (8002b94 <movementMachine+0x2ac>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	625a      	str	r2, [r3, #36]	; 0x24
			offset = 30;
 8002a66:	4b4f      	ldr	r3, [pc, #316]	; (8002ba4 <movementMachine+0x2bc>)
 8002a68:	221e      	movs	r2, #30
 8002a6a:	601a      	str	r2, [r3, #0]
		break;
 8002a6c:	e089      	b.n	8002b82 <movementMachine+0x29a>
	case DERECHA:
		TIM2->CCR3 = baseChoice[choice];
 8002a6e:	4b4a      	ldr	r3, [pc, #296]	; (8002b98 <movementMachine+0x2b0>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a4d      	ldr	r2, [pc, #308]	; (8002ba8 <movementMachine+0x2c0>)
 8002a74:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002a78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a7c:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM2->CCR4 = baseChoice[choice];
 8002a7e:	4b46      	ldr	r3, [pc, #280]	; (8002b98 <movementMachine+0x2b0>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a49      	ldr	r2, [pc, #292]	; (8002ba8 <movementMachine+0x2c0>)
 8002a84:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002a88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a8c:	641a      	str	r2, [r3, #64]	; 0x40
		if (calcularDistancia(TIM4->CNT) < RightChoice[choice]) {
 8002a8e:	4b41      	ldr	r3, [pc, #260]	; (8002b94 <movementMachine+0x2ac>)
 8002a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a92:	4618      	mov	r0, r3
 8002a94:	f000 fb78 	bl	8003188 <calcularDistancia>
 8002a98:	4604      	mov	r4, r0
 8002a9a:	4b3f      	ldr	r3, [pc, #252]	; (8002b98 <movementMachine+0x2b0>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a44      	ldr	r2, [pc, #272]	; (8002bb0 <movementMachine+0x2c8>)
 8002aa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7fe f8c9 	bl	8000c3c <__aeabi_i2f>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	4619      	mov	r1, r3
 8002aae:	4620      	mov	r0, r4
 8002ab0:	f7fe fab6 	bl	8001020 <__aeabi_fcmplt>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d008      	beq.n	8002acc <movementMachine+0x1e4>
			runMotor(ADELANTE, MOTOR_A);
 8002aba:	2100      	movs	r1, #0
 8002abc:	2000      	movs	r0, #0
 8002abe:	f000 fb89 	bl	80031d4 <runMotor>
			runMotor(ATRAS, MOTOR_B);
 8002ac2:	2101      	movs	r1, #1
 8002ac4:	2002      	movs	r0, #2
 8002ac6:	f000 fb85 	bl	80031d4 <runMotor>
			runMotor(OFF, MOTOR_B);
			TIM3->CNT = 0;
			TIM4->CNT = 0;
			offset = 30;
		}
		break;
 8002aca:	e05a      	b.n	8002b82 <movementMachine+0x29a>
			movementState = ADELANTE;
 8002acc:	4b2f      	ldr	r3, [pc, #188]	; (8002b8c <movementMachine+0x2a4>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	601a      	str	r2, [r3, #0]
			runMotor(OFF, MOTOR_A);
 8002ad2:	2100      	movs	r1, #0
 8002ad4:	2005      	movs	r0, #5
 8002ad6:	f000 fb7d 	bl	80031d4 <runMotor>
			runMotor(OFF, MOTOR_B);
 8002ada:	2101      	movs	r1, #1
 8002adc:	2005      	movs	r0, #5
 8002ade:	f000 fb79 	bl	80031d4 <runMotor>
			TIM3->CNT = 0;
 8002ae2:	4b2b      	ldr	r3, [pc, #172]	; (8002b90 <movementMachine+0x2a8>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	625a      	str	r2, [r3, #36]	; 0x24
			TIM4->CNT = 0;
 8002ae8:	4b2a      	ldr	r3, [pc, #168]	; (8002b94 <movementMachine+0x2ac>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	625a      	str	r2, [r3, #36]	; 0x24
			offset = 30;
 8002aee:	4b2d      	ldr	r3, [pc, #180]	; (8002ba4 <movementMachine+0x2bc>)
 8002af0:	221e      	movs	r2, #30
 8002af2:	601a      	str	r2, [r3, #0]
		break;
 8002af4:	e045      	b.n	8002b82 <movementMachine+0x29a>
	case ATRAS:
		TIM2->CCR3 = baseChoice[choice];
 8002af6:	4b28      	ldr	r3, [pc, #160]	; (8002b98 <movementMachine+0x2b0>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a2b      	ldr	r2, [pc, #172]	; (8002ba8 <movementMachine+0x2c0>)
 8002afc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002b00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b04:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM2->CCR4 = baseChoice[choice];
 8002b06:	4b24      	ldr	r3, [pc, #144]	; (8002b98 <movementMachine+0x2b0>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a27      	ldr	r2, [pc, #156]	; (8002ba8 <movementMachine+0x2c0>)
 8002b0c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002b10:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b14:	641a      	str	r2, [r3, #64]	; 0x40
		if (calcularDistancia(TIM4->CNT) < RightChoice[choice] * 2) {
 8002b16:	4b1f      	ldr	r3, [pc, #124]	; (8002b94 <movementMachine+0x2ac>)
 8002b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f000 fb34 	bl	8003188 <calcularDistancia>
 8002b20:	4604      	mov	r4, r0
 8002b22:	4b1d      	ldr	r3, [pc, #116]	; (8002b98 <movementMachine+0x2b0>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a22      	ldr	r2, [pc, #136]	; (8002bb0 <movementMachine+0x2c8>)
 8002b28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b2c:	005b      	lsls	r3, r3, #1
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7fe f884 	bl	8000c3c <__aeabi_i2f>
 8002b34:	4603      	mov	r3, r0
 8002b36:	4619      	mov	r1, r3
 8002b38:	4620      	mov	r0, r4
 8002b3a:	f7fe fa71 	bl	8001020 <__aeabi_fcmplt>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d008      	beq.n	8002b56 <movementMachine+0x26e>
			runMotor(ADELANTE, MOTOR_A);
 8002b44:	2100      	movs	r1, #0
 8002b46:	2000      	movs	r0, #0
 8002b48:	f000 fb44 	bl	80031d4 <runMotor>
			runMotor(ATRAS, MOTOR_B);
 8002b4c:	2101      	movs	r1, #1
 8002b4e:	2002      	movs	r0, #2
 8002b50:	f000 fb40 	bl	80031d4 <runMotor>
			runMotor(OFF, MOTOR_B);
			TIM3->CNT = 0;
			TIM4->CNT = 0;
			offset = 30;
		}
		break;
 8002b54:	e015      	b.n	8002b82 <movementMachine+0x29a>
			movementState = ADELANTE;
 8002b56:	4b0d      	ldr	r3, [pc, #52]	; (8002b8c <movementMachine+0x2a4>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	601a      	str	r2, [r3, #0]
			runMotor(OFF, MOTOR_A);
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	2005      	movs	r0, #5
 8002b60:	f000 fb38 	bl	80031d4 <runMotor>
			runMotor(OFF, MOTOR_B);
 8002b64:	2101      	movs	r1, #1
 8002b66:	2005      	movs	r0, #5
 8002b68:	f000 fb34 	bl	80031d4 <runMotor>
			TIM3->CNT = 0;
 8002b6c:	4b08      	ldr	r3, [pc, #32]	; (8002b90 <movementMachine+0x2a8>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	625a      	str	r2, [r3, #36]	; 0x24
			TIM4->CNT = 0;
 8002b72:	4b08      	ldr	r3, [pc, #32]	; (8002b94 <movementMachine+0x2ac>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	625a      	str	r2, [r3, #36]	; 0x24
			offset = 30;
 8002b78:	4b0a      	ldr	r3, [pc, #40]	; (8002ba4 <movementMachine+0x2bc>)
 8002b7a:	221e      	movs	r2, #30
 8002b7c:	601a      	str	r2, [r3, #0]
		break;
 8002b7e:	e000      	b.n	8002b82 <movementMachine+0x29a>
		break;
 8002b80:	bf00      	nop
		 movimientoFlag = 1;
		 movementState = OFF;
		 }
		 break;*/
	}
}
 8002b82:	bf00      	nop
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd90      	pop	{r4, r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	20000038 	.word	0x20000038
 8002b90:	40000400 	.word	0x40000400
 8002b94:	40000800 	.word	0x40000800
 8002b98:	20001214 	.word	0x20001214
 8002b9c:	20000020 	.word	0x20000020
 8002ba0:	20001228 	.word	0x20001228
 8002ba4:	20001230 	.word	0x20001230
 8002ba8:	20000018 	.word	0x20000018
 8002bac:	20000030 	.word	0x20000030
 8002bb0:	20000028 	.word	0x20000028

08002bb4 <CreateNode>:

void CreateNode(int x, int y) {
 8002bb4:	b5b0      	push	{r4, r5, r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]
	Map[x][y].Lados[direcciones[ADELANTE]] = lecturaSensor(ADELANTE, Sensors);
 8002bbe:	4936      	ldr	r1, [pc, #216]	; (8002c98 <CreateNode+0xe4>)
 8002bc0:	2000      	movs	r0, #0
 8002bc2:	f000 fb8d 	bl	80032e0 <lecturaSensor>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	4a34      	ldr	r2, [pc, #208]	; (8002c9c <CreateNode+0xe8>)
 8002bca:	6814      	ldr	r4, [r2, #0]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7fe fa4f 	bl	8001070 <__aeabi_f2iz>
 8002bd2:	4d33      	ldr	r5, [pc, #204]	; (8002ca0 <CreateNode+0xec>)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	6879      	ldr	r1, [r7, #4]
 8002bd8:	461a      	mov	r2, r3
 8002bda:	0052      	lsls	r2, r2, #1
 8002bdc:	441a      	add	r2, r3
 8002bde:	0053      	lsls	r3, r2, #1
 8002be0:	461a      	mov	r2, r3
 8002be2:	460b      	mov	r3, r1
 8002be4:	011b      	lsls	r3, r3, #4
 8002be6:	1a5b      	subs	r3, r3, r1
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	4413      	add	r3, r2
 8002bec:	4423      	add	r3, r4
 8002bee:	f845 0023 	str.w	r0, [r5, r3, lsl #2]
	Map[x][y].Lados[direcciones[IZQUIERDA]] = lecturaSensor(IZQUIERDA, Sensors);
 8002bf2:	4929      	ldr	r1, [pc, #164]	; (8002c98 <CreateNode+0xe4>)
 8002bf4:	2001      	movs	r0, #1
 8002bf6:	f000 fb73 	bl	80032e0 <lecturaSensor>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	4a27      	ldr	r2, [pc, #156]	; (8002c9c <CreateNode+0xe8>)
 8002bfe:	6854      	ldr	r4, [r2, #4]
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7fe fa35 	bl	8001070 <__aeabi_f2iz>
 8002c06:	4d26      	ldr	r5, [pc, #152]	; (8002ca0 <CreateNode+0xec>)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	6879      	ldr	r1, [r7, #4]
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	0052      	lsls	r2, r2, #1
 8002c10:	441a      	add	r2, r3
 8002c12:	0053      	lsls	r3, r2, #1
 8002c14:	461a      	mov	r2, r3
 8002c16:	460b      	mov	r3, r1
 8002c18:	011b      	lsls	r3, r3, #4
 8002c1a:	1a5b      	subs	r3, r3, r1
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	4413      	add	r3, r2
 8002c20:	4423      	add	r3, r4
 8002c22:	f845 0023 	str.w	r0, [r5, r3, lsl #2]
	Map[x][y].Lados[direcciones[DERECHA]] = lecturaSensor(DERECHA, Sensors);
 8002c26:	491c      	ldr	r1, [pc, #112]	; (8002c98 <CreateNode+0xe4>)
 8002c28:	2003      	movs	r0, #3
 8002c2a:	f000 fb59 	bl	80032e0 <lecturaSensor>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	4a1a      	ldr	r2, [pc, #104]	; (8002c9c <CreateNode+0xe8>)
 8002c32:	68d4      	ldr	r4, [r2, #12]
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7fe fa1b 	bl	8001070 <__aeabi_f2iz>
 8002c3a:	4d19      	ldr	r5, [pc, #100]	; (8002ca0 <CreateNode+0xec>)
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	6879      	ldr	r1, [r7, #4]
 8002c40:	461a      	mov	r2, r3
 8002c42:	0052      	lsls	r2, r2, #1
 8002c44:	441a      	add	r2, r3
 8002c46:	0053      	lsls	r3, r2, #1
 8002c48:	461a      	mov	r2, r3
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	011b      	lsls	r3, r3, #4
 8002c4e:	1a5b      	subs	r3, r3, r1
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	4413      	add	r3, r2
 8002c54:	4423      	add	r3, r4
 8002c56:	f845 0023 	str.w	r0, [r5, r3, lsl #2]
	Map[x][y].Lados[direcciones[ATRAS]] = lecturaSensor(ATRAS, Sensors);
 8002c5a:	490f      	ldr	r1, [pc, #60]	; (8002c98 <CreateNode+0xe4>)
 8002c5c:	2002      	movs	r0, #2
 8002c5e:	f000 fb3f 	bl	80032e0 <lecturaSensor>
 8002c62:	4603      	mov	r3, r0
 8002c64:	4a0d      	ldr	r2, [pc, #52]	; (8002c9c <CreateNode+0xe8>)
 8002c66:	6894      	ldr	r4, [r2, #8]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7fe fa01 	bl	8001070 <__aeabi_f2iz>
 8002c6e:	4d0c      	ldr	r5, [pc, #48]	; (8002ca0 <CreateNode+0xec>)
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	6879      	ldr	r1, [r7, #4]
 8002c74:	461a      	mov	r2, r3
 8002c76:	0052      	lsls	r2, r2, #1
 8002c78:	441a      	add	r2, r3
 8002c7a:	0053      	lsls	r3, r2, #1
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	460b      	mov	r3, r1
 8002c80:	011b      	lsls	r3, r3, #4
 8002c82:	1a5b      	subs	r3, r3, r1
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	4413      	add	r3, r2
 8002c88:	4423      	add	r3, r4
 8002c8a:	f845 0023 	str.w	r0, [r5, r3, lsl #2]

}
 8002c8e:	bf00      	nop
 8002c90:	3708      	adds	r7, #8
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bdb0      	pop	{r4, r5, r7, pc}
 8002c96:	bf00      	nop
 8002c98:	200011dc 	.word	0x200011dc
 8002c9c:	200011ec 	.word	0x200011ec
 8002ca0:	2000126c 	.word	0x2000126c

08002ca4 <rotateAxis>:

void rotateAxis(int direccion) {
 8002ca4:	b480      	push	{r7}
 8002ca6:	b085      	sub	sp, #20
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
	switch (direccion) {
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d021      	beq.n	8002cf6 <rotateAxis+0x52>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2b03      	cmp	r3, #3
 8002cb6:	d13c      	bne.n	8002d32 <rotateAxis+0x8e>
	case DERECHA:
		for (int i = 0; i < 4; i++) {
 8002cb8:	2300      	movs	r3, #0
 8002cba:	60fb      	str	r3, [r7, #12]
 8002cbc:	e017      	b.n	8002cee <rotateAxis+0x4a>
			direcciones[i] = direcciones[i] - 1;
 8002cbe:	4a1f      	ldr	r2, [pc, #124]	; (8002d3c <rotateAxis+0x98>)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cc6:	1e5a      	subs	r2, r3, #1
 8002cc8:	491c      	ldr	r1, [pc, #112]	; (8002d3c <rotateAxis+0x98>)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (direcciones[i] == -1) {
 8002cd0:	4a1a      	ldr	r2, [pc, #104]	; (8002d3c <rotateAxis+0x98>)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cdc:	d104      	bne.n	8002ce8 <rotateAxis+0x44>
				direcciones[i] = 3;
 8002cde:	4a17      	ldr	r2, [pc, #92]	; (8002d3c <rotateAxis+0x98>)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2103      	movs	r1, #3
 8002ce4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int i = 0; i < 4; i++) {
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	3301      	adds	r3, #1
 8002cec:	60fb      	str	r3, [r7, #12]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2b03      	cmp	r3, #3
 8002cf2:	dde4      	ble.n	8002cbe <rotateAxis+0x1a>
			}
		}
		break;
 8002cf4:	e01d      	b.n	8002d32 <rotateAxis+0x8e>
	case IZQUIERDA:
		for (int j = 0; j < 4; j++) {
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	60bb      	str	r3, [r7, #8]
 8002cfa:	e016      	b.n	8002d2a <rotateAxis+0x86>
			direcciones[j] = direcciones[j] + 1;
 8002cfc:	4a0f      	ldr	r2, [pc, #60]	; (8002d3c <rotateAxis+0x98>)
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d04:	1c5a      	adds	r2, r3, #1
 8002d06:	490d      	ldr	r1, [pc, #52]	; (8002d3c <rotateAxis+0x98>)
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (direcciones[j] == 4) {
 8002d0e:	4a0b      	ldr	r2, [pc, #44]	; (8002d3c <rotateAxis+0x98>)
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d16:	2b04      	cmp	r3, #4
 8002d18:	d104      	bne.n	8002d24 <rotateAxis+0x80>
				direcciones[j] = 0;
 8002d1a:	4a08      	ldr	r2, [pc, #32]	; (8002d3c <rotateAxis+0x98>)
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	2100      	movs	r1, #0
 8002d20:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int j = 0; j < 4; j++) {
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	3301      	adds	r3, #1
 8002d28:	60bb      	str	r3, [r7, #8]
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	2b03      	cmp	r3, #3
 8002d2e:	dde5      	ble.n	8002cfc <rotateAxis+0x58>
			}
		}
		break;
 8002d30:	bf00      	nop
	}
}
 8002d32:	bf00      	nop
 8002d34:	3714      	adds	r7, #20
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bc80      	pop	{r7}
 8002d3a:	4770      	bx	lr
 8002d3c:	200011ec 	.word	0x200011ec

08002d40 <resetAxis>:

void resetAxis() {
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
	for (int i = 0; i < 4; i++) {
 8002d46:	2300      	movs	r3, #0
 8002d48:	607b      	str	r3, [r7, #4]
 8002d4a:	e007      	b.n	8002d5c <resetAxis+0x1c>
		direcciones[i] = i;
 8002d4c:	4908      	ldr	r1, [pc, #32]	; (8002d70 <resetAxis+0x30>)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < 4; i++) {
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	3301      	adds	r3, #1
 8002d5a:	607b      	str	r3, [r7, #4]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2b03      	cmp	r3, #3
 8002d60:	ddf4      	ble.n	8002d4c <resetAxis+0xc>
	}
}
 8002d62:	bf00      	nop
 8002d64:	bf00      	nop
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bc80      	pop	{r7}
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	200011ec 	.word	0x200011ec

08002d74 <HAL_ADC_ConvCpltCallback>:
		//SerialBT.println();
	}
}

// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 10; i++) {
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	60fb      	str	r3, [r7, #12]
 8002d80:	e029      	b.n	8002dd6 <HAL_ADC_ConvCpltCallback+0x62>
		CNY70[i] = adc_buf[i * 4];
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	4a27      	ldr	r2, [pc, #156]	; (8002e24 <HAL_ADC_ConvCpltCallback+0xb0>)
 8002d88:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002d8c:	4926      	ldr	r1, [pc, #152]	; (8002e28 <HAL_ADC_ConvCpltCallback+0xb4>)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SHARP_1[i] = adc_buf[i * 4 + 1];
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	3301      	adds	r3, #1
 8002d9a:	4a22      	ldr	r2, [pc, #136]	; (8002e24 <HAL_ADC_ConvCpltCallback+0xb0>)
 8002d9c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002da0:	4922      	ldr	r1, [pc, #136]	; (8002e2c <HAL_ADC_ConvCpltCallback+0xb8>)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SHARP_2[i] = adc_buf[i * 4 + 2];
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	3302      	adds	r3, #2
 8002dae:	4a1d      	ldr	r2, [pc, #116]	; (8002e24 <HAL_ADC_ConvCpltCallback+0xb0>)
 8002db0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002db4:	491e      	ldr	r1, [pc, #120]	; (8002e30 <HAL_ADC_ConvCpltCallback+0xbc>)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SHARP_3[i] = adc_buf[i * 4 + 3];
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	3303      	adds	r3, #3
 8002dc2:	4a18      	ldr	r2, [pc, #96]	; (8002e24 <HAL_ADC_ConvCpltCallback+0xb0>)
 8002dc4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002dc8:	491a      	ldr	r1, [pc, #104]	; (8002e34 <HAL_ADC_ConvCpltCallback+0xc0>)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < 10; i++) {
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	60fb      	str	r3, [r7, #12]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2b09      	cmp	r3, #9
 8002dda:	ddd2      	ble.n	8002d82 <HAL_ADC_ConvCpltCallback+0xe>
	}
	Sensors[0] = lecturaCNY70(10, CNY70);
 8002ddc:	4912      	ldr	r1, [pc, #72]	; (8002e28 <HAL_ADC_ConvCpltCallback+0xb4>)
 8002dde:	200a      	movs	r0, #10
 8002de0:	f000 fb52 	bl	8003488 <lecturaCNY70>
 8002de4:	4603      	mov	r3, r0
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7fd ff28 	bl	8000c3c <__aeabi_i2f>
 8002dec:	4603      	mov	r3, r0
 8002dee:	4a12      	ldr	r2, [pc, #72]	; (8002e38 <HAL_ADC_ConvCpltCallback+0xc4>)
 8002df0:	6013      	str	r3, [r2, #0]
	Sensors[1] = lecSensor(10, SHARP_1);
 8002df2:	490e      	ldr	r1, [pc, #56]	; (8002e2c <HAL_ADC_ConvCpltCallback+0xb8>)
 8002df4:	200a      	movs	r0, #10
 8002df6:	f000 fac7 	bl	8003388 <lecSensor>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	4a0e      	ldr	r2, [pc, #56]	; (8002e38 <HAL_ADC_ConvCpltCallback+0xc4>)
 8002dfe:	6053      	str	r3, [r2, #4]
	Sensors[2] = lecSensor(10, SHARP_2);
 8002e00:	490b      	ldr	r1, [pc, #44]	; (8002e30 <HAL_ADC_ConvCpltCallback+0xbc>)
 8002e02:	200a      	movs	r0, #10
 8002e04:	f000 fac0 	bl	8003388 <lecSensor>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	4a0b      	ldr	r2, [pc, #44]	; (8002e38 <HAL_ADC_ConvCpltCallback+0xc4>)
 8002e0c:	6093      	str	r3, [r2, #8]
	Sensors[3] = lecSensor(10, SHARP_3);
 8002e0e:	4909      	ldr	r1, [pc, #36]	; (8002e34 <HAL_ADC_ConvCpltCallback+0xc0>)
 8002e10:	200a      	movs	r0, #10
 8002e12:	f000 fab9 	bl	8003388 <lecSensor>
 8002e16:	4603      	mov	r3, r0
 8002e18:	4a07      	ldr	r2, [pc, #28]	; (8002e38 <HAL_ADC_ConvCpltCallback+0xc4>)
 8002e1a:	60d3      	str	r3, [r2, #12]

}
 8002e1c:	bf00      	nop
 8002e1e:	3710      	adds	r7, #16
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	2000013c 	.word	0x2000013c
 8002e28:	2000113c 	.word	0x2000113c
 8002e2c:	20001164 	.word	0x20001164
 8002e30:	2000118c 	.word	0x2000118c
 8002e34:	200011b4 	.word	0x200011b4
 8002e38:	200011dc 	.word	0x200011dc

08002e3c <MAP>:

uint32_t MAP(uint32_t au32_IN, uint32_t au32_INmin, uint32_t au32_INmax,
		uint32_t au32_OUTmin, uint32_t au32_OUTmax) {
 8002e3c:	b480      	push	{r7}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	607a      	str	r2, [r7, #4]
 8002e48:	603b      	str	r3, [r7, #0]
	return ((((au32_IN - au32_INmin) * (au32_OUTmax - au32_OUTmin))
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	69b9      	ldr	r1, [r7, #24]
 8002e52:	683a      	ldr	r2, [r7, #0]
 8002e54:	1a8a      	subs	r2, r1, r2
 8002e56:	fb03 f202 	mul.w	r2, r3, r2
			/ (au32_INmax - au32_INmin)) + au32_OUTmin);
 8002e5a:	6879      	ldr	r1, [r7, #4]
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	1acb      	subs	r3, r1, r3
 8002e60:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	4413      	add	r3, r2
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3714      	adds	r7, #20
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bc80      	pop	{r7}
 8002e70:	4770      	bx	lr

08002e72 <constrain>:

int constrain(int x, int a, int b) {
 8002e72:	b480      	push	{r7}
 8002e74:	b085      	sub	sp, #20
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	60f8      	str	r0, [r7, #12]
 8002e7a:	60b9      	str	r1, [r7, #8]
 8002e7c:	607a      	str	r2, [r7, #4]
	if (x < a) {
 8002e7e:	68fa      	ldr	r2, [r7, #12]
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	da01      	bge.n	8002e8a <constrain+0x18>
		return a;
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	e006      	b.n	8002e98 <constrain+0x26>
	} else if (b < x) {
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	da01      	bge.n	8002e96 <constrain+0x24>
		return b;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	e000      	b.n	8002e98 <constrain+0x26>
	} else
		return x;
 8002e96:	68fb      	ldr	r3, [r7, #12]
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3714      	adds	r7, #20
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bc80      	pop	{r7}
 8002ea0:	4770      	bx	lr
	...

08002ea4 <moveStraight>:

void moveStraight() {
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af02      	add	r7, sp, #8
	if (Sensors[3] < 16 && Sensors[1] < 16) {
 8002eaa:	4b25      	ldr	r3, [pc, #148]	; (8002f40 <moveStraight+0x9c>)
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7fe f8b4 	bl	8001020 <__aeabi_fcmplt>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d016      	beq.n	8002eec <moveStraight+0x48>
 8002ebe:	4b20      	ldr	r3, [pc, #128]	; (8002f40 <moveStraight+0x9c>)
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7fe f8aa 	bl	8001020 <__aeabi_fcmplt>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00c      	beq.n	8002eec <moveStraight+0x48>
		//intUartSend(0);
		error = Sensors[3] - Sensors[1];
 8002ed2:	4b1b      	ldr	r3, [pc, #108]	; (8002f40 <moveStraight+0x9c>)
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	4a1a      	ldr	r2, [pc, #104]	; (8002f40 <moveStraight+0x9c>)
 8002ed8:	6852      	ldr	r2, [r2, #4]
 8002eda:	4611      	mov	r1, r2
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7fd fdf7 	bl	8000ad0 <__aeabi_fsub>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	4b17      	ldr	r3, [pc, #92]	; (8002f44 <moveStraight+0xa0>)
 8002ee8:	601a      	str	r2, [r3, #0]
 8002eea:	e033      	b.n	8002f54 <moveStraight+0xb0>
	} else if (Sensors[3] < 16) {
 8002eec:	4b14      	ldr	r3, [pc, #80]	; (8002f40 <moveStraight+0x9c>)
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7fe f893 	bl	8001020 <__aeabi_fcmplt>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d00a      	beq.n	8002f16 <moveStraight+0x72>
		//intUartSend(1);
		error = Sensors[3] - 9;
 8002f00:	4b0f      	ldr	r3, [pc, #60]	; (8002f40 <moveStraight+0x9c>)
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	4910      	ldr	r1, [pc, #64]	; (8002f48 <moveStraight+0xa4>)
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7fd fde2 	bl	8000ad0 <__aeabi_fsub>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	461a      	mov	r2, r3
 8002f10:	4b0c      	ldr	r3, [pc, #48]	; (8002f44 <moveStraight+0xa0>)
 8002f12:	601a      	str	r2, [r3, #0]
 8002f14:	e01e      	b.n	8002f54 <moveStraight+0xb0>
	} else if (Sensors[1] < 16) {
 8002f16:	4b0a      	ldr	r3, [pc, #40]	; (8002f40 <moveStraight+0x9c>)
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7fe f87e 	bl	8001020 <__aeabi_fcmplt>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d010      	beq.n	8002f4c <moveStraight+0xa8>
		//intUartSend(2);
		error = 9 - Sensors[1];
 8002f2a:	4b05      	ldr	r3, [pc, #20]	; (8002f40 <moveStraight+0x9c>)
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	4619      	mov	r1, r3
 8002f30:	4805      	ldr	r0, [pc, #20]	; (8002f48 <moveStraight+0xa4>)
 8002f32:	f7fd fdcd 	bl	8000ad0 <__aeabi_fsub>
 8002f36:	4603      	mov	r3, r0
 8002f38:	461a      	mov	r2, r3
 8002f3a:	4b02      	ldr	r3, [pc, #8]	; (8002f44 <moveStraight+0xa0>)
 8002f3c:	601a      	str	r2, [r3, #0]
 8002f3e:	e009      	b.n	8002f54 <moveStraight+0xb0>
 8002f40:	200011dc 	.word	0x200011dc
 8002f44:	20001bcc 	.word	0x20001bcc
 8002f48:	41100000 	.word	0x41100000
	} else {
		//intUartSend(3);
		error = 0;
 8002f4c:	4b79      	ldr	r3, [pc, #484]	; (8003134 <moveStraight+0x290>)
 8002f4e:	f04f 0200 	mov.w	r2, #0
 8002f52:	601a      	str	r2, [r3, #0]
	}

	timePrev = timeNow;
 8002f54:	4b78      	ldr	r3, [pc, #480]	; (8003138 <moveStraight+0x294>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a78      	ldr	r2, [pc, #480]	; (800313c <moveStraight+0x298>)
 8002f5a:	6013      	str	r3, [r2, #0]
	timeNow = HAL_GetTick();
 8002f5c:	f000 fe14 	bl	8003b88 <HAL_GetTick>
 8002f60:	4603      	mov	r3, r0
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7fd fe66 	bl	8000c34 <__aeabi_ui2f>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	4a73      	ldr	r2, [pc, #460]	; (8003138 <moveStraight+0x294>)
 8002f6c:	6013      	str	r3, [r2, #0]
	elapsedTime = (timeNow - timePrev) / 1000;
 8002f6e:	4b72      	ldr	r3, [pc, #456]	; (8003138 <moveStraight+0x294>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a72      	ldr	r2, [pc, #456]	; (800313c <moveStraight+0x298>)
 8002f74:	6812      	ldr	r2, [r2, #0]
 8002f76:	4611      	mov	r1, r2
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7fd fda9 	bl	8000ad0 <__aeabi_fsub>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	496f      	ldr	r1, [pc, #444]	; (8003140 <moveStraight+0x29c>)
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7fd ff62 	bl	8000e4c <__aeabi_fdiv>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	4b6d      	ldr	r3, [pc, #436]	; (8003144 <moveStraight+0x2a0>)
 8002f8e:	601a      	str	r2, [r3, #0]
	pidD = KD * ((error - previousError) / elapsedTime);
 8002f90:	4b68      	ldr	r3, [pc, #416]	; (8003134 <moveStraight+0x290>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a6c      	ldr	r2, [pc, #432]	; (8003148 <moveStraight+0x2a4>)
 8002f96:	6812      	ldr	r2, [r2, #0]
 8002f98:	4611      	mov	r1, r2
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7fd fd98 	bl	8000ad0 <__aeabi_fsub>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	4b67      	ldr	r3, [pc, #412]	; (8003144 <moveStraight+0x2a0>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4619      	mov	r1, r3
 8002faa:	4610      	mov	r0, r2
 8002fac:	f7fd ff4e 	bl	8000e4c <__aeabi_fdiv>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	4b65      	ldr	r3, [pc, #404]	; (800314c <moveStraight+0x2a8>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4619      	mov	r1, r3
 8002fba:	4610      	mov	r0, r2
 8002fbc:	f7fd fe92 	bl	8000ce4 <__aeabi_fmul>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	4b62      	ldr	r3, [pc, #392]	; (8003150 <moveStraight+0x2ac>)
 8002fc6:	601a      	str	r2, [r3, #0]
	pidP = KP * error;
 8002fc8:	4b62      	ldr	r3, [pc, #392]	; (8003154 <moveStraight+0x2b0>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a59      	ldr	r2, [pc, #356]	; (8003134 <moveStraight+0x290>)
 8002fce:	6812      	ldr	r2, [r2, #0]
 8002fd0:	4611      	mov	r1, r2
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7fd fe86 	bl	8000ce4 <__aeabi_fmul>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	461a      	mov	r2, r3
 8002fdc:	4b5e      	ldr	r3, [pc, #376]	; (8003158 <moveStraight+0x2b4>)
 8002fde:	601a      	str	r2, [r3, #0]
	pid = pidP + pidD;
 8002fe0:	4b5d      	ldr	r3, [pc, #372]	; (8003158 <moveStraight+0x2b4>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a5a      	ldr	r2, [pc, #360]	; (8003150 <moveStraight+0x2ac>)
 8002fe6:	6812      	ldr	r2, [r2, #0]
 8002fe8:	4611      	mov	r1, r2
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7fd fd72 	bl	8000ad4 <__addsf3>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	4b59      	ldr	r3, [pc, #356]	; (800315c <moveStraight+0x2b8>)
 8002ff6:	601a      	str	r2, [r3, #0]
	if (pid > velocity) {
 8002ff8:	4b58      	ldr	r3, [pc, #352]	; (800315c <moveStraight+0x2b8>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a58      	ldr	r2, [pc, #352]	; (8003160 <moveStraight+0x2bc>)
 8002ffe:	6812      	ldr	r2, [r2, #0]
 8003000:	4611      	mov	r1, r2
 8003002:	4618      	mov	r0, r3
 8003004:	f7fe f82a 	bl	800105c <__aeabi_fcmpgt>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d003      	beq.n	8003016 <moveStraight+0x172>
		//intUartSend(1);
		pid = velocity;
 800300e:	4b54      	ldr	r3, [pc, #336]	; (8003160 <moveStraight+0x2bc>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a52      	ldr	r2, [pc, #328]	; (800315c <moveStraight+0x2b8>)
 8003014:	6013      	str	r3, [r2, #0]
	}
	if (pid < -velocity) {
 8003016:	4b52      	ldr	r3, [pc, #328]	; (8003160 <moveStraight+0x2bc>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800301e:	4a4f      	ldr	r2, [pc, #316]	; (800315c <moveStraight+0x2b8>)
 8003020:	6812      	ldr	r2, [r2, #0]
 8003022:	4611      	mov	r1, r2
 8003024:	4618      	mov	r0, r3
 8003026:	f7fe f819 	bl	800105c <__aeabi_fcmpgt>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d005      	beq.n	800303c <moveStraight+0x198>
		//intUartSend(0);
		pid = -velocity;
 8003030:	4b4b      	ldr	r3, [pc, #300]	; (8003160 <moveStraight+0x2bc>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003038:	4a48      	ldr	r2, [pc, #288]	; (800315c <moveStraight+0x2b8>)
 800303a:	6013      	str	r3, [r2, #0]
	}
	//intUartSend(abs(pid));
	motLeft = velocity - pid;
 800303c:	4b48      	ldr	r3, [pc, #288]	; (8003160 <moveStraight+0x2bc>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a46      	ldr	r2, [pc, #280]	; (800315c <moveStraight+0x2b8>)
 8003042:	6812      	ldr	r2, [r2, #0]
 8003044:	4611      	mov	r1, r2
 8003046:	4618      	mov	r0, r3
 8003048:	f7fd fd42 	bl	8000ad0 <__aeabi_fsub>
 800304c:	4603      	mov	r3, r0
 800304e:	4618      	mov	r0, r3
 8003050:	f7fe f80e 	bl	8001070 <__aeabi_f2iz>
 8003054:	4603      	mov	r3, r0
 8003056:	4a43      	ldr	r2, [pc, #268]	; (8003164 <moveStraight+0x2c0>)
 8003058:	6013      	str	r3, [r2, #0]
	motRight = velocity + pid;
 800305a:	4b41      	ldr	r3, [pc, #260]	; (8003160 <moveStraight+0x2bc>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a3f      	ldr	r2, [pc, #252]	; (800315c <moveStraight+0x2b8>)
 8003060:	6812      	ldr	r2, [r2, #0]
 8003062:	4611      	mov	r1, r2
 8003064:	4618      	mov	r0, r3
 8003066:	f7fd fd35 	bl	8000ad4 <__addsf3>
 800306a:	4603      	mov	r3, r0
 800306c:	4618      	mov	r0, r3
 800306e:	f7fd ffff 	bl	8001070 <__aeabi_f2iz>
 8003072:	4603      	mov	r3, r0
 8003074:	4a3c      	ldr	r2, [pc, #240]	; (8003168 <moveStraight+0x2c4>)
 8003076:	6013      	str	r3, [r2, #0]
	if (motLeft < 0) {
 8003078:	4b3a      	ldr	r3, [pc, #232]	; (8003164 <moveStraight+0x2c0>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2b00      	cmp	r3, #0
 800307e:	da02      	bge.n	8003086 <moveStraight+0x1e2>
		motLeft = 0;
 8003080:	4b38      	ldr	r3, [pc, #224]	; (8003164 <moveStraight+0x2c0>)
 8003082:	2200      	movs	r2, #0
 8003084:	601a      	str	r2, [r3, #0]
	}
	if (motRight < 0) {
 8003086:	4b38      	ldr	r3, [pc, #224]	; (8003168 <moveStraight+0x2c4>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2b00      	cmp	r3, #0
 800308c:	da02      	bge.n	8003094 <moveStraight+0x1f0>
		motRight = 0;
 800308e:	4b36      	ldr	r3, [pc, #216]	; (8003168 <moveStraight+0x2c4>)
 8003090:	2200      	movs	r2, #0
 8003092:	601a      	str	r2, [r3, #0]
	}

	previousError = error;
 8003094:	4b27      	ldr	r3, [pc, #156]	; (8003134 <moveStraight+0x290>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a2b      	ldr	r2, [pc, #172]	; (8003148 <moveStraight+0x2a4>)
 800309a:	6013      	str	r3, [r2, #0]
	motRight = constrain(motRight, -1000, 1000);
 800309c:	4b32      	ldr	r3, [pc, #200]	; (8003168 <moveStraight+0x2c4>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80030a4:	4931      	ldr	r1, [pc, #196]	; (800316c <moveStraight+0x2c8>)
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7ff fee3 	bl	8002e72 <constrain>
 80030ac:	4603      	mov	r3, r0
 80030ae:	4a2e      	ldr	r2, [pc, #184]	; (8003168 <moveStraight+0x2c4>)
 80030b0:	6013      	str	r3, [r2, #0]
	motLeft = constrain(motLeft, -1000, 1000);
 80030b2:	4b2c      	ldr	r3, [pc, #176]	; (8003164 <moveStraight+0x2c0>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80030ba:	492c      	ldr	r1, [pc, #176]	; (800316c <moveStraight+0x2c8>)
 80030bc:	4618      	mov	r0, r3
 80030be:	f7ff fed8 	bl	8002e72 <constrain>
 80030c2:	4603      	mov	r3, r0
 80030c4:	4a27      	ldr	r2, [pc, #156]	; (8003164 <moveStraight+0x2c0>)
 80030c6:	6013      	str	r3, [r2, #0]

	motRight = MAP(motRight, -1000, 1000, 0, baseChoice[choice] * 2);
 80030c8:	4b27      	ldr	r3, [pc, #156]	; (8003168 <moveStraight+0x2c4>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4618      	mov	r0, r3
 80030ce:	4b28      	ldr	r3, [pc, #160]	; (8003170 <moveStraight+0x2cc>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a28      	ldr	r2, [pc, #160]	; (8003174 <moveStraight+0x2d0>)
 80030d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030d8:	005b      	lsls	r3, r3, #1
 80030da:	9300      	str	r3, [sp, #0]
 80030dc:	2300      	movs	r3, #0
 80030de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80030e2:	4922      	ldr	r1, [pc, #136]	; (800316c <moveStraight+0x2c8>)
 80030e4:	f7ff feaa 	bl	8002e3c <MAP>
 80030e8:	4603      	mov	r3, r0
 80030ea:	461a      	mov	r2, r3
 80030ec:	4b1e      	ldr	r3, [pc, #120]	; (8003168 <moveStraight+0x2c4>)
 80030ee:	601a      	str	r2, [r3, #0]
	motLeft = MAP(motLeft, -1000, 1000, 0, baseChoice[choice] * 2);
 80030f0:	4b1c      	ldr	r3, [pc, #112]	; (8003164 <moveStraight+0x2c0>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4618      	mov	r0, r3
 80030f6:	4b1e      	ldr	r3, [pc, #120]	; (8003170 <moveStraight+0x2cc>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a1e      	ldr	r2, [pc, #120]	; (8003174 <moveStraight+0x2d0>)
 80030fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	9300      	str	r3, [sp, #0]
 8003104:	2300      	movs	r3, #0
 8003106:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800310a:	4918      	ldr	r1, [pc, #96]	; (800316c <moveStraight+0x2c8>)
 800310c:	f7ff fe96 	bl	8002e3c <MAP>
 8003110:	4603      	mov	r3, r0
 8003112:	461a      	mov	r2, r3
 8003114:	4b13      	ldr	r3, [pc, #76]	; (8003164 <moveStraight+0x2c0>)
 8003116:	601a      	str	r2, [r3, #0]
	TIM2->CCR3 = motLeft;
 8003118:	4b12      	ldr	r3, [pc, #72]	; (8003164 <moveStraight+0x2c0>)
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003120:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM2->CCR4 = motRight;
 8003122:	4b11      	ldr	r3, [pc, #68]	; (8003168 <moveStraight+0x2c4>)
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800312a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800312c:	bf00      	nop
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	20001bcc 	.word	0x20001bcc
 8003138:	20001bdc 	.word	0x20001bdc
 800313c:	20001be0 	.word	0x20001be0
 8003140:	447a0000 	.word	0x447a0000
 8003144:	20001bd8 	.word	0x20001bd8
 8003148:	20001bd4 	.word	0x20001bd4
 800314c:	2000120c 	.word	0x2000120c
 8003150:	20001be8 	.word	0x20001be8
 8003154:	20001208 	.word	0x20001208
 8003158:	20001be4 	.word	0x20001be4
 800315c:	20001bd0 	.word	0x20001bd0
 8003160:	20001210 	.word	0x20001210
 8003164:	20001bec 	.word	0x20001bec
 8003168:	20001bf0 	.word	0x20001bf0
 800316c:	fffffc18 	.word	0xfffffc18
 8003170:	20001214 	.word	0x20001214
 8003174:	20000018 	.word	0x20000018

08003178 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800317c:	b672      	cpsid	i
}
 800317e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003180:	e7fe      	b.n	8003180 <Error_Handler+0x8>
 8003182:	0000      	movs	r0, r0
 8003184:	0000      	movs	r0, r0
	...

08003188 <calcularDistancia>:
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f7fd f92f 	bl	80003f4 <__aeabi_i2d>
 8003196:	a30c      	add	r3, pc, #48	; (adr r3, 80031c8 <calcularDistancia+0x40>)
 8003198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800319c:	f7fd f994 	bl	80004c8 <__aeabi_dmul>
 80031a0:	4602      	mov	r2, r0
 80031a2:	460b      	mov	r3, r1
 80031a4:	4610      	mov	r0, r2
 80031a6:	4619      	mov	r1, r3
 80031a8:	f04f 0200 	mov.w	r2, #0
 80031ac:	4b08      	ldr	r3, [pc, #32]	; (80031d0 <calcularDistancia+0x48>)
 80031ae:	f7fd fab5 	bl	800071c <__aeabi_ddiv>
 80031b2:	4602      	mov	r2, r0
 80031b4:	460b      	mov	r3, r1
 80031b6:	4610      	mov	r0, r2
 80031b8:	4619      	mov	r1, r3
 80031ba:	f7fd fc35 	bl	8000a28 <__aeabi_d2f>
 80031be:	4603      	mov	r3, r0
 80031c0:	4618      	mov	r0, r3
 80031c2:	3708      	adds	r7, #8
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	e147ae14 	.word	0xe147ae14
 80031cc:	4004147a 	.word	0x4004147a
 80031d0:	40240000 	.word	0x40240000

080031d4 <runMotor>:
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2b05      	cmp	r3, #5
 80031e2:	d03f      	beq.n	8003264 <runMotor+0x90>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2b05      	cmp	r3, #5
 80031e8:	dc57      	bgt.n	800329a <runMotor+0xc6>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d003      	beq.n	80031f8 <runMotor+0x24>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d01b      	beq.n	800322e <runMotor+0x5a>
 80031f6:	e050      	b.n	800329a <runMotor+0xc6>
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d10a      	bne.n	8003214 <runMotor+0x40>
 80031fe:	2201      	movs	r2, #1
 8003200:	2108      	movs	r1, #8
 8003202:	4828      	ldr	r0, [pc, #160]	; (80032a4 <runMotor+0xd0>)
 8003204:	f001 fdf7 	bl	8004df6 <HAL_GPIO_WritePin>
 8003208:	2200      	movs	r2, #0
 800320a:	2110      	movs	r1, #16
 800320c:	4825      	ldr	r0, [pc, #148]	; (80032a4 <runMotor+0xd0>)
 800320e:	f001 fdf2 	bl	8004df6 <HAL_GPIO_WritePin>
 8003212:	e042      	b.n	800329a <runMotor+0xc6>
 8003214:	2200      	movs	r2, #0
 8003216:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800321a:	4823      	ldr	r0, [pc, #140]	; (80032a8 <runMotor+0xd4>)
 800321c:	f001 fdeb 	bl	8004df6 <HAL_GPIO_WritePin>
 8003220:	2201      	movs	r2, #1
 8003222:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003226:	4820      	ldr	r0, [pc, #128]	; (80032a8 <runMotor+0xd4>)
 8003228:	f001 fde5 	bl	8004df6 <HAL_GPIO_WritePin>
 800322c:	e035      	b.n	800329a <runMotor+0xc6>
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d10a      	bne.n	800324a <runMotor+0x76>
 8003234:	2200      	movs	r2, #0
 8003236:	2108      	movs	r1, #8
 8003238:	481a      	ldr	r0, [pc, #104]	; (80032a4 <runMotor+0xd0>)
 800323a:	f001 fddc 	bl	8004df6 <HAL_GPIO_WritePin>
 800323e:	2201      	movs	r2, #1
 8003240:	2110      	movs	r1, #16
 8003242:	4818      	ldr	r0, [pc, #96]	; (80032a4 <runMotor+0xd0>)
 8003244:	f001 fdd7 	bl	8004df6 <HAL_GPIO_WritePin>
 8003248:	e027      	b.n	800329a <runMotor+0xc6>
 800324a:	2201      	movs	r2, #1
 800324c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003250:	4815      	ldr	r0, [pc, #84]	; (80032a8 <runMotor+0xd4>)
 8003252:	f001 fdd0 	bl	8004df6 <HAL_GPIO_WritePin>
 8003256:	2200      	movs	r2, #0
 8003258:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800325c:	4812      	ldr	r0, [pc, #72]	; (80032a8 <runMotor+0xd4>)
 800325e:	f001 fdca 	bl	8004df6 <HAL_GPIO_WritePin>
 8003262:	e01a      	b.n	800329a <runMotor+0xc6>
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d10a      	bne.n	8003280 <runMotor+0xac>
 800326a:	2200      	movs	r2, #0
 800326c:	2108      	movs	r1, #8
 800326e:	480d      	ldr	r0, [pc, #52]	; (80032a4 <runMotor+0xd0>)
 8003270:	f001 fdc1 	bl	8004df6 <HAL_GPIO_WritePin>
 8003274:	2200      	movs	r2, #0
 8003276:	2110      	movs	r1, #16
 8003278:	480a      	ldr	r0, [pc, #40]	; (80032a4 <runMotor+0xd0>)
 800327a:	f001 fdbc 	bl	8004df6 <HAL_GPIO_WritePin>
 800327e:	e00b      	b.n	8003298 <runMotor+0xc4>
 8003280:	2200      	movs	r2, #0
 8003282:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003286:	4808      	ldr	r0, [pc, #32]	; (80032a8 <runMotor+0xd4>)
 8003288:	f001 fdb5 	bl	8004df6 <HAL_GPIO_WritePin>
 800328c:	2200      	movs	r2, #0
 800328e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003292:	4805      	ldr	r0, [pc, #20]	; (80032a8 <runMotor+0xd4>)
 8003294:	f001 fdaf 	bl	8004df6 <HAL_GPIO_WritePin>
 8003298:	bf00      	nop
 800329a:	bf00      	nop
 800329c:	3708      	adds	r7, #8
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	40010c00 	.word	0x40010c00
 80032a8:	40010800 	.word	0x40010800

080032ac <wallDetector>:
 */
#include "sharp.h"

#include <math.h>

int wallDetector(int n, int d) {
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
	if (d == ADELANTE) {
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d106      	bne.n	80032ca <wallDetector+0x1e>
		if (n < 18) {
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2b11      	cmp	r3, #17
 80032c0:	dc01      	bgt.n	80032c6 <wallDetector+0x1a>
			return 1;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e007      	b.n	80032d6 <wallDetector+0x2a>
		} else {
			return 0;
 80032c6:	2300      	movs	r3, #0
 80032c8:	e005      	b.n	80032d6 <wallDetector+0x2a>
		}
	}
	if (n < 14) {
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2b0d      	cmp	r3, #13
 80032ce:	dc01      	bgt.n	80032d4 <wallDetector+0x28>
		return 1;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e000      	b.n	80032d6 <wallDetector+0x2a>
	} else {
		return 0;
 80032d4:	2300      	movs	r3, #0
	}

}
 80032d6:	4618      	mov	r0, r3
 80032d8:	370c      	adds	r7, #12
 80032da:	46bd      	mov	sp, r7
 80032dc:	bc80      	pop	{r7}
 80032de:	4770      	bx	lr

080032e0 <lecturaSensor>:

float lecturaSensor(int direccion, float values[4]) {
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
	switch (direccion) {
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2b03      	cmp	r3, #3
 80032ee:	d841      	bhi.n	8003374 <lecturaSensor+0x94>
 80032f0:	a201      	add	r2, pc, #4	; (adr r2, 80032f8 <lecturaSensor+0x18>)
 80032f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032f6:	bf00      	nop
 80032f8:	08003309 	.word	0x08003309
 80032fc:	0800334d 	.word	0x0800334d
 8003300:	0800336f 	.word	0x0800336f
 8003304:	0800332b 	.word	0x0800332b
	case ADELANTE:
		return wallDetector(values[2], direccion);
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	3308      	adds	r3, #8
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4618      	mov	r0, r3
 8003310:	f7fd feae 	bl	8001070 <__aeabi_f2iz>
 8003314:	4603      	mov	r3, r0
 8003316:	6879      	ldr	r1, [r7, #4]
 8003318:	4618      	mov	r0, r3
 800331a:	f7ff ffc7 	bl	80032ac <wallDetector>
 800331e:	4603      	mov	r3, r0
 8003320:	4618      	mov	r0, r3
 8003322:	f7fd fc8b 	bl	8000c3c <__aeabi_i2f>
 8003326:	4603      	mov	r3, r0
 8003328:	e025      	b.n	8003376 <lecturaSensor+0x96>
		break;
	case DERECHA:
		return wallDetector(values[1], direccion);
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	3304      	adds	r3, #4
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4618      	mov	r0, r3
 8003332:	f7fd fe9d 	bl	8001070 <__aeabi_f2iz>
 8003336:	4603      	mov	r3, r0
 8003338:	6879      	ldr	r1, [r7, #4]
 800333a:	4618      	mov	r0, r3
 800333c:	f7ff ffb6 	bl	80032ac <wallDetector>
 8003340:	4603      	mov	r3, r0
 8003342:	4618      	mov	r0, r3
 8003344:	f7fd fc7a 	bl	8000c3c <__aeabi_i2f>
 8003348:	4603      	mov	r3, r0
 800334a:	e014      	b.n	8003376 <lecturaSensor+0x96>
		break;
	case IZQUIERDA:
		return wallDetector(values[3], direccion);
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	330c      	adds	r3, #12
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4618      	mov	r0, r3
 8003354:	f7fd fe8c 	bl	8001070 <__aeabi_f2iz>
 8003358:	4603      	mov	r3, r0
 800335a:	6879      	ldr	r1, [r7, #4]
 800335c:	4618      	mov	r0, r3
 800335e:	f7ff ffa5 	bl	80032ac <wallDetector>
 8003362:	4603      	mov	r3, r0
 8003364:	4618      	mov	r0, r3
 8003366:	f7fd fc69 	bl	8000c3c <__aeabi_i2f>
 800336a:	4603      	mov	r3, r0
 800336c:	e003      	b.n	8003376 <lecturaSensor+0x96>
		break;
	case ATRAS:
		return 0;
 800336e:	f04f 0300 	mov.w	r3, #0
 8003372:	e000      	b.n	8003376 <lecturaSensor+0x96>
		break;
	}
	return 15;
 8003374:	4b02      	ldr	r3, [pc, #8]	; (8003380 <lecturaSensor+0xa0>)
}
 8003376:	4618      	mov	r0, r3
 8003378:	3708      	adds	r7, #8
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	41700000 	.word	0x41700000
 8003384:	00000000 	.word	0x00000000

08003388 <lecSensor>:

float lecSensor(int n, uint32_t values[10]) {
 8003388:	b580      	push	{r7, lr}
 800338a:	b086      	sub	sp, #24
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
	long suma = 0;
 8003392:	2300      	movs	r3, #0
 8003394:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < n; i++) {
 8003396:	2300      	movs	r3, #0
 8003398:	613b      	str	r3, [r7, #16]
 800339a:	e00a      	b.n	80033b2 <lecSensor+0x2a>
		suma = suma + values[i];
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	683a      	ldr	r2, [r7, #0]
 80033a2:	4413      	add	r3, r2
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	4413      	add	r3, r2
 80033aa:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < n; i++) {
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	3301      	adds	r3, #1
 80033b0:	613b      	str	r3, [r7, #16]
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	dbf0      	blt.n	800339c <lecSensor+0x14>
	}
	float adc = suma / n;
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	fb92 f3f3 	sdiv	r3, r2, r3
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7fd fc3a 	bl	8000c3c <__aeabi_i2f>
 80033c8:	4603      	mov	r3, r0
 80033ca:	60bb      	str	r3, [r7, #8]
	float volts = adc * 0.0008056640; // value from sensor * (5/1024)
 80033cc:	68b8      	ldr	r0, [r7, #8]
 80033ce:	f7fd f823 	bl	8000418 <__aeabi_f2d>
 80033d2:	a323      	add	r3, pc, #140	; (adr r3, 8003460 <lecSensor+0xd8>)
 80033d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d8:	f7fd f876 	bl	80004c8 <__aeabi_dmul>
 80033dc:	4602      	mov	r2, r0
 80033de:	460b      	mov	r3, r1
 80033e0:	4610      	mov	r0, r2
 80033e2:	4619      	mov	r1, r3
 80033e4:	f7fd fb20 	bl	8000a28 <__aeabi_d2f>
 80033e8:	4603      	mov	r3, r0
 80033ea:	60fb      	str	r3, [r7, #12]
	if (volts <= 0.35)
 80033ec:	68f8      	ldr	r0, [r7, #12]
 80033ee:	f7fd f813 	bl	8000418 <__aeabi_f2d>
 80033f2:	a31d      	add	r3, pc, #116	; (adr r3, 8003468 <lecSensor+0xe0>)
 80033f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033f8:	f7fd fae2 	bl	80009c0 <__aeabi_dcmple>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d001      	beq.n	8003406 <lecSensor+0x7e>
		volts = 0.35;
 8003402:	4b1d      	ldr	r3, [pc, #116]	; (8003478 <lecSensor+0xf0>)
 8003404:	60fb      	str	r3, [r7, #12]
	volts = pow(volts - 0.3, 0.25);/*convertimos a cm con un aproximacion grafica*/
 8003406:	68f8      	ldr	r0, [r7, #12]
 8003408:	f7fd f806 	bl	8000418 <__aeabi_f2d>
 800340c:	a318      	add	r3, pc, #96	; (adr r3, 8003470 <lecSensor+0xe8>)
 800340e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003412:	f7fc fea1 	bl	8000158 <__aeabi_dsub>
 8003416:	4602      	mov	r2, r0
 8003418:	460b      	mov	r3, r1
 800341a:	4610      	mov	r0, r2
 800341c:	4619      	mov	r1, r3
 800341e:	f04f 0200 	mov.w	r2, #0
 8003422:	4b16      	ldr	r3, [pc, #88]	; (800347c <lecSensor+0xf4>)
 8003424:	f003 fbf4 	bl	8006c10 <pow>
 8003428:	4602      	mov	r2, r0
 800342a:	460b      	mov	r3, r1
 800342c:	4610      	mov	r0, r2
 800342e:	4619      	mov	r1, r3
 8003430:	f7fd fafa 	bl	8000a28 <__aeabi_d2f>
 8003434:	4603      	mov	r3, r0
 8003436:	60fb      	str	r3, [r7, #12]
	volts = 27.5 / volts; /*no preguntar por los valores*/
 8003438:	68f9      	ldr	r1, [r7, #12]
 800343a:	4811      	ldr	r0, [pc, #68]	; (8003480 <lecSensor+0xf8>)
 800343c:	f7fd fd06 	bl	8000e4c <__aeabi_fdiv>
 8003440:	4603      	mov	r3, r0
 8003442:	60fb      	str	r3, [r7, #12]
	volts -= 18;
 8003444:	490f      	ldr	r1, [pc, #60]	; (8003484 <lecSensor+0xfc>)
 8003446:	68f8      	ldr	r0, [r7, #12]
 8003448:	f7fd fb42 	bl	8000ad0 <__aeabi_fsub>
 800344c:	4603      	mov	r3, r0
 800344e:	60fb      	str	r3, [r7, #12]

	return volts;
 8003450:	68fb      	ldr	r3, [r7, #12]

}
 8003452:	4618      	mov	r0, r3
 8003454:	3718      	adds	r7, #24
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	f3af 8000 	nop.w
 8003460:	440a4e96 	.word	0x440a4e96
 8003464:	3f4a6666 	.word	0x3f4a6666
 8003468:	66666666 	.word	0x66666666
 800346c:	3fd66666 	.word	0x3fd66666
 8003470:	33333333 	.word	0x33333333
 8003474:	3fd33333 	.word	0x3fd33333
 8003478:	3eb33333 	.word	0x3eb33333
 800347c:	3fd00000 	.word	0x3fd00000
 8003480:	41dc0000 	.word	0x41dc0000
 8003484:	41900000 	.word	0x41900000

08003488 <lecturaCNY70>:

int lecturaCNY70(int n, uint32_t values[10]) {
 8003488:	b480      	push	{r7}
 800348a:	b087      	sub	sp, #28
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
	long suma = 0;
 8003492:	2300      	movs	r3, #0
 8003494:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < n; i++) {
 8003496:	2300      	movs	r3, #0
 8003498:	613b      	str	r3, [r7, #16]
 800349a:	e00a      	b.n	80034b2 <lecturaCNY70+0x2a>
		suma = suma + values[i];
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	683a      	ldr	r2, [r7, #0]
 80034a2:	4413      	add	r3, r2
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	4413      	add	r3, r2
 80034aa:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < n; i++) {
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	3301      	adds	r3, #1
 80034b0:	613b      	str	r3, [r7, #16]
 80034b2:	693a      	ldr	r2, [r7, #16]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	dbf0      	blt.n	800349c <lecturaCNY70+0x14>
	}
	int adc = (suma / n);
 80034ba:	697a      	ldr	r2, [r7, #20]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	fb92 f3f3 	sdiv	r3, r2, r3
 80034c2:	60fb      	str	r3, [r7, #12]
	if (adc < 1000) {
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034ca:	da01      	bge.n	80034d0 <lecturaCNY70+0x48>
		return BLANCO;
 80034cc:	2300      	movs	r3, #0
 80034ce:	e000      	b.n	80034d2 <lecturaCNY70+0x4a>
	} else {
		return NEGRO;
 80034d0:	2301      	movs	r3, #1
	}
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	371c      	adds	r7, #28
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bc80      	pop	{r7}
 80034da:	4770      	bx	lr

080034dc <HAL_MspInit>:
 80034dc:	b480      	push	{r7}
 80034de:	b085      	sub	sp, #20
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	4b15      	ldr	r3, [pc, #84]	; (8003538 <HAL_MspInit+0x5c>)
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	4a14      	ldr	r2, [pc, #80]	; (8003538 <HAL_MspInit+0x5c>)
 80034e8:	f043 0301 	orr.w	r3, r3, #1
 80034ec:	6193      	str	r3, [r2, #24]
 80034ee:	4b12      	ldr	r3, [pc, #72]	; (8003538 <HAL_MspInit+0x5c>)
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	60bb      	str	r3, [r7, #8]
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	4b0f      	ldr	r3, [pc, #60]	; (8003538 <HAL_MspInit+0x5c>)
 80034fc:	69db      	ldr	r3, [r3, #28]
 80034fe:	4a0e      	ldr	r2, [pc, #56]	; (8003538 <HAL_MspInit+0x5c>)
 8003500:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003504:	61d3      	str	r3, [r2, #28]
 8003506:	4b0c      	ldr	r3, [pc, #48]	; (8003538 <HAL_MspInit+0x5c>)
 8003508:	69db      	ldr	r3, [r3, #28]
 800350a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800350e:	607b      	str	r3, [r7, #4]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4b0a      	ldr	r3, [pc, #40]	; (800353c <HAL_MspInit+0x60>)
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	60fb      	str	r3, [r7, #12]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800351e:	60fb      	str	r3, [r7, #12]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003526:	60fb      	str	r3, [r7, #12]
 8003528:	4a04      	ldr	r2, [pc, #16]	; (800353c <HAL_MspInit+0x60>)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6053      	str	r3, [r2, #4]
 800352e:	bf00      	nop
 8003530:	3714      	adds	r7, #20
 8003532:	46bd      	mov	sp, r7
 8003534:	bc80      	pop	{r7}
 8003536:	4770      	bx	lr
 8003538:	40021000 	.word	0x40021000
 800353c:	40010000 	.word	0x40010000

08003540 <NMI_Handler>:
 8003540:	b480      	push	{r7}
 8003542:	af00      	add	r7, sp, #0
 8003544:	e7fe      	b.n	8003544 <NMI_Handler+0x4>

08003546 <HardFault_Handler>:
 8003546:	b480      	push	{r7}
 8003548:	af00      	add	r7, sp, #0
 800354a:	e7fe      	b.n	800354a <HardFault_Handler+0x4>

0800354c <MemManage_Handler>:
 800354c:	b480      	push	{r7}
 800354e:	af00      	add	r7, sp, #0
 8003550:	e7fe      	b.n	8003550 <MemManage_Handler+0x4>

08003552 <BusFault_Handler>:
 8003552:	b480      	push	{r7}
 8003554:	af00      	add	r7, sp, #0
 8003556:	e7fe      	b.n	8003556 <BusFault_Handler+0x4>

08003558 <UsageFault_Handler>:
 8003558:	b480      	push	{r7}
 800355a:	af00      	add	r7, sp, #0
 800355c:	e7fe      	b.n	800355c <UsageFault_Handler+0x4>

0800355e <SVC_Handler>:
 800355e:	b480      	push	{r7}
 8003560:	af00      	add	r7, sp, #0
 8003562:	bf00      	nop
 8003564:	46bd      	mov	sp, r7
 8003566:	bc80      	pop	{r7}
 8003568:	4770      	bx	lr

0800356a <DebugMon_Handler>:
 800356a:	b480      	push	{r7}
 800356c:	af00      	add	r7, sp, #0
 800356e:	bf00      	nop
 8003570:	46bd      	mov	sp, r7
 8003572:	bc80      	pop	{r7}
 8003574:	4770      	bx	lr

08003576 <PendSV_Handler>:
 8003576:	b480      	push	{r7}
 8003578:	af00      	add	r7, sp, #0
 800357a:	bf00      	nop
 800357c:	46bd      	mov	sp, r7
 800357e:	bc80      	pop	{r7}
 8003580:	4770      	bx	lr

08003582 <SysTick_Handler>:
 8003582:	b580      	push	{r7, lr}
 8003584:	af00      	add	r7, sp, #0
 8003586:	f000 faed 	bl	8003b64 <HAL_IncTick>
 800358a:	bf00      	nop
 800358c:	bd80      	pop	{r7, pc}
	...

08003590 <DMA1_Channel1_IRQHandler>:
 8003590:	b580      	push	{r7, lr}
 8003592:	af00      	add	r7, sp, #0
 8003594:	4802      	ldr	r0, [pc, #8]	; (80035a0 <DMA1_Channel1_IRQHandler+0x10>)
 8003596:	f001 f95f 	bl	8004858 <HAL_DMA_IRQHandler>
 800359a:	bf00      	nop
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	200000f8 	.word	0x200000f8

080035a4 <USART1_IRQHandler>:
 80035a4:	b580      	push	{r7, lr}
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	4802      	ldr	r0, [pc, #8]	; (80035b4 <USART1_IRQHandler+0x10>)
 80035aa:	f002 ff39 	bl	8006420 <HAL_UART_IRQHandler>
 80035ae:	bf00      	nop
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	20001ccc 	.word	0x20001ccc

080035b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80035b8:	b480      	push	{r7}
 80035ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80035bc:	bf00      	nop
 80035be:	46bd      	mov	sp, r7
 80035c0:	bc80      	pop	{r7}
 80035c2:	4770      	bx	lr

080035c4 <MX_TIM2_Init>:
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b08a      	sub	sp, #40	; 0x28
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	f107 0320 	add.w	r3, r7, #32
 80035ce:	2200      	movs	r2, #0
 80035d0:	601a      	str	r2, [r3, #0]
 80035d2:	605a      	str	r2, [r3, #4]
 80035d4:	1d3b      	adds	r3, r7, #4
 80035d6:	2200      	movs	r2, #0
 80035d8:	601a      	str	r2, [r3, #0]
 80035da:	605a      	str	r2, [r3, #4]
 80035dc:	609a      	str	r2, [r3, #8]
 80035de:	60da      	str	r2, [r3, #12]
 80035e0:	611a      	str	r2, [r3, #16]
 80035e2:	615a      	str	r2, [r3, #20]
 80035e4:	619a      	str	r2, [r3, #24]
 80035e6:	4b28      	ldr	r3, [pc, #160]	; (8003688 <MX_TIM2_Init+0xc4>)
 80035e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80035ec:	601a      	str	r2, [r3, #0]
 80035ee:	4b26      	ldr	r3, [pc, #152]	; (8003688 <MX_TIM2_Init+0xc4>)
 80035f0:	2200      	movs	r2, #0
 80035f2:	605a      	str	r2, [r3, #4]
 80035f4:	4b24      	ldr	r3, [pc, #144]	; (8003688 <MX_TIM2_Init+0xc4>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	609a      	str	r2, [r3, #8]
 80035fa:	4b23      	ldr	r3, [pc, #140]	; (8003688 <MX_TIM2_Init+0xc4>)
 80035fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003600:	60da      	str	r2, [r3, #12]
 8003602:	4b21      	ldr	r3, [pc, #132]	; (8003688 <MX_TIM2_Init+0xc4>)
 8003604:	2200      	movs	r2, #0
 8003606:	611a      	str	r2, [r3, #16]
 8003608:	4b1f      	ldr	r3, [pc, #124]	; (8003688 <MX_TIM2_Init+0xc4>)
 800360a:	2200      	movs	r2, #0
 800360c:	619a      	str	r2, [r3, #24]
 800360e:	481e      	ldr	r0, [pc, #120]	; (8003688 <MX_TIM2_Init+0xc4>)
 8003610:	f002 f8da 	bl	80057c8 <HAL_TIM_PWM_Init>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d001      	beq.n	800361e <MX_TIM2_Init+0x5a>
 800361a:	f7ff fdad 	bl	8003178 <Error_Handler>
 800361e:	2300      	movs	r3, #0
 8003620:	623b      	str	r3, [r7, #32]
 8003622:	2300      	movs	r3, #0
 8003624:	627b      	str	r3, [r7, #36]	; 0x24
 8003626:	f107 0320 	add.w	r3, r7, #32
 800362a:	4619      	mov	r1, r3
 800362c:	4816      	ldr	r0, [pc, #88]	; (8003688 <MX_TIM2_Init+0xc4>)
 800362e:	f002 fdb9 	bl	80061a4 <HAL_TIMEx_MasterConfigSynchronization>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d001      	beq.n	800363c <MX_TIM2_Init+0x78>
 8003638:	f7ff fd9e 	bl	8003178 <Error_Handler>
 800363c:	2360      	movs	r3, #96	; 0x60
 800363e:	607b      	str	r3, [r7, #4]
 8003640:	2300      	movs	r3, #0
 8003642:	60bb      	str	r3, [r7, #8]
 8003644:	2300      	movs	r3, #0
 8003646:	60fb      	str	r3, [r7, #12]
 8003648:	2300      	movs	r3, #0
 800364a:	617b      	str	r3, [r7, #20]
 800364c:	1d3b      	adds	r3, r7, #4
 800364e:	2208      	movs	r2, #8
 8003650:	4619      	mov	r1, r3
 8003652:	480d      	ldr	r0, [pc, #52]	; (8003688 <MX_TIM2_Init+0xc4>)
 8003654:	f002 fada 	bl	8005c0c <HAL_TIM_PWM_ConfigChannel>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d001      	beq.n	8003662 <MX_TIM2_Init+0x9e>
 800365e:	f7ff fd8b 	bl	8003178 <Error_Handler>
 8003662:	1d3b      	adds	r3, r7, #4
 8003664:	220c      	movs	r2, #12
 8003666:	4619      	mov	r1, r3
 8003668:	4807      	ldr	r0, [pc, #28]	; (8003688 <MX_TIM2_Init+0xc4>)
 800366a:	f002 facf 	bl	8005c0c <HAL_TIM_PWM_ConfigChannel>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d001      	beq.n	8003678 <MX_TIM2_Init+0xb4>
 8003674:	f7ff fd80 	bl	8003178 <Error_Handler>
 8003678:	4803      	ldr	r0, [pc, #12]	; (8003688 <MX_TIM2_Init+0xc4>)
 800367a:	f000 f943 	bl	8003904 <HAL_TIM_MspPostInit>
 800367e:	bf00      	nop
 8003680:	3728      	adds	r7, #40	; 0x28
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	20001bf4 	.word	0x20001bf4

0800368c <MX_TIM3_Init>:
 800368c:	b580      	push	{r7, lr}
 800368e:	b08c      	sub	sp, #48	; 0x30
 8003690:	af00      	add	r7, sp, #0
 8003692:	f107 030c 	add.w	r3, r7, #12
 8003696:	2224      	movs	r2, #36	; 0x24
 8003698:	2100      	movs	r1, #0
 800369a:	4618      	mov	r0, r3
 800369c:	f004 f9c4 	bl	8007a28 <memset>
 80036a0:	1d3b      	adds	r3, r7, #4
 80036a2:	2200      	movs	r2, #0
 80036a4:	601a      	str	r2, [r3, #0]
 80036a6:	605a      	str	r2, [r3, #4]
 80036a8:	4b20      	ldr	r3, [pc, #128]	; (800372c <MX_TIM3_Init+0xa0>)
 80036aa:	4a21      	ldr	r2, [pc, #132]	; (8003730 <MX_TIM3_Init+0xa4>)
 80036ac:	601a      	str	r2, [r3, #0]
 80036ae:	4b1f      	ldr	r3, [pc, #124]	; (800372c <MX_TIM3_Init+0xa0>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	605a      	str	r2, [r3, #4]
 80036b4:	4b1d      	ldr	r3, [pc, #116]	; (800372c <MX_TIM3_Init+0xa0>)
 80036b6:	2200      	movs	r2, #0
 80036b8:	609a      	str	r2, [r3, #8]
 80036ba:	4b1c      	ldr	r3, [pc, #112]	; (800372c <MX_TIM3_Init+0xa0>)
 80036bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036c0:	60da      	str	r2, [r3, #12]
 80036c2:	4b1a      	ldr	r3, [pc, #104]	; (800372c <MX_TIM3_Init+0xa0>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	611a      	str	r2, [r3, #16]
 80036c8:	4b18      	ldr	r3, [pc, #96]	; (800372c <MX_TIM3_Init+0xa0>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	619a      	str	r2, [r3, #24]
 80036ce:	2303      	movs	r3, #3
 80036d0:	60fb      	str	r3, [r7, #12]
 80036d2:	2300      	movs	r3, #0
 80036d4:	613b      	str	r3, [r7, #16]
 80036d6:	2301      	movs	r3, #1
 80036d8:	617b      	str	r3, [r7, #20]
 80036da:	2300      	movs	r3, #0
 80036dc:	61bb      	str	r3, [r7, #24]
 80036de:	230a      	movs	r3, #10
 80036e0:	61fb      	str	r3, [r7, #28]
 80036e2:	2300      	movs	r3, #0
 80036e4:	623b      	str	r3, [r7, #32]
 80036e6:	2301      	movs	r3, #1
 80036e8:	627b      	str	r3, [r7, #36]	; 0x24
 80036ea:	2300      	movs	r3, #0
 80036ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80036ee:	2300      	movs	r3, #0
 80036f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036f2:	f107 030c 	add.w	r3, r7, #12
 80036f6:	4619      	mov	r1, r3
 80036f8:	480c      	ldr	r0, [pc, #48]	; (800372c <MX_TIM3_Init+0xa0>)
 80036fa:	f002 f957 	bl	80059ac <HAL_TIM_Encoder_Init>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d001      	beq.n	8003708 <MX_TIM3_Init+0x7c>
 8003704:	f7ff fd38 	bl	8003178 <Error_Handler>
 8003708:	2300      	movs	r3, #0
 800370a:	607b      	str	r3, [r7, #4]
 800370c:	2300      	movs	r3, #0
 800370e:	60bb      	str	r3, [r7, #8]
 8003710:	1d3b      	adds	r3, r7, #4
 8003712:	4619      	mov	r1, r3
 8003714:	4805      	ldr	r0, [pc, #20]	; (800372c <MX_TIM3_Init+0xa0>)
 8003716:	f002 fd45 	bl	80061a4 <HAL_TIMEx_MasterConfigSynchronization>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d001      	beq.n	8003724 <MX_TIM3_Init+0x98>
 8003720:	f7ff fd2a 	bl	8003178 <Error_Handler>
 8003724:	bf00      	nop
 8003726:	3730      	adds	r7, #48	; 0x30
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	20001c3c 	.word	0x20001c3c
 8003730:	40000400 	.word	0x40000400

08003734 <MX_TIM4_Init>:
 8003734:	b580      	push	{r7, lr}
 8003736:	b08c      	sub	sp, #48	; 0x30
 8003738:	af00      	add	r7, sp, #0
 800373a:	f107 030c 	add.w	r3, r7, #12
 800373e:	2224      	movs	r2, #36	; 0x24
 8003740:	2100      	movs	r1, #0
 8003742:	4618      	mov	r0, r3
 8003744:	f004 f970 	bl	8007a28 <memset>
 8003748:	1d3b      	adds	r3, r7, #4
 800374a:	2200      	movs	r2, #0
 800374c:	601a      	str	r2, [r3, #0]
 800374e:	605a      	str	r2, [r3, #4]
 8003750:	4b20      	ldr	r3, [pc, #128]	; (80037d4 <MX_TIM4_Init+0xa0>)
 8003752:	4a21      	ldr	r2, [pc, #132]	; (80037d8 <MX_TIM4_Init+0xa4>)
 8003754:	601a      	str	r2, [r3, #0]
 8003756:	4b1f      	ldr	r3, [pc, #124]	; (80037d4 <MX_TIM4_Init+0xa0>)
 8003758:	2200      	movs	r2, #0
 800375a:	605a      	str	r2, [r3, #4]
 800375c:	4b1d      	ldr	r3, [pc, #116]	; (80037d4 <MX_TIM4_Init+0xa0>)
 800375e:	2200      	movs	r2, #0
 8003760:	609a      	str	r2, [r3, #8]
 8003762:	4b1c      	ldr	r3, [pc, #112]	; (80037d4 <MX_TIM4_Init+0xa0>)
 8003764:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003768:	60da      	str	r2, [r3, #12]
 800376a:	4b1a      	ldr	r3, [pc, #104]	; (80037d4 <MX_TIM4_Init+0xa0>)
 800376c:	2200      	movs	r2, #0
 800376e:	611a      	str	r2, [r3, #16]
 8003770:	4b18      	ldr	r3, [pc, #96]	; (80037d4 <MX_TIM4_Init+0xa0>)
 8003772:	2280      	movs	r2, #128	; 0x80
 8003774:	619a      	str	r2, [r3, #24]
 8003776:	2303      	movs	r3, #3
 8003778:	60fb      	str	r3, [r7, #12]
 800377a:	2300      	movs	r3, #0
 800377c:	613b      	str	r3, [r7, #16]
 800377e:	2301      	movs	r3, #1
 8003780:	617b      	str	r3, [r7, #20]
 8003782:	2300      	movs	r3, #0
 8003784:	61bb      	str	r3, [r7, #24]
 8003786:	230a      	movs	r3, #10
 8003788:	61fb      	str	r3, [r7, #28]
 800378a:	2300      	movs	r3, #0
 800378c:	623b      	str	r3, [r7, #32]
 800378e:	2301      	movs	r3, #1
 8003790:	627b      	str	r3, [r7, #36]	; 0x24
 8003792:	2300      	movs	r3, #0
 8003794:	62bb      	str	r3, [r7, #40]	; 0x28
 8003796:	2300      	movs	r3, #0
 8003798:	62fb      	str	r3, [r7, #44]	; 0x2c
 800379a:	f107 030c 	add.w	r3, r7, #12
 800379e:	4619      	mov	r1, r3
 80037a0:	480c      	ldr	r0, [pc, #48]	; (80037d4 <MX_TIM4_Init+0xa0>)
 80037a2:	f002 f903 	bl	80059ac <HAL_TIM_Encoder_Init>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d001      	beq.n	80037b0 <MX_TIM4_Init+0x7c>
 80037ac:	f7ff fce4 	bl	8003178 <Error_Handler>
 80037b0:	2300      	movs	r3, #0
 80037b2:	607b      	str	r3, [r7, #4]
 80037b4:	2300      	movs	r3, #0
 80037b6:	60bb      	str	r3, [r7, #8]
 80037b8:	1d3b      	adds	r3, r7, #4
 80037ba:	4619      	mov	r1, r3
 80037bc:	4805      	ldr	r0, [pc, #20]	; (80037d4 <MX_TIM4_Init+0xa0>)
 80037be:	f002 fcf1 	bl	80061a4 <HAL_TIMEx_MasterConfigSynchronization>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d001      	beq.n	80037cc <MX_TIM4_Init+0x98>
 80037c8:	f7ff fcd6 	bl	8003178 <Error_Handler>
 80037cc:	bf00      	nop
 80037ce:	3730      	adds	r7, #48	; 0x30
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	20001c84 	.word	0x20001c84
 80037d8:	40000800 	.word	0x40000800

080037dc <HAL_TIM_PWM_MspInit>:
 80037dc:	b480      	push	{r7}
 80037de:	b085      	sub	sp, #20
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037ec:	d10b      	bne.n	8003806 <HAL_TIM_PWM_MspInit+0x2a>
 80037ee:	4b08      	ldr	r3, [pc, #32]	; (8003810 <HAL_TIM_PWM_MspInit+0x34>)
 80037f0:	69db      	ldr	r3, [r3, #28]
 80037f2:	4a07      	ldr	r2, [pc, #28]	; (8003810 <HAL_TIM_PWM_MspInit+0x34>)
 80037f4:	f043 0301 	orr.w	r3, r3, #1
 80037f8:	61d3      	str	r3, [r2, #28]
 80037fa:	4b05      	ldr	r3, [pc, #20]	; (8003810 <HAL_TIM_PWM_MspInit+0x34>)
 80037fc:	69db      	ldr	r3, [r3, #28]
 80037fe:	f003 0301 	and.w	r3, r3, #1
 8003802:	60fb      	str	r3, [r7, #12]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	bf00      	nop
 8003808:	3714      	adds	r7, #20
 800380a:	46bd      	mov	sp, r7
 800380c:	bc80      	pop	{r7}
 800380e:	4770      	bx	lr
 8003810:	40021000 	.word	0x40021000

08003814 <HAL_TIM_Encoder_MspInit>:
 8003814:	b580      	push	{r7, lr}
 8003816:	b08a      	sub	sp, #40	; 0x28
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	f107 0318 	add.w	r3, r7, #24
 8003820:	2200      	movs	r2, #0
 8003822:	601a      	str	r2, [r3, #0]
 8003824:	605a      	str	r2, [r3, #4]
 8003826:	609a      	str	r2, [r3, #8]
 8003828:	60da      	str	r2, [r3, #12]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a30      	ldr	r2, [pc, #192]	; (80038f0 <HAL_TIM_Encoder_MspInit+0xdc>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d124      	bne.n	800387e <HAL_TIM_Encoder_MspInit+0x6a>
 8003834:	4b2f      	ldr	r3, [pc, #188]	; (80038f4 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003836:	69db      	ldr	r3, [r3, #28]
 8003838:	4a2e      	ldr	r2, [pc, #184]	; (80038f4 <HAL_TIM_Encoder_MspInit+0xe0>)
 800383a:	f043 0302 	orr.w	r3, r3, #2
 800383e:	61d3      	str	r3, [r2, #28]
 8003840:	4b2c      	ldr	r3, [pc, #176]	; (80038f4 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003842:	69db      	ldr	r3, [r3, #28]
 8003844:	f003 0302 	and.w	r3, r3, #2
 8003848:	617b      	str	r3, [r7, #20]
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	4b29      	ldr	r3, [pc, #164]	; (80038f4 <HAL_TIM_Encoder_MspInit+0xe0>)
 800384e:	699b      	ldr	r3, [r3, #24]
 8003850:	4a28      	ldr	r2, [pc, #160]	; (80038f4 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003852:	f043 0304 	orr.w	r3, r3, #4
 8003856:	6193      	str	r3, [r2, #24]
 8003858:	4b26      	ldr	r3, [pc, #152]	; (80038f4 <HAL_TIM_Encoder_MspInit+0xe0>)
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	f003 0304 	and.w	r3, r3, #4
 8003860:	613b      	str	r3, [r7, #16]
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	23c0      	movs	r3, #192	; 0xc0
 8003866:	61bb      	str	r3, [r7, #24]
 8003868:	2300      	movs	r3, #0
 800386a:	61fb      	str	r3, [r7, #28]
 800386c:	2300      	movs	r3, #0
 800386e:	623b      	str	r3, [r7, #32]
 8003870:	f107 0318 	add.w	r3, r7, #24
 8003874:	4619      	mov	r1, r3
 8003876:	4820      	ldr	r0, [pc, #128]	; (80038f8 <HAL_TIM_Encoder_MspInit+0xe4>)
 8003878:	f001 f922 	bl	8004ac0 <HAL_GPIO_Init>
 800387c:	e034      	b.n	80038e8 <HAL_TIM_Encoder_MspInit+0xd4>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a1e      	ldr	r2, [pc, #120]	; (80038fc <HAL_TIM_Encoder_MspInit+0xe8>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d12f      	bne.n	80038e8 <HAL_TIM_Encoder_MspInit+0xd4>
 8003888:	4b1a      	ldr	r3, [pc, #104]	; (80038f4 <HAL_TIM_Encoder_MspInit+0xe0>)
 800388a:	69db      	ldr	r3, [r3, #28]
 800388c:	4a19      	ldr	r2, [pc, #100]	; (80038f4 <HAL_TIM_Encoder_MspInit+0xe0>)
 800388e:	f043 0304 	orr.w	r3, r3, #4
 8003892:	61d3      	str	r3, [r2, #28]
 8003894:	4b17      	ldr	r3, [pc, #92]	; (80038f4 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003896:	69db      	ldr	r3, [r3, #28]
 8003898:	f003 0304 	and.w	r3, r3, #4
 800389c:	60fb      	str	r3, [r7, #12]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	4b14      	ldr	r3, [pc, #80]	; (80038f4 <HAL_TIM_Encoder_MspInit+0xe0>)
 80038a2:	699b      	ldr	r3, [r3, #24]
 80038a4:	4a13      	ldr	r2, [pc, #76]	; (80038f4 <HAL_TIM_Encoder_MspInit+0xe0>)
 80038a6:	f043 0308 	orr.w	r3, r3, #8
 80038aa:	6193      	str	r3, [r2, #24]
 80038ac:	4b11      	ldr	r3, [pc, #68]	; (80038f4 <HAL_TIM_Encoder_MspInit+0xe0>)
 80038ae:	699b      	ldr	r3, [r3, #24]
 80038b0:	f003 0308 	and.w	r3, r3, #8
 80038b4:	60bb      	str	r3, [r7, #8]
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	2340      	movs	r3, #64	; 0x40
 80038ba:	61bb      	str	r3, [r7, #24]
 80038bc:	2300      	movs	r3, #0
 80038be:	61fb      	str	r3, [r7, #28]
 80038c0:	2300      	movs	r3, #0
 80038c2:	623b      	str	r3, [r7, #32]
 80038c4:	f107 0318 	add.w	r3, r7, #24
 80038c8:	4619      	mov	r1, r3
 80038ca:	480d      	ldr	r0, [pc, #52]	; (8003900 <HAL_TIM_Encoder_MspInit+0xec>)
 80038cc:	f001 f8f8 	bl	8004ac0 <HAL_GPIO_Init>
 80038d0:	2380      	movs	r3, #128	; 0x80
 80038d2:	61bb      	str	r3, [r7, #24]
 80038d4:	2300      	movs	r3, #0
 80038d6:	61fb      	str	r3, [r7, #28]
 80038d8:	2300      	movs	r3, #0
 80038da:	623b      	str	r3, [r7, #32]
 80038dc:	f107 0318 	add.w	r3, r7, #24
 80038e0:	4619      	mov	r1, r3
 80038e2:	4807      	ldr	r0, [pc, #28]	; (8003900 <HAL_TIM_Encoder_MspInit+0xec>)
 80038e4:	f001 f8ec 	bl	8004ac0 <HAL_GPIO_Init>
 80038e8:	bf00      	nop
 80038ea:	3728      	adds	r7, #40	; 0x28
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	40000400 	.word	0x40000400
 80038f4:	40021000 	.word	0x40021000
 80038f8:	40010800 	.word	0x40010800
 80038fc:	40000800 	.word	0x40000800
 8003900:	40010c00 	.word	0x40010c00

08003904 <HAL_TIM_MspPostInit>:
 8003904:	b580      	push	{r7, lr}
 8003906:	b088      	sub	sp, #32
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	f107 030c 	add.w	r3, r7, #12
 8003910:	2200      	movs	r2, #0
 8003912:	601a      	str	r2, [r3, #0]
 8003914:	605a      	str	r2, [r3, #4]
 8003916:	609a      	str	r2, [r3, #8]
 8003918:	60da      	str	r2, [r3, #12]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003922:	d12a      	bne.n	800397a <HAL_TIM_MspPostInit+0x76>
 8003924:	4b17      	ldr	r3, [pc, #92]	; (8003984 <HAL_TIM_MspPostInit+0x80>)
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	4a16      	ldr	r2, [pc, #88]	; (8003984 <HAL_TIM_MspPostInit+0x80>)
 800392a:	f043 0308 	orr.w	r3, r3, #8
 800392e:	6193      	str	r3, [r2, #24]
 8003930:	4b14      	ldr	r3, [pc, #80]	; (8003984 <HAL_TIM_MspPostInit+0x80>)
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	f003 0308 	and.w	r3, r3, #8
 8003938:	60bb      	str	r3, [r7, #8]
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003940:	60fb      	str	r3, [r7, #12]
 8003942:	2302      	movs	r3, #2
 8003944:	613b      	str	r3, [r7, #16]
 8003946:	2302      	movs	r3, #2
 8003948:	61bb      	str	r3, [r7, #24]
 800394a:	f107 030c 	add.w	r3, r7, #12
 800394e:	4619      	mov	r1, r3
 8003950:	480d      	ldr	r0, [pc, #52]	; (8003988 <HAL_TIM_MspPostInit+0x84>)
 8003952:	f001 f8b5 	bl	8004ac0 <HAL_GPIO_Init>
 8003956:	4b0d      	ldr	r3, [pc, #52]	; (800398c <HAL_TIM_MspPostInit+0x88>)
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	61fb      	str	r3, [r7, #28]
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003962:	61fb      	str	r3, [r7, #28]
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800396a:	61fb      	str	r3, [r7, #28]
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003972:	61fb      	str	r3, [r7, #28]
 8003974:	4a05      	ldr	r2, [pc, #20]	; (800398c <HAL_TIM_MspPostInit+0x88>)
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	6053      	str	r3, [r2, #4]
 800397a:	bf00      	nop
 800397c:	3720      	adds	r7, #32
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	40021000 	.word	0x40021000
 8003988:	40010c00 	.word	0x40010c00
 800398c:	40010000 	.word	0x40010000

08003990 <MX_USART1_UART_Init>:
 8003990:	b580      	push	{r7, lr}
 8003992:	af00      	add	r7, sp, #0
 8003994:	4b11      	ldr	r3, [pc, #68]	; (80039dc <MX_USART1_UART_Init+0x4c>)
 8003996:	4a12      	ldr	r2, [pc, #72]	; (80039e0 <MX_USART1_UART_Init+0x50>)
 8003998:	601a      	str	r2, [r3, #0]
 800399a:	4b10      	ldr	r3, [pc, #64]	; (80039dc <MX_USART1_UART_Init+0x4c>)
 800399c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80039a0:	605a      	str	r2, [r3, #4]
 80039a2:	4b0e      	ldr	r3, [pc, #56]	; (80039dc <MX_USART1_UART_Init+0x4c>)
 80039a4:	2200      	movs	r2, #0
 80039a6:	609a      	str	r2, [r3, #8]
 80039a8:	4b0c      	ldr	r3, [pc, #48]	; (80039dc <MX_USART1_UART_Init+0x4c>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	60da      	str	r2, [r3, #12]
 80039ae:	4b0b      	ldr	r3, [pc, #44]	; (80039dc <MX_USART1_UART_Init+0x4c>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	611a      	str	r2, [r3, #16]
 80039b4:	4b09      	ldr	r3, [pc, #36]	; (80039dc <MX_USART1_UART_Init+0x4c>)
 80039b6:	220c      	movs	r2, #12
 80039b8:	615a      	str	r2, [r3, #20]
 80039ba:	4b08      	ldr	r3, [pc, #32]	; (80039dc <MX_USART1_UART_Init+0x4c>)
 80039bc:	2200      	movs	r2, #0
 80039be:	619a      	str	r2, [r3, #24]
 80039c0:	4b06      	ldr	r3, [pc, #24]	; (80039dc <MX_USART1_UART_Init+0x4c>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	61da      	str	r2, [r3, #28]
 80039c6:	4805      	ldr	r0, [pc, #20]	; (80039dc <MX_USART1_UART_Init+0x4c>)
 80039c8:	f002 fc4a 	bl	8006260 <HAL_UART_Init>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d001      	beq.n	80039d6 <MX_USART1_UART_Init+0x46>
 80039d2:	f7ff fbd1 	bl	8003178 <Error_Handler>
 80039d6:	bf00      	nop
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	20001ccc 	.word	0x20001ccc
 80039e0:	40013800 	.word	0x40013800

080039e4 <HAL_UART_MspInit>:
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b088      	sub	sp, #32
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	f107 0310 	add.w	r3, r7, #16
 80039f0:	2200      	movs	r2, #0
 80039f2:	601a      	str	r2, [r3, #0]
 80039f4:	605a      	str	r2, [r3, #4]
 80039f6:	609a      	str	r2, [r3, #8]
 80039f8:	60da      	str	r2, [r3, #12]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a20      	ldr	r2, [pc, #128]	; (8003a80 <HAL_UART_MspInit+0x9c>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d139      	bne.n	8003a78 <HAL_UART_MspInit+0x94>
 8003a04:	4b1f      	ldr	r3, [pc, #124]	; (8003a84 <HAL_UART_MspInit+0xa0>)
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	4a1e      	ldr	r2, [pc, #120]	; (8003a84 <HAL_UART_MspInit+0xa0>)
 8003a0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a0e:	6193      	str	r3, [r2, #24]
 8003a10:	4b1c      	ldr	r3, [pc, #112]	; (8003a84 <HAL_UART_MspInit+0xa0>)
 8003a12:	699b      	ldr	r3, [r3, #24]
 8003a14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a18:	60fb      	str	r3, [r7, #12]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	4b19      	ldr	r3, [pc, #100]	; (8003a84 <HAL_UART_MspInit+0xa0>)
 8003a1e:	699b      	ldr	r3, [r3, #24]
 8003a20:	4a18      	ldr	r2, [pc, #96]	; (8003a84 <HAL_UART_MspInit+0xa0>)
 8003a22:	f043 0304 	orr.w	r3, r3, #4
 8003a26:	6193      	str	r3, [r2, #24]
 8003a28:	4b16      	ldr	r3, [pc, #88]	; (8003a84 <HAL_UART_MspInit+0xa0>)
 8003a2a:	699b      	ldr	r3, [r3, #24]
 8003a2c:	f003 0304 	and.w	r3, r3, #4
 8003a30:	60bb      	str	r3, [r7, #8]
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a38:	613b      	str	r3, [r7, #16]
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	617b      	str	r3, [r7, #20]
 8003a3e:	2303      	movs	r3, #3
 8003a40:	61fb      	str	r3, [r7, #28]
 8003a42:	f107 0310 	add.w	r3, r7, #16
 8003a46:	4619      	mov	r1, r3
 8003a48:	480f      	ldr	r0, [pc, #60]	; (8003a88 <HAL_UART_MspInit+0xa4>)
 8003a4a:	f001 f839 	bl	8004ac0 <HAL_GPIO_Init>
 8003a4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a52:	613b      	str	r3, [r7, #16]
 8003a54:	2300      	movs	r3, #0
 8003a56:	617b      	str	r3, [r7, #20]
 8003a58:	2300      	movs	r3, #0
 8003a5a:	61bb      	str	r3, [r7, #24]
 8003a5c:	f107 0310 	add.w	r3, r7, #16
 8003a60:	4619      	mov	r1, r3
 8003a62:	4809      	ldr	r0, [pc, #36]	; (8003a88 <HAL_UART_MspInit+0xa4>)
 8003a64:	f001 f82c 	bl	8004ac0 <HAL_GPIO_Init>
 8003a68:	2200      	movs	r2, #0
 8003a6a:	2100      	movs	r1, #0
 8003a6c:	2025      	movs	r0, #37	; 0x25
 8003a6e:	f000 fd52 	bl	8004516 <HAL_NVIC_SetPriority>
 8003a72:	2025      	movs	r0, #37	; 0x25
 8003a74:	f000 fd6b 	bl	800454e <HAL_NVIC_EnableIRQ>
 8003a78:	bf00      	nop
 8003a7a:	3720      	adds	r7, #32
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	40013800 	.word	0x40013800
 8003a84:	40021000 	.word	0x40021000
 8003a88:	40010800 	.word	0x40010800

08003a8c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
ldr r0, =_sdata
 8003a8c:	480c      	ldr	r0, [pc, #48]	; (8003ac0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003a8e:	490d      	ldr	r1, [pc, #52]	; (8003ac4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003a90:	4a0d      	ldr	r2, [pc, #52]	; (8003ac8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003a92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a94:	e002      	b.n	8003a9c <LoopCopyDataInit>

08003a96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a9a:	3304      	adds	r3, #4

08003a9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003aa0:	d3f9      	bcc.n	8003a96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003aa2:	4a0a      	ldr	r2, [pc, #40]	; (8003acc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003aa4:	4c0a      	ldr	r4, [pc, #40]	; (8003ad0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003aa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003aa8:	e001      	b.n	8003aae <LoopFillZerobss>

08003aaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003aaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003aac:	3204      	adds	r2, #4

08003aae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003aae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ab0:	d3fb      	bcc.n	8003aaa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003ab2:	f7ff fd81 	bl	80035b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003ab6:	f003 ff93 	bl	80079e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003aba:	f7fd fc81 	bl	80013c0 <main>
  bx lr
 8003abe:	4770      	bx	lr
ldr r0, =_sdata
 8003ac0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ac4:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8003ac8:	08007ab0 	.word	0x08007ab0
  ldr r2, =_sbss
 8003acc:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 8003ad0:	20001d14 	.word	0x20001d14

08003ad4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003ad4:	e7fe      	b.n	8003ad4 <ADC1_2_IRQHandler>
	...

08003ad8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003adc:	4b08      	ldr	r3, [pc, #32]	; (8003b00 <HAL_Init+0x28>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a07      	ldr	r2, [pc, #28]	; (8003b00 <HAL_Init+0x28>)
 8003ae2:	f043 0310 	orr.w	r3, r3, #16
 8003ae6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ae8:	2003      	movs	r0, #3
 8003aea:	f000 fd09 	bl	8004500 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003aee:	200f      	movs	r0, #15
 8003af0:	f000 f808 	bl	8003b04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003af4:	f7ff fcf2 	bl	80034dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003af8:	2300      	movs	r3, #0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	40022000 	.word	0x40022000

08003b04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b0c:	4b12      	ldr	r3, [pc, #72]	; (8003b58 <HAL_InitTick+0x54>)
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	4b12      	ldr	r3, [pc, #72]	; (8003b5c <HAL_InitTick+0x58>)
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	4619      	mov	r1, r3
 8003b16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b22:	4618      	mov	r0, r3
 8003b24:	f000 fd21 	bl	800456a <HAL_SYSTICK_Config>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d001      	beq.n	8003b32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e00e      	b.n	8003b50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2b0f      	cmp	r3, #15
 8003b36:	d80a      	bhi.n	8003b4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b38:	2200      	movs	r2, #0
 8003b3a:	6879      	ldr	r1, [r7, #4]
 8003b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b40:	f000 fce9 	bl	8004516 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b44:	4a06      	ldr	r2, [pc, #24]	; (8003b60 <HAL_InitTick+0x5c>)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	e000      	b.n	8003b50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3708      	adds	r7, #8
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	2000003c 	.word	0x2000003c
 8003b5c:	20000044 	.word	0x20000044
 8003b60:	20000040 	.word	0x20000040

08003b64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b64:	b480      	push	{r7}
 8003b66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b68:	4b05      	ldr	r3, [pc, #20]	; (8003b80 <HAL_IncTick+0x1c>)
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	4b05      	ldr	r3, [pc, #20]	; (8003b84 <HAL_IncTick+0x20>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4413      	add	r3, r2
 8003b74:	4a03      	ldr	r2, [pc, #12]	; (8003b84 <HAL_IncTick+0x20>)
 8003b76:	6013      	str	r3, [r2, #0]
}
 8003b78:	bf00      	nop
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bc80      	pop	{r7}
 8003b7e:	4770      	bx	lr
 8003b80:	20000044 	.word	0x20000044
 8003b84:	20001d10 	.word	0x20001d10

08003b88 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	af00      	add	r7, sp, #0
  return uwTick;
 8003b8c:	4b02      	ldr	r3, [pc, #8]	; (8003b98 <HAL_GetTick+0x10>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bc80      	pop	{r7}
 8003b96:	4770      	bx	lr
 8003b98:	20001d10 	.word	0x20001d10

08003b9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ba4:	f7ff fff0 	bl	8003b88 <HAL_GetTick>
 8003ba8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb4:	d005      	beq.n	8003bc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003bb6:	4b0a      	ldr	r3, [pc, #40]	; (8003be0 <HAL_Delay+0x44>)
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	461a      	mov	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003bc2:	bf00      	nop
 8003bc4:	f7ff ffe0 	bl	8003b88 <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	68fa      	ldr	r2, [r7, #12]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d8f7      	bhi.n	8003bc4 <HAL_Delay+0x28>
  {
  }
}
 8003bd4:	bf00      	nop
 8003bd6:	bf00      	nop
 8003bd8:	3710      	adds	r7, #16
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	20000044 	.word	0x20000044

08003be4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b086      	sub	sp, #24
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bec:	2300      	movs	r3, #0
 8003bee:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d101      	bne.n	8003c06 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e0be      	b.n	8003d84 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d109      	bne.n	8003c28 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f7fd fab4 	bl	8001190 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f000 faf5 	bl	8004218 <ADC_ConversionStop_Disable>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c36:	f003 0310 	and.w	r3, r3, #16
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	f040 8099 	bne.w	8003d72 <HAL_ADC_Init+0x18e>
 8003c40:	7dfb      	ldrb	r3, [r7, #23]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	f040 8095 	bne.w	8003d72 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c4c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003c50:	f023 0302 	bic.w	r3, r3, #2
 8003c54:	f043 0202 	orr.w	r2, r3, #2
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003c64:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	7b1b      	ldrb	r3, [r3, #12]
 8003c6a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003c6c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003c6e:	68ba      	ldr	r2, [r7, #8]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c7c:	d003      	beq.n	8003c86 <HAL_ADC_Init+0xa2>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d102      	bne.n	8003c8c <HAL_ADC_Init+0xa8>
 8003c86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c8a:	e000      	b.n	8003c8e <HAL_ADC_Init+0xaa>
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	7d1b      	ldrb	r3, [r3, #20]
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d119      	bne.n	8003cd0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	7b1b      	ldrb	r3, [r3, #12]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d109      	bne.n	8003cb8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	3b01      	subs	r3, #1
 8003caa:	035a      	lsls	r2, r3, #13
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003cb4:	613b      	str	r3, [r7, #16]
 8003cb6:	e00b      	b.n	8003cd0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cbc:	f043 0220 	orr.w	r2, r3, #32
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc8:	f043 0201 	orr.w	r2, r3, #1
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	693a      	ldr	r2, [r7, #16]
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	689a      	ldr	r2, [r3, #8]
 8003cea:	4b28      	ldr	r3, [pc, #160]	; (8003d8c <HAL_ADC_Init+0x1a8>)
 8003cec:	4013      	ands	r3, r2
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	6812      	ldr	r2, [r2, #0]
 8003cf2:	68b9      	ldr	r1, [r7, #8]
 8003cf4:	430b      	orrs	r3, r1
 8003cf6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d00:	d003      	beq.n	8003d0a <HAL_ADC_Init+0x126>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d104      	bne.n	8003d14 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	051b      	lsls	r3, r3, #20
 8003d12:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68fa      	ldr	r2, [r7, #12]
 8003d24:	430a      	orrs	r2, r1
 8003d26:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	689a      	ldr	r2, [r3, #8]
 8003d2e:	4b18      	ldr	r3, [pc, #96]	; (8003d90 <HAL_ADC_Init+0x1ac>)
 8003d30:	4013      	ands	r3, r2
 8003d32:	68ba      	ldr	r2, [r7, #8]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d10b      	bne.n	8003d50 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d42:	f023 0303 	bic.w	r3, r3, #3
 8003d46:	f043 0201 	orr.w	r2, r3, #1
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003d4e:	e018      	b.n	8003d82 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d54:	f023 0312 	bic.w	r3, r3, #18
 8003d58:	f043 0210 	orr.w	r2, r3, #16
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d64:	f043 0201 	orr.w	r2, r3, #1
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003d70:	e007      	b.n	8003d82 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d76:	f043 0210 	orr.w	r2, r3, #16
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003d82:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3718      	adds	r7, #24
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	ffe1f7fd 	.word	0xffe1f7fd
 8003d90:	ff1f0efe 	.word	0xff1f0efe

08003d94 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b086      	sub	sp, #24
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	60b9      	str	r1, [r7, #8]
 8003d9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003da0:	2300      	movs	r3, #0
 8003da2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a64      	ldr	r2, [pc, #400]	; (8003f3c <HAL_ADC_Start_DMA+0x1a8>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d004      	beq.n	8003db8 <HAL_ADC_Start_DMA+0x24>
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a63      	ldr	r2, [pc, #396]	; (8003f40 <HAL_ADC_Start_DMA+0x1ac>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d106      	bne.n	8003dc6 <HAL_ADC_Start_DMA+0x32>
 8003db8:	4b60      	ldr	r3, [pc, #384]	; (8003f3c <HAL_ADC_Start_DMA+0x1a8>)
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	f040 80b3 	bne.w	8003f2c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d101      	bne.n	8003dd4 <HAL_ADC_Start_DMA+0x40>
 8003dd0:	2302      	movs	r3, #2
 8003dd2:	e0ae      	b.n	8003f32 <HAL_ADC_Start_DMA+0x19e>
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003ddc:	68f8      	ldr	r0, [r7, #12]
 8003dde:	f000 f9c1 	bl	8004164 <ADC_Enable>
 8003de2:	4603      	mov	r3, r0
 8003de4:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003de6:	7dfb      	ldrb	r3, [r7, #23]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	f040 809a 	bne.w	8003f22 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003df6:	f023 0301 	bic.w	r3, r3, #1
 8003dfa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a4e      	ldr	r2, [pc, #312]	; (8003f40 <HAL_ADC_Start_DMA+0x1ac>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d105      	bne.n	8003e18 <HAL_ADC_Start_DMA+0x84>
 8003e0c:	4b4b      	ldr	r3, [pc, #300]	; (8003f3c <HAL_ADC_Start_DMA+0x1a8>)
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d115      	bne.n	8003e44 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e1c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d026      	beq.n	8003e80 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e36:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003e3a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003e42:	e01d      	b.n	8003e80 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e48:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a39      	ldr	r2, [pc, #228]	; (8003f3c <HAL_ADC_Start_DMA+0x1a8>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d004      	beq.n	8003e64 <HAL_ADC_Start_DMA+0xd0>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a38      	ldr	r2, [pc, #224]	; (8003f40 <HAL_ADC_Start_DMA+0x1ac>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d10d      	bne.n	8003e80 <HAL_ADC_Start_DMA+0xec>
 8003e64:	4b35      	ldr	r3, [pc, #212]	; (8003f3c <HAL_ADC_Start_DMA+0x1a8>)
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d007      	beq.n	8003e80 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e74:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003e78:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d006      	beq.n	8003e9a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e90:	f023 0206 	bic.w	r2, r3, #6
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	62da      	str	r2, [r3, #44]	; 0x2c
 8003e98:	e002      	b.n	8003ea0 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6a1b      	ldr	r3, [r3, #32]
 8003eac:	4a25      	ldr	r2, [pc, #148]	; (8003f44 <HAL_ADC_Start_DMA+0x1b0>)
 8003eae:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6a1b      	ldr	r3, [r3, #32]
 8003eb4:	4a24      	ldr	r2, [pc, #144]	; (8003f48 <HAL_ADC_Start_DMA+0x1b4>)
 8003eb6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6a1b      	ldr	r3, [r3, #32]
 8003ebc:	4a23      	ldr	r2, [pc, #140]	; (8003f4c <HAL_ADC_Start_DMA+0x1b8>)
 8003ebe:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f06f 0202 	mvn.w	r2, #2
 8003ec8:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	689a      	ldr	r2, [r3, #8]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ed8:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6a18      	ldr	r0, [r3, #32]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	334c      	adds	r3, #76	; 0x4c
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	68ba      	ldr	r2, [r7, #8]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f000 fba5 	bl	8004638 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003ef8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003efc:	d108      	bne.n	8003f10 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	689a      	ldr	r2, [r3, #8]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003f0c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003f0e:	e00f      	b.n	8003f30 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	689a      	ldr	r2, [r3, #8]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003f1e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003f20:	e006      	b.n	8003f30 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8003f2a:	e001      	b.n	8003f30 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003f30:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3718      	adds	r7, #24
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	40012400 	.word	0x40012400
 8003f40:	40012800 	.word	0x40012800
 8003f44:	0800429b 	.word	0x0800429b
 8003f48:	08004317 	.word	0x08004317
 8003f4c:	08004333 	.word	0x08004333

08003f50 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003f58:	bf00      	nop
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bc80      	pop	{r7}
 8003f60:	4770      	bx	lr

08003f62 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003f62:	b480      	push	{r7}
 8003f64:	b083      	sub	sp, #12
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003f6a:	bf00      	nop
 8003f6c:	370c      	adds	r7, #12
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bc80      	pop	{r7}
 8003f72:	4770      	bx	lr

08003f74 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003f74:	b480      	push	{r7}
 8003f76:	b085      	sub	sp, #20
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003f82:	2300      	movs	r3, #0
 8003f84:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d101      	bne.n	8003f94 <HAL_ADC_ConfigChannel+0x20>
 8003f90:	2302      	movs	r3, #2
 8003f92:	e0dc      	b.n	800414e <HAL_ADC_ConfigChannel+0x1da>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	2b06      	cmp	r3, #6
 8003fa2:	d81c      	bhi.n	8003fde <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	685a      	ldr	r2, [r3, #4]
 8003fae:	4613      	mov	r3, r2
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	4413      	add	r3, r2
 8003fb4:	3b05      	subs	r3, #5
 8003fb6:	221f      	movs	r2, #31
 8003fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbc:	43db      	mvns	r3, r3
 8003fbe:	4019      	ands	r1, r3
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	6818      	ldr	r0, [r3, #0]
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	685a      	ldr	r2, [r3, #4]
 8003fc8:	4613      	mov	r3, r2
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	4413      	add	r3, r2
 8003fce:	3b05      	subs	r3, #5
 8003fd0:	fa00 f203 	lsl.w	r2, r0, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	430a      	orrs	r2, r1
 8003fda:	635a      	str	r2, [r3, #52]	; 0x34
 8003fdc:	e03c      	b.n	8004058 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	2b0c      	cmp	r3, #12
 8003fe4:	d81c      	bhi.n	8004020 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	685a      	ldr	r2, [r3, #4]
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	4413      	add	r3, r2
 8003ff6:	3b23      	subs	r3, #35	; 0x23
 8003ff8:	221f      	movs	r2, #31
 8003ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffe:	43db      	mvns	r3, r3
 8004000:	4019      	ands	r1, r3
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	6818      	ldr	r0, [r3, #0]
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	685a      	ldr	r2, [r3, #4]
 800400a:	4613      	mov	r3, r2
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	4413      	add	r3, r2
 8004010:	3b23      	subs	r3, #35	; 0x23
 8004012:	fa00 f203 	lsl.w	r2, r0, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	430a      	orrs	r2, r1
 800401c:	631a      	str	r2, [r3, #48]	; 0x30
 800401e:	e01b      	b.n	8004058 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	685a      	ldr	r2, [r3, #4]
 800402a:	4613      	mov	r3, r2
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	4413      	add	r3, r2
 8004030:	3b41      	subs	r3, #65	; 0x41
 8004032:	221f      	movs	r2, #31
 8004034:	fa02 f303 	lsl.w	r3, r2, r3
 8004038:	43db      	mvns	r3, r3
 800403a:	4019      	ands	r1, r3
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	6818      	ldr	r0, [r3, #0]
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	685a      	ldr	r2, [r3, #4]
 8004044:	4613      	mov	r3, r2
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	4413      	add	r3, r2
 800404a:	3b41      	subs	r3, #65	; 0x41
 800404c:	fa00 f203 	lsl.w	r2, r0, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	430a      	orrs	r2, r1
 8004056:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	2b09      	cmp	r3, #9
 800405e:	d91c      	bls.n	800409a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	68d9      	ldr	r1, [r3, #12]
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	4613      	mov	r3, r2
 800406c:	005b      	lsls	r3, r3, #1
 800406e:	4413      	add	r3, r2
 8004070:	3b1e      	subs	r3, #30
 8004072:	2207      	movs	r2, #7
 8004074:	fa02 f303 	lsl.w	r3, r2, r3
 8004078:	43db      	mvns	r3, r3
 800407a:	4019      	ands	r1, r3
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	6898      	ldr	r0, [r3, #8]
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	4613      	mov	r3, r2
 8004086:	005b      	lsls	r3, r3, #1
 8004088:	4413      	add	r3, r2
 800408a:	3b1e      	subs	r3, #30
 800408c:	fa00 f203 	lsl.w	r2, r0, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	430a      	orrs	r2, r1
 8004096:	60da      	str	r2, [r3, #12]
 8004098:	e019      	b.n	80040ce <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	6919      	ldr	r1, [r3, #16]
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	4613      	mov	r3, r2
 80040a6:	005b      	lsls	r3, r3, #1
 80040a8:	4413      	add	r3, r2
 80040aa:	2207      	movs	r2, #7
 80040ac:	fa02 f303 	lsl.w	r3, r2, r3
 80040b0:	43db      	mvns	r3, r3
 80040b2:	4019      	ands	r1, r3
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	6898      	ldr	r0, [r3, #8]
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	4613      	mov	r3, r2
 80040be:	005b      	lsls	r3, r3, #1
 80040c0:	4413      	add	r3, r2
 80040c2:	fa00 f203 	lsl.w	r2, r0, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	430a      	orrs	r2, r1
 80040cc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2b10      	cmp	r3, #16
 80040d4:	d003      	beq.n	80040de <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80040da:	2b11      	cmp	r3, #17
 80040dc:	d132      	bne.n	8004144 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a1d      	ldr	r2, [pc, #116]	; (8004158 <HAL_ADC_ConfigChannel+0x1e4>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d125      	bne.n	8004134 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d126      	bne.n	8004144 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	689a      	ldr	r2, [r3, #8]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004104:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2b10      	cmp	r3, #16
 800410c:	d11a      	bne.n	8004144 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800410e:	4b13      	ldr	r3, [pc, #76]	; (800415c <HAL_ADC_ConfigChannel+0x1e8>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a13      	ldr	r2, [pc, #76]	; (8004160 <HAL_ADC_ConfigChannel+0x1ec>)
 8004114:	fba2 2303 	umull	r2, r3, r2, r3
 8004118:	0c9a      	lsrs	r2, r3, #18
 800411a:	4613      	mov	r3, r2
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	4413      	add	r3, r2
 8004120:	005b      	lsls	r3, r3, #1
 8004122:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004124:	e002      	b.n	800412c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	3b01      	subs	r3, #1
 800412a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1f9      	bne.n	8004126 <HAL_ADC_ConfigChannel+0x1b2>
 8004132:	e007      	b.n	8004144 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004138:	f043 0220 	orr.w	r2, r3, #32
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800414c:	7bfb      	ldrb	r3, [r7, #15]
}
 800414e:	4618      	mov	r0, r3
 8004150:	3714      	adds	r7, #20
 8004152:	46bd      	mov	sp, r7
 8004154:	bc80      	pop	{r7}
 8004156:	4770      	bx	lr
 8004158:	40012400 	.word	0x40012400
 800415c:	2000003c 	.word	0x2000003c
 8004160:	431bde83 	.word	0x431bde83

08004164 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800416c:	2300      	movs	r3, #0
 800416e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8004170:	2300      	movs	r3, #0
 8004172:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	f003 0301 	and.w	r3, r3, #1
 800417e:	2b01      	cmp	r3, #1
 8004180:	d040      	beq.n	8004204 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	689a      	ldr	r2, [r3, #8]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f042 0201 	orr.w	r2, r2, #1
 8004190:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004192:	4b1f      	ldr	r3, [pc, #124]	; (8004210 <ADC_Enable+0xac>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a1f      	ldr	r2, [pc, #124]	; (8004214 <ADC_Enable+0xb0>)
 8004198:	fba2 2303 	umull	r2, r3, r2, r3
 800419c:	0c9b      	lsrs	r3, r3, #18
 800419e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80041a0:	e002      	b.n	80041a8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	3b01      	subs	r3, #1
 80041a6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d1f9      	bne.n	80041a2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80041ae:	f7ff fceb 	bl	8003b88 <HAL_GetTick>
 80041b2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80041b4:	e01f      	b.n	80041f6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80041b6:	f7ff fce7 	bl	8003b88 <HAL_GetTick>
 80041ba:	4602      	mov	r2, r0
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d918      	bls.n	80041f6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f003 0301 	and.w	r3, r3, #1
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d011      	beq.n	80041f6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d6:	f043 0210 	orr.w	r2, r3, #16
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e2:	f043 0201 	orr.w	r2, r3, #1
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e007      	b.n	8004206 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	f003 0301 	and.w	r3, r3, #1
 8004200:	2b01      	cmp	r3, #1
 8004202:	d1d8      	bne.n	80041b6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	3710      	adds	r7, #16
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	2000003c 	.word	0x2000003c
 8004214:	431bde83 	.word	0x431bde83

08004218 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004220:	2300      	movs	r3, #0
 8004222:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f003 0301 	and.w	r3, r3, #1
 800422e:	2b01      	cmp	r3, #1
 8004230:	d12e      	bne.n	8004290 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	689a      	ldr	r2, [r3, #8]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f022 0201 	bic.w	r2, r2, #1
 8004240:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004242:	f7ff fca1 	bl	8003b88 <HAL_GetTick>
 8004246:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004248:	e01b      	b.n	8004282 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800424a:	f7ff fc9d 	bl	8003b88 <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	2b02      	cmp	r3, #2
 8004256:	d914      	bls.n	8004282 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f003 0301 	and.w	r3, r3, #1
 8004262:	2b01      	cmp	r3, #1
 8004264:	d10d      	bne.n	8004282 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800426a:	f043 0210 	orr.w	r2, r3, #16
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004276:	f043 0201 	orr.w	r2, r3, #1
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e007      	b.n	8004292 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	f003 0301 	and.w	r3, r3, #1
 800428c:	2b01      	cmp	r3, #1
 800428e:	d0dc      	beq.n	800424a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	3710      	adds	r7, #16
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}

0800429a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800429a:	b580      	push	{r7, lr}
 800429c:	b084      	sub	sp, #16
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a6:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d127      	bne.n	8004304 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80042ca:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80042ce:	d115      	bne.n	80042fc <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d111      	bne.n	80042fc <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d105      	bne.n	80042fc <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f4:	f043 0201 	orr.w	r2, r3, #1
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80042fc:	68f8      	ldr	r0, [r7, #12]
 80042fe:	f7fe fd39 	bl	8002d74 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8004302:	e004      	b.n	800430e <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6a1b      	ldr	r3, [r3, #32]
 8004308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	4798      	blx	r3
}
 800430e:	bf00      	nop
 8004310:	3710      	adds	r7, #16
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}

08004316 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004316:	b580      	push	{r7, lr}
 8004318:	b084      	sub	sp, #16
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004322:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004324:	68f8      	ldr	r0, [r7, #12]
 8004326:	f7ff fe13 	bl	8003f50 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800432a:	bf00      	nop
 800432c:	3710      	adds	r7, #16
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}

08004332 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004332:	b580      	push	{r7, lr}
 8004334:	b084      	sub	sp, #16
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004344:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004350:	f043 0204 	orr.w	r2, r3, #4
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	f7ff fe02 	bl	8003f62 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800435e:	bf00      	nop
 8004360:	3710      	adds	r7, #16
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
	...

08004368 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004368:	b480      	push	{r7}
 800436a:	b085      	sub	sp, #20
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f003 0307 	and.w	r3, r3, #7
 8004376:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004378:	4b0c      	ldr	r3, [pc, #48]	; (80043ac <__NVIC_SetPriorityGrouping+0x44>)
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800437e:	68ba      	ldr	r2, [r7, #8]
 8004380:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004384:	4013      	ands	r3, r2
 8004386:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004390:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004394:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004398:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800439a:	4a04      	ldr	r2, [pc, #16]	; (80043ac <__NVIC_SetPriorityGrouping+0x44>)
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	60d3      	str	r3, [r2, #12]
}
 80043a0:	bf00      	nop
 80043a2:	3714      	adds	r7, #20
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bc80      	pop	{r7}
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	e000ed00 	.word	0xe000ed00

080043b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80043b0:	b480      	push	{r7}
 80043b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80043b4:	4b04      	ldr	r3, [pc, #16]	; (80043c8 <__NVIC_GetPriorityGrouping+0x18>)
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	0a1b      	lsrs	r3, r3, #8
 80043ba:	f003 0307 	and.w	r3, r3, #7
}
 80043be:	4618      	mov	r0, r3
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bc80      	pop	{r7}
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	e000ed00 	.word	0xe000ed00

080043cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	4603      	mov	r3, r0
 80043d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	db0b      	blt.n	80043f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043de:	79fb      	ldrb	r3, [r7, #7]
 80043e0:	f003 021f 	and.w	r2, r3, #31
 80043e4:	4906      	ldr	r1, [pc, #24]	; (8004400 <__NVIC_EnableIRQ+0x34>)
 80043e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ea:	095b      	lsrs	r3, r3, #5
 80043ec:	2001      	movs	r0, #1
 80043ee:	fa00 f202 	lsl.w	r2, r0, r2
 80043f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80043f6:	bf00      	nop
 80043f8:	370c      	adds	r7, #12
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bc80      	pop	{r7}
 80043fe:	4770      	bx	lr
 8004400:	e000e100 	.word	0xe000e100

08004404 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	4603      	mov	r3, r0
 800440c:	6039      	str	r1, [r7, #0]
 800440e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004414:	2b00      	cmp	r3, #0
 8004416:	db0a      	blt.n	800442e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	b2da      	uxtb	r2, r3
 800441c:	490c      	ldr	r1, [pc, #48]	; (8004450 <__NVIC_SetPriority+0x4c>)
 800441e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004422:	0112      	lsls	r2, r2, #4
 8004424:	b2d2      	uxtb	r2, r2
 8004426:	440b      	add	r3, r1
 8004428:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800442c:	e00a      	b.n	8004444 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	b2da      	uxtb	r2, r3
 8004432:	4908      	ldr	r1, [pc, #32]	; (8004454 <__NVIC_SetPriority+0x50>)
 8004434:	79fb      	ldrb	r3, [r7, #7]
 8004436:	f003 030f 	and.w	r3, r3, #15
 800443a:	3b04      	subs	r3, #4
 800443c:	0112      	lsls	r2, r2, #4
 800443e:	b2d2      	uxtb	r2, r2
 8004440:	440b      	add	r3, r1
 8004442:	761a      	strb	r2, [r3, #24]
}
 8004444:	bf00      	nop
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	bc80      	pop	{r7}
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	e000e100 	.word	0xe000e100
 8004454:	e000ed00 	.word	0xe000ed00

08004458 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004458:	b480      	push	{r7}
 800445a:	b089      	sub	sp, #36	; 0x24
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f003 0307 	and.w	r3, r3, #7
 800446a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	f1c3 0307 	rsb	r3, r3, #7
 8004472:	2b04      	cmp	r3, #4
 8004474:	bf28      	it	cs
 8004476:	2304      	movcs	r3, #4
 8004478:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	3304      	adds	r3, #4
 800447e:	2b06      	cmp	r3, #6
 8004480:	d902      	bls.n	8004488 <NVIC_EncodePriority+0x30>
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	3b03      	subs	r3, #3
 8004486:	e000      	b.n	800448a <NVIC_EncodePriority+0x32>
 8004488:	2300      	movs	r3, #0
 800448a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800448c:	f04f 32ff 	mov.w	r2, #4294967295
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	fa02 f303 	lsl.w	r3, r2, r3
 8004496:	43da      	mvns	r2, r3
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	401a      	ands	r2, r3
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044a0:	f04f 31ff 	mov.w	r1, #4294967295
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	fa01 f303 	lsl.w	r3, r1, r3
 80044aa:	43d9      	mvns	r1, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044b0:	4313      	orrs	r3, r2
         );
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3724      	adds	r7, #36	; 0x24
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bc80      	pop	{r7}
 80044ba:	4770      	bx	lr

080044bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	3b01      	subs	r3, #1
 80044c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80044cc:	d301      	bcc.n	80044d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80044ce:	2301      	movs	r3, #1
 80044d0:	e00f      	b.n	80044f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80044d2:	4a0a      	ldr	r2, [pc, #40]	; (80044fc <SysTick_Config+0x40>)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	3b01      	subs	r3, #1
 80044d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80044da:	210f      	movs	r1, #15
 80044dc:	f04f 30ff 	mov.w	r0, #4294967295
 80044e0:	f7ff ff90 	bl	8004404 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80044e4:	4b05      	ldr	r3, [pc, #20]	; (80044fc <SysTick_Config+0x40>)
 80044e6:	2200      	movs	r2, #0
 80044e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80044ea:	4b04      	ldr	r3, [pc, #16]	; (80044fc <SysTick_Config+0x40>)
 80044ec:	2207      	movs	r2, #7
 80044ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80044f0:	2300      	movs	r3, #0
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3708      	adds	r7, #8
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	e000e010 	.word	0xe000e010

08004500 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b082      	sub	sp, #8
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f7ff ff2d 	bl	8004368 <__NVIC_SetPriorityGrouping>
}
 800450e:	bf00      	nop
 8004510:	3708      	adds	r7, #8
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}

08004516 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004516:	b580      	push	{r7, lr}
 8004518:	b086      	sub	sp, #24
 800451a:	af00      	add	r7, sp, #0
 800451c:	4603      	mov	r3, r0
 800451e:	60b9      	str	r1, [r7, #8]
 8004520:	607a      	str	r2, [r7, #4]
 8004522:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004524:	2300      	movs	r3, #0
 8004526:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004528:	f7ff ff42 	bl	80043b0 <__NVIC_GetPriorityGrouping>
 800452c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	68b9      	ldr	r1, [r7, #8]
 8004532:	6978      	ldr	r0, [r7, #20]
 8004534:	f7ff ff90 	bl	8004458 <NVIC_EncodePriority>
 8004538:	4602      	mov	r2, r0
 800453a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800453e:	4611      	mov	r1, r2
 8004540:	4618      	mov	r0, r3
 8004542:	f7ff ff5f 	bl	8004404 <__NVIC_SetPriority>
}
 8004546:	bf00      	nop
 8004548:	3718      	adds	r7, #24
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}

0800454e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800454e:	b580      	push	{r7, lr}
 8004550:	b082      	sub	sp, #8
 8004552:	af00      	add	r7, sp, #0
 8004554:	4603      	mov	r3, r0
 8004556:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800455c:	4618      	mov	r0, r3
 800455e:	f7ff ff35 	bl	80043cc <__NVIC_EnableIRQ>
}
 8004562:	bf00      	nop
 8004564:	3708      	adds	r7, #8
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}

0800456a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800456a:	b580      	push	{r7, lr}
 800456c:	b082      	sub	sp, #8
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f7ff ffa2 	bl	80044bc <SysTick_Config>
 8004578:	4603      	mov	r3, r0
}
 800457a:	4618      	mov	r0, r3
 800457c:	3708      	adds	r7, #8
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
	...

08004584 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004584:	b480      	push	{r7}
 8004586:	b085      	sub	sp, #20
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800458c:	2300      	movs	r3, #0
 800458e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d101      	bne.n	800459a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e043      	b.n	8004622 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	461a      	mov	r2, r3
 80045a0:	4b22      	ldr	r3, [pc, #136]	; (800462c <HAL_DMA_Init+0xa8>)
 80045a2:	4413      	add	r3, r2
 80045a4:	4a22      	ldr	r2, [pc, #136]	; (8004630 <HAL_DMA_Init+0xac>)
 80045a6:	fba2 2303 	umull	r2, r3, r2, r3
 80045aa:	091b      	lsrs	r3, r3, #4
 80045ac:	009a      	lsls	r2, r3, #2
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a1f      	ldr	r2, [pc, #124]	; (8004634 <HAL_DMA_Init+0xb0>)
 80045b6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2202      	movs	r2, #2
 80045bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80045ce:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80045d2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80045dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	695b      	ldr	r3, [r3, #20]
 80045ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	69db      	ldr	r3, [r3, #28]
 80045fa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80045fc:	68fa      	ldr	r2, [r7, #12]
 80045fe:	4313      	orrs	r3, r2
 8004600:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68fa      	ldr	r2, [r7, #12]
 8004608:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004620:	2300      	movs	r3, #0
}
 8004622:	4618      	mov	r0, r3
 8004624:	3714      	adds	r7, #20
 8004626:	46bd      	mov	sp, r7
 8004628:	bc80      	pop	{r7}
 800462a:	4770      	bx	lr
 800462c:	bffdfff8 	.word	0xbffdfff8
 8004630:	cccccccd 	.word	0xcccccccd
 8004634:	40020000 	.word	0x40020000

08004638 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b086      	sub	sp, #24
 800463c:	af00      	add	r7, sp, #0
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	607a      	str	r2, [r7, #4]
 8004644:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004646:	2300      	movs	r3, #0
 8004648:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004650:	2b01      	cmp	r3, #1
 8004652:	d101      	bne.n	8004658 <HAL_DMA_Start_IT+0x20>
 8004654:	2302      	movs	r3, #2
 8004656:	e04a      	b.n	80046ee <HAL_DMA_Start_IT+0xb6>
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004666:	2b01      	cmp	r3, #1
 8004668:	d13a      	bne.n	80046e0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2202      	movs	r2, #2
 800466e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2200      	movs	r2, #0
 8004676:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f022 0201 	bic.w	r2, r2, #1
 8004686:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	68b9      	ldr	r1, [r7, #8]
 800468e:	68f8      	ldr	r0, [r7, #12]
 8004690:	f000 f9e8 	bl	8004a64 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004698:	2b00      	cmp	r3, #0
 800469a:	d008      	beq.n	80046ae <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f042 020e 	orr.w	r2, r2, #14
 80046aa:	601a      	str	r2, [r3, #0]
 80046ac:	e00f      	b.n	80046ce <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f022 0204 	bic.w	r2, r2, #4
 80046bc:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f042 020a 	orr.w	r2, r2, #10
 80046cc:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f042 0201 	orr.w	r2, r2, #1
 80046dc:	601a      	str	r2, [r3, #0]
 80046de:	e005      	b.n	80046ec <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80046e8:	2302      	movs	r3, #2
 80046ea:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80046ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3718      	adds	r7, #24
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}

080046f6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80046f6:	b480      	push	{r7}
 80046f8:	b085      	sub	sp, #20
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046fe:	2300      	movs	r3, #0
 8004700:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004708:	2b02      	cmp	r3, #2
 800470a:	d008      	beq.n	800471e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2204      	movs	r2, #4
 8004710:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e020      	b.n	8004760 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f022 020e 	bic.w	r2, r2, #14
 800472c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f022 0201 	bic.w	r2, r2, #1
 800473c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004746:	2101      	movs	r1, #1
 8004748:	fa01 f202 	lsl.w	r2, r1, r2
 800474c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2201      	movs	r2, #1
 8004752:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800475e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004760:	4618      	mov	r0, r3
 8004762:	3714      	adds	r7, #20
 8004764:	46bd      	mov	sp, r7
 8004766:	bc80      	pop	{r7}
 8004768:	4770      	bx	lr
	...

0800476c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004774:	2300      	movs	r3, #0
 8004776:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800477e:	2b02      	cmp	r3, #2
 8004780:	d005      	beq.n	800478e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2204      	movs	r2, #4
 8004786:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	73fb      	strb	r3, [r7, #15]
 800478c:	e051      	b.n	8004832 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f022 020e 	bic.w	r2, r2, #14
 800479c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f022 0201 	bic.w	r2, r2, #1
 80047ac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a22      	ldr	r2, [pc, #136]	; (800483c <HAL_DMA_Abort_IT+0xd0>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d029      	beq.n	800480c <HAL_DMA_Abort_IT+0xa0>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a20      	ldr	r2, [pc, #128]	; (8004840 <HAL_DMA_Abort_IT+0xd4>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d022      	beq.n	8004808 <HAL_DMA_Abort_IT+0x9c>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a1f      	ldr	r2, [pc, #124]	; (8004844 <HAL_DMA_Abort_IT+0xd8>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d01a      	beq.n	8004802 <HAL_DMA_Abort_IT+0x96>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a1d      	ldr	r2, [pc, #116]	; (8004848 <HAL_DMA_Abort_IT+0xdc>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d012      	beq.n	80047fc <HAL_DMA_Abort_IT+0x90>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a1c      	ldr	r2, [pc, #112]	; (800484c <HAL_DMA_Abort_IT+0xe0>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d00a      	beq.n	80047f6 <HAL_DMA_Abort_IT+0x8a>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a1a      	ldr	r2, [pc, #104]	; (8004850 <HAL_DMA_Abort_IT+0xe4>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d102      	bne.n	80047f0 <HAL_DMA_Abort_IT+0x84>
 80047ea:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80047ee:	e00e      	b.n	800480e <HAL_DMA_Abort_IT+0xa2>
 80047f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80047f4:	e00b      	b.n	800480e <HAL_DMA_Abort_IT+0xa2>
 80047f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80047fa:	e008      	b.n	800480e <HAL_DMA_Abort_IT+0xa2>
 80047fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004800:	e005      	b.n	800480e <HAL_DMA_Abort_IT+0xa2>
 8004802:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004806:	e002      	b.n	800480e <HAL_DMA_Abort_IT+0xa2>
 8004808:	2310      	movs	r3, #16
 800480a:	e000      	b.n	800480e <HAL_DMA_Abort_IT+0xa2>
 800480c:	2301      	movs	r3, #1
 800480e:	4a11      	ldr	r2, [pc, #68]	; (8004854 <HAL_DMA_Abort_IT+0xe8>)
 8004810:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2201      	movs	r2, #1
 8004816:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004826:	2b00      	cmp	r3, #0
 8004828:	d003      	beq.n	8004832 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	4798      	blx	r3
    } 
  }
  return status;
 8004832:	7bfb      	ldrb	r3, [r7, #15]
}
 8004834:	4618      	mov	r0, r3
 8004836:	3710      	adds	r7, #16
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}
 800483c:	40020008 	.word	0x40020008
 8004840:	4002001c 	.word	0x4002001c
 8004844:	40020030 	.word	0x40020030
 8004848:	40020044 	.word	0x40020044
 800484c:	40020058 	.word	0x40020058
 8004850:	4002006c 	.word	0x4002006c
 8004854:	40020000 	.word	0x40020000

08004858 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004874:	2204      	movs	r2, #4
 8004876:	409a      	lsls	r2, r3
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	4013      	ands	r3, r2
 800487c:	2b00      	cmp	r3, #0
 800487e:	d04f      	beq.n	8004920 <HAL_DMA_IRQHandler+0xc8>
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	f003 0304 	and.w	r3, r3, #4
 8004886:	2b00      	cmp	r3, #0
 8004888:	d04a      	beq.n	8004920 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0320 	and.w	r3, r3, #32
 8004894:	2b00      	cmp	r3, #0
 8004896:	d107      	bne.n	80048a8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f022 0204 	bic.w	r2, r2, #4
 80048a6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a66      	ldr	r2, [pc, #408]	; (8004a48 <HAL_DMA_IRQHandler+0x1f0>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d029      	beq.n	8004906 <HAL_DMA_IRQHandler+0xae>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a65      	ldr	r2, [pc, #404]	; (8004a4c <HAL_DMA_IRQHandler+0x1f4>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d022      	beq.n	8004902 <HAL_DMA_IRQHandler+0xaa>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a63      	ldr	r2, [pc, #396]	; (8004a50 <HAL_DMA_IRQHandler+0x1f8>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d01a      	beq.n	80048fc <HAL_DMA_IRQHandler+0xa4>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a62      	ldr	r2, [pc, #392]	; (8004a54 <HAL_DMA_IRQHandler+0x1fc>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d012      	beq.n	80048f6 <HAL_DMA_IRQHandler+0x9e>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a60      	ldr	r2, [pc, #384]	; (8004a58 <HAL_DMA_IRQHandler+0x200>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d00a      	beq.n	80048f0 <HAL_DMA_IRQHandler+0x98>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a5f      	ldr	r2, [pc, #380]	; (8004a5c <HAL_DMA_IRQHandler+0x204>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d102      	bne.n	80048ea <HAL_DMA_IRQHandler+0x92>
 80048e4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80048e8:	e00e      	b.n	8004908 <HAL_DMA_IRQHandler+0xb0>
 80048ea:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80048ee:	e00b      	b.n	8004908 <HAL_DMA_IRQHandler+0xb0>
 80048f0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80048f4:	e008      	b.n	8004908 <HAL_DMA_IRQHandler+0xb0>
 80048f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80048fa:	e005      	b.n	8004908 <HAL_DMA_IRQHandler+0xb0>
 80048fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004900:	e002      	b.n	8004908 <HAL_DMA_IRQHandler+0xb0>
 8004902:	2340      	movs	r3, #64	; 0x40
 8004904:	e000      	b.n	8004908 <HAL_DMA_IRQHandler+0xb0>
 8004906:	2304      	movs	r3, #4
 8004908:	4a55      	ldr	r2, [pc, #340]	; (8004a60 <HAL_DMA_IRQHandler+0x208>)
 800490a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004910:	2b00      	cmp	r3, #0
 8004912:	f000 8094 	beq.w	8004a3e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800491e:	e08e      	b.n	8004a3e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004924:	2202      	movs	r2, #2
 8004926:	409a      	lsls	r2, r3
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	4013      	ands	r3, r2
 800492c:	2b00      	cmp	r3, #0
 800492e:	d056      	beq.n	80049de <HAL_DMA_IRQHandler+0x186>
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	f003 0302 	and.w	r3, r3, #2
 8004936:	2b00      	cmp	r3, #0
 8004938:	d051      	beq.n	80049de <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 0320 	and.w	r3, r3, #32
 8004944:	2b00      	cmp	r3, #0
 8004946:	d10b      	bne.n	8004960 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f022 020a 	bic.w	r2, r2, #10
 8004956:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a38      	ldr	r2, [pc, #224]	; (8004a48 <HAL_DMA_IRQHandler+0x1f0>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d029      	beq.n	80049be <HAL_DMA_IRQHandler+0x166>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a37      	ldr	r2, [pc, #220]	; (8004a4c <HAL_DMA_IRQHandler+0x1f4>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d022      	beq.n	80049ba <HAL_DMA_IRQHandler+0x162>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a35      	ldr	r2, [pc, #212]	; (8004a50 <HAL_DMA_IRQHandler+0x1f8>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d01a      	beq.n	80049b4 <HAL_DMA_IRQHandler+0x15c>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a34      	ldr	r2, [pc, #208]	; (8004a54 <HAL_DMA_IRQHandler+0x1fc>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d012      	beq.n	80049ae <HAL_DMA_IRQHandler+0x156>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a32      	ldr	r2, [pc, #200]	; (8004a58 <HAL_DMA_IRQHandler+0x200>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d00a      	beq.n	80049a8 <HAL_DMA_IRQHandler+0x150>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a31      	ldr	r2, [pc, #196]	; (8004a5c <HAL_DMA_IRQHandler+0x204>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d102      	bne.n	80049a2 <HAL_DMA_IRQHandler+0x14a>
 800499c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80049a0:	e00e      	b.n	80049c0 <HAL_DMA_IRQHandler+0x168>
 80049a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80049a6:	e00b      	b.n	80049c0 <HAL_DMA_IRQHandler+0x168>
 80049a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80049ac:	e008      	b.n	80049c0 <HAL_DMA_IRQHandler+0x168>
 80049ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80049b2:	e005      	b.n	80049c0 <HAL_DMA_IRQHandler+0x168>
 80049b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80049b8:	e002      	b.n	80049c0 <HAL_DMA_IRQHandler+0x168>
 80049ba:	2320      	movs	r3, #32
 80049bc:	e000      	b.n	80049c0 <HAL_DMA_IRQHandler+0x168>
 80049be:	2302      	movs	r3, #2
 80049c0:	4a27      	ldr	r2, [pc, #156]	; (8004a60 <HAL_DMA_IRQHandler+0x208>)
 80049c2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d034      	beq.n	8004a3e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80049dc:	e02f      	b.n	8004a3e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e2:	2208      	movs	r2, #8
 80049e4:	409a      	lsls	r2, r3
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	4013      	ands	r3, r2
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d028      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x1e8>
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	f003 0308 	and.w	r3, r3, #8
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d023      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f022 020e 	bic.w	r2, r2, #14
 8004a06:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a10:	2101      	movs	r1, #1
 8004a12:	fa01 f202 	lsl.w	r2, r1, r2
 8004a16:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2201      	movs	r2, #1
 8004a22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d004      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	4798      	blx	r3
    }
  }
  return;
 8004a3e:	bf00      	nop
 8004a40:	bf00      	nop
}
 8004a42:	3710      	adds	r7, #16
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	40020008 	.word	0x40020008
 8004a4c:	4002001c 	.word	0x4002001c
 8004a50:	40020030 	.word	0x40020030
 8004a54:	40020044 	.word	0x40020044
 8004a58:	40020058 	.word	0x40020058
 8004a5c:	4002006c 	.word	0x4002006c
 8004a60:	40020000 	.word	0x40020000

08004a64 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b085      	sub	sp, #20
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	60b9      	str	r1, [r7, #8]
 8004a6e:	607a      	str	r2, [r7, #4]
 8004a70:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a7a:	2101      	movs	r1, #1
 8004a7c:	fa01 f202 	lsl.w	r2, r1, r2
 8004a80:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	683a      	ldr	r2, [r7, #0]
 8004a88:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	2b10      	cmp	r3, #16
 8004a90:	d108      	bne.n	8004aa4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	68ba      	ldr	r2, [r7, #8]
 8004aa0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004aa2:	e007      	b.n	8004ab4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68ba      	ldr	r2, [r7, #8]
 8004aaa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	60da      	str	r2, [r3, #12]
}
 8004ab4:	bf00      	nop
 8004ab6:	3714      	adds	r7, #20
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bc80      	pop	{r7}
 8004abc:	4770      	bx	lr
	...

08004ac0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b08b      	sub	sp, #44	; 0x2c
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004aca:	2300      	movs	r3, #0
 8004acc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ad2:	e169      	b.n	8004da8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8004adc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	69fa      	ldr	r2, [r7, #28]
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004ae8:	69ba      	ldr	r2, [r7, #24]
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	f040 8158 	bne.w	8004da2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	4a9a      	ldr	r2, [pc, #616]	; (8004d60 <HAL_GPIO_Init+0x2a0>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d05e      	beq.n	8004bba <HAL_GPIO_Init+0xfa>
 8004afc:	4a98      	ldr	r2, [pc, #608]	; (8004d60 <HAL_GPIO_Init+0x2a0>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d875      	bhi.n	8004bee <HAL_GPIO_Init+0x12e>
 8004b02:	4a98      	ldr	r2, [pc, #608]	; (8004d64 <HAL_GPIO_Init+0x2a4>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d058      	beq.n	8004bba <HAL_GPIO_Init+0xfa>
 8004b08:	4a96      	ldr	r2, [pc, #600]	; (8004d64 <HAL_GPIO_Init+0x2a4>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d86f      	bhi.n	8004bee <HAL_GPIO_Init+0x12e>
 8004b0e:	4a96      	ldr	r2, [pc, #600]	; (8004d68 <HAL_GPIO_Init+0x2a8>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d052      	beq.n	8004bba <HAL_GPIO_Init+0xfa>
 8004b14:	4a94      	ldr	r2, [pc, #592]	; (8004d68 <HAL_GPIO_Init+0x2a8>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d869      	bhi.n	8004bee <HAL_GPIO_Init+0x12e>
 8004b1a:	4a94      	ldr	r2, [pc, #592]	; (8004d6c <HAL_GPIO_Init+0x2ac>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d04c      	beq.n	8004bba <HAL_GPIO_Init+0xfa>
 8004b20:	4a92      	ldr	r2, [pc, #584]	; (8004d6c <HAL_GPIO_Init+0x2ac>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d863      	bhi.n	8004bee <HAL_GPIO_Init+0x12e>
 8004b26:	4a92      	ldr	r2, [pc, #584]	; (8004d70 <HAL_GPIO_Init+0x2b0>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d046      	beq.n	8004bba <HAL_GPIO_Init+0xfa>
 8004b2c:	4a90      	ldr	r2, [pc, #576]	; (8004d70 <HAL_GPIO_Init+0x2b0>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d85d      	bhi.n	8004bee <HAL_GPIO_Init+0x12e>
 8004b32:	2b12      	cmp	r3, #18
 8004b34:	d82a      	bhi.n	8004b8c <HAL_GPIO_Init+0xcc>
 8004b36:	2b12      	cmp	r3, #18
 8004b38:	d859      	bhi.n	8004bee <HAL_GPIO_Init+0x12e>
 8004b3a:	a201      	add	r2, pc, #4	; (adr r2, 8004b40 <HAL_GPIO_Init+0x80>)
 8004b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b40:	08004bbb 	.word	0x08004bbb
 8004b44:	08004b95 	.word	0x08004b95
 8004b48:	08004ba7 	.word	0x08004ba7
 8004b4c:	08004be9 	.word	0x08004be9
 8004b50:	08004bef 	.word	0x08004bef
 8004b54:	08004bef 	.word	0x08004bef
 8004b58:	08004bef 	.word	0x08004bef
 8004b5c:	08004bef 	.word	0x08004bef
 8004b60:	08004bef 	.word	0x08004bef
 8004b64:	08004bef 	.word	0x08004bef
 8004b68:	08004bef 	.word	0x08004bef
 8004b6c:	08004bef 	.word	0x08004bef
 8004b70:	08004bef 	.word	0x08004bef
 8004b74:	08004bef 	.word	0x08004bef
 8004b78:	08004bef 	.word	0x08004bef
 8004b7c:	08004bef 	.word	0x08004bef
 8004b80:	08004bef 	.word	0x08004bef
 8004b84:	08004b9d 	.word	0x08004b9d
 8004b88:	08004bb1 	.word	0x08004bb1
 8004b8c:	4a79      	ldr	r2, [pc, #484]	; (8004d74 <HAL_GPIO_Init+0x2b4>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d013      	beq.n	8004bba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004b92:	e02c      	b.n	8004bee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	623b      	str	r3, [r7, #32]
          break;
 8004b9a:	e029      	b.n	8004bf0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	3304      	adds	r3, #4
 8004ba2:	623b      	str	r3, [r7, #32]
          break;
 8004ba4:	e024      	b.n	8004bf0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	3308      	adds	r3, #8
 8004bac:	623b      	str	r3, [r7, #32]
          break;
 8004bae:	e01f      	b.n	8004bf0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	330c      	adds	r3, #12
 8004bb6:	623b      	str	r3, [r7, #32]
          break;
 8004bb8:	e01a      	b.n	8004bf0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d102      	bne.n	8004bc8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004bc2:	2304      	movs	r3, #4
 8004bc4:	623b      	str	r3, [r7, #32]
          break;
 8004bc6:	e013      	b.n	8004bf0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d105      	bne.n	8004bdc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004bd0:	2308      	movs	r3, #8
 8004bd2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	69fa      	ldr	r2, [r7, #28]
 8004bd8:	611a      	str	r2, [r3, #16]
          break;
 8004bda:	e009      	b.n	8004bf0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004bdc:	2308      	movs	r3, #8
 8004bde:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	69fa      	ldr	r2, [r7, #28]
 8004be4:	615a      	str	r2, [r3, #20]
          break;
 8004be6:	e003      	b.n	8004bf0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004be8:	2300      	movs	r3, #0
 8004bea:	623b      	str	r3, [r7, #32]
          break;
 8004bec:	e000      	b.n	8004bf0 <HAL_GPIO_Init+0x130>
          break;
 8004bee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004bf0:	69bb      	ldr	r3, [r7, #24]
 8004bf2:	2bff      	cmp	r3, #255	; 0xff
 8004bf4:	d801      	bhi.n	8004bfa <HAL_GPIO_Init+0x13a>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	e001      	b.n	8004bfe <HAL_GPIO_Init+0x13e>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	3304      	adds	r3, #4
 8004bfe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	2bff      	cmp	r3, #255	; 0xff
 8004c04:	d802      	bhi.n	8004c0c <HAL_GPIO_Init+0x14c>
 8004c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	e002      	b.n	8004c12 <HAL_GPIO_Init+0x152>
 8004c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0e:	3b08      	subs	r3, #8
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	210f      	movs	r1, #15
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c20:	43db      	mvns	r3, r3
 8004c22:	401a      	ands	r2, r3
 8004c24:	6a39      	ldr	r1, [r7, #32]
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	fa01 f303 	lsl.w	r3, r1, r3
 8004c2c:	431a      	orrs	r2, r3
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	f000 80b1 	beq.w	8004da2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004c40:	4b4d      	ldr	r3, [pc, #308]	; (8004d78 <HAL_GPIO_Init+0x2b8>)
 8004c42:	699b      	ldr	r3, [r3, #24]
 8004c44:	4a4c      	ldr	r2, [pc, #304]	; (8004d78 <HAL_GPIO_Init+0x2b8>)
 8004c46:	f043 0301 	orr.w	r3, r3, #1
 8004c4a:	6193      	str	r3, [r2, #24]
 8004c4c:	4b4a      	ldr	r3, [pc, #296]	; (8004d78 <HAL_GPIO_Init+0x2b8>)
 8004c4e:	699b      	ldr	r3, [r3, #24]
 8004c50:	f003 0301 	and.w	r3, r3, #1
 8004c54:	60bb      	str	r3, [r7, #8]
 8004c56:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004c58:	4a48      	ldr	r2, [pc, #288]	; (8004d7c <HAL_GPIO_Init+0x2bc>)
 8004c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5c:	089b      	lsrs	r3, r3, #2
 8004c5e:	3302      	adds	r3, #2
 8004c60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c64:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c68:	f003 0303 	and.w	r3, r3, #3
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	220f      	movs	r2, #15
 8004c70:	fa02 f303 	lsl.w	r3, r2, r3
 8004c74:	43db      	mvns	r3, r3
 8004c76:	68fa      	ldr	r2, [r7, #12]
 8004c78:	4013      	ands	r3, r2
 8004c7a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4a40      	ldr	r2, [pc, #256]	; (8004d80 <HAL_GPIO_Init+0x2c0>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d013      	beq.n	8004cac <HAL_GPIO_Init+0x1ec>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4a3f      	ldr	r2, [pc, #252]	; (8004d84 <HAL_GPIO_Init+0x2c4>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d00d      	beq.n	8004ca8 <HAL_GPIO_Init+0x1e8>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	4a3e      	ldr	r2, [pc, #248]	; (8004d88 <HAL_GPIO_Init+0x2c8>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d007      	beq.n	8004ca4 <HAL_GPIO_Init+0x1e4>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4a3d      	ldr	r2, [pc, #244]	; (8004d8c <HAL_GPIO_Init+0x2cc>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d101      	bne.n	8004ca0 <HAL_GPIO_Init+0x1e0>
 8004c9c:	2303      	movs	r3, #3
 8004c9e:	e006      	b.n	8004cae <HAL_GPIO_Init+0x1ee>
 8004ca0:	2304      	movs	r3, #4
 8004ca2:	e004      	b.n	8004cae <HAL_GPIO_Init+0x1ee>
 8004ca4:	2302      	movs	r3, #2
 8004ca6:	e002      	b.n	8004cae <HAL_GPIO_Init+0x1ee>
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e000      	b.n	8004cae <HAL_GPIO_Init+0x1ee>
 8004cac:	2300      	movs	r3, #0
 8004cae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cb0:	f002 0203 	and.w	r2, r2, #3
 8004cb4:	0092      	lsls	r2, r2, #2
 8004cb6:	4093      	lsls	r3, r2
 8004cb8:	68fa      	ldr	r2, [r7, #12]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004cbe:	492f      	ldr	r1, [pc, #188]	; (8004d7c <HAL_GPIO_Init+0x2bc>)
 8004cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc2:	089b      	lsrs	r3, r3, #2
 8004cc4:	3302      	adds	r3, #2
 8004cc6:	68fa      	ldr	r2, [r7, #12]
 8004cc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d006      	beq.n	8004ce6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004cd8:	4b2d      	ldr	r3, [pc, #180]	; (8004d90 <HAL_GPIO_Init+0x2d0>)
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	492c      	ldr	r1, [pc, #176]	; (8004d90 <HAL_GPIO_Init+0x2d0>)
 8004cde:	69bb      	ldr	r3, [r7, #24]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	600b      	str	r3, [r1, #0]
 8004ce4:	e006      	b.n	8004cf4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004ce6:	4b2a      	ldr	r3, [pc, #168]	; (8004d90 <HAL_GPIO_Init+0x2d0>)
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	43db      	mvns	r3, r3
 8004cee:	4928      	ldr	r1, [pc, #160]	; (8004d90 <HAL_GPIO_Init+0x2d0>)
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d006      	beq.n	8004d0e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004d00:	4b23      	ldr	r3, [pc, #140]	; (8004d90 <HAL_GPIO_Init+0x2d0>)
 8004d02:	685a      	ldr	r2, [r3, #4]
 8004d04:	4922      	ldr	r1, [pc, #136]	; (8004d90 <HAL_GPIO_Init+0x2d0>)
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	604b      	str	r3, [r1, #4]
 8004d0c:	e006      	b.n	8004d1c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004d0e:	4b20      	ldr	r3, [pc, #128]	; (8004d90 <HAL_GPIO_Init+0x2d0>)
 8004d10:	685a      	ldr	r2, [r3, #4]
 8004d12:	69bb      	ldr	r3, [r7, #24]
 8004d14:	43db      	mvns	r3, r3
 8004d16:	491e      	ldr	r1, [pc, #120]	; (8004d90 <HAL_GPIO_Init+0x2d0>)
 8004d18:	4013      	ands	r3, r2
 8004d1a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d006      	beq.n	8004d36 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004d28:	4b19      	ldr	r3, [pc, #100]	; (8004d90 <HAL_GPIO_Init+0x2d0>)
 8004d2a:	689a      	ldr	r2, [r3, #8]
 8004d2c:	4918      	ldr	r1, [pc, #96]	; (8004d90 <HAL_GPIO_Init+0x2d0>)
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	608b      	str	r3, [r1, #8]
 8004d34:	e006      	b.n	8004d44 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004d36:	4b16      	ldr	r3, [pc, #88]	; (8004d90 <HAL_GPIO_Init+0x2d0>)
 8004d38:	689a      	ldr	r2, [r3, #8]
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	43db      	mvns	r3, r3
 8004d3e:	4914      	ldr	r1, [pc, #80]	; (8004d90 <HAL_GPIO_Init+0x2d0>)
 8004d40:	4013      	ands	r3, r2
 8004d42:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d021      	beq.n	8004d94 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004d50:	4b0f      	ldr	r3, [pc, #60]	; (8004d90 <HAL_GPIO_Init+0x2d0>)
 8004d52:	68da      	ldr	r2, [r3, #12]
 8004d54:	490e      	ldr	r1, [pc, #56]	; (8004d90 <HAL_GPIO_Init+0x2d0>)
 8004d56:	69bb      	ldr	r3, [r7, #24]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	60cb      	str	r3, [r1, #12]
 8004d5c:	e021      	b.n	8004da2 <HAL_GPIO_Init+0x2e2>
 8004d5e:	bf00      	nop
 8004d60:	10320000 	.word	0x10320000
 8004d64:	10310000 	.word	0x10310000
 8004d68:	10220000 	.word	0x10220000
 8004d6c:	10210000 	.word	0x10210000
 8004d70:	10120000 	.word	0x10120000
 8004d74:	10110000 	.word	0x10110000
 8004d78:	40021000 	.word	0x40021000
 8004d7c:	40010000 	.word	0x40010000
 8004d80:	40010800 	.word	0x40010800
 8004d84:	40010c00 	.word	0x40010c00
 8004d88:	40011000 	.word	0x40011000
 8004d8c:	40011400 	.word	0x40011400
 8004d90:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004d94:	4b0b      	ldr	r3, [pc, #44]	; (8004dc4 <HAL_GPIO_Init+0x304>)
 8004d96:	68da      	ldr	r2, [r3, #12]
 8004d98:	69bb      	ldr	r3, [r7, #24]
 8004d9a:	43db      	mvns	r3, r3
 8004d9c:	4909      	ldr	r1, [pc, #36]	; (8004dc4 <HAL_GPIO_Init+0x304>)
 8004d9e:	4013      	ands	r3, r2
 8004da0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da4:	3301      	adds	r3, #1
 8004da6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dae:	fa22 f303 	lsr.w	r3, r2, r3
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	f47f ae8e 	bne.w	8004ad4 <HAL_GPIO_Init+0x14>
  }
}
 8004db8:	bf00      	nop
 8004dba:	bf00      	nop
 8004dbc:	372c      	adds	r7, #44	; 0x2c
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bc80      	pop	{r7}
 8004dc2:	4770      	bx	lr
 8004dc4:	40010400 	.word	0x40010400

08004dc8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b085      	sub	sp, #20
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	460b      	mov	r3, r1
 8004dd2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	689a      	ldr	r2, [r3, #8]
 8004dd8:	887b      	ldrh	r3, [r7, #2]
 8004dda:	4013      	ands	r3, r2
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d002      	beq.n	8004de6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004de0:	2301      	movs	r3, #1
 8004de2:	73fb      	strb	r3, [r7, #15]
 8004de4:	e001      	b.n	8004dea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004de6:	2300      	movs	r3, #0
 8004de8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3714      	adds	r7, #20
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bc80      	pop	{r7}
 8004df4:	4770      	bx	lr

08004df6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004df6:	b480      	push	{r7}
 8004df8:	b083      	sub	sp, #12
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	6078      	str	r0, [r7, #4]
 8004dfe:	460b      	mov	r3, r1
 8004e00:	807b      	strh	r3, [r7, #2]
 8004e02:	4613      	mov	r3, r2
 8004e04:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004e06:	787b      	ldrb	r3, [r7, #1]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d003      	beq.n	8004e14 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004e0c:	887a      	ldrh	r2, [r7, #2]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004e12:	e003      	b.n	8004e1c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004e14:	887b      	ldrh	r3, [r7, #2]
 8004e16:	041a      	lsls	r2, r3, #16
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	611a      	str	r2, [r3, #16]
}
 8004e1c:	bf00      	nop
 8004e1e:	370c      	adds	r7, #12
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bc80      	pop	{r7}
 8004e24:	4770      	bx	lr
	...

08004e28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b086      	sub	sp, #24
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d101      	bne.n	8004e3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e272      	b.n	8005320 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 0301 	and.w	r3, r3, #1
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	f000 8087 	beq.w	8004f56 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e48:	4b92      	ldr	r3, [pc, #584]	; (8005094 <HAL_RCC_OscConfig+0x26c>)
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	f003 030c 	and.w	r3, r3, #12
 8004e50:	2b04      	cmp	r3, #4
 8004e52:	d00c      	beq.n	8004e6e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004e54:	4b8f      	ldr	r3, [pc, #572]	; (8005094 <HAL_RCC_OscConfig+0x26c>)
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	f003 030c 	and.w	r3, r3, #12
 8004e5c:	2b08      	cmp	r3, #8
 8004e5e:	d112      	bne.n	8004e86 <HAL_RCC_OscConfig+0x5e>
 8004e60:	4b8c      	ldr	r3, [pc, #560]	; (8005094 <HAL_RCC_OscConfig+0x26c>)
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e6c:	d10b      	bne.n	8004e86 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e6e:	4b89      	ldr	r3, [pc, #548]	; (8005094 <HAL_RCC_OscConfig+0x26c>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d06c      	beq.n	8004f54 <HAL_RCC_OscConfig+0x12c>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d168      	bne.n	8004f54 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e24c      	b.n	8005320 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e8e:	d106      	bne.n	8004e9e <HAL_RCC_OscConfig+0x76>
 8004e90:	4b80      	ldr	r3, [pc, #512]	; (8005094 <HAL_RCC_OscConfig+0x26c>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a7f      	ldr	r2, [pc, #508]	; (8005094 <HAL_RCC_OscConfig+0x26c>)
 8004e96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e9a:	6013      	str	r3, [r2, #0]
 8004e9c:	e02e      	b.n	8004efc <HAL_RCC_OscConfig+0xd4>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d10c      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x98>
 8004ea6:	4b7b      	ldr	r3, [pc, #492]	; (8005094 <HAL_RCC_OscConfig+0x26c>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a7a      	ldr	r2, [pc, #488]	; (8005094 <HAL_RCC_OscConfig+0x26c>)
 8004eac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004eb0:	6013      	str	r3, [r2, #0]
 8004eb2:	4b78      	ldr	r3, [pc, #480]	; (8005094 <HAL_RCC_OscConfig+0x26c>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a77      	ldr	r2, [pc, #476]	; (8005094 <HAL_RCC_OscConfig+0x26c>)
 8004eb8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ebc:	6013      	str	r3, [r2, #0]
 8004ebe:	e01d      	b.n	8004efc <HAL_RCC_OscConfig+0xd4>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ec8:	d10c      	bne.n	8004ee4 <HAL_RCC_OscConfig+0xbc>
 8004eca:	4b72      	ldr	r3, [pc, #456]	; (8005094 <HAL_RCC_OscConfig+0x26c>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a71      	ldr	r2, [pc, #452]	; (8005094 <HAL_RCC_OscConfig+0x26c>)
 8004ed0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ed4:	6013      	str	r3, [r2, #0]
 8004ed6:	4b6f      	ldr	r3, [pc, #444]	; (8005094 <HAL_RCC_OscConfig+0x26c>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a6e      	ldr	r2, [pc, #440]	; (8005094 <HAL_RCC_OscConfig+0x26c>)
 8004edc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ee0:	6013      	str	r3, [r2, #0]
 8004ee2:	e00b      	b.n	8004efc <HAL_RCC_OscConfig+0xd4>
 8004ee4:	4b6b      	ldr	r3, [pc, #428]	; (8005094 <HAL_RCC_OscConfig+0x26c>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a6a      	ldr	r2, [pc, #424]	; (8005094 <HAL_RCC_OscConfig+0x26c>)
 8004eea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004eee:	6013      	str	r3, [r2, #0]
 8004ef0:	4b68      	ldr	r3, [pc, #416]	; (8005094 <HAL_RCC_OscConfig+0x26c>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a67      	ldr	r2, [pc, #412]	; (8005094 <HAL_RCC_OscConfig+0x26c>)
 8004ef6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004efa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d013      	beq.n	8004f2c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f04:	f7fe fe40 	bl	8003b88 <HAL_GetTick>
 8004f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f0a:	e008      	b.n	8004f1e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f0c:	f7fe fe3c 	bl	8003b88 <HAL_GetTick>
 8004f10:	4602      	mov	r2, r0
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	2b64      	cmp	r3, #100	; 0x64
 8004f18:	d901      	bls.n	8004f1e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	e200      	b.n	8005320 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f1e:	4b5d      	ldr	r3, [pc, #372]	; (8005094 <HAL_RCC_OscConfig+0x26c>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d0f0      	beq.n	8004f0c <HAL_RCC_OscConfig+0xe4>
 8004f2a:	e014      	b.n	8004f56 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f2c:	f7fe fe2c 	bl	8003b88 <HAL_GetTick>
 8004f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f32:	e008      	b.n	8004f46 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f34:	f7fe fe28 	bl	8003b88 <HAL_GetTick>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	2b64      	cmp	r3, #100	; 0x64
 8004f40:	d901      	bls.n	8004f46 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004f42:	2303      	movs	r3, #3
 8004f44:	e1ec      	b.n	8005320 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f46:	4b53      	ldr	r3, [pc, #332]	; (8005094 <HAL_RCC_OscConfig+0x26c>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d1f0      	bne.n	8004f34 <HAL_RCC_OscConfig+0x10c>
 8004f52:	e000      	b.n	8004f56 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 0302 	and.w	r3, r3, #2
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d063      	beq.n	800502a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f62:	4b4c      	ldr	r3, [pc, #304]	; (8005094 <HAL_RCC_OscConfig+0x26c>)
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	f003 030c 	and.w	r3, r3, #12
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d00b      	beq.n	8004f86 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004f6e:	4b49      	ldr	r3, [pc, #292]	; (8005094 <HAL_RCC_OscConfig+0x26c>)
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	f003 030c 	and.w	r3, r3, #12
 8004f76:	2b08      	cmp	r3, #8
 8004f78:	d11c      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x18c>
 8004f7a:	4b46      	ldr	r3, [pc, #280]	; (8005094 <HAL_RCC_OscConfig+0x26c>)
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d116      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f86:	4b43      	ldr	r3, [pc, #268]	; (8005094 <HAL_RCC_OscConfig+0x26c>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 0302 	and.w	r3, r3, #2
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d005      	beq.n	8004f9e <HAL_RCC_OscConfig+0x176>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d001      	beq.n	8004f9e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e1c0      	b.n	8005320 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f9e:	4b3d      	ldr	r3, [pc, #244]	; (8005094 <HAL_RCC_OscConfig+0x26c>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	695b      	ldr	r3, [r3, #20]
 8004faa:	00db      	lsls	r3, r3, #3
 8004fac:	4939      	ldr	r1, [pc, #228]	; (8005094 <HAL_RCC_OscConfig+0x26c>)
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fb2:	e03a      	b.n	800502a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	691b      	ldr	r3, [r3, #16]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d020      	beq.n	8004ffe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fbc:	4b36      	ldr	r3, [pc, #216]	; (8005098 <HAL_RCC_OscConfig+0x270>)
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fc2:	f7fe fde1 	bl	8003b88 <HAL_GetTick>
 8004fc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fc8:	e008      	b.n	8004fdc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fca:	f7fe fddd 	bl	8003b88 <HAL_GetTick>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	1ad3      	subs	r3, r2, r3
 8004fd4:	2b02      	cmp	r3, #2
 8004fd6:	d901      	bls.n	8004fdc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004fd8:	2303      	movs	r3, #3
 8004fda:	e1a1      	b.n	8005320 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fdc:	4b2d      	ldr	r3, [pc, #180]	; (8005094 <HAL_RCC_OscConfig+0x26c>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 0302 	and.w	r3, r3, #2
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d0f0      	beq.n	8004fca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fe8:	4b2a      	ldr	r3, [pc, #168]	; (8005094 <HAL_RCC_OscConfig+0x26c>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	695b      	ldr	r3, [r3, #20]
 8004ff4:	00db      	lsls	r3, r3, #3
 8004ff6:	4927      	ldr	r1, [pc, #156]	; (8005094 <HAL_RCC_OscConfig+0x26c>)
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	600b      	str	r3, [r1, #0]
 8004ffc:	e015      	b.n	800502a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ffe:	4b26      	ldr	r3, [pc, #152]	; (8005098 <HAL_RCC_OscConfig+0x270>)
 8005000:	2200      	movs	r2, #0
 8005002:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005004:	f7fe fdc0 	bl	8003b88 <HAL_GetTick>
 8005008:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800500a:	e008      	b.n	800501e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800500c:	f7fe fdbc 	bl	8003b88 <HAL_GetTick>
 8005010:	4602      	mov	r2, r0
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	2b02      	cmp	r3, #2
 8005018:	d901      	bls.n	800501e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800501a:	2303      	movs	r3, #3
 800501c:	e180      	b.n	8005320 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800501e:	4b1d      	ldr	r3, [pc, #116]	; (8005094 <HAL_RCC_OscConfig+0x26c>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 0302 	and.w	r3, r3, #2
 8005026:	2b00      	cmp	r3, #0
 8005028:	d1f0      	bne.n	800500c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 0308 	and.w	r3, r3, #8
 8005032:	2b00      	cmp	r3, #0
 8005034:	d03a      	beq.n	80050ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	699b      	ldr	r3, [r3, #24]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d019      	beq.n	8005072 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800503e:	4b17      	ldr	r3, [pc, #92]	; (800509c <HAL_RCC_OscConfig+0x274>)
 8005040:	2201      	movs	r2, #1
 8005042:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005044:	f7fe fda0 	bl	8003b88 <HAL_GetTick>
 8005048:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800504a:	e008      	b.n	800505e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800504c:	f7fe fd9c 	bl	8003b88 <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	2b02      	cmp	r3, #2
 8005058:	d901      	bls.n	800505e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e160      	b.n	8005320 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800505e:	4b0d      	ldr	r3, [pc, #52]	; (8005094 <HAL_RCC_OscConfig+0x26c>)
 8005060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005062:	f003 0302 	and.w	r3, r3, #2
 8005066:	2b00      	cmp	r3, #0
 8005068:	d0f0      	beq.n	800504c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800506a:	2001      	movs	r0, #1
 800506c:	f000 fad8 	bl	8005620 <RCC_Delay>
 8005070:	e01c      	b.n	80050ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005072:	4b0a      	ldr	r3, [pc, #40]	; (800509c <HAL_RCC_OscConfig+0x274>)
 8005074:	2200      	movs	r2, #0
 8005076:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005078:	f7fe fd86 	bl	8003b88 <HAL_GetTick>
 800507c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800507e:	e00f      	b.n	80050a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005080:	f7fe fd82 	bl	8003b88 <HAL_GetTick>
 8005084:	4602      	mov	r2, r0
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	1ad3      	subs	r3, r2, r3
 800508a:	2b02      	cmp	r3, #2
 800508c:	d908      	bls.n	80050a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	e146      	b.n	8005320 <HAL_RCC_OscConfig+0x4f8>
 8005092:	bf00      	nop
 8005094:	40021000 	.word	0x40021000
 8005098:	42420000 	.word	0x42420000
 800509c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050a0:	4b92      	ldr	r3, [pc, #584]	; (80052ec <HAL_RCC_OscConfig+0x4c4>)
 80050a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a4:	f003 0302 	and.w	r3, r3, #2
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d1e9      	bne.n	8005080 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 0304 	and.w	r3, r3, #4
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	f000 80a6 	beq.w	8005206 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050ba:	2300      	movs	r3, #0
 80050bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050be:	4b8b      	ldr	r3, [pc, #556]	; (80052ec <HAL_RCC_OscConfig+0x4c4>)
 80050c0:	69db      	ldr	r3, [r3, #28]
 80050c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d10d      	bne.n	80050e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050ca:	4b88      	ldr	r3, [pc, #544]	; (80052ec <HAL_RCC_OscConfig+0x4c4>)
 80050cc:	69db      	ldr	r3, [r3, #28]
 80050ce:	4a87      	ldr	r2, [pc, #540]	; (80052ec <HAL_RCC_OscConfig+0x4c4>)
 80050d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050d4:	61d3      	str	r3, [r2, #28]
 80050d6:	4b85      	ldr	r3, [pc, #532]	; (80052ec <HAL_RCC_OscConfig+0x4c4>)
 80050d8:	69db      	ldr	r3, [r3, #28]
 80050da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050de:	60bb      	str	r3, [r7, #8]
 80050e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050e2:	2301      	movs	r3, #1
 80050e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050e6:	4b82      	ldr	r3, [pc, #520]	; (80052f0 <HAL_RCC_OscConfig+0x4c8>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d118      	bne.n	8005124 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050f2:	4b7f      	ldr	r3, [pc, #508]	; (80052f0 <HAL_RCC_OscConfig+0x4c8>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a7e      	ldr	r2, [pc, #504]	; (80052f0 <HAL_RCC_OscConfig+0x4c8>)
 80050f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050fe:	f7fe fd43 	bl	8003b88 <HAL_GetTick>
 8005102:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005104:	e008      	b.n	8005118 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005106:	f7fe fd3f 	bl	8003b88 <HAL_GetTick>
 800510a:	4602      	mov	r2, r0
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	1ad3      	subs	r3, r2, r3
 8005110:	2b64      	cmp	r3, #100	; 0x64
 8005112:	d901      	bls.n	8005118 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005114:	2303      	movs	r3, #3
 8005116:	e103      	b.n	8005320 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005118:	4b75      	ldr	r3, [pc, #468]	; (80052f0 <HAL_RCC_OscConfig+0x4c8>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005120:	2b00      	cmp	r3, #0
 8005122:	d0f0      	beq.n	8005106 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	2b01      	cmp	r3, #1
 800512a:	d106      	bne.n	800513a <HAL_RCC_OscConfig+0x312>
 800512c:	4b6f      	ldr	r3, [pc, #444]	; (80052ec <HAL_RCC_OscConfig+0x4c4>)
 800512e:	6a1b      	ldr	r3, [r3, #32]
 8005130:	4a6e      	ldr	r2, [pc, #440]	; (80052ec <HAL_RCC_OscConfig+0x4c4>)
 8005132:	f043 0301 	orr.w	r3, r3, #1
 8005136:	6213      	str	r3, [r2, #32]
 8005138:	e02d      	b.n	8005196 <HAL_RCC_OscConfig+0x36e>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d10c      	bne.n	800515c <HAL_RCC_OscConfig+0x334>
 8005142:	4b6a      	ldr	r3, [pc, #424]	; (80052ec <HAL_RCC_OscConfig+0x4c4>)
 8005144:	6a1b      	ldr	r3, [r3, #32]
 8005146:	4a69      	ldr	r2, [pc, #420]	; (80052ec <HAL_RCC_OscConfig+0x4c4>)
 8005148:	f023 0301 	bic.w	r3, r3, #1
 800514c:	6213      	str	r3, [r2, #32]
 800514e:	4b67      	ldr	r3, [pc, #412]	; (80052ec <HAL_RCC_OscConfig+0x4c4>)
 8005150:	6a1b      	ldr	r3, [r3, #32]
 8005152:	4a66      	ldr	r2, [pc, #408]	; (80052ec <HAL_RCC_OscConfig+0x4c4>)
 8005154:	f023 0304 	bic.w	r3, r3, #4
 8005158:	6213      	str	r3, [r2, #32]
 800515a:	e01c      	b.n	8005196 <HAL_RCC_OscConfig+0x36e>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	2b05      	cmp	r3, #5
 8005162:	d10c      	bne.n	800517e <HAL_RCC_OscConfig+0x356>
 8005164:	4b61      	ldr	r3, [pc, #388]	; (80052ec <HAL_RCC_OscConfig+0x4c4>)
 8005166:	6a1b      	ldr	r3, [r3, #32]
 8005168:	4a60      	ldr	r2, [pc, #384]	; (80052ec <HAL_RCC_OscConfig+0x4c4>)
 800516a:	f043 0304 	orr.w	r3, r3, #4
 800516e:	6213      	str	r3, [r2, #32]
 8005170:	4b5e      	ldr	r3, [pc, #376]	; (80052ec <HAL_RCC_OscConfig+0x4c4>)
 8005172:	6a1b      	ldr	r3, [r3, #32]
 8005174:	4a5d      	ldr	r2, [pc, #372]	; (80052ec <HAL_RCC_OscConfig+0x4c4>)
 8005176:	f043 0301 	orr.w	r3, r3, #1
 800517a:	6213      	str	r3, [r2, #32]
 800517c:	e00b      	b.n	8005196 <HAL_RCC_OscConfig+0x36e>
 800517e:	4b5b      	ldr	r3, [pc, #364]	; (80052ec <HAL_RCC_OscConfig+0x4c4>)
 8005180:	6a1b      	ldr	r3, [r3, #32]
 8005182:	4a5a      	ldr	r2, [pc, #360]	; (80052ec <HAL_RCC_OscConfig+0x4c4>)
 8005184:	f023 0301 	bic.w	r3, r3, #1
 8005188:	6213      	str	r3, [r2, #32]
 800518a:	4b58      	ldr	r3, [pc, #352]	; (80052ec <HAL_RCC_OscConfig+0x4c4>)
 800518c:	6a1b      	ldr	r3, [r3, #32]
 800518e:	4a57      	ldr	r2, [pc, #348]	; (80052ec <HAL_RCC_OscConfig+0x4c4>)
 8005190:	f023 0304 	bic.w	r3, r3, #4
 8005194:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d015      	beq.n	80051ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800519e:	f7fe fcf3 	bl	8003b88 <HAL_GetTick>
 80051a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051a4:	e00a      	b.n	80051bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051a6:	f7fe fcef 	bl	8003b88 <HAL_GetTick>
 80051aa:	4602      	mov	r2, r0
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	1ad3      	subs	r3, r2, r3
 80051b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d901      	bls.n	80051bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80051b8:	2303      	movs	r3, #3
 80051ba:	e0b1      	b.n	8005320 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051bc:	4b4b      	ldr	r3, [pc, #300]	; (80052ec <HAL_RCC_OscConfig+0x4c4>)
 80051be:	6a1b      	ldr	r3, [r3, #32]
 80051c0:	f003 0302 	and.w	r3, r3, #2
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d0ee      	beq.n	80051a6 <HAL_RCC_OscConfig+0x37e>
 80051c8:	e014      	b.n	80051f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051ca:	f7fe fcdd 	bl	8003b88 <HAL_GetTick>
 80051ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051d0:	e00a      	b.n	80051e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051d2:	f7fe fcd9 	bl	8003b88 <HAL_GetTick>
 80051d6:	4602      	mov	r2, r0
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d901      	bls.n	80051e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80051e4:	2303      	movs	r3, #3
 80051e6:	e09b      	b.n	8005320 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051e8:	4b40      	ldr	r3, [pc, #256]	; (80052ec <HAL_RCC_OscConfig+0x4c4>)
 80051ea:	6a1b      	ldr	r3, [r3, #32]
 80051ec:	f003 0302 	and.w	r3, r3, #2
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d1ee      	bne.n	80051d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80051f4:	7dfb      	ldrb	r3, [r7, #23]
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d105      	bne.n	8005206 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051fa:	4b3c      	ldr	r3, [pc, #240]	; (80052ec <HAL_RCC_OscConfig+0x4c4>)
 80051fc:	69db      	ldr	r3, [r3, #28]
 80051fe:	4a3b      	ldr	r2, [pc, #236]	; (80052ec <HAL_RCC_OscConfig+0x4c4>)
 8005200:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005204:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	69db      	ldr	r3, [r3, #28]
 800520a:	2b00      	cmp	r3, #0
 800520c:	f000 8087 	beq.w	800531e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005210:	4b36      	ldr	r3, [pc, #216]	; (80052ec <HAL_RCC_OscConfig+0x4c4>)
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	f003 030c 	and.w	r3, r3, #12
 8005218:	2b08      	cmp	r3, #8
 800521a:	d061      	beq.n	80052e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	69db      	ldr	r3, [r3, #28]
 8005220:	2b02      	cmp	r3, #2
 8005222:	d146      	bne.n	80052b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005224:	4b33      	ldr	r3, [pc, #204]	; (80052f4 <HAL_RCC_OscConfig+0x4cc>)
 8005226:	2200      	movs	r2, #0
 8005228:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800522a:	f7fe fcad 	bl	8003b88 <HAL_GetTick>
 800522e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005230:	e008      	b.n	8005244 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005232:	f7fe fca9 	bl	8003b88 <HAL_GetTick>
 8005236:	4602      	mov	r2, r0
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	1ad3      	subs	r3, r2, r3
 800523c:	2b02      	cmp	r3, #2
 800523e:	d901      	bls.n	8005244 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005240:	2303      	movs	r3, #3
 8005242:	e06d      	b.n	8005320 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005244:	4b29      	ldr	r3, [pc, #164]	; (80052ec <HAL_RCC_OscConfig+0x4c4>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800524c:	2b00      	cmp	r3, #0
 800524e:	d1f0      	bne.n	8005232 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6a1b      	ldr	r3, [r3, #32]
 8005254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005258:	d108      	bne.n	800526c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800525a:	4b24      	ldr	r3, [pc, #144]	; (80052ec <HAL_RCC_OscConfig+0x4c4>)
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	4921      	ldr	r1, [pc, #132]	; (80052ec <HAL_RCC_OscConfig+0x4c4>)
 8005268:	4313      	orrs	r3, r2
 800526a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800526c:	4b1f      	ldr	r3, [pc, #124]	; (80052ec <HAL_RCC_OscConfig+0x4c4>)
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6a19      	ldr	r1, [r3, #32]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527c:	430b      	orrs	r3, r1
 800527e:	491b      	ldr	r1, [pc, #108]	; (80052ec <HAL_RCC_OscConfig+0x4c4>)
 8005280:	4313      	orrs	r3, r2
 8005282:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005284:	4b1b      	ldr	r3, [pc, #108]	; (80052f4 <HAL_RCC_OscConfig+0x4cc>)
 8005286:	2201      	movs	r2, #1
 8005288:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800528a:	f7fe fc7d 	bl	8003b88 <HAL_GetTick>
 800528e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005290:	e008      	b.n	80052a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005292:	f7fe fc79 	bl	8003b88 <HAL_GetTick>
 8005296:	4602      	mov	r2, r0
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	1ad3      	subs	r3, r2, r3
 800529c:	2b02      	cmp	r3, #2
 800529e:	d901      	bls.n	80052a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80052a0:	2303      	movs	r3, #3
 80052a2:	e03d      	b.n	8005320 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80052a4:	4b11      	ldr	r3, [pc, #68]	; (80052ec <HAL_RCC_OscConfig+0x4c4>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d0f0      	beq.n	8005292 <HAL_RCC_OscConfig+0x46a>
 80052b0:	e035      	b.n	800531e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052b2:	4b10      	ldr	r3, [pc, #64]	; (80052f4 <HAL_RCC_OscConfig+0x4cc>)
 80052b4:	2200      	movs	r2, #0
 80052b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052b8:	f7fe fc66 	bl	8003b88 <HAL_GetTick>
 80052bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052be:	e008      	b.n	80052d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052c0:	f7fe fc62 	bl	8003b88 <HAL_GetTick>
 80052c4:	4602      	mov	r2, r0
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	2b02      	cmp	r3, #2
 80052cc:	d901      	bls.n	80052d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80052ce:	2303      	movs	r3, #3
 80052d0:	e026      	b.n	8005320 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052d2:	4b06      	ldr	r3, [pc, #24]	; (80052ec <HAL_RCC_OscConfig+0x4c4>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d1f0      	bne.n	80052c0 <HAL_RCC_OscConfig+0x498>
 80052de:	e01e      	b.n	800531e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	69db      	ldr	r3, [r3, #28]
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d107      	bne.n	80052f8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e019      	b.n	8005320 <HAL_RCC_OscConfig+0x4f8>
 80052ec:	40021000 	.word	0x40021000
 80052f0:	40007000 	.word	0x40007000
 80052f4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80052f8:	4b0b      	ldr	r3, [pc, #44]	; (8005328 <HAL_RCC_OscConfig+0x500>)
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6a1b      	ldr	r3, [r3, #32]
 8005308:	429a      	cmp	r2, r3
 800530a:	d106      	bne.n	800531a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005316:	429a      	cmp	r2, r3
 8005318:	d001      	beq.n	800531e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	e000      	b.n	8005320 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800531e:	2300      	movs	r3, #0
}
 8005320:	4618      	mov	r0, r3
 8005322:	3718      	adds	r7, #24
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}
 8005328:	40021000 	.word	0x40021000

0800532c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b084      	sub	sp, #16
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d101      	bne.n	8005340 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	e0d0      	b.n	80054e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005340:	4b6a      	ldr	r3, [pc, #424]	; (80054ec <HAL_RCC_ClockConfig+0x1c0>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0307 	and.w	r3, r3, #7
 8005348:	683a      	ldr	r2, [r7, #0]
 800534a:	429a      	cmp	r2, r3
 800534c:	d910      	bls.n	8005370 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800534e:	4b67      	ldr	r3, [pc, #412]	; (80054ec <HAL_RCC_ClockConfig+0x1c0>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f023 0207 	bic.w	r2, r3, #7
 8005356:	4965      	ldr	r1, [pc, #404]	; (80054ec <HAL_RCC_ClockConfig+0x1c0>)
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	4313      	orrs	r3, r2
 800535c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800535e:	4b63      	ldr	r3, [pc, #396]	; (80054ec <HAL_RCC_ClockConfig+0x1c0>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 0307 	and.w	r3, r3, #7
 8005366:	683a      	ldr	r2, [r7, #0]
 8005368:	429a      	cmp	r2, r3
 800536a:	d001      	beq.n	8005370 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e0b8      	b.n	80054e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 0302 	and.w	r3, r3, #2
 8005378:	2b00      	cmp	r3, #0
 800537a:	d020      	beq.n	80053be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 0304 	and.w	r3, r3, #4
 8005384:	2b00      	cmp	r3, #0
 8005386:	d005      	beq.n	8005394 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005388:	4b59      	ldr	r3, [pc, #356]	; (80054f0 <HAL_RCC_ClockConfig+0x1c4>)
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	4a58      	ldr	r2, [pc, #352]	; (80054f0 <HAL_RCC_ClockConfig+0x1c4>)
 800538e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005392:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0308 	and.w	r3, r3, #8
 800539c:	2b00      	cmp	r3, #0
 800539e:	d005      	beq.n	80053ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053a0:	4b53      	ldr	r3, [pc, #332]	; (80054f0 <HAL_RCC_ClockConfig+0x1c4>)
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	4a52      	ldr	r2, [pc, #328]	; (80054f0 <HAL_RCC_ClockConfig+0x1c4>)
 80053a6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80053aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053ac:	4b50      	ldr	r3, [pc, #320]	; (80054f0 <HAL_RCC_ClockConfig+0x1c4>)
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	494d      	ldr	r1, [pc, #308]	; (80054f0 <HAL_RCC_ClockConfig+0x1c4>)
 80053ba:	4313      	orrs	r3, r2
 80053bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 0301 	and.w	r3, r3, #1
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d040      	beq.n	800544c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d107      	bne.n	80053e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053d2:	4b47      	ldr	r3, [pc, #284]	; (80054f0 <HAL_RCC_ClockConfig+0x1c4>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d115      	bne.n	800540a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	e07f      	b.n	80054e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	2b02      	cmp	r3, #2
 80053e8:	d107      	bne.n	80053fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053ea:	4b41      	ldr	r3, [pc, #260]	; (80054f0 <HAL_RCC_ClockConfig+0x1c4>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d109      	bne.n	800540a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	e073      	b.n	80054e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053fa:	4b3d      	ldr	r3, [pc, #244]	; (80054f0 <HAL_RCC_ClockConfig+0x1c4>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 0302 	and.w	r3, r3, #2
 8005402:	2b00      	cmp	r3, #0
 8005404:	d101      	bne.n	800540a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e06b      	b.n	80054e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800540a:	4b39      	ldr	r3, [pc, #228]	; (80054f0 <HAL_RCC_ClockConfig+0x1c4>)
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	f023 0203 	bic.w	r2, r3, #3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	4936      	ldr	r1, [pc, #216]	; (80054f0 <HAL_RCC_ClockConfig+0x1c4>)
 8005418:	4313      	orrs	r3, r2
 800541a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800541c:	f7fe fbb4 	bl	8003b88 <HAL_GetTick>
 8005420:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005422:	e00a      	b.n	800543a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005424:	f7fe fbb0 	bl	8003b88 <HAL_GetTick>
 8005428:	4602      	mov	r2, r0
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	1ad3      	subs	r3, r2, r3
 800542e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005432:	4293      	cmp	r3, r2
 8005434:	d901      	bls.n	800543a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005436:	2303      	movs	r3, #3
 8005438:	e053      	b.n	80054e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800543a:	4b2d      	ldr	r3, [pc, #180]	; (80054f0 <HAL_RCC_ClockConfig+0x1c4>)
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	f003 020c 	and.w	r2, r3, #12
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	429a      	cmp	r2, r3
 800544a:	d1eb      	bne.n	8005424 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800544c:	4b27      	ldr	r3, [pc, #156]	; (80054ec <HAL_RCC_ClockConfig+0x1c0>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 0307 	and.w	r3, r3, #7
 8005454:	683a      	ldr	r2, [r7, #0]
 8005456:	429a      	cmp	r2, r3
 8005458:	d210      	bcs.n	800547c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800545a:	4b24      	ldr	r3, [pc, #144]	; (80054ec <HAL_RCC_ClockConfig+0x1c0>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f023 0207 	bic.w	r2, r3, #7
 8005462:	4922      	ldr	r1, [pc, #136]	; (80054ec <HAL_RCC_ClockConfig+0x1c0>)
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	4313      	orrs	r3, r2
 8005468:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800546a:	4b20      	ldr	r3, [pc, #128]	; (80054ec <HAL_RCC_ClockConfig+0x1c0>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 0307 	and.w	r3, r3, #7
 8005472:	683a      	ldr	r2, [r7, #0]
 8005474:	429a      	cmp	r2, r3
 8005476:	d001      	beq.n	800547c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e032      	b.n	80054e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 0304 	and.w	r3, r3, #4
 8005484:	2b00      	cmp	r3, #0
 8005486:	d008      	beq.n	800549a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005488:	4b19      	ldr	r3, [pc, #100]	; (80054f0 <HAL_RCC_ClockConfig+0x1c4>)
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	4916      	ldr	r1, [pc, #88]	; (80054f0 <HAL_RCC_ClockConfig+0x1c4>)
 8005496:	4313      	orrs	r3, r2
 8005498:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 0308 	and.w	r3, r3, #8
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d009      	beq.n	80054ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80054a6:	4b12      	ldr	r3, [pc, #72]	; (80054f0 <HAL_RCC_ClockConfig+0x1c4>)
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	691b      	ldr	r3, [r3, #16]
 80054b2:	00db      	lsls	r3, r3, #3
 80054b4:	490e      	ldr	r1, [pc, #56]	; (80054f0 <HAL_RCC_ClockConfig+0x1c4>)
 80054b6:	4313      	orrs	r3, r2
 80054b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80054ba:	f000 f821 	bl	8005500 <HAL_RCC_GetSysClockFreq>
 80054be:	4602      	mov	r2, r0
 80054c0:	4b0b      	ldr	r3, [pc, #44]	; (80054f0 <HAL_RCC_ClockConfig+0x1c4>)
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	091b      	lsrs	r3, r3, #4
 80054c6:	f003 030f 	and.w	r3, r3, #15
 80054ca:	490a      	ldr	r1, [pc, #40]	; (80054f4 <HAL_RCC_ClockConfig+0x1c8>)
 80054cc:	5ccb      	ldrb	r3, [r1, r3]
 80054ce:	fa22 f303 	lsr.w	r3, r2, r3
 80054d2:	4a09      	ldr	r2, [pc, #36]	; (80054f8 <HAL_RCC_ClockConfig+0x1cc>)
 80054d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80054d6:	4b09      	ldr	r3, [pc, #36]	; (80054fc <HAL_RCC_ClockConfig+0x1d0>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4618      	mov	r0, r3
 80054dc:	f7fe fb12 	bl	8003b04 <HAL_InitTick>

  return HAL_OK;
 80054e0:	2300      	movs	r3, #0
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3710      	adds	r7, #16
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	bf00      	nop
 80054ec:	40022000 	.word	0x40022000
 80054f0:	40021000 	.word	0x40021000
 80054f4:	08007a60 	.word	0x08007a60
 80054f8:	2000003c 	.word	0x2000003c
 80054fc:	20000040 	.word	0x20000040

08005500 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005500:	b490      	push	{r4, r7}
 8005502:	b08a      	sub	sp, #40	; 0x28
 8005504:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005506:	4b29      	ldr	r3, [pc, #164]	; (80055ac <HAL_RCC_GetSysClockFreq+0xac>)
 8005508:	1d3c      	adds	r4, r7, #4
 800550a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800550c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005510:	f240 2301 	movw	r3, #513	; 0x201
 8005514:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005516:	2300      	movs	r3, #0
 8005518:	61fb      	str	r3, [r7, #28]
 800551a:	2300      	movs	r3, #0
 800551c:	61bb      	str	r3, [r7, #24]
 800551e:	2300      	movs	r3, #0
 8005520:	627b      	str	r3, [r7, #36]	; 0x24
 8005522:	2300      	movs	r3, #0
 8005524:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005526:	2300      	movs	r3, #0
 8005528:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800552a:	4b21      	ldr	r3, [pc, #132]	; (80055b0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	f003 030c 	and.w	r3, r3, #12
 8005536:	2b04      	cmp	r3, #4
 8005538:	d002      	beq.n	8005540 <HAL_RCC_GetSysClockFreq+0x40>
 800553a:	2b08      	cmp	r3, #8
 800553c:	d003      	beq.n	8005546 <HAL_RCC_GetSysClockFreq+0x46>
 800553e:	e02b      	b.n	8005598 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005540:	4b1c      	ldr	r3, [pc, #112]	; (80055b4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005542:	623b      	str	r3, [r7, #32]
      break;
 8005544:	e02b      	b.n	800559e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	0c9b      	lsrs	r3, r3, #18
 800554a:	f003 030f 	and.w	r3, r3, #15
 800554e:	3328      	adds	r3, #40	; 0x28
 8005550:	443b      	add	r3, r7
 8005552:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005556:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800555e:	2b00      	cmp	r3, #0
 8005560:	d012      	beq.n	8005588 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005562:	4b13      	ldr	r3, [pc, #76]	; (80055b0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	0c5b      	lsrs	r3, r3, #17
 8005568:	f003 0301 	and.w	r3, r3, #1
 800556c:	3328      	adds	r3, #40	; 0x28
 800556e:	443b      	add	r3, r7
 8005570:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005574:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	4a0e      	ldr	r2, [pc, #56]	; (80055b4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800557a:	fb03 f202 	mul.w	r2, r3, r2
 800557e:	69bb      	ldr	r3, [r7, #24]
 8005580:	fbb2 f3f3 	udiv	r3, r2, r3
 8005584:	627b      	str	r3, [r7, #36]	; 0x24
 8005586:	e004      	b.n	8005592 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	4a0b      	ldr	r2, [pc, #44]	; (80055b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800558c:	fb02 f303 	mul.w	r3, r2, r3
 8005590:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005594:	623b      	str	r3, [r7, #32]
      break;
 8005596:	e002      	b.n	800559e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005598:	4b06      	ldr	r3, [pc, #24]	; (80055b4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800559a:	623b      	str	r3, [r7, #32]
      break;
 800559c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800559e:	6a3b      	ldr	r3, [r7, #32]
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3728      	adds	r7, #40	; 0x28
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bc90      	pop	{r4, r7}
 80055a8:	4770      	bx	lr
 80055aa:	bf00      	nop
 80055ac:	08007a50 	.word	0x08007a50
 80055b0:	40021000 	.word	0x40021000
 80055b4:	007a1200 	.word	0x007a1200
 80055b8:	003d0900 	.word	0x003d0900

080055bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055bc:	b480      	push	{r7}
 80055be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055c0:	4b02      	ldr	r3, [pc, #8]	; (80055cc <HAL_RCC_GetHCLKFreq+0x10>)
 80055c2:	681b      	ldr	r3, [r3, #0]
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bc80      	pop	{r7}
 80055ca:	4770      	bx	lr
 80055cc:	2000003c 	.word	0x2000003c

080055d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80055d4:	f7ff fff2 	bl	80055bc <HAL_RCC_GetHCLKFreq>
 80055d8:	4602      	mov	r2, r0
 80055da:	4b05      	ldr	r3, [pc, #20]	; (80055f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	0a1b      	lsrs	r3, r3, #8
 80055e0:	f003 0307 	and.w	r3, r3, #7
 80055e4:	4903      	ldr	r1, [pc, #12]	; (80055f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80055e6:	5ccb      	ldrb	r3, [r1, r3]
 80055e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	bd80      	pop	{r7, pc}
 80055f0:	40021000 	.word	0x40021000
 80055f4:	08007a70 	.word	0x08007a70

080055f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80055fc:	f7ff ffde 	bl	80055bc <HAL_RCC_GetHCLKFreq>
 8005600:	4602      	mov	r2, r0
 8005602:	4b05      	ldr	r3, [pc, #20]	; (8005618 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	0adb      	lsrs	r3, r3, #11
 8005608:	f003 0307 	and.w	r3, r3, #7
 800560c:	4903      	ldr	r1, [pc, #12]	; (800561c <HAL_RCC_GetPCLK2Freq+0x24>)
 800560e:	5ccb      	ldrb	r3, [r1, r3]
 8005610:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005614:	4618      	mov	r0, r3
 8005616:	bd80      	pop	{r7, pc}
 8005618:	40021000 	.word	0x40021000
 800561c:	08007a70 	.word	0x08007a70

08005620 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005620:	b480      	push	{r7}
 8005622:	b085      	sub	sp, #20
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005628:	4b0a      	ldr	r3, [pc, #40]	; (8005654 <RCC_Delay+0x34>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a0a      	ldr	r2, [pc, #40]	; (8005658 <RCC_Delay+0x38>)
 800562e:	fba2 2303 	umull	r2, r3, r2, r3
 8005632:	0a5b      	lsrs	r3, r3, #9
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	fb02 f303 	mul.w	r3, r2, r3
 800563a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800563c:	bf00      	nop
  }
  while (Delay --);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	1e5a      	subs	r2, r3, #1
 8005642:	60fa      	str	r2, [r7, #12]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d1f9      	bne.n	800563c <RCC_Delay+0x1c>
}
 8005648:	bf00      	nop
 800564a:	bf00      	nop
 800564c:	3714      	adds	r7, #20
 800564e:	46bd      	mov	sp, r7
 8005650:	bc80      	pop	{r7}
 8005652:	4770      	bx	lr
 8005654:	2000003c 	.word	0x2000003c
 8005658:	10624dd3 	.word	0x10624dd3

0800565c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b086      	sub	sp, #24
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005664:	2300      	movs	r3, #0
 8005666:	613b      	str	r3, [r7, #16]
 8005668:	2300      	movs	r3, #0
 800566a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 0301 	and.w	r3, r3, #1
 8005674:	2b00      	cmp	r3, #0
 8005676:	d07d      	beq.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005678:	2300      	movs	r3, #0
 800567a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800567c:	4b4f      	ldr	r3, [pc, #316]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800567e:	69db      	ldr	r3, [r3, #28]
 8005680:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005684:	2b00      	cmp	r3, #0
 8005686:	d10d      	bne.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005688:	4b4c      	ldr	r3, [pc, #304]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800568a:	69db      	ldr	r3, [r3, #28]
 800568c:	4a4b      	ldr	r2, [pc, #300]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800568e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005692:	61d3      	str	r3, [r2, #28]
 8005694:	4b49      	ldr	r3, [pc, #292]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005696:	69db      	ldr	r3, [r3, #28]
 8005698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800569c:	60bb      	str	r3, [r7, #8]
 800569e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056a0:	2301      	movs	r3, #1
 80056a2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056a4:	4b46      	ldr	r3, [pc, #280]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d118      	bne.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056b0:	4b43      	ldr	r3, [pc, #268]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a42      	ldr	r2, [pc, #264]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80056b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056bc:	f7fe fa64 	bl	8003b88 <HAL_GetTick>
 80056c0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056c2:	e008      	b.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056c4:	f7fe fa60 	bl	8003b88 <HAL_GetTick>
 80056c8:	4602      	mov	r2, r0
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	1ad3      	subs	r3, r2, r3
 80056ce:	2b64      	cmp	r3, #100	; 0x64
 80056d0:	d901      	bls.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80056d2:	2303      	movs	r3, #3
 80056d4:	e06d      	b.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056d6:	4b3a      	ldr	r3, [pc, #232]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d0f0      	beq.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80056e2:	4b36      	ldr	r3, [pc, #216]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056e4:	6a1b      	ldr	r3, [r3, #32]
 80056e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056ea:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d02e      	beq.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056fa:	68fa      	ldr	r2, [r7, #12]
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d027      	beq.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005700:	4b2e      	ldr	r3, [pc, #184]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005702:	6a1b      	ldr	r3, [r3, #32]
 8005704:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005708:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800570a:	4b2e      	ldr	r3, [pc, #184]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800570c:	2201      	movs	r2, #1
 800570e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005710:	4b2c      	ldr	r3, [pc, #176]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005712:	2200      	movs	r2, #0
 8005714:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005716:	4a29      	ldr	r2, [pc, #164]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f003 0301 	and.w	r3, r3, #1
 8005722:	2b00      	cmp	r3, #0
 8005724:	d014      	beq.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005726:	f7fe fa2f 	bl	8003b88 <HAL_GetTick>
 800572a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800572c:	e00a      	b.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800572e:	f7fe fa2b 	bl	8003b88 <HAL_GetTick>
 8005732:	4602      	mov	r2, r0
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	1ad3      	subs	r3, r2, r3
 8005738:	f241 3288 	movw	r2, #5000	; 0x1388
 800573c:	4293      	cmp	r3, r2
 800573e:	d901      	bls.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005740:	2303      	movs	r3, #3
 8005742:	e036      	b.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005744:	4b1d      	ldr	r3, [pc, #116]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005746:	6a1b      	ldr	r3, [r3, #32]
 8005748:	f003 0302 	and.w	r3, r3, #2
 800574c:	2b00      	cmp	r3, #0
 800574e:	d0ee      	beq.n	800572e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005750:	4b1a      	ldr	r3, [pc, #104]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005752:	6a1b      	ldr	r3, [r3, #32]
 8005754:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	4917      	ldr	r1, [pc, #92]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800575e:	4313      	orrs	r3, r2
 8005760:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005762:	7dfb      	ldrb	r3, [r7, #23]
 8005764:	2b01      	cmp	r3, #1
 8005766:	d105      	bne.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005768:	4b14      	ldr	r3, [pc, #80]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800576a:	69db      	ldr	r3, [r3, #28]
 800576c:	4a13      	ldr	r2, [pc, #76]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800576e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005772:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f003 0302 	and.w	r3, r3, #2
 800577c:	2b00      	cmp	r3, #0
 800577e:	d008      	beq.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005780:	4b0e      	ldr	r3, [pc, #56]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	490b      	ldr	r1, [pc, #44]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800578e:	4313      	orrs	r3, r2
 8005790:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f003 0310 	and.w	r3, r3, #16
 800579a:	2b00      	cmp	r3, #0
 800579c:	d008      	beq.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800579e:	4b07      	ldr	r3, [pc, #28]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	68db      	ldr	r3, [r3, #12]
 80057aa:	4904      	ldr	r1, [pc, #16]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057ac:	4313      	orrs	r3, r2
 80057ae:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3718      	adds	r7, #24
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	bf00      	nop
 80057bc:	40021000 	.word	0x40021000
 80057c0:	40007000 	.word	0x40007000
 80057c4:	42420440 	.word	0x42420440

080057c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b082      	sub	sp, #8
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d101      	bne.n	80057da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e041      	b.n	800585e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d106      	bne.n	80057f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f7fd fff4 	bl	80037dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2202      	movs	r2, #2
 80057f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	3304      	adds	r3, #4
 8005804:	4619      	mov	r1, r3
 8005806:	4610      	mov	r0, r2
 8005808:	f000 fabe 	bl	8005d88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800585c:	2300      	movs	r3, #0
}
 800585e:	4618      	mov	r0, r3
 8005860:	3708      	adds	r7, #8
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
	...

08005868 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b084      	sub	sp, #16
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d109      	bne.n	800588c <HAL_TIM_PWM_Start+0x24>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800587e:	b2db      	uxtb	r3, r3
 8005880:	2b01      	cmp	r3, #1
 8005882:	bf14      	ite	ne
 8005884:	2301      	movne	r3, #1
 8005886:	2300      	moveq	r3, #0
 8005888:	b2db      	uxtb	r3, r3
 800588a:	e022      	b.n	80058d2 <HAL_TIM_PWM_Start+0x6a>
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	2b04      	cmp	r3, #4
 8005890:	d109      	bne.n	80058a6 <HAL_TIM_PWM_Start+0x3e>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005898:	b2db      	uxtb	r3, r3
 800589a:	2b01      	cmp	r3, #1
 800589c:	bf14      	ite	ne
 800589e:	2301      	movne	r3, #1
 80058a0:	2300      	moveq	r3, #0
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	e015      	b.n	80058d2 <HAL_TIM_PWM_Start+0x6a>
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	2b08      	cmp	r3, #8
 80058aa:	d109      	bne.n	80058c0 <HAL_TIM_PWM_Start+0x58>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	bf14      	ite	ne
 80058b8:	2301      	movne	r3, #1
 80058ba:	2300      	moveq	r3, #0
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	e008      	b.n	80058d2 <HAL_TIM_PWM_Start+0x6a>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	bf14      	ite	ne
 80058cc:	2301      	movne	r3, #1
 80058ce:	2300      	moveq	r3, #0
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d001      	beq.n	80058da <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e05e      	b.n	8005998 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d104      	bne.n	80058ea <HAL_TIM_PWM_Start+0x82>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2202      	movs	r2, #2
 80058e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058e8:	e013      	b.n	8005912 <HAL_TIM_PWM_Start+0xaa>
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	2b04      	cmp	r3, #4
 80058ee:	d104      	bne.n	80058fa <HAL_TIM_PWM_Start+0x92>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2202      	movs	r2, #2
 80058f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058f8:	e00b      	b.n	8005912 <HAL_TIM_PWM_Start+0xaa>
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	2b08      	cmp	r3, #8
 80058fe:	d104      	bne.n	800590a <HAL_TIM_PWM_Start+0xa2>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2202      	movs	r2, #2
 8005904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005908:	e003      	b.n	8005912 <HAL_TIM_PWM_Start+0xaa>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2202      	movs	r2, #2
 800590e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	2201      	movs	r2, #1
 8005918:	6839      	ldr	r1, [r7, #0]
 800591a:	4618      	mov	r0, r3
 800591c:	f000 fc1e 	bl	800615c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a1e      	ldr	r2, [pc, #120]	; (80059a0 <HAL_TIM_PWM_Start+0x138>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d107      	bne.n	800593a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005938:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a18      	ldr	r2, [pc, #96]	; (80059a0 <HAL_TIM_PWM_Start+0x138>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d00e      	beq.n	8005962 <HAL_TIM_PWM_Start+0xfa>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800594c:	d009      	beq.n	8005962 <HAL_TIM_PWM_Start+0xfa>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a14      	ldr	r2, [pc, #80]	; (80059a4 <HAL_TIM_PWM_Start+0x13c>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d004      	beq.n	8005962 <HAL_TIM_PWM_Start+0xfa>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a12      	ldr	r2, [pc, #72]	; (80059a8 <HAL_TIM_PWM_Start+0x140>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d111      	bne.n	8005986 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	f003 0307 	and.w	r3, r3, #7
 800596c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2b06      	cmp	r3, #6
 8005972:	d010      	beq.n	8005996 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f042 0201 	orr.w	r2, r2, #1
 8005982:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005984:	e007      	b.n	8005996 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f042 0201 	orr.w	r2, r2, #1
 8005994:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005996:	2300      	movs	r3, #0
}
 8005998:	4618      	mov	r0, r3
 800599a:	3710      	adds	r7, #16
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}
 80059a0:	40012c00 	.word	0x40012c00
 80059a4:	40000400 	.word	0x40000400
 80059a8:	40000800 	.word	0x40000800

080059ac <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b086      	sub	sp, #24
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d101      	bne.n	80059c0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	e093      	b.n	8005ae8 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d106      	bne.n	80059da <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f7fd ff1d 	bl	8003814 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2202      	movs	r2, #2
 80059de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	6812      	ldr	r2, [r2, #0]
 80059ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059f0:	f023 0307 	bic.w	r3, r3, #7
 80059f4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	3304      	adds	r3, #4
 80059fe:	4619      	mov	r1, r3
 8005a00:	4610      	mov	r0, r2
 8005a02:	f000 f9c1 	bl	8005d88 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	699b      	ldr	r3, [r3, #24]
 8005a14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	6a1b      	ldr	r3, [r3, #32]
 8005a1c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	697a      	ldr	r2, [r7, #20]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a2e:	f023 0303 	bic.w	r3, r3, #3
 8005a32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	689a      	ldr	r2, [r3, #8]
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	699b      	ldr	r3, [r3, #24]
 8005a3c:	021b      	lsls	r3, r3, #8
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	693a      	ldr	r2, [r7, #16]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005a4c:	f023 030c 	bic.w	r3, r3, #12
 8005a50:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a58:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	68da      	ldr	r2, [r3, #12]
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	69db      	ldr	r3, [r3, #28]
 8005a66:	021b      	lsls	r3, r3, #8
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	693a      	ldr	r2, [r7, #16]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	691b      	ldr	r3, [r3, #16]
 8005a74:	011a      	lsls	r2, r3, #4
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	6a1b      	ldr	r3, [r3, #32]
 8005a7a:	031b      	lsls	r3, r3, #12
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	693a      	ldr	r2, [r7, #16]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005a8a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	685a      	ldr	r2, [r3, #4]
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	695b      	ldr	r3, [r3, #20]
 8005a94:	011b      	lsls	r3, r3, #4
 8005a96:	4313      	orrs	r3, r2
 8005a98:	68fa      	ldr	r2, [r7, #12]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	697a      	ldr	r2, [r7, #20]
 8005aa4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	693a      	ldr	r2, [r7, #16]
 8005aac:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	68fa      	ldr	r2, [r7, #12]
 8005ab4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2201      	movs	r2, #1
 8005aca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2201      	movs	r2, #1
 8005ada:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ae6:	2300      	movs	r3, #0
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3718      	adds	r7, #24
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b084      	sub	sp, #16
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b00:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005b08:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005b10:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005b18:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d110      	bne.n	8005b42 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b20:	7bfb      	ldrb	r3, [r7, #15]
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d102      	bne.n	8005b2c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005b26:	7b7b      	ldrb	r3, [r7, #13]
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d001      	beq.n	8005b30 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e069      	b.n	8005c04 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2202      	movs	r2, #2
 8005b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2202      	movs	r2, #2
 8005b3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b40:	e031      	b.n	8005ba6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	2b04      	cmp	r3, #4
 8005b46:	d110      	bne.n	8005b6a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b48:	7bbb      	ldrb	r3, [r7, #14]
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d102      	bne.n	8005b54 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005b4e:	7b3b      	ldrb	r3, [r7, #12]
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d001      	beq.n	8005b58 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	e055      	b.n	8005c04 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2202      	movs	r2, #2
 8005b5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2202      	movs	r2, #2
 8005b64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b68:	e01d      	b.n	8005ba6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b6a:	7bfb      	ldrb	r3, [r7, #15]
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d108      	bne.n	8005b82 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b70:	7bbb      	ldrb	r3, [r7, #14]
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d105      	bne.n	8005b82 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b76:	7b7b      	ldrb	r3, [r7, #13]
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d102      	bne.n	8005b82 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005b7c:	7b3b      	ldrb	r3, [r7, #12]
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d001      	beq.n	8005b86 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	e03e      	b.n	8005c04 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2202      	movs	r2, #2
 8005b8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2202      	movs	r2, #2
 8005b92:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2202      	movs	r2, #2
 8005b9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2202      	movs	r2, #2
 8005ba2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d003      	beq.n	8005bb4 <HAL_TIM_Encoder_Start+0xc4>
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	2b04      	cmp	r3, #4
 8005bb0:	d008      	beq.n	8005bc4 <HAL_TIM_Encoder_Start+0xd4>
 8005bb2:	e00f      	b.n	8005bd4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	2100      	movs	r1, #0
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f000 facd 	bl	800615c <TIM_CCxChannelCmd>
      break;
 8005bc2:	e016      	b.n	8005bf2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2201      	movs	r2, #1
 8005bca:	2104      	movs	r1, #4
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f000 fac5 	bl	800615c <TIM_CCxChannelCmd>
      break;
 8005bd2:	e00e      	b.n	8005bf2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	2201      	movs	r2, #1
 8005bda:	2100      	movs	r1, #0
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f000 fabd 	bl	800615c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	2201      	movs	r2, #1
 8005be8:	2104      	movs	r1, #4
 8005bea:	4618      	mov	r0, r3
 8005bec:	f000 fab6 	bl	800615c <TIM_CCxChannelCmd>
      break;
 8005bf0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f042 0201 	orr.w	r2, r2, #1
 8005c00:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005c02:	2300      	movs	r3, #0
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3710      	adds	r7, #16
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}

08005c0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b084      	sub	sp, #16
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d101      	bne.n	8005c26 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005c22:	2302      	movs	r3, #2
 8005c24:	e0ac      	b.n	8005d80 <HAL_TIM_PWM_ConfigChannel+0x174>
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2201      	movs	r2, #1
 8005c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2b0c      	cmp	r3, #12
 8005c32:	f200 809f 	bhi.w	8005d74 <HAL_TIM_PWM_ConfigChannel+0x168>
 8005c36:	a201      	add	r2, pc, #4	; (adr r2, 8005c3c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c3c:	08005c71 	.word	0x08005c71
 8005c40:	08005d75 	.word	0x08005d75
 8005c44:	08005d75 	.word	0x08005d75
 8005c48:	08005d75 	.word	0x08005d75
 8005c4c:	08005cb1 	.word	0x08005cb1
 8005c50:	08005d75 	.word	0x08005d75
 8005c54:	08005d75 	.word	0x08005d75
 8005c58:	08005d75 	.word	0x08005d75
 8005c5c:	08005cf3 	.word	0x08005cf3
 8005c60:	08005d75 	.word	0x08005d75
 8005c64:	08005d75 	.word	0x08005d75
 8005c68:	08005d75 	.word	0x08005d75
 8005c6c:	08005d33 	.word	0x08005d33
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	68b9      	ldr	r1, [r7, #8]
 8005c76:	4618      	mov	r0, r3
 8005c78:	f000 f8e8 	bl	8005e4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	699a      	ldr	r2, [r3, #24]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f042 0208 	orr.w	r2, r2, #8
 8005c8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	699a      	ldr	r2, [r3, #24]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f022 0204 	bic.w	r2, r2, #4
 8005c9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	6999      	ldr	r1, [r3, #24]
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	691a      	ldr	r2, [r3, #16]
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	430a      	orrs	r2, r1
 8005cac:	619a      	str	r2, [r3, #24]
      break;
 8005cae:	e062      	b.n	8005d76 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	68b9      	ldr	r1, [r7, #8]
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f000 f92e 	bl	8005f18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	699a      	ldr	r2, [r3, #24]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005cca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	699a      	ldr	r2, [r3, #24]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	6999      	ldr	r1, [r3, #24]
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	691b      	ldr	r3, [r3, #16]
 8005ce6:	021a      	lsls	r2, r3, #8
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	430a      	orrs	r2, r1
 8005cee:	619a      	str	r2, [r3, #24]
      break;
 8005cf0:	e041      	b.n	8005d76 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	68b9      	ldr	r1, [r7, #8]
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f000 f977 	bl	8005fec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	69da      	ldr	r2, [r3, #28]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f042 0208 	orr.w	r2, r2, #8
 8005d0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	69da      	ldr	r2, [r3, #28]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f022 0204 	bic.w	r2, r2, #4
 8005d1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	69d9      	ldr	r1, [r3, #28]
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	691a      	ldr	r2, [r3, #16]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	430a      	orrs	r2, r1
 8005d2e:	61da      	str	r2, [r3, #28]
      break;
 8005d30:	e021      	b.n	8005d76 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	68b9      	ldr	r1, [r7, #8]
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f000 f9c1 	bl	80060c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	69da      	ldr	r2, [r3, #28]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	69da      	ldr	r2, [r3, #28]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	69d9      	ldr	r1, [r3, #28]
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	691b      	ldr	r3, [r3, #16]
 8005d68:	021a      	lsls	r2, r3, #8
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	430a      	orrs	r2, r1
 8005d70:	61da      	str	r2, [r3, #28]
      break;
 8005d72:	e000      	b.n	8005d76 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005d74:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d7e:	2300      	movs	r3, #0
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3710      	adds	r7, #16
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}

08005d88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b085      	sub	sp, #20
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	4a29      	ldr	r2, [pc, #164]	; (8005e40 <TIM_Base_SetConfig+0xb8>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d00b      	beq.n	8005db8 <TIM_Base_SetConfig+0x30>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005da6:	d007      	beq.n	8005db8 <TIM_Base_SetConfig+0x30>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4a26      	ldr	r2, [pc, #152]	; (8005e44 <TIM_Base_SetConfig+0xbc>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d003      	beq.n	8005db8 <TIM_Base_SetConfig+0x30>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	4a25      	ldr	r2, [pc, #148]	; (8005e48 <TIM_Base_SetConfig+0xc0>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d108      	bne.n	8005dca <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	68fa      	ldr	r2, [r7, #12]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	4a1c      	ldr	r2, [pc, #112]	; (8005e40 <TIM_Base_SetConfig+0xb8>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d00b      	beq.n	8005dea <TIM_Base_SetConfig+0x62>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dd8:	d007      	beq.n	8005dea <TIM_Base_SetConfig+0x62>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4a19      	ldr	r2, [pc, #100]	; (8005e44 <TIM_Base_SetConfig+0xbc>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d003      	beq.n	8005dea <TIM_Base_SetConfig+0x62>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a18      	ldr	r2, [pc, #96]	; (8005e48 <TIM_Base_SetConfig+0xc0>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d108      	bne.n	8005dfc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005df0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	68db      	ldr	r3, [r3, #12]
 8005df6:	68fa      	ldr	r2, [r7, #12]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	695b      	ldr	r3, [r3, #20]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	689a      	ldr	r2, [r3, #8]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	4a07      	ldr	r2, [pc, #28]	; (8005e40 <TIM_Base_SetConfig+0xb8>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d103      	bne.n	8005e30 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	691a      	ldr	r2, [r3, #16]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	615a      	str	r2, [r3, #20]
}
 8005e36:	bf00      	nop
 8005e38:	3714      	adds	r7, #20
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bc80      	pop	{r7}
 8005e3e:	4770      	bx	lr
 8005e40:	40012c00 	.word	0x40012c00
 8005e44:	40000400 	.word	0x40000400
 8005e48:	40000800 	.word	0x40000800

08005e4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b087      	sub	sp, #28
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6a1b      	ldr	r3, [r3, #32]
 8005e5a:	f023 0201 	bic.w	r2, r3, #1
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6a1b      	ldr	r3, [r3, #32]
 8005e66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	699b      	ldr	r3, [r3, #24]
 8005e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f023 0303 	bic.w	r3, r3, #3
 8005e82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	68fa      	ldr	r2, [r7, #12]
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	f023 0302 	bic.w	r3, r3, #2
 8005e94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	697a      	ldr	r2, [r7, #20]
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	4a1c      	ldr	r2, [pc, #112]	; (8005f14 <TIM_OC1_SetConfig+0xc8>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d10c      	bne.n	8005ec2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	f023 0308 	bic.w	r3, r3, #8
 8005eae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	697a      	ldr	r2, [r7, #20]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	f023 0304 	bic.w	r3, r3, #4
 8005ec0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	4a13      	ldr	r2, [pc, #76]	; (8005f14 <TIM_OC1_SetConfig+0xc8>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d111      	bne.n	8005eee <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ed0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ed8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	695b      	ldr	r3, [r3, #20]
 8005ede:	693a      	ldr	r2, [r7, #16]
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	699b      	ldr	r3, [r3, #24]
 8005ee8:	693a      	ldr	r2, [r7, #16]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	693a      	ldr	r2, [r7, #16]
 8005ef2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	68fa      	ldr	r2, [r7, #12]
 8005ef8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	685a      	ldr	r2, [r3, #4]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	697a      	ldr	r2, [r7, #20]
 8005f06:	621a      	str	r2, [r3, #32]
}
 8005f08:	bf00      	nop
 8005f0a:	371c      	adds	r7, #28
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bc80      	pop	{r7}
 8005f10:	4770      	bx	lr
 8005f12:	bf00      	nop
 8005f14:	40012c00 	.word	0x40012c00

08005f18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b087      	sub	sp, #28
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6a1b      	ldr	r3, [r3, #32]
 8005f26:	f023 0210 	bic.w	r2, r3, #16
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6a1b      	ldr	r3, [r3, #32]
 8005f32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	699b      	ldr	r3, [r3, #24]
 8005f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	021b      	lsls	r3, r3, #8
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	f023 0320 	bic.w	r3, r3, #32
 8005f62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	011b      	lsls	r3, r3, #4
 8005f6a:	697a      	ldr	r2, [r7, #20]
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	4a1d      	ldr	r2, [pc, #116]	; (8005fe8 <TIM_OC2_SetConfig+0xd0>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d10d      	bne.n	8005f94 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	011b      	lsls	r3, r3, #4
 8005f86:	697a      	ldr	r2, [r7, #20]
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f92:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	4a14      	ldr	r2, [pc, #80]	; (8005fe8 <TIM_OC2_SetConfig+0xd0>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d113      	bne.n	8005fc4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005fa2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005faa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	695b      	ldr	r3, [r3, #20]
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	693a      	ldr	r2, [r7, #16]
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	699b      	ldr	r3, [r3, #24]
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	693a      	ldr	r2, [r7, #16]
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	693a      	ldr	r2, [r7, #16]
 8005fc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	68fa      	ldr	r2, [r7, #12]
 8005fce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	685a      	ldr	r2, [r3, #4]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	697a      	ldr	r2, [r7, #20]
 8005fdc:	621a      	str	r2, [r3, #32]
}
 8005fde:	bf00      	nop
 8005fe0:	371c      	adds	r7, #28
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bc80      	pop	{r7}
 8005fe6:	4770      	bx	lr
 8005fe8:	40012c00 	.word	0x40012c00

08005fec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b087      	sub	sp, #28
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6a1b      	ldr	r3, [r3, #32]
 8005ffa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6a1b      	ldr	r3, [r3, #32]
 8006006:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	69db      	ldr	r3, [r3, #28]
 8006012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800601a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f023 0303 	bic.w	r3, r3, #3
 8006022:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	68fa      	ldr	r2, [r7, #12]
 800602a:	4313      	orrs	r3, r2
 800602c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006034:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	021b      	lsls	r3, r3, #8
 800603c:	697a      	ldr	r2, [r7, #20]
 800603e:	4313      	orrs	r3, r2
 8006040:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a1d      	ldr	r2, [pc, #116]	; (80060bc <TIM_OC3_SetConfig+0xd0>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d10d      	bne.n	8006066 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006050:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	68db      	ldr	r3, [r3, #12]
 8006056:	021b      	lsls	r3, r3, #8
 8006058:	697a      	ldr	r2, [r7, #20]
 800605a:	4313      	orrs	r3, r2
 800605c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006064:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4a14      	ldr	r2, [pc, #80]	; (80060bc <TIM_OC3_SetConfig+0xd0>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d113      	bne.n	8006096 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006074:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800607c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	695b      	ldr	r3, [r3, #20]
 8006082:	011b      	lsls	r3, r3, #4
 8006084:	693a      	ldr	r2, [r7, #16]
 8006086:	4313      	orrs	r3, r2
 8006088:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	699b      	ldr	r3, [r3, #24]
 800608e:	011b      	lsls	r3, r3, #4
 8006090:	693a      	ldr	r2, [r7, #16]
 8006092:	4313      	orrs	r3, r2
 8006094:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	693a      	ldr	r2, [r7, #16]
 800609a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	68fa      	ldr	r2, [r7, #12]
 80060a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	685a      	ldr	r2, [r3, #4]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	697a      	ldr	r2, [r7, #20]
 80060ae:	621a      	str	r2, [r3, #32]
}
 80060b0:	bf00      	nop
 80060b2:	371c      	adds	r7, #28
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bc80      	pop	{r7}
 80060b8:	4770      	bx	lr
 80060ba:	bf00      	nop
 80060bc:	40012c00 	.word	0x40012c00

080060c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b087      	sub	sp, #28
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6a1b      	ldr	r3, [r3, #32]
 80060ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6a1b      	ldr	r3, [r3, #32]
 80060da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	69db      	ldr	r3, [r3, #28]
 80060e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	021b      	lsls	r3, r3, #8
 80060fe:	68fa      	ldr	r2, [r7, #12]
 8006100:	4313      	orrs	r3, r2
 8006102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800610a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	031b      	lsls	r3, r3, #12
 8006112:	693a      	ldr	r2, [r7, #16]
 8006114:	4313      	orrs	r3, r2
 8006116:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	4a0f      	ldr	r2, [pc, #60]	; (8006158 <TIM_OC4_SetConfig+0x98>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d109      	bne.n	8006134 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006126:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	695b      	ldr	r3, [r3, #20]
 800612c:	019b      	lsls	r3, r3, #6
 800612e:	697a      	ldr	r2, [r7, #20]
 8006130:	4313      	orrs	r3, r2
 8006132:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	697a      	ldr	r2, [r7, #20]
 8006138:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	68fa      	ldr	r2, [r7, #12]
 800613e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	685a      	ldr	r2, [r3, #4]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	693a      	ldr	r2, [r7, #16]
 800614c:	621a      	str	r2, [r3, #32]
}
 800614e:	bf00      	nop
 8006150:	371c      	adds	r7, #28
 8006152:	46bd      	mov	sp, r7
 8006154:	bc80      	pop	{r7}
 8006156:	4770      	bx	lr
 8006158:	40012c00 	.word	0x40012c00

0800615c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800615c:	b480      	push	{r7}
 800615e:	b087      	sub	sp, #28
 8006160:	af00      	add	r7, sp, #0
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	60b9      	str	r1, [r7, #8]
 8006166:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	f003 031f 	and.w	r3, r3, #31
 800616e:	2201      	movs	r2, #1
 8006170:	fa02 f303 	lsl.w	r3, r2, r3
 8006174:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	6a1a      	ldr	r2, [r3, #32]
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	43db      	mvns	r3, r3
 800617e:	401a      	ands	r2, r3
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6a1a      	ldr	r2, [r3, #32]
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	f003 031f 	and.w	r3, r3, #31
 800618e:	6879      	ldr	r1, [r7, #4]
 8006190:	fa01 f303 	lsl.w	r3, r1, r3
 8006194:	431a      	orrs	r2, r3
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	621a      	str	r2, [r3, #32]
}
 800619a:	bf00      	nop
 800619c:	371c      	adds	r7, #28
 800619e:	46bd      	mov	sp, r7
 80061a0:	bc80      	pop	{r7}
 80061a2:	4770      	bx	lr

080061a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b085      	sub	sp, #20
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d101      	bne.n	80061bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061b8:	2302      	movs	r3, #2
 80061ba:	e046      	b.n	800624a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2202      	movs	r2, #2
 80061c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	68fa      	ldr	r2, [r7, #12]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	68fa      	ldr	r2, [r7, #12]
 80061f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a16      	ldr	r2, [pc, #88]	; (8006254 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d00e      	beq.n	800621e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006208:	d009      	beq.n	800621e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a12      	ldr	r2, [pc, #72]	; (8006258 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d004      	beq.n	800621e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a10      	ldr	r2, [pc, #64]	; (800625c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d10c      	bne.n	8006238 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006224:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	68ba      	ldr	r2, [r7, #8]
 800622c:	4313      	orrs	r3, r2
 800622e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	68ba      	ldr	r2, [r7, #8]
 8006236:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2201      	movs	r2, #1
 800623c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006248:	2300      	movs	r3, #0
}
 800624a:	4618      	mov	r0, r3
 800624c:	3714      	adds	r7, #20
 800624e:	46bd      	mov	sp, r7
 8006250:	bc80      	pop	{r7}
 8006252:	4770      	bx	lr
 8006254:	40012c00 	.word	0x40012c00
 8006258:	40000400 	.word	0x40000400
 800625c:	40000800 	.word	0x40000800

08006260 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b082      	sub	sp, #8
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d101      	bne.n	8006272 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	e03f      	b.n	80062f2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006278:	b2db      	uxtb	r3, r3
 800627a:	2b00      	cmp	r3, #0
 800627c:	d106      	bne.n	800628c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2200      	movs	r2, #0
 8006282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f7fd fbac 	bl	80039e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2224      	movs	r2, #36	; 0x24
 8006290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	68da      	ldr	r2, [r3, #12]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80062a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f000 fc25 	bl	8006af4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	691a      	ldr	r2, [r3, #16]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80062b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	695a      	ldr	r2, [r3, #20]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80062c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	68da      	ldr	r2, [r3, #12]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80062d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2200      	movs	r2, #0
 80062de:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2220      	movs	r2, #32
 80062e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2220      	movs	r2, #32
 80062ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80062f0:	2300      	movs	r3, #0
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3708      	adds	r7, #8
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}

080062fa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062fa:	b580      	push	{r7, lr}
 80062fc:	b08a      	sub	sp, #40	; 0x28
 80062fe:	af02      	add	r7, sp, #8
 8006300:	60f8      	str	r0, [r7, #12]
 8006302:	60b9      	str	r1, [r7, #8]
 8006304:	603b      	str	r3, [r7, #0]
 8006306:	4613      	mov	r3, r2
 8006308:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800630a:	2300      	movs	r3, #0
 800630c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006314:	b2db      	uxtb	r3, r3
 8006316:	2b20      	cmp	r3, #32
 8006318:	d17c      	bne.n	8006414 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d002      	beq.n	8006326 <HAL_UART_Transmit+0x2c>
 8006320:	88fb      	ldrh	r3, [r7, #6]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d101      	bne.n	800632a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	e075      	b.n	8006416 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006330:	2b01      	cmp	r3, #1
 8006332:	d101      	bne.n	8006338 <HAL_UART_Transmit+0x3e>
 8006334:	2302      	movs	r3, #2
 8006336:	e06e      	b.n	8006416 <HAL_UART_Transmit+0x11c>
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2201      	movs	r2, #1
 800633c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2200      	movs	r2, #0
 8006344:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2221      	movs	r2, #33	; 0x21
 800634a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800634e:	f7fd fc1b 	bl	8003b88 <HAL_GetTick>
 8006352:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	88fa      	ldrh	r2, [r7, #6]
 8006358:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	88fa      	ldrh	r2, [r7, #6]
 800635e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006368:	d108      	bne.n	800637c <HAL_UART_Transmit+0x82>
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d104      	bne.n	800637c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006372:	2300      	movs	r3, #0
 8006374:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	61bb      	str	r3, [r7, #24]
 800637a:	e003      	b.n	8006384 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006380:	2300      	movs	r3, #0
 8006382:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2200      	movs	r2, #0
 8006388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800638c:	e02a      	b.n	80063e4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	9300      	str	r3, [sp, #0]
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	2200      	movs	r2, #0
 8006396:	2180      	movs	r1, #128	; 0x80
 8006398:	68f8      	ldr	r0, [r7, #12]
 800639a:	f000 fa11 	bl	80067c0 <UART_WaitOnFlagUntilTimeout>
 800639e:	4603      	mov	r3, r0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d001      	beq.n	80063a8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80063a4:	2303      	movs	r3, #3
 80063a6:	e036      	b.n	8006416 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80063a8:	69fb      	ldr	r3, [r7, #28]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d10b      	bne.n	80063c6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80063ae:	69bb      	ldr	r3, [r7, #24]
 80063b0:	881b      	ldrh	r3, [r3, #0]
 80063b2:	461a      	mov	r2, r3
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80063bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80063be:	69bb      	ldr	r3, [r7, #24]
 80063c0:	3302      	adds	r3, #2
 80063c2:	61bb      	str	r3, [r7, #24]
 80063c4:	e007      	b.n	80063d6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80063c6:	69fb      	ldr	r3, [r7, #28]
 80063c8:	781a      	ldrb	r2, [r3, #0]
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80063d0:	69fb      	ldr	r3, [r7, #28]
 80063d2:	3301      	adds	r3, #1
 80063d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80063da:	b29b      	uxth	r3, r3
 80063dc:	3b01      	subs	r3, #1
 80063de:	b29a      	uxth	r2, r3
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d1cf      	bne.n	800638e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	9300      	str	r3, [sp, #0]
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	2200      	movs	r2, #0
 80063f6:	2140      	movs	r1, #64	; 0x40
 80063f8:	68f8      	ldr	r0, [r7, #12]
 80063fa:	f000 f9e1 	bl	80067c0 <UART_WaitOnFlagUntilTimeout>
 80063fe:	4603      	mov	r3, r0
 8006400:	2b00      	cmp	r3, #0
 8006402:	d001      	beq.n	8006408 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006404:	2303      	movs	r3, #3
 8006406:	e006      	b.n	8006416 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2220      	movs	r2, #32
 800640c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006410:	2300      	movs	r3, #0
 8006412:	e000      	b.n	8006416 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006414:	2302      	movs	r3, #2
  }
}
 8006416:	4618      	mov	r0, r3
 8006418:	3720      	adds	r7, #32
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
	...

08006420 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b08a      	sub	sp, #40	; 0x28
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	68db      	ldr	r3, [r3, #12]
 8006436:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	695b      	ldr	r3, [r3, #20]
 800643e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8006440:	2300      	movs	r3, #0
 8006442:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8006444:	2300      	movs	r3, #0
 8006446:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644a:	f003 030f 	and.w	r3, r3, #15
 800644e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8006450:	69bb      	ldr	r3, [r7, #24]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d10d      	bne.n	8006472 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006458:	f003 0320 	and.w	r3, r3, #32
 800645c:	2b00      	cmp	r3, #0
 800645e:	d008      	beq.n	8006472 <HAL_UART_IRQHandler+0x52>
 8006460:	6a3b      	ldr	r3, [r7, #32]
 8006462:	f003 0320 	and.w	r3, r3, #32
 8006466:	2b00      	cmp	r3, #0
 8006468:	d003      	beq.n	8006472 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 fa99 	bl	80069a2 <UART_Receive_IT>
      return;
 8006470:	e17b      	b.n	800676a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006472:	69bb      	ldr	r3, [r7, #24]
 8006474:	2b00      	cmp	r3, #0
 8006476:	f000 80b1 	beq.w	80065dc <HAL_UART_IRQHandler+0x1bc>
 800647a:	69fb      	ldr	r3, [r7, #28]
 800647c:	f003 0301 	and.w	r3, r3, #1
 8006480:	2b00      	cmp	r3, #0
 8006482:	d105      	bne.n	8006490 <HAL_UART_IRQHandler+0x70>
 8006484:	6a3b      	ldr	r3, [r7, #32]
 8006486:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800648a:	2b00      	cmp	r3, #0
 800648c:	f000 80a6 	beq.w	80065dc <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006492:	f003 0301 	and.w	r3, r3, #1
 8006496:	2b00      	cmp	r3, #0
 8006498:	d00a      	beq.n	80064b0 <HAL_UART_IRQHandler+0x90>
 800649a:	6a3b      	ldr	r3, [r7, #32]
 800649c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d005      	beq.n	80064b0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a8:	f043 0201 	orr.w	r2, r3, #1
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80064b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b2:	f003 0304 	and.w	r3, r3, #4
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d00a      	beq.n	80064d0 <HAL_UART_IRQHandler+0xb0>
 80064ba:	69fb      	ldr	r3, [r7, #28]
 80064bc:	f003 0301 	and.w	r3, r3, #1
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d005      	beq.n	80064d0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c8:	f043 0202 	orr.w	r2, r3, #2
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80064d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d2:	f003 0302 	and.w	r3, r3, #2
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d00a      	beq.n	80064f0 <HAL_UART_IRQHandler+0xd0>
 80064da:	69fb      	ldr	r3, [r7, #28]
 80064dc:	f003 0301 	and.w	r3, r3, #1
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d005      	beq.n	80064f0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e8:	f043 0204 	orr.w	r2, r3, #4
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80064f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f2:	f003 0308 	and.w	r3, r3, #8
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d00f      	beq.n	800651a <HAL_UART_IRQHandler+0xfa>
 80064fa:	6a3b      	ldr	r3, [r7, #32]
 80064fc:	f003 0320 	and.w	r3, r3, #32
 8006500:	2b00      	cmp	r3, #0
 8006502:	d104      	bne.n	800650e <HAL_UART_IRQHandler+0xee>
 8006504:	69fb      	ldr	r3, [r7, #28]
 8006506:	f003 0301 	and.w	r3, r3, #1
 800650a:	2b00      	cmp	r3, #0
 800650c:	d005      	beq.n	800651a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006512:	f043 0208 	orr.w	r2, r3, #8
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800651e:	2b00      	cmp	r3, #0
 8006520:	f000 811e 	beq.w	8006760 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006526:	f003 0320 	and.w	r3, r3, #32
 800652a:	2b00      	cmp	r3, #0
 800652c:	d007      	beq.n	800653e <HAL_UART_IRQHandler+0x11e>
 800652e:	6a3b      	ldr	r3, [r7, #32]
 8006530:	f003 0320 	and.w	r3, r3, #32
 8006534:	2b00      	cmp	r3, #0
 8006536:	d002      	beq.n	800653e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f000 fa32 	bl	80069a2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	695b      	ldr	r3, [r3, #20]
 8006544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006548:	2b00      	cmp	r3, #0
 800654a:	bf14      	ite	ne
 800654c:	2301      	movne	r3, #1
 800654e:	2300      	moveq	r3, #0
 8006550:	b2db      	uxtb	r3, r3
 8006552:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006558:	f003 0308 	and.w	r3, r3, #8
 800655c:	2b00      	cmp	r3, #0
 800655e:	d102      	bne.n	8006566 <HAL_UART_IRQHandler+0x146>
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d031      	beq.n	80065ca <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f000 f974 	bl	8006854 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	695b      	ldr	r3, [r3, #20]
 8006572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006576:	2b00      	cmp	r3, #0
 8006578:	d023      	beq.n	80065c2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	695a      	ldr	r2, [r3, #20]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006588:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800658e:	2b00      	cmp	r3, #0
 8006590:	d013      	beq.n	80065ba <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006596:	4a76      	ldr	r2, [pc, #472]	; (8006770 <HAL_UART_IRQHandler+0x350>)
 8006598:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800659e:	4618      	mov	r0, r3
 80065a0:	f7fe f8e4 	bl	800476c <HAL_DMA_Abort_IT>
 80065a4:	4603      	mov	r3, r0
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d016      	beq.n	80065d8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80065b4:	4610      	mov	r0, r2
 80065b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065b8:	e00e      	b.n	80065d8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f000 f8ec 	bl	8006798 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065c0:	e00a      	b.n	80065d8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f000 f8e8 	bl	8006798 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065c8:	e006      	b.n	80065d8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f000 f8e4 	bl	8006798 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2200      	movs	r2, #0
 80065d4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80065d6:	e0c3      	b.n	8006760 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065d8:	bf00      	nop
    return;
 80065da:	e0c1      	b.n	8006760 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	f040 80a1 	bne.w	8006728 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80065e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e8:	f003 0310 	and.w	r3, r3, #16
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	f000 809b 	beq.w	8006728 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80065f2:	6a3b      	ldr	r3, [r7, #32]
 80065f4:	f003 0310 	and.w	r3, r3, #16
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	f000 8095 	beq.w	8006728 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80065fe:	2300      	movs	r3, #0
 8006600:	60fb      	str	r3, [r7, #12]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	60fb      	str	r3, [r7, #12]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	60fb      	str	r3, [r7, #12]
 8006612:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	695b      	ldr	r3, [r3, #20]
 800661a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800661e:	2b00      	cmp	r3, #0
 8006620:	d04e      	beq.n	80066c0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800662c:	8a3b      	ldrh	r3, [r7, #16]
 800662e:	2b00      	cmp	r3, #0
 8006630:	f000 8098 	beq.w	8006764 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006638:	8a3a      	ldrh	r2, [r7, #16]
 800663a:	429a      	cmp	r2, r3
 800663c:	f080 8092 	bcs.w	8006764 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	8a3a      	ldrh	r2, [r7, #16]
 8006644:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800664a:	699b      	ldr	r3, [r3, #24]
 800664c:	2b20      	cmp	r3, #32
 800664e:	d02b      	beq.n	80066a8 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	68da      	ldr	r2, [r3, #12]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800665e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	695a      	ldr	r2, [r3, #20]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f022 0201 	bic.w	r2, r2, #1
 800666e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	695a      	ldr	r2, [r3, #20]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800667e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2220      	movs	r2, #32
 8006684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2200      	movs	r2, #0
 800668c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	68da      	ldr	r2, [r3, #12]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f022 0210 	bic.w	r2, r2, #16
 800669c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a2:	4618      	mov	r0, r3
 80066a4:	f7fe f827 	bl	80046f6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	1ad3      	subs	r3, r2, r3
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	4619      	mov	r1, r3
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f000 f876 	bl	80067aa <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80066be:	e051      	b.n	8006764 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	1ad3      	subs	r3, r2, r3
 80066cc:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d047      	beq.n	8006768 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80066d8:	8a7b      	ldrh	r3, [r7, #18]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d044      	beq.n	8006768 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	68da      	ldr	r2, [r3, #12]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80066ec:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	695a      	ldr	r2, [r3, #20]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f022 0201 	bic.w	r2, r2, #1
 80066fc:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2220      	movs	r2, #32
 8006702:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	68da      	ldr	r2, [r3, #12]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f022 0210 	bic.w	r2, r2, #16
 800671a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800671c:	8a7b      	ldrh	r3, [r7, #18]
 800671e:	4619      	mov	r1, r3
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f000 f842 	bl	80067aa <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006726:	e01f      	b.n	8006768 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800672e:	2b00      	cmp	r3, #0
 8006730:	d008      	beq.n	8006744 <HAL_UART_IRQHandler+0x324>
 8006732:	6a3b      	ldr	r3, [r7, #32]
 8006734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006738:	2b00      	cmp	r3, #0
 800673a:	d003      	beq.n	8006744 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f000 f8c9 	bl	80068d4 <UART_Transmit_IT>
    return;
 8006742:	e012      	b.n	800676a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800674a:	2b00      	cmp	r3, #0
 800674c:	d00d      	beq.n	800676a <HAL_UART_IRQHandler+0x34a>
 800674e:	6a3b      	ldr	r3, [r7, #32]
 8006750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006754:	2b00      	cmp	r3, #0
 8006756:	d008      	beq.n	800676a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f000 f90a 	bl	8006972 <UART_EndTransmit_IT>
    return;
 800675e:	e004      	b.n	800676a <HAL_UART_IRQHandler+0x34a>
    return;
 8006760:	bf00      	nop
 8006762:	e002      	b.n	800676a <HAL_UART_IRQHandler+0x34a>
      return;
 8006764:	bf00      	nop
 8006766:	e000      	b.n	800676a <HAL_UART_IRQHandler+0x34a>
      return;
 8006768:	bf00      	nop
  }
}
 800676a:	3728      	adds	r7, #40	; 0x28
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}
 8006770:	080068ad 	.word	0x080068ad

08006774 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006774:	b480      	push	{r7}
 8006776:	b083      	sub	sp, #12
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800677c:	bf00      	nop
 800677e:	370c      	adds	r7, #12
 8006780:	46bd      	mov	sp, r7
 8006782:	bc80      	pop	{r7}
 8006784:	4770      	bx	lr

08006786 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006786:	b480      	push	{r7}
 8006788:	b083      	sub	sp, #12
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800678e:	bf00      	nop
 8006790:	370c      	adds	r7, #12
 8006792:	46bd      	mov	sp, r7
 8006794:	bc80      	pop	{r7}
 8006796:	4770      	bx	lr

08006798 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006798:	b480      	push	{r7}
 800679a:	b083      	sub	sp, #12
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80067a0:	bf00      	nop
 80067a2:	370c      	adds	r7, #12
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bc80      	pop	{r7}
 80067a8:	4770      	bx	lr

080067aa <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80067aa:	b480      	push	{r7}
 80067ac:	b083      	sub	sp, #12
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	6078      	str	r0, [r7, #4]
 80067b2:	460b      	mov	r3, r1
 80067b4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80067b6:	bf00      	nop
 80067b8:	370c      	adds	r7, #12
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bc80      	pop	{r7}
 80067be:	4770      	bx	lr

080067c0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b084      	sub	sp, #16
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	60f8      	str	r0, [r7, #12]
 80067c8:	60b9      	str	r1, [r7, #8]
 80067ca:	603b      	str	r3, [r7, #0]
 80067cc:	4613      	mov	r3, r2
 80067ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067d0:	e02c      	b.n	800682c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067d2:	69bb      	ldr	r3, [r7, #24]
 80067d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067d8:	d028      	beq.n	800682c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80067da:	69bb      	ldr	r3, [r7, #24]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d007      	beq.n	80067f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80067e0:	f7fd f9d2 	bl	8003b88 <HAL_GetTick>
 80067e4:	4602      	mov	r2, r0
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	1ad3      	subs	r3, r2, r3
 80067ea:	69ba      	ldr	r2, [r7, #24]
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d21d      	bcs.n	800682c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	68da      	ldr	r2, [r3, #12]
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80067fe:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	695a      	ldr	r2, [r3, #20]
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f022 0201 	bic.w	r2, r2, #1
 800680e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2220      	movs	r2, #32
 8006814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2220      	movs	r2, #32
 800681c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2200      	movs	r2, #0
 8006824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006828:	2303      	movs	r3, #3
 800682a:	e00f      	b.n	800684c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	4013      	ands	r3, r2
 8006836:	68ba      	ldr	r2, [r7, #8]
 8006838:	429a      	cmp	r2, r3
 800683a:	bf0c      	ite	eq
 800683c:	2301      	moveq	r3, #1
 800683e:	2300      	movne	r3, #0
 8006840:	b2db      	uxtb	r3, r3
 8006842:	461a      	mov	r2, r3
 8006844:	79fb      	ldrb	r3, [r7, #7]
 8006846:	429a      	cmp	r2, r3
 8006848:	d0c3      	beq.n	80067d2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800684a:	2300      	movs	r3, #0
}
 800684c:	4618      	mov	r0, r3
 800684e:	3710      	adds	r7, #16
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006854:	b480      	push	{r7}
 8006856:	b083      	sub	sp, #12
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	68da      	ldr	r2, [r3, #12]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800686a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	695a      	ldr	r2, [r3, #20]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f022 0201 	bic.w	r2, r2, #1
 800687a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006880:	2b01      	cmp	r3, #1
 8006882:	d107      	bne.n	8006894 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	68da      	ldr	r2, [r3, #12]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f022 0210 	bic.w	r2, r2, #16
 8006892:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2220      	movs	r2, #32
 8006898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2200      	movs	r2, #0
 80068a0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80068a2:	bf00      	nop
 80068a4:	370c      	adds	r7, #12
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bc80      	pop	{r7}
 80068aa:	4770      	bx	lr

080068ac <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b084      	sub	sp, #16
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2200      	movs	r2, #0
 80068be:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2200      	movs	r2, #0
 80068c4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80068c6:	68f8      	ldr	r0, [r7, #12]
 80068c8:	f7ff ff66 	bl	8006798 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068cc:	bf00      	nop
 80068ce:	3710      	adds	r7, #16
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}

080068d4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b085      	sub	sp, #20
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	2b21      	cmp	r3, #33	; 0x21
 80068e6:	d13e      	bne.n	8006966 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068f0:	d114      	bne.n	800691c <UART_Transmit_IT+0x48>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	691b      	ldr	r3, [r3, #16]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d110      	bne.n	800691c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6a1b      	ldr	r3, [r3, #32]
 80068fe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	881b      	ldrh	r3, [r3, #0]
 8006904:	461a      	mov	r2, r3
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800690e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6a1b      	ldr	r3, [r3, #32]
 8006914:	1c9a      	adds	r2, r3, #2
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	621a      	str	r2, [r3, #32]
 800691a:	e008      	b.n	800692e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6a1b      	ldr	r3, [r3, #32]
 8006920:	1c59      	adds	r1, r3, #1
 8006922:	687a      	ldr	r2, [r7, #4]
 8006924:	6211      	str	r1, [r2, #32]
 8006926:	781a      	ldrb	r2, [r3, #0]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006932:	b29b      	uxth	r3, r3
 8006934:	3b01      	subs	r3, #1
 8006936:	b29b      	uxth	r3, r3
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	4619      	mov	r1, r3
 800693c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800693e:	2b00      	cmp	r3, #0
 8006940:	d10f      	bne.n	8006962 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	68da      	ldr	r2, [r3, #12]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006950:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	68da      	ldr	r2, [r3, #12]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006960:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006962:	2300      	movs	r3, #0
 8006964:	e000      	b.n	8006968 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006966:	2302      	movs	r3, #2
  }
}
 8006968:	4618      	mov	r0, r3
 800696a:	3714      	adds	r7, #20
 800696c:	46bd      	mov	sp, r7
 800696e:	bc80      	pop	{r7}
 8006970:	4770      	bx	lr

08006972 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006972:	b580      	push	{r7, lr}
 8006974:	b082      	sub	sp, #8
 8006976:	af00      	add	r7, sp, #0
 8006978:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	68da      	ldr	r2, [r3, #12]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006988:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2220      	movs	r2, #32
 800698e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f7ff feee 	bl	8006774 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006998:	2300      	movs	r3, #0
}
 800699a:	4618      	mov	r0, r3
 800699c:	3708      	adds	r7, #8
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}

080069a2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80069a2:	b580      	push	{r7, lr}
 80069a4:	b086      	sub	sp, #24
 80069a6:	af00      	add	r7, sp, #0
 80069a8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	2b22      	cmp	r3, #34	; 0x22
 80069b4:	f040 8099 	bne.w	8006aea <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069c0:	d117      	bne.n	80069f2 <UART_Receive_IT+0x50>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	691b      	ldr	r3, [r3, #16]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d113      	bne.n	80069f2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80069ca:	2300      	movs	r3, #0
 80069cc:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069d2:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	b29b      	uxth	r3, r3
 80069dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069e0:	b29a      	uxth	r2, r3
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ea:	1c9a      	adds	r2, r3, #2
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	629a      	str	r2, [r3, #40]	; 0x28
 80069f0:	e026      	b.n	8006a40 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069f6:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80069f8:	2300      	movs	r3, #0
 80069fa:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a04:	d007      	beq.n	8006a16 <UART_Receive_IT+0x74>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d10a      	bne.n	8006a24 <UART_Receive_IT+0x82>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	691b      	ldr	r3, [r3, #16]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d106      	bne.n	8006a24 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	b2da      	uxtb	r2, r3
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	701a      	strb	r2, [r3, #0]
 8006a22:	e008      	b.n	8006a36 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	b2db      	uxtb	r3, r3
 8006a2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a30:	b2da      	uxtb	r2, r3
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a3a:	1c5a      	adds	r2, r3, #1
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	3b01      	subs	r3, #1
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	687a      	ldr	r2, [r7, #4]
 8006a4c:	4619      	mov	r1, r3
 8006a4e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d148      	bne.n	8006ae6 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	68da      	ldr	r2, [r3, #12]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f022 0220 	bic.w	r2, r2, #32
 8006a62:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	68da      	ldr	r2, [r3, #12]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a72:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	695a      	ldr	r2, [r3, #20]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f022 0201 	bic.w	r2, r2, #1
 8006a82:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2220      	movs	r2, #32
 8006a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d123      	bne.n	8006adc <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2200      	movs	r2, #0
 8006a98:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	68da      	ldr	r2, [r3, #12]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f022 0210 	bic.w	r2, r2, #16
 8006aa8:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f003 0310 	and.w	r3, r3, #16
 8006ab4:	2b10      	cmp	r3, #16
 8006ab6:	d10a      	bne.n	8006ace <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006ab8:	2300      	movs	r3, #0
 8006aba:	60fb      	str	r3, [r7, #12]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	60fb      	str	r3, [r7, #12]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	60fb      	str	r3, [r7, #12]
 8006acc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006ad2:	4619      	mov	r1, r3
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f7ff fe68 	bl	80067aa <HAL_UARTEx_RxEventCallback>
 8006ada:	e002      	b.n	8006ae2 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f7ff fe52 	bl	8006786 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	e002      	b.n	8006aec <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	e000      	b.n	8006aec <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8006aea:	2302      	movs	r3, #2
  }
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3718      	adds	r7, #24
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}

08006af4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b084      	sub	sp, #16
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	691b      	ldr	r3, [r3, #16]
 8006b02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	68da      	ldr	r2, [r3, #12]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	430a      	orrs	r2, r1
 8006b10:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	689a      	ldr	r2, [r3, #8]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	691b      	ldr	r3, [r3, #16]
 8006b1a:	431a      	orrs	r2, r3
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	695b      	ldr	r3, [r3, #20]
 8006b20:	4313      	orrs	r3, r2
 8006b22:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	68db      	ldr	r3, [r3, #12]
 8006b2a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006b2e:	f023 030c 	bic.w	r3, r3, #12
 8006b32:	687a      	ldr	r2, [r7, #4]
 8006b34:	6812      	ldr	r2, [r2, #0]
 8006b36:	68b9      	ldr	r1, [r7, #8]
 8006b38:	430b      	orrs	r3, r1
 8006b3a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	695b      	ldr	r3, [r3, #20]
 8006b42:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	699a      	ldr	r2, [r3, #24]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	430a      	orrs	r2, r1
 8006b50:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a2c      	ldr	r2, [pc, #176]	; (8006c08 <UART_SetConfig+0x114>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d103      	bne.n	8006b64 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006b5c:	f7fe fd4c 	bl	80055f8 <HAL_RCC_GetPCLK2Freq>
 8006b60:	60f8      	str	r0, [r7, #12]
 8006b62:	e002      	b.n	8006b6a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006b64:	f7fe fd34 	bl	80055d0 <HAL_RCC_GetPCLK1Freq>
 8006b68:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006b6a:	68fa      	ldr	r2, [r7, #12]
 8006b6c:	4613      	mov	r3, r2
 8006b6e:	009b      	lsls	r3, r3, #2
 8006b70:	4413      	add	r3, r2
 8006b72:	009a      	lsls	r2, r3, #2
 8006b74:	441a      	add	r2, r3
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	009b      	lsls	r3, r3, #2
 8006b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b80:	4a22      	ldr	r2, [pc, #136]	; (8006c0c <UART_SetConfig+0x118>)
 8006b82:	fba2 2303 	umull	r2, r3, r2, r3
 8006b86:	095b      	lsrs	r3, r3, #5
 8006b88:	0119      	lsls	r1, r3, #4
 8006b8a:	68fa      	ldr	r2, [r7, #12]
 8006b8c:	4613      	mov	r3, r2
 8006b8e:	009b      	lsls	r3, r3, #2
 8006b90:	4413      	add	r3, r2
 8006b92:	009a      	lsls	r2, r3, #2
 8006b94:	441a      	add	r2, r3
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006ba0:	4b1a      	ldr	r3, [pc, #104]	; (8006c0c <UART_SetConfig+0x118>)
 8006ba2:	fba3 0302 	umull	r0, r3, r3, r2
 8006ba6:	095b      	lsrs	r3, r3, #5
 8006ba8:	2064      	movs	r0, #100	; 0x64
 8006baa:	fb00 f303 	mul.w	r3, r0, r3
 8006bae:	1ad3      	subs	r3, r2, r3
 8006bb0:	011b      	lsls	r3, r3, #4
 8006bb2:	3332      	adds	r3, #50	; 0x32
 8006bb4:	4a15      	ldr	r2, [pc, #84]	; (8006c0c <UART_SetConfig+0x118>)
 8006bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8006bba:	095b      	lsrs	r3, r3, #5
 8006bbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006bc0:	4419      	add	r1, r3
 8006bc2:	68fa      	ldr	r2, [r7, #12]
 8006bc4:	4613      	mov	r3, r2
 8006bc6:	009b      	lsls	r3, r3, #2
 8006bc8:	4413      	add	r3, r2
 8006bca:	009a      	lsls	r2, r3, #2
 8006bcc:	441a      	add	r2, r3
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	fbb2 f2f3 	udiv	r2, r2, r3
 8006bd8:	4b0c      	ldr	r3, [pc, #48]	; (8006c0c <UART_SetConfig+0x118>)
 8006bda:	fba3 0302 	umull	r0, r3, r3, r2
 8006bde:	095b      	lsrs	r3, r3, #5
 8006be0:	2064      	movs	r0, #100	; 0x64
 8006be2:	fb00 f303 	mul.w	r3, r0, r3
 8006be6:	1ad3      	subs	r3, r2, r3
 8006be8:	011b      	lsls	r3, r3, #4
 8006bea:	3332      	adds	r3, #50	; 0x32
 8006bec:	4a07      	ldr	r2, [pc, #28]	; (8006c0c <UART_SetConfig+0x118>)
 8006bee:	fba2 2303 	umull	r2, r3, r2, r3
 8006bf2:	095b      	lsrs	r3, r3, #5
 8006bf4:	f003 020f 	and.w	r2, r3, #15
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	440a      	add	r2, r1
 8006bfe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006c00:	bf00      	nop
 8006c02:	3710      	adds	r7, #16
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}
 8006c08:	40013800 	.word	0x40013800
 8006c0c:	51eb851f 	.word	0x51eb851f

08006c10 <pow>:
 8006c10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c14:	4614      	mov	r4, r2
 8006c16:	461d      	mov	r5, r3
 8006c18:	4680      	mov	r8, r0
 8006c1a:	4689      	mov	r9, r1
 8006c1c:	f000 f860 	bl	8006ce0 <__ieee754_pow>
 8006c20:	4622      	mov	r2, r4
 8006c22:	4606      	mov	r6, r0
 8006c24:	460f      	mov	r7, r1
 8006c26:	462b      	mov	r3, r5
 8006c28:	4620      	mov	r0, r4
 8006c2a:	4629      	mov	r1, r5
 8006c2c:	f7f9 fee6 	bl	80009fc <__aeabi_dcmpun>
 8006c30:	bbc8      	cbnz	r0, 8006ca6 <pow+0x96>
 8006c32:	2200      	movs	r2, #0
 8006c34:	2300      	movs	r3, #0
 8006c36:	4640      	mov	r0, r8
 8006c38:	4649      	mov	r1, r9
 8006c3a:	f7f9 fead 	bl	8000998 <__aeabi_dcmpeq>
 8006c3e:	b1b8      	cbz	r0, 8006c70 <pow+0x60>
 8006c40:	2200      	movs	r2, #0
 8006c42:	2300      	movs	r3, #0
 8006c44:	4620      	mov	r0, r4
 8006c46:	4629      	mov	r1, r5
 8006c48:	f7f9 fea6 	bl	8000998 <__aeabi_dcmpeq>
 8006c4c:	2800      	cmp	r0, #0
 8006c4e:	d141      	bne.n	8006cd4 <pow+0xc4>
 8006c50:	4620      	mov	r0, r4
 8006c52:	4629      	mov	r1, r5
 8006c54:	f000 fe39 	bl	80078ca <finite>
 8006c58:	b328      	cbz	r0, 8006ca6 <pow+0x96>
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	4620      	mov	r0, r4
 8006c60:	4629      	mov	r1, r5
 8006c62:	f7f9 fea3 	bl	80009ac <__aeabi_dcmplt>
 8006c66:	b1f0      	cbz	r0, 8006ca6 <pow+0x96>
 8006c68:	f000 feb4 	bl	80079d4 <__errno>
 8006c6c:	2322      	movs	r3, #34	; 0x22
 8006c6e:	e019      	b.n	8006ca4 <pow+0x94>
 8006c70:	4630      	mov	r0, r6
 8006c72:	4639      	mov	r1, r7
 8006c74:	f000 fe29 	bl	80078ca <finite>
 8006c78:	b9c8      	cbnz	r0, 8006cae <pow+0x9e>
 8006c7a:	4640      	mov	r0, r8
 8006c7c:	4649      	mov	r1, r9
 8006c7e:	f000 fe24 	bl	80078ca <finite>
 8006c82:	b1a0      	cbz	r0, 8006cae <pow+0x9e>
 8006c84:	4620      	mov	r0, r4
 8006c86:	4629      	mov	r1, r5
 8006c88:	f000 fe1f 	bl	80078ca <finite>
 8006c8c:	b178      	cbz	r0, 8006cae <pow+0x9e>
 8006c8e:	4632      	mov	r2, r6
 8006c90:	463b      	mov	r3, r7
 8006c92:	4630      	mov	r0, r6
 8006c94:	4639      	mov	r1, r7
 8006c96:	f7f9 feb1 	bl	80009fc <__aeabi_dcmpun>
 8006c9a:	2800      	cmp	r0, #0
 8006c9c:	d0e4      	beq.n	8006c68 <pow+0x58>
 8006c9e:	f000 fe99 	bl	80079d4 <__errno>
 8006ca2:	2321      	movs	r3, #33	; 0x21
 8006ca4:	6003      	str	r3, [r0, #0]
 8006ca6:	4630      	mov	r0, r6
 8006ca8:	4639      	mov	r1, r7
 8006caa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006cae:	2200      	movs	r2, #0
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	4630      	mov	r0, r6
 8006cb4:	4639      	mov	r1, r7
 8006cb6:	f7f9 fe6f 	bl	8000998 <__aeabi_dcmpeq>
 8006cba:	2800      	cmp	r0, #0
 8006cbc:	d0f3      	beq.n	8006ca6 <pow+0x96>
 8006cbe:	4640      	mov	r0, r8
 8006cc0:	4649      	mov	r1, r9
 8006cc2:	f000 fe02 	bl	80078ca <finite>
 8006cc6:	2800      	cmp	r0, #0
 8006cc8:	d0ed      	beq.n	8006ca6 <pow+0x96>
 8006cca:	4620      	mov	r0, r4
 8006ccc:	4629      	mov	r1, r5
 8006cce:	f000 fdfc 	bl	80078ca <finite>
 8006cd2:	e7c8      	b.n	8006c66 <pow+0x56>
 8006cd4:	2600      	movs	r6, #0
 8006cd6:	4f01      	ldr	r7, [pc, #4]	; (8006cdc <pow+0xcc>)
 8006cd8:	e7e5      	b.n	8006ca6 <pow+0x96>
 8006cda:	bf00      	nop
 8006cdc:	3ff00000 	.word	0x3ff00000

08006ce0 <__ieee754_pow>:
 8006ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ce4:	b093      	sub	sp, #76	; 0x4c
 8006ce6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006cea:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 8006cee:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8006cf2:	4689      	mov	r9, r1
 8006cf4:	ea56 0102 	orrs.w	r1, r6, r2
 8006cf8:	4680      	mov	r8, r0
 8006cfa:	d111      	bne.n	8006d20 <__ieee754_pow+0x40>
 8006cfc:	1803      	adds	r3, r0, r0
 8006cfe:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8006d02:	4152      	adcs	r2, r2
 8006d04:	4299      	cmp	r1, r3
 8006d06:	4b82      	ldr	r3, [pc, #520]	; (8006f10 <__ieee754_pow+0x230>)
 8006d08:	4193      	sbcs	r3, r2
 8006d0a:	f080 84b9 	bcs.w	8007680 <__ieee754_pow+0x9a0>
 8006d0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006d12:	4640      	mov	r0, r8
 8006d14:	4649      	mov	r1, r9
 8006d16:	f7f9 fa21 	bl	800015c <__adddf3>
 8006d1a:	4683      	mov	fp, r0
 8006d1c:	468c      	mov	ip, r1
 8006d1e:	e06f      	b.n	8006e00 <__ieee754_pow+0x120>
 8006d20:	4b7c      	ldr	r3, [pc, #496]	; (8006f14 <__ieee754_pow+0x234>)
 8006d22:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8006d26:	429c      	cmp	r4, r3
 8006d28:	464d      	mov	r5, r9
 8006d2a:	4682      	mov	sl, r0
 8006d2c:	dc06      	bgt.n	8006d3c <__ieee754_pow+0x5c>
 8006d2e:	d101      	bne.n	8006d34 <__ieee754_pow+0x54>
 8006d30:	2800      	cmp	r0, #0
 8006d32:	d1ec      	bne.n	8006d0e <__ieee754_pow+0x2e>
 8006d34:	429e      	cmp	r6, r3
 8006d36:	dc01      	bgt.n	8006d3c <__ieee754_pow+0x5c>
 8006d38:	d10f      	bne.n	8006d5a <__ieee754_pow+0x7a>
 8006d3a:	b172      	cbz	r2, 8006d5a <__ieee754_pow+0x7a>
 8006d3c:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8006d40:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8006d44:	ea55 050a 	orrs.w	r5, r5, sl
 8006d48:	d1e1      	bne.n	8006d0e <__ieee754_pow+0x2e>
 8006d4a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8006d4e:	18db      	adds	r3, r3, r3
 8006d50:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8006d54:	4152      	adcs	r2, r2
 8006d56:	429d      	cmp	r5, r3
 8006d58:	e7d5      	b.n	8006d06 <__ieee754_pow+0x26>
 8006d5a:	2d00      	cmp	r5, #0
 8006d5c:	da39      	bge.n	8006dd2 <__ieee754_pow+0xf2>
 8006d5e:	4b6e      	ldr	r3, [pc, #440]	; (8006f18 <__ieee754_pow+0x238>)
 8006d60:	429e      	cmp	r6, r3
 8006d62:	dc52      	bgt.n	8006e0a <__ieee754_pow+0x12a>
 8006d64:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8006d68:	429e      	cmp	r6, r3
 8006d6a:	f340 849c 	ble.w	80076a6 <__ieee754_pow+0x9c6>
 8006d6e:	1533      	asrs	r3, r6, #20
 8006d70:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006d74:	2b14      	cmp	r3, #20
 8006d76:	dd0f      	ble.n	8006d98 <__ieee754_pow+0xb8>
 8006d78:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8006d7c:	fa22 f103 	lsr.w	r1, r2, r3
 8006d80:	fa01 f303 	lsl.w	r3, r1, r3
 8006d84:	4293      	cmp	r3, r2
 8006d86:	f040 848e 	bne.w	80076a6 <__ieee754_pow+0x9c6>
 8006d8a:	f001 0101 	and.w	r1, r1, #1
 8006d8e:	f1c1 0302 	rsb	r3, r1, #2
 8006d92:	9300      	str	r3, [sp, #0]
 8006d94:	b182      	cbz	r2, 8006db8 <__ieee754_pow+0xd8>
 8006d96:	e05d      	b.n	8006e54 <__ieee754_pow+0x174>
 8006d98:	2a00      	cmp	r2, #0
 8006d9a:	d159      	bne.n	8006e50 <__ieee754_pow+0x170>
 8006d9c:	f1c3 0314 	rsb	r3, r3, #20
 8006da0:	fa46 f103 	asr.w	r1, r6, r3
 8006da4:	fa01 f303 	lsl.w	r3, r1, r3
 8006da8:	42b3      	cmp	r3, r6
 8006daa:	f040 8479 	bne.w	80076a0 <__ieee754_pow+0x9c0>
 8006dae:	f001 0101 	and.w	r1, r1, #1
 8006db2:	f1c1 0302 	rsb	r3, r1, #2
 8006db6:	9300      	str	r3, [sp, #0]
 8006db8:	4b58      	ldr	r3, [pc, #352]	; (8006f1c <__ieee754_pow+0x23c>)
 8006dba:	429e      	cmp	r6, r3
 8006dbc:	d132      	bne.n	8006e24 <__ieee754_pow+0x144>
 8006dbe:	2f00      	cmp	r7, #0
 8006dc0:	f280 846a 	bge.w	8007698 <__ieee754_pow+0x9b8>
 8006dc4:	4642      	mov	r2, r8
 8006dc6:	464b      	mov	r3, r9
 8006dc8:	2000      	movs	r0, #0
 8006dca:	4954      	ldr	r1, [pc, #336]	; (8006f1c <__ieee754_pow+0x23c>)
 8006dcc:	f7f9 fca6 	bl	800071c <__aeabi_ddiv>
 8006dd0:	e7a3      	b.n	8006d1a <__ieee754_pow+0x3a>
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	9300      	str	r3, [sp, #0]
 8006dd6:	2a00      	cmp	r2, #0
 8006dd8:	d13c      	bne.n	8006e54 <__ieee754_pow+0x174>
 8006dda:	4b4e      	ldr	r3, [pc, #312]	; (8006f14 <__ieee754_pow+0x234>)
 8006ddc:	429e      	cmp	r6, r3
 8006dde:	d1eb      	bne.n	8006db8 <__ieee754_pow+0xd8>
 8006de0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8006de4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8006de8:	ea53 030a 	orrs.w	r3, r3, sl
 8006dec:	f000 8448 	beq.w	8007680 <__ieee754_pow+0x9a0>
 8006df0:	4b4b      	ldr	r3, [pc, #300]	; (8006f20 <__ieee754_pow+0x240>)
 8006df2:	429c      	cmp	r4, r3
 8006df4:	dd0b      	ble.n	8006e0e <__ieee754_pow+0x12e>
 8006df6:	2f00      	cmp	r7, #0
 8006df8:	f2c0 8448 	blt.w	800768c <__ieee754_pow+0x9ac>
 8006dfc:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8006e00:	4658      	mov	r0, fp
 8006e02:	4661      	mov	r1, ip
 8006e04:	b013      	add	sp, #76	; 0x4c
 8006e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e0a:	2302      	movs	r3, #2
 8006e0c:	e7e2      	b.n	8006dd4 <__ieee754_pow+0xf4>
 8006e0e:	2f00      	cmp	r7, #0
 8006e10:	f04f 0b00 	mov.w	fp, #0
 8006e14:	f04f 0c00 	mov.w	ip, #0
 8006e18:	daf2      	bge.n	8006e00 <__ieee754_pow+0x120>
 8006e1a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8006e1e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8006e22:	e7ed      	b.n	8006e00 <__ieee754_pow+0x120>
 8006e24:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8006e28:	d106      	bne.n	8006e38 <__ieee754_pow+0x158>
 8006e2a:	4642      	mov	r2, r8
 8006e2c:	464b      	mov	r3, r9
 8006e2e:	4640      	mov	r0, r8
 8006e30:	4649      	mov	r1, r9
 8006e32:	f7f9 fb49 	bl	80004c8 <__aeabi_dmul>
 8006e36:	e770      	b.n	8006d1a <__ieee754_pow+0x3a>
 8006e38:	4b3a      	ldr	r3, [pc, #232]	; (8006f24 <__ieee754_pow+0x244>)
 8006e3a:	429f      	cmp	r7, r3
 8006e3c:	d10a      	bne.n	8006e54 <__ieee754_pow+0x174>
 8006e3e:	2d00      	cmp	r5, #0
 8006e40:	db08      	blt.n	8006e54 <__ieee754_pow+0x174>
 8006e42:	4640      	mov	r0, r8
 8006e44:	4649      	mov	r1, r9
 8006e46:	b013      	add	sp, #76	; 0x4c
 8006e48:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e4c:	f000 bc5e 	b.w	800770c <__ieee754_sqrt>
 8006e50:	2300      	movs	r3, #0
 8006e52:	9300      	str	r3, [sp, #0]
 8006e54:	4640      	mov	r0, r8
 8006e56:	4649      	mov	r1, r9
 8006e58:	f000 fd34 	bl	80078c4 <fabs>
 8006e5c:	4683      	mov	fp, r0
 8006e5e:	468c      	mov	ip, r1
 8006e60:	f1ba 0f00 	cmp.w	sl, #0
 8006e64:	d128      	bne.n	8006eb8 <__ieee754_pow+0x1d8>
 8006e66:	b124      	cbz	r4, 8006e72 <__ieee754_pow+0x192>
 8006e68:	4b2c      	ldr	r3, [pc, #176]	; (8006f1c <__ieee754_pow+0x23c>)
 8006e6a:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d122      	bne.n	8006eb8 <__ieee754_pow+0x1d8>
 8006e72:	2f00      	cmp	r7, #0
 8006e74:	da07      	bge.n	8006e86 <__ieee754_pow+0x1a6>
 8006e76:	465a      	mov	r2, fp
 8006e78:	4663      	mov	r3, ip
 8006e7a:	2000      	movs	r0, #0
 8006e7c:	4927      	ldr	r1, [pc, #156]	; (8006f1c <__ieee754_pow+0x23c>)
 8006e7e:	f7f9 fc4d 	bl	800071c <__aeabi_ddiv>
 8006e82:	4683      	mov	fp, r0
 8006e84:	468c      	mov	ip, r1
 8006e86:	2d00      	cmp	r5, #0
 8006e88:	daba      	bge.n	8006e00 <__ieee754_pow+0x120>
 8006e8a:	9b00      	ldr	r3, [sp, #0]
 8006e8c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006e90:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006e94:	4323      	orrs	r3, r4
 8006e96:	d108      	bne.n	8006eaa <__ieee754_pow+0x1ca>
 8006e98:	465a      	mov	r2, fp
 8006e9a:	4663      	mov	r3, ip
 8006e9c:	4658      	mov	r0, fp
 8006e9e:	4661      	mov	r1, ip
 8006ea0:	f7f9 f95a 	bl	8000158 <__aeabi_dsub>
 8006ea4:	4602      	mov	r2, r0
 8006ea6:	460b      	mov	r3, r1
 8006ea8:	e790      	b.n	8006dcc <__ieee754_pow+0xec>
 8006eaa:	9b00      	ldr	r3, [sp, #0]
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d1a7      	bne.n	8006e00 <__ieee754_pow+0x120>
 8006eb0:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8006eb4:	469c      	mov	ip, r3
 8006eb6:	e7a3      	b.n	8006e00 <__ieee754_pow+0x120>
 8006eb8:	0feb      	lsrs	r3, r5, #31
 8006eba:	3b01      	subs	r3, #1
 8006ebc:	930c      	str	r3, [sp, #48]	; 0x30
 8006ebe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ec0:	9b00      	ldr	r3, [sp, #0]
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	d104      	bne.n	8006ed0 <__ieee754_pow+0x1f0>
 8006ec6:	4642      	mov	r2, r8
 8006ec8:	464b      	mov	r3, r9
 8006eca:	4640      	mov	r0, r8
 8006ecc:	4649      	mov	r1, r9
 8006ece:	e7e7      	b.n	8006ea0 <__ieee754_pow+0x1c0>
 8006ed0:	4b15      	ldr	r3, [pc, #84]	; (8006f28 <__ieee754_pow+0x248>)
 8006ed2:	429e      	cmp	r6, r3
 8006ed4:	f340 80f6 	ble.w	80070c4 <__ieee754_pow+0x3e4>
 8006ed8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8006edc:	429e      	cmp	r6, r3
 8006ede:	4b10      	ldr	r3, [pc, #64]	; (8006f20 <__ieee754_pow+0x240>)
 8006ee0:	dd09      	ble.n	8006ef6 <__ieee754_pow+0x216>
 8006ee2:	429c      	cmp	r4, r3
 8006ee4:	dc0c      	bgt.n	8006f00 <__ieee754_pow+0x220>
 8006ee6:	2f00      	cmp	r7, #0
 8006ee8:	da0c      	bge.n	8006f04 <__ieee754_pow+0x224>
 8006eea:	2000      	movs	r0, #0
 8006eec:	b013      	add	sp, #76	; 0x4c
 8006eee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ef2:	f000 bce2 	b.w	80078ba <__math_oflow>
 8006ef6:	429c      	cmp	r4, r3
 8006ef8:	dbf5      	blt.n	8006ee6 <__ieee754_pow+0x206>
 8006efa:	4b08      	ldr	r3, [pc, #32]	; (8006f1c <__ieee754_pow+0x23c>)
 8006efc:	429c      	cmp	r4, r3
 8006efe:	dd15      	ble.n	8006f2c <__ieee754_pow+0x24c>
 8006f00:	2f00      	cmp	r7, #0
 8006f02:	dcf2      	bgt.n	8006eea <__ieee754_pow+0x20a>
 8006f04:	2000      	movs	r0, #0
 8006f06:	b013      	add	sp, #76	; 0x4c
 8006f08:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f0c:	f000 bcd0 	b.w	80078b0 <__math_uflow>
 8006f10:	fff00000 	.word	0xfff00000
 8006f14:	7ff00000 	.word	0x7ff00000
 8006f18:	433fffff 	.word	0x433fffff
 8006f1c:	3ff00000 	.word	0x3ff00000
 8006f20:	3fefffff 	.word	0x3fefffff
 8006f24:	3fe00000 	.word	0x3fe00000
 8006f28:	41e00000 	.word	0x41e00000
 8006f2c:	4661      	mov	r1, ip
 8006f2e:	2200      	movs	r2, #0
 8006f30:	4658      	mov	r0, fp
 8006f32:	4b5f      	ldr	r3, [pc, #380]	; (80070b0 <__ieee754_pow+0x3d0>)
 8006f34:	f7f9 f910 	bl	8000158 <__aeabi_dsub>
 8006f38:	a355      	add	r3, pc, #340	; (adr r3, 8007090 <__ieee754_pow+0x3b0>)
 8006f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f3e:	4604      	mov	r4, r0
 8006f40:	460d      	mov	r5, r1
 8006f42:	f7f9 fac1 	bl	80004c8 <__aeabi_dmul>
 8006f46:	a354      	add	r3, pc, #336	; (adr r3, 8007098 <__ieee754_pow+0x3b8>)
 8006f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f4c:	4606      	mov	r6, r0
 8006f4e:	460f      	mov	r7, r1
 8006f50:	4620      	mov	r0, r4
 8006f52:	4629      	mov	r1, r5
 8006f54:	f7f9 fab8 	bl	80004c8 <__aeabi_dmul>
 8006f58:	2200      	movs	r2, #0
 8006f5a:	4682      	mov	sl, r0
 8006f5c:	468b      	mov	fp, r1
 8006f5e:	4620      	mov	r0, r4
 8006f60:	4629      	mov	r1, r5
 8006f62:	4b54      	ldr	r3, [pc, #336]	; (80070b4 <__ieee754_pow+0x3d4>)
 8006f64:	f7f9 fab0 	bl	80004c8 <__aeabi_dmul>
 8006f68:	4602      	mov	r2, r0
 8006f6a:	460b      	mov	r3, r1
 8006f6c:	a14c      	add	r1, pc, #304	; (adr r1, 80070a0 <__ieee754_pow+0x3c0>)
 8006f6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f72:	f7f9 f8f1 	bl	8000158 <__aeabi_dsub>
 8006f76:	4622      	mov	r2, r4
 8006f78:	462b      	mov	r3, r5
 8006f7a:	f7f9 faa5 	bl	80004c8 <__aeabi_dmul>
 8006f7e:	4602      	mov	r2, r0
 8006f80:	460b      	mov	r3, r1
 8006f82:	2000      	movs	r0, #0
 8006f84:	494c      	ldr	r1, [pc, #304]	; (80070b8 <__ieee754_pow+0x3d8>)
 8006f86:	f7f9 f8e7 	bl	8000158 <__aeabi_dsub>
 8006f8a:	4622      	mov	r2, r4
 8006f8c:	462b      	mov	r3, r5
 8006f8e:	4680      	mov	r8, r0
 8006f90:	4689      	mov	r9, r1
 8006f92:	4620      	mov	r0, r4
 8006f94:	4629      	mov	r1, r5
 8006f96:	f7f9 fa97 	bl	80004c8 <__aeabi_dmul>
 8006f9a:	4602      	mov	r2, r0
 8006f9c:	460b      	mov	r3, r1
 8006f9e:	4640      	mov	r0, r8
 8006fa0:	4649      	mov	r1, r9
 8006fa2:	f7f9 fa91 	bl	80004c8 <__aeabi_dmul>
 8006fa6:	a340      	add	r3, pc, #256	; (adr r3, 80070a8 <__ieee754_pow+0x3c8>)
 8006fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fac:	f7f9 fa8c 	bl	80004c8 <__aeabi_dmul>
 8006fb0:	4602      	mov	r2, r0
 8006fb2:	460b      	mov	r3, r1
 8006fb4:	4650      	mov	r0, sl
 8006fb6:	4659      	mov	r1, fp
 8006fb8:	f7f9 f8ce 	bl	8000158 <__aeabi_dsub>
 8006fbc:	f04f 0a00 	mov.w	sl, #0
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	460b      	mov	r3, r1
 8006fc4:	4604      	mov	r4, r0
 8006fc6:	460d      	mov	r5, r1
 8006fc8:	4630      	mov	r0, r6
 8006fca:	4639      	mov	r1, r7
 8006fcc:	f7f9 f8c6 	bl	800015c <__adddf3>
 8006fd0:	4632      	mov	r2, r6
 8006fd2:	463b      	mov	r3, r7
 8006fd4:	4650      	mov	r0, sl
 8006fd6:	468b      	mov	fp, r1
 8006fd8:	f7f9 f8be 	bl	8000158 <__aeabi_dsub>
 8006fdc:	4602      	mov	r2, r0
 8006fde:	460b      	mov	r3, r1
 8006fe0:	4620      	mov	r0, r4
 8006fe2:	4629      	mov	r1, r5
 8006fe4:	f7f9 f8b8 	bl	8000158 <__aeabi_dsub>
 8006fe8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006fec:	9b00      	ldr	r3, [sp, #0]
 8006fee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ff0:	3b01      	subs	r3, #1
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	f04f 0600 	mov.w	r6, #0
 8006ff8:	f04f 0200 	mov.w	r2, #0
 8006ffc:	bf0c      	ite	eq
 8006ffe:	4b2f      	ldreq	r3, [pc, #188]	; (80070bc <__ieee754_pow+0x3dc>)
 8007000:	4b2b      	ldrne	r3, [pc, #172]	; (80070b0 <__ieee754_pow+0x3d0>)
 8007002:	4604      	mov	r4, r0
 8007004:	460d      	mov	r5, r1
 8007006:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800700a:	e9cd 2300 	strd	r2, r3, [sp]
 800700e:	4632      	mov	r2, r6
 8007010:	463b      	mov	r3, r7
 8007012:	f7f9 f8a1 	bl	8000158 <__aeabi_dsub>
 8007016:	4652      	mov	r2, sl
 8007018:	465b      	mov	r3, fp
 800701a:	f7f9 fa55 	bl	80004c8 <__aeabi_dmul>
 800701e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007022:	4680      	mov	r8, r0
 8007024:	4689      	mov	r9, r1
 8007026:	4620      	mov	r0, r4
 8007028:	4629      	mov	r1, r5
 800702a:	f7f9 fa4d 	bl	80004c8 <__aeabi_dmul>
 800702e:	4602      	mov	r2, r0
 8007030:	460b      	mov	r3, r1
 8007032:	4640      	mov	r0, r8
 8007034:	4649      	mov	r1, r9
 8007036:	f7f9 f891 	bl	800015c <__adddf3>
 800703a:	4632      	mov	r2, r6
 800703c:	463b      	mov	r3, r7
 800703e:	4680      	mov	r8, r0
 8007040:	4689      	mov	r9, r1
 8007042:	4650      	mov	r0, sl
 8007044:	4659      	mov	r1, fp
 8007046:	f7f9 fa3f 	bl	80004c8 <__aeabi_dmul>
 800704a:	4604      	mov	r4, r0
 800704c:	460d      	mov	r5, r1
 800704e:	460b      	mov	r3, r1
 8007050:	4602      	mov	r2, r0
 8007052:	4649      	mov	r1, r9
 8007054:	4640      	mov	r0, r8
 8007056:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800705a:	f7f9 f87f 	bl	800015c <__adddf3>
 800705e:	4b18      	ldr	r3, [pc, #96]	; (80070c0 <__ieee754_pow+0x3e0>)
 8007060:	4682      	mov	sl, r0
 8007062:	4299      	cmp	r1, r3
 8007064:	460f      	mov	r7, r1
 8007066:	460e      	mov	r6, r1
 8007068:	f340 82e5 	ble.w	8007636 <__ieee754_pow+0x956>
 800706c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8007070:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8007074:	4303      	orrs	r3, r0
 8007076:	f000 81df 	beq.w	8007438 <__ieee754_pow+0x758>
 800707a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800707e:	2200      	movs	r2, #0
 8007080:	2300      	movs	r3, #0
 8007082:	f7f9 fc93 	bl	80009ac <__aeabi_dcmplt>
 8007086:	3800      	subs	r0, #0
 8007088:	bf18      	it	ne
 800708a:	2001      	movne	r0, #1
 800708c:	e72e      	b.n	8006eec <__ieee754_pow+0x20c>
 800708e:	bf00      	nop
 8007090:	60000000 	.word	0x60000000
 8007094:	3ff71547 	.word	0x3ff71547
 8007098:	f85ddf44 	.word	0xf85ddf44
 800709c:	3e54ae0b 	.word	0x3e54ae0b
 80070a0:	55555555 	.word	0x55555555
 80070a4:	3fd55555 	.word	0x3fd55555
 80070a8:	652b82fe 	.word	0x652b82fe
 80070ac:	3ff71547 	.word	0x3ff71547
 80070b0:	3ff00000 	.word	0x3ff00000
 80070b4:	3fd00000 	.word	0x3fd00000
 80070b8:	3fe00000 	.word	0x3fe00000
 80070bc:	bff00000 	.word	0xbff00000
 80070c0:	408fffff 	.word	0x408fffff
 80070c4:	4bd2      	ldr	r3, [pc, #840]	; (8007410 <__ieee754_pow+0x730>)
 80070c6:	2200      	movs	r2, #0
 80070c8:	402b      	ands	r3, r5
 80070ca:	b943      	cbnz	r3, 80070de <__ieee754_pow+0x3fe>
 80070cc:	4658      	mov	r0, fp
 80070ce:	4661      	mov	r1, ip
 80070d0:	4bd0      	ldr	r3, [pc, #832]	; (8007414 <__ieee754_pow+0x734>)
 80070d2:	f7f9 f9f9 	bl	80004c8 <__aeabi_dmul>
 80070d6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80070da:	4683      	mov	fp, r0
 80070dc:	460c      	mov	r4, r1
 80070de:	1523      	asrs	r3, r4, #20
 80070e0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80070e4:	4413      	add	r3, r2
 80070e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80070e8:	4bcb      	ldr	r3, [pc, #812]	; (8007418 <__ieee754_pow+0x738>)
 80070ea:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80070ee:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80070f2:	429c      	cmp	r4, r3
 80070f4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80070f8:	dd08      	ble.n	800710c <__ieee754_pow+0x42c>
 80070fa:	4bc8      	ldr	r3, [pc, #800]	; (800741c <__ieee754_pow+0x73c>)
 80070fc:	429c      	cmp	r4, r3
 80070fe:	f340 8199 	ble.w	8007434 <__ieee754_pow+0x754>
 8007102:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007104:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8007108:	3301      	adds	r3, #1
 800710a:	930b      	str	r3, [sp, #44]	; 0x2c
 800710c:	2600      	movs	r6, #0
 800710e:	00f3      	lsls	r3, r6, #3
 8007110:	930d      	str	r3, [sp, #52]	; 0x34
 8007112:	4bc3      	ldr	r3, [pc, #780]	; (8007420 <__ieee754_pow+0x740>)
 8007114:	4658      	mov	r0, fp
 8007116:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800711a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800711e:	4629      	mov	r1, r5
 8007120:	461a      	mov	r2, r3
 8007122:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8007126:	4623      	mov	r3, r4
 8007128:	f7f9 f816 	bl	8000158 <__aeabi_dsub>
 800712c:	46da      	mov	sl, fp
 800712e:	462b      	mov	r3, r5
 8007130:	4652      	mov	r2, sl
 8007132:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8007136:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800713a:	f7f9 f80f 	bl	800015c <__adddf3>
 800713e:	4602      	mov	r2, r0
 8007140:	460b      	mov	r3, r1
 8007142:	2000      	movs	r0, #0
 8007144:	49b7      	ldr	r1, [pc, #732]	; (8007424 <__ieee754_pow+0x744>)
 8007146:	f7f9 fae9 	bl	800071c <__aeabi_ddiv>
 800714a:	4602      	mov	r2, r0
 800714c:	460b      	mov	r3, r1
 800714e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007152:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007156:	f7f9 f9b7 	bl	80004c8 <__aeabi_dmul>
 800715a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800715e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8007162:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007166:	2300      	movs	r3, #0
 8007168:	2200      	movs	r2, #0
 800716a:	46ab      	mov	fp, r5
 800716c:	106d      	asrs	r5, r5, #1
 800716e:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007172:	9304      	str	r3, [sp, #16]
 8007174:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8007178:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800717c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8007180:	4640      	mov	r0, r8
 8007182:	4649      	mov	r1, r9
 8007184:	4614      	mov	r4, r2
 8007186:	461d      	mov	r5, r3
 8007188:	f7f9 f99e 	bl	80004c8 <__aeabi_dmul>
 800718c:	4602      	mov	r2, r0
 800718e:	460b      	mov	r3, r1
 8007190:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007194:	f7f8 ffe0 	bl	8000158 <__aeabi_dsub>
 8007198:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800719c:	4606      	mov	r6, r0
 800719e:	460f      	mov	r7, r1
 80071a0:	4620      	mov	r0, r4
 80071a2:	4629      	mov	r1, r5
 80071a4:	f7f8 ffd8 	bl	8000158 <__aeabi_dsub>
 80071a8:	4602      	mov	r2, r0
 80071aa:	460b      	mov	r3, r1
 80071ac:	4650      	mov	r0, sl
 80071ae:	4659      	mov	r1, fp
 80071b0:	f7f8 ffd2 	bl	8000158 <__aeabi_dsub>
 80071b4:	4642      	mov	r2, r8
 80071b6:	464b      	mov	r3, r9
 80071b8:	f7f9 f986 	bl	80004c8 <__aeabi_dmul>
 80071bc:	4602      	mov	r2, r0
 80071be:	460b      	mov	r3, r1
 80071c0:	4630      	mov	r0, r6
 80071c2:	4639      	mov	r1, r7
 80071c4:	f7f8 ffc8 	bl	8000158 <__aeabi_dsub>
 80071c8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80071cc:	f7f9 f97c 	bl	80004c8 <__aeabi_dmul>
 80071d0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80071d4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80071d8:	4610      	mov	r0, r2
 80071da:	4619      	mov	r1, r3
 80071dc:	f7f9 f974 	bl	80004c8 <__aeabi_dmul>
 80071e0:	a379      	add	r3, pc, #484	; (adr r3, 80073c8 <__ieee754_pow+0x6e8>)
 80071e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e6:	4604      	mov	r4, r0
 80071e8:	460d      	mov	r5, r1
 80071ea:	f7f9 f96d 	bl	80004c8 <__aeabi_dmul>
 80071ee:	a378      	add	r3, pc, #480	; (adr r3, 80073d0 <__ieee754_pow+0x6f0>)
 80071f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f4:	f7f8 ffb2 	bl	800015c <__adddf3>
 80071f8:	4622      	mov	r2, r4
 80071fa:	462b      	mov	r3, r5
 80071fc:	f7f9 f964 	bl	80004c8 <__aeabi_dmul>
 8007200:	a375      	add	r3, pc, #468	; (adr r3, 80073d8 <__ieee754_pow+0x6f8>)
 8007202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007206:	f7f8 ffa9 	bl	800015c <__adddf3>
 800720a:	4622      	mov	r2, r4
 800720c:	462b      	mov	r3, r5
 800720e:	f7f9 f95b 	bl	80004c8 <__aeabi_dmul>
 8007212:	a373      	add	r3, pc, #460	; (adr r3, 80073e0 <__ieee754_pow+0x700>)
 8007214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007218:	f7f8 ffa0 	bl	800015c <__adddf3>
 800721c:	4622      	mov	r2, r4
 800721e:	462b      	mov	r3, r5
 8007220:	f7f9 f952 	bl	80004c8 <__aeabi_dmul>
 8007224:	a370      	add	r3, pc, #448	; (adr r3, 80073e8 <__ieee754_pow+0x708>)
 8007226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800722a:	f7f8 ff97 	bl	800015c <__adddf3>
 800722e:	4622      	mov	r2, r4
 8007230:	462b      	mov	r3, r5
 8007232:	f7f9 f949 	bl	80004c8 <__aeabi_dmul>
 8007236:	a36e      	add	r3, pc, #440	; (adr r3, 80073f0 <__ieee754_pow+0x710>)
 8007238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800723c:	f7f8 ff8e 	bl	800015c <__adddf3>
 8007240:	4622      	mov	r2, r4
 8007242:	4606      	mov	r6, r0
 8007244:	460f      	mov	r7, r1
 8007246:	462b      	mov	r3, r5
 8007248:	4620      	mov	r0, r4
 800724a:	4629      	mov	r1, r5
 800724c:	f7f9 f93c 	bl	80004c8 <__aeabi_dmul>
 8007250:	4602      	mov	r2, r0
 8007252:	460b      	mov	r3, r1
 8007254:	4630      	mov	r0, r6
 8007256:	4639      	mov	r1, r7
 8007258:	f7f9 f936 	bl	80004c8 <__aeabi_dmul>
 800725c:	4604      	mov	r4, r0
 800725e:	460d      	mov	r5, r1
 8007260:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007264:	4642      	mov	r2, r8
 8007266:	464b      	mov	r3, r9
 8007268:	f7f8 ff78 	bl	800015c <__adddf3>
 800726c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007270:	f7f9 f92a 	bl	80004c8 <__aeabi_dmul>
 8007274:	4622      	mov	r2, r4
 8007276:	462b      	mov	r3, r5
 8007278:	f7f8 ff70 	bl	800015c <__adddf3>
 800727c:	4642      	mov	r2, r8
 800727e:	4606      	mov	r6, r0
 8007280:	460f      	mov	r7, r1
 8007282:	464b      	mov	r3, r9
 8007284:	4640      	mov	r0, r8
 8007286:	4649      	mov	r1, r9
 8007288:	f7f9 f91e 	bl	80004c8 <__aeabi_dmul>
 800728c:	2200      	movs	r2, #0
 800728e:	4b66      	ldr	r3, [pc, #408]	; (8007428 <__ieee754_pow+0x748>)
 8007290:	4682      	mov	sl, r0
 8007292:	468b      	mov	fp, r1
 8007294:	f7f8 ff62 	bl	800015c <__adddf3>
 8007298:	4632      	mov	r2, r6
 800729a:	463b      	mov	r3, r7
 800729c:	f7f8 ff5e 	bl	800015c <__adddf3>
 80072a0:	2400      	movs	r4, #0
 80072a2:	460d      	mov	r5, r1
 80072a4:	4622      	mov	r2, r4
 80072a6:	460b      	mov	r3, r1
 80072a8:	4640      	mov	r0, r8
 80072aa:	4649      	mov	r1, r9
 80072ac:	f7f9 f90c 	bl	80004c8 <__aeabi_dmul>
 80072b0:	2200      	movs	r2, #0
 80072b2:	4680      	mov	r8, r0
 80072b4:	4689      	mov	r9, r1
 80072b6:	4620      	mov	r0, r4
 80072b8:	4629      	mov	r1, r5
 80072ba:	4b5b      	ldr	r3, [pc, #364]	; (8007428 <__ieee754_pow+0x748>)
 80072bc:	f7f8 ff4c 	bl	8000158 <__aeabi_dsub>
 80072c0:	4652      	mov	r2, sl
 80072c2:	465b      	mov	r3, fp
 80072c4:	f7f8 ff48 	bl	8000158 <__aeabi_dsub>
 80072c8:	4602      	mov	r2, r0
 80072ca:	460b      	mov	r3, r1
 80072cc:	4630      	mov	r0, r6
 80072ce:	4639      	mov	r1, r7
 80072d0:	f7f8 ff42 	bl	8000158 <__aeabi_dsub>
 80072d4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80072d8:	f7f9 f8f6 	bl	80004c8 <__aeabi_dmul>
 80072dc:	4622      	mov	r2, r4
 80072de:	4606      	mov	r6, r0
 80072e0:	460f      	mov	r7, r1
 80072e2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80072e6:	462b      	mov	r3, r5
 80072e8:	f7f9 f8ee 	bl	80004c8 <__aeabi_dmul>
 80072ec:	4602      	mov	r2, r0
 80072ee:	460b      	mov	r3, r1
 80072f0:	4630      	mov	r0, r6
 80072f2:	4639      	mov	r1, r7
 80072f4:	f7f8 ff32 	bl	800015c <__adddf3>
 80072f8:	2400      	movs	r4, #0
 80072fa:	4606      	mov	r6, r0
 80072fc:	460f      	mov	r7, r1
 80072fe:	4602      	mov	r2, r0
 8007300:	460b      	mov	r3, r1
 8007302:	4640      	mov	r0, r8
 8007304:	4649      	mov	r1, r9
 8007306:	f7f8 ff29 	bl	800015c <__adddf3>
 800730a:	a33b      	add	r3, pc, #236	; (adr r3, 80073f8 <__ieee754_pow+0x718>)
 800730c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007310:	4620      	mov	r0, r4
 8007312:	460d      	mov	r5, r1
 8007314:	f7f9 f8d8 	bl	80004c8 <__aeabi_dmul>
 8007318:	4642      	mov	r2, r8
 800731a:	464b      	mov	r3, r9
 800731c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007320:	4620      	mov	r0, r4
 8007322:	4629      	mov	r1, r5
 8007324:	f7f8 ff18 	bl	8000158 <__aeabi_dsub>
 8007328:	4602      	mov	r2, r0
 800732a:	460b      	mov	r3, r1
 800732c:	4630      	mov	r0, r6
 800732e:	4639      	mov	r1, r7
 8007330:	f7f8 ff12 	bl	8000158 <__aeabi_dsub>
 8007334:	a332      	add	r3, pc, #200	; (adr r3, 8007400 <__ieee754_pow+0x720>)
 8007336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800733a:	f7f9 f8c5 	bl	80004c8 <__aeabi_dmul>
 800733e:	a332      	add	r3, pc, #200	; (adr r3, 8007408 <__ieee754_pow+0x728>)
 8007340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007344:	4606      	mov	r6, r0
 8007346:	460f      	mov	r7, r1
 8007348:	4620      	mov	r0, r4
 800734a:	4629      	mov	r1, r5
 800734c:	f7f9 f8bc 	bl	80004c8 <__aeabi_dmul>
 8007350:	4602      	mov	r2, r0
 8007352:	460b      	mov	r3, r1
 8007354:	4630      	mov	r0, r6
 8007356:	4639      	mov	r1, r7
 8007358:	f7f8 ff00 	bl	800015c <__adddf3>
 800735c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800735e:	4b33      	ldr	r3, [pc, #204]	; (800742c <__ieee754_pow+0x74c>)
 8007360:	f04f 0a00 	mov.w	sl, #0
 8007364:	4413      	add	r3, r2
 8007366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800736a:	f7f8 fef7 	bl	800015c <__adddf3>
 800736e:	4680      	mov	r8, r0
 8007370:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007372:	4689      	mov	r9, r1
 8007374:	f7f9 f83e 	bl	80003f4 <__aeabi_i2d>
 8007378:	4604      	mov	r4, r0
 800737a:	460d      	mov	r5, r1
 800737c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800737e:	4b2c      	ldr	r3, [pc, #176]	; (8007430 <__ieee754_pow+0x750>)
 8007380:	4413      	add	r3, r2
 8007382:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007386:	4642      	mov	r2, r8
 8007388:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800738c:	464b      	mov	r3, r9
 800738e:	f7f8 fee5 	bl	800015c <__adddf3>
 8007392:	4632      	mov	r2, r6
 8007394:	463b      	mov	r3, r7
 8007396:	f7f8 fee1 	bl	800015c <__adddf3>
 800739a:	4622      	mov	r2, r4
 800739c:	462b      	mov	r3, r5
 800739e:	f7f8 fedd 	bl	800015c <__adddf3>
 80073a2:	4622      	mov	r2, r4
 80073a4:	462b      	mov	r3, r5
 80073a6:	4650      	mov	r0, sl
 80073a8:	468b      	mov	fp, r1
 80073aa:	f7f8 fed5 	bl	8000158 <__aeabi_dsub>
 80073ae:	4632      	mov	r2, r6
 80073b0:	463b      	mov	r3, r7
 80073b2:	f7f8 fed1 	bl	8000158 <__aeabi_dsub>
 80073b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80073ba:	f7f8 fecd 	bl	8000158 <__aeabi_dsub>
 80073be:	4602      	mov	r2, r0
 80073c0:	460b      	mov	r3, r1
 80073c2:	4640      	mov	r0, r8
 80073c4:	4649      	mov	r1, r9
 80073c6:	e60d      	b.n	8006fe4 <__ieee754_pow+0x304>
 80073c8:	4a454eef 	.word	0x4a454eef
 80073cc:	3fca7e28 	.word	0x3fca7e28
 80073d0:	93c9db65 	.word	0x93c9db65
 80073d4:	3fcd864a 	.word	0x3fcd864a
 80073d8:	a91d4101 	.word	0xa91d4101
 80073dc:	3fd17460 	.word	0x3fd17460
 80073e0:	518f264d 	.word	0x518f264d
 80073e4:	3fd55555 	.word	0x3fd55555
 80073e8:	db6fabff 	.word	0xdb6fabff
 80073ec:	3fdb6db6 	.word	0x3fdb6db6
 80073f0:	33333303 	.word	0x33333303
 80073f4:	3fe33333 	.word	0x3fe33333
 80073f8:	e0000000 	.word	0xe0000000
 80073fc:	3feec709 	.word	0x3feec709
 8007400:	dc3a03fd 	.word	0xdc3a03fd
 8007404:	3feec709 	.word	0x3feec709
 8007408:	145b01f5 	.word	0x145b01f5
 800740c:	be3e2fe0 	.word	0xbe3e2fe0
 8007410:	7ff00000 	.word	0x7ff00000
 8007414:	43400000 	.word	0x43400000
 8007418:	0003988e 	.word	0x0003988e
 800741c:	000bb679 	.word	0x000bb679
 8007420:	08007a78 	.word	0x08007a78
 8007424:	3ff00000 	.word	0x3ff00000
 8007428:	40080000 	.word	0x40080000
 800742c:	08007a98 	.word	0x08007a98
 8007430:	08007a88 	.word	0x08007a88
 8007434:	2601      	movs	r6, #1
 8007436:	e66a      	b.n	800710e <__ieee754_pow+0x42e>
 8007438:	a39d      	add	r3, pc, #628	; (adr r3, 80076b0 <__ieee754_pow+0x9d0>)
 800743a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800743e:	4640      	mov	r0, r8
 8007440:	4649      	mov	r1, r9
 8007442:	f7f8 fe8b 	bl	800015c <__adddf3>
 8007446:	4622      	mov	r2, r4
 8007448:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800744c:	462b      	mov	r3, r5
 800744e:	4650      	mov	r0, sl
 8007450:	4639      	mov	r1, r7
 8007452:	f7f8 fe81 	bl	8000158 <__aeabi_dsub>
 8007456:	4602      	mov	r2, r0
 8007458:	460b      	mov	r3, r1
 800745a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800745e:	f7f9 fac3 	bl	80009e8 <__aeabi_dcmpgt>
 8007462:	2800      	cmp	r0, #0
 8007464:	f47f ae09 	bne.w	800707a <__ieee754_pow+0x39a>
 8007468:	4aa3      	ldr	r2, [pc, #652]	; (80076f8 <__ieee754_pow+0xa18>)
 800746a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800746e:	4293      	cmp	r3, r2
 8007470:	f340 8101 	ble.w	8007676 <__ieee754_pow+0x996>
 8007474:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8007478:	2000      	movs	r0, #0
 800747a:	151b      	asrs	r3, r3, #20
 800747c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8007480:	fa4a f303 	asr.w	r3, sl, r3
 8007484:	4433      	add	r3, r6
 8007486:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800748a:	4f9c      	ldr	r7, [pc, #624]	; (80076fc <__ieee754_pow+0xa1c>)
 800748c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8007490:	4117      	asrs	r7, r2
 8007492:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8007496:	ea23 0107 	bic.w	r1, r3, r7
 800749a:	f1c2 0214 	rsb	r2, r2, #20
 800749e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80074a2:	460b      	mov	r3, r1
 80074a4:	fa4a fa02 	asr.w	sl, sl, r2
 80074a8:	2e00      	cmp	r6, #0
 80074aa:	4602      	mov	r2, r0
 80074ac:	4629      	mov	r1, r5
 80074ae:	4620      	mov	r0, r4
 80074b0:	bfb8      	it	lt
 80074b2:	f1ca 0a00 	rsblt	sl, sl, #0
 80074b6:	f7f8 fe4f 	bl	8000158 <__aeabi_dsub>
 80074ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074c2:	2400      	movs	r4, #0
 80074c4:	4642      	mov	r2, r8
 80074c6:	464b      	mov	r3, r9
 80074c8:	f7f8 fe48 	bl	800015c <__adddf3>
 80074cc:	a37a      	add	r3, pc, #488	; (adr r3, 80076b8 <__ieee754_pow+0x9d8>)
 80074ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d2:	4620      	mov	r0, r4
 80074d4:	460d      	mov	r5, r1
 80074d6:	f7f8 fff7 	bl	80004c8 <__aeabi_dmul>
 80074da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80074de:	4606      	mov	r6, r0
 80074e0:	460f      	mov	r7, r1
 80074e2:	4620      	mov	r0, r4
 80074e4:	4629      	mov	r1, r5
 80074e6:	f7f8 fe37 	bl	8000158 <__aeabi_dsub>
 80074ea:	4602      	mov	r2, r0
 80074ec:	460b      	mov	r3, r1
 80074ee:	4640      	mov	r0, r8
 80074f0:	4649      	mov	r1, r9
 80074f2:	f7f8 fe31 	bl	8000158 <__aeabi_dsub>
 80074f6:	a372      	add	r3, pc, #456	; (adr r3, 80076c0 <__ieee754_pow+0x9e0>)
 80074f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074fc:	f7f8 ffe4 	bl	80004c8 <__aeabi_dmul>
 8007500:	a371      	add	r3, pc, #452	; (adr r3, 80076c8 <__ieee754_pow+0x9e8>)
 8007502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007506:	4680      	mov	r8, r0
 8007508:	4689      	mov	r9, r1
 800750a:	4620      	mov	r0, r4
 800750c:	4629      	mov	r1, r5
 800750e:	f7f8 ffdb 	bl	80004c8 <__aeabi_dmul>
 8007512:	4602      	mov	r2, r0
 8007514:	460b      	mov	r3, r1
 8007516:	4640      	mov	r0, r8
 8007518:	4649      	mov	r1, r9
 800751a:	f7f8 fe1f 	bl	800015c <__adddf3>
 800751e:	4604      	mov	r4, r0
 8007520:	460d      	mov	r5, r1
 8007522:	4602      	mov	r2, r0
 8007524:	460b      	mov	r3, r1
 8007526:	4630      	mov	r0, r6
 8007528:	4639      	mov	r1, r7
 800752a:	f7f8 fe17 	bl	800015c <__adddf3>
 800752e:	4632      	mov	r2, r6
 8007530:	463b      	mov	r3, r7
 8007532:	4680      	mov	r8, r0
 8007534:	4689      	mov	r9, r1
 8007536:	f7f8 fe0f 	bl	8000158 <__aeabi_dsub>
 800753a:	4602      	mov	r2, r0
 800753c:	460b      	mov	r3, r1
 800753e:	4620      	mov	r0, r4
 8007540:	4629      	mov	r1, r5
 8007542:	f7f8 fe09 	bl	8000158 <__aeabi_dsub>
 8007546:	4642      	mov	r2, r8
 8007548:	4606      	mov	r6, r0
 800754a:	460f      	mov	r7, r1
 800754c:	464b      	mov	r3, r9
 800754e:	4640      	mov	r0, r8
 8007550:	4649      	mov	r1, r9
 8007552:	f7f8 ffb9 	bl	80004c8 <__aeabi_dmul>
 8007556:	a35e      	add	r3, pc, #376	; (adr r3, 80076d0 <__ieee754_pow+0x9f0>)
 8007558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800755c:	4604      	mov	r4, r0
 800755e:	460d      	mov	r5, r1
 8007560:	f7f8 ffb2 	bl	80004c8 <__aeabi_dmul>
 8007564:	a35c      	add	r3, pc, #368	; (adr r3, 80076d8 <__ieee754_pow+0x9f8>)
 8007566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800756a:	f7f8 fdf5 	bl	8000158 <__aeabi_dsub>
 800756e:	4622      	mov	r2, r4
 8007570:	462b      	mov	r3, r5
 8007572:	f7f8 ffa9 	bl	80004c8 <__aeabi_dmul>
 8007576:	a35a      	add	r3, pc, #360	; (adr r3, 80076e0 <__ieee754_pow+0xa00>)
 8007578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800757c:	f7f8 fdee 	bl	800015c <__adddf3>
 8007580:	4622      	mov	r2, r4
 8007582:	462b      	mov	r3, r5
 8007584:	f7f8 ffa0 	bl	80004c8 <__aeabi_dmul>
 8007588:	a357      	add	r3, pc, #348	; (adr r3, 80076e8 <__ieee754_pow+0xa08>)
 800758a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800758e:	f7f8 fde3 	bl	8000158 <__aeabi_dsub>
 8007592:	4622      	mov	r2, r4
 8007594:	462b      	mov	r3, r5
 8007596:	f7f8 ff97 	bl	80004c8 <__aeabi_dmul>
 800759a:	a355      	add	r3, pc, #340	; (adr r3, 80076f0 <__ieee754_pow+0xa10>)
 800759c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a0:	f7f8 fddc 	bl	800015c <__adddf3>
 80075a4:	4622      	mov	r2, r4
 80075a6:	462b      	mov	r3, r5
 80075a8:	f7f8 ff8e 	bl	80004c8 <__aeabi_dmul>
 80075ac:	4602      	mov	r2, r0
 80075ae:	460b      	mov	r3, r1
 80075b0:	4640      	mov	r0, r8
 80075b2:	4649      	mov	r1, r9
 80075b4:	f7f8 fdd0 	bl	8000158 <__aeabi_dsub>
 80075b8:	4604      	mov	r4, r0
 80075ba:	460d      	mov	r5, r1
 80075bc:	4602      	mov	r2, r0
 80075be:	460b      	mov	r3, r1
 80075c0:	4640      	mov	r0, r8
 80075c2:	4649      	mov	r1, r9
 80075c4:	f7f8 ff80 	bl	80004c8 <__aeabi_dmul>
 80075c8:	2200      	movs	r2, #0
 80075ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80075d2:	4620      	mov	r0, r4
 80075d4:	4629      	mov	r1, r5
 80075d6:	f7f8 fdbf 	bl	8000158 <__aeabi_dsub>
 80075da:	4602      	mov	r2, r0
 80075dc:	460b      	mov	r3, r1
 80075de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075e2:	f7f9 f89b 	bl	800071c <__aeabi_ddiv>
 80075e6:	4632      	mov	r2, r6
 80075e8:	4604      	mov	r4, r0
 80075ea:	460d      	mov	r5, r1
 80075ec:	463b      	mov	r3, r7
 80075ee:	4640      	mov	r0, r8
 80075f0:	4649      	mov	r1, r9
 80075f2:	f7f8 ff69 	bl	80004c8 <__aeabi_dmul>
 80075f6:	4632      	mov	r2, r6
 80075f8:	463b      	mov	r3, r7
 80075fa:	f7f8 fdaf 	bl	800015c <__adddf3>
 80075fe:	4602      	mov	r2, r0
 8007600:	460b      	mov	r3, r1
 8007602:	4620      	mov	r0, r4
 8007604:	4629      	mov	r1, r5
 8007606:	f7f8 fda7 	bl	8000158 <__aeabi_dsub>
 800760a:	4642      	mov	r2, r8
 800760c:	464b      	mov	r3, r9
 800760e:	f7f8 fda3 	bl	8000158 <__aeabi_dsub>
 8007612:	4602      	mov	r2, r0
 8007614:	460b      	mov	r3, r1
 8007616:	2000      	movs	r0, #0
 8007618:	4939      	ldr	r1, [pc, #228]	; (8007700 <__ieee754_pow+0xa20>)
 800761a:	f7f8 fd9d 	bl	8000158 <__aeabi_dsub>
 800761e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8007622:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8007626:	da29      	bge.n	800767c <__ieee754_pow+0x99c>
 8007628:	4652      	mov	r2, sl
 800762a:	f000 f955 	bl	80078d8 <scalbn>
 800762e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007632:	f7ff bbfe 	b.w	8006e32 <__ieee754_pow+0x152>
 8007636:	4b33      	ldr	r3, [pc, #204]	; (8007704 <__ieee754_pow+0xa24>)
 8007638:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800763c:	429f      	cmp	r7, r3
 800763e:	f77f af13 	ble.w	8007468 <__ieee754_pow+0x788>
 8007642:	4b31      	ldr	r3, [pc, #196]	; (8007708 <__ieee754_pow+0xa28>)
 8007644:	440b      	add	r3, r1
 8007646:	4303      	orrs	r3, r0
 8007648:	d009      	beq.n	800765e <__ieee754_pow+0x97e>
 800764a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800764e:	2200      	movs	r2, #0
 8007650:	2300      	movs	r3, #0
 8007652:	f7f9 f9ab 	bl	80009ac <__aeabi_dcmplt>
 8007656:	3800      	subs	r0, #0
 8007658:	bf18      	it	ne
 800765a:	2001      	movne	r0, #1
 800765c:	e453      	b.n	8006f06 <__ieee754_pow+0x226>
 800765e:	4622      	mov	r2, r4
 8007660:	462b      	mov	r3, r5
 8007662:	f7f8 fd79 	bl	8000158 <__aeabi_dsub>
 8007666:	4642      	mov	r2, r8
 8007668:	464b      	mov	r3, r9
 800766a:	f7f9 f9b3 	bl	80009d4 <__aeabi_dcmpge>
 800766e:	2800      	cmp	r0, #0
 8007670:	f43f aefa 	beq.w	8007468 <__ieee754_pow+0x788>
 8007674:	e7e9      	b.n	800764a <__ieee754_pow+0x96a>
 8007676:	f04f 0a00 	mov.w	sl, #0
 800767a:	e720      	b.n	80074be <__ieee754_pow+0x7de>
 800767c:	4621      	mov	r1, r4
 800767e:	e7d6      	b.n	800762e <__ieee754_pow+0x94e>
 8007680:	f04f 0b00 	mov.w	fp, #0
 8007684:	f8df c078 	ldr.w	ip, [pc, #120]	; 8007700 <__ieee754_pow+0xa20>
 8007688:	f7ff bbba 	b.w	8006e00 <__ieee754_pow+0x120>
 800768c:	f04f 0b00 	mov.w	fp, #0
 8007690:	f04f 0c00 	mov.w	ip, #0
 8007694:	f7ff bbb4 	b.w	8006e00 <__ieee754_pow+0x120>
 8007698:	4640      	mov	r0, r8
 800769a:	4649      	mov	r1, r9
 800769c:	f7ff bb3d 	b.w	8006d1a <__ieee754_pow+0x3a>
 80076a0:	9200      	str	r2, [sp, #0]
 80076a2:	f7ff bb89 	b.w	8006db8 <__ieee754_pow+0xd8>
 80076a6:	2300      	movs	r3, #0
 80076a8:	f7ff bb73 	b.w	8006d92 <__ieee754_pow+0xb2>
 80076ac:	f3af 8000 	nop.w
 80076b0:	652b82fe 	.word	0x652b82fe
 80076b4:	3c971547 	.word	0x3c971547
 80076b8:	00000000 	.word	0x00000000
 80076bc:	3fe62e43 	.word	0x3fe62e43
 80076c0:	fefa39ef 	.word	0xfefa39ef
 80076c4:	3fe62e42 	.word	0x3fe62e42
 80076c8:	0ca86c39 	.word	0x0ca86c39
 80076cc:	be205c61 	.word	0xbe205c61
 80076d0:	72bea4d0 	.word	0x72bea4d0
 80076d4:	3e663769 	.word	0x3e663769
 80076d8:	c5d26bf1 	.word	0xc5d26bf1
 80076dc:	3ebbbd41 	.word	0x3ebbbd41
 80076e0:	af25de2c 	.word	0xaf25de2c
 80076e4:	3f11566a 	.word	0x3f11566a
 80076e8:	16bebd93 	.word	0x16bebd93
 80076ec:	3f66c16c 	.word	0x3f66c16c
 80076f0:	5555553e 	.word	0x5555553e
 80076f4:	3fc55555 	.word	0x3fc55555
 80076f8:	3fe00000 	.word	0x3fe00000
 80076fc:	000fffff 	.word	0x000fffff
 8007700:	3ff00000 	.word	0x3ff00000
 8007704:	4090cbff 	.word	0x4090cbff
 8007708:	3f6f3400 	.word	0x3f6f3400

0800770c <__ieee754_sqrt>:
 800770c:	f8df c158 	ldr.w	ip, [pc, #344]	; 8007868 <__ieee754_sqrt+0x15c>
 8007710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007714:	ea3c 0c01 	bics.w	ip, ip, r1
 8007718:	4606      	mov	r6, r0
 800771a:	460d      	mov	r5, r1
 800771c:	460c      	mov	r4, r1
 800771e:	460a      	mov	r2, r1
 8007720:	4607      	mov	r7, r0
 8007722:	4603      	mov	r3, r0
 8007724:	d10f      	bne.n	8007746 <__ieee754_sqrt+0x3a>
 8007726:	4602      	mov	r2, r0
 8007728:	460b      	mov	r3, r1
 800772a:	f7f8 fecd 	bl	80004c8 <__aeabi_dmul>
 800772e:	4602      	mov	r2, r0
 8007730:	460b      	mov	r3, r1
 8007732:	4630      	mov	r0, r6
 8007734:	4629      	mov	r1, r5
 8007736:	f7f8 fd11 	bl	800015c <__adddf3>
 800773a:	4606      	mov	r6, r0
 800773c:	460d      	mov	r5, r1
 800773e:	4630      	mov	r0, r6
 8007740:	4629      	mov	r1, r5
 8007742:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007746:	2900      	cmp	r1, #0
 8007748:	dc0e      	bgt.n	8007768 <__ieee754_sqrt+0x5c>
 800774a:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800774e:	ea5c 0707 	orrs.w	r7, ip, r7
 8007752:	d0f4      	beq.n	800773e <__ieee754_sqrt+0x32>
 8007754:	b141      	cbz	r1, 8007768 <__ieee754_sqrt+0x5c>
 8007756:	4602      	mov	r2, r0
 8007758:	460b      	mov	r3, r1
 800775a:	f7f8 fcfd 	bl	8000158 <__aeabi_dsub>
 800775e:	4602      	mov	r2, r0
 8007760:	460b      	mov	r3, r1
 8007762:	f7f8 ffdb 	bl	800071c <__aeabi_ddiv>
 8007766:	e7e8      	b.n	800773a <__ieee754_sqrt+0x2e>
 8007768:	1521      	asrs	r1, r4, #20
 800776a:	d075      	beq.n	8007858 <__ieee754_sqrt+0x14c>
 800776c:	07cc      	lsls	r4, r1, #31
 800776e:	f04f 0400 	mov.w	r4, #0
 8007772:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8007776:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800777a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800777e:	bf5e      	ittt	pl
 8007780:	0fd9      	lsrpl	r1, r3, #31
 8007782:	005b      	lslpl	r3, r3, #1
 8007784:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8007788:	0fd9      	lsrs	r1, r3, #31
 800778a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800778e:	2516      	movs	r5, #22
 8007790:	4620      	mov	r0, r4
 8007792:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007796:	107f      	asrs	r7, r7, #1
 8007798:	005b      	lsls	r3, r3, #1
 800779a:	1846      	adds	r6, r0, r1
 800779c:	4296      	cmp	r6, r2
 800779e:	bfde      	ittt	le
 80077a0:	1b92      	suble	r2, r2, r6
 80077a2:	1870      	addle	r0, r6, r1
 80077a4:	1864      	addle	r4, r4, r1
 80077a6:	0052      	lsls	r2, r2, #1
 80077a8:	3d01      	subs	r5, #1
 80077aa:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80077ae:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80077b2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80077b6:	d1f0      	bne.n	800779a <__ieee754_sqrt+0x8e>
 80077b8:	4629      	mov	r1, r5
 80077ba:	f04f 0e20 	mov.w	lr, #32
 80077be:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80077c2:	4282      	cmp	r2, r0
 80077c4:	eb06 0c05 	add.w	ip, r6, r5
 80077c8:	dc02      	bgt.n	80077d0 <__ieee754_sqrt+0xc4>
 80077ca:	d113      	bne.n	80077f4 <__ieee754_sqrt+0xe8>
 80077cc:	459c      	cmp	ip, r3
 80077ce:	d811      	bhi.n	80077f4 <__ieee754_sqrt+0xe8>
 80077d0:	f1bc 0f00 	cmp.w	ip, #0
 80077d4:	eb0c 0506 	add.w	r5, ip, r6
 80077d8:	da43      	bge.n	8007862 <__ieee754_sqrt+0x156>
 80077da:	2d00      	cmp	r5, #0
 80077dc:	db41      	blt.n	8007862 <__ieee754_sqrt+0x156>
 80077de:	f100 0801 	add.w	r8, r0, #1
 80077e2:	1a12      	subs	r2, r2, r0
 80077e4:	4640      	mov	r0, r8
 80077e6:	459c      	cmp	ip, r3
 80077e8:	bf88      	it	hi
 80077ea:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80077ee:	eba3 030c 	sub.w	r3, r3, ip
 80077f2:	4431      	add	r1, r6
 80077f4:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80077f8:	f1be 0e01 	subs.w	lr, lr, #1
 80077fc:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8007800:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007804:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007808:	d1db      	bne.n	80077c2 <__ieee754_sqrt+0xb6>
 800780a:	4313      	orrs	r3, r2
 800780c:	d006      	beq.n	800781c <__ieee754_sqrt+0x110>
 800780e:	1c48      	adds	r0, r1, #1
 8007810:	bf0b      	itete	eq
 8007812:	4671      	moveq	r1, lr
 8007814:	3101      	addne	r1, #1
 8007816:	3401      	addeq	r4, #1
 8007818:	f021 0101 	bicne.w	r1, r1, #1
 800781c:	1063      	asrs	r3, r4, #1
 800781e:	0849      	lsrs	r1, r1, #1
 8007820:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007824:	07e2      	lsls	r2, r4, #31
 8007826:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800782a:	bf48      	it	mi
 800782c:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8007830:	460e      	mov	r6, r1
 8007832:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8007836:	e782      	b.n	800773e <__ieee754_sqrt+0x32>
 8007838:	0ada      	lsrs	r2, r3, #11
 800783a:	3815      	subs	r0, #21
 800783c:	055b      	lsls	r3, r3, #21
 800783e:	2a00      	cmp	r2, #0
 8007840:	d0fa      	beq.n	8007838 <__ieee754_sqrt+0x12c>
 8007842:	02d5      	lsls	r5, r2, #11
 8007844:	d50a      	bpl.n	800785c <__ieee754_sqrt+0x150>
 8007846:	f1c1 0420 	rsb	r4, r1, #32
 800784a:	fa23 f404 	lsr.w	r4, r3, r4
 800784e:	1e4d      	subs	r5, r1, #1
 8007850:	408b      	lsls	r3, r1
 8007852:	4322      	orrs	r2, r4
 8007854:	1b41      	subs	r1, r0, r5
 8007856:	e789      	b.n	800776c <__ieee754_sqrt+0x60>
 8007858:	4608      	mov	r0, r1
 800785a:	e7f0      	b.n	800783e <__ieee754_sqrt+0x132>
 800785c:	0052      	lsls	r2, r2, #1
 800785e:	3101      	adds	r1, #1
 8007860:	e7ef      	b.n	8007842 <__ieee754_sqrt+0x136>
 8007862:	4680      	mov	r8, r0
 8007864:	e7bd      	b.n	80077e2 <__ieee754_sqrt+0xd6>
 8007866:	bf00      	nop
 8007868:	7ff00000 	.word	0x7ff00000

0800786c <with_errno>:
 800786c:	b570      	push	{r4, r5, r6, lr}
 800786e:	4604      	mov	r4, r0
 8007870:	460d      	mov	r5, r1
 8007872:	4616      	mov	r6, r2
 8007874:	f000 f8ae 	bl	80079d4 <__errno>
 8007878:	4629      	mov	r1, r5
 800787a:	6006      	str	r6, [r0, #0]
 800787c:	4620      	mov	r0, r4
 800787e:	bd70      	pop	{r4, r5, r6, pc}

08007880 <xflow>:
 8007880:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007882:	4615      	mov	r5, r2
 8007884:	461c      	mov	r4, r3
 8007886:	b180      	cbz	r0, 80078aa <xflow+0x2a>
 8007888:	4610      	mov	r0, r2
 800788a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800788e:	e9cd 0100 	strd	r0, r1, [sp]
 8007892:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007896:	4628      	mov	r0, r5
 8007898:	4621      	mov	r1, r4
 800789a:	f7f8 fe15 	bl	80004c8 <__aeabi_dmul>
 800789e:	2222      	movs	r2, #34	; 0x22
 80078a0:	b003      	add	sp, #12
 80078a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80078a6:	f7ff bfe1 	b.w	800786c <with_errno>
 80078aa:	4610      	mov	r0, r2
 80078ac:	4619      	mov	r1, r3
 80078ae:	e7ee      	b.n	800788e <xflow+0xe>

080078b0 <__math_uflow>:
 80078b0:	2200      	movs	r2, #0
 80078b2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80078b6:	f7ff bfe3 	b.w	8007880 <xflow>

080078ba <__math_oflow>:
 80078ba:	2200      	movs	r2, #0
 80078bc:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80078c0:	f7ff bfde 	b.w	8007880 <xflow>

080078c4 <fabs>:
 80078c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80078c8:	4770      	bx	lr

080078ca <finite>:
 80078ca:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 80078ce:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80078d2:	0fc0      	lsrs	r0, r0, #31
 80078d4:	4770      	bx	lr
	...

080078d8 <scalbn>:
 80078d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078da:	f3c1 560a 	ubfx	r6, r1, #20, #11
 80078de:	4604      	mov	r4, r0
 80078e0:	460d      	mov	r5, r1
 80078e2:	4617      	mov	r7, r2
 80078e4:	460b      	mov	r3, r1
 80078e6:	b996      	cbnz	r6, 800790e <scalbn+0x36>
 80078e8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80078ec:	4303      	orrs	r3, r0
 80078ee:	d039      	beq.n	8007964 <scalbn+0x8c>
 80078f0:	4b33      	ldr	r3, [pc, #204]	; (80079c0 <scalbn+0xe8>)
 80078f2:	2200      	movs	r2, #0
 80078f4:	f7f8 fde8 	bl	80004c8 <__aeabi_dmul>
 80078f8:	4b32      	ldr	r3, [pc, #200]	; (80079c4 <scalbn+0xec>)
 80078fa:	4604      	mov	r4, r0
 80078fc:	429f      	cmp	r7, r3
 80078fe:	460d      	mov	r5, r1
 8007900:	da0f      	bge.n	8007922 <scalbn+0x4a>
 8007902:	a32b      	add	r3, pc, #172	; (adr r3, 80079b0 <scalbn+0xd8>)
 8007904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007908:	f7f8 fdde 	bl	80004c8 <__aeabi_dmul>
 800790c:	e006      	b.n	800791c <scalbn+0x44>
 800790e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8007912:	4296      	cmp	r6, r2
 8007914:	d10a      	bne.n	800792c <scalbn+0x54>
 8007916:	4602      	mov	r2, r0
 8007918:	f7f8 fc20 	bl	800015c <__adddf3>
 800791c:	4604      	mov	r4, r0
 800791e:	460d      	mov	r5, r1
 8007920:	e020      	b.n	8007964 <scalbn+0x8c>
 8007922:	460b      	mov	r3, r1
 8007924:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8007928:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800792c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8007930:	19b9      	adds	r1, r7, r6
 8007932:	4291      	cmp	r1, r2
 8007934:	dd0e      	ble.n	8007954 <scalbn+0x7c>
 8007936:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800793a:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800793e:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8007942:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8007946:	4820      	ldr	r0, [pc, #128]	; (80079c8 <scalbn+0xf0>)
 8007948:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800794c:	a31a      	add	r3, pc, #104	; (adr r3, 80079b8 <scalbn+0xe0>)
 800794e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007952:	e7d9      	b.n	8007908 <scalbn+0x30>
 8007954:	2900      	cmp	r1, #0
 8007956:	dd08      	ble.n	800796a <scalbn+0x92>
 8007958:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800795c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007960:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8007964:	4620      	mov	r0, r4
 8007966:	4629      	mov	r1, r5
 8007968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800796a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800796e:	da12      	bge.n	8007996 <scalbn+0xbe>
 8007970:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007974:	429f      	cmp	r7, r3
 8007976:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800797a:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 800797e:	dcdc      	bgt.n	800793a <scalbn+0x62>
 8007980:	a30b      	add	r3, pc, #44	; (adr r3, 80079b0 <scalbn+0xd8>)
 8007982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007986:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800798a:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800798e:	480f      	ldr	r0, [pc, #60]	; (80079cc <scalbn+0xf4>)
 8007990:	f041 011f 	orr.w	r1, r1, #31
 8007994:	e7b8      	b.n	8007908 <scalbn+0x30>
 8007996:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800799a:	3136      	adds	r1, #54	; 0x36
 800799c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80079a0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 80079a4:	4620      	mov	r0, r4
 80079a6:	4629      	mov	r1, r5
 80079a8:	2200      	movs	r2, #0
 80079aa:	4b09      	ldr	r3, [pc, #36]	; (80079d0 <scalbn+0xf8>)
 80079ac:	e7ac      	b.n	8007908 <scalbn+0x30>
 80079ae:	bf00      	nop
 80079b0:	c2f8f359 	.word	0xc2f8f359
 80079b4:	01a56e1f 	.word	0x01a56e1f
 80079b8:	8800759c 	.word	0x8800759c
 80079bc:	7e37e43c 	.word	0x7e37e43c
 80079c0:	43500000 	.word	0x43500000
 80079c4:	ffff3cb0 	.word	0xffff3cb0
 80079c8:	8800759c 	.word	0x8800759c
 80079cc:	c2f8f359 	.word	0xc2f8f359
 80079d0:	3c900000 	.word	0x3c900000

080079d4 <__errno>:
 80079d4:	4b01      	ldr	r3, [pc, #4]	; (80079dc <__errno+0x8>)
 80079d6:	6818      	ldr	r0, [r3, #0]
 80079d8:	4770      	bx	lr
 80079da:	bf00      	nop
 80079dc:	20000048 	.word	0x20000048

080079e0 <__libc_init_array>:
 80079e0:	b570      	push	{r4, r5, r6, lr}
 80079e2:	2600      	movs	r6, #0
 80079e4:	4d0c      	ldr	r5, [pc, #48]	; (8007a18 <__libc_init_array+0x38>)
 80079e6:	4c0d      	ldr	r4, [pc, #52]	; (8007a1c <__libc_init_array+0x3c>)
 80079e8:	1b64      	subs	r4, r4, r5
 80079ea:	10a4      	asrs	r4, r4, #2
 80079ec:	42a6      	cmp	r6, r4
 80079ee:	d109      	bne.n	8007a04 <__libc_init_array+0x24>
 80079f0:	f000 f822 	bl	8007a38 <_init>
 80079f4:	2600      	movs	r6, #0
 80079f6:	4d0a      	ldr	r5, [pc, #40]	; (8007a20 <__libc_init_array+0x40>)
 80079f8:	4c0a      	ldr	r4, [pc, #40]	; (8007a24 <__libc_init_array+0x44>)
 80079fa:	1b64      	subs	r4, r4, r5
 80079fc:	10a4      	asrs	r4, r4, #2
 80079fe:	42a6      	cmp	r6, r4
 8007a00:	d105      	bne.n	8007a0e <__libc_init_array+0x2e>
 8007a02:	bd70      	pop	{r4, r5, r6, pc}
 8007a04:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a08:	4798      	blx	r3
 8007a0a:	3601      	adds	r6, #1
 8007a0c:	e7ee      	b.n	80079ec <__libc_init_array+0xc>
 8007a0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a12:	4798      	blx	r3
 8007a14:	3601      	adds	r6, #1
 8007a16:	e7f2      	b.n	80079fe <__libc_init_array+0x1e>
 8007a18:	08007aa8 	.word	0x08007aa8
 8007a1c:	08007aa8 	.word	0x08007aa8
 8007a20:	08007aa8 	.word	0x08007aa8
 8007a24:	08007aac 	.word	0x08007aac

08007a28 <memset>:
 8007a28:	4603      	mov	r3, r0
 8007a2a:	4402      	add	r2, r0
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d100      	bne.n	8007a32 <memset+0xa>
 8007a30:	4770      	bx	lr
 8007a32:	f803 1b01 	strb.w	r1, [r3], #1
 8007a36:	e7f9      	b.n	8007a2c <memset+0x4>

08007a38 <_init>:
 8007a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a3a:	bf00      	nop
 8007a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a3e:	bc08      	pop	{r3}
 8007a40:	469e      	mov	lr, r3
 8007a42:	4770      	bx	lr

08007a44 <_fini>:
 8007a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a46:	bf00      	nop
 8007a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a4a:	bc08      	pop	{r3}
 8007a4c:	469e      	mov	lr, r3
 8007a4e:	4770      	bx	lr
