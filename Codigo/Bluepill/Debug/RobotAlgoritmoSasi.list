
RobotAlgoritmoSasi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007918  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08007a28  08007a28  00017a28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a80  08007a80  000200ac  2**0
                  CONTENTS
  4 .ARM          00000000  08007a80  08007a80  000200ac  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007a80  08007a80  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a80  08007a80  00017a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a84  08007a84  00017a84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  08007a88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002b10  200000ac  08007b34  000200ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002bbc  08007b34  00022bbc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000db21  00000000  00000000  000200d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002800  00000000  00000000  0002dbf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec8  00000000  00000000  000303f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000da0  00000000  00000000  000312c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019774  00000000  00000000  00032060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000116e7  00000000  00000000  0004b7d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090a75  00000000  00000000  0005cebb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ed930  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041d0  00000000  00000000  000ed980  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000ac 	.word	0x200000ac
 800012c:	00000000 	.word	0x00000000
 8000130:	08007a10 	.word	0x08007a10

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000b0 	.word	0x200000b0
 800014c:	08007a10 	.word	0x08007a10

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2f>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a30:	bf24      	itt	cs
 8000a32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a3a:	d90d      	bls.n	8000a58 <__aeabi_d2f+0x30>
 8000a3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a50:	bf08      	it	eq
 8000a52:	f020 0001 	biceq.w	r0, r0, #1
 8000a56:	4770      	bx	lr
 8000a58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a5c:	d121      	bne.n	8000aa2 <__aeabi_d2f+0x7a>
 8000a5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a62:	bfbc      	itt	lt
 8000a64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	4770      	bxlt	lr
 8000a6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a72:	f1c2 0218 	rsb	r2, r2, #24
 8000a76:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a82:	bf18      	it	ne
 8000a84:	f040 0001 	orrne.w	r0, r0, #1
 8000a88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a94:	ea40 000c 	orr.w	r0, r0, ip
 8000a98:	fa23 f302 	lsr.w	r3, r3, r2
 8000a9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa0:	e7cc      	b.n	8000a3c <__aeabi_d2f+0x14>
 8000aa2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aa6:	d107      	bne.n	8000ab8 <__aeabi_d2f+0x90>
 8000aa8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aac:	bf1e      	ittt	ne
 8000aae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ab2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ab6:	4770      	bxne	lr
 8000ab8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	; 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	3a01      	subs	r2, #1
 8000b82:	bf28      	it	cs
 8000b84:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b88:	d2ed      	bcs.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d36:	2afd      	cmp	r2, #253	; 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	; 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	; 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	; 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <__gesf2>:
 8000f84:	f04f 3cff 	mov.w	ip, #4294967295
 8000f88:	e006      	b.n	8000f98 <__cmpsf2+0x4>
 8000f8a:	bf00      	nop

08000f8c <__lesf2>:
 8000f8c:	f04f 0c01 	mov.w	ip, #1
 8000f90:	e002      	b.n	8000f98 <__cmpsf2+0x4>
 8000f92:	bf00      	nop

08000f94 <__cmpsf2>:
 8000f94:	f04f 0c01 	mov.w	ip, #1
 8000f98:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f9c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fa0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fa4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fa8:	bf18      	it	ne
 8000faa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fae:	d011      	beq.n	8000fd4 <__cmpsf2+0x40>
 8000fb0:	b001      	add	sp, #4
 8000fb2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fb6:	bf18      	it	ne
 8000fb8:	ea90 0f01 	teqne	r0, r1
 8000fbc:	bf58      	it	pl
 8000fbe:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fc2:	bf88      	it	hi
 8000fc4:	17c8      	asrhi	r0, r1, #31
 8000fc6:	bf38      	it	cc
 8000fc8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fcc:	bf18      	it	ne
 8000fce:	f040 0001 	orrne.w	r0, r0, #1
 8000fd2:	4770      	bx	lr
 8000fd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fd8:	d102      	bne.n	8000fe0 <__cmpsf2+0x4c>
 8000fda:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fde:	d105      	bne.n	8000fec <__cmpsf2+0x58>
 8000fe0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fe4:	d1e4      	bne.n	8000fb0 <__cmpsf2+0x1c>
 8000fe6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fea:	d0e1      	beq.n	8000fb0 <__cmpsf2+0x1c>
 8000fec:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_cfrcmple>:
 8000ff4:	4684      	mov	ip, r0
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	4661      	mov	r1, ip
 8000ffa:	e7ff      	b.n	8000ffc <__aeabi_cfcmpeq>

08000ffc <__aeabi_cfcmpeq>:
 8000ffc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ffe:	f7ff ffc9 	bl	8000f94 <__cmpsf2>
 8001002:	2800      	cmp	r0, #0
 8001004:	bf48      	it	mi
 8001006:	f110 0f00 	cmnmi.w	r0, #0
 800100a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800100c <__aeabi_fcmpeq>:
 800100c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001010:	f7ff fff4 	bl	8000ffc <__aeabi_cfcmpeq>
 8001014:	bf0c      	ite	eq
 8001016:	2001      	moveq	r0, #1
 8001018:	2000      	movne	r0, #0
 800101a:	f85d fb08 	ldr.w	pc, [sp], #8
 800101e:	bf00      	nop

08001020 <__aeabi_fcmplt>:
 8001020:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001024:	f7ff ffea 	bl	8000ffc <__aeabi_cfcmpeq>
 8001028:	bf34      	ite	cc
 800102a:	2001      	movcc	r0, #1
 800102c:	2000      	movcs	r0, #0
 800102e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001032:	bf00      	nop

08001034 <__aeabi_fcmple>:
 8001034:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001038:	f7ff ffe0 	bl	8000ffc <__aeabi_cfcmpeq>
 800103c:	bf94      	ite	ls
 800103e:	2001      	movls	r0, #1
 8001040:	2000      	movhi	r0, #0
 8001042:	f85d fb08 	ldr.w	pc, [sp], #8
 8001046:	bf00      	nop

08001048 <__aeabi_fcmpge>:
 8001048:	f84d ed08 	str.w	lr, [sp, #-8]!
 800104c:	f7ff ffd2 	bl	8000ff4 <__aeabi_cfrcmple>
 8001050:	bf94      	ite	ls
 8001052:	2001      	movls	r0, #1
 8001054:	2000      	movhi	r0, #0
 8001056:	f85d fb08 	ldr.w	pc, [sp], #8
 800105a:	bf00      	nop

0800105c <__aeabi_fcmpgt>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff ffc8 	bl	8000ff4 <__aeabi_cfrcmple>
 8001064:	bf34      	ite	cc
 8001066:	2001      	movcc	r0, #1
 8001068:	2000      	movcs	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_f2iz>:
 8001070:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001074:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001078:	d30f      	bcc.n	800109a <__aeabi_f2iz+0x2a>
 800107a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800107e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001082:	d90d      	bls.n	80010a0 <__aeabi_f2iz+0x30>
 8001084:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001088:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800108c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001090:	fa23 f002 	lsr.w	r0, r3, r2
 8001094:	bf18      	it	ne
 8001096:	4240      	negne	r0, r0
 8001098:	4770      	bx	lr
 800109a:	f04f 0000 	mov.w	r0, #0
 800109e:	4770      	bx	lr
 80010a0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010a4:	d101      	bne.n	80010aa <__aeabi_f2iz+0x3a>
 80010a6:	0242      	lsls	r2, r0, #9
 80010a8:	d105      	bne.n	80010b6 <__aeabi_f2iz+0x46>
 80010aa:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010ae:	bf08      	it	eq
 80010b0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80010b4:	4770      	bx	lr
 80010b6:	f04f 0000 	mov.w	r0, #0
 80010ba:	4770      	bx	lr

080010bc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010c2:	1d3b      	adds	r3, r7, #4
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80010cc:	4b2e      	ldr	r3, [pc, #184]	; (8001188 <MX_ADC1_Init+0xcc>)
 80010ce:	4a2f      	ldr	r2, [pc, #188]	; (800118c <MX_ADC1_Init+0xd0>)
 80010d0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80010d2:	4b2d      	ldr	r3, [pc, #180]	; (8001188 <MX_ADC1_Init+0xcc>)
 80010d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010d8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80010da:	4b2b      	ldr	r3, [pc, #172]	; (8001188 <MX_ADC1_Init+0xcc>)
 80010dc:	2201      	movs	r2, #1
 80010de:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010e0:	4b29      	ldr	r3, [pc, #164]	; (8001188 <MX_ADC1_Init+0xcc>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010e6:	4b28      	ldr	r3, [pc, #160]	; (8001188 <MX_ADC1_Init+0xcc>)
 80010e8:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80010ec:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010ee:	4b26      	ldr	r3, [pc, #152]	; (8001188 <MX_ADC1_Init+0xcc>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 80010f4:	4b24      	ldr	r3, [pc, #144]	; (8001188 <MX_ADC1_Init+0xcc>)
 80010f6:	2204      	movs	r2, #4
 80010f8:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010fa:	4823      	ldr	r0, [pc, #140]	; (8001188 <MX_ADC1_Init+0xcc>)
 80010fc:	f002 fd5e 	bl	8003bbc <HAL_ADC_Init>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001106:	f002 f849 	bl	800319c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800110a:	2300      	movs	r3, #0
 800110c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800110e:	2301      	movs	r3, #1
 8001110:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8001112:	2303      	movs	r3, #3
 8001114:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001116:	1d3b      	adds	r3, r7, #4
 8001118:	4619      	mov	r1, r3
 800111a:	481b      	ldr	r0, [pc, #108]	; (8001188 <MX_ADC1_Init+0xcc>)
 800111c:	f002 ff16 	bl	8003f4c <HAL_ADC_ConfigChannel>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001126:	f002 f839 	bl	800319c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800112a:	2301      	movs	r3, #1
 800112c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800112e:	2302      	movs	r3, #2
 8001130:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001132:	1d3b      	adds	r3, r7, #4
 8001134:	4619      	mov	r1, r3
 8001136:	4814      	ldr	r0, [pc, #80]	; (8001188 <MX_ADC1_Init+0xcc>)
 8001138:	f002 ff08 	bl	8003f4c <HAL_ADC_ConfigChannel>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001142:	f002 f82b 	bl	800319c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001146:	2302      	movs	r3, #2
 8001148:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800114a:	2303      	movs	r3, #3
 800114c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800114e:	1d3b      	adds	r3, r7, #4
 8001150:	4619      	mov	r1, r3
 8001152:	480d      	ldr	r0, [pc, #52]	; (8001188 <MX_ADC1_Init+0xcc>)
 8001154:	f002 fefa 	bl	8003f4c <HAL_ADC_ConfigChannel>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800115e:	f002 f81d 	bl	800319c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001162:	2303      	movs	r3, #3
 8001164:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001166:	2304      	movs	r3, #4
 8001168:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800116a:	1d3b      	adds	r3, r7, #4
 800116c:	4619      	mov	r1, r3
 800116e:	4806      	ldr	r0, [pc, #24]	; (8001188 <MX_ADC1_Init+0xcc>)
 8001170:	f002 feec 	bl	8003f4c <HAL_ADC_ConfigChannel>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 800117a:	f002 f80f 	bl	800319c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800117e:	bf00      	nop
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	200000c8 	.word	0x200000c8
 800118c:	40012400 	.word	0x40012400

08001190 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b088      	sub	sp, #32
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001198:	f107 0310 	add.w	r3, r7, #16
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a28      	ldr	r2, [pc, #160]	; (800124c <HAL_ADC_MspInit+0xbc>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d149      	bne.n	8001244 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011b0:	4b27      	ldr	r3, [pc, #156]	; (8001250 <HAL_ADC_MspInit+0xc0>)
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	4a26      	ldr	r2, [pc, #152]	; (8001250 <HAL_ADC_MspInit+0xc0>)
 80011b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011ba:	6193      	str	r3, [r2, #24]
 80011bc:	4b24      	ldr	r3, [pc, #144]	; (8001250 <HAL_ADC_MspInit+0xc0>)
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c8:	4b21      	ldr	r3, [pc, #132]	; (8001250 <HAL_ADC_MspInit+0xc0>)
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	4a20      	ldr	r2, [pc, #128]	; (8001250 <HAL_ADC_MspInit+0xc0>)
 80011ce:	f043 0304 	orr.w	r3, r3, #4
 80011d2:	6193      	str	r3, [r2, #24]
 80011d4:	4b1e      	ldr	r3, [pc, #120]	; (8001250 <HAL_ADC_MspInit+0xc0>)
 80011d6:	699b      	ldr	r3, [r3, #24]
 80011d8:	f003 0304 	and.w	r3, r3, #4
 80011dc:	60bb      	str	r3, [r7, #8]
 80011de:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = CNY70_Pin|SHARP_D_Pin|SHARP_C_Pin|SHARP_I_Pin;
 80011e0:	230f      	movs	r3, #15
 80011e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011e4:	2303      	movs	r3, #3
 80011e6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e8:	f107 0310 	add.w	r3, r7, #16
 80011ec:	4619      	mov	r1, r3
 80011ee:	4819      	ldr	r0, [pc, #100]	; (8001254 <HAL_ADC_MspInit+0xc4>)
 80011f0:	f003 fc52 	bl	8004a98 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80011f4:	4b18      	ldr	r3, [pc, #96]	; (8001258 <HAL_ADC_MspInit+0xc8>)
 80011f6:	4a19      	ldr	r2, [pc, #100]	; (800125c <HAL_ADC_MspInit+0xcc>)
 80011f8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011fa:	4b17      	ldr	r3, [pc, #92]	; (8001258 <HAL_ADC_MspInit+0xc8>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001200:	4b15      	ldr	r3, [pc, #84]	; (8001258 <HAL_ADC_MspInit+0xc8>)
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001206:	4b14      	ldr	r3, [pc, #80]	; (8001258 <HAL_ADC_MspInit+0xc8>)
 8001208:	2280      	movs	r2, #128	; 0x80
 800120a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800120c:	4b12      	ldr	r3, [pc, #72]	; (8001258 <HAL_ADC_MspInit+0xc8>)
 800120e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001212:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001214:	4b10      	ldr	r3, [pc, #64]	; (8001258 <HAL_ADC_MspInit+0xc8>)
 8001216:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800121a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800121c:	4b0e      	ldr	r3, [pc, #56]	; (8001258 <HAL_ADC_MspInit+0xc8>)
 800121e:	2220      	movs	r2, #32
 8001220:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001222:	4b0d      	ldr	r3, [pc, #52]	; (8001258 <HAL_ADC_MspInit+0xc8>)
 8001224:	2200      	movs	r2, #0
 8001226:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001228:	480b      	ldr	r0, [pc, #44]	; (8001258 <HAL_ADC_MspInit+0xc8>)
 800122a:	f003 f997 	bl	800455c <HAL_DMA_Init>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001234:	f001 ffb2 	bl	800319c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	4a07      	ldr	r2, [pc, #28]	; (8001258 <HAL_ADC_MspInit+0xc8>)
 800123c:	621a      	str	r2, [r3, #32]
 800123e:	4a06      	ldr	r2, [pc, #24]	; (8001258 <HAL_ADC_MspInit+0xc8>)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001244:	bf00      	nop
 8001246:	3720      	adds	r7, #32
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	40012400 	.word	0x40012400
 8001250:	40021000 	.word	0x40021000
 8001254:	40010800 	.word	0x40010800
 8001258:	200000f8 	.word	0x200000f8
 800125c:	40020008 	.word	0x40020008

08001260 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001266:	4b0c      	ldr	r3, [pc, #48]	; (8001298 <MX_DMA_Init+0x38>)
 8001268:	695b      	ldr	r3, [r3, #20]
 800126a:	4a0b      	ldr	r2, [pc, #44]	; (8001298 <MX_DMA_Init+0x38>)
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	6153      	str	r3, [r2, #20]
 8001272:	4b09      	ldr	r3, [pc, #36]	; (8001298 <MX_DMA_Init+0x38>)
 8001274:	695b      	ldr	r3, [r3, #20]
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	607b      	str	r3, [r7, #4]
 800127c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800127e:	2200      	movs	r2, #0
 8001280:	2100      	movs	r1, #0
 8001282:	200b      	movs	r0, #11
 8001284:	f003 f933 	bl	80044ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001288:	200b      	movs	r0, #11
 800128a:	f003 f94c 	bl	8004526 <HAL_NVIC_EnableIRQ>

}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40021000 	.word	0x40021000

0800129c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b088      	sub	sp, #32
 80012a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a2:	f107 0310 	add.w	r3, r7, #16
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	605a      	str	r2, [r3, #4]
 80012ac:	609a      	str	r2, [r3, #8]
 80012ae:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012b0:	4b3f      	ldr	r3, [pc, #252]	; (80013b0 <MX_GPIO_Init+0x114>)
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	4a3e      	ldr	r2, [pc, #248]	; (80013b0 <MX_GPIO_Init+0x114>)
 80012b6:	f043 0310 	orr.w	r3, r3, #16
 80012ba:	6193      	str	r3, [r2, #24]
 80012bc:	4b3c      	ldr	r3, [pc, #240]	; (80013b0 <MX_GPIO_Init+0x114>)
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	f003 0310 	and.w	r3, r3, #16
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012c8:	4b39      	ldr	r3, [pc, #228]	; (80013b0 <MX_GPIO_Init+0x114>)
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	4a38      	ldr	r2, [pc, #224]	; (80013b0 <MX_GPIO_Init+0x114>)
 80012ce:	f043 0320 	orr.w	r3, r3, #32
 80012d2:	6193      	str	r3, [r2, #24]
 80012d4:	4b36      	ldr	r3, [pc, #216]	; (80013b0 <MX_GPIO_Init+0x114>)
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	f003 0320 	and.w	r3, r3, #32
 80012dc:	60bb      	str	r3, [r7, #8]
 80012de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e0:	4b33      	ldr	r3, [pc, #204]	; (80013b0 <MX_GPIO_Init+0x114>)
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	4a32      	ldr	r2, [pc, #200]	; (80013b0 <MX_GPIO_Init+0x114>)
 80012e6:	f043 0304 	orr.w	r3, r3, #4
 80012ea:	6193      	str	r3, [r2, #24]
 80012ec:	4b30      	ldr	r3, [pc, #192]	; (80013b0 <MX_GPIO_Init+0x114>)
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	f003 0304 	and.w	r3, r3, #4
 80012f4:	607b      	str	r3, [r7, #4]
 80012f6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f8:	4b2d      	ldr	r3, [pc, #180]	; (80013b0 <MX_GPIO_Init+0x114>)
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	4a2c      	ldr	r2, [pc, #176]	; (80013b0 <MX_GPIO_Init+0x114>)
 80012fe:	f043 0308 	orr.w	r3, r3, #8
 8001302:	6193      	str	r3, [r2, #24]
 8001304:	4b2a      	ldr	r3, [pc, #168]	; (80013b0 <MX_GPIO_Init+0x114>)
 8001306:	699b      	ldr	r3, [r3, #24]
 8001308:	f003 0308 	and.w	r3, r3, #8
 800130c:	603b      	str	r3, [r7, #0]
 800130e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001310:	2200      	movs	r2, #0
 8001312:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001316:	4827      	ldr	r0, [pc, #156]	; (80013b4 <MX_GPIO_Init+0x118>)
 8001318:	f003 fd59 	bl	8004dce <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|AIN1_Pin|AIN2_Pin, GPIO_PIN_RESET);
 800131c:	2200      	movs	r2, #0
 800131e:	f248 0118 	movw	r1, #32792	; 0x8018
 8001322:	4825      	ldr	r0, [pc, #148]	; (80013b8 <MX_GPIO_Init+0x11c>)
 8001324:	f003 fd53 	bl	8004dce <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BIN2_Pin|BIN1_Pin|STBY_Pin, GPIO_PIN_RESET);
 8001328:	2200      	movs	r2, #0
 800132a:	f44f 4118 	mov.w	r1, #38912	; 0x9800
 800132e:	4823      	ldr	r0, [pc, #140]	; (80013bc <MX_GPIO_Init+0x120>)
 8001330:	f003 fd4d 	bl	8004dce <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001334:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001338:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133a:	2301      	movs	r3, #1
 800133c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	2300      	movs	r3, #0
 8001340:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001342:	2302      	movs	r3, #2
 8001344:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001346:	f107 0310 	add.w	r3, r7, #16
 800134a:	4619      	mov	r1, r3
 800134c:	4819      	ldr	r0, [pc, #100]	; (80013b4 <MX_GPIO_Init+0x118>)
 800134e:	f003 fba3 	bl	8004a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin|BTN3_Pin;
 8001352:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001356:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001358:	2300      	movs	r3, #0
 800135a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001360:	f107 0310 	add.w	r3, r7, #16
 8001364:	4619      	mov	r1, r3
 8001366:	4814      	ldr	r0, [pc, #80]	; (80013b8 <MX_GPIO_Init+0x11c>)
 8001368:	f003 fb96 	bl	8004a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_Pin|AIN1_Pin|AIN2_Pin;
 800136c:	f248 0318 	movw	r3, #32792	; 0x8018
 8001370:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001372:	2301      	movs	r3, #1
 8001374:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137a:	2302      	movs	r3, #2
 800137c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800137e:	f107 0310 	add.w	r3, r7, #16
 8001382:	4619      	mov	r1, r3
 8001384:	480c      	ldr	r0, [pc, #48]	; (80013b8 <MX_GPIO_Init+0x11c>)
 8001386:	f003 fb87 	bl	8004a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = BIN2_Pin|BIN1_Pin|STBY_Pin;
 800138a:	f44f 4318 	mov.w	r3, #38912	; 0x9800
 800138e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001390:	2301      	movs	r3, #1
 8001392:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001398:	2302      	movs	r3, #2
 800139a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139c:	f107 0310 	add.w	r3, r7, #16
 80013a0:	4619      	mov	r1, r3
 80013a2:	4806      	ldr	r0, [pc, #24]	; (80013bc <MX_GPIO_Init+0x120>)
 80013a4:	f003 fb78 	bl	8004a98 <HAL_GPIO_Init>

}
 80013a8:	bf00      	nop
 80013aa:	3720      	adds	r7, #32
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	40021000 	.word	0x40021000
 80013b4:	40011000 	.word	0x40011000
 80013b8:	40010c00 	.word	0x40010c00
 80013bc:	40010800 	.word	0x40010800

080013c0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80013c4:	f002 fb98 	bl	8003af8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80013c8:	f000 f856 	bl	8001478 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80013cc:	f7ff ff66 	bl	800129c <MX_GPIO_Init>
	MX_DMA_Init();
 80013d0:	f7ff ff46 	bl	8001260 <MX_DMA_Init>
	MX_TIM4_Init();
 80013d4:	f002 f9be 	bl	8003754 <MX_TIM4_Init>
	MX_TIM3_Init();
 80013d8:	f002 f968 	bl	80036ac <MX_TIM3_Init>
	MX_ADC1_Init();
 80013dc:	f7ff fe6e 	bl	80010bc <MX_ADC1_Init>
	MX_USART1_UART_Init();
 80013e0:	f002 fae6 	bl	80039b0 <MX_USART1_UART_Init>
	MX_TIM2_Init();
 80013e4:	f002 f8fe 	bl	80035e4 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80013e8:	2108      	movs	r1, #8
 80013ea:	481a      	ldr	r0, [pc, #104]	; (8001454 <main+0x94>)
 80013ec:	f004 fa28 	bl	8005840 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80013f0:	210c      	movs	r1, #12
 80013f2:	4818      	ldr	r0, [pc, #96]	; (8001454 <main+0x94>)
 80013f4:	f004 fa24 	bl	8005840 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80013f8:	213c      	movs	r1, #60	; 0x3c
 80013fa:	4817      	ldr	r0, [pc, #92]	; (8001458 <main+0x98>)
 80013fc:	f004 fb64 	bl	8005ac8 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001400:	213c      	movs	r1, #60	; 0x3c
 8001402:	4816      	ldr	r0, [pc, #88]	; (800145c <main+0x9c>)
 8001404:	f004 fb60 	bl	8005ac8 <HAL_TIM_Encoder_Start>
	HAL_GPIO_WritePin(STBY, GPIO_PIN_SET);
 8001408:	2201      	movs	r2, #1
 800140a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800140e:	4814      	ldr	r0, [pc, #80]	; (8001460 <main+0xa0>)
 8001410:	f003 fcdd 	bl	8004dce <HAL_GPIO_WritePin>
	TIM2->CCR3 = 15000;
 8001414:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001418:	f643 2298 	movw	r2, #15000	; 0x3a98
 800141c:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM2->CCR4 = 15000;
 800141e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001422:	f643 2298 	movw	r2, #15000	; 0x3a98
 8001426:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_buf, ADC_BUF_LEN);
 8001428:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800142c:	490d      	ldr	r1, [pc, #52]	; (8001464 <main+0xa4>)
 800142e:	480e      	ldr	r0, [pc, #56]	; (8001468 <main+0xa8>)
 8001430:	f002 fc9c 	bl	8003d6c <HAL_ADC_Start_DMA>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8001434:	2200      	movs	r2, #0
 8001436:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800143a:	480c      	ldr	r0, [pc, #48]	; (800146c <main+0xac>)
 800143c:	f003 fcc7 	bl	8004dce <HAL_GPIO_WritePin>
	TIM3->CNT = 0;
 8001440:	4b0b      	ldr	r3, [pc, #44]	; (8001470 <main+0xb0>)
 8001442:	2200      	movs	r2, #0
 8001444:	625a      	str	r2, [r3, #36]	; 0x24
	TIM4->CNT = 0;
 8001446:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <main+0xb4>)
 8001448:	2200      	movs	r2, #0
 800144a:	625a      	str	r2, [r3, #36]	; 0x24
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		mainMachine();
 800144c:	f000 f8e0 	bl	8001610 <mainMachine>
 8001450:	e7fc      	b.n	800144c <main+0x8c>
 8001452:	bf00      	nop
 8001454:	20002a9c 	.word	0x20002a9c
 8001458:	20002b2c 	.word	0x20002b2c
 800145c:	20002ae4 	.word	0x20002ae4
 8001460:	40010800 	.word	0x40010800
 8001464:	2000013c 	.word	0x2000013c
 8001468:	200000c8 	.word	0x200000c8
 800146c:	40011000 	.word	0x40011000
 8001470:	40000400 	.word	0x40000400
 8001474:	40000800 	.word	0x40000800

08001478 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001478:	b580      	push	{r7, lr}
 800147a:	b094      	sub	sp, #80	; 0x50
 800147c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800147e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001482:	2228      	movs	r2, #40	; 0x28
 8001484:	2100      	movs	r1, #0
 8001486:	4618      	mov	r0, r3
 8001488:	f006 faba 	bl	8007a00 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 800149c:	1d3b      	adds	r3, r7, #4
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	605a      	str	r2, [r3, #4]
 80014a4:	609a      	str	r2, [r3, #8]
 80014a6:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014a8:	2301      	movs	r3, #1
 80014aa:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80014b2:	2300      	movs	r3, #0
 80014b4:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014b6:	2301      	movs	r3, #1
 80014b8:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014ba:	2302      	movs	r3, #2
 80014bc:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014c2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80014c4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80014c8:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80014ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014ce:	4618      	mov	r0, r3
 80014d0:	f003 fc96 	bl	8004e00 <HAL_RCC_OscConfig>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <SystemClock_Config+0x66>
		Error_Handler();
 80014da:	f001 fe5f 	bl	800319c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80014de:	230f      	movs	r3, #15
 80014e0:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014e2:	2302      	movs	r3, #2
 80014e4:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014e6:	2300      	movs	r3, #0
 80014e8:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014ee:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014f0:	2300      	movs	r3, #0
 80014f2:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80014f4:	f107 0314 	add.w	r3, r7, #20
 80014f8:	2102      	movs	r1, #2
 80014fa:	4618      	mov	r0, r3
 80014fc:	f003 ff02 	bl	8005304 <HAL_RCC_ClockConfig>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <SystemClock_Config+0x92>
		Error_Handler();
 8001506:	f001 fe49 	bl	800319c <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800150a:	2302      	movs	r3, #2
 800150c:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800150e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001512:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001514:	1d3b      	adds	r3, r7, #4
 8001516:	4618      	mov	r0, r3
 8001518:	f004 f88c 	bl	8005634 <HAL_RCCEx_PeriphCLKConfig>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <SystemClock_Config+0xae>
		Error_Handler();
 8001522:	f001 fe3b 	bl	800319c <Error_Handler>
	}
}
 8001526:	bf00      	nop
 8001528:	3750      	adds	r7, #80	; 0x50
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
	...

08001530 <intUartSend>:

/* USER CODE BEGIN 4 */
void intUartSend(int entero) {
 8001530:	b580      	push	{r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
	int m;
	int c;
	int d;
	int u;

	m = entero / 1000;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	4a30      	ldr	r2, [pc, #192]	; (80015fc <intUartSend+0xcc>)
 800153c:	fb82 1203 	smull	r1, r2, r2, r3
 8001540:	1192      	asrs	r2, r2, #6
 8001542:	17db      	asrs	r3, r3, #31
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	617b      	str	r3, [r7, #20]
	c = entero / 100 - m * 10;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	4a2d      	ldr	r2, [pc, #180]	; (8001600 <intUartSend+0xd0>)
 800154c:	fb82 1203 	smull	r1, r2, r2, r3
 8001550:	1152      	asrs	r2, r2, #5
 8001552:	17db      	asrs	r3, r3, #31
 8001554:	1ad2      	subs	r2, r2, r3
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	f06f 0109 	mvn.w	r1, #9
 800155c:	fb01 f303 	mul.w	r3, r1, r3
 8001560:	4413      	add	r3, r2
 8001562:	613b      	str	r3, [r7, #16]
	d = entero / 10 - (m * 100 + c * 10);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	4a27      	ldr	r2, [pc, #156]	; (8001604 <intUartSend+0xd4>)
 8001568:	fb82 1203 	smull	r1, r2, r2, r3
 800156c:	1092      	asrs	r2, r2, #2
 800156e:	17db      	asrs	r3, r3, #31
 8001570:	1ad1      	subs	r1, r2, r3
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	2264      	movs	r2, #100	; 0x64
 8001576:	fb02 f003 	mul.w	r0, r2, r3
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	4613      	mov	r3, r2
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	4413      	add	r3, r2
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	4403      	add	r3, r0
 8001586:	1acb      	subs	r3, r1, r3
 8001588:	60fb      	str	r3, [r7, #12]
	u = entero - (m * 1000 + c * 100 + d * 10);
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001590:	fb03 f202 	mul.w	r2, r3, r2
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	2164      	movs	r1, #100	; 0x64
 8001598:	fb01 f303 	mul.w	r3, r1, r3
 800159c:	18d1      	adds	r1, r2, r3
 800159e:	68fa      	ldr	r2, [r7, #12]
 80015a0:	4613      	mov	r3, r2
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	4413      	add	r3, r2
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	440b      	add	r3, r1
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	60bb      	str	r3, [r7, #8]

	TX_BUFFER[0] = m + '0';
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	3330      	adds	r3, #48	; 0x30
 80015b6:	b2da      	uxtb	r2, r3
 80015b8:	4b13      	ldr	r3, [pc, #76]	; (8001608 <intUartSend+0xd8>)
 80015ba:	701a      	strb	r2, [r3, #0]
	TX_BUFFER[1] = c + '0';
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	3330      	adds	r3, #48	; 0x30
 80015c2:	b2da      	uxtb	r2, r3
 80015c4:	4b10      	ldr	r3, [pc, #64]	; (8001608 <intUartSend+0xd8>)
 80015c6:	705a      	strb	r2, [r3, #1]
	TX_BUFFER[2] = d + '0';
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	3330      	adds	r3, #48	; 0x30
 80015ce:	b2da      	uxtb	r2, r3
 80015d0:	4b0d      	ldr	r3, [pc, #52]	; (8001608 <intUartSend+0xd8>)
 80015d2:	709a      	strb	r2, [r3, #2]
	TX_BUFFER[3] = u + '0';
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	3330      	adds	r3, #48	; 0x30
 80015da:	b2da      	uxtb	r2, r3
 80015dc:	4b0a      	ldr	r3, [pc, #40]	; (8001608 <intUartSend+0xd8>)
 80015de:	70da      	strb	r2, [r3, #3]
	TX_BUFFER[4] = '\n';
 80015e0:	4b09      	ldr	r3, [pc, #36]	; (8001608 <intUartSend+0xd8>)
 80015e2:	220a      	movs	r2, #10
 80015e4:	711a      	strb	r2, [r3, #4]
	HAL_UART_Transmit(&huart1, TX_BUFFER, 5, 100);
 80015e6:	2364      	movs	r3, #100	; 0x64
 80015e8:	2205      	movs	r2, #5
 80015ea:	4907      	ldr	r1, [pc, #28]	; (8001608 <intUartSend+0xd8>)
 80015ec:	4807      	ldr	r0, [pc, #28]	; (800160c <intUartSend+0xdc>)
 80015ee:	f004 fe70 	bl	80062d2 <HAL_UART_Transmit>
}
 80015f2:	bf00      	nop
 80015f4:	3718      	adds	r7, #24
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	10624dd3 	.word	0x10624dd3
 8001600:	51eb851f 	.word	0x51eb851f
 8001604:	66666667 	.word	0x66666667
 8001608:	200011fc 	.word	0x200011fc
 800160c:	20002b74 	.word	0x20002b74

08001610 <mainMachine>:

void mainMachine() {
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
	switch (mainState) {
 8001614:	4b7a      	ldr	r3, [pc, #488]	; (8001800 <mainMachine+0x1f0>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2b03      	cmp	r3, #3
 800161a:	f200 80ee 	bhi.w	80017fa <mainMachine+0x1ea>
 800161e:	a201      	add	r2, pc, #4	; (adr r2, 8001624 <mainMachine+0x14>)
 8001620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001624:	08001635 	.word	0x08001635
 8001628:	08001713 	.word	0x08001713
 800162c:	08001777 	.word	0x08001777
 8001630:	080017f1 	.word	0x080017f1
	case SETUP:
		actual.x = ALTO;
 8001634:	4b73      	ldr	r3, [pc, #460]	; (8001804 <mainMachine+0x1f4>)
 8001636:	2208      	movs	r2, #8
 8001638:	601a      	str	r2, [r3, #0]
		actual.y = ANCHO;
 800163a:	4b72      	ldr	r3, [pc, #456]	; (8001804 <mainMachine+0x1f4>)
 800163c:	2208      	movs	r2, #8
 800163e:	605a      	str	r2, [r3, #4]
		/*visual.x = 0;
		 visual.y = 0;*/
		resetAxis();
 8001640:	f001 fbcc 	bl	8002ddc <resetAxis>
		movimientoFlag = 0;
 8001644:	4b70      	ldr	r3, [pc, #448]	; (8001808 <mainMachine+0x1f8>)
 8001646:	2200      	movs	r2, #0
 8001648:	601a      	str	r2, [r3, #0]
		finishFlag = 0;
 800164a:	4b70      	ldr	r3, [pc, #448]	; (800180c <mainMachine+0x1fc>)
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
		if (!HAL_GPIO_ReadPin(BTN1)) {
 8001650:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001654:	486e      	ldr	r0, [pc, #440]	; (8001810 <mainMachine+0x200>)
 8001656:	f003 fba3 	bl	8004da0 <HAL_GPIO_ReadPin>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d121      	bne.n	80016a4 <mainMachine+0x94>
			// Set The LED ON!
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001660:	2201      	movs	r2, #1
 8001662:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001666:	486b      	ldr	r0, [pc, #428]	; (8001814 <mainMachine+0x204>)
 8001668:	f003 fbb1 	bl	8004dce <HAL_GPIO_WritePin>
			choice = SLOW;
 800166c:	4b6a      	ldr	r3, [pc, #424]	; (8001818 <mainMachine+0x208>)
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]
			velocity = velocityChoice[SLOW];
 8001672:	4b6a      	ldr	r3, [pc, #424]	; (800181c <mainMachine+0x20c>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a6a      	ldr	r2, [pc, #424]	; (8001820 <mainMachine+0x210>)
 8001678:	6013      	str	r3, [r2, #0]
			TIM2->CCR3 = baseChoice[SLOW];
 800167a:	4b6a      	ldr	r3, [pc, #424]	; (8001824 <mainMachine+0x214>)
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001682:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM2->CCR4 = baseChoice[SLOW];
 8001684:	4b67      	ldr	r3, [pc, #412]	; (8001824 <mainMachine+0x214>)
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800168c:	641a      	str	r2, [r3, #64]	; 0x40
			KP = KPchoice[SLOW];
 800168e:	4b66      	ldr	r3, [pc, #408]	; (8001828 <mainMachine+0x218>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a66      	ldr	r2, [pc, #408]	; (800182c <mainMachine+0x21c>)
 8001694:	6013      	str	r3, [r2, #0]
			KD = KDchoice[SLOW];
 8001696:	4b66      	ldr	r3, [pc, #408]	; (8001830 <mainMachine+0x220>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a66      	ldr	r2, [pc, #408]	; (8001834 <mainMachine+0x224>)
 800169c:	6013      	str	r3, [r2, #0]
			mainState = MAPPING;
 800169e:	4b58      	ldr	r3, [pc, #352]	; (8001800 <mainMachine+0x1f0>)
 80016a0:	2201      	movs	r2, #1
 80016a2:	601a      	str	r2, [r3, #0]
		}
		if (!HAL_GPIO_ReadPin(BTN2)) {
 80016a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016a8:	4859      	ldr	r0, [pc, #356]	; (8001810 <mainMachine+0x200>)
 80016aa:	f003 fb79 	bl	8004da0 <HAL_GPIO_ReadPin>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d102      	bne.n	80016ba <mainMachine+0xaa>
			// Set The LED ON!
			mainState = RACING;
 80016b4:	4b52      	ldr	r3, [pc, #328]	; (8001800 <mainMachine+0x1f0>)
 80016b6:	2203      	movs	r2, #3
 80016b8:	601a      	str	r2, [r3, #0]
			//directions = ReadRun();
			//ShowRun();
		}
		if (!HAL_GPIO_ReadPin(BTN3)) {
 80016ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016be:	4854      	ldr	r0, [pc, #336]	; (8001810 <mainMachine+0x200>)
 80016c0:	f003 fb6e 	bl	8004da0 <HAL_GPIO_ReadPin>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	f040 8096 	bne.w	80017f8 <mainMachine+0x1e8>
			// Set The LED ON!
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80016cc:	2201      	movs	r2, #1
 80016ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016d2:	4850      	ldr	r0, [pc, #320]	; (8001814 <mainMachine+0x204>)
 80016d4:	f003 fb7b 	bl	8004dce <HAL_GPIO_WritePin>
			choice = FAST;
 80016d8:	4b4f      	ldr	r3, [pc, #316]	; (8001818 <mainMachine+0x208>)
 80016da:	2201      	movs	r2, #1
 80016dc:	601a      	str	r2, [r3, #0]
			velocity = velocityChoice[FAST];
 80016de:	4b4f      	ldr	r3, [pc, #316]	; (800181c <mainMachine+0x20c>)
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	4a4f      	ldr	r2, [pc, #316]	; (8001820 <mainMachine+0x210>)
 80016e4:	6013      	str	r3, [r2, #0]
			TIM2->CCR3 = baseChoice[FAST];
 80016e6:	4b4f      	ldr	r3, [pc, #316]	; (8001824 <mainMachine+0x214>)
 80016e8:	685a      	ldr	r2, [r3, #4]
 80016ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016ee:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM2->CCR4 = baseChoice[FAST];
 80016f0:	4b4c      	ldr	r3, [pc, #304]	; (8001824 <mainMachine+0x214>)
 80016f2:	685a      	ldr	r2, [r3, #4]
 80016f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016f8:	641a      	str	r2, [r3, #64]	; 0x40
			KP = KPchoice[FAST];
 80016fa:	4b4b      	ldr	r3, [pc, #300]	; (8001828 <mainMachine+0x218>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	4a4b      	ldr	r2, [pc, #300]	; (800182c <mainMachine+0x21c>)
 8001700:	6013      	str	r3, [r2, #0]
			KD = KDchoice[FAST];
 8001702:	4b4b      	ldr	r3, [pc, #300]	; (8001830 <mainMachine+0x220>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	4a4b      	ldr	r2, [pc, #300]	; (8001834 <mainMachine+0x224>)
 8001708:	6013      	str	r3, [r2, #0]
			mainState = MAPPING;
 800170a:	4b3d      	ldr	r3, [pc, #244]	; (8001800 <mainMachine+0x1f0>)
 800170c:	2201      	movs	r2, #1
 800170e:	601a      	str	r2, [r3, #0]
		}
		//confirmacionCentrado();
		break;
 8001710:	e072      	b.n	80017f8 <mainMachine+0x1e8>
	case MAPPING:
		if (finishFlag == 0) {
 8001712:	4b3e      	ldr	r3, [pc, #248]	; (800180c <mainMachine+0x1fc>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d102      	bne.n	8001720 <mainMachine+0x110>
			robotMachine();
 800171a:	f000 f895 	bl	8001848 <robotMachine>
			finishFlag = 0;
			resetAxis();
			//PrintMap();
			mainState = RESOLUTION;
		}
		break;
 800171e:	e06c      	b.n	80017fa <mainMachine+0x1ea>
			TX_BUFFER[0] = 'X';
 8001720:	4b45      	ldr	r3, [pc, #276]	; (8001838 <mainMachine+0x228>)
 8001722:	2258      	movs	r2, #88	; 0x58
 8001724:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, TX_BUFFER, 1, 100);
 8001726:	2364      	movs	r3, #100	; 0x64
 8001728:	2201      	movs	r2, #1
 800172a:	4943      	ldr	r1, [pc, #268]	; (8001838 <mainMachine+0x228>)
 800172c:	4843      	ldr	r0, [pc, #268]	; (800183c <mainMachine+0x22c>)
 800172e:	f004 fdd0 	bl	80062d2 <HAL_UART_Transmit>
			intUartSend(actual.x);
 8001732:	4b34      	ldr	r3, [pc, #208]	; (8001804 <mainMachine+0x1f4>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff fefa 	bl	8001530 <intUartSend>
			TX_BUFFER[0] = 'Y';
 800173c:	4b3e      	ldr	r3, [pc, #248]	; (8001838 <mainMachine+0x228>)
 800173e:	2259      	movs	r2, #89	; 0x59
 8001740:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, TX_BUFFER, 1, 100);
 8001742:	2364      	movs	r3, #100	; 0x64
 8001744:	2201      	movs	r2, #1
 8001746:	493c      	ldr	r1, [pc, #240]	; (8001838 <mainMachine+0x228>)
 8001748:	483c      	ldr	r0, [pc, #240]	; (800183c <mainMachine+0x22c>)
 800174a:	f004 fdc2 	bl	80062d2 <HAL_UART_Transmit>
			intUartSend(actual.y);
 800174e:	4b2d      	ldr	r3, [pc, #180]	; (8001804 <mainMachine+0x1f4>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	4618      	mov	r0, r3
 8001754:	f7ff feec 	bl	8001530 <intUartSend>
			actual.x = ALTO;
 8001758:	4b2a      	ldr	r3, [pc, #168]	; (8001804 <mainMachine+0x1f4>)
 800175a:	2208      	movs	r2, #8
 800175c:	601a      	str	r2, [r3, #0]
			actual.y = ANCHO;
 800175e:	4b29      	ldr	r3, [pc, #164]	; (8001804 <mainMachine+0x1f4>)
 8001760:	2208      	movs	r2, #8
 8001762:	605a      	str	r2, [r3, #4]
			finishFlag = 0;
 8001764:	4b29      	ldr	r3, [pc, #164]	; (800180c <mainMachine+0x1fc>)
 8001766:	2200      	movs	r2, #0
 8001768:	601a      	str	r2, [r3, #0]
			resetAxis();
 800176a:	f001 fb37 	bl	8002ddc <resetAxis>
			mainState = RESOLUTION;
 800176e:	4b24      	ldr	r3, [pc, #144]	; (8001800 <mainMachine+0x1f0>)
 8001770:	2202      	movs	r2, #2
 8001772:	601a      	str	r2, [r3, #0]
		break;
 8001774:	e041      	b.n	80017fa <mainMachine+0x1ea>
	case RESOLUTION:
		if (Map[actual.x][actual.y].final == 0) {
 8001776:	4b23      	ldr	r3, [pc, #140]	; (8001804 <mainMachine+0x1f4>)
 8001778:	6819      	ldr	r1, [r3, #0]
 800177a:	4b22      	ldr	r3, [pc, #136]	; (8001804 <mainMachine+0x1f4>)
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	4830      	ldr	r0, [pc, #192]	; (8001840 <mainMachine+0x230>)
 8001780:	461a      	mov	r2, r3
 8001782:	0052      	lsls	r2, r2, #1
 8001784:	441a      	add	r2, r3
 8001786:	00d3      	lsls	r3, r2, #3
 8001788:	461a      	mov	r2, r3
 800178a:	460b      	mov	r3, r1
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	440b      	add	r3, r1
 8001790:	01db      	lsls	r3, r3, #7
 8001792:	4413      	add	r3, r2
 8001794:	4403      	add	r3, r0
 8001796:	3314      	adds	r3, #20
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d124      	bne.n	80017e8 <mainMachine+0x1d8>
			addDirection(actual.x, actual.y);
 800179e:	4b19      	ldr	r3, [pc, #100]	; (8001804 <mainMachine+0x1f4>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a18      	ldr	r2, [pc, #96]	; (8001804 <mainMachine+0x1f4>)
 80017a4:	6852      	ldr	r2, [r2, #4]
 80017a6:	4611      	mov	r1, r2
 80017a8:	4618      	mov	r0, r3
 80017aa:	f000 fb85 	bl	8001eb8 <addDirection>
			TX_BUFFER[0] = 'X';
 80017ae:	4b22      	ldr	r3, [pc, #136]	; (8001838 <mainMachine+0x228>)
 80017b0:	2258      	movs	r2, #88	; 0x58
 80017b2:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, TX_BUFFER, 1, 100);
 80017b4:	2364      	movs	r3, #100	; 0x64
 80017b6:	2201      	movs	r2, #1
 80017b8:	491f      	ldr	r1, [pc, #124]	; (8001838 <mainMachine+0x228>)
 80017ba:	4820      	ldr	r0, [pc, #128]	; (800183c <mainMachine+0x22c>)
 80017bc:	f004 fd89 	bl	80062d2 <HAL_UART_Transmit>
			intUartSend(actual.x);
 80017c0:	4b10      	ldr	r3, [pc, #64]	; (8001804 <mainMachine+0x1f4>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff feb3 	bl	8001530 <intUartSend>
			TX_BUFFER[0] = 'Y';
 80017ca:	4b1b      	ldr	r3, [pc, #108]	; (8001838 <mainMachine+0x228>)
 80017cc:	2259      	movs	r2, #89	; 0x59
 80017ce:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, TX_BUFFER, 1, 100);
 80017d0:	2364      	movs	r3, #100	; 0x64
 80017d2:	2201      	movs	r2, #1
 80017d4:	4918      	ldr	r1, [pc, #96]	; (8001838 <mainMachine+0x228>)
 80017d6:	4819      	ldr	r0, [pc, #100]	; (800183c <mainMachine+0x22c>)
 80017d8:	f004 fd7b 	bl	80062d2 <HAL_UART_Transmit>
			intUartSend(actual.y);
 80017dc:	4b09      	ldr	r3, [pc, #36]	; (8001804 <mainMachine+0x1f4>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff fea5 	bl	8001530 <intUartSend>
			//SerialBT.println(directions);
			// UploadRun(directions);
			mainState = SETUP;
		}

		break;
 80017e6:	e008      	b.n	80017fa <mainMachine+0x1ea>
			mainState = SETUP;
 80017e8:	4b05      	ldr	r3, [pc, #20]	; (8001800 <mainMachine+0x1f0>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
		break;
 80017ee:	e004      	b.n	80017fa <mainMachine+0x1ea>
	case RACING:
		runDirections(directions);
 80017f0:	4814      	ldr	r0, [pc, #80]	; (8001844 <mainMachine+0x234>)
 80017f2:	f000 fb13 	bl	8001e1c <runDirections>
		break;
 80017f6:	e000      	b.n	80017fa <mainMachine+0x1ea>
		break;
 80017f8:	bf00      	nop
	}

}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20001240 	.word	0x20001240
 8001804:	20001264 	.word	0x20001264
 8001808:	2000122c 	.word	0x2000122c
 800180c:	20001228 	.word	0x20001228
 8001810:	40010c00 	.word	0x40010c00
 8001814:	40011000 	.word	0x40011000
 8001818:	20001218 	.word	0x20001218
 800181c:	20000010 	.word	0x20000010
 8001820:	20001210 	.word	0x20001210
 8001824:	20000018 	.word	0x20000018
 8001828:	20000000 	.word	0x20000000
 800182c:	20001208 	.word	0x20001208
 8001830:	20000008 	.word	0x20000008
 8001834:	2000120c 	.word	0x2000120c
 8001838:	200011fc 	.word	0x200011fc
 800183c:	20002b74 	.word	0x20002b74
 8001840:	20001274 	.word	0x20001274
 8001844:	20001248 	.word	0x20001248

08001848 <robotMachine>:

void robotMachine() {
 8001848:	b5b0      	push	{r4, r5, r7, lr}
 800184a:	af00      	add	r7, sp, #0
	switch (robotState) {
 800184c:	4b06      	ldr	r3, [pc, #24]	; (8001868 <robotMachine+0x20>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2b02      	cmp	r3, #2
 8001852:	f000 82b2 	beq.w	8001dba <robotMachine+0x572>
 8001856:	2b02      	cmp	r3, #2
 8001858:	f300 82c2 	bgt.w	8001de0 <robotMachine+0x598>
 800185c:	2b00      	cmp	r3, #0
 800185e:	d005      	beq.n	800186c <robotMachine+0x24>
 8001860:	2b01      	cmp	r3, #1
 8001862:	f000 81dd 	beq.w	8001c20 <robotMachine+0x3d8>
		if (movimientoFlag == 1) {
			robotState = READING;
		}
		break;
	}
}
 8001866:	e2bb      	b.n	8001de0 <robotMachine+0x598>
 8001868:	20001244 	.word	0x20001244
		TX_BUFFER[0] = 'X';
 800186c:	4bb9      	ldr	r3, [pc, #740]	; (8001b54 <robotMachine+0x30c>)
 800186e:	2258      	movs	r2, #88	; 0x58
 8001870:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = actual.x + '0';
 8001872:	4bb9      	ldr	r3, [pc, #740]	; (8001b58 <robotMachine+0x310>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	b2db      	uxtb	r3, r3
 8001878:	3330      	adds	r3, #48	; 0x30
 800187a:	b2da      	uxtb	r2, r3
 800187c:	4bb5      	ldr	r3, [pc, #724]	; (8001b54 <robotMachine+0x30c>)
 800187e:	705a      	strb	r2, [r3, #1]
		TX_BUFFER[2] = '\n';
 8001880:	4bb4      	ldr	r3, [pc, #720]	; (8001b54 <robotMachine+0x30c>)
 8001882:	220a      	movs	r2, #10
 8001884:	709a      	strb	r2, [r3, #2]
		TX_BUFFER[3] = 'Y';
 8001886:	4bb3      	ldr	r3, [pc, #716]	; (8001b54 <robotMachine+0x30c>)
 8001888:	2259      	movs	r2, #89	; 0x59
 800188a:	70da      	strb	r2, [r3, #3]
		TX_BUFFER[4] = actual.y + '0';
 800188c:	4bb2      	ldr	r3, [pc, #712]	; (8001b58 <robotMachine+0x310>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	b2db      	uxtb	r3, r3
 8001892:	3330      	adds	r3, #48	; 0x30
 8001894:	b2da      	uxtb	r2, r3
 8001896:	4baf      	ldr	r3, [pc, #700]	; (8001b54 <robotMachine+0x30c>)
 8001898:	711a      	strb	r2, [r3, #4]
		TX_BUFFER[5] = '\n';
 800189a:	4bae      	ldr	r3, [pc, #696]	; (8001b54 <robotMachine+0x30c>)
 800189c:	220a      	movs	r2, #10
 800189e:	715a      	strb	r2, [r3, #5]
		HAL_UART_Transmit(&huart1, TX_BUFFER, 6, 100);
 80018a0:	2364      	movs	r3, #100	; 0x64
 80018a2:	2206      	movs	r2, #6
 80018a4:	49ab      	ldr	r1, [pc, #684]	; (8001b54 <robotMachine+0x30c>)
 80018a6:	48ad      	ldr	r0, [pc, #692]	; (8001b5c <robotMachine+0x314>)
 80018a8:	f004 fd13 	bl	80062d2 <HAL_UART_Transmit>
		Map[actual.x][actual.y].visitado++;
 80018ac:	4baa      	ldr	r3, [pc, #680]	; (8001b58 <robotMachine+0x310>)
 80018ae:	6819      	ldr	r1, [r3, #0]
 80018b0:	4ba9      	ldr	r3, [pc, #676]	; (8001b58 <robotMachine+0x310>)
 80018b2:	6858      	ldr	r0, [r3, #4]
 80018b4:	4caa      	ldr	r4, [pc, #680]	; (8001b60 <robotMachine+0x318>)
 80018b6:	4602      	mov	r2, r0
 80018b8:	0052      	lsls	r2, r2, #1
 80018ba:	4402      	add	r2, r0
 80018bc:	00d3      	lsls	r3, r2, #3
 80018be:	461a      	mov	r2, r3
 80018c0:	460b      	mov	r3, r1
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	440b      	add	r3, r1
 80018c6:	01db      	lsls	r3, r3, #7
 80018c8:	4413      	add	r3, r2
 80018ca:	4423      	add	r3, r4
 80018cc:	3310      	adds	r3, #16
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	1c5c      	adds	r4, r3, #1
 80018d2:	4da3      	ldr	r5, [pc, #652]	; (8001b60 <robotMachine+0x318>)
 80018d4:	4602      	mov	r2, r0
 80018d6:	0052      	lsls	r2, r2, #1
 80018d8:	4402      	add	r2, r0
 80018da:	00d3      	lsls	r3, r2, #3
 80018dc:	461a      	mov	r2, r3
 80018de:	460b      	mov	r3, r1
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	440b      	add	r3, r1
 80018e4:	01db      	lsls	r3, r3, #7
 80018e6:	4413      	add	r3, r2
 80018e8:	442b      	add	r3, r5
 80018ea:	3310      	adds	r3, #16
 80018ec:	601c      	str	r4, [r3, #0]
		if (Map[actual.x][actual.y].visitado == 1) {
 80018ee:	4b9a      	ldr	r3, [pc, #616]	; (8001b58 <robotMachine+0x310>)
 80018f0:	6819      	ldr	r1, [r3, #0]
 80018f2:	4b99      	ldr	r3, [pc, #612]	; (8001b58 <robotMachine+0x310>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	489a      	ldr	r0, [pc, #616]	; (8001b60 <robotMachine+0x318>)
 80018f8:	461a      	mov	r2, r3
 80018fa:	0052      	lsls	r2, r2, #1
 80018fc:	441a      	add	r2, r3
 80018fe:	00d3      	lsls	r3, r2, #3
 8001900:	461a      	mov	r2, r3
 8001902:	460b      	mov	r3, r1
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	440b      	add	r3, r1
 8001908:	01db      	lsls	r3, r3, #7
 800190a:	4413      	add	r3, r2
 800190c:	4403      	add	r3, r0
 800190e:	3310      	adds	r3, #16
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2b01      	cmp	r3, #1
 8001914:	f040 80bf 	bne.w	8001a96 <robotMachine+0x24e>
			runMotor(OFF, MOTOR_A);
 8001918:	2100      	movs	r1, #0
 800191a:	2005      	movs	r0, #5
 800191c:	f001 fc6a 	bl	80031f4 <runMotor>
			runMotor(OFF, MOTOR_B);
 8001920:	2101      	movs	r1, #1
 8001922:	2005      	movs	r0, #5
 8001924:	f001 fc66 	bl	80031f4 <runMotor>
			CreateNode(actual.x, actual.y);
 8001928:	4b8b      	ldr	r3, [pc, #556]	; (8001b58 <robotMachine+0x310>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a8a      	ldr	r2, [pc, #552]	; (8001b58 <robotMachine+0x310>)
 800192e:	6852      	ldr	r2, [r2, #4]
 8001930:	4611      	mov	r1, r2
 8001932:	4618      	mov	r0, r3
 8001934:	f001 f98c 	bl	8002c50 <CreateNode>
			TX_BUFFER[0] = 'D';
 8001938:	4b86      	ldr	r3, [pc, #536]	; (8001b54 <robotMachine+0x30c>)
 800193a:	2244      	movs	r2, #68	; 0x44
 800193c:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, TX_BUFFER, 1, 100);
 800193e:	2364      	movs	r3, #100	; 0x64
 8001940:	2201      	movs	r2, #1
 8001942:	4984      	ldr	r1, [pc, #528]	; (8001b54 <robotMachine+0x30c>)
 8001944:	4885      	ldr	r0, [pc, #532]	; (8001b5c <robotMachine+0x314>)
 8001946:	f004 fcc4 	bl	80062d2 <HAL_UART_Transmit>
			intUartSend(Sensors[1]);
 800194a:	4b86      	ldr	r3, [pc, #536]	; (8001b64 <robotMachine+0x31c>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff fb8e 	bl	8001070 <__aeabi_f2iz>
 8001954:	4603      	mov	r3, r0
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff fdea 	bl	8001530 <intUartSend>
			TX_BUFFER[0] = 'C';
 800195c:	4b7d      	ldr	r3, [pc, #500]	; (8001b54 <robotMachine+0x30c>)
 800195e:	2243      	movs	r2, #67	; 0x43
 8001960:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, TX_BUFFER, 1, 100);
 8001962:	2364      	movs	r3, #100	; 0x64
 8001964:	2201      	movs	r2, #1
 8001966:	497b      	ldr	r1, [pc, #492]	; (8001b54 <robotMachine+0x30c>)
 8001968:	487c      	ldr	r0, [pc, #496]	; (8001b5c <robotMachine+0x314>)
 800196a:	f004 fcb2 	bl	80062d2 <HAL_UART_Transmit>
			intUartSend(Sensors[2]);
 800196e:	4b7d      	ldr	r3, [pc, #500]	; (8001b64 <robotMachine+0x31c>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	4618      	mov	r0, r3
 8001974:	f7ff fb7c 	bl	8001070 <__aeabi_f2iz>
 8001978:	4603      	mov	r3, r0
 800197a:	4618      	mov	r0, r3
 800197c:	f7ff fdd8 	bl	8001530 <intUartSend>
			TX_BUFFER[0] = 'I';
 8001980:	4b74      	ldr	r3, [pc, #464]	; (8001b54 <robotMachine+0x30c>)
 8001982:	2249      	movs	r2, #73	; 0x49
 8001984:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, TX_BUFFER, 1, 100);
 8001986:	2364      	movs	r3, #100	; 0x64
 8001988:	2201      	movs	r2, #1
 800198a:	4972      	ldr	r1, [pc, #456]	; (8001b54 <robotMachine+0x30c>)
 800198c:	4873      	ldr	r0, [pc, #460]	; (8001b5c <robotMachine+0x314>)
 800198e:	f004 fca0 	bl	80062d2 <HAL_UART_Transmit>
			intUartSend(Sensors[3]);
 8001992:	4b74      	ldr	r3, [pc, #464]	; (8001b64 <robotMachine+0x31c>)
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	4618      	mov	r0, r3
 8001998:	f7ff fb6a 	bl	8001070 <__aeabi_f2iz>
 800199c:	4603      	mov	r3, r0
 800199e:	4618      	mov	r0, r3
 80019a0:	f7ff fdc6 	bl	8001530 <intUartSend>
			TX_BUFFER[0] = 'D';
 80019a4:	4b6b      	ldr	r3, [pc, #428]	; (8001b54 <robotMachine+0x30c>)
 80019a6:	2244      	movs	r2, #68	; 0x44
 80019a8:	701a      	strb	r2, [r3, #0]
			TX_BUFFER[1] = Map[actual.x][actual.y].Lados[DERECHA] + '0';
 80019aa:	4b6b      	ldr	r3, [pc, #428]	; (8001b58 <robotMachine+0x310>)
 80019ac:	6819      	ldr	r1, [r3, #0]
 80019ae:	4b6a      	ldr	r3, [pc, #424]	; (8001b58 <robotMachine+0x310>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	486b      	ldr	r0, [pc, #428]	; (8001b60 <robotMachine+0x318>)
 80019b4:	461a      	mov	r2, r3
 80019b6:	0052      	lsls	r2, r2, #1
 80019b8:	441a      	add	r2, r3
 80019ba:	00d3      	lsls	r3, r2, #3
 80019bc:	461a      	mov	r2, r3
 80019be:	460b      	mov	r3, r1
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	440b      	add	r3, r1
 80019c4:	01db      	lsls	r3, r3, #7
 80019c6:	4413      	add	r3, r2
 80019c8:	4403      	add	r3, r0
 80019ca:	330c      	adds	r3, #12
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	3330      	adds	r3, #48	; 0x30
 80019d2:	b2da      	uxtb	r2, r3
 80019d4:	4b5f      	ldr	r3, [pc, #380]	; (8001b54 <robotMachine+0x30c>)
 80019d6:	705a      	strb	r2, [r3, #1]
			TX_BUFFER[2] = '\n';
 80019d8:	4b5e      	ldr	r3, [pc, #376]	; (8001b54 <robotMachine+0x30c>)
 80019da:	220a      	movs	r2, #10
 80019dc:	709a      	strb	r2, [r3, #2]
			TX_BUFFER[3] = 'C';
 80019de:	4b5d      	ldr	r3, [pc, #372]	; (8001b54 <robotMachine+0x30c>)
 80019e0:	2243      	movs	r2, #67	; 0x43
 80019e2:	70da      	strb	r2, [r3, #3]
			TX_BUFFER[4] = Map[actual.x][actual.y].Lados[ADELANTE] + '0';
 80019e4:	4b5c      	ldr	r3, [pc, #368]	; (8001b58 <robotMachine+0x310>)
 80019e6:	6819      	ldr	r1, [r3, #0]
 80019e8:	4b5b      	ldr	r3, [pc, #364]	; (8001b58 <robotMachine+0x310>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	485c      	ldr	r0, [pc, #368]	; (8001b60 <robotMachine+0x318>)
 80019ee:	461a      	mov	r2, r3
 80019f0:	0052      	lsls	r2, r2, #1
 80019f2:	441a      	add	r2, r3
 80019f4:	00d3      	lsls	r3, r2, #3
 80019f6:	461a      	mov	r2, r3
 80019f8:	460b      	mov	r3, r1
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	440b      	add	r3, r1
 80019fe:	01db      	lsls	r3, r3, #7
 8001a00:	4413      	add	r3, r2
 8001a02:	4403      	add	r3, r0
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	3330      	adds	r3, #48	; 0x30
 8001a0a:	b2da      	uxtb	r2, r3
 8001a0c:	4b51      	ldr	r3, [pc, #324]	; (8001b54 <robotMachine+0x30c>)
 8001a0e:	711a      	strb	r2, [r3, #4]
			TX_BUFFER[5] = '\n';
 8001a10:	4b50      	ldr	r3, [pc, #320]	; (8001b54 <robotMachine+0x30c>)
 8001a12:	220a      	movs	r2, #10
 8001a14:	715a      	strb	r2, [r3, #5]
			TX_BUFFER[6] = 'I';
 8001a16:	4b4f      	ldr	r3, [pc, #316]	; (8001b54 <robotMachine+0x30c>)
 8001a18:	2249      	movs	r2, #73	; 0x49
 8001a1a:	719a      	strb	r2, [r3, #6]
			TX_BUFFER[7] = Map[actual.x][actual.y].Lados[IZQUIERDA] + '0';
 8001a1c:	4b4e      	ldr	r3, [pc, #312]	; (8001b58 <robotMachine+0x310>)
 8001a1e:	6819      	ldr	r1, [r3, #0]
 8001a20:	4b4d      	ldr	r3, [pc, #308]	; (8001b58 <robotMachine+0x310>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	484e      	ldr	r0, [pc, #312]	; (8001b60 <robotMachine+0x318>)
 8001a26:	461a      	mov	r2, r3
 8001a28:	0052      	lsls	r2, r2, #1
 8001a2a:	441a      	add	r2, r3
 8001a2c:	00d3      	lsls	r3, r2, #3
 8001a2e:	461a      	mov	r2, r3
 8001a30:	460b      	mov	r3, r1
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	440b      	add	r3, r1
 8001a36:	01db      	lsls	r3, r3, #7
 8001a38:	4413      	add	r3, r2
 8001a3a:	4403      	add	r3, r0
 8001a3c:	3304      	adds	r3, #4
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	3330      	adds	r3, #48	; 0x30
 8001a44:	b2da      	uxtb	r2, r3
 8001a46:	4b43      	ldr	r3, [pc, #268]	; (8001b54 <robotMachine+0x30c>)
 8001a48:	71da      	strb	r2, [r3, #7]
			TX_BUFFER[8] = '\n';
 8001a4a:	4b42      	ldr	r3, [pc, #264]	; (8001b54 <robotMachine+0x30c>)
 8001a4c:	220a      	movs	r2, #10
 8001a4e:	721a      	strb	r2, [r3, #8]
			TX_BUFFER[9] = 'A';
 8001a50:	4b40      	ldr	r3, [pc, #256]	; (8001b54 <robotMachine+0x30c>)
 8001a52:	2241      	movs	r2, #65	; 0x41
 8001a54:	725a      	strb	r2, [r3, #9]
			TX_BUFFER[10] = Map[actual.x][actual.y].Lados[ATRAS] + '0';
 8001a56:	4b40      	ldr	r3, [pc, #256]	; (8001b58 <robotMachine+0x310>)
 8001a58:	6819      	ldr	r1, [r3, #0]
 8001a5a:	4b3f      	ldr	r3, [pc, #252]	; (8001b58 <robotMachine+0x310>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	4840      	ldr	r0, [pc, #256]	; (8001b60 <robotMachine+0x318>)
 8001a60:	461a      	mov	r2, r3
 8001a62:	0052      	lsls	r2, r2, #1
 8001a64:	441a      	add	r2, r3
 8001a66:	00d3      	lsls	r3, r2, #3
 8001a68:	461a      	mov	r2, r3
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	440b      	add	r3, r1
 8001a70:	01db      	lsls	r3, r3, #7
 8001a72:	4413      	add	r3, r2
 8001a74:	4403      	add	r3, r0
 8001a76:	3308      	adds	r3, #8
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	3330      	adds	r3, #48	; 0x30
 8001a7e:	b2da      	uxtb	r2, r3
 8001a80:	4b34      	ldr	r3, [pc, #208]	; (8001b54 <robotMachine+0x30c>)
 8001a82:	729a      	strb	r2, [r3, #10]
			TX_BUFFER[11] = '\n';
 8001a84:	4b33      	ldr	r3, [pc, #204]	; (8001b54 <robotMachine+0x30c>)
 8001a86:	220a      	movs	r2, #10
 8001a88:	72da      	strb	r2, [r3, #11]
			HAL_UART_Transmit(&huart1, TX_BUFFER, 12, 100);
 8001a8a:	2364      	movs	r3, #100	; 0x64
 8001a8c:	220c      	movs	r2, #12
 8001a8e:	4931      	ldr	r1, [pc, #196]	; (8001b54 <robotMachine+0x30c>)
 8001a90:	4832      	ldr	r0, [pc, #200]	; (8001b5c <robotMachine+0x314>)
 8001a92:	f004 fc1e 	bl	80062d2 <HAL_UART_Transmit>
		TX_BUFFER[0] = 'D';
 8001a96:	4b2f      	ldr	r3, [pc, #188]	; (8001b54 <robotMachine+0x30c>)
 8001a98:	2244      	movs	r2, #68	; 0x44
 8001a9a:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = Map[actual.x][actual.y].Lados[DERECHA] + '0';
 8001a9c:	4b2e      	ldr	r3, [pc, #184]	; (8001b58 <robotMachine+0x310>)
 8001a9e:	6819      	ldr	r1, [r3, #0]
 8001aa0:	4b2d      	ldr	r3, [pc, #180]	; (8001b58 <robotMachine+0x310>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	482e      	ldr	r0, [pc, #184]	; (8001b60 <robotMachine+0x318>)
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	0052      	lsls	r2, r2, #1
 8001aaa:	441a      	add	r2, r3
 8001aac:	00d3      	lsls	r3, r2, #3
 8001aae:	461a      	mov	r2, r3
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	440b      	add	r3, r1
 8001ab6:	01db      	lsls	r3, r3, #7
 8001ab8:	4413      	add	r3, r2
 8001aba:	4403      	add	r3, r0
 8001abc:	330c      	adds	r3, #12
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	3330      	adds	r3, #48	; 0x30
 8001ac4:	b2da      	uxtb	r2, r3
 8001ac6:	4b23      	ldr	r3, [pc, #140]	; (8001b54 <robotMachine+0x30c>)
 8001ac8:	705a      	strb	r2, [r3, #1]
		TX_BUFFER[2] = '\n';
 8001aca:	4b22      	ldr	r3, [pc, #136]	; (8001b54 <robotMachine+0x30c>)
 8001acc:	220a      	movs	r2, #10
 8001ace:	709a      	strb	r2, [r3, #2]
		TX_BUFFER[3] = 'C';
 8001ad0:	4b20      	ldr	r3, [pc, #128]	; (8001b54 <robotMachine+0x30c>)
 8001ad2:	2243      	movs	r2, #67	; 0x43
 8001ad4:	70da      	strb	r2, [r3, #3]
		TX_BUFFER[4] = Map[actual.x][actual.y].Lados[ADELANTE] + '0';
 8001ad6:	4b20      	ldr	r3, [pc, #128]	; (8001b58 <robotMachine+0x310>)
 8001ad8:	6819      	ldr	r1, [r3, #0]
 8001ada:	4b1f      	ldr	r3, [pc, #124]	; (8001b58 <robotMachine+0x310>)
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	4820      	ldr	r0, [pc, #128]	; (8001b60 <robotMachine+0x318>)
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	0052      	lsls	r2, r2, #1
 8001ae4:	441a      	add	r2, r3
 8001ae6:	00d3      	lsls	r3, r2, #3
 8001ae8:	461a      	mov	r2, r3
 8001aea:	460b      	mov	r3, r1
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	440b      	add	r3, r1
 8001af0:	01db      	lsls	r3, r3, #7
 8001af2:	4413      	add	r3, r2
 8001af4:	4403      	add	r3, r0
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	3330      	adds	r3, #48	; 0x30
 8001afc:	b2da      	uxtb	r2, r3
 8001afe:	4b15      	ldr	r3, [pc, #84]	; (8001b54 <robotMachine+0x30c>)
 8001b00:	711a      	strb	r2, [r3, #4]
		TX_BUFFER[5] = '\n';
 8001b02:	4b14      	ldr	r3, [pc, #80]	; (8001b54 <robotMachine+0x30c>)
 8001b04:	220a      	movs	r2, #10
 8001b06:	715a      	strb	r2, [r3, #5]
		TX_BUFFER[6] = 'I';
 8001b08:	4b12      	ldr	r3, [pc, #72]	; (8001b54 <robotMachine+0x30c>)
 8001b0a:	2249      	movs	r2, #73	; 0x49
 8001b0c:	719a      	strb	r2, [r3, #6]
		TX_BUFFER[7] = Map[actual.x][actual.y].Lados[IZQUIERDA] + '0';
 8001b0e:	4b12      	ldr	r3, [pc, #72]	; (8001b58 <robotMachine+0x310>)
 8001b10:	6819      	ldr	r1, [r3, #0]
 8001b12:	4b11      	ldr	r3, [pc, #68]	; (8001b58 <robotMachine+0x310>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	4812      	ldr	r0, [pc, #72]	; (8001b60 <robotMachine+0x318>)
 8001b18:	461a      	mov	r2, r3
 8001b1a:	0052      	lsls	r2, r2, #1
 8001b1c:	441a      	add	r2, r3
 8001b1e:	00d3      	lsls	r3, r2, #3
 8001b20:	461a      	mov	r2, r3
 8001b22:	460b      	mov	r3, r1
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	440b      	add	r3, r1
 8001b28:	01db      	lsls	r3, r3, #7
 8001b2a:	4413      	add	r3, r2
 8001b2c:	4403      	add	r3, r0
 8001b2e:	3304      	adds	r3, #4
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	3330      	adds	r3, #48	; 0x30
 8001b36:	b2da      	uxtb	r2, r3
 8001b38:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <robotMachine+0x30c>)
 8001b3a:	71da      	strb	r2, [r3, #7]
		TX_BUFFER[8] = '\n';
 8001b3c:	4b05      	ldr	r3, [pc, #20]	; (8001b54 <robotMachine+0x30c>)
 8001b3e:	220a      	movs	r2, #10
 8001b40:	721a      	strb	r2, [r3, #8]
		TX_BUFFER[9] = 'A';
 8001b42:	4b04      	ldr	r3, [pc, #16]	; (8001b54 <robotMachine+0x30c>)
 8001b44:	2241      	movs	r2, #65	; 0x41
 8001b46:	725a      	strb	r2, [r3, #9]
		TX_BUFFER[10] = Map[actual.x][actual.y].Lados[ATRAS] + '0';
 8001b48:	4b03      	ldr	r3, [pc, #12]	; (8001b58 <robotMachine+0x310>)
 8001b4a:	6819      	ldr	r1, [r3, #0]
 8001b4c:	4b02      	ldr	r3, [pc, #8]	; (8001b58 <robotMachine+0x310>)
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	e00a      	b.n	8001b68 <robotMachine+0x320>
 8001b52:	bf00      	nop
 8001b54:	200011fc 	.word	0x200011fc
 8001b58:	20001264 	.word	0x20001264
 8001b5c:	20002b74 	.word	0x20002b74
 8001b60:	20001274 	.word	0x20001274
 8001b64:	200011dc 	.word	0x200011dc
 8001b68:	489e      	ldr	r0, [pc, #632]	; (8001de4 <robotMachine+0x59c>)
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	0052      	lsls	r2, r2, #1
 8001b6e:	441a      	add	r2, r3
 8001b70:	00d3      	lsls	r3, r2, #3
 8001b72:	461a      	mov	r2, r3
 8001b74:	460b      	mov	r3, r1
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	440b      	add	r3, r1
 8001b7a:	01db      	lsls	r3, r3, #7
 8001b7c:	4413      	add	r3, r2
 8001b7e:	4403      	add	r3, r0
 8001b80:	3308      	adds	r3, #8
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	3330      	adds	r3, #48	; 0x30
 8001b88:	b2da      	uxtb	r2, r3
 8001b8a:	4b97      	ldr	r3, [pc, #604]	; (8001de8 <robotMachine+0x5a0>)
 8001b8c:	729a      	strb	r2, [r3, #10]
		TX_BUFFER[11] = '\n';
 8001b8e:	4b96      	ldr	r3, [pc, #600]	; (8001de8 <robotMachine+0x5a0>)
 8001b90:	220a      	movs	r2, #10
 8001b92:	72da      	strb	r2, [r3, #11]
		HAL_UART_Transmit(&huart1, TX_BUFFER, 12, 100);
 8001b94:	2364      	movs	r3, #100	; 0x64
 8001b96:	220c      	movs	r2, #12
 8001b98:	4993      	ldr	r1, [pc, #588]	; (8001de8 <robotMachine+0x5a0>)
 8001b9a:	4894      	ldr	r0, [pc, #592]	; (8001dec <robotMachine+0x5a4>)
 8001b9c:	f004 fb99 	bl	80062d2 <HAL_UART_Transmit>
		valueCNY = Sensors[0];
 8001ba0:	4b93      	ldr	r3, [pc, #588]	; (8001df0 <robotMachine+0x5a8>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff fa63 	bl	8001070 <__aeabi_f2iz>
 8001baa:	4603      	mov	r3, r0
 8001bac:	4a91      	ldr	r2, [pc, #580]	; (8001df4 <robotMachine+0x5ac>)
 8001bae:	6013      	str	r3, [r2, #0]
		if (valueCNY == BLANCO) {
 8001bb0:	4b90      	ldr	r3, [pc, #576]	; (8001df4 <robotMachine+0x5ac>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d116      	bne.n	8001be6 <robotMachine+0x39e>
			Map[actual.x][actual.y].final = 1;
 8001bb8:	4b8f      	ldr	r3, [pc, #572]	; (8001df8 <robotMachine+0x5b0>)
 8001bba:	6819      	ldr	r1, [r3, #0]
 8001bbc:	4b8e      	ldr	r3, [pc, #568]	; (8001df8 <robotMachine+0x5b0>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	4888      	ldr	r0, [pc, #544]	; (8001de4 <robotMachine+0x59c>)
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	0052      	lsls	r2, r2, #1
 8001bc6:	441a      	add	r2, r3
 8001bc8:	00d3      	lsls	r3, r2, #3
 8001bca:	461a      	mov	r2, r3
 8001bcc:	460b      	mov	r3, r1
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	440b      	add	r3, r1
 8001bd2:	01db      	lsls	r3, r3, #7
 8001bd4:	4413      	add	r3, r2
 8001bd6:	4403      	add	r3, r0
 8001bd8:	3314      	adds	r3, #20
 8001bda:	2201      	movs	r2, #1
 8001bdc:	601a      	str	r2, [r3, #0]
			finishFlag = 1;
 8001bde:	4b87      	ldr	r3, [pc, #540]	; (8001dfc <robotMachine+0x5b4>)
 8001be0:	2201      	movs	r2, #1
 8001be2:	601a      	str	r2, [r3, #0]
 8001be4:	e015      	b.n	8001c12 <robotMachine+0x3ca>
			Map[actual.x][actual.y].final = 0;
 8001be6:	4b84      	ldr	r3, [pc, #528]	; (8001df8 <robotMachine+0x5b0>)
 8001be8:	6819      	ldr	r1, [r3, #0]
 8001bea:	4b83      	ldr	r3, [pc, #524]	; (8001df8 <robotMachine+0x5b0>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	487d      	ldr	r0, [pc, #500]	; (8001de4 <robotMachine+0x59c>)
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	0052      	lsls	r2, r2, #1
 8001bf4:	441a      	add	r2, r3
 8001bf6:	00d3      	lsls	r3, r2, #3
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	440b      	add	r3, r1
 8001c00:	01db      	lsls	r3, r3, #7
 8001c02:	4413      	add	r3, r2
 8001c04:	4403      	add	r3, r0
 8001c06:	3314      	adds	r3, #20
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
			robotState = CHOOSING;
 8001c0c:	4b7c      	ldr	r3, [pc, #496]	; (8001e00 <robotMachine+0x5b8>)
 8001c0e:	2201      	movs	r2, #1
 8001c10:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001c12:	2201      	movs	r2, #1
 8001c14:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c18:	487a      	ldr	r0, [pc, #488]	; (8001e04 <robotMachine+0x5bc>)
 8001c1a:	f003 f8d8 	bl	8004dce <HAL_GPIO_WritePin>
		break;
 8001c1e:	e0df      	b.n	8001de0 <robotMachine+0x598>
		movimiento = ChooseNextNode(actual.x, actual.y);
 8001c20:	4b75      	ldr	r3, [pc, #468]	; (8001df8 <robotMachine+0x5b0>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a74      	ldr	r2, [pc, #464]	; (8001df8 <robotMachine+0x5b0>)
 8001c26:	6852      	ldr	r2, [r2, #4]
 8001c28:	4611      	mov	r1, r2
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f000 fa44 	bl	80020b8 <ChooseNextNode>
 8001c30:	4603      	mov	r3, r0
 8001c32:	4a75      	ldr	r2, [pc, #468]	; (8001e08 <robotMachine+0x5c0>)
 8001c34:	6013      	str	r3, [r2, #0]
		TX_BUFFER[0] = 'M';
 8001c36:	4b6c      	ldr	r3, [pc, #432]	; (8001de8 <robotMachine+0x5a0>)
 8001c38:	224d      	movs	r2, #77	; 0x4d
 8001c3a:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = movimiento + '0';
 8001c3c:	4b72      	ldr	r3, [pc, #456]	; (8001e08 <robotMachine+0x5c0>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	3330      	adds	r3, #48	; 0x30
 8001c44:	b2da      	uxtb	r2, r3
 8001c46:	4b68      	ldr	r3, [pc, #416]	; (8001de8 <robotMachine+0x5a0>)
 8001c48:	705a      	strb	r2, [r3, #1]
		TX_BUFFER[2] = '\n';
 8001c4a:	4b67      	ldr	r3, [pc, #412]	; (8001de8 <robotMachine+0x5a0>)
 8001c4c:	220a      	movs	r2, #10
 8001c4e:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart1, TX_BUFFER, 3, 100);
 8001c50:	2364      	movs	r3, #100	; 0x64
 8001c52:	2203      	movs	r2, #3
 8001c54:	4964      	ldr	r1, [pc, #400]	; (8001de8 <robotMachine+0x5a0>)
 8001c56:	4865      	ldr	r0, [pc, #404]	; (8001dec <robotMachine+0x5a4>)
 8001c58:	f004 fb3b 	bl	80062d2 <HAL_UART_Transmit>
		if (movimiento == IZQUIERDA) {
 8001c5c:	4b6a      	ldr	r3, [pc, #424]	; (8001e08 <robotMachine+0x5c0>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d138      	bne.n	8001cd6 <robotMachine+0x48e>
			if (Map[actual.x][actual.y].Lados[direcciones[ATRAS]] != 1) {
 8001c64:	4b64      	ldr	r3, [pc, #400]	; (8001df8 <robotMachine+0x5b0>)
 8001c66:	6819      	ldr	r1, [r3, #0]
 8001c68:	4b63      	ldr	r3, [pc, #396]	; (8001df8 <robotMachine+0x5b0>)
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	4a67      	ldr	r2, [pc, #412]	; (8001e0c <robotMachine+0x5c4>)
 8001c6e:	6890      	ldr	r0, [r2, #8]
 8001c70:	4c5c      	ldr	r4, [pc, #368]	; (8001de4 <robotMachine+0x59c>)
 8001c72:	461a      	mov	r2, r3
 8001c74:	0052      	lsls	r2, r2, #1
 8001c76:	441a      	add	r2, r3
 8001c78:	0053      	lsls	r3, r2, #1
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	440b      	add	r3, r1
 8001c82:	015b      	lsls	r3, r3, #5
 8001c84:	4413      	add	r3, r2
 8001c86:	4403      	add	r3, r0
 8001c88:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d014      	beq.n	8001cba <robotMachine+0x472>
				Map[actual.x][actual.y].Lados[direcciones[ATRAS]] = 2;
 8001c90:	4b59      	ldr	r3, [pc, #356]	; (8001df8 <robotMachine+0x5b0>)
 8001c92:	6819      	ldr	r1, [r3, #0]
 8001c94:	4b58      	ldr	r3, [pc, #352]	; (8001df8 <robotMachine+0x5b0>)
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	4a5c      	ldr	r2, [pc, #368]	; (8001e0c <robotMachine+0x5c4>)
 8001c9a:	6890      	ldr	r0, [r2, #8]
 8001c9c:	4c51      	ldr	r4, [pc, #324]	; (8001de4 <robotMachine+0x59c>)
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	0052      	lsls	r2, r2, #1
 8001ca2:	441a      	add	r2, r3
 8001ca4:	0053      	lsls	r3, r2, #1
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	460b      	mov	r3, r1
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	440b      	add	r3, r1
 8001cae:	015b      	lsls	r3, r3, #5
 8001cb0:	4413      	add	r3, r2
 8001cb2:	4403      	add	r3, r0
 8001cb4:	2202      	movs	r2, #2
 8001cb6:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
			moveNode(direcciones[IZQUIERDA]);
 8001cba:	4b54      	ldr	r3, [pc, #336]	; (8001e0c <robotMachine+0x5c4>)
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f000 fe1e 	bl	8002900 <moveNode>
			rotateAxis(IZQUIERDA);
 8001cc4:	2001      	movs	r0, #1
 8001cc6:	f001 f83b 	bl	8002d40 <rotateAxis>
			counter--;
 8001cca:	4b51      	ldr	r3, [pc, #324]	; (8001e10 <robotMachine+0x5c8>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	4a4f      	ldr	r2, [pc, #316]	; (8001e10 <robotMachine+0x5c8>)
 8001cd2:	6013      	str	r3, [r2, #0]
 8001cd4:	e055      	b.n	8001d82 <robotMachine+0x53a>
		} else if (movimiento == DERECHA) {
 8001cd6:	4b4c      	ldr	r3, [pc, #304]	; (8001e08 <robotMachine+0x5c0>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2b03      	cmp	r3, #3
 8001cdc:	d138      	bne.n	8001d50 <robotMachine+0x508>
			if (Map[actual.x][actual.y].Lados[direcciones[ATRAS]] != 1) {
 8001cde:	4b46      	ldr	r3, [pc, #280]	; (8001df8 <robotMachine+0x5b0>)
 8001ce0:	6819      	ldr	r1, [r3, #0]
 8001ce2:	4b45      	ldr	r3, [pc, #276]	; (8001df8 <robotMachine+0x5b0>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	4a49      	ldr	r2, [pc, #292]	; (8001e0c <robotMachine+0x5c4>)
 8001ce8:	6890      	ldr	r0, [r2, #8]
 8001cea:	4c3e      	ldr	r4, [pc, #248]	; (8001de4 <robotMachine+0x59c>)
 8001cec:	461a      	mov	r2, r3
 8001cee:	0052      	lsls	r2, r2, #1
 8001cf0:	441a      	add	r2, r3
 8001cf2:	0053      	lsls	r3, r2, #1
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	440b      	add	r3, r1
 8001cfc:	015b      	lsls	r3, r3, #5
 8001cfe:	4413      	add	r3, r2
 8001d00:	4403      	add	r3, r0
 8001d02:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d014      	beq.n	8001d34 <robotMachine+0x4ec>
				Map[actual.x][actual.y].Lados[direcciones[ATRAS]] = 2;
 8001d0a:	4b3b      	ldr	r3, [pc, #236]	; (8001df8 <robotMachine+0x5b0>)
 8001d0c:	6819      	ldr	r1, [r3, #0]
 8001d0e:	4b3a      	ldr	r3, [pc, #232]	; (8001df8 <robotMachine+0x5b0>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	4a3e      	ldr	r2, [pc, #248]	; (8001e0c <robotMachine+0x5c4>)
 8001d14:	6890      	ldr	r0, [r2, #8]
 8001d16:	4c33      	ldr	r4, [pc, #204]	; (8001de4 <robotMachine+0x59c>)
 8001d18:	461a      	mov	r2, r3
 8001d1a:	0052      	lsls	r2, r2, #1
 8001d1c:	441a      	add	r2, r3
 8001d1e:	0053      	lsls	r3, r2, #1
 8001d20:	461a      	mov	r2, r3
 8001d22:	460b      	mov	r3, r1
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	440b      	add	r3, r1
 8001d28:	015b      	lsls	r3, r3, #5
 8001d2a:	4413      	add	r3, r2
 8001d2c:	4403      	add	r3, r0
 8001d2e:	2202      	movs	r2, #2
 8001d30:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
			moveNode(direcciones[DERECHA]);
 8001d34:	4b35      	ldr	r3, [pc, #212]	; (8001e0c <robotMachine+0x5c4>)
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f000 fde1 	bl	8002900 <moveNode>
			rotateAxis(DERECHA);
 8001d3e:	2003      	movs	r0, #3
 8001d40:	f000 fffe 	bl	8002d40 <rotateAxis>
			counter++;
 8001d44:	4b32      	ldr	r3, [pc, #200]	; (8001e10 <robotMachine+0x5c8>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	3301      	adds	r3, #1
 8001d4a:	4a31      	ldr	r2, [pc, #196]	; (8001e10 <robotMachine+0x5c8>)
 8001d4c:	6013      	str	r3, [r2, #0]
 8001d4e:	e018      	b.n	8001d82 <robotMachine+0x53a>
		} else if (movimiento == ATRAS) {
 8001d50:	4b2d      	ldr	r3, [pc, #180]	; (8001e08 <robotMachine+0x5c0>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d114      	bne.n	8001d82 <robotMachine+0x53a>
			counter++;
 8001d58:	4b2d      	ldr	r3, [pc, #180]	; (8001e10 <robotMachine+0x5c8>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	4a2c      	ldr	r2, [pc, #176]	; (8001e10 <robotMachine+0x5c8>)
 8001d60:	6013      	str	r3, [r2, #0]
			counter++;
 8001d62:	4b2b      	ldr	r3, [pc, #172]	; (8001e10 <robotMachine+0x5c8>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	3301      	adds	r3, #1
 8001d68:	4a29      	ldr	r2, [pc, #164]	; (8001e10 <robotMachine+0x5c8>)
 8001d6a:	6013      	str	r3, [r2, #0]
			moveNode(direcciones[ATRAS]);
 8001d6c:	4b27      	ldr	r3, [pc, #156]	; (8001e0c <robotMachine+0x5c4>)
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f000 fdc5 	bl	8002900 <moveNode>
			rotateAxis(DERECHA);
 8001d76:	2003      	movs	r0, #3
 8001d78:	f000 ffe2 	bl	8002d40 <rotateAxis>
			rotateAxis(DERECHA);
 8001d7c:	2003      	movs	r0, #3
 8001d7e:	f000 ffdf 	bl	8002d40 <rotateAxis>
		TX_BUFFER[0] = '*';
 8001d82:	4b19      	ldr	r3, [pc, #100]	; (8001de8 <robotMachine+0x5a0>)
 8001d84:	222a      	movs	r2, #42	; 0x2a
 8001d86:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = '*';
 8001d88:	4b17      	ldr	r3, [pc, #92]	; (8001de8 <robotMachine+0x5a0>)
 8001d8a:	222a      	movs	r2, #42	; 0x2a
 8001d8c:	705a      	strb	r2, [r3, #1]
		TX_BUFFER[2] = '\n';
 8001d8e:	4b16      	ldr	r3, [pc, #88]	; (8001de8 <robotMachine+0x5a0>)
 8001d90:	220a      	movs	r2, #10
 8001d92:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart1, TX_BUFFER, 3, 100);
 8001d94:	2364      	movs	r3, #100	; 0x64
 8001d96:	2203      	movs	r2, #3
 8001d98:	4913      	ldr	r1, [pc, #76]	; (8001de8 <robotMachine+0x5a0>)
 8001d9a:	4814      	ldr	r0, [pc, #80]	; (8001dec <robotMachine+0x5a4>)
 8001d9c:	f004 fa99 	bl	80062d2 <HAL_UART_Transmit>
		movimientoFlag = 0;
 8001da0:	4b1c      	ldr	r3, [pc, #112]	; (8001e14 <robotMachine+0x5cc>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	601a      	str	r2, [r3, #0]
		ticksNow = HAL_GetTick();
 8001da6:	f001 feff 	bl	8003ba8 <HAL_GetTick>
 8001daa:	4603      	mov	r3, r0
 8001dac:	461a      	mov	r2, r3
 8001dae:	4b1a      	ldr	r3, [pc, #104]	; (8001e18 <robotMachine+0x5d0>)
 8001db0:	601a      	str	r2, [r3, #0]
		robotState = MOVING;
 8001db2:	4b13      	ldr	r3, [pc, #76]	; (8001e00 <robotMachine+0x5b8>)
 8001db4:	2202      	movs	r2, #2
 8001db6:	601a      	str	r2, [r3, #0]
		break;
 8001db8:	e012      	b.n	8001de0 <robotMachine+0x598>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dc0:	4810      	ldr	r0, [pc, #64]	; (8001e04 <robotMachine+0x5bc>)
 8001dc2:	f003 f804 	bl	8004dce <HAL_GPIO_WritePin>
		movementMachine(movimiento);
 8001dc6:	4b10      	ldr	r3, [pc, #64]	; (8001e08 <robotMachine+0x5c0>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f000 fdca 	bl	8002964 <movementMachine>
		if (movimientoFlag == 1) {
 8001dd0:	4b10      	ldr	r3, [pc, #64]	; (8001e14 <robotMachine+0x5cc>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d102      	bne.n	8001dde <robotMachine+0x596>
			robotState = READING;
 8001dd8:	4b09      	ldr	r3, [pc, #36]	; (8001e00 <robotMachine+0x5b8>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	601a      	str	r2, [r3, #0]
		break;
 8001dde:	bf00      	nop
}
 8001de0:	bf00      	nop
 8001de2:	bdb0      	pop	{r4, r5, r7, pc}
 8001de4:	20001274 	.word	0x20001274
 8001de8:	200011fc 	.word	0x200011fc
 8001dec:	20002b74 	.word	0x20002b74
 8001df0:	200011dc 	.word	0x200011dc
 8001df4:	20001230 	.word	0x20001230
 8001df8:	20001264 	.word	0x20001264
 8001dfc:	20001228 	.word	0x20001228
 8001e00:	20001244 	.word	0x20001244
 8001e04:	40011000 	.word	0x40011000
 8001e08:	20001224 	.word	0x20001224
 8001e0c:	200011ec 	.word	0x200011ec
 8001e10:	20001238 	.word	0x20001238
 8001e14:	2000122c 	.word	0x2000122c
 8001e18:	20001214 	.word	0x20001214

08001e1c <runDirections>:

void runDirections(char moves[25]) {
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
	if (moves[m] == 'a') {
 8001e24:	4b20      	ldr	r3, [pc, #128]	; (8001ea8 <runDirections+0x8c>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	461a      	mov	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	2b61      	cmp	r3, #97	; 0x61
 8001e32:	d103      	bne.n	8001e3c <runDirections+0x20>
		movementMachine(ADELANTE);
 8001e34:	2000      	movs	r0, #0
 8001e36:	f000 fd95 	bl	8002964 <movementMachine>
 8001e3a:	e016      	b.n	8001e6a <runDirections+0x4e>
	} else if (moves[m] == 'd') {
 8001e3c:	4b1a      	ldr	r3, [pc, #104]	; (8001ea8 <runDirections+0x8c>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	461a      	mov	r2, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4413      	add	r3, r2
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	2b64      	cmp	r3, #100	; 0x64
 8001e4a:	d103      	bne.n	8001e54 <runDirections+0x38>
		movementMachine(DERECHA);
 8001e4c:	2003      	movs	r0, #3
 8001e4e:	f000 fd89 	bl	8002964 <movementMachine>
 8001e52:	e00a      	b.n	8001e6a <runDirections+0x4e>
	} else if (moves[m] == 'i') {
 8001e54:	4b14      	ldr	r3, [pc, #80]	; (8001ea8 <runDirections+0x8c>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	461a      	mov	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	2b69      	cmp	r3, #105	; 0x69
 8001e62:	d102      	bne.n	8001e6a <runDirections+0x4e>
		movementMachine(IZQUIERDA);
 8001e64:	2001      	movs	r0, #1
 8001e66:	f000 fd7d 	bl	8002964 <movementMachine>
	}/* else {
	 movementMachine(SUPER);
	 }*/
	TX_BUFFER[0] = moves[m];
 8001e6a:	4b0f      	ldr	r3, [pc, #60]	; (8001ea8 <runDirections+0x8c>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	461a      	mov	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	4413      	add	r3, r2
 8001e74:	781a      	ldrb	r2, [r3, #0]
 8001e76:	4b0d      	ldr	r3, [pc, #52]	; (8001eac <runDirections+0x90>)
 8001e78:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, TX_BUFFER, 1, 100);
 8001e7a:	2364      	movs	r3, #100	; 0x64
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	490b      	ldr	r1, [pc, #44]	; (8001eac <runDirections+0x90>)
 8001e80:	480b      	ldr	r0, [pc, #44]	; (8001eb0 <runDirections+0x94>)
 8001e82:	f004 fa26 	bl	80062d2 <HAL_UART_Transmit>
	if (movimientoFlag == 1) {
 8001e86:	4b0b      	ldr	r3, [pc, #44]	; (8001eb4 <runDirections+0x98>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d107      	bne.n	8001e9e <runDirections+0x82>
		m++;
 8001e8e:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <runDirections+0x8c>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	3301      	adds	r3, #1
 8001e94:	4a04      	ldr	r2, [pc, #16]	; (8001ea8 <runDirections+0x8c>)
 8001e96:	6013      	str	r3, [r2, #0]
		movimientoFlag = 0;
 8001e98:	4b06      	ldr	r3, [pc, #24]	; (8001eb4 <runDirections+0x98>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	601a      	str	r2, [r3, #0]
	}
}
 8001e9e:	bf00      	nop
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	2000121c 	.word	0x2000121c
 8001eac:	200011fc 	.word	0x200011fc
 8001eb0:	20002b74 	.word	0x20002b74
 8001eb4:	2000122c 	.word	0x2000122c

08001eb8 <addDirection>:

void addDirection(int x, int y) {
 8001eb8:	b590      	push	{r4, r7, lr}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]

	if (Map[x][y].Lados[direcciones[ADELANTE]] != 1) {
 8001ec2:	4b77      	ldr	r3, [pc, #476]	; (80020a0 <addDirection+0x1e8>)
 8001ec4:	6818      	ldr	r0, [r3, #0]
 8001ec6:	4c77      	ldr	r4, [pc, #476]	; (80020a4 <addDirection+0x1ec>)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	6879      	ldr	r1, [r7, #4]
 8001ecc:	461a      	mov	r2, r3
 8001ece:	0052      	lsls	r2, r2, #1
 8001ed0:	441a      	add	r2, r3
 8001ed2:	0053      	lsls	r3, r2, #1
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	440b      	add	r3, r1
 8001edc:	015b      	lsls	r3, r3, #5
 8001ede:	4413      	add	r3, r2
 8001ee0:	4403      	add	r3, r0
 8001ee2:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d01b      	beq.n	8001f22 <addDirection+0x6a>
		Map[x][y].Lados[direcciones[ADELANTE]] = 2;
 8001eea:	4b6d      	ldr	r3, [pc, #436]	; (80020a0 <addDirection+0x1e8>)
 8001eec:	6818      	ldr	r0, [r3, #0]
 8001eee:	4c6d      	ldr	r4, [pc, #436]	; (80020a4 <addDirection+0x1ec>)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	6879      	ldr	r1, [r7, #4]
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	0052      	lsls	r2, r2, #1
 8001ef8:	441a      	add	r2, r3
 8001efa:	0053      	lsls	r3, r2, #1
 8001efc:	461a      	mov	r2, r3
 8001efe:	460b      	mov	r3, r1
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	440b      	add	r3, r1
 8001f04:	015b      	lsls	r3, r3, #5
 8001f06:	4413      	add	r3, r2
 8001f08:	4403      	add	r3, r0
 8001f0a:	2202      	movs	r2, #2
 8001f0c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
		moveNode(ADELANTE);
 8001f10:	2000      	movs	r0, #0
 8001f12:	f000 fcf5 	bl	8002900 <moveNode>
		directions[directionsSize] = 'a';
 8001f16:	4b64      	ldr	r3, [pc, #400]	; (80020a8 <addDirection+0x1f0>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a64      	ldr	r2, [pc, #400]	; (80020ac <addDirection+0x1f4>)
 8001f1c:	2161      	movs	r1, #97	; 0x61
 8001f1e:	54d1      	strb	r1, [r2, r3]
 8001f20:	e064      	b.n	8001fec <addDirection+0x134>
	} else if (Map[x][y].Lados[direcciones[IZQUIERDA]] != 1) {
 8001f22:	4b5f      	ldr	r3, [pc, #380]	; (80020a0 <addDirection+0x1e8>)
 8001f24:	6858      	ldr	r0, [r3, #4]
 8001f26:	4c5f      	ldr	r4, [pc, #380]	; (80020a4 <addDirection+0x1ec>)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	6879      	ldr	r1, [r7, #4]
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	0052      	lsls	r2, r2, #1
 8001f30:	441a      	add	r2, r3
 8001f32:	0053      	lsls	r3, r2, #1
 8001f34:	461a      	mov	r2, r3
 8001f36:	460b      	mov	r3, r1
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	440b      	add	r3, r1
 8001f3c:	015b      	lsls	r3, r3, #5
 8001f3e:	4413      	add	r3, r2
 8001f40:	4403      	add	r3, r0
 8001f42:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d01e      	beq.n	8001f88 <addDirection+0xd0>
		Map[x][y].Lados[direcciones[IZQUIERDA]] = 2;
 8001f4a:	4b55      	ldr	r3, [pc, #340]	; (80020a0 <addDirection+0x1e8>)
 8001f4c:	6858      	ldr	r0, [r3, #4]
 8001f4e:	4c55      	ldr	r4, [pc, #340]	; (80020a4 <addDirection+0x1ec>)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	6879      	ldr	r1, [r7, #4]
 8001f54:	461a      	mov	r2, r3
 8001f56:	0052      	lsls	r2, r2, #1
 8001f58:	441a      	add	r2, r3
 8001f5a:	0053      	lsls	r3, r2, #1
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	460b      	mov	r3, r1
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	440b      	add	r3, r1
 8001f64:	015b      	lsls	r3, r3, #5
 8001f66:	4413      	add	r3, r2
 8001f68:	4403      	add	r3, r0
 8001f6a:	2202      	movs	r2, #2
 8001f6c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
		moveNode(IZQUIERDA);
 8001f70:	2001      	movs	r0, #1
 8001f72:	f000 fcc5 	bl	8002900 <moveNode>
		rotateAxis(IZQUIERDA);
 8001f76:	2001      	movs	r0, #1
 8001f78:	f000 fee2 	bl	8002d40 <rotateAxis>
		directions[directionsSize] = 'i';
 8001f7c:	4b4a      	ldr	r3, [pc, #296]	; (80020a8 <addDirection+0x1f0>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a4a      	ldr	r2, [pc, #296]	; (80020ac <addDirection+0x1f4>)
 8001f82:	2169      	movs	r1, #105	; 0x69
 8001f84:	54d1      	strb	r1, [r2, r3]
 8001f86:	e031      	b.n	8001fec <addDirection+0x134>
	} else if (Map[x][y].Lados[direcciones[DERECHA]] != 1) {
 8001f88:	4b45      	ldr	r3, [pc, #276]	; (80020a0 <addDirection+0x1e8>)
 8001f8a:	68d8      	ldr	r0, [r3, #12]
 8001f8c:	4c45      	ldr	r4, [pc, #276]	; (80020a4 <addDirection+0x1ec>)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	6879      	ldr	r1, [r7, #4]
 8001f92:	461a      	mov	r2, r3
 8001f94:	0052      	lsls	r2, r2, #1
 8001f96:	441a      	add	r2, r3
 8001f98:	0053      	lsls	r3, r2, #1
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	440b      	add	r3, r1
 8001fa2:	015b      	lsls	r3, r3, #5
 8001fa4:	4413      	add	r3, r2
 8001fa6:	4403      	add	r3, r0
 8001fa8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d01d      	beq.n	8001fec <addDirection+0x134>
		Map[x][y].Lados[direcciones[DERECHA]] = 2;
 8001fb0:	4b3b      	ldr	r3, [pc, #236]	; (80020a0 <addDirection+0x1e8>)
 8001fb2:	68d8      	ldr	r0, [r3, #12]
 8001fb4:	4c3b      	ldr	r4, [pc, #236]	; (80020a4 <addDirection+0x1ec>)
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	6879      	ldr	r1, [r7, #4]
 8001fba:	461a      	mov	r2, r3
 8001fbc:	0052      	lsls	r2, r2, #1
 8001fbe:	441a      	add	r2, r3
 8001fc0:	0053      	lsls	r3, r2, #1
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	440b      	add	r3, r1
 8001fca:	015b      	lsls	r3, r3, #5
 8001fcc:	4413      	add	r3, r2
 8001fce:	4403      	add	r3, r0
 8001fd0:	2202      	movs	r2, #2
 8001fd2:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
		moveNode(DERECHA);
 8001fd6:	2003      	movs	r0, #3
 8001fd8:	f000 fc92 	bl	8002900 <moveNode>
		rotateAxis(DERECHA);
 8001fdc:	2003      	movs	r0, #3
 8001fde:	f000 feaf 	bl	8002d40 <rotateAxis>
		directions[directionsSize] = 'd';
 8001fe2:	4b31      	ldr	r3, [pc, #196]	; (80020a8 <addDirection+0x1f0>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a31      	ldr	r2, [pc, #196]	; (80020ac <addDirection+0x1f4>)
 8001fe8:	2164      	movs	r1, #100	; 0x64
 8001fea:	54d1      	strb	r1, [r2, r3]
	}
	intUartSend(Map[x][y].Lados[direcciones[ADELANTE]]);
 8001fec:	4b2c      	ldr	r3, [pc, #176]	; (80020a0 <addDirection+0x1e8>)
 8001fee:	6818      	ldr	r0, [r3, #0]
 8001ff0:	4c2c      	ldr	r4, [pc, #176]	; (80020a4 <addDirection+0x1ec>)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	6879      	ldr	r1, [r7, #4]
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	0052      	lsls	r2, r2, #1
 8001ffa:	441a      	add	r2, r3
 8001ffc:	0053      	lsls	r3, r2, #1
 8001ffe:	461a      	mov	r2, r3
 8002000:	460b      	mov	r3, r1
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	440b      	add	r3, r1
 8002006:	015b      	lsls	r3, r3, #5
 8002008:	4413      	add	r3, r2
 800200a:	4403      	add	r3, r0
 800200c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff fa8d 	bl	8001530 <intUartSend>
	intUartSend(Map[x][y].Lados[direcciones[IZQUIERDA]]);
 8002016:	4b22      	ldr	r3, [pc, #136]	; (80020a0 <addDirection+0x1e8>)
 8002018:	6858      	ldr	r0, [r3, #4]
 800201a:	4c22      	ldr	r4, [pc, #136]	; (80020a4 <addDirection+0x1ec>)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	6879      	ldr	r1, [r7, #4]
 8002020:	461a      	mov	r2, r3
 8002022:	0052      	lsls	r2, r2, #1
 8002024:	441a      	add	r2, r3
 8002026:	0053      	lsls	r3, r2, #1
 8002028:	461a      	mov	r2, r3
 800202a:	460b      	mov	r3, r1
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	440b      	add	r3, r1
 8002030:	015b      	lsls	r3, r3, #5
 8002032:	4413      	add	r3, r2
 8002034:	4403      	add	r3, r0
 8002036:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff fa78 	bl	8001530 <intUartSend>
	intUartSend(Map[x][y].Lados[direcciones[DERECHA]]);
 8002040:	4b17      	ldr	r3, [pc, #92]	; (80020a0 <addDirection+0x1e8>)
 8002042:	68d8      	ldr	r0, [r3, #12]
 8002044:	4c17      	ldr	r4, [pc, #92]	; (80020a4 <addDirection+0x1ec>)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	6879      	ldr	r1, [r7, #4]
 800204a:	461a      	mov	r2, r3
 800204c:	0052      	lsls	r2, r2, #1
 800204e:	441a      	add	r2, r3
 8002050:	0053      	lsls	r3, r2, #1
 8002052:	461a      	mov	r2, r3
 8002054:	460b      	mov	r3, r1
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	440b      	add	r3, r1
 800205a:	015b      	lsls	r3, r3, #5
 800205c:	4413      	add	r3, r2
 800205e:	4403      	add	r3, r0
 8002060:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8002064:	4618      	mov	r0, r3
 8002066:	f7ff fa63 	bl	8001530 <intUartSend>
	TX_BUFFER[0] = 'D';
 800206a:	4b11      	ldr	r3, [pc, #68]	; (80020b0 <addDirection+0x1f8>)
 800206c:	2244      	movs	r2, #68	; 0x44
 800206e:	701a      	strb	r2, [r3, #0]
	TX_BUFFER[1] = directions[directionsSize];
 8002070:	4b0d      	ldr	r3, [pc, #52]	; (80020a8 <addDirection+0x1f0>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a0d      	ldr	r2, [pc, #52]	; (80020ac <addDirection+0x1f4>)
 8002076:	5cd2      	ldrb	r2, [r2, r3]
 8002078:	4b0d      	ldr	r3, [pc, #52]	; (80020b0 <addDirection+0x1f8>)
 800207a:	705a      	strb	r2, [r3, #1]
	TX_BUFFER[2] = '\n';
 800207c:	4b0c      	ldr	r3, [pc, #48]	; (80020b0 <addDirection+0x1f8>)
 800207e:	220a      	movs	r2, #10
 8002080:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(&huart1, TX_BUFFER, 3, 100);
 8002082:	2364      	movs	r3, #100	; 0x64
 8002084:	2203      	movs	r2, #3
 8002086:	490a      	ldr	r1, [pc, #40]	; (80020b0 <addDirection+0x1f8>)
 8002088:	480a      	ldr	r0, [pc, #40]	; (80020b4 <addDirection+0x1fc>)
 800208a:	f004 f922 	bl	80062d2 <HAL_UART_Transmit>
	directionsSize++;
 800208e:	4b06      	ldr	r3, [pc, #24]	; (80020a8 <addDirection+0x1f0>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	3301      	adds	r3, #1
 8002094:	4a04      	ldr	r2, [pc, #16]	; (80020a8 <addDirection+0x1f0>)
 8002096:	6013      	str	r3, [r2, #0]

}
 8002098:	bf00      	nop
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	bd90      	pop	{r4, r7, pc}
 80020a0:	200011ec 	.word	0x200011ec
 80020a4:	20001274 	.word	0x20001274
 80020a8:	20001220 	.word	0x20001220
 80020ac:	20001248 	.word	0x20001248
 80020b0:	200011fc 	.word	0x200011fc
 80020b4:	20002b74 	.word	0x20002b74

080020b8 <ChooseNextNode>:

int ChooseNextNode(int x, int y) {
 80020b8:	b590      	push	{r4, r7, lr}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
	if (Map[x][y].Lados[direcciones[ADELANTE]] == 0) {
 80020c2:	4b74      	ldr	r3, [pc, #464]	; (8002294 <ChooseNextNode+0x1dc>)
 80020c4:	6818      	ldr	r0, [r3, #0]
 80020c6:	4c74      	ldr	r4, [pc, #464]	; (8002298 <ChooseNextNode+0x1e0>)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	6879      	ldr	r1, [r7, #4]
 80020cc:	461a      	mov	r2, r3
 80020ce:	0052      	lsls	r2, r2, #1
 80020d0:	441a      	add	r2, r3
 80020d2:	0053      	lsls	r3, r2, #1
 80020d4:	461a      	mov	r2, r3
 80020d6:	460b      	mov	r3, r1
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	440b      	add	r3, r1
 80020dc:	015b      	lsls	r3, r3, #5
 80020de:	4413      	add	r3, r2
 80020e0:	4403      	add	r3, r0
 80020e2:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f040 80dc 	bne.w	80022a4 <ChooseNextNode+0x1ec>
		TX_BUFFER[0] = 'A';
 80020ec:	4b6b      	ldr	r3, [pc, #428]	; (800229c <ChooseNextNode+0x1e4>)
 80020ee:	2241      	movs	r2, #65	; 0x41
 80020f0:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = '\n';
 80020f2:	4b6a      	ldr	r3, [pc, #424]	; (800229c <ChooseNextNode+0x1e4>)
 80020f4:	220a      	movs	r2, #10
 80020f6:	705a      	strb	r2, [r3, #1]
		HAL_UART_Transmit(&huart1, TX_BUFFER, 2, 100);
 80020f8:	2364      	movs	r3, #100	; 0x64
 80020fa:	2202      	movs	r2, #2
 80020fc:	4967      	ldr	r1, [pc, #412]	; (800229c <ChooseNextNode+0x1e4>)
 80020fe:	4868      	ldr	r0, [pc, #416]	; (80022a0 <ChooseNextNode+0x1e8>)
 8002100:	f004 f8e7 	bl	80062d2 <HAL_UART_Transmit>
		Map[x][y].Lados[direcciones[ADELANTE]] = 2;
 8002104:	4b63      	ldr	r3, [pc, #396]	; (8002294 <ChooseNextNode+0x1dc>)
 8002106:	6818      	ldr	r0, [r3, #0]
 8002108:	4c63      	ldr	r4, [pc, #396]	; (8002298 <ChooseNextNode+0x1e0>)
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	6879      	ldr	r1, [r7, #4]
 800210e:	461a      	mov	r2, r3
 8002110:	0052      	lsls	r2, r2, #1
 8002112:	441a      	add	r2, r3
 8002114:	0053      	lsls	r3, r2, #1
 8002116:	461a      	mov	r2, r3
 8002118:	460b      	mov	r3, r1
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	440b      	add	r3, r1
 800211e:	015b      	lsls	r3, r3, #5
 8002120:	4413      	add	r3, r2
 8002122:	4403      	add	r3, r0
 8002124:	2202      	movs	r2, #2
 8002126:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
		if (Map[x][y].visitado > 1) {
 800212a:	485b      	ldr	r0, [pc, #364]	; (8002298 <ChooseNextNode+0x1e0>)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	6879      	ldr	r1, [r7, #4]
 8002130:	461a      	mov	r2, r3
 8002132:	0052      	lsls	r2, r2, #1
 8002134:	441a      	add	r2, r3
 8002136:	00d3      	lsls	r3, r2, #3
 8002138:	461a      	mov	r2, r3
 800213a:	460b      	mov	r3, r1
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	440b      	add	r3, r1
 8002140:	01db      	lsls	r3, r3, #7
 8002142:	4413      	add	r3, r2
 8002144:	4403      	add	r3, r0
 8002146:	3310      	adds	r3, #16
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2b01      	cmp	r3, #1
 800214c:	dd03      	ble.n	8002156 <ChooseNextNode+0x9e>
			EliminateNode(x, y);
 800214e:	6839      	ldr	r1, [r7, #0]
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f000 fab5 	bl	80026c0 <EliminateNode>
		}
		moveNode(direcciones[ADELANTE]);
 8002156:	4b4f      	ldr	r3, [pc, #316]	; (8002294 <ChooseNextNode+0x1dc>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4618      	mov	r0, r3
 800215c:	f000 fbd0 	bl	8002900 <moveNode>
		if (Map[x][y].Lados[direcciones[ATRAS]] != 1)
 8002160:	4b4c      	ldr	r3, [pc, #304]	; (8002294 <ChooseNextNode+0x1dc>)
 8002162:	6898      	ldr	r0, [r3, #8]
 8002164:	4c4c      	ldr	r4, [pc, #304]	; (8002298 <ChooseNextNode+0x1e0>)
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	6879      	ldr	r1, [r7, #4]
 800216a:	461a      	mov	r2, r3
 800216c:	0052      	lsls	r2, r2, #1
 800216e:	441a      	add	r2, r3
 8002170:	0053      	lsls	r3, r2, #1
 8002172:	461a      	mov	r2, r3
 8002174:	460b      	mov	r3, r1
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	440b      	add	r3, r1
 800217a:	015b      	lsls	r3, r3, #5
 800217c:	4413      	add	r3, r2
 800217e:	4403      	add	r3, r0
 8002180:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d012      	beq.n	80021ae <ChooseNextNode+0xf6>
			Map[x][y].Lados[direcciones[ATRAS]] = 2;
 8002188:	4b42      	ldr	r3, [pc, #264]	; (8002294 <ChooseNextNode+0x1dc>)
 800218a:	6898      	ldr	r0, [r3, #8]
 800218c:	4c42      	ldr	r4, [pc, #264]	; (8002298 <ChooseNextNode+0x1e0>)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	6879      	ldr	r1, [r7, #4]
 8002192:	461a      	mov	r2, r3
 8002194:	0052      	lsls	r2, r2, #1
 8002196:	441a      	add	r2, r3
 8002198:	0053      	lsls	r3, r2, #1
 800219a:	461a      	mov	r2, r3
 800219c:	460b      	mov	r3, r1
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	440b      	add	r3, r1
 80021a2:	015b      	lsls	r3, r3, #5
 80021a4:	4413      	add	r3, r2
 80021a6:	4403      	add	r3, r0
 80021a8:	2202      	movs	r2, #2
 80021aa:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
		TX_BUFFER[0] = 'D';
 80021ae:	4b3b      	ldr	r3, [pc, #236]	; (800229c <ChooseNextNode+0x1e4>)
 80021b0:	2244      	movs	r2, #68	; 0x44
 80021b2:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = Map[x][y].Lados[DERECHA] + '0';
 80021b4:	4838      	ldr	r0, [pc, #224]	; (8002298 <ChooseNextNode+0x1e0>)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	6879      	ldr	r1, [r7, #4]
 80021ba:	461a      	mov	r2, r3
 80021bc:	0052      	lsls	r2, r2, #1
 80021be:	441a      	add	r2, r3
 80021c0:	00d3      	lsls	r3, r2, #3
 80021c2:	461a      	mov	r2, r3
 80021c4:	460b      	mov	r3, r1
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	440b      	add	r3, r1
 80021ca:	01db      	lsls	r3, r3, #7
 80021cc:	4413      	add	r3, r2
 80021ce:	4403      	add	r3, r0
 80021d0:	330c      	adds	r3, #12
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	3330      	adds	r3, #48	; 0x30
 80021d8:	b2da      	uxtb	r2, r3
 80021da:	4b30      	ldr	r3, [pc, #192]	; (800229c <ChooseNextNode+0x1e4>)
 80021dc:	705a      	strb	r2, [r3, #1]
		TX_BUFFER[2] = '\n';
 80021de:	4b2f      	ldr	r3, [pc, #188]	; (800229c <ChooseNextNode+0x1e4>)
 80021e0:	220a      	movs	r2, #10
 80021e2:	709a      	strb	r2, [r3, #2]
		TX_BUFFER[3] = 'C';
 80021e4:	4b2d      	ldr	r3, [pc, #180]	; (800229c <ChooseNextNode+0x1e4>)
 80021e6:	2243      	movs	r2, #67	; 0x43
 80021e8:	70da      	strb	r2, [r3, #3]
		TX_BUFFER[4] = Map[x][y].Lados[ADELANTE] + '0';
 80021ea:	482b      	ldr	r0, [pc, #172]	; (8002298 <ChooseNextNode+0x1e0>)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	6879      	ldr	r1, [r7, #4]
 80021f0:	461a      	mov	r2, r3
 80021f2:	0052      	lsls	r2, r2, #1
 80021f4:	441a      	add	r2, r3
 80021f6:	00d3      	lsls	r3, r2, #3
 80021f8:	461a      	mov	r2, r3
 80021fa:	460b      	mov	r3, r1
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	440b      	add	r3, r1
 8002200:	01db      	lsls	r3, r3, #7
 8002202:	4413      	add	r3, r2
 8002204:	4403      	add	r3, r0
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	b2db      	uxtb	r3, r3
 800220a:	3330      	adds	r3, #48	; 0x30
 800220c:	b2da      	uxtb	r2, r3
 800220e:	4b23      	ldr	r3, [pc, #140]	; (800229c <ChooseNextNode+0x1e4>)
 8002210:	711a      	strb	r2, [r3, #4]
		TX_BUFFER[5] = '\n';
 8002212:	4b22      	ldr	r3, [pc, #136]	; (800229c <ChooseNextNode+0x1e4>)
 8002214:	220a      	movs	r2, #10
 8002216:	715a      	strb	r2, [r3, #5]
		TX_BUFFER[6] = 'I';
 8002218:	4b20      	ldr	r3, [pc, #128]	; (800229c <ChooseNextNode+0x1e4>)
 800221a:	2249      	movs	r2, #73	; 0x49
 800221c:	719a      	strb	r2, [r3, #6]
		TX_BUFFER[7] = Map[x][y].Lados[IZQUIERDA] + '0';
 800221e:	481e      	ldr	r0, [pc, #120]	; (8002298 <ChooseNextNode+0x1e0>)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	6879      	ldr	r1, [r7, #4]
 8002224:	461a      	mov	r2, r3
 8002226:	0052      	lsls	r2, r2, #1
 8002228:	441a      	add	r2, r3
 800222a:	00d3      	lsls	r3, r2, #3
 800222c:	461a      	mov	r2, r3
 800222e:	460b      	mov	r3, r1
 8002230:	005b      	lsls	r3, r3, #1
 8002232:	440b      	add	r3, r1
 8002234:	01db      	lsls	r3, r3, #7
 8002236:	4413      	add	r3, r2
 8002238:	4403      	add	r3, r0
 800223a:	3304      	adds	r3, #4
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	b2db      	uxtb	r3, r3
 8002240:	3330      	adds	r3, #48	; 0x30
 8002242:	b2da      	uxtb	r2, r3
 8002244:	4b15      	ldr	r3, [pc, #84]	; (800229c <ChooseNextNode+0x1e4>)
 8002246:	71da      	strb	r2, [r3, #7]
		TX_BUFFER[8] = '\n';
 8002248:	4b14      	ldr	r3, [pc, #80]	; (800229c <ChooseNextNode+0x1e4>)
 800224a:	220a      	movs	r2, #10
 800224c:	721a      	strb	r2, [r3, #8]
		TX_BUFFER[9] = 'A';
 800224e:	4b13      	ldr	r3, [pc, #76]	; (800229c <ChooseNextNode+0x1e4>)
 8002250:	2241      	movs	r2, #65	; 0x41
 8002252:	725a      	strb	r2, [r3, #9]
		TX_BUFFER[10] = Map[x][y].Lados[ATRAS] + '0';
 8002254:	4810      	ldr	r0, [pc, #64]	; (8002298 <ChooseNextNode+0x1e0>)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	6879      	ldr	r1, [r7, #4]
 800225a:	461a      	mov	r2, r3
 800225c:	0052      	lsls	r2, r2, #1
 800225e:	441a      	add	r2, r3
 8002260:	00d3      	lsls	r3, r2, #3
 8002262:	461a      	mov	r2, r3
 8002264:	460b      	mov	r3, r1
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	440b      	add	r3, r1
 800226a:	01db      	lsls	r3, r3, #7
 800226c:	4413      	add	r3, r2
 800226e:	4403      	add	r3, r0
 8002270:	3308      	adds	r3, #8
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	b2db      	uxtb	r3, r3
 8002276:	3330      	adds	r3, #48	; 0x30
 8002278:	b2da      	uxtb	r2, r3
 800227a:	4b08      	ldr	r3, [pc, #32]	; (800229c <ChooseNextNode+0x1e4>)
 800227c:	729a      	strb	r2, [r3, #10]
		TX_BUFFER[11] = '\n';
 800227e:	4b07      	ldr	r3, [pc, #28]	; (800229c <ChooseNextNode+0x1e4>)
 8002280:	220a      	movs	r2, #10
 8002282:	72da      	strb	r2, [r3, #11]
		HAL_UART_Transmit(&huart1, TX_BUFFER, 12, 100);
 8002284:	2364      	movs	r3, #100	; 0x64
 8002286:	220c      	movs	r2, #12
 8002288:	4904      	ldr	r1, [pc, #16]	; (800229c <ChooseNextNode+0x1e4>)
 800228a:	4805      	ldr	r0, [pc, #20]	; (80022a0 <ChooseNextNode+0x1e8>)
 800228c:	f004 f821 	bl	80062d2 <HAL_UART_Transmit>

		return ADELANTE;
 8002290:	2300      	movs	r3, #0
 8002292:	e20b      	b.n	80026ac <ChooseNextNode+0x5f4>
 8002294:	200011ec 	.word	0x200011ec
 8002298:	20001274 	.word	0x20001274
 800229c:	200011fc 	.word	0x200011fc
 80022a0:	20002b74 	.word	0x20002b74
	} else if (Map[x][y].Lados[direcciones[IZQUIERDA]] == 0) {
 80022a4:	4bbc      	ldr	r3, [pc, #752]	; (8002598 <ChooseNextNode+0x4e0>)
 80022a6:	6858      	ldr	r0, [r3, #4]
 80022a8:	4cbc      	ldr	r4, [pc, #752]	; (800259c <ChooseNextNode+0x4e4>)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	6879      	ldr	r1, [r7, #4]
 80022ae:	461a      	mov	r2, r3
 80022b0:	0052      	lsls	r2, r2, #1
 80022b2:	441a      	add	r2, r3
 80022b4:	0053      	lsls	r3, r2, #1
 80022b6:	461a      	mov	r2, r3
 80022b8:	460b      	mov	r3, r1
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	440b      	add	r3, r1
 80022be:	015b      	lsls	r3, r3, #5
 80022c0:	4413      	add	r3, r2
 80022c2:	4403      	add	r3, r0
 80022c4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	f040 80a8 	bne.w	800241e <ChooseNextNode+0x366>
		TX_BUFFER[0] = 'I';
 80022ce:	4bb4      	ldr	r3, [pc, #720]	; (80025a0 <ChooseNextNode+0x4e8>)
 80022d0:	2249      	movs	r2, #73	; 0x49
 80022d2:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = '\n';
 80022d4:	4bb2      	ldr	r3, [pc, #712]	; (80025a0 <ChooseNextNode+0x4e8>)
 80022d6:	220a      	movs	r2, #10
 80022d8:	705a      	strb	r2, [r3, #1]
		HAL_UART_Transmit(&huart1, TX_BUFFER, 2, 100);
 80022da:	2364      	movs	r3, #100	; 0x64
 80022dc:	2202      	movs	r2, #2
 80022de:	49b0      	ldr	r1, [pc, #704]	; (80025a0 <ChooseNextNode+0x4e8>)
 80022e0:	48b0      	ldr	r0, [pc, #704]	; (80025a4 <ChooseNextNode+0x4ec>)
 80022e2:	f003 fff6 	bl	80062d2 <HAL_UART_Transmit>
		Map[x][y].Lados[direcciones[IZQUIERDA]] = 2;
 80022e6:	4bac      	ldr	r3, [pc, #688]	; (8002598 <ChooseNextNode+0x4e0>)
 80022e8:	6858      	ldr	r0, [r3, #4]
 80022ea:	4cac      	ldr	r4, [pc, #688]	; (800259c <ChooseNextNode+0x4e4>)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	6879      	ldr	r1, [r7, #4]
 80022f0:	461a      	mov	r2, r3
 80022f2:	0052      	lsls	r2, r2, #1
 80022f4:	441a      	add	r2, r3
 80022f6:	0053      	lsls	r3, r2, #1
 80022f8:	461a      	mov	r2, r3
 80022fa:	460b      	mov	r3, r1
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	440b      	add	r3, r1
 8002300:	015b      	lsls	r3, r3, #5
 8002302:	4413      	add	r3, r2
 8002304:	4403      	add	r3, r0
 8002306:	2202      	movs	r2, #2
 8002308:	f844 2023 	str.w	r2, [r4, r3, lsl #2]

		if (Map[x][y].visitado > 1) {
 800230c:	48a3      	ldr	r0, [pc, #652]	; (800259c <ChooseNextNode+0x4e4>)
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	6879      	ldr	r1, [r7, #4]
 8002312:	461a      	mov	r2, r3
 8002314:	0052      	lsls	r2, r2, #1
 8002316:	441a      	add	r2, r3
 8002318:	00d3      	lsls	r3, r2, #3
 800231a:	461a      	mov	r2, r3
 800231c:	460b      	mov	r3, r1
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	440b      	add	r3, r1
 8002322:	01db      	lsls	r3, r3, #7
 8002324:	4413      	add	r3, r2
 8002326:	4403      	add	r3, r0
 8002328:	3310      	adds	r3, #16
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2b01      	cmp	r3, #1
 800232e:	dd03      	ble.n	8002338 <ChooseNextNode+0x280>
			EliminateNode(x, y);
 8002330:	6839      	ldr	r1, [r7, #0]
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f000 f9c4 	bl	80026c0 <EliminateNode>
		}
		TX_BUFFER[0] = 'D';
 8002338:	4b99      	ldr	r3, [pc, #612]	; (80025a0 <ChooseNextNode+0x4e8>)
 800233a:	2244      	movs	r2, #68	; 0x44
 800233c:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = Map[x][y].Lados[DERECHA] + '0';
 800233e:	4897      	ldr	r0, [pc, #604]	; (800259c <ChooseNextNode+0x4e4>)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	6879      	ldr	r1, [r7, #4]
 8002344:	461a      	mov	r2, r3
 8002346:	0052      	lsls	r2, r2, #1
 8002348:	441a      	add	r2, r3
 800234a:	00d3      	lsls	r3, r2, #3
 800234c:	461a      	mov	r2, r3
 800234e:	460b      	mov	r3, r1
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	440b      	add	r3, r1
 8002354:	01db      	lsls	r3, r3, #7
 8002356:	4413      	add	r3, r2
 8002358:	4403      	add	r3, r0
 800235a:	330c      	adds	r3, #12
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	b2db      	uxtb	r3, r3
 8002360:	3330      	adds	r3, #48	; 0x30
 8002362:	b2da      	uxtb	r2, r3
 8002364:	4b8e      	ldr	r3, [pc, #568]	; (80025a0 <ChooseNextNode+0x4e8>)
 8002366:	705a      	strb	r2, [r3, #1]
		TX_BUFFER[2] = '\n';
 8002368:	4b8d      	ldr	r3, [pc, #564]	; (80025a0 <ChooseNextNode+0x4e8>)
 800236a:	220a      	movs	r2, #10
 800236c:	709a      	strb	r2, [r3, #2]
		TX_BUFFER[3] = 'C';
 800236e:	4b8c      	ldr	r3, [pc, #560]	; (80025a0 <ChooseNextNode+0x4e8>)
 8002370:	2243      	movs	r2, #67	; 0x43
 8002372:	70da      	strb	r2, [r3, #3]
		TX_BUFFER[4] = Map[x][y].Lados[ADELANTE] + '0';
 8002374:	4889      	ldr	r0, [pc, #548]	; (800259c <ChooseNextNode+0x4e4>)
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	6879      	ldr	r1, [r7, #4]
 800237a:	461a      	mov	r2, r3
 800237c:	0052      	lsls	r2, r2, #1
 800237e:	441a      	add	r2, r3
 8002380:	00d3      	lsls	r3, r2, #3
 8002382:	461a      	mov	r2, r3
 8002384:	460b      	mov	r3, r1
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	440b      	add	r3, r1
 800238a:	01db      	lsls	r3, r3, #7
 800238c:	4413      	add	r3, r2
 800238e:	4403      	add	r3, r0
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	b2db      	uxtb	r3, r3
 8002394:	3330      	adds	r3, #48	; 0x30
 8002396:	b2da      	uxtb	r2, r3
 8002398:	4b81      	ldr	r3, [pc, #516]	; (80025a0 <ChooseNextNode+0x4e8>)
 800239a:	711a      	strb	r2, [r3, #4]
		TX_BUFFER[5] = '\n';
 800239c:	4b80      	ldr	r3, [pc, #512]	; (80025a0 <ChooseNextNode+0x4e8>)
 800239e:	220a      	movs	r2, #10
 80023a0:	715a      	strb	r2, [r3, #5]
		TX_BUFFER[6] = 'I';
 80023a2:	4b7f      	ldr	r3, [pc, #508]	; (80025a0 <ChooseNextNode+0x4e8>)
 80023a4:	2249      	movs	r2, #73	; 0x49
 80023a6:	719a      	strb	r2, [r3, #6]
		TX_BUFFER[7] = Map[x][y].Lados[IZQUIERDA] + '0';
 80023a8:	487c      	ldr	r0, [pc, #496]	; (800259c <ChooseNextNode+0x4e4>)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	6879      	ldr	r1, [r7, #4]
 80023ae:	461a      	mov	r2, r3
 80023b0:	0052      	lsls	r2, r2, #1
 80023b2:	441a      	add	r2, r3
 80023b4:	00d3      	lsls	r3, r2, #3
 80023b6:	461a      	mov	r2, r3
 80023b8:	460b      	mov	r3, r1
 80023ba:	005b      	lsls	r3, r3, #1
 80023bc:	440b      	add	r3, r1
 80023be:	01db      	lsls	r3, r3, #7
 80023c0:	4413      	add	r3, r2
 80023c2:	4403      	add	r3, r0
 80023c4:	3304      	adds	r3, #4
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	3330      	adds	r3, #48	; 0x30
 80023cc:	b2da      	uxtb	r2, r3
 80023ce:	4b74      	ldr	r3, [pc, #464]	; (80025a0 <ChooseNextNode+0x4e8>)
 80023d0:	71da      	strb	r2, [r3, #7]
		TX_BUFFER[8] = '\n';
 80023d2:	4b73      	ldr	r3, [pc, #460]	; (80025a0 <ChooseNextNode+0x4e8>)
 80023d4:	220a      	movs	r2, #10
 80023d6:	721a      	strb	r2, [r3, #8]
		TX_BUFFER[9] = 'A';
 80023d8:	4b71      	ldr	r3, [pc, #452]	; (80025a0 <ChooseNextNode+0x4e8>)
 80023da:	2241      	movs	r2, #65	; 0x41
 80023dc:	725a      	strb	r2, [r3, #9]
		TX_BUFFER[10] = Map[x][y].Lados[ATRAS] + '0';
 80023de:	486f      	ldr	r0, [pc, #444]	; (800259c <ChooseNextNode+0x4e4>)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	6879      	ldr	r1, [r7, #4]
 80023e4:	461a      	mov	r2, r3
 80023e6:	0052      	lsls	r2, r2, #1
 80023e8:	441a      	add	r2, r3
 80023ea:	00d3      	lsls	r3, r2, #3
 80023ec:	461a      	mov	r2, r3
 80023ee:	460b      	mov	r3, r1
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	440b      	add	r3, r1
 80023f4:	01db      	lsls	r3, r3, #7
 80023f6:	4413      	add	r3, r2
 80023f8:	4403      	add	r3, r0
 80023fa:	3308      	adds	r3, #8
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	3330      	adds	r3, #48	; 0x30
 8002402:	b2da      	uxtb	r2, r3
 8002404:	4b66      	ldr	r3, [pc, #408]	; (80025a0 <ChooseNextNode+0x4e8>)
 8002406:	729a      	strb	r2, [r3, #10]
		TX_BUFFER[11] = '\n';
 8002408:	4b65      	ldr	r3, [pc, #404]	; (80025a0 <ChooseNextNode+0x4e8>)
 800240a:	220a      	movs	r2, #10
 800240c:	72da      	strb	r2, [r3, #11]
		HAL_UART_Transmit(&huart1, TX_BUFFER, 12, 100);
 800240e:	2364      	movs	r3, #100	; 0x64
 8002410:	220c      	movs	r2, #12
 8002412:	4963      	ldr	r1, [pc, #396]	; (80025a0 <ChooseNextNode+0x4e8>)
 8002414:	4863      	ldr	r0, [pc, #396]	; (80025a4 <ChooseNextNode+0x4ec>)
 8002416:	f003 ff5c 	bl	80062d2 <HAL_UART_Transmit>

		return IZQUIERDA;
 800241a:	2301      	movs	r3, #1
 800241c:	e146      	b.n	80026ac <ChooseNextNode+0x5f4>
	} else if (Map[x][y].Lados[direcciones[DERECHA]] == 0) {
 800241e:	4b5e      	ldr	r3, [pc, #376]	; (8002598 <ChooseNextNode+0x4e0>)
 8002420:	68d8      	ldr	r0, [r3, #12]
 8002422:	4c5e      	ldr	r4, [pc, #376]	; (800259c <ChooseNextNode+0x4e4>)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	6879      	ldr	r1, [r7, #4]
 8002428:	461a      	mov	r2, r3
 800242a:	0052      	lsls	r2, r2, #1
 800242c:	441a      	add	r2, r3
 800242e:	0053      	lsls	r3, r2, #1
 8002430:	461a      	mov	r2, r3
 8002432:	460b      	mov	r3, r1
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	440b      	add	r3, r1
 8002438:	015b      	lsls	r3, r3, #5
 800243a:	4413      	add	r3, r2
 800243c:	4403      	add	r3, r0
 800243e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8002442:	2b00      	cmp	r3, #0
 8002444:	f040 80b0 	bne.w	80025a8 <ChooseNextNode+0x4f0>
		TX_BUFFER[0] = 'D';
 8002448:	4b55      	ldr	r3, [pc, #340]	; (80025a0 <ChooseNextNode+0x4e8>)
 800244a:	2244      	movs	r2, #68	; 0x44
 800244c:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = '\n';
 800244e:	4b54      	ldr	r3, [pc, #336]	; (80025a0 <ChooseNextNode+0x4e8>)
 8002450:	220a      	movs	r2, #10
 8002452:	705a      	strb	r2, [r3, #1]
		HAL_UART_Transmit(&huart1, TX_BUFFER, 2, 100);
 8002454:	2364      	movs	r3, #100	; 0x64
 8002456:	2202      	movs	r2, #2
 8002458:	4951      	ldr	r1, [pc, #324]	; (80025a0 <ChooseNextNode+0x4e8>)
 800245a:	4852      	ldr	r0, [pc, #328]	; (80025a4 <ChooseNextNode+0x4ec>)
 800245c:	f003 ff39 	bl	80062d2 <HAL_UART_Transmit>
		Map[x][y].Lados[direcciones[DERECHA]] = 2;
 8002460:	4b4d      	ldr	r3, [pc, #308]	; (8002598 <ChooseNextNode+0x4e0>)
 8002462:	68d8      	ldr	r0, [r3, #12]
 8002464:	4c4d      	ldr	r4, [pc, #308]	; (800259c <ChooseNextNode+0x4e4>)
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	6879      	ldr	r1, [r7, #4]
 800246a:	461a      	mov	r2, r3
 800246c:	0052      	lsls	r2, r2, #1
 800246e:	441a      	add	r2, r3
 8002470:	0053      	lsls	r3, r2, #1
 8002472:	461a      	mov	r2, r3
 8002474:	460b      	mov	r3, r1
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	440b      	add	r3, r1
 800247a:	015b      	lsls	r3, r3, #5
 800247c:	4413      	add	r3, r2
 800247e:	4403      	add	r3, r0
 8002480:	2202      	movs	r2, #2
 8002482:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
		if (Map[x][y].visitado > 1) {
 8002486:	4845      	ldr	r0, [pc, #276]	; (800259c <ChooseNextNode+0x4e4>)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	6879      	ldr	r1, [r7, #4]
 800248c:	461a      	mov	r2, r3
 800248e:	0052      	lsls	r2, r2, #1
 8002490:	441a      	add	r2, r3
 8002492:	00d3      	lsls	r3, r2, #3
 8002494:	461a      	mov	r2, r3
 8002496:	460b      	mov	r3, r1
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	440b      	add	r3, r1
 800249c:	01db      	lsls	r3, r3, #7
 800249e:	4413      	add	r3, r2
 80024a0:	4403      	add	r3, r0
 80024a2:	3310      	adds	r3, #16
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	dd03      	ble.n	80024b2 <ChooseNextNode+0x3fa>
			EliminateNode(x, y);
 80024aa:	6839      	ldr	r1, [r7, #0]
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f000 f907 	bl	80026c0 <EliminateNode>
		}
		TX_BUFFER[0] = 'D';
 80024b2:	4b3b      	ldr	r3, [pc, #236]	; (80025a0 <ChooseNextNode+0x4e8>)
 80024b4:	2244      	movs	r2, #68	; 0x44
 80024b6:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = Map[x][y].Lados[DERECHA] + '0';
 80024b8:	4838      	ldr	r0, [pc, #224]	; (800259c <ChooseNextNode+0x4e4>)
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	6879      	ldr	r1, [r7, #4]
 80024be:	461a      	mov	r2, r3
 80024c0:	0052      	lsls	r2, r2, #1
 80024c2:	441a      	add	r2, r3
 80024c4:	00d3      	lsls	r3, r2, #3
 80024c6:	461a      	mov	r2, r3
 80024c8:	460b      	mov	r3, r1
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	440b      	add	r3, r1
 80024ce:	01db      	lsls	r3, r3, #7
 80024d0:	4413      	add	r3, r2
 80024d2:	4403      	add	r3, r0
 80024d4:	330c      	adds	r3, #12
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	3330      	adds	r3, #48	; 0x30
 80024dc:	b2da      	uxtb	r2, r3
 80024de:	4b30      	ldr	r3, [pc, #192]	; (80025a0 <ChooseNextNode+0x4e8>)
 80024e0:	705a      	strb	r2, [r3, #1]
		TX_BUFFER[2] = '\n';
 80024e2:	4b2f      	ldr	r3, [pc, #188]	; (80025a0 <ChooseNextNode+0x4e8>)
 80024e4:	220a      	movs	r2, #10
 80024e6:	709a      	strb	r2, [r3, #2]
		TX_BUFFER[3] = 'C';
 80024e8:	4b2d      	ldr	r3, [pc, #180]	; (80025a0 <ChooseNextNode+0x4e8>)
 80024ea:	2243      	movs	r2, #67	; 0x43
 80024ec:	70da      	strb	r2, [r3, #3]
		TX_BUFFER[4] = Map[x][y].Lados[ADELANTE] + '0';
 80024ee:	482b      	ldr	r0, [pc, #172]	; (800259c <ChooseNextNode+0x4e4>)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	6879      	ldr	r1, [r7, #4]
 80024f4:	461a      	mov	r2, r3
 80024f6:	0052      	lsls	r2, r2, #1
 80024f8:	441a      	add	r2, r3
 80024fa:	00d3      	lsls	r3, r2, #3
 80024fc:	461a      	mov	r2, r3
 80024fe:	460b      	mov	r3, r1
 8002500:	005b      	lsls	r3, r3, #1
 8002502:	440b      	add	r3, r1
 8002504:	01db      	lsls	r3, r3, #7
 8002506:	4413      	add	r3, r2
 8002508:	4403      	add	r3, r0
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	b2db      	uxtb	r3, r3
 800250e:	3330      	adds	r3, #48	; 0x30
 8002510:	b2da      	uxtb	r2, r3
 8002512:	4b23      	ldr	r3, [pc, #140]	; (80025a0 <ChooseNextNode+0x4e8>)
 8002514:	711a      	strb	r2, [r3, #4]
		TX_BUFFER[5] = '\n';
 8002516:	4b22      	ldr	r3, [pc, #136]	; (80025a0 <ChooseNextNode+0x4e8>)
 8002518:	220a      	movs	r2, #10
 800251a:	715a      	strb	r2, [r3, #5]
		TX_BUFFER[6] = 'I';
 800251c:	4b20      	ldr	r3, [pc, #128]	; (80025a0 <ChooseNextNode+0x4e8>)
 800251e:	2249      	movs	r2, #73	; 0x49
 8002520:	719a      	strb	r2, [r3, #6]
		TX_BUFFER[7] = Map[x][y].Lados[IZQUIERDA] + '0';
 8002522:	481e      	ldr	r0, [pc, #120]	; (800259c <ChooseNextNode+0x4e4>)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	6879      	ldr	r1, [r7, #4]
 8002528:	461a      	mov	r2, r3
 800252a:	0052      	lsls	r2, r2, #1
 800252c:	441a      	add	r2, r3
 800252e:	00d3      	lsls	r3, r2, #3
 8002530:	461a      	mov	r2, r3
 8002532:	460b      	mov	r3, r1
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	440b      	add	r3, r1
 8002538:	01db      	lsls	r3, r3, #7
 800253a:	4413      	add	r3, r2
 800253c:	4403      	add	r3, r0
 800253e:	3304      	adds	r3, #4
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	b2db      	uxtb	r3, r3
 8002544:	3330      	adds	r3, #48	; 0x30
 8002546:	b2da      	uxtb	r2, r3
 8002548:	4b15      	ldr	r3, [pc, #84]	; (80025a0 <ChooseNextNode+0x4e8>)
 800254a:	71da      	strb	r2, [r3, #7]
		TX_BUFFER[8] = '\n';
 800254c:	4b14      	ldr	r3, [pc, #80]	; (80025a0 <ChooseNextNode+0x4e8>)
 800254e:	220a      	movs	r2, #10
 8002550:	721a      	strb	r2, [r3, #8]
		TX_BUFFER[9] = 'A';
 8002552:	4b13      	ldr	r3, [pc, #76]	; (80025a0 <ChooseNextNode+0x4e8>)
 8002554:	2241      	movs	r2, #65	; 0x41
 8002556:	725a      	strb	r2, [r3, #9]
		TX_BUFFER[10] = Map[x][y].Lados[ATRAS] + '0';
 8002558:	4810      	ldr	r0, [pc, #64]	; (800259c <ChooseNextNode+0x4e4>)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	6879      	ldr	r1, [r7, #4]
 800255e:	461a      	mov	r2, r3
 8002560:	0052      	lsls	r2, r2, #1
 8002562:	441a      	add	r2, r3
 8002564:	00d3      	lsls	r3, r2, #3
 8002566:	461a      	mov	r2, r3
 8002568:	460b      	mov	r3, r1
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	440b      	add	r3, r1
 800256e:	01db      	lsls	r3, r3, #7
 8002570:	4413      	add	r3, r2
 8002572:	4403      	add	r3, r0
 8002574:	3308      	adds	r3, #8
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	b2db      	uxtb	r3, r3
 800257a:	3330      	adds	r3, #48	; 0x30
 800257c:	b2da      	uxtb	r2, r3
 800257e:	4b08      	ldr	r3, [pc, #32]	; (80025a0 <ChooseNextNode+0x4e8>)
 8002580:	729a      	strb	r2, [r3, #10]
		TX_BUFFER[11] = '\n';
 8002582:	4b07      	ldr	r3, [pc, #28]	; (80025a0 <ChooseNextNode+0x4e8>)
 8002584:	220a      	movs	r2, #10
 8002586:	72da      	strb	r2, [r3, #11]
		HAL_UART_Transmit(&huart1, TX_BUFFER, 12, 100);
 8002588:	2364      	movs	r3, #100	; 0x64
 800258a:	220c      	movs	r2, #12
 800258c:	4904      	ldr	r1, [pc, #16]	; (80025a0 <ChooseNextNode+0x4e8>)
 800258e:	4805      	ldr	r0, [pc, #20]	; (80025a4 <ChooseNextNode+0x4ec>)
 8002590:	f003 fe9f 	bl	80062d2 <HAL_UART_Transmit>
		return DERECHA;
 8002594:	2303      	movs	r3, #3
 8002596:	e089      	b.n	80026ac <ChooseNextNode+0x5f4>
 8002598:	200011ec 	.word	0x200011ec
 800259c:	20001274 	.word	0x20001274
 80025a0:	200011fc 	.word	0x200011fc
 80025a4:	20002b74 	.word	0x20002b74
	} else {
		TX_BUFFER[0] = 'O';
 80025a8:	4b42      	ldr	r3, [pc, #264]	; (80026b4 <ChooseNextNode+0x5fc>)
 80025aa:	224f      	movs	r2, #79	; 0x4f
 80025ac:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = '\n';
 80025ae:	4b41      	ldr	r3, [pc, #260]	; (80026b4 <ChooseNextNode+0x5fc>)
 80025b0:	220a      	movs	r2, #10
 80025b2:	705a      	strb	r2, [r3, #1]
		HAL_UART_Transmit(&huart1, TX_BUFFER, 2, 100);
 80025b4:	2364      	movs	r3, #100	; 0x64
 80025b6:	2202      	movs	r2, #2
 80025b8:	493e      	ldr	r1, [pc, #248]	; (80026b4 <ChooseNextNode+0x5fc>)
 80025ba:	483f      	ldr	r0, [pc, #252]	; (80026b8 <ChooseNextNode+0x600>)
 80025bc:	f003 fe89 	bl	80062d2 <HAL_UART_Transmit>
		TX_BUFFER[0] = 'D';
 80025c0:	4b3c      	ldr	r3, [pc, #240]	; (80026b4 <ChooseNextNode+0x5fc>)
 80025c2:	2244      	movs	r2, #68	; 0x44
 80025c4:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = Map[x][y].Lados[DERECHA] + '0';
 80025c6:	483d      	ldr	r0, [pc, #244]	; (80026bc <ChooseNextNode+0x604>)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	6879      	ldr	r1, [r7, #4]
 80025cc:	461a      	mov	r2, r3
 80025ce:	0052      	lsls	r2, r2, #1
 80025d0:	441a      	add	r2, r3
 80025d2:	00d3      	lsls	r3, r2, #3
 80025d4:	461a      	mov	r2, r3
 80025d6:	460b      	mov	r3, r1
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	440b      	add	r3, r1
 80025dc:	01db      	lsls	r3, r3, #7
 80025de:	4413      	add	r3, r2
 80025e0:	4403      	add	r3, r0
 80025e2:	330c      	adds	r3, #12
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	3330      	adds	r3, #48	; 0x30
 80025ea:	b2da      	uxtb	r2, r3
 80025ec:	4b31      	ldr	r3, [pc, #196]	; (80026b4 <ChooseNextNode+0x5fc>)
 80025ee:	705a      	strb	r2, [r3, #1]
		TX_BUFFER[2] = '\n';
 80025f0:	4b30      	ldr	r3, [pc, #192]	; (80026b4 <ChooseNextNode+0x5fc>)
 80025f2:	220a      	movs	r2, #10
 80025f4:	709a      	strb	r2, [r3, #2]
		TX_BUFFER[3] = 'C';
 80025f6:	4b2f      	ldr	r3, [pc, #188]	; (80026b4 <ChooseNextNode+0x5fc>)
 80025f8:	2243      	movs	r2, #67	; 0x43
 80025fa:	70da      	strb	r2, [r3, #3]
		TX_BUFFER[4] = Map[x][y].Lados[ADELANTE] + '0';
 80025fc:	482f      	ldr	r0, [pc, #188]	; (80026bc <ChooseNextNode+0x604>)
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	6879      	ldr	r1, [r7, #4]
 8002602:	461a      	mov	r2, r3
 8002604:	0052      	lsls	r2, r2, #1
 8002606:	441a      	add	r2, r3
 8002608:	00d3      	lsls	r3, r2, #3
 800260a:	461a      	mov	r2, r3
 800260c:	460b      	mov	r3, r1
 800260e:	005b      	lsls	r3, r3, #1
 8002610:	440b      	add	r3, r1
 8002612:	01db      	lsls	r3, r3, #7
 8002614:	4413      	add	r3, r2
 8002616:	4403      	add	r3, r0
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	b2db      	uxtb	r3, r3
 800261c:	3330      	adds	r3, #48	; 0x30
 800261e:	b2da      	uxtb	r2, r3
 8002620:	4b24      	ldr	r3, [pc, #144]	; (80026b4 <ChooseNextNode+0x5fc>)
 8002622:	711a      	strb	r2, [r3, #4]
		TX_BUFFER[5] = '\n';
 8002624:	4b23      	ldr	r3, [pc, #140]	; (80026b4 <ChooseNextNode+0x5fc>)
 8002626:	220a      	movs	r2, #10
 8002628:	715a      	strb	r2, [r3, #5]
		TX_BUFFER[6] = 'I';
 800262a:	4b22      	ldr	r3, [pc, #136]	; (80026b4 <ChooseNextNode+0x5fc>)
 800262c:	2249      	movs	r2, #73	; 0x49
 800262e:	719a      	strb	r2, [r3, #6]
		TX_BUFFER[7] = Map[x][y].Lados[IZQUIERDA] + '0';
 8002630:	4822      	ldr	r0, [pc, #136]	; (80026bc <ChooseNextNode+0x604>)
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	6879      	ldr	r1, [r7, #4]
 8002636:	461a      	mov	r2, r3
 8002638:	0052      	lsls	r2, r2, #1
 800263a:	441a      	add	r2, r3
 800263c:	00d3      	lsls	r3, r2, #3
 800263e:	461a      	mov	r2, r3
 8002640:	460b      	mov	r3, r1
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	440b      	add	r3, r1
 8002646:	01db      	lsls	r3, r3, #7
 8002648:	4413      	add	r3, r2
 800264a:	4403      	add	r3, r0
 800264c:	3304      	adds	r3, #4
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	b2db      	uxtb	r3, r3
 8002652:	3330      	adds	r3, #48	; 0x30
 8002654:	b2da      	uxtb	r2, r3
 8002656:	4b17      	ldr	r3, [pc, #92]	; (80026b4 <ChooseNextNode+0x5fc>)
 8002658:	71da      	strb	r2, [r3, #7]
		TX_BUFFER[8] = '\n';
 800265a:	4b16      	ldr	r3, [pc, #88]	; (80026b4 <ChooseNextNode+0x5fc>)
 800265c:	220a      	movs	r2, #10
 800265e:	721a      	strb	r2, [r3, #8]
		TX_BUFFER[9] = 'A';
 8002660:	4b14      	ldr	r3, [pc, #80]	; (80026b4 <ChooseNextNode+0x5fc>)
 8002662:	2241      	movs	r2, #65	; 0x41
 8002664:	725a      	strb	r2, [r3, #9]
		TX_BUFFER[10] = Map[x][y].Lados[ATRAS] + '0';
 8002666:	4815      	ldr	r0, [pc, #84]	; (80026bc <ChooseNextNode+0x604>)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	6879      	ldr	r1, [r7, #4]
 800266c:	461a      	mov	r2, r3
 800266e:	0052      	lsls	r2, r2, #1
 8002670:	441a      	add	r2, r3
 8002672:	00d3      	lsls	r3, r2, #3
 8002674:	461a      	mov	r2, r3
 8002676:	460b      	mov	r3, r1
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	440b      	add	r3, r1
 800267c:	01db      	lsls	r3, r3, #7
 800267e:	4413      	add	r3, r2
 8002680:	4403      	add	r3, r0
 8002682:	3308      	adds	r3, #8
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	b2db      	uxtb	r3, r3
 8002688:	3330      	adds	r3, #48	; 0x30
 800268a:	b2da      	uxtb	r2, r3
 800268c:	4b09      	ldr	r3, [pc, #36]	; (80026b4 <ChooseNextNode+0x5fc>)
 800268e:	729a      	strb	r2, [r3, #10]
		TX_BUFFER[11] = '\n';
 8002690:	4b08      	ldr	r3, [pc, #32]	; (80026b4 <ChooseNextNode+0x5fc>)
 8002692:	220a      	movs	r2, #10
 8002694:	72da      	strb	r2, [r3, #11]
		HAL_UART_Transmit(&huart1, TX_BUFFER, 12, 100);
 8002696:	2364      	movs	r3, #100	; 0x64
 8002698:	220c      	movs	r2, #12
 800269a:	4906      	ldr	r1, [pc, #24]	; (80026b4 <ChooseNextNode+0x5fc>)
 800269c:	4806      	ldr	r0, [pc, #24]	; (80026b8 <ChooseNextNode+0x600>)
 800269e:	f003 fe18 	bl	80062d2 <HAL_UART_Transmit>
		return SearchAvailableNode(x, y);
 80026a2:	6839      	ldr	r1, [r7, #0]
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f000 f841 	bl	800272c <SearchAvailableNode>
 80026aa:	4603      	mov	r3, r0
	}
	last.x = x;
	last.y = y;
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd90      	pop	{r4, r7, pc}
 80026b4:	200011fc 	.word	0x200011fc
 80026b8:	20002b74 	.word	0x20002b74
 80026bc:	20001274 	.word	0x20001274

080026c0 <EliminateNode>:

void EliminateNode(int x, int y) {
 80026c0:	b490      	push	{r4, r7}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
//Serial.println("Borro");
	Map[x][y].Lados[direcciones[ATRAS]] = 1;
 80026ca:	4b15      	ldr	r3, [pc, #84]	; (8002720 <EliminateNode+0x60>)
 80026cc:	6898      	ldr	r0, [r3, #8]
 80026ce:	4c15      	ldr	r4, [pc, #84]	; (8002724 <EliminateNode+0x64>)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	6879      	ldr	r1, [r7, #4]
 80026d4:	461a      	mov	r2, r3
 80026d6:	0052      	lsls	r2, r2, #1
 80026d8:	441a      	add	r2, r3
 80026da:	0053      	lsls	r3, r2, #1
 80026dc:	461a      	mov	r2, r3
 80026de:	460b      	mov	r3, r1
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	440b      	add	r3, r1
 80026e4:	015b      	lsls	r3, r3, #5
 80026e6:	4413      	add	r3, r2
 80026e8:	4403      	add	r3, r0
 80026ea:	2201      	movs	r2, #1
 80026ec:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	Map[last.x][last.y].visitado = 0;
 80026f0:	4b0d      	ldr	r3, [pc, #52]	; (8002728 <EliminateNode+0x68>)
 80026f2:	6819      	ldr	r1, [r3, #0]
 80026f4:	4b0c      	ldr	r3, [pc, #48]	; (8002728 <EliminateNode+0x68>)
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	480a      	ldr	r0, [pc, #40]	; (8002724 <EliminateNode+0x64>)
 80026fa:	461a      	mov	r2, r3
 80026fc:	0052      	lsls	r2, r2, #1
 80026fe:	441a      	add	r2, r3
 8002700:	00d3      	lsls	r3, r2, #3
 8002702:	461a      	mov	r2, r3
 8002704:	460b      	mov	r3, r1
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	440b      	add	r3, r1
 800270a:	01db      	lsls	r3, r3, #7
 800270c:	4413      	add	r3, r2
 800270e:	4403      	add	r3, r0
 8002710:	3310      	adds	r3, #16
 8002712:	2200      	movs	r2, #0
 8002714:	601a      	str	r2, [r3, #0]
}
 8002716:	bf00      	nop
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bc90      	pop	{r4, r7}
 800271e:	4770      	bx	lr
 8002720:	200011ec 	.word	0x200011ec
 8002724:	20001274 	.word	0x20001274
 8002728:	2000126c 	.word	0x2000126c

0800272c <SearchAvailableNode>:

int SearchAvailableNode(int x, int y) {
 800272c:	b590      	push	{r4, r7, lr}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
	if (Map[x][y].Lados[direcciones[ADELANTE]] != 1) {
 8002736:	4b70      	ldr	r3, [pc, #448]	; (80028f8 <SearchAvailableNode+0x1cc>)
 8002738:	6818      	ldr	r0, [r3, #0]
 800273a:	4c70      	ldr	r4, [pc, #448]	; (80028fc <SearchAvailableNode+0x1d0>)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	6879      	ldr	r1, [r7, #4]
 8002740:	461a      	mov	r2, r3
 8002742:	0052      	lsls	r2, r2, #1
 8002744:	441a      	add	r2, r3
 8002746:	0053      	lsls	r3, r2, #1
 8002748:	461a      	mov	r2, r3
 800274a:	460b      	mov	r3, r1
 800274c:	005b      	lsls	r3, r3, #1
 800274e:	440b      	add	r3, r1
 8002750:	015b      	lsls	r3, r3, #5
 8002752:	4413      	add	r3, r2
 8002754:	4403      	add	r3, r0
 8002756:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d02d      	beq.n	80027ba <SearchAvailableNode+0x8e>
		//Serial.println("Adelante1");
		Map[x][y].Lados[direcciones[ADELANTE]] = 2;
 800275e:	4b66      	ldr	r3, [pc, #408]	; (80028f8 <SearchAvailableNode+0x1cc>)
 8002760:	6818      	ldr	r0, [r3, #0]
 8002762:	4c66      	ldr	r4, [pc, #408]	; (80028fc <SearchAvailableNode+0x1d0>)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	6879      	ldr	r1, [r7, #4]
 8002768:	461a      	mov	r2, r3
 800276a:	0052      	lsls	r2, r2, #1
 800276c:	441a      	add	r2, r3
 800276e:	0053      	lsls	r3, r2, #1
 8002770:	461a      	mov	r2, r3
 8002772:	460b      	mov	r3, r1
 8002774:	005b      	lsls	r3, r3, #1
 8002776:	440b      	add	r3, r1
 8002778:	015b      	lsls	r3, r3, #5
 800277a:	4413      	add	r3, r2
 800277c:	4403      	add	r3, r0
 800277e:	2202      	movs	r2, #2
 8002780:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
		moveNode(ADELANTE);
 8002784:	2000      	movs	r0, #0
 8002786:	f000 f8bb 	bl	8002900 <moveNode>
		if (Map[x][y].visitado > 1) {
 800278a:	485c      	ldr	r0, [pc, #368]	; (80028fc <SearchAvailableNode+0x1d0>)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	6879      	ldr	r1, [r7, #4]
 8002790:	461a      	mov	r2, r3
 8002792:	0052      	lsls	r2, r2, #1
 8002794:	441a      	add	r2, r3
 8002796:	00d3      	lsls	r3, r2, #3
 8002798:	461a      	mov	r2, r3
 800279a:	460b      	mov	r3, r1
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	440b      	add	r3, r1
 80027a0:	01db      	lsls	r3, r3, #7
 80027a2:	4413      	add	r3, r2
 80027a4:	4403      	add	r3, r0
 80027a6:	3310      	adds	r3, #16
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	dd03      	ble.n	80027b6 <SearchAvailableNode+0x8a>
			EliminateNode(x, y);
 80027ae:	6839      	ldr	r1, [r7, #0]
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f7ff ff85 	bl	80026c0 <EliminateNode>
		}
		return ADELANTE;
 80027b6:	2300      	movs	r3, #0
 80027b8:	e09a      	b.n	80028f0 <SearchAvailableNode+0x1c4>
	} else if (Map[x][y].Lados[direcciones[IZQUIERDA]] != 1) {
 80027ba:	4b4f      	ldr	r3, [pc, #316]	; (80028f8 <SearchAvailableNode+0x1cc>)
 80027bc:	6858      	ldr	r0, [r3, #4]
 80027be:	4c4f      	ldr	r4, [pc, #316]	; (80028fc <SearchAvailableNode+0x1d0>)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	6879      	ldr	r1, [r7, #4]
 80027c4:	461a      	mov	r2, r3
 80027c6:	0052      	lsls	r2, r2, #1
 80027c8:	441a      	add	r2, r3
 80027ca:	0053      	lsls	r3, r2, #1
 80027cc:	461a      	mov	r2, r3
 80027ce:	460b      	mov	r3, r1
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	440b      	add	r3, r1
 80027d4:	015b      	lsls	r3, r3, #5
 80027d6:	4413      	add	r3, r2
 80027d8:	4403      	add	r3, r0
 80027da:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d02d      	beq.n	800283e <SearchAvailableNode+0x112>
		//Serial.println("IZQUIERDA1");
		Map[x][y].Lados[direcciones[IZQUIERDA]] = 2;
 80027e2:	4b45      	ldr	r3, [pc, #276]	; (80028f8 <SearchAvailableNode+0x1cc>)
 80027e4:	6858      	ldr	r0, [r3, #4]
 80027e6:	4c45      	ldr	r4, [pc, #276]	; (80028fc <SearchAvailableNode+0x1d0>)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	6879      	ldr	r1, [r7, #4]
 80027ec:	461a      	mov	r2, r3
 80027ee:	0052      	lsls	r2, r2, #1
 80027f0:	441a      	add	r2, r3
 80027f2:	0053      	lsls	r3, r2, #1
 80027f4:	461a      	mov	r2, r3
 80027f6:	460b      	mov	r3, r1
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	440b      	add	r3, r1
 80027fc:	015b      	lsls	r3, r3, #5
 80027fe:	4413      	add	r3, r2
 8002800:	4403      	add	r3, r0
 8002802:	2202      	movs	r2, #2
 8002804:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
		moveNode(IZQUIERDA);
 8002808:	2001      	movs	r0, #1
 800280a:	f000 f879 	bl	8002900 <moveNode>
		//rotateAxis(IZQUIERDA);
		if (Map[x][y].visitado > 1) {
 800280e:	483b      	ldr	r0, [pc, #236]	; (80028fc <SearchAvailableNode+0x1d0>)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	6879      	ldr	r1, [r7, #4]
 8002814:	461a      	mov	r2, r3
 8002816:	0052      	lsls	r2, r2, #1
 8002818:	441a      	add	r2, r3
 800281a:	00d3      	lsls	r3, r2, #3
 800281c:	461a      	mov	r2, r3
 800281e:	460b      	mov	r3, r1
 8002820:	005b      	lsls	r3, r3, #1
 8002822:	440b      	add	r3, r1
 8002824:	01db      	lsls	r3, r3, #7
 8002826:	4413      	add	r3, r2
 8002828:	4403      	add	r3, r0
 800282a:	3310      	adds	r3, #16
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2b01      	cmp	r3, #1
 8002830:	dd03      	ble.n	800283a <SearchAvailableNode+0x10e>
			EliminateNode(x, y);
 8002832:	6839      	ldr	r1, [r7, #0]
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f7ff ff43 	bl	80026c0 <EliminateNode>
		}
		return IZQUIERDA;
 800283a:	2301      	movs	r3, #1
 800283c:	e058      	b.n	80028f0 <SearchAvailableNode+0x1c4>
	} else if (Map[x][y].Lados[direcciones[DERECHA]] != 1) {
 800283e:	4b2e      	ldr	r3, [pc, #184]	; (80028f8 <SearchAvailableNode+0x1cc>)
 8002840:	68d8      	ldr	r0, [r3, #12]
 8002842:	4c2e      	ldr	r4, [pc, #184]	; (80028fc <SearchAvailableNode+0x1d0>)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	6879      	ldr	r1, [r7, #4]
 8002848:	461a      	mov	r2, r3
 800284a:	0052      	lsls	r2, r2, #1
 800284c:	441a      	add	r2, r3
 800284e:	0053      	lsls	r3, r2, #1
 8002850:	461a      	mov	r2, r3
 8002852:	460b      	mov	r3, r1
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	440b      	add	r3, r1
 8002858:	015b      	lsls	r3, r3, #5
 800285a:	4413      	add	r3, r2
 800285c:	4403      	add	r3, r0
 800285e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8002862:	2b01      	cmp	r3, #1
 8002864:	d02d      	beq.n	80028c2 <SearchAvailableNode+0x196>
		//Serial.println("DERECHA1");
		Map[x][y].Lados[direcciones[DERECHA]] = 2;
 8002866:	4b24      	ldr	r3, [pc, #144]	; (80028f8 <SearchAvailableNode+0x1cc>)
 8002868:	68d8      	ldr	r0, [r3, #12]
 800286a:	4c24      	ldr	r4, [pc, #144]	; (80028fc <SearchAvailableNode+0x1d0>)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	6879      	ldr	r1, [r7, #4]
 8002870:	461a      	mov	r2, r3
 8002872:	0052      	lsls	r2, r2, #1
 8002874:	441a      	add	r2, r3
 8002876:	0053      	lsls	r3, r2, #1
 8002878:	461a      	mov	r2, r3
 800287a:	460b      	mov	r3, r1
 800287c:	005b      	lsls	r3, r3, #1
 800287e:	440b      	add	r3, r1
 8002880:	015b      	lsls	r3, r3, #5
 8002882:	4413      	add	r3, r2
 8002884:	4403      	add	r3, r0
 8002886:	2202      	movs	r2, #2
 8002888:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
		moveNode(DERECHA);
 800288c:	2003      	movs	r0, #3
 800288e:	f000 f837 	bl	8002900 <moveNode>
		if (Map[x][y].visitado > 1) {
 8002892:	481a      	ldr	r0, [pc, #104]	; (80028fc <SearchAvailableNode+0x1d0>)
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	6879      	ldr	r1, [r7, #4]
 8002898:	461a      	mov	r2, r3
 800289a:	0052      	lsls	r2, r2, #1
 800289c:	441a      	add	r2, r3
 800289e:	00d3      	lsls	r3, r2, #3
 80028a0:	461a      	mov	r2, r3
 80028a2:	460b      	mov	r3, r1
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	440b      	add	r3, r1
 80028a8:	01db      	lsls	r3, r3, #7
 80028aa:	4413      	add	r3, r2
 80028ac:	4403      	add	r3, r0
 80028ae:	3310      	adds	r3, #16
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	dd03      	ble.n	80028be <SearchAvailableNode+0x192>
			EliminateNode(x, y);
 80028b6:	6839      	ldr	r1, [r7, #0]
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f7ff ff01 	bl	80026c0 <EliminateNode>
		}
		//rotateAxis(DERECHA);
		return DERECHA;
 80028be:	2303      	movs	r3, #3
 80028c0:	e016      	b.n	80028f0 <SearchAvailableNode+0x1c4>
	} else if (Map[x][y].Lados[direcciones[ATRAS]] != 1) {
 80028c2:	4b0d      	ldr	r3, [pc, #52]	; (80028f8 <SearchAvailableNode+0x1cc>)
 80028c4:	6898      	ldr	r0, [r3, #8]
 80028c6:	4c0d      	ldr	r4, [pc, #52]	; (80028fc <SearchAvailableNode+0x1d0>)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	6879      	ldr	r1, [r7, #4]
 80028cc:	461a      	mov	r2, r3
 80028ce:	0052      	lsls	r2, r2, #1
 80028d0:	441a      	add	r2, r3
 80028d2:	0053      	lsls	r3, r2, #1
 80028d4:	461a      	mov	r2, r3
 80028d6:	460b      	mov	r3, r1
 80028d8:	005b      	lsls	r3, r3, #1
 80028da:	440b      	add	r3, r1
 80028dc:	015b      	lsls	r3, r3, #5
 80028de:	4413      	add	r3, r2
 80028e0:	4403      	add	r3, r0
 80028e2:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d001      	beq.n	80028ee <SearchAvailableNode+0x1c2>
		//Serial.println("atras1");
		return ATRAS;
 80028ea:	2302      	movs	r3, #2
 80028ec:	e000      	b.n	80028f0 <SearchAvailableNode+0x1c4>
	}
	return 0;
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd90      	pop	{r4, r7, pc}
 80028f8:	200011ec 	.word	0x200011ec
 80028fc:	20001274 	.word	0x20001274

08002900 <moveNode>:
void moveNode(int lado) {
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
	switch (lado) {
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2b03      	cmp	r3, #3
 800290c:	d822      	bhi.n	8002954 <moveNode+0x54>
 800290e:	a201      	add	r2, pc, #4	; (adr r2, 8002914 <moveNode+0x14>)
 8002910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002914:	08002925 	.word	0x08002925
 8002918:	08002931 	.word	0x08002931
 800291c:	08002949 	.word	0x08002949
 8002920:	0800293d 	.word	0x0800293d
	case ADELANTE:
		//if (visual.y != ALTO - 1) {
		actual.y++;
 8002924:	4b0e      	ldr	r3, [pc, #56]	; (8002960 <moveNode+0x60>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	3301      	adds	r3, #1
 800292a:	4a0d      	ldr	r2, [pc, #52]	; (8002960 <moveNode+0x60>)
 800292c:	6053      	str	r3, [r2, #4]
		//visual.y++;
		//}
		break;
 800292e:	e011      	b.n	8002954 <moveNode+0x54>
	case IZQUIERDA:
		//if (visual.x != 0) {
		actual.x--;
 8002930:	4b0b      	ldr	r3, [pc, #44]	; (8002960 <moveNode+0x60>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	3b01      	subs	r3, #1
 8002936:	4a0a      	ldr	r2, [pc, #40]	; (8002960 <moveNode+0x60>)
 8002938:	6013      	str	r3, [r2, #0]
		//visual.x--;
		//}
		break;
 800293a:	e00b      	b.n	8002954 <moveNode+0x54>
	case DERECHA:
		// if (visual.x != ANCHO - 1) {
		actual.x++;
 800293c:	4b08      	ldr	r3, [pc, #32]	; (8002960 <moveNode+0x60>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	3301      	adds	r3, #1
 8002942:	4a07      	ldr	r2, [pc, #28]	; (8002960 <moveNode+0x60>)
 8002944:	6013      	str	r3, [r2, #0]
		// visual.x++;
		// }
		break;
 8002946:	e005      	b.n	8002954 <moveNode+0x54>
	case ATRAS:
		// if (visual.y != 0) {
		actual.y--;
 8002948:	4b05      	ldr	r3, [pc, #20]	; (8002960 <moveNode+0x60>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	3b01      	subs	r3, #1
 800294e:	4a04      	ldr	r2, [pc, #16]	; (8002960 <moveNode+0x60>)
 8002950:	6053      	str	r3, [r2, #4]
		// visual.y--;
		// }

		break;
 8002952:	bf00      	nop
	}
}
 8002954:	bf00      	nop
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	bc80      	pop	{r7}
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	20001264 	.word	0x20001264

08002964 <movementMachine>:
void movementMachine(int move) {
 8002964:	b590      	push	{r4, r7, lr}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
	switch (movementState) {
 800296c:	4bad      	ldr	r3, [pc, #692]	; (8002c24 <movementMachine+0x2c0>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2b05      	cmp	r3, #5
 8002972:	f200 8152 	bhi.w	8002c1a <movementMachine+0x2b6>
 8002976:	a201      	add	r2, pc, #4	; (adr r2, 800297c <movementMachine+0x18>)
 8002978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800297c:	080029c1 	.word	0x080029c1
 8002980:	08002a79 	.word	0x08002a79
 8002984:	08002b8d 	.word	0x08002b8d
 8002988:	08002b03 	.word	0x08002b03
 800298c:	08002c1b 	.word	0x08002c1b
 8002990:	08002995 	.word	0x08002995
	case OFF:
		runMotor(OFF, MOTOR_A);
 8002994:	2100      	movs	r1, #0
 8002996:	2005      	movs	r0, #5
 8002998:	f000 fc2c 	bl	80031f4 <runMotor>
		runMotor(OFF, MOTOR_B);
 800299c:	2101      	movs	r1, #1
 800299e:	2005      	movs	r0, #5
 80029a0:	f000 fc28 	bl	80031f4 <runMotor>
		if (move != OFF) {
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2b05      	cmp	r3, #5
 80029a8:	f000 8136 	beq.w	8002c18 <movementMachine+0x2b4>
			movementState = move;
 80029ac:	4a9d      	ldr	r2, [pc, #628]	; (8002c24 <movementMachine+0x2c0>)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6013      	str	r3, [r2, #0]
			TIM3->CNT = 0;
 80029b2:	4b9d      	ldr	r3, [pc, #628]	; (8002c28 <movementMachine+0x2c4>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	625a      	str	r2, [r3, #36]	; 0x24
			TIM4->CNT = 0;
 80029b8:	4b9c      	ldr	r3, [pc, #624]	; (8002c2c <movementMachine+0x2c8>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	625a      	str	r2, [r3, #36]	; 0x24
		}
		break;
 80029be:	e12b      	b.n	8002c18 <movementMachine+0x2b4>
	case ADELANTE:
		tick = HAL_GetTick();
 80029c0:	f001 f8f2 	bl	8003ba8 <HAL_GetTick>
 80029c4:	4603      	mov	r3, r0
 80029c6:	461a      	mov	r2, r3
 80029c8:	4b99      	ldr	r3, [pc, #612]	; (8002c30 <movementMachine+0x2cc>)
 80029ca:	601a      	str	r2, [r3, #0]
		intUartSend(tick);
 80029cc:	4b98      	ldr	r3, [pc, #608]	; (8002c30 <movementMachine+0x2cc>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7fe fdad 	bl	8001530 <intUartSend>
		if (calcularDistancia((TIM3->CNT) >> 1) < forwardChoice[choice]
 80029d6:	4b94      	ldr	r3, [pc, #592]	; (8002c28 <movementMachine+0x2c4>)
 80029d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029da:	085b      	lsrs	r3, r3, #1
 80029dc:	4618      	mov	r0, r3
 80029de:	f000 fbe3 	bl	80031a8 <calcularDistancia>
 80029e2:	4604      	mov	r4, r0
 80029e4:	4b93      	ldr	r3, [pc, #588]	; (8002c34 <movementMachine+0x2d0>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a93      	ldr	r2, [pc, #588]	; (8002c38 <movementMachine+0x2d4>)
 80029ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7fe f924 	bl	8000c3c <__aeabi_i2f>
 80029f4:	4603      	mov	r3, r0
 80029f6:	4619      	mov	r1, r3
 80029f8:	4620      	mov	r0, r4
 80029fa:	f7fe fb11 	bl	8001020 <__aeabi_fcmplt>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d116      	bne.n	8002a32 <movementMachine+0xce>
				|| calcularDistancia((TIM4->CNT) >> 1)
 8002a04:	4b89      	ldr	r3, [pc, #548]	; (8002c2c <movementMachine+0x2c8>)
 8002a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a08:	085b      	lsrs	r3, r3, #1
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f000 fbcc 	bl	80031a8 <calcularDistancia>
 8002a10:	4604      	mov	r4, r0
						< forwardChoice[choice]) {
 8002a12:	4b88      	ldr	r3, [pc, #544]	; (8002c34 <movementMachine+0x2d0>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a88      	ldr	r2, [pc, #544]	; (8002c38 <movementMachine+0x2d4>)
 8002a18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7fe f90d 	bl	8000c3c <__aeabi_i2f>
 8002a22:	4603      	mov	r3, r0
				|| calcularDistancia((TIM4->CNT) >> 1)
 8002a24:	4619      	mov	r1, r3
 8002a26:	4620      	mov	r0, r4
 8002a28:	f7fe fafa 	bl	8001020 <__aeabi_fcmplt>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d00a      	beq.n	8002a48 <movementMachine+0xe4>
			moveStraight();
 8002a32:	f000 fa85 	bl	8002f40 <moveStraight>
			runMotor(ADELANTE, MOTOR_A);
 8002a36:	2100      	movs	r1, #0
 8002a38:	2000      	movs	r0, #0
 8002a3a:	f000 fbdb 	bl	80031f4 <runMotor>
			runMotor(ADELANTE, MOTOR_B);
 8002a3e:	2101      	movs	r1, #1
 8002a40:	2000      	movs	r0, #0
 8002a42:	f000 fbd7 	bl	80031f4 <runMotor>
			runMotor(OFF, MOTOR_B);
			TIM3->CNT = 0;
			TIM4->CNT = 0;
			offset = 0;
		}
		break;
 8002a46:	e0e8      	b.n	8002c1a <movementMachine+0x2b6>
			movimientoFlag = 1;
 8002a48:	4b7c      	ldr	r3, [pc, #496]	; (8002c3c <movementMachine+0x2d8>)
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	601a      	str	r2, [r3, #0]
			movementState = OFF;
 8002a4e:	4b75      	ldr	r3, [pc, #468]	; (8002c24 <movementMachine+0x2c0>)
 8002a50:	2205      	movs	r2, #5
 8002a52:	601a      	str	r2, [r3, #0]
			runMotor(OFF, MOTOR_A);
 8002a54:	2100      	movs	r1, #0
 8002a56:	2005      	movs	r0, #5
 8002a58:	f000 fbcc 	bl	80031f4 <runMotor>
			runMotor(OFF, MOTOR_B);
 8002a5c:	2101      	movs	r1, #1
 8002a5e:	2005      	movs	r0, #5
 8002a60:	f000 fbc8 	bl	80031f4 <runMotor>
			TIM3->CNT = 0;
 8002a64:	4b70      	ldr	r3, [pc, #448]	; (8002c28 <movementMachine+0x2c4>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	625a      	str	r2, [r3, #36]	; 0x24
			TIM4->CNT = 0;
 8002a6a:	4b70      	ldr	r3, [pc, #448]	; (8002c2c <movementMachine+0x2c8>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	625a      	str	r2, [r3, #36]	; 0x24
			offset = 0;
 8002a70:	4b73      	ldr	r3, [pc, #460]	; (8002c40 <movementMachine+0x2dc>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	601a      	str	r2, [r3, #0]
		break;
 8002a76:	e0d0      	b.n	8002c1a <movementMachine+0x2b6>
	case IZQUIERDA:
		TIM2->CCR3 = baseChoice[choice];
 8002a78:	4b6e      	ldr	r3, [pc, #440]	; (8002c34 <movementMachine+0x2d0>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a71      	ldr	r2, [pc, #452]	; (8002c44 <movementMachine+0x2e0>)
 8002a7e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002a82:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a86:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM2->CCR4 = baseChoice[choice];
 8002a88:	4b6a      	ldr	r3, [pc, #424]	; (8002c34 <movementMachine+0x2d0>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a6d      	ldr	r2, [pc, #436]	; (8002c44 <movementMachine+0x2e0>)
 8002a8e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002a92:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a96:	641a      	str	r2, [r3, #64]	; 0x40
		if (calcularDistancia((TIM3->CNT) >> 1) < LeftChoice[choice]) {
 8002a98:	4b63      	ldr	r3, [pc, #396]	; (8002c28 <movementMachine+0x2c4>)
 8002a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9c:	085b      	lsrs	r3, r3, #1
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f000 fb82 	bl	80031a8 <calcularDistancia>
 8002aa4:	4604      	mov	r4, r0
 8002aa6:	4b63      	ldr	r3, [pc, #396]	; (8002c34 <movementMachine+0x2d0>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a67      	ldr	r2, [pc, #412]	; (8002c48 <movementMachine+0x2e4>)
 8002aac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7fe f8c3 	bl	8000c3c <__aeabi_i2f>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	4619      	mov	r1, r3
 8002aba:	4620      	mov	r0, r4
 8002abc:	f7fe fab0 	bl	8001020 <__aeabi_fcmplt>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d008      	beq.n	8002ad8 <movementMachine+0x174>
			runMotor(ATRAS, MOTOR_A);
 8002ac6:	2100      	movs	r1, #0
 8002ac8:	2002      	movs	r0, #2
 8002aca:	f000 fb93 	bl	80031f4 <runMotor>
			runMotor(ADELANTE, MOTOR_B);
 8002ace:	2101      	movs	r1, #1
 8002ad0:	2000      	movs	r0, #0
 8002ad2:	f000 fb8f 	bl	80031f4 <runMotor>
			runMotor(OFF, MOTOR_B);
			TIM3->CNT = 0;
			TIM4->CNT = 0;
			offset = 30;
		}
		break;
 8002ad6:	e0a0      	b.n	8002c1a <movementMachine+0x2b6>
			movementState = ADELANTE;
 8002ad8:	4b52      	ldr	r3, [pc, #328]	; (8002c24 <movementMachine+0x2c0>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	601a      	str	r2, [r3, #0]
			runMotor(OFF, MOTOR_A);
 8002ade:	2100      	movs	r1, #0
 8002ae0:	2005      	movs	r0, #5
 8002ae2:	f000 fb87 	bl	80031f4 <runMotor>
			runMotor(OFF, MOTOR_B);
 8002ae6:	2101      	movs	r1, #1
 8002ae8:	2005      	movs	r0, #5
 8002aea:	f000 fb83 	bl	80031f4 <runMotor>
			TIM3->CNT = 0;
 8002aee:	4b4e      	ldr	r3, [pc, #312]	; (8002c28 <movementMachine+0x2c4>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	625a      	str	r2, [r3, #36]	; 0x24
			TIM4->CNT = 0;
 8002af4:	4b4d      	ldr	r3, [pc, #308]	; (8002c2c <movementMachine+0x2c8>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	625a      	str	r2, [r3, #36]	; 0x24
			offset = 30;
 8002afa:	4b51      	ldr	r3, [pc, #324]	; (8002c40 <movementMachine+0x2dc>)
 8002afc:	221e      	movs	r2, #30
 8002afe:	601a      	str	r2, [r3, #0]
		break;
 8002b00:	e08b      	b.n	8002c1a <movementMachine+0x2b6>
	case DERECHA:
		TIM2->CCR3 = baseChoice[choice];
 8002b02:	4b4c      	ldr	r3, [pc, #304]	; (8002c34 <movementMachine+0x2d0>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a4f      	ldr	r2, [pc, #316]	; (8002c44 <movementMachine+0x2e0>)
 8002b08:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002b0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b10:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM2->CCR4 = baseChoice[choice];
 8002b12:	4b48      	ldr	r3, [pc, #288]	; (8002c34 <movementMachine+0x2d0>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a4b      	ldr	r2, [pc, #300]	; (8002c44 <movementMachine+0x2e0>)
 8002b18:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002b1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b20:	641a      	str	r2, [r3, #64]	; 0x40
		if (calcularDistancia((TIM4->CNT) >> 1) < RightChoice[choice]) {
 8002b22:	4b42      	ldr	r3, [pc, #264]	; (8002c2c <movementMachine+0x2c8>)
 8002b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b26:	085b      	lsrs	r3, r3, #1
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f000 fb3d 	bl	80031a8 <calcularDistancia>
 8002b2e:	4604      	mov	r4, r0
 8002b30:	4b40      	ldr	r3, [pc, #256]	; (8002c34 <movementMachine+0x2d0>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a45      	ldr	r2, [pc, #276]	; (8002c4c <movementMachine+0x2e8>)
 8002b36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7fe f87e 	bl	8000c3c <__aeabi_i2f>
 8002b40:	4603      	mov	r3, r0
 8002b42:	4619      	mov	r1, r3
 8002b44:	4620      	mov	r0, r4
 8002b46:	f7fe fa6b 	bl	8001020 <__aeabi_fcmplt>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d008      	beq.n	8002b62 <movementMachine+0x1fe>
			runMotor(ADELANTE, MOTOR_A);
 8002b50:	2100      	movs	r1, #0
 8002b52:	2000      	movs	r0, #0
 8002b54:	f000 fb4e 	bl	80031f4 <runMotor>
			runMotor(ATRAS, MOTOR_B);
 8002b58:	2101      	movs	r1, #1
 8002b5a:	2002      	movs	r0, #2
 8002b5c:	f000 fb4a 	bl	80031f4 <runMotor>
			runMotor(OFF, MOTOR_B);
			TIM3->CNT = 0;
			TIM4->CNT = 0;
			offset = 30;
		}
		break;
 8002b60:	e05b      	b.n	8002c1a <movementMachine+0x2b6>
			movementState = ADELANTE;
 8002b62:	4b30      	ldr	r3, [pc, #192]	; (8002c24 <movementMachine+0x2c0>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	601a      	str	r2, [r3, #0]
			runMotor(OFF, MOTOR_A);
 8002b68:	2100      	movs	r1, #0
 8002b6a:	2005      	movs	r0, #5
 8002b6c:	f000 fb42 	bl	80031f4 <runMotor>
			runMotor(OFF, MOTOR_B);
 8002b70:	2101      	movs	r1, #1
 8002b72:	2005      	movs	r0, #5
 8002b74:	f000 fb3e 	bl	80031f4 <runMotor>
			TIM3->CNT = 0;
 8002b78:	4b2b      	ldr	r3, [pc, #172]	; (8002c28 <movementMachine+0x2c4>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	625a      	str	r2, [r3, #36]	; 0x24
			TIM4->CNT = 0;
 8002b7e:	4b2b      	ldr	r3, [pc, #172]	; (8002c2c <movementMachine+0x2c8>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	625a      	str	r2, [r3, #36]	; 0x24
			offset = 30;
 8002b84:	4b2e      	ldr	r3, [pc, #184]	; (8002c40 <movementMachine+0x2dc>)
 8002b86:	221e      	movs	r2, #30
 8002b88:	601a      	str	r2, [r3, #0]
		break;
 8002b8a:	e046      	b.n	8002c1a <movementMachine+0x2b6>
	case ATRAS:
		TIM2->CCR3 = baseChoice[choice];
 8002b8c:	4b29      	ldr	r3, [pc, #164]	; (8002c34 <movementMachine+0x2d0>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a2c      	ldr	r2, [pc, #176]	; (8002c44 <movementMachine+0x2e0>)
 8002b92:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002b96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b9a:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM2->CCR4 = baseChoice[choice];
 8002b9c:	4b25      	ldr	r3, [pc, #148]	; (8002c34 <movementMachine+0x2d0>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a28      	ldr	r2, [pc, #160]	; (8002c44 <movementMachine+0x2e0>)
 8002ba2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002ba6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002baa:	641a      	str	r2, [r3, #64]	; 0x40
		if (calcularDistancia((TIM4->CNT) >> 1) < RightChoice[choice] * 2) {
 8002bac:	4b1f      	ldr	r3, [pc, #124]	; (8002c2c <movementMachine+0x2c8>)
 8002bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb0:	085b      	lsrs	r3, r3, #1
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f000 faf8 	bl	80031a8 <calcularDistancia>
 8002bb8:	4604      	mov	r4, r0
 8002bba:	4b1e      	ldr	r3, [pc, #120]	; (8002c34 <movementMachine+0x2d0>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a23      	ldr	r2, [pc, #140]	; (8002c4c <movementMachine+0x2e8>)
 8002bc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7fe f838 	bl	8000c3c <__aeabi_i2f>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	4619      	mov	r1, r3
 8002bd0:	4620      	mov	r0, r4
 8002bd2:	f7fe fa25 	bl	8001020 <__aeabi_fcmplt>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d008      	beq.n	8002bee <movementMachine+0x28a>
			runMotor(ADELANTE, MOTOR_A);
 8002bdc:	2100      	movs	r1, #0
 8002bde:	2000      	movs	r0, #0
 8002be0:	f000 fb08 	bl	80031f4 <runMotor>
			runMotor(ATRAS, MOTOR_B);
 8002be4:	2101      	movs	r1, #1
 8002be6:	2002      	movs	r0, #2
 8002be8:	f000 fb04 	bl	80031f4 <runMotor>
				runMotor(OFF, MOTOR_B);
				TIM3->CNT = 0;
				TIM4->CNT = 0;
				offset = 30;
			}
		break;
 8002bec:	e015      	b.n	8002c1a <movementMachine+0x2b6>
				movementState = ADELANTE;
 8002bee:	4b0d      	ldr	r3, [pc, #52]	; (8002c24 <movementMachine+0x2c0>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	601a      	str	r2, [r3, #0]
				runMotor(OFF, MOTOR_A);
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	2005      	movs	r0, #5
 8002bf8:	f000 fafc 	bl	80031f4 <runMotor>
				runMotor(OFF, MOTOR_B);
 8002bfc:	2101      	movs	r1, #1
 8002bfe:	2005      	movs	r0, #5
 8002c00:	f000 faf8 	bl	80031f4 <runMotor>
				TIM3->CNT = 0;
 8002c04:	4b08      	ldr	r3, [pc, #32]	; (8002c28 <movementMachine+0x2c4>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	625a      	str	r2, [r3, #36]	; 0x24
				TIM4->CNT = 0;
 8002c0a:	4b08      	ldr	r3, [pc, #32]	; (8002c2c <movementMachine+0x2c8>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	625a      	str	r2, [r3, #36]	; 0x24
				offset = 30;
 8002c10:	4b0b      	ldr	r3, [pc, #44]	; (8002c40 <movementMachine+0x2dc>)
 8002c12:	221e      	movs	r2, #30
 8002c14:	601a      	str	r2, [r3, #0]
		break;
 8002c16:	e000      	b.n	8002c1a <movementMachine+0x2b6>
		break;
 8002c18:	bf00      	nop
		 movimientoFlag = 1;
		 movementState = OFF;
		 }
		 break;*/
	}
}
 8002c1a:	bf00      	nop
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd90      	pop	{r4, r7, pc}
 8002c22:	bf00      	nop
 8002c24:	20000038 	.word	0x20000038
 8002c28:	40000400 	.word	0x40000400
 8002c2c:	40000800 	.word	0x40000800
 8002c30:	2000123c 	.word	0x2000123c
 8002c34:	20001218 	.word	0x20001218
 8002c38:	20000020 	.word	0x20000020
 8002c3c:	2000122c 	.word	0x2000122c
 8002c40:	20001234 	.word	0x20001234
 8002c44:	20000018 	.word	0x20000018
 8002c48:	20000030 	.word	0x20000030
 8002c4c:	20000028 	.word	0x20000028

08002c50 <CreateNode>:

void CreateNode(int x, int y) {
 8002c50:	b5b0      	push	{r4, r5, r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6039      	str	r1, [r7, #0]
	Map[x][y].Lados[direcciones[ADELANTE]] = lecturaSensor(ADELANTE, Sensors);
 8002c5a:	4936      	ldr	r1, [pc, #216]	; (8002d34 <CreateNode+0xe4>)
 8002c5c:	2000      	movs	r0, #0
 8002c5e:	f000 fb4f 	bl	8003300 <lecturaSensor>
 8002c62:	4603      	mov	r3, r0
 8002c64:	4a34      	ldr	r2, [pc, #208]	; (8002d38 <CreateNode+0xe8>)
 8002c66:	6814      	ldr	r4, [r2, #0]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7fe fa01 	bl	8001070 <__aeabi_f2iz>
 8002c6e:	4d33      	ldr	r5, [pc, #204]	; (8002d3c <CreateNode+0xec>)
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	6879      	ldr	r1, [r7, #4]
 8002c74:	461a      	mov	r2, r3
 8002c76:	0052      	lsls	r2, r2, #1
 8002c78:	441a      	add	r2, r3
 8002c7a:	0053      	lsls	r3, r2, #1
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	460b      	mov	r3, r1
 8002c80:	005b      	lsls	r3, r3, #1
 8002c82:	440b      	add	r3, r1
 8002c84:	015b      	lsls	r3, r3, #5
 8002c86:	4413      	add	r3, r2
 8002c88:	4423      	add	r3, r4
 8002c8a:	f845 0023 	str.w	r0, [r5, r3, lsl #2]
	Map[x][y].Lados[direcciones[IZQUIERDA]] = lecturaSensor(IZQUIERDA, Sensors);
 8002c8e:	4929      	ldr	r1, [pc, #164]	; (8002d34 <CreateNode+0xe4>)
 8002c90:	2001      	movs	r0, #1
 8002c92:	f000 fb35 	bl	8003300 <lecturaSensor>
 8002c96:	4603      	mov	r3, r0
 8002c98:	4a27      	ldr	r2, [pc, #156]	; (8002d38 <CreateNode+0xe8>)
 8002c9a:	6854      	ldr	r4, [r2, #4]
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7fe f9e7 	bl	8001070 <__aeabi_f2iz>
 8002ca2:	4d26      	ldr	r5, [pc, #152]	; (8002d3c <CreateNode+0xec>)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	6879      	ldr	r1, [r7, #4]
 8002ca8:	461a      	mov	r2, r3
 8002caa:	0052      	lsls	r2, r2, #1
 8002cac:	441a      	add	r2, r3
 8002cae:	0053      	lsls	r3, r2, #1
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	460b      	mov	r3, r1
 8002cb4:	005b      	lsls	r3, r3, #1
 8002cb6:	440b      	add	r3, r1
 8002cb8:	015b      	lsls	r3, r3, #5
 8002cba:	4413      	add	r3, r2
 8002cbc:	4423      	add	r3, r4
 8002cbe:	f845 0023 	str.w	r0, [r5, r3, lsl #2]
	Map[x][y].Lados[direcciones[DERECHA]] = lecturaSensor(DERECHA, Sensors);
 8002cc2:	491c      	ldr	r1, [pc, #112]	; (8002d34 <CreateNode+0xe4>)
 8002cc4:	2003      	movs	r0, #3
 8002cc6:	f000 fb1b 	bl	8003300 <lecturaSensor>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	4a1a      	ldr	r2, [pc, #104]	; (8002d38 <CreateNode+0xe8>)
 8002cce:	68d4      	ldr	r4, [r2, #12]
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7fe f9cd 	bl	8001070 <__aeabi_f2iz>
 8002cd6:	4d19      	ldr	r5, [pc, #100]	; (8002d3c <CreateNode+0xec>)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	6879      	ldr	r1, [r7, #4]
 8002cdc:	461a      	mov	r2, r3
 8002cde:	0052      	lsls	r2, r2, #1
 8002ce0:	441a      	add	r2, r3
 8002ce2:	0053      	lsls	r3, r2, #1
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	460b      	mov	r3, r1
 8002ce8:	005b      	lsls	r3, r3, #1
 8002cea:	440b      	add	r3, r1
 8002cec:	015b      	lsls	r3, r3, #5
 8002cee:	4413      	add	r3, r2
 8002cf0:	4423      	add	r3, r4
 8002cf2:	f845 0023 	str.w	r0, [r5, r3, lsl #2]
	Map[x][y].Lados[direcciones[ATRAS]] = lecturaSensor(ATRAS, Sensors);
 8002cf6:	490f      	ldr	r1, [pc, #60]	; (8002d34 <CreateNode+0xe4>)
 8002cf8:	2002      	movs	r0, #2
 8002cfa:	f000 fb01 	bl	8003300 <lecturaSensor>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	4a0d      	ldr	r2, [pc, #52]	; (8002d38 <CreateNode+0xe8>)
 8002d02:	6894      	ldr	r4, [r2, #8]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7fe f9b3 	bl	8001070 <__aeabi_f2iz>
 8002d0a:	4d0c      	ldr	r5, [pc, #48]	; (8002d3c <CreateNode+0xec>)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	6879      	ldr	r1, [r7, #4]
 8002d10:	461a      	mov	r2, r3
 8002d12:	0052      	lsls	r2, r2, #1
 8002d14:	441a      	add	r2, r3
 8002d16:	0053      	lsls	r3, r2, #1
 8002d18:	461a      	mov	r2, r3
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	440b      	add	r3, r1
 8002d20:	015b      	lsls	r3, r3, #5
 8002d22:	4413      	add	r3, r2
 8002d24:	4423      	add	r3, r4
 8002d26:	f845 0023 	str.w	r0, [r5, r3, lsl #2]

}
 8002d2a:	bf00      	nop
 8002d2c:	3708      	adds	r7, #8
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bdb0      	pop	{r4, r5, r7, pc}
 8002d32:	bf00      	nop
 8002d34:	200011dc 	.word	0x200011dc
 8002d38:	200011ec 	.word	0x200011ec
 8002d3c:	20001274 	.word	0x20001274

08002d40 <rotateAxis>:

void rotateAxis(int direccion) {
 8002d40:	b480      	push	{r7}
 8002d42:	b085      	sub	sp, #20
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
	switch (direccion) {
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d021      	beq.n	8002d92 <rotateAxis+0x52>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2b03      	cmp	r3, #3
 8002d52:	d13c      	bne.n	8002dce <rotateAxis+0x8e>
	case DERECHA:
		for (int i = 0; i < 4; i++) {
 8002d54:	2300      	movs	r3, #0
 8002d56:	60fb      	str	r3, [r7, #12]
 8002d58:	e017      	b.n	8002d8a <rotateAxis+0x4a>
			direcciones[i] = direcciones[i] - 1;
 8002d5a:	4a1f      	ldr	r2, [pc, #124]	; (8002dd8 <rotateAxis+0x98>)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d62:	1e5a      	subs	r2, r3, #1
 8002d64:	491c      	ldr	r1, [pc, #112]	; (8002dd8 <rotateAxis+0x98>)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (direcciones[i] == -1) {
 8002d6c:	4a1a      	ldr	r2, [pc, #104]	; (8002dd8 <rotateAxis+0x98>)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d78:	d104      	bne.n	8002d84 <rotateAxis+0x44>
				direcciones[i] = 3;
 8002d7a:	4a17      	ldr	r2, [pc, #92]	; (8002dd8 <rotateAxis+0x98>)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2103      	movs	r1, #3
 8002d80:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int i = 0; i < 4; i++) {
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	3301      	adds	r3, #1
 8002d88:	60fb      	str	r3, [r7, #12]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2b03      	cmp	r3, #3
 8002d8e:	dde4      	ble.n	8002d5a <rotateAxis+0x1a>
			}
		}
		break;
 8002d90:	e01d      	b.n	8002dce <rotateAxis+0x8e>
	case IZQUIERDA:
		for (int j = 0; j < 4; j++) {
 8002d92:	2300      	movs	r3, #0
 8002d94:	60bb      	str	r3, [r7, #8]
 8002d96:	e016      	b.n	8002dc6 <rotateAxis+0x86>
			direcciones[j] = direcciones[j] + 1;
 8002d98:	4a0f      	ldr	r2, [pc, #60]	; (8002dd8 <rotateAxis+0x98>)
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002da0:	1c5a      	adds	r2, r3, #1
 8002da2:	490d      	ldr	r1, [pc, #52]	; (8002dd8 <rotateAxis+0x98>)
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (direcciones[j] == 4) {
 8002daa:	4a0b      	ldr	r2, [pc, #44]	; (8002dd8 <rotateAxis+0x98>)
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002db2:	2b04      	cmp	r3, #4
 8002db4:	d104      	bne.n	8002dc0 <rotateAxis+0x80>
				direcciones[j] = 0;
 8002db6:	4a08      	ldr	r2, [pc, #32]	; (8002dd8 <rotateAxis+0x98>)
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	2100      	movs	r1, #0
 8002dbc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int j = 0; j < 4; j++) {
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	60bb      	str	r3, [r7, #8]
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	2b03      	cmp	r3, #3
 8002dca:	dde5      	ble.n	8002d98 <rotateAxis+0x58>
			}
		}
		break;
 8002dcc:	bf00      	nop
	}
}
 8002dce:	bf00      	nop
 8002dd0:	3714      	adds	r7, #20
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bc80      	pop	{r7}
 8002dd6:	4770      	bx	lr
 8002dd8:	200011ec 	.word	0x200011ec

08002ddc <resetAxis>:

void resetAxis() {
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
	for (int i = 0; i < 4; i++) {
 8002de2:	2300      	movs	r3, #0
 8002de4:	607b      	str	r3, [r7, #4]
 8002de6:	e007      	b.n	8002df8 <resetAxis+0x1c>
		direcciones[i] = i;
 8002de8:	4908      	ldr	r1, [pc, #32]	; (8002e0c <resetAxis+0x30>)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < 4; i++) {
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	3301      	adds	r3, #1
 8002df6:	607b      	str	r3, [r7, #4]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2b03      	cmp	r3, #3
 8002dfc:	ddf4      	ble.n	8002de8 <resetAxis+0xc>
	}
}
 8002dfe:	bf00      	nop
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bc80      	pop	{r7}
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop
 8002e0c:	200011ec 	.word	0x200011ec

08002e10 <HAL_ADC_ConvCpltCallback>:
		//SerialBT.println();
	}
}

// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 10; i++) {
 8002e18:	2300      	movs	r3, #0
 8002e1a:	60fb      	str	r3, [r7, #12]
 8002e1c:	e029      	b.n	8002e72 <HAL_ADC_ConvCpltCallback+0x62>
		CNY70[i] = adc_buf[i * 4];
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	4a27      	ldr	r2, [pc, #156]	; (8002ec0 <HAL_ADC_ConvCpltCallback+0xb0>)
 8002e24:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002e28:	4926      	ldr	r1, [pc, #152]	; (8002ec4 <HAL_ADC_ConvCpltCallback+0xb4>)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SHARP_1[i] = adc_buf[i * 4 + 1];
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	3301      	adds	r3, #1
 8002e36:	4a22      	ldr	r2, [pc, #136]	; (8002ec0 <HAL_ADC_ConvCpltCallback+0xb0>)
 8002e38:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002e3c:	4922      	ldr	r1, [pc, #136]	; (8002ec8 <HAL_ADC_ConvCpltCallback+0xb8>)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SHARP_2[i] = adc_buf[i * 4 + 2];
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	3302      	adds	r3, #2
 8002e4a:	4a1d      	ldr	r2, [pc, #116]	; (8002ec0 <HAL_ADC_ConvCpltCallback+0xb0>)
 8002e4c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002e50:	491e      	ldr	r1, [pc, #120]	; (8002ecc <HAL_ADC_ConvCpltCallback+0xbc>)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SHARP_3[i] = adc_buf[i * 4 + 3];
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	3303      	adds	r3, #3
 8002e5e:	4a18      	ldr	r2, [pc, #96]	; (8002ec0 <HAL_ADC_ConvCpltCallback+0xb0>)
 8002e60:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002e64:	491a      	ldr	r1, [pc, #104]	; (8002ed0 <HAL_ADC_ConvCpltCallback+0xc0>)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < 10; i++) {
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	3301      	adds	r3, #1
 8002e70:	60fb      	str	r3, [r7, #12]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2b09      	cmp	r3, #9
 8002e76:	ddd2      	ble.n	8002e1e <HAL_ADC_ConvCpltCallback+0xe>
	}
	Sensors[0] = lecturaCNY70(10, CNY70);
 8002e78:	4912      	ldr	r1, [pc, #72]	; (8002ec4 <HAL_ADC_ConvCpltCallback+0xb4>)
 8002e7a:	200a      	movs	r0, #10
 8002e7c:	f000 fb14 	bl	80034a8 <lecturaCNY70>
 8002e80:	4603      	mov	r3, r0
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7fd feda 	bl	8000c3c <__aeabi_i2f>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	4a12      	ldr	r2, [pc, #72]	; (8002ed4 <HAL_ADC_ConvCpltCallback+0xc4>)
 8002e8c:	6013      	str	r3, [r2, #0]
	Sensors[1] = lecSensor(10, SHARP_1);
 8002e8e:	490e      	ldr	r1, [pc, #56]	; (8002ec8 <HAL_ADC_ConvCpltCallback+0xb8>)
 8002e90:	200a      	movs	r0, #10
 8002e92:	f000 fa89 	bl	80033a8 <lecSensor>
 8002e96:	4603      	mov	r3, r0
 8002e98:	4a0e      	ldr	r2, [pc, #56]	; (8002ed4 <HAL_ADC_ConvCpltCallback+0xc4>)
 8002e9a:	6053      	str	r3, [r2, #4]
	Sensors[2] = lecSensor(10, SHARP_2);
 8002e9c:	490b      	ldr	r1, [pc, #44]	; (8002ecc <HAL_ADC_ConvCpltCallback+0xbc>)
 8002e9e:	200a      	movs	r0, #10
 8002ea0:	f000 fa82 	bl	80033a8 <lecSensor>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	4a0b      	ldr	r2, [pc, #44]	; (8002ed4 <HAL_ADC_ConvCpltCallback+0xc4>)
 8002ea8:	6093      	str	r3, [r2, #8]
	Sensors[3] = lecSensor(10, SHARP_3);
 8002eaa:	4909      	ldr	r1, [pc, #36]	; (8002ed0 <HAL_ADC_ConvCpltCallback+0xc0>)
 8002eac:	200a      	movs	r0, #10
 8002eae:	f000 fa7b 	bl	80033a8 <lecSensor>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	4a07      	ldr	r2, [pc, #28]	; (8002ed4 <HAL_ADC_ConvCpltCallback+0xc4>)
 8002eb6:	60d3      	str	r3, [r2, #12]

}
 8002eb8:	bf00      	nop
 8002eba:	3710      	adds	r7, #16
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	2000013c 	.word	0x2000013c
 8002ec4:	2000113c 	.word	0x2000113c
 8002ec8:	20001164 	.word	0x20001164
 8002ecc:	2000118c 	.word	0x2000118c
 8002ed0:	200011b4 	.word	0x200011b4
 8002ed4:	200011dc 	.word	0x200011dc

08002ed8 <MAP>:

uint32_t MAP(uint32_t au32_IN, uint32_t au32_INmin, uint32_t au32_INmax,
		uint32_t au32_OUTmin, uint32_t au32_OUTmax) {
 8002ed8:	b480      	push	{r7}
 8002eda:	b085      	sub	sp, #20
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	607a      	str	r2, [r7, #4]
 8002ee4:	603b      	str	r3, [r7, #0]
	return ((((au32_IN - au32_INmin) * (au32_OUTmax - au32_OUTmin))
 8002ee6:	68fa      	ldr	r2, [r7, #12]
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	69b9      	ldr	r1, [r7, #24]
 8002eee:	683a      	ldr	r2, [r7, #0]
 8002ef0:	1a8a      	subs	r2, r1, r2
 8002ef2:	fb03 f202 	mul.w	r2, r3, r2
			/ (au32_INmax - au32_INmin)) + au32_OUTmin);
 8002ef6:	6879      	ldr	r1, [r7, #4]
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	1acb      	subs	r3, r1, r3
 8002efc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	4413      	add	r3, r2
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3714      	adds	r7, #20
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bc80      	pop	{r7}
 8002f0c:	4770      	bx	lr

08002f0e <constrain>:

int constrain(int x, int a, int b) {
 8002f0e:	b480      	push	{r7}
 8002f10:	b085      	sub	sp, #20
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	60f8      	str	r0, [r7, #12]
 8002f16:	60b9      	str	r1, [r7, #8]
 8002f18:	607a      	str	r2, [r7, #4]
	if (x < a) {
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	da01      	bge.n	8002f26 <constrain+0x18>
		return a;
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	e006      	b.n	8002f34 <constrain+0x26>
	} else if (b < x) {
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	da01      	bge.n	8002f32 <constrain+0x24>
		return b;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	e000      	b.n	8002f34 <constrain+0x26>
	} else
		return x;
 8002f32:	68fb      	ldr	r3, [r7, #12]
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3714      	adds	r7, #20
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bc80      	pop	{r7}
 8002f3c:	4770      	bx	lr
	...

08002f40 <moveStraight>:

void moveStraight() {
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af02      	add	r7, sp, #8
	if (Sensors[3] < 22) {
 8002f46:	4b81      	ldr	r3, [pc, #516]	; (800314c <moveStraight+0x20c>)
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	4981      	ldr	r1, [pc, #516]	; (8003150 <moveStraight+0x210>)
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7fe f867 	bl	8001020 <__aeabi_fcmplt>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d009      	beq.n	8002f6c <moveStraight+0x2c>
		//intUartSend(0);
		error = Sensors[3] - 11;
 8002f58:	4b7c      	ldr	r3, [pc, #496]	; (800314c <moveStraight+0x20c>)
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	497d      	ldr	r1, [pc, #500]	; (8003154 <moveStraight+0x214>)
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7fd fdb6 	bl	8000ad0 <__aeabi_fsub>
 8002f64:	4603      	mov	r3, r0
 8002f66:	461a      	mov	r2, r3
 8002f68:	4b7b      	ldr	r3, [pc, #492]	; (8003158 <moveStraight+0x218>)
 8002f6a:	601a      	str	r2, [r3, #0]
	 } else {
	 //intUartSend(3);
	 error = 0;
	 }*/

	timePrev = timeNow;
 8002f6c:	4b7b      	ldr	r3, [pc, #492]	; (800315c <moveStraight+0x21c>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a7b      	ldr	r2, [pc, #492]	; (8003160 <moveStraight+0x220>)
 8002f72:	6013      	str	r3, [r2, #0]
	timeNow = HAL_GetTick();
 8002f74:	f000 fe18 	bl	8003ba8 <HAL_GetTick>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7fd fe5a 	bl	8000c34 <__aeabi_ui2f>
 8002f80:	4603      	mov	r3, r0
 8002f82:	4a76      	ldr	r2, [pc, #472]	; (800315c <moveStraight+0x21c>)
 8002f84:	6013      	str	r3, [r2, #0]
	elapsedTime = (timeNow - timePrev) / 1000;
 8002f86:	4b75      	ldr	r3, [pc, #468]	; (800315c <moveStraight+0x21c>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a75      	ldr	r2, [pc, #468]	; (8003160 <moveStraight+0x220>)
 8002f8c:	6812      	ldr	r2, [r2, #0]
 8002f8e:	4611      	mov	r1, r2
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7fd fd9d 	bl	8000ad0 <__aeabi_fsub>
 8002f96:	4603      	mov	r3, r0
 8002f98:	4972      	ldr	r1, [pc, #456]	; (8003164 <moveStraight+0x224>)
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7fd ff56 	bl	8000e4c <__aeabi_fdiv>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	4b70      	ldr	r3, [pc, #448]	; (8003168 <moveStraight+0x228>)
 8002fa6:	601a      	str	r2, [r3, #0]
	pidD = KD * ((error - previousError) / elapsedTime);
 8002fa8:	4b6b      	ldr	r3, [pc, #428]	; (8003158 <moveStraight+0x218>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a6f      	ldr	r2, [pc, #444]	; (800316c <moveStraight+0x22c>)
 8002fae:	6812      	ldr	r2, [r2, #0]
 8002fb0:	4611      	mov	r1, r2
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7fd fd8c 	bl	8000ad0 <__aeabi_fsub>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	461a      	mov	r2, r3
 8002fbc:	4b6a      	ldr	r3, [pc, #424]	; (8003168 <moveStraight+0x228>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	4610      	mov	r0, r2
 8002fc4:	f7fd ff42 	bl	8000e4c <__aeabi_fdiv>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	461a      	mov	r2, r3
 8002fcc:	4b68      	ldr	r3, [pc, #416]	; (8003170 <moveStraight+0x230>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	4610      	mov	r0, r2
 8002fd4:	f7fd fe86 	bl	8000ce4 <__aeabi_fmul>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	461a      	mov	r2, r3
 8002fdc:	4b65      	ldr	r3, [pc, #404]	; (8003174 <moveStraight+0x234>)
 8002fde:	601a      	str	r2, [r3, #0]
	pidP = KP * error;
 8002fe0:	4b65      	ldr	r3, [pc, #404]	; (8003178 <moveStraight+0x238>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a5c      	ldr	r2, [pc, #368]	; (8003158 <moveStraight+0x218>)
 8002fe6:	6812      	ldr	r2, [r2, #0]
 8002fe8:	4611      	mov	r1, r2
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7fd fe7a 	bl	8000ce4 <__aeabi_fmul>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	4b61      	ldr	r3, [pc, #388]	; (800317c <moveStraight+0x23c>)
 8002ff6:	601a      	str	r2, [r3, #0]
	pid = pidP + pidD;
 8002ff8:	4b60      	ldr	r3, [pc, #384]	; (800317c <moveStraight+0x23c>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a5d      	ldr	r2, [pc, #372]	; (8003174 <moveStraight+0x234>)
 8002ffe:	6812      	ldr	r2, [r2, #0]
 8003000:	4611      	mov	r1, r2
 8003002:	4618      	mov	r0, r3
 8003004:	f7fd fd66 	bl	8000ad4 <__addsf3>
 8003008:	4603      	mov	r3, r0
 800300a:	461a      	mov	r2, r3
 800300c:	4b5c      	ldr	r3, [pc, #368]	; (8003180 <moveStraight+0x240>)
 800300e:	601a      	str	r2, [r3, #0]
	if (pid > velocity) {
 8003010:	4b5b      	ldr	r3, [pc, #364]	; (8003180 <moveStraight+0x240>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a5b      	ldr	r2, [pc, #364]	; (8003184 <moveStraight+0x244>)
 8003016:	6812      	ldr	r2, [r2, #0]
 8003018:	4611      	mov	r1, r2
 800301a:	4618      	mov	r0, r3
 800301c:	f7fe f81e 	bl	800105c <__aeabi_fcmpgt>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d003      	beq.n	800302e <moveStraight+0xee>
		//intUartSend(1);
		pid = velocity;
 8003026:	4b57      	ldr	r3, [pc, #348]	; (8003184 <moveStraight+0x244>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a55      	ldr	r2, [pc, #340]	; (8003180 <moveStraight+0x240>)
 800302c:	6013      	str	r3, [r2, #0]
	}
	if (pid < -velocity) {
 800302e:	4b55      	ldr	r3, [pc, #340]	; (8003184 <moveStraight+0x244>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003036:	4a52      	ldr	r2, [pc, #328]	; (8003180 <moveStraight+0x240>)
 8003038:	6812      	ldr	r2, [r2, #0]
 800303a:	4611      	mov	r1, r2
 800303c:	4618      	mov	r0, r3
 800303e:	f7fe f80d 	bl	800105c <__aeabi_fcmpgt>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d005      	beq.n	8003054 <moveStraight+0x114>
		//intUartSend(0);
		pid = -velocity;
 8003048:	4b4e      	ldr	r3, [pc, #312]	; (8003184 <moveStraight+0x244>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003050:	4a4b      	ldr	r2, [pc, #300]	; (8003180 <moveStraight+0x240>)
 8003052:	6013      	str	r3, [r2, #0]
	}
	//intUartSend(abs(pid));
	motLeft = velocity - pid;
 8003054:	4b4b      	ldr	r3, [pc, #300]	; (8003184 <moveStraight+0x244>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a49      	ldr	r2, [pc, #292]	; (8003180 <moveStraight+0x240>)
 800305a:	6812      	ldr	r2, [r2, #0]
 800305c:	4611      	mov	r1, r2
 800305e:	4618      	mov	r0, r3
 8003060:	f7fd fd36 	bl	8000ad0 <__aeabi_fsub>
 8003064:	4603      	mov	r3, r0
 8003066:	4618      	mov	r0, r3
 8003068:	f7fe f802 	bl	8001070 <__aeabi_f2iz>
 800306c:	4603      	mov	r3, r0
 800306e:	4a46      	ldr	r2, [pc, #280]	; (8003188 <moveStraight+0x248>)
 8003070:	6013      	str	r3, [r2, #0]
	motRight = velocity + pid;
 8003072:	4b44      	ldr	r3, [pc, #272]	; (8003184 <moveStraight+0x244>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a42      	ldr	r2, [pc, #264]	; (8003180 <moveStraight+0x240>)
 8003078:	6812      	ldr	r2, [r2, #0]
 800307a:	4611      	mov	r1, r2
 800307c:	4618      	mov	r0, r3
 800307e:	f7fd fd29 	bl	8000ad4 <__addsf3>
 8003082:	4603      	mov	r3, r0
 8003084:	4618      	mov	r0, r3
 8003086:	f7fd fff3 	bl	8001070 <__aeabi_f2iz>
 800308a:	4603      	mov	r3, r0
 800308c:	4a3f      	ldr	r2, [pc, #252]	; (800318c <moveStraight+0x24c>)
 800308e:	6013      	str	r3, [r2, #0]
	if (motLeft < 0) {
 8003090:	4b3d      	ldr	r3, [pc, #244]	; (8003188 <moveStraight+0x248>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2b00      	cmp	r3, #0
 8003096:	da02      	bge.n	800309e <moveStraight+0x15e>
		motLeft = 0;
 8003098:	4b3b      	ldr	r3, [pc, #236]	; (8003188 <moveStraight+0x248>)
 800309a:	2200      	movs	r2, #0
 800309c:	601a      	str	r2, [r3, #0]
	}
	if (motRight < 0) {
 800309e:	4b3b      	ldr	r3, [pc, #236]	; (800318c <moveStraight+0x24c>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	da02      	bge.n	80030ac <moveStraight+0x16c>
		motRight = 0;
 80030a6:	4b39      	ldr	r3, [pc, #228]	; (800318c <moveStraight+0x24c>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	601a      	str	r2, [r3, #0]
	}

	previousError = error;
 80030ac:	4b2a      	ldr	r3, [pc, #168]	; (8003158 <moveStraight+0x218>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a2e      	ldr	r2, [pc, #184]	; (800316c <moveStraight+0x22c>)
 80030b2:	6013      	str	r3, [r2, #0]
	motRight = constrain(motRight, -1000, 1000);
 80030b4:	4b35      	ldr	r3, [pc, #212]	; (800318c <moveStraight+0x24c>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80030bc:	4934      	ldr	r1, [pc, #208]	; (8003190 <moveStraight+0x250>)
 80030be:	4618      	mov	r0, r3
 80030c0:	f7ff ff25 	bl	8002f0e <constrain>
 80030c4:	4603      	mov	r3, r0
 80030c6:	4a31      	ldr	r2, [pc, #196]	; (800318c <moveStraight+0x24c>)
 80030c8:	6013      	str	r3, [r2, #0]
	motLeft = constrain(motLeft, -1000, 1000);
 80030ca:	4b2f      	ldr	r3, [pc, #188]	; (8003188 <moveStraight+0x248>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80030d2:	492f      	ldr	r1, [pc, #188]	; (8003190 <moveStraight+0x250>)
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7ff ff1a 	bl	8002f0e <constrain>
 80030da:	4603      	mov	r3, r0
 80030dc:	4a2a      	ldr	r2, [pc, #168]	; (8003188 <moveStraight+0x248>)
 80030de:	6013      	str	r3, [r2, #0]

	motRight = MAP(motRight, -1000, 1000, 0, baseChoice[choice] * 2);
 80030e0:	4b2a      	ldr	r3, [pc, #168]	; (800318c <moveStraight+0x24c>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4618      	mov	r0, r3
 80030e6:	4b2b      	ldr	r3, [pc, #172]	; (8003194 <moveStraight+0x254>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a2b      	ldr	r2, [pc, #172]	; (8003198 <moveStraight+0x258>)
 80030ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030f0:	005b      	lsls	r3, r3, #1
 80030f2:	9300      	str	r3, [sp, #0]
 80030f4:	2300      	movs	r3, #0
 80030f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80030fa:	4925      	ldr	r1, [pc, #148]	; (8003190 <moveStraight+0x250>)
 80030fc:	f7ff feec 	bl	8002ed8 <MAP>
 8003100:	4603      	mov	r3, r0
 8003102:	461a      	mov	r2, r3
 8003104:	4b21      	ldr	r3, [pc, #132]	; (800318c <moveStraight+0x24c>)
 8003106:	601a      	str	r2, [r3, #0]
	motLeft = MAP(motLeft, -1000, 1000, 0, baseChoice[choice] * 2);
 8003108:	4b1f      	ldr	r3, [pc, #124]	; (8003188 <moveStraight+0x248>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4618      	mov	r0, r3
 800310e:	4b21      	ldr	r3, [pc, #132]	; (8003194 <moveStraight+0x254>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a21      	ldr	r2, [pc, #132]	; (8003198 <moveStraight+0x258>)
 8003114:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003118:	005b      	lsls	r3, r3, #1
 800311a:	9300      	str	r3, [sp, #0]
 800311c:	2300      	movs	r3, #0
 800311e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003122:	491b      	ldr	r1, [pc, #108]	; (8003190 <moveStraight+0x250>)
 8003124:	f7ff fed8 	bl	8002ed8 <MAP>
 8003128:	4603      	mov	r3, r0
 800312a:	461a      	mov	r2, r3
 800312c:	4b16      	ldr	r3, [pc, #88]	; (8003188 <moveStraight+0x248>)
 800312e:	601a      	str	r2, [r3, #0]
	TIM2->CCR3 = motLeft;
 8003130:	4b15      	ldr	r3, [pc, #84]	; (8003188 <moveStraight+0x248>)
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003138:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM2->CCR4 = motRight;
 800313a:	4b14      	ldr	r3, [pc, #80]	; (800318c <moveStraight+0x24c>)
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003142:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003144:	bf00      	nop
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	200011dc 	.word	0x200011dc
 8003150:	41b00000 	.word	0x41b00000
 8003154:	41300000 	.word	0x41300000
 8003158:	20002a74 	.word	0x20002a74
 800315c:	20002a84 	.word	0x20002a84
 8003160:	20002a88 	.word	0x20002a88
 8003164:	447a0000 	.word	0x447a0000
 8003168:	20002a80 	.word	0x20002a80
 800316c:	20002a7c 	.word	0x20002a7c
 8003170:	2000120c 	.word	0x2000120c
 8003174:	20002a90 	.word	0x20002a90
 8003178:	20001208 	.word	0x20001208
 800317c:	20002a8c 	.word	0x20002a8c
 8003180:	20002a78 	.word	0x20002a78
 8003184:	20001210 	.word	0x20001210
 8003188:	20002a94 	.word	0x20002a94
 800318c:	20002a98 	.word	0x20002a98
 8003190:	fffffc18 	.word	0xfffffc18
 8003194:	20001218 	.word	0x20001218
 8003198:	20000018 	.word	0x20000018

0800319c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80031a0:	b672      	cpsid	i
}
 80031a2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80031a4:	e7fe      	b.n	80031a4 <Error_Handler+0x8>
	...

080031a8 <calcularDistancia>:
#include "motors.h"


int counterD, counterI;

float calcularDistancia(int counter) {
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  return ((counter) * 8.43938 / 10);
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f7fd f91f 	bl	80003f4 <__aeabi_i2d>
 80031b6:	a30c      	add	r3, pc, #48	; (adr r3, 80031e8 <calcularDistancia+0x40>)
 80031b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031bc:	f7fd f984 	bl	80004c8 <__aeabi_dmul>
 80031c0:	4602      	mov	r2, r0
 80031c2:	460b      	mov	r3, r1
 80031c4:	4610      	mov	r0, r2
 80031c6:	4619      	mov	r1, r3
 80031c8:	f04f 0200 	mov.w	r2, #0
 80031cc:	4b08      	ldr	r3, [pc, #32]	; (80031f0 <calcularDistancia+0x48>)
 80031ce:	f7fd faa5 	bl	800071c <__aeabi_ddiv>
 80031d2:	4602      	mov	r2, r0
 80031d4:	460b      	mov	r3, r1
 80031d6:	4610      	mov	r0, r2
 80031d8:	4619      	mov	r1, r3
 80031da:	f7fd fc25 	bl	8000a28 <__aeabi_d2f>
 80031de:	4603      	mov	r3, r0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3708      	adds	r7, #8
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	6a550870 	.word	0x6a550870
 80031ec:	4020e0f6 	.word	0x4020e0f6
 80031f0:	40240000 	.word	0x40240000

080031f4 <runMotor>:
	} else {
		TIM4->CCR3 = power;
	}
}

void runMotor(int dir, int motor) {
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
	switch (dir) {
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2b05      	cmp	r3, #5
 8003202:	d03f      	beq.n	8003284 <runMotor+0x90>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2b05      	cmp	r3, #5
 8003208:	dc57      	bgt.n	80032ba <runMotor+0xc6>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d003      	beq.n	8003218 <runMotor+0x24>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2b02      	cmp	r3, #2
 8003214:	d01b      	beq.n	800324e <runMotor+0x5a>
			HAL_GPIO_WritePin(BIN1, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(BIN2, GPIO_PIN_RESET);
		}
		break;
	}
}
 8003216:	e050      	b.n	80032ba <runMotor+0xc6>
		if (motor == MOTOR_A) {
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d10a      	bne.n	8003234 <runMotor+0x40>
			HAL_GPIO_WritePin(AIN1, GPIO_PIN_SET);
 800321e:	2201      	movs	r2, #1
 8003220:	2108      	movs	r1, #8
 8003222:	4828      	ldr	r0, [pc, #160]	; (80032c4 <runMotor+0xd0>)
 8003224:	f001 fdd3 	bl	8004dce <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(AIN2, GPIO_PIN_RESET);
 8003228:	2200      	movs	r2, #0
 800322a:	2110      	movs	r1, #16
 800322c:	4825      	ldr	r0, [pc, #148]	; (80032c4 <runMotor+0xd0>)
 800322e:	f001 fdce 	bl	8004dce <HAL_GPIO_WritePin>
		break;
 8003232:	e042      	b.n	80032ba <runMotor+0xc6>
			HAL_GPIO_WritePin(BIN1, GPIO_PIN_RESET);
 8003234:	2200      	movs	r2, #0
 8003236:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800323a:	4823      	ldr	r0, [pc, #140]	; (80032c8 <runMotor+0xd4>)
 800323c:	f001 fdc7 	bl	8004dce <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BIN2, GPIO_PIN_SET);
 8003240:	2201      	movs	r2, #1
 8003242:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003246:	4820      	ldr	r0, [pc, #128]	; (80032c8 <runMotor+0xd4>)
 8003248:	f001 fdc1 	bl	8004dce <HAL_GPIO_WritePin>
		break;
 800324c:	e035      	b.n	80032ba <runMotor+0xc6>
		if (motor == MOTOR_A) {
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d10a      	bne.n	800326a <runMotor+0x76>
			HAL_GPIO_WritePin(AIN1, GPIO_PIN_RESET);
 8003254:	2200      	movs	r2, #0
 8003256:	2108      	movs	r1, #8
 8003258:	481a      	ldr	r0, [pc, #104]	; (80032c4 <runMotor+0xd0>)
 800325a:	f001 fdb8 	bl	8004dce <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(AIN2, GPIO_PIN_SET);
 800325e:	2201      	movs	r2, #1
 8003260:	2110      	movs	r1, #16
 8003262:	4818      	ldr	r0, [pc, #96]	; (80032c4 <runMotor+0xd0>)
 8003264:	f001 fdb3 	bl	8004dce <HAL_GPIO_WritePin>
		break;
 8003268:	e027      	b.n	80032ba <runMotor+0xc6>
			HAL_GPIO_WritePin(BIN1, GPIO_PIN_SET);
 800326a:	2201      	movs	r2, #1
 800326c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003270:	4815      	ldr	r0, [pc, #84]	; (80032c8 <runMotor+0xd4>)
 8003272:	f001 fdac 	bl	8004dce <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BIN2, GPIO_PIN_RESET);
 8003276:	2200      	movs	r2, #0
 8003278:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800327c:	4812      	ldr	r0, [pc, #72]	; (80032c8 <runMotor+0xd4>)
 800327e:	f001 fda6 	bl	8004dce <HAL_GPIO_WritePin>
		break;
 8003282:	e01a      	b.n	80032ba <runMotor+0xc6>
		if (motor == MOTOR_A) {
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d10a      	bne.n	80032a0 <runMotor+0xac>
			HAL_GPIO_WritePin(AIN1, GPIO_PIN_RESET);
 800328a:	2200      	movs	r2, #0
 800328c:	2108      	movs	r1, #8
 800328e:	480d      	ldr	r0, [pc, #52]	; (80032c4 <runMotor+0xd0>)
 8003290:	f001 fd9d 	bl	8004dce <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(AIN2, GPIO_PIN_RESET);
 8003294:	2200      	movs	r2, #0
 8003296:	2110      	movs	r1, #16
 8003298:	480a      	ldr	r0, [pc, #40]	; (80032c4 <runMotor+0xd0>)
 800329a:	f001 fd98 	bl	8004dce <HAL_GPIO_WritePin>
		break;
 800329e:	e00b      	b.n	80032b8 <runMotor+0xc4>
			HAL_GPIO_WritePin(BIN1, GPIO_PIN_RESET);
 80032a0:	2200      	movs	r2, #0
 80032a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80032a6:	4808      	ldr	r0, [pc, #32]	; (80032c8 <runMotor+0xd4>)
 80032a8:	f001 fd91 	bl	8004dce <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BIN2, GPIO_PIN_RESET);
 80032ac:	2200      	movs	r2, #0
 80032ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80032b2:	4805      	ldr	r0, [pc, #20]	; (80032c8 <runMotor+0xd4>)
 80032b4:	f001 fd8b 	bl	8004dce <HAL_GPIO_WritePin>
		break;
 80032b8:	bf00      	nop
}
 80032ba:	bf00      	nop
 80032bc:	3708      	adds	r7, #8
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	40010c00 	.word	0x40010c00
 80032c8:	40010800 	.word	0x40010800

080032cc <wallDetector>:
 */
#include "sharp.h"

#include <math.h>

int wallDetector(int n, int d) {
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
	if (d == ADELANTE) {
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d106      	bne.n	80032ea <wallDetector+0x1e>
		if (n < 18) {
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2b11      	cmp	r3, #17
 80032e0:	dc01      	bgt.n	80032e6 <wallDetector+0x1a>
			return 1;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e007      	b.n	80032f6 <wallDetector+0x2a>
		} else {
			return 0;
 80032e6:	2300      	movs	r3, #0
 80032e8:	e005      	b.n	80032f6 <wallDetector+0x2a>
		}
	}
	if (n < 18) {
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2b11      	cmp	r3, #17
 80032ee:	dc01      	bgt.n	80032f4 <wallDetector+0x28>
		return 1;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e000      	b.n	80032f6 <wallDetector+0x2a>
	} else {
		return 0;
 80032f4:	2300      	movs	r3, #0
	}

}
 80032f6:	4618      	mov	r0, r3
 80032f8:	370c      	adds	r7, #12
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bc80      	pop	{r7}
 80032fe:	4770      	bx	lr

08003300 <lecturaSensor>:

float lecturaSensor(int direccion, float values[4]) {
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	6039      	str	r1, [r7, #0]
	switch (direccion) {
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2b03      	cmp	r3, #3
 800330e:	d841      	bhi.n	8003394 <lecturaSensor+0x94>
 8003310:	a201      	add	r2, pc, #4	; (adr r2, 8003318 <lecturaSensor+0x18>)
 8003312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003316:	bf00      	nop
 8003318:	08003329 	.word	0x08003329
 800331c:	0800336d 	.word	0x0800336d
 8003320:	0800338f 	.word	0x0800338f
 8003324:	0800334b 	.word	0x0800334b
	case ADELANTE:
		return wallDetector(values[2], direccion);
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	3308      	adds	r3, #8
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4618      	mov	r0, r3
 8003330:	f7fd fe9e 	bl	8001070 <__aeabi_f2iz>
 8003334:	4603      	mov	r3, r0
 8003336:	6879      	ldr	r1, [r7, #4]
 8003338:	4618      	mov	r0, r3
 800333a:	f7ff ffc7 	bl	80032cc <wallDetector>
 800333e:	4603      	mov	r3, r0
 8003340:	4618      	mov	r0, r3
 8003342:	f7fd fc7b 	bl	8000c3c <__aeabi_i2f>
 8003346:	4603      	mov	r3, r0
 8003348:	e025      	b.n	8003396 <lecturaSensor+0x96>
		break;
	case DERECHA:
		return wallDetector(values[1], direccion);
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	3304      	adds	r3, #4
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4618      	mov	r0, r3
 8003352:	f7fd fe8d 	bl	8001070 <__aeabi_f2iz>
 8003356:	4603      	mov	r3, r0
 8003358:	6879      	ldr	r1, [r7, #4]
 800335a:	4618      	mov	r0, r3
 800335c:	f7ff ffb6 	bl	80032cc <wallDetector>
 8003360:	4603      	mov	r3, r0
 8003362:	4618      	mov	r0, r3
 8003364:	f7fd fc6a 	bl	8000c3c <__aeabi_i2f>
 8003368:	4603      	mov	r3, r0
 800336a:	e014      	b.n	8003396 <lecturaSensor+0x96>
		break;
	case IZQUIERDA:
		return wallDetector(values[3], direccion);
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	330c      	adds	r3, #12
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4618      	mov	r0, r3
 8003374:	f7fd fe7c 	bl	8001070 <__aeabi_f2iz>
 8003378:	4603      	mov	r3, r0
 800337a:	6879      	ldr	r1, [r7, #4]
 800337c:	4618      	mov	r0, r3
 800337e:	f7ff ffa5 	bl	80032cc <wallDetector>
 8003382:	4603      	mov	r3, r0
 8003384:	4618      	mov	r0, r3
 8003386:	f7fd fc59 	bl	8000c3c <__aeabi_i2f>
 800338a:	4603      	mov	r3, r0
 800338c:	e003      	b.n	8003396 <lecturaSensor+0x96>
		break;
	case ATRAS:
		return 0;
 800338e:	f04f 0300 	mov.w	r3, #0
 8003392:	e000      	b.n	8003396 <lecturaSensor+0x96>
		break;
	}
	return 15;
 8003394:	4b02      	ldr	r3, [pc, #8]	; (80033a0 <lecturaSensor+0xa0>)
}
 8003396:	4618      	mov	r0, r3
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	41700000 	.word	0x41700000
 80033a4:	00000000 	.word	0x00000000

080033a8 <lecSensor>:

float lecSensor(int n, uint32_t values[10]) {
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b086      	sub	sp, #24
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
	long suma = 0;
 80033b2:	2300      	movs	r3, #0
 80033b4:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < n; i++) {
 80033b6:	2300      	movs	r3, #0
 80033b8:	613b      	str	r3, [r7, #16]
 80033ba:	e00a      	b.n	80033d2 <lecSensor+0x2a>
		suma = suma + values[i];
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	683a      	ldr	r2, [r7, #0]
 80033c2:	4413      	add	r3, r2
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	4413      	add	r3, r2
 80033ca:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < n; i++) {
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	3301      	adds	r3, #1
 80033d0:	613b      	str	r3, [r7, #16]
 80033d2:	693a      	ldr	r2, [r7, #16]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	dbf0      	blt.n	80033bc <lecSensor+0x14>
	}
	float adc = suma / n;
 80033da:	697a      	ldr	r2, [r7, #20]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	fb92 f3f3 	sdiv	r3, r2, r3
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7fd fc2a 	bl	8000c3c <__aeabi_i2f>
 80033e8:	4603      	mov	r3, r0
 80033ea:	60bb      	str	r3, [r7, #8]
	float volts = adc * 0.0008056640; // value from sensor * (5/1024)
 80033ec:	68b8      	ldr	r0, [r7, #8]
 80033ee:	f7fd f813 	bl	8000418 <__aeabi_f2d>
 80033f2:	a323      	add	r3, pc, #140	; (adr r3, 8003480 <lecSensor+0xd8>)
 80033f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033f8:	f7fd f866 	bl	80004c8 <__aeabi_dmul>
 80033fc:	4602      	mov	r2, r0
 80033fe:	460b      	mov	r3, r1
 8003400:	4610      	mov	r0, r2
 8003402:	4619      	mov	r1, r3
 8003404:	f7fd fb10 	bl	8000a28 <__aeabi_d2f>
 8003408:	4603      	mov	r3, r0
 800340a:	60fb      	str	r3, [r7, #12]
	if (volts <= 0.35)
 800340c:	68f8      	ldr	r0, [r7, #12]
 800340e:	f7fd f803 	bl	8000418 <__aeabi_f2d>
 8003412:	a31d      	add	r3, pc, #116	; (adr r3, 8003488 <lecSensor+0xe0>)
 8003414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003418:	f7fd fad2 	bl	80009c0 <__aeabi_dcmple>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d001      	beq.n	8003426 <lecSensor+0x7e>
		volts = 0.35;
 8003422:	4b1d      	ldr	r3, [pc, #116]	; (8003498 <lecSensor+0xf0>)
 8003424:	60fb      	str	r3, [r7, #12]
	volts = pow(volts - 0.3, 0.25);/*convertimos a cm con un aproximacion grafica*/
 8003426:	68f8      	ldr	r0, [r7, #12]
 8003428:	f7fc fff6 	bl	8000418 <__aeabi_f2d>
 800342c:	a318      	add	r3, pc, #96	; (adr r3, 8003490 <lecSensor+0xe8>)
 800342e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003432:	f7fc fe91 	bl	8000158 <__aeabi_dsub>
 8003436:	4602      	mov	r2, r0
 8003438:	460b      	mov	r3, r1
 800343a:	4610      	mov	r0, r2
 800343c:	4619      	mov	r1, r3
 800343e:	f04f 0200 	mov.w	r2, #0
 8003442:	4b16      	ldr	r3, [pc, #88]	; (800349c <lecSensor+0xf4>)
 8003444:	f003 fbd0 	bl	8006be8 <pow>
 8003448:	4602      	mov	r2, r0
 800344a:	460b      	mov	r3, r1
 800344c:	4610      	mov	r0, r2
 800344e:	4619      	mov	r1, r3
 8003450:	f7fd faea 	bl	8000a28 <__aeabi_d2f>
 8003454:	4603      	mov	r3, r0
 8003456:	60fb      	str	r3, [r7, #12]
	volts = 27.5 / volts; /*no preguntar por los valores*/
 8003458:	68f9      	ldr	r1, [r7, #12]
 800345a:	4811      	ldr	r0, [pc, #68]	; (80034a0 <lecSensor+0xf8>)
 800345c:	f7fd fcf6 	bl	8000e4c <__aeabi_fdiv>
 8003460:	4603      	mov	r3, r0
 8003462:	60fb      	str	r3, [r7, #12]
	volts -= 18;
 8003464:	490f      	ldr	r1, [pc, #60]	; (80034a4 <lecSensor+0xfc>)
 8003466:	68f8      	ldr	r0, [r7, #12]
 8003468:	f7fd fb32 	bl	8000ad0 <__aeabi_fsub>
 800346c:	4603      	mov	r3, r0
 800346e:	60fb      	str	r3, [r7, #12]

	return volts;
 8003470:	68fb      	ldr	r3, [r7, #12]

}
 8003472:	4618      	mov	r0, r3
 8003474:	3718      	adds	r7, #24
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	f3af 8000 	nop.w
 8003480:	440a4e96 	.word	0x440a4e96
 8003484:	3f4a6666 	.word	0x3f4a6666
 8003488:	66666666 	.word	0x66666666
 800348c:	3fd66666 	.word	0x3fd66666
 8003490:	33333333 	.word	0x33333333
 8003494:	3fd33333 	.word	0x3fd33333
 8003498:	3eb33333 	.word	0x3eb33333
 800349c:	3fd00000 	.word	0x3fd00000
 80034a0:	41dc0000 	.word	0x41dc0000
 80034a4:	41900000 	.word	0x41900000

080034a8 <lecturaCNY70>:

int lecturaCNY70(int n, uint32_t values[10]) {
 80034a8:	b480      	push	{r7}
 80034aa:	b087      	sub	sp, #28
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
	long suma = 0;
 80034b2:	2300      	movs	r3, #0
 80034b4:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < n; i++) {
 80034b6:	2300      	movs	r3, #0
 80034b8:	613b      	str	r3, [r7, #16]
 80034ba:	e00a      	b.n	80034d2 <lecturaCNY70+0x2a>
		suma = suma + values[i];
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	683a      	ldr	r2, [r7, #0]
 80034c2:	4413      	add	r3, r2
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	4413      	add	r3, r2
 80034ca:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < n; i++) {
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	3301      	adds	r3, #1
 80034d0:	613b      	str	r3, [r7, #16]
 80034d2:	693a      	ldr	r2, [r7, #16]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	429a      	cmp	r2, r3
 80034d8:	dbf0      	blt.n	80034bc <lecturaCNY70+0x14>
	}
	int adc = (suma / n);
 80034da:	697a      	ldr	r2, [r7, #20]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	fb92 f3f3 	sdiv	r3, r2, r3
 80034e2:	60fb      	str	r3, [r7, #12]
	if (adc < 1000) {
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034ea:	da01      	bge.n	80034f0 <lecturaCNY70+0x48>
		return BLANCO;
 80034ec:	2300      	movs	r3, #0
 80034ee:	e000      	b.n	80034f2 <lecturaCNY70+0x4a>
	} else {
		return NEGRO;
 80034f0:	2301      	movs	r3, #1
	}
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	371c      	adds	r7, #28
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bc80      	pop	{r7}
 80034fa:	4770      	bx	lr

080034fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b085      	sub	sp, #20
 8003500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003502:	4b15      	ldr	r3, [pc, #84]	; (8003558 <HAL_MspInit+0x5c>)
 8003504:	699b      	ldr	r3, [r3, #24]
 8003506:	4a14      	ldr	r2, [pc, #80]	; (8003558 <HAL_MspInit+0x5c>)
 8003508:	f043 0301 	orr.w	r3, r3, #1
 800350c:	6193      	str	r3, [r2, #24]
 800350e:	4b12      	ldr	r3, [pc, #72]	; (8003558 <HAL_MspInit+0x5c>)
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	60bb      	str	r3, [r7, #8]
 8003518:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800351a:	4b0f      	ldr	r3, [pc, #60]	; (8003558 <HAL_MspInit+0x5c>)
 800351c:	69db      	ldr	r3, [r3, #28]
 800351e:	4a0e      	ldr	r2, [pc, #56]	; (8003558 <HAL_MspInit+0x5c>)
 8003520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003524:	61d3      	str	r3, [r2, #28]
 8003526:	4b0c      	ldr	r3, [pc, #48]	; (8003558 <HAL_MspInit+0x5c>)
 8003528:	69db      	ldr	r3, [r3, #28]
 800352a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800352e:	607b      	str	r3, [r7, #4]
 8003530:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003532:	4b0a      	ldr	r3, [pc, #40]	; (800355c <HAL_MspInit+0x60>)
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	60fb      	str	r3, [r7, #12]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800353e:	60fb      	str	r3, [r7, #12]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003546:	60fb      	str	r3, [r7, #12]
 8003548:	4a04      	ldr	r2, [pc, #16]	; (800355c <HAL_MspInit+0x60>)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800354e:	bf00      	nop
 8003550:	3714      	adds	r7, #20
 8003552:	46bd      	mov	sp, r7
 8003554:	bc80      	pop	{r7}
 8003556:	4770      	bx	lr
 8003558:	40021000 	.word	0x40021000
 800355c:	40010000 	.word	0x40010000

08003560 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003560:	b480      	push	{r7}
 8003562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003564:	e7fe      	b.n	8003564 <NMI_Handler+0x4>

08003566 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003566:	b480      	push	{r7}
 8003568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800356a:	e7fe      	b.n	800356a <HardFault_Handler+0x4>

0800356c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800356c:	b480      	push	{r7}
 800356e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003570:	e7fe      	b.n	8003570 <MemManage_Handler+0x4>

08003572 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003572:	b480      	push	{r7}
 8003574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003576:	e7fe      	b.n	8003576 <BusFault_Handler+0x4>

08003578 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003578:	b480      	push	{r7}
 800357a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800357c:	e7fe      	b.n	800357c <UsageFault_Handler+0x4>

0800357e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800357e:	b480      	push	{r7}
 8003580:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003582:	bf00      	nop
 8003584:	46bd      	mov	sp, r7
 8003586:	bc80      	pop	{r7}
 8003588:	4770      	bx	lr

0800358a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800358a:	b480      	push	{r7}
 800358c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800358e:	bf00      	nop
 8003590:	46bd      	mov	sp, r7
 8003592:	bc80      	pop	{r7}
 8003594:	4770      	bx	lr

08003596 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003596:	b480      	push	{r7}
 8003598:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800359a:	bf00      	nop
 800359c:	46bd      	mov	sp, r7
 800359e:	bc80      	pop	{r7}
 80035a0:	4770      	bx	lr

080035a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80035a2:	b580      	push	{r7, lr}
 80035a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80035a6:	f000 faed 	bl	8003b84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80035aa:	bf00      	nop
 80035ac:	bd80      	pop	{r7, pc}
	...

080035b0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80035b4:	4802      	ldr	r0, [pc, #8]	; (80035c0 <DMA1_Channel1_IRQHandler+0x10>)
 80035b6:	f001 f93b 	bl	8004830 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80035ba:	bf00      	nop
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	200000f8 	.word	0x200000f8

080035c4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80035c8:	4802      	ldr	r0, [pc, #8]	; (80035d4 <USART1_IRQHandler+0x10>)
 80035ca:	f002 ff15 	bl	80063f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80035ce:	bf00      	nop
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	20002b74 	.word	0x20002b74

080035d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80035d8:	b480      	push	{r7}
 80035da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80035dc:	bf00      	nop
 80035de:	46bd      	mov	sp, r7
 80035e0:	bc80      	pop	{r7}
 80035e2:	4770      	bx	lr

080035e4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b08a      	sub	sp, #40	; 0x28
 80035e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035ea:	f107 0320 	add.w	r3, r7, #32
 80035ee:	2200      	movs	r2, #0
 80035f0:	601a      	str	r2, [r3, #0]
 80035f2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80035f4:	1d3b      	adds	r3, r7, #4
 80035f6:	2200      	movs	r2, #0
 80035f8:	601a      	str	r2, [r3, #0]
 80035fa:	605a      	str	r2, [r3, #4]
 80035fc:	609a      	str	r2, [r3, #8]
 80035fe:	60da      	str	r2, [r3, #12]
 8003600:	611a      	str	r2, [r3, #16]
 8003602:	615a      	str	r2, [r3, #20]
 8003604:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003606:	4b28      	ldr	r3, [pc, #160]	; (80036a8 <MX_TIM2_Init+0xc4>)
 8003608:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800360c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800360e:	4b26      	ldr	r3, [pc, #152]	; (80036a8 <MX_TIM2_Init+0xc4>)
 8003610:	2200      	movs	r2, #0
 8003612:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003614:	4b24      	ldr	r3, [pc, #144]	; (80036a8 <MX_TIM2_Init+0xc4>)
 8003616:	2200      	movs	r2, #0
 8003618:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800361a:	4b23      	ldr	r3, [pc, #140]	; (80036a8 <MX_TIM2_Init+0xc4>)
 800361c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003620:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003622:	4b21      	ldr	r3, [pc, #132]	; (80036a8 <MX_TIM2_Init+0xc4>)
 8003624:	2200      	movs	r2, #0
 8003626:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003628:	4b1f      	ldr	r3, [pc, #124]	; (80036a8 <MX_TIM2_Init+0xc4>)
 800362a:	2200      	movs	r2, #0
 800362c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800362e:	481e      	ldr	r0, [pc, #120]	; (80036a8 <MX_TIM2_Init+0xc4>)
 8003630:	f002 f8b6 	bl	80057a0 <HAL_TIM_PWM_Init>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d001      	beq.n	800363e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800363a:	f7ff fdaf 	bl	800319c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800363e:	2300      	movs	r3, #0
 8003640:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003642:	2300      	movs	r3, #0
 8003644:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003646:	f107 0320 	add.w	r3, r7, #32
 800364a:	4619      	mov	r1, r3
 800364c:	4816      	ldr	r0, [pc, #88]	; (80036a8 <MX_TIM2_Init+0xc4>)
 800364e:	f002 fd95 	bl	800617c <HAL_TIMEx_MasterConfigSynchronization>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d001      	beq.n	800365c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8003658:	f7ff fda0 	bl	800319c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800365c:	2360      	movs	r3, #96	; 0x60
 800365e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003660:	2300      	movs	r3, #0
 8003662:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003664:	2300      	movs	r3, #0
 8003666:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003668:	2300      	movs	r3, #0
 800366a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800366c:	1d3b      	adds	r3, r7, #4
 800366e:	2208      	movs	r2, #8
 8003670:	4619      	mov	r1, r3
 8003672:	480d      	ldr	r0, [pc, #52]	; (80036a8 <MX_TIM2_Init+0xc4>)
 8003674:	f002 fab6 	bl	8005be4 <HAL_TIM_PWM_ConfigChannel>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d001      	beq.n	8003682 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800367e:	f7ff fd8d 	bl	800319c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003682:	1d3b      	adds	r3, r7, #4
 8003684:	220c      	movs	r2, #12
 8003686:	4619      	mov	r1, r3
 8003688:	4807      	ldr	r0, [pc, #28]	; (80036a8 <MX_TIM2_Init+0xc4>)
 800368a:	f002 faab 	bl	8005be4 <HAL_TIM_PWM_ConfigChannel>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d001      	beq.n	8003698 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8003694:	f7ff fd82 	bl	800319c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003698:	4803      	ldr	r0, [pc, #12]	; (80036a8 <MX_TIM2_Init+0xc4>)
 800369a:	f000 f943 	bl	8003924 <HAL_TIM_MspPostInit>

}
 800369e:	bf00      	nop
 80036a0:	3728      	adds	r7, #40	; 0x28
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	20002a9c 	.word	0x20002a9c

080036ac <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b08c      	sub	sp, #48	; 0x30
 80036b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80036b2:	f107 030c 	add.w	r3, r7, #12
 80036b6:	2224      	movs	r2, #36	; 0x24
 80036b8:	2100      	movs	r1, #0
 80036ba:	4618      	mov	r0, r3
 80036bc:	f004 f9a0 	bl	8007a00 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036c0:	1d3b      	adds	r3, r7, #4
 80036c2:	2200      	movs	r2, #0
 80036c4:	601a      	str	r2, [r3, #0]
 80036c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80036c8:	4b20      	ldr	r3, [pc, #128]	; (800374c <MX_TIM3_Init+0xa0>)
 80036ca:	4a21      	ldr	r2, [pc, #132]	; (8003750 <MX_TIM3_Init+0xa4>)
 80036cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80036ce:	4b1f      	ldr	r3, [pc, #124]	; (800374c <MX_TIM3_Init+0xa0>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036d4:	4b1d      	ldr	r3, [pc, #116]	; (800374c <MX_TIM3_Init+0xa0>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80036da:	4b1c      	ldr	r3, [pc, #112]	; (800374c <MX_TIM3_Init+0xa0>)
 80036dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036e0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036e2:	4b1a      	ldr	r3, [pc, #104]	; (800374c <MX_TIM3_Init+0xa0>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036e8:	4b18      	ldr	r3, [pc, #96]	; (800374c <MX_TIM3_Init+0xa0>)
 80036ea:	2200      	movs	r2, #0
 80036ec:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80036ee:	2303      	movs	r3, #3
 80036f0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80036f2:	2300      	movs	r3, #0
 80036f4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80036f6:	2301      	movs	r3, #1
 80036f8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80036fa:	2300      	movs	r3, #0
 80036fc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80036fe:	230a      	movs	r3, #10
 8003700:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003702:	2300      	movs	r3, #0
 8003704:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003706:	2301      	movs	r3, #1
 8003708:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800370a:	2300      	movs	r3, #0
 800370c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800370e:	2300      	movs	r3, #0
 8003710:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003712:	f107 030c 	add.w	r3, r7, #12
 8003716:	4619      	mov	r1, r3
 8003718:	480c      	ldr	r0, [pc, #48]	; (800374c <MX_TIM3_Init+0xa0>)
 800371a:	f002 f933 	bl	8005984 <HAL_TIM_Encoder_Init>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d001      	beq.n	8003728 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8003724:	f7ff fd3a 	bl	800319c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003728:	2300      	movs	r3, #0
 800372a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800372c:	2300      	movs	r3, #0
 800372e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003730:	1d3b      	adds	r3, r7, #4
 8003732:	4619      	mov	r1, r3
 8003734:	4805      	ldr	r0, [pc, #20]	; (800374c <MX_TIM3_Init+0xa0>)
 8003736:	f002 fd21 	bl	800617c <HAL_TIMEx_MasterConfigSynchronization>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d001      	beq.n	8003744 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8003740:	f7ff fd2c 	bl	800319c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003744:	bf00      	nop
 8003746:	3730      	adds	r7, #48	; 0x30
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	20002ae4 	.word	0x20002ae4
 8003750:	40000400 	.word	0x40000400

08003754 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b08c      	sub	sp, #48	; 0x30
 8003758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800375a:	f107 030c 	add.w	r3, r7, #12
 800375e:	2224      	movs	r2, #36	; 0x24
 8003760:	2100      	movs	r1, #0
 8003762:	4618      	mov	r0, r3
 8003764:	f004 f94c 	bl	8007a00 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003768:	1d3b      	adds	r3, r7, #4
 800376a:	2200      	movs	r2, #0
 800376c:	601a      	str	r2, [r3, #0]
 800376e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003770:	4b20      	ldr	r3, [pc, #128]	; (80037f4 <MX_TIM4_Init+0xa0>)
 8003772:	4a21      	ldr	r2, [pc, #132]	; (80037f8 <MX_TIM4_Init+0xa4>)
 8003774:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003776:	4b1f      	ldr	r3, [pc, #124]	; (80037f4 <MX_TIM4_Init+0xa0>)
 8003778:	2200      	movs	r2, #0
 800377a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800377c:	4b1d      	ldr	r3, [pc, #116]	; (80037f4 <MX_TIM4_Init+0xa0>)
 800377e:	2200      	movs	r2, #0
 8003780:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003782:	4b1c      	ldr	r3, [pc, #112]	; (80037f4 <MX_TIM4_Init+0xa0>)
 8003784:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003788:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800378a:	4b1a      	ldr	r3, [pc, #104]	; (80037f4 <MX_TIM4_Init+0xa0>)
 800378c:	2200      	movs	r2, #0
 800378e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003790:	4b18      	ldr	r3, [pc, #96]	; (80037f4 <MX_TIM4_Init+0xa0>)
 8003792:	2280      	movs	r2, #128	; 0x80
 8003794:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003796:	2303      	movs	r3, #3
 8003798:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800379a:	2300      	movs	r3, #0
 800379c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800379e:	2301      	movs	r3, #1
 80037a0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80037a2:	2300      	movs	r3, #0
 80037a4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80037a6:	230a      	movs	r3, #10
 80037a8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80037aa:	2300      	movs	r3, #0
 80037ac:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80037ae:	2301      	movs	r3, #1
 80037b0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80037b2:	2300      	movs	r3, #0
 80037b4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80037b6:	2300      	movs	r3, #0
 80037b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80037ba:	f107 030c 	add.w	r3, r7, #12
 80037be:	4619      	mov	r1, r3
 80037c0:	480c      	ldr	r0, [pc, #48]	; (80037f4 <MX_TIM4_Init+0xa0>)
 80037c2:	f002 f8df 	bl	8005984 <HAL_TIM_Encoder_Init>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d001      	beq.n	80037d0 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80037cc:	f7ff fce6 	bl	800319c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037d0:	2300      	movs	r3, #0
 80037d2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037d4:	2300      	movs	r3, #0
 80037d6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80037d8:	1d3b      	adds	r3, r7, #4
 80037da:	4619      	mov	r1, r3
 80037dc:	4805      	ldr	r0, [pc, #20]	; (80037f4 <MX_TIM4_Init+0xa0>)
 80037de:	f002 fccd 	bl	800617c <HAL_TIMEx_MasterConfigSynchronization>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d001      	beq.n	80037ec <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80037e8:	f7ff fcd8 	bl	800319c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80037ec:	bf00      	nop
 80037ee:	3730      	adds	r7, #48	; 0x30
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	20002b2c 	.word	0x20002b2c
 80037f8:	40000800 	.word	0x40000800

080037fc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b085      	sub	sp, #20
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800380c:	d10b      	bne.n	8003826 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800380e:	4b08      	ldr	r3, [pc, #32]	; (8003830 <HAL_TIM_PWM_MspInit+0x34>)
 8003810:	69db      	ldr	r3, [r3, #28]
 8003812:	4a07      	ldr	r2, [pc, #28]	; (8003830 <HAL_TIM_PWM_MspInit+0x34>)
 8003814:	f043 0301 	orr.w	r3, r3, #1
 8003818:	61d3      	str	r3, [r2, #28]
 800381a:	4b05      	ldr	r3, [pc, #20]	; (8003830 <HAL_TIM_PWM_MspInit+0x34>)
 800381c:	69db      	ldr	r3, [r3, #28]
 800381e:	f003 0301 	and.w	r3, r3, #1
 8003822:	60fb      	str	r3, [r7, #12]
 8003824:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8003826:	bf00      	nop
 8003828:	3714      	adds	r7, #20
 800382a:	46bd      	mov	sp, r7
 800382c:	bc80      	pop	{r7}
 800382e:	4770      	bx	lr
 8003830:	40021000 	.word	0x40021000

08003834 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b08a      	sub	sp, #40	; 0x28
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800383c:	f107 0318 	add.w	r3, r7, #24
 8003840:	2200      	movs	r2, #0
 8003842:	601a      	str	r2, [r3, #0]
 8003844:	605a      	str	r2, [r3, #4]
 8003846:	609a      	str	r2, [r3, #8]
 8003848:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM3)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a30      	ldr	r2, [pc, #192]	; (8003910 <HAL_TIM_Encoder_MspInit+0xdc>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d124      	bne.n	800389e <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003854:	4b2f      	ldr	r3, [pc, #188]	; (8003914 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003856:	69db      	ldr	r3, [r3, #28]
 8003858:	4a2e      	ldr	r2, [pc, #184]	; (8003914 <HAL_TIM_Encoder_MspInit+0xe0>)
 800385a:	f043 0302 	orr.w	r3, r3, #2
 800385e:	61d3      	str	r3, [r2, #28]
 8003860:	4b2c      	ldr	r3, [pc, #176]	; (8003914 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003862:	69db      	ldr	r3, [r3, #28]
 8003864:	f003 0302 	and.w	r3, r3, #2
 8003868:	617b      	str	r3, [r7, #20]
 800386a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800386c:	4b29      	ldr	r3, [pc, #164]	; (8003914 <HAL_TIM_Encoder_MspInit+0xe0>)
 800386e:	699b      	ldr	r3, [r3, #24]
 8003870:	4a28      	ldr	r2, [pc, #160]	; (8003914 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003872:	f043 0304 	orr.w	r3, r3, #4
 8003876:	6193      	str	r3, [r2, #24]
 8003878:	4b26      	ldr	r3, [pc, #152]	; (8003914 <HAL_TIM_Encoder_MspInit+0xe0>)
 800387a:	699b      	ldr	r3, [r3, #24]
 800387c:	f003 0304 	and.w	r3, r3, #4
 8003880:	613b      	str	r3, [r7, #16]
 8003882:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = MB1_Pin|MB2_Pin;
 8003884:	23c0      	movs	r3, #192	; 0xc0
 8003886:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003888:	2300      	movs	r3, #0
 800388a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800388c:	2300      	movs	r3, #0
 800388e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003890:	f107 0318 	add.w	r3, r7, #24
 8003894:	4619      	mov	r1, r3
 8003896:	4820      	ldr	r0, [pc, #128]	; (8003918 <HAL_TIM_Encoder_MspInit+0xe4>)
 8003898:	f001 f8fe 	bl	8004a98 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800389c:	e034      	b.n	8003908 <HAL_TIM_Encoder_MspInit+0xd4>
  else if(tim_encoderHandle->Instance==TIM4)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a1e      	ldr	r2, [pc, #120]	; (800391c <HAL_TIM_Encoder_MspInit+0xe8>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d12f      	bne.n	8003908 <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80038a8:	4b1a      	ldr	r3, [pc, #104]	; (8003914 <HAL_TIM_Encoder_MspInit+0xe0>)
 80038aa:	69db      	ldr	r3, [r3, #28]
 80038ac:	4a19      	ldr	r2, [pc, #100]	; (8003914 <HAL_TIM_Encoder_MspInit+0xe0>)
 80038ae:	f043 0304 	orr.w	r3, r3, #4
 80038b2:	61d3      	str	r3, [r2, #28]
 80038b4:	4b17      	ldr	r3, [pc, #92]	; (8003914 <HAL_TIM_Encoder_MspInit+0xe0>)
 80038b6:	69db      	ldr	r3, [r3, #28]
 80038b8:	f003 0304 	and.w	r3, r3, #4
 80038bc:	60fb      	str	r3, [r7, #12]
 80038be:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038c0:	4b14      	ldr	r3, [pc, #80]	; (8003914 <HAL_TIM_Encoder_MspInit+0xe0>)
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	4a13      	ldr	r2, [pc, #76]	; (8003914 <HAL_TIM_Encoder_MspInit+0xe0>)
 80038c6:	f043 0308 	orr.w	r3, r3, #8
 80038ca:	6193      	str	r3, [r2, #24]
 80038cc:	4b11      	ldr	r3, [pc, #68]	; (8003914 <HAL_TIM_Encoder_MspInit+0xe0>)
 80038ce:	699b      	ldr	r3, [r3, #24]
 80038d0:	f003 0308 	and.w	r3, r3, #8
 80038d4:	60bb      	str	r3, [r7, #8]
 80038d6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MA2_Pin;
 80038d8:	2340      	movs	r3, #64	; 0x40
 80038da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80038dc:	2300      	movs	r3, #0
 80038de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038e0:	2300      	movs	r3, #0
 80038e2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(MA2_GPIO_Port, &GPIO_InitStruct);
 80038e4:	f107 0318 	add.w	r3, r7, #24
 80038e8:	4619      	mov	r1, r3
 80038ea:	480d      	ldr	r0, [pc, #52]	; (8003920 <HAL_TIM_Encoder_MspInit+0xec>)
 80038ec:	f001 f8d4 	bl	8004a98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MA1_Pin;
 80038f0:	2380      	movs	r3, #128	; 0x80
 80038f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80038f4:	2300      	movs	r3, #0
 80038f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038f8:	2300      	movs	r3, #0
 80038fa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(MA1_GPIO_Port, &GPIO_InitStruct);
 80038fc:	f107 0318 	add.w	r3, r7, #24
 8003900:	4619      	mov	r1, r3
 8003902:	4807      	ldr	r0, [pc, #28]	; (8003920 <HAL_TIM_Encoder_MspInit+0xec>)
 8003904:	f001 f8c8 	bl	8004a98 <HAL_GPIO_Init>
}
 8003908:	bf00      	nop
 800390a:	3728      	adds	r7, #40	; 0x28
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	40000400 	.word	0x40000400
 8003914:	40021000 	.word	0x40021000
 8003918:	40010800 	.word	0x40010800
 800391c:	40000800 	.word	0x40000800
 8003920:	40010c00 	.word	0x40010c00

08003924 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b088      	sub	sp, #32
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800392c:	f107 030c 	add.w	r3, r7, #12
 8003930:	2200      	movs	r2, #0
 8003932:	601a      	str	r2, [r3, #0]
 8003934:	605a      	str	r2, [r3, #4]
 8003936:	609a      	str	r2, [r3, #8]
 8003938:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003942:	d12a      	bne.n	800399a <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003944:	4b17      	ldr	r3, [pc, #92]	; (80039a4 <HAL_TIM_MspPostInit+0x80>)
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	4a16      	ldr	r2, [pc, #88]	; (80039a4 <HAL_TIM_MspPostInit+0x80>)
 800394a:	f043 0308 	orr.w	r3, r3, #8
 800394e:	6193      	str	r3, [r2, #24]
 8003950:	4b14      	ldr	r3, [pc, #80]	; (80039a4 <HAL_TIM_MspPostInit+0x80>)
 8003952:	699b      	ldr	r3, [r3, #24]
 8003954:	f003 0308 	and.w	r3, r3, #8
 8003958:	60bb      	str	r3, [r7, #8]
 800395a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 800395c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003960:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003962:	2302      	movs	r3, #2
 8003964:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003966:	2302      	movs	r3, #2
 8003968:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800396a:	f107 030c 	add.w	r3, r7, #12
 800396e:	4619      	mov	r1, r3
 8003970:	480d      	ldr	r0, [pc, #52]	; (80039a8 <HAL_TIM_MspPostInit+0x84>)
 8003972:	f001 f891 	bl	8004a98 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 8003976:	4b0d      	ldr	r3, [pc, #52]	; (80039ac <HAL_TIM_MspPostInit+0x88>)
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	61fb      	str	r3, [r7, #28]
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003982:	61fb      	str	r3, [r7, #28]
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800398a:	61fb      	str	r3, [r7, #28]
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003992:	61fb      	str	r3, [r7, #28]
 8003994:	4a05      	ldr	r2, [pc, #20]	; (80039ac <HAL_TIM_MspPostInit+0x88>)
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800399a:	bf00      	nop
 800399c:	3720      	adds	r7, #32
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	40021000 	.word	0x40021000
 80039a8:	40010c00 	.word	0x40010c00
 80039ac:	40010000 	.word	0x40010000

080039b0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80039b4:	4b11      	ldr	r3, [pc, #68]	; (80039fc <MX_USART1_UART_Init+0x4c>)
 80039b6:	4a12      	ldr	r2, [pc, #72]	; (8003a00 <MX_USART1_UART_Init+0x50>)
 80039b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80039ba:	4b10      	ldr	r3, [pc, #64]	; (80039fc <MX_USART1_UART_Init+0x4c>)
 80039bc:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80039c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80039c2:	4b0e      	ldr	r3, [pc, #56]	; (80039fc <MX_USART1_UART_Init+0x4c>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80039c8:	4b0c      	ldr	r3, [pc, #48]	; (80039fc <MX_USART1_UART_Init+0x4c>)
 80039ca:	2200      	movs	r2, #0
 80039cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80039ce:	4b0b      	ldr	r3, [pc, #44]	; (80039fc <MX_USART1_UART_Init+0x4c>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80039d4:	4b09      	ldr	r3, [pc, #36]	; (80039fc <MX_USART1_UART_Init+0x4c>)
 80039d6:	220c      	movs	r2, #12
 80039d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80039da:	4b08      	ldr	r3, [pc, #32]	; (80039fc <MX_USART1_UART_Init+0x4c>)
 80039dc:	2200      	movs	r2, #0
 80039de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80039e0:	4b06      	ldr	r3, [pc, #24]	; (80039fc <MX_USART1_UART_Init+0x4c>)
 80039e2:	2200      	movs	r2, #0
 80039e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80039e6:	4805      	ldr	r0, [pc, #20]	; (80039fc <MX_USART1_UART_Init+0x4c>)
 80039e8:	f002 fc26 	bl	8006238 <HAL_UART_Init>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d001      	beq.n	80039f6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80039f2:	f7ff fbd3 	bl	800319c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80039f6:	bf00      	nop
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	20002b74 	.word	0x20002b74
 8003a00:	40013800 	.word	0x40013800

08003a04 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b088      	sub	sp, #32
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a0c:	f107 0310 	add.w	r3, r7, #16
 8003a10:	2200      	movs	r2, #0
 8003a12:	601a      	str	r2, [r3, #0]
 8003a14:	605a      	str	r2, [r3, #4]
 8003a16:	609a      	str	r2, [r3, #8]
 8003a18:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a20      	ldr	r2, [pc, #128]	; (8003aa0 <HAL_UART_MspInit+0x9c>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d139      	bne.n	8003a98 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003a24:	4b1f      	ldr	r3, [pc, #124]	; (8003aa4 <HAL_UART_MspInit+0xa0>)
 8003a26:	699b      	ldr	r3, [r3, #24]
 8003a28:	4a1e      	ldr	r2, [pc, #120]	; (8003aa4 <HAL_UART_MspInit+0xa0>)
 8003a2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a2e:	6193      	str	r3, [r2, #24]
 8003a30:	4b1c      	ldr	r3, [pc, #112]	; (8003aa4 <HAL_UART_MspInit+0xa0>)
 8003a32:	699b      	ldr	r3, [r3, #24]
 8003a34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a38:	60fb      	str	r3, [r7, #12]
 8003a3a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a3c:	4b19      	ldr	r3, [pc, #100]	; (8003aa4 <HAL_UART_MspInit+0xa0>)
 8003a3e:	699b      	ldr	r3, [r3, #24]
 8003a40:	4a18      	ldr	r2, [pc, #96]	; (8003aa4 <HAL_UART_MspInit+0xa0>)
 8003a42:	f043 0304 	orr.w	r3, r3, #4
 8003a46:	6193      	str	r3, [r2, #24]
 8003a48:	4b16      	ldr	r3, [pc, #88]	; (8003aa4 <HAL_UART_MspInit+0xa0>)
 8003a4a:	699b      	ldr	r3, [r3, #24]
 8003a4c:	f003 0304 	and.w	r3, r3, #4
 8003a50:	60bb      	str	r3, [r7, #8]
 8003a52:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003a54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a58:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a5a:	2302      	movs	r3, #2
 8003a5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a62:	f107 0310 	add.w	r3, r7, #16
 8003a66:	4619      	mov	r1, r3
 8003a68:	480f      	ldr	r0, [pc, #60]	; (8003aa8 <HAL_UART_MspInit+0xa4>)
 8003a6a:	f001 f815 	bl	8004a98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003a6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a74:	2300      	movs	r3, #0
 8003a76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a7c:	f107 0310 	add.w	r3, r7, #16
 8003a80:	4619      	mov	r1, r3
 8003a82:	4809      	ldr	r0, [pc, #36]	; (8003aa8 <HAL_UART_MspInit+0xa4>)
 8003a84:	f001 f808 	bl	8004a98 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003a88:	2200      	movs	r2, #0
 8003a8a:	2100      	movs	r1, #0
 8003a8c:	2025      	movs	r0, #37	; 0x25
 8003a8e:	f000 fd2e 	bl	80044ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003a92:	2025      	movs	r0, #37	; 0x25
 8003a94:	f000 fd47 	bl	8004526 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003a98:	bf00      	nop
 8003a9a:	3720      	adds	r7, #32
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	40013800 	.word	0x40013800
 8003aa4:	40021000 	.word	0x40021000
 8003aa8:	40010800 	.word	0x40010800

08003aac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
	ldr r0, =_sdata
 8003aac:	480c      	ldr	r0, [pc, #48]	; (8003ae0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003aae:	490d      	ldr	r1, [pc, #52]	; (8003ae4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003ab0:	4a0d      	ldr	r2, [pc, #52]	; (8003ae8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003ab2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ab4:	e002      	b.n	8003abc <LoopCopyDataInit>

08003ab6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ab6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ab8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003aba:	3304      	adds	r3, #4

08003abc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003abc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003abe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ac0:	d3f9      	bcc.n	8003ab6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ac2:	4a0a      	ldr	r2, [pc, #40]	; (8003aec <LoopFillZerobss+0x1e>)
 ldr r4, =_ebss
 8003ac4:	4c0a      	ldr	r4, [pc, #40]	; (8003af0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003ac6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ac8:	e001      	b.n	8003ace <LoopFillZerobss>

08003aca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003aca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003acc:	3204      	adds	r2, #4

08003ace <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ace:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ad0:	d3fb      	bcc.n	8003aca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003ad2:	f7ff fd81 	bl	80035d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003ad6:	f003 ff6f 	bl	80079b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003ada:	f7fd fc71 	bl	80013c0 <main>
  bx lr
 8003ade:	4770      	bx	lr
	ldr r0, =_sdata
 8003ae0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ae4:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8003ae8:	08007a88 	.word	0x08007a88
  ldr r2, =_sbss
 8003aec:	200000ac 	.word	0x200000ac
 ldr r4, =_ebss
 8003af0:	20002bbc 	.word	0x20002bbc

08003af4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003af4:	e7fe      	b.n	8003af4 <ADC1_2_IRQHandler>
	...

08003af8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003afc:	4b08      	ldr	r3, [pc, #32]	; (8003b20 <HAL_Init+0x28>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a07      	ldr	r2, [pc, #28]	; (8003b20 <HAL_Init+0x28>)
 8003b02:	f043 0310 	orr.w	r3, r3, #16
 8003b06:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b08:	2003      	movs	r0, #3
 8003b0a:	f000 fce5 	bl	80044d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b0e:	200f      	movs	r0, #15
 8003b10:	f000 f808 	bl	8003b24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b14:	f7ff fcf2 	bl	80034fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	40022000 	.word	0x40022000

08003b24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b082      	sub	sp, #8
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b2c:	4b12      	ldr	r3, [pc, #72]	; (8003b78 <HAL_InitTick+0x54>)
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	4b12      	ldr	r3, [pc, #72]	; (8003b7c <HAL_InitTick+0x58>)
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	4619      	mov	r1, r3
 8003b36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b42:	4618      	mov	r0, r3
 8003b44:	f000 fcfd 	bl	8004542 <HAL_SYSTICK_Config>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d001      	beq.n	8003b52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e00e      	b.n	8003b70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2b0f      	cmp	r3, #15
 8003b56:	d80a      	bhi.n	8003b6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b58:	2200      	movs	r2, #0
 8003b5a:	6879      	ldr	r1, [r7, #4]
 8003b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b60:	f000 fcc5 	bl	80044ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b64:	4a06      	ldr	r2, [pc, #24]	; (8003b80 <HAL_InitTick+0x5c>)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	e000      	b.n	8003b70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3708      	adds	r7, #8
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	2000003c 	.word	0x2000003c
 8003b7c:	20000044 	.word	0x20000044
 8003b80:	20000040 	.word	0x20000040

08003b84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b84:	b480      	push	{r7}
 8003b86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b88:	4b05      	ldr	r3, [pc, #20]	; (8003ba0 <HAL_IncTick+0x1c>)
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	4b05      	ldr	r3, [pc, #20]	; (8003ba4 <HAL_IncTick+0x20>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4413      	add	r3, r2
 8003b94:	4a03      	ldr	r2, [pc, #12]	; (8003ba4 <HAL_IncTick+0x20>)
 8003b96:	6013      	str	r3, [r2, #0]
}
 8003b98:	bf00      	nop
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bc80      	pop	{r7}
 8003b9e:	4770      	bx	lr
 8003ba0:	20000044 	.word	0x20000044
 8003ba4:	20002bb8 	.word	0x20002bb8

08003ba8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	af00      	add	r7, sp, #0
  return uwTick;
 8003bac:	4b02      	ldr	r3, [pc, #8]	; (8003bb8 <HAL_GetTick+0x10>)
 8003bae:	681b      	ldr	r3, [r3, #0]
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bc80      	pop	{r7}
 8003bb6:	4770      	bx	lr
 8003bb8:	20002bb8 	.word	0x20002bb8

08003bbc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b086      	sub	sp, #24
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d101      	bne.n	8003bde <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e0be      	b.n	8003d5c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d109      	bne.n	8003c00 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f7fd fac8 	bl	8001190 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f000 faf5 	bl	80041f0 <ADC_ConversionStop_Disable>
 8003c06:	4603      	mov	r3, r0
 8003c08:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c0e:	f003 0310 	and.w	r3, r3, #16
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	f040 8099 	bne.w	8003d4a <HAL_ADC_Init+0x18e>
 8003c18:	7dfb      	ldrb	r3, [r7, #23]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	f040 8095 	bne.w	8003d4a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c24:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003c28:	f023 0302 	bic.w	r3, r3, #2
 8003c2c:	f043 0202 	orr.w	r2, r3, #2
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003c3c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	7b1b      	ldrb	r3, [r3, #12]
 8003c42:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003c44:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003c46:	68ba      	ldr	r2, [r7, #8]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c54:	d003      	beq.n	8003c5e <HAL_ADC_Init+0xa2>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d102      	bne.n	8003c64 <HAL_ADC_Init+0xa8>
 8003c5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c62:	e000      	b.n	8003c66 <HAL_ADC_Init+0xaa>
 8003c64:	2300      	movs	r3, #0
 8003c66:	693a      	ldr	r2, [r7, #16]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	7d1b      	ldrb	r3, [r3, #20]
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d119      	bne.n	8003ca8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	7b1b      	ldrb	r3, [r3, #12]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d109      	bne.n	8003c90 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	699b      	ldr	r3, [r3, #24]
 8003c80:	3b01      	subs	r3, #1
 8003c82:	035a      	lsls	r2, r3, #13
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003c8c:	613b      	str	r3, [r7, #16]
 8003c8e:	e00b      	b.n	8003ca8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c94:	f043 0220 	orr.w	r2, r3, #32
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca0:	f043 0201 	orr.w	r2, r3, #1
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	693a      	ldr	r2, [r7, #16]
 8003cb8:	430a      	orrs	r2, r1
 8003cba:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	689a      	ldr	r2, [r3, #8]
 8003cc2:	4b28      	ldr	r3, [pc, #160]	; (8003d64 <HAL_ADC_Init+0x1a8>)
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	6812      	ldr	r2, [r2, #0]
 8003cca:	68b9      	ldr	r1, [r7, #8]
 8003ccc:	430b      	orrs	r3, r1
 8003cce:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cd8:	d003      	beq.n	8003ce2 <HAL_ADC_Init+0x126>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d104      	bne.n	8003cec <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	051b      	lsls	r3, r3, #20
 8003cea:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	68fa      	ldr	r2, [r7, #12]
 8003cfc:	430a      	orrs	r2, r1
 8003cfe:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	689a      	ldr	r2, [r3, #8]
 8003d06:	4b18      	ldr	r3, [pc, #96]	; (8003d68 <HAL_ADC_Init+0x1ac>)
 8003d08:	4013      	ands	r3, r2
 8003d0a:	68ba      	ldr	r2, [r7, #8]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d10b      	bne.n	8003d28 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d1a:	f023 0303 	bic.w	r3, r3, #3
 8003d1e:	f043 0201 	orr.w	r2, r3, #1
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003d26:	e018      	b.n	8003d5a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d2c:	f023 0312 	bic.w	r3, r3, #18
 8003d30:	f043 0210 	orr.w	r2, r3, #16
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3c:	f043 0201 	orr.w	r2, r3, #1
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003d48:	e007      	b.n	8003d5a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d4e:	f043 0210 	orr.w	r2, r3, #16
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003d5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3718      	adds	r7, #24
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	ffe1f7fd 	.word	0xffe1f7fd
 8003d68:	ff1f0efe 	.word	0xff1f0efe

08003d6c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b086      	sub	sp, #24
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	60b9      	str	r1, [r7, #8]
 8003d76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a64      	ldr	r2, [pc, #400]	; (8003f14 <HAL_ADC_Start_DMA+0x1a8>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d004      	beq.n	8003d90 <HAL_ADC_Start_DMA+0x24>
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a63      	ldr	r2, [pc, #396]	; (8003f18 <HAL_ADC_Start_DMA+0x1ac>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d106      	bne.n	8003d9e <HAL_ADC_Start_DMA+0x32>
 8003d90:	4b60      	ldr	r3, [pc, #384]	; (8003f14 <HAL_ADC_Start_DMA+0x1a8>)
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	f040 80b3 	bne.w	8003f04 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d101      	bne.n	8003dac <HAL_ADC_Start_DMA+0x40>
 8003da8:	2302      	movs	r3, #2
 8003daa:	e0ae      	b.n	8003f0a <HAL_ADC_Start_DMA+0x19e>
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003db4:	68f8      	ldr	r0, [r7, #12]
 8003db6:	f000 f9c1 	bl	800413c <ADC_Enable>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003dbe:	7dfb      	ldrb	r3, [r7, #23]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	f040 809a 	bne.w	8003efa <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dca:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003dce:	f023 0301 	bic.w	r3, r3, #1
 8003dd2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a4e      	ldr	r2, [pc, #312]	; (8003f18 <HAL_ADC_Start_DMA+0x1ac>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d105      	bne.n	8003df0 <HAL_ADC_Start_DMA+0x84>
 8003de4:	4b4b      	ldr	r3, [pc, #300]	; (8003f14 <HAL_ADC_Start_DMA+0x1a8>)
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d115      	bne.n	8003e1c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d026      	beq.n	8003e58 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e0e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003e12:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003e1a:	e01d      	b.n	8003e58 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e20:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a39      	ldr	r2, [pc, #228]	; (8003f14 <HAL_ADC_Start_DMA+0x1a8>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d004      	beq.n	8003e3c <HAL_ADC_Start_DMA+0xd0>
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a38      	ldr	r2, [pc, #224]	; (8003f18 <HAL_ADC_Start_DMA+0x1ac>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d10d      	bne.n	8003e58 <HAL_ADC_Start_DMA+0xec>
 8003e3c:	4b35      	ldr	r3, [pc, #212]	; (8003f14 <HAL_ADC_Start_DMA+0x1a8>)
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d007      	beq.n	8003e58 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e4c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003e50:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d006      	beq.n	8003e72 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e68:	f023 0206 	bic.w	r2, r3, #6
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003e70:	e002      	b.n	8003e78 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2200      	movs	r2, #0
 8003e76:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6a1b      	ldr	r3, [r3, #32]
 8003e84:	4a25      	ldr	r2, [pc, #148]	; (8003f1c <HAL_ADC_Start_DMA+0x1b0>)
 8003e86:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6a1b      	ldr	r3, [r3, #32]
 8003e8c:	4a24      	ldr	r2, [pc, #144]	; (8003f20 <HAL_ADC_Start_DMA+0x1b4>)
 8003e8e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6a1b      	ldr	r3, [r3, #32]
 8003e94:	4a23      	ldr	r2, [pc, #140]	; (8003f24 <HAL_ADC_Start_DMA+0x1b8>)
 8003e96:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f06f 0202 	mvn.w	r2, #2
 8003ea0:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	689a      	ldr	r2, [r3, #8]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003eb0:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6a18      	ldr	r0, [r3, #32]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	334c      	adds	r3, #76	; 0x4c
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	68ba      	ldr	r2, [r7, #8]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f000 fba5 	bl	8004610 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003ed0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003ed4:	d108      	bne.n	8003ee8 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	689a      	ldr	r2, [r3, #8]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003ee4:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003ee6:	e00f      	b.n	8003f08 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	689a      	ldr	r2, [r3, #8]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003ef6:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003ef8:	e006      	b.n	8003f08 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8003f02:	e001      	b.n	8003f08 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003f08:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3718      	adds	r7, #24
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	40012400 	.word	0x40012400
 8003f18:	40012800 	.word	0x40012800
 8003f1c:	08004273 	.word	0x08004273
 8003f20:	080042ef 	.word	0x080042ef
 8003f24:	0800430b 	.word	0x0800430b

08003f28 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003f30:	bf00      	nop
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bc80      	pop	{r7}
 8003f38:	4770      	bx	lr

08003f3a <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003f3a:	b480      	push	{r7}
 8003f3c:	b083      	sub	sp, #12
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003f42:	bf00      	nop
 8003f44:	370c      	adds	r7, #12
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bc80      	pop	{r7}
 8003f4a:	4770      	bx	lr

08003f4c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003f4c:	b480      	push	{r7}
 8003f4e:	b085      	sub	sp, #20
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f56:	2300      	movs	r3, #0
 8003f58:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d101      	bne.n	8003f6c <HAL_ADC_ConfigChannel+0x20>
 8003f68:	2302      	movs	r3, #2
 8003f6a:	e0dc      	b.n	8004126 <HAL_ADC_ConfigChannel+0x1da>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	2b06      	cmp	r3, #6
 8003f7a:	d81c      	bhi.n	8003fb6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	685a      	ldr	r2, [r3, #4]
 8003f86:	4613      	mov	r3, r2
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	4413      	add	r3, r2
 8003f8c:	3b05      	subs	r3, #5
 8003f8e:	221f      	movs	r2, #31
 8003f90:	fa02 f303 	lsl.w	r3, r2, r3
 8003f94:	43db      	mvns	r3, r3
 8003f96:	4019      	ands	r1, r3
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	6818      	ldr	r0, [r3, #0]
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	685a      	ldr	r2, [r3, #4]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	4413      	add	r3, r2
 8003fa6:	3b05      	subs	r3, #5
 8003fa8:	fa00 f203 	lsl.w	r2, r0, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	430a      	orrs	r2, r1
 8003fb2:	635a      	str	r2, [r3, #52]	; 0x34
 8003fb4:	e03c      	b.n	8004030 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	2b0c      	cmp	r3, #12
 8003fbc:	d81c      	bhi.n	8003ff8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	685a      	ldr	r2, [r3, #4]
 8003fc8:	4613      	mov	r3, r2
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	4413      	add	r3, r2
 8003fce:	3b23      	subs	r3, #35	; 0x23
 8003fd0:	221f      	movs	r2, #31
 8003fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd6:	43db      	mvns	r3, r3
 8003fd8:	4019      	ands	r1, r3
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	6818      	ldr	r0, [r3, #0]
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	685a      	ldr	r2, [r3, #4]
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	4413      	add	r3, r2
 8003fe8:	3b23      	subs	r3, #35	; 0x23
 8003fea:	fa00 f203 	lsl.w	r2, r0, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	430a      	orrs	r2, r1
 8003ff4:	631a      	str	r2, [r3, #48]	; 0x30
 8003ff6:	e01b      	b.n	8004030 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	685a      	ldr	r2, [r3, #4]
 8004002:	4613      	mov	r3, r2
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	4413      	add	r3, r2
 8004008:	3b41      	subs	r3, #65	; 0x41
 800400a:	221f      	movs	r2, #31
 800400c:	fa02 f303 	lsl.w	r3, r2, r3
 8004010:	43db      	mvns	r3, r3
 8004012:	4019      	ands	r1, r3
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	6818      	ldr	r0, [r3, #0]
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	685a      	ldr	r2, [r3, #4]
 800401c:	4613      	mov	r3, r2
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	4413      	add	r3, r2
 8004022:	3b41      	subs	r3, #65	; 0x41
 8004024:	fa00 f203 	lsl.w	r2, r0, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	430a      	orrs	r2, r1
 800402e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2b09      	cmp	r3, #9
 8004036:	d91c      	bls.n	8004072 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68d9      	ldr	r1, [r3, #12]
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	4613      	mov	r3, r2
 8004044:	005b      	lsls	r3, r3, #1
 8004046:	4413      	add	r3, r2
 8004048:	3b1e      	subs	r3, #30
 800404a:	2207      	movs	r2, #7
 800404c:	fa02 f303 	lsl.w	r3, r2, r3
 8004050:	43db      	mvns	r3, r3
 8004052:	4019      	ands	r1, r3
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	6898      	ldr	r0, [r3, #8]
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	4613      	mov	r3, r2
 800405e:	005b      	lsls	r3, r3, #1
 8004060:	4413      	add	r3, r2
 8004062:	3b1e      	subs	r3, #30
 8004064:	fa00 f203 	lsl.w	r2, r0, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	430a      	orrs	r2, r1
 800406e:	60da      	str	r2, [r3, #12]
 8004070:	e019      	b.n	80040a6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	6919      	ldr	r1, [r3, #16]
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	4613      	mov	r3, r2
 800407e:	005b      	lsls	r3, r3, #1
 8004080:	4413      	add	r3, r2
 8004082:	2207      	movs	r2, #7
 8004084:	fa02 f303 	lsl.w	r3, r2, r3
 8004088:	43db      	mvns	r3, r3
 800408a:	4019      	ands	r1, r3
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	6898      	ldr	r0, [r3, #8]
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	4613      	mov	r3, r2
 8004096:	005b      	lsls	r3, r3, #1
 8004098:	4413      	add	r3, r2
 800409a:	fa00 f203 	lsl.w	r2, r0, r3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	430a      	orrs	r2, r1
 80040a4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	2b10      	cmp	r3, #16
 80040ac:	d003      	beq.n	80040b6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80040b2:	2b11      	cmp	r3, #17
 80040b4:	d132      	bne.n	800411c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a1d      	ldr	r2, [pc, #116]	; (8004130 <HAL_ADC_ConfigChannel+0x1e4>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d125      	bne.n	800410c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d126      	bne.n	800411c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	689a      	ldr	r2, [r3, #8]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80040dc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2b10      	cmp	r3, #16
 80040e4:	d11a      	bne.n	800411c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80040e6:	4b13      	ldr	r3, [pc, #76]	; (8004134 <HAL_ADC_ConfigChannel+0x1e8>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a13      	ldr	r2, [pc, #76]	; (8004138 <HAL_ADC_ConfigChannel+0x1ec>)
 80040ec:	fba2 2303 	umull	r2, r3, r2, r3
 80040f0:	0c9a      	lsrs	r2, r3, #18
 80040f2:	4613      	mov	r3, r2
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	4413      	add	r3, r2
 80040f8:	005b      	lsls	r3, r3, #1
 80040fa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80040fc:	e002      	b.n	8004104 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	3b01      	subs	r3, #1
 8004102:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d1f9      	bne.n	80040fe <HAL_ADC_ConfigChannel+0x1b2>
 800410a:	e007      	b.n	800411c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004110:	f043 0220 	orr.w	r2, r3, #32
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004124:	7bfb      	ldrb	r3, [r7, #15]
}
 8004126:	4618      	mov	r0, r3
 8004128:	3714      	adds	r7, #20
 800412a:	46bd      	mov	sp, r7
 800412c:	bc80      	pop	{r7}
 800412e:	4770      	bx	lr
 8004130:	40012400 	.word	0x40012400
 8004134:	2000003c 	.word	0x2000003c
 8004138:	431bde83 	.word	0x431bde83

0800413c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004144:	2300      	movs	r3, #0
 8004146:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8004148:	2300      	movs	r3, #0
 800414a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	f003 0301 	and.w	r3, r3, #1
 8004156:	2b01      	cmp	r3, #1
 8004158:	d040      	beq.n	80041dc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	689a      	ldr	r2, [r3, #8]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f042 0201 	orr.w	r2, r2, #1
 8004168:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800416a:	4b1f      	ldr	r3, [pc, #124]	; (80041e8 <ADC_Enable+0xac>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a1f      	ldr	r2, [pc, #124]	; (80041ec <ADC_Enable+0xb0>)
 8004170:	fba2 2303 	umull	r2, r3, r2, r3
 8004174:	0c9b      	lsrs	r3, r3, #18
 8004176:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004178:	e002      	b.n	8004180 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	3b01      	subs	r3, #1
 800417e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d1f9      	bne.n	800417a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004186:	f7ff fd0f 	bl	8003ba8 <HAL_GetTick>
 800418a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800418c:	e01f      	b.n	80041ce <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800418e:	f7ff fd0b 	bl	8003ba8 <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	2b02      	cmp	r3, #2
 800419a:	d918      	bls.n	80041ce <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f003 0301 	and.w	r3, r3, #1
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d011      	beq.n	80041ce <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ae:	f043 0210 	orr.w	r2, r3, #16
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ba:	f043 0201 	orr.w	r2, r3, #1
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e007      	b.n	80041de <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f003 0301 	and.w	r3, r3, #1
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d1d8      	bne.n	800418e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3710      	adds	r7, #16
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	2000003c 	.word	0x2000003c
 80041ec:	431bde83 	.word	0x431bde83

080041f0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80041f8:	2300      	movs	r3, #0
 80041fa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f003 0301 	and.w	r3, r3, #1
 8004206:	2b01      	cmp	r3, #1
 8004208:	d12e      	bne.n	8004268 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	689a      	ldr	r2, [r3, #8]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f022 0201 	bic.w	r2, r2, #1
 8004218:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800421a:	f7ff fcc5 	bl	8003ba8 <HAL_GetTick>
 800421e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004220:	e01b      	b.n	800425a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004222:	f7ff fcc1 	bl	8003ba8 <HAL_GetTick>
 8004226:	4602      	mov	r2, r0
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	2b02      	cmp	r3, #2
 800422e:	d914      	bls.n	800425a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	f003 0301 	and.w	r3, r3, #1
 800423a:	2b01      	cmp	r3, #1
 800423c:	d10d      	bne.n	800425a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004242:	f043 0210 	orr.w	r2, r3, #16
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800424e:	f043 0201 	orr.w	r2, r3, #1
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e007      	b.n	800426a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f003 0301 	and.w	r3, r3, #1
 8004264:	2b01      	cmp	r3, #1
 8004266:	d0dc      	beq.n	8004222 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004268:	2300      	movs	r3, #0
}
 800426a:	4618      	mov	r0, r3
 800426c:	3710      	adds	r7, #16
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}

08004272 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004272:	b580      	push	{r7, lr}
 8004274:	b084      	sub	sp, #16
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427e:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004284:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004288:	2b00      	cmp	r3, #0
 800428a:	d127      	bne.n	80042dc <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004290:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80042a2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80042a6:	d115      	bne.n	80042d4 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d111      	bne.n	80042d4 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d105      	bne.n	80042d4 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042cc:	f043 0201 	orr.w	r2, r3, #1
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80042d4:	68f8      	ldr	r0, [r7, #12]
 80042d6:	f7fe fd9b 	bl	8002e10 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80042da:	e004      	b.n	80042e6 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6a1b      	ldr	r3, [r3, #32]
 80042e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	4798      	blx	r3
}
 80042e6:	bf00      	nop
 80042e8:	3710      	adds	r7, #16
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}

080042ee <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80042ee:	b580      	push	{r7, lr}
 80042f0:	b084      	sub	sp, #16
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fa:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80042fc:	68f8      	ldr	r0, [r7, #12]
 80042fe:	f7ff fe13 	bl	8003f28 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004302:	bf00      	nop
 8004304:	3710      	adds	r7, #16
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}

0800430a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800430a:	b580      	push	{r7, lr}
 800430c:	b084      	sub	sp, #16
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004316:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800431c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004328:	f043 0204 	orr.w	r2, r3, #4
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004330:	68f8      	ldr	r0, [r7, #12]
 8004332:	f7ff fe02 	bl	8003f3a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004336:	bf00      	nop
 8004338:	3710      	adds	r7, #16
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
	...

08004340 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004340:	b480      	push	{r7}
 8004342:	b085      	sub	sp, #20
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f003 0307 	and.w	r3, r3, #7
 800434e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004350:	4b0c      	ldr	r3, [pc, #48]	; (8004384 <__NVIC_SetPriorityGrouping+0x44>)
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004356:	68ba      	ldr	r2, [r7, #8]
 8004358:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800435c:	4013      	ands	r3, r2
 800435e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004368:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800436c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004370:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004372:	4a04      	ldr	r2, [pc, #16]	; (8004384 <__NVIC_SetPriorityGrouping+0x44>)
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	60d3      	str	r3, [r2, #12]
}
 8004378:	bf00      	nop
 800437a:	3714      	adds	r7, #20
 800437c:	46bd      	mov	sp, r7
 800437e:	bc80      	pop	{r7}
 8004380:	4770      	bx	lr
 8004382:	bf00      	nop
 8004384:	e000ed00 	.word	0xe000ed00

08004388 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004388:	b480      	push	{r7}
 800438a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800438c:	4b04      	ldr	r3, [pc, #16]	; (80043a0 <__NVIC_GetPriorityGrouping+0x18>)
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	0a1b      	lsrs	r3, r3, #8
 8004392:	f003 0307 	and.w	r3, r3, #7
}
 8004396:	4618      	mov	r0, r3
 8004398:	46bd      	mov	sp, r7
 800439a:	bc80      	pop	{r7}
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	e000ed00 	.word	0xe000ed00

080043a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	4603      	mov	r3, r0
 80043ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	db0b      	blt.n	80043ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043b6:	79fb      	ldrb	r3, [r7, #7]
 80043b8:	f003 021f 	and.w	r2, r3, #31
 80043bc:	4906      	ldr	r1, [pc, #24]	; (80043d8 <__NVIC_EnableIRQ+0x34>)
 80043be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043c2:	095b      	lsrs	r3, r3, #5
 80043c4:	2001      	movs	r0, #1
 80043c6:	fa00 f202 	lsl.w	r2, r0, r2
 80043ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80043ce:	bf00      	nop
 80043d0:	370c      	adds	r7, #12
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bc80      	pop	{r7}
 80043d6:	4770      	bx	lr
 80043d8:	e000e100 	.word	0xe000e100

080043dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	4603      	mov	r3, r0
 80043e4:	6039      	str	r1, [r7, #0]
 80043e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	db0a      	blt.n	8004406 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	b2da      	uxtb	r2, r3
 80043f4:	490c      	ldr	r1, [pc, #48]	; (8004428 <__NVIC_SetPriority+0x4c>)
 80043f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043fa:	0112      	lsls	r2, r2, #4
 80043fc:	b2d2      	uxtb	r2, r2
 80043fe:	440b      	add	r3, r1
 8004400:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004404:	e00a      	b.n	800441c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	b2da      	uxtb	r2, r3
 800440a:	4908      	ldr	r1, [pc, #32]	; (800442c <__NVIC_SetPriority+0x50>)
 800440c:	79fb      	ldrb	r3, [r7, #7]
 800440e:	f003 030f 	and.w	r3, r3, #15
 8004412:	3b04      	subs	r3, #4
 8004414:	0112      	lsls	r2, r2, #4
 8004416:	b2d2      	uxtb	r2, r2
 8004418:	440b      	add	r3, r1
 800441a:	761a      	strb	r2, [r3, #24]
}
 800441c:	bf00      	nop
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	bc80      	pop	{r7}
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop
 8004428:	e000e100 	.word	0xe000e100
 800442c:	e000ed00 	.word	0xe000ed00

08004430 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004430:	b480      	push	{r7}
 8004432:	b089      	sub	sp, #36	; 0x24
 8004434:	af00      	add	r7, sp, #0
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f003 0307 	and.w	r3, r3, #7
 8004442:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	f1c3 0307 	rsb	r3, r3, #7
 800444a:	2b04      	cmp	r3, #4
 800444c:	bf28      	it	cs
 800444e:	2304      	movcs	r3, #4
 8004450:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	3304      	adds	r3, #4
 8004456:	2b06      	cmp	r3, #6
 8004458:	d902      	bls.n	8004460 <NVIC_EncodePriority+0x30>
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	3b03      	subs	r3, #3
 800445e:	e000      	b.n	8004462 <NVIC_EncodePriority+0x32>
 8004460:	2300      	movs	r3, #0
 8004462:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004464:	f04f 32ff 	mov.w	r2, #4294967295
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	fa02 f303 	lsl.w	r3, r2, r3
 800446e:	43da      	mvns	r2, r3
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	401a      	ands	r2, r3
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004478:	f04f 31ff 	mov.w	r1, #4294967295
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	fa01 f303 	lsl.w	r3, r1, r3
 8004482:	43d9      	mvns	r1, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004488:	4313      	orrs	r3, r2
         );
}
 800448a:	4618      	mov	r0, r3
 800448c:	3724      	adds	r7, #36	; 0x24
 800448e:	46bd      	mov	sp, r7
 8004490:	bc80      	pop	{r7}
 8004492:	4770      	bx	lr

08004494 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b082      	sub	sp, #8
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	3b01      	subs	r3, #1
 80044a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80044a4:	d301      	bcc.n	80044aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80044a6:	2301      	movs	r3, #1
 80044a8:	e00f      	b.n	80044ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80044aa:	4a0a      	ldr	r2, [pc, #40]	; (80044d4 <SysTick_Config+0x40>)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	3b01      	subs	r3, #1
 80044b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80044b2:	210f      	movs	r1, #15
 80044b4:	f04f 30ff 	mov.w	r0, #4294967295
 80044b8:	f7ff ff90 	bl	80043dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80044bc:	4b05      	ldr	r3, [pc, #20]	; (80044d4 <SysTick_Config+0x40>)
 80044be:	2200      	movs	r2, #0
 80044c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80044c2:	4b04      	ldr	r3, [pc, #16]	; (80044d4 <SysTick_Config+0x40>)
 80044c4:	2207      	movs	r2, #7
 80044c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3708      	adds	r7, #8
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	e000e010 	.word	0xe000e010

080044d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f7ff ff2d 	bl	8004340 <__NVIC_SetPriorityGrouping>
}
 80044e6:	bf00      	nop
 80044e8:	3708      	adds	r7, #8
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}

080044ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80044ee:	b580      	push	{r7, lr}
 80044f0:	b086      	sub	sp, #24
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	4603      	mov	r3, r0
 80044f6:	60b9      	str	r1, [r7, #8]
 80044f8:	607a      	str	r2, [r7, #4]
 80044fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80044fc:	2300      	movs	r3, #0
 80044fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004500:	f7ff ff42 	bl	8004388 <__NVIC_GetPriorityGrouping>
 8004504:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	68b9      	ldr	r1, [r7, #8]
 800450a:	6978      	ldr	r0, [r7, #20]
 800450c:	f7ff ff90 	bl	8004430 <NVIC_EncodePriority>
 8004510:	4602      	mov	r2, r0
 8004512:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004516:	4611      	mov	r1, r2
 8004518:	4618      	mov	r0, r3
 800451a:	f7ff ff5f 	bl	80043dc <__NVIC_SetPriority>
}
 800451e:	bf00      	nop
 8004520:	3718      	adds	r7, #24
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}

08004526 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004526:	b580      	push	{r7, lr}
 8004528:	b082      	sub	sp, #8
 800452a:	af00      	add	r7, sp, #0
 800452c:	4603      	mov	r3, r0
 800452e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004534:	4618      	mov	r0, r3
 8004536:	f7ff ff35 	bl	80043a4 <__NVIC_EnableIRQ>
}
 800453a:	bf00      	nop
 800453c:	3708      	adds	r7, #8
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}

08004542 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004542:	b580      	push	{r7, lr}
 8004544:	b082      	sub	sp, #8
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f7ff ffa2 	bl	8004494 <SysTick_Config>
 8004550:	4603      	mov	r3, r0
}
 8004552:	4618      	mov	r0, r3
 8004554:	3708      	adds	r7, #8
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
	...

0800455c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800455c:	b480      	push	{r7}
 800455e:	b085      	sub	sp, #20
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004564:	2300      	movs	r3, #0
 8004566:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d101      	bne.n	8004572 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e043      	b.n	80045fa <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	461a      	mov	r2, r3
 8004578:	4b22      	ldr	r3, [pc, #136]	; (8004604 <HAL_DMA_Init+0xa8>)
 800457a:	4413      	add	r3, r2
 800457c:	4a22      	ldr	r2, [pc, #136]	; (8004608 <HAL_DMA_Init+0xac>)
 800457e:	fba2 2303 	umull	r2, r3, r2, r3
 8004582:	091b      	lsrs	r3, r3, #4
 8004584:	009a      	lsls	r2, r3, #2
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a1f      	ldr	r2, [pc, #124]	; (800460c <HAL_DMA_Init+0xb0>)
 800458e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2202      	movs	r2, #2
 8004594:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80045a6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80045aa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80045b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	695b      	ldr	r3, [r3, #20]
 80045c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	69db      	ldr	r3, [r3, #28]
 80045d2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80045d4:	68fa      	ldr	r2, [r7, #12]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	68fa      	ldr	r2, [r7, #12]
 80045e0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3714      	adds	r7, #20
 80045fe:	46bd      	mov	sp, r7
 8004600:	bc80      	pop	{r7}
 8004602:	4770      	bx	lr
 8004604:	bffdfff8 	.word	0xbffdfff8
 8004608:	cccccccd 	.word	0xcccccccd
 800460c:	40020000 	.word	0x40020000

08004610 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b086      	sub	sp, #24
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	607a      	str	r2, [r7, #4]
 800461c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800461e:	2300      	movs	r3, #0
 8004620:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004628:	2b01      	cmp	r3, #1
 800462a:	d101      	bne.n	8004630 <HAL_DMA_Start_IT+0x20>
 800462c:	2302      	movs	r3, #2
 800462e:	e04a      	b.n	80046c6 <HAL_DMA_Start_IT+0xb6>
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800463e:	2b01      	cmp	r3, #1
 8004640:	d13a      	bne.n	80046b8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2202      	movs	r2, #2
 8004646:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2200      	movs	r2, #0
 800464e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f022 0201 	bic.w	r2, r2, #1
 800465e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	68b9      	ldr	r1, [r7, #8]
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	f000 f9e8 	bl	8004a3c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004670:	2b00      	cmp	r3, #0
 8004672:	d008      	beq.n	8004686 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f042 020e 	orr.w	r2, r2, #14
 8004682:	601a      	str	r2, [r3, #0]
 8004684:	e00f      	b.n	80046a6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f022 0204 	bic.w	r2, r2, #4
 8004694:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f042 020a 	orr.w	r2, r2, #10
 80046a4:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f042 0201 	orr.w	r2, r2, #1
 80046b4:	601a      	str	r2, [r3, #0]
 80046b6:	e005      	b.n	80046c4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80046c0:	2302      	movs	r3, #2
 80046c2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80046c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3718      	adds	r7, #24
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}

080046ce <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80046ce:	b480      	push	{r7}
 80046d0:	b085      	sub	sp, #20
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046d6:	2300      	movs	r3, #0
 80046d8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d008      	beq.n	80046f6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2204      	movs	r2, #4
 80046e8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e020      	b.n	8004738 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f022 020e 	bic.w	r2, r2, #14
 8004704:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f022 0201 	bic.w	r2, r2, #1
 8004714:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800471e:	2101      	movs	r1, #1
 8004720:	fa01 f202 	lsl.w	r2, r1, r2
 8004724:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2201      	movs	r2, #1
 800472a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004736:	7bfb      	ldrb	r3, [r7, #15]
}
 8004738:	4618      	mov	r0, r3
 800473a:	3714      	adds	r7, #20
 800473c:	46bd      	mov	sp, r7
 800473e:	bc80      	pop	{r7}
 8004740:	4770      	bx	lr
	...

08004744 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800474c:	2300      	movs	r3, #0
 800474e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004756:	2b02      	cmp	r3, #2
 8004758:	d005      	beq.n	8004766 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2204      	movs	r2, #4
 800475e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	73fb      	strb	r3, [r7, #15]
 8004764:	e051      	b.n	800480a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f022 020e 	bic.w	r2, r2, #14
 8004774:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f022 0201 	bic.w	r2, r2, #1
 8004784:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a22      	ldr	r2, [pc, #136]	; (8004814 <HAL_DMA_Abort_IT+0xd0>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d029      	beq.n	80047e4 <HAL_DMA_Abort_IT+0xa0>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a20      	ldr	r2, [pc, #128]	; (8004818 <HAL_DMA_Abort_IT+0xd4>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d022      	beq.n	80047e0 <HAL_DMA_Abort_IT+0x9c>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a1f      	ldr	r2, [pc, #124]	; (800481c <HAL_DMA_Abort_IT+0xd8>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d01a      	beq.n	80047da <HAL_DMA_Abort_IT+0x96>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a1d      	ldr	r2, [pc, #116]	; (8004820 <HAL_DMA_Abort_IT+0xdc>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d012      	beq.n	80047d4 <HAL_DMA_Abort_IT+0x90>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a1c      	ldr	r2, [pc, #112]	; (8004824 <HAL_DMA_Abort_IT+0xe0>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d00a      	beq.n	80047ce <HAL_DMA_Abort_IT+0x8a>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a1a      	ldr	r2, [pc, #104]	; (8004828 <HAL_DMA_Abort_IT+0xe4>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d102      	bne.n	80047c8 <HAL_DMA_Abort_IT+0x84>
 80047c2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80047c6:	e00e      	b.n	80047e6 <HAL_DMA_Abort_IT+0xa2>
 80047c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80047cc:	e00b      	b.n	80047e6 <HAL_DMA_Abort_IT+0xa2>
 80047ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80047d2:	e008      	b.n	80047e6 <HAL_DMA_Abort_IT+0xa2>
 80047d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80047d8:	e005      	b.n	80047e6 <HAL_DMA_Abort_IT+0xa2>
 80047da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80047de:	e002      	b.n	80047e6 <HAL_DMA_Abort_IT+0xa2>
 80047e0:	2310      	movs	r3, #16
 80047e2:	e000      	b.n	80047e6 <HAL_DMA_Abort_IT+0xa2>
 80047e4:	2301      	movs	r3, #1
 80047e6:	4a11      	ldr	r2, [pc, #68]	; (800482c <HAL_DMA_Abort_IT+0xe8>)
 80047e8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2201      	movs	r2, #1
 80047ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d003      	beq.n	800480a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	4798      	blx	r3
    } 
  }
  return status;
 800480a:	7bfb      	ldrb	r3, [r7, #15]
}
 800480c:	4618      	mov	r0, r3
 800480e:	3710      	adds	r7, #16
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}
 8004814:	40020008 	.word	0x40020008
 8004818:	4002001c 	.word	0x4002001c
 800481c:	40020030 	.word	0x40020030
 8004820:	40020044 	.word	0x40020044
 8004824:	40020058 	.word	0x40020058
 8004828:	4002006c 	.word	0x4002006c
 800482c:	40020000 	.word	0x40020000

08004830 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484c:	2204      	movs	r2, #4
 800484e:	409a      	lsls	r2, r3
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	4013      	ands	r3, r2
 8004854:	2b00      	cmp	r3, #0
 8004856:	d04f      	beq.n	80048f8 <HAL_DMA_IRQHandler+0xc8>
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	f003 0304 	and.w	r3, r3, #4
 800485e:	2b00      	cmp	r3, #0
 8004860:	d04a      	beq.n	80048f8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0320 	and.w	r3, r3, #32
 800486c:	2b00      	cmp	r3, #0
 800486e:	d107      	bne.n	8004880 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f022 0204 	bic.w	r2, r2, #4
 800487e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a66      	ldr	r2, [pc, #408]	; (8004a20 <HAL_DMA_IRQHandler+0x1f0>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d029      	beq.n	80048de <HAL_DMA_IRQHandler+0xae>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a65      	ldr	r2, [pc, #404]	; (8004a24 <HAL_DMA_IRQHandler+0x1f4>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d022      	beq.n	80048da <HAL_DMA_IRQHandler+0xaa>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a63      	ldr	r2, [pc, #396]	; (8004a28 <HAL_DMA_IRQHandler+0x1f8>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d01a      	beq.n	80048d4 <HAL_DMA_IRQHandler+0xa4>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a62      	ldr	r2, [pc, #392]	; (8004a2c <HAL_DMA_IRQHandler+0x1fc>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d012      	beq.n	80048ce <HAL_DMA_IRQHandler+0x9e>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a60      	ldr	r2, [pc, #384]	; (8004a30 <HAL_DMA_IRQHandler+0x200>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d00a      	beq.n	80048c8 <HAL_DMA_IRQHandler+0x98>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a5f      	ldr	r2, [pc, #380]	; (8004a34 <HAL_DMA_IRQHandler+0x204>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d102      	bne.n	80048c2 <HAL_DMA_IRQHandler+0x92>
 80048bc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80048c0:	e00e      	b.n	80048e0 <HAL_DMA_IRQHandler+0xb0>
 80048c2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80048c6:	e00b      	b.n	80048e0 <HAL_DMA_IRQHandler+0xb0>
 80048c8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80048cc:	e008      	b.n	80048e0 <HAL_DMA_IRQHandler+0xb0>
 80048ce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80048d2:	e005      	b.n	80048e0 <HAL_DMA_IRQHandler+0xb0>
 80048d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048d8:	e002      	b.n	80048e0 <HAL_DMA_IRQHandler+0xb0>
 80048da:	2340      	movs	r3, #64	; 0x40
 80048dc:	e000      	b.n	80048e0 <HAL_DMA_IRQHandler+0xb0>
 80048de:	2304      	movs	r3, #4
 80048e0:	4a55      	ldr	r2, [pc, #340]	; (8004a38 <HAL_DMA_IRQHandler+0x208>)
 80048e2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	f000 8094 	beq.w	8004a16 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80048f6:	e08e      	b.n	8004a16 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fc:	2202      	movs	r2, #2
 80048fe:	409a      	lsls	r2, r3
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	4013      	ands	r3, r2
 8004904:	2b00      	cmp	r3, #0
 8004906:	d056      	beq.n	80049b6 <HAL_DMA_IRQHandler+0x186>
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	f003 0302 	and.w	r3, r3, #2
 800490e:	2b00      	cmp	r3, #0
 8004910:	d051      	beq.n	80049b6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0320 	and.w	r3, r3, #32
 800491c:	2b00      	cmp	r3, #0
 800491e:	d10b      	bne.n	8004938 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f022 020a 	bic.w	r2, r2, #10
 800492e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a38      	ldr	r2, [pc, #224]	; (8004a20 <HAL_DMA_IRQHandler+0x1f0>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d029      	beq.n	8004996 <HAL_DMA_IRQHandler+0x166>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a37      	ldr	r2, [pc, #220]	; (8004a24 <HAL_DMA_IRQHandler+0x1f4>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d022      	beq.n	8004992 <HAL_DMA_IRQHandler+0x162>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a35      	ldr	r2, [pc, #212]	; (8004a28 <HAL_DMA_IRQHandler+0x1f8>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d01a      	beq.n	800498c <HAL_DMA_IRQHandler+0x15c>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a34      	ldr	r2, [pc, #208]	; (8004a2c <HAL_DMA_IRQHandler+0x1fc>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d012      	beq.n	8004986 <HAL_DMA_IRQHandler+0x156>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a32      	ldr	r2, [pc, #200]	; (8004a30 <HAL_DMA_IRQHandler+0x200>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d00a      	beq.n	8004980 <HAL_DMA_IRQHandler+0x150>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a31      	ldr	r2, [pc, #196]	; (8004a34 <HAL_DMA_IRQHandler+0x204>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d102      	bne.n	800497a <HAL_DMA_IRQHandler+0x14a>
 8004974:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004978:	e00e      	b.n	8004998 <HAL_DMA_IRQHandler+0x168>
 800497a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800497e:	e00b      	b.n	8004998 <HAL_DMA_IRQHandler+0x168>
 8004980:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004984:	e008      	b.n	8004998 <HAL_DMA_IRQHandler+0x168>
 8004986:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800498a:	e005      	b.n	8004998 <HAL_DMA_IRQHandler+0x168>
 800498c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004990:	e002      	b.n	8004998 <HAL_DMA_IRQHandler+0x168>
 8004992:	2320      	movs	r3, #32
 8004994:	e000      	b.n	8004998 <HAL_DMA_IRQHandler+0x168>
 8004996:	2302      	movs	r3, #2
 8004998:	4a27      	ldr	r2, [pc, #156]	; (8004a38 <HAL_DMA_IRQHandler+0x208>)
 800499a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d034      	beq.n	8004a16 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80049b4:	e02f      	b.n	8004a16 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ba:	2208      	movs	r2, #8
 80049bc:	409a      	lsls	r2, r3
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	4013      	ands	r3, r2
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d028      	beq.n	8004a18 <HAL_DMA_IRQHandler+0x1e8>
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	f003 0308 	and.w	r3, r3, #8
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d023      	beq.n	8004a18 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f022 020e 	bic.w	r2, r2, #14
 80049de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049e8:	2101      	movs	r1, #1
 80049ea:	fa01 f202 	lsl.w	r2, r1, r2
 80049ee:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2201      	movs	r2, #1
 80049fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d004      	beq.n	8004a18 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	4798      	blx	r3
    }
  }
  return;
 8004a16:	bf00      	nop
 8004a18:	bf00      	nop
}
 8004a1a:	3710      	adds	r7, #16
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	40020008 	.word	0x40020008
 8004a24:	4002001c 	.word	0x4002001c
 8004a28:	40020030 	.word	0x40020030
 8004a2c:	40020044 	.word	0x40020044
 8004a30:	40020058 	.word	0x40020058
 8004a34:	4002006c 	.word	0x4002006c
 8004a38:	40020000 	.word	0x40020000

08004a3c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b085      	sub	sp, #20
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	60b9      	str	r1, [r7, #8]
 8004a46:	607a      	str	r2, [r7, #4]
 8004a48:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a52:	2101      	movs	r1, #1
 8004a54:	fa01 f202 	lsl.w	r2, r1, r2
 8004a58:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	683a      	ldr	r2, [r7, #0]
 8004a60:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	2b10      	cmp	r3, #16
 8004a68:	d108      	bne.n	8004a7c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	68ba      	ldr	r2, [r7, #8]
 8004a78:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004a7a:	e007      	b.n	8004a8c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68ba      	ldr	r2, [r7, #8]
 8004a82:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	60da      	str	r2, [r3, #12]
}
 8004a8c:	bf00      	nop
 8004a8e:	3714      	adds	r7, #20
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bc80      	pop	{r7}
 8004a94:	4770      	bx	lr
	...

08004a98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b08b      	sub	sp, #44	; 0x2c
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004aaa:	e169      	b.n	8004d80 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004aac:	2201      	movs	r2, #1
 8004aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	69fa      	ldr	r2, [r7, #28]
 8004abc:	4013      	ands	r3, r2
 8004abe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004ac0:	69ba      	ldr	r2, [r7, #24]
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	f040 8158 	bne.w	8004d7a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	4a9a      	ldr	r2, [pc, #616]	; (8004d38 <HAL_GPIO_Init+0x2a0>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d05e      	beq.n	8004b92 <HAL_GPIO_Init+0xfa>
 8004ad4:	4a98      	ldr	r2, [pc, #608]	; (8004d38 <HAL_GPIO_Init+0x2a0>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d875      	bhi.n	8004bc6 <HAL_GPIO_Init+0x12e>
 8004ada:	4a98      	ldr	r2, [pc, #608]	; (8004d3c <HAL_GPIO_Init+0x2a4>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d058      	beq.n	8004b92 <HAL_GPIO_Init+0xfa>
 8004ae0:	4a96      	ldr	r2, [pc, #600]	; (8004d3c <HAL_GPIO_Init+0x2a4>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d86f      	bhi.n	8004bc6 <HAL_GPIO_Init+0x12e>
 8004ae6:	4a96      	ldr	r2, [pc, #600]	; (8004d40 <HAL_GPIO_Init+0x2a8>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d052      	beq.n	8004b92 <HAL_GPIO_Init+0xfa>
 8004aec:	4a94      	ldr	r2, [pc, #592]	; (8004d40 <HAL_GPIO_Init+0x2a8>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d869      	bhi.n	8004bc6 <HAL_GPIO_Init+0x12e>
 8004af2:	4a94      	ldr	r2, [pc, #592]	; (8004d44 <HAL_GPIO_Init+0x2ac>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d04c      	beq.n	8004b92 <HAL_GPIO_Init+0xfa>
 8004af8:	4a92      	ldr	r2, [pc, #584]	; (8004d44 <HAL_GPIO_Init+0x2ac>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d863      	bhi.n	8004bc6 <HAL_GPIO_Init+0x12e>
 8004afe:	4a92      	ldr	r2, [pc, #584]	; (8004d48 <HAL_GPIO_Init+0x2b0>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d046      	beq.n	8004b92 <HAL_GPIO_Init+0xfa>
 8004b04:	4a90      	ldr	r2, [pc, #576]	; (8004d48 <HAL_GPIO_Init+0x2b0>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d85d      	bhi.n	8004bc6 <HAL_GPIO_Init+0x12e>
 8004b0a:	2b12      	cmp	r3, #18
 8004b0c:	d82a      	bhi.n	8004b64 <HAL_GPIO_Init+0xcc>
 8004b0e:	2b12      	cmp	r3, #18
 8004b10:	d859      	bhi.n	8004bc6 <HAL_GPIO_Init+0x12e>
 8004b12:	a201      	add	r2, pc, #4	; (adr r2, 8004b18 <HAL_GPIO_Init+0x80>)
 8004b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b18:	08004b93 	.word	0x08004b93
 8004b1c:	08004b6d 	.word	0x08004b6d
 8004b20:	08004b7f 	.word	0x08004b7f
 8004b24:	08004bc1 	.word	0x08004bc1
 8004b28:	08004bc7 	.word	0x08004bc7
 8004b2c:	08004bc7 	.word	0x08004bc7
 8004b30:	08004bc7 	.word	0x08004bc7
 8004b34:	08004bc7 	.word	0x08004bc7
 8004b38:	08004bc7 	.word	0x08004bc7
 8004b3c:	08004bc7 	.word	0x08004bc7
 8004b40:	08004bc7 	.word	0x08004bc7
 8004b44:	08004bc7 	.word	0x08004bc7
 8004b48:	08004bc7 	.word	0x08004bc7
 8004b4c:	08004bc7 	.word	0x08004bc7
 8004b50:	08004bc7 	.word	0x08004bc7
 8004b54:	08004bc7 	.word	0x08004bc7
 8004b58:	08004bc7 	.word	0x08004bc7
 8004b5c:	08004b75 	.word	0x08004b75
 8004b60:	08004b89 	.word	0x08004b89
 8004b64:	4a79      	ldr	r2, [pc, #484]	; (8004d4c <HAL_GPIO_Init+0x2b4>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d013      	beq.n	8004b92 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004b6a:	e02c      	b.n	8004bc6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	623b      	str	r3, [r7, #32]
          break;
 8004b72:	e029      	b.n	8004bc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	3304      	adds	r3, #4
 8004b7a:	623b      	str	r3, [r7, #32]
          break;
 8004b7c:	e024      	b.n	8004bc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	3308      	adds	r3, #8
 8004b84:	623b      	str	r3, [r7, #32]
          break;
 8004b86:	e01f      	b.n	8004bc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	330c      	adds	r3, #12
 8004b8e:	623b      	str	r3, [r7, #32]
          break;
 8004b90:	e01a      	b.n	8004bc8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d102      	bne.n	8004ba0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004b9a:	2304      	movs	r3, #4
 8004b9c:	623b      	str	r3, [r7, #32]
          break;
 8004b9e:	e013      	b.n	8004bc8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d105      	bne.n	8004bb4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004ba8:	2308      	movs	r3, #8
 8004baa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	69fa      	ldr	r2, [r7, #28]
 8004bb0:	611a      	str	r2, [r3, #16]
          break;
 8004bb2:	e009      	b.n	8004bc8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004bb4:	2308      	movs	r3, #8
 8004bb6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	69fa      	ldr	r2, [r7, #28]
 8004bbc:	615a      	str	r2, [r3, #20]
          break;
 8004bbe:	e003      	b.n	8004bc8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	623b      	str	r3, [r7, #32]
          break;
 8004bc4:	e000      	b.n	8004bc8 <HAL_GPIO_Init+0x130>
          break;
 8004bc6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	2bff      	cmp	r3, #255	; 0xff
 8004bcc:	d801      	bhi.n	8004bd2 <HAL_GPIO_Init+0x13a>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	e001      	b.n	8004bd6 <HAL_GPIO_Init+0x13e>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	3304      	adds	r3, #4
 8004bd6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	2bff      	cmp	r3, #255	; 0xff
 8004bdc:	d802      	bhi.n	8004be4 <HAL_GPIO_Init+0x14c>
 8004bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	e002      	b.n	8004bea <HAL_GPIO_Init+0x152>
 8004be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be6:	3b08      	subs	r3, #8
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	210f      	movs	r1, #15
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8004bf8:	43db      	mvns	r3, r3
 8004bfa:	401a      	ands	r2, r3
 8004bfc:	6a39      	ldr	r1, [r7, #32]
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	fa01 f303 	lsl.w	r3, r1, r3
 8004c04:	431a      	orrs	r2, r3
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	f000 80b1 	beq.w	8004d7a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004c18:	4b4d      	ldr	r3, [pc, #308]	; (8004d50 <HAL_GPIO_Init+0x2b8>)
 8004c1a:	699b      	ldr	r3, [r3, #24]
 8004c1c:	4a4c      	ldr	r2, [pc, #304]	; (8004d50 <HAL_GPIO_Init+0x2b8>)
 8004c1e:	f043 0301 	orr.w	r3, r3, #1
 8004c22:	6193      	str	r3, [r2, #24]
 8004c24:	4b4a      	ldr	r3, [pc, #296]	; (8004d50 <HAL_GPIO_Init+0x2b8>)
 8004c26:	699b      	ldr	r3, [r3, #24]
 8004c28:	f003 0301 	and.w	r3, r3, #1
 8004c2c:	60bb      	str	r3, [r7, #8]
 8004c2e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004c30:	4a48      	ldr	r2, [pc, #288]	; (8004d54 <HAL_GPIO_Init+0x2bc>)
 8004c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c34:	089b      	lsrs	r3, r3, #2
 8004c36:	3302      	adds	r3, #2
 8004c38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c3c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c40:	f003 0303 	and.w	r3, r3, #3
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	220f      	movs	r2, #15
 8004c48:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4c:	43db      	mvns	r3, r3
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	4013      	ands	r3, r2
 8004c52:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a40      	ldr	r2, [pc, #256]	; (8004d58 <HAL_GPIO_Init+0x2c0>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d013      	beq.n	8004c84 <HAL_GPIO_Init+0x1ec>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4a3f      	ldr	r2, [pc, #252]	; (8004d5c <HAL_GPIO_Init+0x2c4>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d00d      	beq.n	8004c80 <HAL_GPIO_Init+0x1e8>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	4a3e      	ldr	r2, [pc, #248]	; (8004d60 <HAL_GPIO_Init+0x2c8>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d007      	beq.n	8004c7c <HAL_GPIO_Init+0x1e4>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	4a3d      	ldr	r2, [pc, #244]	; (8004d64 <HAL_GPIO_Init+0x2cc>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d101      	bne.n	8004c78 <HAL_GPIO_Init+0x1e0>
 8004c74:	2303      	movs	r3, #3
 8004c76:	e006      	b.n	8004c86 <HAL_GPIO_Init+0x1ee>
 8004c78:	2304      	movs	r3, #4
 8004c7a:	e004      	b.n	8004c86 <HAL_GPIO_Init+0x1ee>
 8004c7c:	2302      	movs	r3, #2
 8004c7e:	e002      	b.n	8004c86 <HAL_GPIO_Init+0x1ee>
 8004c80:	2301      	movs	r3, #1
 8004c82:	e000      	b.n	8004c86 <HAL_GPIO_Init+0x1ee>
 8004c84:	2300      	movs	r3, #0
 8004c86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c88:	f002 0203 	and.w	r2, r2, #3
 8004c8c:	0092      	lsls	r2, r2, #2
 8004c8e:	4093      	lsls	r3, r2
 8004c90:	68fa      	ldr	r2, [r7, #12]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004c96:	492f      	ldr	r1, [pc, #188]	; (8004d54 <HAL_GPIO_Init+0x2bc>)
 8004c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9a:	089b      	lsrs	r3, r3, #2
 8004c9c:	3302      	adds	r3, #2
 8004c9e:	68fa      	ldr	r2, [r7, #12]
 8004ca0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d006      	beq.n	8004cbe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004cb0:	4b2d      	ldr	r3, [pc, #180]	; (8004d68 <HAL_GPIO_Init+0x2d0>)
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	492c      	ldr	r1, [pc, #176]	; (8004d68 <HAL_GPIO_Init+0x2d0>)
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	600b      	str	r3, [r1, #0]
 8004cbc:	e006      	b.n	8004ccc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004cbe:	4b2a      	ldr	r3, [pc, #168]	; (8004d68 <HAL_GPIO_Init+0x2d0>)
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	43db      	mvns	r3, r3
 8004cc6:	4928      	ldr	r1, [pc, #160]	; (8004d68 <HAL_GPIO_Init+0x2d0>)
 8004cc8:	4013      	ands	r3, r2
 8004cca:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d006      	beq.n	8004ce6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004cd8:	4b23      	ldr	r3, [pc, #140]	; (8004d68 <HAL_GPIO_Init+0x2d0>)
 8004cda:	685a      	ldr	r2, [r3, #4]
 8004cdc:	4922      	ldr	r1, [pc, #136]	; (8004d68 <HAL_GPIO_Init+0x2d0>)
 8004cde:	69bb      	ldr	r3, [r7, #24]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	604b      	str	r3, [r1, #4]
 8004ce4:	e006      	b.n	8004cf4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004ce6:	4b20      	ldr	r3, [pc, #128]	; (8004d68 <HAL_GPIO_Init+0x2d0>)
 8004ce8:	685a      	ldr	r2, [r3, #4]
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	43db      	mvns	r3, r3
 8004cee:	491e      	ldr	r1, [pc, #120]	; (8004d68 <HAL_GPIO_Init+0x2d0>)
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d006      	beq.n	8004d0e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004d00:	4b19      	ldr	r3, [pc, #100]	; (8004d68 <HAL_GPIO_Init+0x2d0>)
 8004d02:	689a      	ldr	r2, [r3, #8]
 8004d04:	4918      	ldr	r1, [pc, #96]	; (8004d68 <HAL_GPIO_Init+0x2d0>)
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	608b      	str	r3, [r1, #8]
 8004d0c:	e006      	b.n	8004d1c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004d0e:	4b16      	ldr	r3, [pc, #88]	; (8004d68 <HAL_GPIO_Init+0x2d0>)
 8004d10:	689a      	ldr	r2, [r3, #8]
 8004d12:	69bb      	ldr	r3, [r7, #24]
 8004d14:	43db      	mvns	r3, r3
 8004d16:	4914      	ldr	r1, [pc, #80]	; (8004d68 <HAL_GPIO_Init+0x2d0>)
 8004d18:	4013      	ands	r3, r2
 8004d1a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d021      	beq.n	8004d6c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004d28:	4b0f      	ldr	r3, [pc, #60]	; (8004d68 <HAL_GPIO_Init+0x2d0>)
 8004d2a:	68da      	ldr	r2, [r3, #12]
 8004d2c:	490e      	ldr	r1, [pc, #56]	; (8004d68 <HAL_GPIO_Init+0x2d0>)
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	60cb      	str	r3, [r1, #12]
 8004d34:	e021      	b.n	8004d7a <HAL_GPIO_Init+0x2e2>
 8004d36:	bf00      	nop
 8004d38:	10320000 	.word	0x10320000
 8004d3c:	10310000 	.word	0x10310000
 8004d40:	10220000 	.word	0x10220000
 8004d44:	10210000 	.word	0x10210000
 8004d48:	10120000 	.word	0x10120000
 8004d4c:	10110000 	.word	0x10110000
 8004d50:	40021000 	.word	0x40021000
 8004d54:	40010000 	.word	0x40010000
 8004d58:	40010800 	.word	0x40010800
 8004d5c:	40010c00 	.word	0x40010c00
 8004d60:	40011000 	.word	0x40011000
 8004d64:	40011400 	.word	0x40011400
 8004d68:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004d6c:	4b0b      	ldr	r3, [pc, #44]	; (8004d9c <HAL_GPIO_Init+0x304>)
 8004d6e:	68da      	ldr	r2, [r3, #12]
 8004d70:	69bb      	ldr	r3, [r7, #24]
 8004d72:	43db      	mvns	r3, r3
 8004d74:	4909      	ldr	r1, [pc, #36]	; (8004d9c <HAL_GPIO_Init+0x304>)
 8004d76:	4013      	ands	r3, r2
 8004d78:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d86:	fa22 f303 	lsr.w	r3, r2, r3
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	f47f ae8e 	bne.w	8004aac <HAL_GPIO_Init+0x14>
  }
}
 8004d90:	bf00      	nop
 8004d92:	bf00      	nop
 8004d94:	372c      	adds	r7, #44	; 0x2c
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bc80      	pop	{r7}
 8004d9a:	4770      	bx	lr
 8004d9c:	40010400 	.word	0x40010400

08004da0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b085      	sub	sp, #20
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	460b      	mov	r3, r1
 8004daa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	689a      	ldr	r2, [r3, #8]
 8004db0:	887b      	ldrh	r3, [r7, #2]
 8004db2:	4013      	ands	r3, r2
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d002      	beq.n	8004dbe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004db8:	2301      	movs	r3, #1
 8004dba:	73fb      	strb	r3, [r7, #15]
 8004dbc:	e001      	b.n	8004dc2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3714      	adds	r7, #20
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bc80      	pop	{r7}
 8004dcc:	4770      	bx	lr

08004dce <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004dce:	b480      	push	{r7}
 8004dd0:	b083      	sub	sp, #12
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
 8004dd6:	460b      	mov	r3, r1
 8004dd8:	807b      	strh	r3, [r7, #2]
 8004dda:	4613      	mov	r3, r2
 8004ddc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004dde:	787b      	ldrb	r3, [r7, #1]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d003      	beq.n	8004dec <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004de4:	887a      	ldrh	r2, [r7, #2]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004dea:	e003      	b.n	8004df4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004dec:	887b      	ldrh	r3, [r7, #2]
 8004dee:	041a      	lsls	r2, r3, #16
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	611a      	str	r2, [r3, #16]
}
 8004df4:	bf00      	nop
 8004df6:	370c      	adds	r7, #12
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bc80      	pop	{r7}
 8004dfc:	4770      	bx	lr
	...

08004e00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b086      	sub	sp, #24
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d101      	bne.n	8004e12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e272      	b.n	80052f8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 0301 	and.w	r3, r3, #1
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	f000 8087 	beq.w	8004f2e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e20:	4b92      	ldr	r3, [pc, #584]	; (800506c <HAL_RCC_OscConfig+0x26c>)
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	f003 030c 	and.w	r3, r3, #12
 8004e28:	2b04      	cmp	r3, #4
 8004e2a:	d00c      	beq.n	8004e46 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004e2c:	4b8f      	ldr	r3, [pc, #572]	; (800506c <HAL_RCC_OscConfig+0x26c>)
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	f003 030c 	and.w	r3, r3, #12
 8004e34:	2b08      	cmp	r3, #8
 8004e36:	d112      	bne.n	8004e5e <HAL_RCC_OscConfig+0x5e>
 8004e38:	4b8c      	ldr	r3, [pc, #560]	; (800506c <HAL_RCC_OscConfig+0x26c>)
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e44:	d10b      	bne.n	8004e5e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e46:	4b89      	ldr	r3, [pc, #548]	; (800506c <HAL_RCC_OscConfig+0x26c>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d06c      	beq.n	8004f2c <HAL_RCC_OscConfig+0x12c>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d168      	bne.n	8004f2c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e24c      	b.n	80052f8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e66:	d106      	bne.n	8004e76 <HAL_RCC_OscConfig+0x76>
 8004e68:	4b80      	ldr	r3, [pc, #512]	; (800506c <HAL_RCC_OscConfig+0x26c>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a7f      	ldr	r2, [pc, #508]	; (800506c <HAL_RCC_OscConfig+0x26c>)
 8004e6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e72:	6013      	str	r3, [r2, #0]
 8004e74:	e02e      	b.n	8004ed4 <HAL_RCC_OscConfig+0xd4>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d10c      	bne.n	8004e98 <HAL_RCC_OscConfig+0x98>
 8004e7e:	4b7b      	ldr	r3, [pc, #492]	; (800506c <HAL_RCC_OscConfig+0x26c>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a7a      	ldr	r2, [pc, #488]	; (800506c <HAL_RCC_OscConfig+0x26c>)
 8004e84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e88:	6013      	str	r3, [r2, #0]
 8004e8a:	4b78      	ldr	r3, [pc, #480]	; (800506c <HAL_RCC_OscConfig+0x26c>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a77      	ldr	r2, [pc, #476]	; (800506c <HAL_RCC_OscConfig+0x26c>)
 8004e90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e94:	6013      	str	r3, [r2, #0]
 8004e96:	e01d      	b.n	8004ed4 <HAL_RCC_OscConfig+0xd4>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ea0:	d10c      	bne.n	8004ebc <HAL_RCC_OscConfig+0xbc>
 8004ea2:	4b72      	ldr	r3, [pc, #456]	; (800506c <HAL_RCC_OscConfig+0x26c>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a71      	ldr	r2, [pc, #452]	; (800506c <HAL_RCC_OscConfig+0x26c>)
 8004ea8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004eac:	6013      	str	r3, [r2, #0]
 8004eae:	4b6f      	ldr	r3, [pc, #444]	; (800506c <HAL_RCC_OscConfig+0x26c>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a6e      	ldr	r2, [pc, #440]	; (800506c <HAL_RCC_OscConfig+0x26c>)
 8004eb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004eb8:	6013      	str	r3, [r2, #0]
 8004eba:	e00b      	b.n	8004ed4 <HAL_RCC_OscConfig+0xd4>
 8004ebc:	4b6b      	ldr	r3, [pc, #428]	; (800506c <HAL_RCC_OscConfig+0x26c>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a6a      	ldr	r2, [pc, #424]	; (800506c <HAL_RCC_OscConfig+0x26c>)
 8004ec2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ec6:	6013      	str	r3, [r2, #0]
 8004ec8:	4b68      	ldr	r3, [pc, #416]	; (800506c <HAL_RCC_OscConfig+0x26c>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a67      	ldr	r2, [pc, #412]	; (800506c <HAL_RCC_OscConfig+0x26c>)
 8004ece:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ed2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d013      	beq.n	8004f04 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004edc:	f7fe fe64 	bl	8003ba8 <HAL_GetTick>
 8004ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ee2:	e008      	b.n	8004ef6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ee4:	f7fe fe60 	bl	8003ba8 <HAL_GetTick>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	2b64      	cmp	r3, #100	; 0x64
 8004ef0:	d901      	bls.n	8004ef6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	e200      	b.n	80052f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ef6:	4b5d      	ldr	r3, [pc, #372]	; (800506c <HAL_RCC_OscConfig+0x26c>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d0f0      	beq.n	8004ee4 <HAL_RCC_OscConfig+0xe4>
 8004f02:	e014      	b.n	8004f2e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f04:	f7fe fe50 	bl	8003ba8 <HAL_GetTick>
 8004f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f0a:	e008      	b.n	8004f1e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f0c:	f7fe fe4c 	bl	8003ba8 <HAL_GetTick>
 8004f10:	4602      	mov	r2, r0
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	2b64      	cmp	r3, #100	; 0x64
 8004f18:	d901      	bls.n	8004f1e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	e1ec      	b.n	80052f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f1e:	4b53      	ldr	r3, [pc, #332]	; (800506c <HAL_RCC_OscConfig+0x26c>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d1f0      	bne.n	8004f0c <HAL_RCC_OscConfig+0x10c>
 8004f2a:	e000      	b.n	8004f2e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 0302 	and.w	r3, r3, #2
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d063      	beq.n	8005002 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f3a:	4b4c      	ldr	r3, [pc, #304]	; (800506c <HAL_RCC_OscConfig+0x26c>)
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	f003 030c 	and.w	r3, r3, #12
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d00b      	beq.n	8004f5e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004f46:	4b49      	ldr	r3, [pc, #292]	; (800506c <HAL_RCC_OscConfig+0x26c>)
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	f003 030c 	and.w	r3, r3, #12
 8004f4e:	2b08      	cmp	r3, #8
 8004f50:	d11c      	bne.n	8004f8c <HAL_RCC_OscConfig+0x18c>
 8004f52:	4b46      	ldr	r3, [pc, #280]	; (800506c <HAL_RCC_OscConfig+0x26c>)
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d116      	bne.n	8004f8c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f5e:	4b43      	ldr	r3, [pc, #268]	; (800506c <HAL_RCC_OscConfig+0x26c>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 0302 	and.w	r3, r3, #2
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d005      	beq.n	8004f76 <HAL_RCC_OscConfig+0x176>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d001      	beq.n	8004f76 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e1c0      	b.n	80052f8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f76:	4b3d      	ldr	r3, [pc, #244]	; (800506c <HAL_RCC_OscConfig+0x26c>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	695b      	ldr	r3, [r3, #20]
 8004f82:	00db      	lsls	r3, r3, #3
 8004f84:	4939      	ldr	r1, [pc, #228]	; (800506c <HAL_RCC_OscConfig+0x26c>)
 8004f86:	4313      	orrs	r3, r2
 8004f88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f8a:	e03a      	b.n	8005002 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	691b      	ldr	r3, [r3, #16]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d020      	beq.n	8004fd6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f94:	4b36      	ldr	r3, [pc, #216]	; (8005070 <HAL_RCC_OscConfig+0x270>)
 8004f96:	2201      	movs	r2, #1
 8004f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f9a:	f7fe fe05 	bl	8003ba8 <HAL_GetTick>
 8004f9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fa0:	e008      	b.n	8004fb4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fa2:	f7fe fe01 	bl	8003ba8 <HAL_GetTick>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	1ad3      	subs	r3, r2, r3
 8004fac:	2b02      	cmp	r3, #2
 8004fae:	d901      	bls.n	8004fb4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004fb0:	2303      	movs	r3, #3
 8004fb2:	e1a1      	b.n	80052f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fb4:	4b2d      	ldr	r3, [pc, #180]	; (800506c <HAL_RCC_OscConfig+0x26c>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 0302 	and.w	r3, r3, #2
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d0f0      	beq.n	8004fa2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fc0:	4b2a      	ldr	r3, [pc, #168]	; (800506c <HAL_RCC_OscConfig+0x26c>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	695b      	ldr	r3, [r3, #20]
 8004fcc:	00db      	lsls	r3, r3, #3
 8004fce:	4927      	ldr	r1, [pc, #156]	; (800506c <HAL_RCC_OscConfig+0x26c>)
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	600b      	str	r3, [r1, #0]
 8004fd4:	e015      	b.n	8005002 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fd6:	4b26      	ldr	r3, [pc, #152]	; (8005070 <HAL_RCC_OscConfig+0x270>)
 8004fd8:	2200      	movs	r2, #0
 8004fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fdc:	f7fe fde4 	bl	8003ba8 <HAL_GetTick>
 8004fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fe2:	e008      	b.n	8004ff6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fe4:	f7fe fde0 	bl	8003ba8 <HAL_GetTick>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d901      	bls.n	8004ff6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e180      	b.n	80052f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ff6:	4b1d      	ldr	r3, [pc, #116]	; (800506c <HAL_RCC_OscConfig+0x26c>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 0302 	and.w	r3, r3, #2
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d1f0      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 0308 	and.w	r3, r3, #8
 800500a:	2b00      	cmp	r3, #0
 800500c:	d03a      	beq.n	8005084 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	699b      	ldr	r3, [r3, #24]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d019      	beq.n	800504a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005016:	4b17      	ldr	r3, [pc, #92]	; (8005074 <HAL_RCC_OscConfig+0x274>)
 8005018:	2201      	movs	r2, #1
 800501a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800501c:	f7fe fdc4 	bl	8003ba8 <HAL_GetTick>
 8005020:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005022:	e008      	b.n	8005036 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005024:	f7fe fdc0 	bl	8003ba8 <HAL_GetTick>
 8005028:	4602      	mov	r2, r0
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	2b02      	cmp	r3, #2
 8005030:	d901      	bls.n	8005036 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005032:	2303      	movs	r3, #3
 8005034:	e160      	b.n	80052f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005036:	4b0d      	ldr	r3, [pc, #52]	; (800506c <HAL_RCC_OscConfig+0x26c>)
 8005038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503a:	f003 0302 	and.w	r3, r3, #2
 800503e:	2b00      	cmp	r3, #0
 8005040:	d0f0      	beq.n	8005024 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005042:	2001      	movs	r0, #1
 8005044:	f000 fad8 	bl	80055f8 <RCC_Delay>
 8005048:	e01c      	b.n	8005084 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800504a:	4b0a      	ldr	r3, [pc, #40]	; (8005074 <HAL_RCC_OscConfig+0x274>)
 800504c:	2200      	movs	r2, #0
 800504e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005050:	f7fe fdaa 	bl	8003ba8 <HAL_GetTick>
 8005054:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005056:	e00f      	b.n	8005078 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005058:	f7fe fda6 	bl	8003ba8 <HAL_GetTick>
 800505c:	4602      	mov	r2, r0
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	2b02      	cmp	r3, #2
 8005064:	d908      	bls.n	8005078 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e146      	b.n	80052f8 <HAL_RCC_OscConfig+0x4f8>
 800506a:	bf00      	nop
 800506c:	40021000 	.word	0x40021000
 8005070:	42420000 	.word	0x42420000
 8005074:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005078:	4b92      	ldr	r3, [pc, #584]	; (80052c4 <HAL_RCC_OscConfig+0x4c4>)
 800507a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507c:	f003 0302 	and.w	r3, r3, #2
 8005080:	2b00      	cmp	r3, #0
 8005082:	d1e9      	bne.n	8005058 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 0304 	and.w	r3, r3, #4
 800508c:	2b00      	cmp	r3, #0
 800508e:	f000 80a6 	beq.w	80051de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005092:	2300      	movs	r3, #0
 8005094:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005096:	4b8b      	ldr	r3, [pc, #556]	; (80052c4 <HAL_RCC_OscConfig+0x4c4>)
 8005098:	69db      	ldr	r3, [r3, #28]
 800509a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d10d      	bne.n	80050be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050a2:	4b88      	ldr	r3, [pc, #544]	; (80052c4 <HAL_RCC_OscConfig+0x4c4>)
 80050a4:	69db      	ldr	r3, [r3, #28]
 80050a6:	4a87      	ldr	r2, [pc, #540]	; (80052c4 <HAL_RCC_OscConfig+0x4c4>)
 80050a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050ac:	61d3      	str	r3, [r2, #28]
 80050ae:	4b85      	ldr	r3, [pc, #532]	; (80052c4 <HAL_RCC_OscConfig+0x4c4>)
 80050b0:	69db      	ldr	r3, [r3, #28]
 80050b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050b6:	60bb      	str	r3, [r7, #8]
 80050b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050ba:	2301      	movs	r3, #1
 80050bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050be:	4b82      	ldr	r3, [pc, #520]	; (80052c8 <HAL_RCC_OscConfig+0x4c8>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d118      	bne.n	80050fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050ca:	4b7f      	ldr	r3, [pc, #508]	; (80052c8 <HAL_RCC_OscConfig+0x4c8>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a7e      	ldr	r2, [pc, #504]	; (80052c8 <HAL_RCC_OscConfig+0x4c8>)
 80050d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050d6:	f7fe fd67 	bl	8003ba8 <HAL_GetTick>
 80050da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050dc:	e008      	b.n	80050f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050de:	f7fe fd63 	bl	8003ba8 <HAL_GetTick>
 80050e2:	4602      	mov	r2, r0
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	2b64      	cmp	r3, #100	; 0x64
 80050ea:	d901      	bls.n	80050f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80050ec:	2303      	movs	r3, #3
 80050ee:	e103      	b.n	80052f8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050f0:	4b75      	ldr	r3, [pc, #468]	; (80052c8 <HAL_RCC_OscConfig+0x4c8>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d0f0      	beq.n	80050de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	2b01      	cmp	r3, #1
 8005102:	d106      	bne.n	8005112 <HAL_RCC_OscConfig+0x312>
 8005104:	4b6f      	ldr	r3, [pc, #444]	; (80052c4 <HAL_RCC_OscConfig+0x4c4>)
 8005106:	6a1b      	ldr	r3, [r3, #32]
 8005108:	4a6e      	ldr	r2, [pc, #440]	; (80052c4 <HAL_RCC_OscConfig+0x4c4>)
 800510a:	f043 0301 	orr.w	r3, r3, #1
 800510e:	6213      	str	r3, [r2, #32]
 8005110:	e02d      	b.n	800516e <HAL_RCC_OscConfig+0x36e>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d10c      	bne.n	8005134 <HAL_RCC_OscConfig+0x334>
 800511a:	4b6a      	ldr	r3, [pc, #424]	; (80052c4 <HAL_RCC_OscConfig+0x4c4>)
 800511c:	6a1b      	ldr	r3, [r3, #32]
 800511e:	4a69      	ldr	r2, [pc, #420]	; (80052c4 <HAL_RCC_OscConfig+0x4c4>)
 8005120:	f023 0301 	bic.w	r3, r3, #1
 8005124:	6213      	str	r3, [r2, #32]
 8005126:	4b67      	ldr	r3, [pc, #412]	; (80052c4 <HAL_RCC_OscConfig+0x4c4>)
 8005128:	6a1b      	ldr	r3, [r3, #32]
 800512a:	4a66      	ldr	r2, [pc, #408]	; (80052c4 <HAL_RCC_OscConfig+0x4c4>)
 800512c:	f023 0304 	bic.w	r3, r3, #4
 8005130:	6213      	str	r3, [r2, #32]
 8005132:	e01c      	b.n	800516e <HAL_RCC_OscConfig+0x36e>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	2b05      	cmp	r3, #5
 800513a:	d10c      	bne.n	8005156 <HAL_RCC_OscConfig+0x356>
 800513c:	4b61      	ldr	r3, [pc, #388]	; (80052c4 <HAL_RCC_OscConfig+0x4c4>)
 800513e:	6a1b      	ldr	r3, [r3, #32]
 8005140:	4a60      	ldr	r2, [pc, #384]	; (80052c4 <HAL_RCC_OscConfig+0x4c4>)
 8005142:	f043 0304 	orr.w	r3, r3, #4
 8005146:	6213      	str	r3, [r2, #32]
 8005148:	4b5e      	ldr	r3, [pc, #376]	; (80052c4 <HAL_RCC_OscConfig+0x4c4>)
 800514a:	6a1b      	ldr	r3, [r3, #32]
 800514c:	4a5d      	ldr	r2, [pc, #372]	; (80052c4 <HAL_RCC_OscConfig+0x4c4>)
 800514e:	f043 0301 	orr.w	r3, r3, #1
 8005152:	6213      	str	r3, [r2, #32]
 8005154:	e00b      	b.n	800516e <HAL_RCC_OscConfig+0x36e>
 8005156:	4b5b      	ldr	r3, [pc, #364]	; (80052c4 <HAL_RCC_OscConfig+0x4c4>)
 8005158:	6a1b      	ldr	r3, [r3, #32]
 800515a:	4a5a      	ldr	r2, [pc, #360]	; (80052c4 <HAL_RCC_OscConfig+0x4c4>)
 800515c:	f023 0301 	bic.w	r3, r3, #1
 8005160:	6213      	str	r3, [r2, #32]
 8005162:	4b58      	ldr	r3, [pc, #352]	; (80052c4 <HAL_RCC_OscConfig+0x4c4>)
 8005164:	6a1b      	ldr	r3, [r3, #32]
 8005166:	4a57      	ldr	r2, [pc, #348]	; (80052c4 <HAL_RCC_OscConfig+0x4c4>)
 8005168:	f023 0304 	bic.w	r3, r3, #4
 800516c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d015      	beq.n	80051a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005176:	f7fe fd17 	bl	8003ba8 <HAL_GetTick>
 800517a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800517c:	e00a      	b.n	8005194 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800517e:	f7fe fd13 	bl	8003ba8 <HAL_GetTick>
 8005182:	4602      	mov	r2, r0
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	1ad3      	subs	r3, r2, r3
 8005188:	f241 3288 	movw	r2, #5000	; 0x1388
 800518c:	4293      	cmp	r3, r2
 800518e:	d901      	bls.n	8005194 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005190:	2303      	movs	r3, #3
 8005192:	e0b1      	b.n	80052f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005194:	4b4b      	ldr	r3, [pc, #300]	; (80052c4 <HAL_RCC_OscConfig+0x4c4>)
 8005196:	6a1b      	ldr	r3, [r3, #32]
 8005198:	f003 0302 	and.w	r3, r3, #2
 800519c:	2b00      	cmp	r3, #0
 800519e:	d0ee      	beq.n	800517e <HAL_RCC_OscConfig+0x37e>
 80051a0:	e014      	b.n	80051cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051a2:	f7fe fd01 	bl	8003ba8 <HAL_GetTick>
 80051a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051a8:	e00a      	b.n	80051c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051aa:	f7fe fcfd 	bl	8003ba8 <HAL_GetTick>
 80051ae:	4602      	mov	r2, r0
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	1ad3      	subs	r3, r2, r3
 80051b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d901      	bls.n	80051c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80051bc:	2303      	movs	r3, #3
 80051be:	e09b      	b.n	80052f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051c0:	4b40      	ldr	r3, [pc, #256]	; (80052c4 <HAL_RCC_OscConfig+0x4c4>)
 80051c2:	6a1b      	ldr	r3, [r3, #32]
 80051c4:	f003 0302 	and.w	r3, r3, #2
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d1ee      	bne.n	80051aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80051cc:	7dfb      	ldrb	r3, [r7, #23]
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d105      	bne.n	80051de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051d2:	4b3c      	ldr	r3, [pc, #240]	; (80052c4 <HAL_RCC_OscConfig+0x4c4>)
 80051d4:	69db      	ldr	r3, [r3, #28]
 80051d6:	4a3b      	ldr	r2, [pc, #236]	; (80052c4 <HAL_RCC_OscConfig+0x4c4>)
 80051d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	69db      	ldr	r3, [r3, #28]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	f000 8087 	beq.w	80052f6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051e8:	4b36      	ldr	r3, [pc, #216]	; (80052c4 <HAL_RCC_OscConfig+0x4c4>)
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	f003 030c 	and.w	r3, r3, #12
 80051f0:	2b08      	cmp	r3, #8
 80051f2:	d061      	beq.n	80052b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	69db      	ldr	r3, [r3, #28]
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d146      	bne.n	800528a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051fc:	4b33      	ldr	r3, [pc, #204]	; (80052cc <HAL_RCC_OscConfig+0x4cc>)
 80051fe:	2200      	movs	r2, #0
 8005200:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005202:	f7fe fcd1 	bl	8003ba8 <HAL_GetTick>
 8005206:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005208:	e008      	b.n	800521c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800520a:	f7fe fccd 	bl	8003ba8 <HAL_GetTick>
 800520e:	4602      	mov	r2, r0
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	1ad3      	subs	r3, r2, r3
 8005214:	2b02      	cmp	r3, #2
 8005216:	d901      	bls.n	800521c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005218:	2303      	movs	r3, #3
 800521a:	e06d      	b.n	80052f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800521c:	4b29      	ldr	r3, [pc, #164]	; (80052c4 <HAL_RCC_OscConfig+0x4c4>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005224:	2b00      	cmp	r3, #0
 8005226:	d1f0      	bne.n	800520a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6a1b      	ldr	r3, [r3, #32]
 800522c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005230:	d108      	bne.n	8005244 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005232:	4b24      	ldr	r3, [pc, #144]	; (80052c4 <HAL_RCC_OscConfig+0x4c4>)
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	4921      	ldr	r1, [pc, #132]	; (80052c4 <HAL_RCC_OscConfig+0x4c4>)
 8005240:	4313      	orrs	r3, r2
 8005242:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005244:	4b1f      	ldr	r3, [pc, #124]	; (80052c4 <HAL_RCC_OscConfig+0x4c4>)
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6a19      	ldr	r1, [r3, #32]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005254:	430b      	orrs	r3, r1
 8005256:	491b      	ldr	r1, [pc, #108]	; (80052c4 <HAL_RCC_OscConfig+0x4c4>)
 8005258:	4313      	orrs	r3, r2
 800525a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800525c:	4b1b      	ldr	r3, [pc, #108]	; (80052cc <HAL_RCC_OscConfig+0x4cc>)
 800525e:	2201      	movs	r2, #1
 8005260:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005262:	f7fe fca1 	bl	8003ba8 <HAL_GetTick>
 8005266:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005268:	e008      	b.n	800527c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800526a:	f7fe fc9d 	bl	8003ba8 <HAL_GetTick>
 800526e:	4602      	mov	r2, r0
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	1ad3      	subs	r3, r2, r3
 8005274:	2b02      	cmp	r3, #2
 8005276:	d901      	bls.n	800527c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005278:	2303      	movs	r3, #3
 800527a:	e03d      	b.n	80052f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800527c:	4b11      	ldr	r3, [pc, #68]	; (80052c4 <HAL_RCC_OscConfig+0x4c4>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005284:	2b00      	cmp	r3, #0
 8005286:	d0f0      	beq.n	800526a <HAL_RCC_OscConfig+0x46a>
 8005288:	e035      	b.n	80052f6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800528a:	4b10      	ldr	r3, [pc, #64]	; (80052cc <HAL_RCC_OscConfig+0x4cc>)
 800528c:	2200      	movs	r2, #0
 800528e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005290:	f7fe fc8a 	bl	8003ba8 <HAL_GetTick>
 8005294:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005296:	e008      	b.n	80052aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005298:	f7fe fc86 	bl	8003ba8 <HAL_GetTick>
 800529c:	4602      	mov	r2, r0
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	2b02      	cmp	r3, #2
 80052a4:	d901      	bls.n	80052aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	e026      	b.n	80052f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052aa:	4b06      	ldr	r3, [pc, #24]	; (80052c4 <HAL_RCC_OscConfig+0x4c4>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d1f0      	bne.n	8005298 <HAL_RCC_OscConfig+0x498>
 80052b6:	e01e      	b.n	80052f6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	69db      	ldr	r3, [r3, #28]
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d107      	bne.n	80052d0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e019      	b.n	80052f8 <HAL_RCC_OscConfig+0x4f8>
 80052c4:	40021000 	.word	0x40021000
 80052c8:	40007000 	.word	0x40007000
 80052cc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80052d0:	4b0b      	ldr	r3, [pc, #44]	; (8005300 <HAL_RCC_OscConfig+0x500>)
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6a1b      	ldr	r3, [r3, #32]
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d106      	bne.n	80052f2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d001      	beq.n	80052f6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e000      	b.n	80052f8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80052f6:	2300      	movs	r3, #0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3718      	adds	r7, #24
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	40021000 	.word	0x40021000

08005304 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b084      	sub	sp, #16
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d101      	bne.n	8005318 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	e0d0      	b.n	80054ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005318:	4b6a      	ldr	r3, [pc, #424]	; (80054c4 <HAL_RCC_ClockConfig+0x1c0>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 0307 	and.w	r3, r3, #7
 8005320:	683a      	ldr	r2, [r7, #0]
 8005322:	429a      	cmp	r2, r3
 8005324:	d910      	bls.n	8005348 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005326:	4b67      	ldr	r3, [pc, #412]	; (80054c4 <HAL_RCC_ClockConfig+0x1c0>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f023 0207 	bic.w	r2, r3, #7
 800532e:	4965      	ldr	r1, [pc, #404]	; (80054c4 <HAL_RCC_ClockConfig+0x1c0>)
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	4313      	orrs	r3, r2
 8005334:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005336:	4b63      	ldr	r3, [pc, #396]	; (80054c4 <HAL_RCC_ClockConfig+0x1c0>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 0307 	and.w	r3, r3, #7
 800533e:	683a      	ldr	r2, [r7, #0]
 8005340:	429a      	cmp	r2, r3
 8005342:	d001      	beq.n	8005348 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	e0b8      	b.n	80054ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f003 0302 	and.w	r3, r3, #2
 8005350:	2b00      	cmp	r3, #0
 8005352:	d020      	beq.n	8005396 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 0304 	and.w	r3, r3, #4
 800535c:	2b00      	cmp	r3, #0
 800535e:	d005      	beq.n	800536c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005360:	4b59      	ldr	r3, [pc, #356]	; (80054c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	4a58      	ldr	r2, [pc, #352]	; (80054c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005366:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800536a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 0308 	and.w	r3, r3, #8
 8005374:	2b00      	cmp	r3, #0
 8005376:	d005      	beq.n	8005384 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005378:	4b53      	ldr	r3, [pc, #332]	; (80054c8 <HAL_RCC_ClockConfig+0x1c4>)
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	4a52      	ldr	r2, [pc, #328]	; (80054c8 <HAL_RCC_ClockConfig+0x1c4>)
 800537e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005382:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005384:	4b50      	ldr	r3, [pc, #320]	; (80054c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	494d      	ldr	r1, [pc, #308]	; (80054c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005392:	4313      	orrs	r3, r2
 8005394:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 0301 	and.w	r3, r3, #1
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d040      	beq.n	8005424 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d107      	bne.n	80053ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053aa:	4b47      	ldr	r3, [pc, #284]	; (80054c8 <HAL_RCC_ClockConfig+0x1c4>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d115      	bne.n	80053e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e07f      	b.n	80054ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	2b02      	cmp	r3, #2
 80053c0:	d107      	bne.n	80053d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053c2:	4b41      	ldr	r3, [pc, #260]	; (80054c8 <HAL_RCC_ClockConfig+0x1c4>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d109      	bne.n	80053e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e073      	b.n	80054ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053d2:	4b3d      	ldr	r3, [pc, #244]	; (80054c8 <HAL_RCC_ClockConfig+0x1c4>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 0302 	and.w	r3, r3, #2
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d101      	bne.n	80053e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	e06b      	b.n	80054ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053e2:	4b39      	ldr	r3, [pc, #228]	; (80054c8 <HAL_RCC_ClockConfig+0x1c4>)
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	f023 0203 	bic.w	r2, r3, #3
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	4936      	ldr	r1, [pc, #216]	; (80054c8 <HAL_RCC_ClockConfig+0x1c4>)
 80053f0:	4313      	orrs	r3, r2
 80053f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80053f4:	f7fe fbd8 	bl	8003ba8 <HAL_GetTick>
 80053f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053fa:	e00a      	b.n	8005412 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053fc:	f7fe fbd4 	bl	8003ba8 <HAL_GetTick>
 8005400:	4602      	mov	r2, r0
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	f241 3288 	movw	r2, #5000	; 0x1388
 800540a:	4293      	cmp	r3, r2
 800540c:	d901      	bls.n	8005412 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800540e:	2303      	movs	r3, #3
 8005410:	e053      	b.n	80054ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005412:	4b2d      	ldr	r3, [pc, #180]	; (80054c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	f003 020c 	and.w	r2, r3, #12
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	429a      	cmp	r2, r3
 8005422:	d1eb      	bne.n	80053fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005424:	4b27      	ldr	r3, [pc, #156]	; (80054c4 <HAL_RCC_ClockConfig+0x1c0>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 0307 	and.w	r3, r3, #7
 800542c:	683a      	ldr	r2, [r7, #0]
 800542e:	429a      	cmp	r2, r3
 8005430:	d210      	bcs.n	8005454 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005432:	4b24      	ldr	r3, [pc, #144]	; (80054c4 <HAL_RCC_ClockConfig+0x1c0>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f023 0207 	bic.w	r2, r3, #7
 800543a:	4922      	ldr	r1, [pc, #136]	; (80054c4 <HAL_RCC_ClockConfig+0x1c0>)
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	4313      	orrs	r3, r2
 8005440:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005442:	4b20      	ldr	r3, [pc, #128]	; (80054c4 <HAL_RCC_ClockConfig+0x1c0>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 0307 	and.w	r3, r3, #7
 800544a:	683a      	ldr	r2, [r7, #0]
 800544c:	429a      	cmp	r2, r3
 800544e:	d001      	beq.n	8005454 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	e032      	b.n	80054ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 0304 	and.w	r3, r3, #4
 800545c:	2b00      	cmp	r3, #0
 800545e:	d008      	beq.n	8005472 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005460:	4b19      	ldr	r3, [pc, #100]	; (80054c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	4916      	ldr	r1, [pc, #88]	; (80054c8 <HAL_RCC_ClockConfig+0x1c4>)
 800546e:	4313      	orrs	r3, r2
 8005470:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 0308 	and.w	r3, r3, #8
 800547a:	2b00      	cmp	r3, #0
 800547c:	d009      	beq.n	8005492 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800547e:	4b12      	ldr	r3, [pc, #72]	; (80054c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	00db      	lsls	r3, r3, #3
 800548c:	490e      	ldr	r1, [pc, #56]	; (80054c8 <HAL_RCC_ClockConfig+0x1c4>)
 800548e:	4313      	orrs	r3, r2
 8005490:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005492:	f000 f821 	bl	80054d8 <HAL_RCC_GetSysClockFreq>
 8005496:	4602      	mov	r2, r0
 8005498:	4b0b      	ldr	r3, [pc, #44]	; (80054c8 <HAL_RCC_ClockConfig+0x1c4>)
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	091b      	lsrs	r3, r3, #4
 800549e:	f003 030f 	and.w	r3, r3, #15
 80054a2:	490a      	ldr	r1, [pc, #40]	; (80054cc <HAL_RCC_ClockConfig+0x1c8>)
 80054a4:	5ccb      	ldrb	r3, [r1, r3]
 80054a6:	fa22 f303 	lsr.w	r3, r2, r3
 80054aa:	4a09      	ldr	r2, [pc, #36]	; (80054d0 <HAL_RCC_ClockConfig+0x1cc>)
 80054ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80054ae:	4b09      	ldr	r3, [pc, #36]	; (80054d4 <HAL_RCC_ClockConfig+0x1d0>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4618      	mov	r0, r3
 80054b4:	f7fe fb36 	bl	8003b24 <HAL_InitTick>

  return HAL_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3710      	adds	r7, #16
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop
 80054c4:	40022000 	.word	0x40022000
 80054c8:	40021000 	.word	0x40021000
 80054cc:	08007a38 	.word	0x08007a38
 80054d0:	2000003c 	.word	0x2000003c
 80054d4:	20000040 	.word	0x20000040

080054d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054d8:	b490      	push	{r4, r7}
 80054da:	b08a      	sub	sp, #40	; 0x28
 80054dc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80054de:	4b29      	ldr	r3, [pc, #164]	; (8005584 <HAL_RCC_GetSysClockFreq+0xac>)
 80054e0:	1d3c      	adds	r4, r7, #4
 80054e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80054e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80054e8:	f240 2301 	movw	r3, #513	; 0x201
 80054ec:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80054ee:	2300      	movs	r3, #0
 80054f0:	61fb      	str	r3, [r7, #28]
 80054f2:	2300      	movs	r3, #0
 80054f4:	61bb      	str	r3, [r7, #24]
 80054f6:	2300      	movs	r3, #0
 80054f8:	627b      	str	r3, [r7, #36]	; 0x24
 80054fa:	2300      	movs	r3, #0
 80054fc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80054fe:	2300      	movs	r3, #0
 8005500:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005502:	4b21      	ldr	r3, [pc, #132]	; (8005588 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	f003 030c 	and.w	r3, r3, #12
 800550e:	2b04      	cmp	r3, #4
 8005510:	d002      	beq.n	8005518 <HAL_RCC_GetSysClockFreq+0x40>
 8005512:	2b08      	cmp	r3, #8
 8005514:	d003      	beq.n	800551e <HAL_RCC_GetSysClockFreq+0x46>
 8005516:	e02b      	b.n	8005570 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005518:	4b1c      	ldr	r3, [pc, #112]	; (800558c <HAL_RCC_GetSysClockFreq+0xb4>)
 800551a:	623b      	str	r3, [r7, #32]
      break;
 800551c:	e02b      	b.n	8005576 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	0c9b      	lsrs	r3, r3, #18
 8005522:	f003 030f 	and.w	r3, r3, #15
 8005526:	3328      	adds	r3, #40	; 0x28
 8005528:	443b      	add	r3, r7
 800552a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800552e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005536:	2b00      	cmp	r3, #0
 8005538:	d012      	beq.n	8005560 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800553a:	4b13      	ldr	r3, [pc, #76]	; (8005588 <HAL_RCC_GetSysClockFreq+0xb0>)
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	0c5b      	lsrs	r3, r3, #17
 8005540:	f003 0301 	and.w	r3, r3, #1
 8005544:	3328      	adds	r3, #40	; 0x28
 8005546:	443b      	add	r3, r7
 8005548:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800554c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	4a0e      	ldr	r2, [pc, #56]	; (800558c <HAL_RCC_GetSysClockFreq+0xb4>)
 8005552:	fb03 f202 	mul.w	r2, r3, r2
 8005556:	69bb      	ldr	r3, [r7, #24]
 8005558:	fbb2 f3f3 	udiv	r3, r2, r3
 800555c:	627b      	str	r3, [r7, #36]	; 0x24
 800555e:	e004      	b.n	800556a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	4a0b      	ldr	r2, [pc, #44]	; (8005590 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005564:	fb02 f303 	mul.w	r3, r2, r3
 8005568:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800556a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556c:	623b      	str	r3, [r7, #32]
      break;
 800556e:	e002      	b.n	8005576 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005570:	4b06      	ldr	r3, [pc, #24]	; (800558c <HAL_RCC_GetSysClockFreq+0xb4>)
 8005572:	623b      	str	r3, [r7, #32]
      break;
 8005574:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005576:	6a3b      	ldr	r3, [r7, #32]
}
 8005578:	4618      	mov	r0, r3
 800557a:	3728      	adds	r7, #40	; 0x28
 800557c:	46bd      	mov	sp, r7
 800557e:	bc90      	pop	{r4, r7}
 8005580:	4770      	bx	lr
 8005582:	bf00      	nop
 8005584:	08007a28 	.word	0x08007a28
 8005588:	40021000 	.word	0x40021000
 800558c:	007a1200 	.word	0x007a1200
 8005590:	003d0900 	.word	0x003d0900

08005594 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005594:	b480      	push	{r7}
 8005596:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005598:	4b02      	ldr	r3, [pc, #8]	; (80055a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800559a:	681b      	ldr	r3, [r3, #0]
}
 800559c:	4618      	mov	r0, r3
 800559e:	46bd      	mov	sp, r7
 80055a0:	bc80      	pop	{r7}
 80055a2:	4770      	bx	lr
 80055a4:	2000003c 	.word	0x2000003c

080055a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80055ac:	f7ff fff2 	bl	8005594 <HAL_RCC_GetHCLKFreq>
 80055b0:	4602      	mov	r2, r0
 80055b2:	4b05      	ldr	r3, [pc, #20]	; (80055c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	0a1b      	lsrs	r3, r3, #8
 80055b8:	f003 0307 	and.w	r3, r3, #7
 80055bc:	4903      	ldr	r1, [pc, #12]	; (80055cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80055be:	5ccb      	ldrb	r3, [r1, r3]
 80055c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	bd80      	pop	{r7, pc}
 80055c8:	40021000 	.word	0x40021000
 80055cc:	08007a48 	.word	0x08007a48

080055d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80055d4:	f7ff ffde 	bl	8005594 <HAL_RCC_GetHCLKFreq>
 80055d8:	4602      	mov	r2, r0
 80055da:	4b05      	ldr	r3, [pc, #20]	; (80055f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	0adb      	lsrs	r3, r3, #11
 80055e0:	f003 0307 	and.w	r3, r3, #7
 80055e4:	4903      	ldr	r1, [pc, #12]	; (80055f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80055e6:	5ccb      	ldrb	r3, [r1, r3]
 80055e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	bd80      	pop	{r7, pc}
 80055f0:	40021000 	.word	0x40021000
 80055f4:	08007a48 	.word	0x08007a48

080055f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b085      	sub	sp, #20
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005600:	4b0a      	ldr	r3, [pc, #40]	; (800562c <RCC_Delay+0x34>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a0a      	ldr	r2, [pc, #40]	; (8005630 <RCC_Delay+0x38>)
 8005606:	fba2 2303 	umull	r2, r3, r2, r3
 800560a:	0a5b      	lsrs	r3, r3, #9
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	fb02 f303 	mul.w	r3, r2, r3
 8005612:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005614:	bf00      	nop
  }
  while (Delay --);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	1e5a      	subs	r2, r3, #1
 800561a:	60fa      	str	r2, [r7, #12]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d1f9      	bne.n	8005614 <RCC_Delay+0x1c>
}
 8005620:	bf00      	nop
 8005622:	bf00      	nop
 8005624:	3714      	adds	r7, #20
 8005626:	46bd      	mov	sp, r7
 8005628:	bc80      	pop	{r7}
 800562a:	4770      	bx	lr
 800562c:	2000003c 	.word	0x2000003c
 8005630:	10624dd3 	.word	0x10624dd3

08005634 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b086      	sub	sp, #24
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800563c:	2300      	movs	r3, #0
 800563e:	613b      	str	r3, [r7, #16]
 8005640:	2300      	movs	r3, #0
 8005642:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 0301 	and.w	r3, r3, #1
 800564c:	2b00      	cmp	r3, #0
 800564e:	d07d      	beq.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005650:	2300      	movs	r3, #0
 8005652:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005654:	4b4f      	ldr	r3, [pc, #316]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005656:	69db      	ldr	r3, [r3, #28]
 8005658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800565c:	2b00      	cmp	r3, #0
 800565e:	d10d      	bne.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005660:	4b4c      	ldr	r3, [pc, #304]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005662:	69db      	ldr	r3, [r3, #28]
 8005664:	4a4b      	ldr	r2, [pc, #300]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005666:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800566a:	61d3      	str	r3, [r2, #28]
 800566c:	4b49      	ldr	r3, [pc, #292]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800566e:	69db      	ldr	r3, [r3, #28]
 8005670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005674:	60bb      	str	r3, [r7, #8]
 8005676:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005678:	2301      	movs	r3, #1
 800567a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800567c:	4b46      	ldr	r3, [pc, #280]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005684:	2b00      	cmp	r3, #0
 8005686:	d118      	bne.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005688:	4b43      	ldr	r3, [pc, #268]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a42      	ldr	r2, [pc, #264]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800568e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005692:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005694:	f7fe fa88 	bl	8003ba8 <HAL_GetTick>
 8005698:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800569a:	e008      	b.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800569c:	f7fe fa84 	bl	8003ba8 <HAL_GetTick>
 80056a0:	4602      	mov	r2, r0
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	1ad3      	subs	r3, r2, r3
 80056a6:	2b64      	cmp	r3, #100	; 0x64
 80056a8:	d901      	bls.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80056aa:	2303      	movs	r3, #3
 80056ac:	e06d      	b.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056ae:	4b3a      	ldr	r3, [pc, #232]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d0f0      	beq.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80056ba:	4b36      	ldr	r3, [pc, #216]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056bc:	6a1b      	ldr	r3, [r3, #32]
 80056be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056c2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d02e      	beq.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056d2:	68fa      	ldr	r2, [r7, #12]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d027      	beq.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80056d8:	4b2e      	ldr	r3, [pc, #184]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056da:	6a1b      	ldr	r3, [r3, #32]
 80056dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056e0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80056e2:	4b2e      	ldr	r3, [pc, #184]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80056e4:	2201      	movs	r2, #1
 80056e6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80056e8:	4b2c      	ldr	r3, [pc, #176]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80056ea:	2200      	movs	r2, #0
 80056ec:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80056ee:	4a29      	ldr	r2, [pc, #164]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f003 0301 	and.w	r3, r3, #1
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d014      	beq.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056fe:	f7fe fa53 	bl	8003ba8 <HAL_GetTick>
 8005702:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005704:	e00a      	b.n	800571c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005706:	f7fe fa4f 	bl	8003ba8 <HAL_GetTick>
 800570a:	4602      	mov	r2, r0
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	1ad3      	subs	r3, r2, r3
 8005710:	f241 3288 	movw	r2, #5000	; 0x1388
 8005714:	4293      	cmp	r3, r2
 8005716:	d901      	bls.n	800571c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005718:	2303      	movs	r3, #3
 800571a:	e036      	b.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800571c:	4b1d      	ldr	r3, [pc, #116]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800571e:	6a1b      	ldr	r3, [r3, #32]
 8005720:	f003 0302 	and.w	r3, r3, #2
 8005724:	2b00      	cmp	r3, #0
 8005726:	d0ee      	beq.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005728:	4b1a      	ldr	r3, [pc, #104]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800572a:	6a1b      	ldr	r3, [r3, #32]
 800572c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	4917      	ldr	r1, [pc, #92]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005736:	4313      	orrs	r3, r2
 8005738:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800573a:	7dfb      	ldrb	r3, [r7, #23]
 800573c:	2b01      	cmp	r3, #1
 800573e:	d105      	bne.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005740:	4b14      	ldr	r3, [pc, #80]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005742:	69db      	ldr	r3, [r3, #28]
 8005744:	4a13      	ldr	r2, [pc, #76]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005746:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800574a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 0302 	and.w	r3, r3, #2
 8005754:	2b00      	cmp	r3, #0
 8005756:	d008      	beq.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005758:	4b0e      	ldr	r3, [pc, #56]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	490b      	ldr	r1, [pc, #44]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005766:	4313      	orrs	r3, r2
 8005768:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 0310 	and.w	r3, r3, #16
 8005772:	2b00      	cmp	r3, #0
 8005774:	d008      	beq.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005776:	4b07      	ldr	r3, [pc, #28]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	4904      	ldr	r1, [pc, #16]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005784:	4313      	orrs	r3, r2
 8005786:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005788:	2300      	movs	r3, #0
}
 800578a:	4618      	mov	r0, r3
 800578c:	3718      	adds	r7, #24
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	40021000 	.word	0x40021000
 8005798:	40007000 	.word	0x40007000
 800579c:	42420440 	.word	0x42420440

080057a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b082      	sub	sp, #8
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d101      	bne.n	80057b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e041      	b.n	8005836 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d106      	bne.n	80057cc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f7fe f818 	bl	80037fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2202      	movs	r2, #2
 80057d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	3304      	adds	r3, #4
 80057dc:	4619      	mov	r1, r3
 80057de:	4610      	mov	r0, r2
 80057e0:	f000 fabe 	bl	8005d60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005834:	2300      	movs	r3, #0
}
 8005836:	4618      	mov	r0, r3
 8005838:	3708      	adds	r7, #8
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
	...

08005840 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d109      	bne.n	8005864 <HAL_TIM_PWM_Start+0x24>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005856:	b2db      	uxtb	r3, r3
 8005858:	2b01      	cmp	r3, #1
 800585a:	bf14      	ite	ne
 800585c:	2301      	movne	r3, #1
 800585e:	2300      	moveq	r3, #0
 8005860:	b2db      	uxtb	r3, r3
 8005862:	e022      	b.n	80058aa <HAL_TIM_PWM_Start+0x6a>
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	2b04      	cmp	r3, #4
 8005868:	d109      	bne.n	800587e <HAL_TIM_PWM_Start+0x3e>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005870:	b2db      	uxtb	r3, r3
 8005872:	2b01      	cmp	r3, #1
 8005874:	bf14      	ite	ne
 8005876:	2301      	movne	r3, #1
 8005878:	2300      	moveq	r3, #0
 800587a:	b2db      	uxtb	r3, r3
 800587c:	e015      	b.n	80058aa <HAL_TIM_PWM_Start+0x6a>
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	2b08      	cmp	r3, #8
 8005882:	d109      	bne.n	8005898 <HAL_TIM_PWM_Start+0x58>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800588a:	b2db      	uxtb	r3, r3
 800588c:	2b01      	cmp	r3, #1
 800588e:	bf14      	ite	ne
 8005890:	2301      	movne	r3, #1
 8005892:	2300      	moveq	r3, #0
 8005894:	b2db      	uxtb	r3, r3
 8005896:	e008      	b.n	80058aa <HAL_TIM_PWM_Start+0x6a>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	bf14      	ite	ne
 80058a4:	2301      	movne	r3, #1
 80058a6:	2300      	moveq	r3, #0
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d001      	beq.n	80058b2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	e05e      	b.n	8005970 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d104      	bne.n	80058c2 <HAL_TIM_PWM_Start+0x82>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2202      	movs	r2, #2
 80058bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058c0:	e013      	b.n	80058ea <HAL_TIM_PWM_Start+0xaa>
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	2b04      	cmp	r3, #4
 80058c6:	d104      	bne.n	80058d2 <HAL_TIM_PWM_Start+0x92>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2202      	movs	r2, #2
 80058cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058d0:	e00b      	b.n	80058ea <HAL_TIM_PWM_Start+0xaa>
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	2b08      	cmp	r3, #8
 80058d6:	d104      	bne.n	80058e2 <HAL_TIM_PWM_Start+0xa2>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2202      	movs	r2, #2
 80058dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058e0:	e003      	b.n	80058ea <HAL_TIM_PWM_Start+0xaa>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2202      	movs	r2, #2
 80058e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	2201      	movs	r2, #1
 80058f0:	6839      	ldr	r1, [r7, #0]
 80058f2:	4618      	mov	r0, r3
 80058f4:	f000 fc1e 	bl	8006134 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a1e      	ldr	r2, [pc, #120]	; (8005978 <HAL_TIM_PWM_Start+0x138>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d107      	bne.n	8005912 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005910:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a18      	ldr	r2, [pc, #96]	; (8005978 <HAL_TIM_PWM_Start+0x138>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d00e      	beq.n	800593a <HAL_TIM_PWM_Start+0xfa>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005924:	d009      	beq.n	800593a <HAL_TIM_PWM_Start+0xfa>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a14      	ldr	r2, [pc, #80]	; (800597c <HAL_TIM_PWM_Start+0x13c>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d004      	beq.n	800593a <HAL_TIM_PWM_Start+0xfa>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a12      	ldr	r2, [pc, #72]	; (8005980 <HAL_TIM_PWM_Start+0x140>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d111      	bne.n	800595e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	f003 0307 	and.w	r3, r3, #7
 8005944:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2b06      	cmp	r3, #6
 800594a:	d010      	beq.n	800596e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f042 0201 	orr.w	r2, r2, #1
 800595a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800595c:	e007      	b.n	800596e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f042 0201 	orr.w	r2, r2, #1
 800596c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800596e:	2300      	movs	r3, #0
}
 8005970:	4618      	mov	r0, r3
 8005972:	3710      	adds	r7, #16
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}
 8005978:	40012c00 	.word	0x40012c00
 800597c:	40000400 	.word	0x40000400
 8005980:	40000800 	.word	0x40000800

08005984 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b086      	sub	sp, #24
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d101      	bne.n	8005998 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	e093      	b.n	8005ac0 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d106      	bne.n	80059b2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f7fd ff41 	bl	8003834 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2202      	movs	r2, #2
 80059b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	6812      	ldr	r2, [r2, #0]
 80059c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059c8:	f023 0307 	bic.w	r3, r3, #7
 80059cc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	3304      	adds	r3, #4
 80059d6:	4619      	mov	r1, r3
 80059d8:	4610      	mov	r0, r2
 80059da:	f000 f9c1 	bl	8005d60 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	699b      	ldr	r3, [r3, #24]
 80059ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	6a1b      	ldr	r3, [r3, #32]
 80059f4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	697a      	ldr	r2, [r7, #20]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a06:	f023 0303 	bic.w	r3, r3, #3
 8005a0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	689a      	ldr	r2, [r3, #8]
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	699b      	ldr	r3, [r3, #24]
 8005a14:	021b      	lsls	r3, r3, #8
 8005a16:	4313      	orrs	r3, r2
 8005a18:	693a      	ldr	r2, [r7, #16]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005a24:	f023 030c 	bic.w	r3, r3, #12
 8005a28:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a30:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	68da      	ldr	r2, [r3, #12]
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	69db      	ldr	r3, [r3, #28]
 8005a3e:	021b      	lsls	r3, r3, #8
 8005a40:	4313      	orrs	r3, r2
 8005a42:	693a      	ldr	r2, [r7, #16]
 8005a44:	4313      	orrs	r3, r2
 8005a46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	691b      	ldr	r3, [r3, #16]
 8005a4c:	011a      	lsls	r2, r3, #4
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	6a1b      	ldr	r3, [r3, #32]
 8005a52:	031b      	lsls	r3, r3, #12
 8005a54:	4313      	orrs	r3, r2
 8005a56:	693a      	ldr	r2, [r7, #16]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005a62:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	685a      	ldr	r2, [r3, #4]
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	695b      	ldr	r3, [r3, #20]
 8005a6c:	011b      	lsls	r3, r3, #4
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	68fa      	ldr	r2, [r7, #12]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	697a      	ldr	r2, [r7, #20]
 8005a7c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	693a      	ldr	r2, [r7, #16]
 8005a84:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	68fa      	ldr	r2, [r7, #12]
 8005a8c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2201      	movs	r2, #1
 8005a92:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005abe:	2300      	movs	r3, #0
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3718      	adds	r7, #24
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b084      	sub	sp, #16
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ad8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005ae0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005ae8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005af0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d110      	bne.n	8005b1a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005af8:	7bfb      	ldrb	r3, [r7, #15]
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d102      	bne.n	8005b04 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005afe:	7b7b      	ldrb	r3, [r7, #13]
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d001      	beq.n	8005b08 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005b04:	2301      	movs	r3, #1
 8005b06:	e069      	b.n	8005bdc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2202      	movs	r2, #2
 8005b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2202      	movs	r2, #2
 8005b14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b18:	e031      	b.n	8005b7e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	2b04      	cmp	r3, #4
 8005b1e:	d110      	bne.n	8005b42 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b20:	7bbb      	ldrb	r3, [r7, #14]
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d102      	bne.n	8005b2c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005b26:	7b3b      	ldrb	r3, [r7, #12]
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d001      	beq.n	8005b30 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e055      	b.n	8005bdc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2202      	movs	r2, #2
 8005b34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2202      	movs	r2, #2
 8005b3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b40:	e01d      	b.n	8005b7e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b42:	7bfb      	ldrb	r3, [r7, #15]
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d108      	bne.n	8005b5a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b48:	7bbb      	ldrb	r3, [r7, #14]
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d105      	bne.n	8005b5a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b4e:	7b7b      	ldrb	r3, [r7, #13]
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d102      	bne.n	8005b5a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005b54:	7b3b      	ldrb	r3, [r7, #12]
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d001      	beq.n	8005b5e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e03e      	b.n	8005bdc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2202      	movs	r2, #2
 8005b62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2202      	movs	r2, #2
 8005b6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2202      	movs	r2, #2
 8005b72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2202      	movs	r2, #2
 8005b7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d003      	beq.n	8005b8c <HAL_TIM_Encoder_Start+0xc4>
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	2b04      	cmp	r3, #4
 8005b88:	d008      	beq.n	8005b9c <HAL_TIM_Encoder_Start+0xd4>
 8005b8a:	e00f      	b.n	8005bac <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	2201      	movs	r2, #1
 8005b92:	2100      	movs	r1, #0
 8005b94:	4618      	mov	r0, r3
 8005b96:	f000 facd 	bl	8006134 <TIM_CCxChannelCmd>
      break;
 8005b9a:	e016      	b.n	8005bca <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	2104      	movs	r1, #4
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f000 fac5 	bl	8006134 <TIM_CCxChannelCmd>
      break;
 8005baa:	e00e      	b.n	8005bca <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	2100      	movs	r1, #0
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f000 fabd 	bl	8006134 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	2104      	movs	r1, #4
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f000 fab6 	bl	8006134 <TIM_CCxChannelCmd>
      break;
 8005bc8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f042 0201 	orr.w	r2, r2, #1
 8005bd8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005bda:	2300      	movs	r3, #0
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3710      	adds	r7, #16
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b084      	sub	sp, #16
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	60f8      	str	r0, [r7, #12]
 8005bec:	60b9      	str	r1, [r7, #8]
 8005bee:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	d101      	bne.n	8005bfe <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005bfa:	2302      	movs	r3, #2
 8005bfc:	e0ac      	b.n	8005d58 <HAL_TIM_PWM_ConfigChannel+0x174>
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2201      	movs	r2, #1
 8005c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2b0c      	cmp	r3, #12
 8005c0a:	f200 809f 	bhi.w	8005d4c <HAL_TIM_PWM_ConfigChannel+0x168>
 8005c0e:	a201      	add	r2, pc, #4	; (adr r2, 8005c14 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c14:	08005c49 	.word	0x08005c49
 8005c18:	08005d4d 	.word	0x08005d4d
 8005c1c:	08005d4d 	.word	0x08005d4d
 8005c20:	08005d4d 	.word	0x08005d4d
 8005c24:	08005c89 	.word	0x08005c89
 8005c28:	08005d4d 	.word	0x08005d4d
 8005c2c:	08005d4d 	.word	0x08005d4d
 8005c30:	08005d4d 	.word	0x08005d4d
 8005c34:	08005ccb 	.word	0x08005ccb
 8005c38:	08005d4d 	.word	0x08005d4d
 8005c3c:	08005d4d 	.word	0x08005d4d
 8005c40:	08005d4d 	.word	0x08005d4d
 8005c44:	08005d0b 	.word	0x08005d0b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	68b9      	ldr	r1, [r7, #8]
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f000 f8e8 	bl	8005e24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	699a      	ldr	r2, [r3, #24]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f042 0208 	orr.w	r2, r2, #8
 8005c62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	699a      	ldr	r2, [r3, #24]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f022 0204 	bic.w	r2, r2, #4
 8005c72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	6999      	ldr	r1, [r3, #24]
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	691a      	ldr	r2, [r3, #16]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	430a      	orrs	r2, r1
 8005c84:	619a      	str	r2, [r3, #24]
      break;
 8005c86:	e062      	b.n	8005d4e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	68b9      	ldr	r1, [r7, #8]
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f000 f92e 	bl	8005ef0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	699a      	ldr	r2, [r3, #24]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ca2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	699a      	ldr	r2, [r3, #24]
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	6999      	ldr	r1, [r3, #24]
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	691b      	ldr	r3, [r3, #16]
 8005cbe:	021a      	lsls	r2, r3, #8
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	430a      	orrs	r2, r1
 8005cc6:	619a      	str	r2, [r3, #24]
      break;
 8005cc8:	e041      	b.n	8005d4e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	68b9      	ldr	r1, [r7, #8]
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f000 f977 	bl	8005fc4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	69da      	ldr	r2, [r3, #28]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f042 0208 	orr.w	r2, r2, #8
 8005ce4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	69da      	ldr	r2, [r3, #28]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f022 0204 	bic.w	r2, r2, #4
 8005cf4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	69d9      	ldr	r1, [r3, #28]
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	691a      	ldr	r2, [r3, #16]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	430a      	orrs	r2, r1
 8005d06:	61da      	str	r2, [r3, #28]
      break;
 8005d08:	e021      	b.n	8005d4e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	68b9      	ldr	r1, [r7, #8]
 8005d10:	4618      	mov	r0, r3
 8005d12:	f000 f9c1 	bl	8006098 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	69da      	ldr	r2, [r3, #28]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	69da      	ldr	r2, [r3, #28]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	69d9      	ldr	r1, [r3, #28]
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	691b      	ldr	r3, [r3, #16]
 8005d40:	021a      	lsls	r2, r3, #8
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	430a      	orrs	r2, r1
 8005d48:	61da      	str	r2, [r3, #28]
      break;
 8005d4a:	e000      	b.n	8005d4e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005d4c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d56:	2300      	movs	r3, #0
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3710      	adds	r7, #16
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b085      	sub	sp, #20
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	4a29      	ldr	r2, [pc, #164]	; (8005e18 <TIM_Base_SetConfig+0xb8>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d00b      	beq.n	8005d90 <TIM_Base_SetConfig+0x30>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d7e:	d007      	beq.n	8005d90 <TIM_Base_SetConfig+0x30>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	4a26      	ldr	r2, [pc, #152]	; (8005e1c <TIM_Base_SetConfig+0xbc>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d003      	beq.n	8005d90 <TIM_Base_SetConfig+0x30>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4a25      	ldr	r2, [pc, #148]	; (8005e20 <TIM_Base_SetConfig+0xc0>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d108      	bne.n	8005da2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	68fa      	ldr	r2, [r7, #12]
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a1c      	ldr	r2, [pc, #112]	; (8005e18 <TIM_Base_SetConfig+0xb8>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d00b      	beq.n	8005dc2 <TIM_Base_SetConfig+0x62>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005db0:	d007      	beq.n	8005dc2 <TIM_Base_SetConfig+0x62>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4a19      	ldr	r2, [pc, #100]	; (8005e1c <TIM_Base_SetConfig+0xbc>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d003      	beq.n	8005dc2 <TIM_Base_SetConfig+0x62>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4a18      	ldr	r2, [pc, #96]	; (8005e20 <TIM_Base_SetConfig+0xc0>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d108      	bne.n	8005dd4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	68fa      	ldr	r2, [r7, #12]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	695b      	ldr	r3, [r3, #20]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	68fa      	ldr	r2, [r7, #12]
 8005de6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	689a      	ldr	r2, [r3, #8]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	4a07      	ldr	r2, [pc, #28]	; (8005e18 <TIM_Base_SetConfig+0xb8>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d103      	bne.n	8005e08 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	691a      	ldr	r2, [r3, #16]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	615a      	str	r2, [r3, #20]
}
 8005e0e:	bf00      	nop
 8005e10:	3714      	adds	r7, #20
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bc80      	pop	{r7}
 8005e16:	4770      	bx	lr
 8005e18:	40012c00 	.word	0x40012c00
 8005e1c:	40000400 	.word	0x40000400
 8005e20:	40000800 	.word	0x40000800

08005e24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b087      	sub	sp, #28
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6a1b      	ldr	r3, [r3, #32]
 8005e32:	f023 0201 	bic.w	r2, r3, #1
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6a1b      	ldr	r3, [r3, #32]
 8005e3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	699b      	ldr	r3, [r3, #24]
 8005e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f023 0303 	bic.w	r3, r3, #3
 8005e5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	68fa      	ldr	r2, [r7, #12]
 8005e62:	4313      	orrs	r3, r2
 8005e64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	f023 0302 	bic.w	r3, r3, #2
 8005e6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	697a      	ldr	r2, [r7, #20]
 8005e74:	4313      	orrs	r3, r2
 8005e76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	4a1c      	ldr	r2, [pc, #112]	; (8005eec <TIM_OC1_SetConfig+0xc8>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d10c      	bne.n	8005e9a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	f023 0308 	bic.w	r3, r3, #8
 8005e86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	697a      	ldr	r2, [r7, #20]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	f023 0304 	bic.w	r3, r3, #4
 8005e98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4a13      	ldr	r2, [pc, #76]	; (8005eec <TIM_OC1_SetConfig+0xc8>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d111      	bne.n	8005ec6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ea8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005eb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	695b      	ldr	r3, [r3, #20]
 8005eb6:	693a      	ldr	r2, [r7, #16]
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	699b      	ldr	r3, [r3, #24]
 8005ec0:	693a      	ldr	r2, [r7, #16]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	693a      	ldr	r2, [r7, #16]
 8005eca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	68fa      	ldr	r2, [r7, #12]
 8005ed0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	685a      	ldr	r2, [r3, #4]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	697a      	ldr	r2, [r7, #20]
 8005ede:	621a      	str	r2, [r3, #32]
}
 8005ee0:	bf00      	nop
 8005ee2:	371c      	adds	r7, #28
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bc80      	pop	{r7}
 8005ee8:	4770      	bx	lr
 8005eea:	bf00      	nop
 8005eec:	40012c00 	.word	0x40012c00

08005ef0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b087      	sub	sp, #28
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6a1b      	ldr	r3, [r3, #32]
 8005efe:	f023 0210 	bic.w	r2, r3, #16
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6a1b      	ldr	r3, [r3, #32]
 8005f0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	699b      	ldr	r3, [r3, #24]
 8005f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	021b      	lsls	r3, r3, #8
 8005f2e:	68fa      	ldr	r2, [r7, #12]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	f023 0320 	bic.w	r3, r3, #32
 8005f3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	011b      	lsls	r3, r3, #4
 8005f42:	697a      	ldr	r2, [r7, #20]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	4a1d      	ldr	r2, [pc, #116]	; (8005fc0 <TIM_OC2_SetConfig+0xd0>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d10d      	bne.n	8005f6c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	011b      	lsls	r3, r3, #4
 8005f5e:	697a      	ldr	r2, [r7, #20]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f6a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	4a14      	ldr	r2, [pc, #80]	; (8005fc0 <TIM_OC2_SetConfig+0xd0>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d113      	bne.n	8005f9c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	695b      	ldr	r3, [r3, #20]
 8005f88:	009b      	lsls	r3, r3, #2
 8005f8a:	693a      	ldr	r2, [r7, #16]
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	699b      	ldr	r3, [r3, #24]
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	693a      	ldr	r2, [r7, #16]
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	693a      	ldr	r2, [r7, #16]
 8005fa0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	68fa      	ldr	r2, [r7, #12]
 8005fa6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	685a      	ldr	r2, [r3, #4]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	697a      	ldr	r2, [r7, #20]
 8005fb4:	621a      	str	r2, [r3, #32]
}
 8005fb6:	bf00      	nop
 8005fb8:	371c      	adds	r7, #28
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bc80      	pop	{r7}
 8005fbe:	4770      	bx	lr
 8005fc0:	40012c00 	.word	0x40012c00

08005fc4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b087      	sub	sp, #28
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6a1b      	ldr	r3, [r3, #32]
 8005fd2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6a1b      	ldr	r3, [r3, #32]
 8005fde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	69db      	ldr	r3, [r3, #28]
 8005fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ff2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f023 0303 	bic.w	r3, r3, #3
 8005ffa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	68fa      	ldr	r2, [r7, #12]
 8006002:	4313      	orrs	r3, r2
 8006004:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800600c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	021b      	lsls	r3, r3, #8
 8006014:	697a      	ldr	r2, [r7, #20]
 8006016:	4313      	orrs	r3, r2
 8006018:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4a1d      	ldr	r2, [pc, #116]	; (8006094 <TIM_OC3_SetConfig+0xd0>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d10d      	bne.n	800603e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006028:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	68db      	ldr	r3, [r3, #12]
 800602e:	021b      	lsls	r3, r3, #8
 8006030:	697a      	ldr	r2, [r7, #20]
 8006032:	4313      	orrs	r3, r2
 8006034:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800603c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a14      	ldr	r2, [pc, #80]	; (8006094 <TIM_OC3_SetConfig+0xd0>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d113      	bne.n	800606e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800604c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006054:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	695b      	ldr	r3, [r3, #20]
 800605a:	011b      	lsls	r3, r3, #4
 800605c:	693a      	ldr	r2, [r7, #16]
 800605e:	4313      	orrs	r3, r2
 8006060:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	699b      	ldr	r3, [r3, #24]
 8006066:	011b      	lsls	r3, r3, #4
 8006068:	693a      	ldr	r2, [r7, #16]
 800606a:	4313      	orrs	r3, r2
 800606c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	693a      	ldr	r2, [r7, #16]
 8006072:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	68fa      	ldr	r2, [r7, #12]
 8006078:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	685a      	ldr	r2, [r3, #4]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	697a      	ldr	r2, [r7, #20]
 8006086:	621a      	str	r2, [r3, #32]
}
 8006088:	bf00      	nop
 800608a:	371c      	adds	r7, #28
 800608c:	46bd      	mov	sp, r7
 800608e:	bc80      	pop	{r7}
 8006090:	4770      	bx	lr
 8006092:	bf00      	nop
 8006094:	40012c00 	.word	0x40012c00

08006098 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006098:	b480      	push	{r7}
 800609a:	b087      	sub	sp, #28
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6a1b      	ldr	r3, [r3, #32]
 80060a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6a1b      	ldr	r3, [r3, #32]
 80060b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	69db      	ldr	r3, [r3, #28]
 80060be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	021b      	lsls	r3, r3, #8
 80060d6:	68fa      	ldr	r2, [r7, #12]
 80060d8:	4313      	orrs	r3, r2
 80060da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	031b      	lsls	r3, r3, #12
 80060ea:	693a      	ldr	r2, [r7, #16]
 80060ec:	4313      	orrs	r3, r2
 80060ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	4a0f      	ldr	r2, [pc, #60]	; (8006130 <TIM_OC4_SetConfig+0x98>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d109      	bne.n	800610c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	695b      	ldr	r3, [r3, #20]
 8006104:	019b      	lsls	r3, r3, #6
 8006106:	697a      	ldr	r2, [r7, #20]
 8006108:	4313      	orrs	r3, r2
 800610a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	697a      	ldr	r2, [r7, #20]
 8006110:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	68fa      	ldr	r2, [r7, #12]
 8006116:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	685a      	ldr	r2, [r3, #4]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	693a      	ldr	r2, [r7, #16]
 8006124:	621a      	str	r2, [r3, #32]
}
 8006126:	bf00      	nop
 8006128:	371c      	adds	r7, #28
 800612a:	46bd      	mov	sp, r7
 800612c:	bc80      	pop	{r7}
 800612e:	4770      	bx	lr
 8006130:	40012c00 	.word	0x40012c00

08006134 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006134:	b480      	push	{r7}
 8006136:	b087      	sub	sp, #28
 8006138:	af00      	add	r7, sp, #0
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	60b9      	str	r1, [r7, #8]
 800613e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	f003 031f 	and.w	r3, r3, #31
 8006146:	2201      	movs	r2, #1
 8006148:	fa02 f303 	lsl.w	r3, r2, r3
 800614c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	6a1a      	ldr	r2, [r3, #32]
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	43db      	mvns	r3, r3
 8006156:	401a      	ands	r2, r3
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	6a1a      	ldr	r2, [r3, #32]
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	f003 031f 	and.w	r3, r3, #31
 8006166:	6879      	ldr	r1, [r7, #4]
 8006168:	fa01 f303 	lsl.w	r3, r1, r3
 800616c:	431a      	orrs	r2, r3
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	621a      	str	r2, [r3, #32]
}
 8006172:	bf00      	nop
 8006174:	371c      	adds	r7, #28
 8006176:	46bd      	mov	sp, r7
 8006178:	bc80      	pop	{r7}
 800617a:	4770      	bx	lr

0800617c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800617c:	b480      	push	{r7}
 800617e:	b085      	sub	sp, #20
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
 8006184:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800618c:	2b01      	cmp	r3, #1
 800618e:	d101      	bne.n	8006194 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006190:	2302      	movs	r3, #2
 8006192:	e046      	b.n	8006222 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2202      	movs	r2, #2
 80061a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	68fa      	ldr	r2, [r7, #12]
 80061c2:	4313      	orrs	r3, r2
 80061c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	68fa      	ldr	r2, [r7, #12]
 80061cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a16      	ldr	r2, [pc, #88]	; (800622c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d00e      	beq.n	80061f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061e0:	d009      	beq.n	80061f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a12      	ldr	r2, [pc, #72]	; (8006230 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d004      	beq.n	80061f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a10      	ldr	r2, [pc, #64]	; (8006234 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d10c      	bne.n	8006210 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	68ba      	ldr	r2, [r7, #8]
 8006204:	4313      	orrs	r3, r2
 8006206:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	68ba      	ldr	r2, [r7, #8]
 800620e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006220:	2300      	movs	r3, #0
}
 8006222:	4618      	mov	r0, r3
 8006224:	3714      	adds	r7, #20
 8006226:	46bd      	mov	sp, r7
 8006228:	bc80      	pop	{r7}
 800622a:	4770      	bx	lr
 800622c:	40012c00 	.word	0x40012c00
 8006230:	40000400 	.word	0x40000400
 8006234:	40000800 	.word	0x40000800

08006238 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b082      	sub	sp, #8
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d101      	bne.n	800624a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	e03f      	b.n	80062ca <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006250:	b2db      	uxtb	r3, r3
 8006252:	2b00      	cmp	r3, #0
 8006254:	d106      	bne.n	8006264 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f7fd fbd0 	bl	8003a04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2224      	movs	r2, #36	; 0x24
 8006268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	68da      	ldr	r2, [r3, #12]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800627a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f000 fc25 	bl	8006acc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	691a      	ldr	r2, [r3, #16]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006290:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	695a      	ldr	r2, [r3, #20]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80062a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	68da      	ldr	r2, [r3, #12]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80062b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2200      	movs	r2, #0
 80062b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2220      	movs	r2, #32
 80062bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2220      	movs	r2, #32
 80062c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80062c8:	2300      	movs	r3, #0
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3708      	adds	r7, #8
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}

080062d2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062d2:	b580      	push	{r7, lr}
 80062d4:	b08a      	sub	sp, #40	; 0x28
 80062d6:	af02      	add	r7, sp, #8
 80062d8:	60f8      	str	r0, [r7, #12]
 80062da:	60b9      	str	r1, [r7, #8]
 80062dc:	603b      	str	r3, [r7, #0]
 80062de:	4613      	mov	r3, r2
 80062e0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80062e2:	2300      	movs	r3, #0
 80062e4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	2b20      	cmp	r3, #32
 80062f0:	d17c      	bne.n	80063ec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d002      	beq.n	80062fe <HAL_UART_Transmit+0x2c>
 80062f8:	88fb      	ldrh	r3, [r7, #6]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d101      	bne.n	8006302 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	e075      	b.n	80063ee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006308:	2b01      	cmp	r3, #1
 800630a:	d101      	bne.n	8006310 <HAL_UART_Transmit+0x3e>
 800630c:	2302      	movs	r3, #2
 800630e:	e06e      	b.n	80063ee <HAL_UART_Transmit+0x11c>
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2201      	movs	r2, #1
 8006314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2200      	movs	r2, #0
 800631c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2221      	movs	r2, #33	; 0x21
 8006322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006326:	f7fd fc3f 	bl	8003ba8 <HAL_GetTick>
 800632a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	88fa      	ldrh	r2, [r7, #6]
 8006330:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	88fa      	ldrh	r2, [r7, #6]
 8006336:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006340:	d108      	bne.n	8006354 <HAL_UART_Transmit+0x82>
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	691b      	ldr	r3, [r3, #16]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d104      	bne.n	8006354 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800634a:	2300      	movs	r3, #0
 800634c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	61bb      	str	r3, [r7, #24]
 8006352:	e003      	b.n	800635c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006358:	2300      	movs	r3, #0
 800635a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2200      	movs	r2, #0
 8006360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006364:	e02a      	b.n	80063bc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	9300      	str	r3, [sp, #0]
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	2200      	movs	r2, #0
 800636e:	2180      	movs	r1, #128	; 0x80
 8006370:	68f8      	ldr	r0, [r7, #12]
 8006372:	f000 fa11 	bl	8006798 <UART_WaitOnFlagUntilTimeout>
 8006376:	4603      	mov	r3, r0
 8006378:	2b00      	cmp	r3, #0
 800637a:	d001      	beq.n	8006380 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800637c:	2303      	movs	r3, #3
 800637e:	e036      	b.n	80063ee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006380:	69fb      	ldr	r3, [r7, #28]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d10b      	bne.n	800639e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006386:	69bb      	ldr	r3, [r7, #24]
 8006388:	881b      	ldrh	r3, [r3, #0]
 800638a:	461a      	mov	r2, r3
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006394:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006396:	69bb      	ldr	r3, [r7, #24]
 8006398:	3302      	adds	r3, #2
 800639a:	61bb      	str	r3, [r7, #24]
 800639c:	e007      	b.n	80063ae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800639e:	69fb      	ldr	r3, [r7, #28]
 80063a0:	781a      	ldrb	r2, [r3, #0]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80063a8:	69fb      	ldr	r3, [r7, #28]
 80063aa:	3301      	adds	r3, #1
 80063ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	3b01      	subs	r3, #1
 80063b6:	b29a      	uxth	r2, r3
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d1cf      	bne.n	8006366 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	9300      	str	r3, [sp, #0]
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	2200      	movs	r2, #0
 80063ce:	2140      	movs	r1, #64	; 0x40
 80063d0:	68f8      	ldr	r0, [r7, #12]
 80063d2:	f000 f9e1 	bl	8006798 <UART_WaitOnFlagUntilTimeout>
 80063d6:	4603      	mov	r3, r0
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d001      	beq.n	80063e0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80063dc:	2303      	movs	r3, #3
 80063de:	e006      	b.n	80063ee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2220      	movs	r2, #32
 80063e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80063e8:	2300      	movs	r3, #0
 80063ea:	e000      	b.n	80063ee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80063ec:	2302      	movs	r3, #2
  }
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3720      	adds	r7, #32
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
	...

080063f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b08a      	sub	sp, #40	; 0x28
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	68db      	ldr	r3, [r3, #12]
 800640e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	695b      	ldr	r3, [r3, #20]
 8006416:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8006418:	2300      	movs	r3, #0
 800641a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800641c:	2300      	movs	r3, #0
 800641e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006422:	f003 030f 	and.w	r3, r3, #15
 8006426:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8006428:	69bb      	ldr	r3, [r7, #24]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d10d      	bne.n	800644a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800642e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006430:	f003 0320 	and.w	r3, r3, #32
 8006434:	2b00      	cmp	r3, #0
 8006436:	d008      	beq.n	800644a <HAL_UART_IRQHandler+0x52>
 8006438:	6a3b      	ldr	r3, [r7, #32]
 800643a:	f003 0320 	and.w	r3, r3, #32
 800643e:	2b00      	cmp	r3, #0
 8006440:	d003      	beq.n	800644a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f000 fa99 	bl	800697a <UART_Receive_IT>
      return;
 8006448:	e17b      	b.n	8006742 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800644a:	69bb      	ldr	r3, [r7, #24]
 800644c:	2b00      	cmp	r3, #0
 800644e:	f000 80b1 	beq.w	80065b4 <HAL_UART_IRQHandler+0x1bc>
 8006452:	69fb      	ldr	r3, [r7, #28]
 8006454:	f003 0301 	and.w	r3, r3, #1
 8006458:	2b00      	cmp	r3, #0
 800645a:	d105      	bne.n	8006468 <HAL_UART_IRQHandler+0x70>
 800645c:	6a3b      	ldr	r3, [r7, #32]
 800645e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006462:	2b00      	cmp	r3, #0
 8006464:	f000 80a6 	beq.w	80065b4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646a:	f003 0301 	and.w	r3, r3, #1
 800646e:	2b00      	cmp	r3, #0
 8006470:	d00a      	beq.n	8006488 <HAL_UART_IRQHandler+0x90>
 8006472:	6a3b      	ldr	r3, [r7, #32]
 8006474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006478:	2b00      	cmp	r3, #0
 800647a:	d005      	beq.n	8006488 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006480:	f043 0201 	orr.w	r2, r3, #1
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648a:	f003 0304 	and.w	r3, r3, #4
 800648e:	2b00      	cmp	r3, #0
 8006490:	d00a      	beq.n	80064a8 <HAL_UART_IRQHandler+0xb0>
 8006492:	69fb      	ldr	r3, [r7, #28]
 8006494:	f003 0301 	and.w	r3, r3, #1
 8006498:	2b00      	cmp	r3, #0
 800649a:	d005      	beq.n	80064a8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a0:	f043 0202 	orr.w	r2, r3, #2
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80064a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064aa:	f003 0302 	and.w	r3, r3, #2
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d00a      	beq.n	80064c8 <HAL_UART_IRQHandler+0xd0>
 80064b2:	69fb      	ldr	r3, [r7, #28]
 80064b4:	f003 0301 	and.w	r3, r3, #1
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d005      	beq.n	80064c8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c0:	f043 0204 	orr.w	r2, r3, #4
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80064c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ca:	f003 0308 	and.w	r3, r3, #8
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d00f      	beq.n	80064f2 <HAL_UART_IRQHandler+0xfa>
 80064d2:	6a3b      	ldr	r3, [r7, #32]
 80064d4:	f003 0320 	and.w	r3, r3, #32
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d104      	bne.n	80064e6 <HAL_UART_IRQHandler+0xee>
 80064dc:	69fb      	ldr	r3, [r7, #28]
 80064de:	f003 0301 	and.w	r3, r3, #1
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d005      	beq.n	80064f2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ea:	f043 0208 	orr.w	r2, r3, #8
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	f000 811e 	beq.w	8006738 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80064fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fe:	f003 0320 	and.w	r3, r3, #32
 8006502:	2b00      	cmp	r3, #0
 8006504:	d007      	beq.n	8006516 <HAL_UART_IRQHandler+0x11e>
 8006506:	6a3b      	ldr	r3, [r7, #32]
 8006508:	f003 0320 	and.w	r3, r3, #32
 800650c:	2b00      	cmp	r3, #0
 800650e:	d002      	beq.n	8006516 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f000 fa32 	bl	800697a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	695b      	ldr	r3, [r3, #20]
 800651c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006520:	2b00      	cmp	r3, #0
 8006522:	bf14      	ite	ne
 8006524:	2301      	movne	r3, #1
 8006526:	2300      	moveq	r3, #0
 8006528:	b2db      	uxtb	r3, r3
 800652a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006530:	f003 0308 	and.w	r3, r3, #8
 8006534:	2b00      	cmp	r3, #0
 8006536:	d102      	bne.n	800653e <HAL_UART_IRQHandler+0x146>
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d031      	beq.n	80065a2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f000 f974 	bl	800682c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	695b      	ldr	r3, [r3, #20]
 800654a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800654e:	2b00      	cmp	r3, #0
 8006550:	d023      	beq.n	800659a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	695a      	ldr	r2, [r3, #20]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006560:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006566:	2b00      	cmp	r3, #0
 8006568:	d013      	beq.n	8006592 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800656e:	4a76      	ldr	r2, [pc, #472]	; (8006748 <HAL_UART_IRQHandler+0x350>)
 8006570:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006576:	4618      	mov	r0, r3
 8006578:	f7fe f8e4 	bl	8004744 <HAL_DMA_Abort_IT>
 800657c:	4603      	mov	r3, r0
 800657e:	2b00      	cmp	r3, #0
 8006580:	d016      	beq.n	80065b0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006588:	687a      	ldr	r2, [r7, #4]
 800658a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800658c:	4610      	mov	r0, r2
 800658e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006590:	e00e      	b.n	80065b0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 f8ec 	bl	8006770 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006598:	e00a      	b.n	80065b0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 f8e8 	bl	8006770 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065a0:	e006      	b.n	80065b0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 f8e4 	bl	8006770 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2200      	movs	r2, #0
 80065ac:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80065ae:	e0c3      	b.n	8006738 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065b0:	bf00      	nop
    return;
 80065b2:	e0c1      	b.n	8006738 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	f040 80a1 	bne.w	8006700 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80065be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c0:	f003 0310 	and.w	r3, r3, #16
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	f000 809b 	beq.w	8006700 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80065ca:	6a3b      	ldr	r3, [r7, #32]
 80065cc:	f003 0310 	and.w	r3, r3, #16
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	f000 8095 	beq.w	8006700 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80065d6:	2300      	movs	r3, #0
 80065d8:	60fb      	str	r3, [r7, #12]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	60fb      	str	r3, [r7, #12]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	60fb      	str	r3, [r7, #12]
 80065ea:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	695b      	ldr	r3, [r3, #20]
 80065f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d04e      	beq.n	8006698 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8006604:	8a3b      	ldrh	r3, [r7, #16]
 8006606:	2b00      	cmp	r3, #0
 8006608:	f000 8098 	beq.w	800673c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006610:	8a3a      	ldrh	r2, [r7, #16]
 8006612:	429a      	cmp	r2, r3
 8006614:	f080 8092 	bcs.w	800673c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	8a3a      	ldrh	r2, [r7, #16]
 800661c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006622:	699b      	ldr	r3, [r3, #24]
 8006624:	2b20      	cmp	r3, #32
 8006626:	d02b      	beq.n	8006680 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	68da      	ldr	r2, [r3, #12]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006636:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	695a      	ldr	r2, [r3, #20]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f022 0201 	bic.w	r2, r2, #1
 8006646:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	695a      	ldr	r2, [r3, #20]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006656:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2220      	movs	r2, #32
 800665c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2200      	movs	r2, #0
 8006664:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	68da      	ldr	r2, [r3, #12]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f022 0210 	bic.w	r2, r2, #16
 8006674:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800667a:	4618      	mov	r0, r3
 800667c:	f7fe f827 	bl	80046ce <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006688:	b29b      	uxth	r3, r3
 800668a:	1ad3      	subs	r3, r2, r3
 800668c:	b29b      	uxth	r3, r3
 800668e:	4619      	mov	r1, r3
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f000 f876 	bl	8006782 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006696:	e051      	b.n	800673c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	1ad3      	subs	r3, r2, r3
 80066a4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d047      	beq.n	8006740 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80066b0:	8a7b      	ldrh	r3, [r7, #18]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d044      	beq.n	8006740 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	68da      	ldr	r2, [r3, #12]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80066c4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	695a      	ldr	r2, [r3, #20]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f022 0201 	bic.w	r2, r2, #1
 80066d4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2220      	movs	r2, #32
 80066da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2200      	movs	r2, #0
 80066e2:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	68da      	ldr	r2, [r3, #12]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f022 0210 	bic.w	r2, r2, #16
 80066f2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80066f4:	8a7b      	ldrh	r3, [r7, #18]
 80066f6:	4619      	mov	r1, r3
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f000 f842 	bl	8006782 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80066fe:	e01f      	b.n	8006740 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006706:	2b00      	cmp	r3, #0
 8006708:	d008      	beq.n	800671c <HAL_UART_IRQHandler+0x324>
 800670a:	6a3b      	ldr	r3, [r7, #32]
 800670c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006710:	2b00      	cmp	r3, #0
 8006712:	d003      	beq.n	800671c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f000 f8c9 	bl	80068ac <UART_Transmit_IT>
    return;
 800671a:	e012      	b.n	8006742 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800671c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006722:	2b00      	cmp	r3, #0
 8006724:	d00d      	beq.n	8006742 <HAL_UART_IRQHandler+0x34a>
 8006726:	6a3b      	ldr	r3, [r7, #32]
 8006728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800672c:	2b00      	cmp	r3, #0
 800672e:	d008      	beq.n	8006742 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f000 f90a 	bl	800694a <UART_EndTransmit_IT>
    return;
 8006736:	e004      	b.n	8006742 <HAL_UART_IRQHandler+0x34a>
    return;
 8006738:	bf00      	nop
 800673a:	e002      	b.n	8006742 <HAL_UART_IRQHandler+0x34a>
      return;
 800673c:	bf00      	nop
 800673e:	e000      	b.n	8006742 <HAL_UART_IRQHandler+0x34a>
      return;
 8006740:	bf00      	nop
  }
}
 8006742:	3728      	adds	r7, #40	; 0x28
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}
 8006748:	08006885 	.word	0x08006885

0800674c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800674c:	b480      	push	{r7}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006754:	bf00      	nop
 8006756:	370c      	adds	r7, #12
 8006758:	46bd      	mov	sp, r7
 800675a:	bc80      	pop	{r7}
 800675c:	4770      	bx	lr

0800675e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800675e:	b480      	push	{r7}
 8006760:	b083      	sub	sp, #12
 8006762:	af00      	add	r7, sp, #0
 8006764:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006766:	bf00      	nop
 8006768:	370c      	adds	r7, #12
 800676a:	46bd      	mov	sp, r7
 800676c:	bc80      	pop	{r7}
 800676e:	4770      	bx	lr

08006770 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006770:	b480      	push	{r7}
 8006772:	b083      	sub	sp, #12
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006778:	bf00      	nop
 800677a:	370c      	adds	r7, #12
 800677c:	46bd      	mov	sp, r7
 800677e:	bc80      	pop	{r7}
 8006780:	4770      	bx	lr

08006782 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006782:	b480      	push	{r7}
 8006784:	b083      	sub	sp, #12
 8006786:	af00      	add	r7, sp, #0
 8006788:	6078      	str	r0, [r7, #4]
 800678a:	460b      	mov	r3, r1
 800678c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800678e:	bf00      	nop
 8006790:	370c      	adds	r7, #12
 8006792:	46bd      	mov	sp, r7
 8006794:	bc80      	pop	{r7}
 8006796:	4770      	bx	lr

08006798 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b084      	sub	sp, #16
 800679c:	af00      	add	r7, sp, #0
 800679e:	60f8      	str	r0, [r7, #12]
 80067a0:	60b9      	str	r1, [r7, #8]
 80067a2:	603b      	str	r3, [r7, #0]
 80067a4:	4613      	mov	r3, r2
 80067a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067a8:	e02c      	b.n	8006804 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067aa:	69bb      	ldr	r3, [r7, #24]
 80067ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067b0:	d028      	beq.n	8006804 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80067b2:	69bb      	ldr	r3, [r7, #24]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d007      	beq.n	80067c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80067b8:	f7fd f9f6 	bl	8003ba8 <HAL_GetTick>
 80067bc:	4602      	mov	r2, r0
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	1ad3      	subs	r3, r2, r3
 80067c2:	69ba      	ldr	r2, [r7, #24]
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d21d      	bcs.n	8006804 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	68da      	ldr	r2, [r3, #12]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80067d6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	695a      	ldr	r2, [r3, #20]
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f022 0201 	bic.w	r2, r2, #1
 80067e6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2220      	movs	r2, #32
 80067ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2220      	movs	r2, #32
 80067f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2200      	movs	r2, #0
 80067fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006800:	2303      	movs	r3, #3
 8006802:	e00f      	b.n	8006824 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	4013      	ands	r3, r2
 800680e:	68ba      	ldr	r2, [r7, #8]
 8006810:	429a      	cmp	r2, r3
 8006812:	bf0c      	ite	eq
 8006814:	2301      	moveq	r3, #1
 8006816:	2300      	movne	r3, #0
 8006818:	b2db      	uxtb	r3, r3
 800681a:	461a      	mov	r2, r3
 800681c:	79fb      	ldrb	r3, [r7, #7]
 800681e:	429a      	cmp	r2, r3
 8006820:	d0c3      	beq.n	80067aa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006822:	2300      	movs	r3, #0
}
 8006824:	4618      	mov	r0, r3
 8006826:	3710      	adds	r7, #16
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	68da      	ldr	r2, [r3, #12]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006842:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	695a      	ldr	r2, [r3, #20]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f022 0201 	bic.w	r2, r2, #1
 8006852:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006858:	2b01      	cmp	r3, #1
 800685a:	d107      	bne.n	800686c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	68da      	ldr	r2, [r3, #12]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f022 0210 	bic.w	r2, r2, #16
 800686a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2220      	movs	r2, #32
 8006870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	631a      	str	r2, [r3, #48]	; 0x30
}
 800687a:	bf00      	nop
 800687c:	370c      	adds	r7, #12
 800687e:	46bd      	mov	sp, r7
 8006880:	bc80      	pop	{r7}
 8006882:	4770      	bx	lr

08006884 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b084      	sub	sp, #16
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006890:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2200      	movs	r2, #0
 8006896:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2200      	movs	r2, #0
 800689c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800689e:	68f8      	ldr	r0, [r7, #12]
 80068a0:	f7ff ff66 	bl	8006770 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068a4:	bf00      	nop
 80068a6:	3710      	adds	r7, #16
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}

080068ac <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b085      	sub	sp, #20
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	2b21      	cmp	r3, #33	; 0x21
 80068be:	d13e      	bne.n	800693e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068c8:	d114      	bne.n	80068f4 <UART_Transmit_IT+0x48>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	691b      	ldr	r3, [r3, #16]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d110      	bne.n	80068f4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6a1b      	ldr	r3, [r3, #32]
 80068d6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	881b      	ldrh	r3, [r3, #0]
 80068dc:	461a      	mov	r2, r3
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80068e6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6a1b      	ldr	r3, [r3, #32]
 80068ec:	1c9a      	adds	r2, r3, #2
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	621a      	str	r2, [r3, #32]
 80068f2:	e008      	b.n	8006906 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6a1b      	ldr	r3, [r3, #32]
 80068f8:	1c59      	adds	r1, r3, #1
 80068fa:	687a      	ldr	r2, [r7, #4]
 80068fc:	6211      	str	r1, [r2, #32]
 80068fe:	781a      	ldrb	r2, [r3, #0]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800690a:	b29b      	uxth	r3, r3
 800690c:	3b01      	subs	r3, #1
 800690e:	b29b      	uxth	r3, r3
 8006910:	687a      	ldr	r2, [r7, #4]
 8006912:	4619      	mov	r1, r3
 8006914:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006916:	2b00      	cmp	r3, #0
 8006918:	d10f      	bne.n	800693a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	68da      	ldr	r2, [r3, #12]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006928:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	68da      	ldr	r2, [r3, #12]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006938:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800693a:	2300      	movs	r3, #0
 800693c:	e000      	b.n	8006940 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800693e:	2302      	movs	r3, #2
  }
}
 8006940:	4618      	mov	r0, r3
 8006942:	3714      	adds	r7, #20
 8006944:	46bd      	mov	sp, r7
 8006946:	bc80      	pop	{r7}
 8006948:	4770      	bx	lr

0800694a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800694a:	b580      	push	{r7, lr}
 800694c:	b082      	sub	sp, #8
 800694e:	af00      	add	r7, sp, #0
 8006950:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	68da      	ldr	r2, [r3, #12]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006960:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2220      	movs	r2, #32
 8006966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f7ff feee 	bl	800674c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006970:	2300      	movs	r3, #0
}
 8006972:	4618      	mov	r0, r3
 8006974:	3708      	adds	r7, #8
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}

0800697a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800697a:	b580      	push	{r7, lr}
 800697c:	b086      	sub	sp, #24
 800697e:	af00      	add	r7, sp, #0
 8006980:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006988:	b2db      	uxtb	r3, r3
 800698a:	2b22      	cmp	r3, #34	; 0x22
 800698c:	f040 8099 	bne.w	8006ac2 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006998:	d117      	bne.n	80069ca <UART_Receive_IT+0x50>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	691b      	ldr	r3, [r3, #16]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d113      	bne.n	80069ca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80069a2:	2300      	movs	r3, #0
 80069a4:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069aa:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069b8:	b29a      	uxth	r2, r3
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069c2:	1c9a      	adds	r2, r3, #2
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	629a      	str	r2, [r3, #40]	; 0x28
 80069c8:	e026      	b.n	8006a18 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ce:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80069d0:	2300      	movs	r3, #0
 80069d2:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069dc:	d007      	beq.n	80069ee <UART_Receive_IT+0x74>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d10a      	bne.n	80069fc <UART_Receive_IT+0x82>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	691b      	ldr	r3, [r3, #16]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d106      	bne.n	80069fc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	b2da      	uxtb	r2, r3
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	701a      	strb	r2, [r3, #0]
 80069fa:	e008      	b.n	8006a0e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	b2db      	uxtb	r3, r3
 8006a04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a08:	b2da      	uxtb	r2, r3
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a12:	1c5a      	adds	r2, r3, #1
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	3b01      	subs	r3, #1
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	687a      	ldr	r2, [r7, #4]
 8006a24:	4619      	mov	r1, r3
 8006a26:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d148      	bne.n	8006abe <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	68da      	ldr	r2, [r3, #12]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f022 0220 	bic.w	r2, r2, #32
 8006a3a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	68da      	ldr	r2, [r3, #12]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a4a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	695a      	ldr	r2, [r3, #20]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f022 0201 	bic.w	r2, r2, #1
 8006a5a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2220      	movs	r2, #32
 8006a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	d123      	bne.n	8006ab4 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	68da      	ldr	r2, [r3, #12]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f022 0210 	bic.w	r2, r2, #16
 8006a80:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f003 0310 	and.w	r3, r3, #16
 8006a8c:	2b10      	cmp	r3, #16
 8006a8e:	d10a      	bne.n	8006aa6 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a90:	2300      	movs	r3, #0
 8006a92:	60fb      	str	r3, [r7, #12]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	60fb      	str	r3, [r7, #12]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	60fb      	str	r3, [r7, #12]
 8006aa4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006aaa:	4619      	mov	r1, r3
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f7ff fe68 	bl	8006782 <HAL_UARTEx_RxEventCallback>
 8006ab2:	e002      	b.n	8006aba <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f7ff fe52 	bl	800675e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006aba:	2300      	movs	r3, #0
 8006abc:	e002      	b.n	8006ac4 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	e000      	b.n	8006ac4 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8006ac2:	2302      	movs	r3, #2
  }
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3718      	adds	r7, #24
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}

08006acc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b084      	sub	sp, #16
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	691b      	ldr	r3, [r3, #16]
 8006ada:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	68da      	ldr	r2, [r3, #12]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	430a      	orrs	r2, r1
 8006ae8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	689a      	ldr	r2, [r3, #8]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	691b      	ldr	r3, [r3, #16]
 8006af2:	431a      	orrs	r2, r3
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	695b      	ldr	r3, [r3, #20]
 8006af8:	4313      	orrs	r3, r2
 8006afa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	68db      	ldr	r3, [r3, #12]
 8006b02:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006b06:	f023 030c 	bic.w	r3, r3, #12
 8006b0a:	687a      	ldr	r2, [r7, #4]
 8006b0c:	6812      	ldr	r2, [r2, #0]
 8006b0e:	68b9      	ldr	r1, [r7, #8]
 8006b10:	430b      	orrs	r3, r1
 8006b12:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	695b      	ldr	r3, [r3, #20]
 8006b1a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	699a      	ldr	r2, [r3, #24]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	430a      	orrs	r2, r1
 8006b28:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a2c      	ldr	r2, [pc, #176]	; (8006be0 <UART_SetConfig+0x114>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d103      	bne.n	8006b3c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006b34:	f7fe fd4c 	bl	80055d0 <HAL_RCC_GetPCLK2Freq>
 8006b38:	60f8      	str	r0, [r7, #12]
 8006b3a:	e002      	b.n	8006b42 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006b3c:	f7fe fd34 	bl	80055a8 <HAL_RCC_GetPCLK1Freq>
 8006b40:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006b42:	68fa      	ldr	r2, [r7, #12]
 8006b44:	4613      	mov	r3, r2
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	4413      	add	r3, r2
 8006b4a:	009a      	lsls	r2, r3, #2
 8006b4c:	441a      	add	r2, r3
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	009b      	lsls	r3, r3, #2
 8006b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b58:	4a22      	ldr	r2, [pc, #136]	; (8006be4 <UART_SetConfig+0x118>)
 8006b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8006b5e:	095b      	lsrs	r3, r3, #5
 8006b60:	0119      	lsls	r1, r3, #4
 8006b62:	68fa      	ldr	r2, [r7, #12]
 8006b64:	4613      	mov	r3, r2
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	4413      	add	r3, r2
 8006b6a:	009a      	lsls	r2, r3, #2
 8006b6c:	441a      	add	r2, r3
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	fbb2 f2f3 	udiv	r2, r2, r3
 8006b78:	4b1a      	ldr	r3, [pc, #104]	; (8006be4 <UART_SetConfig+0x118>)
 8006b7a:	fba3 0302 	umull	r0, r3, r3, r2
 8006b7e:	095b      	lsrs	r3, r3, #5
 8006b80:	2064      	movs	r0, #100	; 0x64
 8006b82:	fb00 f303 	mul.w	r3, r0, r3
 8006b86:	1ad3      	subs	r3, r2, r3
 8006b88:	011b      	lsls	r3, r3, #4
 8006b8a:	3332      	adds	r3, #50	; 0x32
 8006b8c:	4a15      	ldr	r2, [pc, #84]	; (8006be4 <UART_SetConfig+0x118>)
 8006b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8006b92:	095b      	lsrs	r3, r3, #5
 8006b94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b98:	4419      	add	r1, r3
 8006b9a:	68fa      	ldr	r2, [r7, #12]
 8006b9c:	4613      	mov	r3, r2
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	4413      	add	r3, r2
 8006ba2:	009a      	lsls	r2, r3, #2
 8006ba4:	441a      	add	r2, r3
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	fbb2 f2f3 	udiv	r2, r2, r3
 8006bb0:	4b0c      	ldr	r3, [pc, #48]	; (8006be4 <UART_SetConfig+0x118>)
 8006bb2:	fba3 0302 	umull	r0, r3, r3, r2
 8006bb6:	095b      	lsrs	r3, r3, #5
 8006bb8:	2064      	movs	r0, #100	; 0x64
 8006bba:	fb00 f303 	mul.w	r3, r0, r3
 8006bbe:	1ad3      	subs	r3, r2, r3
 8006bc0:	011b      	lsls	r3, r3, #4
 8006bc2:	3332      	adds	r3, #50	; 0x32
 8006bc4:	4a07      	ldr	r2, [pc, #28]	; (8006be4 <UART_SetConfig+0x118>)
 8006bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8006bca:	095b      	lsrs	r3, r3, #5
 8006bcc:	f003 020f 	and.w	r2, r3, #15
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	440a      	add	r2, r1
 8006bd6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006bd8:	bf00      	nop
 8006bda:	3710      	adds	r7, #16
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}
 8006be0:	40013800 	.word	0x40013800
 8006be4:	51eb851f 	.word	0x51eb851f

08006be8 <pow>:
 8006be8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bec:	4614      	mov	r4, r2
 8006bee:	461d      	mov	r5, r3
 8006bf0:	4680      	mov	r8, r0
 8006bf2:	4689      	mov	r9, r1
 8006bf4:	f000 f860 	bl	8006cb8 <__ieee754_pow>
 8006bf8:	4622      	mov	r2, r4
 8006bfa:	4606      	mov	r6, r0
 8006bfc:	460f      	mov	r7, r1
 8006bfe:	462b      	mov	r3, r5
 8006c00:	4620      	mov	r0, r4
 8006c02:	4629      	mov	r1, r5
 8006c04:	f7f9 fefa 	bl	80009fc <__aeabi_dcmpun>
 8006c08:	bbc8      	cbnz	r0, 8006c7e <pow+0x96>
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	4640      	mov	r0, r8
 8006c10:	4649      	mov	r1, r9
 8006c12:	f7f9 fec1 	bl	8000998 <__aeabi_dcmpeq>
 8006c16:	b1b8      	cbz	r0, 8006c48 <pow+0x60>
 8006c18:	2200      	movs	r2, #0
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	4620      	mov	r0, r4
 8006c1e:	4629      	mov	r1, r5
 8006c20:	f7f9 feba 	bl	8000998 <__aeabi_dcmpeq>
 8006c24:	2800      	cmp	r0, #0
 8006c26:	d141      	bne.n	8006cac <pow+0xc4>
 8006c28:	4620      	mov	r0, r4
 8006c2a:	4629      	mov	r1, r5
 8006c2c:	f000 fe39 	bl	80078a2 <finite>
 8006c30:	b328      	cbz	r0, 8006c7e <pow+0x96>
 8006c32:	2200      	movs	r2, #0
 8006c34:	2300      	movs	r3, #0
 8006c36:	4620      	mov	r0, r4
 8006c38:	4629      	mov	r1, r5
 8006c3a:	f7f9 feb7 	bl	80009ac <__aeabi_dcmplt>
 8006c3e:	b1f0      	cbz	r0, 8006c7e <pow+0x96>
 8006c40:	f000 feb4 	bl	80079ac <__errno>
 8006c44:	2322      	movs	r3, #34	; 0x22
 8006c46:	e019      	b.n	8006c7c <pow+0x94>
 8006c48:	4630      	mov	r0, r6
 8006c4a:	4639      	mov	r1, r7
 8006c4c:	f000 fe29 	bl	80078a2 <finite>
 8006c50:	b9c8      	cbnz	r0, 8006c86 <pow+0x9e>
 8006c52:	4640      	mov	r0, r8
 8006c54:	4649      	mov	r1, r9
 8006c56:	f000 fe24 	bl	80078a2 <finite>
 8006c5a:	b1a0      	cbz	r0, 8006c86 <pow+0x9e>
 8006c5c:	4620      	mov	r0, r4
 8006c5e:	4629      	mov	r1, r5
 8006c60:	f000 fe1f 	bl	80078a2 <finite>
 8006c64:	b178      	cbz	r0, 8006c86 <pow+0x9e>
 8006c66:	4632      	mov	r2, r6
 8006c68:	463b      	mov	r3, r7
 8006c6a:	4630      	mov	r0, r6
 8006c6c:	4639      	mov	r1, r7
 8006c6e:	f7f9 fec5 	bl	80009fc <__aeabi_dcmpun>
 8006c72:	2800      	cmp	r0, #0
 8006c74:	d0e4      	beq.n	8006c40 <pow+0x58>
 8006c76:	f000 fe99 	bl	80079ac <__errno>
 8006c7a:	2321      	movs	r3, #33	; 0x21
 8006c7c:	6003      	str	r3, [r0, #0]
 8006c7e:	4630      	mov	r0, r6
 8006c80:	4639      	mov	r1, r7
 8006c82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c86:	2200      	movs	r2, #0
 8006c88:	2300      	movs	r3, #0
 8006c8a:	4630      	mov	r0, r6
 8006c8c:	4639      	mov	r1, r7
 8006c8e:	f7f9 fe83 	bl	8000998 <__aeabi_dcmpeq>
 8006c92:	2800      	cmp	r0, #0
 8006c94:	d0f3      	beq.n	8006c7e <pow+0x96>
 8006c96:	4640      	mov	r0, r8
 8006c98:	4649      	mov	r1, r9
 8006c9a:	f000 fe02 	bl	80078a2 <finite>
 8006c9e:	2800      	cmp	r0, #0
 8006ca0:	d0ed      	beq.n	8006c7e <pow+0x96>
 8006ca2:	4620      	mov	r0, r4
 8006ca4:	4629      	mov	r1, r5
 8006ca6:	f000 fdfc 	bl	80078a2 <finite>
 8006caa:	e7c8      	b.n	8006c3e <pow+0x56>
 8006cac:	2600      	movs	r6, #0
 8006cae:	4f01      	ldr	r7, [pc, #4]	; (8006cb4 <pow+0xcc>)
 8006cb0:	e7e5      	b.n	8006c7e <pow+0x96>
 8006cb2:	bf00      	nop
 8006cb4:	3ff00000 	.word	0x3ff00000

08006cb8 <__ieee754_pow>:
 8006cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cbc:	b093      	sub	sp, #76	; 0x4c
 8006cbe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006cc2:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 8006cc6:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8006cca:	4689      	mov	r9, r1
 8006ccc:	ea56 0102 	orrs.w	r1, r6, r2
 8006cd0:	4680      	mov	r8, r0
 8006cd2:	d111      	bne.n	8006cf8 <__ieee754_pow+0x40>
 8006cd4:	1803      	adds	r3, r0, r0
 8006cd6:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8006cda:	4152      	adcs	r2, r2
 8006cdc:	4299      	cmp	r1, r3
 8006cde:	4b82      	ldr	r3, [pc, #520]	; (8006ee8 <__ieee754_pow+0x230>)
 8006ce0:	4193      	sbcs	r3, r2
 8006ce2:	f080 84b9 	bcs.w	8007658 <__ieee754_pow+0x9a0>
 8006ce6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006cea:	4640      	mov	r0, r8
 8006cec:	4649      	mov	r1, r9
 8006cee:	f7f9 fa35 	bl	800015c <__adddf3>
 8006cf2:	4683      	mov	fp, r0
 8006cf4:	468c      	mov	ip, r1
 8006cf6:	e06f      	b.n	8006dd8 <__ieee754_pow+0x120>
 8006cf8:	4b7c      	ldr	r3, [pc, #496]	; (8006eec <__ieee754_pow+0x234>)
 8006cfa:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8006cfe:	429c      	cmp	r4, r3
 8006d00:	464d      	mov	r5, r9
 8006d02:	4682      	mov	sl, r0
 8006d04:	dc06      	bgt.n	8006d14 <__ieee754_pow+0x5c>
 8006d06:	d101      	bne.n	8006d0c <__ieee754_pow+0x54>
 8006d08:	2800      	cmp	r0, #0
 8006d0a:	d1ec      	bne.n	8006ce6 <__ieee754_pow+0x2e>
 8006d0c:	429e      	cmp	r6, r3
 8006d0e:	dc01      	bgt.n	8006d14 <__ieee754_pow+0x5c>
 8006d10:	d10f      	bne.n	8006d32 <__ieee754_pow+0x7a>
 8006d12:	b172      	cbz	r2, 8006d32 <__ieee754_pow+0x7a>
 8006d14:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8006d18:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8006d1c:	ea55 050a 	orrs.w	r5, r5, sl
 8006d20:	d1e1      	bne.n	8006ce6 <__ieee754_pow+0x2e>
 8006d22:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8006d26:	18db      	adds	r3, r3, r3
 8006d28:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8006d2c:	4152      	adcs	r2, r2
 8006d2e:	429d      	cmp	r5, r3
 8006d30:	e7d5      	b.n	8006cde <__ieee754_pow+0x26>
 8006d32:	2d00      	cmp	r5, #0
 8006d34:	da39      	bge.n	8006daa <__ieee754_pow+0xf2>
 8006d36:	4b6e      	ldr	r3, [pc, #440]	; (8006ef0 <__ieee754_pow+0x238>)
 8006d38:	429e      	cmp	r6, r3
 8006d3a:	dc52      	bgt.n	8006de2 <__ieee754_pow+0x12a>
 8006d3c:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8006d40:	429e      	cmp	r6, r3
 8006d42:	f340 849c 	ble.w	800767e <__ieee754_pow+0x9c6>
 8006d46:	1533      	asrs	r3, r6, #20
 8006d48:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006d4c:	2b14      	cmp	r3, #20
 8006d4e:	dd0f      	ble.n	8006d70 <__ieee754_pow+0xb8>
 8006d50:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8006d54:	fa22 f103 	lsr.w	r1, r2, r3
 8006d58:	fa01 f303 	lsl.w	r3, r1, r3
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	f040 848e 	bne.w	800767e <__ieee754_pow+0x9c6>
 8006d62:	f001 0101 	and.w	r1, r1, #1
 8006d66:	f1c1 0302 	rsb	r3, r1, #2
 8006d6a:	9300      	str	r3, [sp, #0]
 8006d6c:	b182      	cbz	r2, 8006d90 <__ieee754_pow+0xd8>
 8006d6e:	e05d      	b.n	8006e2c <__ieee754_pow+0x174>
 8006d70:	2a00      	cmp	r2, #0
 8006d72:	d159      	bne.n	8006e28 <__ieee754_pow+0x170>
 8006d74:	f1c3 0314 	rsb	r3, r3, #20
 8006d78:	fa46 f103 	asr.w	r1, r6, r3
 8006d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8006d80:	42b3      	cmp	r3, r6
 8006d82:	f040 8479 	bne.w	8007678 <__ieee754_pow+0x9c0>
 8006d86:	f001 0101 	and.w	r1, r1, #1
 8006d8a:	f1c1 0302 	rsb	r3, r1, #2
 8006d8e:	9300      	str	r3, [sp, #0]
 8006d90:	4b58      	ldr	r3, [pc, #352]	; (8006ef4 <__ieee754_pow+0x23c>)
 8006d92:	429e      	cmp	r6, r3
 8006d94:	d132      	bne.n	8006dfc <__ieee754_pow+0x144>
 8006d96:	2f00      	cmp	r7, #0
 8006d98:	f280 846a 	bge.w	8007670 <__ieee754_pow+0x9b8>
 8006d9c:	4642      	mov	r2, r8
 8006d9e:	464b      	mov	r3, r9
 8006da0:	2000      	movs	r0, #0
 8006da2:	4954      	ldr	r1, [pc, #336]	; (8006ef4 <__ieee754_pow+0x23c>)
 8006da4:	f7f9 fcba 	bl	800071c <__aeabi_ddiv>
 8006da8:	e7a3      	b.n	8006cf2 <__ieee754_pow+0x3a>
 8006daa:	2300      	movs	r3, #0
 8006dac:	9300      	str	r3, [sp, #0]
 8006dae:	2a00      	cmp	r2, #0
 8006db0:	d13c      	bne.n	8006e2c <__ieee754_pow+0x174>
 8006db2:	4b4e      	ldr	r3, [pc, #312]	; (8006eec <__ieee754_pow+0x234>)
 8006db4:	429e      	cmp	r6, r3
 8006db6:	d1eb      	bne.n	8006d90 <__ieee754_pow+0xd8>
 8006db8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8006dbc:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8006dc0:	ea53 030a 	orrs.w	r3, r3, sl
 8006dc4:	f000 8448 	beq.w	8007658 <__ieee754_pow+0x9a0>
 8006dc8:	4b4b      	ldr	r3, [pc, #300]	; (8006ef8 <__ieee754_pow+0x240>)
 8006dca:	429c      	cmp	r4, r3
 8006dcc:	dd0b      	ble.n	8006de6 <__ieee754_pow+0x12e>
 8006dce:	2f00      	cmp	r7, #0
 8006dd0:	f2c0 8448 	blt.w	8007664 <__ieee754_pow+0x9ac>
 8006dd4:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8006dd8:	4658      	mov	r0, fp
 8006dda:	4661      	mov	r1, ip
 8006ddc:	b013      	add	sp, #76	; 0x4c
 8006dde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006de2:	2302      	movs	r3, #2
 8006de4:	e7e2      	b.n	8006dac <__ieee754_pow+0xf4>
 8006de6:	2f00      	cmp	r7, #0
 8006de8:	f04f 0b00 	mov.w	fp, #0
 8006dec:	f04f 0c00 	mov.w	ip, #0
 8006df0:	daf2      	bge.n	8006dd8 <__ieee754_pow+0x120>
 8006df2:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8006df6:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8006dfa:	e7ed      	b.n	8006dd8 <__ieee754_pow+0x120>
 8006dfc:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8006e00:	d106      	bne.n	8006e10 <__ieee754_pow+0x158>
 8006e02:	4642      	mov	r2, r8
 8006e04:	464b      	mov	r3, r9
 8006e06:	4640      	mov	r0, r8
 8006e08:	4649      	mov	r1, r9
 8006e0a:	f7f9 fb5d 	bl	80004c8 <__aeabi_dmul>
 8006e0e:	e770      	b.n	8006cf2 <__ieee754_pow+0x3a>
 8006e10:	4b3a      	ldr	r3, [pc, #232]	; (8006efc <__ieee754_pow+0x244>)
 8006e12:	429f      	cmp	r7, r3
 8006e14:	d10a      	bne.n	8006e2c <__ieee754_pow+0x174>
 8006e16:	2d00      	cmp	r5, #0
 8006e18:	db08      	blt.n	8006e2c <__ieee754_pow+0x174>
 8006e1a:	4640      	mov	r0, r8
 8006e1c:	4649      	mov	r1, r9
 8006e1e:	b013      	add	sp, #76	; 0x4c
 8006e20:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e24:	f000 bc5e 	b.w	80076e4 <__ieee754_sqrt>
 8006e28:	2300      	movs	r3, #0
 8006e2a:	9300      	str	r3, [sp, #0]
 8006e2c:	4640      	mov	r0, r8
 8006e2e:	4649      	mov	r1, r9
 8006e30:	f000 fd34 	bl	800789c <fabs>
 8006e34:	4683      	mov	fp, r0
 8006e36:	468c      	mov	ip, r1
 8006e38:	f1ba 0f00 	cmp.w	sl, #0
 8006e3c:	d128      	bne.n	8006e90 <__ieee754_pow+0x1d8>
 8006e3e:	b124      	cbz	r4, 8006e4a <__ieee754_pow+0x192>
 8006e40:	4b2c      	ldr	r3, [pc, #176]	; (8006ef4 <__ieee754_pow+0x23c>)
 8006e42:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d122      	bne.n	8006e90 <__ieee754_pow+0x1d8>
 8006e4a:	2f00      	cmp	r7, #0
 8006e4c:	da07      	bge.n	8006e5e <__ieee754_pow+0x1a6>
 8006e4e:	465a      	mov	r2, fp
 8006e50:	4663      	mov	r3, ip
 8006e52:	2000      	movs	r0, #0
 8006e54:	4927      	ldr	r1, [pc, #156]	; (8006ef4 <__ieee754_pow+0x23c>)
 8006e56:	f7f9 fc61 	bl	800071c <__aeabi_ddiv>
 8006e5a:	4683      	mov	fp, r0
 8006e5c:	468c      	mov	ip, r1
 8006e5e:	2d00      	cmp	r5, #0
 8006e60:	daba      	bge.n	8006dd8 <__ieee754_pow+0x120>
 8006e62:	9b00      	ldr	r3, [sp, #0]
 8006e64:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006e68:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006e6c:	4323      	orrs	r3, r4
 8006e6e:	d108      	bne.n	8006e82 <__ieee754_pow+0x1ca>
 8006e70:	465a      	mov	r2, fp
 8006e72:	4663      	mov	r3, ip
 8006e74:	4658      	mov	r0, fp
 8006e76:	4661      	mov	r1, ip
 8006e78:	f7f9 f96e 	bl	8000158 <__aeabi_dsub>
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	460b      	mov	r3, r1
 8006e80:	e790      	b.n	8006da4 <__ieee754_pow+0xec>
 8006e82:	9b00      	ldr	r3, [sp, #0]
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d1a7      	bne.n	8006dd8 <__ieee754_pow+0x120>
 8006e88:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8006e8c:	469c      	mov	ip, r3
 8006e8e:	e7a3      	b.n	8006dd8 <__ieee754_pow+0x120>
 8006e90:	0feb      	lsrs	r3, r5, #31
 8006e92:	3b01      	subs	r3, #1
 8006e94:	930c      	str	r3, [sp, #48]	; 0x30
 8006e96:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006e98:	9b00      	ldr	r3, [sp, #0]
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	d104      	bne.n	8006ea8 <__ieee754_pow+0x1f0>
 8006e9e:	4642      	mov	r2, r8
 8006ea0:	464b      	mov	r3, r9
 8006ea2:	4640      	mov	r0, r8
 8006ea4:	4649      	mov	r1, r9
 8006ea6:	e7e7      	b.n	8006e78 <__ieee754_pow+0x1c0>
 8006ea8:	4b15      	ldr	r3, [pc, #84]	; (8006f00 <__ieee754_pow+0x248>)
 8006eaa:	429e      	cmp	r6, r3
 8006eac:	f340 80f6 	ble.w	800709c <__ieee754_pow+0x3e4>
 8006eb0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8006eb4:	429e      	cmp	r6, r3
 8006eb6:	4b10      	ldr	r3, [pc, #64]	; (8006ef8 <__ieee754_pow+0x240>)
 8006eb8:	dd09      	ble.n	8006ece <__ieee754_pow+0x216>
 8006eba:	429c      	cmp	r4, r3
 8006ebc:	dc0c      	bgt.n	8006ed8 <__ieee754_pow+0x220>
 8006ebe:	2f00      	cmp	r7, #0
 8006ec0:	da0c      	bge.n	8006edc <__ieee754_pow+0x224>
 8006ec2:	2000      	movs	r0, #0
 8006ec4:	b013      	add	sp, #76	; 0x4c
 8006ec6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eca:	f000 bce2 	b.w	8007892 <__math_oflow>
 8006ece:	429c      	cmp	r4, r3
 8006ed0:	dbf5      	blt.n	8006ebe <__ieee754_pow+0x206>
 8006ed2:	4b08      	ldr	r3, [pc, #32]	; (8006ef4 <__ieee754_pow+0x23c>)
 8006ed4:	429c      	cmp	r4, r3
 8006ed6:	dd15      	ble.n	8006f04 <__ieee754_pow+0x24c>
 8006ed8:	2f00      	cmp	r7, #0
 8006eda:	dcf2      	bgt.n	8006ec2 <__ieee754_pow+0x20a>
 8006edc:	2000      	movs	r0, #0
 8006ede:	b013      	add	sp, #76	; 0x4c
 8006ee0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ee4:	f000 bcd0 	b.w	8007888 <__math_uflow>
 8006ee8:	fff00000 	.word	0xfff00000
 8006eec:	7ff00000 	.word	0x7ff00000
 8006ef0:	433fffff 	.word	0x433fffff
 8006ef4:	3ff00000 	.word	0x3ff00000
 8006ef8:	3fefffff 	.word	0x3fefffff
 8006efc:	3fe00000 	.word	0x3fe00000
 8006f00:	41e00000 	.word	0x41e00000
 8006f04:	4661      	mov	r1, ip
 8006f06:	2200      	movs	r2, #0
 8006f08:	4658      	mov	r0, fp
 8006f0a:	4b5f      	ldr	r3, [pc, #380]	; (8007088 <__ieee754_pow+0x3d0>)
 8006f0c:	f7f9 f924 	bl	8000158 <__aeabi_dsub>
 8006f10:	a355      	add	r3, pc, #340	; (adr r3, 8007068 <__ieee754_pow+0x3b0>)
 8006f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f16:	4604      	mov	r4, r0
 8006f18:	460d      	mov	r5, r1
 8006f1a:	f7f9 fad5 	bl	80004c8 <__aeabi_dmul>
 8006f1e:	a354      	add	r3, pc, #336	; (adr r3, 8007070 <__ieee754_pow+0x3b8>)
 8006f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f24:	4606      	mov	r6, r0
 8006f26:	460f      	mov	r7, r1
 8006f28:	4620      	mov	r0, r4
 8006f2a:	4629      	mov	r1, r5
 8006f2c:	f7f9 facc 	bl	80004c8 <__aeabi_dmul>
 8006f30:	2200      	movs	r2, #0
 8006f32:	4682      	mov	sl, r0
 8006f34:	468b      	mov	fp, r1
 8006f36:	4620      	mov	r0, r4
 8006f38:	4629      	mov	r1, r5
 8006f3a:	4b54      	ldr	r3, [pc, #336]	; (800708c <__ieee754_pow+0x3d4>)
 8006f3c:	f7f9 fac4 	bl	80004c8 <__aeabi_dmul>
 8006f40:	4602      	mov	r2, r0
 8006f42:	460b      	mov	r3, r1
 8006f44:	a14c      	add	r1, pc, #304	; (adr r1, 8007078 <__ieee754_pow+0x3c0>)
 8006f46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f4a:	f7f9 f905 	bl	8000158 <__aeabi_dsub>
 8006f4e:	4622      	mov	r2, r4
 8006f50:	462b      	mov	r3, r5
 8006f52:	f7f9 fab9 	bl	80004c8 <__aeabi_dmul>
 8006f56:	4602      	mov	r2, r0
 8006f58:	460b      	mov	r3, r1
 8006f5a:	2000      	movs	r0, #0
 8006f5c:	494c      	ldr	r1, [pc, #304]	; (8007090 <__ieee754_pow+0x3d8>)
 8006f5e:	f7f9 f8fb 	bl	8000158 <__aeabi_dsub>
 8006f62:	4622      	mov	r2, r4
 8006f64:	462b      	mov	r3, r5
 8006f66:	4680      	mov	r8, r0
 8006f68:	4689      	mov	r9, r1
 8006f6a:	4620      	mov	r0, r4
 8006f6c:	4629      	mov	r1, r5
 8006f6e:	f7f9 faab 	bl	80004c8 <__aeabi_dmul>
 8006f72:	4602      	mov	r2, r0
 8006f74:	460b      	mov	r3, r1
 8006f76:	4640      	mov	r0, r8
 8006f78:	4649      	mov	r1, r9
 8006f7a:	f7f9 faa5 	bl	80004c8 <__aeabi_dmul>
 8006f7e:	a340      	add	r3, pc, #256	; (adr r3, 8007080 <__ieee754_pow+0x3c8>)
 8006f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f84:	f7f9 faa0 	bl	80004c8 <__aeabi_dmul>
 8006f88:	4602      	mov	r2, r0
 8006f8a:	460b      	mov	r3, r1
 8006f8c:	4650      	mov	r0, sl
 8006f8e:	4659      	mov	r1, fp
 8006f90:	f7f9 f8e2 	bl	8000158 <__aeabi_dsub>
 8006f94:	f04f 0a00 	mov.w	sl, #0
 8006f98:	4602      	mov	r2, r0
 8006f9a:	460b      	mov	r3, r1
 8006f9c:	4604      	mov	r4, r0
 8006f9e:	460d      	mov	r5, r1
 8006fa0:	4630      	mov	r0, r6
 8006fa2:	4639      	mov	r1, r7
 8006fa4:	f7f9 f8da 	bl	800015c <__adddf3>
 8006fa8:	4632      	mov	r2, r6
 8006faa:	463b      	mov	r3, r7
 8006fac:	4650      	mov	r0, sl
 8006fae:	468b      	mov	fp, r1
 8006fb0:	f7f9 f8d2 	bl	8000158 <__aeabi_dsub>
 8006fb4:	4602      	mov	r2, r0
 8006fb6:	460b      	mov	r3, r1
 8006fb8:	4620      	mov	r0, r4
 8006fba:	4629      	mov	r1, r5
 8006fbc:	f7f9 f8cc 	bl	8000158 <__aeabi_dsub>
 8006fc0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006fc4:	9b00      	ldr	r3, [sp, #0]
 8006fc6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006fc8:	3b01      	subs	r3, #1
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	f04f 0600 	mov.w	r6, #0
 8006fd0:	f04f 0200 	mov.w	r2, #0
 8006fd4:	bf0c      	ite	eq
 8006fd6:	4b2f      	ldreq	r3, [pc, #188]	; (8007094 <__ieee754_pow+0x3dc>)
 8006fd8:	4b2b      	ldrne	r3, [pc, #172]	; (8007088 <__ieee754_pow+0x3d0>)
 8006fda:	4604      	mov	r4, r0
 8006fdc:	460d      	mov	r5, r1
 8006fde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006fe2:	e9cd 2300 	strd	r2, r3, [sp]
 8006fe6:	4632      	mov	r2, r6
 8006fe8:	463b      	mov	r3, r7
 8006fea:	f7f9 f8b5 	bl	8000158 <__aeabi_dsub>
 8006fee:	4652      	mov	r2, sl
 8006ff0:	465b      	mov	r3, fp
 8006ff2:	f7f9 fa69 	bl	80004c8 <__aeabi_dmul>
 8006ff6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006ffa:	4680      	mov	r8, r0
 8006ffc:	4689      	mov	r9, r1
 8006ffe:	4620      	mov	r0, r4
 8007000:	4629      	mov	r1, r5
 8007002:	f7f9 fa61 	bl	80004c8 <__aeabi_dmul>
 8007006:	4602      	mov	r2, r0
 8007008:	460b      	mov	r3, r1
 800700a:	4640      	mov	r0, r8
 800700c:	4649      	mov	r1, r9
 800700e:	f7f9 f8a5 	bl	800015c <__adddf3>
 8007012:	4632      	mov	r2, r6
 8007014:	463b      	mov	r3, r7
 8007016:	4680      	mov	r8, r0
 8007018:	4689      	mov	r9, r1
 800701a:	4650      	mov	r0, sl
 800701c:	4659      	mov	r1, fp
 800701e:	f7f9 fa53 	bl	80004c8 <__aeabi_dmul>
 8007022:	4604      	mov	r4, r0
 8007024:	460d      	mov	r5, r1
 8007026:	460b      	mov	r3, r1
 8007028:	4602      	mov	r2, r0
 800702a:	4649      	mov	r1, r9
 800702c:	4640      	mov	r0, r8
 800702e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007032:	f7f9 f893 	bl	800015c <__adddf3>
 8007036:	4b18      	ldr	r3, [pc, #96]	; (8007098 <__ieee754_pow+0x3e0>)
 8007038:	4682      	mov	sl, r0
 800703a:	4299      	cmp	r1, r3
 800703c:	460f      	mov	r7, r1
 800703e:	460e      	mov	r6, r1
 8007040:	f340 82e5 	ble.w	800760e <__ieee754_pow+0x956>
 8007044:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8007048:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800704c:	4303      	orrs	r3, r0
 800704e:	f000 81df 	beq.w	8007410 <__ieee754_pow+0x758>
 8007052:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007056:	2200      	movs	r2, #0
 8007058:	2300      	movs	r3, #0
 800705a:	f7f9 fca7 	bl	80009ac <__aeabi_dcmplt>
 800705e:	3800      	subs	r0, #0
 8007060:	bf18      	it	ne
 8007062:	2001      	movne	r0, #1
 8007064:	e72e      	b.n	8006ec4 <__ieee754_pow+0x20c>
 8007066:	bf00      	nop
 8007068:	60000000 	.word	0x60000000
 800706c:	3ff71547 	.word	0x3ff71547
 8007070:	f85ddf44 	.word	0xf85ddf44
 8007074:	3e54ae0b 	.word	0x3e54ae0b
 8007078:	55555555 	.word	0x55555555
 800707c:	3fd55555 	.word	0x3fd55555
 8007080:	652b82fe 	.word	0x652b82fe
 8007084:	3ff71547 	.word	0x3ff71547
 8007088:	3ff00000 	.word	0x3ff00000
 800708c:	3fd00000 	.word	0x3fd00000
 8007090:	3fe00000 	.word	0x3fe00000
 8007094:	bff00000 	.word	0xbff00000
 8007098:	408fffff 	.word	0x408fffff
 800709c:	4bd2      	ldr	r3, [pc, #840]	; (80073e8 <__ieee754_pow+0x730>)
 800709e:	2200      	movs	r2, #0
 80070a0:	402b      	ands	r3, r5
 80070a2:	b943      	cbnz	r3, 80070b6 <__ieee754_pow+0x3fe>
 80070a4:	4658      	mov	r0, fp
 80070a6:	4661      	mov	r1, ip
 80070a8:	4bd0      	ldr	r3, [pc, #832]	; (80073ec <__ieee754_pow+0x734>)
 80070aa:	f7f9 fa0d 	bl	80004c8 <__aeabi_dmul>
 80070ae:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80070b2:	4683      	mov	fp, r0
 80070b4:	460c      	mov	r4, r1
 80070b6:	1523      	asrs	r3, r4, #20
 80070b8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80070bc:	4413      	add	r3, r2
 80070be:	930b      	str	r3, [sp, #44]	; 0x2c
 80070c0:	4bcb      	ldr	r3, [pc, #812]	; (80073f0 <__ieee754_pow+0x738>)
 80070c2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80070c6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80070ca:	429c      	cmp	r4, r3
 80070cc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80070d0:	dd08      	ble.n	80070e4 <__ieee754_pow+0x42c>
 80070d2:	4bc8      	ldr	r3, [pc, #800]	; (80073f4 <__ieee754_pow+0x73c>)
 80070d4:	429c      	cmp	r4, r3
 80070d6:	f340 8199 	ble.w	800740c <__ieee754_pow+0x754>
 80070da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070dc:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80070e0:	3301      	adds	r3, #1
 80070e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80070e4:	2600      	movs	r6, #0
 80070e6:	00f3      	lsls	r3, r6, #3
 80070e8:	930d      	str	r3, [sp, #52]	; 0x34
 80070ea:	4bc3      	ldr	r3, [pc, #780]	; (80073f8 <__ieee754_pow+0x740>)
 80070ec:	4658      	mov	r0, fp
 80070ee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80070f2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80070f6:	4629      	mov	r1, r5
 80070f8:	461a      	mov	r2, r3
 80070fa:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80070fe:	4623      	mov	r3, r4
 8007100:	f7f9 f82a 	bl	8000158 <__aeabi_dsub>
 8007104:	46da      	mov	sl, fp
 8007106:	462b      	mov	r3, r5
 8007108:	4652      	mov	r2, sl
 800710a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800710e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007112:	f7f9 f823 	bl	800015c <__adddf3>
 8007116:	4602      	mov	r2, r0
 8007118:	460b      	mov	r3, r1
 800711a:	2000      	movs	r0, #0
 800711c:	49b7      	ldr	r1, [pc, #732]	; (80073fc <__ieee754_pow+0x744>)
 800711e:	f7f9 fafd 	bl	800071c <__aeabi_ddiv>
 8007122:	4602      	mov	r2, r0
 8007124:	460b      	mov	r3, r1
 8007126:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800712a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800712e:	f7f9 f9cb 	bl	80004c8 <__aeabi_dmul>
 8007132:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007136:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800713a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800713e:	2300      	movs	r3, #0
 8007140:	2200      	movs	r2, #0
 8007142:	46ab      	mov	fp, r5
 8007144:	106d      	asrs	r5, r5, #1
 8007146:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800714a:	9304      	str	r3, [sp, #16]
 800714c:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8007150:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007154:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8007158:	4640      	mov	r0, r8
 800715a:	4649      	mov	r1, r9
 800715c:	4614      	mov	r4, r2
 800715e:	461d      	mov	r5, r3
 8007160:	f7f9 f9b2 	bl	80004c8 <__aeabi_dmul>
 8007164:	4602      	mov	r2, r0
 8007166:	460b      	mov	r3, r1
 8007168:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800716c:	f7f8 fff4 	bl	8000158 <__aeabi_dsub>
 8007170:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007174:	4606      	mov	r6, r0
 8007176:	460f      	mov	r7, r1
 8007178:	4620      	mov	r0, r4
 800717a:	4629      	mov	r1, r5
 800717c:	f7f8 ffec 	bl	8000158 <__aeabi_dsub>
 8007180:	4602      	mov	r2, r0
 8007182:	460b      	mov	r3, r1
 8007184:	4650      	mov	r0, sl
 8007186:	4659      	mov	r1, fp
 8007188:	f7f8 ffe6 	bl	8000158 <__aeabi_dsub>
 800718c:	4642      	mov	r2, r8
 800718e:	464b      	mov	r3, r9
 8007190:	f7f9 f99a 	bl	80004c8 <__aeabi_dmul>
 8007194:	4602      	mov	r2, r0
 8007196:	460b      	mov	r3, r1
 8007198:	4630      	mov	r0, r6
 800719a:	4639      	mov	r1, r7
 800719c:	f7f8 ffdc 	bl	8000158 <__aeabi_dsub>
 80071a0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80071a4:	f7f9 f990 	bl	80004c8 <__aeabi_dmul>
 80071a8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80071ac:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80071b0:	4610      	mov	r0, r2
 80071b2:	4619      	mov	r1, r3
 80071b4:	f7f9 f988 	bl	80004c8 <__aeabi_dmul>
 80071b8:	a379      	add	r3, pc, #484	; (adr r3, 80073a0 <__ieee754_pow+0x6e8>)
 80071ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071be:	4604      	mov	r4, r0
 80071c0:	460d      	mov	r5, r1
 80071c2:	f7f9 f981 	bl	80004c8 <__aeabi_dmul>
 80071c6:	a378      	add	r3, pc, #480	; (adr r3, 80073a8 <__ieee754_pow+0x6f0>)
 80071c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071cc:	f7f8 ffc6 	bl	800015c <__adddf3>
 80071d0:	4622      	mov	r2, r4
 80071d2:	462b      	mov	r3, r5
 80071d4:	f7f9 f978 	bl	80004c8 <__aeabi_dmul>
 80071d8:	a375      	add	r3, pc, #468	; (adr r3, 80073b0 <__ieee754_pow+0x6f8>)
 80071da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071de:	f7f8 ffbd 	bl	800015c <__adddf3>
 80071e2:	4622      	mov	r2, r4
 80071e4:	462b      	mov	r3, r5
 80071e6:	f7f9 f96f 	bl	80004c8 <__aeabi_dmul>
 80071ea:	a373      	add	r3, pc, #460	; (adr r3, 80073b8 <__ieee754_pow+0x700>)
 80071ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f0:	f7f8 ffb4 	bl	800015c <__adddf3>
 80071f4:	4622      	mov	r2, r4
 80071f6:	462b      	mov	r3, r5
 80071f8:	f7f9 f966 	bl	80004c8 <__aeabi_dmul>
 80071fc:	a370      	add	r3, pc, #448	; (adr r3, 80073c0 <__ieee754_pow+0x708>)
 80071fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007202:	f7f8 ffab 	bl	800015c <__adddf3>
 8007206:	4622      	mov	r2, r4
 8007208:	462b      	mov	r3, r5
 800720a:	f7f9 f95d 	bl	80004c8 <__aeabi_dmul>
 800720e:	a36e      	add	r3, pc, #440	; (adr r3, 80073c8 <__ieee754_pow+0x710>)
 8007210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007214:	f7f8 ffa2 	bl	800015c <__adddf3>
 8007218:	4622      	mov	r2, r4
 800721a:	4606      	mov	r6, r0
 800721c:	460f      	mov	r7, r1
 800721e:	462b      	mov	r3, r5
 8007220:	4620      	mov	r0, r4
 8007222:	4629      	mov	r1, r5
 8007224:	f7f9 f950 	bl	80004c8 <__aeabi_dmul>
 8007228:	4602      	mov	r2, r0
 800722a:	460b      	mov	r3, r1
 800722c:	4630      	mov	r0, r6
 800722e:	4639      	mov	r1, r7
 8007230:	f7f9 f94a 	bl	80004c8 <__aeabi_dmul>
 8007234:	4604      	mov	r4, r0
 8007236:	460d      	mov	r5, r1
 8007238:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800723c:	4642      	mov	r2, r8
 800723e:	464b      	mov	r3, r9
 8007240:	f7f8 ff8c 	bl	800015c <__adddf3>
 8007244:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007248:	f7f9 f93e 	bl	80004c8 <__aeabi_dmul>
 800724c:	4622      	mov	r2, r4
 800724e:	462b      	mov	r3, r5
 8007250:	f7f8 ff84 	bl	800015c <__adddf3>
 8007254:	4642      	mov	r2, r8
 8007256:	4606      	mov	r6, r0
 8007258:	460f      	mov	r7, r1
 800725a:	464b      	mov	r3, r9
 800725c:	4640      	mov	r0, r8
 800725e:	4649      	mov	r1, r9
 8007260:	f7f9 f932 	bl	80004c8 <__aeabi_dmul>
 8007264:	2200      	movs	r2, #0
 8007266:	4b66      	ldr	r3, [pc, #408]	; (8007400 <__ieee754_pow+0x748>)
 8007268:	4682      	mov	sl, r0
 800726a:	468b      	mov	fp, r1
 800726c:	f7f8 ff76 	bl	800015c <__adddf3>
 8007270:	4632      	mov	r2, r6
 8007272:	463b      	mov	r3, r7
 8007274:	f7f8 ff72 	bl	800015c <__adddf3>
 8007278:	2400      	movs	r4, #0
 800727a:	460d      	mov	r5, r1
 800727c:	4622      	mov	r2, r4
 800727e:	460b      	mov	r3, r1
 8007280:	4640      	mov	r0, r8
 8007282:	4649      	mov	r1, r9
 8007284:	f7f9 f920 	bl	80004c8 <__aeabi_dmul>
 8007288:	2200      	movs	r2, #0
 800728a:	4680      	mov	r8, r0
 800728c:	4689      	mov	r9, r1
 800728e:	4620      	mov	r0, r4
 8007290:	4629      	mov	r1, r5
 8007292:	4b5b      	ldr	r3, [pc, #364]	; (8007400 <__ieee754_pow+0x748>)
 8007294:	f7f8 ff60 	bl	8000158 <__aeabi_dsub>
 8007298:	4652      	mov	r2, sl
 800729a:	465b      	mov	r3, fp
 800729c:	f7f8 ff5c 	bl	8000158 <__aeabi_dsub>
 80072a0:	4602      	mov	r2, r0
 80072a2:	460b      	mov	r3, r1
 80072a4:	4630      	mov	r0, r6
 80072a6:	4639      	mov	r1, r7
 80072a8:	f7f8 ff56 	bl	8000158 <__aeabi_dsub>
 80072ac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80072b0:	f7f9 f90a 	bl	80004c8 <__aeabi_dmul>
 80072b4:	4622      	mov	r2, r4
 80072b6:	4606      	mov	r6, r0
 80072b8:	460f      	mov	r7, r1
 80072ba:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80072be:	462b      	mov	r3, r5
 80072c0:	f7f9 f902 	bl	80004c8 <__aeabi_dmul>
 80072c4:	4602      	mov	r2, r0
 80072c6:	460b      	mov	r3, r1
 80072c8:	4630      	mov	r0, r6
 80072ca:	4639      	mov	r1, r7
 80072cc:	f7f8 ff46 	bl	800015c <__adddf3>
 80072d0:	2400      	movs	r4, #0
 80072d2:	4606      	mov	r6, r0
 80072d4:	460f      	mov	r7, r1
 80072d6:	4602      	mov	r2, r0
 80072d8:	460b      	mov	r3, r1
 80072da:	4640      	mov	r0, r8
 80072dc:	4649      	mov	r1, r9
 80072de:	f7f8 ff3d 	bl	800015c <__adddf3>
 80072e2:	a33b      	add	r3, pc, #236	; (adr r3, 80073d0 <__ieee754_pow+0x718>)
 80072e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e8:	4620      	mov	r0, r4
 80072ea:	460d      	mov	r5, r1
 80072ec:	f7f9 f8ec 	bl	80004c8 <__aeabi_dmul>
 80072f0:	4642      	mov	r2, r8
 80072f2:	464b      	mov	r3, r9
 80072f4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80072f8:	4620      	mov	r0, r4
 80072fa:	4629      	mov	r1, r5
 80072fc:	f7f8 ff2c 	bl	8000158 <__aeabi_dsub>
 8007300:	4602      	mov	r2, r0
 8007302:	460b      	mov	r3, r1
 8007304:	4630      	mov	r0, r6
 8007306:	4639      	mov	r1, r7
 8007308:	f7f8 ff26 	bl	8000158 <__aeabi_dsub>
 800730c:	a332      	add	r3, pc, #200	; (adr r3, 80073d8 <__ieee754_pow+0x720>)
 800730e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007312:	f7f9 f8d9 	bl	80004c8 <__aeabi_dmul>
 8007316:	a332      	add	r3, pc, #200	; (adr r3, 80073e0 <__ieee754_pow+0x728>)
 8007318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800731c:	4606      	mov	r6, r0
 800731e:	460f      	mov	r7, r1
 8007320:	4620      	mov	r0, r4
 8007322:	4629      	mov	r1, r5
 8007324:	f7f9 f8d0 	bl	80004c8 <__aeabi_dmul>
 8007328:	4602      	mov	r2, r0
 800732a:	460b      	mov	r3, r1
 800732c:	4630      	mov	r0, r6
 800732e:	4639      	mov	r1, r7
 8007330:	f7f8 ff14 	bl	800015c <__adddf3>
 8007334:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007336:	4b33      	ldr	r3, [pc, #204]	; (8007404 <__ieee754_pow+0x74c>)
 8007338:	f04f 0a00 	mov.w	sl, #0
 800733c:	4413      	add	r3, r2
 800733e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007342:	f7f8 ff0b 	bl	800015c <__adddf3>
 8007346:	4680      	mov	r8, r0
 8007348:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800734a:	4689      	mov	r9, r1
 800734c:	f7f9 f852 	bl	80003f4 <__aeabi_i2d>
 8007350:	4604      	mov	r4, r0
 8007352:	460d      	mov	r5, r1
 8007354:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007356:	4b2c      	ldr	r3, [pc, #176]	; (8007408 <__ieee754_pow+0x750>)
 8007358:	4413      	add	r3, r2
 800735a:	e9d3 6700 	ldrd	r6, r7, [r3]
 800735e:	4642      	mov	r2, r8
 8007360:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007364:	464b      	mov	r3, r9
 8007366:	f7f8 fef9 	bl	800015c <__adddf3>
 800736a:	4632      	mov	r2, r6
 800736c:	463b      	mov	r3, r7
 800736e:	f7f8 fef5 	bl	800015c <__adddf3>
 8007372:	4622      	mov	r2, r4
 8007374:	462b      	mov	r3, r5
 8007376:	f7f8 fef1 	bl	800015c <__adddf3>
 800737a:	4622      	mov	r2, r4
 800737c:	462b      	mov	r3, r5
 800737e:	4650      	mov	r0, sl
 8007380:	468b      	mov	fp, r1
 8007382:	f7f8 fee9 	bl	8000158 <__aeabi_dsub>
 8007386:	4632      	mov	r2, r6
 8007388:	463b      	mov	r3, r7
 800738a:	f7f8 fee5 	bl	8000158 <__aeabi_dsub>
 800738e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007392:	f7f8 fee1 	bl	8000158 <__aeabi_dsub>
 8007396:	4602      	mov	r2, r0
 8007398:	460b      	mov	r3, r1
 800739a:	4640      	mov	r0, r8
 800739c:	4649      	mov	r1, r9
 800739e:	e60d      	b.n	8006fbc <__ieee754_pow+0x304>
 80073a0:	4a454eef 	.word	0x4a454eef
 80073a4:	3fca7e28 	.word	0x3fca7e28
 80073a8:	93c9db65 	.word	0x93c9db65
 80073ac:	3fcd864a 	.word	0x3fcd864a
 80073b0:	a91d4101 	.word	0xa91d4101
 80073b4:	3fd17460 	.word	0x3fd17460
 80073b8:	518f264d 	.word	0x518f264d
 80073bc:	3fd55555 	.word	0x3fd55555
 80073c0:	db6fabff 	.word	0xdb6fabff
 80073c4:	3fdb6db6 	.word	0x3fdb6db6
 80073c8:	33333303 	.word	0x33333303
 80073cc:	3fe33333 	.word	0x3fe33333
 80073d0:	e0000000 	.word	0xe0000000
 80073d4:	3feec709 	.word	0x3feec709
 80073d8:	dc3a03fd 	.word	0xdc3a03fd
 80073dc:	3feec709 	.word	0x3feec709
 80073e0:	145b01f5 	.word	0x145b01f5
 80073e4:	be3e2fe0 	.word	0xbe3e2fe0
 80073e8:	7ff00000 	.word	0x7ff00000
 80073ec:	43400000 	.word	0x43400000
 80073f0:	0003988e 	.word	0x0003988e
 80073f4:	000bb679 	.word	0x000bb679
 80073f8:	08007a50 	.word	0x08007a50
 80073fc:	3ff00000 	.word	0x3ff00000
 8007400:	40080000 	.word	0x40080000
 8007404:	08007a70 	.word	0x08007a70
 8007408:	08007a60 	.word	0x08007a60
 800740c:	2601      	movs	r6, #1
 800740e:	e66a      	b.n	80070e6 <__ieee754_pow+0x42e>
 8007410:	a39d      	add	r3, pc, #628	; (adr r3, 8007688 <__ieee754_pow+0x9d0>)
 8007412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007416:	4640      	mov	r0, r8
 8007418:	4649      	mov	r1, r9
 800741a:	f7f8 fe9f 	bl	800015c <__adddf3>
 800741e:	4622      	mov	r2, r4
 8007420:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007424:	462b      	mov	r3, r5
 8007426:	4650      	mov	r0, sl
 8007428:	4639      	mov	r1, r7
 800742a:	f7f8 fe95 	bl	8000158 <__aeabi_dsub>
 800742e:	4602      	mov	r2, r0
 8007430:	460b      	mov	r3, r1
 8007432:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007436:	f7f9 fad7 	bl	80009e8 <__aeabi_dcmpgt>
 800743a:	2800      	cmp	r0, #0
 800743c:	f47f ae09 	bne.w	8007052 <__ieee754_pow+0x39a>
 8007440:	4aa3      	ldr	r2, [pc, #652]	; (80076d0 <__ieee754_pow+0xa18>)
 8007442:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8007446:	4293      	cmp	r3, r2
 8007448:	f340 8101 	ble.w	800764e <__ieee754_pow+0x996>
 800744c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8007450:	2000      	movs	r0, #0
 8007452:	151b      	asrs	r3, r3, #20
 8007454:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8007458:	fa4a f303 	asr.w	r3, sl, r3
 800745c:	4433      	add	r3, r6
 800745e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8007462:	4f9c      	ldr	r7, [pc, #624]	; (80076d4 <__ieee754_pow+0xa1c>)
 8007464:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8007468:	4117      	asrs	r7, r2
 800746a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800746e:	ea23 0107 	bic.w	r1, r3, r7
 8007472:	f1c2 0214 	rsb	r2, r2, #20
 8007476:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800747a:	460b      	mov	r3, r1
 800747c:	fa4a fa02 	asr.w	sl, sl, r2
 8007480:	2e00      	cmp	r6, #0
 8007482:	4602      	mov	r2, r0
 8007484:	4629      	mov	r1, r5
 8007486:	4620      	mov	r0, r4
 8007488:	bfb8      	it	lt
 800748a:	f1ca 0a00 	rsblt	sl, sl, #0
 800748e:	f7f8 fe63 	bl	8000158 <__aeabi_dsub>
 8007492:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007496:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800749a:	2400      	movs	r4, #0
 800749c:	4642      	mov	r2, r8
 800749e:	464b      	mov	r3, r9
 80074a0:	f7f8 fe5c 	bl	800015c <__adddf3>
 80074a4:	a37a      	add	r3, pc, #488	; (adr r3, 8007690 <__ieee754_pow+0x9d8>)
 80074a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074aa:	4620      	mov	r0, r4
 80074ac:	460d      	mov	r5, r1
 80074ae:	f7f9 f80b 	bl	80004c8 <__aeabi_dmul>
 80074b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80074b6:	4606      	mov	r6, r0
 80074b8:	460f      	mov	r7, r1
 80074ba:	4620      	mov	r0, r4
 80074bc:	4629      	mov	r1, r5
 80074be:	f7f8 fe4b 	bl	8000158 <__aeabi_dsub>
 80074c2:	4602      	mov	r2, r0
 80074c4:	460b      	mov	r3, r1
 80074c6:	4640      	mov	r0, r8
 80074c8:	4649      	mov	r1, r9
 80074ca:	f7f8 fe45 	bl	8000158 <__aeabi_dsub>
 80074ce:	a372      	add	r3, pc, #456	; (adr r3, 8007698 <__ieee754_pow+0x9e0>)
 80074d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d4:	f7f8 fff8 	bl	80004c8 <__aeabi_dmul>
 80074d8:	a371      	add	r3, pc, #452	; (adr r3, 80076a0 <__ieee754_pow+0x9e8>)
 80074da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074de:	4680      	mov	r8, r0
 80074e0:	4689      	mov	r9, r1
 80074e2:	4620      	mov	r0, r4
 80074e4:	4629      	mov	r1, r5
 80074e6:	f7f8 ffef 	bl	80004c8 <__aeabi_dmul>
 80074ea:	4602      	mov	r2, r0
 80074ec:	460b      	mov	r3, r1
 80074ee:	4640      	mov	r0, r8
 80074f0:	4649      	mov	r1, r9
 80074f2:	f7f8 fe33 	bl	800015c <__adddf3>
 80074f6:	4604      	mov	r4, r0
 80074f8:	460d      	mov	r5, r1
 80074fa:	4602      	mov	r2, r0
 80074fc:	460b      	mov	r3, r1
 80074fe:	4630      	mov	r0, r6
 8007500:	4639      	mov	r1, r7
 8007502:	f7f8 fe2b 	bl	800015c <__adddf3>
 8007506:	4632      	mov	r2, r6
 8007508:	463b      	mov	r3, r7
 800750a:	4680      	mov	r8, r0
 800750c:	4689      	mov	r9, r1
 800750e:	f7f8 fe23 	bl	8000158 <__aeabi_dsub>
 8007512:	4602      	mov	r2, r0
 8007514:	460b      	mov	r3, r1
 8007516:	4620      	mov	r0, r4
 8007518:	4629      	mov	r1, r5
 800751a:	f7f8 fe1d 	bl	8000158 <__aeabi_dsub>
 800751e:	4642      	mov	r2, r8
 8007520:	4606      	mov	r6, r0
 8007522:	460f      	mov	r7, r1
 8007524:	464b      	mov	r3, r9
 8007526:	4640      	mov	r0, r8
 8007528:	4649      	mov	r1, r9
 800752a:	f7f8 ffcd 	bl	80004c8 <__aeabi_dmul>
 800752e:	a35e      	add	r3, pc, #376	; (adr r3, 80076a8 <__ieee754_pow+0x9f0>)
 8007530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007534:	4604      	mov	r4, r0
 8007536:	460d      	mov	r5, r1
 8007538:	f7f8 ffc6 	bl	80004c8 <__aeabi_dmul>
 800753c:	a35c      	add	r3, pc, #368	; (adr r3, 80076b0 <__ieee754_pow+0x9f8>)
 800753e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007542:	f7f8 fe09 	bl	8000158 <__aeabi_dsub>
 8007546:	4622      	mov	r2, r4
 8007548:	462b      	mov	r3, r5
 800754a:	f7f8 ffbd 	bl	80004c8 <__aeabi_dmul>
 800754e:	a35a      	add	r3, pc, #360	; (adr r3, 80076b8 <__ieee754_pow+0xa00>)
 8007550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007554:	f7f8 fe02 	bl	800015c <__adddf3>
 8007558:	4622      	mov	r2, r4
 800755a:	462b      	mov	r3, r5
 800755c:	f7f8 ffb4 	bl	80004c8 <__aeabi_dmul>
 8007560:	a357      	add	r3, pc, #348	; (adr r3, 80076c0 <__ieee754_pow+0xa08>)
 8007562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007566:	f7f8 fdf7 	bl	8000158 <__aeabi_dsub>
 800756a:	4622      	mov	r2, r4
 800756c:	462b      	mov	r3, r5
 800756e:	f7f8 ffab 	bl	80004c8 <__aeabi_dmul>
 8007572:	a355      	add	r3, pc, #340	; (adr r3, 80076c8 <__ieee754_pow+0xa10>)
 8007574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007578:	f7f8 fdf0 	bl	800015c <__adddf3>
 800757c:	4622      	mov	r2, r4
 800757e:	462b      	mov	r3, r5
 8007580:	f7f8 ffa2 	bl	80004c8 <__aeabi_dmul>
 8007584:	4602      	mov	r2, r0
 8007586:	460b      	mov	r3, r1
 8007588:	4640      	mov	r0, r8
 800758a:	4649      	mov	r1, r9
 800758c:	f7f8 fde4 	bl	8000158 <__aeabi_dsub>
 8007590:	4604      	mov	r4, r0
 8007592:	460d      	mov	r5, r1
 8007594:	4602      	mov	r2, r0
 8007596:	460b      	mov	r3, r1
 8007598:	4640      	mov	r0, r8
 800759a:	4649      	mov	r1, r9
 800759c:	f7f8 ff94 	bl	80004c8 <__aeabi_dmul>
 80075a0:	2200      	movs	r2, #0
 80075a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80075aa:	4620      	mov	r0, r4
 80075ac:	4629      	mov	r1, r5
 80075ae:	f7f8 fdd3 	bl	8000158 <__aeabi_dsub>
 80075b2:	4602      	mov	r2, r0
 80075b4:	460b      	mov	r3, r1
 80075b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075ba:	f7f9 f8af 	bl	800071c <__aeabi_ddiv>
 80075be:	4632      	mov	r2, r6
 80075c0:	4604      	mov	r4, r0
 80075c2:	460d      	mov	r5, r1
 80075c4:	463b      	mov	r3, r7
 80075c6:	4640      	mov	r0, r8
 80075c8:	4649      	mov	r1, r9
 80075ca:	f7f8 ff7d 	bl	80004c8 <__aeabi_dmul>
 80075ce:	4632      	mov	r2, r6
 80075d0:	463b      	mov	r3, r7
 80075d2:	f7f8 fdc3 	bl	800015c <__adddf3>
 80075d6:	4602      	mov	r2, r0
 80075d8:	460b      	mov	r3, r1
 80075da:	4620      	mov	r0, r4
 80075dc:	4629      	mov	r1, r5
 80075de:	f7f8 fdbb 	bl	8000158 <__aeabi_dsub>
 80075e2:	4642      	mov	r2, r8
 80075e4:	464b      	mov	r3, r9
 80075e6:	f7f8 fdb7 	bl	8000158 <__aeabi_dsub>
 80075ea:	4602      	mov	r2, r0
 80075ec:	460b      	mov	r3, r1
 80075ee:	2000      	movs	r0, #0
 80075f0:	4939      	ldr	r1, [pc, #228]	; (80076d8 <__ieee754_pow+0xa20>)
 80075f2:	f7f8 fdb1 	bl	8000158 <__aeabi_dsub>
 80075f6:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80075fa:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80075fe:	da29      	bge.n	8007654 <__ieee754_pow+0x99c>
 8007600:	4652      	mov	r2, sl
 8007602:	f000 f955 	bl	80078b0 <scalbn>
 8007606:	e9dd 2300 	ldrd	r2, r3, [sp]
 800760a:	f7ff bbfe 	b.w	8006e0a <__ieee754_pow+0x152>
 800760e:	4b33      	ldr	r3, [pc, #204]	; (80076dc <__ieee754_pow+0xa24>)
 8007610:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8007614:	429f      	cmp	r7, r3
 8007616:	f77f af13 	ble.w	8007440 <__ieee754_pow+0x788>
 800761a:	4b31      	ldr	r3, [pc, #196]	; (80076e0 <__ieee754_pow+0xa28>)
 800761c:	440b      	add	r3, r1
 800761e:	4303      	orrs	r3, r0
 8007620:	d009      	beq.n	8007636 <__ieee754_pow+0x97e>
 8007622:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007626:	2200      	movs	r2, #0
 8007628:	2300      	movs	r3, #0
 800762a:	f7f9 f9bf 	bl	80009ac <__aeabi_dcmplt>
 800762e:	3800      	subs	r0, #0
 8007630:	bf18      	it	ne
 8007632:	2001      	movne	r0, #1
 8007634:	e453      	b.n	8006ede <__ieee754_pow+0x226>
 8007636:	4622      	mov	r2, r4
 8007638:	462b      	mov	r3, r5
 800763a:	f7f8 fd8d 	bl	8000158 <__aeabi_dsub>
 800763e:	4642      	mov	r2, r8
 8007640:	464b      	mov	r3, r9
 8007642:	f7f9 f9c7 	bl	80009d4 <__aeabi_dcmpge>
 8007646:	2800      	cmp	r0, #0
 8007648:	f43f aefa 	beq.w	8007440 <__ieee754_pow+0x788>
 800764c:	e7e9      	b.n	8007622 <__ieee754_pow+0x96a>
 800764e:	f04f 0a00 	mov.w	sl, #0
 8007652:	e720      	b.n	8007496 <__ieee754_pow+0x7de>
 8007654:	4621      	mov	r1, r4
 8007656:	e7d6      	b.n	8007606 <__ieee754_pow+0x94e>
 8007658:	f04f 0b00 	mov.w	fp, #0
 800765c:	f8df c078 	ldr.w	ip, [pc, #120]	; 80076d8 <__ieee754_pow+0xa20>
 8007660:	f7ff bbba 	b.w	8006dd8 <__ieee754_pow+0x120>
 8007664:	f04f 0b00 	mov.w	fp, #0
 8007668:	f04f 0c00 	mov.w	ip, #0
 800766c:	f7ff bbb4 	b.w	8006dd8 <__ieee754_pow+0x120>
 8007670:	4640      	mov	r0, r8
 8007672:	4649      	mov	r1, r9
 8007674:	f7ff bb3d 	b.w	8006cf2 <__ieee754_pow+0x3a>
 8007678:	9200      	str	r2, [sp, #0]
 800767a:	f7ff bb89 	b.w	8006d90 <__ieee754_pow+0xd8>
 800767e:	2300      	movs	r3, #0
 8007680:	f7ff bb73 	b.w	8006d6a <__ieee754_pow+0xb2>
 8007684:	f3af 8000 	nop.w
 8007688:	652b82fe 	.word	0x652b82fe
 800768c:	3c971547 	.word	0x3c971547
 8007690:	00000000 	.word	0x00000000
 8007694:	3fe62e43 	.word	0x3fe62e43
 8007698:	fefa39ef 	.word	0xfefa39ef
 800769c:	3fe62e42 	.word	0x3fe62e42
 80076a0:	0ca86c39 	.word	0x0ca86c39
 80076a4:	be205c61 	.word	0xbe205c61
 80076a8:	72bea4d0 	.word	0x72bea4d0
 80076ac:	3e663769 	.word	0x3e663769
 80076b0:	c5d26bf1 	.word	0xc5d26bf1
 80076b4:	3ebbbd41 	.word	0x3ebbbd41
 80076b8:	af25de2c 	.word	0xaf25de2c
 80076bc:	3f11566a 	.word	0x3f11566a
 80076c0:	16bebd93 	.word	0x16bebd93
 80076c4:	3f66c16c 	.word	0x3f66c16c
 80076c8:	5555553e 	.word	0x5555553e
 80076cc:	3fc55555 	.word	0x3fc55555
 80076d0:	3fe00000 	.word	0x3fe00000
 80076d4:	000fffff 	.word	0x000fffff
 80076d8:	3ff00000 	.word	0x3ff00000
 80076dc:	4090cbff 	.word	0x4090cbff
 80076e0:	3f6f3400 	.word	0x3f6f3400

080076e4 <__ieee754_sqrt>:
 80076e4:	f8df c158 	ldr.w	ip, [pc, #344]	; 8007840 <__ieee754_sqrt+0x15c>
 80076e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076ec:	ea3c 0c01 	bics.w	ip, ip, r1
 80076f0:	4606      	mov	r6, r0
 80076f2:	460d      	mov	r5, r1
 80076f4:	460c      	mov	r4, r1
 80076f6:	460a      	mov	r2, r1
 80076f8:	4607      	mov	r7, r0
 80076fa:	4603      	mov	r3, r0
 80076fc:	d10f      	bne.n	800771e <__ieee754_sqrt+0x3a>
 80076fe:	4602      	mov	r2, r0
 8007700:	460b      	mov	r3, r1
 8007702:	f7f8 fee1 	bl	80004c8 <__aeabi_dmul>
 8007706:	4602      	mov	r2, r0
 8007708:	460b      	mov	r3, r1
 800770a:	4630      	mov	r0, r6
 800770c:	4629      	mov	r1, r5
 800770e:	f7f8 fd25 	bl	800015c <__adddf3>
 8007712:	4606      	mov	r6, r0
 8007714:	460d      	mov	r5, r1
 8007716:	4630      	mov	r0, r6
 8007718:	4629      	mov	r1, r5
 800771a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800771e:	2900      	cmp	r1, #0
 8007720:	dc0e      	bgt.n	8007740 <__ieee754_sqrt+0x5c>
 8007722:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8007726:	ea5c 0707 	orrs.w	r7, ip, r7
 800772a:	d0f4      	beq.n	8007716 <__ieee754_sqrt+0x32>
 800772c:	b141      	cbz	r1, 8007740 <__ieee754_sqrt+0x5c>
 800772e:	4602      	mov	r2, r0
 8007730:	460b      	mov	r3, r1
 8007732:	f7f8 fd11 	bl	8000158 <__aeabi_dsub>
 8007736:	4602      	mov	r2, r0
 8007738:	460b      	mov	r3, r1
 800773a:	f7f8 ffef 	bl	800071c <__aeabi_ddiv>
 800773e:	e7e8      	b.n	8007712 <__ieee754_sqrt+0x2e>
 8007740:	1521      	asrs	r1, r4, #20
 8007742:	d075      	beq.n	8007830 <__ieee754_sqrt+0x14c>
 8007744:	07cc      	lsls	r4, r1, #31
 8007746:	f04f 0400 	mov.w	r4, #0
 800774a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800774e:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 8007752:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007756:	bf5e      	ittt	pl
 8007758:	0fd9      	lsrpl	r1, r3, #31
 800775a:	005b      	lslpl	r3, r3, #1
 800775c:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8007760:	0fd9      	lsrs	r1, r3, #31
 8007762:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8007766:	2516      	movs	r5, #22
 8007768:	4620      	mov	r0, r4
 800776a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800776e:	107f      	asrs	r7, r7, #1
 8007770:	005b      	lsls	r3, r3, #1
 8007772:	1846      	adds	r6, r0, r1
 8007774:	4296      	cmp	r6, r2
 8007776:	bfde      	ittt	le
 8007778:	1b92      	suble	r2, r2, r6
 800777a:	1870      	addle	r0, r6, r1
 800777c:	1864      	addle	r4, r4, r1
 800777e:	0052      	lsls	r2, r2, #1
 8007780:	3d01      	subs	r5, #1
 8007782:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8007786:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800778a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800778e:	d1f0      	bne.n	8007772 <__ieee754_sqrt+0x8e>
 8007790:	4629      	mov	r1, r5
 8007792:	f04f 0e20 	mov.w	lr, #32
 8007796:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800779a:	4282      	cmp	r2, r0
 800779c:	eb06 0c05 	add.w	ip, r6, r5
 80077a0:	dc02      	bgt.n	80077a8 <__ieee754_sqrt+0xc4>
 80077a2:	d113      	bne.n	80077cc <__ieee754_sqrt+0xe8>
 80077a4:	459c      	cmp	ip, r3
 80077a6:	d811      	bhi.n	80077cc <__ieee754_sqrt+0xe8>
 80077a8:	f1bc 0f00 	cmp.w	ip, #0
 80077ac:	eb0c 0506 	add.w	r5, ip, r6
 80077b0:	da43      	bge.n	800783a <__ieee754_sqrt+0x156>
 80077b2:	2d00      	cmp	r5, #0
 80077b4:	db41      	blt.n	800783a <__ieee754_sqrt+0x156>
 80077b6:	f100 0801 	add.w	r8, r0, #1
 80077ba:	1a12      	subs	r2, r2, r0
 80077bc:	4640      	mov	r0, r8
 80077be:	459c      	cmp	ip, r3
 80077c0:	bf88      	it	hi
 80077c2:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80077c6:	eba3 030c 	sub.w	r3, r3, ip
 80077ca:	4431      	add	r1, r6
 80077cc:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80077d0:	f1be 0e01 	subs.w	lr, lr, #1
 80077d4:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 80077d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80077dc:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80077e0:	d1db      	bne.n	800779a <__ieee754_sqrt+0xb6>
 80077e2:	4313      	orrs	r3, r2
 80077e4:	d006      	beq.n	80077f4 <__ieee754_sqrt+0x110>
 80077e6:	1c48      	adds	r0, r1, #1
 80077e8:	bf0b      	itete	eq
 80077ea:	4671      	moveq	r1, lr
 80077ec:	3101      	addne	r1, #1
 80077ee:	3401      	addeq	r4, #1
 80077f0:	f021 0101 	bicne.w	r1, r1, #1
 80077f4:	1063      	asrs	r3, r4, #1
 80077f6:	0849      	lsrs	r1, r1, #1
 80077f8:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80077fc:	07e2      	lsls	r2, r4, #31
 80077fe:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007802:	bf48      	it	mi
 8007804:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8007808:	460e      	mov	r6, r1
 800780a:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800780e:	e782      	b.n	8007716 <__ieee754_sqrt+0x32>
 8007810:	0ada      	lsrs	r2, r3, #11
 8007812:	3815      	subs	r0, #21
 8007814:	055b      	lsls	r3, r3, #21
 8007816:	2a00      	cmp	r2, #0
 8007818:	d0fa      	beq.n	8007810 <__ieee754_sqrt+0x12c>
 800781a:	02d5      	lsls	r5, r2, #11
 800781c:	d50a      	bpl.n	8007834 <__ieee754_sqrt+0x150>
 800781e:	f1c1 0420 	rsb	r4, r1, #32
 8007822:	fa23 f404 	lsr.w	r4, r3, r4
 8007826:	1e4d      	subs	r5, r1, #1
 8007828:	408b      	lsls	r3, r1
 800782a:	4322      	orrs	r2, r4
 800782c:	1b41      	subs	r1, r0, r5
 800782e:	e789      	b.n	8007744 <__ieee754_sqrt+0x60>
 8007830:	4608      	mov	r0, r1
 8007832:	e7f0      	b.n	8007816 <__ieee754_sqrt+0x132>
 8007834:	0052      	lsls	r2, r2, #1
 8007836:	3101      	adds	r1, #1
 8007838:	e7ef      	b.n	800781a <__ieee754_sqrt+0x136>
 800783a:	4680      	mov	r8, r0
 800783c:	e7bd      	b.n	80077ba <__ieee754_sqrt+0xd6>
 800783e:	bf00      	nop
 8007840:	7ff00000 	.word	0x7ff00000

08007844 <with_errno>:
 8007844:	b570      	push	{r4, r5, r6, lr}
 8007846:	4604      	mov	r4, r0
 8007848:	460d      	mov	r5, r1
 800784a:	4616      	mov	r6, r2
 800784c:	f000 f8ae 	bl	80079ac <__errno>
 8007850:	4629      	mov	r1, r5
 8007852:	6006      	str	r6, [r0, #0]
 8007854:	4620      	mov	r0, r4
 8007856:	bd70      	pop	{r4, r5, r6, pc}

08007858 <xflow>:
 8007858:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800785a:	4615      	mov	r5, r2
 800785c:	461c      	mov	r4, r3
 800785e:	b180      	cbz	r0, 8007882 <xflow+0x2a>
 8007860:	4610      	mov	r0, r2
 8007862:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007866:	e9cd 0100 	strd	r0, r1, [sp]
 800786a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800786e:	4628      	mov	r0, r5
 8007870:	4621      	mov	r1, r4
 8007872:	f7f8 fe29 	bl	80004c8 <__aeabi_dmul>
 8007876:	2222      	movs	r2, #34	; 0x22
 8007878:	b003      	add	sp, #12
 800787a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800787e:	f7ff bfe1 	b.w	8007844 <with_errno>
 8007882:	4610      	mov	r0, r2
 8007884:	4619      	mov	r1, r3
 8007886:	e7ee      	b.n	8007866 <xflow+0xe>

08007888 <__math_uflow>:
 8007888:	2200      	movs	r2, #0
 800788a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800788e:	f7ff bfe3 	b.w	8007858 <xflow>

08007892 <__math_oflow>:
 8007892:	2200      	movs	r2, #0
 8007894:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8007898:	f7ff bfde 	b.w	8007858 <xflow>

0800789c <fabs>:
 800789c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80078a0:	4770      	bx	lr

080078a2 <finite>:
 80078a2:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 80078a6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80078aa:	0fc0      	lsrs	r0, r0, #31
 80078ac:	4770      	bx	lr
	...

080078b0 <scalbn>:
 80078b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078b2:	f3c1 560a 	ubfx	r6, r1, #20, #11
 80078b6:	4604      	mov	r4, r0
 80078b8:	460d      	mov	r5, r1
 80078ba:	4617      	mov	r7, r2
 80078bc:	460b      	mov	r3, r1
 80078be:	b996      	cbnz	r6, 80078e6 <scalbn+0x36>
 80078c0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80078c4:	4303      	orrs	r3, r0
 80078c6:	d039      	beq.n	800793c <scalbn+0x8c>
 80078c8:	4b33      	ldr	r3, [pc, #204]	; (8007998 <scalbn+0xe8>)
 80078ca:	2200      	movs	r2, #0
 80078cc:	f7f8 fdfc 	bl	80004c8 <__aeabi_dmul>
 80078d0:	4b32      	ldr	r3, [pc, #200]	; (800799c <scalbn+0xec>)
 80078d2:	4604      	mov	r4, r0
 80078d4:	429f      	cmp	r7, r3
 80078d6:	460d      	mov	r5, r1
 80078d8:	da0f      	bge.n	80078fa <scalbn+0x4a>
 80078da:	a32b      	add	r3, pc, #172	; (adr r3, 8007988 <scalbn+0xd8>)
 80078dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078e0:	f7f8 fdf2 	bl	80004c8 <__aeabi_dmul>
 80078e4:	e006      	b.n	80078f4 <scalbn+0x44>
 80078e6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80078ea:	4296      	cmp	r6, r2
 80078ec:	d10a      	bne.n	8007904 <scalbn+0x54>
 80078ee:	4602      	mov	r2, r0
 80078f0:	f7f8 fc34 	bl	800015c <__adddf3>
 80078f4:	4604      	mov	r4, r0
 80078f6:	460d      	mov	r5, r1
 80078f8:	e020      	b.n	800793c <scalbn+0x8c>
 80078fa:	460b      	mov	r3, r1
 80078fc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8007900:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8007904:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8007908:	19b9      	adds	r1, r7, r6
 800790a:	4291      	cmp	r1, r2
 800790c:	dd0e      	ble.n	800792c <scalbn+0x7c>
 800790e:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8007912:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8007916:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800791a:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800791e:	4820      	ldr	r0, [pc, #128]	; (80079a0 <scalbn+0xf0>)
 8007920:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8007924:	a31a      	add	r3, pc, #104	; (adr r3, 8007990 <scalbn+0xe0>)
 8007926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800792a:	e7d9      	b.n	80078e0 <scalbn+0x30>
 800792c:	2900      	cmp	r1, #0
 800792e:	dd08      	ble.n	8007942 <scalbn+0x92>
 8007930:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007934:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007938:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800793c:	4620      	mov	r0, r4
 800793e:	4629      	mov	r1, r5
 8007940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007942:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8007946:	da12      	bge.n	800796e <scalbn+0xbe>
 8007948:	f24c 3350 	movw	r3, #50000	; 0xc350
 800794c:	429f      	cmp	r7, r3
 800794e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8007952:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 8007956:	dcdc      	bgt.n	8007912 <scalbn+0x62>
 8007958:	a30b      	add	r3, pc, #44	; (adr r3, 8007988 <scalbn+0xd8>)
 800795a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800795e:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8007962:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8007966:	480f      	ldr	r0, [pc, #60]	; (80079a4 <scalbn+0xf4>)
 8007968:	f041 011f 	orr.w	r1, r1, #31
 800796c:	e7b8      	b.n	80078e0 <scalbn+0x30>
 800796e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007972:	3136      	adds	r1, #54	; 0x36
 8007974:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007978:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800797c:	4620      	mov	r0, r4
 800797e:	4629      	mov	r1, r5
 8007980:	2200      	movs	r2, #0
 8007982:	4b09      	ldr	r3, [pc, #36]	; (80079a8 <scalbn+0xf8>)
 8007984:	e7ac      	b.n	80078e0 <scalbn+0x30>
 8007986:	bf00      	nop
 8007988:	c2f8f359 	.word	0xc2f8f359
 800798c:	01a56e1f 	.word	0x01a56e1f
 8007990:	8800759c 	.word	0x8800759c
 8007994:	7e37e43c 	.word	0x7e37e43c
 8007998:	43500000 	.word	0x43500000
 800799c:	ffff3cb0 	.word	0xffff3cb0
 80079a0:	8800759c 	.word	0x8800759c
 80079a4:	c2f8f359 	.word	0xc2f8f359
 80079a8:	3c900000 	.word	0x3c900000

080079ac <__errno>:
 80079ac:	4b01      	ldr	r3, [pc, #4]	; (80079b4 <__errno+0x8>)
 80079ae:	6818      	ldr	r0, [r3, #0]
 80079b0:	4770      	bx	lr
 80079b2:	bf00      	nop
 80079b4:	20000048 	.word	0x20000048

080079b8 <__libc_init_array>:
 80079b8:	b570      	push	{r4, r5, r6, lr}
 80079ba:	2600      	movs	r6, #0
 80079bc:	4d0c      	ldr	r5, [pc, #48]	; (80079f0 <__libc_init_array+0x38>)
 80079be:	4c0d      	ldr	r4, [pc, #52]	; (80079f4 <__libc_init_array+0x3c>)
 80079c0:	1b64      	subs	r4, r4, r5
 80079c2:	10a4      	asrs	r4, r4, #2
 80079c4:	42a6      	cmp	r6, r4
 80079c6:	d109      	bne.n	80079dc <__libc_init_array+0x24>
 80079c8:	f000 f822 	bl	8007a10 <_init>
 80079cc:	2600      	movs	r6, #0
 80079ce:	4d0a      	ldr	r5, [pc, #40]	; (80079f8 <__libc_init_array+0x40>)
 80079d0:	4c0a      	ldr	r4, [pc, #40]	; (80079fc <__libc_init_array+0x44>)
 80079d2:	1b64      	subs	r4, r4, r5
 80079d4:	10a4      	asrs	r4, r4, #2
 80079d6:	42a6      	cmp	r6, r4
 80079d8:	d105      	bne.n	80079e6 <__libc_init_array+0x2e>
 80079da:	bd70      	pop	{r4, r5, r6, pc}
 80079dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80079e0:	4798      	blx	r3
 80079e2:	3601      	adds	r6, #1
 80079e4:	e7ee      	b.n	80079c4 <__libc_init_array+0xc>
 80079e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80079ea:	4798      	blx	r3
 80079ec:	3601      	adds	r6, #1
 80079ee:	e7f2      	b.n	80079d6 <__libc_init_array+0x1e>
 80079f0:	08007a80 	.word	0x08007a80
 80079f4:	08007a80 	.word	0x08007a80
 80079f8:	08007a80 	.word	0x08007a80
 80079fc:	08007a84 	.word	0x08007a84

08007a00 <memset>:
 8007a00:	4603      	mov	r3, r0
 8007a02:	4402      	add	r2, r0
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d100      	bne.n	8007a0a <memset+0xa>
 8007a08:	4770      	bx	lr
 8007a0a:	f803 1b01 	strb.w	r1, [r3], #1
 8007a0e:	e7f9      	b.n	8007a04 <memset+0x4>

08007a10 <_init>:
 8007a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a12:	bf00      	nop
 8007a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a16:	bc08      	pop	{r3}
 8007a18:	469e      	mov	lr, r3
 8007a1a:	4770      	bx	lr

08007a1c <_fini>:
 8007a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a1e:	bf00      	nop
 8007a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a22:	bc08      	pop	{r3}
 8007a24:	469e      	mov	lr, r3
 8007a26:	4770      	bx	lr
