
RobotAlgoritmoSasi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007348  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08007458  08007458  00017458  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074b0  080074b0  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  080074b0  080074b0  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080074b0  080074b0  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074b0  080074b0  000174b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080074b4  080074b4  000174b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  080074b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c40  2000008c  08007544  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001ccc  08007544  00021ccc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000da45  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000283e  00000000  00000000  0002dafa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000eb8  00000000  00000000  00030338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d90  00000000  00000000  000311f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019567  00000000  00000000  00031f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000114ff  00000000  00000000  0004b4e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090444  00000000  00000000  0005c9e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ece2a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041a8  00000000  00000000  000ece7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000008c 	.word	0x2000008c
 800012c:	00000000 	.word	0x00000000
 8000130:	08007440 	.word	0x08007440

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000090 	.word	0x20000090
 800014c:	08007440 	.word	0x08007440

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2f>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a30:	bf24      	itt	cs
 8000a32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a3a:	d90d      	bls.n	8000a58 <__aeabi_d2f+0x30>
 8000a3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a50:	bf08      	it	eq
 8000a52:	f020 0001 	biceq.w	r0, r0, #1
 8000a56:	4770      	bx	lr
 8000a58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a5c:	d121      	bne.n	8000aa2 <__aeabi_d2f+0x7a>
 8000a5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a62:	bfbc      	itt	lt
 8000a64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	4770      	bxlt	lr
 8000a6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a72:	f1c2 0218 	rsb	r2, r2, #24
 8000a76:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a82:	bf18      	it	ne
 8000a84:	f040 0001 	orrne.w	r0, r0, #1
 8000a88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a94:	ea40 000c 	orr.w	r0, r0, ip
 8000a98:	fa23 f302 	lsr.w	r3, r3, r2
 8000a9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa0:	e7cc      	b.n	8000a3c <__aeabi_d2f+0x14>
 8000aa2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aa6:	d107      	bne.n	8000ab8 <__aeabi_d2f+0x90>
 8000aa8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aac:	bf1e      	ittt	ne
 8000aae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ab2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ab6:	4770      	bxne	lr
 8000ab8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	; 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	3a01      	subs	r2, #1
 8000b82:	bf28      	it	cs
 8000b84:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b88:	d2ed      	bcs.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d36:	2afd      	cmp	r2, #253	; 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	; 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	; 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	; 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <__gesf2>:
 8000f84:	f04f 3cff 	mov.w	ip, #4294967295
 8000f88:	e006      	b.n	8000f98 <__cmpsf2+0x4>
 8000f8a:	bf00      	nop

08000f8c <__lesf2>:
 8000f8c:	f04f 0c01 	mov.w	ip, #1
 8000f90:	e002      	b.n	8000f98 <__cmpsf2+0x4>
 8000f92:	bf00      	nop

08000f94 <__cmpsf2>:
 8000f94:	f04f 0c01 	mov.w	ip, #1
 8000f98:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f9c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fa0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fa4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fa8:	bf18      	it	ne
 8000faa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fae:	d011      	beq.n	8000fd4 <__cmpsf2+0x40>
 8000fb0:	b001      	add	sp, #4
 8000fb2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fb6:	bf18      	it	ne
 8000fb8:	ea90 0f01 	teqne	r0, r1
 8000fbc:	bf58      	it	pl
 8000fbe:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fc2:	bf88      	it	hi
 8000fc4:	17c8      	asrhi	r0, r1, #31
 8000fc6:	bf38      	it	cc
 8000fc8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fcc:	bf18      	it	ne
 8000fce:	f040 0001 	orrne.w	r0, r0, #1
 8000fd2:	4770      	bx	lr
 8000fd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fd8:	d102      	bne.n	8000fe0 <__cmpsf2+0x4c>
 8000fda:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fde:	d105      	bne.n	8000fec <__cmpsf2+0x58>
 8000fe0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fe4:	d1e4      	bne.n	8000fb0 <__cmpsf2+0x1c>
 8000fe6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fea:	d0e1      	beq.n	8000fb0 <__cmpsf2+0x1c>
 8000fec:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_cfrcmple>:
 8000ff4:	4684      	mov	ip, r0
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	4661      	mov	r1, ip
 8000ffa:	e7ff      	b.n	8000ffc <__aeabi_cfcmpeq>

08000ffc <__aeabi_cfcmpeq>:
 8000ffc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ffe:	f7ff ffc9 	bl	8000f94 <__cmpsf2>
 8001002:	2800      	cmp	r0, #0
 8001004:	bf48      	it	mi
 8001006:	f110 0f00 	cmnmi.w	r0, #0
 800100a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800100c <__aeabi_fcmpeq>:
 800100c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001010:	f7ff fff4 	bl	8000ffc <__aeabi_cfcmpeq>
 8001014:	bf0c      	ite	eq
 8001016:	2001      	moveq	r0, #1
 8001018:	2000      	movne	r0, #0
 800101a:	f85d fb08 	ldr.w	pc, [sp], #8
 800101e:	bf00      	nop

08001020 <__aeabi_fcmplt>:
 8001020:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001024:	f7ff ffea 	bl	8000ffc <__aeabi_cfcmpeq>
 8001028:	bf34      	ite	cc
 800102a:	2001      	movcc	r0, #1
 800102c:	2000      	movcs	r0, #0
 800102e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001032:	bf00      	nop

08001034 <__aeabi_fcmple>:
 8001034:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001038:	f7ff ffe0 	bl	8000ffc <__aeabi_cfcmpeq>
 800103c:	bf94      	ite	ls
 800103e:	2001      	movls	r0, #1
 8001040:	2000      	movhi	r0, #0
 8001042:	f85d fb08 	ldr.w	pc, [sp], #8
 8001046:	bf00      	nop

08001048 <__aeabi_fcmpge>:
 8001048:	f84d ed08 	str.w	lr, [sp, #-8]!
 800104c:	f7ff ffd2 	bl	8000ff4 <__aeabi_cfrcmple>
 8001050:	bf94      	ite	ls
 8001052:	2001      	movls	r0, #1
 8001054:	2000      	movhi	r0, #0
 8001056:	f85d fb08 	ldr.w	pc, [sp], #8
 800105a:	bf00      	nop

0800105c <__aeabi_fcmpgt>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff ffc8 	bl	8000ff4 <__aeabi_cfrcmple>
 8001064:	bf34      	ite	cc
 8001066:	2001      	movcc	r0, #1
 8001068:	2000      	movcs	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_f2iz>:
 8001070:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001074:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001078:	d30f      	bcc.n	800109a <__aeabi_f2iz+0x2a>
 800107a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800107e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001082:	d90d      	bls.n	80010a0 <__aeabi_f2iz+0x30>
 8001084:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001088:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800108c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001090:	fa23 f002 	lsr.w	r0, r3, r2
 8001094:	bf18      	it	ne
 8001096:	4240      	negne	r0, r0
 8001098:	4770      	bx	lr
 800109a:	f04f 0000 	mov.w	r0, #0
 800109e:	4770      	bx	lr
 80010a0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010a4:	d101      	bne.n	80010aa <__aeabi_f2iz+0x3a>
 80010a6:	0242      	lsls	r2, r0, #9
 80010a8:	d105      	bne.n	80010b6 <__aeabi_f2iz+0x46>
 80010aa:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010ae:	bf08      	it	eq
 80010b0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80010b4:	4770      	bx	lr
 80010b6:	f04f 0000 	mov.w	r0, #0
 80010ba:	4770      	bx	lr

080010bc <__aeabi_f2uiz>:
 80010bc:	0042      	lsls	r2, r0, #1
 80010be:	d20e      	bcs.n	80010de <__aeabi_f2uiz+0x22>
 80010c0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010c4:	d30b      	bcc.n	80010de <__aeabi_f2uiz+0x22>
 80010c6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010ca:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010ce:	d409      	bmi.n	80010e4 <__aeabi_f2uiz+0x28>
 80010d0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010d8:	fa23 f002 	lsr.w	r0, r3, r2
 80010dc:	4770      	bx	lr
 80010de:	f04f 0000 	mov.w	r0, #0
 80010e2:	4770      	bx	lr
 80010e4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010e8:	d101      	bne.n	80010ee <__aeabi_f2uiz+0x32>
 80010ea:	0242      	lsls	r2, r0, #9
 80010ec:	d102      	bne.n	80010f4 <__aeabi_f2uiz+0x38>
 80010ee:	f04f 30ff 	mov.w	r0, #4294967295
 80010f2:	4770      	bx	lr
 80010f4:	f04f 0000 	mov.w	r0, #0
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop

080010fc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001102:	1d3b      	adds	r3, r7, #4
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800110c:	4b2e      	ldr	r3, [pc, #184]	; (80011c8 <MX_ADC1_Init+0xcc>)
 800110e:	4a2f      	ldr	r2, [pc, #188]	; (80011cc <MX_ADC1_Init+0xd0>)
 8001110:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001112:	4b2d      	ldr	r3, [pc, #180]	; (80011c8 <MX_ADC1_Init+0xcc>)
 8001114:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001118:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800111a:	4b2b      	ldr	r3, [pc, #172]	; (80011c8 <MX_ADC1_Init+0xcc>)
 800111c:	2201      	movs	r2, #1
 800111e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001120:	4b29      	ldr	r3, [pc, #164]	; (80011c8 <MX_ADC1_Init+0xcc>)
 8001122:	2200      	movs	r2, #0
 8001124:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001126:	4b28      	ldr	r3, [pc, #160]	; (80011c8 <MX_ADC1_Init+0xcc>)
 8001128:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800112c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800112e:	4b26      	ldr	r3, [pc, #152]	; (80011c8 <MX_ADC1_Init+0xcc>)
 8001130:	2200      	movs	r2, #0
 8001132:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8001134:	4b24      	ldr	r3, [pc, #144]	; (80011c8 <MX_ADC1_Init+0xcc>)
 8001136:	2204      	movs	r2, #4
 8001138:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800113a:	4823      	ldr	r0, [pc, #140]	; (80011c8 <MX_ADC1_Init+0xcc>)
 800113c:	f002 fa56 	bl	80035ec <HAL_ADC_Init>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001146:	f001 fd27 	bl	8002b98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800114a:	2300      	movs	r3, #0
 800114c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800114e:	2301      	movs	r3, #1
 8001150:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8001152:	2303      	movs	r3, #3
 8001154:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001156:	1d3b      	adds	r3, r7, #4
 8001158:	4619      	mov	r1, r3
 800115a:	481b      	ldr	r0, [pc, #108]	; (80011c8 <MX_ADC1_Init+0xcc>)
 800115c:	f002 fc0e 	bl	800397c <HAL_ADC_ConfigChannel>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001166:	f001 fd17 	bl	8002b98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800116a:	2301      	movs	r3, #1
 800116c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800116e:	2302      	movs	r3, #2
 8001170:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001172:	1d3b      	adds	r3, r7, #4
 8001174:	4619      	mov	r1, r3
 8001176:	4814      	ldr	r0, [pc, #80]	; (80011c8 <MX_ADC1_Init+0xcc>)
 8001178:	f002 fc00 	bl	800397c <HAL_ADC_ConfigChannel>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001182:	f001 fd09 	bl	8002b98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001186:	2302      	movs	r3, #2
 8001188:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800118a:	2303      	movs	r3, #3
 800118c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800118e:	1d3b      	adds	r3, r7, #4
 8001190:	4619      	mov	r1, r3
 8001192:	480d      	ldr	r0, [pc, #52]	; (80011c8 <MX_ADC1_Init+0xcc>)
 8001194:	f002 fbf2 	bl	800397c <HAL_ADC_ConfigChannel>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800119e:	f001 fcfb 	bl	8002b98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80011a2:	2303      	movs	r3, #3
 80011a4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80011a6:	2304      	movs	r3, #4
 80011a8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011aa:	1d3b      	adds	r3, r7, #4
 80011ac:	4619      	mov	r1, r3
 80011ae:	4806      	ldr	r0, [pc, #24]	; (80011c8 <MX_ADC1_Init+0xcc>)
 80011b0:	f002 fbe4 	bl	800397c <HAL_ADC_ConfigChannel>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 80011ba:	f001 fced 	bl	8002b98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011be:	bf00      	nop
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	200000a8 	.word	0x200000a8
 80011cc:	40012400 	.word	0x40012400

080011d0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b088      	sub	sp, #32
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d8:	f107 0310 	add.w	r3, r7, #16
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a28      	ldr	r2, [pc, #160]	; (800128c <HAL_ADC_MspInit+0xbc>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d149      	bne.n	8001284 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011f0:	4b27      	ldr	r3, [pc, #156]	; (8001290 <HAL_ADC_MspInit+0xc0>)
 80011f2:	699b      	ldr	r3, [r3, #24]
 80011f4:	4a26      	ldr	r2, [pc, #152]	; (8001290 <HAL_ADC_MspInit+0xc0>)
 80011f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011fa:	6193      	str	r3, [r2, #24]
 80011fc:	4b24      	ldr	r3, [pc, #144]	; (8001290 <HAL_ADC_MspInit+0xc0>)
 80011fe:	699b      	ldr	r3, [r3, #24]
 8001200:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001208:	4b21      	ldr	r3, [pc, #132]	; (8001290 <HAL_ADC_MspInit+0xc0>)
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	4a20      	ldr	r2, [pc, #128]	; (8001290 <HAL_ADC_MspInit+0xc0>)
 800120e:	f043 0304 	orr.w	r3, r3, #4
 8001212:	6193      	str	r3, [r2, #24]
 8001214:	4b1e      	ldr	r3, [pc, #120]	; (8001290 <HAL_ADC_MspInit+0xc0>)
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	f003 0304 	and.w	r3, r3, #4
 800121c:	60bb      	str	r3, [r7, #8]
 800121e:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = CNY70_Pin|SHARP_D_Pin|SHARP_C_Pin|SHARP_I_Pin;
 8001220:	230f      	movs	r3, #15
 8001222:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001224:	2303      	movs	r3, #3
 8001226:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001228:	f107 0310 	add.w	r3, r7, #16
 800122c:	4619      	mov	r1, r3
 800122e:	4819      	ldr	r0, [pc, #100]	; (8001294 <HAL_ADC_MspInit+0xc4>)
 8001230:	f003 f94a 	bl	80044c8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001234:	4b18      	ldr	r3, [pc, #96]	; (8001298 <HAL_ADC_MspInit+0xc8>)
 8001236:	4a19      	ldr	r2, [pc, #100]	; (800129c <HAL_ADC_MspInit+0xcc>)
 8001238:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800123a:	4b17      	ldr	r3, [pc, #92]	; (8001298 <HAL_ADC_MspInit+0xc8>)
 800123c:	2200      	movs	r2, #0
 800123e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001240:	4b15      	ldr	r3, [pc, #84]	; (8001298 <HAL_ADC_MspInit+0xc8>)
 8001242:	2200      	movs	r2, #0
 8001244:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001246:	4b14      	ldr	r3, [pc, #80]	; (8001298 <HAL_ADC_MspInit+0xc8>)
 8001248:	2280      	movs	r2, #128	; 0x80
 800124a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800124c:	4b12      	ldr	r3, [pc, #72]	; (8001298 <HAL_ADC_MspInit+0xc8>)
 800124e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001252:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001254:	4b10      	ldr	r3, [pc, #64]	; (8001298 <HAL_ADC_MspInit+0xc8>)
 8001256:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800125a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800125c:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <HAL_ADC_MspInit+0xc8>)
 800125e:	2220      	movs	r2, #32
 8001260:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001262:	4b0d      	ldr	r3, [pc, #52]	; (8001298 <HAL_ADC_MspInit+0xc8>)
 8001264:	2200      	movs	r2, #0
 8001266:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001268:	480b      	ldr	r0, [pc, #44]	; (8001298 <HAL_ADC_MspInit+0xc8>)
 800126a:	f002 fe8f 	bl	8003f8c <HAL_DMA_Init>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001274:	f001 fc90 	bl	8002b98 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	4a07      	ldr	r2, [pc, #28]	; (8001298 <HAL_ADC_MspInit+0xc8>)
 800127c:	621a      	str	r2, [r3, #32]
 800127e:	4a06      	ldr	r2, [pc, #24]	; (8001298 <HAL_ADC_MspInit+0xc8>)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001284:	bf00      	nop
 8001286:	3720      	adds	r7, #32
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40012400 	.word	0x40012400
 8001290:	40021000 	.word	0x40021000
 8001294:	40010800 	.word	0x40010800
 8001298:	200000d8 	.word	0x200000d8
 800129c:	40020008 	.word	0x40020008

080012a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012a6:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <MX_DMA_Init+0x38>)
 80012a8:	695b      	ldr	r3, [r3, #20]
 80012aa:	4a0b      	ldr	r2, [pc, #44]	; (80012d8 <MX_DMA_Init+0x38>)
 80012ac:	f043 0301 	orr.w	r3, r3, #1
 80012b0:	6153      	str	r3, [r2, #20]
 80012b2:	4b09      	ldr	r3, [pc, #36]	; (80012d8 <MX_DMA_Init+0x38>)
 80012b4:	695b      	ldr	r3, [r3, #20]
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	607b      	str	r3, [r7, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80012be:	2200      	movs	r2, #0
 80012c0:	2100      	movs	r1, #0
 80012c2:	200b      	movs	r0, #11
 80012c4:	f002 fe2b 	bl	8003f1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80012c8:	200b      	movs	r0, #11
 80012ca:	f002 fe44 	bl	8003f56 <HAL_NVIC_EnableIRQ>

}
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40021000 	.word	0x40021000

080012dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b088      	sub	sp, #32
 80012e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e2:	f107 0310 	add.w	r3, r7, #16
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	605a      	str	r2, [r3, #4]
 80012ec:	609a      	str	r2, [r3, #8]
 80012ee:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012f0:	4b3f      	ldr	r3, [pc, #252]	; (80013f0 <MX_GPIO_Init+0x114>)
 80012f2:	699b      	ldr	r3, [r3, #24]
 80012f4:	4a3e      	ldr	r2, [pc, #248]	; (80013f0 <MX_GPIO_Init+0x114>)
 80012f6:	f043 0310 	orr.w	r3, r3, #16
 80012fa:	6193      	str	r3, [r2, #24]
 80012fc:	4b3c      	ldr	r3, [pc, #240]	; (80013f0 <MX_GPIO_Init+0x114>)
 80012fe:	699b      	ldr	r3, [r3, #24]
 8001300:	f003 0310 	and.w	r3, r3, #16
 8001304:	60fb      	str	r3, [r7, #12]
 8001306:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001308:	4b39      	ldr	r3, [pc, #228]	; (80013f0 <MX_GPIO_Init+0x114>)
 800130a:	699b      	ldr	r3, [r3, #24]
 800130c:	4a38      	ldr	r2, [pc, #224]	; (80013f0 <MX_GPIO_Init+0x114>)
 800130e:	f043 0320 	orr.w	r3, r3, #32
 8001312:	6193      	str	r3, [r2, #24]
 8001314:	4b36      	ldr	r3, [pc, #216]	; (80013f0 <MX_GPIO_Init+0x114>)
 8001316:	699b      	ldr	r3, [r3, #24]
 8001318:	f003 0320 	and.w	r3, r3, #32
 800131c:	60bb      	str	r3, [r7, #8]
 800131e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001320:	4b33      	ldr	r3, [pc, #204]	; (80013f0 <MX_GPIO_Init+0x114>)
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	4a32      	ldr	r2, [pc, #200]	; (80013f0 <MX_GPIO_Init+0x114>)
 8001326:	f043 0304 	orr.w	r3, r3, #4
 800132a:	6193      	str	r3, [r2, #24]
 800132c:	4b30      	ldr	r3, [pc, #192]	; (80013f0 <MX_GPIO_Init+0x114>)
 800132e:	699b      	ldr	r3, [r3, #24]
 8001330:	f003 0304 	and.w	r3, r3, #4
 8001334:	607b      	str	r3, [r7, #4]
 8001336:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001338:	4b2d      	ldr	r3, [pc, #180]	; (80013f0 <MX_GPIO_Init+0x114>)
 800133a:	699b      	ldr	r3, [r3, #24]
 800133c:	4a2c      	ldr	r2, [pc, #176]	; (80013f0 <MX_GPIO_Init+0x114>)
 800133e:	f043 0308 	orr.w	r3, r3, #8
 8001342:	6193      	str	r3, [r2, #24]
 8001344:	4b2a      	ldr	r3, [pc, #168]	; (80013f0 <MX_GPIO_Init+0x114>)
 8001346:	699b      	ldr	r3, [r3, #24]
 8001348:	f003 0308 	and.w	r3, r3, #8
 800134c:	603b      	str	r3, [r7, #0]
 800134e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001350:	2200      	movs	r2, #0
 8001352:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001356:	4827      	ldr	r0, [pc, #156]	; (80013f4 <MX_GPIO_Init+0x118>)
 8001358:	f003 fa51 	bl	80047fe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|AIN1_Pin|AIN2_Pin, GPIO_PIN_RESET);
 800135c:	2200      	movs	r2, #0
 800135e:	f248 0118 	movw	r1, #32792	; 0x8018
 8001362:	4825      	ldr	r0, [pc, #148]	; (80013f8 <MX_GPIO_Init+0x11c>)
 8001364:	f003 fa4b 	bl	80047fe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BIN2_Pin|BIN1_Pin|STBY_Pin, GPIO_PIN_RESET);
 8001368:	2200      	movs	r2, #0
 800136a:	f44f 4118 	mov.w	r1, #38912	; 0x9800
 800136e:	4823      	ldr	r0, [pc, #140]	; (80013fc <MX_GPIO_Init+0x120>)
 8001370:	f003 fa45 	bl	80047fe <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001374:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001378:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800137a:	2301      	movs	r3, #1
 800137c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137e:	2300      	movs	r3, #0
 8001380:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001382:	2302      	movs	r3, #2
 8001384:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001386:	f107 0310 	add.w	r3, r7, #16
 800138a:	4619      	mov	r1, r3
 800138c:	4819      	ldr	r0, [pc, #100]	; (80013f4 <MX_GPIO_Init+0x118>)
 800138e:	f003 f89b 	bl	80044c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin|BTN3_Pin;
 8001392:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001396:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001398:	2300      	movs	r3, #0
 800139a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a0:	f107 0310 	add.w	r3, r7, #16
 80013a4:	4619      	mov	r1, r3
 80013a6:	4814      	ldr	r0, [pc, #80]	; (80013f8 <MX_GPIO_Init+0x11c>)
 80013a8:	f003 f88e 	bl	80044c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_Pin|AIN1_Pin|AIN2_Pin;
 80013ac:	f248 0318 	movw	r3, #32792	; 0x8018
 80013b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b2:	2301      	movs	r3, #1
 80013b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ba:	2302      	movs	r3, #2
 80013bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013be:	f107 0310 	add.w	r3, r7, #16
 80013c2:	4619      	mov	r1, r3
 80013c4:	480c      	ldr	r0, [pc, #48]	; (80013f8 <MX_GPIO_Init+0x11c>)
 80013c6:	f003 f87f 	bl	80044c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = BIN2_Pin|BIN1_Pin|STBY_Pin;
 80013ca:	f44f 4318 	mov.w	r3, #38912	; 0x9800
 80013ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d0:	2301      	movs	r3, #1
 80013d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d8:	2302      	movs	r3, #2
 80013da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013dc:	f107 0310 	add.w	r3, r7, #16
 80013e0:	4619      	mov	r1, r3
 80013e2:	4806      	ldr	r0, [pc, #24]	; (80013fc <MX_GPIO_Init+0x120>)
 80013e4:	f003 f870 	bl	80044c8 <HAL_GPIO_Init>

}
 80013e8:	bf00      	nop
 80013ea:	3720      	adds	r7, #32
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40021000 	.word	0x40021000
 80013f4:	40011000 	.word	0x40011000
 80013f8:	40010c00 	.word	0x40010c00
 80013fc:	40010800 	.word	0x40010800

08001400 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001404:	f002 f86c 	bl	80034e0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001408:	f000 f866 	bl	80014d8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800140c:	f7ff ff66 	bl	80012dc <MX_GPIO_Init>
	MX_DMA_Init();
 8001410:	f7ff ff46 	bl	80012a0 <MX_DMA_Init>
	MX_TIM4_Init();
 8001414:	f001 fe92 	bl	800313c <MX_TIM4_Init>
	MX_TIM3_Init();
 8001418:	f001 fe3c 	bl	8003094 <MX_TIM3_Init>
	MX_ADC1_Init();
 800141c:	f7ff fe6e 	bl	80010fc <MX_ADC1_Init>
	MX_USART1_UART_Init();
 8001420:	f001 ffba 	bl	8003398 <MX_USART1_UART_Init>
	MX_TIM2_Init();
 8001424:	f001 fdd2 	bl	8002fcc <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001428:	2108      	movs	r1, #8
 800142a:	4821      	ldr	r0, [pc, #132]	; (80014b0 <main+0xb0>)
 800142c:	f003 ff20 	bl	8005270 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001430:	210c      	movs	r1, #12
 8001432:	481f      	ldr	r0, [pc, #124]	; (80014b0 <main+0xb0>)
 8001434:	f003 ff1c 	bl	8005270 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001438:	213c      	movs	r1, #60	; 0x3c
 800143a:	481e      	ldr	r0, [pc, #120]	; (80014b4 <main+0xb4>)
 800143c:	f004 f85c 	bl	80054f8 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001440:	213c      	movs	r1, #60	; 0x3c
 8001442:	481d      	ldr	r0, [pc, #116]	; (80014b8 <main+0xb8>)
 8001444:	f004 f858 	bl	80054f8 <HAL_TIM_Encoder_Start>
	HAL_GPIO_WritePin(STBY, GPIO_PIN_SET);
 8001448:	2201      	movs	r2, #1
 800144a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800144e:	481b      	ldr	r0, [pc, #108]	; (80014bc <main+0xbc>)
 8001450:	f003 f9d5 	bl	80047fe <HAL_GPIO_WritePin>
	TIM2->CCR3 = 15000;
 8001454:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001458:	f643 2298 	movw	r2, #15000	; 0x3a98
 800145c:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM2->CCR4 = 15000;
 800145e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001462:	f643 2298 	movw	r2, #15000	; 0x3a98
 8001466:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_buf, ADC_BUF_LEN);
 8001468:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800146c:	4914      	ldr	r1, [pc, #80]	; (80014c0 <main+0xc0>)
 800146e:	4815      	ldr	r0, [pc, #84]	; (80014c4 <main+0xc4>)
 8001470:	f002 f994 	bl	800379c <HAL_ADC_Start_DMA>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8001474:	2200      	movs	r2, #0
 8001476:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800147a:	4813      	ldr	r0, [pc, #76]	; (80014c8 <main+0xc8>)
 800147c:	f003 f9bf 	bl	80047fe <HAL_GPIO_WritePin>
	TIM3->CNT = 0;
 8001480:	4b12      	ldr	r3, [pc, #72]	; (80014cc <main+0xcc>)
 8001482:	2200      	movs	r2, #0
 8001484:	625a      	str	r2, [r3, #36]	; 0x24
	TIM4->CNT = 0;
 8001486:	4b12      	ldr	r3, [pc, #72]	; (80014d0 <main+0xd0>)
 8001488:	2200      	movs	r2, #0
 800148a:	625a      	str	r2, [r3, #36]	; 0x24
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		mainMachine();
 800148c:	f000 f8f0 	bl	8001670 <mainMachine>
		intUartSend(Sensors[1]);
 8001490:	4b10      	ldr	r3, [pc, #64]	; (80014d4 <main+0xd4>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	4618      	mov	r0, r3
 8001496:	f000 f87b 	bl	8001590 <intUartSend>
		intUartSend(Sensors[2]);
 800149a:	4b0e      	ldr	r3, [pc, #56]	; (80014d4 <main+0xd4>)
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	4618      	mov	r0, r3
 80014a0:	f000 f876 	bl	8001590 <intUartSend>
		intUartSend(Sensors[3]);
 80014a4:	4b0b      	ldr	r3, [pc, #44]	; (80014d4 <main+0xd4>)
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f000 f871 	bl	8001590 <intUartSend>
	while (1) {
 80014ae:	e7ed      	b.n	800148c <main+0x8c>
 80014b0:	20001bac 	.word	0x20001bac
 80014b4:	20001c3c 	.word	0x20001c3c
 80014b8:	20001bf4 	.word	0x20001bf4
 80014bc:	40010800 	.word	0x40010800
 80014c0:	2000011c 	.word	0x2000011c
 80014c4:	200000a8 	.word	0x200000a8
 80014c8:	40011000 	.word	0x40011000
 80014cc:	40000400 	.word	0x40000400
 80014d0:	40000800 	.word	0x40000800
 80014d4:	200011bc 	.word	0x200011bc

080014d8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80014d8:	b580      	push	{r7, lr}
 80014da:	b094      	sub	sp, #80	; 0x50
 80014dc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80014de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014e2:	2228      	movs	r2, #40	; 0x28
 80014e4:	2100      	movs	r1, #0
 80014e6:	4618      	mov	r0, r3
 80014e8:	f005 ffa2 	bl	8007430 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80014ec:	f107 0314 	add.w	r3, r7, #20
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	605a      	str	r2, [r3, #4]
 80014f6:	609a      	str	r2, [r3, #8]
 80014f8:	60da      	str	r2, [r3, #12]
 80014fa:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80014fc:	1d3b      	adds	r3, r7, #4
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	605a      	str	r2, [r3, #4]
 8001504:	609a      	str	r2, [r3, #8]
 8001506:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001508:	2301      	movs	r3, #1
 800150a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800150c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001510:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001512:	2300      	movs	r3, #0
 8001514:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001516:	2301      	movs	r3, #1
 8001518:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800151a:	2302      	movs	r3, #2
 800151c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800151e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001522:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001524:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001528:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800152a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800152e:	4618      	mov	r0, r3
 8001530:	f003 f97e 	bl	8004830 <HAL_RCC_OscConfig>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <SystemClock_Config+0x66>
		Error_Handler();
 800153a:	f001 fb2d 	bl	8002b98 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800153e:	230f      	movs	r3, #15
 8001540:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001542:	2302      	movs	r3, #2
 8001544:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001546:	2300      	movs	r3, #0
 8001548:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800154a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800154e:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001550:	2300      	movs	r3, #0
 8001552:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001554:	f107 0314 	add.w	r3, r7, #20
 8001558:	2102      	movs	r1, #2
 800155a:	4618      	mov	r0, r3
 800155c:	f003 fbea 	bl	8004d34 <HAL_RCC_ClockConfig>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <SystemClock_Config+0x92>
		Error_Handler();
 8001566:	f001 fb17 	bl	8002b98 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800156a:	2302      	movs	r3, #2
 800156c:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800156e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001572:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001574:	1d3b      	adds	r3, r7, #4
 8001576:	4618      	mov	r0, r3
 8001578:	f003 fd74 	bl	8005064 <HAL_RCCEx_PeriphCLKConfig>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <SystemClock_Config+0xae>
		Error_Handler();
 8001582:	f001 fb09 	bl	8002b98 <Error_Handler>
	}
}
 8001586:	bf00      	nop
 8001588:	3750      	adds	r7, #80	; 0x50
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
	...

08001590 <intUartSend>:

/* USER CODE BEGIN 4 */
void intUartSend(int entero) {
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
	int m;
	int c;
	int d;
	int u;

	m = entero / 1000;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	4a30      	ldr	r2, [pc, #192]	; (800165c <intUartSend+0xcc>)
 800159c:	fb82 1203 	smull	r1, r2, r2, r3
 80015a0:	1192      	asrs	r2, r2, #6
 80015a2:	17db      	asrs	r3, r3, #31
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	617b      	str	r3, [r7, #20]
	c = entero / 100 - m * 10;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	4a2d      	ldr	r2, [pc, #180]	; (8001660 <intUartSend+0xd0>)
 80015ac:	fb82 1203 	smull	r1, r2, r2, r3
 80015b0:	1152      	asrs	r2, r2, #5
 80015b2:	17db      	asrs	r3, r3, #31
 80015b4:	1ad2      	subs	r2, r2, r3
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	f06f 0109 	mvn.w	r1, #9
 80015bc:	fb01 f303 	mul.w	r3, r1, r3
 80015c0:	4413      	add	r3, r2
 80015c2:	613b      	str	r3, [r7, #16]
	d = entero / 10 - (m * 100 + c * 10);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	4a27      	ldr	r2, [pc, #156]	; (8001664 <intUartSend+0xd4>)
 80015c8:	fb82 1203 	smull	r1, r2, r2, r3
 80015cc:	1092      	asrs	r2, r2, #2
 80015ce:	17db      	asrs	r3, r3, #31
 80015d0:	1ad1      	subs	r1, r2, r3
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	2264      	movs	r2, #100	; 0x64
 80015d6:	fb02 f003 	mul.w	r0, r2, r3
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	4613      	mov	r3, r2
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	4413      	add	r3, r2
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	4403      	add	r3, r0
 80015e6:	1acb      	subs	r3, r1, r3
 80015e8:	60fb      	str	r3, [r7, #12]
	u = entero - (m * 1000 + c * 100 + d * 10);
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015f0:	fb03 f202 	mul.w	r2, r3, r2
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	2164      	movs	r1, #100	; 0x64
 80015f8:	fb01 f303 	mul.w	r3, r1, r3
 80015fc:	18d1      	adds	r1, r2, r3
 80015fe:	68fa      	ldr	r2, [r7, #12]
 8001600:	4613      	mov	r3, r2
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	4413      	add	r3, r2
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	440b      	add	r3, r1
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	60bb      	str	r3, [r7, #8]

	TX_BUFFER[0] = m + '0';
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	b2db      	uxtb	r3, r3
 8001614:	3330      	adds	r3, #48	; 0x30
 8001616:	b2da      	uxtb	r2, r3
 8001618:	4b13      	ldr	r3, [pc, #76]	; (8001668 <intUartSend+0xd8>)
 800161a:	701a      	strb	r2, [r3, #0]
	TX_BUFFER[1] = c + '0';
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	b2db      	uxtb	r3, r3
 8001620:	3330      	adds	r3, #48	; 0x30
 8001622:	b2da      	uxtb	r2, r3
 8001624:	4b10      	ldr	r3, [pc, #64]	; (8001668 <intUartSend+0xd8>)
 8001626:	705a      	strb	r2, [r3, #1]
	TX_BUFFER[2] = d + '0';
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	b2db      	uxtb	r3, r3
 800162c:	3330      	adds	r3, #48	; 0x30
 800162e:	b2da      	uxtb	r2, r3
 8001630:	4b0d      	ldr	r3, [pc, #52]	; (8001668 <intUartSend+0xd8>)
 8001632:	709a      	strb	r2, [r3, #2]
	TX_BUFFER[3] = u + '0';
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	b2db      	uxtb	r3, r3
 8001638:	3330      	adds	r3, #48	; 0x30
 800163a:	b2da      	uxtb	r2, r3
 800163c:	4b0a      	ldr	r3, [pc, #40]	; (8001668 <intUartSend+0xd8>)
 800163e:	70da      	strb	r2, [r3, #3]
	TX_BUFFER[4] = '\n';
 8001640:	4b09      	ldr	r3, [pc, #36]	; (8001668 <intUartSend+0xd8>)
 8001642:	220a      	movs	r2, #10
 8001644:	711a      	strb	r2, [r3, #4]
	HAL_UART_Transmit(&huart1, TX_BUFFER, 5, 100);
 8001646:	2364      	movs	r3, #100	; 0x64
 8001648:	2205      	movs	r2, #5
 800164a:	4907      	ldr	r1, [pc, #28]	; (8001668 <intUartSend+0xd8>)
 800164c:	4807      	ldr	r0, [pc, #28]	; (800166c <intUartSend+0xdc>)
 800164e:	f004 fb58 	bl	8005d02 <HAL_UART_Transmit>
}
 8001652:	bf00      	nop
 8001654:	3718      	adds	r7, #24
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	10624dd3 	.word	0x10624dd3
 8001660:	51eb851f 	.word	0x51eb851f
 8001664:	66666667 	.word	0x66666667
 8001668:	200011dc 	.word	0x200011dc
 800166c:	20001c84 	.word	0x20001c84

08001670 <mainMachine>:

void mainMachine() {
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
	switch (mainState) {
 8001674:	4b30      	ldr	r3, [pc, #192]	; (8001738 <mainMachine+0xc8>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d002      	beq.n	8001682 <mainMachine+0x12>
 800167c:	2b01      	cmp	r3, #1
 800167e:	d041      	beq.n	8001704 <mainMachine+0x94>
		 //runDirections(directions);
		 break;
		 }*/

	}
}
 8001680:	e057      	b.n	8001732 <mainMachine+0xc2>
		actual.x = ALTO;
 8001682:	4b2e      	ldr	r3, [pc, #184]	; (800173c <mainMachine+0xcc>)
 8001684:	2205      	movs	r2, #5
 8001686:	601a      	str	r2, [r3, #0]
		actual.y = ANCHO;
 8001688:	4b2c      	ldr	r3, [pc, #176]	; (800173c <mainMachine+0xcc>)
 800168a:	2205      	movs	r2, #5
 800168c:	605a      	str	r2, [r3, #4]
		resetAxis();
 800168e:	f001 f8b3 	bl	80027f8 <resetAxis>
		movimientoFlag = 0;
 8001692:	4b2b      	ldr	r3, [pc, #172]	; (8001740 <mainMachine+0xd0>)
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
		finishFlag = 0;
 8001698:	4b2a      	ldr	r3, [pc, #168]	; (8001744 <mainMachine+0xd4>)
 800169a:	2200      	movs	r2, #0
 800169c:	601a      	str	r2, [r3, #0]
		if (!HAL_GPIO_ReadPin(BTN1)) {
 800169e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016a2:	4829      	ldr	r0, [pc, #164]	; (8001748 <mainMachine+0xd8>)
 80016a4:	f003 f894 	bl	80047d0 <HAL_GPIO_ReadPin>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d11e      	bne.n	80016ec <mainMachine+0x7c>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80016ae:	2201      	movs	r2, #1
 80016b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016b4:	4825      	ldr	r0, [pc, #148]	; (800174c <mainMachine+0xdc>)
 80016b6:	f003 f8a2 	bl	80047fe <HAL_GPIO_WritePin>
			velocity = velocityChoice[SLOW];
 80016ba:	4b25      	ldr	r3, [pc, #148]	; (8001750 <mainMachine+0xe0>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a25      	ldr	r2, [pc, #148]	; (8001754 <mainMachine+0xe4>)
 80016c0:	6013      	str	r3, [r2, #0]
			TIM2->CCR3 = 8000;
 80016c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016c6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80016ca:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM2->CCR4 = 8000;
 80016cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016d0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80016d4:	641a      	str	r2, [r3, #64]	; 0x40
			KP = KPchoice[SLOW];
 80016d6:	4b20      	ldr	r3, [pc, #128]	; (8001758 <mainMachine+0xe8>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a20      	ldr	r2, [pc, #128]	; (800175c <mainMachine+0xec>)
 80016dc:	6013      	str	r3, [r2, #0]
			KD = KDchoice[SLOW];
 80016de:	4b20      	ldr	r3, [pc, #128]	; (8001760 <mainMachine+0xf0>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a20      	ldr	r2, [pc, #128]	; (8001764 <mainMachine+0xf4>)
 80016e4:	6013      	str	r3, [r2, #0]
			mainState = MAPPING;
 80016e6:	4b14      	ldr	r3, [pc, #80]	; (8001738 <mainMachine+0xc8>)
 80016e8:	2201      	movs	r2, #1
 80016ea:	601a      	str	r2, [r3, #0]
		if (!HAL_GPIO_ReadPin(BTN2)) {
 80016ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016f0:	4815      	ldr	r0, [pc, #84]	; (8001748 <mainMachine+0xd8>)
 80016f2:	f003 f86d 	bl	80047d0 <HAL_GPIO_ReadPin>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d119      	bne.n	8001730 <mainMachine+0xc0>
			mainState = RACING;
 80016fc:	4b0e      	ldr	r3, [pc, #56]	; (8001738 <mainMachine+0xc8>)
 80016fe:	2203      	movs	r2, #3
 8001700:	601a      	str	r2, [r3, #0]
		break;
 8001702:	e015      	b.n	8001730 <mainMachine+0xc0>
		if (finishFlag == 0) {
 8001704:	4b0f      	ldr	r3, [pc, #60]	; (8001744 <mainMachine+0xd4>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d102      	bne.n	8001712 <mainMachine+0xa2>
			robotMachine();
 800170c:	f000 f82c 	bl	8001768 <robotMachine>
		break;
 8001710:	e00f      	b.n	8001732 <mainMachine+0xc2>
			actual.x = ALTO;
 8001712:	4b0a      	ldr	r3, [pc, #40]	; (800173c <mainMachine+0xcc>)
 8001714:	2205      	movs	r2, #5
 8001716:	601a      	str	r2, [r3, #0]
			actual.y = ANCHO;
 8001718:	4b08      	ldr	r3, [pc, #32]	; (800173c <mainMachine+0xcc>)
 800171a:	2205      	movs	r2, #5
 800171c:	605a      	str	r2, [r3, #4]
			finishFlag = 0;
 800171e:	4b09      	ldr	r3, [pc, #36]	; (8001744 <mainMachine+0xd4>)
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
			resetAxis();
 8001724:	f001 f868 	bl	80027f8 <resetAxis>
			mainState = RESOLUTION;
 8001728:	4b03      	ldr	r3, [pc, #12]	; (8001738 <mainMachine+0xc8>)
 800172a:	2202      	movs	r2, #2
 800172c:	601a      	str	r2, [r3, #0]
		break;
 800172e:	e000      	b.n	8001732 <mainMachine+0xc2>
		break;
 8001730:	bf00      	nop
}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	2000120c 	.word	0x2000120c
 800173c:	20001214 	.word	0x20001214
 8001740:	200011fc 	.word	0x200011fc
 8001744:	200011f8 	.word	0x200011f8
 8001748:	40010c00 	.word	0x40010c00
 800174c:	40011000 	.word	0x40011000
 8001750:	20000010 	.word	0x20000010
 8001754:	200011f0 	.word	0x200011f0
 8001758:	20000000 	.word	0x20000000
 800175c:	200011e8 	.word	0x200011e8
 8001760:	20000008 	.word	0x20000008
 8001764:	200011ec 	.word	0x200011ec

08001768 <robotMachine>:

void robotMachine() {
 8001768:	b5b0      	push	{r4, r5, r7, lr}
 800176a:	af00      	add	r7, sp, #0
	switch (robotState) {
 800176c:	4ba8      	ldr	r3, [pc, #672]	; (8001a10 <robotMachine+0x2a8>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2b02      	cmp	r3, #2
 8001772:	f000 8266 	beq.w	8001c42 <robotMachine+0x4da>
 8001776:	2b02      	cmp	r3, #2
 8001778:	f300 8270 	bgt.w	8001c5c <robotMachine+0x4f4>
 800177c:	2b00      	cmp	r3, #0
 800177e:	d003      	beq.n	8001788 <robotMachine+0x20>
 8001780:	2b01      	cmp	r3, #1
 8001782:	f000 8172 	beq.w	8001a6a <robotMachine+0x302>
		if (movimientoFlag == 1) {
			robotState = READING;
		}
		break;
	}
}
 8001786:	e269      	b.n	8001c5c <robotMachine+0x4f4>
		Map[actual.x][actual.y].visitado++;
 8001788:	4ba2      	ldr	r3, [pc, #648]	; (8001a14 <robotMachine+0x2ac>)
 800178a:	6819      	ldr	r1, [r3, #0]
 800178c:	4ba1      	ldr	r3, [pc, #644]	; (8001a14 <robotMachine+0x2ac>)
 800178e:	6858      	ldr	r0, [r3, #4]
 8001790:	4ca1      	ldr	r4, [pc, #644]	; (8001a18 <robotMachine+0x2b0>)
 8001792:	4602      	mov	r2, r0
 8001794:	0052      	lsls	r2, r2, #1
 8001796:	4402      	add	r2, r0
 8001798:	00d3      	lsls	r3, r2, #3
 800179a:	461a      	mov	r2, r3
 800179c:	460b      	mov	r3, r1
 800179e:	011b      	lsls	r3, r3, #4
 80017a0:	1a5b      	subs	r3, r3, r1
 80017a2:	011b      	lsls	r3, r3, #4
 80017a4:	4413      	add	r3, r2
 80017a6:	4423      	add	r3, r4
 80017a8:	3310      	adds	r3, #16
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	1c5c      	adds	r4, r3, #1
 80017ae:	4d9a      	ldr	r5, [pc, #616]	; (8001a18 <robotMachine+0x2b0>)
 80017b0:	4602      	mov	r2, r0
 80017b2:	0052      	lsls	r2, r2, #1
 80017b4:	4402      	add	r2, r0
 80017b6:	00d3      	lsls	r3, r2, #3
 80017b8:	461a      	mov	r2, r3
 80017ba:	460b      	mov	r3, r1
 80017bc:	011b      	lsls	r3, r3, #4
 80017be:	1a5b      	subs	r3, r3, r1
 80017c0:	011b      	lsls	r3, r3, #4
 80017c2:	4413      	add	r3, r2
 80017c4:	442b      	add	r3, r5
 80017c6:	3310      	adds	r3, #16
 80017c8:	601c      	str	r4, [r3, #0]
		if (Map[actual.x][actual.y].visitado == 1) {
 80017ca:	4b92      	ldr	r3, [pc, #584]	; (8001a14 <robotMachine+0x2ac>)
 80017cc:	6819      	ldr	r1, [r3, #0]
 80017ce:	4b91      	ldr	r3, [pc, #580]	; (8001a14 <robotMachine+0x2ac>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	4891      	ldr	r0, [pc, #580]	; (8001a18 <robotMachine+0x2b0>)
 80017d4:	461a      	mov	r2, r3
 80017d6:	0052      	lsls	r2, r2, #1
 80017d8:	441a      	add	r2, r3
 80017da:	00d3      	lsls	r3, r2, #3
 80017dc:	461a      	mov	r2, r3
 80017de:	460b      	mov	r3, r1
 80017e0:	011b      	lsls	r3, r3, #4
 80017e2:	1a5b      	subs	r3, r3, r1
 80017e4:	011b      	lsls	r3, r3, #4
 80017e6:	4413      	add	r3, r2
 80017e8:	4403      	add	r3, r0
 80017ea:	3310      	adds	r3, #16
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d176      	bne.n	80018e0 <robotMachine+0x178>
			runMotor(OFF, MOTOR_A);
 80017f2:	2100      	movs	r1, #0
 80017f4:	2005      	movs	r0, #5
 80017f6:	f001 f9fd 	bl	8002bf4 <runMotor>
			runMotor(OFF, MOTOR_B);
 80017fa:	2101      	movs	r1, #1
 80017fc:	2005      	movs	r0, #5
 80017fe:	f001 f9f9 	bl	8002bf4 <runMotor>
			CreateNode(actual.x, actual.y);
 8001802:	4b84      	ldr	r3, [pc, #528]	; (8001a14 <robotMachine+0x2ac>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a83      	ldr	r2, [pc, #524]	; (8001a14 <robotMachine+0x2ac>)
 8001808:	6852      	ldr	r2, [r2, #4]
 800180a:	4611      	mov	r1, r2
 800180c:	4618      	mov	r0, r3
 800180e:	f000 ff2d 	bl	800266c <CreateNode>
			TX_BUFFER[0] = 'D';
 8001812:	4b82      	ldr	r3, [pc, #520]	; (8001a1c <robotMachine+0x2b4>)
 8001814:	2244      	movs	r2, #68	; 0x44
 8001816:	701a      	strb	r2, [r3, #0]
			TX_BUFFER[1] = Sensors[1] + '0';
 8001818:	4b81      	ldr	r3, [pc, #516]	; (8001a20 <robotMachine+0x2b8>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	b2db      	uxtb	r3, r3
 800181e:	3330      	adds	r3, #48	; 0x30
 8001820:	b2da      	uxtb	r2, r3
 8001822:	4b7e      	ldr	r3, [pc, #504]	; (8001a1c <robotMachine+0x2b4>)
 8001824:	705a      	strb	r2, [r3, #1]
			TX_BUFFER[2] = '\n';
 8001826:	4b7d      	ldr	r3, [pc, #500]	; (8001a1c <robotMachine+0x2b4>)
 8001828:	220a      	movs	r2, #10
 800182a:	709a      	strb	r2, [r3, #2]
			TX_BUFFER[3] = 'C';
 800182c:	4b7b      	ldr	r3, [pc, #492]	; (8001a1c <robotMachine+0x2b4>)
 800182e:	2243      	movs	r2, #67	; 0x43
 8001830:	70da      	strb	r2, [r3, #3]
			TX_BUFFER[4] = Sensors[2] + '0';
 8001832:	4b7b      	ldr	r3, [pc, #492]	; (8001a20 <robotMachine+0x2b8>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	b2db      	uxtb	r3, r3
 8001838:	3330      	adds	r3, #48	; 0x30
 800183a:	b2da      	uxtb	r2, r3
 800183c:	4b77      	ldr	r3, [pc, #476]	; (8001a1c <robotMachine+0x2b4>)
 800183e:	711a      	strb	r2, [r3, #4]
			TX_BUFFER[5] = '\n';
 8001840:	4b76      	ldr	r3, [pc, #472]	; (8001a1c <robotMachine+0x2b4>)
 8001842:	220a      	movs	r2, #10
 8001844:	715a      	strb	r2, [r3, #5]
			TX_BUFFER[6] = 'I';
 8001846:	4b75      	ldr	r3, [pc, #468]	; (8001a1c <robotMachine+0x2b4>)
 8001848:	2249      	movs	r2, #73	; 0x49
 800184a:	719a      	strb	r2, [r3, #6]
			TX_BUFFER[7] = Sensors[3] + '0';
 800184c:	4b74      	ldr	r3, [pc, #464]	; (8001a20 <robotMachine+0x2b8>)
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	b2db      	uxtb	r3, r3
 8001852:	3330      	adds	r3, #48	; 0x30
 8001854:	b2da      	uxtb	r2, r3
 8001856:	4b71      	ldr	r3, [pc, #452]	; (8001a1c <robotMachine+0x2b4>)
 8001858:	71da      	strb	r2, [r3, #7]
			TX_BUFFER[8] = '\n';
 800185a:	4b70      	ldr	r3, [pc, #448]	; (8001a1c <robotMachine+0x2b4>)
 800185c:	220a      	movs	r2, #10
 800185e:	721a      	strb	r2, [r3, #8]
			HAL_UART_Transmit(&huart1, TX_BUFFER, 9, 100);
 8001860:	2364      	movs	r3, #100	; 0x64
 8001862:	2209      	movs	r2, #9
 8001864:	496d      	ldr	r1, [pc, #436]	; (8001a1c <robotMachine+0x2b4>)
 8001866:	486f      	ldr	r0, [pc, #444]	; (8001a24 <robotMachine+0x2bc>)
 8001868:	f004 fa4b 	bl	8005d02 <HAL_UART_Transmit>
			TX_BUFFER[0] = 'D';
 800186c:	4b6b      	ldr	r3, [pc, #428]	; (8001a1c <robotMachine+0x2b4>)
 800186e:	2244      	movs	r2, #68	; 0x44
 8001870:	701a      	strb	r2, [r3, #0]
			TX_BUFFER[1] = direcciones[DERECHA] + '0';
 8001872:	4b6d      	ldr	r3, [pc, #436]	; (8001a28 <robotMachine+0x2c0>)
 8001874:	68db      	ldr	r3, [r3, #12]
 8001876:	b2db      	uxtb	r3, r3
 8001878:	3330      	adds	r3, #48	; 0x30
 800187a:	b2da      	uxtb	r2, r3
 800187c:	4b67      	ldr	r3, [pc, #412]	; (8001a1c <robotMachine+0x2b4>)
 800187e:	705a      	strb	r2, [r3, #1]
			TX_BUFFER[2] = '\n';
 8001880:	4b66      	ldr	r3, [pc, #408]	; (8001a1c <robotMachine+0x2b4>)
 8001882:	220a      	movs	r2, #10
 8001884:	709a      	strb	r2, [r3, #2]
			TX_BUFFER[3] = 'C';
 8001886:	4b65      	ldr	r3, [pc, #404]	; (8001a1c <robotMachine+0x2b4>)
 8001888:	2243      	movs	r2, #67	; 0x43
 800188a:	70da      	strb	r2, [r3, #3]
			TX_BUFFER[4] = direcciones[ADELANTE] + '0';
 800188c:	4b66      	ldr	r3, [pc, #408]	; (8001a28 <robotMachine+0x2c0>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	b2db      	uxtb	r3, r3
 8001892:	3330      	adds	r3, #48	; 0x30
 8001894:	b2da      	uxtb	r2, r3
 8001896:	4b61      	ldr	r3, [pc, #388]	; (8001a1c <robotMachine+0x2b4>)
 8001898:	711a      	strb	r2, [r3, #4]
			TX_BUFFER[5] = '\n';
 800189a:	4b60      	ldr	r3, [pc, #384]	; (8001a1c <robotMachine+0x2b4>)
 800189c:	220a      	movs	r2, #10
 800189e:	715a      	strb	r2, [r3, #5]
			TX_BUFFER[6] = 'I';
 80018a0:	4b5e      	ldr	r3, [pc, #376]	; (8001a1c <robotMachine+0x2b4>)
 80018a2:	2249      	movs	r2, #73	; 0x49
 80018a4:	719a      	strb	r2, [r3, #6]
			TX_BUFFER[7] = direcciones[IZQUIERDA] + '0';
 80018a6:	4b60      	ldr	r3, [pc, #384]	; (8001a28 <robotMachine+0x2c0>)
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	3330      	adds	r3, #48	; 0x30
 80018ae:	b2da      	uxtb	r2, r3
 80018b0:	4b5a      	ldr	r3, [pc, #360]	; (8001a1c <robotMachine+0x2b4>)
 80018b2:	71da      	strb	r2, [r3, #7]
			TX_BUFFER[8] = '\n';
 80018b4:	4b59      	ldr	r3, [pc, #356]	; (8001a1c <robotMachine+0x2b4>)
 80018b6:	220a      	movs	r2, #10
 80018b8:	721a      	strb	r2, [r3, #8]
			TX_BUFFER[9] = 'A';
 80018ba:	4b58      	ldr	r3, [pc, #352]	; (8001a1c <robotMachine+0x2b4>)
 80018bc:	2241      	movs	r2, #65	; 0x41
 80018be:	725a      	strb	r2, [r3, #9]
			TX_BUFFER[10] = direcciones[ATRAS] + '0';
 80018c0:	4b59      	ldr	r3, [pc, #356]	; (8001a28 <robotMachine+0x2c0>)
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	3330      	adds	r3, #48	; 0x30
 80018c8:	b2da      	uxtb	r2, r3
 80018ca:	4b54      	ldr	r3, [pc, #336]	; (8001a1c <robotMachine+0x2b4>)
 80018cc:	729a      	strb	r2, [r3, #10]
			TX_BUFFER[11] = '\n';
 80018ce:	4b53      	ldr	r3, [pc, #332]	; (8001a1c <robotMachine+0x2b4>)
 80018d0:	220a      	movs	r2, #10
 80018d2:	72da      	strb	r2, [r3, #11]
			HAL_UART_Transmit(&huart1, TX_BUFFER, 12, 100);
 80018d4:	2364      	movs	r3, #100	; 0x64
 80018d6:	220c      	movs	r2, #12
 80018d8:	4950      	ldr	r1, [pc, #320]	; (8001a1c <robotMachine+0x2b4>)
 80018da:	4852      	ldr	r0, [pc, #328]	; (8001a24 <robotMachine+0x2bc>)
 80018dc:	f004 fa11 	bl	8005d02 <HAL_UART_Transmit>
		TX_BUFFER[0] = 'D';
 80018e0:	4b4e      	ldr	r3, [pc, #312]	; (8001a1c <robotMachine+0x2b4>)
 80018e2:	2244      	movs	r2, #68	; 0x44
 80018e4:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = Map[actual.x][actual.y].Lados[DERECHA] + '0';
 80018e6:	4b4b      	ldr	r3, [pc, #300]	; (8001a14 <robotMachine+0x2ac>)
 80018e8:	6819      	ldr	r1, [r3, #0]
 80018ea:	4b4a      	ldr	r3, [pc, #296]	; (8001a14 <robotMachine+0x2ac>)
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	484a      	ldr	r0, [pc, #296]	; (8001a18 <robotMachine+0x2b0>)
 80018f0:	461a      	mov	r2, r3
 80018f2:	0052      	lsls	r2, r2, #1
 80018f4:	441a      	add	r2, r3
 80018f6:	00d3      	lsls	r3, r2, #3
 80018f8:	461a      	mov	r2, r3
 80018fa:	460b      	mov	r3, r1
 80018fc:	011b      	lsls	r3, r3, #4
 80018fe:	1a5b      	subs	r3, r3, r1
 8001900:	011b      	lsls	r3, r3, #4
 8001902:	4413      	add	r3, r2
 8001904:	4403      	add	r3, r0
 8001906:	330c      	adds	r3, #12
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	b2db      	uxtb	r3, r3
 800190c:	3330      	adds	r3, #48	; 0x30
 800190e:	b2da      	uxtb	r2, r3
 8001910:	4b42      	ldr	r3, [pc, #264]	; (8001a1c <robotMachine+0x2b4>)
 8001912:	705a      	strb	r2, [r3, #1]
		TX_BUFFER[2] = '\n';
 8001914:	4b41      	ldr	r3, [pc, #260]	; (8001a1c <robotMachine+0x2b4>)
 8001916:	220a      	movs	r2, #10
 8001918:	709a      	strb	r2, [r3, #2]
		TX_BUFFER[3] = 'C';
 800191a:	4b40      	ldr	r3, [pc, #256]	; (8001a1c <robotMachine+0x2b4>)
 800191c:	2243      	movs	r2, #67	; 0x43
 800191e:	70da      	strb	r2, [r3, #3]
		TX_BUFFER[4] = Map[actual.x][actual.y].Lados[ADELANTE] + '0';
 8001920:	4b3c      	ldr	r3, [pc, #240]	; (8001a14 <robotMachine+0x2ac>)
 8001922:	6819      	ldr	r1, [r3, #0]
 8001924:	4b3b      	ldr	r3, [pc, #236]	; (8001a14 <robotMachine+0x2ac>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	483b      	ldr	r0, [pc, #236]	; (8001a18 <robotMachine+0x2b0>)
 800192a:	461a      	mov	r2, r3
 800192c:	0052      	lsls	r2, r2, #1
 800192e:	441a      	add	r2, r3
 8001930:	00d3      	lsls	r3, r2, #3
 8001932:	461a      	mov	r2, r3
 8001934:	460b      	mov	r3, r1
 8001936:	011b      	lsls	r3, r3, #4
 8001938:	1a5b      	subs	r3, r3, r1
 800193a:	011b      	lsls	r3, r3, #4
 800193c:	4413      	add	r3, r2
 800193e:	4403      	add	r3, r0
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	b2db      	uxtb	r3, r3
 8001944:	3330      	adds	r3, #48	; 0x30
 8001946:	b2da      	uxtb	r2, r3
 8001948:	4b34      	ldr	r3, [pc, #208]	; (8001a1c <robotMachine+0x2b4>)
 800194a:	711a      	strb	r2, [r3, #4]
		TX_BUFFER[5] = '\n';
 800194c:	4b33      	ldr	r3, [pc, #204]	; (8001a1c <robotMachine+0x2b4>)
 800194e:	220a      	movs	r2, #10
 8001950:	715a      	strb	r2, [r3, #5]
		TX_BUFFER[6] = 'I';
 8001952:	4b32      	ldr	r3, [pc, #200]	; (8001a1c <robotMachine+0x2b4>)
 8001954:	2249      	movs	r2, #73	; 0x49
 8001956:	719a      	strb	r2, [r3, #6]
		TX_BUFFER[7] = Map[actual.x][actual.y].Lados[IZQUIERDA] + '0';
 8001958:	4b2e      	ldr	r3, [pc, #184]	; (8001a14 <robotMachine+0x2ac>)
 800195a:	6819      	ldr	r1, [r3, #0]
 800195c:	4b2d      	ldr	r3, [pc, #180]	; (8001a14 <robotMachine+0x2ac>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	482d      	ldr	r0, [pc, #180]	; (8001a18 <robotMachine+0x2b0>)
 8001962:	461a      	mov	r2, r3
 8001964:	0052      	lsls	r2, r2, #1
 8001966:	441a      	add	r2, r3
 8001968:	00d3      	lsls	r3, r2, #3
 800196a:	461a      	mov	r2, r3
 800196c:	460b      	mov	r3, r1
 800196e:	011b      	lsls	r3, r3, #4
 8001970:	1a5b      	subs	r3, r3, r1
 8001972:	011b      	lsls	r3, r3, #4
 8001974:	4413      	add	r3, r2
 8001976:	4403      	add	r3, r0
 8001978:	3304      	adds	r3, #4
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	b2db      	uxtb	r3, r3
 800197e:	3330      	adds	r3, #48	; 0x30
 8001980:	b2da      	uxtb	r2, r3
 8001982:	4b26      	ldr	r3, [pc, #152]	; (8001a1c <robotMachine+0x2b4>)
 8001984:	71da      	strb	r2, [r3, #7]
		TX_BUFFER[8] = '\n';
 8001986:	4b25      	ldr	r3, [pc, #148]	; (8001a1c <robotMachine+0x2b4>)
 8001988:	220a      	movs	r2, #10
 800198a:	721a      	strb	r2, [r3, #8]
		TX_BUFFER[9] = 'A';
 800198c:	4b23      	ldr	r3, [pc, #140]	; (8001a1c <robotMachine+0x2b4>)
 800198e:	2241      	movs	r2, #65	; 0x41
 8001990:	725a      	strb	r2, [r3, #9]
		TX_BUFFER[10] = Map[actual.x][actual.y].Lados[ATRAS] + '0';
 8001992:	4b20      	ldr	r3, [pc, #128]	; (8001a14 <robotMachine+0x2ac>)
 8001994:	6819      	ldr	r1, [r3, #0]
 8001996:	4b1f      	ldr	r3, [pc, #124]	; (8001a14 <robotMachine+0x2ac>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	481f      	ldr	r0, [pc, #124]	; (8001a18 <robotMachine+0x2b0>)
 800199c:	461a      	mov	r2, r3
 800199e:	0052      	lsls	r2, r2, #1
 80019a0:	441a      	add	r2, r3
 80019a2:	00d3      	lsls	r3, r2, #3
 80019a4:	461a      	mov	r2, r3
 80019a6:	460b      	mov	r3, r1
 80019a8:	011b      	lsls	r3, r3, #4
 80019aa:	1a5b      	subs	r3, r3, r1
 80019ac:	011b      	lsls	r3, r3, #4
 80019ae:	4413      	add	r3, r2
 80019b0:	4403      	add	r3, r0
 80019b2:	3308      	adds	r3, #8
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	3330      	adds	r3, #48	; 0x30
 80019ba:	b2da      	uxtb	r2, r3
 80019bc:	4b17      	ldr	r3, [pc, #92]	; (8001a1c <robotMachine+0x2b4>)
 80019be:	729a      	strb	r2, [r3, #10]
		TX_BUFFER[11] = '\n';
 80019c0:	4b16      	ldr	r3, [pc, #88]	; (8001a1c <robotMachine+0x2b4>)
 80019c2:	220a      	movs	r2, #10
 80019c4:	72da      	strb	r2, [r3, #11]
		HAL_UART_Transmit(&huart1, TX_BUFFER, 12, 100);
 80019c6:	2364      	movs	r3, #100	; 0x64
 80019c8:	220c      	movs	r2, #12
 80019ca:	4914      	ldr	r1, [pc, #80]	; (8001a1c <robotMachine+0x2b4>)
 80019cc:	4815      	ldr	r0, [pc, #84]	; (8001a24 <robotMachine+0x2bc>)
 80019ce:	f004 f998 	bl	8005d02 <HAL_UART_Transmit>
		valueCNY = NEGRO;
 80019d2:	4b16      	ldr	r3, [pc, #88]	; (8001a2c <robotMachine+0x2c4>)
 80019d4:	2201      	movs	r2, #1
 80019d6:	601a      	str	r2, [r3, #0]
		if (valueCNY == BLANCO) {
 80019d8:	4b14      	ldr	r3, [pc, #80]	; (8001a2c <robotMachine+0x2c4>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d129      	bne.n	8001a34 <robotMachine+0x2cc>
			Map[actual.x][actual.y].final = 1;
 80019e0:	4b0c      	ldr	r3, [pc, #48]	; (8001a14 <robotMachine+0x2ac>)
 80019e2:	6819      	ldr	r1, [r3, #0]
 80019e4:	4b0b      	ldr	r3, [pc, #44]	; (8001a14 <robotMachine+0x2ac>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	480b      	ldr	r0, [pc, #44]	; (8001a18 <robotMachine+0x2b0>)
 80019ea:	461a      	mov	r2, r3
 80019ec:	0052      	lsls	r2, r2, #1
 80019ee:	441a      	add	r2, r3
 80019f0:	00d3      	lsls	r3, r2, #3
 80019f2:	461a      	mov	r2, r3
 80019f4:	460b      	mov	r3, r1
 80019f6:	011b      	lsls	r3, r3, #4
 80019f8:	1a5b      	subs	r3, r3, r1
 80019fa:	011b      	lsls	r3, r3, #4
 80019fc:	4413      	add	r3, r2
 80019fe:	4403      	add	r3, r0
 8001a00:	3314      	adds	r3, #20
 8001a02:	2201      	movs	r2, #1
 8001a04:	601a      	str	r2, [r3, #0]
			finishFlag = 1;
 8001a06:	4b0a      	ldr	r3, [pc, #40]	; (8001a30 <robotMachine+0x2c8>)
 8001a08:	2201      	movs	r2, #1
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	e028      	b.n	8001a60 <robotMachine+0x2f8>
 8001a0e:	bf00      	nop
 8001a10:	20001210 	.word	0x20001210
 8001a14:	20001214 	.word	0x20001214
 8001a18:	20001224 	.word	0x20001224
 8001a1c:	200011dc 	.word	0x200011dc
 8001a20:	200011bc 	.word	0x200011bc
 8001a24:	20001c84 	.word	0x20001c84
 8001a28:	200011cc 	.word	0x200011cc
 8001a2c:	20001200 	.word	0x20001200
 8001a30:	200011f8 	.word	0x200011f8
			Map[actual.x][actual.y].final = 0;
 8001a34:	4b8a      	ldr	r3, [pc, #552]	; (8001c60 <robotMachine+0x4f8>)
 8001a36:	6819      	ldr	r1, [r3, #0]
 8001a38:	4b89      	ldr	r3, [pc, #548]	; (8001c60 <robotMachine+0x4f8>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	4889      	ldr	r0, [pc, #548]	; (8001c64 <robotMachine+0x4fc>)
 8001a3e:	461a      	mov	r2, r3
 8001a40:	0052      	lsls	r2, r2, #1
 8001a42:	441a      	add	r2, r3
 8001a44:	00d3      	lsls	r3, r2, #3
 8001a46:	461a      	mov	r2, r3
 8001a48:	460b      	mov	r3, r1
 8001a4a:	011b      	lsls	r3, r3, #4
 8001a4c:	1a5b      	subs	r3, r3, r1
 8001a4e:	011b      	lsls	r3, r3, #4
 8001a50:	4413      	add	r3, r2
 8001a52:	4403      	add	r3, r0
 8001a54:	3314      	adds	r3, #20
 8001a56:	2200      	movs	r2, #0
 8001a58:	601a      	str	r2, [r3, #0]
			robotState = CHOOSING;
 8001a5a:	4b83      	ldr	r3, [pc, #524]	; (8001c68 <robotMachine+0x500>)
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	601a      	str	r2, [r3, #0]
		HAL_Delay(1000);
 8001a60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a64:	f001 fd9e 	bl	80035a4 <HAL_Delay>
		break;
 8001a68:	e0f8      	b.n	8001c5c <robotMachine+0x4f4>
		movimiento = ChooseNextNode(actual.x, actual.y);
 8001a6a:	4b7d      	ldr	r3, [pc, #500]	; (8001c60 <robotMachine+0x4f8>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a7c      	ldr	r2, [pc, #496]	; (8001c60 <robotMachine+0x4f8>)
 8001a70:	6852      	ldr	r2, [r2, #4]
 8001a72:	4611      	mov	r1, r2
 8001a74:	4618      	mov	r0, r3
 8001a76:	f000 f905 	bl	8001c84 <ChooseNextNode>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	4a7b      	ldr	r2, [pc, #492]	; (8001c6c <robotMachine+0x504>)
 8001a7e:	6013      	str	r3, [r2, #0]
		TX_BUFFER[0] = 'M';
 8001a80:	4b7b      	ldr	r3, [pc, #492]	; (8001c70 <robotMachine+0x508>)
 8001a82:	224d      	movs	r2, #77	; 0x4d
 8001a84:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = movimiento + '0';
 8001a86:	4b79      	ldr	r3, [pc, #484]	; (8001c6c <robotMachine+0x504>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	3330      	adds	r3, #48	; 0x30
 8001a8e:	b2da      	uxtb	r2, r3
 8001a90:	4b77      	ldr	r3, [pc, #476]	; (8001c70 <robotMachine+0x508>)
 8001a92:	705a      	strb	r2, [r3, #1]
		TX_BUFFER[2] = '\n';
 8001a94:	4b76      	ldr	r3, [pc, #472]	; (8001c70 <robotMachine+0x508>)
 8001a96:	220a      	movs	r2, #10
 8001a98:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart1, TX_BUFFER, 3, 100);
 8001a9a:	2364      	movs	r3, #100	; 0x64
 8001a9c:	2203      	movs	r2, #3
 8001a9e:	4974      	ldr	r1, [pc, #464]	; (8001c70 <robotMachine+0x508>)
 8001aa0:	4874      	ldr	r0, [pc, #464]	; (8001c74 <robotMachine+0x50c>)
 8001aa2:	f004 f92e 	bl	8005d02 <HAL_UART_Transmit>
		if (movimiento == IZQUIERDA) {
 8001aa6:	4b71      	ldr	r3, [pc, #452]	; (8001c6c <robotMachine+0x504>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d136      	bne.n	8001b1c <robotMachine+0x3b4>
			rotateAxis(IZQUIERDA);
 8001aae:	2001      	movs	r0, #1
 8001ab0:	f000 fe54 	bl	800275c <rotateAxis>
			if (Map[actual.x][actual.y].Lados[direcciones[ATRAS]] != 1)
 8001ab4:	4b6a      	ldr	r3, [pc, #424]	; (8001c60 <robotMachine+0x4f8>)
 8001ab6:	6819      	ldr	r1, [r3, #0]
 8001ab8:	4b69      	ldr	r3, [pc, #420]	; (8001c60 <robotMachine+0x4f8>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	4a6e      	ldr	r2, [pc, #440]	; (8001c78 <robotMachine+0x510>)
 8001abe:	6890      	ldr	r0, [r2, #8]
 8001ac0:	4c68      	ldr	r4, [pc, #416]	; (8001c64 <robotMachine+0x4fc>)
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	0052      	lsls	r2, r2, #1
 8001ac6:	441a      	add	r2, r3
 8001ac8:	0053      	lsls	r3, r2, #1
 8001aca:	461a      	mov	r2, r3
 8001acc:	460b      	mov	r3, r1
 8001ace:	011b      	lsls	r3, r3, #4
 8001ad0:	1a5b      	subs	r3, r3, r1
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	4413      	add	r3, r2
 8001ad6:	4403      	add	r3, r0
 8001ad8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d014      	beq.n	8001b0a <robotMachine+0x3a2>
				Map[actual.x][actual.y].Lados[direcciones[ATRAS]] = 2;
 8001ae0:	4b5f      	ldr	r3, [pc, #380]	; (8001c60 <robotMachine+0x4f8>)
 8001ae2:	6819      	ldr	r1, [r3, #0]
 8001ae4:	4b5e      	ldr	r3, [pc, #376]	; (8001c60 <robotMachine+0x4f8>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	4a63      	ldr	r2, [pc, #396]	; (8001c78 <robotMachine+0x510>)
 8001aea:	6890      	ldr	r0, [r2, #8]
 8001aec:	4c5d      	ldr	r4, [pc, #372]	; (8001c64 <robotMachine+0x4fc>)
 8001aee:	461a      	mov	r2, r3
 8001af0:	0052      	lsls	r2, r2, #1
 8001af2:	441a      	add	r2, r3
 8001af4:	0053      	lsls	r3, r2, #1
 8001af6:	461a      	mov	r2, r3
 8001af8:	460b      	mov	r3, r1
 8001afa:	011b      	lsls	r3, r3, #4
 8001afc:	1a5b      	subs	r3, r3, r1
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	4413      	add	r3, r2
 8001b02:	4403      	add	r3, r0
 8001b04:	2202      	movs	r2, #2
 8001b06:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
			moveNode(IZQUIERDA);
 8001b0a:	2001      	movs	r0, #1
 8001b0c:	f000 fc6a 	bl	80023e4 <moveNode>
			counter--;
 8001b10:	4b5a      	ldr	r3, [pc, #360]	; (8001c7c <robotMachine+0x514>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	3b01      	subs	r3, #1
 8001b16:	4a59      	ldr	r2, [pc, #356]	; (8001c7c <robotMachine+0x514>)
 8001b18:	6013      	str	r3, [r2, #0]
 8001b1a:	e07c      	b.n	8001c16 <robotMachine+0x4ae>
		} else if (movimiento == DERECHA) {
 8001b1c:	4b53      	ldr	r3, [pc, #332]	; (8001c6c <robotMachine+0x504>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2b03      	cmp	r3, #3
 8001b22:	d136      	bne.n	8001b92 <robotMachine+0x42a>
			rotateAxis(DERECHA);
 8001b24:	2003      	movs	r0, #3
 8001b26:	f000 fe19 	bl	800275c <rotateAxis>
			if (Map[actual.x][actual.y].Lados[direcciones[ATRAS]] != 1)
 8001b2a:	4b4d      	ldr	r3, [pc, #308]	; (8001c60 <robotMachine+0x4f8>)
 8001b2c:	6819      	ldr	r1, [r3, #0]
 8001b2e:	4b4c      	ldr	r3, [pc, #304]	; (8001c60 <robotMachine+0x4f8>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	4a51      	ldr	r2, [pc, #324]	; (8001c78 <robotMachine+0x510>)
 8001b34:	6890      	ldr	r0, [r2, #8]
 8001b36:	4c4b      	ldr	r4, [pc, #300]	; (8001c64 <robotMachine+0x4fc>)
 8001b38:	461a      	mov	r2, r3
 8001b3a:	0052      	lsls	r2, r2, #1
 8001b3c:	441a      	add	r2, r3
 8001b3e:	0053      	lsls	r3, r2, #1
 8001b40:	461a      	mov	r2, r3
 8001b42:	460b      	mov	r3, r1
 8001b44:	011b      	lsls	r3, r3, #4
 8001b46:	1a5b      	subs	r3, r3, r1
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	4413      	add	r3, r2
 8001b4c:	4403      	add	r3, r0
 8001b4e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d014      	beq.n	8001b80 <robotMachine+0x418>
				Map[actual.x][actual.y].Lados[direcciones[ATRAS]] = 2;
 8001b56:	4b42      	ldr	r3, [pc, #264]	; (8001c60 <robotMachine+0x4f8>)
 8001b58:	6819      	ldr	r1, [r3, #0]
 8001b5a:	4b41      	ldr	r3, [pc, #260]	; (8001c60 <robotMachine+0x4f8>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	4a46      	ldr	r2, [pc, #280]	; (8001c78 <robotMachine+0x510>)
 8001b60:	6890      	ldr	r0, [r2, #8]
 8001b62:	4c40      	ldr	r4, [pc, #256]	; (8001c64 <robotMachine+0x4fc>)
 8001b64:	461a      	mov	r2, r3
 8001b66:	0052      	lsls	r2, r2, #1
 8001b68:	441a      	add	r2, r3
 8001b6a:	0053      	lsls	r3, r2, #1
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	460b      	mov	r3, r1
 8001b70:	011b      	lsls	r3, r3, #4
 8001b72:	1a5b      	subs	r3, r3, r1
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	4413      	add	r3, r2
 8001b78:	4403      	add	r3, r0
 8001b7a:	2202      	movs	r2, #2
 8001b7c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
			moveNode(DERECHA);
 8001b80:	2003      	movs	r0, #3
 8001b82:	f000 fc2f 	bl	80023e4 <moveNode>
			counter++;
 8001b86:	4b3d      	ldr	r3, [pc, #244]	; (8001c7c <robotMachine+0x514>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	4a3b      	ldr	r2, [pc, #236]	; (8001c7c <robotMachine+0x514>)
 8001b8e:	6013      	str	r3, [r2, #0]
 8001b90:	e041      	b.n	8001c16 <robotMachine+0x4ae>
		} else if (movimiento == ATRAS) {
 8001b92:	4b36      	ldr	r3, [pc, #216]	; (8001c6c <robotMachine+0x504>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d13d      	bne.n	8001c16 <robotMachine+0x4ae>
			counter++;
 8001b9a:	4b38      	ldr	r3, [pc, #224]	; (8001c7c <robotMachine+0x514>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	4a36      	ldr	r2, [pc, #216]	; (8001c7c <robotMachine+0x514>)
 8001ba2:	6013      	str	r3, [r2, #0]
			counter++;
 8001ba4:	4b35      	ldr	r3, [pc, #212]	; (8001c7c <robotMachine+0x514>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	4a34      	ldr	r2, [pc, #208]	; (8001c7c <robotMachine+0x514>)
 8001bac:	6013      	str	r3, [r2, #0]
			rotateAxis(DERECHA);
 8001bae:	2003      	movs	r0, #3
 8001bb0:	f000 fdd4 	bl	800275c <rotateAxis>
			rotateAxis(DERECHA);
 8001bb4:	2003      	movs	r0, #3
 8001bb6:	f000 fdd1 	bl	800275c <rotateAxis>
			if (Map[actual.x][actual.y].Lados[direcciones[ATRAS]] != 1)
 8001bba:	4b29      	ldr	r3, [pc, #164]	; (8001c60 <robotMachine+0x4f8>)
 8001bbc:	6819      	ldr	r1, [r3, #0]
 8001bbe:	4b28      	ldr	r3, [pc, #160]	; (8001c60 <robotMachine+0x4f8>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	4a2d      	ldr	r2, [pc, #180]	; (8001c78 <robotMachine+0x510>)
 8001bc4:	6890      	ldr	r0, [r2, #8]
 8001bc6:	4c27      	ldr	r4, [pc, #156]	; (8001c64 <robotMachine+0x4fc>)
 8001bc8:	461a      	mov	r2, r3
 8001bca:	0052      	lsls	r2, r2, #1
 8001bcc:	441a      	add	r2, r3
 8001bce:	0053      	lsls	r3, r2, #1
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	011b      	lsls	r3, r3, #4
 8001bd6:	1a5b      	subs	r3, r3, r1
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	4413      	add	r3, r2
 8001bdc:	4403      	add	r3, r0
 8001bde:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d014      	beq.n	8001c10 <robotMachine+0x4a8>
				Map[actual.x][actual.y].Lados[direcciones[ATRAS]] = 2;
 8001be6:	4b1e      	ldr	r3, [pc, #120]	; (8001c60 <robotMachine+0x4f8>)
 8001be8:	6819      	ldr	r1, [r3, #0]
 8001bea:	4b1d      	ldr	r3, [pc, #116]	; (8001c60 <robotMachine+0x4f8>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	4a22      	ldr	r2, [pc, #136]	; (8001c78 <robotMachine+0x510>)
 8001bf0:	6890      	ldr	r0, [r2, #8]
 8001bf2:	4c1c      	ldr	r4, [pc, #112]	; (8001c64 <robotMachine+0x4fc>)
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	0052      	lsls	r2, r2, #1
 8001bf8:	441a      	add	r2, r3
 8001bfa:	0053      	lsls	r3, r2, #1
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	460b      	mov	r3, r1
 8001c00:	011b      	lsls	r3, r3, #4
 8001c02:	1a5b      	subs	r3, r3, r1
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	4413      	add	r3, r2
 8001c08:	4403      	add	r3, r0
 8001c0a:	2202      	movs	r2, #2
 8001c0c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
			moveNode(ATRAS);
 8001c10:	2002      	movs	r0, #2
 8001c12:	f000 fbe7 	bl	80023e4 <moveNode>
		TX_BUFFER[0] = '*';
 8001c16:	4b16      	ldr	r3, [pc, #88]	; (8001c70 <robotMachine+0x508>)
 8001c18:	222a      	movs	r2, #42	; 0x2a
 8001c1a:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = '*';
 8001c1c:	4b14      	ldr	r3, [pc, #80]	; (8001c70 <robotMachine+0x508>)
 8001c1e:	222a      	movs	r2, #42	; 0x2a
 8001c20:	705a      	strb	r2, [r3, #1]
		TX_BUFFER[2] = '\n';
 8001c22:	4b13      	ldr	r3, [pc, #76]	; (8001c70 <robotMachine+0x508>)
 8001c24:	220a      	movs	r2, #10
 8001c26:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart1, TX_BUFFER, 3, 100);
 8001c28:	2364      	movs	r3, #100	; 0x64
 8001c2a:	2203      	movs	r2, #3
 8001c2c:	4910      	ldr	r1, [pc, #64]	; (8001c70 <robotMachine+0x508>)
 8001c2e:	4811      	ldr	r0, [pc, #68]	; (8001c74 <robotMachine+0x50c>)
 8001c30:	f004 f867 	bl	8005d02 <HAL_UART_Transmit>
		movimientoFlag = 0;
 8001c34:	4b12      	ldr	r3, [pc, #72]	; (8001c80 <robotMachine+0x518>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	601a      	str	r2, [r3, #0]
		robotState = MOVING;
 8001c3a:	4b0b      	ldr	r3, [pc, #44]	; (8001c68 <robotMachine+0x500>)
 8001c3c:	2202      	movs	r2, #2
 8001c3e:	601a      	str	r2, [r3, #0]
		break;
 8001c40:	e00c      	b.n	8001c5c <robotMachine+0x4f4>
		movementMachine(movimiento);
 8001c42:	4b0a      	ldr	r3, [pc, #40]	; (8001c6c <robotMachine+0x504>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f000 fbfe 	bl	8002448 <movementMachine>
		if (movimientoFlag == 1) {
 8001c4c:	4b0c      	ldr	r3, [pc, #48]	; (8001c80 <robotMachine+0x518>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d102      	bne.n	8001c5a <robotMachine+0x4f2>
			robotState = READING;
 8001c54:	4b04      	ldr	r3, [pc, #16]	; (8001c68 <robotMachine+0x500>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]
		break;
 8001c5a:	bf00      	nop
}
 8001c5c:	bf00      	nop
 8001c5e:	bdb0      	pop	{r4, r5, r7, pc}
 8001c60:	20001214 	.word	0x20001214
 8001c64:	20001224 	.word	0x20001224
 8001c68:	20001210 	.word	0x20001210
 8001c6c:	200011f4 	.word	0x200011f4
 8001c70:	200011dc 	.word	0x200011dc
 8001c74:	20001c84 	.word	0x20001c84
 8001c78:	200011cc 	.word	0x200011cc
 8001c7c:	20001208 	.word	0x20001208
 8001c80:	200011fc 	.word	0x200011fc

08001c84 <ChooseNextNode>:

int ChooseNextNode(int x, int y) {
 8001c84:	b590      	push	{r4, r7, lr}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
	if (Map[x][y].Lados[direcciones[ADELANTE]] == 0) {
 8001c8e:	4b73      	ldr	r3, [pc, #460]	; (8001e5c <ChooseNextNode+0x1d8>)
 8001c90:	6818      	ldr	r0, [r3, #0]
 8001c92:	4c73      	ldr	r4, [pc, #460]	; (8001e60 <ChooseNextNode+0x1dc>)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	6879      	ldr	r1, [r7, #4]
 8001c98:	461a      	mov	r2, r3
 8001c9a:	0052      	lsls	r2, r2, #1
 8001c9c:	441a      	add	r2, r3
 8001c9e:	0053      	lsls	r3, r2, #1
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	011b      	lsls	r3, r3, #4
 8001ca6:	1a5b      	subs	r3, r3, r1
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	4413      	add	r3, r2
 8001cac:	4403      	add	r3, r0
 8001cae:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f040 80da 	bne.w	8001e6c <ChooseNextNode+0x1e8>
		TX_BUFFER[0] = 'A';
 8001cb8:	4b6a      	ldr	r3, [pc, #424]	; (8001e64 <ChooseNextNode+0x1e0>)
 8001cba:	2241      	movs	r2, #65	; 0x41
 8001cbc:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = '\n';
 8001cbe:	4b69      	ldr	r3, [pc, #420]	; (8001e64 <ChooseNextNode+0x1e0>)
 8001cc0:	220a      	movs	r2, #10
 8001cc2:	705a      	strb	r2, [r3, #1]
		HAL_UART_Transmit(&huart1, TX_BUFFER, 2, 100);
 8001cc4:	2364      	movs	r3, #100	; 0x64
 8001cc6:	2202      	movs	r2, #2
 8001cc8:	4966      	ldr	r1, [pc, #408]	; (8001e64 <ChooseNextNode+0x1e0>)
 8001cca:	4867      	ldr	r0, [pc, #412]	; (8001e68 <ChooseNextNode+0x1e4>)
 8001ccc:	f004 f819 	bl	8005d02 <HAL_UART_Transmit>
		Map[x][y].Lados[direcciones[ADELANTE]] = 2;
 8001cd0:	4b62      	ldr	r3, [pc, #392]	; (8001e5c <ChooseNextNode+0x1d8>)
 8001cd2:	6818      	ldr	r0, [r3, #0]
 8001cd4:	4c62      	ldr	r4, [pc, #392]	; (8001e60 <ChooseNextNode+0x1dc>)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	6879      	ldr	r1, [r7, #4]
 8001cda:	461a      	mov	r2, r3
 8001cdc:	0052      	lsls	r2, r2, #1
 8001cde:	441a      	add	r2, r3
 8001ce0:	0053      	lsls	r3, r2, #1
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	011b      	lsls	r3, r3, #4
 8001ce8:	1a5b      	subs	r3, r3, r1
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	4413      	add	r3, r2
 8001cee:	4403      	add	r3, r0
 8001cf0:	2202      	movs	r2, #2
 8001cf2:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
		if (Map[x][y].visitado > 1) {
 8001cf6:	485a      	ldr	r0, [pc, #360]	; (8001e60 <ChooseNextNode+0x1dc>)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	6879      	ldr	r1, [r7, #4]
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	0052      	lsls	r2, r2, #1
 8001d00:	441a      	add	r2, r3
 8001d02:	00d3      	lsls	r3, r2, #3
 8001d04:	461a      	mov	r2, r3
 8001d06:	460b      	mov	r3, r1
 8001d08:	011b      	lsls	r3, r3, #4
 8001d0a:	1a5b      	subs	r3, r3, r1
 8001d0c:	011b      	lsls	r3, r3, #4
 8001d0e:	4413      	add	r3, r2
 8001d10:	4403      	add	r3, r0
 8001d12:	3310      	adds	r3, #16
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	dd03      	ble.n	8001d22 <ChooseNextNode+0x9e>
			EliminateNode(x, y);
 8001d1a:	6839      	ldr	r1, [r7, #0]
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f000 fa41 	bl	80021a4 <EliminateNode>
		}
		moveNode(ADELANTE);
 8001d22:	2000      	movs	r0, #0
 8001d24:	f000 fb5e 	bl	80023e4 <moveNode>
		if (Map[x][y].Lados[direcciones[ATRAS]] != 1)
 8001d28:	4b4c      	ldr	r3, [pc, #304]	; (8001e5c <ChooseNextNode+0x1d8>)
 8001d2a:	6898      	ldr	r0, [r3, #8]
 8001d2c:	4c4c      	ldr	r4, [pc, #304]	; (8001e60 <ChooseNextNode+0x1dc>)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	6879      	ldr	r1, [r7, #4]
 8001d32:	461a      	mov	r2, r3
 8001d34:	0052      	lsls	r2, r2, #1
 8001d36:	441a      	add	r2, r3
 8001d38:	0053      	lsls	r3, r2, #1
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	011b      	lsls	r3, r3, #4
 8001d40:	1a5b      	subs	r3, r3, r1
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	4413      	add	r3, r2
 8001d46:	4403      	add	r3, r0
 8001d48:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d012      	beq.n	8001d76 <ChooseNextNode+0xf2>
			Map[x][y].Lados[direcciones[ATRAS]] = 2;
 8001d50:	4b42      	ldr	r3, [pc, #264]	; (8001e5c <ChooseNextNode+0x1d8>)
 8001d52:	6898      	ldr	r0, [r3, #8]
 8001d54:	4c42      	ldr	r4, [pc, #264]	; (8001e60 <ChooseNextNode+0x1dc>)
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	6879      	ldr	r1, [r7, #4]
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	0052      	lsls	r2, r2, #1
 8001d5e:	441a      	add	r2, r3
 8001d60:	0053      	lsls	r3, r2, #1
 8001d62:	461a      	mov	r2, r3
 8001d64:	460b      	mov	r3, r1
 8001d66:	011b      	lsls	r3, r3, #4
 8001d68:	1a5b      	subs	r3, r3, r1
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	4413      	add	r3, r2
 8001d6e:	4403      	add	r3, r0
 8001d70:	2202      	movs	r2, #2
 8001d72:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
		TX_BUFFER[0] = 'D';
 8001d76:	4b3b      	ldr	r3, [pc, #236]	; (8001e64 <ChooseNextNode+0x1e0>)
 8001d78:	2244      	movs	r2, #68	; 0x44
 8001d7a:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = Map[x][y].Lados[DERECHA] + '0';
 8001d7c:	4838      	ldr	r0, [pc, #224]	; (8001e60 <ChooseNextNode+0x1dc>)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	6879      	ldr	r1, [r7, #4]
 8001d82:	461a      	mov	r2, r3
 8001d84:	0052      	lsls	r2, r2, #1
 8001d86:	441a      	add	r2, r3
 8001d88:	00d3      	lsls	r3, r2, #3
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	011b      	lsls	r3, r3, #4
 8001d90:	1a5b      	subs	r3, r3, r1
 8001d92:	011b      	lsls	r3, r3, #4
 8001d94:	4413      	add	r3, r2
 8001d96:	4403      	add	r3, r0
 8001d98:	330c      	adds	r3, #12
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	3330      	adds	r3, #48	; 0x30
 8001da0:	b2da      	uxtb	r2, r3
 8001da2:	4b30      	ldr	r3, [pc, #192]	; (8001e64 <ChooseNextNode+0x1e0>)
 8001da4:	705a      	strb	r2, [r3, #1]
		TX_BUFFER[2] = '\n';
 8001da6:	4b2f      	ldr	r3, [pc, #188]	; (8001e64 <ChooseNextNode+0x1e0>)
 8001da8:	220a      	movs	r2, #10
 8001daa:	709a      	strb	r2, [r3, #2]
		TX_BUFFER[3] = 'C';
 8001dac:	4b2d      	ldr	r3, [pc, #180]	; (8001e64 <ChooseNextNode+0x1e0>)
 8001dae:	2243      	movs	r2, #67	; 0x43
 8001db0:	70da      	strb	r2, [r3, #3]
		TX_BUFFER[4] = Map[x][y].Lados[ADELANTE] + '0';
 8001db2:	482b      	ldr	r0, [pc, #172]	; (8001e60 <ChooseNextNode+0x1dc>)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	6879      	ldr	r1, [r7, #4]
 8001db8:	461a      	mov	r2, r3
 8001dba:	0052      	lsls	r2, r2, #1
 8001dbc:	441a      	add	r2, r3
 8001dbe:	00d3      	lsls	r3, r2, #3
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	011b      	lsls	r3, r3, #4
 8001dc6:	1a5b      	subs	r3, r3, r1
 8001dc8:	011b      	lsls	r3, r3, #4
 8001dca:	4413      	add	r3, r2
 8001dcc:	4403      	add	r3, r0
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	3330      	adds	r3, #48	; 0x30
 8001dd4:	b2da      	uxtb	r2, r3
 8001dd6:	4b23      	ldr	r3, [pc, #140]	; (8001e64 <ChooseNextNode+0x1e0>)
 8001dd8:	711a      	strb	r2, [r3, #4]
		TX_BUFFER[5] = '\n';
 8001dda:	4b22      	ldr	r3, [pc, #136]	; (8001e64 <ChooseNextNode+0x1e0>)
 8001ddc:	220a      	movs	r2, #10
 8001dde:	715a      	strb	r2, [r3, #5]
		TX_BUFFER[6] = 'I';
 8001de0:	4b20      	ldr	r3, [pc, #128]	; (8001e64 <ChooseNextNode+0x1e0>)
 8001de2:	2249      	movs	r2, #73	; 0x49
 8001de4:	719a      	strb	r2, [r3, #6]
		TX_BUFFER[7] = Map[x][y].Lados[IZQUIERDA] + '0';
 8001de6:	481e      	ldr	r0, [pc, #120]	; (8001e60 <ChooseNextNode+0x1dc>)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	6879      	ldr	r1, [r7, #4]
 8001dec:	461a      	mov	r2, r3
 8001dee:	0052      	lsls	r2, r2, #1
 8001df0:	441a      	add	r2, r3
 8001df2:	00d3      	lsls	r3, r2, #3
 8001df4:	461a      	mov	r2, r3
 8001df6:	460b      	mov	r3, r1
 8001df8:	011b      	lsls	r3, r3, #4
 8001dfa:	1a5b      	subs	r3, r3, r1
 8001dfc:	011b      	lsls	r3, r3, #4
 8001dfe:	4413      	add	r3, r2
 8001e00:	4403      	add	r3, r0
 8001e02:	3304      	adds	r3, #4
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	3330      	adds	r3, #48	; 0x30
 8001e0a:	b2da      	uxtb	r2, r3
 8001e0c:	4b15      	ldr	r3, [pc, #84]	; (8001e64 <ChooseNextNode+0x1e0>)
 8001e0e:	71da      	strb	r2, [r3, #7]
		TX_BUFFER[8] = '\n';
 8001e10:	4b14      	ldr	r3, [pc, #80]	; (8001e64 <ChooseNextNode+0x1e0>)
 8001e12:	220a      	movs	r2, #10
 8001e14:	721a      	strb	r2, [r3, #8]
		TX_BUFFER[9] = 'A';
 8001e16:	4b13      	ldr	r3, [pc, #76]	; (8001e64 <ChooseNextNode+0x1e0>)
 8001e18:	2241      	movs	r2, #65	; 0x41
 8001e1a:	725a      	strb	r2, [r3, #9]
		TX_BUFFER[10] = Map[x][y].Lados[ATRAS] + '0';
 8001e1c:	4810      	ldr	r0, [pc, #64]	; (8001e60 <ChooseNextNode+0x1dc>)
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	6879      	ldr	r1, [r7, #4]
 8001e22:	461a      	mov	r2, r3
 8001e24:	0052      	lsls	r2, r2, #1
 8001e26:	441a      	add	r2, r3
 8001e28:	00d3      	lsls	r3, r2, #3
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	011b      	lsls	r3, r3, #4
 8001e30:	1a5b      	subs	r3, r3, r1
 8001e32:	011b      	lsls	r3, r3, #4
 8001e34:	4413      	add	r3, r2
 8001e36:	4403      	add	r3, r0
 8001e38:	3308      	adds	r3, #8
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	3330      	adds	r3, #48	; 0x30
 8001e40:	b2da      	uxtb	r2, r3
 8001e42:	4b08      	ldr	r3, [pc, #32]	; (8001e64 <ChooseNextNode+0x1e0>)
 8001e44:	729a      	strb	r2, [r3, #10]
		TX_BUFFER[11] = '\n';
 8001e46:	4b07      	ldr	r3, [pc, #28]	; (8001e64 <ChooseNextNode+0x1e0>)
 8001e48:	220a      	movs	r2, #10
 8001e4a:	72da      	strb	r2, [r3, #11]
		HAL_UART_Transmit(&huart1, TX_BUFFER, 12, 100);
 8001e4c:	2364      	movs	r3, #100	; 0x64
 8001e4e:	220c      	movs	r2, #12
 8001e50:	4904      	ldr	r1, [pc, #16]	; (8001e64 <ChooseNextNode+0x1e0>)
 8001e52:	4805      	ldr	r0, [pc, #20]	; (8001e68 <ChooseNextNode+0x1e4>)
 8001e54:	f003 ff55 	bl	8005d02 <HAL_UART_Transmit>

		return ADELANTE;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	e19a      	b.n	8002192 <ChooseNextNode+0x50e>
 8001e5c:	200011cc 	.word	0x200011cc
 8001e60:	20001224 	.word	0x20001224
 8001e64:	200011dc 	.word	0x200011dc
 8001e68:	20001c84 	.word	0x20001c84
	} else if (Map[x][y].Lados[direcciones[IZQUIERDA]] == 0) {
 8001e6c:	4bbc      	ldr	r3, [pc, #752]	; (8002160 <ChooseNextNode+0x4dc>)
 8001e6e:	6858      	ldr	r0, [r3, #4]
 8001e70:	4cbc      	ldr	r4, [pc, #752]	; (8002164 <ChooseNextNode+0x4e0>)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	6879      	ldr	r1, [r7, #4]
 8001e76:	461a      	mov	r2, r3
 8001e78:	0052      	lsls	r2, r2, #1
 8001e7a:	441a      	add	r2, r3
 8001e7c:	0053      	lsls	r3, r2, #1
 8001e7e:	461a      	mov	r2, r3
 8001e80:	460b      	mov	r3, r1
 8001e82:	011b      	lsls	r3, r3, #4
 8001e84:	1a5b      	subs	r3, r3, r1
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	4413      	add	r3, r2
 8001e8a:	4403      	add	r3, r0
 8001e8c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	f040 80a8 	bne.w	8001fe6 <ChooseNextNode+0x362>
		TX_BUFFER[0] = 'I';
 8001e96:	4bb4      	ldr	r3, [pc, #720]	; (8002168 <ChooseNextNode+0x4e4>)
 8001e98:	2249      	movs	r2, #73	; 0x49
 8001e9a:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = '\n';
 8001e9c:	4bb2      	ldr	r3, [pc, #712]	; (8002168 <ChooseNextNode+0x4e4>)
 8001e9e:	220a      	movs	r2, #10
 8001ea0:	705a      	strb	r2, [r3, #1]
		HAL_UART_Transmit(&huart1, TX_BUFFER, 2, 100);
 8001ea2:	2364      	movs	r3, #100	; 0x64
 8001ea4:	2202      	movs	r2, #2
 8001ea6:	49b0      	ldr	r1, [pc, #704]	; (8002168 <ChooseNextNode+0x4e4>)
 8001ea8:	48b0      	ldr	r0, [pc, #704]	; (800216c <ChooseNextNode+0x4e8>)
 8001eaa:	f003 ff2a 	bl	8005d02 <HAL_UART_Transmit>
		Map[x][y].Lados[direcciones[IZQUIERDA]] = 2;
 8001eae:	4bac      	ldr	r3, [pc, #688]	; (8002160 <ChooseNextNode+0x4dc>)
 8001eb0:	6858      	ldr	r0, [r3, #4]
 8001eb2:	4cac      	ldr	r4, [pc, #688]	; (8002164 <ChooseNextNode+0x4e0>)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	6879      	ldr	r1, [r7, #4]
 8001eb8:	461a      	mov	r2, r3
 8001eba:	0052      	lsls	r2, r2, #1
 8001ebc:	441a      	add	r2, r3
 8001ebe:	0053      	lsls	r3, r2, #1
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	011b      	lsls	r3, r3, #4
 8001ec6:	1a5b      	subs	r3, r3, r1
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	4413      	add	r3, r2
 8001ecc:	4403      	add	r3, r0
 8001ece:	2202      	movs	r2, #2
 8001ed0:	f844 2023 	str.w	r2, [r4, r3, lsl #2]

		if (Map[x][y].visitado > 1) {
 8001ed4:	48a3      	ldr	r0, [pc, #652]	; (8002164 <ChooseNextNode+0x4e0>)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	6879      	ldr	r1, [r7, #4]
 8001eda:	461a      	mov	r2, r3
 8001edc:	0052      	lsls	r2, r2, #1
 8001ede:	441a      	add	r2, r3
 8001ee0:	00d3      	lsls	r3, r2, #3
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	011b      	lsls	r3, r3, #4
 8001ee8:	1a5b      	subs	r3, r3, r1
 8001eea:	011b      	lsls	r3, r3, #4
 8001eec:	4413      	add	r3, r2
 8001eee:	4403      	add	r3, r0
 8001ef0:	3310      	adds	r3, #16
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	dd03      	ble.n	8001f00 <ChooseNextNode+0x27c>
			EliminateNode(x, y);
 8001ef8:	6839      	ldr	r1, [r7, #0]
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 f952 	bl	80021a4 <EliminateNode>
		}
		TX_BUFFER[0] = 'D';
 8001f00:	4b99      	ldr	r3, [pc, #612]	; (8002168 <ChooseNextNode+0x4e4>)
 8001f02:	2244      	movs	r2, #68	; 0x44
 8001f04:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = Map[x][y].Lados[DERECHA] + '0';
 8001f06:	4897      	ldr	r0, [pc, #604]	; (8002164 <ChooseNextNode+0x4e0>)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	6879      	ldr	r1, [r7, #4]
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	0052      	lsls	r2, r2, #1
 8001f10:	441a      	add	r2, r3
 8001f12:	00d3      	lsls	r3, r2, #3
 8001f14:	461a      	mov	r2, r3
 8001f16:	460b      	mov	r3, r1
 8001f18:	011b      	lsls	r3, r3, #4
 8001f1a:	1a5b      	subs	r3, r3, r1
 8001f1c:	011b      	lsls	r3, r3, #4
 8001f1e:	4413      	add	r3, r2
 8001f20:	4403      	add	r3, r0
 8001f22:	330c      	adds	r3, #12
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	3330      	adds	r3, #48	; 0x30
 8001f2a:	b2da      	uxtb	r2, r3
 8001f2c:	4b8e      	ldr	r3, [pc, #568]	; (8002168 <ChooseNextNode+0x4e4>)
 8001f2e:	705a      	strb	r2, [r3, #1]
		TX_BUFFER[2] = '\n';
 8001f30:	4b8d      	ldr	r3, [pc, #564]	; (8002168 <ChooseNextNode+0x4e4>)
 8001f32:	220a      	movs	r2, #10
 8001f34:	709a      	strb	r2, [r3, #2]
		TX_BUFFER[3] = 'C';
 8001f36:	4b8c      	ldr	r3, [pc, #560]	; (8002168 <ChooseNextNode+0x4e4>)
 8001f38:	2243      	movs	r2, #67	; 0x43
 8001f3a:	70da      	strb	r2, [r3, #3]
		TX_BUFFER[4] = Map[x][y].Lados[ADELANTE] + '0';
 8001f3c:	4889      	ldr	r0, [pc, #548]	; (8002164 <ChooseNextNode+0x4e0>)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	6879      	ldr	r1, [r7, #4]
 8001f42:	461a      	mov	r2, r3
 8001f44:	0052      	lsls	r2, r2, #1
 8001f46:	441a      	add	r2, r3
 8001f48:	00d3      	lsls	r3, r2, #3
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	011b      	lsls	r3, r3, #4
 8001f50:	1a5b      	subs	r3, r3, r1
 8001f52:	011b      	lsls	r3, r3, #4
 8001f54:	4413      	add	r3, r2
 8001f56:	4403      	add	r3, r0
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	3330      	adds	r3, #48	; 0x30
 8001f5e:	b2da      	uxtb	r2, r3
 8001f60:	4b81      	ldr	r3, [pc, #516]	; (8002168 <ChooseNextNode+0x4e4>)
 8001f62:	711a      	strb	r2, [r3, #4]
		TX_BUFFER[5] = '\n';
 8001f64:	4b80      	ldr	r3, [pc, #512]	; (8002168 <ChooseNextNode+0x4e4>)
 8001f66:	220a      	movs	r2, #10
 8001f68:	715a      	strb	r2, [r3, #5]
		TX_BUFFER[6] = 'I';
 8001f6a:	4b7f      	ldr	r3, [pc, #508]	; (8002168 <ChooseNextNode+0x4e4>)
 8001f6c:	2249      	movs	r2, #73	; 0x49
 8001f6e:	719a      	strb	r2, [r3, #6]
		TX_BUFFER[7] = Map[x][y].Lados[IZQUIERDA] + '0';
 8001f70:	487c      	ldr	r0, [pc, #496]	; (8002164 <ChooseNextNode+0x4e0>)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	6879      	ldr	r1, [r7, #4]
 8001f76:	461a      	mov	r2, r3
 8001f78:	0052      	lsls	r2, r2, #1
 8001f7a:	441a      	add	r2, r3
 8001f7c:	00d3      	lsls	r3, r2, #3
 8001f7e:	461a      	mov	r2, r3
 8001f80:	460b      	mov	r3, r1
 8001f82:	011b      	lsls	r3, r3, #4
 8001f84:	1a5b      	subs	r3, r3, r1
 8001f86:	011b      	lsls	r3, r3, #4
 8001f88:	4413      	add	r3, r2
 8001f8a:	4403      	add	r3, r0
 8001f8c:	3304      	adds	r3, #4
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	3330      	adds	r3, #48	; 0x30
 8001f94:	b2da      	uxtb	r2, r3
 8001f96:	4b74      	ldr	r3, [pc, #464]	; (8002168 <ChooseNextNode+0x4e4>)
 8001f98:	71da      	strb	r2, [r3, #7]
		TX_BUFFER[8] = '\n';
 8001f9a:	4b73      	ldr	r3, [pc, #460]	; (8002168 <ChooseNextNode+0x4e4>)
 8001f9c:	220a      	movs	r2, #10
 8001f9e:	721a      	strb	r2, [r3, #8]
		TX_BUFFER[9] = 'A';
 8001fa0:	4b71      	ldr	r3, [pc, #452]	; (8002168 <ChooseNextNode+0x4e4>)
 8001fa2:	2241      	movs	r2, #65	; 0x41
 8001fa4:	725a      	strb	r2, [r3, #9]
		TX_BUFFER[10] = Map[x][y].Lados[ATRAS] + '0';
 8001fa6:	486f      	ldr	r0, [pc, #444]	; (8002164 <ChooseNextNode+0x4e0>)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	6879      	ldr	r1, [r7, #4]
 8001fac:	461a      	mov	r2, r3
 8001fae:	0052      	lsls	r2, r2, #1
 8001fb0:	441a      	add	r2, r3
 8001fb2:	00d3      	lsls	r3, r2, #3
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	011b      	lsls	r3, r3, #4
 8001fba:	1a5b      	subs	r3, r3, r1
 8001fbc:	011b      	lsls	r3, r3, #4
 8001fbe:	4413      	add	r3, r2
 8001fc0:	4403      	add	r3, r0
 8001fc2:	3308      	adds	r3, #8
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	3330      	adds	r3, #48	; 0x30
 8001fca:	b2da      	uxtb	r2, r3
 8001fcc:	4b66      	ldr	r3, [pc, #408]	; (8002168 <ChooseNextNode+0x4e4>)
 8001fce:	729a      	strb	r2, [r3, #10]
		TX_BUFFER[11] = '\n';
 8001fd0:	4b65      	ldr	r3, [pc, #404]	; (8002168 <ChooseNextNode+0x4e4>)
 8001fd2:	220a      	movs	r2, #10
 8001fd4:	72da      	strb	r2, [r3, #11]
		HAL_UART_Transmit(&huart1, TX_BUFFER, 12, 100);
 8001fd6:	2364      	movs	r3, #100	; 0x64
 8001fd8:	220c      	movs	r2, #12
 8001fda:	4963      	ldr	r1, [pc, #396]	; (8002168 <ChooseNextNode+0x4e4>)
 8001fdc:	4863      	ldr	r0, [pc, #396]	; (800216c <ChooseNextNode+0x4e8>)
 8001fde:	f003 fe90 	bl	8005d02 <HAL_UART_Transmit>

		return IZQUIERDA;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e0d5      	b.n	8002192 <ChooseNextNode+0x50e>
	} else if (Map[x][y].Lados[direcciones[DERECHA]] == 0) {
 8001fe6:	4b5e      	ldr	r3, [pc, #376]	; (8002160 <ChooseNextNode+0x4dc>)
 8001fe8:	68d8      	ldr	r0, [r3, #12]
 8001fea:	4c5e      	ldr	r4, [pc, #376]	; (8002164 <ChooseNextNode+0x4e0>)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	6879      	ldr	r1, [r7, #4]
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	0052      	lsls	r2, r2, #1
 8001ff4:	441a      	add	r2, r3
 8001ff6:	0053      	lsls	r3, r2, #1
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	011b      	lsls	r3, r3, #4
 8001ffe:	1a5b      	subs	r3, r3, r1
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	4413      	add	r3, r2
 8002004:	4403      	add	r3, r0
 8002006:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800200a:	2b00      	cmp	r3, #0
 800200c:	f040 80b0 	bne.w	8002170 <ChooseNextNode+0x4ec>
		TX_BUFFER[0] = 'D';
 8002010:	4b55      	ldr	r3, [pc, #340]	; (8002168 <ChooseNextNode+0x4e4>)
 8002012:	2244      	movs	r2, #68	; 0x44
 8002014:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = '\n';
 8002016:	4b54      	ldr	r3, [pc, #336]	; (8002168 <ChooseNextNode+0x4e4>)
 8002018:	220a      	movs	r2, #10
 800201a:	705a      	strb	r2, [r3, #1]
		HAL_UART_Transmit(&huart1, TX_BUFFER, 2, 100);
 800201c:	2364      	movs	r3, #100	; 0x64
 800201e:	2202      	movs	r2, #2
 8002020:	4951      	ldr	r1, [pc, #324]	; (8002168 <ChooseNextNode+0x4e4>)
 8002022:	4852      	ldr	r0, [pc, #328]	; (800216c <ChooseNextNode+0x4e8>)
 8002024:	f003 fe6d 	bl	8005d02 <HAL_UART_Transmit>
		Map[x][y].Lados[direcciones[DERECHA]] = 2;
 8002028:	4b4d      	ldr	r3, [pc, #308]	; (8002160 <ChooseNextNode+0x4dc>)
 800202a:	68d8      	ldr	r0, [r3, #12]
 800202c:	4c4d      	ldr	r4, [pc, #308]	; (8002164 <ChooseNextNode+0x4e0>)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	6879      	ldr	r1, [r7, #4]
 8002032:	461a      	mov	r2, r3
 8002034:	0052      	lsls	r2, r2, #1
 8002036:	441a      	add	r2, r3
 8002038:	0053      	lsls	r3, r2, #1
 800203a:	461a      	mov	r2, r3
 800203c:	460b      	mov	r3, r1
 800203e:	011b      	lsls	r3, r3, #4
 8002040:	1a5b      	subs	r3, r3, r1
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	4413      	add	r3, r2
 8002046:	4403      	add	r3, r0
 8002048:	2202      	movs	r2, #2
 800204a:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
		if (Map[x][y].visitado > 1) {
 800204e:	4845      	ldr	r0, [pc, #276]	; (8002164 <ChooseNextNode+0x4e0>)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	6879      	ldr	r1, [r7, #4]
 8002054:	461a      	mov	r2, r3
 8002056:	0052      	lsls	r2, r2, #1
 8002058:	441a      	add	r2, r3
 800205a:	00d3      	lsls	r3, r2, #3
 800205c:	461a      	mov	r2, r3
 800205e:	460b      	mov	r3, r1
 8002060:	011b      	lsls	r3, r3, #4
 8002062:	1a5b      	subs	r3, r3, r1
 8002064:	011b      	lsls	r3, r3, #4
 8002066:	4413      	add	r3, r2
 8002068:	4403      	add	r3, r0
 800206a:	3310      	adds	r3, #16
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2b01      	cmp	r3, #1
 8002070:	dd03      	ble.n	800207a <ChooseNextNode+0x3f6>
			EliminateNode(x, y);
 8002072:	6839      	ldr	r1, [r7, #0]
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f000 f895 	bl	80021a4 <EliminateNode>
		}
		TX_BUFFER[0] = 'D';
 800207a:	4b3b      	ldr	r3, [pc, #236]	; (8002168 <ChooseNextNode+0x4e4>)
 800207c:	2244      	movs	r2, #68	; 0x44
 800207e:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = Map[x][y].Lados[DERECHA] + '0';
 8002080:	4838      	ldr	r0, [pc, #224]	; (8002164 <ChooseNextNode+0x4e0>)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	6879      	ldr	r1, [r7, #4]
 8002086:	461a      	mov	r2, r3
 8002088:	0052      	lsls	r2, r2, #1
 800208a:	441a      	add	r2, r3
 800208c:	00d3      	lsls	r3, r2, #3
 800208e:	461a      	mov	r2, r3
 8002090:	460b      	mov	r3, r1
 8002092:	011b      	lsls	r3, r3, #4
 8002094:	1a5b      	subs	r3, r3, r1
 8002096:	011b      	lsls	r3, r3, #4
 8002098:	4413      	add	r3, r2
 800209a:	4403      	add	r3, r0
 800209c:	330c      	adds	r3, #12
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	3330      	adds	r3, #48	; 0x30
 80020a4:	b2da      	uxtb	r2, r3
 80020a6:	4b30      	ldr	r3, [pc, #192]	; (8002168 <ChooseNextNode+0x4e4>)
 80020a8:	705a      	strb	r2, [r3, #1]
		TX_BUFFER[2] = '\n';
 80020aa:	4b2f      	ldr	r3, [pc, #188]	; (8002168 <ChooseNextNode+0x4e4>)
 80020ac:	220a      	movs	r2, #10
 80020ae:	709a      	strb	r2, [r3, #2]
		TX_BUFFER[3] = 'C';
 80020b0:	4b2d      	ldr	r3, [pc, #180]	; (8002168 <ChooseNextNode+0x4e4>)
 80020b2:	2243      	movs	r2, #67	; 0x43
 80020b4:	70da      	strb	r2, [r3, #3]
		TX_BUFFER[4] = Map[x][y].Lados[ADELANTE] + '0';
 80020b6:	482b      	ldr	r0, [pc, #172]	; (8002164 <ChooseNextNode+0x4e0>)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	6879      	ldr	r1, [r7, #4]
 80020bc:	461a      	mov	r2, r3
 80020be:	0052      	lsls	r2, r2, #1
 80020c0:	441a      	add	r2, r3
 80020c2:	00d3      	lsls	r3, r2, #3
 80020c4:	461a      	mov	r2, r3
 80020c6:	460b      	mov	r3, r1
 80020c8:	011b      	lsls	r3, r3, #4
 80020ca:	1a5b      	subs	r3, r3, r1
 80020cc:	011b      	lsls	r3, r3, #4
 80020ce:	4413      	add	r3, r2
 80020d0:	4403      	add	r3, r0
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	3330      	adds	r3, #48	; 0x30
 80020d8:	b2da      	uxtb	r2, r3
 80020da:	4b23      	ldr	r3, [pc, #140]	; (8002168 <ChooseNextNode+0x4e4>)
 80020dc:	711a      	strb	r2, [r3, #4]
		TX_BUFFER[5] = '\n';
 80020de:	4b22      	ldr	r3, [pc, #136]	; (8002168 <ChooseNextNode+0x4e4>)
 80020e0:	220a      	movs	r2, #10
 80020e2:	715a      	strb	r2, [r3, #5]
		TX_BUFFER[6] = 'I';
 80020e4:	4b20      	ldr	r3, [pc, #128]	; (8002168 <ChooseNextNode+0x4e4>)
 80020e6:	2249      	movs	r2, #73	; 0x49
 80020e8:	719a      	strb	r2, [r3, #6]
		TX_BUFFER[7] = Map[x][y].Lados[IZQUIERDA] + '0';
 80020ea:	481e      	ldr	r0, [pc, #120]	; (8002164 <ChooseNextNode+0x4e0>)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	6879      	ldr	r1, [r7, #4]
 80020f0:	461a      	mov	r2, r3
 80020f2:	0052      	lsls	r2, r2, #1
 80020f4:	441a      	add	r2, r3
 80020f6:	00d3      	lsls	r3, r2, #3
 80020f8:	461a      	mov	r2, r3
 80020fa:	460b      	mov	r3, r1
 80020fc:	011b      	lsls	r3, r3, #4
 80020fe:	1a5b      	subs	r3, r3, r1
 8002100:	011b      	lsls	r3, r3, #4
 8002102:	4413      	add	r3, r2
 8002104:	4403      	add	r3, r0
 8002106:	3304      	adds	r3, #4
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	b2db      	uxtb	r3, r3
 800210c:	3330      	adds	r3, #48	; 0x30
 800210e:	b2da      	uxtb	r2, r3
 8002110:	4b15      	ldr	r3, [pc, #84]	; (8002168 <ChooseNextNode+0x4e4>)
 8002112:	71da      	strb	r2, [r3, #7]
		TX_BUFFER[8] = '\n';
 8002114:	4b14      	ldr	r3, [pc, #80]	; (8002168 <ChooseNextNode+0x4e4>)
 8002116:	220a      	movs	r2, #10
 8002118:	721a      	strb	r2, [r3, #8]
		TX_BUFFER[9] = 'A';
 800211a:	4b13      	ldr	r3, [pc, #76]	; (8002168 <ChooseNextNode+0x4e4>)
 800211c:	2241      	movs	r2, #65	; 0x41
 800211e:	725a      	strb	r2, [r3, #9]
		TX_BUFFER[10] = Map[x][y].Lados[ATRAS] + '0';
 8002120:	4810      	ldr	r0, [pc, #64]	; (8002164 <ChooseNextNode+0x4e0>)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	6879      	ldr	r1, [r7, #4]
 8002126:	461a      	mov	r2, r3
 8002128:	0052      	lsls	r2, r2, #1
 800212a:	441a      	add	r2, r3
 800212c:	00d3      	lsls	r3, r2, #3
 800212e:	461a      	mov	r2, r3
 8002130:	460b      	mov	r3, r1
 8002132:	011b      	lsls	r3, r3, #4
 8002134:	1a5b      	subs	r3, r3, r1
 8002136:	011b      	lsls	r3, r3, #4
 8002138:	4413      	add	r3, r2
 800213a:	4403      	add	r3, r0
 800213c:	3308      	adds	r3, #8
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	b2db      	uxtb	r3, r3
 8002142:	3330      	adds	r3, #48	; 0x30
 8002144:	b2da      	uxtb	r2, r3
 8002146:	4b08      	ldr	r3, [pc, #32]	; (8002168 <ChooseNextNode+0x4e4>)
 8002148:	729a      	strb	r2, [r3, #10]
		TX_BUFFER[11] = '\n';
 800214a:	4b07      	ldr	r3, [pc, #28]	; (8002168 <ChooseNextNode+0x4e4>)
 800214c:	220a      	movs	r2, #10
 800214e:	72da      	strb	r2, [r3, #11]
		HAL_UART_Transmit(&huart1, TX_BUFFER, 12, 100);
 8002150:	2364      	movs	r3, #100	; 0x64
 8002152:	220c      	movs	r2, #12
 8002154:	4904      	ldr	r1, [pc, #16]	; (8002168 <ChooseNextNode+0x4e4>)
 8002156:	4805      	ldr	r0, [pc, #20]	; (800216c <ChooseNextNode+0x4e8>)
 8002158:	f003 fdd3 	bl	8005d02 <HAL_UART_Transmit>

		return DERECHA;
 800215c:	2303      	movs	r3, #3
 800215e:	e018      	b.n	8002192 <ChooseNextNode+0x50e>
 8002160:	200011cc 	.word	0x200011cc
 8002164:	20001224 	.word	0x20001224
 8002168:	200011dc 	.word	0x200011dc
 800216c:	20001c84 	.word	0x20001c84
	} else {
		TX_BUFFER[0] = 'O';
 8002170:	4b0a      	ldr	r3, [pc, #40]	; (800219c <ChooseNextNode+0x518>)
 8002172:	224f      	movs	r2, #79	; 0x4f
 8002174:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = '\n';
 8002176:	4b09      	ldr	r3, [pc, #36]	; (800219c <ChooseNextNode+0x518>)
 8002178:	220a      	movs	r2, #10
 800217a:	705a      	strb	r2, [r3, #1]
		HAL_UART_Transmit(&huart1, TX_BUFFER, 2, 100);
 800217c:	2364      	movs	r3, #100	; 0x64
 800217e:	2202      	movs	r2, #2
 8002180:	4906      	ldr	r1, [pc, #24]	; (800219c <ChooseNextNode+0x518>)
 8002182:	4807      	ldr	r0, [pc, #28]	; (80021a0 <ChooseNextNode+0x51c>)
 8002184:	f003 fdbd 	bl	8005d02 <HAL_UART_Transmit>
		return SearchAvailableNode(x, y);
 8002188:	6839      	ldr	r1, [r7, #0]
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f000 f840 	bl	8002210 <SearchAvailableNode>
 8002190:	4603      	mov	r3, r0
	}
	last.x = x;
	last.y = y;
}
 8002192:	4618      	mov	r0, r3
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	bd90      	pop	{r4, r7, pc}
 800219a:	bf00      	nop
 800219c:	200011dc 	.word	0x200011dc
 80021a0:	20001c84 	.word	0x20001c84

080021a4 <EliminateNode>:

void EliminateNode(int x, int y) {
 80021a4:	b490      	push	{r4, r7}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
//Serial.println("Borro");
	Map[x][y].Lados[direcciones[ATRAS]] = 1;
 80021ae:	4b15      	ldr	r3, [pc, #84]	; (8002204 <EliminateNode+0x60>)
 80021b0:	6898      	ldr	r0, [r3, #8]
 80021b2:	4c15      	ldr	r4, [pc, #84]	; (8002208 <EliminateNode+0x64>)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	6879      	ldr	r1, [r7, #4]
 80021b8:	461a      	mov	r2, r3
 80021ba:	0052      	lsls	r2, r2, #1
 80021bc:	441a      	add	r2, r3
 80021be:	0053      	lsls	r3, r2, #1
 80021c0:	461a      	mov	r2, r3
 80021c2:	460b      	mov	r3, r1
 80021c4:	011b      	lsls	r3, r3, #4
 80021c6:	1a5b      	subs	r3, r3, r1
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	4413      	add	r3, r2
 80021cc:	4403      	add	r3, r0
 80021ce:	2201      	movs	r2, #1
 80021d0:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	Map[last.x][last.y].visitado = 0;
 80021d4:	4b0d      	ldr	r3, [pc, #52]	; (800220c <EliminateNode+0x68>)
 80021d6:	6819      	ldr	r1, [r3, #0]
 80021d8:	4b0c      	ldr	r3, [pc, #48]	; (800220c <EliminateNode+0x68>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	480a      	ldr	r0, [pc, #40]	; (8002208 <EliminateNode+0x64>)
 80021de:	461a      	mov	r2, r3
 80021e0:	0052      	lsls	r2, r2, #1
 80021e2:	441a      	add	r2, r3
 80021e4:	00d3      	lsls	r3, r2, #3
 80021e6:	461a      	mov	r2, r3
 80021e8:	460b      	mov	r3, r1
 80021ea:	011b      	lsls	r3, r3, #4
 80021ec:	1a5b      	subs	r3, r3, r1
 80021ee:	011b      	lsls	r3, r3, #4
 80021f0:	4413      	add	r3, r2
 80021f2:	4403      	add	r3, r0
 80021f4:	3310      	adds	r3, #16
 80021f6:	2200      	movs	r2, #0
 80021f8:	601a      	str	r2, [r3, #0]
}
 80021fa:	bf00      	nop
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bc90      	pop	{r4, r7}
 8002202:	4770      	bx	lr
 8002204:	200011cc 	.word	0x200011cc
 8002208:	20001224 	.word	0x20001224
 800220c:	2000121c 	.word	0x2000121c

08002210 <SearchAvailableNode>:

int SearchAvailableNode(int x, int y) {
 8002210:	b590      	push	{r4, r7, lr}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
	if (Map[x][y].Lados[direcciones[ADELANTE]] != 1) {
 800221a:	4b70      	ldr	r3, [pc, #448]	; (80023dc <SearchAvailableNode+0x1cc>)
 800221c:	6818      	ldr	r0, [r3, #0]
 800221e:	4c70      	ldr	r4, [pc, #448]	; (80023e0 <SearchAvailableNode+0x1d0>)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	6879      	ldr	r1, [r7, #4]
 8002224:	461a      	mov	r2, r3
 8002226:	0052      	lsls	r2, r2, #1
 8002228:	441a      	add	r2, r3
 800222a:	0053      	lsls	r3, r2, #1
 800222c:	461a      	mov	r2, r3
 800222e:	460b      	mov	r3, r1
 8002230:	011b      	lsls	r3, r3, #4
 8002232:	1a5b      	subs	r3, r3, r1
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	4413      	add	r3, r2
 8002238:	4403      	add	r3, r0
 800223a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d02d      	beq.n	800229e <SearchAvailableNode+0x8e>
		//Serial.println("Adelante1");
		Map[x][y].Lados[direcciones[ADELANTE]] = 2;
 8002242:	4b66      	ldr	r3, [pc, #408]	; (80023dc <SearchAvailableNode+0x1cc>)
 8002244:	6818      	ldr	r0, [r3, #0]
 8002246:	4c66      	ldr	r4, [pc, #408]	; (80023e0 <SearchAvailableNode+0x1d0>)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	6879      	ldr	r1, [r7, #4]
 800224c:	461a      	mov	r2, r3
 800224e:	0052      	lsls	r2, r2, #1
 8002250:	441a      	add	r2, r3
 8002252:	0053      	lsls	r3, r2, #1
 8002254:	461a      	mov	r2, r3
 8002256:	460b      	mov	r3, r1
 8002258:	011b      	lsls	r3, r3, #4
 800225a:	1a5b      	subs	r3, r3, r1
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	4413      	add	r3, r2
 8002260:	4403      	add	r3, r0
 8002262:	2202      	movs	r2, #2
 8002264:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
		moveNode(ADELANTE);
 8002268:	2000      	movs	r0, #0
 800226a:	f000 f8bb 	bl	80023e4 <moveNode>
		if (Map[x][y].visitado > 1) {
 800226e:	485c      	ldr	r0, [pc, #368]	; (80023e0 <SearchAvailableNode+0x1d0>)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	6879      	ldr	r1, [r7, #4]
 8002274:	461a      	mov	r2, r3
 8002276:	0052      	lsls	r2, r2, #1
 8002278:	441a      	add	r2, r3
 800227a:	00d3      	lsls	r3, r2, #3
 800227c:	461a      	mov	r2, r3
 800227e:	460b      	mov	r3, r1
 8002280:	011b      	lsls	r3, r3, #4
 8002282:	1a5b      	subs	r3, r3, r1
 8002284:	011b      	lsls	r3, r3, #4
 8002286:	4413      	add	r3, r2
 8002288:	4403      	add	r3, r0
 800228a:	3310      	adds	r3, #16
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2b01      	cmp	r3, #1
 8002290:	dd03      	ble.n	800229a <SearchAvailableNode+0x8a>
			EliminateNode(x, y);
 8002292:	6839      	ldr	r1, [r7, #0]
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f7ff ff85 	bl	80021a4 <EliminateNode>
		}
		return ADELANTE;
 800229a:	2300      	movs	r3, #0
 800229c:	e09a      	b.n	80023d4 <SearchAvailableNode+0x1c4>
	} else if (Map[x][y].Lados[direcciones[IZQUIERDA]] != 1) {
 800229e:	4b4f      	ldr	r3, [pc, #316]	; (80023dc <SearchAvailableNode+0x1cc>)
 80022a0:	6858      	ldr	r0, [r3, #4]
 80022a2:	4c4f      	ldr	r4, [pc, #316]	; (80023e0 <SearchAvailableNode+0x1d0>)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	6879      	ldr	r1, [r7, #4]
 80022a8:	461a      	mov	r2, r3
 80022aa:	0052      	lsls	r2, r2, #1
 80022ac:	441a      	add	r2, r3
 80022ae:	0053      	lsls	r3, r2, #1
 80022b0:	461a      	mov	r2, r3
 80022b2:	460b      	mov	r3, r1
 80022b4:	011b      	lsls	r3, r3, #4
 80022b6:	1a5b      	subs	r3, r3, r1
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	4413      	add	r3, r2
 80022bc:	4403      	add	r3, r0
 80022be:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d02d      	beq.n	8002322 <SearchAvailableNode+0x112>
		//Serial.println("IZQUIERDA1");
		Map[x][y].Lados[direcciones[IZQUIERDA]] = 2;
 80022c6:	4b45      	ldr	r3, [pc, #276]	; (80023dc <SearchAvailableNode+0x1cc>)
 80022c8:	6858      	ldr	r0, [r3, #4]
 80022ca:	4c45      	ldr	r4, [pc, #276]	; (80023e0 <SearchAvailableNode+0x1d0>)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	6879      	ldr	r1, [r7, #4]
 80022d0:	461a      	mov	r2, r3
 80022d2:	0052      	lsls	r2, r2, #1
 80022d4:	441a      	add	r2, r3
 80022d6:	0053      	lsls	r3, r2, #1
 80022d8:	461a      	mov	r2, r3
 80022da:	460b      	mov	r3, r1
 80022dc:	011b      	lsls	r3, r3, #4
 80022de:	1a5b      	subs	r3, r3, r1
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	4413      	add	r3, r2
 80022e4:	4403      	add	r3, r0
 80022e6:	2202      	movs	r2, #2
 80022e8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
		moveNode(IZQUIERDA);
 80022ec:	2001      	movs	r0, #1
 80022ee:	f000 f879 	bl	80023e4 <moveNode>
		//rotateAxis(IZQUIERDA);
		if (Map[x][y].visitado > 1) {
 80022f2:	483b      	ldr	r0, [pc, #236]	; (80023e0 <SearchAvailableNode+0x1d0>)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	6879      	ldr	r1, [r7, #4]
 80022f8:	461a      	mov	r2, r3
 80022fa:	0052      	lsls	r2, r2, #1
 80022fc:	441a      	add	r2, r3
 80022fe:	00d3      	lsls	r3, r2, #3
 8002300:	461a      	mov	r2, r3
 8002302:	460b      	mov	r3, r1
 8002304:	011b      	lsls	r3, r3, #4
 8002306:	1a5b      	subs	r3, r3, r1
 8002308:	011b      	lsls	r3, r3, #4
 800230a:	4413      	add	r3, r2
 800230c:	4403      	add	r3, r0
 800230e:	3310      	adds	r3, #16
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2b01      	cmp	r3, #1
 8002314:	dd03      	ble.n	800231e <SearchAvailableNode+0x10e>
			EliminateNode(x, y);
 8002316:	6839      	ldr	r1, [r7, #0]
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f7ff ff43 	bl	80021a4 <EliminateNode>
		}
		return IZQUIERDA;
 800231e:	2301      	movs	r3, #1
 8002320:	e058      	b.n	80023d4 <SearchAvailableNode+0x1c4>
	} else if (Map[x][y].Lados[direcciones[DERECHA]] != 1) {
 8002322:	4b2e      	ldr	r3, [pc, #184]	; (80023dc <SearchAvailableNode+0x1cc>)
 8002324:	68d8      	ldr	r0, [r3, #12]
 8002326:	4c2e      	ldr	r4, [pc, #184]	; (80023e0 <SearchAvailableNode+0x1d0>)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	6879      	ldr	r1, [r7, #4]
 800232c:	461a      	mov	r2, r3
 800232e:	0052      	lsls	r2, r2, #1
 8002330:	441a      	add	r2, r3
 8002332:	0053      	lsls	r3, r2, #1
 8002334:	461a      	mov	r2, r3
 8002336:	460b      	mov	r3, r1
 8002338:	011b      	lsls	r3, r3, #4
 800233a:	1a5b      	subs	r3, r3, r1
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	4413      	add	r3, r2
 8002340:	4403      	add	r3, r0
 8002342:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d02d      	beq.n	80023a6 <SearchAvailableNode+0x196>
		//Serial.println("DERECHA1");
		Map[x][y].Lados[direcciones[DERECHA]] = 2;
 800234a:	4b24      	ldr	r3, [pc, #144]	; (80023dc <SearchAvailableNode+0x1cc>)
 800234c:	68d8      	ldr	r0, [r3, #12]
 800234e:	4c24      	ldr	r4, [pc, #144]	; (80023e0 <SearchAvailableNode+0x1d0>)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	6879      	ldr	r1, [r7, #4]
 8002354:	461a      	mov	r2, r3
 8002356:	0052      	lsls	r2, r2, #1
 8002358:	441a      	add	r2, r3
 800235a:	0053      	lsls	r3, r2, #1
 800235c:	461a      	mov	r2, r3
 800235e:	460b      	mov	r3, r1
 8002360:	011b      	lsls	r3, r3, #4
 8002362:	1a5b      	subs	r3, r3, r1
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	4413      	add	r3, r2
 8002368:	4403      	add	r3, r0
 800236a:	2202      	movs	r2, #2
 800236c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
		moveNode(DERECHA);
 8002370:	2003      	movs	r0, #3
 8002372:	f000 f837 	bl	80023e4 <moveNode>
		if (Map[x][y].visitado > 1) {
 8002376:	481a      	ldr	r0, [pc, #104]	; (80023e0 <SearchAvailableNode+0x1d0>)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	6879      	ldr	r1, [r7, #4]
 800237c:	461a      	mov	r2, r3
 800237e:	0052      	lsls	r2, r2, #1
 8002380:	441a      	add	r2, r3
 8002382:	00d3      	lsls	r3, r2, #3
 8002384:	461a      	mov	r2, r3
 8002386:	460b      	mov	r3, r1
 8002388:	011b      	lsls	r3, r3, #4
 800238a:	1a5b      	subs	r3, r3, r1
 800238c:	011b      	lsls	r3, r3, #4
 800238e:	4413      	add	r3, r2
 8002390:	4403      	add	r3, r0
 8002392:	3310      	adds	r3, #16
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2b01      	cmp	r3, #1
 8002398:	dd03      	ble.n	80023a2 <SearchAvailableNode+0x192>
			EliminateNode(x, y);
 800239a:	6839      	ldr	r1, [r7, #0]
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f7ff ff01 	bl	80021a4 <EliminateNode>
		}
		//rotateAxis(DERECHA);
		return DERECHA;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e016      	b.n	80023d4 <SearchAvailableNode+0x1c4>
	} else if (Map[x][y].Lados[direcciones[ATRAS]] != 1) {
 80023a6:	4b0d      	ldr	r3, [pc, #52]	; (80023dc <SearchAvailableNode+0x1cc>)
 80023a8:	6898      	ldr	r0, [r3, #8]
 80023aa:	4c0d      	ldr	r4, [pc, #52]	; (80023e0 <SearchAvailableNode+0x1d0>)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	6879      	ldr	r1, [r7, #4]
 80023b0:	461a      	mov	r2, r3
 80023b2:	0052      	lsls	r2, r2, #1
 80023b4:	441a      	add	r2, r3
 80023b6:	0053      	lsls	r3, r2, #1
 80023b8:	461a      	mov	r2, r3
 80023ba:	460b      	mov	r3, r1
 80023bc:	011b      	lsls	r3, r3, #4
 80023be:	1a5b      	subs	r3, r3, r1
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	4413      	add	r3, r2
 80023c4:	4403      	add	r3, r0
 80023c6:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d001      	beq.n	80023d2 <SearchAvailableNode+0x1c2>
		//Serial.println("atras1");
		return ATRAS;
 80023ce:	2302      	movs	r3, #2
 80023d0:	e000      	b.n	80023d4 <SearchAvailableNode+0x1c4>
	}
	return 0;
 80023d2:	2300      	movs	r3, #0
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd90      	pop	{r4, r7, pc}
 80023dc:	200011cc 	.word	0x200011cc
 80023e0:	20001224 	.word	0x20001224

080023e4 <moveNode>:
void moveNode(int lado) {
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
	switch (lado) {
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2b03      	cmp	r3, #3
 80023f0:	d822      	bhi.n	8002438 <moveNode+0x54>
 80023f2:	a201      	add	r2, pc, #4	; (adr r2, 80023f8 <moveNode+0x14>)
 80023f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023f8:	08002409 	.word	0x08002409
 80023fc:	08002415 	.word	0x08002415
 8002400:	0800242d 	.word	0x0800242d
 8002404:	08002421 	.word	0x08002421
	case ADELANTE:
		//if (visual.y != ALTO - 1) {
		actual.y++;
 8002408:	4b0e      	ldr	r3, [pc, #56]	; (8002444 <moveNode+0x60>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	3301      	adds	r3, #1
 800240e:	4a0d      	ldr	r2, [pc, #52]	; (8002444 <moveNode+0x60>)
 8002410:	6053      	str	r3, [r2, #4]
		//visual.y++;
		//}
		break;
 8002412:	e011      	b.n	8002438 <moveNode+0x54>
	case IZQUIERDA:
		//if (visual.x != 0) {
		actual.x--;
 8002414:	4b0b      	ldr	r3, [pc, #44]	; (8002444 <moveNode+0x60>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	3b01      	subs	r3, #1
 800241a:	4a0a      	ldr	r2, [pc, #40]	; (8002444 <moveNode+0x60>)
 800241c:	6013      	str	r3, [r2, #0]
		//visual.x--;
		//}
		break;
 800241e:	e00b      	b.n	8002438 <moveNode+0x54>
	case DERECHA:
		// if (visual.x != ANCHO - 1) {
		actual.x++;
 8002420:	4b08      	ldr	r3, [pc, #32]	; (8002444 <moveNode+0x60>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	3301      	adds	r3, #1
 8002426:	4a07      	ldr	r2, [pc, #28]	; (8002444 <moveNode+0x60>)
 8002428:	6013      	str	r3, [r2, #0]
		// visual.x++;
		// }
		break;
 800242a:	e005      	b.n	8002438 <moveNode+0x54>
	case ATRAS:
		// if (visual.y != 0) {
		actual.y--;
 800242c:	4b05      	ldr	r3, [pc, #20]	; (8002444 <moveNode+0x60>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	3b01      	subs	r3, #1
 8002432:	4a04      	ldr	r2, [pc, #16]	; (8002444 <moveNode+0x60>)
 8002434:	6053      	str	r3, [r2, #4]
		// visual.y--;
		// }

		break;
 8002436:	bf00      	nop
	}
}
 8002438:	bf00      	nop
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	bc80      	pop	{r7}
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	20001214 	.word	0x20001214

08002448 <movementMachine>:
void movementMachine(int move) {
 8002448:	b590      	push	{r4, r7, lr}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
	switch (movementState) {
 8002450:	4b7f      	ldr	r3, [pc, #508]	; (8002650 <movementMachine+0x208>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2b05      	cmp	r3, #5
 8002456:	f200 80f6 	bhi.w	8002646 <movementMachine+0x1fe>
 800245a:	a201      	add	r2, pc, #4	; (adr r2, 8002460 <movementMachine+0x18>)
 800245c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002460:	080024a5 	.word	0x080024a5
 8002464:	08002543 	.word	0x08002543
 8002468:	080025ef 	.word	0x080025ef
 800246c:	08002599 	.word	0x08002599
 8002470:	08002647 	.word	0x08002647
 8002474:	08002479 	.word	0x08002479
	case OFF:
		runMotor(OFF, MOTOR_A);
 8002478:	2100      	movs	r1, #0
 800247a:	2005      	movs	r0, #5
 800247c:	f000 fbba 	bl	8002bf4 <runMotor>
		runMotor(OFF, MOTOR_B);
 8002480:	2101      	movs	r1, #1
 8002482:	2005      	movs	r0, #5
 8002484:	f000 fbb6 	bl	8002bf4 <runMotor>
		if (move != OFF) {
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2b05      	cmp	r3, #5
 800248c:	f000 80da 	beq.w	8002644 <movementMachine+0x1fc>
			movementState = move;
 8002490:	4a6f      	ldr	r2, [pc, #444]	; (8002650 <movementMachine+0x208>)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6013      	str	r3, [r2, #0]
			TIM3->CNT = 0;
 8002496:	4b6f      	ldr	r3, [pc, #444]	; (8002654 <movementMachine+0x20c>)
 8002498:	2200      	movs	r2, #0
 800249a:	625a      	str	r2, [r3, #36]	; 0x24
			TIM4->CNT = 0;
 800249c:	4b6e      	ldr	r3, [pc, #440]	; (8002658 <movementMachine+0x210>)
 800249e:	2200      	movs	r2, #0
 80024a0:	625a      	str	r2, [r3, #36]	; 0x24
		}
		break;
 80024a2:	e0cf      	b.n	8002644 <movementMachine+0x1fc>
	case ADELANTE:

		if (calcularDistancia((TIM3->CNT) >> 1) < FORWARD_DISTANCE - offset
 80024a4:	4b6b      	ldr	r3, [pc, #428]	; (8002654 <movementMachine+0x20c>)
 80024a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a8:	085b      	lsrs	r3, r3, #1
 80024aa:	4618      	mov	r0, r3
 80024ac:	f000 fb7c 	bl	8002ba8 <calcularDistancia>
 80024b0:	4604      	mov	r4, r0
 80024b2:	4b6a      	ldr	r3, [pc, #424]	; (800265c <movementMachine+0x214>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f5c3 7387 	rsb	r3, r3, #270	; 0x10e
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7fe fbbe 	bl	8000c3c <__aeabi_i2f>
 80024c0:	4603      	mov	r3, r0
 80024c2:	4619      	mov	r1, r3
 80024c4:	4620      	mov	r0, r4
 80024c6:	f7fe fdab 	bl	8001020 <__aeabi_fcmplt>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d115      	bne.n	80024fc <movementMachine+0xb4>
				|| calcularDistancia((TIM4->CNT) >> 1)
 80024d0:	4b61      	ldr	r3, [pc, #388]	; (8002658 <movementMachine+0x210>)
 80024d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d4:	085b      	lsrs	r3, r3, #1
 80024d6:	4618      	mov	r0, r3
 80024d8:	f000 fb66 	bl	8002ba8 <calcularDistancia>
 80024dc:	4604      	mov	r4, r0
						< FORWARD_DISTANCE - offset) {
 80024de:	4b5f      	ldr	r3, [pc, #380]	; (800265c <movementMachine+0x214>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f5c3 7387 	rsb	r3, r3, #270	; 0x10e
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7fe fba8 	bl	8000c3c <__aeabi_i2f>
 80024ec:	4603      	mov	r3, r0
				|| calcularDistancia((TIM4->CNT) >> 1)
 80024ee:	4619      	mov	r1, r3
 80024f0:	4620      	mov	r0, r4
 80024f2:	f7fe fd95 	bl	8001020 <__aeabi_fcmplt>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d00a      	beq.n	8002512 <movementMachine+0xca>
			moveStraight();
 80024fc:	f000 fa38 	bl	8002970 <moveStraight>
			runMotor(ADELANTE, MOTOR_A);
 8002500:	2100      	movs	r1, #0
 8002502:	2000      	movs	r0, #0
 8002504:	f000 fb76 	bl	8002bf4 <runMotor>
			runMotor(ADELANTE, MOTOR_B);
 8002508:	2101      	movs	r1, #1
 800250a:	2000      	movs	r0, #0
 800250c:	f000 fb72 	bl	8002bf4 <runMotor>
			runMotor(OFF, MOTOR_B);
			TIM3->CNT = 0;
			TIM4->CNT = 0;
			offset = 0;
		}
		break;
 8002510:	e099      	b.n	8002646 <movementMachine+0x1fe>
			movimientoFlag = 1;
 8002512:	4b53      	ldr	r3, [pc, #332]	; (8002660 <movementMachine+0x218>)
 8002514:	2201      	movs	r2, #1
 8002516:	601a      	str	r2, [r3, #0]
			movementState = OFF;
 8002518:	4b4d      	ldr	r3, [pc, #308]	; (8002650 <movementMachine+0x208>)
 800251a:	2205      	movs	r2, #5
 800251c:	601a      	str	r2, [r3, #0]
			runMotor(OFF, MOTOR_A);
 800251e:	2100      	movs	r1, #0
 8002520:	2005      	movs	r0, #5
 8002522:	f000 fb67 	bl	8002bf4 <runMotor>
			runMotor(OFF, MOTOR_B);
 8002526:	2101      	movs	r1, #1
 8002528:	2005      	movs	r0, #5
 800252a:	f000 fb63 	bl	8002bf4 <runMotor>
			TIM3->CNT = 0;
 800252e:	4b49      	ldr	r3, [pc, #292]	; (8002654 <movementMachine+0x20c>)
 8002530:	2200      	movs	r2, #0
 8002532:	625a      	str	r2, [r3, #36]	; 0x24
			TIM4->CNT = 0;
 8002534:	4b48      	ldr	r3, [pc, #288]	; (8002658 <movementMachine+0x210>)
 8002536:	2200      	movs	r2, #0
 8002538:	625a      	str	r2, [r3, #36]	; 0x24
			offset = 0;
 800253a:	4b48      	ldr	r3, [pc, #288]	; (800265c <movementMachine+0x214>)
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]
		break;
 8002540:	e081      	b.n	8002646 <movementMachine+0x1fe>
	case IZQUIERDA:

		if (calcularDistancia(TIM3->CNT) < 155) {
 8002542:	4b44      	ldr	r3, [pc, #272]	; (8002654 <movementMachine+0x20c>)
 8002544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002546:	4618      	mov	r0, r3
 8002548:	f000 fb2e 	bl	8002ba8 <calcularDistancia>
 800254c:	4603      	mov	r3, r0
 800254e:	4945      	ldr	r1, [pc, #276]	; (8002664 <movementMachine+0x21c>)
 8002550:	4618      	mov	r0, r3
 8002552:	f7fe fd65 	bl	8001020 <__aeabi_fcmplt>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d008      	beq.n	800256e <movementMachine+0x126>
			runMotor(ATRAS, MOTOR_A);
 800255c:	2100      	movs	r1, #0
 800255e:	2002      	movs	r0, #2
 8002560:	f000 fb48 	bl	8002bf4 <runMotor>
			runMotor(ADELANTE, MOTOR_B);
 8002564:	2101      	movs	r1, #1
 8002566:	2000      	movs	r0, #0
 8002568:	f000 fb44 	bl	8002bf4 <runMotor>
			runMotor(OFF, MOTOR_B);
			TIM3->CNT = 0;
			TIM4->CNT = 0;
			offset = 20;
		}
		break;
 800256c:	e06b      	b.n	8002646 <movementMachine+0x1fe>
			movementState = ADELANTE;
 800256e:	4b38      	ldr	r3, [pc, #224]	; (8002650 <movementMachine+0x208>)
 8002570:	2200      	movs	r2, #0
 8002572:	601a      	str	r2, [r3, #0]
			runMotor(OFF, MOTOR_A);
 8002574:	2100      	movs	r1, #0
 8002576:	2005      	movs	r0, #5
 8002578:	f000 fb3c 	bl	8002bf4 <runMotor>
			runMotor(OFF, MOTOR_B);
 800257c:	2101      	movs	r1, #1
 800257e:	2005      	movs	r0, #5
 8002580:	f000 fb38 	bl	8002bf4 <runMotor>
			TIM3->CNT = 0;
 8002584:	4b33      	ldr	r3, [pc, #204]	; (8002654 <movementMachine+0x20c>)
 8002586:	2200      	movs	r2, #0
 8002588:	625a      	str	r2, [r3, #36]	; 0x24
			TIM4->CNT = 0;
 800258a:	4b33      	ldr	r3, [pc, #204]	; (8002658 <movementMachine+0x210>)
 800258c:	2200      	movs	r2, #0
 800258e:	625a      	str	r2, [r3, #36]	; 0x24
			offset = 20;
 8002590:	4b32      	ldr	r3, [pc, #200]	; (800265c <movementMachine+0x214>)
 8002592:	2214      	movs	r2, #20
 8002594:	601a      	str	r2, [r3, #0]
		break;
 8002596:	e056      	b.n	8002646 <movementMachine+0x1fe>
	case DERECHA:
		if (calcularDistancia(TIM4->CNT) < 155) {
 8002598:	4b2f      	ldr	r3, [pc, #188]	; (8002658 <movementMachine+0x210>)
 800259a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259c:	4618      	mov	r0, r3
 800259e:	f000 fb03 	bl	8002ba8 <calcularDistancia>
 80025a2:	4603      	mov	r3, r0
 80025a4:	492f      	ldr	r1, [pc, #188]	; (8002664 <movementMachine+0x21c>)
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7fe fd3a 	bl	8001020 <__aeabi_fcmplt>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d008      	beq.n	80025c4 <movementMachine+0x17c>
			runMotor(ADELANTE, MOTOR_A);
 80025b2:	2100      	movs	r1, #0
 80025b4:	2000      	movs	r0, #0
 80025b6:	f000 fb1d 	bl	8002bf4 <runMotor>
			runMotor(ATRAS, MOTOR_B);
 80025ba:	2101      	movs	r1, #1
 80025bc:	2002      	movs	r0, #2
 80025be:	f000 fb19 	bl	8002bf4 <runMotor>
			runMotor(OFF, MOTOR_B);
			TIM3->CNT = 0;
			TIM4->CNT = 0;
			offset = 20;
		}
		break;
 80025c2:	e040      	b.n	8002646 <movementMachine+0x1fe>
			movementState = ADELANTE;
 80025c4:	4b22      	ldr	r3, [pc, #136]	; (8002650 <movementMachine+0x208>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	601a      	str	r2, [r3, #0]
			runMotor(OFF, MOTOR_A);
 80025ca:	2100      	movs	r1, #0
 80025cc:	2005      	movs	r0, #5
 80025ce:	f000 fb11 	bl	8002bf4 <runMotor>
			runMotor(OFF, MOTOR_B);
 80025d2:	2101      	movs	r1, #1
 80025d4:	2005      	movs	r0, #5
 80025d6:	f000 fb0d 	bl	8002bf4 <runMotor>
			TIM3->CNT = 0;
 80025da:	4b1e      	ldr	r3, [pc, #120]	; (8002654 <movementMachine+0x20c>)
 80025dc:	2200      	movs	r2, #0
 80025de:	625a      	str	r2, [r3, #36]	; 0x24
			TIM4->CNT = 0;
 80025e0:	4b1d      	ldr	r3, [pc, #116]	; (8002658 <movementMachine+0x210>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	625a      	str	r2, [r3, #36]	; 0x24
			offset = 20;
 80025e6:	4b1d      	ldr	r3, [pc, #116]	; (800265c <movementMachine+0x214>)
 80025e8:	2214      	movs	r2, #20
 80025ea:	601a      	str	r2, [r3, #0]
		break;
 80025ec:	e02b      	b.n	8002646 <movementMachine+0x1fe>
	case ATRAS:
		if (calcularDistancia(TIM4->CNT) < 290) {
 80025ee:	4b1a      	ldr	r3, [pc, #104]	; (8002658 <movementMachine+0x210>)
 80025f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f2:	4618      	mov	r0, r3
 80025f4:	f000 fad8 	bl	8002ba8 <calcularDistancia>
 80025f8:	4603      	mov	r3, r0
 80025fa:	491b      	ldr	r1, [pc, #108]	; (8002668 <movementMachine+0x220>)
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7fe fd0f 	bl	8001020 <__aeabi_fcmplt>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d008      	beq.n	800261a <movementMachine+0x1d2>
			runMotor(ADELANTE, MOTOR_A);
 8002608:	2100      	movs	r1, #0
 800260a:	2000      	movs	r0, #0
 800260c:	f000 faf2 	bl	8002bf4 <runMotor>
			runMotor(ATRAS, MOTOR_B);
 8002610:	2101      	movs	r1, #1
 8002612:	2002      	movs	r0, #2
 8002614:	f000 faee 	bl	8002bf4 <runMotor>
			runMotor(OFF, MOTOR_B);
			TIM3->CNT = 0;
			TIM4->CNT = 0;
			offset = 20;
		}
		break;
 8002618:	e015      	b.n	8002646 <movementMachine+0x1fe>
			movementState = ADELANTE;
 800261a:	4b0d      	ldr	r3, [pc, #52]	; (8002650 <movementMachine+0x208>)
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]
			runMotor(OFF, MOTOR_A);
 8002620:	2100      	movs	r1, #0
 8002622:	2005      	movs	r0, #5
 8002624:	f000 fae6 	bl	8002bf4 <runMotor>
			runMotor(OFF, MOTOR_B);
 8002628:	2101      	movs	r1, #1
 800262a:	2005      	movs	r0, #5
 800262c:	f000 fae2 	bl	8002bf4 <runMotor>
			TIM3->CNT = 0;
 8002630:	4b08      	ldr	r3, [pc, #32]	; (8002654 <movementMachine+0x20c>)
 8002632:	2200      	movs	r2, #0
 8002634:	625a      	str	r2, [r3, #36]	; 0x24
			TIM4->CNT = 0;
 8002636:	4b08      	ldr	r3, [pc, #32]	; (8002658 <movementMachine+0x210>)
 8002638:	2200      	movs	r2, #0
 800263a:	625a      	str	r2, [r3, #36]	; 0x24
			offset = 20;
 800263c:	4b07      	ldr	r3, [pc, #28]	; (800265c <movementMachine+0x214>)
 800263e:	2214      	movs	r2, #20
 8002640:	601a      	str	r2, [r3, #0]
		break;
 8002642:	e000      	b.n	8002646 <movementMachine+0x1fe>
		break;
 8002644:	bf00      	nop
		 movimientoFlag = 1;
		 movementState = OFF;
		 }
		 break;*/
	}
}
 8002646:	bf00      	nop
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	bd90      	pop	{r4, r7, pc}
 800264e:	bf00      	nop
 8002650:	20000018 	.word	0x20000018
 8002654:	40000400 	.word	0x40000400
 8002658:	40000800 	.word	0x40000800
 800265c:	20001204 	.word	0x20001204
 8002660:	200011fc 	.word	0x200011fc
 8002664:	431b0000 	.word	0x431b0000
 8002668:	43910000 	.word	0x43910000

0800266c <CreateNode>:

void CreateNode(int x, int y) {
 800266c:	b5b0      	push	{r4, r5, r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
	Map[x][y].Lados[direcciones[ADELANTE]] = lecturaSensor(ADELANTE, Sensors);
 8002676:	4936      	ldr	r1, [pc, #216]	; (8002750 <CreateNode+0xe4>)
 8002678:	2000      	movs	r0, #0
 800267a:	f000 fb41 	bl	8002d00 <lecturaSensor>
 800267e:	4603      	mov	r3, r0
 8002680:	4a34      	ldr	r2, [pc, #208]	; (8002754 <CreateNode+0xe8>)
 8002682:	6814      	ldr	r4, [r2, #0]
 8002684:	4618      	mov	r0, r3
 8002686:	f7fe fcf3 	bl	8001070 <__aeabi_f2iz>
 800268a:	4d33      	ldr	r5, [pc, #204]	; (8002758 <CreateNode+0xec>)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	6879      	ldr	r1, [r7, #4]
 8002690:	461a      	mov	r2, r3
 8002692:	0052      	lsls	r2, r2, #1
 8002694:	441a      	add	r2, r3
 8002696:	0053      	lsls	r3, r2, #1
 8002698:	461a      	mov	r2, r3
 800269a:	460b      	mov	r3, r1
 800269c:	011b      	lsls	r3, r3, #4
 800269e:	1a5b      	subs	r3, r3, r1
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	4413      	add	r3, r2
 80026a4:	4423      	add	r3, r4
 80026a6:	f845 0023 	str.w	r0, [r5, r3, lsl #2]
	Map[x][y].Lados[direcciones[IZQUIERDA]] = lecturaSensor(IZQUIERDA, Sensors);
 80026aa:	4929      	ldr	r1, [pc, #164]	; (8002750 <CreateNode+0xe4>)
 80026ac:	2001      	movs	r0, #1
 80026ae:	f000 fb27 	bl	8002d00 <lecturaSensor>
 80026b2:	4603      	mov	r3, r0
 80026b4:	4a27      	ldr	r2, [pc, #156]	; (8002754 <CreateNode+0xe8>)
 80026b6:	6854      	ldr	r4, [r2, #4]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7fe fcd9 	bl	8001070 <__aeabi_f2iz>
 80026be:	4d26      	ldr	r5, [pc, #152]	; (8002758 <CreateNode+0xec>)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	6879      	ldr	r1, [r7, #4]
 80026c4:	461a      	mov	r2, r3
 80026c6:	0052      	lsls	r2, r2, #1
 80026c8:	441a      	add	r2, r3
 80026ca:	0053      	lsls	r3, r2, #1
 80026cc:	461a      	mov	r2, r3
 80026ce:	460b      	mov	r3, r1
 80026d0:	011b      	lsls	r3, r3, #4
 80026d2:	1a5b      	subs	r3, r3, r1
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	4413      	add	r3, r2
 80026d8:	4423      	add	r3, r4
 80026da:	f845 0023 	str.w	r0, [r5, r3, lsl #2]
	Map[x][y].Lados[direcciones[DERECHA]] = lecturaSensor(DERECHA, Sensors);
 80026de:	491c      	ldr	r1, [pc, #112]	; (8002750 <CreateNode+0xe4>)
 80026e0:	2003      	movs	r0, #3
 80026e2:	f000 fb0d 	bl	8002d00 <lecturaSensor>
 80026e6:	4603      	mov	r3, r0
 80026e8:	4a1a      	ldr	r2, [pc, #104]	; (8002754 <CreateNode+0xe8>)
 80026ea:	68d4      	ldr	r4, [r2, #12]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7fe fcbf 	bl	8001070 <__aeabi_f2iz>
 80026f2:	4d19      	ldr	r5, [pc, #100]	; (8002758 <CreateNode+0xec>)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	6879      	ldr	r1, [r7, #4]
 80026f8:	461a      	mov	r2, r3
 80026fa:	0052      	lsls	r2, r2, #1
 80026fc:	441a      	add	r2, r3
 80026fe:	0053      	lsls	r3, r2, #1
 8002700:	461a      	mov	r2, r3
 8002702:	460b      	mov	r3, r1
 8002704:	011b      	lsls	r3, r3, #4
 8002706:	1a5b      	subs	r3, r3, r1
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	4413      	add	r3, r2
 800270c:	4423      	add	r3, r4
 800270e:	f845 0023 	str.w	r0, [r5, r3, lsl #2]
	Map[x][y].Lados[direcciones[ATRAS]] = lecturaSensor(ATRAS, Sensors);
 8002712:	490f      	ldr	r1, [pc, #60]	; (8002750 <CreateNode+0xe4>)
 8002714:	2002      	movs	r0, #2
 8002716:	f000 faf3 	bl	8002d00 <lecturaSensor>
 800271a:	4603      	mov	r3, r0
 800271c:	4a0d      	ldr	r2, [pc, #52]	; (8002754 <CreateNode+0xe8>)
 800271e:	6894      	ldr	r4, [r2, #8]
 8002720:	4618      	mov	r0, r3
 8002722:	f7fe fca5 	bl	8001070 <__aeabi_f2iz>
 8002726:	4d0c      	ldr	r5, [pc, #48]	; (8002758 <CreateNode+0xec>)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	6879      	ldr	r1, [r7, #4]
 800272c:	461a      	mov	r2, r3
 800272e:	0052      	lsls	r2, r2, #1
 8002730:	441a      	add	r2, r3
 8002732:	0053      	lsls	r3, r2, #1
 8002734:	461a      	mov	r2, r3
 8002736:	460b      	mov	r3, r1
 8002738:	011b      	lsls	r3, r3, #4
 800273a:	1a5b      	subs	r3, r3, r1
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	4413      	add	r3, r2
 8002740:	4423      	add	r3, r4
 8002742:	f845 0023 	str.w	r0, [r5, r3, lsl #2]

}
 8002746:	bf00      	nop
 8002748:	3708      	adds	r7, #8
 800274a:	46bd      	mov	sp, r7
 800274c:	bdb0      	pop	{r4, r5, r7, pc}
 800274e:	bf00      	nop
 8002750:	200011bc 	.word	0x200011bc
 8002754:	200011cc 	.word	0x200011cc
 8002758:	20001224 	.word	0x20001224

0800275c <rotateAxis>:

void rotateAxis(int direccion) {
 800275c:	b480      	push	{r7}
 800275e:	b085      	sub	sp, #20
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
	switch (direccion) {
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d021      	beq.n	80027ae <rotateAxis+0x52>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2b03      	cmp	r3, #3
 800276e:	d13c      	bne.n	80027ea <rotateAxis+0x8e>
	case DERECHA:
		for (int i = 0; i < 4; i++) {
 8002770:	2300      	movs	r3, #0
 8002772:	60fb      	str	r3, [r7, #12]
 8002774:	e017      	b.n	80027a6 <rotateAxis+0x4a>
			direcciones[i] = direcciones[i] - 1;
 8002776:	4a1f      	ldr	r2, [pc, #124]	; (80027f4 <rotateAxis+0x98>)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800277e:	1e5a      	subs	r2, r3, #1
 8002780:	491c      	ldr	r1, [pc, #112]	; (80027f4 <rotateAxis+0x98>)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (direcciones[i] == -1) {
 8002788:	4a1a      	ldr	r2, [pc, #104]	; (80027f4 <rotateAxis+0x98>)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002794:	d104      	bne.n	80027a0 <rotateAxis+0x44>
				direcciones[i] = 3;
 8002796:	4a17      	ldr	r2, [pc, #92]	; (80027f4 <rotateAxis+0x98>)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2103      	movs	r1, #3
 800279c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int i = 0; i < 4; i++) {
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	3301      	adds	r3, #1
 80027a4:	60fb      	str	r3, [r7, #12]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2b03      	cmp	r3, #3
 80027aa:	dde4      	ble.n	8002776 <rotateAxis+0x1a>
			}
		}
		break;
 80027ac:	e01d      	b.n	80027ea <rotateAxis+0x8e>
	case IZQUIERDA:
		for (int j = 0; j < 4; j++) {
 80027ae:	2300      	movs	r3, #0
 80027b0:	60bb      	str	r3, [r7, #8]
 80027b2:	e016      	b.n	80027e2 <rotateAxis+0x86>
			direcciones[j] = direcciones[j] + 1;
 80027b4:	4a0f      	ldr	r2, [pc, #60]	; (80027f4 <rotateAxis+0x98>)
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027bc:	1c5a      	adds	r2, r3, #1
 80027be:	490d      	ldr	r1, [pc, #52]	; (80027f4 <rotateAxis+0x98>)
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (direcciones[j] == 4) {
 80027c6:	4a0b      	ldr	r2, [pc, #44]	; (80027f4 <rotateAxis+0x98>)
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ce:	2b04      	cmp	r3, #4
 80027d0:	d104      	bne.n	80027dc <rotateAxis+0x80>
				direcciones[j] = 0;
 80027d2:	4a08      	ldr	r2, [pc, #32]	; (80027f4 <rotateAxis+0x98>)
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	2100      	movs	r1, #0
 80027d8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int j = 0; j < 4; j++) {
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	3301      	adds	r3, #1
 80027e0:	60bb      	str	r3, [r7, #8]
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	2b03      	cmp	r3, #3
 80027e6:	dde5      	ble.n	80027b4 <rotateAxis+0x58>
			}
		}
		break;
 80027e8:	bf00      	nop
	}
}
 80027ea:	bf00      	nop
 80027ec:	3714      	adds	r7, #20
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bc80      	pop	{r7}
 80027f2:	4770      	bx	lr
 80027f4:	200011cc 	.word	0x200011cc

080027f8 <resetAxis>:

void resetAxis() {
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
	for (int i = 0; i < 4; i++) {
 80027fe:	2300      	movs	r3, #0
 8002800:	607b      	str	r3, [r7, #4]
 8002802:	e007      	b.n	8002814 <resetAxis+0x1c>
		direcciones[i] = i;
 8002804:	4908      	ldr	r1, [pc, #32]	; (8002828 <resetAxis+0x30>)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < 4; i++) {
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	3301      	adds	r3, #1
 8002812:	607b      	str	r3, [r7, #4]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2b03      	cmp	r3, #3
 8002818:	ddf4      	ble.n	8002804 <resetAxis+0xc>
	}
}
 800281a:	bf00      	nop
 800281c:	bf00      	nop
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	bc80      	pop	{r7}
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	200011cc 	.word	0x200011cc

0800282c <HAL_ADC_ConvCpltCallback>:
		//SerialBT.println();
	}
}

// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 10; i++) {
 8002834:	2300      	movs	r3, #0
 8002836:	60fb      	str	r3, [r7, #12]
 8002838:	e029      	b.n	800288e <HAL_ADC_ConvCpltCallback+0x62>
		CNY70[i] = adc_buf[i * 4];
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	4a2c      	ldr	r2, [pc, #176]	; (80028f0 <HAL_ADC_ConvCpltCallback+0xc4>)
 8002840:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002844:	492b      	ldr	r1, [pc, #172]	; (80028f4 <HAL_ADC_ConvCpltCallback+0xc8>)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SHARP_1[i] = adc_buf[i * 4 + 1];
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	3301      	adds	r3, #1
 8002852:	4a27      	ldr	r2, [pc, #156]	; (80028f0 <HAL_ADC_ConvCpltCallback+0xc4>)
 8002854:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002858:	4927      	ldr	r1, [pc, #156]	; (80028f8 <HAL_ADC_ConvCpltCallback+0xcc>)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SHARP_2[i] = adc_buf[i * 4 + 2];
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	3302      	adds	r3, #2
 8002866:	4a22      	ldr	r2, [pc, #136]	; (80028f0 <HAL_ADC_ConvCpltCallback+0xc4>)
 8002868:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800286c:	4923      	ldr	r1, [pc, #140]	; (80028fc <HAL_ADC_ConvCpltCallback+0xd0>)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SHARP_3[i] = adc_buf[i * 4 + 3];
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	3303      	adds	r3, #3
 800287a:	4a1d      	ldr	r2, [pc, #116]	; (80028f0 <HAL_ADC_ConvCpltCallback+0xc4>)
 800287c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002880:	491f      	ldr	r1, [pc, #124]	; (8002900 <HAL_ADC_ConvCpltCallback+0xd4>)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < 10; i++) {
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	3301      	adds	r3, #1
 800288c:	60fb      	str	r3, [r7, #12]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2b09      	cmp	r3, #9
 8002892:	ddd2      	ble.n	800283a <HAL_ADC_ConvCpltCallback+0xe>
	}
	Sensors[0] = lecturaCNY70(10, CNY70);
 8002894:	4917      	ldr	r1, [pc, #92]	; (80028f4 <HAL_ADC_ConvCpltCallback+0xc8>)
 8002896:	200a      	movs	r0, #10
 8002898:	f000 fafa 	bl	8002e90 <lecturaCNY70>
 800289c:	4603      	mov	r3, r0
 800289e:	461a      	mov	r2, r3
 80028a0:	4b18      	ldr	r3, [pc, #96]	; (8002904 <HAL_ADC_ConvCpltCallback+0xd8>)
 80028a2:	601a      	str	r2, [r3, #0]
	Sensors[1] = lecSensor(10, SHARP_1);
 80028a4:	4914      	ldr	r1, [pc, #80]	; (80028f8 <HAL_ADC_ConvCpltCallback+0xcc>)
 80028a6:	200a      	movs	r0, #10
 80028a8:	f000 fa72 	bl	8002d90 <lecSensor>
 80028ac:	4603      	mov	r3, r0
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7fe fc04 	bl	80010bc <__aeabi_f2uiz>
 80028b4:	4603      	mov	r3, r0
 80028b6:	4a13      	ldr	r2, [pc, #76]	; (8002904 <HAL_ADC_ConvCpltCallback+0xd8>)
 80028b8:	6053      	str	r3, [r2, #4]
	Sensors[2] = lecSensor(10, SHARP_2);
 80028ba:	4910      	ldr	r1, [pc, #64]	; (80028fc <HAL_ADC_ConvCpltCallback+0xd0>)
 80028bc:	200a      	movs	r0, #10
 80028be:	f000 fa67 	bl	8002d90 <lecSensor>
 80028c2:	4603      	mov	r3, r0
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7fe fbf9 	bl	80010bc <__aeabi_f2uiz>
 80028ca:	4603      	mov	r3, r0
 80028cc:	4a0d      	ldr	r2, [pc, #52]	; (8002904 <HAL_ADC_ConvCpltCallback+0xd8>)
 80028ce:	6093      	str	r3, [r2, #8]
	Sensors[3] = lecSensor(10, SHARP_3);
 80028d0:	490b      	ldr	r1, [pc, #44]	; (8002900 <HAL_ADC_ConvCpltCallback+0xd4>)
 80028d2:	200a      	movs	r0, #10
 80028d4:	f000 fa5c 	bl	8002d90 <lecSensor>
 80028d8:	4603      	mov	r3, r0
 80028da:	4618      	mov	r0, r3
 80028dc:	f7fe fbee 	bl	80010bc <__aeabi_f2uiz>
 80028e0:	4603      	mov	r3, r0
 80028e2:	4a08      	ldr	r2, [pc, #32]	; (8002904 <HAL_ADC_ConvCpltCallback+0xd8>)
 80028e4:	60d3      	str	r3, [r2, #12]

}
 80028e6:	bf00      	nop
 80028e8:	3710      	adds	r7, #16
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	2000011c 	.word	0x2000011c
 80028f4:	2000111c 	.word	0x2000111c
 80028f8:	20001144 	.word	0x20001144
 80028fc:	2000116c 	.word	0x2000116c
 8002900:	20001194 	.word	0x20001194
 8002904:	200011bc 	.word	0x200011bc

08002908 <MAP>:

uint32_t MAP(uint32_t au32_IN, uint32_t au32_INmin, uint32_t au32_INmax,
		uint32_t au32_OUTmin, uint32_t au32_OUTmax) {
 8002908:	b480      	push	{r7}
 800290a:	b085      	sub	sp, #20
 800290c:	af00      	add	r7, sp, #0
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	607a      	str	r2, [r7, #4]
 8002914:	603b      	str	r3, [r7, #0]
	return ((((au32_IN - au32_INmin) * (au32_OUTmax - au32_OUTmin))
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	69b9      	ldr	r1, [r7, #24]
 800291e:	683a      	ldr	r2, [r7, #0]
 8002920:	1a8a      	subs	r2, r1, r2
 8002922:	fb03 f202 	mul.w	r2, r3, r2
			/ (au32_INmax - au32_INmin)) + au32_OUTmin);
 8002926:	6879      	ldr	r1, [r7, #4]
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	1acb      	subs	r3, r1, r3
 800292c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	4413      	add	r3, r2
}
 8002934:	4618      	mov	r0, r3
 8002936:	3714      	adds	r7, #20
 8002938:	46bd      	mov	sp, r7
 800293a:	bc80      	pop	{r7}
 800293c:	4770      	bx	lr

0800293e <constrain>:

int constrain(int x, int a, int b) {
 800293e:	b480      	push	{r7}
 8002940:	b085      	sub	sp, #20
 8002942:	af00      	add	r7, sp, #0
 8002944:	60f8      	str	r0, [r7, #12]
 8002946:	60b9      	str	r1, [r7, #8]
 8002948:	607a      	str	r2, [r7, #4]
	if (x < a) {
 800294a:	68fa      	ldr	r2, [r7, #12]
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	429a      	cmp	r2, r3
 8002950:	da01      	bge.n	8002956 <constrain+0x18>
		return a;
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	e006      	b.n	8002964 <constrain+0x26>
	} else if (b < x) {
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	429a      	cmp	r2, r3
 800295c:	da01      	bge.n	8002962 <constrain+0x24>
		return b;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	e000      	b.n	8002964 <constrain+0x26>
	} else
		return x;
 8002962:	68fb      	ldr	r3, [r7, #12]
}
 8002964:	4618      	mov	r0, r3
 8002966:	3714      	adds	r7, #20
 8002968:	46bd      	mov	sp, r7
 800296a:	bc80      	pop	{r7}
 800296c:	4770      	bx	lr
	...

08002970 <moveStraight>:

void moveStraight() {
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af02      	add	r7, sp, #8
	error = Sensors[3] - 9;
 8002976:	4b78      	ldr	r3, [pc, #480]	; (8002b58 <moveStraight+0x1e8>)
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	3b09      	subs	r3, #9
 800297c:	4618      	mov	r0, r3
 800297e:	f7fe f959 	bl	8000c34 <__aeabi_ui2f>
 8002982:	4603      	mov	r3, r0
 8002984:	4a75      	ldr	r2, [pc, #468]	; (8002b5c <moveStraight+0x1ec>)
 8002986:	6013      	str	r3, [r2, #0]

	timePrev = timeNow;
 8002988:	4b75      	ldr	r3, [pc, #468]	; (8002b60 <moveStraight+0x1f0>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a75      	ldr	r2, [pc, #468]	; (8002b64 <moveStraight+0x1f4>)
 800298e:	6013      	str	r3, [r2, #0]
	timeNow = HAL_GetTick();
 8002990:	f000 fdfe 	bl	8003590 <HAL_GetTick>
 8002994:	4603      	mov	r3, r0
 8002996:	4618      	mov	r0, r3
 8002998:	f7fe f94c 	bl	8000c34 <__aeabi_ui2f>
 800299c:	4603      	mov	r3, r0
 800299e:	4a70      	ldr	r2, [pc, #448]	; (8002b60 <moveStraight+0x1f0>)
 80029a0:	6013      	str	r3, [r2, #0]
	elapsedTime = (timeNow - timePrev) / 1000;
 80029a2:	4b6f      	ldr	r3, [pc, #444]	; (8002b60 <moveStraight+0x1f0>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a6f      	ldr	r2, [pc, #444]	; (8002b64 <moveStraight+0x1f4>)
 80029a8:	6812      	ldr	r2, [r2, #0]
 80029aa:	4611      	mov	r1, r2
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7fe f88f 	bl	8000ad0 <__aeabi_fsub>
 80029b2:	4603      	mov	r3, r0
 80029b4:	496c      	ldr	r1, [pc, #432]	; (8002b68 <moveStraight+0x1f8>)
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7fe fa48 	bl	8000e4c <__aeabi_fdiv>
 80029bc:	4603      	mov	r3, r0
 80029be:	461a      	mov	r2, r3
 80029c0:	4b6a      	ldr	r3, [pc, #424]	; (8002b6c <moveStraight+0x1fc>)
 80029c2:	601a      	str	r2, [r3, #0]
	pidD = KD * ((error - previousError) / elapsedTime);
 80029c4:	4b65      	ldr	r3, [pc, #404]	; (8002b5c <moveStraight+0x1ec>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a69      	ldr	r2, [pc, #420]	; (8002b70 <moveStraight+0x200>)
 80029ca:	6812      	ldr	r2, [r2, #0]
 80029cc:	4611      	mov	r1, r2
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7fe f87e 	bl	8000ad0 <__aeabi_fsub>
 80029d4:	4603      	mov	r3, r0
 80029d6:	461a      	mov	r2, r3
 80029d8:	4b64      	ldr	r3, [pc, #400]	; (8002b6c <moveStraight+0x1fc>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4619      	mov	r1, r3
 80029de:	4610      	mov	r0, r2
 80029e0:	f7fe fa34 	bl	8000e4c <__aeabi_fdiv>
 80029e4:	4603      	mov	r3, r0
 80029e6:	461a      	mov	r2, r3
 80029e8:	4b62      	ldr	r3, [pc, #392]	; (8002b74 <moveStraight+0x204>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4619      	mov	r1, r3
 80029ee:	4610      	mov	r0, r2
 80029f0:	f7fe f978 	bl	8000ce4 <__aeabi_fmul>
 80029f4:	4603      	mov	r3, r0
 80029f6:	461a      	mov	r2, r3
 80029f8:	4b5f      	ldr	r3, [pc, #380]	; (8002b78 <moveStraight+0x208>)
 80029fa:	601a      	str	r2, [r3, #0]
	pidP = KP * error;
 80029fc:	4b5f      	ldr	r3, [pc, #380]	; (8002b7c <moveStraight+0x20c>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a56      	ldr	r2, [pc, #344]	; (8002b5c <moveStraight+0x1ec>)
 8002a02:	6812      	ldr	r2, [r2, #0]
 8002a04:	4611      	mov	r1, r2
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7fe f96c 	bl	8000ce4 <__aeabi_fmul>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	461a      	mov	r2, r3
 8002a10:	4b5b      	ldr	r3, [pc, #364]	; (8002b80 <moveStraight+0x210>)
 8002a12:	601a      	str	r2, [r3, #0]
	pid = pidP + pidD;
 8002a14:	4b5a      	ldr	r3, [pc, #360]	; (8002b80 <moveStraight+0x210>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a57      	ldr	r2, [pc, #348]	; (8002b78 <moveStraight+0x208>)
 8002a1a:	6812      	ldr	r2, [r2, #0]
 8002a1c:	4611      	mov	r1, r2
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7fe f858 	bl	8000ad4 <__addsf3>
 8002a24:	4603      	mov	r3, r0
 8002a26:	461a      	mov	r2, r3
 8002a28:	4b56      	ldr	r3, [pc, #344]	; (8002b84 <moveStraight+0x214>)
 8002a2a:	601a      	str	r2, [r3, #0]
	if (pid > velocity) {
 8002a2c:	4b55      	ldr	r3, [pc, #340]	; (8002b84 <moveStraight+0x214>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a55      	ldr	r2, [pc, #340]	; (8002b88 <moveStraight+0x218>)
 8002a32:	6812      	ldr	r2, [r2, #0]
 8002a34:	4611      	mov	r1, r2
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7fe fb10 	bl	800105c <__aeabi_fcmpgt>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d003      	beq.n	8002a4a <moveStraight+0xda>
		pid = velocity;
 8002a42:	4b51      	ldr	r3, [pc, #324]	; (8002b88 <moveStraight+0x218>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a4f      	ldr	r2, [pc, #316]	; (8002b84 <moveStraight+0x214>)
 8002a48:	6013      	str	r3, [r2, #0]
	}
	if (pid < -velocity) {
 8002a4a:	4b4f      	ldr	r3, [pc, #316]	; (8002b88 <moveStraight+0x218>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002a52:	4a4c      	ldr	r2, [pc, #304]	; (8002b84 <moveStraight+0x214>)
 8002a54:	6812      	ldr	r2, [r2, #0]
 8002a56:	4611      	mov	r1, r2
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7fe faff 	bl	800105c <__aeabi_fcmpgt>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d005      	beq.n	8002a70 <moveStraight+0x100>
		pid = -velocity;
 8002a64:	4b48      	ldr	r3, [pc, #288]	; (8002b88 <moveStraight+0x218>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002a6c:	4a45      	ldr	r2, [pc, #276]	; (8002b84 <moveStraight+0x214>)
 8002a6e:	6013      	str	r3, [r2, #0]
	}

	motRight = velocity - pid;
 8002a70:	4b45      	ldr	r3, [pc, #276]	; (8002b88 <moveStraight+0x218>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a43      	ldr	r2, [pc, #268]	; (8002b84 <moveStraight+0x214>)
 8002a76:	6812      	ldr	r2, [r2, #0]
 8002a78:	4611      	mov	r1, r2
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7fe f828 	bl	8000ad0 <__aeabi_fsub>
 8002a80:	4603      	mov	r3, r0
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7fe faf4 	bl	8001070 <__aeabi_f2iz>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	4a40      	ldr	r2, [pc, #256]	; (8002b8c <moveStraight+0x21c>)
 8002a8c:	6013      	str	r3, [r2, #0]
	motLeft = velocity + pid;
 8002a8e:	4b3e      	ldr	r3, [pc, #248]	; (8002b88 <moveStraight+0x218>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a3c      	ldr	r2, [pc, #240]	; (8002b84 <moveStraight+0x214>)
 8002a94:	6812      	ldr	r2, [r2, #0]
 8002a96:	4611      	mov	r1, r2
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7fe f81b 	bl	8000ad4 <__addsf3>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7fe fae5 	bl	8001070 <__aeabi_f2iz>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	4a39      	ldr	r2, [pc, #228]	; (8002b90 <moveStraight+0x220>)
 8002aaa:	6013      	str	r3, [r2, #0]
	if (motLeft < 0) {
 8002aac:	4b38      	ldr	r3, [pc, #224]	; (8002b90 <moveStraight+0x220>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	da02      	bge.n	8002aba <moveStraight+0x14a>
		motLeft = 0;
 8002ab4:	4b36      	ldr	r3, [pc, #216]	; (8002b90 <moveStraight+0x220>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	601a      	str	r2, [r3, #0]
	}
	if (motRight < 0) {
 8002aba:	4b34      	ldr	r3, [pc, #208]	; (8002b8c <moveStraight+0x21c>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	da02      	bge.n	8002ac8 <moveStraight+0x158>
		motRight = 0;
 8002ac2:	4b32      	ldr	r3, [pc, #200]	; (8002b8c <moveStraight+0x21c>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	601a      	str	r2, [r3, #0]
	}

	//setMotors(motLeft, motRight);
	previousError = error;
 8002ac8:	4b24      	ldr	r3, [pc, #144]	; (8002b5c <moveStraight+0x1ec>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a28      	ldr	r2, [pc, #160]	; (8002b70 <moveStraight+0x200>)
 8002ace:	6013      	str	r3, [r2, #0]
	motRight = constrain(motRight, -1000, 1000);
 8002ad0:	4b2e      	ldr	r3, [pc, #184]	; (8002b8c <moveStraight+0x21c>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002ad8:	492e      	ldr	r1, [pc, #184]	; (8002b94 <moveStraight+0x224>)
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7ff ff2f 	bl	800293e <constrain>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	4a2a      	ldr	r2, [pc, #168]	; (8002b8c <moveStraight+0x21c>)
 8002ae4:	6013      	str	r3, [r2, #0]
	motLeft = constrain(motLeft, -1000, 1000);
 8002ae6:	4b2a      	ldr	r3, [pc, #168]	; (8002b90 <moveStraight+0x220>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002aee:	4929      	ldr	r1, [pc, #164]	; (8002b94 <moveStraight+0x224>)
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7ff ff24 	bl	800293e <constrain>
 8002af6:	4603      	mov	r3, r0
 8002af8:	4a25      	ldr	r2, [pc, #148]	; (8002b90 <moveStraight+0x220>)
 8002afa:	6013      	str	r3, [r2, #0]
	motRight = MAP(motRight, -1000, 1000, 0, 15000);
 8002afc:	4b23      	ldr	r3, [pc, #140]	; (8002b8c <moveStraight+0x21c>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f643 2398 	movw	r3, #15000	; 0x3a98
 8002b06:	9300      	str	r3, [sp, #0]
 8002b08:	2300      	movs	r3, #0
 8002b0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002b0e:	4921      	ldr	r1, [pc, #132]	; (8002b94 <moveStraight+0x224>)
 8002b10:	f7ff fefa 	bl	8002908 <MAP>
 8002b14:	4603      	mov	r3, r0
 8002b16:	461a      	mov	r2, r3
 8002b18:	4b1c      	ldr	r3, [pc, #112]	; (8002b8c <moveStraight+0x21c>)
 8002b1a:	601a      	str	r2, [r3, #0]
	motLeft = MAP(motLeft, -1000, 1000, 0, 15000);
 8002b1c:	4b1c      	ldr	r3, [pc, #112]	; (8002b90 <moveStraight+0x220>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f643 2398 	movw	r3, #15000	; 0x3a98
 8002b26:	9300      	str	r3, [sp, #0]
 8002b28:	2300      	movs	r3, #0
 8002b2a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002b2e:	4919      	ldr	r1, [pc, #100]	; (8002b94 <moveStraight+0x224>)
 8002b30:	f7ff feea 	bl	8002908 <MAP>
 8002b34:	4603      	mov	r3, r0
 8002b36:	461a      	mov	r2, r3
 8002b38:	4b15      	ldr	r3, [pc, #84]	; (8002b90 <moveStraight+0x220>)
 8002b3a:	601a      	str	r2, [r3, #0]
	TIM2->CCR3 = motRight;
 8002b3c:	4b13      	ldr	r3, [pc, #76]	; (8002b8c <moveStraight+0x21c>)
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b44:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM2->CCR4 = motLeft;
 8002b46:	4b12      	ldr	r3, [pc, #72]	; (8002b90 <moveStraight+0x220>)
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b4e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002b50:	bf00      	nop
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	200011bc 	.word	0x200011bc
 8002b5c:	20001b84 	.word	0x20001b84
 8002b60:	20001b94 	.word	0x20001b94
 8002b64:	20001b98 	.word	0x20001b98
 8002b68:	447a0000 	.word	0x447a0000
 8002b6c:	20001b90 	.word	0x20001b90
 8002b70:	20001b8c 	.word	0x20001b8c
 8002b74:	200011ec 	.word	0x200011ec
 8002b78:	20001ba0 	.word	0x20001ba0
 8002b7c:	200011e8 	.word	0x200011e8
 8002b80:	20001b9c 	.word	0x20001b9c
 8002b84:	20001b88 	.word	0x20001b88
 8002b88:	200011f0 	.word	0x200011f0
 8002b8c:	20001ba8 	.word	0x20001ba8
 8002b90:	20001ba4 	.word	0x20001ba4
 8002b94:	fffffc18 	.word	0xfffffc18

08002b98 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b9c:	b672      	cpsid	i
}
 8002b9e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002ba0:	e7fe      	b.n	8002ba0 <Error_Handler+0x8>
 8002ba2:	0000      	movs	r0, r0
 8002ba4:	0000      	movs	r0, r0
	...

08002ba8 <calcularDistancia>:
#include "motors.h"


int counterD, counterI;

float calcularDistancia(int counter) {
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  return ((counter) * 2.51 / 10);
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f7fd fc1f 	bl	80003f4 <__aeabi_i2d>
 8002bb6:	a30c      	add	r3, pc, #48	; (adr r3, 8002be8 <calcularDistancia+0x40>)
 8002bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bbc:	f7fd fc84 	bl	80004c8 <__aeabi_dmul>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	4610      	mov	r0, r2
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	f04f 0200 	mov.w	r2, #0
 8002bcc:	4b08      	ldr	r3, [pc, #32]	; (8002bf0 <calcularDistancia+0x48>)
 8002bce:	f7fd fda5 	bl	800071c <__aeabi_ddiv>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	4610      	mov	r0, r2
 8002bd8:	4619      	mov	r1, r3
 8002bda:	f7fd ff25 	bl	8000a28 <__aeabi_d2f>
 8002bde:	4603      	mov	r3, r0
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3708      	adds	r7, #8
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	e147ae14 	.word	0xe147ae14
 8002bec:	4004147a 	.word	0x4004147a
 8002bf0:	40240000 	.word	0x40240000

08002bf4 <runMotor>:
	} else {
		TIM4->CCR3 = power;
	}
}

void runMotor(int dir, int motor) {
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
	switch (dir) {
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2b05      	cmp	r3, #5
 8002c02:	d03f      	beq.n	8002c84 <runMotor+0x90>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2b05      	cmp	r3, #5
 8002c08:	dc57      	bgt.n	8002cba <runMotor+0xc6>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d003      	beq.n	8002c18 <runMotor+0x24>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d01b      	beq.n	8002c4e <runMotor+0x5a>
			HAL_GPIO_WritePin(BIN1, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(BIN2, GPIO_PIN_RESET);
		}
		break;
	}
}
 8002c16:	e050      	b.n	8002cba <runMotor+0xc6>
		if (motor == MOTOR_A) {
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d10a      	bne.n	8002c34 <runMotor+0x40>
			HAL_GPIO_WritePin(AIN1, GPIO_PIN_SET);
 8002c1e:	2201      	movs	r2, #1
 8002c20:	2108      	movs	r1, #8
 8002c22:	4828      	ldr	r0, [pc, #160]	; (8002cc4 <runMotor+0xd0>)
 8002c24:	f001 fdeb 	bl	80047fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(AIN2, GPIO_PIN_RESET);
 8002c28:	2200      	movs	r2, #0
 8002c2a:	2110      	movs	r1, #16
 8002c2c:	4825      	ldr	r0, [pc, #148]	; (8002cc4 <runMotor+0xd0>)
 8002c2e:	f001 fde6 	bl	80047fe <HAL_GPIO_WritePin>
		break;
 8002c32:	e042      	b.n	8002cba <runMotor+0xc6>
			HAL_GPIO_WritePin(BIN1, GPIO_PIN_RESET);
 8002c34:	2200      	movs	r2, #0
 8002c36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002c3a:	4823      	ldr	r0, [pc, #140]	; (8002cc8 <runMotor+0xd4>)
 8002c3c:	f001 fddf 	bl	80047fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BIN2, GPIO_PIN_SET);
 8002c40:	2201      	movs	r2, #1
 8002c42:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002c46:	4820      	ldr	r0, [pc, #128]	; (8002cc8 <runMotor+0xd4>)
 8002c48:	f001 fdd9 	bl	80047fe <HAL_GPIO_WritePin>
		break;
 8002c4c:	e035      	b.n	8002cba <runMotor+0xc6>
		if (motor == MOTOR_A) {
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d10a      	bne.n	8002c6a <runMotor+0x76>
			HAL_GPIO_WritePin(AIN1, GPIO_PIN_RESET);
 8002c54:	2200      	movs	r2, #0
 8002c56:	2108      	movs	r1, #8
 8002c58:	481a      	ldr	r0, [pc, #104]	; (8002cc4 <runMotor+0xd0>)
 8002c5a:	f001 fdd0 	bl	80047fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(AIN2, GPIO_PIN_SET);
 8002c5e:	2201      	movs	r2, #1
 8002c60:	2110      	movs	r1, #16
 8002c62:	4818      	ldr	r0, [pc, #96]	; (8002cc4 <runMotor+0xd0>)
 8002c64:	f001 fdcb 	bl	80047fe <HAL_GPIO_WritePin>
		break;
 8002c68:	e027      	b.n	8002cba <runMotor+0xc6>
			HAL_GPIO_WritePin(BIN1, GPIO_PIN_SET);
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002c70:	4815      	ldr	r0, [pc, #84]	; (8002cc8 <runMotor+0xd4>)
 8002c72:	f001 fdc4 	bl	80047fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BIN2, GPIO_PIN_RESET);
 8002c76:	2200      	movs	r2, #0
 8002c78:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002c7c:	4812      	ldr	r0, [pc, #72]	; (8002cc8 <runMotor+0xd4>)
 8002c7e:	f001 fdbe 	bl	80047fe <HAL_GPIO_WritePin>
		break;
 8002c82:	e01a      	b.n	8002cba <runMotor+0xc6>
		if (motor == MOTOR_A) {
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d10a      	bne.n	8002ca0 <runMotor+0xac>
			HAL_GPIO_WritePin(AIN1, GPIO_PIN_RESET);
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	2108      	movs	r1, #8
 8002c8e:	480d      	ldr	r0, [pc, #52]	; (8002cc4 <runMotor+0xd0>)
 8002c90:	f001 fdb5 	bl	80047fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(AIN2, GPIO_PIN_RESET);
 8002c94:	2200      	movs	r2, #0
 8002c96:	2110      	movs	r1, #16
 8002c98:	480a      	ldr	r0, [pc, #40]	; (8002cc4 <runMotor+0xd0>)
 8002c9a:	f001 fdb0 	bl	80047fe <HAL_GPIO_WritePin>
		break;
 8002c9e:	e00b      	b.n	8002cb8 <runMotor+0xc4>
			HAL_GPIO_WritePin(BIN1, GPIO_PIN_RESET);
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ca6:	4808      	ldr	r0, [pc, #32]	; (8002cc8 <runMotor+0xd4>)
 8002ca8:	f001 fda9 	bl	80047fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BIN2, GPIO_PIN_RESET);
 8002cac:	2200      	movs	r2, #0
 8002cae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002cb2:	4805      	ldr	r0, [pc, #20]	; (8002cc8 <runMotor+0xd4>)
 8002cb4:	f001 fda3 	bl	80047fe <HAL_GPIO_WritePin>
		break;
 8002cb8:	bf00      	nop
}
 8002cba:	bf00      	nop
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	40010c00 	.word	0x40010c00
 8002cc8:	40010800 	.word	0x40010800

08002ccc <wallDetector>:
 */
#include "sharp.h"

#include <math.h>

int wallDetector(int n, int d) {
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
	if (d == ADELANTE) {
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d106      	bne.n	8002cea <wallDetector+0x1e>
		if (n < 16) {
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2b0f      	cmp	r3, #15
 8002ce0:	dc01      	bgt.n	8002ce6 <wallDetector+0x1a>
			return 1;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e007      	b.n	8002cf6 <wallDetector+0x2a>
		} else {
			return 0;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	e005      	b.n	8002cf6 <wallDetector+0x2a>
		}
	}
	if (n < 16) {
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2b0f      	cmp	r3, #15
 8002cee:	dc01      	bgt.n	8002cf4 <wallDetector+0x28>
		return 1;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e000      	b.n	8002cf6 <wallDetector+0x2a>
	} else {
		return 0;
 8002cf4:	2300      	movs	r3, #0
	}

}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bc80      	pop	{r7}
 8002cfe:	4770      	bx	lr

08002d00 <lecturaSensor>:

float lecturaSensor(int direccion, uint32_t values[4]) {
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
	switch (direccion) {
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2b03      	cmp	r3, #3
 8002d0e:	d835      	bhi.n	8002d7c <lecturaSensor+0x7c>
 8002d10:	a201      	add	r2, pc, #4	; (adr r2, 8002d18 <lecturaSensor+0x18>)
 8002d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d16:	bf00      	nop
 8002d18:	08002d29 	.word	0x08002d29
 8002d1c:	08002d5d 	.word	0x08002d5d
 8002d20:	08002d77 	.word	0x08002d77
 8002d24:	08002d43 	.word	0x08002d43
	case ADELANTE:
		return wallDetector(values[2], direccion);
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	3308      	adds	r3, #8
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	6879      	ldr	r1, [r7, #4]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7ff ffcb 	bl	8002ccc <wallDetector>
 8002d36:	4603      	mov	r3, r0
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7fd ff7f 	bl	8000c3c <__aeabi_i2f>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	e01d      	b.n	8002d7e <lecturaSensor+0x7e>
		break;
	case DERECHA:
		return wallDetector(values[1], direccion);
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	3304      	adds	r3, #4
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	6879      	ldr	r1, [r7, #4]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7ff ffbe 	bl	8002ccc <wallDetector>
 8002d50:	4603      	mov	r3, r0
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7fd ff72 	bl	8000c3c <__aeabi_i2f>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	e010      	b.n	8002d7e <lecturaSensor+0x7e>
		break;
	case IZQUIERDA:
		return wallDetector(values[3], direccion);
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	330c      	adds	r3, #12
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	6879      	ldr	r1, [r7, #4]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7ff ffb1 	bl	8002ccc <wallDetector>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7fd ff65 	bl	8000c3c <__aeabi_i2f>
 8002d72:	4603      	mov	r3, r0
 8002d74:	e003      	b.n	8002d7e <lecturaSensor+0x7e>
		break;
	case ATRAS:
		return 0;
 8002d76:	f04f 0300 	mov.w	r3, #0
 8002d7a:	e000      	b.n	8002d7e <lecturaSensor+0x7e>
		break;
	}
	return 15;
 8002d7c:	4b02      	ldr	r3, [pc, #8]	; (8002d88 <lecturaSensor+0x88>)
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3708      	adds	r7, #8
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	41700000 	.word	0x41700000
 8002d8c:	00000000 	.word	0x00000000

08002d90 <lecSensor>:

float lecSensor(int n, uint32_t values[10]) {
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b086      	sub	sp, #24
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
	long suma = 0;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < n; i++) {
 8002d9e:	2300      	movs	r3, #0
 8002da0:	613b      	str	r3, [r7, #16]
 8002da2:	e00a      	b.n	8002dba <lecSensor+0x2a>
		suma = suma + values[i];
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	4413      	add	r3, r2
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	4413      	add	r3, r2
 8002db2:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < n; i++) {
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	3301      	adds	r3, #1
 8002db8:	613b      	str	r3, [r7, #16]
 8002dba:	693a      	ldr	r2, [r7, #16]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	dbf0      	blt.n	8002da4 <lecSensor+0x14>
	}
	float adc = suma / n;
 8002dc2:	697a      	ldr	r2, [r7, #20]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	fb92 f3f3 	sdiv	r3, r2, r3
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7fd ff36 	bl	8000c3c <__aeabi_i2f>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	60bb      	str	r3, [r7, #8]
	float volts = adc * 0.0008056640; // value from sensor * (5/1024)
 8002dd4:	68b8      	ldr	r0, [r7, #8]
 8002dd6:	f7fd fb1f 	bl	8000418 <__aeabi_f2d>
 8002dda:	a323      	add	r3, pc, #140	; (adr r3, 8002e68 <lecSensor+0xd8>)
 8002ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002de0:	f7fd fb72 	bl	80004c8 <__aeabi_dmul>
 8002de4:	4602      	mov	r2, r0
 8002de6:	460b      	mov	r3, r1
 8002de8:	4610      	mov	r0, r2
 8002dea:	4619      	mov	r1, r3
 8002dec:	f7fd fe1c 	bl	8000a28 <__aeabi_d2f>
 8002df0:	4603      	mov	r3, r0
 8002df2:	60fb      	str	r3, [r7, #12]
	if (volts <= 0.35)
 8002df4:	68f8      	ldr	r0, [r7, #12]
 8002df6:	f7fd fb0f 	bl	8000418 <__aeabi_f2d>
 8002dfa:	a31d      	add	r3, pc, #116	; (adr r3, 8002e70 <lecSensor+0xe0>)
 8002dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e00:	f7fd fdde 	bl	80009c0 <__aeabi_dcmple>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <lecSensor+0x7e>
		volts = 0.35;
 8002e0a:	4b1d      	ldr	r3, [pc, #116]	; (8002e80 <lecSensor+0xf0>)
 8002e0c:	60fb      	str	r3, [r7, #12]
	volts = pow(volts - 0.3, 0.25);/*convertimos a cm con un aproximacion grafica*/
 8002e0e:	68f8      	ldr	r0, [r7, #12]
 8002e10:	f7fd fb02 	bl	8000418 <__aeabi_f2d>
 8002e14:	a318      	add	r3, pc, #96	; (adr r3, 8002e78 <lecSensor+0xe8>)
 8002e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e1a:	f7fd f99d 	bl	8000158 <__aeabi_dsub>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	460b      	mov	r3, r1
 8002e22:	4610      	mov	r0, r2
 8002e24:	4619      	mov	r1, r3
 8002e26:	f04f 0200 	mov.w	r2, #0
 8002e2a:	4b16      	ldr	r3, [pc, #88]	; (8002e84 <lecSensor+0xf4>)
 8002e2c:	f003 fbf4 	bl	8006618 <pow>
 8002e30:	4602      	mov	r2, r0
 8002e32:	460b      	mov	r3, r1
 8002e34:	4610      	mov	r0, r2
 8002e36:	4619      	mov	r1, r3
 8002e38:	f7fd fdf6 	bl	8000a28 <__aeabi_d2f>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	60fb      	str	r3, [r7, #12]
	volts = 27.5 / volts; /*no preguntar por los valores*/
 8002e40:	68f9      	ldr	r1, [r7, #12]
 8002e42:	4811      	ldr	r0, [pc, #68]	; (8002e88 <lecSensor+0xf8>)
 8002e44:	f7fe f802 	bl	8000e4c <__aeabi_fdiv>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	60fb      	str	r3, [r7, #12]
	volts -= 18;
 8002e4c:	490f      	ldr	r1, [pc, #60]	; (8002e8c <lecSensor+0xfc>)
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	f7fd fe3e 	bl	8000ad0 <__aeabi_fsub>
 8002e54:	4603      	mov	r3, r0
 8002e56:	60fb      	str	r3, [r7, #12]

	return volts;
 8002e58:	68fb      	ldr	r3, [r7, #12]

}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3718      	adds	r7, #24
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	f3af 8000 	nop.w
 8002e68:	440a4e96 	.word	0x440a4e96
 8002e6c:	3f4a6666 	.word	0x3f4a6666
 8002e70:	66666666 	.word	0x66666666
 8002e74:	3fd66666 	.word	0x3fd66666
 8002e78:	33333333 	.word	0x33333333
 8002e7c:	3fd33333 	.word	0x3fd33333
 8002e80:	3eb33333 	.word	0x3eb33333
 8002e84:	3fd00000 	.word	0x3fd00000
 8002e88:	41dc0000 	.word	0x41dc0000
 8002e8c:	41900000 	.word	0x41900000

08002e90 <lecturaCNY70>:

int lecturaCNY70(int n, uint32_t values[10]) {
 8002e90:	b480      	push	{r7}
 8002e92:	b087      	sub	sp, #28
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	6039      	str	r1, [r7, #0]
	long suma = 0;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < n; i++) {
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	613b      	str	r3, [r7, #16]
 8002ea2:	e00a      	b.n	8002eba <lecturaCNY70+0x2a>
		suma = suma + values[i];
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	683a      	ldr	r2, [r7, #0]
 8002eaa:	4413      	add	r3, r2
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	4413      	add	r3, r2
 8002eb2:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < n; i++) {
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	613b      	str	r3, [r7, #16]
 8002eba:	693a      	ldr	r2, [r7, #16]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	dbf0      	blt.n	8002ea4 <lecturaCNY70+0x14>
	}
	int adc = (suma / n);
 8002ec2:	697a      	ldr	r2, [r7, #20]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	fb92 f3f3 	sdiv	r3, r2, r3
 8002eca:	60fb      	str	r3, [r7, #12]
	if (adc < 800) {
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8002ed2:	da01      	bge.n	8002ed8 <lecturaCNY70+0x48>
		return BLANCO;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	e000      	b.n	8002eda <lecturaCNY70+0x4a>
	} else {
		return NEGRO;
 8002ed8:	2301      	movs	r3, #1
	}
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	371c      	adds	r7, #28
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bc80      	pop	{r7}
 8002ee2:	4770      	bx	lr

08002ee4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b085      	sub	sp, #20
 8002ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002eea:	4b15      	ldr	r3, [pc, #84]	; (8002f40 <HAL_MspInit+0x5c>)
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	4a14      	ldr	r2, [pc, #80]	; (8002f40 <HAL_MspInit+0x5c>)
 8002ef0:	f043 0301 	orr.w	r3, r3, #1
 8002ef4:	6193      	str	r3, [r2, #24]
 8002ef6:	4b12      	ldr	r3, [pc, #72]	; (8002f40 <HAL_MspInit+0x5c>)
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	60bb      	str	r3, [r7, #8]
 8002f00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f02:	4b0f      	ldr	r3, [pc, #60]	; (8002f40 <HAL_MspInit+0x5c>)
 8002f04:	69db      	ldr	r3, [r3, #28]
 8002f06:	4a0e      	ldr	r2, [pc, #56]	; (8002f40 <HAL_MspInit+0x5c>)
 8002f08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f0c:	61d3      	str	r3, [r2, #28]
 8002f0e:	4b0c      	ldr	r3, [pc, #48]	; (8002f40 <HAL_MspInit+0x5c>)
 8002f10:	69db      	ldr	r3, [r3, #28]
 8002f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f16:	607b      	str	r3, [r7, #4]
 8002f18:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002f1a:	4b0a      	ldr	r3, [pc, #40]	; (8002f44 <HAL_MspInit+0x60>)
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	60fb      	str	r3, [r7, #12]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002f26:	60fb      	str	r3, [r7, #12]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f2e:	60fb      	str	r3, [r7, #12]
 8002f30:	4a04      	ldr	r2, [pc, #16]	; (8002f44 <HAL_MspInit+0x60>)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f36:	bf00      	nop
 8002f38:	3714      	adds	r7, #20
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bc80      	pop	{r7}
 8002f3e:	4770      	bx	lr
 8002f40:	40021000 	.word	0x40021000
 8002f44:	40010000 	.word	0x40010000

08002f48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f4c:	e7fe      	b.n	8002f4c <NMI_Handler+0x4>

08002f4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f4e:	b480      	push	{r7}
 8002f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f52:	e7fe      	b.n	8002f52 <HardFault_Handler+0x4>

08002f54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f58:	e7fe      	b.n	8002f58 <MemManage_Handler+0x4>

08002f5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f5a:	b480      	push	{r7}
 8002f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f5e:	e7fe      	b.n	8002f5e <BusFault_Handler+0x4>

08002f60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f60:	b480      	push	{r7}
 8002f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f64:	e7fe      	b.n	8002f64 <UsageFault_Handler+0x4>

08002f66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f66:	b480      	push	{r7}
 8002f68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f6a:	bf00      	nop
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bc80      	pop	{r7}
 8002f70:	4770      	bx	lr

08002f72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f72:	b480      	push	{r7}
 8002f74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f76:	bf00      	nop
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bc80      	pop	{r7}
 8002f7c:	4770      	bx	lr

08002f7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f7e:	b480      	push	{r7}
 8002f80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f82:	bf00      	nop
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bc80      	pop	{r7}
 8002f88:	4770      	bx	lr

08002f8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f8e:	f000 faed 	bl	800356c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f92:	bf00      	nop
 8002f94:	bd80      	pop	{r7, pc}
	...

08002f98 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002f9c:	4802      	ldr	r0, [pc, #8]	; (8002fa8 <DMA1_Channel1_IRQHandler+0x10>)
 8002f9e:	f001 f95f 	bl	8004260 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002fa2:	bf00      	nop
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	200000d8 	.word	0x200000d8

08002fac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002fb0:	4802      	ldr	r0, [pc, #8]	; (8002fbc <USART1_IRQHandler+0x10>)
 8002fb2:	f002 ff39 	bl	8005e28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002fb6:	bf00      	nop
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	20001c84 	.word	0x20001c84

08002fc0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002fc4:	bf00      	nop
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bc80      	pop	{r7}
 8002fca:	4770      	bx	lr

08002fcc <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b08a      	sub	sp, #40	; 0x28
 8002fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fd2:	f107 0320 	add.w	r3, r7, #32
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	601a      	str	r2, [r3, #0]
 8002fda:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002fdc:	1d3b      	adds	r3, r7, #4
 8002fde:	2200      	movs	r2, #0
 8002fe0:	601a      	str	r2, [r3, #0]
 8002fe2:	605a      	str	r2, [r3, #4]
 8002fe4:	609a      	str	r2, [r3, #8]
 8002fe6:	60da      	str	r2, [r3, #12]
 8002fe8:	611a      	str	r2, [r3, #16]
 8002fea:	615a      	str	r2, [r3, #20]
 8002fec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002fee:	4b28      	ldr	r3, [pc, #160]	; (8003090 <MX_TIM2_Init+0xc4>)
 8002ff0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002ff4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002ff6:	4b26      	ldr	r3, [pc, #152]	; (8003090 <MX_TIM2_Init+0xc4>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ffc:	4b24      	ldr	r3, [pc, #144]	; (8003090 <MX_TIM2_Init+0xc4>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8003002:	4b23      	ldr	r3, [pc, #140]	; (8003090 <MX_TIM2_Init+0xc4>)
 8003004:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003008:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800300a:	4b21      	ldr	r3, [pc, #132]	; (8003090 <MX_TIM2_Init+0xc4>)
 800300c:	2200      	movs	r2, #0
 800300e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003010:	4b1f      	ldr	r3, [pc, #124]	; (8003090 <MX_TIM2_Init+0xc4>)
 8003012:	2200      	movs	r2, #0
 8003014:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003016:	481e      	ldr	r0, [pc, #120]	; (8003090 <MX_TIM2_Init+0xc4>)
 8003018:	f002 f8da 	bl	80051d0 <HAL_TIM_PWM_Init>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d001      	beq.n	8003026 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8003022:	f7ff fdb9 	bl	8002b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003026:	2300      	movs	r3, #0
 8003028:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800302a:	2300      	movs	r3, #0
 800302c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800302e:	f107 0320 	add.w	r3, r7, #32
 8003032:	4619      	mov	r1, r3
 8003034:	4816      	ldr	r0, [pc, #88]	; (8003090 <MX_TIM2_Init+0xc4>)
 8003036:	f002 fdb9 	bl	8005bac <HAL_TIMEx_MasterConfigSynchronization>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d001      	beq.n	8003044 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8003040:	f7ff fdaa 	bl	8002b98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003044:	2360      	movs	r3, #96	; 0x60
 8003046:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003048:	2300      	movs	r3, #0
 800304a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800304c:	2300      	movs	r3, #0
 800304e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003050:	2300      	movs	r3, #0
 8003052:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003054:	1d3b      	adds	r3, r7, #4
 8003056:	2208      	movs	r2, #8
 8003058:	4619      	mov	r1, r3
 800305a:	480d      	ldr	r0, [pc, #52]	; (8003090 <MX_TIM2_Init+0xc4>)
 800305c:	f002 fada 	bl	8005614 <HAL_TIM_PWM_ConfigChannel>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8003066:	f7ff fd97 	bl	8002b98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800306a:	1d3b      	adds	r3, r7, #4
 800306c:	220c      	movs	r2, #12
 800306e:	4619      	mov	r1, r3
 8003070:	4807      	ldr	r0, [pc, #28]	; (8003090 <MX_TIM2_Init+0xc4>)
 8003072:	f002 facf 	bl	8005614 <HAL_TIM_PWM_ConfigChannel>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d001      	beq.n	8003080 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800307c:	f7ff fd8c 	bl	8002b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003080:	4803      	ldr	r0, [pc, #12]	; (8003090 <MX_TIM2_Init+0xc4>)
 8003082:	f000 f943 	bl	800330c <HAL_TIM_MspPostInit>

}
 8003086:	bf00      	nop
 8003088:	3728      	adds	r7, #40	; 0x28
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	20001bac 	.word	0x20001bac

08003094 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b08c      	sub	sp, #48	; 0x30
 8003098:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800309a:	f107 030c 	add.w	r3, r7, #12
 800309e:	2224      	movs	r2, #36	; 0x24
 80030a0:	2100      	movs	r1, #0
 80030a2:	4618      	mov	r0, r3
 80030a4:	f004 f9c4 	bl	8007430 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030a8:	1d3b      	adds	r3, r7, #4
 80030aa:	2200      	movs	r2, #0
 80030ac:	601a      	str	r2, [r3, #0]
 80030ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80030b0:	4b20      	ldr	r3, [pc, #128]	; (8003134 <MX_TIM3_Init+0xa0>)
 80030b2:	4a21      	ldr	r2, [pc, #132]	; (8003138 <MX_TIM3_Init+0xa4>)
 80030b4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80030b6:	4b1f      	ldr	r3, [pc, #124]	; (8003134 <MX_TIM3_Init+0xa0>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030bc:	4b1d      	ldr	r3, [pc, #116]	; (8003134 <MX_TIM3_Init+0xa0>)
 80030be:	2200      	movs	r2, #0
 80030c0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80030c2:	4b1c      	ldr	r3, [pc, #112]	; (8003134 <MX_TIM3_Init+0xa0>)
 80030c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80030c8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030ca:	4b1a      	ldr	r3, [pc, #104]	; (8003134 <MX_TIM3_Init+0xa0>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030d0:	4b18      	ldr	r3, [pc, #96]	; (8003134 <MX_TIM3_Init+0xa0>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80030d6:	2303      	movs	r3, #3
 80030d8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80030da:	2300      	movs	r3, #0
 80030dc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80030de:	2301      	movs	r3, #1
 80030e0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80030e2:	2300      	movs	r3, #0
 80030e4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80030e6:	230a      	movs	r3, #10
 80030e8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80030ea:	2300      	movs	r3, #0
 80030ec:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80030ee:	2301      	movs	r3, #1
 80030f0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80030f2:	2300      	movs	r3, #0
 80030f4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80030f6:	2300      	movs	r3, #0
 80030f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80030fa:	f107 030c 	add.w	r3, r7, #12
 80030fe:	4619      	mov	r1, r3
 8003100:	480c      	ldr	r0, [pc, #48]	; (8003134 <MX_TIM3_Init+0xa0>)
 8003102:	f002 f957 	bl	80053b4 <HAL_TIM_Encoder_Init>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d001      	beq.n	8003110 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800310c:	f7ff fd44 	bl	8002b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003110:	2300      	movs	r3, #0
 8003112:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003114:	2300      	movs	r3, #0
 8003116:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003118:	1d3b      	adds	r3, r7, #4
 800311a:	4619      	mov	r1, r3
 800311c:	4805      	ldr	r0, [pc, #20]	; (8003134 <MX_TIM3_Init+0xa0>)
 800311e:	f002 fd45 	bl	8005bac <HAL_TIMEx_MasterConfigSynchronization>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d001      	beq.n	800312c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8003128:	f7ff fd36 	bl	8002b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800312c:	bf00      	nop
 800312e:	3730      	adds	r7, #48	; 0x30
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}
 8003134:	20001bf4 	.word	0x20001bf4
 8003138:	40000400 	.word	0x40000400

0800313c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b08c      	sub	sp, #48	; 0x30
 8003140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003142:	f107 030c 	add.w	r3, r7, #12
 8003146:	2224      	movs	r2, #36	; 0x24
 8003148:	2100      	movs	r1, #0
 800314a:	4618      	mov	r0, r3
 800314c:	f004 f970 	bl	8007430 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003150:	1d3b      	adds	r3, r7, #4
 8003152:	2200      	movs	r2, #0
 8003154:	601a      	str	r2, [r3, #0]
 8003156:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003158:	4b20      	ldr	r3, [pc, #128]	; (80031dc <MX_TIM4_Init+0xa0>)
 800315a:	4a21      	ldr	r2, [pc, #132]	; (80031e0 <MX_TIM4_Init+0xa4>)
 800315c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800315e:	4b1f      	ldr	r3, [pc, #124]	; (80031dc <MX_TIM4_Init+0xa0>)
 8003160:	2200      	movs	r2, #0
 8003162:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003164:	4b1d      	ldr	r3, [pc, #116]	; (80031dc <MX_TIM4_Init+0xa0>)
 8003166:	2200      	movs	r2, #0
 8003168:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800316a:	4b1c      	ldr	r3, [pc, #112]	; (80031dc <MX_TIM4_Init+0xa0>)
 800316c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003170:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003172:	4b1a      	ldr	r3, [pc, #104]	; (80031dc <MX_TIM4_Init+0xa0>)
 8003174:	2200      	movs	r2, #0
 8003176:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003178:	4b18      	ldr	r3, [pc, #96]	; (80031dc <MX_TIM4_Init+0xa0>)
 800317a:	2280      	movs	r2, #128	; 0x80
 800317c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800317e:	2303      	movs	r3, #3
 8003180:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003182:	2300      	movs	r3, #0
 8003184:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003186:	2301      	movs	r3, #1
 8003188:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800318a:	2300      	movs	r3, #0
 800318c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800318e:	230a      	movs	r3, #10
 8003190:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003192:	2300      	movs	r3, #0
 8003194:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003196:	2301      	movs	r3, #1
 8003198:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800319a:	2300      	movs	r3, #0
 800319c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800319e:	2300      	movs	r3, #0
 80031a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80031a2:	f107 030c 	add.w	r3, r7, #12
 80031a6:	4619      	mov	r1, r3
 80031a8:	480c      	ldr	r0, [pc, #48]	; (80031dc <MX_TIM4_Init+0xa0>)
 80031aa:	f002 f903 	bl	80053b4 <HAL_TIM_Encoder_Init>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d001      	beq.n	80031b8 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80031b4:	f7ff fcf0 	bl	8002b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031b8:	2300      	movs	r3, #0
 80031ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031bc:	2300      	movs	r3, #0
 80031be:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80031c0:	1d3b      	adds	r3, r7, #4
 80031c2:	4619      	mov	r1, r3
 80031c4:	4805      	ldr	r0, [pc, #20]	; (80031dc <MX_TIM4_Init+0xa0>)
 80031c6:	f002 fcf1 	bl	8005bac <HAL_TIMEx_MasterConfigSynchronization>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d001      	beq.n	80031d4 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80031d0:	f7ff fce2 	bl	8002b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80031d4:	bf00      	nop
 80031d6:	3730      	adds	r7, #48	; 0x30
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	20001c3c 	.word	0x20001c3c
 80031e0:	40000800 	.word	0x40000800

080031e4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b085      	sub	sp, #20
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031f4:	d10b      	bne.n	800320e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80031f6:	4b08      	ldr	r3, [pc, #32]	; (8003218 <HAL_TIM_PWM_MspInit+0x34>)
 80031f8:	69db      	ldr	r3, [r3, #28]
 80031fa:	4a07      	ldr	r2, [pc, #28]	; (8003218 <HAL_TIM_PWM_MspInit+0x34>)
 80031fc:	f043 0301 	orr.w	r3, r3, #1
 8003200:	61d3      	str	r3, [r2, #28]
 8003202:	4b05      	ldr	r3, [pc, #20]	; (8003218 <HAL_TIM_PWM_MspInit+0x34>)
 8003204:	69db      	ldr	r3, [r3, #28]
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	60fb      	str	r3, [r7, #12]
 800320c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800320e:	bf00      	nop
 8003210:	3714      	adds	r7, #20
 8003212:	46bd      	mov	sp, r7
 8003214:	bc80      	pop	{r7}
 8003216:	4770      	bx	lr
 8003218:	40021000 	.word	0x40021000

0800321c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b08a      	sub	sp, #40	; 0x28
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003224:	f107 0318 	add.w	r3, r7, #24
 8003228:	2200      	movs	r2, #0
 800322a:	601a      	str	r2, [r3, #0]
 800322c:	605a      	str	r2, [r3, #4]
 800322e:	609a      	str	r2, [r3, #8]
 8003230:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM3)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a30      	ldr	r2, [pc, #192]	; (80032f8 <HAL_TIM_Encoder_MspInit+0xdc>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d124      	bne.n	8003286 <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800323c:	4b2f      	ldr	r3, [pc, #188]	; (80032fc <HAL_TIM_Encoder_MspInit+0xe0>)
 800323e:	69db      	ldr	r3, [r3, #28]
 8003240:	4a2e      	ldr	r2, [pc, #184]	; (80032fc <HAL_TIM_Encoder_MspInit+0xe0>)
 8003242:	f043 0302 	orr.w	r3, r3, #2
 8003246:	61d3      	str	r3, [r2, #28]
 8003248:	4b2c      	ldr	r3, [pc, #176]	; (80032fc <HAL_TIM_Encoder_MspInit+0xe0>)
 800324a:	69db      	ldr	r3, [r3, #28]
 800324c:	f003 0302 	and.w	r3, r3, #2
 8003250:	617b      	str	r3, [r7, #20]
 8003252:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003254:	4b29      	ldr	r3, [pc, #164]	; (80032fc <HAL_TIM_Encoder_MspInit+0xe0>)
 8003256:	699b      	ldr	r3, [r3, #24]
 8003258:	4a28      	ldr	r2, [pc, #160]	; (80032fc <HAL_TIM_Encoder_MspInit+0xe0>)
 800325a:	f043 0304 	orr.w	r3, r3, #4
 800325e:	6193      	str	r3, [r2, #24]
 8003260:	4b26      	ldr	r3, [pc, #152]	; (80032fc <HAL_TIM_Encoder_MspInit+0xe0>)
 8003262:	699b      	ldr	r3, [r3, #24]
 8003264:	f003 0304 	and.w	r3, r3, #4
 8003268:	613b      	str	r3, [r7, #16]
 800326a:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = MB1_Pin|MB2_Pin;
 800326c:	23c0      	movs	r3, #192	; 0xc0
 800326e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003270:	2300      	movs	r3, #0
 8003272:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003274:	2300      	movs	r3, #0
 8003276:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003278:	f107 0318 	add.w	r3, r7, #24
 800327c:	4619      	mov	r1, r3
 800327e:	4820      	ldr	r0, [pc, #128]	; (8003300 <HAL_TIM_Encoder_MspInit+0xe4>)
 8003280:	f001 f922 	bl	80044c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003284:	e034      	b.n	80032f0 <HAL_TIM_Encoder_MspInit+0xd4>
  else if(tim_encoderHandle->Instance==TIM4)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a1e      	ldr	r2, [pc, #120]	; (8003304 <HAL_TIM_Encoder_MspInit+0xe8>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d12f      	bne.n	80032f0 <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003290:	4b1a      	ldr	r3, [pc, #104]	; (80032fc <HAL_TIM_Encoder_MspInit+0xe0>)
 8003292:	69db      	ldr	r3, [r3, #28]
 8003294:	4a19      	ldr	r2, [pc, #100]	; (80032fc <HAL_TIM_Encoder_MspInit+0xe0>)
 8003296:	f043 0304 	orr.w	r3, r3, #4
 800329a:	61d3      	str	r3, [r2, #28]
 800329c:	4b17      	ldr	r3, [pc, #92]	; (80032fc <HAL_TIM_Encoder_MspInit+0xe0>)
 800329e:	69db      	ldr	r3, [r3, #28]
 80032a0:	f003 0304 	and.w	r3, r3, #4
 80032a4:	60fb      	str	r3, [r7, #12]
 80032a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032a8:	4b14      	ldr	r3, [pc, #80]	; (80032fc <HAL_TIM_Encoder_MspInit+0xe0>)
 80032aa:	699b      	ldr	r3, [r3, #24]
 80032ac:	4a13      	ldr	r2, [pc, #76]	; (80032fc <HAL_TIM_Encoder_MspInit+0xe0>)
 80032ae:	f043 0308 	orr.w	r3, r3, #8
 80032b2:	6193      	str	r3, [r2, #24]
 80032b4:	4b11      	ldr	r3, [pc, #68]	; (80032fc <HAL_TIM_Encoder_MspInit+0xe0>)
 80032b6:	699b      	ldr	r3, [r3, #24]
 80032b8:	f003 0308 	and.w	r3, r3, #8
 80032bc:	60bb      	str	r3, [r7, #8]
 80032be:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MA2_Pin;
 80032c0:	2340      	movs	r3, #64	; 0x40
 80032c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032c4:	2300      	movs	r3, #0
 80032c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c8:	2300      	movs	r3, #0
 80032ca:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(MA2_GPIO_Port, &GPIO_InitStruct);
 80032cc:	f107 0318 	add.w	r3, r7, #24
 80032d0:	4619      	mov	r1, r3
 80032d2:	480d      	ldr	r0, [pc, #52]	; (8003308 <HAL_TIM_Encoder_MspInit+0xec>)
 80032d4:	f001 f8f8 	bl	80044c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MA1_Pin;
 80032d8:	2380      	movs	r3, #128	; 0x80
 80032da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032dc:	2300      	movs	r3, #0
 80032de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e0:	2300      	movs	r3, #0
 80032e2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(MA1_GPIO_Port, &GPIO_InitStruct);
 80032e4:	f107 0318 	add.w	r3, r7, #24
 80032e8:	4619      	mov	r1, r3
 80032ea:	4807      	ldr	r0, [pc, #28]	; (8003308 <HAL_TIM_Encoder_MspInit+0xec>)
 80032ec:	f001 f8ec 	bl	80044c8 <HAL_GPIO_Init>
}
 80032f0:	bf00      	nop
 80032f2:	3728      	adds	r7, #40	; 0x28
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	40000400 	.word	0x40000400
 80032fc:	40021000 	.word	0x40021000
 8003300:	40010800 	.word	0x40010800
 8003304:	40000800 	.word	0x40000800
 8003308:	40010c00 	.word	0x40010c00

0800330c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b088      	sub	sp, #32
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003314:	f107 030c 	add.w	r3, r7, #12
 8003318:	2200      	movs	r2, #0
 800331a:	601a      	str	r2, [r3, #0]
 800331c:	605a      	str	r2, [r3, #4]
 800331e:	609a      	str	r2, [r3, #8]
 8003320:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800332a:	d12a      	bne.n	8003382 <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800332c:	4b17      	ldr	r3, [pc, #92]	; (800338c <HAL_TIM_MspPostInit+0x80>)
 800332e:	699b      	ldr	r3, [r3, #24]
 8003330:	4a16      	ldr	r2, [pc, #88]	; (800338c <HAL_TIM_MspPostInit+0x80>)
 8003332:	f043 0308 	orr.w	r3, r3, #8
 8003336:	6193      	str	r3, [r2, #24]
 8003338:	4b14      	ldr	r3, [pc, #80]	; (800338c <HAL_TIM_MspPostInit+0x80>)
 800333a:	699b      	ldr	r3, [r3, #24]
 800333c:	f003 0308 	and.w	r3, r3, #8
 8003340:	60bb      	str	r3, [r7, #8]
 8003342:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 8003344:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003348:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800334a:	2302      	movs	r3, #2
 800334c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800334e:	2302      	movs	r3, #2
 8003350:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003352:	f107 030c 	add.w	r3, r7, #12
 8003356:	4619      	mov	r1, r3
 8003358:	480d      	ldr	r0, [pc, #52]	; (8003390 <HAL_TIM_MspPostInit+0x84>)
 800335a:	f001 f8b5 	bl	80044c8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 800335e:	4b0d      	ldr	r3, [pc, #52]	; (8003394 <HAL_TIM_MspPostInit+0x88>)
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	61fb      	str	r3, [r7, #28]
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800336a:	61fb      	str	r3, [r7, #28]
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003372:	61fb      	str	r3, [r7, #28]
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800337a:	61fb      	str	r3, [r7, #28]
 800337c:	4a05      	ldr	r2, [pc, #20]	; (8003394 <HAL_TIM_MspPostInit+0x88>)
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003382:	bf00      	nop
 8003384:	3720      	adds	r7, #32
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	40021000 	.word	0x40021000
 8003390:	40010c00 	.word	0x40010c00
 8003394:	40010000 	.word	0x40010000

08003398 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800339c:	4b11      	ldr	r3, [pc, #68]	; (80033e4 <MX_USART1_UART_Init+0x4c>)
 800339e:	4a12      	ldr	r2, [pc, #72]	; (80033e8 <MX_USART1_UART_Init+0x50>)
 80033a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80033a2:	4b10      	ldr	r3, [pc, #64]	; (80033e4 <MX_USART1_UART_Init+0x4c>)
 80033a4:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80033a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80033aa:	4b0e      	ldr	r3, [pc, #56]	; (80033e4 <MX_USART1_UART_Init+0x4c>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80033b0:	4b0c      	ldr	r3, [pc, #48]	; (80033e4 <MX_USART1_UART_Init+0x4c>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80033b6:	4b0b      	ldr	r3, [pc, #44]	; (80033e4 <MX_USART1_UART_Init+0x4c>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80033bc:	4b09      	ldr	r3, [pc, #36]	; (80033e4 <MX_USART1_UART_Init+0x4c>)
 80033be:	220c      	movs	r2, #12
 80033c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033c2:	4b08      	ldr	r3, [pc, #32]	; (80033e4 <MX_USART1_UART_Init+0x4c>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80033c8:	4b06      	ldr	r3, [pc, #24]	; (80033e4 <MX_USART1_UART_Init+0x4c>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80033ce:	4805      	ldr	r0, [pc, #20]	; (80033e4 <MX_USART1_UART_Init+0x4c>)
 80033d0:	f002 fc4a 	bl	8005c68 <HAL_UART_Init>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d001      	beq.n	80033de <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80033da:	f7ff fbdd 	bl	8002b98 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80033de:	bf00      	nop
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	20001c84 	.word	0x20001c84
 80033e8:	40013800 	.word	0x40013800

080033ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b088      	sub	sp, #32
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033f4:	f107 0310 	add.w	r3, r7, #16
 80033f8:	2200      	movs	r2, #0
 80033fa:	601a      	str	r2, [r3, #0]
 80033fc:	605a      	str	r2, [r3, #4]
 80033fe:	609a      	str	r2, [r3, #8]
 8003400:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a20      	ldr	r2, [pc, #128]	; (8003488 <HAL_UART_MspInit+0x9c>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d139      	bne.n	8003480 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800340c:	4b1f      	ldr	r3, [pc, #124]	; (800348c <HAL_UART_MspInit+0xa0>)
 800340e:	699b      	ldr	r3, [r3, #24]
 8003410:	4a1e      	ldr	r2, [pc, #120]	; (800348c <HAL_UART_MspInit+0xa0>)
 8003412:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003416:	6193      	str	r3, [r2, #24]
 8003418:	4b1c      	ldr	r3, [pc, #112]	; (800348c <HAL_UART_MspInit+0xa0>)
 800341a:	699b      	ldr	r3, [r3, #24]
 800341c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003420:	60fb      	str	r3, [r7, #12]
 8003422:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003424:	4b19      	ldr	r3, [pc, #100]	; (800348c <HAL_UART_MspInit+0xa0>)
 8003426:	699b      	ldr	r3, [r3, #24]
 8003428:	4a18      	ldr	r2, [pc, #96]	; (800348c <HAL_UART_MspInit+0xa0>)
 800342a:	f043 0304 	orr.w	r3, r3, #4
 800342e:	6193      	str	r3, [r2, #24]
 8003430:	4b16      	ldr	r3, [pc, #88]	; (800348c <HAL_UART_MspInit+0xa0>)
 8003432:	699b      	ldr	r3, [r3, #24]
 8003434:	f003 0304 	and.w	r3, r3, #4
 8003438:	60bb      	str	r3, [r7, #8]
 800343a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800343c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003440:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003442:	2302      	movs	r3, #2
 8003444:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003446:	2303      	movs	r3, #3
 8003448:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800344a:	f107 0310 	add.w	r3, r7, #16
 800344e:	4619      	mov	r1, r3
 8003450:	480f      	ldr	r0, [pc, #60]	; (8003490 <HAL_UART_MspInit+0xa4>)
 8003452:	f001 f839 	bl	80044c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003456:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800345a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800345c:	2300      	movs	r3, #0
 800345e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003460:	2300      	movs	r3, #0
 8003462:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003464:	f107 0310 	add.w	r3, r7, #16
 8003468:	4619      	mov	r1, r3
 800346a:	4809      	ldr	r0, [pc, #36]	; (8003490 <HAL_UART_MspInit+0xa4>)
 800346c:	f001 f82c 	bl	80044c8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003470:	2200      	movs	r2, #0
 8003472:	2100      	movs	r1, #0
 8003474:	2025      	movs	r0, #37	; 0x25
 8003476:	f000 fd52 	bl	8003f1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800347a:	2025      	movs	r0, #37	; 0x25
 800347c:	f000 fd6b 	bl	8003f56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003480:	bf00      	nop
 8003482:	3720      	adds	r7, #32
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	40013800 	.word	0x40013800
 800348c:	40021000 	.word	0x40021000
 8003490:	40010800 	.word	0x40010800

08003494 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003494:	480c      	ldr	r0, [pc, #48]	; (80034c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003496:	490d      	ldr	r1, [pc, #52]	; (80034cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003498:	4a0d      	ldr	r2, [pc, #52]	; (80034d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800349a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800349c:	e002      	b.n	80034a4 <LoopCopyDataInit>

0800349e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800349e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80034a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80034a2:	3304      	adds	r3, #4

080034a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034a8:	d3f9      	bcc.n	800349e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034aa:	4a0a      	ldr	r2, [pc, #40]	; (80034d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80034ac:	4c0a      	ldr	r4, [pc, #40]	; (80034d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80034ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034b0:	e001      	b.n	80034b6 <LoopFillZerobss>

080034b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034b4:	3204      	adds	r2, #4

080034b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034b8:	d3fb      	bcc.n	80034b2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80034ba:	f7ff fd81 	bl	8002fc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80034be:	f003 ff93 	bl	80073e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80034c2:	f7fd ff9d 	bl	8001400 <main>
  bx lr
 80034c6:	4770      	bx	lr
  ldr r0, =_sdata
 80034c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80034cc:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80034d0:	080074b8 	.word	0x080074b8
  ldr r2, =_sbss
 80034d4:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 80034d8:	20001ccc 	.word	0x20001ccc

080034dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80034dc:	e7fe      	b.n	80034dc <ADC1_2_IRQHandler>
	...

080034e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80034e4:	4b08      	ldr	r3, [pc, #32]	; (8003508 <HAL_Init+0x28>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a07      	ldr	r2, [pc, #28]	; (8003508 <HAL_Init+0x28>)
 80034ea:	f043 0310 	orr.w	r3, r3, #16
 80034ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034f0:	2003      	movs	r0, #3
 80034f2:	f000 fd09 	bl	8003f08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80034f6:	200f      	movs	r0, #15
 80034f8:	f000 f808 	bl	800350c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80034fc:	f7ff fcf2 	bl	8002ee4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	40022000 	.word	0x40022000

0800350c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003514:	4b12      	ldr	r3, [pc, #72]	; (8003560 <HAL_InitTick+0x54>)
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	4b12      	ldr	r3, [pc, #72]	; (8003564 <HAL_InitTick+0x58>)
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	4619      	mov	r1, r3
 800351e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003522:	fbb3 f3f1 	udiv	r3, r3, r1
 8003526:	fbb2 f3f3 	udiv	r3, r2, r3
 800352a:	4618      	mov	r0, r3
 800352c:	f000 fd21 	bl	8003f72 <HAL_SYSTICK_Config>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d001      	beq.n	800353a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e00e      	b.n	8003558 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2b0f      	cmp	r3, #15
 800353e:	d80a      	bhi.n	8003556 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003540:	2200      	movs	r2, #0
 8003542:	6879      	ldr	r1, [r7, #4]
 8003544:	f04f 30ff 	mov.w	r0, #4294967295
 8003548:	f000 fce9 	bl	8003f1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800354c:	4a06      	ldr	r2, [pc, #24]	; (8003568 <HAL_InitTick+0x5c>)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003552:	2300      	movs	r3, #0
 8003554:	e000      	b.n	8003558 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
}
 8003558:	4618      	mov	r0, r3
 800355a:	3708      	adds	r7, #8
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}
 8003560:	2000001c 	.word	0x2000001c
 8003564:	20000024 	.word	0x20000024
 8003568:	20000020 	.word	0x20000020

0800356c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800356c:	b480      	push	{r7}
 800356e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003570:	4b05      	ldr	r3, [pc, #20]	; (8003588 <HAL_IncTick+0x1c>)
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	461a      	mov	r2, r3
 8003576:	4b05      	ldr	r3, [pc, #20]	; (800358c <HAL_IncTick+0x20>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4413      	add	r3, r2
 800357c:	4a03      	ldr	r2, [pc, #12]	; (800358c <HAL_IncTick+0x20>)
 800357e:	6013      	str	r3, [r2, #0]
}
 8003580:	bf00      	nop
 8003582:	46bd      	mov	sp, r7
 8003584:	bc80      	pop	{r7}
 8003586:	4770      	bx	lr
 8003588:	20000024 	.word	0x20000024
 800358c:	20001cc8 	.word	0x20001cc8

08003590 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003590:	b480      	push	{r7}
 8003592:	af00      	add	r7, sp, #0
  return uwTick;
 8003594:	4b02      	ldr	r3, [pc, #8]	; (80035a0 <HAL_GetTick+0x10>)
 8003596:	681b      	ldr	r3, [r3, #0]
}
 8003598:	4618      	mov	r0, r3
 800359a:	46bd      	mov	sp, r7
 800359c:	bc80      	pop	{r7}
 800359e:	4770      	bx	lr
 80035a0:	20001cc8 	.word	0x20001cc8

080035a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80035ac:	f7ff fff0 	bl	8003590 <HAL_GetTick>
 80035b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035bc:	d005      	beq.n	80035ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80035be:	4b0a      	ldr	r3, [pc, #40]	; (80035e8 <HAL_Delay+0x44>)
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	461a      	mov	r2, r3
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	4413      	add	r3, r2
 80035c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80035ca:	bf00      	nop
 80035cc:	f7ff ffe0 	bl	8003590 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	68fa      	ldr	r2, [r7, #12]
 80035d8:	429a      	cmp	r2, r3
 80035da:	d8f7      	bhi.n	80035cc <HAL_Delay+0x28>
  {
  }
}
 80035dc:	bf00      	nop
 80035de:	bf00      	nop
 80035e0:	3710      	adds	r7, #16
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	20000024 	.word	0x20000024

080035ec <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b086      	sub	sp, #24
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035f4:	2300      	movs	r3, #0
 80035f6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80035f8:	2300      	movs	r3, #0
 80035fa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80035fc:	2300      	movs	r3, #0
 80035fe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003600:	2300      	movs	r3, #0
 8003602:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d101      	bne.n	800360e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e0be      	b.n	800378c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003618:	2b00      	cmp	r3, #0
 800361a:	d109      	bne.n	8003630 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f7fd fdd0 	bl	80011d0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f000 faf5 	bl	8003c20 <ADC_ConversionStop_Disable>
 8003636:	4603      	mov	r3, r0
 8003638:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800363e:	f003 0310 	and.w	r3, r3, #16
 8003642:	2b00      	cmp	r3, #0
 8003644:	f040 8099 	bne.w	800377a <HAL_ADC_Init+0x18e>
 8003648:	7dfb      	ldrb	r3, [r7, #23]
 800364a:	2b00      	cmp	r3, #0
 800364c:	f040 8095 	bne.w	800377a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003654:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003658:	f023 0302 	bic.w	r3, r3, #2
 800365c:	f043 0202 	orr.w	r2, r3, #2
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800366c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	7b1b      	ldrb	r3, [r3, #12]
 8003672:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003674:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003676:	68ba      	ldr	r2, [r7, #8]
 8003678:	4313      	orrs	r3, r2
 800367a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003684:	d003      	beq.n	800368e <HAL_ADC_Init+0xa2>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	2b01      	cmp	r3, #1
 800368c:	d102      	bne.n	8003694 <HAL_ADC_Init+0xa8>
 800368e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003692:	e000      	b.n	8003696 <HAL_ADC_Init+0xaa>
 8003694:	2300      	movs	r3, #0
 8003696:	693a      	ldr	r2, [r7, #16]
 8003698:	4313      	orrs	r3, r2
 800369a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	7d1b      	ldrb	r3, [r3, #20]
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d119      	bne.n	80036d8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	7b1b      	ldrb	r3, [r3, #12]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d109      	bne.n	80036c0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	699b      	ldr	r3, [r3, #24]
 80036b0:	3b01      	subs	r3, #1
 80036b2:	035a      	lsls	r2, r3, #13
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80036bc:	613b      	str	r3, [r7, #16]
 80036be:	e00b      	b.n	80036d8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c4:	f043 0220 	orr.w	r2, r3, #32
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d0:	f043 0201 	orr.w	r2, r3, #1
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	693a      	ldr	r2, [r7, #16]
 80036e8:	430a      	orrs	r2, r1
 80036ea:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	689a      	ldr	r2, [r3, #8]
 80036f2:	4b28      	ldr	r3, [pc, #160]	; (8003794 <HAL_ADC_Init+0x1a8>)
 80036f4:	4013      	ands	r3, r2
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	6812      	ldr	r2, [r2, #0]
 80036fa:	68b9      	ldr	r1, [r7, #8]
 80036fc:	430b      	orrs	r3, r1
 80036fe:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003708:	d003      	beq.n	8003712 <HAL_ADC_Init+0x126>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	2b01      	cmp	r3, #1
 8003710:	d104      	bne.n	800371c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	3b01      	subs	r3, #1
 8003718:	051b      	lsls	r3, r3, #20
 800371a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003722:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	68fa      	ldr	r2, [r7, #12]
 800372c:	430a      	orrs	r2, r1
 800372e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	689a      	ldr	r2, [r3, #8]
 8003736:	4b18      	ldr	r3, [pc, #96]	; (8003798 <HAL_ADC_Init+0x1ac>)
 8003738:	4013      	ands	r3, r2
 800373a:	68ba      	ldr	r2, [r7, #8]
 800373c:	429a      	cmp	r2, r3
 800373e:	d10b      	bne.n	8003758 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800374a:	f023 0303 	bic.w	r3, r3, #3
 800374e:	f043 0201 	orr.w	r2, r3, #1
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003756:	e018      	b.n	800378a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800375c:	f023 0312 	bic.w	r3, r3, #18
 8003760:	f043 0210 	orr.w	r2, r3, #16
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376c:	f043 0201 	orr.w	r2, r3, #1
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003778:	e007      	b.n	800378a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800377e:	f043 0210 	orr.w	r2, r3, #16
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800378a:	7dfb      	ldrb	r3, [r7, #23]
}
 800378c:	4618      	mov	r0, r3
 800378e:	3718      	adds	r7, #24
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	ffe1f7fd 	.word	0xffe1f7fd
 8003798:	ff1f0efe 	.word	0xff1f0efe

0800379c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b086      	sub	sp, #24
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	60b9      	str	r1, [r7, #8]
 80037a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037a8:	2300      	movs	r3, #0
 80037aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a64      	ldr	r2, [pc, #400]	; (8003944 <HAL_ADC_Start_DMA+0x1a8>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d004      	beq.n	80037c0 <HAL_ADC_Start_DMA+0x24>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a63      	ldr	r2, [pc, #396]	; (8003948 <HAL_ADC_Start_DMA+0x1ac>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d106      	bne.n	80037ce <HAL_ADC_Start_DMA+0x32>
 80037c0:	4b60      	ldr	r3, [pc, #384]	; (8003944 <HAL_ADC_Start_DMA+0x1a8>)
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	f040 80b3 	bne.w	8003934 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d101      	bne.n	80037dc <HAL_ADC_Start_DMA+0x40>
 80037d8:	2302      	movs	r3, #2
 80037da:	e0ae      	b.n	800393a <HAL_ADC_Start_DMA+0x19e>
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80037e4:	68f8      	ldr	r0, [r7, #12]
 80037e6:	f000 f9c1 	bl	8003b6c <ADC_Enable>
 80037ea:	4603      	mov	r3, r0
 80037ec:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80037ee:	7dfb      	ldrb	r3, [r7, #23]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	f040 809a 	bne.w	800392a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037fa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80037fe:	f023 0301 	bic.w	r3, r3, #1
 8003802:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a4e      	ldr	r2, [pc, #312]	; (8003948 <HAL_ADC_Start_DMA+0x1ac>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d105      	bne.n	8003820 <HAL_ADC_Start_DMA+0x84>
 8003814:	4b4b      	ldr	r3, [pc, #300]	; (8003944 <HAL_ADC_Start_DMA+0x1a8>)
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d115      	bne.n	800384c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003824:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003836:	2b00      	cmp	r3, #0
 8003838:	d026      	beq.n	8003888 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800383e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003842:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800384a:	e01d      	b.n	8003888 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003850:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a39      	ldr	r2, [pc, #228]	; (8003944 <HAL_ADC_Start_DMA+0x1a8>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d004      	beq.n	800386c <HAL_ADC_Start_DMA+0xd0>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a38      	ldr	r2, [pc, #224]	; (8003948 <HAL_ADC_Start_DMA+0x1ac>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d10d      	bne.n	8003888 <HAL_ADC_Start_DMA+0xec>
 800386c:	4b35      	ldr	r3, [pc, #212]	; (8003944 <HAL_ADC_Start_DMA+0x1a8>)
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003874:	2b00      	cmp	r3, #0
 8003876:	d007      	beq.n	8003888 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800387c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003880:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800388c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d006      	beq.n	80038a2 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003898:	f023 0206 	bic.w	r2, r3, #6
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	62da      	str	r2, [r3, #44]	; 0x2c
 80038a0:	e002      	b.n	80038a8 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2200      	movs	r2, #0
 80038a6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6a1b      	ldr	r3, [r3, #32]
 80038b4:	4a25      	ldr	r2, [pc, #148]	; (800394c <HAL_ADC_Start_DMA+0x1b0>)
 80038b6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6a1b      	ldr	r3, [r3, #32]
 80038bc:	4a24      	ldr	r2, [pc, #144]	; (8003950 <HAL_ADC_Start_DMA+0x1b4>)
 80038be:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6a1b      	ldr	r3, [r3, #32]
 80038c4:	4a23      	ldr	r2, [pc, #140]	; (8003954 <HAL_ADC_Start_DMA+0x1b8>)
 80038c6:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f06f 0202 	mvn.w	r2, #2
 80038d0:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	689a      	ldr	r2, [r3, #8]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038e0:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6a18      	ldr	r0, [r3, #32]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	334c      	adds	r3, #76	; 0x4c
 80038ec:	4619      	mov	r1, r3
 80038ee:	68ba      	ldr	r2, [r7, #8]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f000 fba5 	bl	8004040 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003900:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003904:	d108      	bne.n	8003918 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	689a      	ldr	r2, [r3, #8]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003914:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003916:	e00f      	b.n	8003938 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	689a      	ldr	r2, [r3, #8]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003926:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003928:	e006      	b.n	8003938 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8003932:	e001      	b.n	8003938 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003938:	7dfb      	ldrb	r3, [r7, #23]
}
 800393a:	4618      	mov	r0, r3
 800393c:	3718      	adds	r7, #24
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	40012400 	.word	0x40012400
 8003948:	40012800 	.word	0x40012800
 800394c:	08003ca3 	.word	0x08003ca3
 8003950:	08003d1f 	.word	0x08003d1f
 8003954:	08003d3b 	.word	0x08003d3b

08003958 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003960:	bf00      	nop
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	bc80      	pop	{r7}
 8003968:	4770      	bx	lr

0800396a <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800396a:	b480      	push	{r7}
 800396c:	b083      	sub	sp, #12
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003972:	bf00      	nop
 8003974:	370c      	adds	r7, #12
 8003976:	46bd      	mov	sp, r7
 8003978:	bc80      	pop	{r7}
 800397a:	4770      	bx	lr

0800397c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800397c:	b480      	push	{r7}
 800397e:	b085      	sub	sp, #20
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003986:	2300      	movs	r3, #0
 8003988:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800398a:	2300      	movs	r3, #0
 800398c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003994:	2b01      	cmp	r3, #1
 8003996:	d101      	bne.n	800399c <HAL_ADC_ConfigChannel+0x20>
 8003998:	2302      	movs	r3, #2
 800399a:	e0dc      	b.n	8003b56 <HAL_ADC_ConfigChannel+0x1da>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	2b06      	cmp	r3, #6
 80039aa:	d81c      	bhi.n	80039e6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	685a      	ldr	r2, [r3, #4]
 80039b6:	4613      	mov	r3, r2
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	4413      	add	r3, r2
 80039bc:	3b05      	subs	r3, #5
 80039be:	221f      	movs	r2, #31
 80039c0:	fa02 f303 	lsl.w	r3, r2, r3
 80039c4:	43db      	mvns	r3, r3
 80039c6:	4019      	ands	r1, r3
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	6818      	ldr	r0, [r3, #0]
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	685a      	ldr	r2, [r3, #4]
 80039d0:	4613      	mov	r3, r2
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	4413      	add	r3, r2
 80039d6:	3b05      	subs	r3, #5
 80039d8:	fa00 f203 	lsl.w	r2, r0, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	430a      	orrs	r2, r1
 80039e2:	635a      	str	r2, [r3, #52]	; 0x34
 80039e4:	e03c      	b.n	8003a60 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	2b0c      	cmp	r3, #12
 80039ec:	d81c      	bhi.n	8003a28 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	685a      	ldr	r2, [r3, #4]
 80039f8:	4613      	mov	r3, r2
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	4413      	add	r3, r2
 80039fe:	3b23      	subs	r3, #35	; 0x23
 8003a00:	221f      	movs	r2, #31
 8003a02:	fa02 f303 	lsl.w	r3, r2, r3
 8003a06:	43db      	mvns	r3, r3
 8003a08:	4019      	ands	r1, r3
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	6818      	ldr	r0, [r3, #0]
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	685a      	ldr	r2, [r3, #4]
 8003a12:	4613      	mov	r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	4413      	add	r3, r2
 8003a18:	3b23      	subs	r3, #35	; 0x23
 8003a1a:	fa00 f203 	lsl.w	r2, r0, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	430a      	orrs	r2, r1
 8003a24:	631a      	str	r2, [r3, #48]	; 0x30
 8003a26:	e01b      	b.n	8003a60 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	685a      	ldr	r2, [r3, #4]
 8003a32:	4613      	mov	r3, r2
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	4413      	add	r3, r2
 8003a38:	3b41      	subs	r3, #65	; 0x41
 8003a3a:	221f      	movs	r2, #31
 8003a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a40:	43db      	mvns	r3, r3
 8003a42:	4019      	ands	r1, r3
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	6818      	ldr	r0, [r3, #0]
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	685a      	ldr	r2, [r3, #4]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	4413      	add	r3, r2
 8003a52:	3b41      	subs	r3, #65	; 0x41
 8003a54:	fa00 f203 	lsl.w	r2, r0, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	430a      	orrs	r2, r1
 8003a5e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2b09      	cmp	r3, #9
 8003a66:	d91c      	bls.n	8003aa2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68d9      	ldr	r1, [r3, #12]
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	4613      	mov	r3, r2
 8003a74:	005b      	lsls	r3, r3, #1
 8003a76:	4413      	add	r3, r2
 8003a78:	3b1e      	subs	r3, #30
 8003a7a:	2207      	movs	r2, #7
 8003a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a80:	43db      	mvns	r3, r3
 8003a82:	4019      	ands	r1, r3
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	6898      	ldr	r0, [r3, #8]
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	005b      	lsls	r3, r3, #1
 8003a90:	4413      	add	r3, r2
 8003a92:	3b1e      	subs	r3, #30
 8003a94:	fa00 f203 	lsl.w	r2, r0, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	430a      	orrs	r2, r1
 8003a9e:	60da      	str	r2, [r3, #12]
 8003aa0:	e019      	b.n	8003ad6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	6919      	ldr	r1, [r3, #16]
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	4613      	mov	r3, r2
 8003aae:	005b      	lsls	r3, r3, #1
 8003ab0:	4413      	add	r3, r2
 8003ab2:	2207      	movs	r2, #7
 8003ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab8:	43db      	mvns	r3, r3
 8003aba:	4019      	ands	r1, r3
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	6898      	ldr	r0, [r3, #8]
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	005b      	lsls	r3, r3, #1
 8003ac8:	4413      	add	r3, r2
 8003aca:	fa00 f203 	lsl.w	r2, r0, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	430a      	orrs	r2, r1
 8003ad4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2b10      	cmp	r3, #16
 8003adc:	d003      	beq.n	8003ae6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003ae2:	2b11      	cmp	r3, #17
 8003ae4:	d132      	bne.n	8003b4c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a1d      	ldr	r2, [pc, #116]	; (8003b60 <HAL_ADC_ConfigChannel+0x1e4>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d125      	bne.n	8003b3c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d126      	bne.n	8003b4c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	689a      	ldr	r2, [r3, #8]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003b0c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2b10      	cmp	r3, #16
 8003b14:	d11a      	bne.n	8003b4c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003b16:	4b13      	ldr	r3, [pc, #76]	; (8003b64 <HAL_ADC_ConfigChannel+0x1e8>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a13      	ldr	r2, [pc, #76]	; (8003b68 <HAL_ADC_ConfigChannel+0x1ec>)
 8003b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b20:	0c9a      	lsrs	r2, r3, #18
 8003b22:	4613      	mov	r3, r2
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	4413      	add	r3, r2
 8003b28:	005b      	lsls	r3, r3, #1
 8003b2a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003b2c:	e002      	b.n	8003b34 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	3b01      	subs	r3, #1
 8003b32:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d1f9      	bne.n	8003b2e <HAL_ADC_ConfigChannel+0x1b2>
 8003b3a:	e007      	b.n	8003b4c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b40:	f043 0220 	orr.w	r2, r3, #32
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3714      	adds	r7, #20
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bc80      	pop	{r7}
 8003b5e:	4770      	bx	lr
 8003b60:	40012400 	.word	0x40012400
 8003b64:	2000001c 	.word	0x2000001c
 8003b68:	431bde83 	.word	0x431bde83

08003b6c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b74:	2300      	movs	r3, #0
 8003b76:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d040      	beq.n	8003c0c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	689a      	ldr	r2, [r3, #8]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f042 0201 	orr.w	r2, r2, #1
 8003b98:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003b9a:	4b1f      	ldr	r3, [pc, #124]	; (8003c18 <ADC_Enable+0xac>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a1f      	ldr	r2, [pc, #124]	; (8003c1c <ADC_Enable+0xb0>)
 8003ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba4:	0c9b      	lsrs	r3, r3, #18
 8003ba6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003ba8:	e002      	b.n	8003bb0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	3b01      	subs	r3, #1
 8003bae:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1f9      	bne.n	8003baa <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003bb6:	f7ff fceb 	bl	8003590 <HAL_GetTick>
 8003bba:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003bbc:	e01f      	b.n	8003bfe <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003bbe:	f7ff fce7 	bl	8003590 <HAL_GetTick>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d918      	bls.n	8003bfe <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f003 0301 	and.w	r3, r3, #1
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d011      	beq.n	8003bfe <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bde:	f043 0210 	orr.w	r2, r3, #16
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bea:	f043 0201 	orr.w	r2, r3, #1
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e007      	b.n	8003c0e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	f003 0301 	and.w	r3, r3, #1
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d1d8      	bne.n	8003bbe <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3710      	adds	r7, #16
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	2000001c 	.word	0x2000001c
 8003c1c:	431bde83 	.word	0x431bde83

08003c20 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f003 0301 	and.w	r3, r3, #1
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d12e      	bne.n	8003c98 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	689a      	ldr	r2, [r3, #8]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f022 0201 	bic.w	r2, r2, #1
 8003c48:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003c4a:	f7ff fca1 	bl	8003590 <HAL_GetTick>
 8003c4e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003c50:	e01b      	b.n	8003c8a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003c52:	f7ff fc9d 	bl	8003590 <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d914      	bls.n	8003c8a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f003 0301 	and.w	r3, r3, #1
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d10d      	bne.n	8003c8a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c72:	f043 0210 	orr.w	r2, r3, #16
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7e:	f043 0201 	orr.w	r2, r3, #1
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e007      	b.n	8003c9a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	f003 0301 	and.w	r3, r3, #1
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d0dc      	beq.n	8003c52 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3710      	adds	r7, #16
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}

08003ca2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003ca2:	b580      	push	{r7, lr}
 8003ca4:	b084      	sub	sp, #16
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cae:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d127      	bne.n	8003d0c <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003cd2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003cd6:	d115      	bne.n	8003d04 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d111      	bne.n	8003d04 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d105      	bne.n	8003d04 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cfc:	f043 0201 	orr.w	r2, r3, #1
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003d04:	68f8      	ldr	r0, [r7, #12]
 8003d06:	f7fe fd91 	bl	800282c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003d0a:	e004      	b.n	8003d16 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6a1b      	ldr	r3, [r3, #32]
 8003d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	4798      	blx	r3
}
 8003d16:	bf00      	nop
 8003d18:	3710      	adds	r7, #16
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}

08003d1e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003d1e:	b580      	push	{r7, lr}
 8003d20:	b084      	sub	sp, #16
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003d2c:	68f8      	ldr	r0, [r7, #12]
 8003d2e:	f7ff fe13 	bl	8003958 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003d32:	bf00      	nop
 8003d34:	3710      	adds	r7, #16
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}

08003d3a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	b084      	sub	sp, #16
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d46:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d4c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d58:	f043 0204 	orr.w	r2, r3, #4
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003d60:	68f8      	ldr	r0, [r7, #12]
 8003d62:	f7ff fe02 	bl	800396a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003d66:	bf00      	nop
 8003d68:	3710      	adds	r7, #16
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
	...

08003d70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f003 0307 	and.w	r3, r3, #7
 8003d7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d80:	4b0c      	ldr	r3, [pc, #48]	; (8003db4 <__NVIC_SetPriorityGrouping+0x44>)
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d86:	68ba      	ldr	r2, [r7, #8]
 8003d88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003da0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003da2:	4a04      	ldr	r2, [pc, #16]	; (8003db4 <__NVIC_SetPriorityGrouping+0x44>)
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	60d3      	str	r3, [r2, #12]
}
 8003da8:	bf00      	nop
 8003daa:	3714      	adds	r7, #20
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bc80      	pop	{r7}
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	e000ed00 	.word	0xe000ed00

08003db8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003db8:	b480      	push	{r7}
 8003dba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003dbc:	4b04      	ldr	r3, [pc, #16]	; (8003dd0 <__NVIC_GetPriorityGrouping+0x18>)
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	0a1b      	lsrs	r3, r3, #8
 8003dc2:	f003 0307 	and.w	r3, r3, #7
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bc80      	pop	{r7}
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	e000ed00 	.word	0xe000ed00

08003dd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	4603      	mov	r3, r0
 8003ddc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	db0b      	blt.n	8003dfe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003de6:	79fb      	ldrb	r3, [r7, #7]
 8003de8:	f003 021f 	and.w	r2, r3, #31
 8003dec:	4906      	ldr	r1, [pc, #24]	; (8003e08 <__NVIC_EnableIRQ+0x34>)
 8003dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003df2:	095b      	lsrs	r3, r3, #5
 8003df4:	2001      	movs	r0, #1
 8003df6:	fa00 f202 	lsl.w	r2, r0, r2
 8003dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003dfe:	bf00      	nop
 8003e00:	370c      	adds	r7, #12
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bc80      	pop	{r7}
 8003e06:	4770      	bx	lr
 8003e08:	e000e100 	.word	0xe000e100

08003e0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	4603      	mov	r3, r0
 8003e14:	6039      	str	r1, [r7, #0]
 8003e16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	db0a      	blt.n	8003e36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	b2da      	uxtb	r2, r3
 8003e24:	490c      	ldr	r1, [pc, #48]	; (8003e58 <__NVIC_SetPriority+0x4c>)
 8003e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e2a:	0112      	lsls	r2, r2, #4
 8003e2c:	b2d2      	uxtb	r2, r2
 8003e2e:	440b      	add	r3, r1
 8003e30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e34:	e00a      	b.n	8003e4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	b2da      	uxtb	r2, r3
 8003e3a:	4908      	ldr	r1, [pc, #32]	; (8003e5c <__NVIC_SetPriority+0x50>)
 8003e3c:	79fb      	ldrb	r3, [r7, #7]
 8003e3e:	f003 030f 	and.w	r3, r3, #15
 8003e42:	3b04      	subs	r3, #4
 8003e44:	0112      	lsls	r2, r2, #4
 8003e46:	b2d2      	uxtb	r2, r2
 8003e48:	440b      	add	r3, r1
 8003e4a:	761a      	strb	r2, [r3, #24]
}
 8003e4c:	bf00      	nop
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bc80      	pop	{r7}
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop
 8003e58:	e000e100 	.word	0xe000e100
 8003e5c:	e000ed00 	.word	0xe000ed00

08003e60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b089      	sub	sp, #36	; 0x24
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f003 0307 	and.w	r3, r3, #7
 8003e72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	f1c3 0307 	rsb	r3, r3, #7
 8003e7a:	2b04      	cmp	r3, #4
 8003e7c:	bf28      	it	cs
 8003e7e:	2304      	movcs	r3, #4
 8003e80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	3304      	adds	r3, #4
 8003e86:	2b06      	cmp	r3, #6
 8003e88:	d902      	bls.n	8003e90 <NVIC_EncodePriority+0x30>
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	3b03      	subs	r3, #3
 8003e8e:	e000      	b.n	8003e92 <NVIC_EncodePriority+0x32>
 8003e90:	2300      	movs	r3, #0
 8003e92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e94:	f04f 32ff 	mov.w	r2, #4294967295
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9e:	43da      	mvns	r2, r3
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	401a      	ands	r2, r3
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ea8:	f04f 31ff 	mov.w	r1, #4294967295
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	fa01 f303 	lsl.w	r3, r1, r3
 8003eb2:	43d9      	mvns	r1, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003eb8:	4313      	orrs	r3, r2
         );
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3724      	adds	r7, #36	; 0x24
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bc80      	pop	{r7}
 8003ec2:	4770      	bx	lr

08003ec4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b082      	sub	sp, #8
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ed4:	d301      	bcc.n	8003eda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e00f      	b.n	8003efa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003eda:	4a0a      	ldr	r2, [pc, #40]	; (8003f04 <SysTick_Config+0x40>)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ee2:	210f      	movs	r1, #15
 8003ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ee8:	f7ff ff90 	bl	8003e0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003eec:	4b05      	ldr	r3, [pc, #20]	; (8003f04 <SysTick_Config+0x40>)
 8003eee:	2200      	movs	r2, #0
 8003ef0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ef2:	4b04      	ldr	r3, [pc, #16]	; (8003f04 <SysTick_Config+0x40>)
 8003ef4:	2207      	movs	r2, #7
 8003ef6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3708      	adds	r7, #8
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	e000e010 	.word	0xe000e010

08003f08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f7ff ff2d 	bl	8003d70 <__NVIC_SetPriorityGrouping>
}
 8003f16:	bf00      	nop
 8003f18:	3708      	adds	r7, #8
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}

08003f1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f1e:	b580      	push	{r7, lr}
 8003f20:	b086      	sub	sp, #24
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	4603      	mov	r3, r0
 8003f26:	60b9      	str	r1, [r7, #8]
 8003f28:	607a      	str	r2, [r7, #4]
 8003f2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f30:	f7ff ff42 	bl	8003db8 <__NVIC_GetPriorityGrouping>
 8003f34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	68b9      	ldr	r1, [r7, #8]
 8003f3a:	6978      	ldr	r0, [r7, #20]
 8003f3c:	f7ff ff90 	bl	8003e60 <NVIC_EncodePriority>
 8003f40:	4602      	mov	r2, r0
 8003f42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f46:	4611      	mov	r1, r2
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f7ff ff5f 	bl	8003e0c <__NVIC_SetPriority>
}
 8003f4e:	bf00      	nop
 8003f50:	3718      	adds	r7, #24
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}

08003f56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f56:	b580      	push	{r7, lr}
 8003f58:	b082      	sub	sp, #8
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f64:	4618      	mov	r0, r3
 8003f66:	f7ff ff35 	bl	8003dd4 <__NVIC_EnableIRQ>
}
 8003f6a:	bf00      	nop
 8003f6c:	3708      	adds	r7, #8
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}

08003f72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f72:	b580      	push	{r7, lr}
 8003f74:	b082      	sub	sp, #8
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f7ff ffa2 	bl	8003ec4 <SysTick_Config>
 8003f80:	4603      	mov	r3, r0
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3708      	adds	r7, #8
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
	...

08003f8c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b085      	sub	sp, #20
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003f94:	2300      	movs	r3, #0
 8003f96:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d101      	bne.n	8003fa2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e043      	b.n	800402a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	4b22      	ldr	r3, [pc, #136]	; (8004034 <HAL_DMA_Init+0xa8>)
 8003faa:	4413      	add	r3, r2
 8003fac:	4a22      	ldr	r2, [pc, #136]	; (8004038 <HAL_DMA_Init+0xac>)
 8003fae:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb2:	091b      	lsrs	r3, r3, #4
 8003fb4:	009a      	lsls	r2, r3, #2
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a1f      	ldr	r2, [pc, #124]	; (800403c <HAL_DMA_Init+0xb0>)
 8003fbe:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2202      	movs	r2, #2
 8003fc4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003fd6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003fda:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003fe4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ff0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	695b      	ldr	r3, [r3, #20]
 8003ff6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ffc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	69db      	ldr	r3, [r3, #28]
 8004002:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004004:	68fa      	ldr	r2, [r7, #12]
 8004006:	4313      	orrs	r3, r2
 8004008:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3714      	adds	r7, #20
 800402e:	46bd      	mov	sp, r7
 8004030:	bc80      	pop	{r7}
 8004032:	4770      	bx	lr
 8004034:	bffdfff8 	.word	0xbffdfff8
 8004038:	cccccccd 	.word	0xcccccccd
 800403c:	40020000 	.word	0x40020000

08004040 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b086      	sub	sp, #24
 8004044:	af00      	add	r7, sp, #0
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	607a      	str	r2, [r7, #4]
 800404c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800404e:	2300      	movs	r3, #0
 8004050:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004058:	2b01      	cmp	r3, #1
 800405a:	d101      	bne.n	8004060 <HAL_DMA_Start_IT+0x20>
 800405c:	2302      	movs	r3, #2
 800405e:	e04a      	b.n	80040f6 <HAL_DMA_Start_IT+0xb6>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800406e:	2b01      	cmp	r3, #1
 8004070:	d13a      	bne.n	80040e8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2202      	movs	r2, #2
 8004076:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2200      	movs	r2, #0
 800407e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f022 0201 	bic.w	r2, r2, #1
 800408e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	68b9      	ldr	r1, [r7, #8]
 8004096:	68f8      	ldr	r0, [r7, #12]
 8004098:	f000 f9e8 	bl	800446c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d008      	beq.n	80040b6 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f042 020e 	orr.w	r2, r2, #14
 80040b2:	601a      	str	r2, [r3, #0]
 80040b4:	e00f      	b.n	80040d6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f022 0204 	bic.w	r2, r2, #4
 80040c4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f042 020a 	orr.w	r2, r2, #10
 80040d4:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f042 0201 	orr.w	r2, r2, #1
 80040e4:	601a      	str	r2, [r3, #0]
 80040e6:	e005      	b.n	80040f4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80040f0:	2302      	movs	r3, #2
 80040f2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80040f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3718      	adds	r7, #24
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}

080040fe <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80040fe:	b480      	push	{r7}
 8004100:	b085      	sub	sp, #20
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004106:	2300      	movs	r3, #0
 8004108:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004110:	2b02      	cmp	r3, #2
 8004112:	d008      	beq.n	8004126 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2204      	movs	r2, #4
 8004118:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e020      	b.n	8004168 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f022 020e 	bic.w	r2, r2, #14
 8004134:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f022 0201 	bic.w	r2, r2, #1
 8004144:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800414e:	2101      	movs	r1, #1
 8004150:	fa01 f202 	lsl.w	r2, r1, r2
 8004154:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2201      	movs	r2, #1
 800415a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004166:	7bfb      	ldrb	r3, [r7, #15]
}
 8004168:	4618      	mov	r0, r3
 800416a:	3714      	adds	r7, #20
 800416c:	46bd      	mov	sp, r7
 800416e:	bc80      	pop	{r7}
 8004170:	4770      	bx	lr
	...

08004174 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800417c:	2300      	movs	r3, #0
 800417e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004186:	2b02      	cmp	r3, #2
 8004188:	d005      	beq.n	8004196 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2204      	movs	r2, #4
 800418e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	73fb      	strb	r3, [r7, #15]
 8004194:	e051      	b.n	800423a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f022 020e 	bic.w	r2, r2, #14
 80041a4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f022 0201 	bic.w	r2, r2, #1
 80041b4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a22      	ldr	r2, [pc, #136]	; (8004244 <HAL_DMA_Abort_IT+0xd0>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d029      	beq.n	8004214 <HAL_DMA_Abort_IT+0xa0>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a20      	ldr	r2, [pc, #128]	; (8004248 <HAL_DMA_Abort_IT+0xd4>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d022      	beq.n	8004210 <HAL_DMA_Abort_IT+0x9c>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a1f      	ldr	r2, [pc, #124]	; (800424c <HAL_DMA_Abort_IT+0xd8>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d01a      	beq.n	800420a <HAL_DMA_Abort_IT+0x96>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a1d      	ldr	r2, [pc, #116]	; (8004250 <HAL_DMA_Abort_IT+0xdc>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d012      	beq.n	8004204 <HAL_DMA_Abort_IT+0x90>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a1c      	ldr	r2, [pc, #112]	; (8004254 <HAL_DMA_Abort_IT+0xe0>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d00a      	beq.n	80041fe <HAL_DMA_Abort_IT+0x8a>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a1a      	ldr	r2, [pc, #104]	; (8004258 <HAL_DMA_Abort_IT+0xe4>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d102      	bne.n	80041f8 <HAL_DMA_Abort_IT+0x84>
 80041f2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80041f6:	e00e      	b.n	8004216 <HAL_DMA_Abort_IT+0xa2>
 80041f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80041fc:	e00b      	b.n	8004216 <HAL_DMA_Abort_IT+0xa2>
 80041fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004202:	e008      	b.n	8004216 <HAL_DMA_Abort_IT+0xa2>
 8004204:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004208:	e005      	b.n	8004216 <HAL_DMA_Abort_IT+0xa2>
 800420a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800420e:	e002      	b.n	8004216 <HAL_DMA_Abort_IT+0xa2>
 8004210:	2310      	movs	r3, #16
 8004212:	e000      	b.n	8004216 <HAL_DMA_Abort_IT+0xa2>
 8004214:	2301      	movs	r3, #1
 8004216:	4a11      	ldr	r2, [pc, #68]	; (800425c <HAL_DMA_Abort_IT+0xe8>)
 8004218:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2201      	movs	r2, #1
 800421e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800422e:	2b00      	cmp	r3, #0
 8004230:	d003      	beq.n	800423a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	4798      	blx	r3
    } 
  }
  return status;
 800423a:	7bfb      	ldrb	r3, [r7, #15]
}
 800423c:	4618      	mov	r0, r3
 800423e:	3710      	adds	r7, #16
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}
 8004244:	40020008 	.word	0x40020008
 8004248:	4002001c 	.word	0x4002001c
 800424c:	40020030 	.word	0x40020030
 8004250:	40020044 	.word	0x40020044
 8004254:	40020058 	.word	0x40020058
 8004258:	4002006c 	.word	0x4002006c
 800425c:	40020000 	.word	0x40020000

08004260 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427c:	2204      	movs	r2, #4
 800427e:	409a      	lsls	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	4013      	ands	r3, r2
 8004284:	2b00      	cmp	r3, #0
 8004286:	d04f      	beq.n	8004328 <HAL_DMA_IRQHandler+0xc8>
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	f003 0304 	and.w	r3, r3, #4
 800428e:	2b00      	cmp	r3, #0
 8004290:	d04a      	beq.n	8004328 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0320 	and.w	r3, r3, #32
 800429c:	2b00      	cmp	r3, #0
 800429e:	d107      	bne.n	80042b0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f022 0204 	bic.w	r2, r2, #4
 80042ae:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a66      	ldr	r2, [pc, #408]	; (8004450 <HAL_DMA_IRQHandler+0x1f0>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d029      	beq.n	800430e <HAL_DMA_IRQHandler+0xae>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a65      	ldr	r2, [pc, #404]	; (8004454 <HAL_DMA_IRQHandler+0x1f4>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d022      	beq.n	800430a <HAL_DMA_IRQHandler+0xaa>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a63      	ldr	r2, [pc, #396]	; (8004458 <HAL_DMA_IRQHandler+0x1f8>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d01a      	beq.n	8004304 <HAL_DMA_IRQHandler+0xa4>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a62      	ldr	r2, [pc, #392]	; (800445c <HAL_DMA_IRQHandler+0x1fc>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d012      	beq.n	80042fe <HAL_DMA_IRQHandler+0x9e>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a60      	ldr	r2, [pc, #384]	; (8004460 <HAL_DMA_IRQHandler+0x200>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d00a      	beq.n	80042f8 <HAL_DMA_IRQHandler+0x98>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a5f      	ldr	r2, [pc, #380]	; (8004464 <HAL_DMA_IRQHandler+0x204>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d102      	bne.n	80042f2 <HAL_DMA_IRQHandler+0x92>
 80042ec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80042f0:	e00e      	b.n	8004310 <HAL_DMA_IRQHandler+0xb0>
 80042f2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80042f6:	e00b      	b.n	8004310 <HAL_DMA_IRQHandler+0xb0>
 80042f8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80042fc:	e008      	b.n	8004310 <HAL_DMA_IRQHandler+0xb0>
 80042fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004302:	e005      	b.n	8004310 <HAL_DMA_IRQHandler+0xb0>
 8004304:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004308:	e002      	b.n	8004310 <HAL_DMA_IRQHandler+0xb0>
 800430a:	2340      	movs	r3, #64	; 0x40
 800430c:	e000      	b.n	8004310 <HAL_DMA_IRQHandler+0xb0>
 800430e:	2304      	movs	r3, #4
 8004310:	4a55      	ldr	r2, [pc, #340]	; (8004468 <HAL_DMA_IRQHandler+0x208>)
 8004312:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004318:	2b00      	cmp	r3, #0
 800431a:	f000 8094 	beq.w	8004446 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004326:	e08e      	b.n	8004446 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432c:	2202      	movs	r2, #2
 800432e:	409a      	lsls	r2, r3
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	4013      	ands	r3, r2
 8004334:	2b00      	cmp	r3, #0
 8004336:	d056      	beq.n	80043e6 <HAL_DMA_IRQHandler+0x186>
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	f003 0302 	and.w	r3, r3, #2
 800433e:	2b00      	cmp	r3, #0
 8004340:	d051      	beq.n	80043e6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0320 	and.w	r3, r3, #32
 800434c:	2b00      	cmp	r3, #0
 800434e:	d10b      	bne.n	8004368 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f022 020a 	bic.w	r2, r2, #10
 800435e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a38      	ldr	r2, [pc, #224]	; (8004450 <HAL_DMA_IRQHandler+0x1f0>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d029      	beq.n	80043c6 <HAL_DMA_IRQHandler+0x166>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a37      	ldr	r2, [pc, #220]	; (8004454 <HAL_DMA_IRQHandler+0x1f4>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d022      	beq.n	80043c2 <HAL_DMA_IRQHandler+0x162>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a35      	ldr	r2, [pc, #212]	; (8004458 <HAL_DMA_IRQHandler+0x1f8>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d01a      	beq.n	80043bc <HAL_DMA_IRQHandler+0x15c>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a34      	ldr	r2, [pc, #208]	; (800445c <HAL_DMA_IRQHandler+0x1fc>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d012      	beq.n	80043b6 <HAL_DMA_IRQHandler+0x156>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a32      	ldr	r2, [pc, #200]	; (8004460 <HAL_DMA_IRQHandler+0x200>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d00a      	beq.n	80043b0 <HAL_DMA_IRQHandler+0x150>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a31      	ldr	r2, [pc, #196]	; (8004464 <HAL_DMA_IRQHandler+0x204>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d102      	bne.n	80043aa <HAL_DMA_IRQHandler+0x14a>
 80043a4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80043a8:	e00e      	b.n	80043c8 <HAL_DMA_IRQHandler+0x168>
 80043aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043ae:	e00b      	b.n	80043c8 <HAL_DMA_IRQHandler+0x168>
 80043b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80043b4:	e008      	b.n	80043c8 <HAL_DMA_IRQHandler+0x168>
 80043b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80043ba:	e005      	b.n	80043c8 <HAL_DMA_IRQHandler+0x168>
 80043bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80043c0:	e002      	b.n	80043c8 <HAL_DMA_IRQHandler+0x168>
 80043c2:	2320      	movs	r3, #32
 80043c4:	e000      	b.n	80043c8 <HAL_DMA_IRQHandler+0x168>
 80043c6:	2302      	movs	r3, #2
 80043c8:	4a27      	ldr	r2, [pc, #156]	; (8004468 <HAL_DMA_IRQHandler+0x208>)
 80043ca:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d034      	beq.n	8004446 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80043e4:	e02f      	b.n	8004446 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ea:	2208      	movs	r2, #8
 80043ec:	409a      	lsls	r2, r3
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	4013      	ands	r3, r2
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d028      	beq.n	8004448 <HAL_DMA_IRQHandler+0x1e8>
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	f003 0308 	and.w	r3, r3, #8
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d023      	beq.n	8004448 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f022 020e 	bic.w	r2, r2, #14
 800440e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004418:	2101      	movs	r1, #1
 800441a:	fa01 f202 	lsl.w	r2, r1, r2
 800441e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2201      	movs	r2, #1
 800442a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800443a:	2b00      	cmp	r3, #0
 800443c:	d004      	beq.n	8004448 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	4798      	blx	r3
    }
  }
  return;
 8004446:	bf00      	nop
 8004448:	bf00      	nop
}
 800444a:	3710      	adds	r7, #16
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}
 8004450:	40020008 	.word	0x40020008
 8004454:	4002001c 	.word	0x4002001c
 8004458:	40020030 	.word	0x40020030
 800445c:	40020044 	.word	0x40020044
 8004460:	40020058 	.word	0x40020058
 8004464:	4002006c 	.word	0x4002006c
 8004468:	40020000 	.word	0x40020000

0800446c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800446c:	b480      	push	{r7}
 800446e:	b085      	sub	sp, #20
 8004470:	af00      	add	r7, sp, #0
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	607a      	str	r2, [r7, #4]
 8004478:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004482:	2101      	movs	r1, #1
 8004484:	fa01 f202 	lsl.w	r2, r1, r2
 8004488:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	683a      	ldr	r2, [r7, #0]
 8004490:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	2b10      	cmp	r3, #16
 8004498:	d108      	bne.n	80044ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	68ba      	ldr	r2, [r7, #8]
 80044a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80044aa:	e007      	b.n	80044bc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	68ba      	ldr	r2, [r7, #8]
 80044b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	60da      	str	r2, [r3, #12]
}
 80044bc:	bf00      	nop
 80044be:	3714      	adds	r7, #20
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bc80      	pop	{r7}
 80044c4:	4770      	bx	lr
	...

080044c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b08b      	sub	sp, #44	; 0x2c
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80044d2:	2300      	movs	r3, #0
 80044d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80044d6:	2300      	movs	r3, #0
 80044d8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044da:	e169      	b.n	80047b0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80044dc:	2201      	movs	r2, #1
 80044de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e0:	fa02 f303 	lsl.w	r3, r2, r3
 80044e4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	69fa      	ldr	r2, [r7, #28]
 80044ec:	4013      	ands	r3, r2
 80044ee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80044f0:	69ba      	ldr	r2, [r7, #24]
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	f040 8158 	bne.w	80047aa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	4a9a      	ldr	r2, [pc, #616]	; (8004768 <HAL_GPIO_Init+0x2a0>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d05e      	beq.n	80045c2 <HAL_GPIO_Init+0xfa>
 8004504:	4a98      	ldr	r2, [pc, #608]	; (8004768 <HAL_GPIO_Init+0x2a0>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d875      	bhi.n	80045f6 <HAL_GPIO_Init+0x12e>
 800450a:	4a98      	ldr	r2, [pc, #608]	; (800476c <HAL_GPIO_Init+0x2a4>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d058      	beq.n	80045c2 <HAL_GPIO_Init+0xfa>
 8004510:	4a96      	ldr	r2, [pc, #600]	; (800476c <HAL_GPIO_Init+0x2a4>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d86f      	bhi.n	80045f6 <HAL_GPIO_Init+0x12e>
 8004516:	4a96      	ldr	r2, [pc, #600]	; (8004770 <HAL_GPIO_Init+0x2a8>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d052      	beq.n	80045c2 <HAL_GPIO_Init+0xfa>
 800451c:	4a94      	ldr	r2, [pc, #592]	; (8004770 <HAL_GPIO_Init+0x2a8>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d869      	bhi.n	80045f6 <HAL_GPIO_Init+0x12e>
 8004522:	4a94      	ldr	r2, [pc, #592]	; (8004774 <HAL_GPIO_Init+0x2ac>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d04c      	beq.n	80045c2 <HAL_GPIO_Init+0xfa>
 8004528:	4a92      	ldr	r2, [pc, #584]	; (8004774 <HAL_GPIO_Init+0x2ac>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d863      	bhi.n	80045f6 <HAL_GPIO_Init+0x12e>
 800452e:	4a92      	ldr	r2, [pc, #584]	; (8004778 <HAL_GPIO_Init+0x2b0>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d046      	beq.n	80045c2 <HAL_GPIO_Init+0xfa>
 8004534:	4a90      	ldr	r2, [pc, #576]	; (8004778 <HAL_GPIO_Init+0x2b0>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d85d      	bhi.n	80045f6 <HAL_GPIO_Init+0x12e>
 800453a:	2b12      	cmp	r3, #18
 800453c:	d82a      	bhi.n	8004594 <HAL_GPIO_Init+0xcc>
 800453e:	2b12      	cmp	r3, #18
 8004540:	d859      	bhi.n	80045f6 <HAL_GPIO_Init+0x12e>
 8004542:	a201      	add	r2, pc, #4	; (adr r2, 8004548 <HAL_GPIO_Init+0x80>)
 8004544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004548:	080045c3 	.word	0x080045c3
 800454c:	0800459d 	.word	0x0800459d
 8004550:	080045af 	.word	0x080045af
 8004554:	080045f1 	.word	0x080045f1
 8004558:	080045f7 	.word	0x080045f7
 800455c:	080045f7 	.word	0x080045f7
 8004560:	080045f7 	.word	0x080045f7
 8004564:	080045f7 	.word	0x080045f7
 8004568:	080045f7 	.word	0x080045f7
 800456c:	080045f7 	.word	0x080045f7
 8004570:	080045f7 	.word	0x080045f7
 8004574:	080045f7 	.word	0x080045f7
 8004578:	080045f7 	.word	0x080045f7
 800457c:	080045f7 	.word	0x080045f7
 8004580:	080045f7 	.word	0x080045f7
 8004584:	080045f7 	.word	0x080045f7
 8004588:	080045f7 	.word	0x080045f7
 800458c:	080045a5 	.word	0x080045a5
 8004590:	080045b9 	.word	0x080045b9
 8004594:	4a79      	ldr	r2, [pc, #484]	; (800477c <HAL_GPIO_Init+0x2b4>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d013      	beq.n	80045c2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800459a:	e02c      	b.n	80045f6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	623b      	str	r3, [r7, #32]
          break;
 80045a2:	e029      	b.n	80045f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	3304      	adds	r3, #4
 80045aa:	623b      	str	r3, [r7, #32]
          break;
 80045ac:	e024      	b.n	80045f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	3308      	adds	r3, #8
 80045b4:	623b      	str	r3, [r7, #32]
          break;
 80045b6:	e01f      	b.n	80045f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	330c      	adds	r3, #12
 80045be:	623b      	str	r3, [r7, #32]
          break;
 80045c0:	e01a      	b.n	80045f8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d102      	bne.n	80045d0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80045ca:	2304      	movs	r3, #4
 80045cc:	623b      	str	r3, [r7, #32]
          break;
 80045ce:	e013      	b.n	80045f8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d105      	bne.n	80045e4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80045d8:	2308      	movs	r3, #8
 80045da:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	69fa      	ldr	r2, [r7, #28]
 80045e0:	611a      	str	r2, [r3, #16]
          break;
 80045e2:	e009      	b.n	80045f8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80045e4:	2308      	movs	r3, #8
 80045e6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	69fa      	ldr	r2, [r7, #28]
 80045ec:	615a      	str	r2, [r3, #20]
          break;
 80045ee:	e003      	b.n	80045f8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80045f0:	2300      	movs	r3, #0
 80045f2:	623b      	str	r3, [r7, #32]
          break;
 80045f4:	e000      	b.n	80045f8 <HAL_GPIO_Init+0x130>
          break;
 80045f6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	2bff      	cmp	r3, #255	; 0xff
 80045fc:	d801      	bhi.n	8004602 <HAL_GPIO_Init+0x13a>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	e001      	b.n	8004606 <HAL_GPIO_Init+0x13e>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	3304      	adds	r3, #4
 8004606:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004608:	69bb      	ldr	r3, [r7, #24]
 800460a:	2bff      	cmp	r3, #255	; 0xff
 800460c:	d802      	bhi.n	8004614 <HAL_GPIO_Init+0x14c>
 800460e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	e002      	b.n	800461a <HAL_GPIO_Init+0x152>
 8004614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004616:	3b08      	subs	r3, #8
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	210f      	movs	r1, #15
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	fa01 f303 	lsl.w	r3, r1, r3
 8004628:	43db      	mvns	r3, r3
 800462a:	401a      	ands	r2, r3
 800462c:	6a39      	ldr	r1, [r7, #32]
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	fa01 f303 	lsl.w	r3, r1, r3
 8004634:	431a      	orrs	r2, r3
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004642:	2b00      	cmp	r3, #0
 8004644:	f000 80b1 	beq.w	80047aa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004648:	4b4d      	ldr	r3, [pc, #308]	; (8004780 <HAL_GPIO_Init+0x2b8>)
 800464a:	699b      	ldr	r3, [r3, #24]
 800464c:	4a4c      	ldr	r2, [pc, #304]	; (8004780 <HAL_GPIO_Init+0x2b8>)
 800464e:	f043 0301 	orr.w	r3, r3, #1
 8004652:	6193      	str	r3, [r2, #24]
 8004654:	4b4a      	ldr	r3, [pc, #296]	; (8004780 <HAL_GPIO_Init+0x2b8>)
 8004656:	699b      	ldr	r3, [r3, #24]
 8004658:	f003 0301 	and.w	r3, r3, #1
 800465c:	60bb      	str	r3, [r7, #8]
 800465e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004660:	4a48      	ldr	r2, [pc, #288]	; (8004784 <HAL_GPIO_Init+0x2bc>)
 8004662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004664:	089b      	lsrs	r3, r3, #2
 8004666:	3302      	adds	r3, #2
 8004668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800466c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800466e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004670:	f003 0303 	and.w	r3, r3, #3
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	220f      	movs	r2, #15
 8004678:	fa02 f303 	lsl.w	r3, r2, r3
 800467c:	43db      	mvns	r3, r3
 800467e:	68fa      	ldr	r2, [r7, #12]
 8004680:	4013      	ands	r3, r2
 8004682:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4a40      	ldr	r2, [pc, #256]	; (8004788 <HAL_GPIO_Init+0x2c0>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d013      	beq.n	80046b4 <HAL_GPIO_Init+0x1ec>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4a3f      	ldr	r2, [pc, #252]	; (800478c <HAL_GPIO_Init+0x2c4>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d00d      	beq.n	80046b0 <HAL_GPIO_Init+0x1e8>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4a3e      	ldr	r2, [pc, #248]	; (8004790 <HAL_GPIO_Init+0x2c8>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d007      	beq.n	80046ac <HAL_GPIO_Init+0x1e4>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a3d      	ldr	r2, [pc, #244]	; (8004794 <HAL_GPIO_Init+0x2cc>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d101      	bne.n	80046a8 <HAL_GPIO_Init+0x1e0>
 80046a4:	2303      	movs	r3, #3
 80046a6:	e006      	b.n	80046b6 <HAL_GPIO_Init+0x1ee>
 80046a8:	2304      	movs	r3, #4
 80046aa:	e004      	b.n	80046b6 <HAL_GPIO_Init+0x1ee>
 80046ac:	2302      	movs	r3, #2
 80046ae:	e002      	b.n	80046b6 <HAL_GPIO_Init+0x1ee>
 80046b0:	2301      	movs	r3, #1
 80046b2:	e000      	b.n	80046b6 <HAL_GPIO_Init+0x1ee>
 80046b4:	2300      	movs	r3, #0
 80046b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046b8:	f002 0203 	and.w	r2, r2, #3
 80046bc:	0092      	lsls	r2, r2, #2
 80046be:	4093      	lsls	r3, r2
 80046c0:	68fa      	ldr	r2, [r7, #12]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80046c6:	492f      	ldr	r1, [pc, #188]	; (8004784 <HAL_GPIO_Init+0x2bc>)
 80046c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ca:	089b      	lsrs	r3, r3, #2
 80046cc:	3302      	adds	r3, #2
 80046ce:	68fa      	ldr	r2, [r7, #12]
 80046d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d006      	beq.n	80046ee <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80046e0:	4b2d      	ldr	r3, [pc, #180]	; (8004798 <HAL_GPIO_Init+0x2d0>)
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	492c      	ldr	r1, [pc, #176]	; (8004798 <HAL_GPIO_Init+0x2d0>)
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	4313      	orrs	r3, r2
 80046ea:	600b      	str	r3, [r1, #0]
 80046ec:	e006      	b.n	80046fc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80046ee:	4b2a      	ldr	r3, [pc, #168]	; (8004798 <HAL_GPIO_Init+0x2d0>)
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	43db      	mvns	r3, r3
 80046f6:	4928      	ldr	r1, [pc, #160]	; (8004798 <HAL_GPIO_Init+0x2d0>)
 80046f8:	4013      	ands	r3, r2
 80046fa:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d006      	beq.n	8004716 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004708:	4b23      	ldr	r3, [pc, #140]	; (8004798 <HAL_GPIO_Init+0x2d0>)
 800470a:	685a      	ldr	r2, [r3, #4]
 800470c:	4922      	ldr	r1, [pc, #136]	; (8004798 <HAL_GPIO_Init+0x2d0>)
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	4313      	orrs	r3, r2
 8004712:	604b      	str	r3, [r1, #4]
 8004714:	e006      	b.n	8004724 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004716:	4b20      	ldr	r3, [pc, #128]	; (8004798 <HAL_GPIO_Init+0x2d0>)
 8004718:	685a      	ldr	r2, [r3, #4]
 800471a:	69bb      	ldr	r3, [r7, #24]
 800471c:	43db      	mvns	r3, r3
 800471e:	491e      	ldr	r1, [pc, #120]	; (8004798 <HAL_GPIO_Init+0x2d0>)
 8004720:	4013      	ands	r3, r2
 8004722:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800472c:	2b00      	cmp	r3, #0
 800472e:	d006      	beq.n	800473e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004730:	4b19      	ldr	r3, [pc, #100]	; (8004798 <HAL_GPIO_Init+0x2d0>)
 8004732:	689a      	ldr	r2, [r3, #8]
 8004734:	4918      	ldr	r1, [pc, #96]	; (8004798 <HAL_GPIO_Init+0x2d0>)
 8004736:	69bb      	ldr	r3, [r7, #24]
 8004738:	4313      	orrs	r3, r2
 800473a:	608b      	str	r3, [r1, #8]
 800473c:	e006      	b.n	800474c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800473e:	4b16      	ldr	r3, [pc, #88]	; (8004798 <HAL_GPIO_Init+0x2d0>)
 8004740:	689a      	ldr	r2, [r3, #8]
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	43db      	mvns	r3, r3
 8004746:	4914      	ldr	r1, [pc, #80]	; (8004798 <HAL_GPIO_Init+0x2d0>)
 8004748:	4013      	ands	r3, r2
 800474a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004754:	2b00      	cmp	r3, #0
 8004756:	d021      	beq.n	800479c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004758:	4b0f      	ldr	r3, [pc, #60]	; (8004798 <HAL_GPIO_Init+0x2d0>)
 800475a:	68da      	ldr	r2, [r3, #12]
 800475c:	490e      	ldr	r1, [pc, #56]	; (8004798 <HAL_GPIO_Init+0x2d0>)
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	4313      	orrs	r3, r2
 8004762:	60cb      	str	r3, [r1, #12]
 8004764:	e021      	b.n	80047aa <HAL_GPIO_Init+0x2e2>
 8004766:	bf00      	nop
 8004768:	10320000 	.word	0x10320000
 800476c:	10310000 	.word	0x10310000
 8004770:	10220000 	.word	0x10220000
 8004774:	10210000 	.word	0x10210000
 8004778:	10120000 	.word	0x10120000
 800477c:	10110000 	.word	0x10110000
 8004780:	40021000 	.word	0x40021000
 8004784:	40010000 	.word	0x40010000
 8004788:	40010800 	.word	0x40010800
 800478c:	40010c00 	.word	0x40010c00
 8004790:	40011000 	.word	0x40011000
 8004794:	40011400 	.word	0x40011400
 8004798:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800479c:	4b0b      	ldr	r3, [pc, #44]	; (80047cc <HAL_GPIO_Init+0x304>)
 800479e:	68da      	ldr	r2, [r3, #12]
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	43db      	mvns	r3, r3
 80047a4:	4909      	ldr	r1, [pc, #36]	; (80047cc <HAL_GPIO_Init+0x304>)
 80047a6:	4013      	ands	r3, r2
 80047a8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80047aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ac:	3301      	adds	r3, #1
 80047ae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b6:	fa22 f303 	lsr.w	r3, r2, r3
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	f47f ae8e 	bne.w	80044dc <HAL_GPIO_Init+0x14>
  }
}
 80047c0:	bf00      	nop
 80047c2:	bf00      	nop
 80047c4:	372c      	adds	r7, #44	; 0x2c
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bc80      	pop	{r7}
 80047ca:	4770      	bx	lr
 80047cc:	40010400 	.word	0x40010400

080047d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b085      	sub	sp, #20
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	460b      	mov	r3, r1
 80047da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	689a      	ldr	r2, [r3, #8]
 80047e0:	887b      	ldrh	r3, [r7, #2]
 80047e2:	4013      	ands	r3, r2
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d002      	beq.n	80047ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80047e8:	2301      	movs	r3, #1
 80047ea:	73fb      	strb	r3, [r7, #15]
 80047ec:	e001      	b.n	80047f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80047ee:	2300      	movs	r3, #0
 80047f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80047f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3714      	adds	r7, #20
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bc80      	pop	{r7}
 80047fc:	4770      	bx	lr

080047fe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047fe:	b480      	push	{r7}
 8004800:	b083      	sub	sp, #12
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
 8004806:	460b      	mov	r3, r1
 8004808:	807b      	strh	r3, [r7, #2]
 800480a:	4613      	mov	r3, r2
 800480c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800480e:	787b      	ldrb	r3, [r7, #1]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d003      	beq.n	800481c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004814:	887a      	ldrh	r2, [r7, #2]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800481a:	e003      	b.n	8004824 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800481c:	887b      	ldrh	r3, [r7, #2]
 800481e:	041a      	lsls	r2, r3, #16
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	611a      	str	r2, [r3, #16]
}
 8004824:	bf00      	nop
 8004826:	370c      	adds	r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	bc80      	pop	{r7}
 800482c:	4770      	bx	lr
	...

08004830 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b086      	sub	sp, #24
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d101      	bne.n	8004842 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e272      	b.n	8004d28 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 0301 	and.w	r3, r3, #1
 800484a:	2b00      	cmp	r3, #0
 800484c:	f000 8087 	beq.w	800495e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004850:	4b92      	ldr	r3, [pc, #584]	; (8004a9c <HAL_RCC_OscConfig+0x26c>)
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	f003 030c 	and.w	r3, r3, #12
 8004858:	2b04      	cmp	r3, #4
 800485a:	d00c      	beq.n	8004876 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800485c:	4b8f      	ldr	r3, [pc, #572]	; (8004a9c <HAL_RCC_OscConfig+0x26c>)
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	f003 030c 	and.w	r3, r3, #12
 8004864:	2b08      	cmp	r3, #8
 8004866:	d112      	bne.n	800488e <HAL_RCC_OscConfig+0x5e>
 8004868:	4b8c      	ldr	r3, [pc, #560]	; (8004a9c <HAL_RCC_OscConfig+0x26c>)
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004870:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004874:	d10b      	bne.n	800488e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004876:	4b89      	ldr	r3, [pc, #548]	; (8004a9c <HAL_RCC_OscConfig+0x26c>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d06c      	beq.n	800495c <HAL_RCC_OscConfig+0x12c>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d168      	bne.n	800495c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e24c      	b.n	8004d28 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004896:	d106      	bne.n	80048a6 <HAL_RCC_OscConfig+0x76>
 8004898:	4b80      	ldr	r3, [pc, #512]	; (8004a9c <HAL_RCC_OscConfig+0x26c>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a7f      	ldr	r2, [pc, #508]	; (8004a9c <HAL_RCC_OscConfig+0x26c>)
 800489e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048a2:	6013      	str	r3, [r2, #0]
 80048a4:	e02e      	b.n	8004904 <HAL_RCC_OscConfig+0xd4>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d10c      	bne.n	80048c8 <HAL_RCC_OscConfig+0x98>
 80048ae:	4b7b      	ldr	r3, [pc, #492]	; (8004a9c <HAL_RCC_OscConfig+0x26c>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a7a      	ldr	r2, [pc, #488]	; (8004a9c <HAL_RCC_OscConfig+0x26c>)
 80048b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048b8:	6013      	str	r3, [r2, #0]
 80048ba:	4b78      	ldr	r3, [pc, #480]	; (8004a9c <HAL_RCC_OscConfig+0x26c>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a77      	ldr	r2, [pc, #476]	; (8004a9c <HAL_RCC_OscConfig+0x26c>)
 80048c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048c4:	6013      	str	r3, [r2, #0]
 80048c6:	e01d      	b.n	8004904 <HAL_RCC_OscConfig+0xd4>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048d0:	d10c      	bne.n	80048ec <HAL_RCC_OscConfig+0xbc>
 80048d2:	4b72      	ldr	r3, [pc, #456]	; (8004a9c <HAL_RCC_OscConfig+0x26c>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a71      	ldr	r2, [pc, #452]	; (8004a9c <HAL_RCC_OscConfig+0x26c>)
 80048d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048dc:	6013      	str	r3, [r2, #0]
 80048de:	4b6f      	ldr	r3, [pc, #444]	; (8004a9c <HAL_RCC_OscConfig+0x26c>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a6e      	ldr	r2, [pc, #440]	; (8004a9c <HAL_RCC_OscConfig+0x26c>)
 80048e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048e8:	6013      	str	r3, [r2, #0]
 80048ea:	e00b      	b.n	8004904 <HAL_RCC_OscConfig+0xd4>
 80048ec:	4b6b      	ldr	r3, [pc, #428]	; (8004a9c <HAL_RCC_OscConfig+0x26c>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a6a      	ldr	r2, [pc, #424]	; (8004a9c <HAL_RCC_OscConfig+0x26c>)
 80048f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048f6:	6013      	str	r3, [r2, #0]
 80048f8:	4b68      	ldr	r3, [pc, #416]	; (8004a9c <HAL_RCC_OscConfig+0x26c>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a67      	ldr	r2, [pc, #412]	; (8004a9c <HAL_RCC_OscConfig+0x26c>)
 80048fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004902:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d013      	beq.n	8004934 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800490c:	f7fe fe40 	bl	8003590 <HAL_GetTick>
 8004910:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004912:	e008      	b.n	8004926 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004914:	f7fe fe3c 	bl	8003590 <HAL_GetTick>
 8004918:	4602      	mov	r2, r0
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	2b64      	cmp	r3, #100	; 0x64
 8004920:	d901      	bls.n	8004926 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	e200      	b.n	8004d28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004926:	4b5d      	ldr	r3, [pc, #372]	; (8004a9c <HAL_RCC_OscConfig+0x26c>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d0f0      	beq.n	8004914 <HAL_RCC_OscConfig+0xe4>
 8004932:	e014      	b.n	800495e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004934:	f7fe fe2c 	bl	8003590 <HAL_GetTick>
 8004938:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800493a:	e008      	b.n	800494e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800493c:	f7fe fe28 	bl	8003590 <HAL_GetTick>
 8004940:	4602      	mov	r2, r0
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	2b64      	cmp	r3, #100	; 0x64
 8004948:	d901      	bls.n	800494e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e1ec      	b.n	8004d28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800494e:	4b53      	ldr	r3, [pc, #332]	; (8004a9c <HAL_RCC_OscConfig+0x26c>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d1f0      	bne.n	800493c <HAL_RCC_OscConfig+0x10c>
 800495a:	e000      	b.n	800495e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800495c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0302 	and.w	r3, r3, #2
 8004966:	2b00      	cmp	r3, #0
 8004968:	d063      	beq.n	8004a32 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800496a:	4b4c      	ldr	r3, [pc, #304]	; (8004a9c <HAL_RCC_OscConfig+0x26c>)
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	f003 030c 	and.w	r3, r3, #12
 8004972:	2b00      	cmp	r3, #0
 8004974:	d00b      	beq.n	800498e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004976:	4b49      	ldr	r3, [pc, #292]	; (8004a9c <HAL_RCC_OscConfig+0x26c>)
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	f003 030c 	and.w	r3, r3, #12
 800497e:	2b08      	cmp	r3, #8
 8004980:	d11c      	bne.n	80049bc <HAL_RCC_OscConfig+0x18c>
 8004982:	4b46      	ldr	r3, [pc, #280]	; (8004a9c <HAL_RCC_OscConfig+0x26c>)
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d116      	bne.n	80049bc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800498e:	4b43      	ldr	r3, [pc, #268]	; (8004a9c <HAL_RCC_OscConfig+0x26c>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0302 	and.w	r3, r3, #2
 8004996:	2b00      	cmp	r3, #0
 8004998:	d005      	beq.n	80049a6 <HAL_RCC_OscConfig+0x176>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d001      	beq.n	80049a6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e1c0      	b.n	8004d28 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049a6:	4b3d      	ldr	r3, [pc, #244]	; (8004a9c <HAL_RCC_OscConfig+0x26c>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	695b      	ldr	r3, [r3, #20]
 80049b2:	00db      	lsls	r3, r3, #3
 80049b4:	4939      	ldr	r1, [pc, #228]	; (8004a9c <HAL_RCC_OscConfig+0x26c>)
 80049b6:	4313      	orrs	r3, r2
 80049b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049ba:	e03a      	b.n	8004a32 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	691b      	ldr	r3, [r3, #16]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d020      	beq.n	8004a06 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049c4:	4b36      	ldr	r3, [pc, #216]	; (8004aa0 <HAL_RCC_OscConfig+0x270>)
 80049c6:	2201      	movs	r2, #1
 80049c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049ca:	f7fe fde1 	bl	8003590 <HAL_GetTick>
 80049ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049d0:	e008      	b.n	80049e4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049d2:	f7fe fddd 	bl	8003590 <HAL_GetTick>
 80049d6:	4602      	mov	r2, r0
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	1ad3      	subs	r3, r2, r3
 80049dc:	2b02      	cmp	r3, #2
 80049de:	d901      	bls.n	80049e4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80049e0:	2303      	movs	r3, #3
 80049e2:	e1a1      	b.n	8004d28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049e4:	4b2d      	ldr	r3, [pc, #180]	; (8004a9c <HAL_RCC_OscConfig+0x26c>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0302 	and.w	r3, r3, #2
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d0f0      	beq.n	80049d2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049f0:	4b2a      	ldr	r3, [pc, #168]	; (8004a9c <HAL_RCC_OscConfig+0x26c>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	695b      	ldr	r3, [r3, #20]
 80049fc:	00db      	lsls	r3, r3, #3
 80049fe:	4927      	ldr	r1, [pc, #156]	; (8004a9c <HAL_RCC_OscConfig+0x26c>)
 8004a00:	4313      	orrs	r3, r2
 8004a02:	600b      	str	r3, [r1, #0]
 8004a04:	e015      	b.n	8004a32 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a06:	4b26      	ldr	r3, [pc, #152]	; (8004aa0 <HAL_RCC_OscConfig+0x270>)
 8004a08:	2200      	movs	r2, #0
 8004a0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a0c:	f7fe fdc0 	bl	8003590 <HAL_GetTick>
 8004a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a12:	e008      	b.n	8004a26 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a14:	f7fe fdbc 	bl	8003590 <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	d901      	bls.n	8004a26 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e180      	b.n	8004d28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a26:	4b1d      	ldr	r3, [pc, #116]	; (8004a9c <HAL_RCC_OscConfig+0x26c>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 0302 	and.w	r3, r3, #2
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d1f0      	bne.n	8004a14 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0308 	and.w	r3, r3, #8
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d03a      	beq.n	8004ab4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	699b      	ldr	r3, [r3, #24]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d019      	beq.n	8004a7a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a46:	4b17      	ldr	r3, [pc, #92]	; (8004aa4 <HAL_RCC_OscConfig+0x274>)
 8004a48:	2201      	movs	r2, #1
 8004a4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a4c:	f7fe fda0 	bl	8003590 <HAL_GetTick>
 8004a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a52:	e008      	b.n	8004a66 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a54:	f7fe fd9c 	bl	8003590 <HAL_GetTick>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	d901      	bls.n	8004a66 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e160      	b.n	8004d28 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a66:	4b0d      	ldr	r3, [pc, #52]	; (8004a9c <HAL_RCC_OscConfig+0x26c>)
 8004a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6a:	f003 0302 	and.w	r3, r3, #2
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d0f0      	beq.n	8004a54 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004a72:	2001      	movs	r0, #1
 8004a74:	f000 fad8 	bl	8005028 <RCC_Delay>
 8004a78:	e01c      	b.n	8004ab4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a7a:	4b0a      	ldr	r3, [pc, #40]	; (8004aa4 <HAL_RCC_OscConfig+0x274>)
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a80:	f7fe fd86 	bl	8003590 <HAL_GetTick>
 8004a84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a86:	e00f      	b.n	8004aa8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a88:	f7fe fd82 	bl	8003590 <HAL_GetTick>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	d908      	bls.n	8004aa8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004a96:	2303      	movs	r3, #3
 8004a98:	e146      	b.n	8004d28 <HAL_RCC_OscConfig+0x4f8>
 8004a9a:	bf00      	nop
 8004a9c:	40021000 	.word	0x40021000
 8004aa0:	42420000 	.word	0x42420000
 8004aa4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004aa8:	4b92      	ldr	r3, [pc, #584]	; (8004cf4 <HAL_RCC_OscConfig+0x4c4>)
 8004aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aac:	f003 0302 	and.w	r3, r3, #2
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d1e9      	bne.n	8004a88 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0304 	and.w	r3, r3, #4
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	f000 80a6 	beq.w	8004c0e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ac6:	4b8b      	ldr	r3, [pc, #556]	; (8004cf4 <HAL_RCC_OscConfig+0x4c4>)
 8004ac8:	69db      	ldr	r3, [r3, #28]
 8004aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d10d      	bne.n	8004aee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ad2:	4b88      	ldr	r3, [pc, #544]	; (8004cf4 <HAL_RCC_OscConfig+0x4c4>)
 8004ad4:	69db      	ldr	r3, [r3, #28]
 8004ad6:	4a87      	ldr	r2, [pc, #540]	; (8004cf4 <HAL_RCC_OscConfig+0x4c4>)
 8004ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004adc:	61d3      	str	r3, [r2, #28]
 8004ade:	4b85      	ldr	r3, [pc, #532]	; (8004cf4 <HAL_RCC_OscConfig+0x4c4>)
 8004ae0:	69db      	ldr	r3, [r3, #28]
 8004ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ae6:	60bb      	str	r3, [r7, #8]
 8004ae8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004aea:	2301      	movs	r3, #1
 8004aec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004aee:	4b82      	ldr	r3, [pc, #520]	; (8004cf8 <HAL_RCC_OscConfig+0x4c8>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d118      	bne.n	8004b2c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004afa:	4b7f      	ldr	r3, [pc, #508]	; (8004cf8 <HAL_RCC_OscConfig+0x4c8>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a7e      	ldr	r2, [pc, #504]	; (8004cf8 <HAL_RCC_OscConfig+0x4c8>)
 8004b00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b06:	f7fe fd43 	bl	8003590 <HAL_GetTick>
 8004b0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b0c:	e008      	b.n	8004b20 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b0e:	f7fe fd3f 	bl	8003590 <HAL_GetTick>
 8004b12:	4602      	mov	r2, r0
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	1ad3      	subs	r3, r2, r3
 8004b18:	2b64      	cmp	r3, #100	; 0x64
 8004b1a:	d901      	bls.n	8004b20 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004b1c:	2303      	movs	r3, #3
 8004b1e:	e103      	b.n	8004d28 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b20:	4b75      	ldr	r3, [pc, #468]	; (8004cf8 <HAL_RCC_OscConfig+0x4c8>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d0f0      	beq.n	8004b0e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d106      	bne.n	8004b42 <HAL_RCC_OscConfig+0x312>
 8004b34:	4b6f      	ldr	r3, [pc, #444]	; (8004cf4 <HAL_RCC_OscConfig+0x4c4>)
 8004b36:	6a1b      	ldr	r3, [r3, #32]
 8004b38:	4a6e      	ldr	r2, [pc, #440]	; (8004cf4 <HAL_RCC_OscConfig+0x4c4>)
 8004b3a:	f043 0301 	orr.w	r3, r3, #1
 8004b3e:	6213      	str	r3, [r2, #32]
 8004b40:	e02d      	b.n	8004b9e <HAL_RCC_OscConfig+0x36e>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d10c      	bne.n	8004b64 <HAL_RCC_OscConfig+0x334>
 8004b4a:	4b6a      	ldr	r3, [pc, #424]	; (8004cf4 <HAL_RCC_OscConfig+0x4c4>)
 8004b4c:	6a1b      	ldr	r3, [r3, #32]
 8004b4e:	4a69      	ldr	r2, [pc, #420]	; (8004cf4 <HAL_RCC_OscConfig+0x4c4>)
 8004b50:	f023 0301 	bic.w	r3, r3, #1
 8004b54:	6213      	str	r3, [r2, #32]
 8004b56:	4b67      	ldr	r3, [pc, #412]	; (8004cf4 <HAL_RCC_OscConfig+0x4c4>)
 8004b58:	6a1b      	ldr	r3, [r3, #32]
 8004b5a:	4a66      	ldr	r2, [pc, #408]	; (8004cf4 <HAL_RCC_OscConfig+0x4c4>)
 8004b5c:	f023 0304 	bic.w	r3, r3, #4
 8004b60:	6213      	str	r3, [r2, #32]
 8004b62:	e01c      	b.n	8004b9e <HAL_RCC_OscConfig+0x36e>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	2b05      	cmp	r3, #5
 8004b6a:	d10c      	bne.n	8004b86 <HAL_RCC_OscConfig+0x356>
 8004b6c:	4b61      	ldr	r3, [pc, #388]	; (8004cf4 <HAL_RCC_OscConfig+0x4c4>)
 8004b6e:	6a1b      	ldr	r3, [r3, #32]
 8004b70:	4a60      	ldr	r2, [pc, #384]	; (8004cf4 <HAL_RCC_OscConfig+0x4c4>)
 8004b72:	f043 0304 	orr.w	r3, r3, #4
 8004b76:	6213      	str	r3, [r2, #32]
 8004b78:	4b5e      	ldr	r3, [pc, #376]	; (8004cf4 <HAL_RCC_OscConfig+0x4c4>)
 8004b7a:	6a1b      	ldr	r3, [r3, #32]
 8004b7c:	4a5d      	ldr	r2, [pc, #372]	; (8004cf4 <HAL_RCC_OscConfig+0x4c4>)
 8004b7e:	f043 0301 	orr.w	r3, r3, #1
 8004b82:	6213      	str	r3, [r2, #32]
 8004b84:	e00b      	b.n	8004b9e <HAL_RCC_OscConfig+0x36e>
 8004b86:	4b5b      	ldr	r3, [pc, #364]	; (8004cf4 <HAL_RCC_OscConfig+0x4c4>)
 8004b88:	6a1b      	ldr	r3, [r3, #32]
 8004b8a:	4a5a      	ldr	r2, [pc, #360]	; (8004cf4 <HAL_RCC_OscConfig+0x4c4>)
 8004b8c:	f023 0301 	bic.w	r3, r3, #1
 8004b90:	6213      	str	r3, [r2, #32]
 8004b92:	4b58      	ldr	r3, [pc, #352]	; (8004cf4 <HAL_RCC_OscConfig+0x4c4>)
 8004b94:	6a1b      	ldr	r3, [r3, #32]
 8004b96:	4a57      	ldr	r2, [pc, #348]	; (8004cf4 <HAL_RCC_OscConfig+0x4c4>)
 8004b98:	f023 0304 	bic.w	r3, r3, #4
 8004b9c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d015      	beq.n	8004bd2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ba6:	f7fe fcf3 	bl	8003590 <HAL_GetTick>
 8004baa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bac:	e00a      	b.n	8004bc4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bae:	f7fe fcef 	bl	8003590 <HAL_GetTick>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	1ad3      	subs	r3, r2, r3
 8004bb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d901      	bls.n	8004bc4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	e0b1      	b.n	8004d28 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bc4:	4b4b      	ldr	r3, [pc, #300]	; (8004cf4 <HAL_RCC_OscConfig+0x4c4>)
 8004bc6:	6a1b      	ldr	r3, [r3, #32]
 8004bc8:	f003 0302 	and.w	r3, r3, #2
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d0ee      	beq.n	8004bae <HAL_RCC_OscConfig+0x37e>
 8004bd0:	e014      	b.n	8004bfc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bd2:	f7fe fcdd 	bl	8003590 <HAL_GetTick>
 8004bd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bd8:	e00a      	b.n	8004bf0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bda:	f7fe fcd9 	bl	8003590 <HAL_GetTick>
 8004bde:	4602      	mov	r2, r0
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d901      	bls.n	8004bf0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004bec:	2303      	movs	r3, #3
 8004bee:	e09b      	b.n	8004d28 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bf0:	4b40      	ldr	r3, [pc, #256]	; (8004cf4 <HAL_RCC_OscConfig+0x4c4>)
 8004bf2:	6a1b      	ldr	r3, [r3, #32]
 8004bf4:	f003 0302 	and.w	r3, r3, #2
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d1ee      	bne.n	8004bda <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004bfc:	7dfb      	ldrb	r3, [r7, #23]
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d105      	bne.n	8004c0e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c02:	4b3c      	ldr	r3, [pc, #240]	; (8004cf4 <HAL_RCC_OscConfig+0x4c4>)
 8004c04:	69db      	ldr	r3, [r3, #28]
 8004c06:	4a3b      	ldr	r2, [pc, #236]	; (8004cf4 <HAL_RCC_OscConfig+0x4c4>)
 8004c08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c0c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	69db      	ldr	r3, [r3, #28]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	f000 8087 	beq.w	8004d26 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c18:	4b36      	ldr	r3, [pc, #216]	; (8004cf4 <HAL_RCC_OscConfig+0x4c4>)
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	f003 030c 	and.w	r3, r3, #12
 8004c20:	2b08      	cmp	r3, #8
 8004c22:	d061      	beq.n	8004ce8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	69db      	ldr	r3, [r3, #28]
 8004c28:	2b02      	cmp	r3, #2
 8004c2a:	d146      	bne.n	8004cba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c2c:	4b33      	ldr	r3, [pc, #204]	; (8004cfc <HAL_RCC_OscConfig+0x4cc>)
 8004c2e:	2200      	movs	r2, #0
 8004c30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c32:	f7fe fcad 	bl	8003590 <HAL_GetTick>
 8004c36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c38:	e008      	b.n	8004c4c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c3a:	f7fe fca9 	bl	8003590 <HAL_GetTick>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d901      	bls.n	8004c4c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	e06d      	b.n	8004d28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c4c:	4b29      	ldr	r3, [pc, #164]	; (8004cf4 <HAL_RCC_OscConfig+0x4c4>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d1f0      	bne.n	8004c3a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6a1b      	ldr	r3, [r3, #32]
 8004c5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c60:	d108      	bne.n	8004c74 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004c62:	4b24      	ldr	r3, [pc, #144]	; (8004cf4 <HAL_RCC_OscConfig+0x4c4>)
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	4921      	ldr	r1, [pc, #132]	; (8004cf4 <HAL_RCC_OscConfig+0x4c4>)
 8004c70:	4313      	orrs	r3, r2
 8004c72:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c74:	4b1f      	ldr	r3, [pc, #124]	; (8004cf4 <HAL_RCC_OscConfig+0x4c4>)
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6a19      	ldr	r1, [r3, #32]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c84:	430b      	orrs	r3, r1
 8004c86:	491b      	ldr	r1, [pc, #108]	; (8004cf4 <HAL_RCC_OscConfig+0x4c4>)
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c8c:	4b1b      	ldr	r3, [pc, #108]	; (8004cfc <HAL_RCC_OscConfig+0x4cc>)
 8004c8e:	2201      	movs	r2, #1
 8004c90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c92:	f7fe fc7d 	bl	8003590 <HAL_GetTick>
 8004c96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c98:	e008      	b.n	8004cac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c9a:	f7fe fc79 	bl	8003590 <HAL_GetTick>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	1ad3      	subs	r3, r2, r3
 8004ca4:	2b02      	cmp	r3, #2
 8004ca6:	d901      	bls.n	8004cac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	e03d      	b.n	8004d28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004cac:	4b11      	ldr	r3, [pc, #68]	; (8004cf4 <HAL_RCC_OscConfig+0x4c4>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d0f0      	beq.n	8004c9a <HAL_RCC_OscConfig+0x46a>
 8004cb8:	e035      	b.n	8004d26 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cba:	4b10      	ldr	r3, [pc, #64]	; (8004cfc <HAL_RCC_OscConfig+0x4cc>)
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cc0:	f7fe fc66 	bl	8003590 <HAL_GetTick>
 8004cc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004cc6:	e008      	b.n	8004cda <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cc8:	f7fe fc62 	bl	8003590 <HAL_GetTick>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	d901      	bls.n	8004cda <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e026      	b.n	8004d28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004cda:	4b06      	ldr	r3, [pc, #24]	; (8004cf4 <HAL_RCC_OscConfig+0x4c4>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d1f0      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x498>
 8004ce6:	e01e      	b.n	8004d26 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	69db      	ldr	r3, [r3, #28]
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d107      	bne.n	8004d00 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e019      	b.n	8004d28 <HAL_RCC_OscConfig+0x4f8>
 8004cf4:	40021000 	.word	0x40021000
 8004cf8:	40007000 	.word	0x40007000
 8004cfc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004d00:	4b0b      	ldr	r3, [pc, #44]	; (8004d30 <HAL_RCC_OscConfig+0x500>)
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6a1b      	ldr	r3, [r3, #32]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d106      	bne.n	8004d22 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d001      	beq.n	8004d26 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e000      	b.n	8004d28 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004d26:	2300      	movs	r3, #0
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3718      	adds	r7, #24
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	40021000 	.word	0x40021000

08004d34 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d101      	bne.n	8004d48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e0d0      	b.n	8004eea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d48:	4b6a      	ldr	r3, [pc, #424]	; (8004ef4 <HAL_RCC_ClockConfig+0x1c0>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0307 	and.w	r3, r3, #7
 8004d50:	683a      	ldr	r2, [r7, #0]
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d910      	bls.n	8004d78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d56:	4b67      	ldr	r3, [pc, #412]	; (8004ef4 <HAL_RCC_ClockConfig+0x1c0>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f023 0207 	bic.w	r2, r3, #7
 8004d5e:	4965      	ldr	r1, [pc, #404]	; (8004ef4 <HAL_RCC_ClockConfig+0x1c0>)
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d66:	4b63      	ldr	r3, [pc, #396]	; (8004ef4 <HAL_RCC_ClockConfig+0x1c0>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0307 	and.w	r3, r3, #7
 8004d6e:	683a      	ldr	r2, [r7, #0]
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d001      	beq.n	8004d78 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e0b8      	b.n	8004eea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 0302 	and.w	r3, r3, #2
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d020      	beq.n	8004dc6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 0304 	and.w	r3, r3, #4
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d005      	beq.n	8004d9c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d90:	4b59      	ldr	r3, [pc, #356]	; (8004ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	4a58      	ldr	r2, [pc, #352]	; (8004ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d96:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004d9a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 0308 	and.w	r3, r3, #8
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d005      	beq.n	8004db4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004da8:	4b53      	ldr	r3, [pc, #332]	; (8004ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	4a52      	ldr	r2, [pc, #328]	; (8004ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8004dae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004db2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004db4:	4b50      	ldr	r3, [pc, #320]	; (8004ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	494d      	ldr	r1, [pc, #308]	; (8004ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0301 	and.w	r3, r3, #1
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d040      	beq.n	8004e54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d107      	bne.n	8004dea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dda:	4b47      	ldr	r3, [pc, #284]	; (8004ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d115      	bne.n	8004e12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e07f      	b.n	8004eea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	2b02      	cmp	r3, #2
 8004df0:	d107      	bne.n	8004e02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004df2:	4b41      	ldr	r3, [pc, #260]	; (8004ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d109      	bne.n	8004e12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e073      	b.n	8004eea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e02:	4b3d      	ldr	r3, [pc, #244]	; (8004ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 0302 	and.w	r3, r3, #2
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d101      	bne.n	8004e12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e06b      	b.n	8004eea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e12:	4b39      	ldr	r3, [pc, #228]	; (8004ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	f023 0203 	bic.w	r2, r3, #3
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	4936      	ldr	r1, [pc, #216]	; (8004ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8004e20:	4313      	orrs	r3, r2
 8004e22:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e24:	f7fe fbb4 	bl	8003590 <HAL_GetTick>
 8004e28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e2a:	e00a      	b.n	8004e42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e2c:	f7fe fbb0 	bl	8003590 <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d901      	bls.n	8004e42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e053      	b.n	8004eea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e42:	4b2d      	ldr	r3, [pc, #180]	; (8004ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	f003 020c 	and.w	r2, r3, #12
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d1eb      	bne.n	8004e2c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e54:	4b27      	ldr	r3, [pc, #156]	; (8004ef4 <HAL_RCC_ClockConfig+0x1c0>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 0307 	and.w	r3, r3, #7
 8004e5c:	683a      	ldr	r2, [r7, #0]
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d210      	bcs.n	8004e84 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e62:	4b24      	ldr	r3, [pc, #144]	; (8004ef4 <HAL_RCC_ClockConfig+0x1c0>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f023 0207 	bic.w	r2, r3, #7
 8004e6a:	4922      	ldr	r1, [pc, #136]	; (8004ef4 <HAL_RCC_ClockConfig+0x1c0>)
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e72:	4b20      	ldr	r3, [pc, #128]	; (8004ef4 <HAL_RCC_ClockConfig+0x1c0>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0307 	and.w	r3, r3, #7
 8004e7a:	683a      	ldr	r2, [r7, #0]
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d001      	beq.n	8004e84 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	e032      	b.n	8004eea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 0304 	and.w	r3, r3, #4
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d008      	beq.n	8004ea2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e90:	4b19      	ldr	r3, [pc, #100]	; (8004ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	4916      	ldr	r1, [pc, #88]	; (8004ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0308 	and.w	r3, r3, #8
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d009      	beq.n	8004ec2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004eae:	4b12      	ldr	r3, [pc, #72]	; (8004ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	00db      	lsls	r3, r3, #3
 8004ebc:	490e      	ldr	r1, [pc, #56]	; (8004ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004ec2:	f000 f821 	bl	8004f08 <HAL_RCC_GetSysClockFreq>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	4b0b      	ldr	r3, [pc, #44]	; (8004ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	091b      	lsrs	r3, r3, #4
 8004ece:	f003 030f 	and.w	r3, r3, #15
 8004ed2:	490a      	ldr	r1, [pc, #40]	; (8004efc <HAL_RCC_ClockConfig+0x1c8>)
 8004ed4:	5ccb      	ldrb	r3, [r1, r3]
 8004ed6:	fa22 f303 	lsr.w	r3, r2, r3
 8004eda:	4a09      	ldr	r2, [pc, #36]	; (8004f00 <HAL_RCC_ClockConfig+0x1cc>)
 8004edc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004ede:	4b09      	ldr	r3, [pc, #36]	; (8004f04 <HAL_RCC_ClockConfig+0x1d0>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f7fe fb12 	bl	800350c <HAL_InitTick>

  return HAL_OK;
 8004ee8:	2300      	movs	r3, #0
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3710      	adds	r7, #16
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	40022000 	.word	0x40022000
 8004ef8:	40021000 	.word	0x40021000
 8004efc:	08007468 	.word	0x08007468
 8004f00:	2000001c 	.word	0x2000001c
 8004f04:	20000020 	.word	0x20000020

08004f08 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f08:	b490      	push	{r4, r7}
 8004f0a:	b08a      	sub	sp, #40	; 0x28
 8004f0c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004f0e:	4b29      	ldr	r3, [pc, #164]	; (8004fb4 <HAL_RCC_GetSysClockFreq+0xac>)
 8004f10:	1d3c      	adds	r4, r7, #4
 8004f12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004f14:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004f18:	f240 2301 	movw	r3, #513	; 0x201
 8004f1c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	61fb      	str	r3, [r7, #28]
 8004f22:	2300      	movs	r3, #0
 8004f24:	61bb      	str	r3, [r7, #24]
 8004f26:	2300      	movs	r3, #0
 8004f28:	627b      	str	r3, [r7, #36]	; 0x24
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004f32:	4b21      	ldr	r3, [pc, #132]	; (8004fb8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004f38:	69fb      	ldr	r3, [r7, #28]
 8004f3a:	f003 030c 	and.w	r3, r3, #12
 8004f3e:	2b04      	cmp	r3, #4
 8004f40:	d002      	beq.n	8004f48 <HAL_RCC_GetSysClockFreq+0x40>
 8004f42:	2b08      	cmp	r3, #8
 8004f44:	d003      	beq.n	8004f4e <HAL_RCC_GetSysClockFreq+0x46>
 8004f46:	e02b      	b.n	8004fa0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004f48:	4b1c      	ldr	r3, [pc, #112]	; (8004fbc <HAL_RCC_GetSysClockFreq+0xb4>)
 8004f4a:	623b      	str	r3, [r7, #32]
      break;
 8004f4c:	e02b      	b.n	8004fa6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	0c9b      	lsrs	r3, r3, #18
 8004f52:	f003 030f 	and.w	r3, r3, #15
 8004f56:	3328      	adds	r3, #40	; 0x28
 8004f58:	443b      	add	r3, r7
 8004f5a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004f5e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d012      	beq.n	8004f90 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004f6a:	4b13      	ldr	r3, [pc, #76]	; (8004fb8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	0c5b      	lsrs	r3, r3, #17
 8004f70:	f003 0301 	and.w	r3, r3, #1
 8004f74:	3328      	adds	r3, #40	; 0x28
 8004f76:	443b      	add	r3, r7
 8004f78:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004f7c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	4a0e      	ldr	r2, [pc, #56]	; (8004fbc <HAL_RCC_GetSysClockFreq+0xb4>)
 8004f82:	fb03 f202 	mul.w	r2, r3, r2
 8004f86:	69bb      	ldr	r3, [r7, #24]
 8004f88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f8c:	627b      	str	r3, [r7, #36]	; 0x24
 8004f8e:	e004      	b.n	8004f9a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	4a0b      	ldr	r2, [pc, #44]	; (8004fc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f94:	fb02 f303 	mul.w	r3, r2, r3
 8004f98:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9c:	623b      	str	r3, [r7, #32]
      break;
 8004f9e:	e002      	b.n	8004fa6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004fa0:	4b06      	ldr	r3, [pc, #24]	; (8004fbc <HAL_RCC_GetSysClockFreq+0xb4>)
 8004fa2:	623b      	str	r3, [r7, #32]
      break;
 8004fa4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fa6:	6a3b      	ldr	r3, [r7, #32]
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3728      	adds	r7, #40	; 0x28
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bc90      	pop	{r4, r7}
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	08007458 	.word	0x08007458
 8004fb8:	40021000 	.word	0x40021000
 8004fbc:	007a1200 	.word	0x007a1200
 8004fc0:	003d0900 	.word	0x003d0900

08004fc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fc8:	4b02      	ldr	r3, [pc, #8]	; (8004fd4 <HAL_RCC_GetHCLKFreq+0x10>)
 8004fca:	681b      	ldr	r3, [r3, #0]
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bc80      	pop	{r7}
 8004fd2:	4770      	bx	lr
 8004fd4:	2000001c 	.word	0x2000001c

08004fd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004fdc:	f7ff fff2 	bl	8004fc4 <HAL_RCC_GetHCLKFreq>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	4b05      	ldr	r3, [pc, #20]	; (8004ff8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	0a1b      	lsrs	r3, r3, #8
 8004fe8:	f003 0307 	and.w	r3, r3, #7
 8004fec:	4903      	ldr	r1, [pc, #12]	; (8004ffc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fee:	5ccb      	ldrb	r3, [r1, r3]
 8004ff0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	bd80      	pop	{r7, pc}
 8004ff8:	40021000 	.word	0x40021000
 8004ffc:	08007478 	.word	0x08007478

08005000 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005004:	f7ff ffde 	bl	8004fc4 <HAL_RCC_GetHCLKFreq>
 8005008:	4602      	mov	r2, r0
 800500a:	4b05      	ldr	r3, [pc, #20]	; (8005020 <HAL_RCC_GetPCLK2Freq+0x20>)
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	0adb      	lsrs	r3, r3, #11
 8005010:	f003 0307 	and.w	r3, r3, #7
 8005014:	4903      	ldr	r1, [pc, #12]	; (8005024 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005016:	5ccb      	ldrb	r3, [r1, r3]
 8005018:	fa22 f303 	lsr.w	r3, r2, r3
}
 800501c:	4618      	mov	r0, r3
 800501e:	bd80      	pop	{r7, pc}
 8005020:	40021000 	.word	0x40021000
 8005024:	08007478 	.word	0x08007478

08005028 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005028:	b480      	push	{r7}
 800502a:	b085      	sub	sp, #20
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005030:	4b0a      	ldr	r3, [pc, #40]	; (800505c <RCC_Delay+0x34>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a0a      	ldr	r2, [pc, #40]	; (8005060 <RCC_Delay+0x38>)
 8005036:	fba2 2303 	umull	r2, r3, r2, r3
 800503a:	0a5b      	lsrs	r3, r3, #9
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	fb02 f303 	mul.w	r3, r2, r3
 8005042:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005044:	bf00      	nop
  }
  while (Delay --);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	1e5a      	subs	r2, r3, #1
 800504a:	60fa      	str	r2, [r7, #12]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d1f9      	bne.n	8005044 <RCC_Delay+0x1c>
}
 8005050:	bf00      	nop
 8005052:	bf00      	nop
 8005054:	3714      	adds	r7, #20
 8005056:	46bd      	mov	sp, r7
 8005058:	bc80      	pop	{r7}
 800505a:	4770      	bx	lr
 800505c:	2000001c 	.word	0x2000001c
 8005060:	10624dd3 	.word	0x10624dd3

08005064 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b086      	sub	sp, #24
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800506c:	2300      	movs	r3, #0
 800506e:	613b      	str	r3, [r7, #16]
 8005070:	2300      	movs	r3, #0
 8005072:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 0301 	and.w	r3, r3, #1
 800507c:	2b00      	cmp	r3, #0
 800507e:	d07d      	beq.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005080:	2300      	movs	r3, #0
 8005082:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005084:	4b4f      	ldr	r3, [pc, #316]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005086:	69db      	ldr	r3, [r3, #28]
 8005088:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800508c:	2b00      	cmp	r3, #0
 800508e:	d10d      	bne.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005090:	4b4c      	ldr	r3, [pc, #304]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005092:	69db      	ldr	r3, [r3, #28]
 8005094:	4a4b      	ldr	r2, [pc, #300]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005096:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800509a:	61d3      	str	r3, [r2, #28]
 800509c:	4b49      	ldr	r3, [pc, #292]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800509e:	69db      	ldr	r3, [r3, #28]
 80050a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050a4:	60bb      	str	r3, [r7, #8]
 80050a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050a8:	2301      	movs	r3, #1
 80050aa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050ac:	4b46      	ldr	r3, [pc, #280]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d118      	bne.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050b8:	4b43      	ldr	r3, [pc, #268]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a42      	ldr	r2, [pc, #264]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80050be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050c4:	f7fe fa64 	bl	8003590 <HAL_GetTick>
 80050c8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050ca:	e008      	b.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050cc:	f7fe fa60 	bl	8003590 <HAL_GetTick>
 80050d0:	4602      	mov	r2, r0
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	2b64      	cmp	r3, #100	; 0x64
 80050d8:	d901      	bls.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80050da:	2303      	movs	r3, #3
 80050dc:	e06d      	b.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050de:	4b3a      	ldr	r3, [pc, #232]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d0f0      	beq.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80050ea:	4b36      	ldr	r3, [pc, #216]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050ec:	6a1b      	ldr	r3, [r3, #32]
 80050ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050f2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d02e      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005102:	68fa      	ldr	r2, [r7, #12]
 8005104:	429a      	cmp	r2, r3
 8005106:	d027      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005108:	4b2e      	ldr	r3, [pc, #184]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800510a:	6a1b      	ldr	r3, [r3, #32]
 800510c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005110:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005112:	4b2e      	ldr	r3, [pc, #184]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005114:	2201      	movs	r2, #1
 8005116:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005118:	4b2c      	ldr	r3, [pc, #176]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800511a:	2200      	movs	r2, #0
 800511c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800511e:	4a29      	ldr	r2, [pc, #164]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f003 0301 	and.w	r3, r3, #1
 800512a:	2b00      	cmp	r3, #0
 800512c:	d014      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800512e:	f7fe fa2f 	bl	8003590 <HAL_GetTick>
 8005132:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005134:	e00a      	b.n	800514c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005136:	f7fe fa2b 	bl	8003590 <HAL_GetTick>
 800513a:	4602      	mov	r2, r0
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	1ad3      	subs	r3, r2, r3
 8005140:	f241 3288 	movw	r2, #5000	; 0x1388
 8005144:	4293      	cmp	r3, r2
 8005146:	d901      	bls.n	800514c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e036      	b.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800514c:	4b1d      	ldr	r3, [pc, #116]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800514e:	6a1b      	ldr	r3, [r3, #32]
 8005150:	f003 0302 	and.w	r3, r3, #2
 8005154:	2b00      	cmp	r3, #0
 8005156:	d0ee      	beq.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005158:	4b1a      	ldr	r3, [pc, #104]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800515a:	6a1b      	ldr	r3, [r3, #32]
 800515c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	4917      	ldr	r1, [pc, #92]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005166:	4313      	orrs	r3, r2
 8005168:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800516a:	7dfb      	ldrb	r3, [r7, #23]
 800516c:	2b01      	cmp	r3, #1
 800516e:	d105      	bne.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005170:	4b14      	ldr	r3, [pc, #80]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005172:	69db      	ldr	r3, [r3, #28]
 8005174:	4a13      	ldr	r2, [pc, #76]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005176:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800517a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 0302 	and.w	r3, r3, #2
 8005184:	2b00      	cmp	r3, #0
 8005186:	d008      	beq.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005188:	4b0e      	ldr	r3, [pc, #56]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	490b      	ldr	r1, [pc, #44]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005196:	4313      	orrs	r3, r2
 8005198:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 0310 	and.w	r3, r3, #16
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d008      	beq.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80051a6:	4b07      	ldr	r3, [pc, #28]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	4904      	ldr	r1, [pc, #16]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051b4:	4313      	orrs	r3, r2
 80051b6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80051b8:	2300      	movs	r3, #0
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3718      	adds	r7, #24
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	40021000 	.word	0x40021000
 80051c8:	40007000 	.word	0x40007000
 80051cc:	42420440 	.word	0x42420440

080051d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b082      	sub	sp, #8
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d101      	bne.n	80051e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e041      	b.n	8005266 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d106      	bne.n	80051fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f7fd fff4 	bl	80031e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2202      	movs	r2, #2
 8005200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	3304      	adds	r3, #4
 800520c:	4619      	mov	r1, r3
 800520e:	4610      	mov	r0, r2
 8005210:	f000 fabe 	bl	8005790 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005264:	2300      	movs	r3, #0
}
 8005266:	4618      	mov	r0, r3
 8005268:	3708      	adds	r7, #8
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
	...

08005270 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d109      	bne.n	8005294 <HAL_TIM_PWM_Start+0x24>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005286:	b2db      	uxtb	r3, r3
 8005288:	2b01      	cmp	r3, #1
 800528a:	bf14      	ite	ne
 800528c:	2301      	movne	r3, #1
 800528e:	2300      	moveq	r3, #0
 8005290:	b2db      	uxtb	r3, r3
 8005292:	e022      	b.n	80052da <HAL_TIM_PWM_Start+0x6a>
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	2b04      	cmp	r3, #4
 8005298:	d109      	bne.n	80052ae <HAL_TIM_PWM_Start+0x3e>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	bf14      	ite	ne
 80052a6:	2301      	movne	r3, #1
 80052a8:	2300      	moveq	r3, #0
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	e015      	b.n	80052da <HAL_TIM_PWM_Start+0x6a>
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	2b08      	cmp	r3, #8
 80052b2:	d109      	bne.n	80052c8 <HAL_TIM_PWM_Start+0x58>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	2b01      	cmp	r3, #1
 80052be:	bf14      	ite	ne
 80052c0:	2301      	movne	r3, #1
 80052c2:	2300      	moveq	r3, #0
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	e008      	b.n	80052da <HAL_TIM_PWM_Start+0x6a>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	bf14      	ite	ne
 80052d4:	2301      	movne	r3, #1
 80052d6:	2300      	moveq	r3, #0
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d001      	beq.n	80052e2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e05e      	b.n	80053a0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d104      	bne.n	80052f2 <HAL_TIM_PWM_Start+0x82>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2202      	movs	r2, #2
 80052ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052f0:	e013      	b.n	800531a <HAL_TIM_PWM_Start+0xaa>
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	2b04      	cmp	r3, #4
 80052f6:	d104      	bne.n	8005302 <HAL_TIM_PWM_Start+0x92>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2202      	movs	r2, #2
 80052fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005300:	e00b      	b.n	800531a <HAL_TIM_PWM_Start+0xaa>
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	2b08      	cmp	r3, #8
 8005306:	d104      	bne.n	8005312 <HAL_TIM_PWM_Start+0xa2>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2202      	movs	r2, #2
 800530c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005310:	e003      	b.n	800531a <HAL_TIM_PWM_Start+0xaa>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2202      	movs	r2, #2
 8005316:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2201      	movs	r2, #1
 8005320:	6839      	ldr	r1, [r7, #0]
 8005322:	4618      	mov	r0, r3
 8005324:	f000 fc1e 	bl	8005b64 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a1e      	ldr	r2, [pc, #120]	; (80053a8 <HAL_TIM_PWM_Start+0x138>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d107      	bne.n	8005342 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005340:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a18      	ldr	r2, [pc, #96]	; (80053a8 <HAL_TIM_PWM_Start+0x138>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d00e      	beq.n	800536a <HAL_TIM_PWM_Start+0xfa>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005354:	d009      	beq.n	800536a <HAL_TIM_PWM_Start+0xfa>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a14      	ldr	r2, [pc, #80]	; (80053ac <HAL_TIM_PWM_Start+0x13c>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d004      	beq.n	800536a <HAL_TIM_PWM_Start+0xfa>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a12      	ldr	r2, [pc, #72]	; (80053b0 <HAL_TIM_PWM_Start+0x140>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d111      	bne.n	800538e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	f003 0307 	and.w	r3, r3, #7
 8005374:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2b06      	cmp	r3, #6
 800537a:	d010      	beq.n	800539e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f042 0201 	orr.w	r2, r2, #1
 800538a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800538c:	e007      	b.n	800539e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f042 0201 	orr.w	r2, r2, #1
 800539c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800539e:	2300      	movs	r3, #0
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3710      	adds	r7, #16
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	40012c00 	.word	0x40012c00
 80053ac:	40000400 	.word	0x40000400
 80053b0:	40000800 	.word	0x40000800

080053b4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b086      	sub	sp, #24
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d101      	bne.n	80053c8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	e093      	b.n	80054f0 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d106      	bne.n	80053e2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f7fd ff1d 	bl	800321c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2202      	movs	r2, #2
 80053e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	6812      	ldr	r2, [r2, #0]
 80053f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053f8:	f023 0307 	bic.w	r3, r3, #7
 80053fc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	3304      	adds	r3, #4
 8005406:	4619      	mov	r1, r3
 8005408:	4610      	mov	r0, r2
 800540a:	f000 f9c1 	bl	8005790 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	699b      	ldr	r3, [r3, #24]
 800541c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	6a1b      	ldr	r3, [r3, #32]
 8005424:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	697a      	ldr	r2, [r7, #20]
 800542c:	4313      	orrs	r3, r2
 800542e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005436:	f023 0303 	bic.w	r3, r3, #3
 800543a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	689a      	ldr	r2, [r3, #8]
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	699b      	ldr	r3, [r3, #24]
 8005444:	021b      	lsls	r3, r3, #8
 8005446:	4313      	orrs	r3, r2
 8005448:	693a      	ldr	r2, [r7, #16]
 800544a:	4313      	orrs	r3, r2
 800544c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005454:	f023 030c 	bic.w	r3, r3, #12
 8005458:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005460:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005464:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	68da      	ldr	r2, [r3, #12]
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	69db      	ldr	r3, [r3, #28]
 800546e:	021b      	lsls	r3, r3, #8
 8005470:	4313      	orrs	r3, r2
 8005472:	693a      	ldr	r2, [r7, #16]
 8005474:	4313      	orrs	r3, r2
 8005476:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	691b      	ldr	r3, [r3, #16]
 800547c:	011a      	lsls	r2, r3, #4
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	6a1b      	ldr	r3, [r3, #32]
 8005482:	031b      	lsls	r3, r3, #12
 8005484:	4313      	orrs	r3, r2
 8005486:	693a      	ldr	r2, [r7, #16]
 8005488:	4313      	orrs	r3, r2
 800548a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005492:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	685a      	ldr	r2, [r3, #4]
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	695b      	ldr	r3, [r3, #20]
 800549c:	011b      	lsls	r3, r3, #4
 800549e:	4313      	orrs	r3, r2
 80054a0:	68fa      	ldr	r2, [r7, #12]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	697a      	ldr	r2, [r7, #20]
 80054ac:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	693a      	ldr	r2, [r7, #16]
 80054b4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	68fa      	ldr	r2, [r7, #12]
 80054bc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2201      	movs	r2, #1
 80054c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2201      	movs	r2, #1
 80054ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2201      	movs	r2, #1
 80054d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2201      	movs	r2, #1
 80054da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2201      	movs	r2, #1
 80054e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2201      	movs	r2, #1
 80054ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054ee:	2300      	movs	r3, #0
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3718      	adds	r7, #24
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005508:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005510:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005518:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005520:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d110      	bne.n	800554a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005528:	7bfb      	ldrb	r3, [r7, #15]
 800552a:	2b01      	cmp	r3, #1
 800552c:	d102      	bne.n	8005534 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800552e:	7b7b      	ldrb	r3, [r7, #13]
 8005530:	2b01      	cmp	r3, #1
 8005532:	d001      	beq.n	8005538 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	e069      	b.n	800560c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2202      	movs	r2, #2
 800553c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2202      	movs	r2, #2
 8005544:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005548:	e031      	b.n	80055ae <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	2b04      	cmp	r3, #4
 800554e:	d110      	bne.n	8005572 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005550:	7bbb      	ldrb	r3, [r7, #14]
 8005552:	2b01      	cmp	r3, #1
 8005554:	d102      	bne.n	800555c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005556:	7b3b      	ldrb	r3, [r7, #12]
 8005558:	2b01      	cmp	r3, #1
 800555a:	d001      	beq.n	8005560 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	e055      	b.n	800560c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2202      	movs	r2, #2
 8005564:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2202      	movs	r2, #2
 800556c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005570:	e01d      	b.n	80055ae <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005572:	7bfb      	ldrb	r3, [r7, #15]
 8005574:	2b01      	cmp	r3, #1
 8005576:	d108      	bne.n	800558a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005578:	7bbb      	ldrb	r3, [r7, #14]
 800557a:	2b01      	cmp	r3, #1
 800557c:	d105      	bne.n	800558a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800557e:	7b7b      	ldrb	r3, [r7, #13]
 8005580:	2b01      	cmp	r3, #1
 8005582:	d102      	bne.n	800558a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005584:	7b3b      	ldrb	r3, [r7, #12]
 8005586:	2b01      	cmp	r3, #1
 8005588:	d001      	beq.n	800558e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e03e      	b.n	800560c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2202      	movs	r2, #2
 8005592:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2202      	movs	r2, #2
 800559a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2202      	movs	r2, #2
 80055a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2202      	movs	r2, #2
 80055aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d003      	beq.n	80055bc <HAL_TIM_Encoder_Start+0xc4>
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	2b04      	cmp	r3, #4
 80055b8:	d008      	beq.n	80055cc <HAL_TIM_Encoder_Start+0xd4>
 80055ba:	e00f      	b.n	80055dc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2201      	movs	r2, #1
 80055c2:	2100      	movs	r1, #0
 80055c4:	4618      	mov	r0, r3
 80055c6:	f000 facd 	bl	8005b64 <TIM_CCxChannelCmd>
      break;
 80055ca:	e016      	b.n	80055fa <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2201      	movs	r2, #1
 80055d2:	2104      	movs	r1, #4
 80055d4:	4618      	mov	r0, r3
 80055d6:	f000 fac5 	bl	8005b64 <TIM_CCxChannelCmd>
      break;
 80055da:	e00e      	b.n	80055fa <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	2201      	movs	r2, #1
 80055e2:	2100      	movs	r1, #0
 80055e4:	4618      	mov	r0, r3
 80055e6:	f000 fabd 	bl	8005b64 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	2201      	movs	r2, #1
 80055f0:	2104      	movs	r1, #4
 80055f2:	4618      	mov	r0, r3
 80055f4:	f000 fab6 	bl	8005b64 <TIM_CCxChannelCmd>
      break;
 80055f8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f042 0201 	orr.w	r2, r2, #1
 8005608:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800560a:	2300      	movs	r3, #0
}
 800560c:	4618      	mov	r0, r3
 800560e:	3710      	adds	r7, #16
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}

08005614 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b084      	sub	sp, #16
 8005618:	af00      	add	r7, sp, #0
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005626:	2b01      	cmp	r3, #1
 8005628:	d101      	bne.n	800562e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800562a:	2302      	movs	r3, #2
 800562c:	e0ac      	b.n	8005788 <HAL_TIM_PWM_ConfigChannel+0x174>
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2201      	movs	r2, #1
 8005632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2b0c      	cmp	r3, #12
 800563a:	f200 809f 	bhi.w	800577c <HAL_TIM_PWM_ConfigChannel+0x168>
 800563e:	a201      	add	r2, pc, #4	; (adr r2, 8005644 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005644:	08005679 	.word	0x08005679
 8005648:	0800577d 	.word	0x0800577d
 800564c:	0800577d 	.word	0x0800577d
 8005650:	0800577d 	.word	0x0800577d
 8005654:	080056b9 	.word	0x080056b9
 8005658:	0800577d 	.word	0x0800577d
 800565c:	0800577d 	.word	0x0800577d
 8005660:	0800577d 	.word	0x0800577d
 8005664:	080056fb 	.word	0x080056fb
 8005668:	0800577d 	.word	0x0800577d
 800566c:	0800577d 	.word	0x0800577d
 8005670:	0800577d 	.word	0x0800577d
 8005674:	0800573b 	.word	0x0800573b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	68b9      	ldr	r1, [r7, #8]
 800567e:	4618      	mov	r0, r3
 8005680:	f000 f8e8 	bl	8005854 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	699a      	ldr	r2, [r3, #24]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f042 0208 	orr.w	r2, r2, #8
 8005692:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	699a      	ldr	r2, [r3, #24]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f022 0204 	bic.w	r2, r2, #4
 80056a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	6999      	ldr	r1, [r3, #24]
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	691a      	ldr	r2, [r3, #16]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	430a      	orrs	r2, r1
 80056b4:	619a      	str	r2, [r3, #24]
      break;
 80056b6:	e062      	b.n	800577e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	68b9      	ldr	r1, [r7, #8]
 80056be:	4618      	mov	r0, r3
 80056c0:	f000 f92e 	bl	8005920 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	699a      	ldr	r2, [r3, #24]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	699a      	ldr	r2, [r3, #24]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	6999      	ldr	r1, [r3, #24]
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	691b      	ldr	r3, [r3, #16]
 80056ee:	021a      	lsls	r2, r3, #8
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	430a      	orrs	r2, r1
 80056f6:	619a      	str	r2, [r3, #24]
      break;
 80056f8:	e041      	b.n	800577e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	68b9      	ldr	r1, [r7, #8]
 8005700:	4618      	mov	r0, r3
 8005702:	f000 f977 	bl	80059f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	69da      	ldr	r2, [r3, #28]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f042 0208 	orr.w	r2, r2, #8
 8005714:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	69da      	ldr	r2, [r3, #28]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f022 0204 	bic.w	r2, r2, #4
 8005724:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	69d9      	ldr	r1, [r3, #28]
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	691a      	ldr	r2, [r3, #16]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	430a      	orrs	r2, r1
 8005736:	61da      	str	r2, [r3, #28]
      break;
 8005738:	e021      	b.n	800577e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	68b9      	ldr	r1, [r7, #8]
 8005740:	4618      	mov	r0, r3
 8005742:	f000 f9c1 	bl	8005ac8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	69da      	ldr	r2, [r3, #28]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005754:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	69da      	ldr	r2, [r3, #28]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005764:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	69d9      	ldr	r1, [r3, #28]
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	691b      	ldr	r3, [r3, #16]
 8005770:	021a      	lsls	r2, r3, #8
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	430a      	orrs	r2, r1
 8005778:	61da      	str	r2, [r3, #28]
      break;
 800577a:	e000      	b.n	800577e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800577c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2200      	movs	r2, #0
 8005782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005786:	2300      	movs	r3, #0
}
 8005788:	4618      	mov	r0, r3
 800578a:	3710      	adds	r7, #16
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005790:	b480      	push	{r7}
 8005792:	b085      	sub	sp, #20
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4a29      	ldr	r2, [pc, #164]	; (8005848 <TIM_Base_SetConfig+0xb8>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d00b      	beq.n	80057c0 <TIM_Base_SetConfig+0x30>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057ae:	d007      	beq.n	80057c0 <TIM_Base_SetConfig+0x30>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4a26      	ldr	r2, [pc, #152]	; (800584c <TIM_Base_SetConfig+0xbc>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d003      	beq.n	80057c0 <TIM_Base_SetConfig+0x30>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4a25      	ldr	r2, [pc, #148]	; (8005850 <TIM_Base_SetConfig+0xc0>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d108      	bne.n	80057d2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	68fa      	ldr	r2, [r7, #12]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4a1c      	ldr	r2, [pc, #112]	; (8005848 <TIM_Base_SetConfig+0xb8>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d00b      	beq.n	80057f2 <TIM_Base_SetConfig+0x62>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057e0:	d007      	beq.n	80057f2 <TIM_Base_SetConfig+0x62>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4a19      	ldr	r2, [pc, #100]	; (800584c <TIM_Base_SetConfig+0xbc>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d003      	beq.n	80057f2 <TIM_Base_SetConfig+0x62>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a18      	ldr	r2, [pc, #96]	; (8005850 <TIM_Base_SetConfig+0xc0>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d108      	bne.n	8005804 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	4313      	orrs	r3, r2
 8005802:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	695b      	ldr	r3, [r3, #20]
 800580e:	4313      	orrs	r3, r2
 8005810:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	68fa      	ldr	r2, [r7, #12]
 8005816:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	689a      	ldr	r2, [r3, #8]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	4a07      	ldr	r2, [pc, #28]	; (8005848 <TIM_Base_SetConfig+0xb8>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d103      	bne.n	8005838 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	691a      	ldr	r2, [r3, #16]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2201      	movs	r2, #1
 800583c:	615a      	str	r2, [r3, #20]
}
 800583e:	bf00      	nop
 8005840:	3714      	adds	r7, #20
 8005842:	46bd      	mov	sp, r7
 8005844:	bc80      	pop	{r7}
 8005846:	4770      	bx	lr
 8005848:	40012c00 	.word	0x40012c00
 800584c:	40000400 	.word	0x40000400
 8005850:	40000800 	.word	0x40000800

08005854 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005854:	b480      	push	{r7}
 8005856:	b087      	sub	sp, #28
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a1b      	ldr	r3, [r3, #32]
 8005862:	f023 0201 	bic.w	r2, r3, #1
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6a1b      	ldr	r3, [r3, #32]
 800586e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	699b      	ldr	r3, [r3, #24]
 800587a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005882:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f023 0303 	bic.w	r3, r3, #3
 800588a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	68fa      	ldr	r2, [r7, #12]
 8005892:	4313      	orrs	r3, r2
 8005894:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	f023 0302 	bic.w	r3, r3, #2
 800589c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	697a      	ldr	r2, [r7, #20]
 80058a4:	4313      	orrs	r3, r2
 80058a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	4a1c      	ldr	r2, [pc, #112]	; (800591c <TIM_OC1_SetConfig+0xc8>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d10c      	bne.n	80058ca <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	f023 0308 	bic.w	r3, r3, #8
 80058b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	697a      	ldr	r2, [r7, #20]
 80058be:	4313      	orrs	r3, r2
 80058c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	f023 0304 	bic.w	r3, r3, #4
 80058c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a13      	ldr	r2, [pc, #76]	; (800591c <TIM_OC1_SetConfig+0xc8>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d111      	bne.n	80058f6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	695b      	ldr	r3, [r3, #20]
 80058e6:	693a      	ldr	r2, [r7, #16]
 80058e8:	4313      	orrs	r3, r2
 80058ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	699b      	ldr	r3, [r3, #24]
 80058f0:	693a      	ldr	r2, [r7, #16]
 80058f2:	4313      	orrs	r3, r2
 80058f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	693a      	ldr	r2, [r7, #16]
 80058fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	68fa      	ldr	r2, [r7, #12]
 8005900:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	685a      	ldr	r2, [r3, #4]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	697a      	ldr	r2, [r7, #20]
 800590e:	621a      	str	r2, [r3, #32]
}
 8005910:	bf00      	nop
 8005912:	371c      	adds	r7, #28
 8005914:	46bd      	mov	sp, r7
 8005916:	bc80      	pop	{r7}
 8005918:	4770      	bx	lr
 800591a:	bf00      	nop
 800591c:	40012c00 	.word	0x40012c00

08005920 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005920:	b480      	push	{r7}
 8005922:	b087      	sub	sp, #28
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a1b      	ldr	r3, [r3, #32]
 800592e:	f023 0210 	bic.w	r2, r3, #16
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6a1b      	ldr	r3, [r3, #32]
 800593a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	699b      	ldr	r3, [r3, #24]
 8005946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800594e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005956:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	021b      	lsls	r3, r3, #8
 800595e:	68fa      	ldr	r2, [r7, #12]
 8005960:	4313      	orrs	r3, r2
 8005962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	f023 0320 	bic.w	r3, r3, #32
 800596a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	011b      	lsls	r3, r3, #4
 8005972:	697a      	ldr	r2, [r7, #20]
 8005974:	4313      	orrs	r3, r2
 8005976:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4a1d      	ldr	r2, [pc, #116]	; (80059f0 <TIM_OC2_SetConfig+0xd0>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d10d      	bne.n	800599c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005986:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	011b      	lsls	r3, r3, #4
 800598e:	697a      	ldr	r2, [r7, #20]
 8005990:	4313      	orrs	r3, r2
 8005992:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800599a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4a14      	ldr	r2, [pc, #80]	; (80059f0 <TIM_OC2_SetConfig+0xd0>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d113      	bne.n	80059cc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	695b      	ldr	r3, [r3, #20]
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	693a      	ldr	r2, [r7, #16]
 80059bc:	4313      	orrs	r3, r2
 80059be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	699b      	ldr	r3, [r3, #24]
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	693a      	ldr	r2, [r7, #16]
 80059c8:	4313      	orrs	r3, r2
 80059ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	693a      	ldr	r2, [r7, #16]
 80059d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	68fa      	ldr	r2, [r7, #12]
 80059d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	685a      	ldr	r2, [r3, #4]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	697a      	ldr	r2, [r7, #20]
 80059e4:	621a      	str	r2, [r3, #32]
}
 80059e6:	bf00      	nop
 80059e8:	371c      	adds	r7, #28
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bc80      	pop	{r7}
 80059ee:	4770      	bx	lr
 80059f0:	40012c00 	.word	0x40012c00

080059f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b087      	sub	sp, #28
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a1b      	ldr	r3, [r3, #32]
 8005a02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6a1b      	ldr	r3, [r3, #32]
 8005a0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	69db      	ldr	r3, [r3, #28]
 8005a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f023 0303 	bic.w	r3, r3, #3
 8005a2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	68fa      	ldr	r2, [r7, #12]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	021b      	lsls	r3, r3, #8
 8005a44:	697a      	ldr	r2, [r7, #20]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4a1d      	ldr	r2, [pc, #116]	; (8005ac4 <TIM_OC3_SetConfig+0xd0>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d10d      	bne.n	8005a6e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	021b      	lsls	r3, r3, #8
 8005a60:	697a      	ldr	r2, [r7, #20]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4a14      	ldr	r2, [pc, #80]	; (8005ac4 <TIM_OC3_SetConfig+0xd0>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d113      	bne.n	8005a9e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	695b      	ldr	r3, [r3, #20]
 8005a8a:	011b      	lsls	r3, r3, #4
 8005a8c:	693a      	ldr	r2, [r7, #16]
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	699b      	ldr	r3, [r3, #24]
 8005a96:	011b      	lsls	r3, r3, #4
 8005a98:	693a      	ldr	r2, [r7, #16]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	693a      	ldr	r2, [r7, #16]
 8005aa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	68fa      	ldr	r2, [r7, #12]
 8005aa8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	685a      	ldr	r2, [r3, #4]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	697a      	ldr	r2, [r7, #20]
 8005ab6:	621a      	str	r2, [r3, #32]
}
 8005ab8:	bf00      	nop
 8005aba:	371c      	adds	r7, #28
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bc80      	pop	{r7}
 8005ac0:	4770      	bx	lr
 8005ac2:	bf00      	nop
 8005ac4:	40012c00 	.word	0x40012c00

08005ac8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b087      	sub	sp, #28
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6a1b      	ldr	r3, [r3, #32]
 8005ad6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a1b      	ldr	r3, [r3, #32]
 8005ae2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	69db      	ldr	r3, [r3, #28]
 8005aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005af6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005afe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	021b      	lsls	r3, r3, #8
 8005b06:	68fa      	ldr	r2, [r7, #12]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	031b      	lsls	r3, r3, #12
 8005b1a:	693a      	ldr	r2, [r7, #16]
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	4a0f      	ldr	r2, [pc, #60]	; (8005b60 <TIM_OC4_SetConfig+0x98>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d109      	bne.n	8005b3c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	695b      	ldr	r3, [r3, #20]
 8005b34:	019b      	lsls	r3, r3, #6
 8005b36:	697a      	ldr	r2, [r7, #20]
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	697a      	ldr	r2, [r7, #20]
 8005b40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	68fa      	ldr	r2, [r7, #12]
 8005b46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	685a      	ldr	r2, [r3, #4]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	693a      	ldr	r2, [r7, #16]
 8005b54:	621a      	str	r2, [r3, #32]
}
 8005b56:	bf00      	nop
 8005b58:	371c      	adds	r7, #28
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bc80      	pop	{r7}
 8005b5e:	4770      	bx	lr
 8005b60:	40012c00 	.word	0x40012c00

08005b64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b087      	sub	sp, #28
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	60f8      	str	r0, [r7, #12]
 8005b6c:	60b9      	str	r1, [r7, #8]
 8005b6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	f003 031f 	and.w	r3, r3, #31
 8005b76:	2201      	movs	r2, #1
 8005b78:	fa02 f303 	lsl.w	r3, r2, r3
 8005b7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6a1a      	ldr	r2, [r3, #32]
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	43db      	mvns	r3, r3
 8005b86:	401a      	ands	r2, r3
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6a1a      	ldr	r2, [r3, #32]
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	f003 031f 	and.w	r3, r3, #31
 8005b96:	6879      	ldr	r1, [r7, #4]
 8005b98:	fa01 f303 	lsl.w	r3, r1, r3
 8005b9c:	431a      	orrs	r2, r3
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	621a      	str	r2, [r3, #32]
}
 8005ba2:	bf00      	nop
 8005ba4:	371c      	adds	r7, #28
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bc80      	pop	{r7}
 8005baa:	4770      	bx	lr

08005bac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b085      	sub	sp, #20
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d101      	bne.n	8005bc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005bc0:	2302      	movs	r3, #2
 8005bc2:	e046      	b.n	8005c52 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2202      	movs	r2, #2
 8005bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	68fa      	ldr	r2, [r7, #12]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a16      	ldr	r2, [pc, #88]	; (8005c5c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d00e      	beq.n	8005c26 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c10:	d009      	beq.n	8005c26 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a12      	ldr	r2, [pc, #72]	; (8005c60 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d004      	beq.n	8005c26 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a10      	ldr	r2, [pc, #64]	; (8005c64 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d10c      	bne.n	8005c40 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	68ba      	ldr	r2, [r7, #8]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	68ba      	ldr	r2, [r7, #8]
 8005c3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c50:	2300      	movs	r3, #0
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3714      	adds	r7, #20
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bc80      	pop	{r7}
 8005c5a:	4770      	bx	lr
 8005c5c:	40012c00 	.word	0x40012c00
 8005c60:	40000400 	.word	0x40000400
 8005c64:	40000800 	.word	0x40000800

08005c68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b082      	sub	sp, #8
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d101      	bne.n	8005c7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	e03f      	b.n	8005cfa <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d106      	bne.n	8005c94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f7fd fbac 	bl	80033ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2224      	movs	r2, #36	; 0x24
 8005c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	68da      	ldr	r2, [r3, #12]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005caa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f000 fc25 	bl	80064fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	691a      	ldr	r2, [r3, #16]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005cc0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	695a      	ldr	r2, [r3, #20]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005cd0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	68da      	ldr	r2, [r3, #12]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ce0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2220      	movs	r2, #32
 8005cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2220      	movs	r2, #32
 8005cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005cf8:	2300      	movs	r3, #0
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3708      	adds	r7, #8
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}

08005d02 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d02:	b580      	push	{r7, lr}
 8005d04:	b08a      	sub	sp, #40	; 0x28
 8005d06:	af02      	add	r7, sp, #8
 8005d08:	60f8      	str	r0, [r7, #12]
 8005d0a:	60b9      	str	r1, [r7, #8]
 8005d0c:	603b      	str	r3, [r7, #0]
 8005d0e:	4613      	mov	r3, r2
 8005d10:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005d12:	2300      	movs	r3, #0
 8005d14:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	2b20      	cmp	r3, #32
 8005d20:	d17c      	bne.n	8005e1c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d002      	beq.n	8005d2e <HAL_UART_Transmit+0x2c>
 8005d28:	88fb      	ldrh	r3, [r7, #6]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d101      	bne.n	8005d32 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e075      	b.n	8005e1e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d101      	bne.n	8005d40 <HAL_UART_Transmit+0x3e>
 8005d3c:	2302      	movs	r3, #2
 8005d3e:	e06e      	b.n	8005e1e <HAL_UART_Transmit+0x11c>
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2221      	movs	r2, #33	; 0x21
 8005d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d56:	f7fd fc1b 	bl	8003590 <HAL_GetTick>
 8005d5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	88fa      	ldrh	r2, [r7, #6]
 8005d60:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	88fa      	ldrh	r2, [r7, #6]
 8005d66:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d70:	d108      	bne.n	8005d84 <HAL_UART_Transmit+0x82>
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	691b      	ldr	r3, [r3, #16]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d104      	bne.n	8005d84 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	61bb      	str	r3, [r7, #24]
 8005d82:	e003      	b.n	8005d8c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005d94:	e02a      	b.n	8005dec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	9300      	str	r3, [sp, #0]
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	2180      	movs	r1, #128	; 0x80
 8005da0:	68f8      	ldr	r0, [r7, #12]
 8005da2:	f000 fa11 	bl	80061c8 <UART_WaitOnFlagUntilTimeout>
 8005da6:	4603      	mov	r3, r0
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d001      	beq.n	8005db0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005dac:	2303      	movs	r3, #3
 8005dae:	e036      	b.n	8005e1e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005db0:	69fb      	ldr	r3, [r7, #28]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d10b      	bne.n	8005dce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005db6:	69bb      	ldr	r3, [r7, #24]
 8005db8:	881b      	ldrh	r3, [r3, #0]
 8005dba:	461a      	mov	r2, r3
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005dc4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	3302      	adds	r3, #2
 8005dca:	61bb      	str	r3, [r7, #24]
 8005dcc:	e007      	b.n	8005dde <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005dce:	69fb      	ldr	r3, [r7, #28]
 8005dd0:	781a      	ldrb	r2, [r3, #0]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	3301      	adds	r3, #1
 8005ddc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	3b01      	subs	r3, #1
 8005de6:	b29a      	uxth	r2, r3
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d1cf      	bne.n	8005d96 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	9300      	str	r3, [sp, #0]
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	2140      	movs	r1, #64	; 0x40
 8005e00:	68f8      	ldr	r0, [r7, #12]
 8005e02:	f000 f9e1 	bl	80061c8 <UART_WaitOnFlagUntilTimeout>
 8005e06:	4603      	mov	r3, r0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d001      	beq.n	8005e10 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005e0c:	2303      	movs	r3, #3
 8005e0e:	e006      	b.n	8005e1e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2220      	movs	r2, #32
 8005e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	e000      	b.n	8005e1e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005e1c:	2302      	movs	r3, #2
  }
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3720      	adds	r7, #32
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}
	...

08005e28 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b08a      	sub	sp, #40	; 0x28
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	695b      	ldr	r3, [r3, #20]
 8005e46:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e52:	f003 030f 	and.w	r3, r3, #15
 8005e56:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005e58:	69bb      	ldr	r3, [r7, #24]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d10d      	bne.n	8005e7a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e60:	f003 0320 	and.w	r3, r3, #32
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d008      	beq.n	8005e7a <HAL_UART_IRQHandler+0x52>
 8005e68:	6a3b      	ldr	r3, [r7, #32]
 8005e6a:	f003 0320 	and.w	r3, r3, #32
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d003      	beq.n	8005e7a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 fa99 	bl	80063aa <UART_Receive_IT>
      return;
 8005e78:	e17b      	b.n	8006172 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005e7a:	69bb      	ldr	r3, [r7, #24]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	f000 80b1 	beq.w	8005fe4 <HAL_UART_IRQHandler+0x1bc>
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	f003 0301 	and.w	r3, r3, #1
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d105      	bne.n	8005e98 <HAL_UART_IRQHandler+0x70>
 8005e8c:	6a3b      	ldr	r3, [r7, #32]
 8005e8e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	f000 80a6 	beq.w	8005fe4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9a:	f003 0301 	and.w	r3, r3, #1
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d00a      	beq.n	8005eb8 <HAL_UART_IRQHandler+0x90>
 8005ea2:	6a3b      	ldr	r3, [r7, #32]
 8005ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d005      	beq.n	8005eb8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb0:	f043 0201 	orr.w	r2, r3, #1
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eba:	f003 0304 	and.w	r3, r3, #4
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d00a      	beq.n	8005ed8 <HAL_UART_IRQHandler+0xb0>
 8005ec2:	69fb      	ldr	r3, [r7, #28]
 8005ec4:	f003 0301 	and.w	r3, r3, #1
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d005      	beq.n	8005ed8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed0:	f043 0202 	orr.w	r2, r3, #2
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eda:	f003 0302 	and.w	r3, r3, #2
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d00a      	beq.n	8005ef8 <HAL_UART_IRQHandler+0xd0>
 8005ee2:	69fb      	ldr	r3, [r7, #28]
 8005ee4:	f003 0301 	and.w	r3, r3, #1
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d005      	beq.n	8005ef8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef0:	f043 0204 	orr.w	r2, r3, #4
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efa:	f003 0308 	and.w	r3, r3, #8
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d00f      	beq.n	8005f22 <HAL_UART_IRQHandler+0xfa>
 8005f02:	6a3b      	ldr	r3, [r7, #32]
 8005f04:	f003 0320 	and.w	r3, r3, #32
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d104      	bne.n	8005f16 <HAL_UART_IRQHandler+0xee>
 8005f0c:	69fb      	ldr	r3, [r7, #28]
 8005f0e:	f003 0301 	and.w	r3, r3, #1
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d005      	beq.n	8005f22 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1a:	f043 0208 	orr.w	r2, r3, #8
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	f000 811e 	beq.w	8006168 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2e:	f003 0320 	and.w	r3, r3, #32
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d007      	beq.n	8005f46 <HAL_UART_IRQHandler+0x11e>
 8005f36:	6a3b      	ldr	r3, [r7, #32]
 8005f38:	f003 0320 	and.w	r3, r3, #32
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d002      	beq.n	8005f46 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f000 fa32 	bl	80063aa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	695b      	ldr	r3, [r3, #20]
 8005f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	bf14      	ite	ne
 8005f54:	2301      	movne	r3, #1
 8005f56:	2300      	moveq	r3, #0
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f60:	f003 0308 	and.w	r3, r3, #8
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d102      	bne.n	8005f6e <HAL_UART_IRQHandler+0x146>
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d031      	beq.n	8005fd2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 f974 	bl	800625c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	695b      	ldr	r3, [r3, #20]
 8005f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d023      	beq.n	8005fca <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	695a      	ldr	r2, [r3, #20]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f90:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d013      	beq.n	8005fc2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f9e:	4a76      	ldr	r2, [pc, #472]	; (8006178 <HAL_UART_IRQHandler+0x350>)
 8005fa0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f7fe f8e4 	bl	8004174 <HAL_DMA_Abort_IT>
 8005fac:	4603      	mov	r3, r0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d016      	beq.n	8005fe0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005fbc:	4610      	mov	r0, r2
 8005fbe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fc0:	e00e      	b.n	8005fe0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 f8ec 	bl	80061a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fc8:	e00a      	b.n	8005fe0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f000 f8e8 	bl	80061a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fd0:	e006      	b.n	8005fe0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 f8e4 	bl	80061a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005fde:	e0c3      	b.n	8006168 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fe0:	bf00      	nop
    return;
 8005fe2:	e0c1      	b.n	8006168 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	f040 80a1 	bne.w	8006130 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff0:	f003 0310 	and.w	r3, r3, #16
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	f000 809b 	beq.w	8006130 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005ffa:	6a3b      	ldr	r3, [r7, #32]
 8005ffc:	f003 0310 	and.w	r3, r3, #16
 8006000:	2b00      	cmp	r3, #0
 8006002:	f000 8095 	beq.w	8006130 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006006:	2300      	movs	r3, #0
 8006008:	60fb      	str	r3, [r7, #12]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	60fb      	str	r3, [r7, #12]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	60fb      	str	r3, [r7, #12]
 800601a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	695b      	ldr	r3, [r3, #20]
 8006022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006026:	2b00      	cmp	r3, #0
 8006028:	d04e      	beq.n	80060c8 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8006034:	8a3b      	ldrh	r3, [r7, #16]
 8006036:	2b00      	cmp	r3, #0
 8006038:	f000 8098 	beq.w	800616c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006040:	8a3a      	ldrh	r2, [r7, #16]
 8006042:	429a      	cmp	r2, r3
 8006044:	f080 8092 	bcs.w	800616c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	8a3a      	ldrh	r2, [r7, #16]
 800604c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006052:	699b      	ldr	r3, [r3, #24]
 8006054:	2b20      	cmp	r3, #32
 8006056:	d02b      	beq.n	80060b0 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	68da      	ldr	r2, [r3, #12]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006066:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	695a      	ldr	r2, [r3, #20]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f022 0201 	bic.w	r2, r2, #1
 8006076:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	695a      	ldr	r2, [r3, #20]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006086:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2220      	movs	r2, #32
 800608c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	68da      	ldr	r2, [r3, #12]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f022 0210 	bic.w	r2, r2, #16
 80060a4:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060aa:	4618      	mov	r0, r3
 80060ac:	f7fe f827 	bl	80040fe <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	1ad3      	subs	r3, r2, r3
 80060bc:	b29b      	uxth	r3, r3
 80060be:	4619      	mov	r1, r3
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f000 f876 	bl	80061b2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80060c6:	e051      	b.n	800616c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	1ad3      	subs	r3, r2, r3
 80060d4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80060da:	b29b      	uxth	r3, r3
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d047      	beq.n	8006170 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80060e0:	8a7b      	ldrh	r3, [r7, #18]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d044      	beq.n	8006170 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	68da      	ldr	r2, [r3, #12]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80060f4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	695a      	ldr	r2, [r3, #20]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f022 0201 	bic.w	r2, r2, #1
 8006104:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2220      	movs	r2, #32
 800610a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2200      	movs	r2, #0
 8006112:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	68da      	ldr	r2, [r3, #12]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f022 0210 	bic.w	r2, r2, #16
 8006122:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006124:	8a7b      	ldrh	r3, [r7, #18]
 8006126:	4619      	mov	r1, r3
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f000 f842 	bl	80061b2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800612e:	e01f      	b.n	8006170 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006136:	2b00      	cmp	r3, #0
 8006138:	d008      	beq.n	800614c <HAL_UART_IRQHandler+0x324>
 800613a:	6a3b      	ldr	r3, [r7, #32]
 800613c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006140:	2b00      	cmp	r3, #0
 8006142:	d003      	beq.n	800614c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f000 f8c9 	bl	80062dc <UART_Transmit_IT>
    return;
 800614a:	e012      	b.n	8006172 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800614c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006152:	2b00      	cmp	r3, #0
 8006154:	d00d      	beq.n	8006172 <HAL_UART_IRQHandler+0x34a>
 8006156:	6a3b      	ldr	r3, [r7, #32]
 8006158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800615c:	2b00      	cmp	r3, #0
 800615e:	d008      	beq.n	8006172 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f000 f90a 	bl	800637a <UART_EndTransmit_IT>
    return;
 8006166:	e004      	b.n	8006172 <HAL_UART_IRQHandler+0x34a>
    return;
 8006168:	bf00      	nop
 800616a:	e002      	b.n	8006172 <HAL_UART_IRQHandler+0x34a>
      return;
 800616c:	bf00      	nop
 800616e:	e000      	b.n	8006172 <HAL_UART_IRQHandler+0x34a>
      return;
 8006170:	bf00      	nop
  }
}
 8006172:	3728      	adds	r7, #40	; 0x28
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}
 8006178:	080062b5 	.word	0x080062b5

0800617c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800617c:	b480      	push	{r7}
 800617e:	b083      	sub	sp, #12
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006184:	bf00      	nop
 8006186:	370c      	adds	r7, #12
 8006188:	46bd      	mov	sp, r7
 800618a:	bc80      	pop	{r7}
 800618c:	4770      	bx	lr

0800618e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800618e:	b480      	push	{r7}
 8006190:	b083      	sub	sp, #12
 8006192:	af00      	add	r7, sp, #0
 8006194:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006196:	bf00      	nop
 8006198:	370c      	adds	r7, #12
 800619a:	46bd      	mov	sp, r7
 800619c:	bc80      	pop	{r7}
 800619e:	4770      	bx	lr

080061a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b083      	sub	sp, #12
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80061a8:	bf00      	nop
 80061aa:	370c      	adds	r7, #12
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bc80      	pop	{r7}
 80061b0:	4770      	bx	lr

080061b2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80061b2:	b480      	push	{r7}
 80061b4:	b083      	sub	sp, #12
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	6078      	str	r0, [r7, #4]
 80061ba:	460b      	mov	r3, r1
 80061bc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80061be:	bf00      	nop
 80061c0:	370c      	adds	r7, #12
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bc80      	pop	{r7}
 80061c6:	4770      	bx	lr

080061c8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b084      	sub	sp, #16
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	60f8      	str	r0, [r7, #12]
 80061d0:	60b9      	str	r1, [r7, #8]
 80061d2:	603b      	str	r3, [r7, #0]
 80061d4:	4613      	mov	r3, r2
 80061d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061d8:	e02c      	b.n	8006234 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061da:	69bb      	ldr	r3, [r7, #24]
 80061dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061e0:	d028      	beq.n	8006234 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80061e2:	69bb      	ldr	r3, [r7, #24]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d007      	beq.n	80061f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80061e8:	f7fd f9d2 	bl	8003590 <HAL_GetTick>
 80061ec:	4602      	mov	r2, r0
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	1ad3      	subs	r3, r2, r3
 80061f2:	69ba      	ldr	r2, [r7, #24]
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d21d      	bcs.n	8006234 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	68da      	ldr	r2, [r3, #12]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006206:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	695a      	ldr	r2, [r3, #20]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f022 0201 	bic.w	r2, r2, #1
 8006216:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2220      	movs	r2, #32
 800621c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2220      	movs	r2, #32
 8006224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2200      	movs	r2, #0
 800622c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006230:	2303      	movs	r3, #3
 8006232:	e00f      	b.n	8006254 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	4013      	ands	r3, r2
 800623e:	68ba      	ldr	r2, [r7, #8]
 8006240:	429a      	cmp	r2, r3
 8006242:	bf0c      	ite	eq
 8006244:	2301      	moveq	r3, #1
 8006246:	2300      	movne	r3, #0
 8006248:	b2db      	uxtb	r3, r3
 800624a:	461a      	mov	r2, r3
 800624c:	79fb      	ldrb	r3, [r7, #7]
 800624e:	429a      	cmp	r2, r3
 8006250:	d0c3      	beq.n	80061da <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006252:	2300      	movs	r3, #0
}
 8006254:	4618      	mov	r0, r3
 8006256:	3710      	adds	r7, #16
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}

0800625c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800625c:	b480      	push	{r7}
 800625e:	b083      	sub	sp, #12
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	68da      	ldr	r2, [r3, #12]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006272:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	695a      	ldr	r2, [r3, #20]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f022 0201 	bic.w	r2, r2, #1
 8006282:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006288:	2b01      	cmp	r3, #1
 800628a:	d107      	bne.n	800629c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	68da      	ldr	r2, [r3, #12]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f022 0210 	bic.w	r2, r2, #16
 800629a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2220      	movs	r2, #32
 80062a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2200      	movs	r2, #0
 80062a8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80062aa:	bf00      	nop
 80062ac:	370c      	adds	r7, #12
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bc80      	pop	{r7}
 80062b2:	4770      	bx	lr

080062b4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b084      	sub	sp, #16
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2200      	movs	r2, #0
 80062c6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2200      	movs	r2, #0
 80062cc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80062ce:	68f8      	ldr	r0, [r7, #12]
 80062d0:	f7ff ff66 	bl	80061a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062d4:	bf00      	nop
 80062d6:	3710      	adds	r7, #16
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}

080062dc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80062dc:	b480      	push	{r7}
 80062de:	b085      	sub	sp, #20
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062ea:	b2db      	uxtb	r3, r3
 80062ec:	2b21      	cmp	r3, #33	; 0x21
 80062ee:	d13e      	bne.n	800636e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062f8:	d114      	bne.n	8006324 <UART_Transmit_IT+0x48>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d110      	bne.n	8006324 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6a1b      	ldr	r3, [r3, #32]
 8006306:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	881b      	ldrh	r3, [r3, #0]
 800630c:	461a      	mov	r2, r3
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006316:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6a1b      	ldr	r3, [r3, #32]
 800631c:	1c9a      	adds	r2, r3, #2
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	621a      	str	r2, [r3, #32]
 8006322:	e008      	b.n	8006336 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6a1b      	ldr	r3, [r3, #32]
 8006328:	1c59      	adds	r1, r3, #1
 800632a:	687a      	ldr	r2, [r7, #4]
 800632c:	6211      	str	r1, [r2, #32]
 800632e:	781a      	ldrb	r2, [r3, #0]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800633a:	b29b      	uxth	r3, r3
 800633c:	3b01      	subs	r3, #1
 800633e:	b29b      	uxth	r3, r3
 8006340:	687a      	ldr	r2, [r7, #4]
 8006342:	4619      	mov	r1, r3
 8006344:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006346:	2b00      	cmp	r3, #0
 8006348:	d10f      	bne.n	800636a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	68da      	ldr	r2, [r3, #12]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006358:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	68da      	ldr	r2, [r3, #12]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006368:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800636a:	2300      	movs	r3, #0
 800636c:	e000      	b.n	8006370 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800636e:	2302      	movs	r3, #2
  }
}
 8006370:	4618      	mov	r0, r3
 8006372:	3714      	adds	r7, #20
 8006374:	46bd      	mov	sp, r7
 8006376:	bc80      	pop	{r7}
 8006378:	4770      	bx	lr

0800637a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800637a:	b580      	push	{r7, lr}
 800637c:	b082      	sub	sp, #8
 800637e:	af00      	add	r7, sp, #0
 8006380:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	68da      	ldr	r2, [r3, #12]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006390:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2220      	movs	r2, #32
 8006396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f7ff feee 	bl	800617c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80063a0:	2300      	movs	r3, #0
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3708      	adds	r7, #8
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}

080063aa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80063aa:	b580      	push	{r7, lr}
 80063ac:	b086      	sub	sp, #24
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	2b22      	cmp	r3, #34	; 0x22
 80063bc:	f040 8099 	bne.w	80064f2 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063c8:	d117      	bne.n	80063fa <UART_Receive_IT+0x50>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	691b      	ldr	r3, [r3, #16]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d113      	bne.n	80063fa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80063d2:	2300      	movs	r3, #0
 80063d4:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063da:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063e8:	b29a      	uxth	r2, r3
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063f2:	1c9a      	adds	r2, r3, #2
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	629a      	str	r2, [r3, #40]	; 0x28
 80063f8:	e026      	b.n	8006448 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063fe:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8006400:	2300      	movs	r3, #0
 8006402:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800640c:	d007      	beq.n	800641e <UART_Receive_IT+0x74>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d10a      	bne.n	800642c <UART_Receive_IT+0x82>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d106      	bne.n	800642c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	b2da      	uxtb	r2, r3
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	701a      	strb	r2, [r3, #0]
 800642a:	e008      	b.n	800643e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	b2db      	uxtb	r3, r3
 8006434:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006438:	b2da      	uxtb	r2, r3
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006442:	1c5a      	adds	r2, r3, #1
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800644c:	b29b      	uxth	r3, r3
 800644e:	3b01      	subs	r3, #1
 8006450:	b29b      	uxth	r3, r3
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	4619      	mov	r1, r3
 8006456:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006458:	2b00      	cmp	r3, #0
 800645a:	d148      	bne.n	80064ee <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	68da      	ldr	r2, [r3, #12]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f022 0220 	bic.w	r2, r2, #32
 800646a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	68da      	ldr	r2, [r3, #12]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800647a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	695a      	ldr	r2, [r3, #20]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f022 0201 	bic.w	r2, r2, #1
 800648a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2220      	movs	r2, #32
 8006490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006498:	2b01      	cmp	r3, #1
 800649a:	d123      	bne.n	80064e4 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	68da      	ldr	r2, [r3, #12]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f022 0210 	bic.w	r2, r2, #16
 80064b0:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f003 0310 	and.w	r3, r3, #16
 80064bc:	2b10      	cmp	r3, #16
 80064be:	d10a      	bne.n	80064d6 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80064c0:	2300      	movs	r3, #0
 80064c2:	60fb      	str	r3, [r7, #12]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	60fb      	str	r3, [r7, #12]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	60fb      	str	r3, [r7, #12]
 80064d4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80064da:	4619      	mov	r1, r3
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f7ff fe68 	bl	80061b2 <HAL_UARTEx_RxEventCallback>
 80064e2:	e002      	b.n	80064ea <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f7ff fe52 	bl	800618e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80064ea:	2300      	movs	r3, #0
 80064ec:	e002      	b.n	80064f4 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80064ee:	2300      	movs	r3, #0
 80064f0:	e000      	b.n	80064f4 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80064f2:	2302      	movs	r3, #2
  }
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3718      	adds	r7, #24
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}

080064fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b084      	sub	sp, #16
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	68da      	ldr	r2, [r3, #12]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	430a      	orrs	r2, r1
 8006518:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	689a      	ldr	r2, [r3, #8]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	431a      	orrs	r2, r3
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	695b      	ldr	r3, [r3, #20]
 8006528:	4313      	orrs	r3, r2
 800652a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	68db      	ldr	r3, [r3, #12]
 8006532:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006536:	f023 030c 	bic.w	r3, r3, #12
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	6812      	ldr	r2, [r2, #0]
 800653e:	68b9      	ldr	r1, [r7, #8]
 8006540:	430b      	orrs	r3, r1
 8006542:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	695b      	ldr	r3, [r3, #20]
 800654a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	699a      	ldr	r2, [r3, #24]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	430a      	orrs	r2, r1
 8006558:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a2c      	ldr	r2, [pc, #176]	; (8006610 <UART_SetConfig+0x114>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d103      	bne.n	800656c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006564:	f7fe fd4c 	bl	8005000 <HAL_RCC_GetPCLK2Freq>
 8006568:	60f8      	str	r0, [r7, #12]
 800656a:	e002      	b.n	8006572 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800656c:	f7fe fd34 	bl	8004fd8 <HAL_RCC_GetPCLK1Freq>
 8006570:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006572:	68fa      	ldr	r2, [r7, #12]
 8006574:	4613      	mov	r3, r2
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	4413      	add	r3, r2
 800657a:	009a      	lsls	r2, r3, #2
 800657c:	441a      	add	r2, r3
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	fbb2 f3f3 	udiv	r3, r2, r3
 8006588:	4a22      	ldr	r2, [pc, #136]	; (8006614 <UART_SetConfig+0x118>)
 800658a:	fba2 2303 	umull	r2, r3, r2, r3
 800658e:	095b      	lsrs	r3, r3, #5
 8006590:	0119      	lsls	r1, r3, #4
 8006592:	68fa      	ldr	r2, [r7, #12]
 8006594:	4613      	mov	r3, r2
 8006596:	009b      	lsls	r3, r3, #2
 8006598:	4413      	add	r3, r2
 800659a:	009a      	lsls	r2, r3, #2
 800659c:	441a      	add	r2, r3
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	009b      	lsls	r3, r3, #2
 80065a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80065a8:	4b1a      	ldr	r3, [pc, #104]	; (8006614 <UART_SetConfig+0x118>)
 80065aa:	fba3 0302 	umull	r0, r3, r3, r2
 80065ae:	095b      	lsrs	r3, r3, #5
 80065b0:	2064      	movs	r0, #100	; 0x64
 80065b2:	fb00 f303 	mul.w	r3, r0, r3
 80065b6:	1ad3      	subs	r3, r2, r3
 80065b8:	011b      	lsls	r3, r3, #4
 80065ba:	3332      	adds	r3, #50	; 0x32
 80065bc:	4a15      	ldr	r2, [pc, #84]	; (8006614 <UART_SetConfig+0x118>)
 80065be:	fba2 2303 	umull	r2, r3, r2, r3
 80065c2:	095b      	lsrs	r3, r3, #5
 80065c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80065c8:	4419      	add	r1, r3
 80065ca:	68fa      	ldr	r2, [r7, #12]
 80065cc:	4613      	mov	r3, r2
 80065ce:	009b      	lsls	r3, r3, #2
 80065d0:	4413      	add	r3, r2
 80065d2:	009a      	lsls	r2, r3, #2
 80065d4:	441a      	add	r2, r3
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80065e0:	4b0c      	ldr	r3, [pc, #48]	; (8006614 <UART_SetConfig+0x118>)
 80065e2:	fba3 0302 	umull	r0, r3, r3, r2
 80065e6:	095b      	lsrs	r3, r3, #5
 80065e8:	2064      	movs	r0, #100	; 0x64
 80065ea:	fb00 f303 	mul.w	r3, r0, r3
 80065ee:	1ad3      	subs	r3, r2, r3
 80065f0:	011b      	lsls	r3, r3, #4
 80065f2:	3332      	adds	r3, #50	; 0x32
 80065f4:	4a07      	ldr	r2, [pc, #28]	; (8006614 <UART_SetConfig+0x118>)
 80065f6:	fba2 2303 	umull	r2, r3, r2, r3
 80065fa:	095b      	lsrs	r3, r3, #5
 80065fc:	f003 020f 	and.w	r2, r3, #15
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	440a      	add	r2, r1
 8006606:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006608:	bf00      	nop
 800660a:	3710      	adds	r7, #16
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}
 8006610:	40013800 	.word	0x40013800
 8006614:	51eb851f 	.word	0x51eb851f

08006618 <pow>:
 8006618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800661c:	4614      	mov	r4, r2
 800661e:	461d      	mov	r5, r3
 8006620:	4680      	mov	r8, r0
 8006622:	4689      	mov	r9, r1
 8006624:	f000 f860 	bl	80066e8 <__ieee754_pow>
 8006628:	4622      	mov	r2, r4
 800662a:	4606      	mov	r6, r0
 800662c:	460f      	mov	r7, r1
 800662e:	462b      	mov	r3, r5
 8006630:	4620      	mov	r0, r4
 8006632:	4629      	mov	r1, r5
 8006634:	f7fa f9e2 	bl	80009fc <__aeabi_dcmpun>
 8006638:	bbc8      	cbnz	r0, 80066ae <pow+0x96>
 800663a:	2200      	movs	r2, #0
 800663c:	2300      	movs	r3, #0
 800663e:	4640      	mov	r0, r8
 8006640:	4649      	mov	r1, r9
 8006642:	f7fa f9a9 	bl	8000998 <__aeabi_dcmpeq>
 8006646:	b1b8      	cbz	r0, 8006678 <pow+0x60>
 8006648:	2200      	movs	r2, #0
 800664a:	2300      	movs	r3, #0
 800664c:	4620      	mov	r0, r4
 800664e:	4629      	mov	r1, r5
 8006650:	f7fa f9a2 	bl	8000998 <__aeabi_dcmpeq>
 8006654:	2800      	cmp	r0, #0
 8006656:	d141      	bne.n	80066dc <pow+0xc4>
 8006658:	4620      	mov	r0, r4
 800665a:	4629      	mov	r1, r5
 800665c:	f000 fe39 	bl	80072d2 <finite>
 8006660:	b328      	cbz	r0, 80066ae <pow+0x96>
 8006662:	2200      	movs	r2, #0
 8006664:	2300      	movs	r3, #0
 8006666:	4620      	mov	r0, r4
 8006668:	4629      	mov	r1, r5
 800666a:	f7fa f99f 	bl	80009ac <__aeabi_dcmplt>
 800666e:	b1f0      	cbz	r0, 80066ae <pow+0x96>
 8006670:	f000 feb4 	bl	80073dc <__errno>
 8006674:	2322      	movs	r3, #34	; 0x22
 8006676:	e019      	b.n	80066ac <pow+0x94>
 8006678:	4630      	mov	r0, r6
 800667a:	4639      	mov	r1, r7
 800667c:	f000 fe29 	bl	80072d2 <finite>
 8006680:	b9c8      	cbnz	r0, 80066b6 <pow+0x9e>
 8006682:	4640      	mov	r0, r8
 8006684:	4649      	mov	r1, r9
 8006686:	f000 fe24 	bl	80072d2 <finite>
 800668a:	b1a0      	cbz	r0, 80066b6 <pow+0x9e>
 800668c:	4620      	mov	r0, r4
 800668e:	4629      	mov	r1, r5
 8006690:	f000 fe1f 	bl	80072d2 <finite>
 8006694:	b178      	cbz	r0, 80066b6 <pow+0x9e>
 8006696:	4632      	mov	r2, r6
 8006698:	463b      	mov	r3, r7
 800669a:	4630      	mov	r0, r6
 800669c:	4639      	mov	r1, r7
 800669e:	f7fa f9ad 	bl	80009fc <__aeabi_dcmpun>
 80066a2:	2800      	cmp	r0, #0
 80066a4:	d0e4      	beq.n	8006670 <pow+0x58>
 80066a6:	f000 fe99 	bl	80073dc <__errno>
 80066aa:	2321      	movs	r3, #33	; 0x21
 80066ac:	6003      	str	r3, [r0, #0]
 80066ae:	4630      	mov	r0, r6
 80066b0:	4639      	mov	r1, r7
 80066b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066b6:	2200      	movs	r2, #0
 80066b8:	2300      	movs	r3, #0
 80066ba:	4630      	mov	r0, r6
 80066bc:	4639      	mov	r1, r7
 80066be:	f7fa f96b 	bl	8000998 <__aeabi_dcmpeq>
 80066c2:	2800      	cmp	r0, #0
 80066c4:	d0f3      	beq.n	80066ae <pow+0x96>
 80066c6:	4640      	mov	r0, r8
 80066c8:	4649      	mov	r1, r9
 80066ca:	f000 fe02 	bl	80072d2 <finite>
 80066ce:	2800      	cmp	r0, #0
 80066d0:	d0ed      	beq.n	80066ae <pow+0x96>
 80066d2:	4620      	mov	r0, r4
 80066d4:	4629      	mov	r1, r5
 80066d6:	f000 fdfc 	bl	80072d2 <finite>
 80066da:	e7c8      	b.n	800666e <pow+0x56>
 80066dc:	2600      	movs	r6, #0
 80066de:	4f01      	ldr	r7, [pc, #4]	; (80066e4 <pow+0xcc>)
 80066e0:	e7e5      	b.n	80066ae <pow+0x96>
 80066e2:	bf00      	nop
 80066e4:	3ff00000 	.word	0x3ff00000

080066e8 <__ieee754_pow>:
 80066e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066ec:	b093      	sub	sp, #76	; 0x4c
 80066ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80066f2:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 80066f6:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 80066fa:	4689      	mov	r9, r1
 80066fc:	ea56 0102 	orrs.w	r1, r6, r2
 8006700:	4680      	mov	r8, r0
 8006702:	d111      	bne.n	8006728 <__ieee754_pow+0x40>
 8006704:	1803      	adds	r3, r0, r0
 8006706:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 800670a:	4152      	adcs	r2, r2
 800670c:	4299      	cmp	r1, r3
 800670e:	4b82      	ldr	r3, [pc, #520]	; (8006918 <__ieee754_pow+0x230>)
 8006710:	4193      	sbcs	r3, r2
 8006712:	f080 84b9 	bcs.w	8007088 <__ieee754_pow+0x9a0>
 8006716:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800671a:	4640      	mov	r0, r8
 800671c:	4649      	mov	r1, r9
 800671e:	f7f9 fd1d 	bl	800015c <__adddf3>
 8006722:	4683      	mov	fp, r0
 8006724:	468c      	mov	ip, r1
 8006726:	e06f      	b.n	8006808 <__ieee754_pow+0x120>
 8006728:	4b7c      	ldr	r3, [pc, #496]	; (800691c <__ieee754_pow+0x234>)
 800672a:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 800672e:	429c      	cmp	r4, r3
 8006730:	464d      	mov	r5, r9
 8006732:	4682      	mov	sl, r0
 8006734:	dc06      	bgt.n	8006744 <__ieee754_pow+0x5c>
 8006736:	d101      	bne.n	800673c <__ieee754_pow+0x54>
 8006738:	2800      	cmp	r0, #0
 800673a:	d1ec      	bne.n	8006716 <__ieee754_pow+0x2e>
 800673c:	429e      	cmp	r6, r3
 800673e:	dc01      	bgt.n	8006744 <__ieee754_pow+0x5c>
 8006740:	d10f      	bne.n	8006762 <__ieee754_pow+0x7a>
 8006742:	b172      	cbz	r2, 8006762 <__ieee754_pow+0x7a>
 8006744:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8006748:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800674c:	ea55 050a 	orrs.w	r5, r5, sl
 8006750:	d1e1      	bne.n	8006716 <__ieee754_pow+0x2e>
 8006752:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8006756:	18db      	adds	r3, r3, r3
 8006758:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800675c:	4152      	adcs	r2, r2
 800675e:	429d      	cmp	r5, r3
 8006760:	e7d5      	b.n	800670e <__ieee754_pow+0x26>
 8006762:	2d00      	cmp	r5, #0
 8006764:	da39      	bge.n	80067da <__ieee754_pow+0xf2>
 8006766:	4b6e      	ldr	r3, [pc, #440]	; (8006920 <__ieee754_pow+0x238>)
 8006768:	429e      	cmp	r6, r3
 800676a:	dc52      	bgt.n	8006812 <__ieee754_pow+0x12a>
 800676c:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8006770:	429e      	cmp	r6, r3
 8006772:	f340 849c 	ble.w	80070ae <__ieee754_pow+0x9c6>
 8006776:	1533      	asrs	r3, r6, #20
 8006778:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800677c:	2b14      	cmp	r3, #20
 800677e:	dd0f      	ble.n	80067a0 <__ieee754_pow+0xb8>
 8006780:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8006784:	fa22 f103 	lsr.w	r1, r2, r3
 8006788:	fa01 f303 	lsl.w	r3, r1, r3
 800678c:	4293      	cmp	r3, r2
 800678e:	f040 848e 	bne.w	80070ae <__ieee754_pow+0x9c6>
 8006792:	f001 0101 	and.w	r1, r1, #1
 8006796:	f1c1 0302 	rsb	r3, r1, #2
 800679a:	9300      	str	r3, [sp, #0]
 800679c:	b182      	cbz	r2, 80067c0 <__ieee754_pow+0xd8>
 800679e:	e05d      	b.n	800685c <__ieee754_pow+0x174>
 80067a0:	2a00      	cmp	r2, #0
 80067a2:	d159      	bne.n	8006858 <__ieee754_pow+0x170>
 80067a4:	f1c3 0314 	rsb	r3, r3, #20
 80067a8:	fa46 f103 	asr.w	r1, r6, r3
 80067ac:	fa01 f303 	lsl.w	r3, r1, r3
 80067b0:	42b3      	cmp	r3, r6
 80067b2:	f040 8479 	bne.w	80070a8 <__ieee754_pow+0x9c0>
 80067b6:	f001 0101 	and.w	r1, r1, #1
 80067ba:	f1c1 0302 	rsb	r3, r1, #2
 80067be:	9300      	str	r3, [sp, #0]
 80067c0:	4b58      	ldr	r3, [pc, #352]	; (8006924 <__ieee754_pow+0x23c>)
 80067c2:	429e      	cmp	r6, r3
 80067c4:	d132      	bne.n	800682c <__ieee754_pow+0x144>
 80067c6:	2f00      	cmp	r7, #0
 80067c8:	f280 846a 	bge.w	80070a0 <__ieee754_pow+0x9b8>
 80067cc:	4642      	mov	r2, r8
 80067ce:	464b      	mov	r3, r9
 80067d0:	2000      	movs	r0, #0
 80067d2:	4954      	ldr	r1, [pc, #336]	; (8006924 <__ieee754_pow+0x23c>)
 80067d4:	f7f9 ffa2 	bl	800071c <__aeabi_ddiv>
 80067d8:	e7a3      	b.n	8006722 <__ieee754_pow+0x3a>
 80067da:	2300      	movs	r3, #0
 80067dc:	9300      	str	r3, [sp, #0]
 80067de:	2a00      	cmp	r2, #0
 80067e0:	d13c      	bne.n	800685c <__ieee754_pow+0x174>
 80067e2:	4b4e      	ldr	r3, [pc, #312]	; (800691c <__ieee754_pow+0x234>)
 80067e4:	429e      	cmp	r6, r3
 80067e6:	d1eb      	bne.n	80067c0 <__ieee754_pow+0xd8>
 80067e8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80067ec:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80067f0:	ea53 030a 	orrs.w	r3, r3, sl
 80067f4:	f000 8448 	beq.w	8007088 <__ieee754_pow+0x9a0>
 80067f8:	4b4b      	ldr	r3, [pc, #300]	; (8006928 <__ieee754_pow+0x240>)
 80067fa:	429c      	cmp	r4, r3
 80067fc:	dd0b      	ble.n	8006816 <__ieee754_pow+0x12e>
 80067fe:	2f00      	cmp	r7, #0
 8006800:	f2c0 8448 	blt.w	8007094 <__ieee754_pow+0x9ac>
 8006804:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8006808:	4658      	mov	r0, fp
 800680a:	4661      	mov	r1, ip
 800680c:	b013      	add	sp, #76	; 0x4c
 800680e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006812:	2302      	movs	r3, #2
 8006814:	e7e2      	b.n	80067dc <__ieee754_pow+0xf4>
 8006816:	2f00      	cmp	r7, #0
 8006818:	f04f 0b00 	mov.w	fp, #0
 800681c:	f04f 0c00 	mov.w	ip, #0
 8006820:	daf2      	bge.n	8006808 <__ieee754_pow+0x120>
 8006822:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8006826:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800682a:	e7ed      	b.n	8006808 <__ieee754_pow+0x120>
 800682c:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8006830:	d106      	bne.n	8006840 <__ieee754_pow+0x158>
 8006832:	4642      	mov	r2, r8
 8006834:	464b      	mov	r3, r9
 8006836:	4640      	mov	r0, r8
 8006838:	4649      	mov	r1, r9
 800683a:	f7f9 fe45 	bl	80004c8 <__aeabi_dmul>
 800683e:	e770      	b.n	8006722 <__ieee754_pow+0x3a>
 8006840:	4b3a      	ldr	r3, [pc, #232]	; (800692c <__ieee754_pow+0x244>)
 8006842:	429f      	cmp	r7, r3
 8006844:	d10a      	bne.n	800685c <__ieee754_pow+0x174>
 8006846:	2d00      	cmp	r5, #0
 8006848:	db08      	blt.n	800685c <__ieee754_pow+0x174>
 800684a:	4640      	mov	r0, r8
 800684c:	4649      	mov	r1, r9
 800684e:	b013      	add	sp, #76	; 0x4c
 8006850:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006854:	f000 bc5e 	b.w	8007114 <__ieee754_sqrt>
 8006858:	2300      	movs	r3, #0
 800685a:	9300      	str	r3, [sp, #0]
 800685c:	4640      	mov	r0, r8
 800685e:	4649      	mov	r1, r9
 8006860:	f000 fd34 	bl	80072cc <fabs>
 8006864:	4683      	mov	fp, r0
 8006866:	468c      	mov	ip, r1
 8006868:	f1ba 0f00 	cmp.w	sl, #0
 800686c:	d128      	bne.n	80068c0 <__ieee754_pow+0x1d8>
 800686e:	b124      	cbz	r4, 800687a <__ieee754_pow+0x192>
 8006870:	4b2c      	ldr	r3, [pc, #176]	; (8006924 <__ieee754_pow+0x23c>)
 8006872:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8006876:	429a      	cmp	r2, r3
 8006878:	d122      	bne.n	80068c0 <__ieee754_pow+0x1d8>
 800687a:	2f00      	cmp	r7, #0
 800687c:	da07      	bge.n	800688e <__ieee754_pow+0x1a6>
 800687e:	465a      	mov	r2, fp
 8006880:	4663      	mov	r3, ip
 8006882:	2000      	movs	r0, #0
 8006884:	4927      	ldr	r1, [pc, #156]	; (8006924 <__ieee754_pow+0x23c>)
 8006886:	f7f9 ff49 	bl	800071c <__aeabi_ddiv>
 800688a:	4683      	mov	fp, r0
 800688c:	468c      	mov	ip, r1
 800688e:	2d00      	cmp	r5, #0
 8006890:	daba      	bge.n	8006808 <__ieee754_pow+0x120>
 8006892:	9b00      	ldr	r3, [sp, #0]
 8006894:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006898:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800689c:	4323      	orrs	r3, r4
 800689e:	d108      	bne.n	80068b2 <__ieee754_pow+0x1ca>
 80068a0:	465a      	mov	r2, fp
 80068a2:	4663      	mov	r3, ip
 80068a4:	4658      	mov	r0, fp
 80068a6:	4661      	mov	r1, ip
 80068a8:	f7f9 fc56 	bl	8000158 <__aeabi_dsub>
 80068ac:	4602      	mov	r2, r0
 80068ae:	460b      	mov	r3, r1
 80068b0:	e790      	b.n	80067d4 <__ieee754_pow+0xec>
 80068b2:	9b00      	ldr	r3, [sp, #0]
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d1a7      	bne.n	8006808 <__ieee754_pow+0x120>
 80068b8:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 80068bc:	469c      	mov	ip, r3
 80068be:	e7a3      	b.n	8006808 <__ieee754_pow+0x120>
 80068c0:	0feb      	lsrs	r3, r5, #31
 80068c2:	3b01      	subs	r3, #1
 80068c4:	930c      	str	r3, [sp, #48]	; 0x30
 80068c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80068c8:	9b00      	ldr	r3, [sp, #0]
 80068ca:	4313      	orrs	r3, r2
 80068cc:	d104      	bne.n	80068d8 <__ieee754_pow+0x1f0>
 80068ce:	4642      	mov	r2, r8
 80068d0:	464b      	mov	r3, r9
 80068d2:	4640      	mov	r0, r8
 80068d4:	4649      	mov	r1, r9
 80068d6:	e7e7      	b.n	80068a8 <__ieee754_pow+0x1c0>
 80068d8:	4b15      	ldr	r3, [pc, #84]	; (8006930 <__ieee754_pow+0x248>)
 80068da:	429e      	cmp	r6, r3
 80068dc:	f340 80f6 	ble.w	8006acc <__ieee754_pow+0x3e4>
 80068e0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80068e4:	429e      	cmp	r6, r3
 80068e6:	4b10      	ldr	r3, [pc, #64]	; (8006928 <__ieee754_pow+0x240>)
 80068e8:	dd09      	ble.n	80068fe <__ieee754_pow+0x216>
 80068ea:	429c      	cmp	r4, r3
 80068ec:	dc0c      	bgt.n	8006908 <__ieee754_pow+0x220>
 80068ee:	2f00      	cmp	r7, #0
 80068f0:	da0c      	bge.n	800690c <__ieee754_pow+0x224>
 80068f2:	2000      	movs	r0, #0
 80068f4:	b013      	add	sp, #76	; 0x4c
 80068f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068fa:	f000 bce2 	b.w	80072c2 <__math_oflow>
 80068fe:	429c      	cmp	r4, r3
 8006900:	dbf5      	blt.n	80068ee <__ieee754_pow+0x206>
 8006902:	4b08      	ldr	r3, [pc, #32]	; (8006924 <__ieee754_pow+0x23c>)
 8006904:	429c      	cmp	r4, r3
 8006906:	dd15      	ble.n	8006934 <__ieee754_pow+0x24c>
 8006908:	2f00      	cmp	r7, #0
 800690a:	dcf2      	bgt.n	80068f2 <__ieee754_pow+0x20a>
 800690c:	2000      	movs	r0, #0
 800690e:	b013      	add	sp, #76	; 0x4c
 8006910:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006914:	f000 bcd0 	b.w	80072b8 <__math_uflow>
 8006918:	fff00000 	.word	0xfff00000
 800691c:	7ff00000 	.word	0x7ff00000
 8006920:	433fffff 	.word	0x433fffff
 8006924:	3ff00000 	.word	0x3ff00000
 8006928:	3fefffff 	.word	0x3fefffff
 800692c:	3fe00000 	.word	0x3fe00000
 8006930:	41e00000 	.word	0x41e00000
 8006934:	4661      	mov	r1, ip
 8006936:	2200      	movs	r2, #0
 8006938:	4658      	mov	r0, fp
 800693a:	4b5f      	ldr	r3, [pc, #380]	; (8006ab8 <__ieee754_pow+0x3d0>)
 800693c:	f7f9 fc0c 	bl	8000158 <__aeabi_dsub>
 8006940:	a355      	add	r3, pc, #340	; (adr r3, 8006a98 <__ieee754_pow+0x3b0>)
 8006942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006946:	4604      	mov	r4, r0
 8006948:	460d      	mov	r5, r1
 800694a:	f7f9 fdbd 	bl	80004c8 <__aeabi_dmul>
 800694e:	a354      	add	r3, pc, #336	; (adr r3, 8006aa0 <__ieee754_pow+0x3b8>)
 8006950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006954:	4606      	mov	r6, r0
 8006956:	460f      	mov	r7, r1
 8006958:	4620      	mov	r0, r4
 800695a:	4629      	mov	r1, r5
 800695c:	f7f9 fdb4 	bl	80004c8 <__aeabi_dmul>
 8006960:	2200      	movs	r2, #0
 8006962:	4682      	mov	sl, r0
 8006964:	468b      	mov	fp, r1
 8006966:	4620      	mov	r0, r4
 8006968:	4629      	mov	r1, r5
 800696a:	4b54      	ldr	r3, [pc, #336]	; (8006abc <__ieee754_pow+0x3d4>)
 800696c:	f7f9 fdac 	bl	80004c8 <__aeabi_dmul>
 8006970:	4602      	mov	r2, r0
 8006972:	460b      	mov	r3, r1
 8006974:	a14c      	add	r1, pc, #304	; (adr r1, 8006aa8 <__ieee754_pow+0x3c0>)
 8006976:	e9d1 0100 	ldrd	r0, r1, [r1]
 800697a:	f7f9 fbed 	bl	8000158 <__aeabi_dsub>
 800697e:	4622      	mov	r2, r4
 8006980:	462b      	mov	r3, r5
 8006982:	f7f9 fda1 	bl	80004c8 <__aeabi_dmul>
 8006986:	4602      	mov	r2, r0
 8006988:	460b      	mov	r3, r1
 800698a:	2000      	movs	r0, #0
 800698c:	494c      	ldr	r1, [pc, #304]	; (8006ac0 <__ieee754_pow+0x3d8>)
 800698e:	f7f9 fbe3 	bl	8000158 <__aeabi_dsub>
 8006992:	4622      	mov	r2, r4
 8006994:	462b      	mov	r3, r5
 8006996:	4680      	mov	r8, r0
 8006998:	4689      	mov	r9, r1
 800699a:	4620      	mov	r0, r4
 800699c:	4629      	mov	r1, r5
 800699e:	f7f9 fd93 	bl	80004c8 <__aeabi_dmul>
 80069a2:	4602      	mov	r2, r0
 80069a4:	460b      	mov	r3, r1
 80069a6:	4640      	mov	r0, r8
 80069a8:	4649      	mov	r1, r9
 80069aa:	f7f9 fd8d 	bl	80004c8 <__aeabi_dmul>
 80069ae:	a340      	add	r3, pc, #256	; (adr r3, 8006ab0 <__ieee754_pow+0x3c8>)
 80069b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069b4:	f7f9 fd88 	bl	80004c8 <__aeabi_dmul>
 80069b8:	4602      	mov	r2, r0
 80069ba:	460b      	mov	r3, r1
 80069bc:	4650      	mov	r0, sl
 80069be:	4659      	mov	r1, fp
 80069c0:	f7f9 fbca 	bl	8000158 <__aeabi_dsub>
 80069c4:	f04f 0a00 	mov.w	sl, #0
 80069c8:	4602      	mov	r2, r0
 80069ca:	460b      	mov	r3, r1
 80069cc:	4604      	mov	r4, r0
 80069ce:	460d      	mov	r5, r1
 80069d0:	4630      	mov	r0, r6
 80069d2:	4639      	mov	r1, r7
 80069d4:	f7f9 fbc2 	bl	800015c <__adddf3>
 80069d8:	4632      	mov	r2, r6
 80069da:	463b      	mov	r3, r7
 80069dc:	4650      	mov	r0, sl
 80069de:	468b      	mov	fp, r1
 80069e0:	f7f9 fbba 	bl	8000158 <__aeabi_dsub>
 80069e4:	4602      	mov	r2, r0
 80069e6:	460b      	mov	r3, r1
 80069e8:	4620      	mov	r0, r4
 80069ea:	4629      	mov	r1, r5
 80069ec:	f7f9 fbb4 	bl	8000158 <__aeabi_dsub>
 80069f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80069f4:	9b00      	ldr	r3, [sp, #0]
 80069f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80069f8:	3b01      	subs	r3, #1
 80069fa:	4313      	orrs	r3, r2
 80069fc:	f04f 0600 	mov.w	r6, #0
 8006a00:	f04f 0200 	mov.w	r2, #0
 8006a04:	bf0c      	ite	eq
 8006a06:	4b2f      	ldreq	r3, [pc, #188]	; (8006ac4 <__ieee754_pow+0x3dc>)
 8006a08:	4b2b      	ldrne	r3, [pc, #172]	; (8006ab8 <__ieee754_pow+0x3d0>)
 8006a0a:	4604      	mov	r4, r0
 8006a0c:	460d      	mov	r5, r1
 8006a0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a12:	e9cd 2300 	strd	r2, r3, [sp]
 8006a16:	4632      	mov	r2, r6
 8006a18:	463b      	mov	r3, r7
 8006a1a:	f7f9 fb9d 	bl	8000158 <__aeabi_dsub>
 8006a1e:	4652      	mov	r2, sl
 8006a20:	465b      	mov	r3, fp
 8006a22:	f7f9 fd51 	bl	80004c8 <__aeabi_dmul>
 8006a26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a2a:	4680      	mov	r8, r0
 8006a2c:	4689      	mov	r9, r1
 8006a2e:	4620      	mov	r0, r4
 8006a30:	4629      	mov	r1, r5
 8006a32:	f7f9 fd49 	bl	80004c8 <__aeabi_dmul>
 8006a36:	4602      	mov	r2, r0
 8006a38:	460b      	mov	r3, r1
 8006a3a:	4640      	mov	r0, r8
 8006a3c:	4649      	mov	r1, r9
 8006a3e:	f7f9 fb8d 	bl	800015c <__adddf3>
 8006a42:	4632      	mov	r2, r6
 8006a44:	463b      	mov	r3, r7
 8006a46:	4680      	mov	r8, r0
 8006a48:	4689      	mov	r9, r1
 8006a4a:	4650      	mov	r0, sl
 8006a4c:	4659      	mov	r1, fp
 8006a4e:	f7f9 fd3b 	bl	80004c8 <__aeabi_dmul>
 8006a52:	4604      	mov	r4, r0
 8006a54:	460d      	mov	r5, r1
 8006a56:	460b      	mov	r3, r1
 8006a58:	4602      	mov	r2, r0
 8006a5a:	4649      	mov	r1, r9
 8006a5c:	4640      	mov	r0, r8
 8006a5e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006a62:	f7f9 fb7b 	bl	800015c <__adddf3>
 8006a66:	4b18      	ldr	r3, [pc, #96]	; (8006ac8 <__ieee754_pow+0x3e0>)
 8006a68:	4682      	mov	sl, r0
 8006a6a:	4299      	cmp	r1, r3
 8006a6c:	460f      	mov	r7, r1
 8006a6e:	460e      	mov	r6, r1
 8006a70:	f340 82e5 	ble.w	800703e <__ieee754_pow+0x956>
 8006a74:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8006a78:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8006a7c:	4303      	orrs	r3, r0
 8006a7e:	f000 81df 	beq.w	8006e40 <__ieee754_pow+0x758>
 8006a82:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006a86:	2200      	movs	r2, #0
 8006a88:	2300      	movs	r3, #0
 8006a8a:	f7f9 ff8f 	bl	80009ac <__aeabi_dcmplt>
 8006a8e:	3800      	subs	r0, #0
 8006a90:	bf18      	it	ne
 8006a92:	2001      	movne	r0, #1
 8006a94:	e72e      	b.n	80068f4 <__ieee754_pow+0x20c>
 8006a96:	bf00      	nop
 8006a98:	60000000 	.word	0x60000000
 8006a9c:	3ff71547 	.word	0x3ff71547
 8006aa0:	f85ddf44 	.word	0xf85ddf44
 8006aa4:	3e54ae0b 	.word	0x3e54ae0b
 8006aa8:	55555555 	.word	0x55555555
 8006aac:	3fd55555 	.word	0x3fd55555
 8006ab0:	652b82fe 	.word	0x652b82fe
 8006ab4:	3ff71547 	.word	0x3ff71547
 8006ab8:	3ff00000 	.word	0x3ff00000
 8006abc:	3fd00000 	.word	0x3fd00000
 8006ac0:	3fe00000 	.word	0x3fe00000
 8006ac4:	bff00000 	.word	0xbff00000
 8006ac8:	408fffff 	.word	0x408fffff
 8006acc:	4bd2      	ldr	r3, [pc, #840]	; (8006e18 <__ieee754_pow+0x730>)
 8006ace:	2200      	movs	r2, #0
 8006ad0:	402b      	ands	r3, r5
 8006ad2:	b943      	cbnz	r3, 8006ae6 <__ieee754_pow+0x3fe>
 8006ad4:	4658      	mov	r0, fp
 8006ad6:	4661      	mov	r1, ip
 8006ad8:	4bd0      	ldr	r3, [pc, #832]	; (8006e1c <__ieee754_pow+0x734>)
 8006ada:	f7f9 fcf5 	bl	80004c8 <__aeabi_dmul>
 8006ade:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8006ae2:	4683      	mov	fp, r0
 8006ae4:	460c      	mov	r4, r1
 8006ae6:	1523      	asrs	r3, r4, #20
 8006ae8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006aec:	4413      	add	r3, r2
 8006aee:	930b      	str	r3, [sp, #44]	; 0x2c
 8006af0:	4bcb      	ldr	r3, [pc, #812]	; (8006e20 <__ieee754_pow+0x738>)
 8006af2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006af6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8006afa:	429c      	cmp	r4, r3
 8006afc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006b00:	dd08      	ble.n	8006b14 <__ieee754_pow+0x42c>
 8006b02:	4bc8      	ldr	r3, [pc, #800]	; (8006e24 <__ieee754_pow+0x73c>)
 8006b04:	429c      	cmp	r4, r3
 8006b06:	f340 8199 	ble.w	8006e3c <__ieee754_pow+0x754>
 8006b0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b0c:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8006b10:	3301      	adds	r3, #1
 8006b12:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b14:	2600      	movs	r6, #0
 8006b16:	00f3      	lsls	r3, r6, #3
 8006b18:	930d      	str	r3, [sp, #52]	; 0x34
 8006b1a:	4bc3      	ldr	r3, [pc, #780]	; (8006e28 <__ieee754_pow+0x740>)
 8006b1c:	4658      	mov	r0, fp
 8006b1e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006b22:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006b26:	4629      	mov	r1, r5
 8006b28:	461a      	mov	r2, r3
 8006b2a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8006b2e:	4623      	mov	r3, r4
 8006b30:	f7f9 fb12 	bl	8000158 <__aeabi_dsub>
 8006b34:	46da      	mov	sl, fp
 8006b36:	462b      	mov	r3, r5
 8006b38:	4652      	mov	r2, sl
 8006b3a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8006b3e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006b42:	f7f9 fb0b 	bl	800015c <__adddf3>
 8006b46:	4602      	mov	r2, r0
 8006b48:	460b      	mov	r3, r1
 8006b4a:	2000      	movs	r0, #0
 8006b4c:	49b7      	ldr	r1, [pc, #732]	; (8006e2c <__ieee754_pow+0x744>)
 8006b4e:	f7f9 fde5 	bl	800071c <__aeabi_ddiv>
 8006b52:	4602      	mov	r2, r0
 8006b54:	460b      	mov	r3, r1
 8006b56:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006b5a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006b5e:	f7f9 fcb3 	bl	80004c8 <__aeabi_dmul>
 8006b62:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006b66:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8006b6a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006b6e:	2300      	movs	r3, #0
 8006b70:	2200      	movs	r2, #0
 8006b72:	46ab      	mov	fp, r5
 8006b74:	106d      	asrs	r5, r5, #1
 8006b76:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006b7a:	9304      	str	r3, [sp, #16]
 8006b7c:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8006b80:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006b84:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8006b88:	4640      	mov	r0, r8
 8006b8a:	4649      	mov	r1, r9
 8006b8c:	4614      	mov	r4, r2
 8006b8e:	461d      	mov	r5, r3
 8006b90:	f7f9 fc9a 	bl	80004c8 <__aeabi_dmul>
 8006b94:	4602      	mov	r2, r0
 8006b96:	460b      	mov	r3, r1
 8006b98:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006b9c:	f7f9 fadc 	bl	8000158 <__aeabi_dsub>
 8006ba0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006ba4:	4606      	mov	r6, r0
 8006ba6:	460f      	mov	r7, r1
 8006ba8:	4620      	mov	r0, r4
 8006baa:	4629      	mov	r1, r5
 8006bac:	f7f9 fad4 	bl	8000158 <__aeabi_dsub>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	460b      	mov	r3, r1
 8006bb4:	4650      	mov	r0, sl
 8006bb6:	4659      	mov	r1, fp
 8006bb8:	f7f9 face 	bl	8000158 <__aeabi_dsub>
 8006bbc:	4642      	mov	r2, r8
 8006bbe:	464b      	mov	r3, r9
 8006bc0:	f7f9 fc82 	bl	80004c8 <__aeabi_dmul>
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	460b      	mov	r3, r1
 8006bc8:	4630      	mov	r0, r6
 8006bca:	4639      	mov	r1, r7
 8006bcc:	f7f9 fac4 	bl	8000158 <__aeabi_dsub>
 8006bd0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006bd4:	f7f9 fc78 	bl	80004c8 <__aeabi_dmul>
 8006bd8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006bdc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006be0:	4610      	mov	r0, r2
 8006be2:	4619      	mov	r1, r3
 8006be4:	f7f9 fc70 	bl	80004c8 <__aeabi_dmul>
 8006be8:	a379      	add	r3, pc, #484	; (adr r3, 8006dd0 <__ieee754_pow+0x6e8>)
 8006bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bee:	4604      	mov	r4, r0
 8006bf0:	460d      	mov	r5, r1
 8006bf2:	f7f9 fc69 	bl	80004c8 <__aeabi_dmul>
 8006bf6:	a378      	add	r3, pc, #480	; (adr r3, 8006dd8 <__ieee754_pow+0x6f0>)
 8006bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bfc:	f7f9 faae 	bl	800015c <__adddf3>
 8006c00:	4622      	mov	r2, r4
 8006c02:	462b      	mov	r3, r5
 8006c04:	f7f9 fc60 	bl	80004c8 <__aeabi_dmul>
 8006c08:	a375      	add	r3, pc, #468	; (adr r3, 8006de0 <__ieee754_pow+0x6f8>)
 8006c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c0e:	f7f9 faa5 	bl	800015c <__adddf3>
 8006c12:	4622      	mov	r2, r4
 8006c14:	462b      	mov	r3, r5
 8006c16:	f7f9 fc57 	bl	80004c8 <__aeabi_dmul>
 8006c1a:	a373      	add	r3, pc, #460	; (adr r3, 8006de8 <__ieee754_pow+0x700>)
 8006c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c20:	f7f9 fa9c 	bl	800015c <__adddf3>
 8006c24:	4622      	mov	r2, r4
 8006c26:	462b      	mov	r3, r5
 8006c28:	f7f9 fc4e 	bl	80004c8 <__aeabi_dmul>
 8006c2c:	a370      	add	r3, pc, #448	; (adr r3, 8006df0 <__ieee754_pow+0x708>)
 8006c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c32:	f7f9 fa93 	bl	800015c <__adddf3>
 8006c36:	4622      	mov	r2, r4
 8006c38:	462b      	mov	r3, r5
 8006c3a:	f7f9 fc45 	bl	80004c8 <__aeabi_dmul>
 8006c3e:	a36e      	add	r3, pc, #440	; (adr r3, 8006df8 <__ieee754_pow+0x710>)
 8006c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c44:	f7f9 fa8a 	bl	800015c <__adddf3>
 8006c48:	4622      	mov	r2, r4
 8006c4a:	4606      	mov	r6, r0
 8006c4c:	460f      	mov	r7, r1
 8006c4e:	462b      	mov	r3, r5
 8006c50:	4620      	mov	r0, r4
 8006c52:	4629      	mov	r1, r5
 8006c54:	f7f9 fc38 	bl	80004c8 <__aeabi_dmul>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	460b      	mov	r3, r1
 8006c5c:	4630      	mov	r0, r6
 8006c5e:	4639      	mov	r1, r7
 8006c60:	f7f9 fc32 	bl	80004c8 <__aeabi_dmul>
 8006c64:	4604      	mov	r4, r0
 8006c66:	460d      	mov	r5, r1
 8006c68:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c6c:	4642      	mov	r2, r8
 8006c6e:	464b      	mov	r3, r9
 8006c70:	f7f9 fa74 	bl	800015c <__adddf3>
 8006c74:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006c78:	f7f9 fc26 	bl	80004c8 <__aeabi_dmul>
 8006c7c:	4622      	mov	r2, r4
 8006c7e:	462b      	mov	r3, r5
 8006c80:	f7f9 fa6c 	bl	800015c <__adddf3>
 8006c84:	4642      	mov	r2, r8
 8006c86:	4606      	mov	r6, r0
 8006c88:	460f      	mov	r7, r1
 8006c8a:	464b      	mov	r3, r9
 8006c8c:	4640      	mov	r0, r8
 8006c8e:	4649      	mov	r1, r9
 8006c90:	f7f9 fc1a 	bl	80004c8 <__aeabi_dmul>
 8006c94:	2200      	movs	r2, #0
 8006c96:	4b66      	ldr	r3, [pc, #408]	; (8006e30 <__ieee754_pow+0x748>)
 8006c98:	4682      	mov	sl, r0
 8006c9a:	468b      	mov	fp, r1
 8006c9c:	f7f9 fa5e 	bl	800015c <__adddf3>
 8006ca0:	4632      	mov	r2, r6
 8006ca2:	463b      	mov	r3, r7
 8006ca4:	f7f9 fa5a 	bl	800015c <__adddf3>
 8006ca8:	2400      	movs	r4, #0
 8006caa:	460d      	mov	r5, r1
 8006cac:	4622      	mov	r2, r4
 8006cae:	460b      	mov	r3, r1
 8006cb0:	4640      	mov	r0, r8
 8006cb2:	4649      	mov	r1, r9
 8006cb4:	f7f9 fc08 	bl	80004c8 <__aeabi_dmul>
 8006cb8:	2200      	movs	r2, #0
 8006cba:	4680      	mov	r8, r0
 8006cbc:	4689      	mov	r9, r1
 8006cbe:	4620      	mov	r0, r4
 8006cc0:	4629      	mov	r1, r5
 8006cc2:	4b5b      	ldr	r3, [pc, #364]	; (8006e30 <__ieee754_pow+0x748>)
 8006cc4:	f7f9 fa48 	bl	8000158 <__aeabi_dsub>
 8006cc8:	4652      	mov	r2, sl
 8006cca:	465b      	mov	r3, fp
 8006ccc:	f7f9 fa44 	bl	8000158 <__aeabi_dsub>
 8006cd0:	4602      	mov	r2, r0
 8006cd2:	460b      	mov	r3, r1
 8006cd4:	4630      	mov	r0, r6
 8006cd6:	4639      	mov	r1, r7
 8006cd8:	f7f9 fa3e 	bl	8000158 <__aeabi_dsub>
 8006cdc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006ce0:	f7f9 fbf2 	bl	80004c8 <__aeabi_dmul>
 8006ce4:	4622      	mov	r2, r4
 8006ce6:	4606      	mov	r6, r0
 8006ce8:	460f      	mov	r7, r1
 8006cea:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006cee:	462b      	mov	r3, r5
 8006cf0:	f7f9 fbea 	bl	80004c8 <__aeabi_dmul>
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	460b      	mov	r3, r1
 8006cf8:	4630      	mov	r0, r6
 8006cfa:	4639      	mov	r1, r7
 8006cfc:	f7f9 fa2e 	bl	800015c <__adddf3>
 8006d00:	2400      	movs	r4, #0
 8006d02:	4606      	mov	r6, r0
 8006d04:	460f      	mov	r7, r1
 8006d06:	4602      	mov	r2, r0
 8006d08:	460b      	mov	r3, r1
 8006d0a:	4640      	mov	r0, r8
 8006d0c:	4649      	mov	r1, r9
 8006d0e:	f7f9 fa25 	bl	800015c <__adddf3>
 8006d12:	a33b      	add	r3, pc, #236	; (adr r3, 8006e00 <__ieee754_pow+0x718>)
 8006d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d18:	4620      	mov	r0, r4
 8006d1a:	460d      	mov	r5, r1
 8006d1c:	f7f9 fbd4 	bl	80004c8 <__aeabi_dmul>
 8006d20:	4642      	mov	r2, r8
 8006d22:	464b      	mov	r3, r9
 8006d24:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006d28:	4620      	mov	r0, r4
 8006d2a:	4629      	mov	r1, r5
 8006d2c:	f7f9 fa14 	bl	8000158 <__aeabi_dsub>
 8006d30:	4602      	mov	r2, r0
 8006d32:	460b      	mov	r3, r1
 8006d34:	4630      	mov	r0, r6
 8006d36:	4639      	mov	r1, r7
 8006d38:	f7f9 fa0e 	bl	8000158 <__aeabi_dsub>
 8006d3c:	a332      	add	r3, pc, #200	; (adr r3, 8006e08 <__ieee754_pow+0x720>)
 8006d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d42:	f7f9 fbc1 	bl	80004c8 <__aeabi_dmul>
 8006d46:	a332      	add	r3, pc, #200	; (adr r3, 8006e10 <__ieee754_pow+0x728>)
 8006d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d4c:	4606      	mov	r6, r0
 8006d4e:	460f      	mov	r7, r1
 8006d50:	4620      	mov	r0, r4
 8006d52:	4629      	mov	r1, r5
 8006d54:	f7f9 fbb8 	bl	80004c8 <__aeabi_dmul>
 8006d58:	4602      	mov	r2, r0
 8006d5a:	460b      	mov	r3, r1
 8006d5c:	4630      	mov	r0, r6
 8006d5e:	4639      	mov	r1, r7
 8006d60:	f7f9 f9fc 	bl	800015c <__adddf3>
 8006d64:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006d66:	4b33      	ldr	r3, [pc, #204]	; (8006e34 <__ieee754_pow+0x74c>)
 8006d68:	f04f 0a00 	mov.w	sl, #0
 8006d6c:	4413      	add	r3, r2
 8006d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d72:	f7f9 f9f3 	bl	800015c <__adddf3>
 8006d76:	4680      	mov	r8, r0
 8006d78:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006d7a:	4689      	mov	r9, r1
 8006d7c:	f7f9 fb3a 	bl	80003f4 <__aeabi_i2d>
 8006d80:	4604      	mov	r4, r0
 8006d82:	460d      	mov	r5, r1
 8006d84:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006d86:	4b2c      	ldr	r3, [pc, #176]	; (8006e38 <__ieee754_pow+0x750>)
 8006d88:	4413      	add	r3, r2
 8006d8a:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006d8e:	4642      	mov	r2, r8
 8006d90:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d94:	464b      	mov	r3, r9
 8006d96:	f7f9 f9e1 	bl	800015c <__adddf3>
 8006d9a:	4632      	mov	r2, r6
 8006d9c:	463b      	mov	r3, r7
 8006d9e:	f7f9 f9dd 	bl	800015c <__adddf3>
 8006da2:	4622      	mov	r2, r4
 8006da4:	462b      	mov	r3, r5
 8006da6:	f7f9 f9d9 	bl	800015c <__adddf3>
 8006daa:	4622      	mov	r2, r4
 8006dac:	462b      	mov	r3, r5
 8006dae:	4650      	mov	r0, sl
 8006db0:	468b      	mov	fp, r1
 8006db2:	f7f9 f9d1 	bl	8000158 <__aeabi_dsub>
 8006db6:	4632      	mov	r2, r6
 8006db8:	463b      	mov	r3, r7
 8006dba:	f7f9 f9cd 	bl	8000158 <__aeabi_dsub>
 8006dbe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006dc2:	f7f9 f9c9 	bl	8000158 <__aeabi_dsub>
 8006dc6:	4602      	mov	r2, r0
 8006dc8:	460b      	mov	r3, r1
 8006dca:	4640      	mov	r0, r8
 8006dcc:	4649      	mov	r1, r9
 8006dce:	e60d      	b.n	80069ec <__ieee754_pow+0x304>
 8006dd0:	4a454eef 	.word	0x4a454eef
 8006dd4:	3fca7e28 	.word	0x3fca7e28
 8006dd8:	93c9db65 	.word	0x93c9db65
 8006ddc:	3fcd864a 	.word	0x3fcd864a
 8006de0:	a91d4101 	.word	0xa91d4101
 8006de4:	3fd17460 	.word	0x3fd17460
 8006de8:	518f264d 	.word	0x518f264d
 8006dec:	3fd55555 	.word	0x3fd55555
 8006df0:	db6fabff 	.word	0xdb6fabff
 8006df4:	3fdb6db6 	.word	0x3fdb6db6
 8006df8:	33333303 	.word	0x33333303
 8006dfc:	3fe33333 	.word	0x3fe33333
 8006e00:	e0000000 	.word	0xe0000000
 8006e04:	3feec709 	.word	0x3feec709
 8006e08:	dc3a03fd 	.word	0xdc3a03fd
 8006e0c:	3feec709 	.word	0x3feec709
 8006e10:	145b01f5 	.word	0x145b01f5
 8006e14:	be3e2fe0 	.word	0xbe3e2fe0
 8006e18:	7ff00000 	.word	0x7ff00000
 8006e1c:	43400000 	.word	0x43400000
 8006e20:	0003988e 	.word	0x0003988e
 8006e24:	000bb679 	.word	0x000bb679
 8006e28:	08007480 	.word	0x08007480
 8006e2c:	3ff00000 	.word	0x3ff00000
 8006e30:	40080000 	.word	0x40080000
 8006e34:	080074a0 	.word	0x080074a0
 8006e38:	08007490 	.word	0x08007490
 8006e3c:	2601      	movs	r6, #1
 8006e3e:	e66a      	b.n	8006b16 <__ieee754_pow+0x42e>
 8006e40:	a39d      	add	r3, pc, #628	; (adr r3, 80070b8 <__ieee754_pow+0x9d0>)
 8006e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e46:	4640      	mov	r0, r8
 8006e48:	4649      	mov	r1, r9
 8006e4a:	f7f9 f987 	bl	800015c <__adddf3>
 8006e4e:	4622      	mov	r2, r4
 8006e50:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006e54:	462b      	mov	r3, r5
 8006e56:	4650      	mov	r0, sl
 8006e58:	4639      	mov	r1, r7
 8006e5a:	f7f9 f97d 	bl	8000158 <__aeabi_dsub>
 8006e5e:	4602      	mov	r2, r0
 8006e60:	460b      	mov	r3, r1
 8006e62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e66:	f7f9 fdbf 	bl	80009e8 <__aeabi_dcmpgt>
 8006e6a:	2800      	cmp	r0, #0
 8006e6c:	f47f ae09 	bne.w	8006a82 <__ieee754_pow+0x39a>
 8006e70:	4aa3      	ldr	r2, [pc, #652]	; (8007100 <__ieee754_pow+0xa18>)
 8006e72:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8006e76:	4293      	cmp	r3, r2
 8006e78:	f340 8101 	ble.w	800707e <__ieee754_pow+0x996>
 8006e7c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8006e80:	2000      	movs	r0, #0
 8006e82:	151b      	asrs	r3, r3, #20
 8006e84:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006e88:	fa4a f303 	asr.w	r3, sl, r3
 8006e8c:	4433      	add	r3, r6
 8006e8e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8006e92:	4f9c      	ldr	r7, [pc, #624]	; (8007104 <__ieee754_pow+0xa1c>)
 8006e94:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8006e98:	4117      	asrs	r7, r2
 8006e9a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8006e9e:	ea23 0107 	bic.w	r1, r3, r7
 8006ea2:	f1c2 0214 	rsb	r2, r2, #20
 8006ea6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8006eaa:	460b      	mov	r3, r1
 8006eac:	fa4a fa02 	asr.w	sl, sl, r2
 8006eb0:	2e00      	cmp	r6, #0
 8006eb2:	4602      	mov	r2, r0
 8006eb4:	4629      	mov	r1, r5
 8006eb6:	4620      	mov	r0, r4
 8006eb8:	bfb8      	it	lt
 8006eba:	f1ca 0a00 	rsblt	sl, sl, #0
 8006ebe:	f7f9 f94b 	bl	8000158 <__aeabi_dsub>
 8006ec2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ec6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006eca:	2400      	movs	r4, #0
 8006ecc:	4642      	mov	r2, r8
 8006ece:	464b      	mov	r3, r9
 8006ed0:	f7f9 f944 	bl	800015c <__adddf3>
 8006ed4:	a37a      	add	r3, pc, #488	; (adr r3, 80070c0 <__ieee754_pow+0x9d8>)
 8006ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eda:	4620      	mov	r0, r4
 8006edc:	460d      	mov	r5, r1
 8006ede:	f7f9 faf3 	bl	80004c8 <__aeabi_dmul>
 8006ee2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006ee6:	4606      	mov	r6, r0
 8006ee8:	460f      	mov	r7, r1
 8006eea:	4620      	mov	r0, r4
 8006eec:	4629      	mov	r1, r5
 8006eee:	f7f9 f933 	bl	8000158 <__aeabi_dsub>
 8006ef2:	4602      	mov	r2, r0
 8006ef4:	460b      	mov	r3, r1
 8006ef6:	4640      	mov	r0, r8
 8006ef8:	4649      	mov	r1, r9
 8006efa:	f7f9 f92d 	bl	8000158 <__aeabi_dsub>
 8006efe:	a372      	add	r3, pc, #456	; (adr r3, 80070c8 <__ieee754_pow+0x9e0>)
 8006f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f04:	f7f9 fae0 	bl	80004c8 <__aeabi_dmul>
 8006f08:	a371      	add	r3, pc, #452	; (adr r3, 80070d0 <__ieee754_pow+0x9e8>)
 8006f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f0e:	4680      	mov	r8, r0
 8006f10:	4689      	mov	r9, r1
 8006f12:	4620      	mov	r0, r4
 8006f14:	4629      	mov	r1, r5
 8006f16:	f7f9 fad7 	bl	80004c8 <__aeabi_dmul>
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	460b      	mov	r3, r1
 8006f1e:	4640      	mov	r0, r8
 8006f20:	4649      	mov	r1, r9
 8006f22:	f7f9 f91b 	bl	800015c <__adddf3>
 8006f26:	4604      	mov	r4, r0
 8006f28:	460d      	mov	r5, r1
 8006f2a:	4602      	mov	r2, r0
 8006f2c:	460b      	mov	r3, r1
 8006f2e:	4630      	mov	r0, r6
 8006f30:	4639      	mov	r1, r7
 8006f32:	f7f9 f913 	bl	800015c <__adddf3>
 8006f36:	4632      	mov	r2, r6
 8006f38:	463b      	mov	r3, r7
 8006f3a:	4680      	mov	r8, r0
 8006f3c:	4689      	mov	r9, r1
 8006f3e:	f7f9 f90b 	bl	8000158 <__aeabi_dsub>
 8006f42:	4602      	mov	r2, r0
 8006f44:	460b      	mov	r3, r1
 8006f46:	4620      	mov	r0, r4
 8006f48:	4629      	mov	r1, r5
 8006f4a:	f7f9 f905 	bl	8000158 <__aeabi_dsub>
 8006f4e:	4642      	mov	r2, r8
 8006f50:	4606      	mov	r6, r0
 8006f52:	460f      	mov	r7, r1
 8006f54:	464b      	mov	r3, r9
 8006f56:	4640      	mov	r0, r8
 8006f58:	4649      	mov	r1, r9
 8006f5a:	f7f9 fab5 	bl	80004c8 <__aeabi_dmul>
 8006f5e:	a35e      	add	r3, pc, #376	; (adr r3, 80070d8 <__ieee754_pow+0x9f0>)
 8006f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f64:	4604      	mov	r4, r0
 8006f66:	460d      	mov	r5, r1
 8006f68:	f7f9 faae 	bl	80004c8 <__aeabi_dmul>
 8006f6c:	a35c      	add	r3, pc, #368	; (adr r3, 80070e0 <__ieee754_pow+0x9f8>)
 8006f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f72:	f7f9 f8f1 	bl	8000158 <__aeabi_dsub>
 8006f76:	4622      	mov	r2, r4
 8006f78:	462b      	mov	r3, r5
 8006f7a:	f7f9 faa5 	bl	80004c8 <__aeabi_dmul>
 8006f7e:	a35a      	add	r3, pc, #360	; (adr r3, 80070e8 <__ieee754_pow+0xa00>)
 8006f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f84:	f7f9 f8ea 	bl	800015c <__adddf3>
 8006f88:	4622      	mov	r2, r4
 8006f8a:	462b      	mov	r3, r5
 8006f8c:	f7f9 fa9c 	bl	80004c8 <__aeabi_dmul>
 8006f90:	a357      	add	r3, pc, #348	; (adr r3, 80070f0 <__ieee754_pow+0xa08>)
 8006f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f96:	f7f9 f8df 	bl	8000158 <__aeabi_dsub>
 8006f9a:	4622      	mov	r2, r4
 8006f9c:	462b      	mov	r3, r5
 8006f9e:	f7f9 fa93 	bl	80004c8 <__aeabi_dmul>
 8006fa2:	a355      	add	r3, pc, #340	; (adr r3, 80070f8 <__ieee754_pow+0xa10>)
 8006fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa8:	f7f9 f8d8 	bl	800015c <__adddf3>
 8006fac:	4622      	mov	r2, r4
 8006fae:	462b      	mov	r3, r5
 8006fb0:	f7f9 fa8a 	bl	80004c8 <__aeabi_dmul>
 8006fb4:	4602      	mov	r2, r0
 8006fb6:	460b      	mov	r3, r1
 8006fb8:	4640      	mov	r0, r8
 8006fba:	4649      	mov	r1, r9
 8006fbc:	f7f9 f8cc 	bl	8000158 <__aeabi_dsub>
 8006fc0:	4604      	mov	r4, r0
 8006fc2:	460d      	mov	r5, r1
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	460b      	mov	r3, r1
 8006fc8:	4640      	mov	r0, r8
 8006fca:	4649      	mov	r1, r9
 8006fcc:	f7f9 fa7c 	bl	80004c8 <__aeabi_dmul>
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006fd6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006fda:	4620      	mov	r0, r4
 8006fdc:	4629      	mov	r1, r5
 8006fde:	f7f9 f8bb 	bl	8000158 <__aeabi_dsub>
 8006fe2:	4602      	mov	r2, r0
 8006fe4:	460b      	mov	r3, r1
 8006fe6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006fea:	f7f9 fb97 	bl	800071c <__aeabi_ddiv>
 8006fee:	4632      	mov	r2, r6
 8006ff0:	4604      	mov	r4, r0
 8006ff2:	460d      	mov	r5, r1
 8006ff4:	463b      	mov	r3, r7
 8006ff6:	4640      	mov	r0, r8
 8006ff8:	4649      	mov	r1, r9
 8006ffa:	f7f9 fa65 	bl	80004c8 <__aeabi_dmul>
 8006ffe:	4632      	mov	r2, r6
 8007000:	463b      	mov	r3, r7
 8007002:	f7f9 f8ab 	bl	800015c <__adddf3>
 8007006:	4602      	mov	r2, r0
 8007008:	460b      	mov	r3, r1
 800700a:	4620      	mov	r0, r4
 800700c:	4629      	mov	r1, r5
 800700e:	f7f9 f8a3 	bl	8000158 <__aeabi_dsub>
 8007012:	4642      	mov	r2, r8
 8007014:	464b      	mov	r3, r9
 8007016:	f7f9 f89f 	bl	8000158 <__aeabi_dsub>
 800701a:	4602      	mov	r2, r0
 800701c:	460b      	mov	r3, r1
 800701e:	2000      	movs	r0, #0
 8007020:	4939      	ldr	r1, [pc, #228]	; (8007108 <__ieee754_pow+0xa20>)
 8007022:	f7f9 f899 	bl	8000158 <__aeabi_dsub>
 8007026:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800702a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800702e:	da29      	bge.n	8007084 <__ieee754_pow+0x99c>
 8007030:	4652      	mov	r2, sl
 8007032:	f000 f955 	bl	80072e0 <scalbn>
 8007036:	e9dd 2300 	ldrd	r2, r3, [sp]
 800703a:	f7ff bbfe 	b.w	800683a <__ieee754_pow+0x152>
 800703e:	4b33      	ldr	r3, [pc, #204]	; (800710c <__ieee754_pow+0xa24>)
 8007040:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8007044:	429f      	cmp	r7, r3
 8007046:	f77f af13 	ble.w	8006e70 <__ieee754_pow+0x788>
 800704a:	4b31      	ldr	r3, [pc, #196]	; (8007110 <__ieee754_pow+0xa28>)
 800704c:	440b      	add	r3, r1
 800704e:	4303      	orrs	r3, r0
 8007050:	d009      	beq.n	8007066 <__ieee754_pow+0x97e>
 8007052:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007056:	2200      	movs	r2, #0
 8007058:	2300      	movs	r3, #0
 800705a:	f7f9 fca7 	bl	80009ac <__aeabi_dcmplt>
 800705e:	3800      	subs	r0, #0
 8007060:	bf18      	it	ne
 8007062:	2001      	movne	r0, #1
 8007064:	e453      	b.n	800690e <__ieee754_pow+0x226>
 8007066:	4622      	mov	r2, r4
 8007068:	462b      	mov	r3, r5
 800706a:	f7f9 f875 	bl	8000158 <__aeabi_dsub>
 800706e:	4642      	mov	r2, r8
 8007070:	464b      	mov	r3, r9
 8007072:	f7f9 fcaf 	bl	80009d4 <__aeabi_dcmpge>
 8007076:	2800      	cmp	r0, #0
 8007078:	f43f aefa 	beq.w	8006e70 <__ieee754_pow+0x788>
 800707c:	e7e9      	b.n	8007052 <__ieee754_pow+0x96a>
 800707e:	f04f 0a00 	mov.w	sl, #0
 8007082:	e720      	b.n	8006ec6 <__ieee754_pow+0x7de>
 8007084:	4621      	mov	r1, r4
 8007086:	e7d6      	b.n	8007036 <__ieee754_pow+0x94e>
 8007088:	f04f 0b00 	mov.w	fp, #0
 800708c:	f8df c078 	ldr.w	ip, [pc, #120]	; 8007108 <__ieee754_pow+0xa20>
 8007090:	f7ff bbba 	b.w	8006808 <__ieee754_pow+0x120>
 8007094:	f04f 0b00 	mov.w	fp, #0
 8007098:	f04f 0c00 	mov.w	ip, #0
 800709c:	f7ff bbb4 	b.w	8006808 <__ieee754_pow+0x120>
 80070a0:	4640      	mov	r0, r8
 80070a2:	4649      	mov	r1, r9
 80070a4:	f7ff bb3d 	b.w	8006722 <__ieee754_pow+0x3a>
 80070a8:	9200      	str	r2, [sp, #0]
 80070aa:	f7ff bb89 	b.w	80067c0 <__ieee754_pow+0xd8>
 80070ae:	2300      	movs	r3, #0
 80070b0:	f7ff bb73 	b.w	800679a <__ieee754_pow+0xb2>
 80070b4:	f3af 8000 	nop.w
 80070b8:	652b82fe 	.word	0x652b82fe
 80070bc:	3c971547 	.word	0x3c971547
 80070c0:	00000000 	.word	0x00000000
 80070c4:	3fe62e43 	.word	0x3fe62e43
 80070c8:	fefa39ef 	.word	0xfefa39ef
 80070cc:	3fe62e42 	.word	0x3fe62e42
 80070d0:	0ca86c39 	.word	0x0ca86c39
 80070d4:	be205c61 	.word	0xbe205c61
 80070d8:	72bea4d0 	.word	0x72bea4d0
 80070dc:	3e663769 	.word	0x3e663769
 80070e0:	c5d26bf1 	.word	0xc5d26bf1
 80070e4:	3ebbbd41 	.word	0x3ebbbd41
 80070e8:	af25de2c 	.word	0xaf25de2c
 80070ec:	3f11566a 	.word	0x3f11566a
 80070f0:	16bebd93 	.word	0x16bebd93
 80070f4:	3f66c16c 	.word	0x3f66c16c
 80070f8:	5555553e 	.word	0x5555553e
 80070fc:	3fc55555 	.word	0x3fc55555
 8007100:	3fe00000 	.word	0x3fe00000
 8007104:	000fffff 	.word	0x000fffff
 8007108:	3ff00000 	.word	0x3ff00000
 800710c:	4090cbff 	.word	0x4090cbff
 8007110:	3f6f3400 	.word	0x3f6f3400

08007114 <__ieee754_sqrt>:
 8007114:	f8df c158 	ldr.w	ip, [pc, #344]	; 8007270 <__ieee754_sqrt+0x15c>
 8007118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800711c:	ea3c 0c01 	bics.w	ip, ip, r1
 8007120:	4606      	mov	r6, r0
 8007122:	460d      	mov	r5, r1
 8007124:	460c      	mov	r4, r1
 8007126:	460a      	mov	r2, r1
 8007128:	4607      	mov	r7, r0
 800712a:	4603      	mov	r3, r0
 800712c:	d10f      	bne.n	800714e <__ieee754_sqrt+0x3a>
 800712e:	4602      	mov	r2, r0
 8007130:	460b      	mov	r3, r1
 8007132:	f7f9 f9c9 	bl	80004c8 <__aeabi_dmul>
 8007136:	4602      	mov	r2, r0
 8007138:	460b      	mov	r3, r1
 800713a:	4630      	mov	r0, r6
 800713c:	4629      	mov	r1, r5
 800713e:	f7f9 f80d 	bl	800015c <__adddf3>
 8007142:	4606      	mov	r6, r0
 8007144:	460d      	mov	r5, r1
 8007146:	4630      	mov	r0, r6
 8007148:	4629      	mov	r1, r5
 800714a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800714e:	2900      	cmp	r1, #0
 8007150:	dc0e      	bgt.n	8007170 <__ieee754_sqrt+0x5c>
 8007152:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8007156:	ea5c 0707 	orrs.w	r7, ip, r7
 800715a:	d0f4      	beq.n	8007146 <__ieee754_sqrt+0x32>
 800715c:	b141      	cbz	r1, 8007170 <__ieee754_sqrt+0x5c>
 800715e:	4602      	mov	r2, r0
 8007160:	460b      	mov	r3, r1
 8007162:	f7f8 fff9 	bl	8000158 <__aeabi_dsub>
 8007166:	4602      	mov	r2, r0
 8007168:	460b      	mov	r3, r1
 800716a:	f7f9 fad7 	bl	800071c <__aeabi_ddiv>
 800716e:	e7e8      	b.n	8007142 <__ieee754_sqrt+0x2e>
 8007170:	1521      	asrs	r1, r4, #20
 8007172:	d075      	beq.n	8007260 <__ieee754_sqrt+0x14c>
 8007174:	07cc      	lsls	r4, r1, #31
 8007176:	f04f 0400 	mov.w	r4, #0
 800717a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800717e:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 8007182:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007186:	bf5e      	ittt	pl
 8007188:	0fd9      	lsrpl	r1, r3, #31
 800718a:	005b      	lslpl	r3, r3, #1
 800718c:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8007190:	0fd9      	lsrs	r1, r3, #31
 8007192:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8007196:	2516      	movs	r5, #22
 8007198:	4620      	mov	r0, r4
 800719a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800719e:	107f      	asrs	r7, r7, #1
 80071a0:	005b      	lsls	r3, r3, #1
 80071a2:	1846      	adds	r6, r0, r1
 80071a4:	4296      	cmp	r6, r2
 80071a6:	bfde      	ittt	le
 80071a8:	1b92      	suble	r2, r2, r6
 80071aa:	1870      	addle	r0, r6, r1
 80071ac:	1864      	addle	r4, r4, r1
 80071ae:	0052      	lsls	r2, r2, #1
 80071b0:	3d01      	subs	r5, #1
 80071b2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80071b6:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80071ba:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80071be:	d1f0      	bne.n	80071a2 <__ieee754_sqrt+0x8e>
 80071c0:	4629      	mov	r1, r5
 80071c2:	f04f 0e20 	mov.w	lr, #32
 80071c6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80071ca:	4282      	cmp	r2, r0
 80071cc:	eb06 0c05 	add.w	ip, r6, r5
 80071d0:	dc02      	bgt.n	80071d8 <__ieee754_sqrt+0xc4>
 80071d2:	d113      	bne.n	80071fc <__ieee754_sqrt+0xe8>
 80071d4:	459c      	cmp	ip, r3
 80071d6:	d811      	bhi.n	80071fc <__ieee754_sqrt+0xe8>
 80071d8:	f1bc 0f00 	cmp.w	ip, #0
 80071dc:	eb0c 0506 	add.w	r5, ip, r6
 80071e0:	da43      	bge.n	800726a <__ieee754_sqrt+0x156>
 80071e2:	2d00      	cmp	r5, #0
 80071e4:	db41      	blt.n	800726a <__ieee754_sqrt+0x156>
 80071e6:	f100 0801 	add.w	r8, r0, #1
 80071ea:	1a12      	subs	r2, r2, r0
 80071ec:	4640      	mov	r0, r8
 80071ee:	459c      	cmp	ip, r3
 80071f0:	bf88      	it	hi
 80071f2:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80071f6:	eba3 030c 	sub.w	r3, r3, ip
 80071fa:	4431      	add	r1, r6
 80071fc:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8007200:	f1be 0e01 	subs.w	lr, lr, #1
 8007204:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8007208:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800720c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007210:	d1db      	bne.n	80071ca <__ieee754_sqrt+0xb6>
 8007212:	4313      	orrs	r3, r2
 8007214:	d006      	beq.n	8007224 <__ieee754_sqrt+0x110>
 8007216:	1c48      	adds	r0, r1, #1
 8007218:	bf0b      	itete	eq
 800721a:	4671      	moveq	r1, lr
 800721c:	3101      	addne	r1, #1
 800721e:	3401      	addeq	r4, #1
 8007220:	f021 0101 	bicne.w	r1, r1, #1
 8007224:	1063      	asrs	r3, r4, #1
 8007226:	0849      	lsrs	r1, r1, #1
 8007228:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800722c:	07e2      	lsls	r2, r4, #31
 800722e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007232:	bf48      	it	mi
 8007234:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8007238:	460e      	mov	r6, r1
 800723a:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800723e:	e782      	b.n	8007146 <__ieee754_sqrt+0x32>
 8007240:	0ada      	lsrs	r2, r3, #11
 8007242:	3815      	subs	r0, #21
 8007244:	055b      	lsls	r3, r3, #21
 8007246:	2a00      	cmp	r2, #0
 8007248:	d0fa      	beq.n	8007240 <__ieee754_sqrt+0x12c>
 800724a:	02d5      	lsls	r5, r2, #11
 800724c:	d50a      	bpl.n	8007264 <__ieee754_sqrt+0x150>
 800724e:	f1c1 0420 	rsb	r4, r1, #32
 8007252:	fa23 f404 	lsr.w	r4, r3, r4
 8007256:	1e4d      	subs	r5, r1, #1
 8007258:	408b      	lsls	r3, r1
 800725a:	4322      	orrs	r2, r4
 800725c:	1b41      	subs	r1, r0, r5
 800725e:	e789      	b.n	8007174 <__ieee754_sqrt+0x60>
 8007260:	4608      	mov	r0, r1
 8007262:	e7f0      	b.n	8007246 <__ieee754_sqrt+0x132>
 8007264:	0052      	lsls	r2, r2, #1
 8007266:	3101      	adds	r1, #1
 8007268:	e7ef      	b.n	800724a <__ieee754_sqrt+0x136>
 800726a:	4680      	mov	r8, r0
 800726c:	e7bd      	b.n	80071ea <__ieee754_sqrt+0xd6>
 800726e:	bf00      	nop
 8007270:	7ff00000 	.word	0x7ff00000

08007274 <with_errno>:
 8007274:	b570      	push	{r4, r5, r6, lr}
 8007276:	4604      	mov	r4, r0
 8007278:	460d      	mov	r5, r1
 800727a:	4616      	mov	r6, r2
 800727c:	f000 f8ae 	bl	80073dc <__errno>
 8007280:	4629      	mov	r1, r5
 8007282:	6006      	str	r6, [r0, #0]
 8007284:	4620      	mov	r0, r4
 8007286:	bd70      	pop	{r4, r5, r6, pc}

08007288 <xflow>:
 8007288:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800728a:	4615      	mov	r5, r2
 800728c:	461c      	mov	r4, r3
 800728e:	b180      	cbz	r0, 80072b2 <xflow+0x2a>
 8007290:	4610      	mov	r0, r2
 8007292:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007296:	e9cd 0100 	strd	r0, r1, [sp]
 800729a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800729e:	4628      	mov	r0, r5
 80072a0:	4621      	mov	r1, r4
 80072a2:	f7f9 f911 	bl	80004c8 <__aeabi_dmul>
 80072a6:	2222      	movs	r2, #34	; 0x22
 80072a8:	b003      	add	sp, #12
 80072aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80072ae:	f7ff bfe1 	b.w	8007274 <with_errno>
 80072b2:	4610      	mov	r0, r2
 80072b4:	4619      	mov	r1, r3
 80072b6:	e7ee      	b.n	8007296 <xflow+0xe>

080072b8 <__math_uflow>:
 80072b8:	2200      	movs	r2, #0
 80072ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80072be:	f7ff bfe3 	b.w	8007288 <xflow>

080072c2 <__math_oflow>:
 80072c2:	2200      	movs	r2, #0
 80072c4:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80072c8:	f7ff bfde 	b.w	8007288 <xflow>

080072cc <fabs>:
 80072cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80072d0:	4770      	bx	lr

080072d2 <finite>:
 80072d2:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 80072d6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80072da:	0fc0      	lsrs	r0, r0, #31
 80072dc:	4770      	bx	lr
	...

080072e0 <scalbn>:
 80072e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072e2:	f3c1 560a 	ubfx	r6, r1, #20, #11
 80072e6:	4604      	mov	r4, r0
 80072e8:	460d      	mov	r5, r1
 80072ea:	4617      	mov	r7, r2
 80072ec:	460b      	mov	r3, r1
 80072ee:	b996      	cbnz	r6, 8007316 <scalbn+0x36>
 80072f0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80072f4:	4303      	orrs	r3, r0
 80072f6:	d039      	beq.n	800736c <scalbn+0x8c>
 80072f8:	4b33      	ldr	r3, [pc, #204]	; (80073c8 <scalbn+0xe8>)
 80072fa:	2200      	movs	r2, #0
 80072fc:	f7f9 f8e4 	bl	80004c8 <__aeabi_dmul>
 8007300:	4b32      	ldr	r3, [pc, #200]	; (80073cc <scalbn+0xec>)
 8007302:	4604      	mov	r4, r0
 8007304:	429f      	cmp	r7, r3
 8007306:	460d      	mov	r5, r1
 8007308:	da0f      	bge.n	800732a <scalbn+0x4a>
 800730a:	a32b      	add	r3, pc, #172	; (adr r3, 80073b8 <scalbn+0xd8>)
 800730c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007310:	f7f9 f8da 	bl	80004c8 <__aeabi_dmul>
 8007314:	e006      	b.n	8007324 <scalbn+0x44>
 8007316:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800731a:	4296      	cmp	r6, r2
 800731c:	d10a      	bne.n	8007334 <scalbn+0x54>
 800731e:	4602      	mov	r2, r0
 8007320:	f7f8 ff1c 	bl	800015c <__adddf3>
 8007324:	4604      	mov	r4, r0
 8007326:	460d      	mov	r5, r1
 8007328:	e020      	b.n	800736c <scalbn+0x8c>
 800732a:	460b      	mov	r3, r1
 800732c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8007330:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8007334:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8007338:	19b9      	adds	r1, r7, r6
 800733a:	4291      	cmp	r1, r2
 800733c:	dd0e      	ble.n	800735c <scalbn+0x7c>
 800733e:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8007342:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8007346:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800734a:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800734e:	4820      	ldr	r0, [pc, #128]	; (80073d0 <scalbn+0xf0>)
 8007350:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8007354:	a31a      	add	r3, pc, #104	; (adr r3, 80073c0 <scalbn+0xe0>)
 8007356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800735a:	e7d9      	b.n	8007310 <scalbn+0x30>
 800735c:	2900      	cmp	r1, #0
 800735e:	dd08      	ble.n	8007372 <scalbn+0x92>
 8007360:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007364:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007368:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800736c:	4620      	mov	r0, r4
 800736e:	4629      	mov	r1, r5
 8007370:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007372:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8007376:	da12      	bge.n	800739e <scalbn+0xbe>
 8007378:	f24c 3350 	movw	r3, #50000	; 0xc350
 800737c:	429f      	cmp	r7, r3
 800737e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8007382:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 8007386:	dcdc      	bgt.n	8007342 <scalbn+0x62>
 8007388:	a30b      	add	r3, pc, #44	; (adr r3, 80073b8 <scalbn+0xd8>)
 800738a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800738e:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8007392:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8007396:	480f      	ldr	r0, [pc, #60]	; (80073d4 <scalbn+0xf4>)
 8007398:	f041 011f 	orr.w	r1, r1, #31
 800739c:	e7b8      	b.n	8007310 <scalbn+0x30>
 800739e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80073a2:	3136      	adds	r1, #54	; 0x36
 80073a4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80073a8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 80073ac:	4620      	mov	r0, r4
 80073ae:	4629      	mov	r1, r5
 80073b0:	2200      	movs	r2, #0
 80073b2:	4b09      	ldr	r3, [pc, #36]	; (80073d8 <scalbn+0xf8>)
 80073b4:	e7ac      	b.n	8007310 <scalbn+0x30>
 80073b6:	bf00      	nop
 80073b8:	c2f8f359 	.word	0xc2f8f359
 80073bc:	01a56e1f 	.word	0x01a56e1f
 80073c0:	8800759c 	.word	0x8800759c
 80073c4:	7e37e43c 	.word	0x7e37e43c
 80073c8:	43500000 	.word	0x43500000
 80073cc:	ffff3cb0 	.word	0xffff3cb0
 80073d0:	8800759c 	.word	0x8800759c
 80073d4:	c2f8f359 	.word	0xc2f8f359
 80073d8:	3c900000 	.word	0x3c900000

080073dc <__errno>:
 80073dc:	4b01      	ldr	r3, [pc, #4]	; (80073e4 <__errno+0x8>)
 80073de:	6818      	ldr	r0, [r3, #0]
 80073e0:	4770      	bx	lr
 80073e2:	bf00      	nop
 80073e4:	20000028 	.word	0x20000028

080073e8 <__libc_init_array>:
 80073e8:	b570      	push	{r4, r5, r6, lr}
 80073ea:	2600      	movs	r6, #0
 80073ec:	4d0c      	ldr	r5, [pc, #48]	; (8007420 <__libc_init_array+0x38>)
 80073ee:	4c0d      	ldr	r4, [pc, #52]	; (8007424 <__libc_init_array+0x3c>)
 80073f0:	1b64      	subs	r4, r4, r5
 80073f2:	10a4      	asrs	r4, r4, #2
 80073f4:	42a6      	cmp	r6, r4
 80073f6:	d109      	bne.n	800740c <__libc_init_array+0x24>
 80073f8:	f000 f822 	bl	8007440 <_init>
 80073fc:	2600      	movs	r6, #0
 80073fe:	4d0a      	ldr	r5, [pc, #40]	; (8007428 <__libc_init_array+0x40>)
 8007400:	4c0a      	ldr	r4, [pc, #40]	; (800742c <__libc_init_array+0x44>)
 8007402:	1b64      	subs	r4, r4, r5
 8007404:	10a4      	asrs	r4, r4, #2
 8007406:	42a6      	cmp	r6, r4
 8007408:	d105      	bne.n	8007416 <__libc_init_array+0x2e>
 800740a:	bd70      	pop	{r4, r5, r6, pc}
 800740c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007410:	4798      	blx	r3
 8007412:	3601      	adds	r6, #1
 8007414:	e7ee      	b.n	80073f4 <__libc_init_array+0xc>
 8007416:	f855 3b04 	ldr.w	r3, [r5], #4
 800741a:	4798      	blx	r3
 800741c:	3601      	adds	r6, #1
 800741e:	e7f2      	b.n	8007406 <__libc_init_array+0x1e>
 8007420:	080074b0 	.word	0x080074b0
 8007424:	080074b0 	.word	0x080074b0
 8007428:	080074b0 	.word	0x080074b0
 800742c:	080074b4 	.word	0x080074b4

08007430 <memset>:
 8007430:	4603      	mov	r3, r0
 8007432:	4402      	add	r2, r0
 8007434:	4293      	cmp	r3, r2
 8007436:	d100      	bne.n	800743a <memset+0xa>
 8007438:	4770      	bx	lr
 800743a:	f803 1b01 	strb.w	r1, [r3], #1
 800743e:	e7f9      	b.n	8007434 <memset+0x4>

08007440 <_init>:
 8007440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007442:	bf00      	nop
 8007444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007446:	bc08      	pop	{r3}
 8007448:	469e      	mov	lr, r3
 800744a:	4770      	bx	lr

0800744c <_fini>:
 800744c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800744e:	bf00      	nop
 8007450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007452:	bc08      	pop	{r3}
 8007454:	469e      	mov	lr, r3
 8007456:	4770      	bx	lr
