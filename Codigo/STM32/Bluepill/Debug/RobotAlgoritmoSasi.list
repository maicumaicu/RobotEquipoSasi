
RobotAlgoritmoSasi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078f0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08007a00  08007a00  00017a00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a58  08007a58  000200ac  2**0
                  CONTENTS
  4 .ARM          00000000  08007a58  08007a58  000200ac  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007a58  08007a58  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a58  08007a58  00017a58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a5c  08007a5c  00017a5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  08007a60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002c60  200000b0  08007b0c  000200b0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002d10  08007b0c  00022d10  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eb8f  00000000  00000000  000200d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e4f  00000000  00000000  0002ec64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001048  00000000  00000000  00031ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ef0  00000000  00000000  00032b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019ec2  00000000  00000000  000339f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013898  00000000  00000000  0004d8b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009136b  00000000  00000000  0006114a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f24b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047a0  00000000  00000000  000f2508  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000b0 	.word	0x200000b0
 800012c:	00000000 	.word	0x00000000
 8000130:	080079e8 	.word	0x080079e8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000b4 	.word	0x200000b4
 800014c:	080079e8 	.word	0x080079e8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2f>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a40:	bf24      	itt	cs
 8000a42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a4a:	d90d      	bls.n	8000a68 <__aeabi_d2f+0x30>
 8000a4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a60:	bf08      	it	eq
 8000a62:	f020 0001 	biceq.w	r0, r0, #1
 8000a66:	4770      	bx	lr
 8000a68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a6c:	d121      	bne.n	8000ab2 <__aeabi_d2f+0x7a>
 8000a6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a72:	bfbc      	itt	lt
 8000a74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	4770      	bxlt	lr
 8000a7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a82:	f1c2 0218 	rsb	r2, r2, #24
 8000a86:	f1c2 0c20 	rsb	ip, r2, #32
 8000a8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a92:	bf18      	it	ne
 8000a94:	f040 0001 	orrne.w	r0, r0, #1
 8000a98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aa0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aa4:	ea40 000c 	orr.w	r0, r0, ip
 8000aa8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ab0:	e7cc      	b.n	8000a4c <__aeabi_d2f+0x14>
 8000ab2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ab6:	d107      	bne.n	8000ac8 <__aeabi_d2f+0x90>
 8000ab8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000abc:	bf1e      	ittt	ne
 8000abe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ac2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ac6:	4770      	bxne	lr
 8000ac8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000acc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ad0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_frsub>:
 8000ad8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000adc:	e002      	b.n	8000ae4 <__addsf3>
 8000ade:	bf00      	nop

08000ae0 <__aeabi_fsub>:
 8000ae0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ae4 <__addsf3>:
 8000ae4:	0042      	lsls	r2, r0, #1
 8000ae6:	bf1f      	itttt	ne
 8000ae8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000aec:	ea92 0f03 	teqne	r2, r3
 8000af0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000af4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000af8:	d06a      	beq.n	8000bd0 <__addsf3+0xec>
 8000afa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000afe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b02:	bfc1      	itttt	gt
 8000b04:	18d2      	addgt	r2, r2, r3
 8000b06:	4041      	eorgt	r1, r0
 8000b08:	4048      	eorgt	r0, r1
 8000b0a:	4041      	eorgt	r1, r0
 8000b0c:	bfb8      	it	lt
 8000b0e:	425b      	neglt	r3, r3
 8000b10:	2b19      	cmp	r3, #25
 8000b12:	bf88      	it	hi
 8000b14:	4770      	bxhi	lr
 8000b16:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b1a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b1e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4240      	negne	r0, r0
 8000b26:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b2e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b32:	bf18      	it	ne
 8000b34:	4249      	negne	r1, r1
 8000b36:	ea92 0f03 	teq	r2, r3
 8000b3a:	d03f      	beq.n	8000bbc <__addsf3+0xd8>
 8000b3c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b40:	fa41 fc03 	asr.w	ip, r1, r3
 8000b44:	eb10 000c 	adds.w	r0, r0, ip
 8000b48:	f1c3 0320 	rsb	r3, r3, #32
 8000b4c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b50:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b54:	d502      	bpl.n	8000b5c <__addsf3+0x78>
 8000b56:	4249      	negs	r1, r1
 8000b58:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b5c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b60:	d313      	bcc.n	8000b8a <__addsf3+0xa6>
 8000b62:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b66:	d306      	bcc.n	8000b76 <__addsf3+0x92>
 8000b68:	0840      	lsrs	r0, r0, #1
 8000b6a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b6e:	f102 0201 	add.w	r2, r2, #1
 8000b72:	2afe      	cmp	r2, #254	; 0xfe
 8000b74:	d251      	bcs.n	8000c1a <__addsf3+0x136>
 8000b76:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b7a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b7e:	bf08      	it	eq
 8000b80:	f020 0001 	biceq.w	r0, r0, #1
 8000b84:	ea40 0003 	orr.w	r0, r0, r3
 8000b88:	4770      	bx	lr
 8000b8a:	0049      	lsls	r1, r1, #1
 8000b8c:	eb40 0000 	adc.w	r0, r0, r0
 8000b90:	3a01      	subs	r2, #1
 8000b92:	bf28      	it	cs
 8000b94:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b98:	d2ed      	bcs.n	8000b76 <__addsf3+0x92>
 8000b9a:	fab0 fc80 	clz	ip, r0
 8000b9e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ba2:	ebb2 020c 	subs.w	r2, r2, ip
 8000ba6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000baa:	bfaa      	itet	ge
 8000bac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bb0:	4252      	neglt	r2, r2
 8000bb2:	4318      	orrge	r0, r3
 8000bb4:	bfbc      	itt	lt
 8000bb6:	40d0      	lsrlt	r0, r2
 8000bb8:	4318      	orrlt	r0, r3
 8000bba:	4770      	bx	lr
 8000bbc:	f092 0f00 	teq	r2, #0
 8000bc0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bc4:	bf06      	itte	eq
 8000bc6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bca:	3201      	addeq	r2, #1
 8000bcc:	3b01      	subne	r3, #1
 8000bce:	e7b5      	b.n	8000b3c <__addsf3+0x58>
 8000bd0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bd8:	bf18      	it	ne
 8000bda:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bde:	d021      	beq.n	8000c24 <__addsf3+0x140>
 8000be0:	ea92 0f03 	teq	r2, r3
 8000be4:	d004      	beq.n	8000bf0 <__addsf3+0x10c>
 8000be6:	f092 0f00 	teq	r2, #0
 8000bea:	bf08      	it	eq
 8000bec:	4608      	moveq	r0, r1
 8000bee:	4770      	bx	lr
 8000bf0:	ea90 0f01 	teq	r0, r1
 8000bf4:	bf1c      	itt	ne
 8000bf6:	2000      	movne	r0, #0
 8000bf8:	4770      	bxne	lr
 8000bfa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bfe:	d104      	bne.n	8000c0a <__addsf3+0x126>
 8000c00:	0040      	lsls	r0, r0, #1
 8000c02:	bf28      	it	cs
 8000c04:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c08:	4770      	bx	lr
 8000c0a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c0e:	bf3c      	itt	cc
 8000c10:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c14:	4770      	bxcc	lr
 8000c16:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c1a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c22:	4770      	bx	lr
 8000c24:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c28:	bf16      	itet	ne
 8000c2a:	4608      	movne	r0, r1
 8000c2c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c30:	4601      	movne	r1, r0
 8000c32:	0242      	lsls	r2, r0, #9
 8000c34:	bf06      	itte	eq
 8000c36:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c3a:	ea90 0f01 	teqeq	r0, r1
 8000c3e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c42:	4770      	bx	lr

08000c44 <__aeabi_ui2f>:
 8000c44:	f04f 0300 	mov.w	r3, #0
 8000c48:	e004      	b.n	8000c54 <__aeabi_i2f+0x8>
 8000c4a:	bf00      	nop

08000c4c <__aeabi_i2f>:
 8000c4c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c50:	bf48      	it	mi
 8000c52:	4240      	negmi	r0, r0
 8000c54:	ea5f 0c00 	movs.w	ip, r0
 8000c58:	bf08      	it	eq
 8000c5a:	4770      	bxeq	lr
 8000c5c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c60:	4601      	mov	r1, r0
 8000c62:	f04f 0000 	mov.w	r0, #0
 8000c66:	e01c      	b.n	8000ca2 <__aeabi_l2f+0x2a>

08000c68 <__aeabi_ul2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f04f 0300 	mov.w	r3, #0
 8000c74:	e00a      	b.n	8000c8c <__aeabi_l2f+0x14>
 8000c76:	bf00      	nop

08000c78 <__aeabi_l2f>:
 8000c78:	ea50 0201 	orrs.w	r2, r0, r1
 8000c7c:	bf08      	it	eq
 8000c7e:	4770      	bxeq	lr
 8000c80:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c84:	d502      	bpl.n	8000c8c <__aeabi_l2f+0x14>
 8000c86:	4240      	negs	r0, r0
 8000c88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c8c:	ea5f 0c01 	movs.w	ip, r1
 8000c90:	bf02      	ittt	eq
 8000c92:	4684      	moveq	ip, r0
 8000c94:	4601      	moveq	r1, r0
 8000c96:	2000      	moveq	r0, #0
 8000c98:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c9c:	bf08      	it	eq
 8000c9e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ca2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ca6:	fabc f28c 	clz	r2, ip
 8000caa:	3a08      	subs	r2, #8
 8000cac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cb0:	db10      	blt.n	8000cd4 <__aeabi_l2f+0x5c>
 8000cb2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cb6:	4463      	add	r3, ip
 8000cb8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cbc:	f1c2 0220 	rsb	r2, r2, #32
 8000cc0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cc4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cc8:	eb43 0002 	adc.w	r0, r3, r2
 8000ccc:	bf08      	it	eq
 8000cce:	f020 0001 	biceq.w	r0, r0, #1
 8000cd2:	4770      	bx	lr
 8000cd4:	f102 0220 	add.w	r2, r2, #32
 8000cd8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cdc:	f1c2 0220 	rsb	r2, r2, #32
 8000ce0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ce4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ce8:	eb43 0002 	adc.w	r0, r3, r2
 8000cec:	bf08      	it	eq
 8000cee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cf2:	4770      	bx	lr

08000cf4 <__aeabi_fmul>:
 8000cf4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cf8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cfc:	bf1e      	ittt	ne
 8000cfe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d02:	ea92 0f0c 	teqne	r2, ip
 8000d06:	ea93 0f0c 	teqne	r3, ip
 8000d0a:	d06f      	beq.n	8000dec <__aeabi_fmul+0xf8>
 8000d0c:	441a      	add	r2, r3
 8000d0e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d12:	0240      	lsls	r0, r0, #9
 8000d14:	bf18      	it	ne
 8000d16:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d1a:	d01e      	beq.n	8000d5a <__aeabi_fmul+0x66>
 8000d1c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d20:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d24:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d28:	fba0 3101 	umull	r3, r1, r0, r1
 8000d2c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d30:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d34:	bf3e      	ittt	cc
 8000d36:	0049      	lslcc	r1, r1, #1
 8000d38:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d3c:	005b      	lslcc	r3, r3, #1
 8000d3e:	ea40 0001 	orr.w	r0, r0, r1
 8000d42:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d46:	2afd      	cmp	r2, #253	; 0xfd
 8000d48:	d81d      	bhi.n	8000d86 <__aeabi_fmul+0x92>
 8000d4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d4e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d52:	bf08      	it	eq
 8000d54:	f020 0001 	biceq.w	r0, r0, #1
 8000d58:	4770      	bx	lr
 8000d5a:	f090 0f00 	teq	r0, #0
 8000d5e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d62:	bf08      	it	eq
 8000d64:	0249      	lsleq	r1, r1, #9
 8000d66:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d6a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d6e:	3a7f      	subs	r2, #127	; 0x7f
 8000d70:	bfc2      	ittt	gt
 8000d72:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d76:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d7a:	4770      	bxgt	lr
 8000d7c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d80:	f04f 0300 	mov.w	r3, #0
 8000d84:	3a01      	subs	r2, #1
 8000d86:	dc5d      	bgt.n	8000e44 <__aeabi_fmul+0x150>
 8000d88:	f112 0f19 	cmn.w	r2, #25
 8000d8c:	bfdc      	itt	le
 8000d8e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d92:	4770      	bxle	lr
 8000d94:	f1c2 0200 	rsb	r2, r2, #0
 8000d98:	0041      	lsls	r1, r0, #1
 8000d9a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d9e:	f1c2 0220 	rsb	r2, r2, #32
 8000da2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000da6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000daa:	f140 0000 	adc.w	r0, r0, #0
 8000dae:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000db2:	bf08      	it	eq
 8000db4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000db8:	4770      	bx	lr
 8000dba:	f092 0f00 	teq	r2, #0
 8000dbe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dc2:	bf02      	ittt	eq
 8000dc4:	0040      	lsleq	r0, r0, #1
 8000dc6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dca:	3a01      	subeq	r2, #1
 8000dcc:	d0f9      	beq.n	8000dc2 <__aeabi_fmul+0xce>
 8000dce:	ea40 000c 	orr.w	r0, r0, ip
 8000dd2:	f093 0f00 	teq	r3, #0
 8000dd6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dda:	bf02      	ittt	eq
 8000ddc:	0049      	lsleq	r1, r1, #1
 8000dde:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000de2:	3b01      	subeq	r3, #1
 8000de4:	d0f9      	beq.n	8000dda <__aeabi_fmul+0xe6>
 8000de6:	ea41 010c 	orr.w	r1, r1, ip
 8000dea:	e78f      	b.n	8000d0c <__aeabi_fmul+0x18>
 8000dec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000df0:	ea92 0f0c 	teq	r2, ip
 8000df4:	bf18      	it	ne
 8000df6:	ea93 0f0c 	teqne	r3, ip
 8000dfa:	d00a      	beq.n	8000e12 <__aeabi_fmul+0x11e>
 8000dfc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e00:	bf18      	it	ne
 8000e02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e06:	d1d8      	bne.n	8000dba <__aeabi_fmul+0xc6>
 8000e08:	ea80 0001 	eor.w	r0, r0, r1
 8000e0c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e10:	4770      	bx	lr
 8000e12:	f090 0f00 	teq	r0, #0
 8000e16:	bf17      	itett	ne
 8000e18:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e1c:	4608      	moveq	r0, r1
 8000e1e:	f091 0f00 	teqne	r1, #0
 8000e22:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e26:	d014      	beq.n	8000e52 <__aeabi_fmul+0x15e>
 8000e28:	ea92 0f0c 	teq	r2, ip
 8000e2c:	d101      	bne.n	8000e32 <__aeabi_fmul+0x13e>
 8000e2e:	0242      	lsls	r2, r0, #9
 8000e30:	d10f      	bne.n	8000e52 <__aeabi_fmul+0x15e>
 8000e32:	ea93 0f0c 	teq	r3, ip
 8000e36:	d103      	bne.n	8000e40 <__aeabi_fmul+0x14c>
 8000e38:	024b      	lsls	r3, r1, #9
 8000e3a:	bf18      	it	ne
 8000e3c:	4608      	movne	r0, r1
 8000e3e:	d108      	bne.n	8000e52 <__aeabi_fmul+0x15e>
 8000e40:	ea80 0001 	eor.w	r0, r0, r1
 8000e44:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e50:	4770      	bx	lr
 8000e52:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e56:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e5a:	4770      	bx	lr

08000e5c <__aeabi_fdiv>:
 8000e5c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e64:	bf1e      	ittt	ne
 8000e66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e6a:	ea92 0f0c 	teqne	r2, ip
 8000e6e:	ea93 0f0c 	teqne	r3, ip
 8000e72:	d069      	beq.n	8000f48 <__aeabi_fdiv+0xec>
 8000e74:	eba2 0203 	sub.w	r2, r2, r3
 8000e78:	ea80 0c01 	eor.w	ip, r0, r1
 8000e7c:	0249      	lsls	r1, r1, #9
 8000e7e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e82:	d037      	beq.n	8000ef4 <__aeabi_fdiv+0x98>
 8000e84:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e88:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e8c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e90:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e94:	428b      	cmp	r3, r1
 8000e96:	bf38      	it	cc
 8000e98:	005b      	lslcc	r3, r3, #1
 8000e9a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e9e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ea2:	428b      	cmp	r3, r1
 8000ea4:	bf24      	itt	cs
 8000ea6:	1a5b      	subcs	r3, r3, r1
 8000ea8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eac:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000eb0:	bf24      	itt	cs
 8000eb2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eb6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eba:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ebe:	bf24      	itt	cs
 8000ec0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ec4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ec8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ecc:	bf24      	itt	cs
 8000ece:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ed2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ed6:	011b      	lsls	r3, r3, #4
 8000ed8:	bf18      	it	ne
 8000eda:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ede:	d1e0      	bne.n	8000ea2 <__aeabi_fdiv+0x46>
 8000ee0:	2afd      	cmp	r2, #253	; 0xfd
 8000ee2:	f63f af50 	bhi.w	8000d86 <__aeabi_fmul+0x92>
 8000ee6:	428b      	cmp	r3, r1
 8000ee8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eec:	bf08      	it	eq
 8000eee:	f020 0001 	biceq.w	r0, r0, #1
 8000ef2:	4770      	bx	lr
 8000ef4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ef8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000efc:	327f      	adds	r2, #127	; 0x7f
 8000efe:	bfc2      	ittt	gt
 8000f00:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f04:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f08:	4770      	bxgt	lr
 8000f0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f0e:	f04f 0300 	mov.w	r3, #0
 8000f12:	3a01      	subs	r2, #1
 8000f14:	e737      	b.n	8000d86 <__aeabi_fmul+0x92>
 8000f16:	f092 0f00 	teq	r2, #0
 8000f1a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f1e:	bf02      	ittt	eq
 8000f20:	0040      	lsleq	r0, r0, #1
 8000f22:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f26:	3a01      	subeq	r2, #1
 8000f28:	d0f9      	beq.n	8000f1e <__aeabi_fdiv+0xc2>
 8000f2a:	ea40 000c 	orr.w	r0, r0, ip
 8000f2e:	f093 0f00 	teq	r3, #0
 8000f32:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f36:	bf02      	ittt	eq
 8000f38:	0049      	lsleq	r1, r1, #1
 8000f3a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f3e:	3b01      	subeq	r3, #1
 8000f40:	d0f9      	beq.n	8000f36 <__aeabi_fdiv+0xda>
 8000f42:	ea41 010c 	orr.w	r1, r1, ip
 8000f46:	e795      	b.n	8000e74 <__aeabi_fdiv+0x18>
 8000f48:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f4c:	ea92 0f0c 	teq	r2, ip
 8000f50:	d108      	bne.n	8000f64 <__aeabi_fdiv+0x108>
 8000f52:	0242      	lsls	r2, r0, #9
 8000f54:	f47f af7d 	bne.w	8000e52 <__aeabi_fmul+0x15e>
 8000f58:	ea93 0f0c 	teq	r3, ip
 8000f5c:	f47f af70 	bne.w	8000e40 <__aeabi_fmul+0x14c>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e776      	b.n	8000e52 <__aeabi_fmul+0x15e>
 8000f64:	ea93 0f0c 	teq	r3, ip
 8000f68:	d104      	bne.n	8000f74 <__aeabi_fdiv+0x118>
 8000f6a:	024b      	lsls	r3, r1, #9
 8000f6c:	f43f af4c 	beq.w	8000e08 <__aeabi_fmul+0x114>
 8000f70:	4608      	mov	r0, r1
 8000f72:	e76e      	b.n	8000e52 <__aeabi_fmul+0x15e>
 8000f74:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f78:	bf18      	it	ne
 8000f7a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f7e:	d1ca      	bne.n	8000f16 <__aeabi_fdiv+0xba>
 8000f80:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f84:	f47f af5c 	bne.w	8000e40 <__aeabi_fmul+0x14c>
 8000f88:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f8c:	f47f af3c 	bne.w	8000e08 <__aeabi_fmul+0x114>
 8000f90:	e75f      	b.n	8000e52 <__aeabi_fmul+0x15e>
 8000f92:	bf00      	nop

08000f94 <__gesf2>:
 8000f94:	f04f 3cff 	mov.w	ip, #4294967295
 8000f98:	e006      	b.n	8000fa8 <__cmpsf2+0x4>
 8000f9a:	bf00      	nop

08000f9c <__lesf2>:
 8000f9c:	f04f 0c01 	mov.w	ip, #1
 8000fa0:	e002      	b.n	8000fa8 <__cmpsf2+0x4>
 8000fa2:	bf00      	nop

08000fa4 <__cmpsf2>:
 8000fa4:	f04f 0c01 	mov.w	ip, #1
 8000fa8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fac:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fb0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fb4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fb8:	bf18      	it	ne
 8000fba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fbe:	d011      	beq.n	8000fe4 <__cmpsf2+0x40>
 8000fc0:	b001      	add	sp, #4
 8000fc2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fc6:	bf18      	it	ne
 8000fc8:	ea90 0f01 	teqne	r0, r1
 8000fcc:	bf58      	it	pl
 8000fce:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fd2:	bf88      	it	hi
 8000fd4:	17c8      	asrhi	r0, r1, #31
 8000fd6:	bf38      	it	cc
 8000fd8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fdc:	bf18      	it	ne
 8000fde:	f040 0001 	orrne.w	r0, r0, #1
 8000fe2:	4770      	bx	lr
 8000fe4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fe8:	d102      	bne.n	8000ff0 <__cmpsf2+0x4c>
 8000fea:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fee:	d105      	bne.n	8000ffc <__cmpsf2+0x58>
 8000ff0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ff4:	d1e4      	bne.n	8000fc0 <__cmpsf2+0x1c>
 8000ff6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000ffa:	d0e1      	beq.n	8000fc0 <__cmpsf2+0x1c>
 8000ffc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop

08001004 <__aeabi_cfrcmple>:
 8001004:	4684      	mov	ip, r0
 8001006:	4608      	mov	r0, r1
 8001008:	4661      	mov	r1, ip
 800100a:	e7ff      	b.n	800100c <__aeabi_cfcmpeq>

0800100c <__aeabi_cfcmpeq>:
 800100c:	b50f      	push	{r0, r1, r2, r3, lr}
 800100e:	f7ff ffc9 	bl	8000fa4 <__cmpsf2>
 8001012:	2800      	cmp	r0, #0
 8001014:	bf48      	it	mi
 8001016:	f110 0f00 	cmnmi.w	r0, #0
 800101a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800101c <__aeabi_fcmpeq>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff fff4 	bl	800100c <__aeabi_cfcmpeq>
 8001024:	bf0c      	ite	eq
 8001026:	2001      	moveq	r0, #1
 8001028:	2000      	movne	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_fcmplt>:
 8001030:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001034:	f7ff ffea 	bl	800100c <__aeabi_cfcmpeq>
 8001038:	bf34      	ite	cc
 800103a:	2001      	movcc	r0, #1
 800103c:	2000      	movcs	r0, #0
 800103e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001042:	bf00      	nop

08001044 <__aeabi_fcmple>:
 8001044:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001048:	f7ff ffe0 	bl	800100c <__aeabi_cfcmpeq>
 800104c:	bf94      	ite	ls
 800104e:	2001      	movls	r0, #1
 8001050:	2000      	movhi	r0, #0
 8001052:	f85d fb08 	ldr.w	pc, [sp], #8
 8001056:	bf00      	nop

08001058 <__aeabi_fcmpge>:
 8001058:	f84d ed08 	str.w	lr, [sp, #-8]!
 800105c:	f7ff ffd2 	bl	8001004 <__aeabi_cfrcmple>
 8001060:	bf94      	ite	ls
 8001062:	2001      	movls	r0, #1
 8001064:	2000      	movhi	r0, #0
 8001066:	f85d fb08 	ldr.w	pc, [sp], #8
 800106a:	bf00      	nop

0800106c <__aeabi_fcmpgt>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff ffc8 	bl	8001004 <__aeabi_cfrcmple>
 8001074:	bf34      	ite	cc
 8001076:	2001      	movcc	r0, #1
 8001078:	2000      	movcs	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_f2iz>:
 8001080:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001084:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001088:	d30f      	bcc.n	80010aa <__aeabi_f2iz+0x2a>
 800108a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800108e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001092:	d90d      	bls.n	80010b0 <__aeabi_f2iz+0x30>
 8001094:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001098:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800109c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010a0:	fa23 f002 	lsr.w	r0, r3, r2
 80010a4:	bf18      	it	ne
 80010a6:	4240      	negne	r0, r0
 80010a8:	4770      	bx	lr
 80010aa:	f04f 0000 	mov.w	r0, #0
 80010ae:	4770      	bx	lr
 80010b0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010b4:	d101      	bne.n	80010ba <__aeabi_f2iz+0x3a>
 80010b6:	0242      	lsls	r2, r0, #9
 80010b8:	d105      	bne.n	80010c6 <__aeabi_f2iz+0x46>
 80010ba:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010be:	bf08      	it	eq
 80010c0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80010c4:	4770      	bx	lr
 80010c6:	f04f 0000 	mov.w	r0, #0
 80010ca:	4770      	bx	lr

080010cc <GetPage>:
 * Some STM32F103C8 have 64 KB FLASH Memory, so I guess they have Page 0 to Page 63 only.
 */

/* FLASH_PAGE_SIZE should be able to get the size of the Page according to the controller */
static uint32_t GetPage(uint32_t Address)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  for (int indx=0; indx<128; indx++)
 80010d4:	2300      	movs	r3, #0
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	e016      	b.n	8001108 <GetPage+0x3c>
  {
	  if((Address < (0x08000000 + (FLASH_PAGE_SIZE *(indx+1))) ) && (Address >= (0x08000000 + FLASH_PAGE_SIZE*indx)))
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80010e0:	3301      	adds	r3, #1
 80010e2:	029b      	lsls	r3, r3, #10
 80010e4:	687a      	ldr	r2, [r7, #4]
 80010e6:	429a      	cmp	r2, r3
 80010e8:	d20b      	bcs.n	8001102 <GetPage+0x36>
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80010f0:	029b      	lsls	r3, r3, #10
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d304      	bcc.n	8001102 <GetPage+0x36>
	  {
		  return (0x08000000 + FLASH_PAGE_SIZE*indx);
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80010fe:	029b      	lsls	r3, r3, #10
 8001100:	e006      	b.n	8001110 <GetPage+0x44>
  for (int indx=0; indx<128; indx++)
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	3301      	adds	r3, #1
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	2b7f      	cmp	r3, #127	; 0x7f
 800110c:	dde5      	ble.n	80010da <GetPage+0xe>
	  }
  }

  return 0;
 800110e:	2300      	movs	r3, #0
}
 8001110:	4618      	mov	r0, r3
 8001112:	3714      	adds	r7, #20
 8001114:	46bd      	mov	sp, r7
 8001116:	bc80      	pop	{r7}
 8001118:	4770      	bx	lr
	...

0800111c <Flash_Write_Data>:
   float float_variable =  thing.a;
   return float_variable;
}

uint32_t Flash_Write_Data (uint32_t StartPageAddress, uint32_t *Data, uint16_t numberofwords)
{
 800111c:	b5b0      	push	{r4, r5, r7, lr}
 800111e:	b08a      	sub	sp, #40	; 0x28
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	4613      	mov	r3, r2
 8001128:	80fb      	strh	r3, [r7, #6]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PAGEError;
	int sofar=0;
 800112a:	2300      	movs	r3, #0
 800112c:	627b      	str	r3, [r7, #36]	; 0x24

	  /* Unlock the Flash to enable the flash control register access *************/
	   HAL_FLASH_Unlock();
 800112e:	f003 fe25 	bl	8004d7c <HAL_FLASH_Unlock>

	   /* Erase the user Flash area*/

	  uint32_t StartPage = GetPage(StartPageAddress);
 8001132:	68f8      	ldr	r0, [r7, #12]
 8001134:	f7ff ffca 	bl	80010cc <GetPage>
 8001138:	6238      	str	r0, [r7, #32]
	  uint32_t EndPageAdress = StartPageAddress + numberofwords*4;
 800113a:	88fb      	ldrh	r3, [r7, #6]
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	461a      	mov	r2, r3
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	4413      	add	r3, r2
 8001144:	61fb      	str	r3, [r7, #28]
	  uint32_t EndPage = GetPage(EndPageAdress);
 8001146:	69f8      	ldr	r0, [r7, #28]
 8001148:	f7ff ffc0 	bl	80010cc <GetPage>
 800114c:	61b8      	str	r0, [r7, #24]

	   /* Fill EraseInit structure*/
	   EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 800114e:	4b20      	ldr	r3, [pc, #128]	; (80011d0 <Flash_Write_Data+0xb4>)
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
	   EraseInitStruct.PageAddress = StartPage;
 8001154:	4a1e      	ldr	r2, [pc, #120]	; (80011d0 <Flash_Write_Data+0xb4>)
 8001156:	6a3b      	ldr	r3, [r7, #32]
 8001158:	6093      	str	r3, [r2, #8]
	   EraseInitStruct.NbPages     = ((EndPage - StartPage)/FLASH_PAGE_SIZE) +1;
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	6a3b      	ldr	r3, [r7, #32]
 800115e:	1ad3      	subs	r3, r2, r3
 8001160:	0a9b      	lsrs	r3, r3, #10
 8001162:	3301      	adds	r3, #1
 8001164:	4a1a      	ldr	r2, [pc, #104]	; (80011d0 <Flash_Write_Data+0xb4>)
 8001166:	60d3      	str	r3, [r2, #12]

	   if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 8001168:	f107 0314 	add.w	r3, r7, #20
 800116c:	4619      	mov	r1, r3
 800116e:	4818      	ldr	r0, [pc, #96]	; (80011d0 <Flash_Write_Data+0xb4>)
 8001170:	f003 fef6 	bl	8004f60 <HAL_FLASHEx_Erase>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d01f      	beq.n	80011ba <Flash_Write_Data+0x9e>
	   {
	     /*Error occurred while page erase.*/
		  return HAL_FLASH_GetError ();
 800117a:	f003 fe35 	bl	8004de8 <HAL_FLASH_GetError>
 800117e:	4603      	mov	r3, r0
 8001180:	e022      	b.n	80011c8 <Flash_Write_Data+0xac>

	   /* Program the user Flash area word by word*/

	   while (sofar<numberofwords)
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartPageAddress, Data[sofar]) == HAL_OK)
 8001182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	68ba      	ldr	r2, [r7, #8]
 8001188:	4413      	add	r3, r2
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2200      	movs	r2, #0
 800118e:	461c      	mov	r4, r3
 8001190:	4615      	mov	r5, r2
 8001192:	4622      	mov	r2, r4
 8001194:	462b      	mov	r3, r5
 8001196:	68f9      	ldr	r1, [r7, #12]
 8001198:	2002      	movs	r0, #2
 800119a:	f003 fd7f 	bl	8004c9c <HAL_FLASH_Program>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d106      	bne.n	80011b2 <Flash_Write_Data+0x96>
	     {
	    	 StartPageAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	3304      	adds	r3, #4
 80011a8:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 80011aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ac:	3301      	adds	r3, #1
 80011ae:	627b      	str	r3, [r7, #36]	; 0x24
 80011b0:	e003      	b.n	80011ba <Flash_Write_Data+0x9e>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 80011b2:	f003 fe19 	bl	8004de8 <HAL_FLASH_GetError>
 80011b6:	4603      	mov	r3, r0
 80011b8:	e006      	b.n	80011c8 <Flash_Write_Data+0xac>
	   while (sofar<numberofwords)
 80011ba:	88fb      	ldrh	r3, [r7, #6]
 80011bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011be:	429a      	cmp	r2, r3
 80011c0:	dbdf      	blt.n	8001182 <Flash_Write_Data+0x66>
	     }
	   }

	   /* Lock the Flash to disable the flash control register access (recommended
	      to protect the FLASH memory against possible unwanted operation) *********/
	   HAL_FLASH_Lock();
 80011c2:	f003 fe01 	bl	8004dc8 <HAL_FLASH_Lock>

	   return 0;
 80011c6:	2300      	movs	r3, #0
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3728      	adds	r7, #40	; 0x28
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bdb0      	pop	{r4, r5, r7, pc}
 80011d0:	200000cc 	.word	0x200000cc

080011d4 <Flash_Read_Data>:


void Flash_Read_Data (uint32_t StartPageAddress, uint32_t *RxBuf, uint16_t numberofwords)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b085      	sub	sp, #20
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	4613      	mov	r3, r2
 80011e0:	80fb      	strh	r3, [r7, #6]
	while (1)
	{

		*RxBuf = *(__IO uint32_t *)StartPageAddress;
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	601a      	str	r2, [r3, #0]
		StartPageAddress += 4;
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	3304      	adds	r3, #4
 80011ee:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	3304      	adds	r3, #4
 80011f4:	60bb      	str	r3, [r7, #8]
		if (!(numberofwords--)) break;
 80011f6:	88fb      	ldrh	r3, [r7, #6]
 80011f8:	1e5a      	subs	r2, r3, #1
 80011fa:	80fa      	strh	r2, [r7, #6]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d000      	beq.n	8001202 <Flash_Read_Data+0x2e>
		*RxBuf = *(__IO uint32_t *)StartPageAddress;
 8001200:	e7ef      	b.n	80011e2 <Flash_Read_Data+0xe>
		if (!(numberofwords--)) break;
 8001202:	bf00      	nop
	}
}
 8001204:	bf00      	nop
 8001206:	3714      	adds	r7, #20
 8001208:	46bd      	mov	sp, r7
 800120a:	bc80      	pop	{r7}
 800120c:	4770      	bx	lr

0800120e <Convert_To_Str>:
void Convert_To_Str (uint32_t *Data, char *Buf)
{
 800120e:	b590      	push	{r4, r7, lr}
 8001210:	b085      	sub	sp, #20
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
 8001216:	6039      	str	r1, [r7, #0]
	int numberofbytes = ((strlen((char *)Data)/4) + ((strlen((char *)Data) % 4) != 0)) *4;
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f7fe ff99 	bl	8000150 <strlen>
 800121e:	4603      	mov	r3, r0
 8001220:	089c      	lsrs	r4, r3, #2
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f7fe ff94 	bl	8000150 <strlen>
 8001228:	4603      	mov	r3, r0
 800122a:	f003 0303 	and.w	r3, r3, #3
 800122e:	2b00      	cmp	r3, #0
 8001230:	bf14      	ite	ne
 8001232:	2301      	movne	r3, #1
 8001234:	2300      	moveq	r3, #0
 8001236:	b2db      	uxtb	r3, r3
 8001238:	4423      	add	r3, r4
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	60bb      	str	r3, [r7, #8]

	for (int i=0; i<numberofbytes; i++)
 800123e:	2300      	movs	r3, #0
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	e01b      	b.n	800127c <Convert_To_Str+0x6e>
	{
		Buf[i] = Data[i/4]>>(8*(i%4));
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	2b00      	cmp	r3, #0
 8001248:	da00      	bge.n	800124c <Convert_To_Str+0x3e>
 800124a:	3303      	adds	r3, #3
 800124c:	109b      	asrs	r3, r3, #2
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	687a      	ldr	r2, [r7, #4]
 8001252:	4413      	add	r3, r2
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	4259      	negs	r1, r3
 800125a:	f003 0303 	and.w	r3, r3, #3
 800125e:	f001 0103 	and.w	r1, r1, #3
 8001262:	bf58      	it	pl
 8001264:	424b      	negpl	r3, r1
 8001266:	00db      	lsls	r3, r3, #3
 8001268:	fa22 f103 	lsr.w	r1, r2, r3
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	683a      	ldr	r2, [r7, #0]
 8001270:	4413      	add	r3, r2
 8001272:	b2ca      	uxtb	r2, r1
 8001274:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<numberofbytes; i++)
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	3301      	adds	r3, #1
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fa      	ldr	r2, [r7, #12]
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	429a      	cmp	r2, r3
 8001282:	dbdf      	blt.n	8001244 <Convert_To_Str+0x36>
	}
}
 8001284:	bf00      	nop
 8001286:	bf00      	nop
 8001288:	3714      	adds	r7, #20
 800128a:	46bd      	mov	sp, r7
 800128c:	bd90      	pop	{r4, r7, pc}
	...

08001290 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001296:	1d3b      	adds	r3, r7, #4
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80012a0:	4b2e      	ldr	r3, [pc, #184]	; (800135c <MX_ADC1_Init+0xcc>)
 80012a2:	4a2f      	ldr	r2, [pc, #188]	; (8001360 <MX_ADC1_Init+0xd0>)
 80012a4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80012a6:	4b2d      	ldr	r3, [pc, #180]	; (800135c <MX_ADC1_Init+0xcc>)
 80012a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012ac:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80012ae:	4b2b      	ldr	r3, [pc, #172]	; (800135c <MX_ADC1_Init+0xcc>)
 80012b0:	2201      	movs	r2, #1
 80012b2:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012b4:	4b29      	ldr	r3, [pc, #164]	; (800135c <MX_ADC1_Init+0xcc>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012ba:	4b28      	ldr	r3, [pc, #160]	; (800135c <MX_ADC1_Init+0xcc>)
 80012bc:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80012c0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012c2:	4b26      	ldr	r3, [pc, #152]	; (800135c <MX_ADC1_Init+0xcc>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 80012c8:	4b24      	ldr	r3, [pc, #144]	; (800135c <MX_ADC1_Init+0xcc>)
 80012ca:	2204      	movs	r2, #4
 80012cc:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012ce:	4823      	ldr	r0, [pc, #140]	; (800135c <MX_ADC1_Init+0xcc>)
 80012d0:	f002 fe26 	bl	8003f20 <HAL_ADC_Init>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80012da:	f002 f91b 	bl	8003514 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80012de:	2300      	movs	r3, #0
 80012e0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012e2:	2301      	movs	r3, #1
 80012e4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 80012e6:	2303      	movs	r3, #3
 80012e8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012ea:	1d3b      	adds	r3, r7, #4
 80012ec:	4619      	mov	r1, r3
 80012ee:	481b      	ldr	r0, [pc, #108]	; (800135c <MX_ADC1_Init+0xcc>)
 80012f0:	f002 ffde 	bl	80042b0 <HAL_ADC_ConfigChannel>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80012fa:	f002 f90b 	bl	8003514 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80012fe:	2301      	movs	r3, #1
 8001300:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001302:	2302      	movs	r3, #2
 8001304:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001306:	1d3b      	adds	r3, r7, #4
 8001308:	4619      	mov	r1, r3
 800130a:	4814      	ldr	r0, [pc, #80]	; (800135c <MX_ADC1_Init+0xcc>)
 800130c:	f002 ffd0 	bl	80042b0 <HAL_ADC_ConfigChannel>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001316:	f002 f8fd 	bl	8003514 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800131a:	2302      	movs	r3, #2
 800131c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800131e:	2303      	movs	r3, #3
 8001320:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001322:	1d3b      	adds	r3, r7, #4
 8001324:	4619      	mov	r1, r3
 8001326:	480d      	ldr	r0, [pc, #52]	; (800135c <MX_ADC1_Init+0xcc>)
 8001328:	f002 ffc2 	bl	80042b0 <HAL_ADC_ConfigChannel>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001332:	f002 f8ef 	bl	8003514 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001336:	2303      	movs	r3, #3
 8001338:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800133a:	2304      	movs	r3, #4
 800133c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800133e:	1d3b      	adds	r3, r7, #4
 8001340:	4619      	mov	r1, r3
 8001342:	4806      	ldr	r0, [pc, #24]	; (800135c <MX_ADC1_Init+0xcc>)
 8001344:	f002 ffb4 	bl	80042b0 <HAL_ADC_ConfigChannel>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 800134e:	f002 f8e1 	bl	8003514 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001352:	bf00      	nop
 8001354:	3710      	adds	r7, #16
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	200000dc 	.word	0x200000dc
 8001360:	40012400 	.word	0x40012400

08001364 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b088      	sub	sp, #32
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136c:	f107 0310 	add.w	r3, r7, #16
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a28      	ldr	r2, [pc, #160]	; (8001420 <HAL_ADC_MspInit+0xbc>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d149      	bne.n	8001418 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001384:	4b27      	ldr	r3, [pc, #156]	; (8001424 <HAL_ADC_MspInit+0xc0>)
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	4a26      	ldr	r2, [pc, #152]	; (8001424 <HAL_ADC_MspInit+0xc0>)
 800138a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800138e:	6193      	str	r3, [r2, #24]
 8001390:	4b24      	ldr	r3, [pc, #144]	; (8001424 <HAL_ADC_MspInit+0xc0>)
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800139c:	4b21      	ldr	r3, [pc, #132]	; (8001424 <HAL_ADC_MspInit+0xc0>)
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	4a20      	ldr	r2, [pc, #128]	; (8001424 <HAL_ADC_MspInit+0xc0>)
 80013a2:	f043 0304 	orr.w	r3, r3, #4
 80013a6:	6193      	str	r3, [r2, #24]
 80013a8:	4b1e      	ldr	r3, [pc, #120]	; (8001424 <HAL_ADC_MspInit+0xc0>)
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	f003 0304 	and.w	r3, r3, #4
 80013b0:	60bb      	str	r3, [r7, #8]
 80013b2:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = CNY70_Pin|SHARP_D_Pin|SHARP_C_Pin|SHARP_I_Pin;
 80013b4:	230f      	movs	r3, #15
 80013b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013b8:	2303      	movs	r3, #3
 80013ba:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013bc:	f107 0310 	add.w	r3, r7, #16
 80013c0:	4619      	mov	r1, r3
 80013c2:	4819      	ldr	r0, [pc, #100]	; (8001428 <HAL_ADC_MspInit+0xc4>)
 80013c4:	f003 fe74 	bl	80050b0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80013c8:	4b18      	ldr	r3, [pc, #96]	; (800142c <HAL_ADC_MspInit+0xc8>)
 80013ca:	4a19      	ldr	r2, [pc, #100]	; (8001430 <HAL_ADC_MspInit+0xcc>)
 80013cc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013ce:	4b17      	ldr	r3, [pc, #92]	; (800142c <HAL_ADC_MspInit+0xc8>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80013d4:	4b15      	ldr	r3, [pc, #84]	; (800142c <HAL_ADC_MspInit+0xc8>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80013da:	4b14      	ldr	r3, [pc, #80]	; (800142c <HAL_ADC_MspInit+0xc8>)
 80013dc:	2280      	movs	r2, #128	; 0x80
 80013de:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80013e0:	4b12      	ldr	r3, [pc, #72]	; (800142c <HAL_ADC_MspInit+0xc8>)
 80013e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013e6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80013e8:	4b10      	ldr	r3, [pc, #64]	; (800142c <HAL_ADC_MspInit+0xc8>)
 80013ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013ee:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80013f0:	4b0e      	ldr	r3, [pc, #56]	; (800142c <HAL_ADC_MspInit+0xc8>)
 80013f2:	2220      	movs	r2, #32
 80013f4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80013f6:	4b0d      	ldr	r3, [pc, #52]	; (800142c <HAL_ADC_MspInit+0xc8>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80013fc:	480b      	ldr	r0, [pc, #44]	; (800142c <HAL_ADC_MspInit+0xc8>)
 80013fe:	f003 fa5f 	bl	80048c0 <HAL_DMA_Init>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001408:	f002 f884 	bl	8003514 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4a07      	ldr	r2, [pc, #28]	; (800142c <HAL_ADC_MspInit+0xc8>)
 8001410:	621a      	str	r2, [r3, #32]
 8001412:	4a06      	ldr	r2, [pc, #24]	; (800142c <HAL_ADC_MspInit+0xc8>)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001418:	bf00      	nop
 800141a:	3720      	adds	r7, #32
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40012400 	.word	0x40012400
 8001424:	40021000 	.word	0x40021000
 8001428:	40010800 	.word	0x40010800
 800142c:	2000010c 	.word	0x2000010c
 8001430:	40020008 	.word	0x40020008

08001434 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800143a:	4b0c      	ldr	r3, [pc, #48]	; (800146c <MX_DMA_Init+0x38>)
 800143c:	695b      	ldr	r3, [r3, #20]
 800143e:	4a0b      	ldr	r2, [pc, #44]	; (800146c <MX_DMA_Init+0x38>)
 8001440:	f043 0301 	orr.w	r3, r3, #1
 8001444:	6153      	str	r3, [r2, #20]
 8001446:	4b09      	ldr	r3, [pc, #36]	; (800146c <MX_DMA_Init+0x38>)
 8001448:	695b      	ldr	r3, [r3, #20]
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	607b      	str	r3, [r7, #4]
 8001450:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001452:	2200      	movs	r2, #0
 8001454:	2100      	movs	r1, #0
 8001456:	200b      	movs	r0, #11
 8001458:	f003 f9fb 	bl	8004852 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800145c:	200b      	movs	r0, #11
 800145e:	f003 fa14 	bl	800488a <HAL_NVIC_EnableIRQ>

}
 8001462:	bf00      	nop
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40021000 	.word	0x40021000

08001470 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b088      	sub	sp, #32
 8001474:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001476:	f107 0310 	add.w	r3, r7, #16
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	605a      	str	r2, [r3, #4]
 8001480:	609a      	str	r2, [r3, #8]
 8001482:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001484:	4b3f      	ldr	r3, [pc, #252]	; (8001584 <MX_GPIO_Init+0x114>)
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	4a3e      	ldr	r2, [pc, #248]	; (8001584 <MX_GPIO_Init+0x114>)
 800148a:	f043 0310 	orr.w	r3, r3, #16
 800148e:	6193      	str	r3, [r2, #24]
 8001490:	4b3c      	ldr	r3, [pc, #240]	; (8001584 <MX_GPIO_Init+0x114>)
 8001492:	699b      	ldr	r3, [r3, #24]
 8001494:	f003 0310 	and.w	r3, r3, #16
 8001498:	60fb      	str	r3, [r7, #12]
 800149a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800149c:	4b39      	ldr	r3, [pc, #228]	; (8001584 <MX_GPIO_Init+0x114>)
 800149e:	699b      	ldr	r3, [r3, #24]
 80014a0:	4a38      	ldr	r2, [pc, #224]	; (8001584 <MX_GPIO_Init+0x114>)
 80014a2:	f043 0320 	orr.w	r3, r3, #32
 80014a6:	6193      	str	r3, [r2, #24]
 80014a8:	4b36      	ldr	r3, [pc, #216]	; (8001584 <MX_GPIO_Init+0x114>)
 80014aa:	699b      	ldr	r3, [r3, #24]
 80014ac:	f003 0320 	and.w	r3, r3, #32
 80014b0:	60bb      	str	r3, [r7, #8]
 80014b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b4:	4b33      	ldr	r3, [pc, #204]	; (8001584 <MX_GPIO_Init+0x114>)
 80014b6:	699b      	ldr	r3, [r3, #24]
 80014b8:	4a32      	ldr	r2, [pc, #200]	; (8001584 <MX_GPIO_Init+0x114>)
 80014ba:	f043 0304 	orr.w	r3, r3, #4
 80014be:	6193      	str	r3, [r2, #24]
 80014c0:	4b30      	ldr	r3, [pc, #192]	; (8001584 <MX_GPIO_Init+0x114>)
 80014c2:	699b      	ldr	r3, [r3, #24]
 80014c4:	f003 0304 	and.w	r3, r3, #4
 80014c8:	607b      	str	r3, [r7, #4]
 80014ca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014cc:	4b2d      	ldr	r3, [pc, #180]	; (8001584 <MX_GPIO_Init+0x114>)
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	4a2c      	ldr	r2, [pc, #176]	; (8001584 <MX_GPIO_Init+0x114>)
 80014d2:	f043 0308 	orr.w	r3, r3, #8
 80014d6:	6193      	str	r3, [r2, #24]
 80014d8:	4b2a      	ldr	r3, [pc, #168]	; (8001584 <MX_GPIO_Init+0x114>)
 80014da:	699b      	ldr	r3, [r3, #24]
 80014dc:	f003 0308 	and.w	r3, r3, #8
 80014e0:	603b      	str	r3, [r7, #0]
 80014e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80014e4:	2200      	movs	r2, #0
 80014e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014ea:	4827      	ldr	r0, [pc, #156]	; (8001588 <MX_GPIO_Init+0x118>)
 80014ec:	f003 ff7b 	bl	80053e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|AIN1_Pin|AIN2_Pin, GPIO_PIN_RESET);
 80014f0:	2200      	movs	r2, #0
 80014f2:	f248 0118 	movw	r1, #32792	; 0x8018
 80014f6:	4825      	ldr	r0, [pc, #148]	; (800158c <MX_GPIO_Init+0x11c>)
 80014f8:	f003 ff75 	bl	80053e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BIN2_Pin|BIN1_Pin|STBY_Pin, GPIO_PIN_RESET);
 80014fc:	2200      	movs	r2, #0
 80014fe:	f44f 4118 	mov.w	r1, #38912	; 0x9800
 8001502:	4823      	ldr	r0, [pc, #140]	; (8001590 <MX_GPIO_Init+0x120>)
 8001504:	f003 ff6f 	bl	80053e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001508:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800150c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150e:	2301      	movs	r3, #1
 8001510:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001516:	2302      	movs	r3, #2
 8001518:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800151a:	f107 0310 	add.w	r3, r7, #16
 800151e:	4619      	mov	r1, r3
 8001520:	4819      	ldr	r0, [pc, #100]	; (8001588 <MX_GPIO_Init+0x118>)
 8001522:	f003 fdc5 	bl	80050b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin|BTN3_Pin;
 8001526:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800152a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800152c:	2300      	movs	r3, #0
 800152e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001530:	2300      	movs	r3, #0
 8001532:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001534:	f107 0310 	add.w	r3, r7, #16
 8001538:	4619      	mov	r1, r3
 800153a:	4814      	ldr	r0, [pc, #80]	; (800158c <MX_GPIO_Init+0x11c>)
 800153c:	f003 fdb8 	bl	80050b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_Pin|AIN1_Pin|AIN2_Pin;
 8001540:	f248 0318 	movw	r3, #32792	; 0x8018
 8001544:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001546:	2301      	movs	r3, #1
 8001548:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	2300      	movs	r3, #0
 800154c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154e:	2302      	movs	r3, #2
 8001550:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001552:	f107 0310 	add.w	r3, r7, #16
 8001556:	4619      	mov	r1, r3
 8001558:	480c      	ldr	r0, [pc, #48]	; (800158c <MX_GPIO_Init+0x11c>)
 800155a:	f003 fda9 	bl	80050b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = BIN2_Pin|BIN1_Pin|STBY_Pin;
 800155e:	f44f 4318 	mov.w	r3, #38912	; 0x9800
 8001562:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001564:	2301      	movs	r3, #1
 8001566:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156c:	2302      	movs	r3, #2
 800156e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001570:	f107 0310 	add.w	r3, r7, #16
 8001574:	4619      	mov	r1, r3
 8001576:	4806      	ldr	r0, [pc, #24]	; (8001590 <MX_GPIO_Init+0x120>)
 8001578:	f003 fd9a 	bl	80050b0 <HAL_GPIO_Init>

}
 800157c:	bf00      	nop
 800157e:	3720      	adds	r7, #32
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40021000 	.word	0x40021000
 8001588:	40011000 	.word	0x40011000
 800158c:	40010c00 	.word	0x40010c00
 8001590:	40010800 	.word	0x40010800

08001594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001598:	f002 fc3c 	bl	8003e14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800159c:	f000 f88a 	bl	80016b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015a0:	f7ff ff66 	bl	8001470 <MX_GPIO_Init>
  MX_DMA_Init();
 80015a4:	f7ff ff46 	bl	8001434 <MX_DMA_Init>
  MX_TIM4_Init();
 80015a8:	f002 fa6a 	bl	8003a80 <MX_TIM4_Init>
  MX_TIM3_Init();
 80015ac:	f002 fa14 	bl	80039d8 <MX_TIM3_Init>
  MX_ADC1_Init();
 80015b0:	f7ff fe6e 	bl	8001290 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80015b4:	f002 fb92 	bl	8003cdc <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80015b8:	f002 f9aa 	bl	8003910 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	btns[0].Port = BTN1_GPIO_Port;
 80015bc:	4b32      	ldr	r3, [pc, #200]	; (8001688 <main+0xf4>)
 80015be:	4a33      	ldr	r2, [pc, #204]	; (800168c <main+0xf8>)
 80015c0:	601a      	str	r2, [r3, #0]
	btns[0].pin = BTN1_Pin;
 80015c2:	4b31      	ldr	r3, [pc, #196]	; (8001688 <main+0xf4>)
 80015c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015c8:	809a      	strh	r2, [r3, #4]
	btns[0].estado = ESPERA;
 80015ca:	4b2f      	ldr	r3, [pc, #188]	; (8001688 <main+0xf4>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	609a      	str	r2, [r3, #8]
	btns[0].flag = 0;
 80015d0:	4b2d      	ldr	r3, [pc, #180]	; (8001688 <main+0xf4>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	60da      	str	r2, [r3, #12]
	btns[1].Port = BTN2_GPIO_Port;
 80015d6:	4b2c      	ldr	r3, [pc, #176]	; (8001688 <main+0xf4>)
 80015d8:	4a2c      	ldr	r2, [pc, #176]	; (800168c <main+0xf8>)
 80015da:	611a      	str	r2, [r3, #16]
	btns[1].pin = BTN2_Pin;
 80015dc:	4b2a      	ldr	r3, [pc, #168]	; (8001688 <main+0xf4>)
 80015de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015e2:	829a      	strh	r2, [r3, #20]
	btns[1].estado = ESPERA;
 80015e4:	4b28      	ldr	r3, [pc, #160]	; (8001688 <main+0xf4>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	619a      	str	r2, [r3, #24]
	btns[1].flag = 0;
 80015ea:	4b27      	ldr	r3, [pc, #156]	; (8001688 <main+0xf4>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	61da      	str	r2, [r3, #28]
	btns[2].Port = BTN3_GPIO_Port;
 80015f0:	4b25      	ldr	r3, [pc, #148]	; (8001688 <main+0xf4>)
 80015f2:	4a26      	ldr	r2, [pc, #152]	; (800168c <main+0xf8>)
 80015f4:	621a      	str	r2, [r3, #32]
	btns[2].pin = BTN3_Pin;
 80015f6:	4b24      	ldr	r3, [pc, #144]	; (8001688 <main+0xf4>)
 80015f8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015fc:	849a      	strh	r2, [r3, #36]	; 0x24
	btns[2].estado = ESPERA;
 80015fe:	4b22      	ldr	r3, [pc, #136]	; (8001688 <main+0xf4>)
 8001600:	2200      	movs	r2, #0
 8001602:	629a      	str	r2, [r3, #40]	; 0x28
	btns[2].flag = 0;
 8001604:	4b20      	ldr	r3, [pc, #128]	; (8001688 <main+0xf4>)
 8001606:	2200      	movs	r2, #0
 8001608:	62da      	str	r2, [r3, #44]	; 0x2c
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800160a:	2108      	movs	r1, #8
 800160c:	4820      	ldr	r0, [pc, #128]	; (8001690 <main+0xfc>)
 800160e:	f004 fc23 	bl	8005e58 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001612:	210c      	movs	r1, #12
 8001614:	481e      	ldr	r0, [pc, #120]	; (8001690 <main+0xfc>)
 8001616:	f004 fc1f 	bl	8005e58 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 800161a:	213c      	movs	r1, #60	; 0x3c
 800161c:	481d      	ldr	r0, [pc, #116]	; (8001694 <main+0x100>)
 800161e:	f004 fd5f 	bl	80060e0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001622:	213c      	movs	r1, #60	; 0x3c
 8001624:	481c      	ldr	r0, [pc, #112]	; (8001698 <main+0x104>)
 8001626:	f004 fd5b 	bl	80060e0 <HAL_TIM_Encoder_Start>
	HAL_GPIO_WritePin(STBY, GPIO_PIN_SET);
 800162a:	2201      	movs	r2, #1
 800162c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001630:	481a      	ldr	r0, [pc, #104]	; (800169c <main+0x108>)
 8001632:	f003 fed8 	bl	80053e6 <HAL_GPIO_WritePin>
	TIM2->CCR3 = 15000;
 8001636:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800163a:	f643 2298 	movw	r2, #15000	; 0x3a98
 800163e:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM2->CCR4 = 15000;
 8001640:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001644:	f643 2298 	movw	r2, #15000	; 0x3a98
 8001648:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_buf, ADC_BUF_LEN);
 800164a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800164e:	4914      	ldr	r1, [pc, #80]	; (80016a0 <main+0x10c>)
 8001650:	4814      	ldr	r0, [pc, #80]	; (80016a4 <main+0x110>)
 8001652:	f002 fd3d 	bl	80040d0 <HAL_ADC_Start_DMA>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8001656:	2200      	movs	r2, #0
 8001658:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800165c:	4812      	ldr	r0, [pc, #72]	; (80016a8 <main+0x114>)
 800165e:	f003 fec2 	bl	80053e6 <HAL_GPIO_WritePin>
	TIM3->CNT = 0;
 8001662:	4b12      	ldr	r3, [pc, #72]	; (80016ac <main+0x118>)
 8001664:	2200      	movs	r2, #0
 8001666:	625a      	str	r2, [r3, #36]	; 0x24
	TIM4->CNT = 0;
 8001668:	4b11      	ldr	r3, [pc, #68]	; (80016b0 <main+0x11c>)
 800166a:	2200      	movs	r2, #0
 800166c:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		mainMachine();
 800166e:	f000 f8ed 	bl	800184c <mainMachine>
		//intUartSend((int) calcularDistancia(TIM3->CNT) >> 1);
		/*runMotor(ADELANTE, MOTOR_A);
		 runMotor(ADELANTE, MOTOR_B);
		 intUartSend(TIM4->CNT);*/
		btnMachine(0);
 8001672:	2000      	movs	r0, #0
 8001674:	f001 fea2 	bl	80033bc <btnMachine>
		btnMachine(1);
 8001678:	2001      	movs	r0, #1
 800167a:	f001 fe9f 	bl	80033bc <btnMachine>
		btnMachine(2);
 800167e:	2002      	movs	r0, #2
 8001680:	f001 fe9c 	bl	80033bc <btnMachine>
		mainMachine();
 8001684:	e7f3      	b.n	800166e <main+0xda>
 8001686:	bf00      	nop
 8001688:	2000126c 	.word	0x2000126c
 800168c:	40010c00 	.word	0x40010c00
 8001690:	20002bcc 	.word	0x20002bcc
 8001694:	20002c5c 	.word	0x20002c5c
 8001698:	20002c14 	.word	0x20002c14
 800169c:	40010800 	.word	0x40010800
 80016a0:	20000150 	.word	0x20000150
 80016a4:	200000dc 	.word	0x200000dc
 80016a8:	40011000 	.word	0x40011000
 80016ac:	40000400 	.word	0x40000400
 80016b0:	40000800 	.word	0x40000800

080016b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b094      	sub	sp, #80	; 0x50
 80016b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016be:	2228      	movs	r2, #40	; 0x28
 80016c0:	2100      	movs	r1, #0
 80016c2:	4618      	mov	r0, r3
 80016c4:	f006 f988 	bl	80079d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016c8:	f107 0314 	add.w	r3, r7, #20
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	605a      	str	r2, [r3, #4]
 80016d2:	609a      	str	r2, [r3, #8]
 80016d4:	60da      	str	r2, [r3, #12]
 80016d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016d8:	1d3b      	adds	r3, r7, #4
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]
 80016de:	605a      	str	r2, [r3, #4]
 80016e0:	609a      	str	r2, [r3, #8]
 80016e2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016e4:	2301      	movs	r3, #1
 80016e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80016ee:	2300      	movs	r3, #0
 80016f0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016f2:	2301      	movs	r3, #1
 80016f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016f6:	2302      	movs	r3, #2
 80016f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001700:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001704:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001706:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800170a:	4618      	mov	r0, r3
 800170c:	f003 fe84 	bl	8005418 <HAL_RCC_OscConfig>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001716:	f001 fefd 	bl	8003514 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800171a:	230f      	movs	r3, #15
 800171c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800171e:	2302      	movs	r3, #2
 8001720:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001722:	2300      	movs	r3, #0
 8001724:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001726:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800172a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800172c:	2300      	movs	r3, #0
 800172e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001730:	f107 0314 	add.w	r3, r7, #20
 8001734:	2102      	movs	r1, #2
 8001736:	4618      	mov	r0, r3
 8001738:	f004 f8f0 	bl	800591c <HAL_RCC_ClockConfig>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001742:	f001 fee7 	bl	8003514 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001746:	2302      	movs	r3, #2
 8001748:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800174a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800174e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001750:	1d3b      	adds	r3, r7, #4
 8001752:	4618      	mov	r0, r3
 8001754:	f004 fa7a 	bl	8005c4c <HAL_RCCEx_PeriphCLKConfig>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800175e:	f001 fed9 	bl	8003514 <Error_Handler>
  }
}
 8001762:	bf00      	nop
 8001764:	3750      	adds	r7, #80	; 0x50
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
	...

0800176c <intUartSend>:

/* USER CODE BEGIN 4 */
void intUartSend(int entero) {
 800176c:	b580      	push	{r7, lr}
 800176e:	b086      	sub	sp, #24
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
	int m;
	int c;
	int d;
	int u;

	m = entero / 1000;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	4a30      	ldr	r2, [pc, #192]	; (8001838 <intUartSend+0xcc>)
 8001778:	fb82 1203 	smull	r1, r2, r2, r3
 800177c:	1192      	asrs	r2, r2, #6
 800177e:	17db      	asrs	r3, r3, #31
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	617b      	str	r3, [r7, #20]
	c = entero / 100 - m * 10;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	4a2d      	ldr	r2, [pc, #180]	; (800183c <intUartSend+0xd0>)
 8001788:	fb82 1203 	smull	r1, r2, r2, r3
 800178c:	1152      	asrs	r2, r2, #5
 800178e:	17db      	asrs	r3, r3, #31
 8001790:	1ad2      	subs	r2, r2, r3
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	f06f 0109 	mvn.w	r1, #9
 8001798:	fb01 f303 	mul.w	r3, r1, r3
 800179c:	4413      	add	r3, r2
 800179e:	613b      	str	r3, [r7, #16]
	d = entero / 10 - (m * 100 + c * 10);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	4a27      	ldr	r2, [pc, #156]	; (8001840 <intUartSend+0xd4>)
 80017a4:	fb82 1203 	smull	r1, r2, r2, r3
 80017a8:	1092      	asrs	r2, r2, #2
 80017aa:	17db      	asrs	r3, r3, #31
 80017ac:	1ad1      	subs	r1, r2, r3
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	2264      	movs	r2, #100	; 0x64
 80017b2:	fb02 f003 	mul.w	r0, r2, r3
 80017b6:	693a      	ldr	r2, [r7, #16]
 80017b8:	4613      	mov	r3, r2
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	4413      	add	r3, r2
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	4403      	add	r3, r0
 80017c2:	1acb      	subs	r3, r1, r3
 80017c4:	60fb      	str	r3, [r7, #12]
	u = entero - (m * 1000 + c * 100 + d * 10);
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80017cc:	fb03 f202 	mul.w	r2, r3, r2
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	2164      	movs	r1, #100	; 0x64
 80017d4:	fb01 f303 	mul.w	r3, r1, r3
 80017d8:	18d1      	adds	r1, r2, r3
 80017da:	68fa      	ldr	r2, [r7, #12]
 80017dc:	4613      	mov	r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4413      	add	r3, r2
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	440b      	add	r3, r1
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	60bb      	str	r3, [r7, #8]

	TX_BUFFER[0] = m + '0';
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	3330      	adds	r3, #48	; 0x30
 80017f2:	b2da      	uxtb	r2, r3
 80017f4:	4b13      	ldr	r3, [pc, #76]	; (8001844 <intUartSend+0xd8>)
 80017f6:	701a      	strb	r2, [r3, #0]
	TX_BUFFER[1] = c + '0';
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	3330      	adds	r3, #48	; 0x30
 80017fe:	b2da      	uxtb	r2, r3
 8001800:	4b10      	ldr	r3, [pc, #64]	; (8001844 <intUartSend+0xd8>)
 8001802:	705a      	strb	r2, [r3, #1]
	TX_BUFFER[2] = d + '0';
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	b2db      	uxtb	r3, r3
 8001808:	3330      	adds	r3, #48	; 0x30
 800180a:	b2da      	uxtb	r2, r3
 800180c:	4b0d      	ldr	r3, [pc, #52]	; (8001844 <intUartSend+0xd8>)
 800180e:	709a      	strb	r2, [r3, #2]
	TX_BUFFER[3] = u + '0';
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	b2db      	uxtb	r3, r3
 8001814:	3330      	adds	r3, #48	; 0x30
 8001816:	b2da      	uxtb	r2, r3
 8001818:	4b0a      	ldr	r3, [pc, #40]	; (8001844 <intUartSend+0xd8>)
 800181a:	70da      	strb	r2, [r3, #3]
	TX_BUFFER[4] = '\n';
 800181c:	4b09      	ldr	r3, [pc, #36]	; (8001844 <intUartSend+0xd8>)
 800181e:	220a      	movs	r2, #10
 8001820:	711a      	strb	r2, [r3, #4]
	HAL_UART_Transmit(&huart1, TX_BUFFER, 5, 100);
 8001822:	2364      	movs	r3, #100	; 0x64
 8001824:	2205      	movs	r2, #5
 8001826:	4907      	ldr	r1, [pc, #28]	; (8001844 <intUartSend+0xd8>)
 8001828:	4807      	ldr	r0, [pc, #28]	; (8001848 <intUartSend+0xdc>)
 800182a:	f005 f85e 	bl	80068ea <HAL_UART_Transmit>
}
 800182e:	bf00      	nop
 8001830:	3718      	adds	r7, #24
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	10624dd3 	.word	0x10624dd3
 800183c:	51eb851f 	.word	0x51eb851f
 8001840:	66666667 	.word	0x66666667
 8001844:	20001230 	.word	0x20001230
 8001848:	20002ca4 	.word	0x20002ca4

0800184c <mainMachine>:

void mainMachine() {
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
	switch (mainState) {
 8001850:	4b89      	ldr	r3, [pc, #548]	; (8001a78 <mainMachine+0x22c>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2b04      	cmp	r3, #4
 8001856:	f200 8185 	bhi.w	8001b64 <mainMachine+0x318>
 800185a:	a201      	add	r2, pc, #4	; (adr r2, 8001860 <mainMachine+0x14>)
 800185c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001860:	08001875 	.word	0x08001875
 8001864:	08001a0f 	.word	0x08001a0f
 8001868:	08001acd 	.word	0x08001acd
 800186c:	08001b5b 	.word	0x08001b5b
 8001870:	08001a09 	.word	0x08001a09
	case SETUP:
		actual.x = ALTO;
 8001874:	4b81      	ldr	r3, [pc, #516]	; (8001a7c <mainMachine+0x230>)
 8001876:	2208      	movs	r2, #8
 8001878:	601a      	str	r2, [r3, #0]
		actual.y = ANCHO;
 800187a:	4b80      	ldr	r3, [pc, #512]	; (8001a7c <mainMachine+0x230>)
 800187c:	2208      	movs	r2, #8
 800187e:	605a      	str	r2, [r3, #4]
		/*visual.x = 0;
		 visual.y = 0;*/
		resetAxis();
 8001880:	f001 fad0 	bl	8002e24 <resetAxis>
		movimientoFlag = 0;
 8001884:	4b7e      	ldr	r3, [pc, #504]	; (8001a80 <mainMachine+0x234>)
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]
		finishFlag = 0;
 800188a:	4b7e      	ldr	r3, [pc, #504]	; (8001a84 <mainMachine+0x238>)
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
		if (abs(Sensors[1] - Sensors[3]) < 0.5) {
 8001890:	4b7d      	ldr	r3, [pc, #500]	; (8001a88 <mainMachine+0x23c>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	4a7c      	ldr	r2, [pc, #496]	; (8001a88 <mainMachine+0x23c>)
 8001896:	68d2      	ldr	r2, [r2, #12]
 8001898:	4611      	mov	r1, r2
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff f920 	bl	8000ae0 <__aeabi_fsub>
 80018a0:	4603      	mov	r3, r0
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff fbec 	bl	8001080 <__aeabi_f2iz>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	db15      	blt.n	80018da <mainMachine+0x8e>
 80018ae:	4b76      	ldr	r3, [pc, #472]	; (8001a88 <mainMachine+0x23c>)
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	4a75      	ldr	r2, [pc, #468]	; (8001a88 <mainMachine+0x23c>)
 80018b4:	68d2      	ldr	r2, [r2, #12]
 80018b6:	4611      	mov	r1, r2
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff f911 	bl	8000ae0 <__aeabi_fsub>
 80018be:	4603      	mov	r3, r0
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff fbdd 	bl	8001080 <__aeabi_f2iz>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	dc06      	bgt.n	80018da <mainMachine+0x8e>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80018cc:	2200      	movs	r2, #0
 80018ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018d2:	486e      	ldr	r0, [pc, #440]	; (8001a8c <mainMachine+0x240>)
 80018d4:	f003 fd87 	bl	80053e6 <HAL_GPIO_WritePin>
 80018d8:	e005      	b.n	80018e6 <mainMachine+0x9a>
		} else {
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80018da:	2201      	movs	r2, #1
 80018dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018e0:	486a      	ldr	r0, [pc, #424]	; (8001a8c <mainMachine+0x240>)
 80018e2:	f003 fd80 	bl	80053e6 <HAL_GPIO_WritePin>
		}
		if (btns[0].flag == 1) {
 80018e6:	4b6a      	ldr	r3, [pc, #424]	; (8001a90 <mainMachine+0x244>)
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d12e      	bne.n	800194c <mainMachine+0x100>
			// Set The LED ON!
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80018ee:	2200      	movs	r2, #0
 80018f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018f4:	4865      	ldr	r0, [pc, #404]	; (8001a8c <mainMachine+0x240>)
 80018f6:	f003 fd76 	bl	80053e6 <HAL_GPIO_WritePin>
			choice = SLOW;
 80018fa:	4b66      	ldr	r3, [pc, #408]	; (8001a94 <mainMachine+0x248>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
			velocity = velocityChoice[SLOW];
 8001900:	4b65      	ldr	r3, [pc, #404]	; (8001a98 <mainMachine+0x24c>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a65      	ldr	r2, [pc, #404]	; (8001a9c <mainMachine+0x250>)
 8001906:	6013      	str	r3, [r2, #0]
			TIM2->CCR3 = baseChoice[SLOW];
 8001908:	4b65      	ldr	r3, [pc, #404]	; (8001aa0 <mainMachine+0x254>)
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001910:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM2->CCR4 = baseChoice[SLOW];
 8001912:	4b63      	ldr	r3, [pc, #396]	; (8001aa0 <mainMachine+0x254>)
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800191a:	641a      	str	r2, [r3, #64]	; 0x40
			KP = KPchoice[SLOW];
 800191c:	4b61      	ldr	r3, [pc, #388]	; (8001aa4 <mainMachine+0x258>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a61      	ldr	r2, [pc, #388]	; (8001aa8 <mainMachine+0x25c>)
 8001922:	6013      	str	r3, [r2, #0]
			KD = KDchoice[SLOW];
 8001924:	4b61      	ldr	r3, [pc, #388]	; (8001aac <mainMachine+0x260>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a61      	ldr	r2, [pc, #388]	; (8001ab0 <mainMachine+0x264>)
 800192a:	6013      	str	r3, [r2, #0]
			if (q == 0) {
 800192c:	4b61      	ldr	r3, [pc, #388]	; (8001ab4 <mainMachine+0x268>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d108      	bne.n	8001946 <mainMachine+0xfa>
				mainState = CALIBRATE;
 8001934:	4b50      	ldr	r3, [pc, #320]	; (8001a78 <mainMachine+0x22c>)
 8001936:	2204      	movs	r2, #4
 8001938:	601a      	str	r2, [r3, #0]
				q++;
 800193a:	4b5e      	ldr	r3, [pc, #376]	; (8001ab4 <mainMachine+0x268>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	3301      	adds	r3, #1
 8001940:	4a5c      	ldr	r2, [pc, #368]	; (8001ab4 <mainMachine+0x268>)
 8001942:	6013      	str	r3, [r2, #0]
 8001944:	e002      	b.n	800194c <mainMachine+0x100>
			} else {
				mainState = MAPPING;
 8001946:	4b4c      	ldr	r3, [pc, #304]	; (8001a78 <mainMachine+0x22c>)
 8001948:	2201      	movs	r2, #1
 800194a:	601a      	str	r2, [r3, #0]
			}

		}
		if (btns[1].flag == 1) {
 800194c:	4b50      	ldr	r3, [pc, #320]	; (8001a90 <mainMachine+0x244>)
 800194e:	69db      	ldr	r3, [r3, #28]
 8001950:	2b01      	cmp	r3, #1
 8001952:	d124      	bne.n	800199e <mainMachine+0x152>
			// Set The LED ON!
			choice = FAST;
 8001954:	4b4f      	ldr	r3, [pc, #316]	; (8001a94 <mainMachine+0x248>)
 8001956:	2201      	movs	r2, #1
 8001958:	601a      	str	r2, [r3, #0]
			velocity = velocityChoice[FAST];
 800195a:	4b4f      	ldr	r3, [pc, #316]	; (8001a98 <mainMachine+0x24c>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	4a4f      	ldr	r2, [pc, #316]	; (8001a9c <mainMachine+0x250>)
 8001960:	6013      	str	r3, [r2, #0]
			TIM2->CCR3 = baseChoice[FAST];
 8001962:	4b4f      	ldr	r3, [pc, #316]	; (8001aa0 <mainMachine+0x254>)
 8001964:	685a      	ldr	r2, [r3, #4]
 8001966:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800196a:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM2->CCR4 = baseChoice[FAST];
 800196c:	4b4c      	ldr	r3, [pc, #304]	; (8001aa0 <mainMachine+0x254>)
 800196e:	685a      	ldr	r2, [r3, #4]
 8001970:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001974:	641a      	str	r2, [r3, #64]	; 0x40
			KP = KPchoice[FAST];
 8001976:	4b4b      	ldr	r3, [pc, #300]	; (8001aa4 <mainMachine+0x258>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	4a4b      	ldr	r2, [pc, #300]	; (8001aa8 <mainMachine+0x25c>)
 800197c:	6013      	str	r3, [r2, #0]
			KD = KDchoice[FAST];
 800197e:	4b4b      	ldr	r3, [pc, #300]	; (8001aac <mainMachine+0x260>)
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	4a4b      	ldr	r2, [pc, #300]	; (8001ab0 <mainMachine+0x264>)
 8001984:	6013      	str	r3, [r2, #0]
			mainState = RACING;
 8001986:	4b3c      	ldr	r3, [pc, #240]	; (8001a78 <mainMachine+0x22c>)
 8001988:	2203      	movs	r2, #3
 800198a:	601a      	str	r2, [r3, #0]
			Flash_Read_Data(0x0801FC00, Rx_Data, 2);
 800198c:	2202      	movs	r2, #2
 800198e:	494a      	ldr	r1, [pc, #296]	; (8001ab8 <mainMachine+0x26c>)
 8001990:	484a      	ldr	r0, [pc, #296]	; (8001abc <mainMachine+0x270>)
 8001992:	f7ff fc1f 	bl	80011d4 <Flash_Read_Data>
			Convert_To_Str(Rx_Data, string);
 8001996:	494a      	ldr	r1, [pc, #296]	; (8001ac0 <mainMachine+0x274>)
 8001998:	4847      	ldr	r0, [pc, #284]	; (8001ab8 <mainMachine+0x26c>)
 800199a:	f7ff fc38 	bl	800120e <Convert_To_Str>
			//directions = ReadRun();
			//ShowRun();
		}
		if (btns[2].flag == 1) {
 800199e:	4b3c      	ldr	r3, [pc, #240]	; (8001a90 <mainMachine+0x244>)
 80019a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	f040 80dd 	bne.w	8001b62 <mainMachine+0x316>
			// Set The LED ON!
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80019a8:	2200      	movs	r2, #0
 80019aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019ae:	4837      	ldr	r0, [pc, #220]	; (8001a8c <mainMachine+0x240>)
 80019b0:	f003 fd19 	bl	80053e6 <HAL_GPIO_WritePin>
			choice = FAST;
 80019b4:	4b37      	ldr	r3, [pc, #220]	; (8001a94 <mainMachine+0x248>)
 80019b6:	2201      	movs	r2, #1
 80019b8:	601a      	str	r2, [r3, #0]
			velocity = velocityChoice[FAST];
 80019ba:	4b37      	ldr	r3, [pc, #220]	; (8001a98 <mainMachine+0x24c>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	4a37      	ldr	r2, [pc, #220]	; (8001a9c <mainMachine+0x250>)
 80019c0:	6013      	str	r3, [r2, #0]
			TIM2->CCR3 = baseChoice[FAST];
 80019c2:	4b37      	ldr	r3, [pc, #220]	; (8001aa0 <mainMachine+0x254>)
 80019c4:	685a      	ldr	r2, [r3, #4]
 80019c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019ca:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM2->CCR4 = baseChoice[FAST];
 80019cc:	4b34      	ldr	r3, [pc, #208]	; (8001aa0 <mainMachine+0x254>)
 80019ce:	685a      	ldr	r2, [r3, #4]
 80019d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019d4:	641a      	str	r2, [r3, #64]	; 0x40
			KP = KPchoice[FAST];
 80019d6:	4b33      	ldr	r3, [pc, #204]	; (8001aa4 <mainMachine+0x258>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	4a33      	ldr	r2, [pc, #204]	; (8001aa8 <mainMachine+0x25c>)
 80019dc:	6013      	str	r3, [r2, #0]
			KD = KDchoice[FAST];
 80019de:	4b33      	ldr	r3, [pc, #204]	; (8001aac <mainMachine+0x260>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	4a33      	ldr	r2, [pc, #204]	; (8001ab0 <mainMachine+0x264>)
 80019e4:	6013      	str	r3, [r2, #0]
			if (q == 0) {
 80019e6:	4b33      	ldr	r3, [pc, #204]	; (8001ab4 <mainMachine+0x268>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d108      	bne.n	8001a00 <mainMachine+0x1b4>
				mainState = CALIBRATE;
 80019ee:	4b22      	ldr	r3, [pc, #136]	; (8001a78 <mainMachine+0x22c>)
 80019f0:	2204      	movs	r2, #4
 80019f2:	601a      	str	r2, [r3, #0]
				q++;
 80019f4:	4b2f      	ldr	r3, [pc, #188]	; (8001ab4 <mainMachine+0x268>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	3301      	adds	r3, #1
 80019fa:	4a2e      	ldr	r2, [pc, #184]	; (8001ab4 <mainMachine+0x268>)
 80019fc:	6013      	str	r3, [r2, #0]
			} else {
				mainState = MAPPING;
			}
		}
		//confirmacionCentrado();
		break;
 80019fe:	e0b0      	b.n	8001b62 <mainMachine+0x316>
				mainState = MAPPING;
 8001a00:	4b1d      	ldr	r3, [pc, #116]	; (8001a78 <mainMachine+0x22c>)
 8001a02:	2201      	movs	r2, #1
 8001a04:	601a      	str	r2, [r3, #0]
		break;
 8001a06:	e0ac      	b.n	8001b62 <mainMachine+0x316>
	case CALIBRATE:
		calibrateMachine();
 8001a08:	f000 f8c0 	bl	8001b8c <calibrateMachine>
		//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
		break;
 8001a0c:	e0aa      	b.n	8001b64 <mainMachine+0x318>
	case MAPPING:
		if (finishFlag == 0) {
 8001a0e:	4b1d      	ldr	r3, [pc, #116]	; (8001a84 <mainMachine+0x238>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d102      	bne.n	8001a1c <mainMachine+0x1d0>
			robotMachine();
 8001a16:	f000 f9cd 	bl	8001db4 <robotMachine>
			finishFlag = 0;
			resetAxis();
			PrintMap();
			mainState = RESOLUTION;
		}
		break;
 8001a1a:	e0a3      	b.n	8001b64 <mainMachine+0x318>
			TX_BUFFER[0] = 'X';
 8001a1c:	4b29      	ldr	r3, [pc, #164]	; (8001ac4 <mainMachine+0x278>)
 8001a1e:	2258      	movs	r2, #88	; 0x58
 8001a20:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, TX_BUFFER, 1, 100);
 8001a22:	2364      	movs	r3, #100	; 0x64
 8001a24:	2201      	movs	r2, #1
 8001a26:	4927      	ldr	r1, [pc, #156]	; (8001ac4 <mainMachine+0x278>)
 8001a28:	4827      	ldr	r0, [pc, #156]	; (8001ac8 <mainMachine+0x27c>)
 8001a2a:	f004 ff5e 	bl	80068ea <HAL_UART_Transmit>
			intUartSend(actual.x);
 8001a2e:	4b13      	ldr	r3, [pc, #76]	; (8001a7c <mainMachine+0x230>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff fe9a 	bl	800176c <intUartSend>
			TX_BUFFER[0] = 'Y';
 8001a38:	4b22      	ldr	r3, [pc, #136]	; (8001ac4 <mainMachine+0x278>)
 8001a3a:	2259      	movs	r2, #89	; 0x59
 8001a3c:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, TX_BUFFER, 1, 100);
 8001a3e:	2364      	movs	r3, #100	; 0x64
 8001a40:	2201      	movs	r2, #1
 8001a42:	4920      	ldr	r1, [pc, #128]	; (8001ac4 <mainMachine+0x278>)
 8001a44:	4820      	ldr	r0, [pc, #128]	; (8001ac8 <mainMachine+0x27c>)
 8001a46:	f004 ff50 	bl	80068ea <HAL_UART_Transmit>
			intUartSend(actual.y);
 8001a4a:	4b0c      	ldr	r3, [pc, #48]	; (8001a7c <mainMachine+0x230>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7ff fe8c 	bl	800176c <intUartSend>
			actual.x = ALTO;
 8001a54:	4b09      	ldr	r3, [pc, #36]	; (8001a7c <mainMachine+0x230>)
 8001a56:	2208      	movs	r2, #8
 8001a58:	601a      	str	r2, [r3, #0]
			actual.y = ANCHO;
 8001a5a:	4b08      	ldr	r3, [pc, #32]	; (8001a7c <mainMachine+0x230>)
 8001a5c:	2208      	movs	r2, #8
 8001a5e:	605a      	str	r2, [r3, #4]
			finishFlag = 0;
 8001a60:	4b08      	ldr	r3, [pc, #32]	; (8001a84 <mainMachine+0x238>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]
			resetAxis();
 8001a66:	f001 f9dd 	bl	8002e24 <resetAxis>
			PrintMap();
 8001a6a:	f001 f9f5 	bl	8002e58 <PrintMap>
			mainState = RESOLUTION;
 8001a6e:	4b02      	ldr	r3, [pc, #8]	; (8001a78 <mainMachine+0x22c>)
 8001a70:	2202      	movs	r2, #2
 8001a72:	601a      	str	r2, [r3, #0]
		break;
 8001a74:	e076      	b.n	8001b64 <mainMachine+0x318>
 8001a76:	bf00      	nop
 8001a78:	2000129c 	.word	0x2000129c
 8001a7c:	2000138c 	.word	0x2000138c
 8001a80:	20001260 	.word	0x20001260
 8001a84:	2000125c 	.word	0x2000125c
 8001a88:	200011f0 	.word	0x200011f0
 8001a8c:	40011000 	.word	0x40011000
 8001a90:	2000126c 	.word	0x2000126c
 8001a94:	2000124c 	.word	0x2000124c
 8001a98:	20000010 	.word	0x20000010
 8001a9c:	20001244 	.word	0x20001244
 8001aa0:	20000018 	.word	0x20000018
 8001aa4:	20000000 	.word	0x20000000
 8001aa8:	2000123c 	.word	0x2000123c
 8001aac:	20000008 	.word	0x20000008
 8001ab0:	20001240 	.word	0x20001240
 8001ab4:	20002bc4 	.word	0x20002bc4
 8001ab8:	200012c0 	.word	0x200012c0
 8001abc:	0801fc00 	.word	0x0801fc00
 8001ac0:	20001328 	.word	0x20001328
 8001ac4:	20001230 	.word	0x20001230
 8001ac8:	20002ca4 	.word	0x20002ca4
	case RESOLUTION:
		if (Map[actual.x][actual.y].final == 0) {
 8001acc:	4b26      	ldr	r3, [pc, #152]	; (8001b68 <mainMachine+0x31c>)
 8001ace:	6819      	ldr	r1, [r3, #0]
 8001ad0:	4b25      	ldr	r3, [pc, #148]	; (8001b68 <mainMachine+0x31c>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	4825      	ldr	r0, [pc, #148]	; (8001b6c <mainMachine+0x320>)
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	0052      	lsls	r2, r2, #1
 8001ada:	441a      	add	r2, r3
 8001adc:	00d3      	lsls	r3, r2, #3
 8001ade:	461a      	mov	r2, r3
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	440b      	add	r3, r1
 8001ae6:	01db      	lsls	r3, r3, #7
 8001ae8:	4413      	add	r3, r2
 8001aea:	4403      	add	r3, r0
 8001aec:	3314      	adds	r3, #20
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d124      	bne.n	8001b3e <mainMachine+0x2f2>
			addDirection(actual.x, actual.y);
 8001af4:	4b1c      	ldr	r3, [pc, #112]	; (8001b68 <mainMachine+0x31c>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a1b      	ldr	r2, [pc, #108]	; (8001b68 <mainMachine+0x31c>)
 8001afa:	6852      	ldr	r2, [r2, #4]
 8001afc:	4611      	mov	r1, r2
 8001afe:	4618      	mov	r0, r3
 8001b00:	f000 fb44 	bl	800218c <addDirection>
			TX_BUFFER[0] = 'X';
 8001b04:	4b1a      	ldr	r3, [pc, #104]	; (8001b70 <mainMachine+0x324>)
 8001b06:	2258      	movs	r2, #88	; 0x58
 8001b08:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, TX_BUFFER, 1, 100);
 8001b0a:	2364      	movs	r3, #100	; 0x64
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	4918      	ldr	r1, [pc, #96]	; (8001b70 <mainMachine+0x324>)
 8001b10:	4818      	ldr	r0, [pc, #96]	; (8001b74 <mainMachine+0x328>)
 8001b12:	f004 feea 	bl	80068ea <HAL_UART_Transmit>
			intUartSend(actual.x);
 8001b16:	4b14      	ldr	r3, [pc, #80]	; (8001b68 <mainMachine+0x31c>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7ff fe26 	bl	800176c <intUartSend>
			TX_BUFFER[0] = 'Y';
 8001b20:	4b13      	ldr	r3, [pc, #76]	; (8001b70 <mainMachine+0x324>)
 8001b22:	2259      	movs	r2, #89	; 0x59
 8001b24:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, TX_BUFFER, 1, 100);
 8001b26:	2364      	movs	r3, #100	; 0x64
 8001b28:	2201      	movs	r2, #1
 8001b2a:	4911      	ldr	r1, [pc, #68]	; (8001b70 <mainMachine+0x324>)
 8001b2c:	4811      	ldr	r0, [pc, #68]	; (8001b74 <mainMachine+0x328>)
 8001b2e:	f004 fedc 	bl	80068ea <HAL_UART_Transmit>
			intUartSend(actual.y);
 8001b32:	4b0d      	ldr	r3, [pc, #52]	; (8001b68 <mainMachine+0x31c>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7ff fe18 	bl	800176c <intUartSend>
			directions[directionsSize] = 'o';
			Flash_Write_Data(0x0801FC00, (uint32_t*) directions, 25);
			mainState = SETUP;
		}

		break;
 8001b3c:	e012      	b.n	8001b64 <mainMachine+0x318>
			directions[directionsSize] = 'o';
 8001b3e:	4b0e      	ldr	r3, [pc, #56]	; (8001b78 <mainMachine+0x32c>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a0e      	ldr	r2, [pc, #56]	; (8001b7c <mainMachine+0x330>)
 8001b44:	216f      	movs	r1, #111	; 0x6f
 8001b46:	54d1      	strb	r1, [r2, r3]
			Flash_Write_Data(0x0801FC00, (uint32_t*) directions, 25);
 8001b48:	2219      	movs	r2, #25
 8001b4a:	490c      	ldr	r1, [pc, #48]	; (8001b7c <mainMachine+0x330>)
 8001b4c:	480c      	ldr	r0, [pc, #48]	; (8001b80 <mainMachine+0x334>)
 8001b4e:	f7ff fae5 	bl	800111c <Flash_Write_Data>
			mainState = SETUP;
 8001b52:	4b0c      	ldr	r3, [pc, #48]	; (8001b84 <mainMachine+0x338>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
		break;
 8001b58:	e004      	b.n	8001b64 <mainMachine+0x318>
	case RACING:
		runDirections(string);
 8001b5a:	480b      	ldr	r0, [pc, #44]	; (8001b88 <mainMachine+0x33c>)
 8001b5c:	f000 fab8 	bl	80020d0 <runDirections>
		break;
 8001b60:	e000      	b.n	8001b64 <mainMachine+0x318>
		break;
 8001b62:	bf00      	nop
	}

}
 8001b64:	bf00      	nop
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	2000138c 	.word	0x2000138c
 8001b6c:	2000139c 	.word	0x2000139c
 8001b70:	20001230 	.word	0x20001230
 8001b74:	20002ca4 	.word	0x20002ca4
 8001b78:	20001254 	.word	0x20001254
 8001b7c:	200012a4 	.word	0x200012a4
 8001b80:	0801fc00 	.word	0x0801fc00
 8001b84:	2000129c 	.word	0x2000129c
 8001b88:	20001328 	.word	0x20001328

08001b8c <calibrateMachine>:

void calibrateMachine() {
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
	switch (calState) {
 8001b90:	4b7e      	ldr	r3, [pc, #504]	; (8001d8c <calibrateMachine+0x200>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2b03      	cmp	r3, #3
 8001b96:	f200 80f6 	bhi.w	8001d86 <calibrateMachine+0x1fa>
 8001b9a:	a201      	add	r2, pc, #4	; (adr r2, 8001ba0 <calibrateMachine+0x14>)
 8001b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ba0:	08001bb1 	.word	0x08001bb1
 8001ba4:	08001c5f 	.word	0x08001c5f
 8001ba8:	08001cbb 	.word	0x08001cbb
 8001bac:	08001d17 	.word	0x08001d17
	case CENTER:
		intUartSend(abs(Sensors[1] - Sensors[3]));
 8001bb0:	4b77      	ldr	r3, [pc, #476]	; (8001d90 <calibrateMachine+0x204>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	4a76      	ldr	r2, [pc, #472]	; (8001d90 <calibrateMachine+0x204>)
 8001bb6:	68d2      	ldr	r2, [r2, #12]
 8001bb8:	4611      	mov	r1, r2
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7fe ff90 	bl	8000ae0 <__aeabi_fsub>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7ff fa5c 	bl	8001080 <__aeabi_f2iz>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	bfb8      	it	lt
 8001bce:	425b      	neglt	r3, r3
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff fdcb 	bl	800176c <intUartSend>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bdc:	486d      	ldr	r0, [pc, #436]	; (8001d94 <calibrateMachine+0x208>)
 8001bde:	f003 fc02 	bl	80053e6 <HAL_GPIO_WritePin>
		if (btns[0].flag == 1) {
 8001be2:	4b6d      	ldr	r3, [pc, #436]	; (8001d98 <calibrateMachine+0x20c>)
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d112      	bne.n	8001c10 <calibrateMachine+0x84>
			CenterDistanceRight = Sensors[3];
 8001bea:	4b69      	ldr	r3, [pc, #420]	; (8001d90 <calibrateMachine+0x204>)
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7ff fa46 	bl	8001080 <__aeabi_f2iz>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	4a69      	ldr	r2, [pc, #420]	; (8001d9c <calibrateMachine+0x210>)
 8001bf8:	6013      	str	r3, [r2, #0]
			CenterDistanceLeft = Sensors[1];
 8001bfa:	4b65      	ldr	r3, [pc, #404]	; (8001d90 <calibrateMachine+0x204>)
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff fa3e 	bl	8001080 <__aeabi_f2iz>
 8001c04:	4603      	mov	r3, r0
 8001c06:	4a66      	ldr	r2, [pc, #408]	; (8001da0 <calibrateMachine+0x214>)
 8001c08:	6013      	str	r3, [r2, #0]
			calState = LEFT;
 8001c0a:	4b60      	ldr	r3, [pc, #384]	; (8001d8c <calibrateMachine+0x200>)
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	601a      	str	r2, [r3, #0]
		}
		if (abs(Sensors[1] - Sensors[3]) < 0.5) {
 8001c10:	4b5f      	ldr	r3, [pc, #380]	; (8001d90 <calibrateMachine+0x204>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	4a5e      	ldr	r2, [pc, #376]	; (8001d90 <calibrateMachine+0x204>)
 8001c16:	68d2      	ldr	r2, [r2, #12]
 8001c18:	4611      	mov	r1, r2
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7fe ff60 	bl	8000ae0 <__aeabi_fsub>
 8001c20:	4603      	mov	r3, r0
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff fa2c 	bl	8001080 <__aeabi_f2iz>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	f2c0 80a4 	blt.w	8001d78 <calibrateMachine+0x1ec>
 8001c30:	4b57      	ldr	r3, [pc, #348]	; (8001d90 <calibrateMachine+0x204>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	4a56      	ldr	r2, [pc, #344]	; (8001d90 <calibrateMachine+0x204>)
 8001c36:	68d2      	ldr	r2, [r2, #12]
 8001c38:	4611      	mov	r1, r2
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7fe ff50 	bl	8000ae0 <__aeabi_fsub>
 8001c40:	4603      	mov	r3, r0
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff fa1c 	bl	8001080 <__aeabi_f2iz>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	f300 8094 	bgt.w	8001d78 <calibrateMachine+0x1ec>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001c50:	2200      	movs	r2, #0
 8001c52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c56:	484f      	ldr	r0, [pc, #316]	; (8001d94 <calibrateMachine+0x208>)
 8001c58:	f003 fbc5 	bl	80053e6 <HAL_GPIO_WritePin>

		}
		break;
 8001c5c:	e08c      	b.n	8001d78 <calibrateMachine+0x1ec>
	case LEFT:
		intUartSend(abs(Sensors[3]));
 8001c5e:	4b4c      	ldr	r3, [pc, #304]	; (8001d90 <calibrateMachine+0x204>)
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff fa0c 	bl	8001080 <__aeabi_f2iz>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	bfb8      	it	lt
 8001c6e:	425b      	neglt	r3, r3
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff fd7b 	bl	800176c <intUartSend>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001c76:	2201      	movs	r2, #1
 8001c78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c7c:	4845      	ldr	r0, [pc, #276]	; (8001d94 <calibrateMachine+0x208>)
 8001c7e:	f003 fbb2 	bl	80053e6 <HAL_GPIO_WritePin>
		if (btns[0].flag == 1) {
 8001c82:	4b45      	ldr	r3, [pc, #276]	; (8001d98 <calibrateMachine+0x20c>)
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d178      	bne.n	8001d7c <calibrateMachine+0x1f0>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c90:	4840      	ldr	r0, [pc, #256]	; (8001d94 <calibrateMachine+0x208>)
 8001c92:	f003 fba8 	bl	80053e6 <HAL_GPIO_WritePin>
			MaxLeftDistance = Sensors[3] + 2;
 8001c96:	4b3e      	ldr	r3, [pc, #248]	; (8001d90 <calibrateMachine+0x204>)
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7fe ff20 	bl	8000ae4 <__addsf3>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7ff f9ea 	bl	8001080 <__aeabi_f2iz>
 8001cac:	4603      	mov	r3, r0
 8001cae:	4a3d      	ldr	r2, [pc, #244]	; (8001da4 <calibrateMachine+0x218>)
 8001cb0:	6013      	str	r3, [r2, #0]
			calState = RIGHT;
 8001cb2:	4b36      	ldr	r3, [pc, #216]	; (8001d8c <calibrateMachine+0x200>)
 8001cb4:	2202      	movs	r2, #2
 8001cb6:	601a      	str	r2, [r3, #0]
		}
		break;
 8001cb8:	e060      	b.n	8001d7c <calibrateMachine+0x1f0>
	case RIGHT:
		intUartSend(abs(Sensors[1]));
 8001cba:	4b35      	ldr	r3, [pc, #212]	; (8001d90 <calibrateMachine+0x204>)
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff f9de 	bl	8001080 <__aeabi_f2iz>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	bfb8      	it	lt
 8001cca:	425b      	neglt	r3, r3
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff fd4d 	bl	800176c <intUartSend>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cd8:	482e      	ldr	r0, [pc, #184]	; (8001d94 <calibrateMachine+0x208>)
 8001cda:	f003 fb84 	bl	80053e6 <HAL_GPIO_WritePin>
		if (btns[0].flag == 1) {
 8001cde:	4b2e      	ldr	r3, [pc, #184]	; (8001d98 <calibrateMachine+0x20c>)
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d14c      	bne.n	8001d80 <calibrateMachine+0x1f4>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cec:	4829      	ldr	r0, [pc, #164]	; (8001d94 <calibrateMachine+0x208>)
 8001cee:	f003 fb7a 	bl	80053e6 <HAL_GPIO_WritePin>
			MaxRightDistance = Sensors[1] + 2;
 8001cf2:	4b27      	ldr	r3, [pc, #156]	; (8001d90 <calibrateMachine+0x204>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7fe fef2 	bl	8000ae4 <__addsf3>
 8001d00:	4603      	mov	r3, r0
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff f9bc 	bl	8001080 <__aeabi_f2iz>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	4a27      	ldr	r2, [pc, #156]	; (8001da8 <calibrateMachine+0x21c>)
 8001d0c:	6013      	str	r3, [r2, #0]
			calState = FORWARD;
 8001d0e:	4b1f      	ldr	r3, [pc, #124]	; (8001d8c <calibrateMachine+0x200>)
 8001d10:	2203      	movs	r2, #3
 8001d12:	601a      	str	r2, [r3, #0]
		}
		break;
 8001d14:	e034      	b.n	8001d80 <calibrateMachine+0x1f4>
	case FORWARD:
		intUartSend(abs(Sensors[2]));
 8001d16:	4b1e      	ldr	r3, [pc, #120]	; (8001d90 <calibrateMachine+0x204>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7ff f9b0 	bl	8001080 <__aeabi_f2iz>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	bfb8      	it	lt
 8001d26:	425b      	neglt	r3, r3
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff fd1f 	bl	800176c <intUartSend>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d34:	4817      	ldr	r0, [pc, #92]	; (8001d94 <calibrateMachine+0x208>)
 8001d36:	f003 fb56 	bl	80053e6 <HAL_GPIO_WritePin>
		if (btns[0].flag == 1) {
 8001d3a:	4b17      	ldr	r3, [pc, #92]	; (8001d98 <calibrateMachine+0x20c>)
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d120      	bne.n	8001d84 <calibrateMachine+0x1f8>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001d42:	2200      	movs	r2, #0
 8001d44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d48:	4812      	ldr	r0, [pc, #72]	; (8001d94 <calibrateMachine+0x208>)
 8001d4a:	f003 fb4c 	bl	80053e6 <HAL_GPIO_WritePin>
			MaxCenterDistance = Sensors[2] + 2;
 8001d4e:	4b10      	ldr	r3, [pc, #64]	; (8001d90 <calibrateMachine+0x204>)
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7fe fec4 	bl	8000ae4 <__addsf3>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7ff f98e 	bl	8001080 <__aeabi_f2iz>
 8001d64:	4603      	mov	r3, r0
 8001d66:	4a11      	ldr	r2, [pc, #68]	; (8001dac <calibrateMachine+0x220>)
 8001d68:	6013      	str	r3, [r2, #0]
			mainState = SETUP;
 8001d6a:	4b11      	ldr	r3, [pc, #68]	; (8001db0 <calibrateMachine+0x224>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
			calState = CENTER;
 8001d70:	4b06      	ldr	r3, [pc, #24]	; (8001d8c <calibrateMachine+0x200>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]
		}
		break;
 8001d76:	e005      	b.n	8001d84 <calibrateMachine+0x1f8>
		break;
 8001d78:	bf00      	nop
 8001d7a:	e004      	b.n	8001d86 <calibrateMachine+0x1fa>
		break;
 8001d7c:	bf00      	nop
 8001d7e:	e002      	b.n	8001d86 <calibrateMachine+0x1fa>
		break;
 8001d80:	bf00      	nop
 8001d82:	e000      	b.n	8001d86 <calibrateMachine+0x1fa>
		break;
 8001d84:	bf00      	nop
	}
}
 8001d86:	bf00      	nop
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	20001210 	.word	0x20001210
 8001d90:	200011f0 	.word	0x200011f0
 8001d94:	40011000 	.word	0x40011000
 8001d98:	2000126c 	.word	0x2000126c
 8001d9c:	20001214 	.word	0x20001214
 8001da0:	20001218 	.word	0x20001218
 8001da4:	20001220 	.word	0x20001220
 8001da8:	2000121c 	.word	0x2000121c
 8001dac:	20001224 	.word	0x20001224
 8001db0:	2000129c 	.word	0x2000129c

08001db4 <robotMachine>:

void robotMachine() {
 8001db4:	b5b0      	push	{r4, r5, r7, lr}
 8001db6:	af00      	add	r7, sp, #0
	switch (robotState) {
 8001db8:	4bab      	ldr	r3, [pc, #684]	; (8002068 <robotMachine+0x2b4>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	f000 8169 	beq.w	8002094 <robotMachine+0x2e0>
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	f300 8179 	bgt.w	80020ba <robotMachine+0x306>
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d003      	beq.n	8001dd4 <robotMachine+0x20>
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	f000 8111 	beq.w	8001ff4 <robotMachine+0x240>
		if (movimientoFlag == 1) {
			robotState = READING;
		}
		break;
	}
}
 8001dd2:	e172      	b.n	80020ba <robotMachine+0x306>
		HAL_Delay(10);
 8001dd4:	200a      	movs	r0, #10
 8001dd6:	f002 f87f 	bl	8003ed8 <HAL_Delay>
		TX_BUFFER[0] = 'X';
 8001dda:	4ba4      	ldr	r3, [pc, #656]	; (800206c <robotMachine+0x2b8>)
 8001ddc:	2258      	movs	r2, #88	; 0x58
 8001dde:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = actual.x + '0';
 8001de0:	4ba3      	ldr	r3, [pc, #652]	; (8002070 <robotMachine+0x2bc>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	3330      	adds	r3, #48	; 0x30
 8001de8:	b2da      	uxtb	r2, r3
 8001dea:	4ba0      	ldr	r3, [pc, #640]	; (800206c <robotMachine+0x2b8>)
 8001dec:	705a      	strb	r2, [r3, #1]
		TX_BUFFER[2] = '\n';
 8001dee:	4b9f      	ldr	r3, [pc, #636]	; (800206c <robotMachine+0x2b8>)
 8001df0:	220a      	movs	r2, #10
 8001df2:	709a      	strb	r2, [r3, #2]
		TX_BUFFER[3] = 'Y';
 8001df4:	4b9d      	ldr	r3, [pc, #628]	; (800206c <robotMachine+0x2b8>)
 8001df6:	2259      	movs	r2, #89	; 0x59
 8001df8:	70da      	strb	r2, [r3, #3]
		TX_BUFFER[4] = actual.y + '0';
 8001dfa:	4b9d      	ldr	r3, [pc, #628]	; (8002070 <robotMachine+0x2bc>)
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	3330      	adds	r3, #48	; 0x30
 8001e02:	b2da      	uxtb	r2, r3
 8001e04:	4b99      	ldr	r3, [pc, #612]	; (800206c <robotMachine+0x2b8>)
 8001e06:	711a      	strb	r2, [r3, #4]
		TX_BUFFER[5] = '\n';
 8001e08:	4b98      	ldr	r3, [pc, #608]	; (800206c <robotMachine+0x2b8>)
 8001e0a:	220a      	movs	r2, #10
 8001e0c:	715a      	strb	r2, [r3, #5]
		HAL_UART_Transmit(&huart1, TX_BUFFER, 6, 100);
 8001e0e:	2364      	movs	r3, #100	; 0x64
 8001e10:	2206      	movs	r2, #6
 8001e12:	4996      	ldr	r1, [pc, #600]	; (800206c <robotMachine+0x2b8>)
 8001e14:	4897      	ldr	r0, [pc, #604]	; (8002074 <robotMachine+0x2c0>)
 8001e16:	f004 fd68 	bl	80068ea <HAL_UART_Transmit>
		Map[actual.x][actual.y].visitado++;
 8001e1a:	4b95      	ldr	r3, [pc, #596]	; (8002070 <robotMachine+0x2bc>)
 8001e1c:	6819      	ldr	r1, [r3, #0]
 8001e1e:	4b94      	ldr	r3, [pc, #592]	; (8002070 <robotMachine+0x2bc>)
 8001e20:	6858      	ldr	r0, [r3, #4]
 8001e22:	4c95      	ldr	r4, [pc, #596]	; (8002078 <robotMachine+0x2c4>)
 8001e24:	4602      	mov	r2, r0
 8001e26:	0052      	lsls	r2, r2, #1
 8001e28:	4402      	add	r2, r0
 8001e2a:	00d3      	lsls	r3, r2, #3
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	460b      	mov	r3, r1
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	440b      	add	r3, r1
 8001e34:	01db      	lsls	r3, r3, #7
 8001e36:	4413      	add	r3, r2
 8001e38:	4423      	add	r3, r4
 8001e3a:	3310      	adds	r3, #16
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	1c5c      	adds	r4, r3, #1
 8001e40:	4d8d      	ldr	r5, [pc, #564]	; (8002078 <robotMachine+0x2c4>)
 8001e42:	4602      	mov	r2, r0
 8001e44:	0052      	lsls	r2, r2, #1
 8001e46:	4402      	add	r2, r0
 8001e48:	00d3      	lsls	r3, r2, #3
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	440b      	add	r3, r1
 8001e52:	01db      	lsls	r3, r3, #7
 8001e54:	4413      	add	r3, r2
 8001e56:	442b      	add	r3, r5
 8001e58:	3310      	adds	r3, #16
 8001e5a:	601c      	str	r4, [r3, #0]
		if (Map[actual.x][actual.y].visitado == 1) {
 8001e5c:	4b84      	ldr	r3, [pc, #528]	; (8002070 <robotMachine+0x2bc>)
 8001e5e:	6819      	ldr	r1, [r3, #0]
 8001e60:	4b83      	ldr	r3, [pc, #524]	; (8002070 <robotMachine+0x2bc>)
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	4884      	ldr	r0, [pc, #528]	; (8002078 <robotMachine+0x2c4>)
 8001e66:	461a      	mov	r2, r3
 8001e68:	0052      	lsls	r2, r2, #1
 8001e6a:	441a      	add	r2, r3
 8001e6c:	00d3      	lsls	r3, r2, #3
 8001e6e:	461a      	mov	r2, r3
 8001e70:	460b      	mov	r3, r1
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	440b      	add	r3, r1
 8001e76:	01db      	lsls	r3, r3, #7
 8001e78:	4413      	add	r3, r2
 8001e7a:	4403      	add	r3, r0
 8001e7c:	3310      	adds	r3, #16
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d12a      	bne.n	8001eda <robotMachine+0x126>
			runMotor(OFF, MOTOR_A);
 8001e84:	2100      	movs	r1, #0
 8001e86:	2005      	movs	r0, #5
 8001e88:	f001 fb70 	bl	800356c <runMotor>
			runMotor(OFF, MOTOR_B);
 8001e8c:	2101      	movs	r1, #1
 8001e8e:	2005      	movs	r0, #5
 8001e90:	f001 fb6c 	bl	800356c <runMotor>
			CreateNode(actual.x, actual.y);
 8001e94:	4b76      	ldr	r3, [pc, #472]	; (8002070 <robotMachine+0x2bc>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a75      	ldr	r2, [pc, #468]	; (8002070 <robotMachine+0x2bc>)
 8001e9a:	6852      	ldr	r2, [r2, #4]
 8001e9c:	4611      	mov	r1, r2
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f000 fefa 	bl	8002c98 <CreateNode>
			if(actual.x == ALTO && actual.y == ANCHO){
 8001ea4:	4b72      	ldr	r3, [pc, #456]	; (8002070 <robotMachine+0x2bc>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2b08      	cmp	r3, #8
 8001eaa:	d116      	bne.n	8001eda <robotMachine+0x126>
 8001eac:	4b70      	ldr	r3, [pc, #448]	; (8002070 <robotMachine+0x2bc>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	2b08      	cmp	r3, #8
 8001eb2:	d112      	bne.n	8001eda <robotMachine+0x126>
				Map[actual.x][actual.y].Lados[ATRAS] = 1;
 8001eb4:	4b6e      	ldr	r3, [pc, #440]	; (8002070 <robotMachine+0x2bc>)
 8001eb6:	6819      	ldr	r1, [r3, #0]
 8001eb8:	4b6d      	ldr	r3, [pc, #436]	; (8002070 <robotMachine+0x2bc>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	486e      	ldr	r0, [pc, #440]	; (8002078 <robotMachine+0x2c4>)
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	0052      	lsls	r2, r2, #1
 8001ec2:	441a      	add	r2, r3
 8001ec4:	00d3      	lsls	r3, r2, #3
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	460b      	mov	r3, r1
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	440b      	add	r3, r1
 8001ece:	01db      	lsls	r3, r3, #7
 8001ed0:	4413      	add	r3, r2
 8001ed2:	4403      	add	r3, r0
 8001ed4:	3308      	adds	r3, #8
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	601a      	str	r2, [r3, #0]
		intUartSend(Map[actual.x][actual.y].Lados[DERECHA]);
 8001eda:	4b65      	ldr	r3, [pc, #404]	; (8002070 <robotMachine+0x2bc>)
 8001edc:	6819      	ldr	r1, [r3, #0]
 8001ede:	4b64      	ldr	r3, [pc, #400]	; (8002070 <robotMachine+0x2bc>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	4865      	ldr	r0, [pc, #404]	; (8002078 <robotMachine+0x2c4>)
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	0052      	lsls	r2, r2, #1
 8001ee8:	441a      	add	r2, r3
 8001eea:	00d3      	lsls	r3, r2, #3
 8001eec:	461a      	mov	r2, r3
 8001eee:	460b      	mov	r3, r1
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	440b      	add	r3, r1
 8001ef4:	01db      	lsls	r3, r3, #7
 8001ef6:	4413      	add	r3, r2
 8001ef8:	4403      	add	r3, r0
 8001efa:	330c      	adds	r3, #12
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7ff fc34 	bl	800176c <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[ADELANTE]);
 8001f04:	4b5a      	ldr	r3, [pc, #360]	; (8002070 <robotMachine+0x2bc>)
 8001f06:	6819      	ldr	r1, [r3, #0]
 8001f08:	4b59      	ldr	r3, [pc, #356]	; (8002070 <robotMachine+0x2bc>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	485a      	ldr	r0, [pc, #360]	; (8002078 <robotMachine+0x2c4>)
 8001f0e:	461a      	mov	r2, r3
 8001f10:	0052      	lsls	r2, r2, #1
 8001f12:	441a      	add	r2, r3
 8001f14:	00d3      	lsls	r3, r2, #3
 8001f16:	461a      	mov	r2, r3
 8001f18:	460b      	mov	r3, r1
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	440b      	add	r3, r1
 8001f1e:	01db      	lsls	r3, r3, #7
 8001f20:	4413      	add	r3, r2
 8001f22:	4403      	add	r3, r0
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7ff fc20 	bl	800176c <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[IZQUIERDA]);
 8001f2c:	4b50      	ldr	r3, [pc, #320]	; (8002070 <robotMachine+0x2bc>)
 8001f2e:	6819      	ldr	r1, [r3, #0]
 8001f30:	4b4f      	ldr	r3, [pc, #316]	; (8002070 <robotMachine+0x2bc>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	4850      	ldr	r0, [pc, #320]	; (8002078 <robotMachine+0x2c4>)
 8001f36:	461a      	mov	r2, r3
 8001f38:	0052      	lsls	r2, r2, #1
 8001f3a:	441a      	add	r2, r3
 8001f3c:	00d3      	lsls	r3, r2, #3
 8001f3e:	461a      	mov	r2, r3
 8001f40:	460b      	mov	r3, r1
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	440b      	add	r3, r1
 8001f46:	01db      	lsls	r3, r3, #7
 8001f48:	4413      	add	r3, r2
 8001f4a:	4403      	add	r3, r0
 8001f4c:	3304      	adds	r3, #4
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7ff fc0b 	bl	800176c <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[ATRAS]);
 8001f56:	4b46      	ldr	r3, [pc, #280]	; (8002070 <robotMachine+0x2bc>)
 8001f58:	6819      	ldr	r1, [r3, #0]
 8001f5a:	4b45      	ldr	r3, [pc, #276]	; (8002070 <robotMachine+0x2bc>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	4846      	ldr	r0, [pc, #280]	; (8002078 <robotMachine+0x2c4>)
 8001f60:	461a      	mov	r2, r3
 8001f62:	0052      	lsls	r2, r2, #1
 8001f64:	441a      	add	r2, r3
 8001f66:	00d3      	lsls	r3, r2, #3
 8001f68:	461a      	mov	r2, r3
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	440b      	add	r3, r1
 8001f70:	01db      	lsls	r3, r3, #7
 8001f72:	4413      	add	r3, r2
 8001f74:	4403      	add	r3, r0
 8001f76:	3308      	adds	r3, #8
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7ff fbf6 	bl	800176c <intUartSend>
		valueCNY = Sensors[0];
 8001f80:	4b3e      	ldr	r3, [pc, #248]	; (800207c <robotMachine+0x2c8>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7ff f87b 	bl	8001080 <__aeabi_f2iz>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	4a3c      	ldr	r2, [pc, #240]	; (8002080 <robotMachine+0x2cc>)
 8001f8e:	6013      	str	r3, [r2, #0]
		if (valueCNY == BLANCO) {
 8001f90:	4b3b      	ldr	r3, [pc, #236]	; (8002080 <robotMachine+0x2cc>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d116      	bne.n	8001fc6 <robotMachine+0x212>
			Map[actual.x][actual.y].final = 1;
 8001f98:	4b35      	ldr	r3, [pc, #212]	; (8002070 <robotMachine+0x2bc>)
 8001f9a:	6819      	ldr	r1, [r3, #0]
 8001f9c:	4b34      	ldr	r3, [pc, #208]	; (8002070 <robotMachine+0x2bc>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	4835      	ldr	r0, [pc, #212]	; (8002078 <robotMachine+0x2c4>)
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	0052      	lsls	r2, r2, #1
 8001fa6:	441a      	add	r2, r3
 8001fa8:	00d3      	lsls	r3, r2, #3
 8001faa:	461a      	mov	r2, r3
 8001fac:	460b      	mov	r3, r1
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	440b      	add	r3, r1
 8001fb2:	01db      	lsls	r3, r3, #7
 8001fb4:	4413      	add	r3, r2
 8001fb6:	4403      	add	r3, r0
 8001fb8:	3314      	adds	r3, #20
 8001fba:	2201      	movs	r2, #1
 8001fbc:	601a      	str	r2, [r3, #0]
			finishFlag = 1;
 8001fbe:	4b31      	ldr	r3, [pc, #196]	; (8002084 <robotMachine+0x2d0>)
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	601a      	str	r2, [r3, #0]
		break;
 8001fc4:	e079      	b.n	80020ba <robotMachine+0x306>
			Map[actual.x][actual.y].final = 0;
 8001fc6:	4b2a      	ldr	r3, [pc, #168]	; (8002070 <robotMachine+0x2bc>)
 8001fc8:	6819      	ldr	r1, [r3, #0]
 8001fca:	4b29      	ldr	r3, [pc, #164]	; (8002070 <robotMachine+0x2bc>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	482a      	ldr	r0, [pc, #168]	; (8002078 <robotMachine+0x2c4>)
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	0052      	lsls	r2, r2, #1
 8001fd4:	441a      	add	r2, r3
 8001fd6:	00d3      	lsls	r3, r2, #3
 8001fd8:	461a      	mov	r2, r3
 8001fda:	460b      	mov	r3, r1
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	440b      	add	r3, r1
 8001fe0:	01db      	lsls	r3, r3, #7
 8001fe2:	4413      	add	r3, r2
 8001fe4:	4403      	add	r3, r0
 8001fe6:	3314      	adds	r3, #20
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
			robotState = CHOOSING;
 8001fec:	4b1e      	ldr	r3, [pc, #120]	; (8002068 <robotMachine+0x2b4>)
 8001fee:	2201      	movs	r2, #1
 8001ff0:	601a      	str	r2, [r3, #0]
		break;
 8001ff2:	e062      	b.n	80020ba <robotMachine+0x306>
		movimiento = ChooseNextNode(actual.x, actual.y);
 8001ff4:	4b1e      	ldr	r3, [pc, #120]	; (8002070 <robotMachine+0x2bc>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a1d      	ldr	r2, [pc, #116]	; (8002070 <robotMachine+0x2bc>)
 8001ffa:	6852      	ldr	r2, [r2, #4]
 8001ffc:	4611      	mov	r1, r2
 8001ffe:	4618      	mov	r0, r3
 8002000:	f000 f952 	bl	80022a8 <ChooseNextNode>
 8002004:	4603      	mov	r3, r0
 8002006:	4a20      	ldr	r2, [pc, #128]	; (8002088 <robotMachine+0x2d4>)
 8002008:	6013      	str	r3, [r2, #0]
		TX_BUFFER[0] = 'M';
 800200a:	4b18      	ldr	r3, [pc, #96]	; (800206c <robotMachine+0x2b8>)
 800200c:	224d      	movs	r2, #77	; 0x4d
 800200e:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = movimiento + '0';
 8002010:	4b1d      	ldr	r3, [pc, #116]	; (8002088 <robotMachine+0x2d4>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	b2db      	uxtb	r3, r3
 8002016:	3330      	adds	r3, #48	; 0x30
 8002018:	b2da      	uxtb	r2, r3
 800201a:	4b14      	ldr	r3, [pc, #80]	; (800206c <robotMachine+0x2b8>)
 800201c:	705a      	strb	r2, [r3, #1]
		TX_BUFFER[2] = '\n';
 800201e:	4b13      	ldr	r3, [pc, #76]	; (800206c <robotMachine+0x2b8>)
 8002020:	220a      	movs	r2, #10
 8002022:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart1, TX_BUFFER, 3, 100);
 8002024:	2364      	movs	r3, #100	; 0x64
 8002026:	2203      	movs	r2, #3
 8002028:	4910      	ldr	r1, [pc, #64]	; (800206c <robotMachine+0x2b8>)
 800202a:	4812      	ldr	r0, [pc, #72]	; (8002074 <robotMachine+0x2c0>)
 800202c:	f004 fc5d 	bl	80068ea <HAL_UART_Transmit>
		TX_BUFFER[0] = '*';
 8002030:	4b0e      	ldr	r3, [pc, #56]	; (800206c <robotMachine+0x2b8>)
 8002032:	222a      	movs	r2, #42	; 0x2a
 8002034:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = '*';
 8002036:	4b0d      	ldr	r3, [pc, #52]	; (800206c <robotMachine+0x2b8>)
 8002038:	222a      	movs	r2, #42	; 0x2a
 800203a:	705a      	strb	r2, [r3, #1]
		TX_BUFFER[2] = '\n';
 800203c:	4b0b      	ldr	r3, [pc, #44]	; (800206c <robotMachine+0x2b8>)
 800203e:	220a      	movs	r2, #10
 8002040:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart1, TX_BUFFER, 3, 100);
 8002042:	2364      	movs	r3, #100	; 0x64
 8002044:	2203      	movs	r2, #3
 8002046:	4909      	ldr	r1, [pc, #36]	; (800206c <robotMachine+0x2b8>)
 8002048:	480a      	ldr	r0, [pc, #40]	; (8002074 <robotMachine+0x2c0>)
 800204a:	f004 fc4e 	bl	80068ea <HAL_UART_Transmit>
		movimientoFlag = 0;
 800204e:	4b0f      	ldr	r3, [pc, #60]	; (800208c <robotMachine+0x2d8>)
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]
		ticksNow = HAL_GetTick();
 8002054:	f001 ff36 	bl	8003ec4 <HAL_GetTick>
 8002058:	4603      	mov	r3, r0
 800205a:	461a      	mov	r2, r3
 800205c:	4b0c      	ldr	r3, [pc, #48]	; (8002090 <robotMachine+0x2dc>)
 800205e:	601a      	str	r2, [r3, #0]
		robotState = MOVING;
 8002060:	4b01      	ldr	r3, [pc, #4]	; (8002068 <robotMachine+0x2b4>)
 8002062:	2202      	movs	r2, #2
 8002064:	601a      	str	r2, [r3, #0]
		break;
 8002066:	e028      	b.n	80020ba <robotMachine+0x306>
 8002068:	200012a0 	.word	0x200012a0
 800206c:	20001230 	.word	0x20001230
 8002070:	2000138c 	.word	0x2000138c
 8002074:	20002ca4 	.word	0x20002ca4
 8002078:	2000139c 	.word	0x2000139c
 800207c:	200011f0 	.word	0x200011f0
 8002080:	20001264 	.word	0x20001264
 8002084:	2000125c 	.word	0x2000125c
 8002088:	20001258 	.word	0x20001258
 800208c:	20001260 	.word	0x20001260
 8002090:	20001248 	.word	0x20001248
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002094:	2200      	movs	r2, #0
 8002096:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800209a:	4809      	ldr	r0, [pc, #36]	; (80020c0 <robotMachine+0x30c>)
 800209c:	f003 f9a3 	bl	80053e6 <HAL_GPIO_WritePin>
		movementMachine(movimiento);
 80020a0:	4b08      	ldr	r3, [pc, #32]	; (80020c4 <robotMachine+0x310>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f000 fc37 	bl	8002918 <movementMachine>
		if (movimientoFlag == 1) {
 80020aa:	4b07      	ldr	r3, [pc, #28]	; (80020c8 <robotMachine+0x314>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d102      	bne.n	80020b8 <robotMachine+0x304>
			robotState = READING;
 80020b2:	4b06      	ldr	r3, [pc, #24]	; (80020cc <robotMachine+0x318>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]
		break;
 80020b8:	bf00      	nop
}
 80020ba:	bf00      	nop
 80020bc:	bdb0      	pop	{r4, r5, r7, pc}
 80020be:	bf00      	nop
 80020c0:	40011000 	.word	0x40011000
 80020c4:	20001258 	.word	0x20001258
 80020c8:	20001260 	.word	0x20001260
 80020cc:	200012a0 	.word	0x200012a0

080020d0 <runDirections>:

void runDirections(char moves[100]) {
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
	if (moves[m] == 'a') {
 80020d8:	4b28      	ldr	r3, [pc, #160]	; (800217c <runDirections+0xac>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	461a      	mov	r2, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4413      	add	r3, r2
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	2b61      	cmp	r3, #97	; 0x61
 80020e6:	d103      	bne.n	80020f0 <runDirections+0x20>
		movementMachine(ADELANTE);
 80020e8:	2000      	movs	r0, #0
 80020ea:	f000 fc15 	bl	8002918 <movementMachine>
 80020ee:	e026      	b.n	800213e <runDirections+0x6e>
	} else if (moves[m] == 'd') {
 80020f0:	4b22      	ldr	r3, [pc, #136]	; (800217c <runDirections+0xac>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	461a      	mov	r2, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4413      	add	r3, r2
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	2b64      	cmp	r3, #100	; 0x64
 80020fe:	d103      	bne.n	8002108 <runDirections+0x38>
		movementMachine(DERECHA);
 8002100:	2003      	movs	r0, #3
 8002102:	f000 fc09 	bl	8002918 <movementMachine>
 8002106:	e01a      	b.n	800213e <runDirections+0x6e>
	} else if (moves[m] == 'i') {
 8002108:	4b1c      	ldr	r3, [pc, #112]	; (800217c <runDirections+0xac>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	461a      	mov	r2, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4413      	add	r3, r2
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	2b69      	cmp	r3, #105	; 0x69
 8002116:	d103      	bne.n	8002120 <runDirections+0x50>
		movementMachine(IZQUIERDA);
 8002118:	2001      	movs	r0, #1
 800211a:	f000 fbfd 	bl	8002918 <movementMachine>
 800211e:	e00e      	b.n	800213e <runDirections+0x6e>
	} else if (moves[m] == 'o') {
 8002120:	4b16      	ldr	r3, [pc, #88]	; (800217c <runDirections+0xac>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	461a      	mov	r2, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4413      	add	r3, r2
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	2b6f      	cmp	r3, #111	; 0x6f
 800212e:	d103      	bne.n	8002138 <runDirections+0x68>
		movementMachine(OFF);
 8002130:	2005      	movs	r0, #5
 8002132:	f000 fbf1 	bl	8002918 <movementMachine>
 8002136:	e002      	b.n	800213e <runDirections+0x6e>
	} else {
		movementMachine(SUPER);
 8002138:	2004      	movs	r0, #4
 800213a:	f000 fbed 	bl	8002918 <movementMachine>
	}
	TX_BUFFER[0] = moves[m];
 800213e:	4b0f      	ldr	r3, [pc, #60]	; (800217c <runDirections+0xac>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	461a      	mov	r2, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4413      	add	r3, r2
 8002148:	781a      	ldrb	r2, [r3, #0]
 800214a:	4b0d      	ldr	r3, [pc, #52]	; (8002180 <runDirections+0xb0>)
 800214c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, TX_BUFFER, 1, 100);
 800214e:	2364      	movs	r3, #100	; 0x64
 8002150:	2201      	movs	r2, #1
 8002152:	490b      	ldr	r1, [pc, #44]	; (8002180 <runDirections+0xb0>)
 8002154:	480b      	ldr	r0, [pc, #44]	; (8002184 <runDirections+0xb4>)
 8002156:	f004 fbc8 	bl	80068ea <HAL_UART_Transmit>
	if (movimientoFlag == 1) {
 800215a:	4b0b      	ldr	r3, [pc, #44]	; (8002188 <runDirections+0xb8>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	2b01      	cmp	r3, #1
 8002160:	d107      	bne.n	8002172 <runDirections+0xa2>
		m++;
 8002162:	4b06      	ldr	r3, [pc, #24]	; (800217c <runDirections+0xac>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	3301      	adds	r3, #1
 8002168:	4a04      	ldr	r2, [pc, #16]	; (800217c <runDirections+0xac>)
 800216a:	6013      	str	r3, [r2, #0]
		movimientoFlag = 0;
 800216c:	4b06      	ldr	r3, [pc, #24]	; (8002188 <runDirections+0xb8>)
 800216e:	2200      	movs	r2, #0
 8002170:	601a      	str	r2, [r3, #0]
	}
}
 8002172:	bf00      	nop
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	20001250 	.word	0x20001250
 8002180:	20001230 	.word	0x20001230
 8002184:	20002ca4 	.word	0x20002ca4
 8002188:	20001260 	.word	0x20001260

0800218c <addDirection>:

void addDirection(int x, int y) {
 800218c:	b590      	push	{r4, r7, lr}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
	if (Map[x][y].Lados[direcciones[ADELANTE]] != 1) {
 8002196:	4b3e      	ldr	r3, [pc, #248]	; (8002290 <addDirection+0x104>)
 8002198:	6818      	ldr	r0, [r3, #0]
 800219a:	4c3e      	ldr	r4, [pc, #248]	; (8002294 <addDirection+0x108>)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	6879      	ldr	r1, [r7, #4]
 80021a0:	461a      	mov	r2, r3
 80021a2:	0052      	lsls	r2, r2, #1
 80021a4:	441a      	add	r2, r3
 80021a6:	0053      	lsls	r3, r2, #1
 80021a8:	461a      	mov	r2, r3
 80021aa:	460b      	mov	r3, r1
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	440b      	add	r3, r1
 80021b0:	015b      	lsls	r3, r3, #5
 80021b2:	4413      	add	r3, r2
 80021b4:	4403      	add	r3, r0
 80021b6:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d00a      	beq.n	80021d4 <addDirection+0x48>
		//Map[x][y].Lados[direcciones[ADELANTE]] = 2;
		moveNode(direcciones[ADELANTE]);
 80021be:	4b34      	ldr	r3, [pc, #208]	; (8002290 <addDirection+0x104>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f000 fb76 	bl	80028b4 <moveNode>
		directions[directionsSize] = 'a';
 80021c8:	4b33      	ldr	r3, [pc, #204]	; (8002298 <addDirection+0x10c>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a33      	ldr	r2, [pc, #204]	; (800229c <addDirection+0x110>)
 80021ce:	2161      	movs	r1, #97	; 0x61
 80021d0:	54d1      	strb	r1, [r2, r3]
 80021d2:	e042      	b.n	800225a <addDirection+0xce>
	} else if (Map[x][y].Lados[direcciones[IZQUIERDA]] != 1) {
 80021d4:	4b2e      	ldr	r3, [pc, #184]	; (8002290 <addDirection+0x104>)
 80021d6:	6858      	ldr	r0, [r3, #4]
 80021d8:	4c2e      	ldr	r4, [pc, #184]	; (8002294 <addDirection+0x108>)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	6879      	ldr	r1, [r7, #4]
 80021de:	461a      	mov	r2, r3
 80021e0:	0052      	lsls	r2, r2, #1
 80021e2:	441a      	add	r2, r3
 80021e4:	0053      	lsls	r3, r2, #1
 80021e6:	461a      	mov	r2, r3
 80021e8:	460b      	mov	r3, r1
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	440b      	add	r3, r1
 80021ee:	015b      	lsls	r3, r3, #5
 80021f0:	4413      	add	r3, r2
 80021f2:	4403      	add	r3, r0
 80021f4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d00d      	beq.n	8002218 <addDirection+0x8c>
		//Map[x][y].Lados[direcciones[IZQUIERDA]] = 2;
		moveNode(direcciones[IZQUIERDA]);
 80021fc:	4b24      	ldr	r3, [pc, #144]	; (8002290 <addDirection+0x104>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	4618      	mov	r0, r3
 8002202:	f000 fb57 	bl	80028b4 <moveNode>
		rotateAxis(IZQUIERDA);
 8002206:	2001      	movs	r0, #1
 8002208:	f000 fdbe 	bl	8002d88 <rotateAxis>
		directions[directionsSize] = 'i';
 800220c:	4b22      	ldr	r3, [pc, #136]	; (8002298 <addDirection+0x10c>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a22      	ldr	r2, [pc, #136]	; (800229c <addDirection+0x110>)
 8002212:	2169      	movs	r1, #105	; 0x69
 8002214:	54d1      	strb	r1, [r2, r3]
 8002216:	e020      	b.n	800225a <addDirection+0xce>
	} else if (Map[x][y].Lados[direcciones[DERECHA]] != 1) {
 8002218:	4b1d      	ldr	r3, [pc, #116]	; (8002290 <addDirection+0x104>)
 800221a:	68d8      	ldr	r0, [r3, #12]
 800221c:	4c1d      	ldr	r4, [pc, #116]	; (8002294 <addDirection+0x108>)
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	6879      	ldr	r1, [r7, #4]
 8002222:	461a      	mov	r2, r3
 8002224:	0052      	lsls	r2, r2, #1
 8002226:	441a      	add	r2, r3
 8002228:	0053      	lsls	r3, r2, #1
 800222a:	461a      	mov	r2, r3
 800222c:	460b      	mov	r3, r1
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	440b      	add	r3, r1
 8002232:	015b      	lsls	r3, r3, #5
 8002234:	4413      	add	r3, r2
 8002236:	4403      	add	r3, r0
 8002238:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800223c:	2b01      	cmp	r3, #1
 800223e:	d00c      	beq.n	800225a <addDirection+0xce>
		//Map[x][y].Lados[direcciones[DERECHA]] = 2;
		moveNode(direcciones[DERECHA]);
 8002240:	4b13      	ldr	r3, [pc, #76]	; (8002290 <addDirection+0x104>)
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	4618      	mov	r0, r3
 8002246:	f000 fb35 	bl	80028b4 <moveNode>
		rotateAxis(DERECHA);
 800224a:	2003      	movs	r0, #3
 800224c:	f000 fd9c 	bl	8002d88 <rotateAxis>
		directions[directionsSize] = 'd';
 8002250:	4b11      	ldr	r3, [pc, #68]	; (8002298 <addDirection+0x10c>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a11      	ldr	r2, [pc, #68]	; (800229c <addDirection+0x110>)
 8002256:	2164      	movs	r1, #100	; 0x64
 8002258:	54d1      	strb	r1, [r2, r3]
	}
	/*intUartSend(Map[x][y].Lados[direcciones[ADELANTE]]);
	intUartSend(Map[x][y].Lados[direcciones[IZQUIERDA]]);
	intUartSend(Map[x][y].Lados[direcciones[DERECHA]]);*/
	TX_BUFFER[0] = 'D';
 800225a:	4b11      	ldr	r3, [pc, #68]	; (80022a0 <addDirection+0x114>)
 800225c:	2244      	movs	r2, #68	; 0x44
 800225e:	701a      	strb	r2, [r3, #0]
	TX_BUFFER[1] = directions[directionsSize];
 8002260:	4b0d      	ldr	r3, [pc, #52]	; (8002298 <addDirection+0x10c>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a0d      	ldr	r2, [pc, #52]	; (800229c <addDirection+0x110>)
 8002266:	5cd2      	ldrb	r2, [r2, r3]
 8002268:	4b0d      	ldr	r3, [pc, #52]	; (80022a0 <addDirection+0x114>)
 800226a:	705a      	strb	r2, [r3, #1]
	TX_BUFFER[2] = '\n';
 800226c:	4b0c      	ldr	r3, [pc, #48]	; (80022a0 <addDirection+0x114>)
 800226e:	220a      	movs	r2, #10
 8002270:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(&huart1, TX_BUFFER, 3, 100);
 8002272:	2364      	movs	r3, #100	; 0x64
 8002274:	2203      	movs	r2, #3
 8002276:	490a      	ldr	r1, [pc, #40]	; (80022a0 <addDirection+0x114>)
 8002278:	480a      	ldr	r0, [pc, #40]	; (80022a4 <addDirection+0x118>)
 800227a:	f004 fb36 	bl	80068ea <HAL_UART_Transmit>
	directionsSize++;
 800227e:	4b06      	ldr	r3, [pc, #24]	; (8002298 <addDirection+0x10c>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	3301      	adds	r3, #1
 8002284:	4a04      	ldr	r2, [pc, #16]	; (8002298 <addDirection+0x10c>)
 8002286:	6013      	str	r3, [r2, #0]
}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	bd90      	pop	{r4, r7, pc}
 8002290:	20001200 	.word	0x20001200
 8002294:	2000139c 	.word	0x2000139c
 8002298:	20001254 	.word	0x20001254
 800229c:	200012a4 	.word	0x200012a4
 80022a0:	20001230 	.word	0x20001230
 80022a4:	20002ca4 	.word	0x20002ca4

080022a8 <ChooseNextNode>:

int ChooseNextNode(int x, int y) {
 80022a8:	b590      	push	{r4, r7, lr}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
	if (Map[x][y].Lados[direcciones[ADELANTE]] == 0) {
 80022b2:	4b84      	ldr	r3, [pc, #528]	; (80024c4 <ChooseNextNode+0x21c>)
 80022b4:	6818      	ldr	r0, [r3, #0]
 80022b6:	4c84      	ldr	r4, [pc, #528]	; (80024c8 <ChooseNextNode+0x220>)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	6879      	ldr	r1, [r7, #4]
 80022bc:	461a      	mov	r2, r3
 80022be:	0052      	lsls	r2, r2, #1
 80022c0:	441a      	add	r2, r3
 80022c2:	0053      	lsls	r3, r2, #1
 80022c4:	461a      	mov	r2, r3
 80022c6:	460b      	mov	r3, r1
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	440b      	add	r3, r1
 80022cc:	015b      	lsls	r3, r3, #5
 80022ce:	4413      	add	r3, r2
 80022d0:	4403      	add	r3, r0
 80022d2:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d16e      	bne.n	80023b8 <ChooseNextNode+0x110>
		TX_BUFFER[0] = 'A';
 80022da:	4b7c      	ldr	r3, [pc, #496]	; (80024cc <ChooseNextNode+0x224>)
 80022dc:	2241      	movs	r2, #65	; 0x41
 80022de:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = '\n';
 80022e0:	4b7a      	ldr	r3, [pc, #488]	; (80024cc <ChooseNextNode+0x224>)
 80022e2:	220a      	movs	r2, #10
 80022e4:	705a      	strb	r2, [r3, #1]
		HAL_UART_Transmit(&huart1, TX_BUFFER, 2, 100);
 80022e6:	2364      	movs	r3, #100	; 0x64
 80022e8:	2202      	movs	r2, #2
 80022ea:	4978      	ldr	r1, [pc, #480]	; (80024cc <ChooseNextNode+0x224>)
 80022ec:	4878      	ldr	r0, [pc, #480]	; (80024d0 <ChooseNextNode+0x228>)
 80022ee:	f004 fafc 	bl	80068ea <HAL_UART_Transmit>
		Map[x][y].Lados[direcciones[ADELANTE]] = 2;
 80022f2:	4b74      	ldr	r3, [pc, #464]	; (80024c4 <ChooseNextNode+0x21c>)
 80022f4:	6818      	ldr	r0, [r3, #0]
 80022f6:	4c74      	ldr	r4, [pc, #464]	; (80024c8 <ChooseNextNode+0x220>)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	6879      	ldr	r1, [r7, #4]
 80022fc:	461a      	mov	r2, r3
 80022fe:	0052      	lsls	r2, r2, #1
 8002300:	441a      	add	r2, r3
 8002302:	0053      	lsls	r3, r2, #1
 8002304:	461a      	mov	r2, r3
 8002306:	460b      	mov	r3, r1
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	440b      	add	r3, r1
 800230c:	015b      	lsls	r3, r3, #5
 800230e:	4413      	add	r3, r2
 8002310:	4403      	add	r3, r0
 8002312:	2202      	movs	r2, #2
 8002314:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
		if (Map[x][y].visitado > 1) {
 8002318:	486b      	ldr	r0, [pc, #428]	; (80024c8 <ChooseNextNode+0x220>)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	6879      	ldr	r1, [r7, #4]
 800231e:	461a      	mov	r2, r3
 8002320:	0052      	lsls	r2, r2, #1
 8002322:	441a      	add	r2, r3
 8002324:	00d3      	lsls	r3, r2, #3
 8002326:	461a      	mov	r2, r3
 8002328:	460b      	mov	r3, r1
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	440b      	add	r3, r1
 800232e:	01db      	lsls	r3, r3, #7
 8002330:	4413      	add	r3, r2
 8002332:	4403      	add	r3, r0
 8002334:	3310      	adds	r3, #16
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2b01      	cmp	r3, #1
 800233a:	dd07      	ble.n	800234c <ChooseNextNode+0xa4>
			EliminateNode(x, y);
 800233c:	6839      	ldr	r1, [r7, #0]
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f000 f98a 	bl	8002658 <EliminateNode>
			intUartSend(5000);
 8002344:	f241 3088 	movw	r0, #5000	; 0x1388
 8002348:	f7ff fa10 	bl	800176c <intUartSend>
		}
		if (Map[x][y].Lados[direcciones[ATRAS]] != 1)
 800234c:	4b5d      	ldr	r3, [pc, #372]	; (80024c4 <ChooseNextNode+0x21c>)
 800234e:	6898      	ldr	r0, [r3, #8]
 8002350:	4c5d      	ldr	r4, [pc, #372]	; (80024c8 <ChooseNextNode+0x220>)
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	6879      	ldr	r1, [r7, #4]
 8002356:	461a      	mov	r2, r3
 8002358:	0052      	lsls	r2, r2, #1
 800235a:	441a      	add	r2, r3
 800235c:	0053      	lsls	r3, r2, #1
 800235e:	461a      	mov	r2, r3
 8002360:	460b      	mov	r3, r1
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	440b      	add	r3, r1
 8002366:	015b      	lsls	r3, r3, #5
 8002368:	4413      	add	r3, r2
 800236a:	4403      	add	r3, r0
 800236c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8002370:	2b01      	cmp	r3, #1
 8002372:	d012      	beq.n	800239a <ChooseNextNode+0xf2>
			Map[x][y].Lados[direcciones[ATRAS]] = 2;
 8002374:	4b53      	ldr	r3, [pc, #332]	; (80024c4 <ChooseNextNode+0x21c>)
 8002376:	6898      	ldr	r0, [r3, #8]
 8002378:	4c53      	ldr	r4, [pc, #332]	; (80024c8 <ChooseNextNode+0x220>)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	6879      	ldr	r1, [r7, #4]
 800237e:	461a      	mov	r2, r3
 8002380:	0052      	lsls	r2, r2, #1
 8002382:	441a      	add	r2, r3
 8002384:	0053      	lsls	r3, r2, #1
 8002386:	461a      	mov	r2, r3
 8002388:	460b      	mov	r3, r1
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	440b      	add	r3, r1
 800238e:	015b      	lsls	r3, r3, #5
 8002390:	4413      	add	r3, r2
 8002392:	4403      	add	r3, r0
 8002394:	2202      	movs	r2, #2
 8002396:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
		last.x = actual.x;
 800239a:	4b4e      	ldr	r3, [pc, #312]	; (80024d4 <ChooseNextNode+0x22c>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a4e      	ldr	r2, [pc, #312]	; (80024d8 <ChooseNextNode+0x230>)
 80023a0:	6013      	str	r3, [r2, #0]
		last.y = actual.y;
 80023a2:	4b4c      	ldr	r3, [pc, #304]	; (80024d4 <ChooseNextNode+0x22c>)
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	4a4c      	ldr	r2, [pc, #304]	; (80024d8 <ChooseNextNode+0x230>)
 80023a8:	6053      	str	r3, [r2, #4]
		/*intUartSend(Map[actual.x][actual.y].Lados[DERECHA]);
		intUartSend(Map[actual.x][actual.y].Lados[ADELANTE]);
		intUartSend(Map[actual.x][actual.y].Lados[IZQUIERDA]);
		intUartSend(Map[actual.x][actual.y].Lados[ATRAS]);*/
		moveNode(direcciones[ADELANTE]);
 80023aa:	4b46      	ldr	r3, [pc, #280]	; (80024c4 <ChooseNextNode+0x21c>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f000 fa80 	bl	80028b4 <moveNode>
		return ADELANTE;
 80023b4:	2300      	movs	r3, #0
 80023b6:	e13e      	b.n	8002636 <ChooseNextNode+0x38e>
	} else if (Map[x][y].Lados[direcciones[IZQUIERDA]] == 0) {
 80023b8:	4b42      	ldr	r3, [pc, #264]	; (80024c4 <ChooseNextNode+0x21c>)
 80023ba:	6858      	ldr	r0, [r3, #4]
 80023bc:	4c42      	ldr	r4, [pc, #264]	; (80024c8 <ChooseNextNode+0x220>)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	6879      	ldr	r1, [r7, #4]
 80023c2:	461a      	mov	r2, r3
 80023c4:	0052      	lsls	r2, r2, #1
 80023c6:	441a      	add	r2, r3
 80023c8:	0053      	lsls	r3, r2, #1
 80023ca:	461a      	mov	r2, r3
 80023cc:	460b      	mov	r3, r1
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	440b      	add	r3, r1
 80023d2:	015b      	lsls	r3, r3, #5
 80023d4:	4413      	add	r3, r2
 80023d6:	4403      	add	r3, r0
 80023d8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d17d      	bne.n	80024dc <ChooseNextNode+0x234>
		TX_BUFFER[0] = 'I';
 80023e0:	4b3a      	ldr	r3, [pc, #232]	; (80024cc <ChooseNextNode+0x224>)
 80023e2:	2249      	movs	r2, #73	; 0x49
 80023e4:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = '\n';
 80023e6:	4b39      	ldr	r3, [pc, #228]	; (80024cc <ChooseNextNode+0x224>)
 80023e8:	220a      	movs	r2, #10
 80023ea:	705a      	strb	r2, [r3, #1]
		HAL_UART_Transmit(&huart1, TX_BUFFER, 2, 100);
 80023ec:	2364      	movs	r3, #100	; 0x64
 80023ee:	2202      	movs	r2, #2
 80023f0:	4936      	ldr	r1, [pc, #216]	; (80024cc <ChooseNextNode+0x224>)
 80023f2:	4837      	ldr	r0, [pc, #220]	; (80024d0 <ChooseNextNode+0x228>)
 80023f4:	f004 fa79 	bl	80068ea <HAL_UART_Transmit>
		Map[x][y].Lados[direcciones[IZQUIERDA]] = 2;
 80023f8:	4b32      	ldr	r3, [pc, #200]	; (80024c4 <ChooseNextNode+0x21c>)
 80023fa:	6858      	ldr	r0, [r3, #4]
 80023fc:	4c32      	ldr	r4, [pc, #200]	; (80024c8 <ChooseNextNode+0x220>)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	6879      	ldr	r1, [r7, #4]
 8002402:	461a      	mov	r2, r3
 8002404:	0052      	lsls	r2, r2, #1
 8002406:	441a      	add	r2, r3
 8002408:	0053      	lsls	r3, r2, #1
 800240a:	461a      	mov	r2, r3
 800240c:	460b      	mov	r3, r1
 800240e:	005b      	lsls	r3, r3, #1
 8002410:	440b      	add	r3, r1
 8002412:	015b      	lsls	r3, r3, #5
 8002414:	4413      	add	r3, r2
 8002416:	4403      	add	r3, r0
 8002418:	2202      	movs	r2, #2
 800241a:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
		if (Map[x][y].visitado > 1) {
 800241e:	482a      	ldr	r0, [pc, #168]	; (80024c8 <ChooseNextNode+0x220>)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	6879      	ldr	r1, [r7, #4]
 8002424:	461a      	mov	r2, r3
 8002426:	0052      	lsls	r2, r2, #1
 8002428:	441a      	add	r2, r3
 800242a:	00d3      	lsls	r3, r2, #3
 800242c:	461a      	mov	r2, r3
 800242e:	460b      	mov	r3, r1
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	440b      	add	r3, r1
 8002434:	01db      	lsls	r3, r3, #7
 8002436:	4413      	add	r3, r2
 8002438:	4403      	add	r3, r0
 800243a:	3310      	adds	r3, #16
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2b01      	cmp	r3, #1
 8002440:	dd07      	ble.n	8002452 <ChooseNextNode+0x1aa>
			EliminateNode(x, y);
 8002442:	6839      	ldr	r1, [r7, #0]
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f000 f907 	bl	8002658 <EliminateNode>
			intUartSend(5000);
 800244a:	f241 3088 	movw	r0, #5000	; 0x1388
 800244e:	f7ff f98d 	bl	800176c <intUartSend>
		}
		if (Map[x][y].Lados[direcciones[ATRAS]] != 1) {
 8002452:	4b1c      	ldr	r3, [pc, #112]	; (80024c4 <ChooseNextNode+0x21c>)
 8002454:	6898      	ldr	r0, [r3, #8]
 8002456:	4c1c      	ldr	r4, [pc, #112]	; (80024c8 <ChooseNextNode+0x220>)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	6879      	ldr	r1, [r7, #4]
 800245c:	461a      	mov	r2, r3
 800245e:	0052      	lsls	r2, r2, #1
 8002460:	441a      	add	r2, r3
 8002462:	0053      	lsls	r3, r2, #1
 8002464:	461a      	mov	r2, r3
 8002466:	460b      	mov	r3, r1
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	440b      	add	r3, r1
 800246c:	015b      	lsls	r3, r3, #5
 800246e:	4413      	add	r3, r2
 8002470:	4403      	add	r3, r0
 8002472:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d012      	beq.n	80024a0 <ChooseNextNode+0x1f8>
			Map[x][y].Lados[direcciones[ATRAS]] = 2;
 800247a:	4b12      	ldr	r3, [pc, #72]	; (80024c4 <ChooseNextNode+0x21c>)
 800247c:	6898      	ldr	r0, [r3, #8]
 800247e:	4c12      	ldr	r4, [pc, #72]	; (80024c8 <ChooseNextNode+0x220>)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	6879      	ldr	r1, [r7, #4]
 8002484:	461a      	mov	r2, r3
 8002486:	0052      	lsls	r2, r2, #1
 8002488:	441a      	add	r2, r3
 800248a:	0053      	lsls	r3, r2, #1
 800248c:	461a      	mov	r2, r3
 800248e:	460b      	mov	r3, r1
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	440b      	add	r3, r1
 8002494:	015b      	lsls	r3, r3, #5
 8002496:	4413      	add	r3, r2
 8002498:	4403      	add	r3, r0
 800249a:	2202      	movs	r2, #2
 800249c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
		}
		last.x = actual.x;
 80024a0:	4b0c      	ldr	r3, [pc, #48]	; (80024d4 <ChooseNextNode+0x22c>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a0c      	ldr	r2, [pc, #48]	; (80024d8 <ChooseNextNode+0x230>)
 80024a6:	6013      	str	r3, [r2, #0]
		last.y = actual.y;
 80024a8:	4b0a      	ldr	r3, [pc, #40]	; (80024d4 <ChooseNextNode+0x22c>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	4a0a      	ldr	r2, [pc, #40]	; (80024d8 <ChooseNextNode+0x230>)
 80024ae:	6053      	str	r3, [r2, #4]
		/*intUartSend(Map[x][y].Lados[DERECHA]);
		intUartSend(Map[x][y].Lados[ADELANTE]);
		intUartSend(Map[x][y].Lados[IZQUIERDA]);
		intUartSend(Map[x][y].Lados[ATRAS]);*/
		moveNode(direcciones[IZQUIERDA]);
 80024b0:	4b04      	ldr	r3, [pc, #16]	; (80024c4 <ChooseNextNode+0x21c>)
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f000 f9fd 	bl	80028b4 <moveNode>
		rotateAxis(IZQUIERDA);
 80024ba:	2001      	movs	r0, #1
 80024bc:	f000 fc64 	bl	8002d88 <rotateAxis>
		return IZQUIERDA;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e0b8      	b.n	8002636 <ChooseNextNode+0x38e>
 80024c4:	20001200 	.word	0x20001200
 80024c8:	2000139c 	.word	0x2000139c
 80024cc:	20001230 	.word	0x20001230
 80024d0:	20002ca4 	.word	0x20002ca4
 80024d4:	2000138c 	.word	0x2000138c
 80024d8:	20001394 	.word	0x20001394
	} else if (Map[x][y].Lados[direcciones[DERECHA]] == 0) {
 80024dc:	4b58      	ldr	r3, [pc, #352]	; (8002640 <ChooseNextNode+0x398>)
 80024de:	68d8      	ldr	r0, [r3, #12]
 80024e0:	4c58      	ldr	r4, [pc, #352]	; (8002644 <ChooseNextNode+0x39c>)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	6879      	ldr	r1, [r7, #4]
 80024e6:	461a      	mov	r2, r3
 80024e8:	0052      	lsls	r2, r2, #1
 80024ea:	441a      	add	r2, r3
 80024ec:	0053      	lsls	r3, r2, #1
 80024ee:	461a      	mov	r2, r3
 80024f0:	460b      	mov	r3, r1
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	440b      	add	r3, r1
 80024f6:	015b      	lsls	r3, r3, #5
 80024f8:	4413      	add	r3, r2
 80024fa:	4403      	add	r3, r0
 80024fc:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8002500:	2b00      	cmp	r3, #0
 8002502:	f040 8087 	bne.w	8002614 <ChooseNextNode+0x36c>
		TX_BUFFER[0] = 'D';
 8002506:	4b50      	ldr	r3, [pc, #320]	; (8002648 <ChooseNextNode+0x3a0>)
 8002508:	2244      	movs	r2, #68	; 0x44
 800250a:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = '\n';
 800250c:	4b4e      	ldr	r3, [pc, #312]	; (8002648 <ChooseNextNode+0x3a0>)
 800250e:	220a      	movs	r2, #10
 8002510:	705a      	strb	r2, [r3, #1]
		HAL_UART_Transmit(&huart1, TX_BUFFER, 2, 100);
 8002512:	2364      	movs	r3, #100	; 0x64
 8002514:	2202      	movs	r2, #2
 8002516:	494c      	ldr	r1, [pc, #304]	; (8002648 <ChooseNextNode+0x3a0>)
 8002518:	484c      	ldr	r0, [pc, #304]	; (800264c <ChooseNextNode+0x3a4>)
 800251a:	f004 f9e6 	bl	80068ea <HAL_UART_Transmit>

		if (Map[x][y].visitado > 1) {
 800251e:	4849      	ldr	r0, [pc, #292]	; (8002644 <ChooseNextNode+0x39c>)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	6879      	ldr	r1, [r7, #4]
 8002524:	461a      	mov	r2, r3
 8002526:	0052      	lsls	r2, r2, #1
 8002528:	441a      	add	r2, r3
 800252a:	00d3      	lsls	r3, r2, #3
 800252c:	461a      	mov	r2, r3
 800252e:	460b      	mov	r3, r1
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	440b      	add	r3, r1
 8002534:	01db      	lsls	r3, r3, #7
 8002536:	4413      	add	r3, r2
 8002538:	4403      	add	r3, r0
 800253a:	3310      	adds	r3, #16
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2b01      	cmp	r3, #1
 8002540:	dd07      	ble.n	8002552 <ChooseNextNode+0x2aa>
			EliminateNode(x, y);
 8002542:	6839      	ldr	r1, [r7, #0]
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f000 f887 	bl	8002658 <EliminateNode>
			intUartSend(5000);
 800254a:	f241 3088 	movw	r0, #5000	; 0x1388
 800254e:	f7ff f90d 	bl	800176c <intUartSend>
		}
		Map[x][y].Lados[direcciones[DERECHA]] = 2;
 8002552:	4b3b      	ldr	r3, [pc, #236]	; (8002640 <ChooseNextNode+0x398>)
 8002554:	68d8      	ldr	r0, [r3, #12]
 8002556:	4c3b      	ldr	r4, [pc, #236]	; (8002644 <ChooseNextNode+0x39c>)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	6879      	ldr	r1, [r7, #4]
 800255c:	461a      	mov	r2, r3
 800255e:	0052      	lsls	r2, r2, #1
 8002560:	441a      	add	r2, r3
 8002562:	0053      	lsls	r3, r2, #1
 8002564:	461a      	mov	r2, r3
 8002566:	460b      	mov	r3, r1
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	440b      	add	r3, r1
 800256c:	015b      	lsls	r3, r3, #5
 800256e:	4413      	add	r3, r2
 8002570:	4403      	add	r3, r0
 8002572:	2202      	movs	r2, #2
 8002574:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
		if (Map[x][y].Lados[direcciones[ATRAS]] != 1) {
 8002578:	4b31      	ldr	r3, [pc, #196]	; (8002640 <ChooseNextNode+0x398>)
 800257a:	6898      	ldr	r0, [r3, #8]
 800257c:	4c31      	ldr	r4, [pc, #196]	; (8002644 <ChooseNextNode+0x39c>)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	6879      	ldr	r1, [r7, #4]
 8002582:	461a      	mov	r2, r3
 8002584:	0052      	lsls	r2, r2, #1
 8002586:	441a      	add	r2, r3
 8002588:	0053      	lsls	r3, r2, #1
 800258a:	461a      	mov	r2, r3
 800258c:	460b      	mov	r3, r1
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	440b      	add	r3, r1
 8002592:	015b      	lsls	r3, r3, #5
 8002594:	4413      	add	r3, r2
 8002596:	4403      	add	r3, r0
 8002598:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800259c:	2b01      	cmp	r3, #1
 800259e:	d027      	beq.n	80025f0 <ChooseNextNode+0x348>
			intUartSend(Map[x][y].Lados[direcciones[ATRAS]]);
 80025a0:	4b27      	ldr	r3, [pc, #156]	; (8002640 <ChooseNextNode+0x398>)
 80025a2:	6898      	ldr	r0, [r3, #8]
 80025a4:	4c27      	ldr	r4, [pc, #156]	; (8002644 <ChooseNextNode+0x39c>)
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	6879      	ldr	r1, [r7, #4]
 80025aa:	461a      	mov	r2, r3
 80025ac:	0052      	lsls	r2, r2, #1
 80025ae:	441a      	add	r2, r3
 80025b0:	0053      	lsls	r3, r2, #1
 80025b2:	461a      	mov	r2, r3
 80025b4:	460b      	mov	r3, r1
 80025b6:	005b      	lsls	r3, r3, #1
 80025b8:	440b      	add	r3, r1
 80025ba:	015b      	lsls	r3, r3, #5
 80025bc:	4413      	add	r3, r2
 80025be:	4403      	add	r3, r0
 80025c0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7ff f8d1 	bl	800176c <intUartSend>
			Map[x][y].Lados[direcciones[ATRAS]] = 2;
 80025ca:	4b1d      	ldr	r3, [pc, #116]	; (8002640 <ChooseNextNode+0x398>)
 80025cc:	6898      	ldr	r0, [r3, #8]
 80025ce:	4c1d      	ldr	r4, [pc, #116]	; (8002644 <ChooseNextNode+0x39c>)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	6879      	ldr	r1, [r7, #4]
 80025d4:	461a      	mov	r2, r3
 80025d6:	0052      	lsls	r2, r2, #1
 80025d8:	441a      	add	r2, r3
 80025da:	0053      	lsls	r3, r2, #1
 80025dc:	461a      	mov	r2, r3
 80025de:	460b      	mov	r3, r1
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	440b      	add	r3, r1
 80025e4:	015b      	lsls	r3, r3, #5
 80025e6:	4413      	add	r3, r2
 80025e8:	4403      	add	r3, r0
 80025ea:	2202      	movs	r2, #2
 80025ec:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
		}
		last.x = actual.x;
 80025f0:	4b17      	ldr	r3, [pc, #92]	; (8002650 <ChooseNextNode+0x3a8>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a17      	ldr	r2, [pc, #92]	; (8002654 <ChooseNextNode+0x3ac>)
 80025f6:	6013      	str	r3, [r2, #0]
		last.y = actual.y;
 80025f8:	4b15      	ldr	r3, [pc, #84]	; (8002650 <ChooseNextNode+0x3a8>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	4a15      	ldr	r2, [pc, #84]	; (8002654 <ChooseNextNode+0x3ac>)
 80025fe:	6053      	str	r3, [r2, #4]
		/*intUartSend(Map[actual.x][actual.y].Lados[DERECHA]);
		intUartSend(Map[actual.x][actual.y].Lados[ADELANTE]);
		intUartSend(Map[actual.x][actual.y].Lados[IZQUIERDA]);
		intUartSend(Map[actual.x][actual.y].Lados[ATRAS]);*/
		moveNode(direcciones[DERECHA]);
 8002600:	4b0f      	ldr	r3, [pc, #60]	; (8002640 <ChooseNextNode+0x398>)
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	4618      	mov	r0, r3
 8002606:	f000 f955 	bl	80028b4 <moveNode>
		rotateAxis(DERECHA);
 800260a:	2003      	movs	r0, #3
 800260c:	f000 fbbc 	bl	8002d88 <rotateAxis>
		return DERECHA;
 8002610:	2303      	movs	r3, #3
 8002612:	e010      	b.n	8002636 <ChooseNextNode+0x38e>
	} else {
		TX_BUFFER[0] = 'O';
 8002614:	4b0c      	ldr	r3, [pc, #48]	; (8002648 <ChooseNextNode+0x3a0>)
 8002616:	224f      	movs	r2, #79	; 0x4f
 8002618:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = '\n';
 800261a:	4b0b      	ldr	r3, [pc, #44]	; (8002648 <ChooseNextNode+0x3a0>)
 800261c:	220a      	movs	r2, #10
 800261e:	705a      	strb	r2, [r3, #1]
		HAL_UART_Transmit(&huart1, TX_BUFFER, 2, 100);
 8002620:	2364      	movs	r3, #100	; 0x64
 8002622:	2202      	movs	r2, #2
 8002624:	4908      	ldr	r1, [pc, #32]	; (8002648 <ChooseNextNode+0x3a0>)
 8002626:	4809      	ldr	r0, [pc, #36]	; (800264c <ChooseNextNode+0x3a4>)
 8002628:	f004 f95f 	bl	80068ea <HAL_UART_Transmit>
		return SearchAvailableNode(x, y);
 800262c:	6839      	ldr	r1, [r7, #0]
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f000 f848 	bl	80026c4 <SearchAvailableNode>
 8002634:	4603      	mov	r3, r0
	}

}
 8002636:	4618      	mov	r0, r3
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	bd90      	pop	{r4, r7, pc}
 800263e:	bf00      	nop
 8002640:	20001200 	.word	0x20001200
 8002644:	2000139c 	.word	0x2000139c
 8002648:	20001230 	.word	0x20001230
 800264c:	20002ca4 	.word	0x20002ca4
 8002650:	2000138c 	.word	0x2000138c
 8002654:	20001394 	.word	0x20001394

08002658 <EliminateNode>:
void EliminateNode(int x, int y) {
 8002658:	b490      	push	{r4, r7}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
//Serial.println("Borro");
	Map[x][y].Lados[direcciones[ATRAS]] = 1;
 8002662:	4b15      	ldr	r3, [pc, #84]	; (80026b8 <EliminateNode+0x60>)
 8002664:	6898      	ldr	r0, [r3, #8]
 8002666:	4c15      	ldr	r4, [pc, #84]	; (80026bc <EliminateNode+0x64>)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	6879      	ldr	r1, [r7, #4]
 800266c:	461a      	mov	r2, r3
 800266e:	0052      	lsls	r2, r2, #1
 8002670:	441a      	add	r2, r3
 8002672:	0053      	lsls	r3, r2, #1
 8002674:	461a      	mov	r2, r3
 8002676:	460b      	mov	r3, r1
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	440b      	add	r3, r1
 800267c:	015b      	lsls	r3, r3, #5
 800267e:	4413      	add	r3, r2
 8002680:	4403      	add	r3, r0
 8002682:	2201      	movs	r2, #1
 8002684:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	Map[last.x][last.y].visitado = 0;
 8002688:	4b0d      	ldr	r3, [pc, #52]	; (80026c0 <EliminateNode+0x68>)
 800268a:	6819      	ldr	r1, [r3, #0]
 800268c:	4b0c      	ldr	r3, [pc, #48]	; (80026c0 <EliminateNode+0x68>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	480a      	ldr	r0, [pc, #40]	; (80026bc <EliminateNode+0x64>)
 8002692:	461a      	mov	r2, r3
 8002694:	0052      	lsls	r2, r2, #1
 8002696:	441a      	add	r2, r3
 8002698:	00d3      	lsls	r3, r2, #3
 800269a:	461a      	mov	r2, r3
 800269c:	460b      	mov	r3, r1
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	440b      	add	r3, r1
 80026a2:	01db      	lsls	r3, r3, #7
 80026a4:	4413      	add	r3, r2
 80026a6:	4403      	add	r3, r0
 80026a8:	3310      	adds	r3, #16
 80026aa:	2200      	movs	r2, #0
 80026ac:	601a      	str	r2, [r3, #0]
}
 80026ae:	bf00      	nop
 80026b0:	3708      	adds	r7, #8
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bc90      	pop	{r4, r7}
 80026b6:	4770      	bx	lr
 80026b8:	20001200 	.word	0x20001200
 80026bc:	2000139c 	.word	0x2000139c
 80026c0:	20001394 	.word	0x20001394

080026c4 <SearchAvailableNode>:

int SearchAvailableNode(int x, int y) {
 80026c4:	b590      	push	{r4, r7, lr}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	6039      	str	r1, [r7, #0]
	if (Map[x][y].Lados[direcciones[ADELANTE]] != 1) {
 80026ce:	4b75      	ldr	r3, [pc, #468]	; (80028a4 <SearchAvailableNode+0x1e0>)
 80026d0:	6818      	ldr	r0, [r3, #0]
 80026d2:	4c75      	ldr	r4, [pc, #468]	; (80028a8 <SearchAvailableNode+0x1e4>)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	6879      	ldr	r1, [r7, #4]
 80026d8:	461a      	mov	r2, r3
 80026da:	0052      	lsls	r2, r2, #1
 80026dc:	441a      	add	r2, r3
 80026de:	0053      	lsls	r3, r2, #1
 80026e0:	461a      	mov	r2, r3
 80026e2:	460b      	mov	r3, r1
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	440b      	add	r3, r1
 80026e8:	015b      	lsls	r3, r3, #5
 80026ea:	4413      	add	r3, r2
 80026ec:	4403      	add	r3, r0
 80026ee:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d028      	beq.n	8002748 <SearchAvailableNode+0x84>
		//Serial.println("Adelante1");

		if (Map[x][y].visitado > 1) {
 80026f6:	486c      	ldr	r0, [pc, #432]	; (80028a8 <SearchAvailableNode+0x1e4>)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	6879      	ldr	r1, [r7, #4]
 80026fc:	461a      	mov	r2, r3
 80026fe:	0052      	lsls	r2, r2, #1
 8002700:	441a      	add	r2, r3
 8002702:	00d3      	lsls	r3, r2, #3
 8002704:	461a      	mov	r2, r3
 8002706:	460b      	mov	r3, r1
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	440b      	add	r3, r1
 800270c:	01db      	lsls	r3, r3, #7
 800270e:	4413      	add	r3, r2
 8002710:	4403      	add	r3, r0
 8002712:	3310      	adds	r3, #16
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2b01      	cmp	r3, #1
 8002718:	dd07      	ble.n	800272a <SearchAvailableNode+0x66>
			EliminateNode(x, y);
 800271a:	6839      	ldr	r1, [r7, #0]
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f7ff ff9b 	bl	8002658 <EliminateNode>
			intUartSend(4000);
 8002722:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8002726:	f7ff f821 	bl	800176c <intUartSend>
		}
		last.x = actual.x;
 800272a:	4b60      	ldr	r3, [pc, #384]	; (80028ac <SearchAvailableNode+0x1e8>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a60      	ldr	r2, [pc, #384]	; (80028b0 <SearchAvailableNode+0x1ec>)
 8002730:	6013      	str	r3, [r2, #0]
		last.y = actual.y;
 8002732:	4b5e      	ldr	r3, [pc, #376]	; (80028ac <SearchAvailableNode+0x1e8>)
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	4a5e      	ldr	r2, [pc, #376]	; (80028b0 <SearchAvailableNode+0x1ec>)
 8002738:	6053      	str	r3, [r2, #4]
		/*intUartSend(Map[actual.x][actual.y].Lados[DERECHA]);
		intUartSend(Map[actual.x][actual.y].Lados[ADELANTE]);
		intUartSend(Map[actual.x][actual.y].Lados[IZQUIERDA]);
		intUartSend(Map[actual.x][actual.y].Lados[ATRAS]);*/
		moveNode(direcciones[ADELANTE]);
 800273a:	4b5a      	ldr	r3, [pc, #360]	; (80028a4 <SearchAvailableNode+0x1e0>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4618      	mov	r0, r3
 8002740:	f000 f8b8 	bl	80028b4 <moveNode>

		return ADELANTE;
 8002744:	2300      	movs	r3, #0
 8002746:	e0a9      	b.n	800289c <SearchAvailableNode+0x1d8>
	} else if (Map[x][y].Lados[direcciones[IZQUIERDA]] != 1) {
 8002748:	4b56      	ldr	r3, [pc, #344]	; (80028a4 <SearchAvailableNode+0x1e0>)
 800274a:	6858      	ldr	r0, [r3, #4]
 800274c:	4c56      	ldr	r4, [pc, #344]	; (80028a8 <SearchAvailableNode+0x1e4>)
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	6879      	ldr	r1, [r7, #4]
 8002752:	461a      	mov	r2, r3
 8002754:	0052      	lsls	r2, r2, #1
 8002756:	441a      	add	r2, r3
 8002758:	0053      	lsls	r3, r2, #1
 800275a:	461a      	mov	r2, r3
 800275c:	460b      	mov	r3, r1
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	440b      	add	r3, r1
 8002762:	015b      	lsls	r3, r3, #5
 8002764:	4413      	add	r3, r2
 8002766:	4403      	add	r3, r0
 8002768:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800276c:	2b01      	cmp	r3, #1
 800276e:	d02b      	beq.n	80027c8 <SearchAvailableNode+0x104>
		//Serial.println("IZQUIERDA1");l
		//moveNode(IZQUIERDA);
		//rotateAxis(IZQUIERDA);
		if (Map[x][y].visitado > 1) {
 8002770:	484d      	ldr	r0, [pc, #308]	; (80028a8 <SearchAvailableNode+0x1e4>)
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	6879      	ldr	r1, [r7, #4]
 8002776:	461a      	mov	r2, r3
 8002778:	0052      	lsls	r2, r2, #1
 800277a:	441a      	add	r2, r3
 800277c:	00d3      	lsls	r3, r2, #3
 800277e:	461a      	mov	r2, r3
 8002780:	460b      	mov	r3, r1
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	440b      	add	r3, r1
 8002786:	01db      	lsls	r3, r3, #7
 8002788:	4413      	add	r3, r2
 800278a:	4403      	add	r3, r0
 800278c:	3310      	adds	r3, #16
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2b01      	cmp	r3, #1
 8002792:	dd07      	ble.n	80027a4 <SearchAvailableNode+0xe0>
			EliminateNode(x, y);
 8002794:	6839      	ldr	r1, [r7, #0]
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f7ff ff5e 	bl	8002658 <EliminateNode>
			intUartSend(4000);
 800279c:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80027a0:	f7fe ffe4 	bl	800176c <intUartSend>
		}
		last.x = actual.x;
 80027a4:	4b41      	ldr	r3, [pc, #260]	; (80028ac <SearchAvailableNode+0x1e8>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a41      	ldr	r2, [pc, #260]	; (80028b0 <SearchAvailableNode+0x1ec>)
 80027aa:	6013      	str	r3, [r2, #0]
		last.y = actual.y;
 80027ac:	4b3f      	ldr	r3, [pc, #252]	; (80028ac <SearchAvailableNode+0x1e8>)
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	4a3f      	ldr	r2, [pc, #252]	; (80028b0 <SearchAvailableNode+0x1ec>)
 80027b2:	6053      	str	r3, [r2, #4]
		/*intUartSend(Map[actual.x][actual.y].Lados[DERECHA]);
		intUartSend(Map[actual.x][actual.y].Lados[ADELANTE]);
		intUartSend(Map[actual.x][actual.y].Lados[IZQUIERDA]);
		intUartSend(Map[actual.x][actual.y].Lados[ATRAS]);*/
		moveNode(direcciones[IZQUIERDA]);
 80027b4:	4b3b      	ldr	r3, [pc, #236]	; (80028a4 <SearchAvailableNode+0x1e0>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f000 f87b 	bl	80028b4 <moveNode>

		rotateAxis(IZQUIERDA);
 80027be:	2001      	movs	r0, #1
 80027c0:	f000 fae2 	bl	8002d88 <rotateAxis>
		return IZQUIERDA;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e069      	b.n	800289c <SearchAvailableNode+0x1d8>
	} else if (Map[x][y].Lados[direcciones[DERECHA]] != 1) {
 80027c8:	4b36      	ldr	r3, [pc, #216]	; (80028a4 <SearchAvailableNode+0x1e0>)
 80027ca:	68d8      	ldr	r0, [r3, #12]
 80027cc:	4c36      	ldr	r4, [pc, #216]	; (80028a8 <SearchAvailableNode+0x1e4>)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	6879      	ldr	r1, [r7, #4]
 80027d2:	461a      	mov	r2, r3
 80027d4:	0052      	lsls	r2, r2, #1
 80027d6:	441a      	add	r2, r3
 80027d8:	0053      	lsls	r3, r2, #1
 80027da:	461a      	mov	r2, r3
 80027dc:	460b      	mov	r3, r1
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	440b      	add	r3, r1
 80027e2:	015b      	lsls	r3, r3, #5
 80027e4:	4413      	add	r3, r2
 80027e6:	4403      	add	r3, r0
 80027e8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d02b      	beq.n	8002848 <SearchAvailableNode+0x184>
		//Serial.println("DERECHA1");
		if (Map[x][y].visitado > 1) {
 80027f0:	482d      	ldr	r0, [pc, #180]	; (80028a8 <SearchAvailableNode+0x1e4>)
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	6879      	ldr	r1, [r7, #4]
 80027f6:	461a      	mov	r2, r3
 80027f8:	0052      	lsls	r2, r2, #1
 80027fa:	441a      	add	r2, r3
 80027fc:	00d3      	lsls	r3, r2, #3
 80027fe:	461a      	mov	r2, r3
 8002800:	460b      	mov	r3, r1
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	440b      	add	r3, r1
 8002806:	01db      	lsls	r3, r3, #7
 8002808:	4413      	add	r3, r2
 800280a:	4403      	add	r3, r0
 800280c:	3310      	adds	r3, #16
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2b01      	cmp	r3, #1
 8002812:	dd07      	ble.n	8002824 <SearchAvailableNode+0x160>
			EliminateNode(x, y);
 8002814:	6839      	ldr	r1, [r7, #0]
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f7ff ff1e 	bl	8002658 <EliminateNode>
			intUartSend(4000);
 800281c:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8002820:	f7fe ffa4 	bl	800176c <intUartSend>
		}
		last.x = actual.x;
 8002824:	4b21      	ldr	r3, [pc, #132]	; (80028ac <SearchAvailableNode+0x1e8>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a21      	ldr	r2, [pc, #132]	; (80028b0 <SearchAvailableNode+0x1ec>)
 800282a:	6013      	str	r3, [r2, #0]
		last.y = actual.y;
 800282c:	4b1f      	ldr	r3, [pc, #124]	; (80028ac <SearchAvailableNode+0x1e8>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	4a1f      	ldr	r2, [pc, #124]	; (80028b0 <SearchAvailableNode+0x1ec>)
 8002832:	6053      	str	r3, [r2, #4]
		/*intUartSend(Map[actual.x][actual.y].Lados[DERECHA]);
		intUartSend(Map[actual.x][actual.y].Lados[ADELANTE]);
		intUartSend(Map[actual.x][actual.y].Lados[IZQUIERDA]);
		intUartSend(Map[actual.x][actual.y].Lados[ATRAS]);*/
		moveNode(direcciones[DERECHA]);
 8002834:	4b1b      	ldr	r3, [pc, #108]	; (80028a4 <SearchAvailableNode+0x1e0>)
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	4618      	mov	r0, r3
 800283a:	f000 f83b 	bl	80028b4 <moveNode>
		rotateAxis(DERECHA);
 800283e:	2003      	movs	r0, #3
 8002840:	f000 faa2 	bl	8002d88 <rotateAxis>
		return DERECHA;
 8002844:	2303      	movs	r3, #3
 8002846:	e029      	b.n	800289c <SearchAvailableNode+0x1d8>
	} else if (Map[x][y].Lados[direcciones[ATRAS]] != 1) {
 8002848:	4b16      	ldr	r3, [pc, #88]	; (80028a4 <SearchAvailableNode+0x1e0>)
 800284a:	6898      	ldr	r0, [r3, #8]
 800284c:	4c16      	ldr	r4, [pc, #88]	; (80028a8 <SearchAvailableNode+0x1e4>)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	6879      	ldr	r1, [r7, #4]
 8002852:	461a      	mov	r2, r3
 8002854:	0052      	lsls	r2, r2, #1
 8002856:	441a      	add	r2, r3
 8002858:	0053      	lsls	r3, r2, #1
 800285a:	461a      	mov	r2, r3
 800285c:	460b      	mov	r3, r1
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	440b      	add	r3, r1
 8002862:	015b      	lsls	r3, r3, #5
 8002864:	4413      	add	r3, r2
 8002866:	4403      	add	r3, r0
 8002868:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800286c:	2b01      	cmp	r3, #1
 800286e:	d014      	beq.n	800289a <SearchAvailableNode+0x1d6>
		last.x = actual.x;
 8002870:	4b0e      	ldr	r3, [pc, #56]	; (80028ac <SearchAvailableNode+0x1e8>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a0e      	ldr	r2, [pc, #56]	; (80028b0 <SearchAvailableNode+0x1ec>)
 8002876:	6013      	str	r3, [r2, #0]
		last.y = actual.y;
 8002878:	4b0c      	ldr	r3, [pc, #48]	; (80028ac <SearchAvailableNode+0x1e8>)
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	4a0c      	ldr	r2, [pc, #48]	; (80028b0 <SearchAvailableNode+0x1ec>)
 800287e:	6053      	str	r3, [r2, #4]
		/*intUartSend(Map[actual.x][actual.y].Lados[DERECHA]);
		intUartSend(Map[actual.x][actual.y].Lados[ADELANTE]);
		intUartSend(Map[actual.x][actual.y].Lados[IZQUIERDA]);
		intUartSend(Map[actual.x][actual.y].Lados[ATRAS]);*/
		moveNode(direcciones[ATRAS]);
 8002880:	4b08      	ldr	r3, [pc, #32]	; (80028a4 <SearchAvailableNode+0x1e0>)
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	4618      	mov	r0, r3
 8002886:	f000 f815 	bl	80028b4 <moveNode>

		rotateAxis(DERECHA);
 800288a:	2003      	movs	r0, #3
 800288c:	f000 fa7c 	bl	8002d88 <rotateAxis>
		rotateAxis(DERECHA);
 8002890:	2003      	movs	r0, #3
 8002892:	f000 fa79 	bl	8002d88 <rotateAxis>
		return ATRAS;
 8002896:	2302      	movs	r3, #2
 8002898:	e000      	b.n	800289c <SearchAvailableNode+0x1d8>
	}
	return 0;
 800289a:	2300      	movs	r3, #0
}
 800289c:	4618      	mov	r0, r3
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd90      	pop	{r4, r7, pc}
 80028a4:	20001200 	.word	0x20001200
 80028a8:	2000139c 	.word	0x2000139c
 80028ac:	2000138c 	.word	0x2000138c
 80028b0:	20001394 	.word	0x20001394

080028b4 <moveNode>:
void moveNode(int lado) {
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
	switch (lado) {
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2b03      	cmp	r3, #3
 80028c0:	d822      	bhi.n	8002908 <moveNode+0x54>
 80028c2:	a201      	add	r2, pc, #4	; (adr r2, 80028c8 <moveNode+0x14>)
 80028c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028c8:	080028d9 	.word	0x080028d9
 80028cc:	080028e5 	.word	0x080028e5
 80028d0:	080028fd 	.word	0x080028fd
 80028d4:	080028f1 	.word	0x080028f1
	case ADELANTE:
		//if (visual.y != ALTO - 1) {
		actual.y++;
 80028d8:	4b0e      	ldr	r3, [pc, #56]	; (8002914 <moveNode+0x60>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	3301      	adds	r3, #1
 80028de:	4a0d      	ldr	r2, [pc, #52]	; (8002914 <moveNode+0x60>)
 80028e0:	6053      	str	r3, [r2, #4]
		//visual.y++;
		//}
		break;
 80028e2:	e011      	b.n	8002908 <moveNode+0x54>
	case IZQUIERDA:
		//if (visual.x != 0) {
		actual.x--;
 80028e4:	4b0b      	ldr	r3, [pc, #44]	; (8002914 <moveNode+0x60>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	3b01      	subs	r3, #1
 80028ea:	4a0a      	ldr	r2, [pc, #40]	; (8002914 <moveNode+0x60>)
 80028ec:	6013      	str	r3, [r2, #0]
		//visual.x--;
		//}
		break;
 80028ee:	e00b      	b.n	8002908 <moveNode+0x54>
	case DERECHA:
		// if (visual.x != ANCHO - 1) {
		actual.x++;
 80028f0:	4b08      	ldr	r3, [pc, #32]	; (8002914 <moveNode+0x60>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	3301      	adds	r3, #1
 80028f6:	4a07      	ldr	r2, [pc, #28]	; (8002914 <moveNode+0x60>)
 80028f8:	6013      	str	r3, [r2, #0]
		// visual.x++;
		// }
		break;
 80028fa:	e005      	b.n	8002908 <moveNode+0x54>
	case ATRAS:
		// if (visual.y != 0) {
		actual.y--;
 80028fc:	4b05      	ldr	r3, [pc, #20]	; (8002914 <moveNode+0x60>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	3b01      	subs	r3, #1
 8002902:	4a04      	ldr	r2, [pc, #16]	; (8002914 <moveNode+0x60>)
 8002904:	6053      	str	r3, [r2, #4]
		// visual.y--;
		// }

		break;
 8002906:	bf00      	nop
	}
}
 8002908:	bf00      	nop
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	bc80      	pop	{r7}
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	2000138c 	.word	0x2000138c

08002918 <movementMachine>:
 offset = 30;
 }
 break;
 }
 }*/
void movementMachine(int move) {
 8002918:	b590      	push	{r4, r7, lr}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
	switch (movementState) {
 8002920:	4bae      	ldr	r3, [pc, #696]	; (8002bdc <movementMachine+0x2c4>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2b05      	cmp	r3, #5
 8002926:	f200 81a7 	bhi.w	8002c78 <movementMachine+0x360>
 800292a:	a201      	add	r2, pc, #4	; (adr r2, 8002930 <movementMachine+0x18>)
 800292c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002930:	08002999 	.word	0x08002999
 8002934:	08002a3b 	.word	0x08002a3b
 8002938:	08002b4b 	.word	0x08002b4b
 800293c:	08002ac3 	.word	0x08002ac3
 8002940:	08002c79 	.word	0x08002c79
 8002944:	08002949 	.word	0x08002949
	case OFF:
		runMotor(OFF, MOTOR_A);
 8002948:	2100      	movs	r1, #0
 800294a:	2005      	movs	r0, #5
 800294c:	f000 fe0e 	bl	800356c <runMotor>
		runMotor(OFF, MOTOR_B);
 8002950:	2101      	movs	r1, #1
 8002952:	2005      	movs	r0, #5
 8002954:	f000 fe0a 	bl	800356c <runMotor>
		if (move != OFF) {
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2b05      	cmp	r3, #5
 800295c:	f000 818b 	beq.w	8002c76 <movementMachine+0x35e>
			movementState = move;
 8002960:	4a9e      	ldr	r2, [pc, #632]	; (8002bdc <movementMachine+0x2c4>)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6013      	str	r3, [r2, #0]
			TIM3->CNT = 0;
 8002966:	4b9e      	ldr	r3, [pc, #632]	; (8002be0 <movementMachine+0x2c8>)
 8002968:	2200      	movs	r2, #0
 800296a:	625a      	str	r2, [r3, #36]	; 0x24
			TIM4->CNT = 0;
 800296c:	4b9d      	ldr	r3, [pc, #628]	; (8002be4 <movementMachine+0x2cc>)
 800296e:	2200      	movs	r2, #0
 8002970:	625a      	str	r2, [r3, #36]	; 0x24
			if(Sensors[3] > Sensors[1]){
 8002972:	4b9d      	ldr	r3, [pc, #628]	; (8002be8 <movementMachine+0x2d0>)
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	4a9c      	ldr	r2, [pc, #624]	; (8002be8 <movementMachine+0x2d0>)
 8002978:	6852      	ldr	r2, [r2, #4]
 800297a:	4611      	mov	r1, r2
 800297c:	4618      	mov	r0, r3
 800297e:	f7fe fb75 	bl	800106c <__aeabi_fcmpgt>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d003      	beq.n	8002990 <movementMachine+0x78>
				F = 1 ;
 8002988:	4b98      	ldr	r3, [pc, #608]	; (8002bec <movementMachine+0x2d4>)
 800298a:	2201      	movs	r2, #1
 800298c:	601a      	str	r2, [r3, #0]
			}else {
				F = 0;
			}
			//intUartSend(TIM3->CNT);
		}
		break;
 800298e:	e172      	b.n	8002c76 <movementMachine+0x35e>
				F = 0;
 8002990:	4b96      	ldr	r3, [pc, #600]	; (8002bec <movementMachine+0x2d4>)
 8002992:	2200      	movs	r2, #0
 8002994:	601a      	str	r2, [r3, #0]
		break;
 8002996:	e16e      	b.n	8002c76 <movementMachine+0x35e>
	case ADELANTE:
		//intUartSend((int) calcularDistancia(TIM3->CNT));
		if ((calcularDistancia((TIM3->CNT >> 1)) < forwardChoice[choice])
 8002998:	4b91      	ldr	r3, [pc, #580]	; (8002be0 <movementMachine+0x2c8>)
 800299a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299c:	085b      	lsrs	r3, r3, #1
 800299e:	4618      	mov	r0, r3
 80029a0:	f000 fdbe 	bl	8003520 <calcularDistancia>
 80029a4:	4604      	mov	r4, r0
 80029a6:	4b92      	ldr	r3, [pc, #584]	; (8002bf0 <movementMachine+0x2d8>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a92      	ldr	r2, [pc, #584]	; (8002bf4 <movementMachine+0x2dc>)
 80029ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7fe f94b 	bl	8000c4c <__aeabi_i2f>
 80029b6:	4603      	mov	r3, r0
 80029b8:	4619      	mov	r1, r3
 80029ba:	4620      	mov	r0, r4
 80029bc:	f7fe fb38 	bl	8001030 <__aeabi_fcmplt>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d116      	bne.n	80029f4 <movementMachine+0xdc>
				|| (calcularDistancia((TIM4->CNT >> 1)) < forwardChoice[choice]) /*&& Sensors[2] > 5*/) {
 80029c6:	4b87      	ldr	r3, [pc, #540]	; (8002be4 <movementMachine+0x2cc>)
 80029c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ca:	085b      	lsrs	r3, r3, #1
 80029cc:	4618      	mov	r0, r3
 80029ce:	f000 fda7 	bl	8003520 <calcularDistancia>
 80029d2:	4604      	mov	r4, r0
 80029d4:	4b86      	ldr	r3, [pc, #536]	; (8002bf0 <movementMachine+0x2d8>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a86      	ldr	r2, [pc, #536]	; (8002bf4 <movementMachine+0x2dc>)
 80029da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029de:	4618      	mov	r0, r3
 80029e0:	f7fe f934 	bl	8000c4c <__aeabi_i2f>
 80029e4:	4603      	mov	r3, r0
 80029e6:	4619      	mov	r1, r3
 80029e8:	4620      	mov	r0, r4
 80029ea:	f7fe fb21 	bl	8001030 <__aeabi_fcmplt>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d00a      	beq.n	8002a0a <movementMachine+0xf2>
			moveStraight();
 80029f4:	f000 fb4a 	bl	800308c <moveStraight>
			runMotor(ADELANTE, MOTOR_A);
 80029f8:	2100      	movs	r1, #0
 80029fa:	2000      	movs	r0, #0
 80029fc:	f000 fdb6 	bl	800356c <runMotor>
			runMotor(ADELANTE, MOTOR_B);
 8002a00:	2101      	movs	r1, #1
 8002a02:	2000      	movs	r0, #0
 8002a04:	f000 fdb2 	bl	800356c <runMotor>
			TIM3->CNT = 0;
			TIM4->CNT = 0;
			offset = 0;
			//intUartSend(10);
		}
		break;
 8002a08:	e136      	b.n	8002c78 <movementMachine+0x360>
			movimientoFlag = 1;
 8002a0a:	4b7b      	ldr	r3, [pc, #492]	; (8002bf8 <movementMachine+0x2e0>)
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	601a      	str	r2, [r3, #0]
			movementState = OFF;
 8002a10:	4b72      	ldr	r3, [pc, #456]	; (8002bdc <movementMachine+0x2c4>)
 8002a12:	2205      	movs	r2, #5
 8002a14:	601a      	str	r2, [r3, #0]
			runMotor(OFF, MOTOR_A);
 8002a16:	2100      	movs	r1, #0
 8002a18:	2005      	movs	r0, #5
 8002a1a:	f000 fda7 	bl	800356c <runMotor>
			runMotor(OFF, MOTOR_B);
 8002a1e:	2101      	movs	r1, #1
 8002a20:	2005      	movs	r0, #5
 8002a22:	f000 fda3 	bl	800356c <runMotor>
			TIM3->CNT = 0;
 8002a26:	4b6e      	ldr	r3, [pc, #440]	; (8002be0 <movementMachine+0x2c8>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	625a      	str	r2, [r3, #36]	; 0x24
			TIM4->CNT = 0;
 8002a2c:	4b6d      	ldr	r3, [pc, #436]	; (8002be4 <movementMachine+0x2cc>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	625a      	str	r2, [r3, #36]	; 0x24
			offset = 0;
 8002a32:	4b72      	ldr	r3, [pc, #456]	; (8002bfc <movementMachine+0x2e4>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	601a      	str	r2, [r3, #0]
		break;
 8002a38:	e11e      	b.n	8002c78 <movementMachine+0x360>
	case IZQUIERDA:
		TIM2->CCR3 = baseChoice[choice];
 8002a3a:	4b6d      	ldr	r3, [pc, #436]	; (8002bf0 <movementMachine+0x2d8>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a70      	ldr	r2, [pc, #448]	; (8002c00 <movementMachine+0x2e8>)
 8002a40:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002a44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a48:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM2->CCR4 = baseChoice[choice];
 8002a4a:	4b69      	ldr	r3, [pc, #420]	; (8002bf0 <movementMachine+0x2d8>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a6c      	ldr	r2, [pc, #432]	; (8002c00 <movementMachine+0x2e8>)
 8002a50:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002a54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a58:	641a      	str	r2, [r3, #64]	; 0x40
		//intUartSend((TIM3->CNT));
		if (calcularDistancia((TIM4->CNT)) < LeftChoice[choice]) {
 8002a5a:	4b62      	ldr	r3, [pc, #392]	; (8002be4 <movementMachine+0x2cc>)
 8002a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f000 fd5e 	bl	8003520 <calcularDistancia>
 8002a64:	4604      	mov	r4, r0
 8002a66:	4b62      	ldr	r3, [pc, #392]	; (8002bf0 <movementMachine+0x2d8>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a66      	ldr	r2, [pc, #408]	; (8002c04 <movementMachine+0x2ec>)
 8002a6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7fe f8eb 	bl	8000c4c <__aeabi_i2f>
 8002a76:	4603      	mov	r3, r0
 8002a78:	4619      	mov	r1, r3
 8002a7a:	4620      	mov	r0, r4
 8002a7c:	f7fe fad8 	bl	8001030 <__aeabi_fcmplt>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d008      	beq.n	8002a98 <movementMachine+0x180>
			runMotor(ADELANTE, MOTOR_A);
 8002a86:	2100      	movs	r1, #0
 8002a88:	2000      	movs	r0, #0
 8002a8a:	f000 fd6f 	bl	800356c <runMotor>
			runMotor(ATRAS, MOTOR_B);
 8002a8e:	2101      	movs	r1, #1
 8002a90:	2002      	movs	r0, #2
 8002a92:	f000 fd6b 	bl	800356c <runMotor>
			TIM3->CNT = 0;
			TIM4->CNT = 0;
			offset = 30;
			//intUartSend(9);
		}
		break;
 8002a96:	e0ef      	b.n	8002c78 <movementMachine+0x360>
			movementState = ADELANTE;
 8002a98:	4b50      	ldr	r3, [pc, #320]	; (8002bdc <movementMachine+0x2c4>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	601a      	str	r2, [r3, #0]
			runMotor(OFF, MOTOR_A);
 8002a9e:	2100      	movs	r1, #0
 8002aa0:	2005      	movs	r0, #5
 8002aa2:	f000 fd63 	bl	800356c <runMotor>
			runMotor(OFF, MOTOR_B);
 8002aa6:	2101      	movs	r1, #1
 8002aa8:	2005      	movs	r0, #5
 8002aaa:	f000 fd5f 	bl	800356c <runMotor>
			TIM3->CNT = 0;
 8002aae:	4b4c      	ldr	r3, [pc, #304]	; (8002be0 <movementMachine+0x2c8>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	625a      	str	r2, [r3, #36]	; 0x24
			TIM4->CNT = 0;
 8002ab4:	4b4b      	ldr	r3, [pc, #300]	; (8002be4 <movementMachine+0x2cc>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	625a      	str	r2, [r3, #36]	; 0x24
			offset = 30;
 8002aba:	4b50      	ldr	r3, [pc, #320]	; (8002bfc <movementMachine+0x2e4>)
 8002abc:	221e      	movs	r2, #30
 8002abe:	601a      	str	r2, [r3, #0]
		break;
 8002ac0:	e0da      	b.n	8002c78 <movementMachine+0x360>
	case DERECHA:
		TIM2->CCR3 = baseChoice[choice];
 8002ac2:	4b4b      	ldr	r3, [pc, #300]	; (8002bf0 <movementMachine+0x2d8>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a4e      	ldr	r2, [pc, #312]	; (8002c00 <movementMachine+0x2e8>)
 8002ac8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002acc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002ad0:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM2->CCR4 = baseChoice[choice];
 8002ad2:	4b47      	ldr	r3, [pc, #284]	; (8002bf0 <movementMachine+0x2d8>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a4a      	ldr	r2, [pc, #296]	; (8002c00 <movementMachine+0x2e8>)
 8002ad8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002adc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002ae0:	641a      	str	r2, [r3, #64]	; 0x40
		if (calcularDistancia((TIM3->CNT)) < RightChoice[choice]) {
 8002ae2:	4b3f      	ldr	r3, [pc, #252]	; (8002be0 <movementMachine+0x2c8>)
 8002ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f000 fd1a 	bl	8003520 <calcularDistancia>
 8002aec:	4604      	mov	r4, r0
 8002aee:	4b40      	ldr	r3, [pc, #256]	; (8002bf0 <movementMachine+0x2d8>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a45      	ldr	r2, [pc, #276]	; (8002c08 <movementMachine+0x2f0>)
 8002af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7fe f8a7 	bl	8000c4c <__aeabi_i2f>
 8002afe:	4603      	mov	r3, r0
 8002b00:	4619      	mov	r1, r3
 8002b02:	4620      	mov	r0, r4
 8002b04:	f7fe fa94 	bl	8001030 <__aeabi_fcmplt>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d008      	beq.n	8002b20 <movementMachine+0x208>
			runMotor(ATRAS, MOTOR_A);
 8002b0e:	2100      	movs	r1, #0
 8002b10:	2002      	movs	r0, #2
 8002b12:	f000 fd2b 	bl	800356c <runMotor>
			runMotor(ADELANTE, MOTOR_B);
 8002b16:	2101      	movs	r1, #1
 8002b18:	2000      	movs	r0, #0
 8002b1a:	f000 fd27 	bl	800356c <runMotor>
			TIM3->CNT = 0;
			TIM4->CNT = 0;
			offset = 30;
			//intUartSend(8);
		}
		break;
 8002b1e:	e0ab      	b.n	8002c78 <movementMachine+0x360>
			movementState = ADELANTE;
 8002b20:	4b2e      	ldr	r3, [pc, #184]	; (8002bdc <movementMachine+0x2c4>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	601a      	str	r2, [r3, #0]
			runMotor(OFF, MOTOR_A);
 8002b26:	2100      	movs	r1, #0
 8002b28:	2005      	movs	r0, #5
 8002b2a:	f000 fd1f 	bl	800356c <runMotor>
			runMotor(OFF, MOTOR_B);
 8002b2e:	2101      	movs	r1, #1
 8002b30:	2005      	movs	r0, #5
 8002b32:	f000 fd1b 	bl	800356c <runMotor>
			TIM3->CNT = 0;
 8002b36:	4b2a      	ldr	r3, [pc, #168]	; (8002be0 <movementMachine+0x2c8>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	625a      	str	r2, [r3, #36]	; 0x24
			TIM4->CNT = 0;
 8002b3c:	4b29      	ldr	r3, [pc, #164]	; (8002be4 <movementMachine+0x2cc>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	625a      	str	r2, [r3, #36]	; 0x24
			offset = 30;
 8002b42:	4b2e      	ldr	r3, [pc, #184]	; (8002bfc <movementMachine+0x2e4>)
 8002b44:	221e      	movs	r2, #30
 8002b46:	601a      	str	r2, [r3, #0]
		break;
 8002b48:	e096      	b.n	8002c78 <movementMachine+0x360>
	case ATRAS:
		TIM2->CCR3 = baseChoice[choice];
 8002b4a:	4b29      	ldr	r3, [pc, #164]	; (8002bf0 <movementMachine+0x2d8>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a2c      	ldr	r2, [pc, #176]	; (8002c00 <movementMachine+0x2e8>)
 8002b50:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002b54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b58:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM2->CCR4 = baseChoice[choice];
 8002b5a:	4b25      	ldr	r3, [pc, #148]	; (8002bf0 <movementMachine+0x2d8>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a28      	ldr	r2, [pc, #160]	; (8002c00 <movementMachine+0x2e8>)
 8002b60:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002b64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b68:	641a      	str	r2, [r3, #64]	; 0x40
		if(F == 1){
 8002b6a:	4b20      	ldr	r3, [pc, #128]	; (8002bec <movementMachine+0x2d4>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d14c      	bne.n	8002c0c <movementMachine+0x2f4>
			if (calcularDistancia((TIM4->CNT)) < LeftChoice[choice] * 2) {
 8002b72:	4b1c      	ldr	r3, [pc, #112]	; (8002be4 <movementMachine+0x2cc>)
 8002b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b76:	4618      	mov	r0, r3
 8002b78:	f000 fcd2 	bl	8003520 <calcularDistancia>
 8002b7c:	4604      	mov	r4, r0
 8002b7e:	4b1c      	ldr	r3, [pc, #112]	; (8002bf0 <movementMachine+0x2d8>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a20      	ldr	r2, [pc, #128]	; (8002c04 <movementMachine+0x2ec>)
 8002b84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7fe f85e 	bl	8000c4c <__aeabi_i2f>
 8002b90:	4603      	mov	r3, r0
 8002b92:	4619      	mov	r1, r3
 8002b94:	4620      	mov	r0, r4
 8002b96:	f7fe fa4b 	bl	8001030 <__aeabi_fcmplt>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d008      	beq.n	8002bb2 <movementMachine+0x29a>
						runMotor(ADELANTE, MOTOR_A);
 8002ba0:	2100      	movs	r1, #0
 8002ba2:	2000      	movs	r0, #0
 8002ba4:	f000 fce2 	bl	800356c <runMotor>
						runMotor(ATRAS, MOTOR_B);
 8002ba8:	2101      	movs	r1, #1
 8002baa:	2002      	movs	r0, #2
 8002bac:	f000 fcde 	bl	800356c <runMotor>
						offset = 30;
						//intUartSend(7);
					}
		}

		break;
 8002bb0:	e062      	b.n	8002c78 <movementMachine+0x360>
						movementState = ADELANTE;
 8002bb2:	4b0a      	ldr	r3, [pc, #40]	; (8002bdc <movementMachine+0x2c4>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	601a      	str	r2, [r3, #0]
						runMotor(OFF, MOTOR_A);
 8002bb8:	2100      	movs	r1, #0
 8002bba:	2005      	movs	r0, #5
 8002bbc:	f000 fcd6 	bl	800356c <runMotor>
						runMotor(OFF, MOTOR_B);
 8002bc0:	2101      	movs	r1, #1
 8002bc2:	2005      	movs	r0, #5
 8002bc4:	f000 fcd2 	bl	800356c <runMotor>
						TIM3->CNT = 0;
 8002bc8:	4b05      	ldr	r3, [pc, #20]	; (8002be0 <movementMachine+0x2c8>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	625a      	str	r2, [r3, #36]	; 0x24
						TIM4->CNT = 0;
 8002bce:	4b05      	ldr	r3, [pc, #20]	; (8002be4 <movementMachine+0x2cc>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	625a      	str	r2, [r3, #36]	; 0x24
						offset = 30;
 8002bd4:	4b09      	ldr	r3, [pc, #36]	; (8002bfc <movementMachine+0x2e4>)
 8002bd6:	221e      	movs	r2, #30
 8002bd8:	601a      	str	r2, [r3, #0]
		break;
 8002bda:	e04d      	b.n	8002c78 <movementMachine+0x360>
 8002bdc:	20000038 	.word	0x20000038
 8002be0:	40000400 	.word	0x40000400
 8002be4:	40000800 	.word	0x40000800
 8002be8:	200011f0 	.word	0x200011f0
 8002bec:	20002bc8 	.word	0x20002bc8
 8002bf0:	2000124c 	.word	0x2000124c
 8002bf4:	20000020 	.word	0x20000020
 8002bf8:	20001260 	.word	0x20001260
 8002bfc:	20001268 	.word	0x20001268
 8002c00:	20000018 	.word	0x20000018
 8002c04:	20000030 	.word	0x20000030
 8002c08:	20000028 	.word	0x20000028
			if (calcularDistancia((TIM3->CNT)) < RightChoice[choice] * 2) {
 8002c0c:	4b1c      	ldr	r3, [pc, #112]	; (8002c80 <movementMachine+0x368>)
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c10:	4618      	mov	r0, r3
 8002c12:	f000 fc85 	bl	8003520 <calcularDistancia>
 8002c16:	4604      	mov	r4, r0
 8002c18:	4b1a      	ldr	r3, [pc, #104]	; (8002c84 <movementMachine+0x36c>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a1a      	ldr	r2, [pc, #104]	; (8002c88 <movementMachine+0x370>)
 8002c1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c22:	005b      	lsls	r3, r3, #1
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7fe f811 	bl	8000c4c <__aeabi_i2f>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	4620      	mov	r0, r4
 8002c30:	f7fe f9fe 	bl	8001030 <__aeabi_fcmplt>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d008      	beq.n	8002c4c <movementMachine+0x334>
						runMotor(ATRAS, MOTOR_A);
 8002c3a:	2100      	movs	r1, #0
 8002c3c:	2002      	movs	r0, #2
 8002c3e:	f000 fc95 	bl	800356c <runMotor>
						runMotor(ADELANTE, MOTOR_B);
 8002c42:	2101      	movs	r1, #1
 8002c44:	2000      	movs	r0, #0
 8002c46:	f000 fc91 	bl	800356c <runMotor>
		break;
 8002c4a:	e015      	b.n	8002c78 <movementMachine+0x360>
						movementState = ADELANTE;
 8002c4c:	4b0f      	ldr	r3, [pc, #60]	; (8002c8c <movementMachine+0x374>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	601a      	str	r2, [r3, #0]
						runMotor(OFF, MOTOR_A);
 8002c52:	2100      	movs	r1, #0
 8002c54:	2005      	movs	r0, #5
 8002c56:	f000 fc89 	bl	800356c <runMotor>
						runMotor(OFF, MOTOR_B);
 8002c5a:	2101      	movs	r1, #1
 8002c5c:	2005      	movs	r0, #5
 8002c5e:	f000 fc85 	bl	800356c <runMotor>
						TIM3->CNT = 0;
 8002c62:	4b07      	ldr	r3, [pc, #28]	; (8002c80 <movementMachine+0x368>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	625a      	str	r2, [r3, #36]	; 0x24
						TIM4->CNT = 0;
 8002c68:	4b09      	ldr	r3, [pc, #36]	; (8002c90 <movementMachine+0x378>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	625a      	str	r2, [r3, #36]	; 0x24
						offset = 30;
 8002c6e:	4b09      	ldr	r3, [pc, #36]	; (8002c94 <movementMachine+0x37c>)
 8002c70:	221e      	movs	r2, #30
 8002c72:	601a      	str	r2, [r3, #0]
		break;
 8002c74:	e000      	b.n	8002c78 <movementMachine+0x360>
		break;
 8002c76:	bf00      	nop

	}
}
 8002c78:	bf00      	nop
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd90      	pop	{r4, r7, pc}
 8002c80:	40000400 	.word	0x40000400
 8002c84:	2000124c 	.word	0x2000124c
 8002c88:	20000028 	.word	0x20000028
 8002c8c:	20000038 	.word	0x20000038
 8002c90:	40000800 	.word	0x40000800
 8002c94:	20001268 	.word	0x20001268

08002c98 <CreateNode>:

void CreateNode(int x, int y) {
 8002c98:	b5b0      	push	{r4, r5, r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
	Map[x][y].Lados[direcciones[ADELANTE]] = lecturaSensor(ADELANTE, Sensors);
 8002ca2:	4936      	ldr	r1, [pc, #216]	; (8002d7c <CreateNode+0xe4>)
 8002ca4:	2000      	movs	r0, #0
 8002ca6:	f000 fccd 	bl	8003644 <lecturaSensor>
 8002caa:	4603      	mov	r3, r0
 8002cac:	4a34      	ldr	r2, [pc, #208]	; (8002d80 <CreateNode+0xe8>)
 8002cae:	6814      	ldr	r4, [r2, #0]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7fe f9e5 	bl	8001080 <__aeabi_f2iz>
 8002cb6:	4d33      	ldr	r5, [pc, #204]	; (8002d84 <CreateNode+0xec>)
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	6879      	ldr	r1, [r7, #4]
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	0052      	lsls	r2, r2, #1
 8002cc0:	441a      	add	r2, r3
 8002cc2:	0053      	lsls	r3, r2, #1
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	005b      	lsls	r3, r3, #1
 8002cca:	440b      	add	r3, r1
 8002ccc:	015b      	lsls	r3, r3, #5
 8002cce:	4413      	add	r3, r2
 8002cd0:	4423      	add	r3, r4
 8002cd2:	f845 0023 	str.w	r0, [r5, r3, lsl #2]
	Map[x][y].Lados[direcciones[IZQUIERDA]] = lecturaSensor(IZQUIERDA, Sensors);
 8002cd6:	4929      	ldr	r1, [pc, #164]	; (8002d7c <CreateNode+0xe4>)
 8002cd8:	2001      	movs	r0, #1
 8002cda:	f000 fcb3 	bl	8003644 <lecturaSensor>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	4a27      	ldr	r2, [pc, #156]	; (8002d80 <CreateNode+0xe8>)
 8002ce2:	6854      	ldr	r4, [r2, #4]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7fe f9cb 	bl	8001080 <__aeabi_f2iz>
 8002cea:	4d26      	ldr	r5, [pc, #152]	; (8002d84 <CreateNode+0xec>)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	6879      	ldr	r1, [r7, #4]
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	0052      	lsls	r2, r2, #1
 8002cf4:	441a      	add	r2, r3
 8002cf6:	0053      	lsls	r3, r2, #1
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	440b      	add	r3, r1
 8002d00:	015b      	lsls	r3, r3, #5
 8002d02:	4413      	add	r3, r2
 8002d04:	4423      	add	r3, r4
 8002d06:	f845 0023 	str.w	r0, [r5, r3, lsl #2]
	Map[x][y].Lados[direcciones[DERECHA]] = lecturaSensor(DERECHA, Sensors);
 8002d0a:	491c      	ldr	r1, [pc, #112]	; (8002d7c <CreateNode+0xe4>)
 8002d0c:	2003      	movs	r0, #3
 8002d0e:	f000 fc99 	bl	8003644 <lecturaSensor>
 8002d12:	4603      	mov	r3, r0
 8002d14:	4a1a      	ldr	r2, [pc, #104]	; (8002d80 <CreateNode+0xe8>)
 8002d16:	68d4      	ldr	r4, [r2, #12]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7fe f9b1 	bl	8001080 <__aeabi_f2iz>
 8002d1e:	4d19      	ldr	r5, [pc, #100]	; (8002d84 <CreateNode+0xec>)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	6879      	ldr	r1, [r7, #4]
 8002d24:	461a      	mov	r2, r3
 8002d26:	0052      	lsls	r2, r2, #1
 8002d28:	441a      	add	r2, r3
 8002d2a:	0053      	lsls	r3, r2, #1
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	460b      	mov	r3, r1
 8002d30:	005b      	lsls	r3, r3, #1
 8002d32:	440b      	add	r3, r1
 8002d34:	015b      	lsls	r3, r3, #5
 8002d36:	4413      	add	r3, r2
 8002d38:	4423      	add	r3, r4
 8002d3a:	f845 0023 	str.w	r0, [r5, r3, lsl #2]
	Map[x][y].Lados[direcciones[ATRAS]] = lecturaSensor(ATRAS, Sensors);
 8002d3e:	490f      	ldr	r1, [pc, #60]	; (8002d7c <CreateNode+0xe4>)
 8002d40:	2002      	movs	r0, #2
 8002d42:	f000 fc7f 	bl	8003644 <lecturaSensor>
 8002d46:	4603      	mov	r3, r0
 8002d48:	4a0d      	ldr	r2, [pc, #52]	; (8002d80 <CreateNode+0xe8>)
 8002d4a:	6894      	ldr	r4, [r2, #8]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7fe f997 	bl	8001080 <__aeabi_f2iz>
 8002d52:	4d0c      	ldr	r5, [pc, #48]	; (8002d84 <CreateNode+0xec>)
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	6879      	ldr	r1, [r7, #4]
 8002d58:	461a      	mov	r2, r3
 8002d5a:	0052      	lsls	r2, r2, #1
 8002d5c:	441a      	add	r2, r3
 8002d5e:	0053      	lsls	r3, r2, #1
 8002d60:	461a      	mov	r2, r3
 8002d62:	460b      	mov	r3, r1
 8002d64:	005b      	lsls	r3, r3, #1
 8002d66:	440b      	add	r3, r1
 8002d68:	015b      	lsls	r3, r3, #5
 8002d6a:	4413      	add	r3, r2
 8002d6c:	4423      	add	r3, r4
 8002d6e:	f845 0023 	str.w	r0, [r5, r3, lsl #2]

}
 8002d72:	bf00      	nop
 8002d74:	3708      	adds	r7, #8
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bdb0      	pop	{r4, r5, r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	200011f0 	.word	0x200011f0
 8002d80:	20001200 	.word	0x20001200
 8002d84:	2000139c 	.word	0x2000139c

08002d88 <rotateAxis>:

void rotateAxis(int direccion) {
 8002d88:	b480      	push	{r7}
 8002d8a:	b085      	sub	sp, #20
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
	switch (direccion) {
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d021      	beq.n	8002dda <rotateAxis+0x52>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2b03      	cmp	r3, #3
 8002d9a:	d13c      	bne.n	8002e16 <rotateAxis+0x8e>
	case DERECHA:
		for (int i = 0; i < 4; i++) {
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	60fb      	str	r3, [r7, #12]
 8002da0:	e017      	b.n	8002dd2 <rotateAxis+0x4a>
			direcciones[i] = direcciones[i] - 1;
 8002da2:	4a1f      	ldr	r2, [pc, #124]	; (8002e20 <rotateAxis+0x98>)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002daa:	1e5a      	subs	r2, r3, #1
 8002dac:	491c      	ldr	r1, [pc, #112]	; (8002e20 <rotateAxis+0x98>)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (direcciones[i] == -1) {
 8002db4:	4a1a      	ldr	r2, [pc, #104]	; (8002e20 <rotateAxis+0x98>)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc0:	d104      	bne.n	8002dcc <rotateAxis+0x44>
				direcciones[i] = 3;
 8002dc2:	4a17      	ldr	r2, [pc, #92]	; (8002e20 <rotateAxis+0x98>)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2103      	movs	r1, #3
 8002dc8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int i = 0; i < 4; i++) {
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	3301      	adds	r3, #1
 8002dd0:	60fb      	str	r3, [r7, #12]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2b03      	cmp	r3, #3
 8002dd6:	dde4      	ble.n	8002da2 <rotateAxis+0x1a>
			}
		}
		break;
 8002dd8:	e01d      	b.n	8002e16 <rotateAxis+0x8e>
	case IZQUIERDA:
		for (int j = 0; j < 4; j++) {
 8002dda:	2300      	movs	r3, #0
 8002ddc:	60bb      	str	r3, [r7, #8]
 8002dde:	e016      	b.n	8002e0e <rotateAxis+0x86>
			direcciones[j] = direcciones[j] + 1;
 8002de0:	4a0f      	ldr	r2, [pc, #60]	; (8002e20 <rotateAxis+0x98>)
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002de8:	1c5a      	adds	r2, r3, #1
 8002dea:	490d      	ldr	r1, [pc, #52]	; (8002e20 <rotateAxis+0x98>)
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (direcciones[j] == 4) {
 8002df2:	4a0b      	ldr	r2, [pc, #44]	; (8002e20 <rotateAxis+0x98>)
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dfa:	2b04      	cmp	r3, #4
 8002dfc:	d104      	bne.n	8002e08 <rotateAxis+0x80>
				direcciones[j] = 0;
 8002dfe:	4a08      	ldr	r2, [pc, #32]	; (8002e20 <rotateAxis+0x98>)
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	2100      	movs	r1, #0
 8002e04:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int j = 0; j < 4; j++) {
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	60bb      	str	r3, [r7, #8]
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	2b03      	cmp	r3, #3
 8002e12:	dde5      	ble.n	8002de0 <rotateAxis+0x58>
			}
		}
		break;
 8002e14:	bf00      	nop
	}
}
 8002e16:	bf00      	nop
 8002e18:	3714      	adds	r7, #20
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bc80      	pop	{r7}
 8002e1e:	4770      	bx	lr
 8002e20:	20001200 	.word	0x20001200

08002e24 <resetAxis>:

void resetAxis() {
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
	for (int i = 0; i < 4; i++) {
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	607b      	str	r3, [r7, #4]
 8002e2e:	e007      	b.n	8002e40 <resetAxis+0x1c>
		direcciones[i] = i;
 8002e30:	4908      	ldr	r1, [pc, #32]	; (8002e54 <resetAxis+0x30>)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < 4; i++) {
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	607b      	str	r3, [r7, #4]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2b03      	cmp	r3, #3
 8002e44:	ddf4      	ble.n	8002e30 <resetAxis+0xc>
	}
}
 8002e46:	bf00      	nop
 8002e48:	bf00      	nop
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bc80      	pop	{r7}
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	20001200 	.word	0x20001200

08002e58 <PrintMap>:

void PrintMap() {
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
	for (int i = 0; i < alto; i++) {
 8002e5e:	2300      	movs	r3, #0
 8002e60:	607b      	str	r3, [r7, #4]
 8002e62:	e032      	b.n	8002eca <PrintMap+0x72>
		for (int j = 0; j < ancho; j++) {
 8002e64:	2300      	movs	r3, #0
 8002e66:	603b      	str	r3, [r7, #0]
 8002e68:	e020      	b.n	8002eac <PrintMap+0x54>
			//SerialBT.print(Map[i][j].visitado);
			//SerialBT.print(" ");
			TX_BUFFER[0] = Map[i][j].visitado + '0';
 8002e6a:	481c      	ldr	r0, [pc, #112]	; (8002edc <PrintMap+0x84>)
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	6879      	ldr	r1, [r7, #4]
 8002e70:	461a      	mov	r2, r3
 8002e72:	0052      	lsls	r2, r2, #1
 8002e74:	441a      	add	r2, r3
 8002e76:	00d3      	lsls	r3, r2, #3
 8002e78:	461a      	mov	r2, r3
 8002e7a:	460b      	mov	r3, r1
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	440b      	add	r3, r1
 8002e80:	01db      	lsls	r3, r3, #7
 8002e82:	4413      	add	r3, r2
 8002e84:	4403      	add	r3, r0
 8002e86:	3310      	adds	r3, #16
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	3330      	adds	r3, #48	; 0x30
 8002e8e:	b2da      	uxtb	r2, r3
 8002e90:	4b13      	ldr	r3, [pc, #76]	; (8002ee0 <PrintMap+0x88>)
 8002e92:	701a      	strb	r2, [r3, #0]
			TX_BUFFER[1] = ' ';
 8002e94:	4b12      	ldr	r3, [pc, #72]	; (8002ee0 <PrintMap+0x88>)
 8002e96:	2220      	movs	r2, #32
 8002e98:	705a      	strb	r2, [r3, #1]
			HAL_UART_Transmit(&huart1, TX_BUFFER, 2, 100);
 8002e9a:	2364      	movs	r3, #100	; 0x64
 8002e9c:	2202      	movs	r2, #2
 8002e9e:	4910      	ldr	r1, [pc, #64]	; (8002ee0 <PrintMap+0x88>)
 8002ea0:	4810      	ldr	r0, [pc, #64]	; (8002ee4 <PrintMap+0x8c>)
 8002ea2:	f003 fd22 	bl	80068ea <HAL_UART_Transmit>
		for (int j = 0; j < ancho; j++) {
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	603b      	str	r3, [r7, #0]
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	2b0f      	cmp	r3, #15
 8002eb0:	dddb      	ble.n	8002e6a <PrintMap+0x12>
		}
		TX_BUFFER[0] = '\n';
 8002eb2:	4b0b      	ldr	r3, [pc, #44]	; (8002ee0 <PrintMap+0x88>)
 8002eb4:	220a      	movs	r2, #10
 8002eb6:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, TX_BUFFER, 1, 100);
 8002eb8:	2364      	movs	r3, #100	; 0x64
 8002eba:	2201      	movs	r2, #1
 8002ebc:	4908      	ldr	r1, [pc, #32]	; (8002ee0 <PrintMap+0x88>)
 8002ebe:	4809      	ldr	r0, [pc, #36]	; (8002ee4 <PrintMap+0x8c>)
 8002ec0:	f003 fd13 	bl	80068ea <HAL_UART_Transmit>
	for (int i = 0; i < alto; i++) {
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	607b      	str	r3, [r7, #4]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2b0f      	cmp	r3, #15
 8002ece:	ddc9      	ble.n	8002e64 <PrintMap+0xc>
	}
}
 8002ed0:	bf00      	nop
 8002ed2:	bf00      	nop
 8002ed4:	3708      	adds	r7, #8
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	2000139c 	.word	0x2000139c
 8002ee0:	20001230 	.word	0x20001230
 8002ee4:	20002ca4 	.word	0x20002ca4

08002ee8 <HAL_ADC_ConvCpltCallback>:

// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 10; i++) {
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	60fb      	str	r3, [r7, #12]
 8002ef4:	e029      	b.n	8002f4a <HAL_ADC_ConvCpltCallback+0x62>
		CNY70[i] = adc_buf[i * 4];
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	4a27      	ldr	r2, [pc, #156]	; (8002f98 <HAL_ADC_ConvCpltCallback+0xb0>)
 8002efc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002f00:	4926      	ldr	r1, [pc, #152]	; (8002f9c <HAL_ADC_ConvCpltCallback+0xb4>)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SHARP_1[i] = adc_buf[i * 4 + 1];
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	4a22      	ldr	r2, [pc, #136]	; (8002f98 <HAL_ADC_ConvCpltCallback+0xb0>)
 8002f10:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002f14:	4922      	ldr	r1, [pc, #136]	; (8002fa0 <HAL_ADC_ConvCpltCallback+0xb8>)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SHARP_2[i] = adc_buf[i * 4 + 2];
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	3302      	adds	r3, #2
 8002f22:	4a1d      	ldr	r2, [pc, #116]	; (8002f98 <HAL_ADC_ConvCpltCallback+0xb0>)
 8002f24:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002f28:	491e      	ldr	r1, [pc, #120]	; (8002fa4 <HAL_ADC_ConvCpltCallback+0xbc>)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SHARP_3[i] = adc_buf[i * 4 + 3];
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	3303      	adds	r3, #3
 8002f36:	4a18      	ldr	r2, [pc, #96]	; (8002f98 <HAL_ADC_ConvCpltCallback+0xb0>)
 8002f38:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002f3c:	491a      	ldr	r1, [pc, #104]	; (8002fa8 <HAL_ADC_ConvCpltCallback+0xc0>)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < 10; i++) {
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	3301      	adds	r3, #1
 8002f48:	60fb      	str	r3, [r7, #12]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2b09      	cmp	r3, #9
 8002f4e:	ddd2      	ble.n	8002ef6 <HAL_ADC_ConvCpltCallback+0xe>
	}
	Sensors[0] = lecturaCNY70(10, CNY70);
 8002f50:	4912      	ldr	r1, [pc, #72]	; (8002f9c <HAL_ADC_ConvCpltCallback+0xb4>)
 8002f52:	200a      	movs	r0, #10
 8002f54:	f000 fc48 	bl	80037e8 <lecturaCNY70>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7fd fe76 	bl	8000c4c <__aeabi_i2f>
 8002f60:	4603      	mov	r3, r0
 8002f62:	4a12      	ldr	r2, [pc, #72]	; (8002fac <HAL_ADC_ConvCpltCallback+0xc4>)
 8002f64:	6013      	str	r3, [r2, #0]
	Sensors[1] = lecSensor(10, SHARP_1);
 8002f66:	490e      	ldr	r1, [pc, #56]	; (8002fa0 <HAL_ADC_ConvCpltCallback+0xb8>)
 8002f68:	200a      	movs	r0, #10
 8002f6a:	f000 fbbd 	bl	80036e8 <lecSensor>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	4a0e      	ldr	r2, [pc, #56]	; (8002fac <HAL_ADC_ConvCpltCallback+0xc4>)
 8002f72:	6053      	str	r3, [r2, #4]
	Sensors[2] = lecSensor(10, SHARP_2);
 8002f74:	490b      	ldr	r1, [pc, #44]	; (8002fa4 <HAL_ADC_ConvCpltCallback+0xbc>)
 8002f76:	200a      	movs	r0, #10
 8002f78:	f000 fbb6 	bl	80036e8 <lecSensor>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	4a0b      	ldr	r2, [pc, #44]	; (8002fac <HAL_ADC_ConvCpltCallback+0xc4>)
 8002f80:	6093      	str	r3, [r2, #8]
	Sensors[3] = lecSensor(10, SHARP_3);
 8002f82:	4909      	ldr	r1, [pc, #36]	; (8002fa8 <HAL_ADC_ConvCpltCallback+0xc0>)
 8002f84:	200a      	movs	r0, #10
 8002f86:	f000 fbaf 	bl	80036e8 <lecSensor>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	4a07      	ldr	r2, [pc, #28]	; (8002fac <HAL_ADC_ConvCpltCallback+0xc4>)
 8002f8e:	60d3      	str	r3, [r2, #12]

}
 8002f90:	bf00      	nop
 8002f92:	3710      	adds	r7, #16
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	20000150 	.word	0x20000150
 8002f9c:	20001150 	.word	0x20001150
 8002fa0:	20001178 	.word	0x20001178
 8002fa4:	200011a0 	.word	0x200011a0
 8002fa8:	200011c8 	.word	0x200011c8
 8002fac:	200011f0 	.word	0x200011f0

08002fb0 <MAP>:

uint32_t MAP(uint32_t au32_IN, uint32_t au32_INmin, uint32_t au32_INmax,
		uint32_t au32_OUTmin, uint32_t au32_OUTmax) {
 8002fb0:	b480      	push	{r7}
 8002fb2:	b085      	sub	sp, #20
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	607a      	str	r2, [r7, #4]
 8002fbc:	603b      	str	r3, [r7, #0]
	return ((((au32_IN - au32_INmin) * (au32_OUTmax - au32_OUTmin))
 8002fbe:	68fa      	ldr	r2, [r7, #12]
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	69b9      	ldr	r1, [r7, #24]
 8002fc6:	683a      	ldr	r2, [r7, #0]
 8002fc8:	1a8a      	subs	r2, r1, r2
 8002fca:	fb03 f202 	mul.w	r2, r3, r2
			/ (au32_INmax - au32_INmin)) + au32_OUTmin);
 8002fce:	6879      	ldr	r1, [r7, #4]
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	1acb      	subs	r3, r1, r3
 8002fd4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	4413      	add	r3, r2
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3714      	adds	r7, #20
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bc80      	pop	{r7}
 8002fe4:	4770      	bx	lr

08002fe6 <constrain>:

int constrain(int x, int a, int b) {
 8002fe6:	b480      	push	{r7}
 8002fe8:	b085      	sub	sp, #20
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	60f8      	str	r0, [r7, #12]
 8002fee:	60b9      	str	r1, [r7, #8]
 8002ff0:	607a      	str	r2, [r7, #4]
	if (x < a) {
 8002ff2:	68fa      	ldr	r2, [r7, #12]
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	da01      	bge.n	8002ffe <constrain+0x18>
		return a;
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	e006      	b.n	800300c <constrain+0x26>
	} else if (b < x) {
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	429a      	cmp	r2, r3
 8003004:	da01      	bge.n	800300a <constrain+0x24>
		return b;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	e000      	b.n	800300c <constrain+0x26>
	} else
		return x;
 800300a:	68fb      	ldr	r3, [r7, #12]
}
 800300c:	4618      	mov	r0, r3
 800300e:	3714      	adds	r7, #20
 8003010:	46bd      	mov	sp, r7
 8003012:	bc80      	pop	{r7}
 8003014:	4770      	bx	lr
	...

08003018 <wallDetector>:

int wallDetector(int n, int d) {
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]
	switch (d) {
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	2b03      	cmp	r3, #3
 8003026:	d01b      	beq.n	8003060 <wallDetector+0x48>
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	2b03      	cmp	r3, #3
 800302c:	dc21      	bgt.n	8003072 <wallDetector+0x5a>
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d003      	beq.n	800303c <wallDetector+0x24>
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	2b01      	cmp	r3, #1
 8003038:	d009      	beq.n	800304e <wallDetector+0x36>
 800303a:	e01a      	b.n	8003072 <wallDetector+0x5a>
	case ADELANTE:
		if (n < MaxCenterDistance) {
 800303c:	4b10      	ldr	r3, [pc, #64]	; (8003080 <wallDetector+0x68>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	429a      	cmp	r2, r3
 8003044:	da01      	bge.n	800304a <wallDetector+0x32>
			return 1;
 8003046:	2301      	movs	r3, #1
 8003048:	e014      	b.n	8003074 <wallDetector+0x5c>
		} else {
			return 0;
 800304a:	2300      	movs	r3, #0
 800304c:	e012      	b.n	8003074 <wallDetector+0x5c>
		}
		break;

	case IZQUIERDA:
		if (n < MaxLeftDistance) {
 800304e:	4b0d      	ldr	r3, [pc, #52]	; (8003084 <wallDetector+0x6c>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	429a      	cmp	r2, r3
 8003056:	da01      	bge.n	800305c <wallDetector+0x44>
			return 1;
 8003058:	2301      	movs	r3, #1
 800305a:	e00b      	b.n	8003074 <wallDetector+0x5c>
		} else {
			return 0;
 800305c:	2300      	movs	r3, #0
 800305e:	e009      	b.n	8003074 <wallDetector+0x5c>
		}
		break;
	case DERECHA:
		if (n < MaxRightDistance) {
 8003060:	4b09      	ldr	r3, [pc, #36]	; (8003088 <wallDetector+0x70>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	429a      	cmp	r2, r3
 8003068:	da01      	bge.n	800306e <wallDetector+0x56>
			return 1;
 800306a:	2301      	movs	r3, #1
 800306c:	e002      	b.n	8003074 <wallDetector+0x5c>
		} else {
			return 0;
 800306e:	2300      	movs	r3, #0
 8003070:	e000      	b.n	8003074 <wallDetector+0x5c>
		}
		break;
	default:
		return 0;
 8003072:	2300      	movs	r3, #0
		break;
	}
}
 8003074:	4618      	mov	r0, r3
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	bc80      	pop	{r7}
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	20001224 	.word	0x20001224
 8003084:	20001220 	.word	0x20001220
 8003088:	2000121c 	.word	0x2000121c

0800308c <moveStraight>:

void moveStraight() {
 800308c:	b590      	push	{r4, r7, lr}
 800308e:	b083      	sub	sp, #12
 8003090:	af02      	add	r7, sp, #8
	if (Sensors[3] < MaxLeftDistance - 2 && Sensors[1] < MaxRightDistance - 2) {
 8003092:	4b36      	ldr	r3, [pc, #216]	; (800316c <moveStraight+0xe0>)
 8003094:	68dc      	ldr	r4, [r3, #12]
 8003096:	4b36      	ldr	r3, [pc, #216]	; (8003170 <moveStraight+0xe4>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	3b02      	subs	r3, #2
 800309c:	4618      	mov	r0, r3
 800309e:	f7fd fdd5 	bl	8000c4c <__aeabi_i2f>
 80030a2:	4603      	mov	r3, r0
 80030a4:	4619      	mov	r1, r3
 80030a6:	4620      	mov	r0, r4
 80030a8:	f7fd ffc2 	bl	8001030 <__aeabi_fcmplt>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d01c      	beq.n	80030ec <moveStraight+0x60>
 80030b2:	4b2e      	ldr	r3, [pc, #184]	; (800316c <moveStraight+0xe0>)
 80030b4:	685c      	ldr	r4, [r3, #4]
 80030b6:	4b2f      	ldr	r3, [pc, #188]	; (8003174 <moveStraight+0xe8>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	3b02      	subs	r3, #2
 80030bc:	4618      	mov	r0, r3
 80030be:	f7fd fdc5 	bl	8000c4c <__aeabi_i2f>
 80030c2:	4603      	mov	r3, r0
 80030c4:	4619      	mov	r1, r3
 80030c6:	4620      	mov	r0, r4
 80030c8:	f7fd ffb2 	bl	8001030 <__aeabi_fcmplt>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d00c      	beq.n	80030ec <moveStraight+0x60>
		//intUartSend(0);
		error = Sensors[3] - Sensors[1];
 80030d2:	4b26      	ldr	r3, [pc, #152]	; (800316c <moveStraight+0xe0>)
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	4a25      	ldr	r2, [pc, #148]	; (800316c <moveStraight+0xe0>)
 80030d8:	6852      	ldr	r2, [r2, #4]
 80030da:	4611      	mov	r1, r2
 80030dc:	4618      	mov	r0, r3
 80030de:	f7fd fcff 	bl	8000ae0 <__aeabi_fsub>
 80030e2:	4603      	mov	r3, r0
 80030e4:	461a      	mov	r2, r3
 80030e6:	4b24      	ldr	r3, [pc, #144]	; (8003178 <moveStraight+0xec>)
 80030e8:	601a      	str	r2, [r3, #0]
 80030ea:	e04f      	b.n	800318c <moveStraight+0x100>
	} else if (Sensors[3] < MaxLeftDistance) {
 80030ec:	4b1f      	ldr	r3, [pc, #124]	; (800316c <moveStraight+0xe0>)
 80030ee:	68dc      	ldr	r4, [r3, #12]
 80030f0:	4b1f      	ldr	r3, [pc, #124]	; (8003170 <moveStraight+0xe4>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4618      	mov	r0, r3
 80030f6:	f7fd fda9 	bl	8000c4c <__aeabi_i2f>
 80030fa:	4603      	mov	r3, r0
 80030fc:	4619      	mov	r1, r3
 80030fe:	4620      	mov	r0, r4
 8003100:	f7fd ff96 	bl	8001030 <__aeabi_fcmplt>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d010      	beq.n	800312c <moveStraight+0xa0>
		//intUartSend(1);
		error = Sensors[3] - CenterDistanceLeft;
 800310a:	4b18      	ldr	r3, [pc, #96]	; (800316c <moveStraight+0xe0>)
 800310c:	68dc      	ldr	r4, [r3, #12]
 800310e:	4b1b      	ldr	r3, [pc, #108]	; (800317c <moveStraight+0xf0>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4618      	mov	r0, r3
 8003114:	f7fd fd9a 	bl	8000c4c <__aeabi_i2f>
 8003118:	4603      	mov	r3, r0
 800311a:	4619      	mov	r1, r3
 800311c:	4620      	mov	r0, r4
 800311e:	f7fd fcdf 	bl	8000ae0 <__aeabi_fsub>
 8003122:	4603      	mov	r3, r0
 8003124:	461a      	mov	r2, r3
 8003126:	4b14      	ldr	r3, [pc, #80]	; (8003178 <moveStraight+0xec>)
 8003128:	601a      	str	r2, [r3, #0]
 800312a:	e02f      	b.n	800318c <moveStraight+0x100>
	} else if (Sensors[1] < MaxRightDistance) {
 800312c:	4b0f      	ldr	r3, [pc, #60]	; (800316c <moveStraight+0xe0>)
 800312e:	685c      	ldr	r4, [r3, #4]
 8003130:	4b10      	ldr	r3, [pc, #64]	; (8003174 <moveStraight+0xe8>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4618      	mov	r0, r3
 8003136:	f7fd fd89 	bl	8000c4c <__aeabi_i2f>
 800313a:	4603      	mov	r3, r0
 800313c:	4619      	mov	r1, r3
 800313e:	4620      	mov	r0, r4
 8003140:	f7fd ff76 	bl	8001030 <__aeabi_fcmplt>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d01c      	beq.n	8003184 <moveStraight+0xf8>
		//intUartSend(2);
		error = CenterDistanceRight - Sensors[1];
 800314a:	4b0d      	ldr	r3, [pc, #52]	; (8003180 <moveStraight+0xf4>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4618      	mov	r0, r3
 8003150:	f7fd fd7c 	bl	8000c4c <__aeabi_i2f>
 8003154:	4602      	mov	r2, r0
 8003156:	4b05      	ldr	r3, [pc, #20]	; (800316c <moveStraight+0xe0>)
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	4619      	mov	r1, r3
 800315c:	4610      	mov	r0, r2
 800315e:	f7fd fcbf 	bl	8000ae0 <__aeabi_fsub>
 8003162:	4603      	mov	r3, r0
 8003164:	461a      	mov	r2, r3
 8003166:	4b04      	ldr	r3, [pc, #16]	; (8003178 <moveStraight+0xec>)
 8003168:	601a      	str	r2, [r3, #0]
 800316a:	e00f      	b.n	800318c <moveStraight+0x100>
 800316c:	200011f0 	.word	0x200011f0
 8003170:	20001220 	.word	0x20001220
 8003174:	2000121c 	.word	0x2000121c
 8003178:	20002b9c 	.word	0x20002b9c
 800317c:	20001218 	.word	0x20001218
 8003180:	20001214 	.word	0x20001214
	} else {
		//intUartSend(3);
		error = 0;
 8003184:	4b7c      	ldr	r3, [pc, #496]	; (8003378 <moveStraight+0x2ec>)
 8003186:	f04f 0200 	mov.w	r2, #0
 800318a:	601a      	str	r2, [r3, #0]
	}

	timePrev = timeNow;
 800318c:	4b7b      	ldr	r3, [pc, #492]	; (800337c <moveStraight+0x2f0>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a7b      	ldr	r2, [pc, #492]	; (8003380 <moveStraight+0x2f4>)
 8003192:	6013      	str	r3, [r2, #0]
	timeNow = HAL_GetTick();
 8003194:	f000 fe96 	bl	8003ec4 <HAL_GetTick>
 8003198:	4603      	mov	r3, r0
 800319a:	4618      	mov	r0, r3
 800319c:	f7fd fd52 	bl	8000c44 <__aeabi_ui2f>
 80031a0:	4603      	mov	r3, r0
 80031a2:	4a76      	ldr	r2, [pc, #472]	; (800337c <moveStraight+0x2f0>)
 80031a4:	6013      	str	r3, [r2, #0]
	elapsedTime = (timeNow - timePrev) / 1000;
 80031a6:	4b75      	ldr	r3, [pc, #468]	; (800337c <moveStraight+0x2f0>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a75      	ldr	r2, [pc, #468]	; (8003380 <moveStraight+0x2f4>)
 80031ac:	6812      	ldr	r2, [r2, #0]
 80031ae:	4611      	mov	r1, r2
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7fd fc95 	bl	8000ae0 <__aeabi_fsub>
 80031b6:	4603      	mov	r3, r0
 80031b8:	4972      	ldr	r1, [pc, #456]	; (8003384 <moveStraight+0x2f8>)
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7fd fe4e 	bl	8000e5c <__aeabi_fdiv>
 80031c0:	4603      	mov	r3, r0
 80031c2:	461a      	mov	r2, r3
 80031c4:	4b70      	ldr	r3, [pc, #448]	; (8003388 <moveStraight+0x2fc>)
 80031c6:	601a      	str	r2, [r3, #0]
	pidD = KD * ((error - previousError) / elapsedTime);
 80031c8:	4b6b      	ldr	r3, [pc, #428]	; (8003378 <moveStraight+0x2ec>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a6f      	ldr	r2, [pc, #444]	; (800338c <moveStraight+0x300>)
 80031ce:	6812      	ldr	r2, [r2, #0]
 80031d0:	4611      	mov	r1, r2
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7fd fc84 	bl	8000ae0 <__aeabi_fsub>
 80031d8:	4603      	mov	r3, r0
 80031da:	461a      	mov	r2, r3
 80031dc:	4b6a      	ldr	r3, [pc, #424]	; (8003388 <moveStraight+0x2fc>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4619      	mov	r1, r3
 80031e2:	4610      	mov	r0, r2
 80031e4:	f7fd fe3a 	bl	8000e5c <__aeabi_fdiv>
 80031e8:	4603      	mov	r3, r0
 80031ea:	461a      	mov	r2, r3
 80031ec:	4b68      	ldr	r3, [pc, #416]	; (8003390 <moveStraight+0x304>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4619      	mov	r1, r3
 80031f2:	4610      	mov	r0, r2
 80031f4:	f7fd fd7e 	bl	8000cf4 <__aeabi_fmul>
 80031f8:	4603      	mov	r3, r0
 80031fa:	461a      	mov	r2, r3
 80031fc:	4b65      	ldr	r3, [pc, #404]	; (8003394 <moveStraight+0x308>)
 80031fe:	601a      	str	r2, [r3, #0]
	pidP = KP * error;
 8003200:	4b65      	ldr	r3, [pc, #404]	; (8003398 <moveStraight+0x30c>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a5c      	ldr	r2, [pc, #368]	; (8003378 <moveStraight+0x2ec>)
 8003206:	6812      	ldr	r2, [r2, #0]
 8003208:	4611      	mov	r1, r2
 800320a:	4618      	mov	r0, r3
 800320c:	f7fd fd72 	bl	8000cf4 <__aeabi_fmul>
 8003210:	4603      	mov	r3, r0
 8003212:	461a      	mov	r2, r3
 8003214:	4b61      	ldr	r3, [pc, #388]	; (800339c <moveStraight+0x310>)
 8003216:	601a      	str	r2, [r3, #0]
	pid = pidP + pidD;
 8003218:	4b60      	ldr	r3, [pc, #384]	; (800339c <moveStraight+0x310>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a5d      	ldr	r2, [pc, #372]	; (8003394 <moveStraight+0x308>)
 800321e:	6812      	ldr	r2, [r2, #0]
 8003220:	4611      	mov	r1, r2
 8003222:	4618      	mov	r0, r3
 8003224:	f7fd fc5e 	bl	8000ae4 <__addsf3>
 8003228:	4603      	mov	r3, r0
 800322a:	461a      	mov	r2, r3
 800322c:	4b5c      	ldr	r3, [pc, #368]	; (80033a0 <moveStraight+0x314>)
 800322e:	601a      	str	r2, [r3, #0]
	if (pid > velocity) {
 8003230:	4b5b      	ldr	r3, [pc, #364]	; (80033a0 <moveStraight+0x314>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a5b      	ldr	r2, [pc, #364]	; (80033a4 <moveStraight+0x318>)
 8003236:	6812      	ldr	r2, [r2, #0]
 8003238:	4611      	mov	r1, r2
 800323a:	4618      	mov	r0, r3
 800323c:	f7fd ff16 	bl	800106c <__aeabi_fcmpgt>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d003      	beq.n	800324e <moveStraight+0x1c2>
		//intUartSend(1);
		pid = velocity;
 8003246:	4b57      	ldr	r3, [pc, #348]	; (80033a4 <moveStraight+0x318>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a55      	ldr	r2, [pc, #340]	; (80033a0 <moveStraight+0x314>)
 800324c:	6013      	str	r3, [r2, #0]
	}
	if (pid < -velocity) {
 800324e:	4b55      	ldr	r3, [pc, #340]	; (80033a4 <moveStraight+0x318>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003256:	4a52      	ldr	r2, [pc, #328]	; (80033a0 <moveStraight+0x314>)
 8003258:	6812      	ldr	r2, [r2, #0]
 800325a:	4611      	mov	r1, r2
 800325c:	4618      	mov	r0, r3
 800325e:	f7fd ff05 	bl	800106c <__aeabi_fcmpgt>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d005      	beq.n	8003274 <moveStraight+0x1e8>
		//intUartSend(0);
		pid = -velocity;
 8003268:	4b4e      	ldr	r3, [pc, #312]	; (80033a4 <moveStraight+0x318>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003270:	4a4b      	ldr	r2, [pc, #300]	; (80033a0 <moveStraight+0x314>)
 8003272:	6013      	str	r3, [r2, #0]
	}
	//intUartSend(abs(pid));
	HAL_Delay(1);
 8003274:	2001      	movs	r0, #1
 8003276:	f000 fe2f 	bl	8003ed8 <HAL_Delay>
	motLeft = velocity - pid;
 800327a:	4b4a      	ldr	r3, [pc, #296]	; (80033a4 <moveStraight+0x318>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a48      	ldr	r2, [pc, #288]	; (80033a0 <moveStraight+0x314>)
 8003280:	6812      	ldr	r2, [r2, #0]
 8003282:	4611      	mov	r1, r2
 8003284:	4618      	mov	r0, r3
 8003286:	f7fd fc2b 	bl	8000ae0 <__aeabi_fsub>
 800328a:	4603      	mov	r3, r0
 800328c:	4618      	mov	r0, r3
 800328e:	f7fd fef7 	bl	8001080 <__aeabi_f2iz>
 8003292:	4603      	mov	r3, r0
 8003294:	4a44      	ldr	r2, [pc, #272]	; (80033a8 <moveStraight+0x31c>)
 8003296:	6013      	str	r3, [r2, #0]
	motRight = velocity + pid;
 8003298:	4b42      	ldr	r3, [pc, #264]	; (80033a4 <moveStraight+0x318>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a40      	ldr	r2, [pc, #256]	; (80033a0 <moveStraight+0x314>)
 800329e:	6812      	ldr	r2, [r2, #0]
 80032a0:	4611      	mov	r1, r2
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7fd fc1e 	bl	8000ae4 <__addsf3>
 80032a8:	4603      	mov	r3, r0
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7fd fee8 	bl	8001080 <__aeabi_f2iz>
 80032b0:	4603      	mov	r3, r0
 80032b2:	4a3e      	ldr	r2, [pc, #248]	; (80033ac <moveStraight+0x320>)
 80032b4:	6013      	str	r3, [r2, #0]
	if (motLeft < -1000) {
 80032b6:	4b3c      	ldr	r3, [pc, #240]	; (80033a8 <moveStraight+0x31c>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 80032be:	da02      	bge.n	80032c6 <moveStraight+0x23a>
		motLeft = -1000;
 80032c0:	4b39      	ldr	r3, [pc, #228]	; (80033a8 <moveStraight+0x31c>)
 80032c2:	4a3b      	ldr	r2, [pc, #236]	; (80033b0 <moveStraight+0x324>)
 80032c4:	601a      	str	r2, [r3, #0]
	}
	if (motRight < -1000) {
 80032c6:	4b39      	ldr	r3, [pc, #228]	; (80033ac <moveStraight+0x320>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 80032ce:	da02      	bge.n	80032d6 <moveStraight+0x24a>
		motRight = -1000;
 80032d0:	4b36      	ldr	r3, [pc, #216]	; (80033ac <moveStraight+0x320>)
 80032d2:	4a37      	ldr	r2, [pc, #220]	; (80033b0 <moveStraight+0x324>)
 80032d4:	601a      	str	r2, [r3, #0]
	}

	previousError = error;
 80032d6:	4b28      	ldr	r3, [pc, #160]	; (8003378 <moveStraight+0x2ec>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a2c      	ldr	r2, [pc, #176]	; (800338c <moveStraight+0x300>)
 80032dc:	6013      	str	r3, [r2, #0]
	motRight = constrain(motRight, -1000, 1000);
 80032de:	4b33      	ldr	r3, [pc, #204]	; (80033ac <moveStraight+0x320>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80032e6:	4932      	ldr	r1, [pc, #200]	; (80033b0 <moveStraight+0x324>)
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7ff fe7c 	bl	8002fe6 <constrain>
 80032ee:	4603      	mov	r3, r0
 80032f0:	4a2e      	ldr	r2, [pc, #184]	; (80033ac <moveStraight+0x320>)
 80032f2:	6013      	str	r3, [r2, #0]
	motLeft = constrain(motLeft, -1000, 1000);
 80032f4:	4b2c      	ldr	r3, [pc, #176]	; (80033a8 <moveStraight+0x31c>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80032fc:	492c      	ldr	r1, [pc, #176]	; (80033b0 <moveStraight+0x324>)
 80032fe:	4618      	mov	r0, r3
 8003300:	f7ff fe71 	bl	8002fe6 <constrain>
 8003304:	4603      	mov	r3, r0
 8003306:	4a28      	ldr	r2, [pc, #160]	; (80033a8 <moveStraight+0x31c>)
 8003308:	6013      	str	r3, [r2, #0]

	motRight = MAP(motRight, -1000, 1000, 0, baseChoice[choice] * 2);
 800330a:	4b28      	ldr	r3, [pc, #160]	; (80033ac <moveStraight+0x320>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4618      	mov	r0, r3
 8003310:	4b28      	ldr	r3, [pc, #160]	; (80033b4 <moveStraight+0x328>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a28      	ldr	r2, [pc, #160]	; (80033b8 <moveStraight+0x32c>)
 8003316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800331a:	005b      	lsls	r3, r3, #1
 800331c:	9300      	str	r3, [sp, #0]
 800331e:	2300      	movs	r3, #0
 8003320:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003324:	4922      	ldr	r1, [pc, #136]	; (80033b0 <moveStraight+0x324>)
 8003326:	f7ff fe43 	bl	8002fb0 <MAP>
 800332a:	4603      	mov	r3, r0
 800332c:	461a      	mov	r2, r3
 800332e:	4b1f      	ldr	r3, [pc, #124]	; (80033ac <moveStraight+0x320>)
 8003330:	601a      	str	r2, [r3, #0]
	motLeft = MAP(motLeft, -1000, 1000, 0, baseChoice[choice] * 2);
 8003332:	4b1d      	ldr	r3, [pc, #116]	; (80033a8 <moveStraight+0x31c>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4618      	mov	r0, r3
 8003338:	4b1e      	ldr	r3, [pc, #120]	; (80033b4 <moveStraight+0x328>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a1e      	ldr	r2, [pc, #120]	; (80033b8 <moveStraight+0x32c>)
 800333e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003342:	005b      	lsls	r3, r3, #1
 8003344:	9300      	str	r3, [sp, #0]
 8003346:	2300      	movs	r3, #0
 8003348:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800334c:	4918      	ldr	r1, [pc, #96]	; (80033b0 <moveStraight+0x324>)
 800334e:	f7ff fe2f 	bl	8002fb0 <MAP>
 8003352:	4603      	mov	r3, r0
 8003354:	461a      	mov	r2, r3
 8003356:	4b14      	ldr	r3, [pc, #80]	; (80033a8 <moveStraight+0x31c>)
 8003358:	601a      	str	r2, [r3, #0]
	TIM2->CCR4 = motLeft;
 800335a:	4b13      	ldr	r3, [pc, #76]	; (80033a8 <moveStraight+0x31c>)
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003362:	641a      	str	r2, [r3, #64]	; 0x40
	TIM2->CCR3 = motRight;
 8003364:	4b11      	ldr	r3, [pc, #68]	; (80033ac <moveStraight+0x320>)
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800336c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800336e:	bf00      	nop
 8003370:	3704      	adds	r7, #4
 8003372:	46bd      	mov	sp, r7
 8003374:	bd90      	pop	{r4, r7, pc}
 8003376:	bf00      	nop
 8003378:	20002b9c 	.word	0x20002b9c
 800337c:	20002bac 	.word	0x20002bac
 8003380:	20002bb0 	.word	0x20002bb0
 8003384:	447a0000 	.word	0x447a0000
 8003388:	20002ba8 	.word	0x20002ba8
 800338c:	20002ba4 	.word	0x20002ba4
 8003390:	20001240 	.word	0x20001240
 8003394:	20002bb8 	.word	0x20002bb8
 8003398:	2000123c 	.word	0x2000123c
 800339c:	20002bb4 	.word	0x20002bb4
 80033a0:	20002ba0 	.word	0x20002ba0
 80033a4:	20001244 	.word	0x20001244
 80033a8:	20002bbc 	.word	0x20002bbc
 80033ac:	20002bc0 	.word	0x20002bc0
 80033b0:	fffffc18 	.word	0xfffffc18
 80033b4:	2000124c 	.word	0x2000124c
 80033b8:	20000018 	.word	0x20000018

080033bc <btnMachine>:
void runForward() {
	runMotor(ADELANTE, MOTOR_A);
	runMotor(ADELANTE, MOTOR_B);
}

void btnMachine(int index) {
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
	switch (btns[index].estado) {
 80033c4:	4a50      	ldr	r2, [pc, #320]	; (8003508 <btnMachine+0x14c>)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	011b      	lsls	r3, r3, #4
 80033ca:	4413      	add	r3, r2
 80033cc:	3308      	adds	r3, #8
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d069      	beq.n	80034a8 <btnMachine+0xec>
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	f300 8092 	bgt.w	80034fe <btnMachine+0x142>
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d002      	beq.n	80033e4 <btnMachine+0x28>
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d02c      	beq.n	800343c <btnMachine+0x80>
			btns[index].flag = 1;
			btns[index].estado = ESPERA;
		}
		break;
	}
}
 80033e2:	e08c      	b.n	80034fe <btnMachine+0x142>
		btns[index].flag = 0;
 80033e4:	4a48      	ldr	r2, [pc, #288]	; (8003508 <btnMachine+0x14c>)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	011b      	lsls	r3, r3, #4
 80033ea:	4413      	add	r3, r2
 80033ec:	330c      	adds	r3, #12
 80033ee:	2200      	movs	r2, #0
 80033f0:	601a      	str	r2, [r3, #0]
		lecturaBtn = HAL_GPIO_ReadPin(btns[index].Port, btns[index].pin);
 80033f2:	4a45      	ldr	r2, [pc, #276]	; (8003508 <btnMachine+0x14c>)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	011b      	lsls	r3, r3, #4
 80033f8:	4413      	add	r3, r2
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	4942      	ldr	r1, [pc, #264]	; (8003508 <btnMachine+0x14c>)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	011b      	lsls	r3, r3, #4
 8003402:	440b      	add	r3, r1
 8003404:	3304      	adds	r3, #4
 8003406:	881b      	ldrh	r3, [r3, #0]
 8003408:	4619      	mov	r1, r3
 800340a:	4610      	mov	r0, r2
 800340c:	f001 ffd4 	bl	80053b8 <HAL_GPIO_ReadPin>
 8003410:	4603      	mov	r3, r0
 8003412:	461a      	mov	r2, r3
 8003414:	4b3d      	ldr	r3, [pc, #244]	; (800350c <btnMachine+0x150>)
 8003416:	601a      	str	r2, [r3, #0]
		if (lecturaBtn == 0) {
 8003418:	4b3c      	ldr	r3, [pc, #240]	; (800350c <btnMachine+0x150>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d169      	bne.n	80034f4 <btnMachine+0x138>
			ticks = HAL_GetTick();
 8003420:	f000 fd50 	bl	8003ec4 <HAL_GetTick>
 8003424:	4603      	mov	r3, r0
 8003426:	461a      	mov	r2, r3
 8003428:	4b39      	ldr	r3, [pc, #228]	; (8003510 <btnMachine+0x154>)
 800342a:	601a      	str	r2, [r3, #0]
			btns[index].estado = CONFIRMACION;
 800342c:	4a36      	ldr	r2, [pc, #216]	; (8003508 <btnMachine+0x14c>)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	011b      	lsls	r3, r3, #4
 8003432:	4413      	add	r3, r2
 8003434:	3308      	adds	r3, #8
 8003436:	2201      	movs	r2, #1
 8003438:	601a      	str	r2, [r3, #0]
		break;
 800343a:	e05b      	b.n	80034f4 <btnMachine+0x138>
		lecturaBtn = HAL_GPIO_ReadPin(btns[index].Port, btns[index].pin);
 800343c:	4a32      	ldr	r2, [pc, #200]	; (8003508 <btnMachine+0x14c>)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	011b      	lsls	r3, r3, #4
 8003442:	4413      	add	r3, r2
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	4930      	ldr	r1, [pc, #192]	; (8003508 <btnMachine+0x14c>)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	011b      	lsls	r3, r3, #4
 800344c:	440b      	add	r3, r1
 800344e:	3304      	adds	r3, #4
 8003450:	881b      	ldrh	r3, [r3, #0]
 8003452:	4619      	mov	r1, r3
 8003454:	4610      	mov	r0, r2
 8003456:	f001 ffaf 	bl	80053b8 <HAL_GPIO_ReadPin>
 800345a:	4603      	mov	r3, r0
 800345c:	461a      	mov	r2, r3
 800345e:	4b2b      	ldr	r3, [pc, #172]	; (800350c <btnMachine+0x150>)
 8003460:	601a      	str	r2, [r3, #0]
		if (lecturaBtn == 0 && HAL_GetTick() >= ticks + TICKS_BTN) {
 8003462:	4b2a      	ldr	r3, [pc, #168]	; (800350c <btnMachine+0x150>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d10e      	bne.n	8003488 <btnMachine+0xcc>
 800346a:	f000 fd2b 	bl	8003ec4 <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	4b27      	ldr	r3, [pc, #156]	; (8003510 <btnMachine+0x154>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	3319      	adds	r3, #25
 8003476:	429a      	cmp	r2, r3
 8003478:	d306      	bcc.n	8003488 <btnMachine+0xcc>
			btns[index].estado = LIBERACION;
 800347a:	4a23      	ldr	r2, [pc, #140]	; (8003508 <btnMachine+0x14c>)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	011b      	lsls	r3, r3, #4
 8003480:	4413      	add	r3, r2
 8003482:	3308      	adds	r3, #8
 8003484:	2202      	movs	r2, #2
 8003486:	601a      	str	r2, [r3, #0]
		if (lecturaBtn == 1 && ticks < TICKS_BTN) {
 8003488:	4b20      	ldr	r3, [pc, #128]	; (800350c <btnMachine+0x150>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d133      	bne.n	80034f8 <btnMachine+0x13c>
 8003490:	4b1f      	ldr	r3, [pc, #124]	; (8003510 <btnMachine+0x154>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2b18      	cmp	r3, #24
 8003496:	dc2f      	bgt.n	80034f8 <btnMachine+0x13c>
			btns[index].estado = ESPERA;
 8003498:	4a1b      	ldr	r2, [pc, #108]	; (8003508 <btnMachine+0x14c>)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	011b      	lsls	r3, r3, #4
 800349e:	4413      	add	r3, r2
 80034a0:	3308      	adds	r3, #8
 80034a2:	2200      	movs	r2, #0
 80034a4:	601a      	str	r2, [r3, #0]
		break;
 80034a6:	e027      	b.n	80034f8 <btnMachine+0x13c>
		lecturaBtn = HAL_GPIO_ReadPin(btns[index].Port, btns[index].pin);
 80034a8:	4a17      	ldr	r2, [pc, #92]	; (8003508 <btnMachine+0x14c>)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	011b      	lsls	r3, r3, #4
 80034ae:	4413      	add	r3, r2
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	4915      	ldr	r1, [pc, #84]	; (8003508 <btnMachine+0x14c>)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	011b      	lsls	r3, r3, #4
 80034b8:	440b      	add	r3, r1
 80034ba:	3304      	adds	r3, #4
 80034bc:	881b      	ldrh	r3, [r3, #0]
 80034be:	4619      	mov	r1, r3
 80034c0:	4610      	mov	r0, r2
 80034c2:	f001 ff79 	bl	80053b8 <HAL_GPIO_ReadPin>
 80034c6:	4603      	mov	r3, r0
 80034c8:	461a      	mov	r2, r3
 80034ca:	4b10      	ldr	r3, [pc, #64]	; (800350c <btnMachine+0x150>)
 80034cc:	601a      	str	r2, [r3, #0]
		if (lecturaBtn == 1) {
 80034ce:	4b0f      	ldr	r3, [pc, #60]	; (800350c <btnMachine+0x150>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d112      	bne.n	80034fc <btnMachine+0x140>
			btns[index].flag = 1;
 80034d6:	4a0c      	ldr	r2, [pc, #48]	; (8003508 <btnMachine+0x14c>)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	011b      	lsls	r3, r3, #4
 80034dc:	4413      	add	r3, r2
 80034de:	330c      	adds	r3, #12
 80034e0:	2201      	movs	r2, #1
 80034e2:	601a      	str	r2, [r3, #0]
			btns[index].estado = ESPERA;
 80034e4:	4a08      	ldr	r2, [pc, #32]	; (8003508 <btnMachine+0x14c>)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	011b      	lsls	r3, r3, #4
 80034ea:	4413      	add	r3, r2
 80034ec:	3308      	adds	r3, #8
 80034ee:	2200      	movs	r2, #0
 80034f0:	601a      	str	r2, [r3, #0]
		break;
 80034f2:	e003      	b.n	80034fc <btnMachine+0x140>
		break;
 80034f4:	bf00      	nop
 80034f6:	e002      	b.n	80034fe <btnMachine+0x142>
		break;
 80034f8:	bf00      	nop
 80034fa:	e000      	b.n	80034fe <btnMachine+0x142>
		break;
 80034fc:	bf00      	nop
}
 80034fe:	bf00      	nop
 8003500:	3708      	adds	r7, #8
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	2000126c 	.word	0x2000126c
 800350c:	2000122c 	.word	0x2000122c
 8003510:	20001228 	.word	0x20001228

08003514 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003514:	b480      	push	{r7}
 8003516:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003518:	b672      	cpsid	i
}
 800351a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800351c:	e7fe      	b.n	800351c <Error_Handler+0x8>
	...

08003520 <calcularDistancia>:
#include "motors.h"


int counterD, counterI;

float calcularDistancia(int counter) {
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  return ((counter) * 2.51 / 10);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f7fc ff6b 	bl	8000404 <__aeabi_i2d>
 800352e:	a30c      	add	r3, pc, #48	; (adr r3, 8003560 <calcularDistancia+0x40>)
 8003530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003534:	f7fc ffd0 	bl	80004d8 <__aeabi_dmul>
 8003538:	4602      	mov	r2, r0
 800353a:	460b      	mov	r3, r1
 800353c:	4610      	mov	r0, r2
 800353e:	4619      	mov	r1, r3
 8003540:	f04f 0200 	mov.w	r2, #0
 8003544:	4b08      	ldr	r3, [pc, #32]	; (8003568 <calcularDistancia+0x48>)
 8003546:	f7fd f8f1 	bl	800072c <__aeabi_ddiv>
 800354a:	4602      	mov	r2, r0
 800354c:	460b      	mov	r3, r1
 800354e:	4610      	mov	r0, r2
 8003550:	4619      	mov	r1, r3
 8003552:	f7fd fa71 	bl	8000a38 <__aeabi_d2f>
 8003556:	4603      	mov	r3, r0
}
 8003558:	4618      	mov	r0, r3
 800355a:	3708      	adds	r7, #8
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}
 8003560:	e147ae14 	.word	0xe147ae14
 8003564:	4004147a 	.word	0x4004147a
 8003568:	40240000 	.word	0x40240000

0800356c <runMotor>:
	} else {
		TIM4->CCR3 = power;
	}
}

void runMotor(int dir, int motor) {
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
	switch (dir) {
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2b05      	cmp	r3, #5
 800357a:	d03f      	beq.n	80035fc <runMotor+0x90>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2b05      	cmp	r3, #5
 8003580:	dc57      	bgt.n	8003632 <runMotor+0xc6>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d003      	beq.n	8003590 <runMotor+0x24>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2b02      	cmp	r3, #2
 800358c:	d01b      	beq.n	80035c6 <runMotor+0x5a>
			HAL_GPIO_WritePin(BIN1, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(BIN2, GPIO_PIN_RESET);
		}
		break;
	}
}
 800358e:	e050      	b.n	8003632 <runMotor+0xc6>
		if (motor == MOTOR_A) {
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d10a      	bne.n	80035ac <runMotor+0x40>
			HAL_GPIO_WritePin(AIN1, GPIO_PIN_RESET);
 8003596:	2200      	movs	r2, #0
 8003598:	2108      	movs	r1, #8
 800359a:	4828      	ldr	r0, [pc, #160]	; (800363c <runMotor+0xd0>)
 800359c:	f001 ff23 	bl	80053e6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(AIN2, GPIO_PIN_SET);
 80035a0:	2201      	movs	r2, #1
 80035a2:	2110      	movs	r1, #16
 80035a4:	4825      	ldr	r0, [pc, #148]	; (800363c <runMotor+0xd0>)
 80035a6:	f001 ff1e 	bl	80053e6 <HAL_GPIO_WritePin>
		break;
 80035aa:	e042      	b.n	8003632 <runMotor+0xc6>
			HAL_GPIO_WritePin(BIN1, GPIO_PIN_RESET);
 80035ac:	2200      	movs	r2, #0
 80035ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80035b2:	4823      	ldr	r0, [pc, #140]	; (8003640 <runMotor+0xd4>)
 80035b4:	f001 ff17 	bl	80053e6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BIN2, GPIO_PIN_SET);
 80035b8:	2201      	movs	r2, #1
 80035ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80035be:	4820      	ldr	r0, [pc, #128]	; (8003640 <runMotor+0xd4>)
 80035c0:	f001 ff11 	bl	80053e6 <HAL_GPIO_WritePin>
		break;
 80035c4:	e035      	b.n	8003632 <runMotor+0xc6>
		if (motor == MOTOR_A) {
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d10a      	bne.n	80035e2 <runMotor+0x76>
			HAL_GPIO_WritePin(AIN1, GPIO_PIN_SET);
 80035cc:	2201      	movs	r2, #1
 80035ce:	2108      	movs	r1, #8
 80035d0:	481a      	ldr	r0, [pc, #104]	; (800363c <runMotor+0xd0>)
 80035d2:	f001 ff08 	bl	80053e6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(AIN2, GPIO_PIN_RESET);
 80035d6:	2200      	movs	r2, #0
 80035d8:	2110      	movs	r1, #16
 80035da:	4818      	ldr	r0, [pc, #96]	; (800363c <runMotor+0xd0>)
 80035dc:	f001 ff03 	bl	80053e6 <HAL_GPIO_WritePin>
		break;
 80035e0:	e027      	b.n	8003632 <runMotor+0xc6>
			HAL_GPIO_WritePin(BIN1, GPIO_PIN_SET);
 80035e2:	2201      	movs	r2, #1
 80035e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80035e8:	4815      	ldr	r0, [pc, #84]	; (8003640 <runMotor+0xd4>)
 80035ea:	f001 fefc 	bl	80053e6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BIN2, GPIO_PIN_RESET);
 80035ee:	2200      	movs	r2, #0
 80035f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80035f4:	4812      	ldr	r0, [pc, #72]	; (8003640 <runMotor+0xd4>)
 80035f6:	f001 fef6 	bl	80053e6 <HAL_GPIO_WritePin>
		break;
 80035fa:	e01a      	b.n	8003632 <runMotor+0xc6>
		if (motor == MOTOR_A) {
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d10a      	bne.n	8003618 <runMotor+0xac>
			HAL_GPIO_WritePin(AIN1, GPIO_PIN_RESET);
 8003602:	2200      	movs	r2, #0
 8003604:	2108      	movs	r1, #8
 8003606:	480d      	ldr	r0, [pc, #52]	; (800363c <runMotor+0xd0>)
 8003608:	f001 feed 	bl	80053e6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(AIN2, GPIO_PIN_RESET);
 800360c:	2200      	movs	r2, #0
 800360e:	2110      	movs	r1, #16
 8003610:	480a      	ldr	r0, [pc, #40]	; (800363c <runMotor+0xd0>)
 8003612:	f001 fee8 	bl	80053e6 <HAL_GPIO_WritePin>
		break;
 8003616:	e00b      	b.n	8003630 <runMotor+0xc4>
			HAL_GPIO_WritePin(BIN1, GPIO_PIN_RESET);
 8003618:	2200      	movs	r2, #0
 800361a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800361e:	4808      	ldr	r0, [pc, #32]	; (8003640 <runMotor+0xd4>)
 8003620:	f001 fee1 	bl	80053e6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BIN2, GPIO_PIN_RESET);
 8003624:	2200      	movs	r2, #0
 8003626:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800362a:	4805      	ldr	r0, [pc, #20]	; (8003640 <runMotor+0xd4>)
 800362c:	f001 fedb 	bl	80053e6 <HAL_GPIO_WritePin>
		break;
 8003630:	bf00      	nop
}
 8003632:	bf00      	nop
 8003634:	3708      	adds	r7, #8
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	40010c00 	.word	0x40010c00
 8003640:	40010800 	.word	0x40010800

08003644 <lecturaSensor>:

#include <math.h>



float lecturaSensor(int direccion, float values[4]) {
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
	switch (direccion) {
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2b03      	cmp	r3, #3
 8003652:	d841      	bhi.n	80036d8 <lecturaSensor+0x94>
 8003654:	a201      	add	r2, pc, #4	; (adr r2, 800365c <lecturaSensor+0x18>)
 8003656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800365a:	bf00      	nop
 800365c:	0800366d 	.word	0x0800366d
 8003660:	080036b1 	.word	0x080036b1
 8003664:	080036d3 	.word	0x080036d3
 8003668:	0800368f 	.word	0x0800368f
	case ADELANTE:
		return wallDetector(values[2], direccion);
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	3308      	adds	r3, #8
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4618      	mov	r0, r3
 8003674:	f7fd fd04 	bl	8001080 <__aeabi_f2iz>
 8003678:	4603      	mov	r3, r0
 800367a:	6879      	ldr	r1, [r7, #4]
 800367c:	4618      	mov	r0, r3
 800367e:	f7ff fccb 	bl	8003018 <wallDetector>
 8003682:	4603      	mov	r3, r0
 8003684:	4618      	mov	r0, r3
 8003686:	f7fd fae1 	bl	8000c4c <__aeabi_i2f>
 800368a:	4603      	mov	r3, r0
 800368c:	e025      	b.n	80036da <lecturaSensor+0x96>
		break;
	case DERECHA:
		return wallDetector(values[1], direccion);
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	3304      	adds	r3, #4
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4618      	mov	r0, r3
 8003696:	f7fd fcf3 	bl	8001080 <__aeabi_f2iz>
 800369a:	4603      	mov	r3, r0
 800369c:	6879      	ldr	r1, [r7, #4]
 800369e:	4618      	mov	r0, r3
 80036a0:	f7ff fcba 	bl	8003018 <wallDetector>
 80036a4:	4603      	mov	r3, r0
 80036a6:	4618      	mov	r0, r3
 80036a8:	f7fd fad0 	bl	8000c4c <__aeabi_i2f>
 80036ac:	4603      	mov	r3, r0
 80036ae:	e014      	b.n	80036da <lecturaSensor+0x96>
		break;
	case IZQUIERDA:
		return wallDetector(values[3], direccion);
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	330c      	adds	r3, #12
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7fd fce2 	bl	8001080 <__aeabi_f2iz>
 80036bc:	4603      	mov	r3, r0
 80036be:	6879      	ldr	r1, [r7, #4]
 80036c0:	4618      	mov	r0, r3
 80036c2:	f7ff fca9 	bl	8003018 <wallDetector>
 80036c6:	4603      	mov	r3, r0
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7fd fabf 	bl	8000c4c <__aeabi_i2f>
 80036ce:	4603      	mov	r3, r0
 80036d0:	e003      	b.n	80036da <lecturaSensor+0x96>
		break;
	case ATRAS:
		return 0;
 80036d2:	f04f 0300 	mov.w	r3, #0
 80036d6:	e000      	b.n	80036da <lecturaSensor+0x96>
		break;
	}
	return 15;
 80036d8:	4b02      	ldr	r3, [pc, #8]	; (80036e4 <lecturaSensor+0xa0>)
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3708      	adds	r7, #8
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	41700000 	.word	0x41700000

080036e8 <lecSensor>:

float lecSensor(int n, uint32_t values[10]) {
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b086      	sub	sp, #24
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
	long suma = 0;
 80036f2:	2300      	movs	r3, #0
 80036f4:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < n; i++) {
 80036f6:	2300      	movs	r3, #0
 80036f8:	613b      	str	r3, [r7, #16]
 80036fa:	e00a      	b.n	8003712 <lecSensor+0x2a>
		suma = suma + values[i];
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	683a      	ldr	r2, [r7, #0]
 8003702:	4413      	add	r3, r2
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	4413      	add	r3, r2
 800370a:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < n; i++) {
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	3301      	adds	r3, #1
 8003710:	613b      	str	r3, [r7, #16]
 8003712:	693a      	ldr	r2, [r7, #16]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	429a      	cmp	r2, r3
 8003718:	dbf0      	blt.n	80036fc <lecSensor+0x14>
	}
	float adc = suma / n;
 800371a:	697a      	ldr	r2, [r7, #20]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	fb92 f3f3 	sdiv	r3, r2, r3
 8003722:	4618      	mov	r0, r3
 8003724:	f7fd fa92 	bl	8000c4c <__aeabi_i2f>
 8003728:	4603      	mov	r3, r0
 800372a:	60bb      	str	r3, [r7, #8]
	float volts = adc * 0.0008056640; // value from sensor * (5/1024)
 800372c:	68b8      	ldr	r0, [r7, #8]
 800372e:	f7fc fe7b 	bl	8000428 <__aeabi_f2d>
 8003732:	a323      	add	r3, pc, #140	; (adr r3, 80037c0 <lecSensor+0xd8>)
 8003734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003738:	f7fc fece 	bl	80004d8 <__aeabi_dmul>
 800373c:	4602      	mov	r2, r0
 800373e:	460b      	mov	r3, r1
 8003740:	4610      	mov	r0, r2
 8003742:	4619      	mov	r1, r3
 8003744:	f7fd f978 	bl	8000a38 <__aeabi_d2f>
 8003748:	4603      	mov	r3, r0
 800374a:	60fb      	str	r3, [r7, #12]
	if (volts <= 0.35)
 800374c:	68f8      	ldr	r0, [r7, #12]
 800374e:	f7fc fe6b 	bl	8000428 <__aeabi_f2d>
 8003752:	a31d      	add	r3, pc, #116	; (adr r3, 80037c8 <lecSensor+0xe0>)
 8003754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003758:	f7fd f93a 	bl	80009d0 <__aeabi_dcmple>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d001      	beq.n	8003766 <lecSensor+0x7e>
		volts = 0.35;
 8003762:	4b1d      	ldr	r3, [pc, #116]	; (80037d8 <lecSensor+0xf0>)
 8003764:	60fb      	str	r3, [r7, #12]
	volts = pow(volts - 0.3, 0.25);/*convertimos a cm con un aproximacion grafica*/
 8003766:	68f8      	ldr	r0, [r7, #12]
 8003768:	f7fc fe5e 	bl	8000428 <__aeabi_f2d>
 800376c:	a318      	add	r3, pc, #96	; (adr r3, 80037d0 <lecSensor+0xe8>)
 800376e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003772:	f7fc fcf9 	bl	8000168 <__aeabi_dsub>
 8003776:	4602      	mov	r2, r0
 8003778:	460b      	mov	r3, r1
 800377a:	4610      	mov	r0, r2
 800377c:	4619      	mov	r1, r3
 800377e:	f04f 0200 	mov.w	r2, #0
 8003782:	4b16      	ldr	r3, [pc, #88]	; (80037dc <lecSensor+0xf4>)
 8003784:	f003 fa1c 	bl	8006bc0 <pow>
 8003788:	4602      	mov	r2, r0
 800378a:	460b      	mov	r3, r1
 800378c:	4610      	mov	r0, r2
 800378e:	4619      	mov	r1, r3
 8003790:	f7fd f952 	bl	8000a38 <__aeabi_d2f>
 8003794:	4603      	mov	r3, r0
 8003796:	60fb      	str	r3, [r7, #12]
	volts = 27.5 / volts; /*no preguntar por los valores*/
 8003798:	68f9      	ldr	r1, [r7, #12]
 800379a:	4811      	ldr	r0, [pc, #68]	; (80037e0 <lecSensor+0xf8>)
 800379c:	f7fd fb5e 	bl	8000e5c <__aeabi_fdiv>
 80037a0:	4603      	mov	r3, r0
 80037a2:	60fb      	str	r3, [r7, #12]
	volts -= 18;
 80037a4:	490f      	ldr	r1, [pc, #60]	; (80037e4 <lecSensor+0xfc>)
 80037a6:	68f8      	ldr	r0, [r7, #12]
 80037a8:	f7fd f99a 	bl	8000ae0 <__aeabi_fsub>
 80037ac:	4603      	mov	r3, r0
 80037ae:	60fb      	str	r3, [r7, #12]

	return volts;
 80037b0:	68fb      	ldr	r3, [r7, #12]

}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3718      	adds	r7, #24
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	f3af 8000 	nop.w
 80037c0:	440a4e96 	.word	0x440a4e96
 80037c4:	3f4a6666 	.word	0x3f4a6666
 80037c8:	66666666 	.word	0x66666666
 80037cc:	3fd66666 	.word	0x3fd66666
 80037d0:	33333333 	.word	0x33333333
 80037d4:	3fd33333 	.word	0x3fd33333
 80037d8:	3eb33333 	.word	0x3eb33333
 80037dc:	3fd00000 	.word	0x3fd00000
 80037e0:	41dc0000 	.word	0x41dc0000
 80037e4:	41900000 	.word	0x41900000

080037e8 <lecturaCNY70>:

int lecturaCNY70(int n, uint32_t values[10]) {
 80037e8:	b480      	push	{r7}
 80037ea:	b087      	sub	sp, #28
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
	long suma = 0;
 80037f2:	2300      	movs	r3, #0
 80037f4:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < n; i++) {
 80037f6:	2300      	movs	r3, #0
 80037f8:	613b      	str	r3, [r7, #16]
 80037fa:	e00a      	b.n	8003812 <lecturaCNY70+0x2a>
		suma = suma + values[i];
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	683a      	ldr	r2, [r7, #0]
 8003802:	4413      	add	r3, r2
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	4413      	add	r3, r2
 800380a:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < n; i++) {
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	3301      	adds	r3, #1
 8003810:	613b      	str	r3, [r7, #16]
 8003812:	693a      	ldr	r2, [r7, #16]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	429a      	cmp	r2, r3
 8003818:	dbf0      	blt.n	80037fc <lecturaCNY70+0x14>
	}
	int adc = (suma / n);
 800381a:	697a      	ldr	r2, [r7, #20]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	fb92 f3f3 	sdiv	r3, r2, r3
 8003822:	60fb      	str	r3, [r7, #12]
	if (adc < 800) {
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800382a:	da01      	bge.n	8003830 <lecturaCNY70+0x48>
		return BLANCO;
 800382c:	2300      	movs	r3, #0
 800382e:	e000      	b.n	8003832 <lecturaCNY70+0x4a>
	} else {
		return NEGRO;
 8003830:	2301      	movs	r3, #1
	}
}
 8003832:	4618      	mov	r0, r3
 8003834:	371c      	adds	r7, #28
 8003836:	46bd      	mov	sp, r7
 8003838:	bc80      	pop	{r7}
 800383a:	4770      	bx	lr

0800383c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800383c:	b480      	push	{r7}
 800383e:	b085      	sub	sp, #20
 8003840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003842:	4b15      	ldr	r3, [pc, #84]	; (8003898 <HAL_MspInit+0x5c>)
 8003844:	699b      	ldr	r3, [r3, #24]
 8003846:	4a14      	ldr	r2, [pc, #80]	; (8003898 <HAL_MspInit+0x5c>)
 8003848:	f043 0301 	orr.w	r3, r3, #1
 800384c:	6193      	str	r3, [r2, #24]
 800384e:	4b12      	ldr	r3, [pc, #72]	; (8003898 <HAL_MspInit+0x5c>)
 8003850:	699b      	ldr	r3, [r3, #24]
 8003852:	f003 0301 	and.w	r3, r3, #1
 8003856:	60bb      	str	r3, [r7, #8]
 8003858:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800385a:	4b0f      	ldr	r3, [pc, #60]	; (8003898 <HAL_MspInit+0x5c>)
 800385c:	69db      	ldr	r3, [r3, #28]
 800385e:	4a0e      	ldr	r2, [pc, #56]	; (8003898 <HAL_MspInit+0x5c>)
 8003860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003864:	61d3      	str	r3, [r2, #28]
 8003866:	4b0c      	ldr	r3, [pc, #48]	; (8003898 <HAL_MspInit+0x5c>)
 8003868:	69db      	ldr	r3, [r3, #28]
 800386a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800386e:	607b      	str	r3, [r7, #4]
 8003870:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003872:	4b0a      	ldr	r3, [pc, #40]	; (800389c <HAL_MspInit+0x60>)
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	60fb      	str	r3, [r7, #12]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800387e:	60fb      	str	r3, [r7, #12]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003886:	60fb      	str	r3, [r7, #12]
 8003888:	4a04      	ldr	r2, [pc, #16]	; (800389c <HAL_MspInit+0x60>)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800388e:	bf00      	nop
 8003890:	3714      	adds	r7, #20
 8003892:	46bd      	mov	sp, r7
 8003894:	bc80      	pop	{r7}
 8003896:	4770      	bx	lr
 8003898:	40021000 	.word	0x40021000
 800389c:	40010000 	.word	0x40010000

080038a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038a0:	b480      	push	{r7}
 80038a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80038a4:	e7fe      	b.n	80038a4 <NMI_Handler+0x4>

080038a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038a6:	b480      	push	{r7}
 80038a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038aa:	e7fe      	b.n	80038aa <HardFault_Handler+0x4>

080038ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038ac:	b480      	push	{r7}
 80038ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80038b0:	e7fe      	b.n	80038b0 <MemManage_Handler+0x4>

080038b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80038b2:	b480      	push	{r7}
 80038b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80038b6:	e7fe      	b.n	80038b6 <BusFault_Handler+0x4>

080038b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80038b8:	b480      	push	{r7}
 80038ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80038bc:	e7fe      	b.n	80038bc <UsageFault_Handler+0x4>

080038be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80038be:	b480      	push	{r7}
 80038c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80038c2:	bf00      	nop
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bc80      	pop	{r7}
 80038c8:	4770      	bx	lr

080038ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80038ca:	b480      	push	{r7}
 80038cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80038ce:	bf00      	nop
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bc80      	pop	{r7}
 80038d4:	4770      	bx	lr

080038d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80038d6:	b480      	push	{r7}
 80038d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80038da:	bf00      	nop
 80038dc:	46bd      	mov	sp, r7
 80038de:	bc80      	pop	{r7}
 80038e0:	4770      	bx	lr

080038e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80038e2:	b580      	push	{r7, lr}
 80038e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80038e6:	f000 fadb 	bl	8003ea0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80038ea:	bf00      	nop
 80038ec:	bd80      	pop	{r7, pc}
	...

080038f0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80038f4:	4802      	ldr	r0, [pc, #8]	; (8003900 <DMA1_Channel1_IRQHandler+0x10>)
 80038f6:	f001 f89d 	bl	8004a34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80038fa:	bf00      	nop
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	2000010c 	.word	0x2000010c

08003904 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003904:	b480      	push	{r7}
 8003906:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003908:	bf00      	nop
 800390a:	46bd      	mov	sp, r7
 800390c:	bc80      	pop	{r7}
 800390e:	4770      	bx	lr

08003910 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b08a      	sub	sp, #40	; 0x28
 8003914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003916:	f107 0320 	add.w	r3, r7, #32
 800391a:	2200      	movs	r2, #0
 800391c:	601a      	str	r2, [r3, #0]
 800391e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003920:	1d3b      	adds	r3, r7, #4
 8003922:	2200      	movs	r2, #0
 8003924:	601a      	str	r2, [r3, #0]
 8003926:	605a      	str	r2, [r3, #4]
 8003928:	609a      	str	r2, [r3, #8]
 800392a:	60da      	str	r2, [r3, #12]
 800392c:	611a      	str	r2, [r3, #16]
 800392e:	615a      	str	r2, [r3, #20]
 8003930:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003932:	4b28      	ldr	r3, [pc, #160]	; (80039d4 <MX_TIM2_Init+0xc4>)
 8003934:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003938:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800393a:	4b26      	ldr	r3, [pc, #152]	; (80039d4 <MX_TIM2_Init+0xc4>)
 800393c:	2200      	movs	r2, #0
 800393e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003940:	4b24      	ldr	r3, [pc, #144]	; (80039d4 <MX_TIM2_Init+0xc4>)
 8003942:	2200      	movs	r2, #0
 8003944:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8003946:	4b23      	ldr	r3, [pc, #140]	; (80039d4 <MX_TIM2_Init+0xc4>)
 8003948:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800394c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800394e:	4b21      	ldr	r3, [pc, #132]	; (80039d4 <MX_TIM2_Init+0xc4>)
 8003950:	2200      	movs	r2, #0
 8003952:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003954:	4b1f      	ldr	r3, [pc, #124]	; (80039d4 <MX_TIM2_Init+0xc4>)
 8003956:	2200      	movs	r2, #0
 8003958:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800395a:	481e      	ldr	r0, [pc, #120]	; (80039d4 <MX_TIM2_Init+0xc4>)
 800395c:	f002 fa2c 	bl	8005db8 <HAL_TIM_PWM_Init>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d001      	beq.n	800396a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8003966:	f7ff fdd5 	bl	8003514 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800396a:	2300      	movs	r3, #0
 800396c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800396e:	2300      	movs	r3, #0
 8003970:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003972:	f107 0320 	add.w	r3, r7, #32
 8003976:	4619      	mov	r1, r3
 8003978:	4816      	ldr	r0, [pc, #88]	; (80039d4 <MX_TIM2_Init+0xc4>)
 800397a:	f002 ff0b 	bl	8006794 <HAL_TIMEx_MasterConfigSynchronization>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d001      	beq.n	8003988 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8003984:	f7ff fdc6 	bl	8003514 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003988:	2360      	movs	r3, #96	; 0x60
 800398a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800398c:	2300      	movs	r3, #0
 800398e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003990:	2300      	movs	r3, #0
 8003992:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003994:	2300      	movs	r3, #0
 8003996:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003998:	1d3b      	adds	r3, r7, #4
 800399a:	2208      	movs	r2, #8
 800399c:	4619      	mov	r1, r3
 800399e:	480d      	ldr	r0, [pc, #52]	; (80039d4 <MX_TIM2_Init+0xc4>)
 80039a0:	f002 fc2c 	bl	80061fc <HAL_TIM_PWM_ConfigChannel>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d001      	beq.n	80039ae <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80039aa:	f7ff fdb3 	bl	8003514 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80039ae:	1d3b      	adds	r3, r7, #4
 80039b0:	220c      	movs	r2, #12
 80039b2:	4619      	mov	r1, r3
 80039b4:	4807      	ldr	r0, [pc, #28]	; (80039d4 <MX_TIM2_Init+0xc4>)
 80039b6:	f002 fc21 	bl	80061fc <HAL_TIM_PWM_ConfigChannel>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d001      	beq.n	80039c4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80039c0:	f7ff fda8 	bl	8003514 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80039c4:	4803      	ldr	r0, [pc, #12]	; (80039d4 <MX_TIM2_Init+0xc4>)
 80039c6:	f000 f943 	bl	8003c50 <HAL_TIM_MspPostInit>

}
 80039ca:	bf00      	nop
 80039cc:	3728      	adds	r7, #40	; 0x28
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	20002bcc 	.word	0x20002bcc

080039d8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b08c      	sub	sp, #48	; 0x30
 80039dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80039de:	f107 030c 	add.w	r3, r7, #12
 80039e2:	2224      	movs	r2, #36	; 0x24
 80039e4:	2100      	movs	r1, #0
 80039e6:	4618      	mov	r0, r3
 80039e8:	f003 fff6 	bl	80079d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039ec:	1d3b      	adds	r3, r7, #4
 80039ee:	2200      	movs	r2, #0
 80039f0:	601a      	str	r2, [r3, #0]
 80039f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80039f4:	4b20      	ldr	r3, [pc, #128]	; (8003a78 <MX_TIM3_Init+0xa0>)
 80039f6:	4a21      	ldr	r2, [pc, #132]	; (8003a7c <MX_TIM3_Init+0xa4>)
 80039f8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80039fa:	4b1f      	ldr	r3, [pc, #124]	; (8003a78 <MX_TIM3_Init+0xa0>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a00:	4b1d      	ldr	r3, [pc, #116]	; (8003a78 <MX_TIM3_Init+0xa0>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003a06:	4b1c      	ldr	r3, [pc, #112]	; (8003a78 <MX_TIM3_Init+0xa0>)
 8003a08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a0c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a0e:	4b1a      	ldr	r3, [pc, #104]	; (8003a78 <MX_TIM3_Init+0xa0>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a14:	4b18      	ldr	r3, [pc, #96]	; (8003a78 <MX_TIM3_Init+0xa0>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003a22:	2301      	movs	r3, #1
 8003a24:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003a26:	2300      	movs	r3, #0
 8003a28:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8003a2a:	230a      	movs	r3, #10
 8003a2c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003a32:	2301      	movs	r3, #1
 8003a34:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003a36:	2300      	movs	r3, #0
 8003a38:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003a3e:	f107 030c 	add.w	r3, r7, #12
 8003a42:	4619      	mov	r1, r3
 8003a44:	480c      	ldr	r0, [pc, #48]	; (8003a78 <MX_TIM3_Init+0xa0>)
 8003a46:	f002 faa9 	bl	8005f9c <HAL_TIM_Encoder_Init>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d001      	beq.n	8003a54 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8003a50:	f7ff fd60 	bl	8003514 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a54:	2300      	movs	r3, #0
 8003a56:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003a5c:	1d3b      	adds	r3, r7, #4
 8003a5e:	4619      	mov	r1, r3
 8003a60:	4805      	ldr	r0, [pc, #20]	; (8003a78 <MX_TIM3_Init+0xa0>)
 8003a62:	f002 fe97 	bl	8006794 <HAL_TIMEx_MasterConfigSynchronization>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d001      	beq.n	8003a70 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8003a6c:	f7ff fd52 	bl	8003514 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003a70:	bf00      	nop
 8003a72:	3730      	adds	r7, #48	; 0x30
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	20002c14 	.word	0x20002c14
 8003a7c:	40000400 	.word	0x40000400

08003a80 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b08c      	sub	sp, #48	; 0x30
 8003a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003a86:	f107 030c 	add.w	r3, r7, #12
 8003a8a:	2224      	movs	r2, #36	; 0x24
 8003a8c:	2100      	movs	r1, #0
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f003 ffa2 	bl	80079d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a94:	1d3b      	adds	r3, r7, #4
 8003a96:	2200      	movs	r2, #0
 8003a98:	601a      	str	r2, [r3, #0]
 8003a9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003a9c:	4b20      	ldr	r3, [pc, #128]	; (8003b20 <MX_TIM4_Init+0xa0>)
 8003a9e:	4a21      	ldr	r2, [pc, #132]	; (8003b24 <MX_TIM4_Init+0xa4>)
 8003aa0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003aa2:	4b1f      	ldr	r3, [pc, #124]	; (8003b20 <MX_TIM4_Init+0xa0>)
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003aa8:	4b1d      	ldr	r3, [pc, #116]	; (8003b20 <MX_TIM4_Init+0xa0>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003aae:	4b1c      	ldr	r3, [pc, #112]	; (8003b20 <MX_TIM4_Init+0xa0>)
 8003ab0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ab4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ab6:	4b1a      	ldr	r3, [pc, #104]	; (8003b20 <MX_TIM4_Init+0xa0>)
 8003ab8:	2200      	movs	r2, #0
 8003aba:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003abc:	4b18      	ldr	r3, [pc, #96]	; (8003b20 <MX_TIM4_Init+0xa0>)
 8003abe:	2280      	movs	r2, #128	; 0x80
 8003ac0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003aca:	2301      	movs	r3, #1
 8003acc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8003ad2:	230a      	movs	r3, #10
 8003ad4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003ada:	2301      	movs	r3, #1
 8003adc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003ae6:	f107 030c 	add.w	r3, r7, #12
 8003aea:	4619      	mov	r1, r3
 8003aec:	480c      	ldr	r0, [pc, #48]	; (8003b20 <MX_TIM4_Init+0xa0>)
 8003aee:	f002 fa55 	bl	8005f9c <HAL_TIM_Encoder_Init>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d001      	beq.n	8003afc <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8003af8:	f7ff fd0c 	bl	8003514 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003afc:	2300      	movs	r3, #0
 8003afe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b00:	2300      	movs	r3, #0
 8003b02:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003b04:	1d3b      	adds	r3, r7, #4
 8003b06:	4619      	mov	r1, r3
 8003b08:	4805      	ldr	r0, [pc, #20]	; (8003b20 <MX_TIM4_Init+0xa0>)
 8003b0a:	f002 fe43 	bl	8006794 <HAL_TIMEx_MasterConfigSynchronization>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d001      	beq.n	8003b18 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8003b14:	f7ff fcfe 	bl	8003514 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003b18:	bf00      	nop
 8003b1a:	3730      	adds	r7, #48	; 0x30
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	20002c5c 	.word	0x20002c5c
 8003b24:	40000800 	.word	0x40000800

08003b28 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b085      	sub	sp, #20
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b38:	d10b      	bne.n	8003b52 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003b3a:	4b08      	ldr	r3, [pc, #32]	; (8003b5c <HAL_TIM_PWM_MspInit+0x34>)
 8003b3c:	69db      	ldr	r3, [r3, #28]
 8003b3e:	4a07      	ldr	r2, [pc, #28]	; (8003b5c <HAL_TIM_PWM_MspInit+0x34>)
 8003b40:	f043 0301 	orr.w	r3, r3, #1
 8003b44:	61d3      	str	r3, [r2, #28]
 8003b46:	4b05      	ldr	r3, [pc, #20]	; (8003b5c <HAL_TIM_PWM_MspInit+0x34>)
 8003b48:	69db      	ldr	r3, [r3, #28]
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	60fb      	str	r3, [r7, #12]
 8003b50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8003b52:	bf00      	nop
 8003b54:	3714      	adds	r7, #20
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bc80      	pop	{r7}
 8003b5a:	4770      	bx	lr
 8003b5c:	40021000 	.word	0x40021000

08003b60 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b08a      	sub	sp, #40	; 0x28
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b68:	f107 0318 	add.w	r3, r7, #24
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	601a      	str	r2, [r3, #0]
 8003b70:	605a      	str	r2, [r3, #4]
 8003b72:	609a      	str	r2, [r3, #8]
 8003b74:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM3)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a30      	ldr	r2, [pc, #192]	; (8003c3c <HAL_TIM_Encoder_MspInit+0xdc>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d124      	bne.n	8003bca <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003b80:	4b2f      	ldr	r3, [pc, #188]	; (8003c40 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003b82:	69db      	ldr	r3, [r3, #28]
 8003b84:	4a2e      	ldr	r2, [pc, #184]	; (8003c40 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003b86:	f043 0302 	orr.w	r3, r3, #2
 8003b8a:	61d3      	str	r3, [r2, #28]
 8003b8c:	4b2c      	ldr	r3, [pc, #176]	; (8003c40 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003b8e:	69db      	ldr	r3, [r3, #28]
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	617b      	str	r3, [r7, #20]
 8003b96:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b98:	4b29      	ldr	r3, [pc, #164]	; (8003c40 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003b9a:	699b      	ldr	r3, [r3, #24]
 8003b9c:	4a28      	ldr	r2, [pc, #160]	; (8003c40 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003b9e:	f043 0304 	orr.w	r3, r3, #4
 8003ba2:	6193      	str	r3, [r2, #24]
 8003ba4:	4b26      	ldr	r3, [pc, #152]	; (8003c40 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003ba6:	699b      	ldr	r3, [r3, #24]
 8003ba8:	f003 0304 	and.w	r3, r3, #4
 8003bac:	613b      	str	r3, [r7, #16]
 8003bae:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = MB1_Pin|MB2_Pin;
 8003bb0:	23c0      	movs	r3, #192	; 0xc0
 8003bb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bbc:	f107 0318 	add.w	r3, r7, #24
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	4820      	ldr	r0, [pc, #128]	; (8003c44 <HAL_TIM_Encoder_MspInit+0xe4>)
 8003bc4:	f001 fa74 	bl	80050b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003bc8:	e034      	b.n	8003c34 <HAL_TIM_Encoder_MspInit+0xd4>
  else if(tim_encoderHandle->Instance==TIM4)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a1e      	ldr	r2, [pc, #120]	; (8003c48 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d12f      	bne.n	8003c34 <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003bd4:	4b1a      	ldr	r3, [pc, #104]	; (8003c40 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003bd6:	69db      	ldr	r3, [r3, #28]
 8003bd8:	4a19      	ldr	r2, [pc, #100]	; (8003c40 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003bda:	f043 0304 	orr.w	r3, r3, #4
 8003bde:	61d3      	str	r3, [r2, #28]
 8003be0:	4b17      	ldr	r3, [pc, #92]	; (8003c40 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003be2:	69db      	ldr	r3, [r3, #28]
 8003be4:	f003 0304 	and.w	r3, r3, #4
 8003be8:	60fb      	str	r3, [r7, #12]
 8003bea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bec:	4b14      	ldr	r3, [pc, #80]	; (8003c40 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003bee:	699b      	ldr	r3, [r3, #24]
 8003bf0:	4a13      	ldr	r2, [pc, #76]	; (8003c40 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003bf2:	f043 0308 	orr.w	r3, r3, #8
 8003bf6:	6193      	str	r3, [r2, #24]
 8003bf8:	4b11      	ldr	r3, [pc, #68]	; (8003c40 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003bfa:	699b      	ldr	r3, [r3, #24]
 8003bfc:	f003 0308 	and.w	r3, r3, #8
 8003c00:	60bb      	str	r3, [r7, #8]
 8003c02:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MA2_Pin;
 8003c04:	2340      	movs	r3, #64	; 0x40
 8003c06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(MA2_GPIO_Port, &GPIO_InitStruct);
 8003c10:	f107 0318 	add.w	r3, r7, #24
 8003c14:	4619      	mov	r1, r3
 8003c16:	480d      	ldr	r0, [pc, #52]	; (8003c4c <HAL_TIM_Encoder_MspInit+0xec>)
 8003c18:	f001 fa4a 	bl	80050b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MA1_Pin;
 8003c1c:	2380      	movs	r3, #128	; 0x80
 8003c1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c20:	2300      	movs	r3, #0
 8003c22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c24:	2300      	movs	r3, #0
 8003c26:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(MA1_GPIO_Port, &GPIO_InitStruct);
 8003c28:	f107 0318 	add.w	r3, r7, #24
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	4807      	ldr	r0, [pc, #28]	; (8003c4c <HAL_TIM_Encoder_MspInit+0xec>)
 8003c30:	f001 fa3e 	bl	80050b0 <HAL_GPIO_Init>
}
 8003c34:	bf00      	nop
 8003c36:	3728      	adds	r7, #40	; 0x28
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	40000400 	.word	0x40000400
 8003c40:	40021000 	.word	0x40021000
 8003c44:	40010800 	.word	0x40010800
 8003c48:	40000800 	.word	0x40000800
 8003c4c:	40010c00 	.word	0x40010c00

08003c50 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b088      	sub	sp, #32
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c58:	f107 030c 	add.w	r3, r7, #12
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	601a      	str	r2, [r3, #0]
 8003c60:	605a      	str	r2, [r3, #4]
 8003c62:	609a      	str	r2, [r3, #8]
 8003c64:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c6e:	d12a      	bne.n	8003cc6 <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c70:	4b17      	ldr	r3, [pc, #92]	; (8003cd0 <HAL_TIM_MspPostInit+0x80>)
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	4a16      	ldr	r2, [pc, #88]	; (8003cd0 <HAL_TIM_MspPostInit+0x80>)
 8003c76:	f043 0308 	orr.w	r3, r3, #8
 8003c7a:	6193      	str	r3, [r2, #24]
 8003c7c:	4b14      	ldr	r3, [pc, #80]	; (8003cd0 <HAL_TIM_MspPostInit+0x80>)
 8003c7e:	699b      	ldr	r3, [r3, #24]
 8003c80:	f003 0308 	and.w	r3, r3, #8
 8003c84:	60bb      	str	r3, [r7, #8]
 8003c86:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 8003c88:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003c8c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c8e:	2302      	movs	r3, #2
 8003c90:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c92:	2302      	movs	r3, #2
 8003c94:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c96:	f107 030c 	add.w	r3, r7, #12
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	480d      	ldr	r0, [pc, #52]	; (8003cd4 <HAL_TIM_MspPostInit+0x84>)
 8003c9e:	f001 fa07 	bl	80050b0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 8003ca2:	4b0d      	ldr	r3, [pc, #52]	; (8003cd8 <HAL_TIM_MspPostInit+0x88>)
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	61fb      	str	r3, [r7, #28]
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cae:	61fb      	str	r3, [r7, #28]
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003cb6:	61fb      	str	r3, [r7, #28]
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003cbe:	61fb      	str	r3, [r7, #28]
 8003cc0:	4a05      	ldr	r2, [pc, #20]	; (8003cd8 <HAL_TIM_MspPostInit+0x88>)
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003cc6:	bf00      	nop
 8003cc8:	3720      	adds	r7, #32
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	40021000 	.word	0x40021000
 8003cd4:	40010c00 	.word	0x40010c00
 8003cd8:	40010000 	.word	0x40010000

08003cdc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003ce0:	4b11      	ldr	r3, [pc, #68]	; (8003d28 <MX_USART1_UART_Init+0x4c>)
 8003ce2:	4a12      	ldr	r2, [pc, #72]	; (8003d2c <MX_USART1_UART_Init+0x50>)
 8003ce4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8003ce6:	4b10      	ldr	r3, [pc, #64]	; (8003d28 <MX_USART1_UART_Init+0x4c>)
 8003ce8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8003cec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003cee:	4b0e      	ldr	r3, [pc, #56]	; (8003d28 <MX_USART1_UART_Init+0x4c>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003cf4:	4b0c      	ldr	r3, [pc, #48]	; (8003d28 <MX_USART1_UART_Init+0x4c>)
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003cfa:	4b0b      	ldr	r3, [pc, #44]	; (8003d28 <MX_USART1_UART_Init+0x4c>)
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003d00:	4b09      	ldr	r3, [pc, #36]	; (8003d28 <MX_USART1_UART_Init+0x4c>)
 8003d02:	220c      	movs	r2, #12
 8003d04:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d06:	4b08      	ldr	r3, [pc, #32]	; (8003d28 <MX_USART1_UART_Init+0x4c>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d0c:	4b06      	ldr	r3, [pc, #24]	; (8003d28 <MX_USART1_UART_Init+0x4c>)
 8003d0e:	2200      	movs	r2, #0
 8003d10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003d12:	4805      	ldr	r0, [pc, #20]	; (8003d28 <MX_USART1_UART_Init+0x4c>)
 8003d14:	f002 fd9c 	bl	8006850 <HAL_UART_Init>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d001      	beq.n	8003d22 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003d1e:	f7ff fbf9 	bl	8003514 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003d22:	bf00      	nop
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	20002ca4 	.word	0x20002ca4
 8003d2c:	40013800 	.word	0x40013800

08003d30 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b088      	sub	sp, #32
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d38:	f107 0310 	add.w	r3, r7, #16
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	601a      	str	r2, [r3, #0]
 8003d40:	605a      	str	r2, [r3, #4]
 8003d42:	609a      	str	r2, [r3, #8]
 8003d44:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a1c      	ldr	r2, [pc, #112]	; (8003dbc <HAL_UART_MspInit+0x8c>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d131      	bne.n	8003db4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003d50:	4b1b      	ldr	r3, [pc, #108]	; (8003dc0 <HAL_UART_MspInit+0x90>)
 8003d52:	699b      	ldr	r3, [r3, #24]
 8003d54:	4a1a      	ldr	r2, [pc, #104]	; (8003dc0 <HAL_UART_MspInit+0x90>)
 8003d56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d5a:	6193      	str	r3, [r2, #24]
 8003d5c:	4b18      	ldr	r3, [pc, #96]	; (8003dc0 <HAL_UART_MspInit+0x90>)
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d64:	60fb      	str	r3, [r7, #12]
 8003d66:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d68:	4b15      	ldr	r3, [pc, #84]	; (8003dc0 <HAL_UART_MspInit+0x90>)
 8003d6a:	699b      	ldr	r3, [r3, #24]
 8003d6c:	4a14      	ldr	r2, [pc, #80]	; (8003dc0 <HAL_UART_MspInit+0x90>)
 8003d6e:	f043 0304 	orr.w	r3, r3, #4
 8003d72:	6193      	str	r3, [r2, #24]
 8003d74:	4b12      	ldr	r3, [pc, #72]	; (8003dc0 <HAL_UART_MspInit+0x90>)
 8003d76:	699b      	ldr	r3, [r3, #24]
 8003d78:	f003 0304 	and.w	r3, r3, #4
 8003d7c:	60bb      	str	r3, [r7, #8]
 8003d7e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003d80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d84:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d86:	2302      	movs	r3, #2
 8003d88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d8e:	f107 0310 	add.w	r3, r7, #16
 8003d92:	4619      	mov	r1, r3
 8003d94:	480b      	ldr	r0, [pc, #44]	; (8003dc4 <HAL_UART_MspInit+0x94>)
 8003d96:	f001 f98b 	bl	80050b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003d9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003da0:	2300      	movs	r3, #0
 8003da2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003da4:	2300      	movs	r3, #0
 8003da6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003da8:	f107 0310 	add.w	r3, r7, #16
 8003dac:	4619      	mov	r1, r3
 8003dae:	4805      	ldr	r0, [pc, #20]	; (8003dc4 <HAL_UART_MspInit+0x94>)
 8003db0:	f001 f97e 	bl	80050b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003db4:	bf00      	nop
 8003db6:	3720      	adds	r7, #32
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	40013800 	.word	0x40013800
 8003dc0:	40021000 	.word	0x40021000
 8003dc4:	40010800 	.word	0x40010800

08003dc8 <Reset_Handler>:
 8003dc8:	480c      	ldr	r0, [pc, #48]	; (8003dfc <LoopFillZerobss+0x12>)
 8003dca:	490d      	ldr	r1, [pc, #52]	; (8003e00 <LoopFillZerobss+0x16>)
 8003dcc:	4a0d      	ldr	r2, [pc, #52]	; (8003e04 <LoopFillZerobss+0x1a>)
 8003dce:	2300      	movs	r3, #0
 8003dd0:	e002      	b.n	8003dd8 <LoopCopyDataInit>

08003dd2 <CopyDataInit>:
 8003dd2:	58d4      	ldr	r4, [r2, r3]
 8003dd4:	50c4      	str	r4, [r0, r3]
 8003dd6:	3304      	adds	r3, #4

08003dd8 <LoopCopyDataInit>:
 8003dd8:	18c4      	adds	r4, r0, r3
 8003dda:	428c      	cmp	r4, r1
 8003ddc:	d3f9      	bcc.n	8003dd2 <CopyDataInit>
 8003dde:	4a0a      	ldr	r2, [pc, #40]	; (8003e08 <LoopFillZerobss+0x1e>)
 8003de0:	4c0a      	ldr	r4, [pc, #40]	; (8003e0c <LoopFillZerobss+0x22>)
 8003de2:	2300      	movs	r3, #0
 8003de4:	e001      	b.n	8003dea <LoopFillZerobss>

08003de6 <FillZerobss>:
 8003de6:	6013      	str	r3, [r2, #0]
 8003de8:	3204      	adds	r2, #4

08003dea <LoopFillZerobss>:
 8003dea:	42a2      	cmp	r2, r4
 8003dec:	d3fb      	bcc.n	8003de6 <FillZerobss>
 8003dee:	f7ff fd89 	bl	8003904 <SystemInit>
 8003df2:	f003 fdcd 	bl	8007990 <__libc_init_array>
 8003df6:	f7fd fbcd 	bl	8001594 <main>
 8003dfa:	4770      	bx	lr
 8003dfc:	20000000 	.word	0x20000000
 8003e00:	200000ac 	.word	0x200000ac
 8003e04:	08007a60 	.word	0x08007a60
 8003e08:	200000b0 	.word	0x200000b0
 8003e0c:	20002d10 	.word	0x20002d10

08003e10 <ADC1_2_IRQHandler>:
 8003e10:	e7fe      	b.n	8003e10 <ADC1_2_IRQHandler>
	...

08003e14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003e18:	4b08      	ldr	r3, [pc, #32]	; (8003e3c <HAL_Init+0x28>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a07      	ldr	r2, [pc, #28]	; (8003e3c <HAL_Init+0x28>)
 8003e1e:	f043 0310 	orr.w	r3, r3, #16
 8003e22:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e24:	2003      	movs	r0, #3
 8003e26:	f000 fd09 	bl	800483c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003e2a:	200f      	movs	r0, #15
 8003e2c:	f000 f808 	bl	8003e40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003e30:	f7ff fd04 	bl	800383c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	40022000 	.word	0x40022000

08003e40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003e48:	4b12      	ldr	r3, [pc, #72]	; (8003e94 <HAL_InitTick+0x54>)
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	4b12      	ldr	r3, [pc, #72]	; (8003e98 <HAL_InitTick+0x58>)
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	4619      	mov	r1, r3
 8003e52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e56:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f000 fd21 	bl	80048a6 <HAL_SYSTICK_Config>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d001      	beq.n	8003e6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e00e      	b.n	8003e8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2b0f      	cmp	r3, #15
 8003e72:	d80a      	bhi.n	8003e8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e74:	2200      	movs	r2, #0
 8003e76:	6879      	ldr	r1, [r7, #4]
 8003e78:	f04f 30ff 	mov.w	r0, #4294967295
 8003e7c:	f000 fce9 	bl	8004852 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e80:	4a06      	ldr	r2, [pc, #24]	; (8003e9c <HAL_InitTick+0x5c>)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003e86:	2300      	movs	r3, #0
 8003e88:	e000      	b.n	8003e8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3708      	adds	r7, #8
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	2000003c 	.word	0x2000003c
 8003e98:	20000044 	.word	0x20000044
 8003e9c:	20000040 	.word	0x20000040

08003ea0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ea4:	4b05      	ldr	r3, [pc, #20]	; (8003ebc <HAL_IncTick+0x1c>)
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	4b05      	ldr	r3, [pc, #20]	; (8003ec0 <HAL_IncTick+0x20>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4413      	add	r3, r2
 8003eb0:	4a03      	ldr	r2, [pc, #12]	; (8003ec0 <HAL_IncTick+0x20>)
 8003eb2:	6013      	str	r3, [r2, #0]
}
 8003eb4:	bf00      	nop
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bc80      	pop	{r7}
 8003eba:	4770      	bx	lr
 8003ebc:	20000044 	.word	0x20000044
 8003ec0:	20002ce8 	.word	0x20002ce8

08003ec4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	af00      	add	r7, sp, #0
  return uwTick;
 8003ec8:	4b02      	ldr	r3, [pc, #8]	; (8003ed4 <HAL_GetTick+0x10>)
 8003eca:	681b      	ldr	r3, [r3, #0]
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bc80      	pop	{r7}
 8003ed2:	4770      	bx	lr
 8003ed4:	20002ce8 	.word	0x20002ce8

08003ed8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ee0:	f7ff fff0 	bl	8003ec4 <HAL_GetTick>
 8003ee4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef0:	d005      	beq.n	8003efe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ef2:	4b0a      	ldr	r3, [pc, #40]	; (8003f1c <HAL_Delay+0x44>)
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	4413      	add	r3, r2
 8003efc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003efe:	bf00      	nop
 8003f00:	f7ff ffe0 	bl	8003ec4 <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	68fa      	ldr	r2, [r7, #12]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d8f7      	bhi.n	8003f00 <HAL_Delay+0x28>
  {
  }
}
 8003f10:	bf00      	nop
 8003f12:	bf00      	nop
 8003f14:	3710      	adds	r7, #16
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	20000044 	.word	0x20000044

08003f20 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b086      	sub	sp, #24
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003f30:	2300      	movs	r3, #0
 8003f32:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003f34:	2300      	movs	r3, #0
 8003f36:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d101      	bne.n	8003f42 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e0be      	b.n	80040c0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d109      	bne.n	8003f64 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f7fd fa00 	bl	8001364 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f000 faf5 	bl	8004554 <ADC_ConversionStop_Disable>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f72:	f003 0310 	and.w	r3, r3, #16
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	f040 8099 	bne.w	80040ae <HAL_ADC_Init+0x18e>
 8003f7c:	7dfb      	ldrb	r3, [r7, #23]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	f040 8095 	bne.w	80040ae <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f88:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003f8c:	f023 0302 	bic.w	r3, r3, #2
 8003f90:	f043 0202 	orr.w	r2, r3, #2
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003fa0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	7b1b      	ldrb	r3, [r3, #12]
 8003fa6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003fa8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003faa:	68ba      	ldr	r2, [r7, #8]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fb8:	d003      	beq.n	8003fc2 <HAL_ADC_Init+0xa2>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d102      	bne.n	8003fc8 <HAL_ADC_Init+0xa8>
 8003fc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003fc6:	e000      	b.n	8003fca <HAL_ADC_Init+0xaa>
 8003fc8:	2300      	movs	r3, #0
 8003fca:	693a      	ldr	r2, [r7, #16]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	7d1b      	ldrb	r3, [r3, #20]
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d119      	bne.n	800400c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	7b1b      	ldrb	r3, [r3, #12]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d109      	bne.n	8003ff4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	699b      	ldr	r3, [r3, #24]
 8003fe4:	3b01      	subs	r3, #1
 8003fe6:	035a      	lsls	r2, r3, #13
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003ff0:	613b      	str	r3, [r7, #16]
 8003ff2:	e00b      	b.n	800400c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff8:	f043 0220 	orr.w	r2, r3, #32
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004004:	f043 0201 	orr.w	r2, r3, #1
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	693a      	ldr	r2, [r7, #16]
 800401c:	430a      	orrs	r2, r1
 800401e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	689a      	ldr	r2, [r3, #8]
 8004026:	4b28      	ldr	r3, [pc, #160]	; (80040c8 <HAL_ADC_Init+0x1a8>)
 8004028:	4013      	ands	r3, r2
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	6812      	ldr	r2, [r2, #0]
 800402e:	68b9      	ldr	r1, [r7, #8]
 8004030:	430b      	orrs	r3, r1
 8004032:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800403c:	d003      	beq.n	8004046 <HAL_ADC_Init+0x126>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	2b01      	cmp	r3, #1
 8004044:	d104      	bne.n	8004050 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	3b01      	subs	r3, #1
 800404c:	051b      	lsls	r3, r3, #20
 800404e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004056:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	430a      	orrs	r2, r1
 8004062:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	689a      	ldr	r2, [r3, #8]
 800406a:	4b18      	ldr	r3, [pc, #96]	; (80040cc <HAL_ADC_Init+0x1ac>)
 800406c:	4013      	ands	r3, r2
 800406e:	68ba      	ldr	r2, [r7, #8]
 8004070:	429a      	cmp	r2, r3
 8004072:	d10b      	bne.n	800408c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407e:	f023 0303 	bic.w	r3, r3, #3
 8004082:	f043 0201 	orr.w	r2, r3, #1
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800408a:	e018      	b.n	80040be <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004090:	f023 0312 	bic.w	r3, r3, #18
 8004094:	f043 0210 	orr.w	r2, r3, #16
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a0:	f043 0201 	orr.w	r2, r3, #1
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80040ac:	e007      	b.n	80040be <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b2:	f043 0210 	orr.w	r2, r3, #16
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80040be:	7dfb      	ldrb	r3, [r7, #23]
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3718      	adds	r7, #24
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	ffe1f7fd 	.word	0xffe1f7fd
 80040cc:	ff1f0efe 	.word	0xff1f0efe

080040d0 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b086      	sub	sp, #24
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	60b9      	str	r1, [r7, #8]
 80040da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040dc:	2300      	movs	r3, #0
 80040de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a64      	ldr	r2, [pc, #400]	; (8004278 <HAL_ADC_Start_DMA+0x1a8>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d004      	beq.n	80040f4 <HAL_ADC_Start_DMA+0x24>
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a63      	ldr	r2, [pc, #396]	; (800427c <HAL_ADC_Start_DMA+0x1ac>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d106      	bne.n	8004102 <HAL_ADC_Start_DMA+0x32>
 80040f4:	4b60      	ldr	r3, [pc, #384]	; (8004278 <HAL_ADC_Start_DMA+0x1a8>)
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	f040 80b3 	bne.w	8004268 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004108:	2b01      	cmp	r3, #1
 800410a:	d101      	bne.n	8004110 <HAL_ADC_Start_DMA+0x40>
 800410c:	2302      	movs	r3, #2
 800410e:	e0ae      	b.n	800426e <HAL_ADC_Start_DMA+0x19e>
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004118:	68f8      	ldr	r0, [r7, #12]
 800411a:	f000 f9c1 	bl	80044a0 <ADC_Enable>
 800411e:	4603      	mov	r3, r0
 8004120:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004122:	7dfb      	ldrb	r3, [r7, #23]
 8004124:	2b00      	cmp	r3, #0
 8004126:	f040 809a 	bne.w	800425e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800412e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004132:	f023 0301 	bic.w	r3, r3, #1
 8004136:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a4e      	ldr	r2, [pc, #312]	; (800427c <HAL_ADC_Start_DMA+0x1ac>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d105      	bne.n	8004154 <HAL_ADC_Start_DMA+0x84>
 8004148:	4b4b      	ldr	r3, [pc, #300]	; (8004278 <HAL_ADC_Start_DMA+0x1a8>)
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d115      	bne.n	8004180 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004158:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800416a:	2b00      	cmp	r3, #0
 800416c:	d026      	beq.n	80041bc <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004172:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004176:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800417e:	e01d      	b.n	80041bc <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004184:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a39      	ldr	r2, [pc, #228]	; (8004278 <HAL_ADC_Start_DMA+0x1a8>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d004      	beq.n	80041a0 <HAL_ADC_Start_DMA+0xd0>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a38      	ldr	r2, [pc, #224]	; (800427c <HAL_ADC_Start_DMA+0x1ac>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d10d      	bne.n	80041bc <HAL_ADC_Start_DMA+0xec>
 80041a0:	4b35      	ldr	r3, [pc, #212]	; (8004278 <HAL_ADC_Start_DMA+0x1a8>)
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d007      	beq.n	80041bc <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80041b4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d006      	beq.n	80041d6 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041cc:	f023 0206 	bic.w	r2, r3, #6
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	62da      	str	r2, [r3, #44]	; 0x2c
 80041d4:	e002      	b.n	80041dc <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2200      	movs	r2, #0
 80041da:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6a1b      	ldr	r3, [r3, #32]
 80041e8:	4a25      	ldr	r2, [pc, #148]	; (8004280 <HAL_ADC_Start_DMA+0x1b0>)
 80041ea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6a1b      	ldr	r3, [r3, #32]
 80041f0:	4a24      	ldr	r2, [pc, #144]	; (8004284 <HAL_ADC_Start_DMA+0x1b4>)
 80041f2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6a1b      	ldr	r3, [r3, #32]
 80041f8:	4a23      	ldr	r2, [pc, #140]	; (8004288 <HAL_ADC_Start_DMA+0x1b8>)
 80041fa:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f06f 0202 	mvn.w	r2, #2
 8004204:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	689a      	ldr	r2, [r3, #8]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004214:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	6a18      	ldr	r0, [r3, #32]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	334c      	adds	r3, #76	; 0x4c
 8004220:	4619      	mov	r1, r3
 8004222:	68ba      	ldr	r2, [r7, #8]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f000 fba5 	bl	8004974 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004234:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004238:	d108      	bne.n	800424c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	689a      	ldr	r2, [r3, #8]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8004248:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800424a:	e00f      	b.n	800426c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	689a      	ldr	r2, [r3, #8]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800425a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800425c:	e006      	b.n	800426c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2200      	movs	r2, #0
 8004262:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8004266:	e001      	b.n	800426c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800426c:	7dfb      	ldrb	r3, [r7, #23]
}
 800426e:	4618      	mov	r0, r3
 8004270:	3718      	adds	r7, #24
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	40012400 	.word	0x40012400
 800427c:	40012800 	.word	0x40012800
 8004280:	080045d7 	.word	0x080045d7
 8004284:	08004653 	.word	0x08004653
 8004288:	0800466f 	.word	0x0800466f

0800428c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004294:	bf00      	nop
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	bc80      	pop	{r7}
 800429c:	4770      	bx	lr

0800429e <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800429e:	b480      	push	{r7}
 80042a0:	b083      	sub	sp, #12
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80042a6:	bf00      	nop
 80042a8:	370c      	adds	r7, #12
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bc80      	pop	{r7}
 80042ae:	4770      	bx	lr

080042b0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80042b0:	b480      	push	{r7}
 80042b2:	b085      	sub	sp, #20
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042ba:	2300      	movs	r3, #0
 80042bc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80042be:	2300      	movs	r3, #0
 80042c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d101      	bne.n	80042d0 <HAL_ADC_ConfigChannel+0x20>
 80042cc:	2302      	movs	r3, #2
 80042ce:	e0dc      	b.n	800448a <HAL_ADC_ConfigChannel+0x1da>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	2b06      	cmp	r3, #6
 80042de:	d81c      	bhi.n	800431a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	685a      	ldr	r2, [r3, #4]
 80042ea:	4613      	mov	r3, r2
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	4413      	add	r3, r2
 80042f0:	3b05      	subs	r3, #5
 80042f2:	221f      	movs	r2, #31
 80042f4:	fa02 f303 	lsl.w	r3, r2, r3
 80042f8:	43db      	mvns	r3, r3
 80042fa:	4019      	ands	r1, r3
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	6818      	ldr	r0, [r3, #0]
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	685a      	ldr	r2, [r3, #4]
 8004304:	4613      	mov	r3, r2
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	4413      	add	r3, r2
 800430a:	3b05      	subs	r3, #5
 800430c:	fa00 f203 	lsl.w	r2, r0, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	430a      	orrs	r2, r1
 8004316:	635a      	str	r2, [r3, #52]	; 0x34
 8004318:	e03c      	b.n	8004394 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	2b0c      	cmp	r3, #12
 8004320:	d81c      	bhi.n	800435c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	685a      	ldr	r2, [r3, #4]
 800432c:	4613      	mov	r3, r2
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	4413      	add	r3, r2
 8004332:	3b23      	subs	r3, #35	; 0x23
 8004334:	221f      	movs	r2, #31
 8004336:	fa02 f303 	lsl.w	r3, r2, r3
 800433a:	43db      	mvns	r3, r3
 800433c:	4019      	ands	r1, r3
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	6818      	ldr	r0, [r3, #0]
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	685a      	ldr	r2, [r3, #4]
 8004346:	4613      	mov	r3, r2
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	4413      	add	r3, r2
 800434c:	3b23      	subs	r3, #35	; 0x23
 800434e:	fa00 f203 	lsl.w	r2, r0, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	430a      	orrs	r2, r1
 8004358:	631a      	str	r2, [r3, #48]	; 0x30
 800435a:	e01b      	b.n	8004394 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	685a      	ldr	r2, [r3, #4]
 8004366:	4613      	mov	r3, r2
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	4413      	add	r3, r2
 800436c:	3b41      	subs	r3, #65	; 0x41
 800436e:	221f      	movs	r2, #31
 8004370:	fa02 f303 	lsl.w	r3, r2, r3
 8004374:	43db      	mvns	r3, r3
 8004376:	4019      	ands	r1, r3
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	6818      	ldr	r0, [r3, #0]
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	685a      	ldr	r2, [r3, #4]
 8004380:	4613      	mov	r3, r2
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	4413      	add	r3, r2
 8004386:	3b41      	subs	r3, #65	; 0x41
 8004388:	fa00 f203 	lsl.w	r2, r0, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	430a      	orrs	r2, r1
 8004392:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	2b09      	cmp	r3, #9
 800439a:	d91c      	bls.n	80043d6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	68d9      	ldr	r1, [r3, #12]
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	4613      	mov	r3, r2
 80043a8:	005b      	lsls	r3, r3, #1
 80043aa:	4413      	add	r3, r2
 80043ac:	3b1e      	subs	r3, #30
 80043ae:	2207      	movs	r2, #7
 80043b0:	fa02 f303 	lsl.w	r3, r2, r3
 80043b4:	43db      	mvns	r3, r3
 80043b6:	4019      	ands	r1, r3
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	6898      	ldr	r0, [r3, #8]
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	4613      	mov	r3, r2
 80043c2:	005b      	lsls	r3, r3, #1
 80043c4:	4413      	add	r3, r2
 80043c6:	3b1e      	subs	r3, #30
 80043c8:	fa00 f203 	lsl.w	r2, r0, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	430a      	orrs	r2, r1
 80043d2:	60da      	str	r2, [r3, #12]
 80043d4:	e019      	b.n	800440a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	6919      	ldr	r1, [r3, #16]
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	4613      	mov	r3, r2
 80043e2:	005b      	lsls	r3, r3, #1
 80043e4:	4413      	add	r3, r2
 80043e6:	2207      	movs	r2, #7
 80043e8:	fa02 f303 	lsl.w	r3, r2, r3
 80043ec:	43db      	mvns	r3, r3
 80043ee:	4019      	ands	r1, r3
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	6898      	ldr	r0, [r3, #8]
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	4613      	mov	r3, r2
 80043fa:	005b      	lsls	r3, r3, #1
 80043fc:	4413      	add	r3, r2
 80043fe:	fa00 f203 	lsl.w	r2, r0, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	430a      	orrs	r2, r1
 8004408:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	2b10      	cmp	r3, #16
 8004410:	d003      	beq.n	800441a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004416:	2b11      	cmp	r3, #17
 8004418:	d132      	bne.n	8004480 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a1d      	ldr	r2, [pc, #116]	; (8004494 <HAL_ADC_ConfigChannel+0x1e4>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d125      	bne.n	8004470 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d126      	bne.n	8004480 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	689a      	ldr	r2, [r3, #8]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004440:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2b10      	cmp	r3, #16
 8004448:	d11a      	bne.n	8004480 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800444a:	4b13      	ldr	r3, [pc, #76]	; (8004498 <HAL_ADC_ConfigChannel+0x1e8>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a13      	ldr	r2, [pc, #76]	; (800449c <HAL_ADC_ConfigChannel+0x1ec>)
 8004450:	fba2 2303 	umull	r2, r3, r2, r3
 8004454:	0c9a      	lsrs	r2, r3, #18
 8004456:	4613      	mov	r3, r2
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	4413      	add	r3, r2
 800445c:	005b      	lsls	r3, r3, #1
 800445e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004460:	e002      	b.n	8004468 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	3b01      	subs	r3, #1
 8004466:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d1f9      	bne.n	8004462 <HAL_ADC_ConfigChannel+0x1b2>
 800446e:	e007      	b.n	8004480 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004474:	f043 0220 	orr.w	r2, r3, #32
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004488:	7bfb      	ldrb	r3, [r7, #15]
}
 800448a:	4618      	mov	r0, r3
 800448c:	3714      	adds	r7, #20
 800448e:	46bd      	mov	sp, r7
 8004490:	bc80      	pop	{r7}
 8004492:	4770      	bx	lr
 8004494:	40012400 	.word	0x40012400
 8004498:	2000003c 	.word	0x2000003c
 800449c:	431bde83 	.word	0x431bde83

080044a0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044a8:	2300      	movs	r3, #0
 80044aa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80044ac:	2300      	movs	r3, #0
 80044ae:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	f003 0301 	and.w	r3, r3, #1
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d040      	beq.n	8004540 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	689a      	ldr	r2, [r3, #8]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f042 0201 	orr.w	r2, r2, #1
 80044cc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80044ce:	4b1f      	ldr	r3, [pc, #124]	; (800454c <ADC_Enable+0xac>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a1f      	ldr	r2, [pc, #124]	; (8004550 <ADC_Enable+0xb0>)
 80044d4:	fba2 2303 	umull	r2, r3, r2, r3
 80044d8:	0c9b      	lsrs	r3, r3, #18
 80044da:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80044dc:	e002      	b.n	80044e4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	3b01      	subs	r3, #1
 80044e2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d1f9      	bne.n	80044de <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80044ea:	f7ff fceb 	bl	8003ec4 <HAL_GetTick>
 80044ee:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80044f0:	e01f      	b.n	8004532 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80044f2:	f7ff fce7 	bl	8003ec4 <HAL_GetTick>
 80044f6:	4602      	mov	r2, r0
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d918      	bls.n	8004532 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	f003 0301 	and.w	r3, r3, #1
 800450a:	2b01      	cmp	r3, #1
 800450c:	d011      	beq.n	8004532 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004512:	f043 0210 	orr.w	r2, r3, #16
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800451e:	f043 0201 	orr.w	r2, r3, #1
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e007      	b.n	8004542 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	f003 0301 	and.w	r3, r3, #1
 800453c:	2b01      	cmp	r3, #1
 800453e:	d1d8      	bne.n	80044f2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004540:	2300      	movs	r3, #0
}
 8004542:	4618      	mov	r0, r3
 8004544:	3710      	adds	r7, #16
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	2000003c 	.word	0x2000003c
 8004550:	431bde83 	.word	0x431bde83

08004554 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800455c:	2300      	movs	r3, #0
 800455e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f003 0301 	and.w	r3, r3, #1
 800456a:	2b01      	cmp	r3, #1
 800456c:	d12e      	bne.n	80045cc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	689a      	ldr	r2, [r3, #8]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f022 0201 	bic.w	r2, r2, #1
 800457c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800457e:	f7ff fca1 	bl	8003ec4 <HAL_GetTick>
 8004582:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004584:	e01b      	b.n	80045be <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004586:	f7ff fc9d 	bl	8003ec4 <HAL_GetTick>
 800458a:	4602      	mov	r2, r0
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	2b02      	cmp	r3, #2
 8004592:	d914      	bls.n	80045be <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	f003 0301 	and.w	r3, r3, #1
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d10d      	bne.n	80045be <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a6:	f043 0210 	orr.w	r2, r3, #16
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b2:	f043 0201 	orr.w	r2, r3, #1
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e007      	b.n	80045ce <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	f003 0301 	and.w	r3, r3, #1
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d0dc      	beq.n	8004586 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3710      	adds	r7, #16
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}

080045d6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80045d6:	b580      	push	{r7, lr}
 80045d8:	b084      	sub	sp, #16
 80045da:	af00      	add	r7, sp, #0
 80045dc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e2:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d127      	bne.n	8004640 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004606:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800460a:	d115      	bne.n	8004638 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004610:	2b00      	cmp	r3, #0
 8004612:	d111      	bne.n	8004638 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004618:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004624:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004628:	2b00      	cmp	r3, #0
 800462a:	d105      	bne.n	8004638 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004630:	f043 0201 	orr.w	r2, r3, #1
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004638:	68f8      	ldr	r0, [r7, #12]
 800463a:	f7fe fc55 	bl	8002ee8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800463e:	e004      	b.n	800464a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6a1b      	ldr	r3, [r3, #32]
 8004644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	4798      	blx	r3
}
 800464a:	bf00      	nop
 800464c:	3710      	adds	r7, #16
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}

08004652 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004652:	b580      	push	{r7, lr}
 8004654:	b084      	sub	sp, #16
 8004656:	af00      	add	r7, sp, #0
 8004658:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004660:	68f8      	ldr	r0, [r7, #12]
 8004662:	f7ff fe13 	bl	800428c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004666:	bf00      	nop
 8004668:	3710      	adds	r7, #16
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}

0800466e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800466e:	b580      	push	{r7, lr}
 8004670:	b084      	sub	sp, #16
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004680:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468c:	f043 0204 	orr.w	r2, r3, #4
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004694:	68f8      	ldr	r0, [r7, #12]
 8004696:	f7ff fe02 	bl	800429e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800469a:	bf00      	nop
 800469c:	3710      	adds	r7, #16
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
	...

080046a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b085      	sub	sp, #20
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f003 0307 	and.w	r3, r3, #7
 80046b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80046b4:	4b0c      	ldr	r3, [pc, #48]	; (80046e8 <__NVIC_SetPriorityGrouping+0x44>)
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80046ba:	68ba      	ldr	r2, [r7, #8]
 80046bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80046c0:	4013      	ands	r3, r2
 80046c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80046cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80046d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80046d6:	4a04      	ldr	r2, [pc, #16]	; (80046e8 <__NVIC_SetPriorityGrouping+0x44>)
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	60d3      	str	r3, [r2, #12]
}
 80046dc:	bf00      	nop
 80046de:	3714      	adds	r7, #20
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bc80      	pop	{r7}
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	e000ed00 	.word	0xe000ed00

080046ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80046ec:	b480      	push	{r7}
 80046ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80046f0:	4b04      	ldr	r3, [pc, #16]	; (8004704 <__NVIC_GetPriorityGrouping+0x18>)
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	0a1b      	lsrs	r3, r3, #8
 80046f6:	f003 0307 	and.w	r3, r3, #7
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bc80      	pop	{r7}
 8004700:	4770      	bx	lr
 8004702:	bf00      	nop
 8004704:	e000ed00 	.word	0xe000ed00

08004708 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	4603      	mov	r3, r0
 8004710:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004716:	2b00      	cmp	r3, #0
 8004718:	db0b      	blt.n	8004732 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800471a:	79fb      	ldrb	r3, [r7, #7]
 800471c:	f003 021f 	and.w	r2, r3, #31
 8004720:	4906      	ldr	r1, [pc, #24]	; (800473c <__NVIC_EnableIRQ+0x34>)
 8004722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004726:	095b      	lsrs	r3, r3, #5
 8004728:	2001      	movs	r0, #1
 800472a:	fa00 f202 	lsl.w	r2, r0, r2
 800472e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004732:	bf00      	nop
 8004734:	370c      	adds	r7, #12
 8004736:	46bd      	mov	sp, r7
 8004738:	bc80      	pop	{r7}
 800473a:	4770      	bx	lr
 800473c:	e000e100 	.word	0xe000e100

08004740 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
 8004746:	4603      	mov	r3, r0
 8004748:	6039      	str	r1, [r7, #0]
 800474a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800474c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004750:	2b00      	cmp	r3, #0
 8004752:	db0a      	blt.n	800476a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	b2da      	uxtb	r2, r3
 8004758:	490c      	ldr	r1, [pc, #48]	; (800478c <__NVIC_SetPriority+0x4c>)
 800475a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800475e:	0112      	lsls	r2, r2, #4
 8004760:	b2d2      	uxtb	r2, r2
 8004762:	440b      	add	r3, r1
 8004764:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004768:	e00a      	b.n	8004780 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	b2da      	uxtb	r2, r3
 800476e:	4908      	ldr	r1, [pc, #32]	; (8004790 <__NVIC_SetPriority+0x50>)
 8004770:	79fb      	ldrb	r3, [r7, #7]
 8004772:	f003 030f 	and.w	r3, r3, #15
 8004776:	3b04      	subs	r3, #4
 8004778:	0112      	lsls	r2, r2, #4
 800477a:	b2d2      	uxtb	r2, r2
 800477c:	440b      	add	r3, r1
 800477e:	761a      	strb	r2, [r3, #24]
}
 8004780:	bf00      	nop
 8004782:	370c      	adds	r7, #12
 8004784:	46bd      	mov	sp, r7
 8004786:	bc80      	pop	{r7}
 8004788:	4770      	bx	lr
 800478a:	bf00      	nop
 800478c:	e000e100 	.word	0xe000e100
 8004790:	e000ed00 	.word	0xe000ed00

08004794 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004794:	b480      	push	{r7}
 8004796:	b089      	sub	sp, #36	; 0x24
 8004798:	af00      	add	r7, sp, #0
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	60b9      	str	r1, [r7, #8]
 800479e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f003 0307 	and.w	r3, r3, #7
 80047a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	f1c3 0307 	rsb	r3, r3, #7
 80047ae:	2b04      	cmp	r3, #4
 80047b0:	bf28      	it	cs
 80047b2:	2304      	movcs	r3, #4
 80047b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	3304      	adds	r3, #4
 80047ba:	2b06      	cmp	r3, #6
 80047bc:	d902      	bls.n	80047c4 <NVIC_EncodePriority+0x30>
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	3b03      	subs	r3, #3
 80047c2:	e000      	b.n	80047c6 <NVIC_EncodePriority+0x32>
 80047c4:	2300      	movs	r3, #0
 80047c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047c8:	f04f 32ff 	mov.w	r2, #4294967295
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	fa02 f303 	lsl.w	r3, r2, r3
 80047d2:	43da      	mvns	r2, r3
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	401a      	ands	r2, r3
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80047dc:	f04f 31ff 	mov.w	r1, #4294967295
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	fa01 f303 	lsl.w	r3, r1, r3
 80047e6:	43d9      	mvns	r1, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047ec:	4313      	orrs	r3, r2
         );
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3724      	adds	r7, #36	; 0x24
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bc80      	pop	{r7}
 80047f6:	4770      	bx	lr

080047f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	3b01      	subs	r3, #1
 8004804:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004808:	d301      	bcc.n	800480e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800480a:	2301      	movs	r3, #1
 800480c:	e00f      	b.n	800482e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800480e:	4a0a      	ldr	r2, [pc, #40]	; (8004838 <SysTick_Config+0x40>)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	3b01      	subs	r3, #1
 8004814:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004816:	210f      	movs	r1, #15
 8004818:	f04f 30ff 	mov.w	r0, #4294967295
 800481c:	f7ff ff90 	bl	8004740 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004820:	4b05      	ldr	r3, [pc, #20]	; (8004838 <SysTick_Config+0x40>)
 8004822:	2200      	movs	r2, #0
 8004824:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004826:	4b04      	ldr	r3, [pc, #16]	; (8004838 <SysTick_Config+0x40>)
 8004828:	2207      	movs	r2, #7
 800482a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	3708      	adds	r7, #8
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	e000e010 	.word	0xe000e010

0800483c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b082      	sub	sp, #8
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f7ff ff2d 	bl	80046a4 <__NVIC_SetPriorityGrouping>
}
 800484a:	bf00      	nop
 800484c:	3708      	adds	r7, #8
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}

08004852 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004852:	b580      	push	{r7, lr}
 8004854:	b086      	sub	sp, #24
 8004856:	af00      	add	r7, sp, #0
 8004858:	4603      	mov	r3, r0
 800485a:	60b9      	str	r1, [r7, #8]
 800485c:	607a      	str	r2, [r7, #4]
 800485e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004860:	2300      	movs	r3, #0
 8004862:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004864:	f7ff ff42 	bl	80046ec <__NVIC_GetPriorityGrouping>
 8004868:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	68b9      	ldr	r1, [r7, #8]
 800486e:	6978      	ldr	r0, [r7, #20]
 8004870:	f7ff ff90 	bl	8004794 <NVIC_EncodePriority>
 8004874:	4602      	mov	r2, r0
 8004876:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800487a:	4611      	mov	r1, r2
 800487c:	4618      	mov	r0, r3
 800487e:	f7ff ff5f 	bl	8004740 <__NVIC_SetPriority>
}
 8004882:	bf00      	nop
 8004884:	3718      	adds	r7, #24
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}

0800488a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800488a:	b580      	push	{r7, lr}
 800488c:	b082      	sub	sp, #8
 800488e:	af00      	add	r7, sp, #0
 8004890:	4603      	mov	r3, r0
 8004892:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004894:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004898:	4618      	mov	r0, r3
 800489a:	f7ff ff35 	bl	8004708 <__NVIC_EnableIRQ>
}
 800489e:	bf00      	nop
 80048a0:	3708      	adds	r7, #8
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}

080048a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80048a6:	b580      	push	{r7, lr}
 80048a8:	b082      	sub	sp, #8
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f7ff ffa2 	bl	80047f8 <SysTick_Config>
 80048b4:	4603      	mov	r3, r0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3708      	adds	r7, #8
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
	...

080048c0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b085      	sub	sp, #20
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80048c8:	2300      	movs	r3, #0
 80048ca:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d101      	bne.n	80048d6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e043      	b.n	800495e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	461a      	mov	r2, r3
 80048dc:	4b22      	ldr	r3, [pc, #136]	; (8004968 <HAL_DMA_Init+0xa8>)
 80048de:	4413      	add	r3, r2
 80048e0:	4a22      	ldr	r2, [pc, #136]	; (800496c <HAL_DMA_Init+0xac>)
 80048e2:	fba2 2303 	umull	r2, r3, r2, r3
 80048e6:	091b      	lsrs	r3, r3, #4
 80048e8:	009a      	lsls	r2, r3, #2
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a1f      	ldr	r2, [pc, #124]	; (8004970 <HAL_DMA_Init+0xb0>)
 80048f2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2202      	movs	r2, #2
 80048f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800490a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800490e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004918:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004924:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	695b      	ldr	r3, [r3, #20]
 800492a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004930:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	69db      	ldr	r3, [r3, #28]
 8004936:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004938:	68fa      	ldr	r2, [r7, #12]
 800493a:	4313      	orrs	r3, r2
 800493c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	68fa      	ldr	r2, [r7, #12]
 8004944:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	3714      	adds	r7, #20
 8004962:	46bd      	mov	sp, r7
 8004964:	bc80      	pop	{r7}
 8004966:	4770      	bx	lr
 8004968:	bffdfff8 	.word	0xbffdfff8
 800496c:	cccccccd 	.word	0xcccccccd
 8004970:	40020000 	.word	0x40020000

08004974 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b086      	sub	sp, #24
 8004978:	af00      	add	r7, sp, #0
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	607a      	str	r2, [r7, #4]
 8004980:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004982:	2300      	movs	r3, #0
 8004984:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f893 3020 	ldrb.w	r3, [r3, #32]
 800498c:	2b01      	cmp	r3, #1
 800498e:	d101      	bne.n	8004994 <HAL_DMA_Start_IT+0x20>
 8004990:	2302      	movs	r3, #2
 8004992:	e04a      	b.n	8004a2a <HAL_DMA_Start_IT+0xb6>
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d13a      	bne.n	8004a1c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2202      	movs	r2, #2
 80049aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2200      	movs	r2, #0
 80049b2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f022 0201 	bic.w	r2, r2, #1
 80049c2:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	68b9      	ldr	r1, [r7, #8]
 80049ca:	68f8      	ldr	r0, [r7, #12]
 80049cc:	f000 f938 	bl	8004c40 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d008      	beq.n	80049ea <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f042 020e 	orr.w	r2, r2, #14
 80049e6:	601a      	str	r2, [r3, #0]
 80049e8:	e00f      	b.n	8004a0a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f022 0204 	bic.w	r2, r2, #4
 80049f8:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f042 020a 	orr.w	r2, r2, #10
 8004a08:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f042 0201 	orr.w	r2, r2, #1
 8004a18:	601a      	str	r2, [r3, #0]
 8004a1a:	e005      	b.n	8004a28 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004a24:	2302      	movs	r3, #2
 8004a26:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8004a28:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3718      	adds	r7, #24
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
	...

08004a34 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a50:	2204      	movs	r2, #4
 8004a52:	409a      	lsls	r2, r3
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	4013      	ands	r3, r2
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d04f      	beq.n	8004afc <HAL_DMA_IRQHandler+0xc8>
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	f003 0304 	and.w	r3, r3, #4
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d04a      	beq.n	8004afc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 0320 	and.w	r3, r3, #32
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d107      	bne.n	8004a84 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f022 0204 	bic.w	r2, r2, #4
 8004a82:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a66      	ldr	r2, [pc, #408]	; (8004c24 <HAL_DMA_IRQHandler+0x1f0>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d029      	beq.n	8004ae2 <HAL_DMA_IRQHandler+0xae>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a65      	ldr	r2, [pc, #404]	; (8004c28 <HAL_DMA_IRQHandler+0x1f4>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d022      	beq.n	8004ade <HAL_DMA_IRQHandler+0xaa>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a63      	ldr	r2, [pc, #396]	; (8004c2c <HAL_DMA_IRQHandler+0x1f8>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d01a      	beq.n	8004ad8 <HAL_DMA_IRQHandler+0xa4>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a62      	ldr	r2, [pc, #392]	; (8004c30 <HAL_DMA_IRQHandler+0x1fc>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d012      	beq.n	8004ad2 <HAL_DMA_IRQHandler+0x9e>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a60      	ldr	r2, [pc, #384]	; (8004c34 <HAL_DMA_IRQHandler+0x200>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d00a      	beq.n	8004acc <HAL_DMA_IRQHandler+0x98>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a5f      	ldr	r2, [pc, #380]	; (8004c38 <HAL_DMA_IRQHandler+0x204>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d102      	bne.n	8004ac6 <HAL_DMA_IRQHandler+0x92>
 8004ac0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004ac4:	e00e      	b.n	8004ae4 <HAL_DMA_IRQHandler+0xb0>
 8004ac6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004aca:	e00b      	b.n	8004ae4 <HAL_DMA_IRQHandler+0xb0>
 8004acc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004ad0:	e008      	b.n	8004ae4 <HAL_DMA_IRQHandler+0xb0>
 8004ad2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004ad6:	e005      	b.n	8004ae4 <HAL_DMA_IRQHandler+0xb0>
 8004ad8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004adc:	e002      	b.n	8004ae4 <HAL_DMA_IRQHandler+0xb0>
 8004ade:	2340      	movs	r3, #64	; 0x40
 8004ae0:	e000      	b.n	8004ae4 <HAL_DMA_IRQHandler+0xb0>
 8004ae2:	2304      	movs	r3, #4
 8004ae4:	4a55      	ldr	r2, [pc, #340]	; (8004c3c <HAL_DMA_IRQHandler+0x208>)
 8004ae6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	f000 8094 	beq.w	8004c1a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004afa:	e08e      	b.n	8004c1a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b00:	2202      	movs	r2, #2
 8004b02:	409a      	lsls	r2, r3
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	4013      	ands	r3, r2
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d056      	beq.n	8004bba <HAL_DMA_IRQHandler+0x186>
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	f003 0302 	and.w	r3, r3, #2
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d051      	beq.n	8004bba <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 0320 	and.w	r3, r3, #32
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d10b      	bne.n	8004b3c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f022 020a 	bic.w	r2, r2, #10
 8004b32:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a38      	ldr	r2, [pc, #224]	; (8004c24 <HAL_DMA_IRQHandler+0x1f0>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d029      	beq.n	8004b9a <HAL_DMA_IRQHandler+0x166>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a37      	ldr	r2, [pc, #220]	; (8004c28 <HAL_DMA_IRQHandler+0x1f4>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d022      	beq.n	8004b96 <HAL_DMA_IRQHandler+0x162>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a35      	ldr	r2, [pc, #212]	; (8004c2c <HAL_DMA_IRQHandler+0x1f8>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d01a      	beq.n	8004b90 <HAL_DMA_IRQHandler+0x15c>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a34      	ldr	r2, [pc, #208]	; (8004c30 <HAL_DMA_IRQHandler+0x1fc>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d012      	beq.n	8004b8a <HAL_DMA_IRQHandler+0x156>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a32      	ldr	r2, [pc, #200]	; (8004c34 <HAL_DMA_IRQHandler+0x200>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d00a      	beq.n	8004b84 <HAL_DMA_IRQHandler+0x150>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a31      	ldr	r2, [pc, #196]	; (8004c38 <HAL_DMA_IRQHandler+0x204>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d102      	bne.n	8004b7e <HAL_DMA_IRQHandler+0x14a>
 8004b78:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004b7c:	e00e      	b.n	8004b9c <HAL_DMA_IRQHandler+0x168>
 8004b7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b82:	e00b      	b.n	8004b9c <HAL_DMA_IRQHandler+0x168>
 8004b84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b88:	e008      	b.n	8004b9c <HAL_DMA_IRQHandler+0x168>
 8004b8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004b8e:	e005      	b.n	8004b9c <HAL_DMA_IRQHandler+0x168>
 8004b90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b94:	e002      	b.n	8004b9c <HAL_DMA_IRQHandler+0x168>
 8004b96:	2320      	movs	r3, #32
 8004b98:	e000      	b.n	8004b9c <HAL_DMA_IRQHandler+0x168>
 8004b9a:	2302      	movs	r3, #2
 8004b9c:	4a27      	ldr	r2, [pc, #156]	; (8004c3c <HAL_DMA_IRQHandler+0x208>)
 8004b9e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d034      	beq.n	8004c1a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004bb8:	e02f      	b.n	8004c1a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bbe:	2208      	movs	r2, #8
 8004bc0:	409a      	lsls	r2, r3
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d028      	beq.n	8004c1c <HAL_DMA_IRQHandler+0x1e8>
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	f003 0308 	and.w	r3, r3, #8
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d023      	beq.n	8004c1c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f022 020e 	bic.w	r2, r2, #14
 8004be2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bec:	2101      	movs	r1, #1
 8004bee:	fa01 f202 	lsl.w	r2, r1, r2
 8004bf2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d004      	beq.n	8004c1c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	4798      	blx	r3
    }
  }
  return;
 8004c1a:	bf00      	nop
 8004c1c:	bf00      	nop
}
 8004c1e:	3710      	adds	r7, #16
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	40020008 	.word	0x40020008
 8004c28:	4002001c 	.word	0x4002001c
 8004c2c:	40020030 	.word	0x40020030
 8004c30:	40020044 	.word	0x40020044
 8004c34:	40020058 	.word	0x40020058
 8004c38:	4002006c 	.word	0x4002006c
 8004c3c:	40020000 	.word	0x40020000

08004c40 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b085      	sub	sp, #20
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	60f8      	str	r0, [r7, #12]
 8004c48:	60b9      	str	r1, [r7, #8]
 8004c4a:	607a      	str	r2, [r7, #4]
 8004c4c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c56:	2101      	movs	r1, #1
 8004c58:	fa01 f202 	lsl.w	r2, r1, r2
 8004c5c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	683a      	ldr	r2, [r7, #0]
 8004c64:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	2b10      	cmp	r3, #16
 8004c6c:	d108      	bne.n	8004c80 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	68ba      	ldr	r2, [r7, #8]
 8004c7c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004c7e:	e007      	b.n	8004c90 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	68ba      	ldr	r2, [r7, #8]
 8004c86:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	60da      	str	r2, [r3, #12]
}
 8004c90:	bf00      	nop
 8004c92:	3714      	adds	r7, #20
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bc80      	pop	{r7}
 8004c98:	4770      	bx	lr
	...

08004c9c <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c9e:	b087      	sub	sp, #28
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	60b9      	str	r1, [r7, #8]
 8004ca6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004cb6:	4b2f      	ldr	r3, [pc, #188]	; (8004d74 <HAL_FLASH_Program+0xd8>)
 8004cb8:	7e1b      	ldrb	r3, [r3, #24]
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d101      	bne.n	8004cc2 <HAL_FLASH_Program+0x26>
 8004cbe:	2302      	movs	r3, #2
 8004cc0:	e054      	b.n	8004d6c <HAL_FLASH_Program+0xd0>
 8004cc2:	4b2c      	ldr	r3, [pc, #176]	; (8004d74 <HAL_FLASH_Program+0xd8>)
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004cc8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004ccc:	f000 f8b2 	bl	8004e34 <FLASH_WaitForLastOperation>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8004cd4:	7dfb      	ldrb	r3, [r7, #23]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d144      	bne.n	8004d64 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d102      	bne.n	8004ce6 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	757b      	strb	r3, [r7, #21]
 8004ce4:	e007      	b.n	8004cf6 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	d102      	bne.n	8004cf2 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8004cec:	2302      	movs	r3, #2
 8004cee:	757b      	strb	r3, [r7, #21]
 8004cf0:	e001      	b.n	8004cf6 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8004cf2:	2304      	movs	r3, #4
 8004cf4:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	75bb      	strb	r3, [r7, #22]
 8004cfa:	e02d      	b.n	8004d58 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8004cfc:	7dbb      	ldrb	r3, [r7, #22]
 8004cfe:	005a      	lsls	r2, r3, #1
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	eb02 0c03 	add.w	ip, r2, r3
 8004d06:	7dbb      	ldrb	r3, [r7, #22]
 8004d08:	0119      	lsls	r1, r3, #4
 8004d0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d0e:	f1c1 0620 	rsb	r6, r1, #32
 8004d12:	f1a1 0020 	sub.w	r0, r1, #32
 8004d16:	fa22 f401 	lsr.w	r4, r2, r1
 8004d1a:	fa03 f606 	lsl.w	r6, r3, r6
 8004d1e:	4334      	orrs	r4, r6
 8004d20:	fa23 f000 	lsr.w	r0, r3, r0
 8004d24:	4304      	orrs	r4, r0
 8004d26:	fa23 f501 	lsr.w	r5, r3, r1
 8004d2a:	b2a3      	uxth	r3, r4
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	4660      	mov	r0, ip
 8004d30:	f000 f864 	bl	8004dfc <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004d34:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004d38:	f000 f87c 	bl	8004e34 <FLASH_WaitForLastOperation>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8004d40:	4b0d      	ldr	r3, [pc, #52]	; (8004d78 <HAL_FLASH_Program+0xdc>)
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	4a0c      	ldr	r2, [pc, #48]	; (8004d78 <HAL_FLASH_Program+0xdc>)
 8004d46:	f023 0301 	bic.w	r3, r3, #1
 8004d4a:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8004d4c:	7dfb      	ldrb	r3, [r7, #23]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d107      	bne.n	8004d62 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8004d52:	7dbb      	ldrb	r3, [r7, #22]
 8004d54:	3301      	adds	r3, #1
 8004d56:	75bb      	strb	r3, [r7, #22]
 8004d58:	7dba      	ldrb	r2, [r7, #22]
 8004d5a:	7d7b      	ldrb	r3, [r7, #21]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d3cd      	bcc.n	8004cfc <HAL_FLASH_Program+0x60>
 8004d60:	e000      	b.n	8004d64 <HAL_FLASH_Program+0xc8>
      {
        break;
 8004d62:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004d64:	4b03      	ldr	r3, [pc, #12]	; (8004d74 <HAL_FLASH_Program+0xd8>)
 8004d66:	2200      	movs	r2, #0
 8004d68:	761a      	strb	r2, [r3, #24]

  return status;
 8004d6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	371c      	adds	r7, #28
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d74:	20002cf0 	.word	0x20002cf0
 8004d78:	40022000 	.word	0x40022000

08004d7c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004d82:	2300      	movs	r3, #0
 8004d84:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004d86:	4b0d      	ldr	r3, [pc, #52]	; (8004dbc <HAL_FLASH_Unlock+0x40>)
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d00d      	beq.n	8004dae <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004d92:	4b0a      	ldr	r3, [pc, #40]	; (8004dbc <HAL_FLASH_Unlock+0x40>)
 8004d94:	4a0a      	ldr	r2, [pc, #40]	; (8004dc0 <HAL_FLASH_Unlock+0x44>)
 8004d96:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004d98:	4b08      	ldr	r3, [pc, #32]	; (8004dbc <HAL_FLASH_Unlock+0x40>)
 8004d9a:	4a0a      	ldr	r2, [pc, #40]	; (8004dc4 <HAL_FLASH_Unlock+0x48>)
 8004d9c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004d9e:	4b07      	ldr	r3, [pc, #28]	; (8004dbc <HAL_FLASH_Unlock+0x40>)
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d001      	beq.n	8004dae <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8004dae:	79fb      	ldrb	r3, [r7, #7]
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	370c      	adds	r7, #12
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bc80      	pop	{r7}
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	40022000 	.word	0x40022000
 8004dc0:	45670123 	.word	0x45670123
 8004dc4:	cdef89ab 	.word	0xcdef89ab

08004dc8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004dcc:	4b05      	ldr	r3, [pc, #20]	; (8004de4 <HAL_FLASH_Lock+0x1c>)
 8004dce:	691b      	ldr	r3, [r3, #16]
 8004dd0:	4a04      	ldr	r2, [pc, #16]	; (8004de4 <HAL_FLASH_Lock+0x1c>)
 8004dd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dd6:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bc80      	pop	{r7}
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	40022000 	.word	0x40022000

08004de8 <HAL_FLASH_GetError>:
  * @brief  Get the specific FLASH error flag.
  * @retval FLASH_ErrorCode The returned value can be:
  *            @ref FLASH_Error_Codes
  */
uint32_t HAL_FLASH_GetError(void)
{
 8004de8:	b480      	push	{r7}
 8004dea:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8004dec:	4b02      	ldr	r3, [pc, #8]	; (8004df8 <HAL_FLASH_GetError+0x10>)
 8004dee:	69db      	ldr	r3, [r3, #28]
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bc80      	pop	{r7}
 8004df6:	4770      	bx	lr
 8004df8:	20002cf0 	.word	0x20002cf0

08004dfc <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b083      	sub	sp, #12
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	460b      	mov	r3, r1
 8004e06:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004e08:	4b08      	ldr	r3, [pc, #32]	; (8004e2c <FLASH_Program_HalfWord+0x30>)
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004e0e:	4b08      	ldr	r3, [pc, #32]	; (8004e30 <FLASH_Program_HalfWord+0x34>)
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	4a07      	ldr	r2, [pc, #28]	; (8004e30 <FLASH_Program_HalfWord+0x34>)
 8004e14:	f043 0301 	orr.w	r3, r3, #1
 8004e18:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	887a      	ldrh	r2, [r7, #2]
 8004e1e:	801a      	strh	r2, [r3, #0]
}
 8004e20:	bf00      	nop
 8004e22:	370c      	adds	r7, #12
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bc80      	pop	{r7}
 8004e28:	4770      	bx	lr
 8004e2a:	bf00      	nop
 8004e2c:	20002cf0 	.word	0x20002cf0
 8004e30:	40022000 	.word	0x40022000

08004e34 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8004e3c:	f7ff f842 	bl	8003ec4 <HAL_GetTick>
 8004e40:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004e42:	e010      	b.n	8004e66 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e4a:	d00c      	beq.n	8004e66 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d007      	beq.n	8004e62 <FLASH_WaitForLastOperation+0x2e>
 8004e52:	f7ff f837 	bl	8003ec4 <HAL_GetTick>
 8004e56:	4602      	mov	r2, r0
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d201      	bcs.n	8004e66 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e025      	b.n	8004eb2 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004e66:	4b15      	ldr	r3, [pc, #84]	; (8004ebc <FLASH_WaitForLastOperation+0x88>)
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	f003 0301 	and.w	r3, r3, #1
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d1e8      	bne.n	8004e44 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8004e72:	4b12      	ldr	r3, [pc, #72]	; (8004ebc <FLASH_WaitForLastOperation+0x88>)
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	f003 0320 	and.w	r3, r3, #32
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d002      	beq.n	8004e84 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004e7e:	4b0f      	ldr	r3, [pc, #60]	; (8004ebc <FLASH_WaitForLastOperation+0x88>)
 8004e80:	2220      	movs	r2, #32
 8004e82:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004e84:	4b0d      	ldr	r3, [pc, #52]	; (8004ebc <FLASH_WaitForLastOperation+0x88>)
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	f003 0310 	and.w	r3, r3, #16
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d10b      	bne.n	8004ea8 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8004e90:	4b0a      	ldr	r3, [pc, #40]	; (8004ebc <FLASH_WaitForLastOperation+0x88>)
 8004e92:	69db      	ldr	r3, [r3, #28]
 8004e94:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d105      	bne.n	8004ea8 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004e9c:	4b07      	ldr	r3, [pc, #28]	; (8004ebc <FLASH_WaitForLastOperation+0x88>)
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d003      	beq.n	8004eb0 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004ea8:	f000 f80a 	bl	8004ec0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e000      	b.n	8004eb2 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8004eb0:	2300      	movs	r3, #0
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3710      	adds	r7, #16
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	40022000 	.word	0x40022000

08004ec0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8004eca:	4b23      	ldr	r3, [pc, #140]	; (8004f58 <FLASH_SetErrorCode+0x98>)
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	f003 0310 	and.w	r3, r3, #16
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d009      	beq.n	8004eea <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004ed6:	4b21      	ldr	r3, [pc, #132]	; (8004f5c <FLASH_SetErrorCode+0x9c>)
 8004ed8:	69db      	ldr	r3, [r3, #28]
 8004eda:	f043 0302 	orr.w	r3, r3, #2
 8004ede:	4a1f      	ldr	r2, [pc, #124]	; (8004f5c <FLASH_SetErrorCode+0x9c>)
 8004ee0:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f043 0310 	orr.w	r3, r3, #16
 8004ee8:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004eea:	4b1b      	ldr	r3, [pc, #108]	; (8004f58 <FLASH_SetErrorCode+0x98>)
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	f003 0304 	and.w	r3, r3, #4
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d009      	beq.n	8004f0a <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8004ef6:	4b19      	ldr	r3, [pc, #100]	; (8004f5c <FLASH_SetErrorCode+0x9c>)
 8004ef8:	69db      	ldr	r3, [r3, #28]
 8004efa:	f043 0301 	orr.w	r3, r3, #1
 8004efe:	4a17      	ldr	r2, [pc, #92]	; (8004f5c <FLASH_SetErrorCode+0x9c>)
 8004f00:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f043 0304 	orr.w	r3, r3, #4
 8004f08:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8004f0a:	4b13      	ldr	r3, [pc, #76]	; (8004f58 <FLASH_SetErrorCode+0x98>)
 8004f0c:	69db      	ldr	r3, [r3, #28]
 8004f0e:	f003 0301 	and.w	r3, r3, #1
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d00b      	beq.n	8004f2e <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8004f16:	4b11      	ldr	r3, [pc, #68]	; (8004f5c <FLASH_SetErrorCode+0x9c>)
 8004f18:	69db      	ldr	r3, [r3, #28]
 8004f1a:	f043 0304 	orr.w	r3, r3, #4
 8004f1e:	4a0f      	ldr	r2, [pc, #60]	; (8004f5c <FLASH_SetErrorCode+0x9c>)
 8004f20:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8004f22:	4b0d      	ldr	r3, [pc, #52]	; (8004f58 <FLASH_SetErrorCode+0x98>)
 8004f24:	69db      	ldr	r3, [r3, #28]
 8004f26:	4a0c      	ldr	r2, [pc, #48]	; (8004f58 <FLASH_SetErrorCode+0x98>)
 8004f28:	f023 0301 	bic.w	r3, r3, #1
 8004f2c:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f240 1201 	movw	r2, #257	; 0x101
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d106      	bne.n	8004f46 <FLASH_SetErrorCode+0x86>
 8004f38:	4b07      	ldr	r3, [pc, #28]	; (8004f58 <FLASH_SetErrorCode+0x98>)
 8004f3a:	69db      	ldr	r3, [r3, #28]
 8004f3c:	4a06      	ldr	r2, [pc, #24]	; (8004f58 <FLASH_SetErrorCode+0x98>)
 8004f3e:	f023 0301 	bic.w	r3, r3, #1
 8004f42:	61d3      	str	r3, [r2, #28]
}  
 8004f44:	e002      	b.n	8004f4c <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8004f46:	4a04      	ldr	r2, [pc, #16]	; (8004f58 <FLASH_SetErrorCode+0x98>)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	60d3      	str	r3, [r2, #12]
}  
 8004f4c:	bf00      	nop
 8004f4e:	370c      	adds	r7, #12
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bc80      	pop	{r7}
 8004f54:	4770      	bx	lr
 8004f56:	bf00      	nop
 8004f58:	40022000 	.word	0x40022000
 8004f5c:	20002cf0 	.word	0x20002cf0

08004f60 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004f72:	4b2f      	ldr	r3, [pc, #188]	; (8005030 <HAL_FLASHEx_Erase+0xd0>)
 8004f74:	7e1b      	ldrb	r3, [r3, #24]
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d101      	bne.n	8004f7e <HAL_FLASHEx_Erase+0x1e>
 8004f7a:	2302      	movs	r3, #2
 8004f7c:	e053      	b.n	8005026 <HAL_FLASHEx_Erase+0xc6>
 8004f7e:	4b2c      	ldr	r3, [pc, #176]	; (8005030 <HAL_FLASHEx_Erase+0xd0>)
 8004f80:	2201      	movs	r2, #1
 8004f82:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2b02      	cmp	r3, #2
 8004f8a:	d116      	bne.n	8004fba <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004f8c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004f90:	f7ff ff50 	bl	8004e34 <FLASH_WaitForLastOperation>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d141      	bne.n	800501e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8004f9a:	2001      	movs	r0, #1
 8004f9c:	f000 f84c 	bl	8005038 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004fa0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004fa4:	f7ff ff46 	bl	8004e34 <FLASH_WaitForLastOperation>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8004fac:	4b21      	ldr	r3, [pc, #132]	; (8005034 <HAL_FLASHEx_Erase+0xd4>)
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	4a20      	ldr	r2, [pc, #128]	; (8005034 <HAL_FLASHEx_Erase+0xd4>)
 8004fb2:	f023 0304 	bic.w	r3, r3, #4
 8004fb6:	6113      	str	r3, [r2, #16]
 8004fb8:	e031      	b.n	800501e <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004fba:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004fbe:	f7ff ff39 	bl	8004e34 <FLASH_WaitForLastOperation>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d12a      	bne.n	800501e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	f04f 32ff 	mov.w	r2, #4294967295
 8004fce:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	60bb      	str	r3, [r7, #8]
 8004fd6:	e019      	b.n	800500c <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8004fd8:	68b8      	ldr	r0, [r7, #8]
 8004fda:	f000 f849 	bl	8005070 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004fde:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004fe2:	f7ff ff27 	bl	8004e34 <FLASH_WaitForLastOperation>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8004fea:	4b12      	ldr	r3, [pc, #72]	; (8005034 <HAL_FLASHEx_Erase+0xd4>)
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	4a11      	ldr	r2, [pc, #68]	; (8005034 <HAL_FLASHEx_Erase+0xd4>)
 8004ff0:	f023 0302 	bic.w	r3, r3, #2
 8004ff4:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8004ff6:	7bfb      	ldrb	r3, [r7, #15]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d003      	beq.n	8005004 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	68ba      	ldr	r2, [r7, #8]
 8005000:	601a      	str	r2, [r3, #0]
            break;
 8005002:	e00c      	b.n	800501e <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800500a:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	029a      	lsls	r2, r3, #10
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8005018:	68ba      	ldr	r2, [r7, #8]
 800501a:	429a      	cmp	r2, r3
 800501c:	d3dc      	bcc.n	8004fd8 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800501e:	4b04      	ldr	r3, [pc, #16]	; (8005030 <HAL_FLASHEx_Erase+0xd0>)
 8005020:	2200      	movs	r2, #0
 8005022:	761a      	strb	r2, [r3, #24]

  return status;
 8005024:	7bfb      	ldrb	r3, [r7, #15]
}
 8005026:	4618      	mov	r0, r3
 8005028:	3710      	adds	r7, #16
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	20002cf0 	.word	0x20002cf0
 8005034:	40022000 	.word	0x40022000

08005038 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8005038:	b480      	push	{r7}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005040:	4b09      	ldr	r3, [pc, #36]	; (8005068 <FLASH_MassErase+0x30>)
 8005042:	2200      	movs	r2, #0
 8005044:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8005046:	4b09      	ldr	r3, [pc, #36]	; (800506c <FLASH_MassErase+0x34>)
 8005048:	691b      	ldr	r3, [r3, #16]
 800504a:	4a08      	ldr	r2, [pc, #32]	; (800506c <FLASH_MassErase+0x34>)
 800504c:	f043 0304 	orr.w	r3, r3, #4
 8005050:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005052:	4b06      	ldr	r3, [pc, #24]	; (800506c <FLASH_MassErase+0x34>)
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	4a05      	ldr	r2, [pc, #20]	; (800506c <FLASH_MassErase+0x34>)
 8005058:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800505c:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800505e:	bf00      	nop
 8005060:	370c      	adds	r7, #12
 8005062:	46bd      	mov	sp, r7
 8005064:	bc80      	pop	{r7}
 8005066:	4770      	bx	lr
 8005068:	20002cf0 	.word	0x20002cf0
 800506c:	40022000 	.word	0x40022000

08005070 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8005070:	b480      	push	{r7}
 8005072:	b083      	sub	sp, #12
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005078:	4b0b      	ldr	r3, [pc, #44]	; (80050a8 <FLASH_PageErase+0x38>)
 800507a:	2200      	movs	r2, #0
 800507c:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800507e:	4b0b      	ldr	r3, [pc, #44]	; (80050ac <FLASH_PageErase+0x3c>)
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	4a0a      	ldr	r2, [pc, #40]	; (80050ac <FLASH_PageErase+0x3c>)
 8005084:	f043 0302 	orr.w	r3, r3, #2
 8005088:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800508a:	4a08      	ldr	r2, [pc, #32]	; (80050ac <FLASH_PageErase+0x3c>)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005090:	4b06      	ldr	r3, [pc, #24]	; (80050ac <FLASH_PageErase+0x3c>)
 8005092:	691b      	ldr	r3, [r3, #16]
 8005094:	4a05      	ldr	r2, [pc, #20]	; (80050ac <FLASH_PageErase+0x3c>)
 8005096:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800509a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800509c:	bf00      	nop
 800509e:	370c      	adds	r7, #12
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bc80      	pop	{r7}
 80050a4:	4770      	bx	lr
 80050a6:	bf00      	nop
 80050a8:	20002cf0 	.word	0x20002cf0
 80050ac:	40022000 	.word	0x40022000

080050b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b08b      	sub	sp, #44	; 0x2c
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80050ba:	2300      	movs	r3, #0
 80050bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80050be:	2300      	movs	r3, #0
 80050c0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80050c2:	e169      	b.n	8005398 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80050c4:	2201      	movs	r2, #1
 80050c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c8:	fa02 f303 	lsl.w	r3, r2, r3
 80050cc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	69fa      	ldr	r2, [r7, #28]
 80050d4:	4013      	ands	r3, r2
 80050d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80050d8:	69ba      	ldr	r2, [r7, #24]
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	429a      	cmp	r2, r3
 80050de:	f040 8158 	bne.w	8005392 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	4a9a      	ldr	r2, [pc, #616]	; (8005350 <HAL_GPIO_Init+0x2a0>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d05e      	beq.n	80051aa <HAL_GPIO_Init+0xfa>
 80050ec:	4a98      	ldr	r2, [pc, #608]	; (8005350 <HAL_GPIO_Init+0x2a0>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d875      	bhi.n	80051de <HAL_GPIO_Init+0x12e>
 80050f2:	4a98      	ldr	r2, [pc, #608]	; (8005354 <HAL_GPIO_Init+0x2a4>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d058      	beq.n	80051aa <HAL_GPIO_Init+0xfa>
 80050f8:	4a96      	ldr	r2, [pc, #600]	; (8005354 <HAL_GPIO_Init+0x2a4>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d86f      	bhi.n	80051de <HAL_GPIO_Init+0x12e>
 80050fe:	4a96      	ldr	r2, [pc, #600]	; (8005358 <HAL_GPIO_Init+0x2a8>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d052      	beq.n	80051aa <HAL_GPIO_Init+0xfa>
 8005104:	4a94      	ldr	r2, [pc, #592]	; (8005358 <HAL_GPIO_Init+0x2a8>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d869      	bhi.n	80051de <HAL_GPIO_Init+0x12e>
 800510a:	4a94      	ldr	r2, [pc, #592]	; (800535c <HAL_GPIO_Init+0x2ac>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d04c      	beq.n	80051aa <HAL_GPIO_Init+0xfa>
 8005110:	4a92      	ldr	r2, [pc, #584]	; (800535c <HAL_GPIO_Init+0x2ac>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d863      	bhi.n	80051de <HAL_GPIO_Init+0x12e>
 8005116:	4a92      	ldr	r2, [pc, #584]	; (8005360 <HAL_GPIO_Init+0x2b0>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d046      	beq.n	80051aa <HAL_GPIO_Init+0xfa>
 800511c:	4a90      	ldr	r2, [pc, #576]	; (8005360 <HAL_GPIO_Init+0x2b0>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d85d      	bhi.n	80051de <HAL_GPIO_Init+0x12e>
 8005122:	2b12      	cmp	r3, #18
 8005124:	d82a      	bhi.n	800517c <HAL_GPIO_Init+0xcc>
 8005126:	2b12      	cmp	r3, #18
 8005128:	d859      	bhi.n	80051de <HAL_GPIO_Init+0x12e>
 800512a:	a201      	add	r2, pc, #4	; (adr r2, 8005130 <HAL_GPIO_Init+0x80>)
 800512c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005130:	080051ab 	.word	0x080051ab
 8005134:	08005185 	.word	0x08005185
 8005138:	08005197 	.word	0x08005197
 800513c:	080051d9 	.word	0x080051d9
 8005140:	080051df 	.word	0x080051df
 8005144:	080051df 	.word	0x080051df
 8005148:	080051df 	.word	0x080051df
 800514c:	080051df 	.word	0x080051df
 8005150:	080051df 	.word	0x080051df
 8005154:	080051df 	.word	0x080051df
 8005158:	080051df 	.word	0x080051df
 800515c:	080051df 	.word	0x080051df
 8005160:	080051df 	.word	0x080051df
 8005164:	080051df 	.word	0x080051df
 8005168:	080051df 	.word	0x080051df
 800516c:	080051df 	.word	0x080051df
 8005170:	080051df 	.word	0x080051df
 8005174:	0800518d 	.word	0x0800518d
 8005178:	080051a1 	.word	0x080051a1
 800517c:	4a79      	ldr	r2, [pc, #484]	; (8005364 <HAL_GPIO_Init+0x2b4>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d013      	beq.n	80051aa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005182:	e02c      	b.n	80051de <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	623b      	str	r3, [r7, #32]
          break;
 800518a:	e029      	b.n	80051e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	3304      	adds	r3, #4
 8005192:	623b      	str	r3, [r7, #32]
          break;
 8005194:	e024      	b.n	80051e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	3308      	adds	r3, #8
 800519c:	623b      	str	r3, [r7, #32]
          break;
 800519e:	e01f      	b.n	80051e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	330c      	adds	r3, #12
 80051a6:	623b      	str	r3, [r7, #32]
          break;
 80051a8:	e01a      	b.n	80051e0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d102      	bne.n	80051b8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80051b2:	2304      	movs	r3, #4
 80051b4:	623b      	str	r3, [r7, #32]
          break;
 80051b6:	e013      	b.n	80051e0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d105      	bne.n	80051cc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80051c0:	2308      	movs	r3, #8
 80051c2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	69fa      	ldr	r2, [r7, #28]
 80051c8:	611a      	str	r2, [r3, #16]
          break;
 80051ca:	e009      	b.n	80051e0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80051cc:	2308      	movs	r3, #8
 80051ce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	69fa      	ldr	r2, [r7, #28]
 80051d4:	615a      	str	r2, [r3, #20]
          break;
 80051d6:	e003      	b.n	80051e0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80051d8:	2300      	movs	r3, #0
 80051da:	623b      	str	r3, [r7, #32]
          break;
 80051dc:	e000      	b.n	80051e0 <HAL_GPIO_Init+0x130>
          break;
 80051de:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	2bff      	cmp	r3, #255	; 0xff
 80051e4:	d801      	bhi.n	80051ea <HAL_GPIO_Init+0x13a>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	e001      	b.n	80051ee <HAL_GPIO_Init+0x13e>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	3304      	adds	r3, #4
 80051ee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80051f0:	69bb      	ldr	r3, [r7, #24]
 80051f2:	2bff      	cmp	r3, #255	; 0xff
 80051f4:	d802      	bhi.n	80051fc <HAL_GPIO_Init+0x14c>
 80051f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	e002      	b.n	8005202 <HAL_GPIO_Init+0x152>
 80051fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fe:	3b08      	subs	r3, #8
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	210f      	movs	r1, #15
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	fa01 f303 	lsl.w	r3, r1, r3
 8005210:	43db      	mvns	r3, r3
 8005212:	401a      	ands	r2, r3
 8005214:	6a39      	ldr	r1, [r7, #32]
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	fa01 f303 	lsl.w	r3, r1, r3
 800521c:	431a      	orrs	r2, r3
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800522a:	2b00      	cmp	r3, #0
 800522c:	f000 80b1 	beq.w	8005392 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005230:	4b4d      	ldr	r3, [pc, #308]	; (8005368 <HAL_GPIO_Init+0x2b8>)
 8005232:	699b      	ldr	r3, [r3, #24]
 8005234:	4a4c      	ldr	r2, [pc, #304]	; (8005368 <HAL_GPIO_Init+0x2b8>)
 8005236:	f043 0301 	orr.w	r3, r3, #1
 800523a:	6193      	str	r3, [r2, #24]
 800523c:	4b4a      	ldr	r3, [pc, #296]	; (8005368 <HAL_GPIO_Init+0x2b8>)
 800523e:	699b      	ldr	r3, [r3, #24]
 8005240:	f003 0301 	and.w	r3, r3, #1
 8005244:	60bb      	str	r3, [r7, #8]
 8005246:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005248:	4a48      	ldr	r2, [pc, #288]	; (800536c <HAL_GPIO_Init+0x2bc>)
 800524a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524c:	089b      	lsrs	r3, r3, #2
 800524e:	3302      	adds	r3, #2
 8005250:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005254:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005258:	f003 0303 	and.w	r3, r3, #3
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	220f      	movs	r2, #15
 8005260:	fa02 f303 	lsl.w	r3, r2, r3
 8005264:	43db      	mvns	r3, r3
 8005266:	68fa      	ldr	r2, [r7, #12]
 8005268:	4013      	ands	r3, r2
 800526a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	4a40      	ldr	r2, [pc, #256]	; (8005370 <HAL_GPIO_Init+0x2c0>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d013      	beq.n	800529c <HAL_GPIO_Init+0x1ec>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	4a3f      	ldr	r2, [pc, #252]	; (8005374 <HAL_GPIO_Init+0x2c4>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d00d      	beq.n	8005298 <HAL_GPIO_Init+0x1e8>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	4a3e      	ldr	r2, [pc, #248]	; (8005378 <HAL_GPIO_Init+0x2c8>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d007      	beq.n	8005294 <HAL_GPIO_Init+0x1e4>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	4a3d      	ldr	r2, [pc, #244]	; (800537c <HAL_GPIO_Init+0x2cc>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d101      	bne.n	8005290 <HAL_GPIO_Init+0x1e0>
 800528c:	2303      	movs	r3, #3
 800528e:	e006      	b.n	800529e <HAL_GPIO_Init+0x1ee>
 8005290:	2304      	movs	r3, #4
 8005292:	e004      	b.n	800529e <HAL_GPIO_Init+0x1ee>
 8005294:	2302      	movs	r3, #2
 8005296:	e002      	b.n	800529e <HAL_GPIO_Init+0x1ee>
 8005298:	2301      	movs	r3, #1
 800529a:	e000      	b.n	800529e <HAL_GPIO_Init+0x1ee>
 800529c:	2300      	movs	r3, #0
 800529e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052a0:	f002 0203 	and.w	r2, r2, #3
 80052a4:	0092      	lsls	r2, r2, #2
 80052a6:	4093      	lsls	r3, r2
 80052a8:	68fa      	ldr	r2, [r7, #12]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80052ae:	492f      	ldr	r1, [pc, #188]	; (800536c <HAL_GPIO_Init+0x2bc>)
 80052b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b2:	089b      	lsrs	r3, r3, #2
 80052b4:	3302      	adds	r3, #2
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d006      	beq.n	80052d6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80052c8:	4b2d      	ldr	r3, [pc, #180]	; (8005380 <HAL_GPIO_Init+0x2d0>)
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	492c      	ldr	r1, [pc, #176]	; (8005380 <HAL_GPIO_Init+0x2d0>)
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	600b      	str	r3, [r1, #0]
 80052d4:	e006      	b.n	80052e4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80052d6:	4b2a      	ldr	r3, [pc, #168]	; (8005380 <HAL_GPIO_Init+0x2d0>)
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	69bb      	ldr	r3, [r7, #24]
 80052dc:	43db      	mvns	r3, r3
 80052de:	4928      	ldr	r1, [pc, #160]	; (8005380 <HAL_GPIO_Init+0x2d0>)
 80052e0:	4013      	ands	r3, r2
 80052e2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d006      	beq.n	80052fe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80052f0:	4b23      	ldr	r3, [pc, #140]	; (8005380 <HAL_GPIO_Init+0x2d0>)
 80052f2:	685a      	ldr	r2, [r3, #4]
 80052f4:	4922      	ldr	r1, [pc, #136]	; (8005380 <HAL_GPIO_Init+0x2d0>)
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	604b      	str	r3, [r1, #4]
 80052fc:	e006      	b.n	800530c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80052fe:	4b20      	ldr	r3, [pc, #128]	; (8005380 <HAL_GPIO_Init+0x2d0>)
 8005300:	685a      	ldr	r2, [r3, #4]
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	43db      	mvns	r3, r3
 8005306:	491e      	ldr	r1, [pc, #120]	; (8005380 <HAL_GPIO_Init+0x2d0>)
 8005308:	4013      	ands	r3, r2
 800530a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005314:	2b00      	cmp	r3, #0
 8005316:	d006      	beq.n	8005326 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005318:	4b19      	ldr	r3, [pc, #100]	; (8005380 <HAL_GPIO_Init+0x2d0>)
 800531a:	689a      	ldr	r2, [r3, #8]
 800531c:	4918      	ldr	r1, [pc, #96]	; (8005380 <HAL_GPIO_Init+0x2d0>)
 800531e:	69bb      	ldr	r3, [r7, #24]
 8005320:	4313      	orrs	r3, r2
 8005322:	608b      	str	r3, [r1, #8]
 8005324:	e006      	b.n	8005334 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005326:	4b16      	ldr	r3, [pc, #88]	; (8005380 <HAL_GPIO_Init+0x2d0>)
 8005328:	689a      	ldr	r2, [r3, #8]
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	43db      	mvns	r3, r3
 800532e:	4914      	ldr	r1, [pc, #80]	; (8005380 <HAL_GPIO_Init+0x2d0>)
 8005330:	4013      	ands	r3, r2
 8005332:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800533c:	2b00      	cmp	r3, #0
 800533e:	d021      	beq.n	8005384 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005340:	4b0f      	ldr	r3, [pc, #60]	; (8005380 <HAL_GPIO_Init+0x2d0>)
 8005342:	68da      	ldr	r2, [r3, #12]
 8005344:	490e      	ldr	r1, [pc, #56]	; (8005380 <HAL_GPIO_Init+0x2d0>)
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	4313      	orrs	r3, r2
 800534a:	60cb      	str	r3, [r1, #12]
 800534c:	e021      	b.n	8005392 <HAL_GPIO_Init+0x2e2>
 800534e:	bf00      	nop
 8005350:	10320000 	.word	0x10320000
 8005354:	10310000 	.word	0x10310000
 8005358:	10220000 	.word	0x10220000
 800535c:	10210000 	.word	0x10210000
 8005360:	10120000 	.word	0x10120000
 8005364:	10110000 	.word	0x10110000
 8005368:	40021000 	.word	0x40021000
 800536c:	40010000 	.word	0x40010000
 8005370:	40010800 	.word	0x40010800
 8005374:	40010c00 	.word	0x40010c00
 8005378:	40011000 	.word	0x40011000
 800537c:	40011400 	.word	0x40011400
 8005380:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005384:	4b0b      	ldr	r3, [pc, #44]	; (80053b4 <HAL_GPIO_Init+0x304>)
 8005386:	68da      	ldr	r2, [r3, #12]
 8005388:	69bb      	ldr	r3, [r7, #24]
 800538a:	43db      	mvns	r3, r3
 800538c:	4909      	ldr	r1, [pc, #36]	; (80053b4 <HAL_GPIO_Init+0x304>)
 800538e:	4013      	ands	r3, r2
 8005390:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8005392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005394:	3301      	adds	r3, #1
 8005396:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539e:	fa22 f303 	lsr.w	r3, r2, r3
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	f47f ae8e 	bne.w	80050c4 <HAL_GPIO_Init+0x14>
  }
}
 80053a8:	bf00      	nop
 80053aa:	bf00      	nop
 80053ac:	372c      	adds	r7, #44	; 0x2c
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bc80      	pop	{r7}
 80053b2:	4770      	bx	lr
 80053b4:	40010400 	.word	0x40010400

080053b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b085      	sub	sp, #20
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	460b      	mov	r3, r1
 80053c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	689a      	ldr	r2, [r3, #8]
 80053c8:	887b      	ldrh	r3, [r7, #2]
 80053ca:	4013      	ands	r3, r2
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d002      	beq.n	80053d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80053d0:	2301      	movs	r3, #1
 80053d2:	73fb      	strb	r3, [r7, #15]
 80053d4:	e001      	b.n	80053da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80053d6:	2300      	movs	r3, #0
 80053d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80053da:	7bfb      	ldrb	r3, [r7, #15]
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3714      	adds	r7, #20
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bc80      	pop	{r7}
 80053e4:	4770      	bx	lr

080053e6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80053e6:	b480      	push	{r7}
 80053e8:	b083      	sub	sp, #12
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
 80053ee:	460b      	mov	r3, r1
 80053f0:	807b      	strh	r3, [r7, #2]
 80053f2:	4613      	mov	r3, r2
 80053f4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80053f6:	787b      	ldrb	r3, [r7, #1]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d003      	beq.n	8005404 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80053fc:	887a      	ldrh	r2, [r7, #2]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005402:	e003      	b.n	800540c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005404:	887b      	ldrh	r3, [r7, #2]
 8005406:	041a      	lsls	r2, r3, #16
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	611a      	str	r2, [r3, #16]
}
 800540c:	bf00      	nop
 800540e:	370c      	adds	r7, #12
 8005410:	46bd      	mov	sp, r7
 8005412:	bc80      	pop	{r7}
 8005414:	4770      	bx	lr
	...

08005418 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b086      	sub	sp, #24
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d101      	bne.n	800542a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e272      	b.n	8005910 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0301 	and.w	r3, r3, #1
 8005432:	2b00      	cmp	r3, #0
 8005434:	f000 8087 	beq.w	8005546 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005438:	4b92      	ldr	r3, [pc, #584]	; (8005684 <HAL_RCC_OscConfig+0x26c>)
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	f003 030c 	and.w	r3, r3, #12
 8005440:	2b04      	cmp	r3, #4
 8005442:	d00c      	beq.n	800545e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005444:	4b8f      	ldr	r3, [pc, #572]	; (8005684 <HAL_RCC_OscConfig+0x26c>)
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	f003 030c 	and.w	r3, r3, #12
 800544c:	2b08      	cmp	r3, #8
 800544e:	d112      	bne.n	8005476 <HAL_RCC_OscConfig+0x5e>
 8005450:	4b8c      	ldr	r3, [pc, #560]	; (8005684 <HAL_RCC_OscConfig+0x26c>)
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005458:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800545c:	d10b      	bne.n	8005476 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800545e:	4b89      	ldr	r3, [pc, #548]	; (8005684 <HAL_RCC_OscConfig+0x26c>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005466:	2b00      	cmp	r3, #0
 8005468:	d06c      	beq.n	8005544 <HAL_RCC_OscConfig+0x12c>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d168      	bne.n	8005544 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e24c      	b.n	8005910 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800547e:	d106      	bne.n	800548e <HAL_RCC_OscConfig+0x76>
 8005480:	4b80      	ldr	r3, [pc, #512]	; (8005684 <HAL_RCC_OscConfig+0x26c>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a7f      	ldr	r2, [pc, #508]	; (8005684 <HAL_RCC_OscConfig+0x26c>)
 8005486:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800548a:	6013      	str	r3, [r2, #0]
 800548c:	e02e      	b.n	80054ec <HAL_RCC_OscConfig+0xd4>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d10c      	bne.n	80054b0 <HAL_RCC_OscConfig+0x98>
 8005496:	4b7b      	ldr	r3, [pc, #492]	; (8005684 <HAL_RCC_OscConfig+0x26c>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a7a      	ldr	r2, [pc, #488]	; (8005684 <HAL_RCC_OscConfig+0x26c>)
 800549c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054a0:	6013      	str	r3, [r2, #0]
 80054a2:	4b78      	ldr	r3, [pc, #480]	; (8005684 <HAL_RCC_OscConfig+0x26c>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a77      	ldr	r2, [pc, #476]	; (8005684 <HAL_RCC_OscConfig+0x26c>)
 80054a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054ac:	6013      	str	r3, [r2, #0]
 80054ae:	e01d      	b.n	80054ec <HAL_RCC_OscConfig+0xd4>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054b8:	d10c      	bne.n	80054d4 <HAL_RCC_OscConfig+0xbc>
 80054ba:	4b72      	ldr	r3, [pc, #456]	; (8005684 <HAL_RCC_OscConfig+0x26c>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a71      	ldr	r2, [pc, #452]	; (8005684 <HAL_RCC_OscConfig+0x26c>)
 80054c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054c4:	6013      	str	r3, [r2, #0]
 80054c6:	4b6f      	ldr	r3, [pc, #444]	; (8005684 <HAL_RCC_OscConfig+0x26c>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a6e      	ldr	r2, [pc, #440]	; (8005684 <HAL_RCC_OscConfig+0x26c>)
 80054cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054d0:	6013      	str	r3, [r2, #0]
 80054d2:	e00b      	b.n	80054ec <HAL_RCC_OscConfig+0xd4>
 80054d4:	4b6b      	ldr	r3, [pc, #428]	; (8005684 <HAL_RCC_OscConfig+0x26c>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a6a      	ldr	r2, [pc, #424]	; (8005684 <HAL_RCC_OscConfig+0x26c>)
 80054da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054de:	6013      	str	r3, [r2, #0]
 80054e0:	4b68      	ldr	r3, [pc, #416]	; (8005684 <HAL_RCC_OscConfig+0x26c>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a67      	ldr	r2, [pc, #412]	; (8005684 <HAL_RCC_OscConfig+0x26c>)
 80054e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d013      	beq.n	800551c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054f4:	f7fe fce6 	bl	8003ec4 <HAL_GetTick>
 80054f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054fa:	e008      	b.n	800550e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054fc:	f7fe fce2 	bl	8003ec4 <HAL_GetTick>
 8005500:	4602      	mov	r2, r0
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	1ad3      	subs	r3, r2, r3
 8005506:	2b64      	cmp	r3, #100	; 0x64
 8005508:	d901      	bls.n	800550e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800550a:	2303      	movs	r3, #3
 800550c:	e200      	b.n	8005910 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800550e:	4b5d      	ldr	r3, [pc, #372]	; (8005684 <HAL_RCC_OscConfig+0x26c>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005516:	2b00      	cmp	r3, #0
 8005518:	d0f0      	beq.n	80054fc <HAL_RCC_OscConfig+0xe4>
 800551a:	e014      	b.n	8005546 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800551c:	f7fe fcd2 	bl	8003ec4 <HAL_GetTick>
 8005520:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005522:	e008      	b.n	8005536 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005524:	f7fe fcce 	bl	8003ec4 <HAL_GetTick>
 8005528:	4602      	mov	r2, r0
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	2b64      	cmp	r3, #100	; 0x64
 8005530:	d901      	bls.n	8005536 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005532:	2303      	movs	r3, #3
 8005534:	e1ec      	b.n	8005910 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005536:	4b53      	ldr	r3, [pc, #332]	; (8005684 <HAL_RCC_OscConfig+0x26c>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800553e:	2b00      	cmp	r3, #0
 8005540:	d1f0      	bne.n	8005524 <HAL_RCC_OscConfig+0x10c>
 8005542:	e000      	b.n	8005546 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005544:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 0302 	and.w	r3, r3, #2
 800554e:	2b00      	cmp	r3, #0
 8005550:	d063      	beq.n	800561a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005552:	4b4c      	ldr	r3, [pc, #304]	; (8005684 <HAL_RCC_OscConfig+0x26c>)
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	f003 030c 	and.w	r3, r3, #12
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00b      	beq.n	8005576 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800555e:	4b49      	ldr	r3, [pc, #292]	; (8005684 <HAL_RCC_OscConfig+0x26c>)
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	f003 030c 	and.w	r3, r3, #12
 8005566:	2b08      	cmp	r3, #8
 8005568:	d11c      	bne.n	80055a4 <HAL_RCC_OscConfig+0x18c>
 800556a:	4b46      	ldr	r3, [pc, #280]	; (8005684 <HAL_RCC_OscConfig+0x26c>)
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005572:	2b00      	cmp	r3, #0
 8005574:	d116      	bne.n	80055a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005576:	4b43      	ldr	r3, [pc, #268]	; (8005684 <HAL_RCC_OscConfig+0x26c>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0302 	and.w	r3, r3, #2
 800557e:	2b00      	cmp	r3, #0
 8005580:	d005      	beq.n	800558e <HAL_RCC_OscConfig+0x176>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	691b      	ldr	r3, [r3, #16]
 8005586:	2b01      	cmp	r3, #1
 8005588:	d001      	beq.n	800558e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e1c0      	b.n	8005910 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800558e:	4b3d      	ldr	r3, [pc, #244]	; (8005684 <HAL_RCC_OscConfig+0x26c>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	695b      	ldr	r3, [r3, #20]
 800559a:	00db      	lsls	r3, r3, #3
 800559c:	4939      	ldr	r1, [pc, #228]	; (8005684 <HAL_RCC_OscConfig+0x26c>)
 800559e:	4313      	orrs	r3, r2
 80055a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055a2:	e03a      	b.n	800561a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	691b      	ldr	r3, [r3, #16]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d020      	beq.n	80055ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055ac:	4b36      	ldr	r3, [pc, #216]	; (8005688 <HAL_RCC_OscConfig+0x270>)
 80055ae:	2201      	movs	r2, #1
 80055b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055b2:	f7fe fc87 	bl	8003ec4 <HAL_GetTick>
 80055b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055b8:	e008      	b.n	80055cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055ba:	f7fe fc83 	bl	8003ec4 <HAL_GetTick>
 80055be:	4602      	mov	r2, r0
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	1ad3      	subs	r3, r2, r3
 80055c4:	2b02      	cmp	r3, #2
 80055c6:	d901      	bls.n	80055cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80055c8:	2303      	movs	r3, #3
 80055ca:	e1a1      	b.n	8005910 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055cc:	4b2d      	ldr	r3, [pc, #180]	; (8005684 <HAL_RCC_OscConfig+0x26c>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 0302 	and.w	r3, r3, #2
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d0f0      	beq.n	80055ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055d8:	4b2a      	ldr	r3, [pc, #168]	; (8005684 <HAL_RCC_OscConfig+0x26c>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	695b      	ldr	r3, [r3, #20]
 80055e4:	00db      	lsls	r3, r3, #3
 80055e6:	4927      	ldr	r1, [pc, #156]	; (8005684 <HAL_RCC_OscConfig+0x26c>)
 80055e8:	4313      	orrs	r3, r2
 80055ea:	600b      	str	r3, [r1, #0]
 80055ec:	e015      	b.n	800561a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055ee:	4b26      	ldr	r3, [pc, #152]	; (8005688 <HAL_RCC_OscConfig+0x270>)
 80055f0:	2200      	movs	r2, #0
 80055f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055f4:	f7fe fc66 	bl	8003ec4 <HAL_GetTick>
 80055f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055fa:	e008      	b.n	800560e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055fc:	f7fe fc62 	bl	8003ec4 <HAL_GetTick>
 8005600:	4602      	mov	r2, r0
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	2b02      	cmp	r3, #2
 8005608:	d901      	bls.n	800560e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800560a:	2303      	movs	r3, #3
 800560c:	e180      	b.n	8005910 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800560e:	4b1d      	ldr	r3, [pc, #116]	; (8005684 <HAL_RCC_OscConfig+0x26c>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0302 	and.w	r3, r3, #2
 8005616:	2b00      	cmp	r3, #0
 8005618:	d1f0      	bne.n	80055fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 0308 	and.w	r3, r3, #8
 8005622:	2b00      	cmp	r3, #0
 8005624:	d03a      	beq.n	800569c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	699b      	ldr	r3, [r3, #24]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d019      	beq.n	8005662 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800562e:	4b17      	ldr	r3, [pc, #92]	; (800568c <HAL_RCC_OscConfig+0x274>)
 8005630:	2201      	movs	r2, #1
 8005632:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005634:	f7fe fc46 	bl	8003ec4 <HAL_GetTick>
 8005638:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800563a:	e008      	b.n	800564e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800563c:	f7fe fc42 	bl	8003ec4 <HAL_GetTick>
 8005640:	4602      	mov	r2, r0
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	2b02      	cmp	r3, #2
 8005648:	d901      	bls.n	800564e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800564a:	2303      	movs	r3, #3
 800564c:	e160      	b.n	8005910 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800564e:	4b0d      	ldr	r3, [pc, #52]	; (8005684 <HAL_RCC_OscConfig+0x26c>)
 8005650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005652:	f003 0302 	and.w	r3, r3, #2
 8005656:	2b00      	cmp	r3, #0
 8005658:	d0f0      	beq.n	800563c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800565a:	2001      	movs	r0, #1
 800565c:	f000 fad8 	bl	8005c10 <RCC_Delay>
 8005660:	e01c      	b.n	800569c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005662:	4b0a      	ldr	r3, [pc, #40]	; (800568c <HAL_RCC_OscConfig+0x274>)
 8005664:	2200      	movs	r2, #0
 8005666:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005668:	f7fe fc2c 	bl	8003ec4 <HAL_GetTick>
 800566c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800566e:	e00f      	b.n	8005690 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005670:	f7fe fc28 	bl	8003ec4 <HAL_GetTick>
 8005674:	4602      	mov	r2, r0
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	2b02      	cmp	r3, #2
 800567c:	d908      	bls.n	8005690 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800567e:	2303      	movs	r3, #3
 8005680:	e146      	b.n	8005910 <HAL_RCC_OscConfig+0x4f8>
 8005682:	bf00      	nop
 8005684:	40021000 	.word	0x40021000
 8005688:	42420000 	.word	0x42420000
 800568c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005690:	4b92      	ldr	r3, [pc, #584]	; (80058dc <HAL_RCC_OscConfig+0x4c4>)
 8005692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005694:	f003 0302 	and.w	r3, r3, #2
 8005698:	2b00      	cmp	r3, #0
 800569a:	d1e9      	bne.n	8005670 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 0304 	and.w	r3, r3, #4
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	f000 80a6 	beq.w	80057f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056aa:	2300      	movs	r3, #0
 80056ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056ae:	4b8b      	ldr	r3, [pc, #556]	; (80058dc <HAL_RCC_OscConfig+0x4c4>)
 80056b0:	69db      	ldr	r3, [r3, #28]
 80056b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d10d      	bne.n	80056d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056ba:	4b88      	ldr	r3, [pc, #544]	; (80058dc <HAL_RCC_OscConfig+0x4c4>)
 80056bc:	69db      	ldr	r3, [r3, #28]
 80056be:	4a87      	ldr	r2, [pc, #540]	; (80058dc <HAL_RCC_OscConfig+0x4c4>)
 80056c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056c4:	61d3      	str	r3, [r2, #28]
 80056c6:	4b85      	ldr	r3, [pc, #532]	; (80058dc <HAL_RCC_OscConfig+0x4c4>)
 80056c8:	69db      	ldr	r3, [r3, #28]
 80056ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056ce:	60bb      	str	r3, [r7, #8]
 80056d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056d2:	2301      	movs	r3, #1
 80056d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056d6:	4b82      	ldr	r3, [pc, #520]	; (80058e0 <HAL_RCC_OscConfig+0x4c8>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d118      	bne.n	8005714 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056e2:	4b7f      	ldr	r3, [pc, #508]	; (80058e0 <HAL_RCC_OscConfig+0x4c8>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a7e      	ldr	r2, [pc, #504]	; (80058e0 <HAL_RCC_OscConfig+0x4c8>)
 80056e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056ee:	f7fe fbe9 	bl	8003ec4 <HAL_GetTick>
 80056f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056f4:	e008      	b.n	8005708 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056f6:	f7fe fbe5 	bl	8003ec4 <HAL_GetTick>
 80056fa:	4602      	mov	r2, r0
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	1ad3      	subs	r3, r2, r3
 8005700:	2b64      	cmp	r3, #100	; 0x64
 8005702:	d901      	bls.n	8005708 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005704:	2303      	movs	r3, #3
 8005706:	e103      	b.n	8005910 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005708:	4b75      	ldr	r3, [pc, #468]	; (80058e0 <HAL_RCC_OscConfig+0x4c8>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005710:	2b00      	cmp	r3, #0
 8005712:	d0f0      	beq.n	80056f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	2b01      	cmp	r3, #1
 800571a:	d106      	bne.n	800572a <HAL_RCC_OscConfig+0x312>
 800571c:	4b6f      	ldr	r3, [pc, #444]	; (80058dc <HAL_RCC_OscConfig+0x4c4>)
 800571e:	6a1b      	ldr	r3, [r3, #32]
 8005720:	4a6e      	ldr	r2, [pc, #440]	; (80058dc <HAL_RCC_OscConfig+0x4c4>)
 8005722:	f043 0301 	orr.w	r3, r3, #1
 8005726:	6213      	str	r3, [r2, #32]
 8005728:	e02d      	b.n	8005786 <HAL_RCC_OscConfig+0x36e>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d10c      	bne.n	800574c <HAL_RCC_OscConfig+0x334>
 8005732:	4b6a      	ldr	r3, [pc, #424]	; (80058dc <HAL_RCC_OscConfig+0x4c4>)
 8005734:	6a1b      	ldr	r3, [r3, #32]
 8005736:	4a69      	ldr	r2, [pc, #420]	; (80058dc <HAL_RCC_OscConfig+0x4c4>)
 8005738:	f023 0301 	bic.w	r3, r3, #1
 800573c:	6213      	str	r3, [r2, #32]
 800573e:	4b67      	ldr	r3, [pc, #412]	; (80058dc <HAL_RCC_OscConfig+0x4c4>)
 8005740:	6a1b      	ldr	r3, [r3, #32]
 8005742:	4a66      	ldr	r2, [pc, #408]	; (80058dc <HAL_RCC_OscConfig+0x4c4>)
 8005744:	f023 0304 	bic.w	r3, r3, #4
 8005748:	6213      	str	r3, [r2, #32]
 800574a:	e01c      	b.n	8005786 <HAL_RCC_OscConfig+0x36e>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	2b05      	cmp	r3, #5
 8005752:	d10c      	bne.n	800576e <HAL_RCC_OscConfig+0x356>
 8005754:	4b61      	ldr	r3, [pc, #388]	; (80058dc <HAL_RCC_OscConfig+0x4c4>)
 8005756:	6a1b      	ldr	r3, [r3, #32]
 8005758:	4a60      	ldr	r2, [pc, #384]	; (80058dc <HAL_RCC_OscConfig+0x4c4>)
 800575a:	f043 0304 	orr.w	r3, r3, #4
 800575e:	6213      	str	r3, [r2, #32]
 8005760:	4b5e      	ldr	r3, [pc, #376]	; (80058dc <HAL_RCC_OscConfig+0x4c4>)
 8005762:	6a1b      	ldr	r3, [r3, #32]
 8005764:	4a5d      	ldr	r2, [pc, #372]	; (80058dc <HAL_RCC_OscConfig+0x4c4>)
 8005766:	f043 0301 	orr.w	r3, r3, #1
 800576a:	6213      	str	r3, [r2, #32]
 800576c:	e00b      	b.n	8005786 <HAL_RCC_OscConfig+0x36e>
 800576e:	4b5b      	ldr	r3, [pc, #364]	; (80058dc <HAL_RCC_OscConfig+0x4c4>)
 8005770:	6a1b      	ldr	r3, [r3, #32]
 8005772:	4a5a      	ldr	r2, [pc, #360]	; (80058dc <HAL_RCC_OscConfig+0x4c4>)
 8005774:	f023 0301 	bic.w	r3, r3, #1
 8005778:	6213      	str	r3, [r2, #32]
 800577a:	4b58      	ldr	r3, [pc, #352]	; (80058dc <HAL_RCC_OscConfig+0x4c4>)
 800577c:	6a1b      	ldr	r3, [r3, #32]
 800577e:	4a57      	ldr	r2, [pc, #348]	; (80058dc <HAL_RCC_OscConfig+0x4c4>)
 8005780:	f023 0304 	bic.w	r3, r3, #4
 8005784:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d015      	beq.n	80057ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800578e:	f7fe fb99 	bl	8003ec4 <HAL_GetTick>
 8005792:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005794:	e00a      	b.n	80057ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005796:	f7fe fb95 	bl	8003ec4 <HAL_GetTick>
 800579a:	4602      	mov	r2, r0
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d901      	bls.n	80057ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80057a8:	2303      	movs	r3, #3
 80057aa:	e0b1      	b.n	8005910 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057ac:	4b4b      	ldr	r3, [pc, #300]	; (80058dc <HAL_RCC_OscConfig+0x4c4>)
 80057ae:	6a1b      	ldr	r3, [r3, #32]
 80057b0:	f003 0302 	and.w	r3, r3, #2
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d0ee      	beq.n	8005796 <HAL_RCC_OscConfig+0x37e>
 80057b8:	e014      	b.n	80057e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057ba:	f7fe fb83 	bl	8003ec4 <HAL_GetTick>
 80057be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057c0:	e00a      	b.n	80057d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057c2:	f7fe fb7f 	bl	8003ec4 <HAL_GetTick>
 80057c6:	4602      	mov	r2, r0
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	1ad3      	subs	r3, r2, r3
 80057cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d901      	bls.n	80057d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80057d4:	2303      	movs	r3, #3
 80057d6:	e09b      	b.n	8005910 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057d8:	4b40      	ldr	r3, [pc, #256]	; (80058dc <HAL_RCC_OscConfig+0x4c4>)
 80057da:	6a1b      	ldr	r3, [r3, #32]
 80057dc:	f003 0302 	and.w	r3, r3, #2
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d1ee      	bne.n	80057c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80057e4:	7dfb      	ldrb	r3, [r7, #23]
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d105      	bne.n	80057f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057ea:	4b3c      	ldr	r3, [pc, #240]	; (80058dc <HAL_RCC_OscConfig+0x4c4>)
 80057ec:	69db      	ldr	r3, [r3, #28]
 80057ee:	4a3b      	ldr	r2, [pc, #236]	; (80058dc <HAL_RCC_OscConfig+0x4c4>)
 80057f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	69db      	ldr	r3, [r3, #28]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	f000 8087 	beq.w	800590e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005800:	4b36      	ldr	r3, [pc, #216]	; (80058dc <HAL_RCC_OscConfig+0x4c4>)
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	f003 030c 	and.w	r3, r3, #12
 8005808:	2b08      	cmp	r3, #8
 800580a:	d061      	beq.n	80058d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	69db      	ldr	r3, [r3, #28]
 8005810:	2b02      	cmp	r3, #2
 8005812:	d146      	bne.n	80058a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005814:	4b33      	ldr	r3, [pc, #204]	; (80058e4 <HAL_RCC_OscConfig+0x4cc>)
 8005816:	2200      	movs	r2, #0
 8005818:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800581a:	f7fe fb53 	bl	8003ec4 <HAL_GetTick>
 800581e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005820:	e008      	b.n	8005834 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005822:	f7fe fb4f 	bl	8003ec4 <HAL_GetTick>
 8005826:	4602      	mov	r2, r0
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	1ad3      	subs	r3, r2, r3
 800582c:	2b02      	cmp	r3, #2
 800582e:	d901      	bls.n	8005834 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005830:	2303      	movs	r3, #3
 8005832:	e06d      	b.n	8005910 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005834:	4b29      	ldr	r3, [pc, #164]	; (80058dc <HAL_RCC_OscConfig+0x4c4>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800583c:	2b00      	cmp	r3, #0
 800583e:	d1f0      	bne.n	8005822 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6a1b      	ldr	r3, [r3, #32]
 8005844:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005848:	d108      	bne.n	800585c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800584a:	4b24      	ldr	r3, [pc, #144]	; (80058dc <HAL_RCC_OscConfig+0x4c4>)
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	4921      	ldr	r1, [pc, #132]	; (80058dc <HAL_RCC_OscConfig+0x4c4>)
 8005858:	4313      	orrs	r3, r2
 800585a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800585c:	4b1f      	ldr	r3, [pc, #124]	; (80058dc <HAL_RCC_OscConfig+0x4c4>)
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6a19      	ldr	r1, [r3, #32]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586c:	430b      	orrs	r3, r1
 800586e:	491b      	ldr	r1, [pc, #108]	; (80058dc <HAL_RCC_OscConfig+0x4c4>)
 8005870:	4313      	orrs	r3, r2
 8005872:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005874:	4b1b      	ldr	r3, [pc, #108]	; (80058e4 <HAL_RCC_OscConfig+0x4cc>)
 8005876:	2201      	movs	r2, #1
 8005878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800587a:	f7fe fb23 	bl	8003ec4 <HAL_GetTick>
 800587e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005880:	e008      	b.n	8005894 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005882:	f7fe fb1f 	bl	8003ec4 <HAL_GetTick>
 8005886:	4602      	mov	r2, r0
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	1ad3      	subs	r3, r2, r3
 800588c:	2b02      	cmp	r3, #2
 800588e:	d901      	bls.n	8005894 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005890:	2303      	movs	r3, #3
 8005892:	e03d      	b.n	8005910 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005894:	4b11      	ldr	r3, [pc, #68]	; (80058dc <HAL_RCC_OscConfig+0x4c4>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800589c:	2b00      	cmp	r3, #0
 800589e:	d0f0      	beq.n	8005882 <HAL_RCC_OscConfig+0x46a>
 80058a0:	e035      	b.n	800590e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058a2:	4b10      	ldr	r3, [pc, #64]	; (80058e4 <HAL_RCC_OscConfig+0x4cc>)
 80058a4:	2200      	movs	r2, #0
 80058a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058a8:	f7fe fb0c 	bl	8003ec4 <HAL_GetTick>
 80058ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80058ae:	e008      	b.n	80058c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058b0:	f7fe fb08 	bl	8003ec4 <HAL_GetTick>
 80058b4:	4602      	mov	r2, r0
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	1ad3      	subs	r3, r2, r3
 80058ba:	2b02      	cmp	r3, #2
 80058bc:	d901      	bls.n	80058c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80058be:	2303      	movs	r3, #3
 80058c0:	e026      	b.n	8005910 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80058c2:	4b06      	ldr	r3, [pc, #24]	; (80058dc <HAL_RCC_OscConfig+0x4c4>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d1f0      	bne.n	80058b0 <HAL_RCC_OscConfig+0x498>
 80058ce:	e01e      	b.n	800590e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	69db      	ldr	r3, [r3, #28]
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d107      	bne.n	80058e8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	e019      	b.n	8005910 <HAL_RCC_OscConfig+0x4f8>
 80058dc:	40021000 	.word	0x40021000
 80058e0:	40007000 	.word	0x40007000
 80058e4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80058e8:	4b0b      	ldr	r3, [pc, #44]	; (8005918 <HAL_RCC_OscConfig+0x500>)
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6a1b      	ldr	r3, [r3, #32]
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d106      	bne.n	800590a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005906:	429a      	cmp	r2, r3
 8005908:	d001      	beq.n	800590e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e000      	b.n	8005910 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800590e:	2300      	movs	r3, #0
}
 8005910:	4618      	mov	r0, r3
 8005912:	3718      	adds	r7, #24
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}
 8005918:	40021000 	.word	0x40021000

0800591c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b084      	sub	sp, #16
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d101      	bne.n	8005930 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	e0d0      	b.n	8005ad2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005930:	4b6a      	ldr	r3, [pc, #424]	; (8005adc <HAL_RCC_ClockConfig+0x1c0>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 0307 	and.w	r3, r3, #7
 8005938:	683a      	ldr	r2, [r7, #0]
 800593a:	429a      	cmp	r2, r3
 800593c:	d910      	bls.n	8005960 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800593e:	4b67      	ldr	r3, [pc, #412]	; (8005adc <HAL_RCC_ClockConfig+0x1c0>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f023 0207 	bic.w	r2, r3, #7
 8005946:	4965      	ldr	r1, [pc, #404]	; (8005adc <HAL_RCC_ClockConfig+0x1c0>)
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	4313      	orrs	r3, r2
 800594c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800594e:	4b63      	ldr	r3, [pc, #396]	; (8005adc <HAL_RCC_ClockConfig+0x1c0>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f003 0307 	and.w	r3, r3, #7
 8005956:	683a      	ldr	r2, [r7, #0]
 8005958:	429a      	cmp	r2, r3
 800595a:	d001      	beq.n	8005960 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	e0b8      	b.n	8005ad2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 0302 	and.w	r3, r3, #2
 8005968:	2b00      	cmp	r3, #0
 800596a:	d020      	beq.n	80059ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f003 0304 	and.w	r3, r3, #4
 8005974:	2b00      	cmp	r3, #0
 8005976:	d005      	beq.n	8005984 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005978:	4b59      	ldr	r3, [pc, #356]	; (8005ae0 <HAL_RCC_ClockConfig+0x1c4>)
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	4a58      	ldr	r2, [pc, #352]	; (8005ae0 <HAL_RCC_ClockConfig+0x1c4>)
 800597e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005982:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 0308 	and.w	r3, r3, #8
 800598c:	2b00      	cmp	r3, #0
 800598e:	d005      	beq.n	800599c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005990:	4b53      	ldr	r3, [pc, #332]	; (8005ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	4a52      	ldr	r2, [pc, #328]	; (8005ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8005996:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800599a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800599c:	4b50      	ldr	r3, [pc, #320]	; (8005ae0 <HAL_RCC_ClockConfig+0x1c4>)
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	494d      	ldr	r1, [pc, #308]	; (8005ae0 <HAL_RCC_ClockConfig+0x1c4>)
 80059aa:	4313      	orrs	r3, r2
 80059ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 0301 	and.w	r3, r3, #1
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d040      	beq.n	8005a3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d107      	bne.n	80059d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059c2:	4b47      	ldr	r3, [pc, #284]	; (8005ae0 <HAL_RCC_ClockConfig+0x1c4>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d115      	bne.n	80059fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	e07f      	b.n	8005ad2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	2b02      	cmp	r3, #2
 80059d8:	d107      	bne.n	80059ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059da:	4b41      	ldr	r3, [pc, #260]	; (8005ae0 <HAL_RCC_ClockConfig+0x1c4>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d109      	bne.n	80059fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e073      	b.n	8005ad2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059ea:	4b3d      	ldr	r3, [pc, #244]	; (8005ae0 <HAL_RCC_ClockConfig+0x1c4>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 0302 	and.w	r3, r3, #2
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d101      	bne.n	80059fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e06b      	b.n	8005ad2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80059fa:	4b39      	ldr	r3, [pc, #228]	; (8005ae0 <HAL_RCC_ClockConfig+0x1c4>)
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	f023 0203 	bic.w	r2, r3, #3
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	4936      	ldr	r1, [pc, #216]	; (8005ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a0c:	f7fe fa5a 	bl	8003ec4 <HAL_GetTick>
 8005a10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a12:	e00a      	b.n	8005a2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a14:	f7fe fa56 	bl	8003ec4 <HAL_GetTick>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	1ad3      	subs	r3, r2, r3
 8005a1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d901      	bls.n	8005a2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a26:	2303      	movs	r3, #3
 8005a28:	e053      	b.n	8005ad2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a2a:	4b2d      	ldr	r3, [pc, #180]	; (8005ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	f003 020c 	and.w	r2, r3, #12
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d1eb      	bne.n	8005a14 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a3c:	4b27      	ldr	r3, [pc, #156]	; (8005adc <HAL_RCC_ClockConfig+0x1c0>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f003 0307 	and.w	r3, r3, #7
 8005a44:	683a      	ldr	r2, [r7, #0]
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d210      	bcs.n	8005a6c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a4a:	4b24      	ldr	r3, [pc, #144]	; (8005adc <HAL_RCC_ClockConfig+0x1c0>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f023 0207 	bic.w	r2, r3, #7
 8005a52:	4922      	ldr	r1, [pc, #136]	; (8005adc <HAL_RCC_ClockConfig+0x1c0>)
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a5a:	4b20      	ldr	r3, [pc, #128]	; (8005adc <HAL_RCC_ClockConfig+0x1c0>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f003 0307 	and.w	r3, r3, #7
 8005a62:	683a      	ldr	r2, [r7, #0]
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d001      	beq.n	8005a6c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e032      	b.n	8005ad2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 0304 	and.w	r3, r3, #4
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d008      	beq.n	8005a8a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a78:	4b19      	ldr	r3, [pc, #100]	; (8005ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	4916      	ldr	r1, [pc, #88]	; (8005ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8005a86:	4313      	orrs	r3, r2
 8005a88:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 0308 	and.w	r3, r3, #8
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d009      	beq.n	8005aaa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005a96:	4b12      	ldr	r3, [pc, #72]	; (8005ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	691b      	ldr	r3, [r3, #16]
 8005aa2:	00db      	lsls	r3, r3, #3
 8005aa4:	490e      	ldr	r1, [pc, #56]	; (8005ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005aaa:	f000 f821 	bl	8005af0 <HAL_RCC_GetSysClockFreq>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	4b0b      	ldr	r3, [pc, #44]	; (8005ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	091b      	lsrs	r3, r3, #4
 8005ab6:	f003 030f 	and.w	r3, r3, #15
 8005aba:	490a      	ldr	r1, [pc, #40]	; (8005ae4 <HAL_RCC_ClockConfig+0x1c8>)
 8005abc:	5ccb      	ldrb	r3, [r1, r3]
 8005abe:	fa22 f303 	lsr.w	r3, r2, r3
 8005ac2:	4a09      	ldr	r2, [pc, #36]	; (8005ae8 <HAL_RCC_ClockConfig+0x1cc>)
 8005ac4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005ac6:	4b09      	ldr	r3, [pc, #36]	; (8005aec <HAL_RCC_ClockConfig+0x1d0>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4618      	mov	r0, r3
 8005acc:	f7fe f9b8 	bl	8003e40 <HAL_InitTick>

  return HAL_OK;
 8005ad0:	2300      	movs	r3, #0
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3710      	adds	r7, #16
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	bf00      	nop
 8005adc:	40022000 	.word	0x40022000
 8005ae0:	40021000 	.word	0x40021000
 8005ae4:	08007a10 	.word	0x08007a10
 8005ae8:	2000003c 	.word	0x2000003c
 8005aec:	20000040 	.word	0x20000040

08005af0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005af0:	b490      	push	{r4, r7}
 8005af2:	b08a      	sub	sp, #40	; 0x28
 8005af4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005af6:	4b29      	ldr	r3, [pc, #164]	; (8005b9c <HAL_RCC_GetSysClockFreq+0xac>)
 8005af8:	1d3c      	adds	r4, r7, #4
 8005afa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005afc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005b00:	f240 2301 	movw	r3, #513	; 0x201
 8005b04:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005b06:	2300      	movs	r3, #0
 8005b08:	61fb      	str	r3, [r7, #28]
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	61bb      	str	r3, [r7, #24]
 8005b0e:	2300      	movs	r3, #0
 8005b10:	627b      	str	r3, [r7, #36]	; 0x24
 8005b12:	2300      	movs	r3, #0
 8005b14:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005b16:	2300      	movs	r3, #0
 8005b18:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005b1a:	4b21      	ldr	r3, [pc, #132]	; (8005ba0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	f003 030c 	and.w	r3, r3, #12
 8005b26:	2b04      	cmp	r3, #4
 8005b28:	d002      	beq.n	8005b30 <HAL_RCC_GetSysClockFreq+0x40>
 8005b2a:	2b08      	cmp	r3, #8
 8005b2c:	d003      	beq.n	8005b36 <HAL_RCC_GetSysClockFreq+0x46>
 8005b2e:	e02b      	b.n	8005b88 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005b30:	4b1c      	ldr	r3, [pc, #112]	; (8005ba4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005b32:	623b      	str	r3, [r7, #32]
      break;
 8005b34:	e02b      	b.n	8005b8e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	0c9b      	lsrs	r3, r3, #18
 8005b3a:	f003 030f 	and.w	r3, r3, #15
 8005b3e:	3328      	adds	r3, #40	; 0x28
 8005b40:	443b      	add	r3, r7
 8005b42:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005b46:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d012      	beq.n	8005b78 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005b52:	4b13      	ldr	r3, [pc, #76]	; (8005ba0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	0c5b      	lsrs	r3, r3, #17
 8005b58:	f003 0301 	and.w	r3, r3, #1
 8005b5c:	3328      	adds	r3, #40	; 0x28
 8005b5e:	443b      	add	r3, r7
 8005b60:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005b64:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	4a0e      	ldr	r2, [pc, #56]	; (8005ba4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005b6a:	fb03 f202 	mul.w	r2, r3, r2
 8005b6e:	69bb      	ldr	r3, [r7, #24]
 8005b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b74:	627b      	str	r3, [r7, #36]	; 0x24
 8005b76:	e004      	b.n	8005b82 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	4a0b      	ldr	r2, [pc, #44]	; (8005ba8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b7c:	fb02 f303 	mul.w	r3, r2, r3
 8005b80:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b84:	623b      	str	r3, [r7, #32]
      break;
 8005b86:	e002      	b.n	8005b8e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005b88:	4b06      	ldr	r3, [pc, #24]	; (8005ba4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005b8a:	623b      	str	r3, [r7, #32]
      break;
 8005b8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b8e:	6a3b      	ldr	r3, [r7, #32]
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3728      	adds	r7, #40	; 0x28
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bc90      	pop	{r4, r7}
 8005b98:	4770      	bx	lr
 8005b9a:	bf00      	nop
 8005b9c:	08007a00 	.word	0x08007a00
 8005ba0:	40021000 	.word	0x40021000
 8005ba4:	007a1200 	.word	0x007a1200
 8005ba8:	003d0900 	.word	0x003d0900

08005bac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bac:	b480      	push	{r7}
 8005bae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005bb0:	4b02      	ldr	r3, [pc, #8]	; (8005bbc <HAL_RCC_GetHCLKFreq+0x10>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bc80      	pop	{r7}
 8005bba:	4770      	bx	lr
 8005bbc:	2000003c 	.word	0x2000003c

08005bc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005bc4:	f7ff fff2 	bl	8005bac <HAL_RCC_GetHCLKFreq>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	4b05      	ldr	r3, [pc, #20]	; (8005be0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	0a1b      	lsrs	r3, r3, #8
 8005bd0:	f003 0307 	and.w	r3, r3, #7
 8005bd4:	4903      	ldr	r1, [pc, #12]	; (8005be4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005bd6:	5ccb      	ldrb	r3, [r1, r3]
 8005bd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	bd80      	pop	{r7, pc}
 8005be0:	40021000 	.word	0x40021000
 8005be4:	08007a20 	.word	0x08007a20

08005be8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005bec:	f7ff ffde 	bl	8005bac <HAL_RCC_GetHCLKFreq>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	4b05      	ldr	r3, [pc, #20]	; (8005c08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	0adb      	lsrs	r3, r3, #11
 8005bf8:	f003 0307 	and.w	r3, r3, #7
 8005bfc:	4903      	ldr	r1, [pc, #12]	; (8005c0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005bfe:	5ccb      	ldrb	r3, [r1, r3]
 8005c00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	bd80      	pop	{r7, pc}
 8005c08:	40021000 	.word	0x40021000
 8005c0c:	08007a20 	.word	0x08007a20

08005c10 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b085      	sub	sp, #20
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005c18:	4b0a      	ldr	r3, [pc, #40]	; (8005c44 <RCC_Delay+0x34>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a0a      	ldr	r2, [pc, #40]	; (8005c48 <RCC_Delay+0x38>)
 8005c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c22:	0a5b      	lsrs	r3, r3, #9
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	fb02 f303 	mul.w	r3, r2, r3
 8005c2a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005c2c:	bf00      	nop
  }
  while (Delay --);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	1e5a      	subs	r2, r3, #1
 8005c32:	60fa      	str	r2, [r7, #12]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d1f9      	bne.n	8005c2c <RCC_Delay+0x1c>
}
 8005c38:	bf00      	nop
 8005c3a:	bf00      	nop
 8005c3c:	3714      	adds	r7, #20
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bc80      	pop	{r7}
 8005c42:	4770      	bx	lr
 8005c44:	2000003c 	.word	0x2000003c
 8005c48:	10624dd3 	.word	0x10624dd3

08005c4c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b086      	sub	sp, #24
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005c54:	2300      	movs	r3, #0
 8005c56:	613b      	str	r3, [r7, #16]
 8005c58:	2300      	movs	r3, #0
 8005c5a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f003 0301 	and.w	r3, r3, #1
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d07d      	beq.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c6c:	4b4f      	ldr	r3, [pc, #316]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c6e:	69db      	ldr	r3, [r3, #28]
 8005c70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d10d      	bne.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c78:	4b4c      	ldr	r3, [pc, #304]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c7a:	69db      	ldr	r3, [r3, #28]
 8005c7c:	4a4b      	ldr	r2, [pc, #300]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c82:	61d3      	str	r3, [r2, #28]
 8005c84:	4b49      	ldr	r3, [pc, #292]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c86:	69db      	ldr	r3, [r3, #28]
 8005c88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c8c:	60bb      	str	r3, [r7, #8]
 8005c8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c90:	2301      	movs	r3, #1
 8005c92:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c94:	4b46      	ldr	r3, [pc, #280]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d118      	bne.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ca0:	4b43      	ldr	r3, [pc, #268]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a42      	ldr	r2, [pc, #264]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ca6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005caa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cac:	f7fe f90a 	bl	8003ec4 <HAL_GetTick>
 8005cb0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cb2:	e008      	b.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cb4:	f7fe f906 	bl	8003ec4 <HAL_GetTick>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	1ad3      	subs	r3, r2, r3
 8005cbe:	2b64      	cmp	r3, #100	; 0x64
 8005cc0:	d901      	bls.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005cc2:	2303      	movs	r3, #3
 8005cc4:	e06d      	b.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cc6:	4b3a      	ldr	r3, [pc, #232]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d0f0      	beq.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005cd2:	4b36      	ldr	r3, [pc, #216]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cd4:	6a1b      	ldr	r3, [r3, #32]
 8005cd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cda:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d02e      	beq.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cea:	68fa      	ldr	r2, [r7, #12]
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d027      	beq.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005cf0:	4b2e      	ldr	r3, [pc, #184]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cf2:	6a1b      	ldr	r3, [r3, #32]
 8005cf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cf8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005cfa:	4b2e      	ldr	r3, [pc, #184]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005d00:	4b2c      	ldr	r3, [pc, #176]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005d02:	2200      	movs	r2, #0
 8005d04:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005d06:	4a29      	ldr	r2, [pc, #164]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f003 0301 	and.w	r3, r3, #1
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d014      	beq.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d16:	f7fe f8d5 	bl	8003ec4 <HAL_GetTick>
 8005d1a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d1c:	e00a      	b.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d1e:	f7fe f8d1 	bl	8003ec4 <HAL_GetTick>
 8005d22:	4602      	mov	r2, r0
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	1ad3      	subs	r3, r2, r3
 8005d28:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d901      	bls.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005d30:	2303      	movs	r3, #3
 8005d32:	e036      	b.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d34:	4b1d      	ldr	r3, [pc, #116]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d36:	6a1b      	ldr	r3, [r3, #32]
 8005d38:	f003 0302 	and.w	r3, r3, #2
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d0ee      	beq.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d40:	4b1a      	ldr	r3, [pc, #104]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d42:	6a1b      	ldr	r3, [r3, #32]
 8005d44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	4917      	ldr	r1, [pc, #92]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005d52:	7dfb      	ldrb	r3, [r7, #23]
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d105      	bne.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d58:	4b14      	ldr	r3, [pc, #80]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d5a:	69db      	ldr	r3, [r3, #28]
 8005d5c:	4a13      	ldr	r2, [pc, #76]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d62:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f003 0302 	and.w	r3, r3, #2
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d008      	beq.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005d70:	4b0e      	ldr	r3, [pc, #56]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	490b      	ldr	r1, [pc, #44]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f003 0310 	and.w	r3, r3, #16
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d008      	beq.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005d8e:	4b07      	ldr	r3, [pc, #28]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	68db      	ldr	r3, [r3, #12]
 8005d9a:	4904      	ldr	r1, [pc, #16]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005da0:	2300      	movs	r3, #0
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3718      	adds	r7, #24
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	40021000 	.word	0x40021000
 8005db0:	40007000 	.word	0x40007000
 8005db4:	42420440 	.word	0x42420440

08005db8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b082      	sub	sp, #8
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d101      	bne.n	8005dca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e041      	b.n	8005e4e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d106      	bne.n	8005de4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f7fd fea2 	bl	8003b28 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2202      	movs	r2, #2
 8005de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	3304      	adds	r3, #4
 8005df4:	4619      	mov	r1, r3
 8005df6:	4610      	mov	r0, r2
 8005df8:	f000 fabe 	bl	8006378 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2201      	movs	r2, #1
 8005e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e4c:	2300      	movs	r3, #0
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3708      	adds	r7, #8
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}
	...

08005e58 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b084      	sub	sp, #16
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d109      	bne.n	8005e7c <HAL_TIM_PWM_Start+0x24>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	bf14      	ite	ne
 8005e74:	2301      	movne	r3, #1
 8005e76:	2300      	moveq	r3, #0
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	e022      	b.n	8005ec2 <HAL_TIM_PWM_Start+0x6a>
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	2b04      	cmp	r3, #4
 8005e80:	d109      	bne.n	8005e96 <HAL_TIM_PWM_Start+0x3e>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	bf14      	ite	ne
 8005e8e:	2301      	movne	r3, #1
 8005e90:	2300      	moveq	r3, #0
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	e015      	b.n	8005ec2 <HAL_TIM_PWM_Start+0x6a>
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	2b08      	cmp	r3, #8
 8005e9a:	d109      	bne.n	8005eb0 <HAL_TIM_PWM_Start+0x58>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	bf14      	ite	ne
 8005ea8:	2301      	movne	r3, #1
 8005eaa:	2300      	moveq	r3, #0
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	e008      	b.n	8005ec2 <HAL_TIM_PWM_Start+0x6a>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	bf14      	ite	ne
 8005ebc:	2301      	movne	r3, #1
 8005ebe:	2300      	moveq	r3, #0
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d001      	beq.n	8005eca <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e05e      	b.n	8005f88 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d104      	bne.n	8005eda <HAL_TIM_PWM_Start+0x82>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2202      	movs	r2, #2
 8005ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ed8:	e013      	b.n	8005f02 <HAL_TIM_PWM_Start+0xaa>
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	2b04      	cmp	r3, #4
 8005ede:	d104      	bne.n	8005eea <HAL_TIM_PWM_Start+0x92>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2202      	movs	r2, #2
 8005ee4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ee8:	e00b      	b.n	8005f02 <HAL_TIM_PWM_Start+0xaa>
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	2b08      	cmp	r3, #8
 8005eee:	d104      	bne.n	8005efa <HAL_TIM_PWM_Start+0xa2>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2202      	movs	r2, #2
 8005ef4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ef8:	e003      	b.n	8005f02 <HAL_TIM_PWM_Start+0xaa>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2202      	movs	r2, #2
 8005efe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	2201      	movs	r2, #1
 8005f08:	6839      	ldr	r1, [r7, #0]
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f000 fc1e 	bl	800674c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a1e      	ldr	r2, [pc, #120]	; (8005f90 <HAL_TIM_PWM_Start+0x138>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d107      	bne.n	8005f2a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f28:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a18      	ldr	r2, [pc, #96]	; (8005f90 <HAL_TIM_PWM_Start+0x138>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d00e      	beq.n	8005f52 <HAL_TIM_PWM_Start+0xfa>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f3c:	d009      	beq.n	8005f52 <HAL_TIM_PWM_Start+0xfa>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a14      	ldr	r2, [pc, #80]	; (8005f94 <HAL_TIM_PWM_Start+0x13c>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d004      	beq.n	8005f52 <HAL_TIM_PWM_Start+0xfa>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a12      	ldr	r2, [pc, #72]	; (8005f98 <HAL_TIM_PWM_Start+0x140>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d111      	bne.n	8005f76 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	f003 0307 	and.w	r3, r3, #7
 8005f5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2b06      	cmp	r3, #6
 8005f62:	d010      	beq.n	8005f86 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f042 0201 	orr.w	r2, r2, #1
 8005f72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f74:	e007      	b.n	8005f86 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f042 0201 	orr.w	r2, r2, #1
 8005f84:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f86:	2300      	movs	r3, #0
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3710      	adds	r7, #16
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}
 8005f90:	40012c00 	.word	0x40012c00
 8005f94:	40000400 	.word	0x40000400
 8005f98:	40000800 	.word	0x40000800

08005f9c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b086      	sub	sp, #24
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d101      	bne.n	8005fb0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	e093      	b.n	80060d8 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d106      	bne.n	8005fca <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f7fd fdcb 	bl	8003b60 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2202      	movs	r2, #2
 8005fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	6812      	ldr	r2, [r2, #0]
 8005fdc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fe0:	f023 0307 	bic.w	r3, r3, #7
 8005fe4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	3304      	adds	r3, #4
 8005fee:	4619      	mov	r1, r3
 8005ff0:	4610      	mov	r0, r2
 8005ff2:	f000 f9c1 	bl	8006378 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	699b      	ldr	r3, [r3, #24]
 8006004:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	6a1b      	ldr	r3, [r3, #32]
 800600c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	697a      	ldr	r2, [r7, #20]
 8006014:	4313      	orrs	r3, r2
 8006016:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800601e:	f023 0303 	bic.w	r3, r3, #3
 8006022:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	689a      	ldr	r2, [r3, #8]
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	699b      	ldr	r3, [r3, #24]
 800602c:	021b      	lsls	r3, r3, #8
 800602e:	4313      	orrs	r3, r2
 8006030:	693a      	ldr	r2, [r7, #16]
 8006032:	4313      	orrs	r3, r2
 8006034:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800603c:	f023 030c 	bic.w	r3, r3, #12
 8006040:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006048:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800604c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	68da      	ldr	r2, [r3, #12]
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	69db      	ldr	r3, [r3, #28]
 8006056:	021b      	lsls	r3, r3, #8
 8006058:	4313      	orrs	r3, r2
 800605a:	693a      	ldr	r2, [r7, #16]
 800605c:	4313      	orrs	r3, r2
 800605e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	691b      	ldr	r3, [r3, #16]
 8006064:	011a      	lsls	r2, r3, #4
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	6a1b      	ldr	r3, [r3, #32]
 800606a:	031b      	lsls	r3, r3, #12
 800606c:	4313      	orrs	r3, r2
 800606e:	693a      	ldr	r2, [r7, #16]
 8006070:	4313      	orrs	r3, r2
 8006072:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800607a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	685a      	ldr	r2, [r3, #4]
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	695b      	ldr	r3, [r3, #20]
 8006084:	011b      	lsls	r3, r3, #4
 8006086:	4313      	orrs	r3, r2
 8006088:	68fa      	ldr	r2, [r7, #12]
 800608a:	4313      	orrs	r3, r2
 800608c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	697a      	ldr	r2, [r7, #20]
 8006094:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	693a      	ldr	r2, [r7, #16]
 800609c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	68fa      	ldr	r2, [r7, #12]
 80060a4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2201      	movs	r2, #1
 80060aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2201      	movs	r2, #1
 80060b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2201      	movs	r2, #1
 80060ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2201      	movs	r2, #1
 80060c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2201      	movs	r2, #1
 80060ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2201      	movs	r2, #1
 80060d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060d6:	2300      	movs	r3, #0
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3718      	adds	r7, #24
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}

080060e0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b084      	sub	sp, #16
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060f0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80060f8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006100:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006108:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d110      	bne.n	8006132 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006110:	7bfb      	ldrb	r3, [r7, #15]
 8006112:	2b01      	cmp	r3, #1
 8006114:	d102      	bne.n	800611c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006116:	7b7b      	ldrb	r3, [r7, #13]
 8006118:	2b01      	cmp	r3, #1
 800611a:	d001      	beq.n	8006120 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800611c:	2301      	movs	r3, #1
 800611e:	e069      	b.n	80061f4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2202      	movs	r2, #2
 8006124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2202      	movs	r2, #2
 800612c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006130:	e031      	b.n	8006196 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	2b04      	cmp	r3, #4
 8006136:	d110      	bne.n	800615a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006138:	7bbb      	ldrb	r3, [r7, #14]
 800613a:	2b01      	cmp	r3, #1
 800613c:	d102      	bne.n	8006144 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800613e:	7b3b      	ldrb	r3, [r7, #12]
 8006140:	2b01      	cmp	r3, #1
 8006142:	d001      	beq.n	8006148 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	e055      	b.n	80061f4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2202      	movs	r2, #2
 800614c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2202      	movs	r2, #2
 8006154:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006158:	e01d      	b.n	8006196 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800615a:	7bfb      	ldrb	r3, [r7, #15]
 800615c:	2b01      	cmp	r3, #1
 800615e:	d108      	bne.n	8006172 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006160:	7bbb      	ldrb	r3, [r7, #14]
 8006162:	2b01      	cmp	r3, #1
 8006164:	d105      	bne.n	8006172 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006166:	7b7b      	ldrb	r3, [r7, #13]
 8006168:	2b01      	cmp	r3, #1
 800616a:	d102      	bne.n	8006172 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800616c:	7b3b      	ldrb	r3, [r7, #12]
 800616e:	2b01      	cmp	r3, #1
 8006170:	d001      	beq.n	8006176 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	e03e      	b.n	80061f4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2202      	movs	r2, #2
 800617a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2202      	movs	r2, #2
 8006182:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2202      	movs	r2, #2
 800618a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2202      	movs	r2, #2
 8006192:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d003      	beq.n	80061a4 <HAL_TIM_Encoder_Start+0xc4>
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	2b04      	cmp	r3, #4
 80061a0:	d008      	beq.n	80061b4 <HAL_TIM_Encoder_Start+0xd4>
 80061a2:	e00f      	b.n	80061c4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	2201      	movs	r2, #1
 80061aa:	2100      	movs	r1, #0
 80061ac:	4618      	mov	r0, r3
 80061ae:	f000 facd 	bl	800674c <TIM_CCxChannelCmd>
      break;
 80061b2:	e016      	b.n	80061e2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	2201      	movs	r2, #1
 80061ba:	2104      	movs	r1, #4
 80061bc:	4618      	mov	r0, r3
 80061be:	f000 fac5 	bl	800674c <TIM_CCxChannelCmd>
      break;
 80061c2:	e00e      	b.n	80061e2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	2201      	movs	r2, #1
 80061ca:	2100      	movs	r1, #0
 80061cc:	4618      	mov	r0, r3
 80061ce:	f000 fabd 	bl	800674c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	2201      	movs	r2, #1
 80061d8:	2104      	movs	r1, #4
 80061da:	4618      	mov	r0, r3
 80061dc:	f000 fab6 	bl	800674c <TIM_CCxChannelCmd>
      break;
 80061e0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f042 0201 	orr.w	r2, r2, #1
 80061f0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80061f2:	2300      	movs	r3, #0
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3710      	adds	r7, #16
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}

080061fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	60f8      	str	r0, [r7, #12]
 8006204:	60b9      	str	r1, [r7, #8]
 8006206:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800620e:	2b01      	cmp	r3, #1
 8006210:	d101      	bne.n	8006216 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006212:	2302      	movs	r3, #2
 8006214:	e0ac      	b.n	8006370 <HAL_TIM_PWM_ConfigChannel+0x174>
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2201      	movs	r2, #1
 800621a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2b0c      	cmp	r3, #12
 8006222:	f200 809f 	bhi.w	8006364 <HAL_TIM_PWM_ConfigChannel+0x168>
 8006226:	a201      	add	r2, pc, #4	; (adr r2, 800622c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800622c:	08006261 	.word	0x08006261
 8006230:	08006365 	.word	0x08006365
 8006234:	08006365 	.word	0x08006365
 8006238:	08006365 	.word	0x08006365
 800623c:	080062a1 	.word	0x080062a1
 8006240:	08006365 	.word	0x08006365
 8006244:	08006365 	.word	0x08006365
 8006248:	08006365 	.word	0x08006365
 800624c:	080062e3 	.word	0x080062e3
 8006250:	08006365 	.word	0x08006365
 8006254:	08006365 	.word	0x08006365
 8006258:	08006365 	.word	0x08006365
 800625c:	08006323 	.word	0x08006323
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	68b9      	ldr	r1, [r7, #8]
 8006266:	4618      	mov	r0, r3
 8006268:	f000 f8e8 	bl	800643c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	699a      	ldr	r2, [r3, #24]
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f042 0208 	orr.w	r2, r2, #8
 800627a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	699a      	ldr	r2, [r3, #24]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f022 0204 	bic.w	r2, r2, #4
 800628a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	6999      	ldr	r1, [r3, #24]
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	691a      	ldr	r2, [r3, #16]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	430a      	orrs	r2, r1
 800629c:	619a      	str	r2, [r3, #24]
      break;
 800629e:	e062      	b.n	8006366 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	68b9      	ldr	r1, [r7, #8]
 80062a6:	4618      	mov	r0, r3
 80062a8:	f000 f92e 	bl	8006508 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	699a      	ldr	r2, [r3, #24]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	699a      	ldr	r2, [r3, #24]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	6999      	ldr	r1, [r3, #24]
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	691b      	ldr	r3, [r3, #16]
 80062d6:	021a      	lsls	r2, r3, #8
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	430a      	orrs	r2, r1
 80062de:	619a      	str	r2, [r3, #24]
      break;
 80062e0:	e041      	b.n	8006366 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	68b9      	ldr	r1, [r7, #8]
 80062e8:	4618      	mov	r0, r3
 80062ea:	f000 f977 	bl	80065dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	69da      	ldr	r2, [r3, #28]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f042 0208 	orr.w	r2, r2, #8
 80062fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	69da      	ldr	r2, [r3, #28]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f022 0204 	bic.w	r2, r2, #4
 800630c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	69d9      	ldr	r1, [r3, #28]
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	691a      	ldr	r2, [r3, #16]
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	430a      	orrs	r2, r1
 800631e:	61da      	str	r2, [r3, #28]
      break;
 8006320:	e021      	b.n	8006366 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	68b9      	ldr	r1, [r7, #8]
 8006328:	4618      	mov	r0, r3
 800632a:	f000 f9c1 	bl	80066b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	69da      	ldr	r2, [r3, #28]
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800633c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	69da      	ldr	r2, [r3, #28]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800634c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	69d9      	ldr	r1, [r3, #28]
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	691b      	ldr	r3, [r3, #16]
 8006358:	021a      	lsls	r2, r3, #8
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	430a      	orrs	r2, r1
 8006360:	61da      	str	r2, [r3, #28]
      break;
 8006362:	e000      	b.n	8006366 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8006364:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2200      	movs	r2, #0
 800636a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800636e:	2300      	movs	r3, #0
}
 8006370:	4618      	mov	r0, r3
 8006372:	3710      	adds	r7, #16
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}

08006378 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006378:	b480      	push	{r7}
 800637a:	b085      	sub	sp, #20
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	4a29      	ldr	r2, [pc, #164]	; (8006430 <TIM_Base_SetConfig+0xb8>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d00b      	beq.n	80063a8 <TIM_Base_SetConfig+0x30>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006396:	d007      	beq.n	80063a8 <TIM_Base_SetConfig+0x30>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	4a26      	ldr	r2, [pc, #152]	; (8006434 <TIM_Base_SetConfig+0xbc>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d003      	beq.n	80063a8 <TIM_Base_SetConfig+0x30>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	4a25      	ldr	r2, [pc, #148]	; (8006438 <TIM_Base_SetConfig+0xc0>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d108      	bne.n	80063ba <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	68fa      	ldr	r2, [r7, #12]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	4a1c      	ldr	r2, [pc, #112]	; (8006430 <TIM_Base_SetConfig+0xb8>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d00b      	beq.n	80063da <TIM_Base_SetConfig+0x62>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063c8:	d007      	beq.n	80063da <TIM_Base_SetConfig+0x62>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4a19      	ldr	r2, [pc, #100]	; (8006434 <TIM_Base_SetConfig+0xbc>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d003      	beq.n	80063da <TIM_Base_SetConfig+0x62>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	4a18      	ldr	r2, [pc, #96]	; (8006438 <TIM_Base_SetConfig+0xc0>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d108      	bne.n	80063ec <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	68db      	ldr	r3, [r3, #12]
 80063e6:	68fa      	ldr	r2, [r7, #12]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	695b      	ldr	r3, [r3, #20]
 80063f6:	4313      	orrs	r3, r2
 80063f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	68fa      	ldr	r2, [r7, #12]
 80063fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	689a      	ldr	r2, [r3, #8]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	4a07      	ldr	r2, [pc, #28]	; (8006430 <TIM_Base_SetConfig+0xb8>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d103      	bne.n	8006420 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	691a      	ldr	r2, [r3, #16]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2201      	movs	r2, #1
 8006424:	615a      	str	r2, [r3, #20]
}
 8006426:	bf00      	nop
 8006428:	3714      	adds	r7, #20
 800642a:	46bd      	mov	sp, r7
 800642c:	bc80      	pop	{r7}
 800642e:	4770      	bx	lr
 8006430:	40012c00 	.word	0x40012c00
 8006434:	40000400 	.word	0x40000400
 8006438:	40000800 	.word	0x40000800

0800643c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800643c:	b480      	push	{r7}
 800643e:	b087      	sub	sp, #28
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6a1b      	ldr	r3, [r3, #32]
 800644a:	f023 0201 	bic.w	r2, r3, #1
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6a1b      	ldr	r3, [r3, #32]
 8006456:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	699b      	ldr	r3, [r3, #24]
 8006462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800646a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f023 0303 	bic.w	r3, r3, #3
 8006472:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	68fa      	ldr	r2, [r7, #12]
 800647a:	4313      	orrs	r3, r2
 800647c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	f023 0302 	bic.w	r3, r3, #2
 8006484:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	697a      	ldr	r2, [r7, #20]
 800648c:	4313      	orrs	r3, r2
 800648e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	4a1c      	ldr	r2, [pc, #112]	; (8006504 <TIM_OC1_SetConfig+0xc8>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d10c      	bne.n	80064b2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	f023 0308 	bic.w	r3, r3, #8
 800649e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	68db      	ldr	r3, [r3, #12]
 80064a4:	697a      	ldr	r2, [r7, #20]
 80064a6:	4313      	orrs	r3, r2
 80064a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	f023 0304 	bic.w	r3, r3, #4
 80064b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	4a13      	ldr	r2, [pc, #76]	; (8006504 <TIM_OC1_SetConfig+0xc8>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d111      	bne.n	80064de <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80064c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	695b      	ldr	r3, [r3, #20]
 80064ce:	693a      	ldr	r2, [r7, #16]
 80064d0:	4313      	orrs	r3, r2
 80064d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	699b      	ldr	r3, [r3, #24]
 80064d8:	693a      	ldr	r2, [r7, #16]
 80064da:	4313      	orrs	r3, r2
 80064dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	693a      	ldr	r2, [r7, #16]
 80064e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	68fa      	ldr	r2, [r7, #12]
 80064e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	685a      	ldr	r2, [r3, #4]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	697a      	ldr	r2, [r7, #20]
 80064f6:	621a      	str	r2, [r3, #32]
}
 80064f8:	bf00      	nop
 80064fa:	371c      	adds	r7, #28
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bc80      	pop	{r7}
 8006500:	4770      	bx	lr
 8006502:	bf00      	nop
 8006504:	40012c00 	.word	0x40012c00

08006508 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006508:	b480      	push	{r7}
 800650a:	b087      	sub	sp, #28
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6a1b      	ldr	r3, [r3, #32]
 8006516:	f023 0210 	bic.w	r2, r3, #16
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6a1b      	ldr	r3, [r3, #32]
 8006522:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	699b      	ldr	r3, [r3, #24]
 800652e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006536:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800653e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	021b      	lsls	r3, r3, #8
 8006546:	68fa      	ldr	r2, [r7, #12]
 8006548:	4313      	orrs	r3, r2
 800654a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	f023 0320 	bic.w	r3, r3, #32
 8006552:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	011b      	lsls	r3, r3, #4
 800655a:	697a      	ldr	r2, [r7, #20]
 800655c:	4313      	orrs	r3, r2
 800655e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	4a1d      	ldr	r2, [pc, #116]	; (80065d8 <TIM_OC2_SetConfig+0xd0>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d10d      	bne.n	8006584 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800656e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	011b      	lsls	r3, r3, #4
 8006576:	697a      	ldr	r2, [r7, #20]
 8006578:	4313      	orrs	r3, r2
 800657a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006582:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	4a14      	ldr	r2, [pc, #80]	; (80065d8 <TIM_OC2_SetConfig+0xd0>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d113      	bne.n	80065b4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006592:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800659a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	695b      	ldr	r3, [r3, #20]
 80065a0:	009b      	lsls	r3, r3, #2
 80065a2:	693a      	ldr	r2, [r7, #16]
 80065a4:	4313      	orrs	r3, r2
 80065a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	699b      	ldr	r3, [r3, #24]
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	693a      	ldr	r2, [r7, #16]
 80065b0:	4313      	orrs	r3, r2
 80065b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	693a      	ldr	r2, [r7, #16]
 80065b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	68fa      	ldr	r2, [r7, #12]
 80065be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	685a      	ldr	r2, [r3, #4]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	697a      	ldr	r2, [r7, #20]
 80065cc:	621a      	str	r2, [r3, #32]
}
 80065ce:	bf00      	nop
 80065d0:	371c      	adds	r7, #28
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bc80      	pop	{r7}
 80065d6:	4770      	bx	lr
 80065d8:	40012c00 	.word	0x40012c00

080065dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065dc:	b480      	push	{r7}
 80065de:	b087      	sub	sp, #28
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6a1b      	ldr	r3, [r3, #32]
 80065ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6a1b      	ldr	r3, [r3, #32]
 80065f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	69db      	ldr	r3, [r3, #28]
 8006602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800660a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f023 0303 	bic.w	r3, r3, #3
 8006612:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	68fa      	ldr	r2, [r7, #12]
 800661a:	4313      	orrs	r3, r2
 800661c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006624:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	021b      	lsls	r3, r3, #8
 800662c:	697a      	ldr	r2, [r7, #20]
 800662e:	4313      	orrs	r3, r2
 8006630:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	4a1d      	ldr	r2, [pc, #116]	; (80066ac <TIM_OC3_SetConfig+0xd0>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d10d      	bne.n	8006656 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006640:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	68db      	ldr	r3, [r3, #12]
 8006646:	021b      	lsls	r3, r3, #8
 8006648:	697a      	ldr	r2, [r7, #20]
 800664a:	4313      	orrs	r3, r2
 800664c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006654:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	4a14      	ldr	r2, [pc, #80]	; (80066ac <TIM_OC3_SetConfig+0xd0>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d113      	bne.n	8006686 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006664:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800666c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	695b      	ldr	r3, [r3, #20]
 8006672:	011b      	lsls	r3, r3, #4
 8006674:	693a      	ldr	r2, [r7, #16]
 8006676:	4313      	orrs	r3, r2
 8006678:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	699b      	ldr	r3, [r3, #24]
 800667e:	011b      	lsls	r3, r3, #4
 8006680:	693a      	ldr	r2, [r7, #16]
 8006682:	4313      	orrs	r3, r2
 8006684:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	693a      	ldr	r2, [r7, #16]
 800668a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	68fa      	ldr	r2, [r7, #12]
 8006690:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	685a      	ldr	r2, [r3, #4]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	697a      	ldr	r2, [r7, #20]
 800669e:	621a      	str	r2, [r3, #32]
}
 80066a0:	bf00      	nop
 80066a2:	371c      	adds	r7, #28
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bc80      	pop	{r7}
 80066a8:	4770      	bx	lr
 80066aa:	bf00      	nop
 80066ac:	40012c00 	.word	0x40012c00

080066b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b087      	sub	sp, #28
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6a1b      	ldr	r3, [r3, #32]
 80066be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6a1b      	ldr	r3, [r3, #32]
 80066ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	69db      	ldr	r3, [r3, #28]
 80066d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	021b      	lsls	r3, r3, #8
 80066ee:	68fa      	ldr	r2, [r7, #12]
 80066f0:	4313      	orrs	r3, r2
 80066f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80066fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	031b      	lsls	r3, r3, #12
 8006702:	693a      	ldr	r2, [r7, #16]
 8006704:	4313      	orrs	r3, r2
 8006706:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	4a0f      	ldr	r2, [pc, #60]	; (8006748 <TIM_OC4_SetConfig+0x98>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d109      	bne.n	8006724 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006716:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	695b      	ldr	r3, [r3, #20]
 800671c:	019b      	lsls	r3, r3, #6
 800671e:	697a      	ldr	r2, [r7, #20]
 8006720:	4313      	orrs	r3, r2
 8006722:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	697a      	ldr	r2, [r7, #20]
 8006728:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	68fa      	ldr	r2, [r7, #12]
 800672e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	685a      	ldr	r2, [r3, #4]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	693a      	ldr	r2, [r7, #16]
 800673c:	621a      	str	r2, [r3, #32]
}
 800673e:	bf00      	nop
 8006740:	371c      	adds	r7, #28
 8006742:	46bd      	mov	sp, r7
 8006744:	bc80      	pop	{r7}
 8006746:	4770      	bx	lr
 8006748:	40012c00 	.word	0x40012c00

0800674c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800674c:	b480      	push	{r7}
 800674e:	b087      	sub	sp, #28
 8006750:	af00      	add	r7, sp, #0
 8006752:	60f8      	str	r0, [r7, #12]
 8006754:	60b9      	str	r1, [r7, #8]
 8006756:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	f003 031f 	and.w	r3, r3, #31
 800675e:	2201      	movs	r2, #1
 8006760:	fa02 f303 	lsl.w	r3, r2, r3
 8006764:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	6a1a      	ldr	r2, [r3, #32]
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	43db      	mvns	r3, r3
 800676e:	401a      	ands	r2, r3
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	6a1a      	ldr	r2, [r3, #32]
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	f003 031f 	and.w	r3, r3, #31
 800677e:	6879      	ldr	r1, [r7, #4]
 8006780:	fa01 f303 	lsl.w	r3, r1, r3
 8006784:	431a      	orrs	r2, r3
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	621a      	str	r2, [r3, #32]
}
 800678a:	bf00      	nop
 800678c:	371c      	adds	r7, #28
 800678e:	46bd      	mov	sp, r7
 8006790:	bc80      	pop	{r7}
 8006792:	4770      	bx	lr

08006794 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006794:	b480      	push	{r7}
 8006796:	b085      	sub	sp, #20
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d101      	bne.n	80067ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80067a8:	2302      	movs	r3, #2
 80067aa:	e046      	b.n	800683a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2202      	movs	r2, #2
 80067b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	68fa      	ldr	r2, [r7, #12]
 80067da:	4313      	orrs	r3, r2
 80067dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	68fa      	ldr	r2, [r7, #12]
 80067e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a16      	ldr	r2, [pc, #88]	; (8006844 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d00e      	beq.n	800680e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067f8:	d009      	beq.n	800680e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a12      	ldr	r2, [pc, #72]	; (8006848 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d004      	beq.n	800680e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a10      	ldr	r2, [pc, #64]	; (800684c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d10c      	bne.n	8006828 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006814:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	68ba      	ldr	r2, [r7, #8]
 800681c:	4313      	orrs	r3, r2
 800681e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	68ba      	ldr	r2, [r7, #8]
 8006826:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2201      	movs	r2, #1
 800682c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006838:	2300      	movs	r3, #0
}
 800683a:	4618      	mov	r0, r3
 800683c:	3714      	adds	r7, #20
 800683e:	46bd      	mov	sp, r7
 8006840:	bc80      	pop	{r7}
 8006842:	4770      	bx	lr
 8006844:	40012c00 	.word	0x40012c00
 8006848:	40000400 	.word	0x40000400
 800684c:	40000800 	.word	0x40000800

08006850 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b082      	sub	sp, #8
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d101      	bne.n	8006862 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	e03f      	b.n	80068e2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006868:	b2db      	uxtb	r3, r3
 800686a:	2b00      	cmp	r3, #0
 800686c:	d106      	bne.n	800687c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2200      	movs	r2, #0
 8006872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f7fd fa5a 	bl	8003d30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2224      	movs	r2, #36	; 0x24
 8006880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	68da      	ldr	r2, [r3, #12]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006892:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f000 f905 	bl	8006aa4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	691a      	ldr	r2, [r3, #16]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80068a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	695a      	ldr	r2, [r3, #20]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80068b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	68da      	ldr	r2, [r3, #12]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80068c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2200      	movs	r2, #0
 80068ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2220      	movs	r2, #32
 80068d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2220      	movs	r2, #32
 80068dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80068e0:	2300      	movs	r3, #0
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3708      	adds	r7, #8
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}

080068ea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068ea:	b580      	push	{r7, lr}
 80068ec:	b08a      	sub	sp, #40	; 0x28
 80068ee:	af02      	add	r7, sp, #8
 80068f0:	60f8      	str	r0, [r7, #12]
 80068f2:	60b9      	str	r1, [r7, #8]
 80068f4:	603b      	str	r3, [r7, #0]
 80068f6:	4613      	mov	r3, r2
 80068f8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80068fa:	2300      	movs	r3, #0
 80068fc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006904:	b2db      	uxtb	r3, r3
 8006906:	2b20      	cmp	r3, #32
 8006908:	d17c      	bne.n	8006a04 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d002      	beq.n	8006916 <HAL_UART_Transmit+0x2c>
 8006910:	88fb      	ldrh	r3, [r7, #6]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d101      	bne.n	800691a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	e075      	b.n	8006a06 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006920:	2b01      	cmp	r3, #1
 8006922:	d101      	bne.n	8006928 <HAL_UART_Transmit+0x3e>
 8006924:	2302      	movs	r3, #2
 8006926:	e06e      	b.n	8006a06 <HAL_UART_Transmit+0x11c>
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2201      	movs	r2, #1
 800692c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2200      	movs	r2, #0
 8006934:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2221      	movs	r2, #33	; 0x21
 800693a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800693e:	f7fd fac1 	bl	8003ec4 <HAL_GetTick>
 8006942:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	88fa      	ldrh	r2, [r7, #6]
 8006948:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	88fa      	ldrh	r2, [r7, #6]
 800694e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006958:	d108      	bne.n	800696c <HAL_UART_Transmit+0x82>
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	691b      	ldr	r3, [r3, #16]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d104      	bne.n	800696c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006962:	2300      	movs	r3, #0
 8006964:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	61bb      	str	r3, [r7, #24]
 800696a:	e003      	b.n	8006974 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006970:	2300      	movs	r3, #0
 8006972:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2200      	movs	r2, #0
 8006978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800697c:	e02a      	b.n	80069d4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	9300      	str	r3, [sp, #0]
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	2200      	movs	r2, #0
 8006986:	2180      	movs	r1, #128	; 0x80
 8006988:	68f8      	ldr	r0, [r7, #12]
 800698a:	f000 f840 	bl	8006a0e <UART_WaitOnFlagUntilTimeout>
 800698e:	4603      	mov	r3, r0
 8006990:	2b00      	cmp	r3, #0
 8006992:	d001      	beq.n	8006998 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006994:	2303      	movs	r3, #3
 8006996:	e036      	b.n	8006a06 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006998:	69fb      	ldr	r3, [r7, #28]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d10b      	bne.n	80069b6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800699e:	69bb      	ldr	r3, [r7, #24]
 80069a0:	881b      	ldrh	r3, [r3, #0]
 80069a2:	461a      	mov	r2, r3
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80069ae:	69bb      	ldr	r3, [r7, #24]
 80069b0:	3302      	adds	r3, #2
 80069b2:	61bb      	str	r3, [r7, #24]
 80069b4:	e007      	b.n	80069c6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80069b6:	69fb      	ldr	r3, [r7, #28]
 80069b8:	781a      	ldrb	r2, [r3, #0]
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80069c0:	69fb      	ldr	r3, [r7, #28]
 80069c2:	3301      	adds	r3, #1
 80069c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	3b01      	subs	r3, #1
 80069ce:	b29a      	uxth	r2, r3
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80069d8:	b29b      	uxth	r3, r3
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d1cf      	bne.n	800697e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	9300      	str	r3, [sp, #0]
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	2200      	movs	r2, #0
 80069e6:	2140      	movs	r1, #64	; 0x40
 80069e8:	68f8      	ldr	r0, [r7, #12]
 80069ea:	f000 f810 	bl	8006a0e <UART_WaitOnFlagUntilTimeout>
 80069ee:	4603      	mov	r3, r0
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d001      	beq.n	80069f8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80069f4:	2303      	movs	r3, #3
 80069f6:	e006      	b.n	8006a06 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2220      	movs	r2, #32
 80069fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006a00:	2300      	movs	r3, #0
 8006a02:	e000      	b.n	8006a06 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006a04:	2302      	movs	r3, #2
  }
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3720      	adds	r7, #32
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}

08006a0e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006a0e:	b580      	push	{r7, lr}
 8006a10:	b084      	sub	sp, #16
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	60f8      	str	r0, [r7, #12]
 8006a16:	60b9      	str	r1, [r7, #8]
 8006a18:	603b      	str	r3, [r7, #0]
 8006a1a:	4613      	mov	r3, r2
 8006a1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a1e:	e02c      	b.n	8006a7a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a20:	69bb      	ldr	r3, [r7, #24]
 8006a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a26:	d028      	beq.n	8006a7a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006a28:	69bb      	ldr	r3, [r7, #24]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d007      	beq.n	8006a3e <UART_WaitOnFlagUntilTimeout+0x30>
 8006a2e:	f7fd fa49 	bl	8003ec4 <HAL_GetTick>
 8006a32:	4602      	mov	r2, r0
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	1ad3      	subs	r3, r2, r3
 8006a38:	69ba      	ldr	r2, [r7, #24]
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d21d      	bcs.n	8006a7a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	68da      	ldr	r2, [r3, #12]
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006a4c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	695a      	ldr	r2, [r3, #20]
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f022 0201 	bic.w	r2, r2, #1
 8006a5c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2220      	movs	r2, #32
 8006a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2220      	movs	r2, #32
 8006a6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2200      	movs	r2, #0
 8006a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006a76:	2303      	movs	r3, #3
 8006a78:	e00f      	b.n	8006a9a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	4013      	ands	r3, r2
 8006a84:	68ba      	ldr	r2, [r7, #8]
 8006a86:	429a      	cmp	r2, r3
 8006a88:	bf0c      	ite	eq
 8006a8a:	2301      	moveq	r3, #1
 8006a8c:	2300      	movne	r3, #0
 8006a8e:	b2db      	uxtb	r3, r3
 8006a90:	461a      	mov	r2, r3
 8006a92:	79fb      	ldrb	r3, [r7, #7]
 8006a94:	429a      	cmp	r2, r3
 8006a96:	d0c3      	beq.n	8006a20 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006a98:	2300      	movs	r3, #0
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3710      	adds	r7, #16
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}
	...

08006aa4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b084      	sub	sp, #16
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	691b      	ldr	r3, [r3, #16]
 8006ab2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	68da      	ldr	r2, [r3, #12]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	430a      	orrs	r2, r1
 8006ac0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	689a      	ldr	r2, [r3, #8]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	691b      	ldr	r3, [r3, #16]
 8006aca:	431a      	orrs	r2, r3
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	695b      	ldr	r3, [r3, #20]
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	68db      	ldr	r3, [r3, #12]
 8006ada:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006ade:	f023 030c 	bic.w	r3, r3, #12
 8006ae2:	687a      	ldr	r2, [r7, #4]
 8006ae4:	6812      	ldr	r2, [r2, #0]
 8006ae6:	68b9      	ldr	r1, [r7, #8]
 8006ae8:	430b      	orrs	r3, r1
 8006aea:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	695b      	ldr	r3, [r3, #20]
 8006af2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	699a      	ldr	r2, [r3, #24]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	430a      	orrs	r2, r1
 8006b00:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a2c      	ldr	r2, [pc, #176]	; (8006bb8 <UART_SetConfig+0x114>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d103      	bne.n	8006b14 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006b0c:	f7ff f86c 	bl	8005be8 <HAL_RCC_GetPCLK2Freq>
 8006b10:	60f8      	str	r0, [r7, #12]
 8006b12:	e002      	b.n	8006b1a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006b14:	f7ff f854 	bl	8005bc0 <HAL_RCC_GetPCLK1Freq>
 8006b18:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006b1a:	68fa      	ldr	r2, [r7, #12]
 8006b1c:	4613      	mov	r3, r2
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	4413      	add	r3, r2
 8006b22:	009a      	lsls	r2, r3, #2
 8006b24:	441a      	add	r2, r3
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	009b      	lsls	r3, r3, #2
 8006b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b30:	4a22      	ldr	r2, [pc, #136]	; (8006bbc <UART_SetConfig+0x118>)
 8006b32:	fba2 2303 	umull	r2, r3, r2, r3
 8006b36:	095b      	lsrs	r3, r3, #5
 8006b38:	0119      	lsls	r1, r3, #4
 8006b3a:	68fa      	ldr	r2, [r7, #12]
 8006b3c:	4613      	mov	r3, r2
 8006b3e:	009b      	lsls	r3, r3, #2
 8006b40:	4413      	add	r3, r2
 8006b42:	009a      	lsls	r2, r3, #2
 8006b44:	441a      	add	r2, r3
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	009b      	lsls	r3, r3, #2
 8006b4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006b50:	4b1a      	ldr	r3, [pc, #104]	; (8006bbc <UART_SetConfig+0x118>)
 8006b52:	fba3 0302 	umull	r0, r3, r3, r2
 8006b56:	095b      	lsrs	r3, r3, #5
 8006b58:	2064      	movs	r0, #100	; 0x64
 8006b5a:	fb00 f303 	mul.w	r3, r0, r3
 8006b5e:	1ad3      	subs	r3, r2, r3
 8006b60:	011b      	lsls	r3, r3, #4
 8006b62:	3332      	adds	r3, #50	; 0x32
 8006b64:	4a15      	ldr	r2, [pc, #84]	; (8006bbc <UART_SetConfig+0x118>)
 8006b66:	fba2 2303 	umull	r2, r3, r2, r3
 8006b6a:	095b      	lsrs	r3, r3, #5
 8006b6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b70:	4419      	add	r1, r3
 8006b72:	68fa      	ldr	r2, [r7, #12]
 8006b74:	4613      	mov	r3, r2
 8006b76:	009b      	lsls	r3, r3, #2
 8006b78:	4413      	add	r3, r2
 8006b7a:	009a      	lsls	r2, r3, #2
 8006b7c:	441a      	add	r2, r3
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	009b      	lsls	r3, r3, #2
 8006b84:	fbb2 f2f3 	udiv	r2, r2, r3
 8006b88:	4b0c      	ldr	r3, [pc, #48]	; (8006bbc <UART_SetConfig+0x118>)
 8006b8a:	fba3 0302 	umull	r0, r3, r3, r2
 8006b8e:	095b      	lsrs	r3, r3, #5
 8006b90:	2064      	movs	r0, #100	; 0x64
 8006b92:	fb00 f303 	mul.w	r3, r0, r3
 8006b96:	1ad3      	subs	r3, r2, r3
 8006b98:	011b      	lsls	r3, r3, #4
 8006b9a:	3332      	adds	r3, #50	; 0x32
 8006b9c:	4a07      	ldr	r2, [pc, #28]	; (8006bbc <UART_SetConfig+0x118>)
 8006b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8006ba2:	095b      	lsrs	r3, r3, #5
 8006ba4:	f003 020f 	and.w	r2, r3, #15
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	440a      	add	r2, r1
 8006bae:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006bb0:	bf00      	nop
 8006bb2:	3710      	adds	r7, #16
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}
 8006bb8:	40013800 	.word	0x40013800
 8006bbc:	51eb851f 	.word	0x51eb851f

08006bc0 <pow>:
 8006bc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bc4:	4614      	mov	r4, r2
 8006bc6:	461d      	mov	r5, r3
 8006bc8:	4680      	mov	r8, r0
 8006bca:	4689      	mov	r9, r1
 8006bcc:	f000 f860 	bl	8006c90 <__ieee754_pow>
 8006bd0:	4622      	mov	r2, r4
 8006bd2:	4606      	mov	r6, r0
 8006bd4:	460f      	mov	r7, r1
 8006bd6:	462b      	mov	r3, r5
 8006bd8:	4620      	mov	r0, r4
 8006bda:	4629      	mov	r1, r5
 8006bdc:	f7f9 ff16 	bl	8000a0c <__aeabi_dcmpun>
 8006be0:	bbc8      	cbnz	r0, 8006c56 <pow+0x96>
 8006be2:	2200      	movs	r2, #0
 8006be4:	2300      	movs	r3, #0
 8006be6:	4640      	mov	r0, r8
 8006be8:	4649      	mov	r1, r9
 8006bea:	f7f9 fedd 	bl	80009a8 <__aeabi_dcmpeq>
 8006bee:	b1b8      	cbz	r0, 8006c20 <pow+0x60>
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	4620      	mov	r0, r4
 8006bf6:	4629      	mov	r1, r5
 8006bf8:	f7f9 fed6 	bl	80009a8 <__aeabi_dcmpeq>
 8006bfc:	2800      	cmp	r0, #0
 8006bfe:	d141      	bne.n	8006c84 <pow+0xc4>
 8006c00:	4620      	mov	r0, r4
 8006c02:	4629      	mov	r1, r5
 8006c04:	f000 fe39 	bl	800787a <finite>
 8006c08:	b328      	cbz	r0, 8006c56 <pow+0x96>
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	4620      	mov	r0, r4
 8006c10:	4629      	mov	r1, r5
 8006c12:	f7f9 fed3 	bl	80009bc <__aeabi_dcmplt>
 8006c16:	b1f0      	cbz	r0, 8006c56 <pow+0x96>
 8006c18:	f000 feb4 	bl	8007984 <__errno>
 8006c1c:	2322      	movs	r3, #34	; 0x22
 8006c1e:	e019      	b.n	8006c54 <pow+0x94>
 8006c20:	4630      	mov	r0, r6
 8006c22:	4639      	mov	r1, r7
 8006c24:	f000 fe29 	bl	800787a <finite>
 8006c28:	b9c8      	cbnz	r0, 8006c5e <pow+0x9e>
 8006c2a:	4640      	mov	r0, r8
 8006c2c:	4649      	mov	r1, r9
 8006c2e:	f000 fe24 	bl	800787a <finite>
 8006c32:	b1a0      	cbz	r0, 8006c5e <pow+0x9e>
 8006c34:	4620      	mov	r0, r4
 8006c36:	4629      	mov	r1, r5
 8006c38:	f000 fe1f 	bl	800787a <finite>
 8006c3c:	b178      	cbz	r0, 8006c5e <pow+0x9e>
 8006c3e:	4632      	mov	r2, r6
 8006c40:	463b      	mov	r3, r7
 8006c42:	4630      	mov	r0, r6
 8006c44:	4639      	mov	r1, r7
 8006c46:	f7f9 fee1 	bl	8000a0c <__aeabi_dcmpun>
 8006c4a:	2800      	cmp	r0, #0
 8006c4c:	d0e4      	beq.n	8006c18 <pow+0x58>
 8006c4e:	f000 fe99 	bl	8007984 <__errno>
 8006c52:	2321      	movs	r3, #33	; 0x21
 8006c54:	6003      	str	r3, [r0, #0]
 8006c56:	4630      	mov	r0, r6
 8006c58:	4639      	mov	r1, r7
 8006c5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c5e:	2200      	movs	r2, #0
 8006c60:	2300      	movs	r3, #0
 8006c62:	4630      	mov	r0, r6
 8006c64:	4639      	mov	r1, r7
 8006c66:	f7f9 fe9f 	bl	80009a8 <__aeabi_dcmpeq>
 8006c6a:	2800      	cmp	r0, #0
 8006c6c:	d0f3      	beq.n	8006c56 <pow+0x96>
 8006c6e:	4640      	mov	r0, r8
 8006c70:	4649      	mov	r1, r9
 8006c72:	f000 fe02 	bl	800787a <finite>
 8006c76:	2800      	cmp	r0, #0
 8006c78:	d0ed      	beq.n	8006c56 <pow+0x96>
 8006c7a:	4620      	mov	r0, r4
 8006c7c:	4629      	mov	r1, r5
 8006c7e:	f000 fdfc 	bl	800787a <finite>
 8006c82:	e7c8      	b.n	8006c16 <pow+0x56>
 8006c84:	2600      	movs	r6, #0
 8006c86:	4f01      	ldr	r7, [pc, #4]	; (8006c8c <pow+0xcc>)
 8006c88:	e7e5      	b.n	8006c56 <pow+0x96>
 8006c8a:	bf00      	nop
 8006c8c:	3ff00000 	.word	0x3ff00000

08006c90 <__ieee754_pow>:
 8006c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c94:	b093      	sub	sp, #76	; 0x4c
 8006c96:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006c9a:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 8006c9e:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8006ca2:	4689      	mov	r9, r1
 8006ca4:	ea56 0102 	orrs.w	r1, r6, r2
 8006ca8:	4680      	mov	r8, r0
 8006caa:	d111      	bne.n	8006cd0 <__ieee754_pow+0x40>
 8006cac:	1803      	adds	r3, r0, r0
 8006cae:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8006cb2:	4152      	adcs	r2, r2
 8006cb4:	4299      	cmp	r1, r3
 8006cb6:	4b82      	ldr	r3, [pc, #520]	; (8006ec0 <__ieee754_pow+0x230>)
 8006cb8:	4193      	sbcs	r3, r2
 8006cba:	f080 84b9 	bcs.w	8007630 <__ieee754_pow+0x9a0>
 8006cbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006cc2:	4640      	mov	r0, r8
 8006cc4:	4649      	mov	r1, r9
 8006cc6:	f7f9 fa51 	bl	800016c <__adddf3>
 8006cca:	4683      	mov	fp, r0
 8006ccc:	468c      	mov	ip, r1
 8006cce:	e06f      	b.n	8006db0 <__ieee754_pow+0x120>
 8006cd0:	4b7c      	ldr	r3, [pc, #496]	; (8006ec4 <__ieee754_pow+0x234>)
 8006cd2:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8006cd6:	429c      	cmp	r4, r3
 8006cd8:	464d      	mov	r5, r9
 8006cda:	4682      	mov	sl, r0
 8006cdc:	dc06      	bgt.n	8006cec <__ieee754_pow+0x5c>
 8006cde:	d101      	bne.n	8006ce4 <__ieee754_pow+0x54>
 8006ce0:	2800      	cmp	r0, #0
 8006ce2:	d1ec      	bne.n	8006cbe <__ieee754_pow+0x2e>
 8006ce4:	429e      	cmp	r6, r3
 8006ce6:	dc01      	bgt.n	8006cec <__ieee754_pow+0x5c>
 8006ce8:	d10f      	bne.n	8006d0a <__ieee754_pow+0x7a>
 8006cea:	b172      	cbz	r2, 8006d0a <__ieee754_pow+0x7a>
 8006cec:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8006cf0:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8006cf4:	ea55 050a 	orrs.w	r5, r5, sl
 8006cf8:	d1e1      	bne.n	8006cbe <__ieee754_pow+0x2e>
 8006cfa:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8006cfe:	18db      	adds	r3, r3, r3
 8006d00:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8006d04:	4152      	adcs	r2, r2
 8006d06:	429d      	cmp	r5, r3
 8006d08:	e7d5      	b.n	8006cb6 <__ieee754_pow+0x26>
 8006d0a:	2d00      	cmp	r5, #0
 8006d0c:	da39      	bge.n	8006d82 <__ieee754_pow+0xf2>
 8006d0e:	4b6e      	ldr	r3, [pc, #440]	; (8006ec8 <__ieee754_pow+0x238>)
 8006d10:	429e      	cmp	r6, r3
 8006d12:	dc52      	bgt.n	8006dba <__ieee754_pow+0x12a>
 8006d14:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8006d18:	429e      	cmp	r6, r3
 8006d1a:	f340 849c 	ble.w	8007656 <__ieee754_pow+0x9c6>
 8006d1e:	1533      	asrs	r3, r6, #20
 8006d20:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006d24:	2b14      	cmp	r3, #20
 8006d26:	dd0f      	ble.n	8006d48 <__ieee754_pow+0xb8>
 8006d28:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8006d2c:	fa22 f103 	lsr.w	r1, r2, r3
 8006d30:	fa01 f303 	lsl.w	r3, r1, r3
 8006d34:	4293      	cmp	r3, r2
 8006d36:	f040 848e 	bne.w	8007656 <__ieee754_pow+0x9c6>
 8006d3a:	f001 0101 	and.w	r1, r1, #1
 8006d3e:	f1c1 0302 	rsb	r3, r1, #2
 8006d42:	9300      	str	r3, [sp, #0]
 8006d44:	b182      	cbz	r2, 8006d68 <__ieee754_pow+0xd8>
 8006d46:	e05d      	b.n	8006e04 <__ieee754_pow+0x174>
 8006d48:	2a00      	cmp	r2, #0
 8006d4a:	d159      	bne.n	8006e00 <__ieee754_pow+0x170>
 8006d4c:	f1c3 0314 	rsb	r3, r3, #20
 8006d50:	fa46 f103 	asr.w	r1, r6, r3
 8006d54:	fa01 f303 	lsl.w	r3, r1, r3
 8006d58:	42b3      	cmp	r3, r6
 8006d5a:	f040 8479 	bne.w	8007650 <__ieee754_pow+0x9c0>
 8006d5e:	f001 0101 	and.w	r1, r1, #1
 8006d62:	f1c1 0302 	rsb	r3, r1, #2
 8006d66:	9300      	str	r3, [sp, #0]
 8006d68:	4b58      	ldr	r3, [pc, #352]	; (8006ecc <__ieee754_pow+0x23c>)
 8006d6a:	429e      	cmp	r6, r3
 8006d6c:	d132      	bne.n	8006dd4 <__ieee754_pow+0x144>
 8006d6e:	2f00      	cmp	r7, #0
 8006d70:	f280 846a 	bge.w	8007648 <__ieee754_pow+0x9b8>
 8006d74:	4642      	mov	r2, r8
 8006d76:	464b      	mov	r3, r9
 8006d78:	2000      	movs	r0, #0
 8006d7a:	4954      	ldr	r1, [pc, #336]	; (8006ecc <__ieee754_pow+0x23c>)
 8006d7c:	f7f9 fcd6 	bl	800072c <__aeabi_ddiv>
 8006d80:	e7a3      	b.n	8006cca <__ieee754_pow+0x3a>
 8006d82:	2300      	movs	r3, #0
 8006d84:	9300      	str	r3, [sp, #0]
 8006d86:	2a00      	cmp	r2, #0
 8006d88:	d13c      	bne.n	8006e04 <__ieee754_pow+0x174>
 8006d8a:	4b4e      	ldr	r3, [pc, #312]	; (8006ec4 <__ieee754_pow+0x234>)
 8006d8c:	429e      	cmp	r6, r3
 8006d8e:	d1eb      	bne.n	8006d68 <__ieee754_pow+0xd8>
 8006d90:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8006d94:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8006d98:	ea53 030a 	orrs.w	r3, r3, sl
 8006d9c:	f000 8448 	beq.w	8007630 <__ieee754_pow+0x9a0>
 8006da0:	4b4b      	ldr	r3, [pc, #300]	; (8006ed0 <__ieee754_pow+0x240>)
 8006da2:	429c      	cmp	r4, r3
 8006da4:	dd0b      	ble.n	8006dbe <__ieee754_pow+0x12e>
 8006da6:	2f00      	cmp	r7, #0
 8006da8:	f2c0 8448 	blt.w	800763c <__ieee754_pow+0x9ac>
 8006dac:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8006db0:	4658      	mov	r0, fp
 8006db2:	4661      	mov	r1, ip
 8006db4:	b013      	add	sp, #76	; 0x4c
 8006db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dba:	2302      	movs	r3, #2
 8006dbc:	e7e2      	b.n	8006d84 <__ieee754_pow+0xf4>
 8006dbe:	2f00      	cmp	r7, #0
 8006dc0:	f04f 0b00 	mov.w	fp, #0
 8006dc4:	f04f 0c00 	mov.w	ip, #0
 8006dc8:	daf2      	bge.n	8006db0 <__ieee754_pow+0x120>
 8006dca:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8006dce:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8006dd2:	e7ed      	b.n	8006db0 <__ieee754_pow+0x120>
 8006dd4:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8006dd8:	d106      	bne.n	8006de8 <__ieee754_pow+0x158>
 8006dda:	4642      	mov	r2, r8
 8006ddc:	464b      	mov	r3, r9
 8006dde:	4640      	mov	r0, r8
 8006de0:	4649      	mov	r1, r9
 8006de2:	f7f9 fb79 	bl	80004d8 <__aeabi_dmul>
 8006de6:	e770      	b.n	8006cca <__ieee754_pow+0x3a>
 8006de8:	4b3a      	ldr	r3, [pc, #232]	; (8006ed4 <__ieee754_pow+0x244>)
 8006dea:	429f      	cmp	r7, r3
 8006dec:	d10a      	bne.n	8006e04 <__ieee754_pow+0x174>
 8006dee:	2d00      	cmp	r5, #0
 8006df0:	db08      	blt.n	8006e04 <__ieee754_pow+0x174>
 8006df2:	4640      	mov	r0, r8
 8006df4:	4649      	mov	r1, r9
 8006df6:	b013      	add	sp, #76	; 0x4c
 8006df8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dfc:	f000 bc5e 	b.w	80076bc <__ieee754_sqrt>
 8006e00:	2300      	movs	r3, #0
 8006e02:	9300      	str	r3, [sp, #0]
 8006e04:	4640      	mov	r0, r8
 8006e06:	4649      	mov	r1, r9
 8006e08:	f000 fd34 	bl	8007874 <fabs>
 8006e0c:	4683      	mov	fp, r0
 8006e0e:	468c      	mov	ip, r1
 8006e10:	f1ba 0f00 	cmp.w	sl, #0
 8006e14:	d128      	bne.n	8006e68 <__ieee754_pow+0x1d8>
 8006e16:	b124      	cbz	r4, 8006e22 <__ieee754_pow+0x192>
 8006e18:	4b2c      	ldr	r3, [pc, #176]	; (8006ecc <__ieee754_pow+0x23c>)
 8006e1a:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	d122      	bne.n	8006e68 <__ieee754_pow+0x1d8>
 8006e22:	2f00      	cmp	r7, #0
 8006e24:	da07      	bge.n	8006e36 <__ieee754_pow+0x1a6>
 8006e26:	465a      	mov	r2, fp
 8006e28:	4663      	mov	r3, ip
 8006e2a:	2000      	movs	r0, #0
 8006e2c:	4927      	ldr	r1, [pc, #156]	; (8006ecc <__ieee754_pow+0x23c>)
 8006e2e:	f7f9 fc7d 	bl	800072c <__aeabi_ddiv>
 8006e32:	4683      	mov	fp, r0
 8006e34:	468c      	mov	ip, r1
 8006e36:	2d00      	cmp	r5, #0
 8006e38:	daba      	bge.n	8006db0 <__ieee754_pow+0x120>
 8006e3a:	9b00      	ldr	r3, [sp, #0]
 8006e3c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006e40:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006e44:	4323      	orrs	r3, r4
 8006e46:	d108      	bne.n	8006e5a <__ieee754_pow+0x1ca>
 8006e48:	465a      	mov	r2, fp
 8006e4a:	4663      	mov	r3, ip
 8006e4c:	4658      	mov	r0, fp
 8006e4e:	4661      	mov	r1, ip
 8006e50:	f7f9 f98a 	bl	8000168 <__aeabi_dsub>
 8006e54:	4602      	mov	r2, r0
 8006e56:	460b      	mov	r3, r1
 8006e58:	e790      	b.n	8006d7c <__ieee754_pow+0xec>
 8006e5a:	9b00      	ldr	r3, [sp, #0]
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d1a7      	bne.n	8006db0 <__ieee754_pow+0x120>
 8006e60:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8006e64:	469c      	mov	ip, r3
 8006e66:	e7a3      	b.n	8006db0 <__ieee754_pow+0x120>
 8006e68:	0feb      	lsrs	r3, r5, #31
 8006e6a:	3b01      	subs	r3, #1
 8006e6c:	930c      	str	r3, [sp, #48]	; 0x30
 8006e6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006e70:	9b00      	ldr	r3, [sp, #0]
 8006e72:	4313      	orrs	r3, r2
 8006e74:	d104      	bne.n	8006e80 <__ieee754_pow+0x1f0>
 8006e76:	4642      	mov	r2, r8
 8006e78:	464b      	mov	r3, r9
 8006e7a:	4640      	mov	r0, r8
 8006e7c:	4649      	mov	r1, r9
 8006e7e:	e7e7      	b.n	8006e50 <__ieee754_pow+0x1c0>
 8006e80:	4b15      	ldr	r3, [pc, #84]	; (8006ed8 <__ieee754_pow+0x248>)
 8006e82:	429e      	cmp	r6, r3
 8006e84:	f340 80f6 	ble.w	8007074 <__ieee754_pow+0x3e4>
 8006e88:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8006e8c:	429e      	cmp	r6, r3
 8006e8e:	4b10      	ldr	r3, [pc, #64]	; (8006ed0 <__ieee754_pow+0x240>)
 8006e90:	dd09      	ble.n	8006ea6 <__ieee754_pow+0x216>
 8006e92:	429c      	cmp	r4, r3
 8006e94:	dc0c      	bgt.n	8006eb0 <__ieee754_pow+0x220>
 8006e96:	2f00      	cmp	r7, #0
 8006e98:	da0c      	bge.n	8006eb4 <__ieee754_pow+0x224>
 8006e9a:	2000      	movs	r0, #0
 8006e9c:	b013      	add	sp, #76	; 0x4c
 8006e9e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ea2:	f000 bce2 	b.w	800786a <__math_oflow>
 8006ea6:	429c      	cmp	r4, r3
 8006ea8:	dbf5      	blt.n	8006e96 <__ieee754_pow+0x206>
 8006eaa:	4b08      	ldr	r3, [pc, #32]	; (8006ecc <__ieee754_pow+0x23c>)
 8006eac:	429c      	cmp	r4, r3
 8006eae:	dd15      	ble.n	8006edc <__ieee754_pow+0x24c>
 8006eb0:	2f00      	cmp	r7, #0
 8006eb2:	dcf2      	bgt.n	8006e9a <__ieee754_pow+0x20a>
 8006eb4:	2000      	movs	r0, #0
 8006eb6:	b013      	add	sp, #76	; 0x4c
 8006eb8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ebc:	f000 bcd0 	b.w	8007860 <__math_uflow>
 8006ec0:	fff00000 	.word	0xfff00000
 8006ec4:	7ff00000 	.word	0x7ff00000
 8006ec8:	433fffff 	.word	0x433fffff
 8006ecc:	3ff00000 	.word	0x3ff00000
 8006ed0:	3fefffff 	.word	0x3fefffff
 8006ed4:	3fe00000 	.word	0x3fe00000
 8006ed8:	41e00000 	.word	0x41e00000
 8006edc:	4661      	mov	r1, ip
 8006ede:	2200      	movs	r2, #0
 8006ee0:	4658      	mov	r0, fp
 8006ee2:	4b5f      	ldr	r3, [pc, #380]	; (8007060 <__ieee754_pow+0x3d0>)
 8006ee4:	f7f9 f940 	bl	8000168 <__aeabi_dsub>
 8006ee8:	a355      	add	r3, pc, #340	; (adr r3, 8007040 <__ieee754_pow+0x3b0>)
 8006eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eee:	4604      	mov	r4, r0
 8006ef0:	460d      	mov	r5, r1
 8006ef2:	f7f9 faf1 	bl	80004d8 <__aeabi_dmul>
 8006ef6:	a354      	add	r3, pc, #336	; (adr r3, 8007048 <__ieee754_pow+0x3b8>)
 8006ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006efc:	4606      	mov	r6, r0
 8006efe:	460f      	mov	r7, r1
 8006f00:	4620      	mov	r0, r4
 8006f02:	4629      	mov	r1, r5
 8006f04:	f7f9 fae8 	bl	80004d8 <__aeabi_dmul>
 8006f08:	2200      	movs	r2, #0
 8006f0a:	4682      	mov	sl, r0
 8006f0c:	468b      	mov	fp, r1
 8006f0e:	4620      	mov	r0, r4
 8006f10:	4629      	mov	r1, r5
 8006f12:	4b54      	ldr	r3, [pc, #336]	; (8007064 <__ieee754_pow+0x3d4>)
 8006f14:	f7f9 fae0 	bl	80004d8 <__aeabi_dmul>
 8006f18:	4602      	mov	r2, r0
 8006f1a:	460b      	mov	r3, r1
 8006f1c:	a14c      	add	r1, pc, #304	; (adr r1, 8007050 <__ieee754_pow+0x3c0>)
 8006f1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f22:	f7f9 f921 	bl	8000168 <__aeabi_dsub>
 8006f26:	4622      	mov	r2, r4
 8006f28:	462b      	mov	r3, r5
 8006f2a:	f7f9 fad5 	bl	80004d8 <__aeabi_dmul>
 8006f2e:	4602      	mov	r2, r0
 8006f30:	460b      	mov	r3, r1
 8006f32:	2000      	movs	r0, #0
 8006f34:	494c      	ldr	r1, [pc, #304]	; (8007068 <__ieee754_pow+0x3d8>)
 8006f36:	f7f9 f917 	bl	8000168 <__aeabi_dsub>
 8006f3a:	4622      	mov	r2, r4
 8006f3c:	462b      	mov	r3, r5
 8006f3e:	4680      	mov	r8, r0
 8006f40:	4689      	mov	r9, r1
 8006f42:	4620      	mov	r0, r4
 8006f44:	4629      	mov	r1, r5
 8006f46:	f7f9 fac7 	bl	80004d8 <__aeabi_dmul>
 8006f4a:	4602      	mov	r2, r0
 8006f4c:	460b      	mov	r3, r1
 8006f4e:	4640      	mov	r0, r8
 8006f50:	4649      	mov	r1, r9
 8006f52:	f7f9 fac1 	bl	80004d8 <__aeabi_dmul>
 8006f56:	a340      	add	r3, pc, #256	; (adr r3, 8007058 <__ieee754_pow+0x3c8>)
 8006f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f5c:	f7f9 fabc 	bl	80004d8 <__aeabi_dmul>
 8006f60:	4602      	mov	r2, r0
 8006f62:	460b      	mov	r3, r1
 8006f64:	4650      	mov	r0, sl
 8006f66:	4659      	mov	r1, fp
 8006f68:	f7f9 f8fe 	bl	8000168 <__aeabi_dsub>
 8006f6c:	f04f 0a00 	mov.w	sl, #0
 8006f70:	4602      	mov	r2, r0
 8006f72:	460b      	mov	r3, r1
 8006f74:	4604      	mov	r4, r0
 8006f76:	460d      	mov	r5, r1
 8006f78:	4630      	mov	r0, r6
 8006f7a:	4639      	mov	r1, r7
 8006f7c:	f7f9 f8f6 	bl	800016c <__adddf3>
 8006f80:	4632      	mov	r2, r6
 8006f82:	463b      	mov	r3, r7
 8006f84:	4650      	mov	r0, sl
 8006f86:	468b      	mov	fp, r1
 8006f88:	f7f9 f8ee 	bl	8000168 <__aeabi_dsub>
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	460b      	mov	r3, r1
 8006f90:	4620      	mov	r0, r4
 8006f92:	4629      	mov	r1, r5
 8006f94:	f7f9 f8e8 	bl	8000168 <__aeabi_dsub>
 8006f98:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006f9c:	9b00      	ldr	r3, [sp, #0]
 8006f9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006fa0:	3b01      	subs	r3, #1
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	f04f 0600 	mov.w	r6, #0
 8006fa8:	f04f 0200 	mov.w	r2, #0
 8006fac:	bf0c      	ite	eq
 8006fae:	4b2f      	ldreq	r3, [pc, #188]	; (800706c <__ieee754_pow+0x3dc>)
 8006fb0:	4b2b      	ldrne	r3, [pc, #172]	; (8007060 <__ieee754_pow+0x3d0>)
 8006fb2:	4604      	mov	r4, r0
 8006fb4:	460d      	mov	r5, r1
 8006fb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006fba:	e9cd 2300 	strd	r2, r3, [sp]
 8006fbe:	4632      	mov	r2, r6
 8006fc0:	463b      	mov	r3, r7
 8006fc2:	f7f9 f8d1 	bl	8000168 <__aeabi_dsub>
 8006fc6:	4652      	mov	r2, sl
 8006fc8:	465b      	mov	r3, fp
 8006fca:	f7f9 fa85 	bl	80004d8 <__aeabi_dmul>
 8006fce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006fd2:	4680      	mov	r8, r0
 8006fd4:	4689      	mov	r9, r1
 8006fd6:	4620      	mov	r0, r4
 8006fd8:	4629      	mov	r1, r5
 8006fda:	f7f9 fa7d 	bl	80004d8 <__aeabi_dmul>
 8006fde:	4602      	mov	r2, r0
 8006fe0:	460b      	mov	r3, r1
 8006fe2:	4640      	mov	r0, r8
 8006fe4:	4649      	mov	r1, r9
 8006fe6:	f7f9 f8c1 	bl	800016c <__adddf3>
 8006fea:	4632      	mov	r2, r6
 8006fec:	463b      	mov	r3, r7
 8006fee:	4680      	mov	r8, r0
 8006ff0:	4689      	mov	r9, r1
 8006ff2:	4650      	mov	r0, sl
 8006ff4:	4659      	mov	r1, fp
 8006ff6:	f7f9 fa6f 	bl	80004d8 <__aeabi_dmul>
 8006ffa:	4604      	mov	r4, r0
 8006ffc:	460d      	mov	r5, r1
 8006ffe:	460b      	mov	r3, r1
 8007000:	4602      	mov	r2, r0
 8007002:	4649      	mov	r1, r9
 8007004:	4640      	mov	r0, r8
 8007006:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800700a:	f7f9 f8af 	bl	800016c <__adddf3>
 800700e:	4b18      	ldr	r3, [pc, #96]	; (8007070 <__ieee754_pow+0x3e0>)
 8007010:	4682      	mov	sl, r0
 8007012:	4299      	cmp	r1, r3
 8007014:	460f      	mov	r7, r1
 8007016:	460e      	mov	r6, r1
 8007018:	f340 82e5 	ble.w	80075e6 <__ieee754_pow+0x956>
 800701c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8007020:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8007024:	4303      	orrs	r3, r0
 8007026:	f000 81df 	beq.w	80073e8 <__ieee754_pow+0x758>
 800702a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800702e:	2200      	movs	r2, #0
 8007030:	2300      	movs	r3, #0
 8007032:	f7f9 fcc3 	bl	80009bc <__aeabi_dcmplt>
 8007036:	3800      	subs	r0, #0
 8007038:	bf18      	it	ne
 800703a:	2001      	movne	r0, #1
 800703c:	e72e      	b.n	8006e9c <__ieee754_pow+0x20c>
 800703e:	bf00      	nop
 8007040:	60000000 	.word	0x60000000
 8007044:	3ff71547 	.word	0x3ff71547
 8007048:	f85ddf44 	.word	0xf85ddf44
 800704c:	3e54ae0b 	.word	0x3e54ae0b
 8007050:	55555555 	.word	0x55555555
 8007054:	3fd55555 	.word	0x3fd55555
 8007058:	652b82fe 	.word	0x652b82fe
 800705c:	3ff71547 	.word	0x3ff71547
 8007060:	3ff00000 	.word	0x3ff00000
 8007064:	3fd00000 	.word	0x3fd00000
 8007068:	3fe00000 	.word	0x3fe00000
 800706c:	bff00000 	.word	0xbff00000
 8007070:	408fffff 	.word	0x408fffff
 8007074:	4bd2      	ldr	r3, [pc, #840]	; (80073c0 <__ieee754_pow+0x730>)
 8007076:	2200      	movs	r2, #0
 8007078:	402b      	ands	r3, r5
 800707a:	b943      	cbnz	r3, 800708e <__ieee754_pow+0x3fe>
 800707c:	4658      	mov	r0, fp
 800707e:	4661      	mov	r1, ip
 8007080:	4bd0      	ldr	r3, [pc, #832]	; (80073c4 <__ieee754_pow+0x734>)
 8007082:	f7f9 fa29 	bl	80004d8 <__aeabi_dmul>
 8007086:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800708a:	4683      	mov	fp, r0
 800708c:	460c      	mov	r4, r1
 800708e:	1523      	asrs	r3, r4, #20
 8007090:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007094:	4413      	add	r3, r2
 8007096:	930b      	str	r3, [sp, #44]	; 0x2c
 8007098:	4bcb      	ldr	r3, [pc, #812]	; (80073c8 <__ieee754_pow+0x738>)
 800709a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800709e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80070a2:	429c      	cmp	r4, r3
 80070a4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80070a8:	dd08      	ble.n	80070bc <__ieee754_pow+0x42c>
 80070aa:	4bc8      	ldr	r3, [pc, #800]	; (80073cc <__ieee754_pow+0x73c>)
 80070ac:	429c      	cmp	r4, r3
 80070ae:	f340 8199 	ble.w	80073e4 <__ieee754_pow+0x754>
 80070b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070b4:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80070b8:	3301      	adds	r3, #1
 80070ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80070bc:	2600      	movs	r6, #0
 80070be:	00f3      	lsls	r3, r6, #3
 80070c0:	930d      	str	r3, [sp, #52]	; 0x34
 80070c2:	4bc3      	ldr	r3, [pc, #780]	; (80073d0 <__ieee754_pow+0x740>)
 80070c4:	4658      	mov	r0, fp
 80070c6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80070ca:	e9d3 3400 	ldrd	r3, r4, [r3]
 80070ce:	4629      	mov	r1, r5
 80070d0:	461a      	mov	r2, r3
 80070d2:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80070d6:	4623      	mov	r3, r4
 80070d8:	f7f9 f846 	bl	8000168 <__aeabi_dsub>
 80070dc:	46da      	mov	sl, fp
 80070de:	462b      	mov	r3, r5
 80070e0:	4652      	mov	r2, sl
 80070e2:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80070e6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80070ea:	f7f9 f83f 	bl	800016c <__adddf3>
 80070ee:	4602      	mov	r2, r0
 80070f0:	460b      	mov	r3, r1
 80070f2:	2000      	movs	r0, #0
 80070f4:	49b7      	ldr	r1, [pc, #732]	; (80073d4 <__ieee754_pow+0x744>)
 80070f6:	f7f9 fb19 	bl	800072c <__aeabi_ddiv>
 80070fa:	4602      	mov	r2, r0
 80070fc:	460b      	mov	r3, r1
 80070fe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007102:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007106:	f7f9 f9e7 	bl	80004d8 <__aeabi_dmul>
 800710a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800710e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8007112:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007116:	2300      	movs	r3, #0
 8007118:	2200      	movs	r2, #0
 800711a:	46ab      	mov	fp, r5
 800711c:	106d      	asrs	r5, r5, #1
 800711e:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007122:	9304      	str	r3, [sp, #16]
 8007124:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8007128:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800712c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8007130:	4640      	mov	r0, r8
 8007132:	4649      	mov	r1, r9
 8007134:	4614      	mov	r4, r2
 8007136:	461d      	mov	r5, r3
 8007138:	f7f9 f9ce 	bl	80004d8 <__aeabi_dmul>
 800713c:	4602      	mov	r2, r0
 800713e:	460b      	mov	r3, r1
 8007140:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007144:	f7f9 f810 	bl	8000168 <__aeabi_dsub>
 8007148:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800714c:	4606      	mov	r6, r0
 800714e:	460f      	mov	r7, r1
 8007150:	4620      	mov	r0, r4
 8007152:	4629      	mov	r1, r5
 8007154:	f7f9 f808 	bl	8000168 <__aeabi_dsub>
 8007158:	4602      	mov	r2, r0
 800715a:	460b      	mov	r3, r1
 800715c:	4650      	mov	r0, sl
 800715e:	4659      	mov	r1, fp
 8007160:	f7f9 f802 	bl	8000168 <__aeabi_dsub>
 8007164:	4642      	mov	r2, r8
 8007166:	464b      	mov	r3, r9
 8007168:	f7f9 f9b6 	bl	80004d8 <__aeabi_dmul>
 800716c:	4602      	mov	r2, r0
 800716e:	460b      	mov	r3, r1
 8007170:	4630      	mov	r0, r6
 8007172:	4639      	mov	r1, r7
 8007174:	f7f8 fff8 	bl	8000168 <__aeabi_dsub>
 8007178:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800717c:	f7f9 f9ac 	bl	80004d8 <__aeabi_dmul>
 8007180:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007184:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007188:	4610      	mov	r0, r2
 800718a:	4619      	mov	r1, r3
 800718c:	f7f9 f9a4 	bl	80004d8 <__aeabi_dmul>
 8007190:	a379      	add	r3, pc, #484	; (adr r3, 8007378 <__ieee754_pow+0x6e8>)
 8007192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007196:	4604      	mov	r4, r0
 8007198:	460d      	mov	r5, r1
 800719a:	f7f9 f99d 	bl	80004d8 <__aeabi_dmul>
 800719e:	a378      	add	r3, pc, #480	; (adr r3, 8007380 <__ieee754_pow+0x6f0>)
 80071a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071a4:	f7f8 ffe2 	bl	800016c <__adddf3>
 80071a8:	4622      	mov	r2, r4
 80071aa:	462b      	mov	r3, r5
 80071ac:	f7f9 f994 	bl	80004d8 <__aeabi_dmul>
 80071b0:	a375      	add	r3, pc, #468	; (adr r3, 8007388 <__ieee754_pow+0x6f8>)
 80071b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b6:	f7f8 ffd9 	bl	800016c <__adddf3>
 80071ba:	4622      	mov	r2, r4
 80071bc:	462b      	mov	r3, r5
 80071be:	f7f9 f98b 	bl	80004d8 <__aeabi_dmul>
 80071c2:	a373      	add	r3, pc, #460	; (adr r3, 8007390 <__ieee754_pow+0x700>)
 80071c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c8:	f7f8 ffd0 	bl	800016c <__adddf3>
 80071cc:	4622      	mov	r2, r4
 80071ce:	462b      	mov	r3, r5
 80071d0:	f7f9 f982 	bl	80004d8 <__aeabi_dmul>
 80071d4:	a370      	add	r3, pc, #448	; (adr r3, 8007398 <__ieee754_pow+0x708>)
 80071d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071da:	f7f8 ffc7 	bl	800016c <__adddf3>
 80071de:	4622      	mov	r2, r4
 80071e0:	462b      	mov	r3, r5
 80071e2:	f7f9 f979 	bl	80004d8 <__aeabi_dmul>
 80071e6:	a36e      	add	r3, pc, #440	; (adr r3, 80073a0 <__ieee754_pow+0x710>)
 80071e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ec:	f7f8 ffbe 	bl	800016c <__adddf3>
 80071f0:	4622      	mov	r2, r4
 80071f2:	4606      	mov	r6, r0
 80071f4:	460f      	mov	r7, r1
 80071f6:	462b      	mov	r3, r5
 80071f8:	4620      	mov	r0, r4
 80071fa:	4629      	mov	r1, r5
 80071fc:	f7f9 f96c 	bl	80004d8 <__aeabi_dmul>
 8007200:	4602      	mov	r2, r0
 8007202:	460b      	mov	r3, r1
 8007204:	4630      	mov	r0, r6
 8007206:	4639      	mov	r1, r7
 8007208:	f7f9 f966 	bl	80004d8 <__aeabi_dmul>
 800720c:	4604      	mov	r4, r0
 800720e:	460d      	mov	r5, r1
 8007210:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007214:	4642      	mov	r2, r8
 8007216:	464b      	mov	r3, r9
 8007218:	f7f8 ffa8 	bl	800016c <__adddf3>
 800721c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007220:	f7f9 f95a 	bl	80004d8 <__aeabi_dmul>
 8007224:	4622      	mov	r2, r4
 8007226:	462b      	mov	r3, r5
 8007228:	f7f8 ffa0 	bl	800016c <__adddf3>
 800722c:	4642      	mov	r2, r8
 800722e:	4606      	mov	r6, r0
 8007230:	460f      	mov	r7, r1
 8007232:	464b      	mov	r3, r9
 8007234:	4640      	mov	r0, r8
 8007236:	4649      	mov	r1, r9
 8007238:	f7f9 f94e 	bl	80004d8 <__aeabi_dmul>
 800723c:	2200      	movs	r2, #0
 800723e:	4b66      	ldr	r3, [pc, #408]	; (80073d8 <__ieee754_pow+0x748>)
 8007240:	4682      	mov	sl, r0
 8007242:	468b      	mov	fp, r1
 8007244:	f7f8 ff92 	bl	800016c <__adddf3>
 8007248:	4632      	mov	r2, r6
 800724a:	463b      	mov	r3, r7
 800724c:	f7f8 ff8e 	bl	800016c <__adddf3>
 8007250:	2400      	movs	r4, #0
 8007252:	460d      	mov	r5, r1
 8007254:	4622      	mov	r2, r4
 8007256:	460b      	mov	r3, r1
 8007258:	4640      	mov	r0, r8
 800725a:	4649      	mov	r1, r9
 800725c:	f7f9 f93c 	bl	80004d8 <__aeabi_dmul>
 8007260:	2200      	movs	r2, #0
 8007262:	4680      	mov	r8, r0
 8007264:	4689      	mov	r9, r1
 8007266:	4620      	mov	r0, r4
 8007268:	4629      	mov	r1, r5
 800726a:	4b5b      	ldr	r3, [pc, #364]	; (80073d8 <__ieee754_pow+0x748>)
 800726c:	f7f8 ff7c 	bl	8000168 <__aeabi_dsub>
 8007270:	4652      	mov	r2, sl
 8007272:	465b      	mov	r3, fp
 8007274:	f7f8 ff78 	bl	8000168 <__aeabi_dsub>
 8007278:	4602      	mov	r2, r0
 800727a:	460b      	mov	r3, r1
 800727c:	4630      	mov	r0, r6
 800727e:	4639      	mov	r1, r7
 8007280:	f7f8 ff72 	bl	8000168 <__aeabi_dsub>
 8007284:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007288:	f7f9 f926 	bl	80004d8 <__aeabi_dmul>
 800728c:	4622      	mov	r2, r4
 800728e:	4606      	mov	r6, r0
 8007290:	460f      	mov	r7, r1
 8007292:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007296:	462b      	mov	r3, r5
 8007298:	f7f9 f91e 	bl	80004d8 <__aeabi_dmul>
 800729c:	4602      	mov	r2, r0
 800729e:	460b      	mov	r3, r1
 80072a0:	4630      	mov	r0, r6
 80072a2:	4639      	mov	r1, r7
 80072a4:	f7f8 ff62 	bl	800016c <__adddf3>
 80072a8:	2400      	movs	r4, #0
 80072aa:	4606      	mov	r6, r0
 80072ac:	460f      	mov	r7, r1
 80072ae:	4602      	mov	r2, r0
 80072b0:	460b      	mov	r3, r1
 80072b2:	4640      	mov	r0, r8
 80072b4:	4649      	mov	r1, r9
 80072b6:	f7f8 ff59 	bl	800016c <__adddf3>
 80072ba:	a33b      	add	r3, pc, #236	; (adr r3, 80073a8 <__ieee754_pow+0x718>)
 80072bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072c0:	4620      	mov	r0, r4
 80072c2:	460d      	mov	r5, r1
 80072c4:	f7f9 f908 	bl	80004d8 <__aeabi_dmul>
 80072c8:	4642      	mov	r2, r8
 80072ca:	464b      	mov	r3, r9
 80072cc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80072d0:	4620      	mov	r0, r4
 80072d2:	4629      	mov	r1, r5
 80072d4:	f7f8 ff48 	bl	8000168 <__aeabi_dsub>
 80072d8:	4602      	mov	r2, r0
 80072da:	460b      	mov	r3, r1
 80072dc:	4630      	mov	r0, r6
 80072de:	4639      	mov	r1, r7
 80072e0:	f7f8 ff42 	bl	8000168 <__aeabi_dsub>
 80072e4:	a332      	add	r3, pc, #200	; (adr r3, 80073b0 <__ieee754_pow+0x720>)
 80072e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ea:	f7f9 f8f5 	bl	80004d8 <__aeabi_dmul>
 80072ee:	a332      	add	r3, pc, #200	; (adr r3, 80073b8 <__ieee754_pow+0x728>)
 80072f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f4:	4606      	mov	r6, r0
 80072f6:	460f      	mov	r7, r1
 80072f8:	4620      	mov	r0, r4
 80072fa:	4629      	mov	r1, r5
 80072fc:	f7f9 f8ec 	bl	80004d8 <__aeabi_dmul>
 8007300:	4602      	mov	r2, r0
 8007302:	460b      	mov	r3, r1
 8007304:	4630      	mov	r0, r6
 8007306:	4639      	mov	r1, r7
 8007308:	f7f8 ff30 	bl	800016c <__adddf3>
 800730c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800730e:	4b33      	ldr	r3, [pc, #204]	; (80073dc <__ieee754_pow+0x74c>)
 8007310:	f04f 0a00 	mov.w	sl, #0
 8007314:	4413      	add	r3, r2
 8007316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800731a:	f7f8 ff27 	bl	800016c <__adddf3>
 800731e:	4680      	mov	r8, r0
 8007320:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007322:	4689      	mov	r9, r1
 8007324:	f7f9 f86e 	bl	8000404 <__aeabi_i2d>
 8007328:	4604      	mov	r4, r0
 800732a:	460d      	mov	r5, r1
 800732c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800732e:	4b2c      	ldr	r3, [pc, #176]	; (80073e0 <__ieee754_pow+0x750>)
 8007330:	4413      	add	r3, r2
 8007332:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007336:	4642      	mov	r2, r8
 8007338:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800733c:	464b      	mov	r3, r9
 800733e:	f7f8 ff15 	bl	800016c <__adddf3>
 8007342:	4632      	mov	r2, r6
 8007344:	463b      	mov	r3, r7
 8007346:	f7f8 ff11 	bl	800016c <__adddf3>
 800734a:	4622      	mov	r2, r4
 800734c:	462b      	mov	r3, r5
 800734e:	f7f8 ff0d 	bl	800016c <__adddf3>
 8007352:	4622      	mov	r2, r4
 8007354:	462b      	mov	r3, r5
 8007356:	4650      	mov	r0, sl
 8007358:	468b      	mov	fp, r1
 800735a:	f7f8 ff05 	bl	8000168 <__aeabi_dsub>
 800735e:	4632      	mov	r2, r6
 8007360:	463b      	mov	r3, r7
 8007362:	f7f8 ff01 	bl	8000168 <__aeabi_dsub>
 8007366:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800736a:	f7f8 fefd 	bl	8000168 <__aeabi_dsub>
 800736e:	4602      	mov	r2, r0
 8007370:	460b      	mov	r3, r1
 8007372:	4640      	mov	r0, r8
 8007374:	4649      	mov	r1, r9
 8007376:	e60d      	b.n	8006f94 <__ieee754_pow+0x304>
 8007378:	4a454eef 	.word	0x4a454eef
 800737c:	3fca7e28 	.word	0x3fca7e28
 8007380:	93c9db65 	.word	0x93c9db65
 8007384:	3fcd864a 	.word	0x3fcd864a
 8007388:	a91d4101 	.word	0xa91d4101
 800738c:	3fd17460 	.word	0x3fd17460
 8007390:	518f264d 	.word	0x518f264d
 8007394:	3fd55555 	.word	0x3fd55555
 8007398:	db6fabff 	.word	0xdb6fabff
 800739c:	3fdb6db6 	.word	0x3fdb6db6
 80073a0:	33333303 	.word	0x33333303
 80073a4:	3fe33333 	.word	0x3fe33333
 80073a8:	e0000000 	.word	0xe0000000
 80073ac:	3feec709 	.word	0x3feec709
 80073b0:	dc3a03fd 	.word	0xdc3a03fd
 80073b4:	3feec709 	.word	0x3feec709
 80073b8:	145b01f5 	.word	0x145b01f5
 80073bc:	be3e2fe0 	.word	0xbe3e2fe0
 80073c0:	7ff00000 	.word	0x7ff00000
 80073c4:	43400000 	.word	0x43400000
 80073c8:	0003988e 	.word	0x0003988e
 80073cc:	000bb679 	.word	0x000bb679
 80073d0:	08007a28 	.word	0x08007a28
 80073d4:	3ff00000 	.word	0x3ff00000
 80073d8:	40080000 	.word	0x40080000
 80073dc:	08007a48 	.word	0x08007a48
 80073e0:	08007a38 	.word	0x08007a38
 80073e4:	2601      	movs	r6, #1
 80073e6:	e66a      	b.n	80070be <__ieee754_pow+0x42e>
 80073e8:	a39d      	add	r3, pc, #628	; (adr r3, 8007660 <__ieee754_pow+0x9d0>)
 80073ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ee:	4640      	mov	r0, r8
 80073f0:	4649      	mov	r1, r9
 80073f2:	f7f8 febb 	bl	800016c <__adddf3>
 80073f6:	4622      	mov	r2, r4
 80073f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80073fc:	462b      	mov	r3, r5
 80073fe:	4650      	mov	r0, sl
 8007400:	4639      	mov	r1, r7
 8007402:	f7f8 feb1 	bl	8000168 <__aeabi_dsub>
 8007406:	4602      	mov	r2, r0
 8007408:	460b      	mov	r3, r1
 800740a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800740e:	f7f9 faf3 	bl	80009f8 <__aeabi_dcmpgt>
 8007412:	2800      	cmp	r0, #0
 8007414:	f47f ae09 	bne.w	800702a <__ieee754_pow+0x39a>
 8007418:	4aa3      	ldr	r2, [pc, #652]	; (80076a8 <__ieee754_pow+0xa18>)
 800741a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800741e:	4293      	cmp	r3, r2
 8007420:	f340 8101 	ble.w	8007626 <__ieee754_pow+0x996>
 8007424:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8007428:	2000      	movs	r0, #0
 800742a:	151b      	asrs	r3, r3, #20
 800742c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8007430:	fa4a f303 	asr.w	r3, sl, r3
 8007434:	4433      	add	r3, r6
 8007436:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800743a:	4f9c      	ldr	r7, [pc, #624]	; (80076ac <__ieee754_pow+0xa1c>)
 800743c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8007440:	4117      	asrs	r7, r2
 8007442:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8007446:	ea23 0107 	bic.w	r1, r3, r7
 800744a:	f1c2 0214 	rsb	r2, r2, #20
 800744e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8007452:	460b      	mov	r3, r1
 8007454:	fa4a fa02 	asr.w	sl, sl, r2
 8007458:	2e00      	cmp	r6, #0
 800745a:	4602      	mov	r2, r0
 800745c:	4629      	mov	r1, r5
 800745e:	4620      	mov	r0, r4
 8007460:	bfb8      	it	lt
 8007462:	f1ca 0a00 	rsblt	sl, sl, #0
 8007466:	f7f8 fe7f 	bl	8000168 <__aeabi_dsub>
 800746a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800746e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007472:	2400      	movs	r4, #0
 8007474:	4642      	mov	r2, r8
 8007476:	464b      	mov	r3, r9
 8007478:	f7f8 fe78 	bl	800016c <__adddf3>
 800747c:	a37a      	add	r3, pc, #488	; (adr r3, 8007668 <__ieee754_pow+0x9d8>)
 800747e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007482:	4620      	mov	r0, r4
 8007484:	460d      	mov	r5, r1
 8007486:	f7f9 f827 	bl	80004d8 <__aeabi_dmul>
 800748a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800748e:	4606      	mov	r6, r0
 8007490:	460f      	mov	r7, r1
 8007492:	4620      	mov	r0, r4
 8007494:	4629      	mov	r1, r5
 8007496:	f7f8 fe67 	bl	8000168 <__aeabi_dsub>
 800749a:	4602      	mov	r2, r0
 800749c:	460b      	mov	r3, r1
 800749e:	4640      	mov	r0, r8
 80074a0:	4649      	mov	r1, r9
 80074a2:	f7f8 fe61 	bl	8000168 <__aeabi_dsub>
 80074a6:	a372      	add	r3, pc, #456	; (adr r3, 8007670 <__ieee754_pow+0x9e0>)
 80074a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ac:	f7f9 f814 	bl	80004d8 <__aeabi_dmul>
 80074b0:	a371      	add	r3, pc, #452	; (adr r3, 8007678 <__ieee754_pow+0x9e8>)
 80074b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b6:	4680      	mov	r8, r0
 80074b8:	4689      	mov	r9, r1
 80074ba:	4620      	mov	r0, r4
 80074bc:	4629      	mov	r1, r5
 80074be:	f7f9 f80b 	bl	80004d8 <__aeabi_dmul>
 80074c2:	4602      	mov	r2, r0
 80074c4:	460b      	mov	r3, r1
 80074c6:	4640      	mov	r0, r8
 80074c8:	4649      	mov	r1, r9
 80074ca:	f7f8 fe4f 	bl	800016c <__adddf3>
 80074ce:	4604      	mov	r4, r0
 80074d0:	460d      	mov	r5, r1
 80074d2:	4602      	mov	r2, r0
 80074d4:	460b      	mov	r3, r1
 80074d6:	4630      	mov	r0, r6
 80074d8:	4639      	mov	r1, r7
 80074da:	f7f8 fe47 	bl	800016c <__adddf3>
 80074de:	4632      	mov	r2, r6
 80074e0:	463b      	mov	r3, r7
 80074e2:	4680      	mov	r8, r0
 80074e4:	4689      	mov	r9, r1
 80074e6:	f7f8 fe3f 	bl	8000168 <__aeabi_dsub>
 80074ea:	4602      	mov	r2, r0
 80074ec:	460b      	mov	r3, r1
 80074ee:	4620      	mov	r0, r4
 80074f0:	4629      	mov	r1, r5
 80074f2:	f7f8 fe39 	bl	8000168 <__aeabi_dsub>
 80074f6:	4642      	mov	r2, r8
 80074f8:	4606      	mov	r6, r0
 80074fa:	460f      	mov	r7, r1
 80074fc:	464b      	mov	r3, r9
 80074fe:	4640      	mov	r0, r8
 8007500:	4649      	mov	r1, r9
 8007502:	f7f8 ffe9 	bl	80004d8 <__aeabi_dmul>
 8007506:	a35e      	add	r3, pc, #376	; (adr r3, 8007680 <__ieee754_pow+0x9f0>)
 8007508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800750c:	4604      	mov	r4, r0
 800750e:	460d      	mov	r5, r1
 8007510:	f7f8 ffe2 	bl	80004d8 <__aeabi_dmul>
 8007514:	a35c      	add	r3, pc, #368	; (adr r3, 8007688 <__ieee754_pow+0x9f8>)
 8007516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800751a:	f7f8 fe25 	bl	8000168 <__aeabi_dsub>
 800751e:	4622      	mov	r2, r4
 8007520:	462b      	mov	r3, r5
 8007522:	f7f8 ffd9 	bl	80004d8 <__aeabi_dmul>
 8007526:	a35a      	add	r3, pc, #360	; (adr r3, 8007690 <__ieee754_pow+0xa00>)
 8007528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800752c:	f7f8 fe1e 	bl	800016c <__adddf3>
 8007530:	4622      	mov	r2, r4
 8007532:	462b      	mov	r3, r5
 8007534:	f7f8 ffd0 	bl	80004d8 <__aeabi_dmul>
 8007538:	a357      	add	r3, pc, #348	; (adr r3, 8007698 <__ieee754_pow+0xa08>)
 800753a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800753e:	f7f8 fe13 	bl	8000168 <__aeabi_dsub>
 8007542:	4622      	mov	r2, r4
 8007544:	462b      	mov	r3, r5
 8007546:	f7f8 ffc7 	bl	80004d8 <__aeabi_dmul>
 800754a:	a355      	add	r3, pc, #340	; (adr r3, 80076a0 <__ieee754_pow+0xa10>)
 800754c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007550:	f7f8 fe0c 	bl	800016c <__adddf3>
 8007554:	4622      	mov	r2, r4
 8007556:	462b      	mov	r3, r5
 8007558:	f7f8 ffbe 	bl	80004d8 <__aeabi_dmul>
 800755c:	4602      	mov	r2, r0
 800755e:	460b      	mov	r3, r1
 8007560:	4640      	mov	r0, r8
 8007562:	4649      	mov	r1, r9
 8007564:	f7f8 fe00 	bl	8000168 <__aeabi_dsub>
 8007568:	4604      	mov	r4, r0
 800756a:	460d      	mov	r5, r1
 800756c:	4602      	mov	r2, r0
 800756e:	460b      	mov	r3, r1
 8007570:	4640      	mov	r0, r8
 8007572:	4649      	mov	r1, r9
 8007574:	f7f8 ffb0 	bl	80004d8 <__aeabi_dmul>
 8007578:	2200      	movs	r2, #0
 800757a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800757e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007582:	4620      	mov	r0, r4
 8007584:	4629      	mov	r1, r5
 8007586:	f7f8 fdef 	bl	8000168 <__aeabi_dsub>
 800758a:	4602      	mov	r2, r0
 800758c:	460b      	mov	r3, r1
 800758e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007592:	f7f9 f8cb 	bl	800072c <__aeabi_ddiv>
 8007596:	4632      	mov	r2, r6
 8007598:	4604      	mov	r4, r0
 800759a:	460d      	mov	r5, r1
 800759c:	463b      	mov	r3, r7
 800759e:	4640      	mov	r0, r8
 80075a0:	4649      	mov	r1, r9
 80075a2:	f7f8 ff99 	bl	80004d8 <__aeabi_dmul>
 80075a6:	4632      	mov	r2, r6
 80075a8:	463b      	mov	r3, r7
 80075aa:	f7f8 fddf 	bl	800016c <__adddf3>
 80075ae:	4602      	mov	r2, r0
 80075b0:	460b      	mov	r3, r1
 80075b2:	4620      	mov	r0, r4
 80075b4:	4629      	mov	r1, r5
 80075b6:	f7f8 fdd7 	bl	8000168 <__aeabi_dsub>
 80075ba:	4642      	mov	r2, r8
 80075bc:	464b      	mov	r3, r9
 80075be:	f7f8 fdd3 	bl	8000168 <__aeabi_dsub>
 80075c2:	4602      	mov	r2, r0
 80075c4:	460b      	mov	r3, r1
 80075c6:	2000      	movs	r0, #0
 80075c8:	4939      	ldr	r1, [pc, #228]	; (80076b0 <__ieee754_pow+0xa20>)
 80075ca:	f7f8 fdcd 	bl	8000168 <__aeabi_dsub>
 80075ce:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80075d2:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80075d6:	da29      	bge.n	800762c <__ieee754_pow+0x99c>
 80075d8:	4652      	mov	r2, sl
 80075da:	f000 f955 	bl	8007888 <scalbn>
 80075de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80075e2:	f7ff bbfe 	b.w	8006de2 <__ieee754_pow+0x152>
 80075e6:	4b33      	ldr	r3, [pc, #204]	; (80076b4 <__ieee754_pow+0xa24>)
 80075e8:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80075ec:	429f      	cmp	r7, r3
 80075ee:	f77f af13 	ble.w	8007418 <__ieee754_pow+0x788>
 80075f2:	4b31      	ldr	r3, [pc, #196]	; (80076b8 <__ieee754_pow+0xa28>)
 80075f4:	440b      	add	r3, r1
 80075f6:	4303      	orrs	r3, r0
 80075f8:	d009      	beq.n	800760e <__ieee754_pow+0x97e>
 80075fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80075fe:	2200      	movs	r2, #0
 8007600:	2300      	movs	r3, #0
 8007602:	f7f9 f9db 	bl	80009bc <__aeabi_dcmplt>
 8007606:	3800      	subs	r0, #0
 8007608:	bf18      	it	ne
 800760a:	2001      	movne	r0, #1
 800760c:	e453      	b.n	8006eb6 <__ieee754_pow+0x226>
 800760e:	4622      	mov	r2, r4
 8007610:	462b      	mov	r3, r5
 8007612:	f7f8 fda9 	bl	8000168 <__aeabi_dsub>
 8007616:	4642      	mov	r2, r8
 8007618:	464b      	mov	r3, r9
 800761a:	f7f9 f9e3 	bl	80009e4 <__aeabi_dcmpge>
 800761e:	2800      	cmp	r0, #0
 8007620:	f43f aefa 	beq.w	8007418 <__ieee754_pow+0x788>
 8007624:	e7e9      	b.n	80075fa <__ieee754_pow+0x96a>
 8007626:	f04f 0a00 	mov.w	sl, #0
 800762a:	e720      	b.n	800746e <__ieee754_pow+0x7de>
 800762c:	4621      	mov	r1, r4
 800762e:	e7d6      	b.n	80075de <__ieee754_pow+0x94e>
 8007630:	f04f 0b00 	mov.w	fp, #0
 8007634:	f8df c078 	ldr.w	ip, [pc, #120]	; 80076b0 <__ieee754_pow+0xa20>
 8007638:	f7ff bbba 	b.w	8006db0 <__ieee754_pow+0x120>
 800763c:	f04f 0b00 	mov.w	fp, #0
 8007640:	f04f 0c00 	mov.w	ip, #0
 8007644:	f7ff bbb4 	b.w	8006db0 <__ieee754_pow+0x120>
 8007648:	4640      	mov	r0, r8
 800764a:	4649      	mov	r1, r9
 800764c:	f7ff bb3d 	b.w	8006cca <__ieee754_pow+0x3a>
 8007650:	9200      	str	r2, [sp, #0]
 8007652:	f7ff bb89 	b.w	8006d68 <__ieee754_pow+0xd8>
 8007656:	2300      	movs	r3, #0
 8007658:	f7ff bb73 	b.w	8006d42 <__ieee754_pow+0xb2>
 800765c:	f3af 8000 	nop.w
 8007660:	652b82fe 	.word	0x652b82fe
 8007664:	3c971547 	.word	0x3c971547
 8007668:	00000000 	.word	0x00000000
 800766c:	3fe62e43 	.word	0x3fe62e43
 8007670:	fefa39ef 	.word	0xfefa39ef
 8007674:	3fe62e42 	.word	0x3fe62e42
 8007678:	0ca86c39 	.word	0x0ca86c39
 800767c:	be205c61 	.word	0xbe205c61
 8007680:	72bea4d0 	.word	0x72bea4d0
 8007684:	3e663769 	.word	0x3e663769
 8007688:	c5d26bf1 	.word	0xc5d26bf1
 800768c:	3ebbbd41 	.word	0x3ebbbd41
 8007690:	af25de2c 	.word	0xaf25de2c
 8007694:	3f11566a 	.word	0x3f11566a
 8007698:	16bebd93 	.word	0x16bebd93
 800769c:	3f66c16c 	.word	0x3f66c16c
 80076a0:	5555553e 	.word	0x5555553e
 80076a4:	3fc55555 	.word	0x3fc55555
 80076a8:	3fe00000 	.word	0x3fe00000
 80076ac:	000fffff 	.word	0x000fffff
 80076b0:	3ff00000 	.word	0x3ff00000
 80076b4:	4090cbff 	.word	0x4090cbff
 80076b8:	3f6f3400 	.word	0x3f6f3400

080076bc <__ieee754_sqrt>:
 80076bc:	f8df c158 	ldr.w	ip, [pc, #344]	; 8007818 <__ieee754_sqrt+0x15c>
 80076c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076c4:	ea3c 0c01 	bics.w	ip, ip, r1
 80076c8:	4606      	mov	r6, r0
 80076ca:	460d      	mov	r5, r1
 80076cc:	460c      	mov	r4, r1
 80076ce:	460a      	mov	r2, r1
 80076d0:	4607      	mov	r7, r0
 80076d2:	4603      	mov	r3, r0
 80076d4:	d10f      	bne.n	80076f6 <__ieee754_sqrt+0x3a>
 80076d6:	4602      	mov	r2, r0
 80076d8:	460b      	mov	r3, r1
 80076da:	f7f8 fefd 	bl	80004d8 <__aeabi_dmul>
 80076de:	4602      	mov	r2, r0
 80076e0:	460b      	mov	r3, r1
 80076e2:	4630      	mov	r0, r6
 80076e4:	4629      	mov	r1, r5
 80076e6:	f7f8 fd41 	bl	800016c <__adddf3>
 80076ea:	4606      	mov	r6, r0
 80076ec:	460d      	mov	r5, r1
 80076ee:	4630      	mov	r0, r6
 80076f0:	4629      	mov	r1, r5
 80076f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076f6:	2900      	cmp	r1, #0
 80076f8:	dc0e      	bgt.n	8007718 <__ieee754_sqrt+0x5c>
 80076fa:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80076fe:	ea5c 0707 	orrs.w	r7, ip, r7
 8007702:	d0f4      	beq.n	80076ee <__ieee754_sqrt+0x32>
 8007704:	b141      	cbz	r1, 8007718 <__ieee754_sqrt+0x5c>
 8007706:	4602      	mov	r2, r0
 8007708:	460b      	mov	r3, r1
 800770a:	f7f8 fd2d 	bl	8000168 <__aeabi_dsub>
 800770e:	4602      	mov	r2, r0
 8007710:	460b      	mov	r3, r1
 8007712:	f7f9 f80b 	bl	800072c <__aeabi_ddiv>
 8007716:	e7e8      	b.n	80076ea <__ieee754_sqrt+0x2e>
 8007718:	1521      	asrs	r1, r4, #20
 800771a:	d075      	beq.n	8007808 <__ieee754_sqrt+0x14c>
 800771c:	07cc      	lsls	r4, r1, #31
 800771e:	f04f 0400 	mov.w	r4, #0
 8007722:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8007726:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800772a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800772e:	bf5e      	ittt	pl
 8007730:	0fd9      	lsrpl	r1, r3, #31
 8007732:	005b      	lslpl	r3, r3, #1
 8007734:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8007738:	0fd9      	lsrs	r1, r3, #31
 800773a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800773e:	2516      	movs	r5, #22
 8007740:	4620      	mov	r0, r4
 8007742:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007746:	107f      	asrs	r7, r7, #1
 8007748:	005b      	lsls	r3, r3, #1
 800774a:	1846      	adds	r6, r0, r1
 800774c:	4296      	cmp	r6, r2
 800774e:	bfde      	ittt	le
 8007750:	1b92      	suble	r2, r2, r6
 8007752:	1870      	addle	r0, r6, r1
 8007754:	1864      	addle	r4, r4, r1
 8007756:	0052      	lsls	r2, r2, #1
 8007758:	3d01      	subs	r5, #1
 800775a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800775e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007762:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007766:	d1f0      	bne.n	800774a <__ieee754_sqrt+0x8e>
 8007768:	4629      	mov	r1, r5
 800776a:	f04f 0e20 	mov.w	lr, #32
 800776e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007772:	4282      	cmp	r2, r0
 8007774:	eb06 0c05 	add.w	ip, r6, r5
 8007778:	dc02      	bgt.n	8007780 <__ieee754_sqrt+0xc4>
 800777a:	d113      	bne.n	80077a4 <__ieee754_sqrt+0xe8>
 800777c:	459c      	cmp	ip, r3
 800777e:	d811      	bhi.n	80077a4 <__ieee754_sqrt+0xe8>
 8007780:	f1bc 0f00 	cmp.w	ip, #0
 8007784:	eb0c 0506 	add.w	r5, ip, r6
 8007788:	da43      	bge.n	8007812 <__ieee754_sqrt+0x156>
 800778a:	2d00      	cmp	r5, #0
 800778c:	db41      	blt.n	8007812 <__ieee754_sqrt+0x156>
 800778e:	f100 0801 	add.w	r8, r0, #1
 8007792:	1a12      	subs	r2, r2, r0
 8007794:	4640      	mov	r0, r8
 8007796:	459c      	cmp	ip, r3
 8007798:	bf88      	it	hi
 800779a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800779e:	eba3 030c 	sub.w	r3, r3, ip
 80077a2:	4431      	add	r1, r6
 80077a4:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80077a8:	f1be 0e01 	subs.w	lr, lr, #1
 80077ac:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 80077b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80077b4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80077b8:	d1db      	bne.n	8007772 <__ieee754_sqrt+0xb6>
 80077ba:	4313      	orrs	r3, r2
 80077bc:	d006      	beq.n	80077cc <__ieee754_sqrt+0x110>
 80077be:	1c48      	adds	r0, r1, #1
 80077c0:	bf0b      	itete	eq
 80077c2:	4671      	moveq	r1, lr
 80077c4:	3101      	addne	r1, #1
 80077c6:	3401      	addeq	r4, #1
 80077c8:	f021 0101 	bicne.w	r1, r1, #1
 80077cc:	1063      	asrs	r3, r4, #1
 80077ce:	0849      	lsrs	r1, r1, #1
 80077d0:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80077d4:	07e2      	lsls	r2, r4, #31
 80077d6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80077da:	bf48      	it	mi
 80077dc:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80077e0:	460e      	mov	r6, r1
 80077e2:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80077e6:	e782      	b.n	80076ee <__ieee754_sqrt+0x32>
 80077e8:	0ada      	lsrs	r2, r3, #11
 80077ea:	3815      	subs	r0, #21
 80077ec:	055b      	lsls	r3, r3, #21
 80077ee:	2a00      	cmp	r2, #0
 80077f0:	d0fa      	beq.n	80077e8 <__ieee754_sqrt+0x12c>
 80077f2:	02d5      	lsls	r5, r2, #11
 80077f4:	d50a      	bpl.n	800780c <__ieee754_sqrt+0x150>
 80077f6:	f1c1 0420 	rsb	r4, r1, #32
 80077fa:	fa23 f404 	lsr.w	r4, r3, r4
 80077fe:	1e4d      	subs	r5, r1, #1
 8007800:	408b      	lsls	r3, r1
 8007802:	4322      	orrs	r2, r4
 8007804:	1b41      	subs	r1, r0, r5
 8007806:	e789      	b.n	800771c <__ieee754_sqrt+0x60>
 8007808:	4608      	mov	r0, r1
 800780a:	e7f0      	b.n	80077ee <__ieee754_sqrt+0x132>
 800780c:	0052      	lsls	r2, r2, #1
 800780e:	3101      	adds	r1, #1
 8007810:	e7ef      	b.n	80077f2 <__ieee754_sqrt+0x136>
 8007812:	4680      	mov	r8, r0
 8007814:	e7bd      	b.n	8007792 <__ieee754_sqrt+0xd6>
 8007816:	bf00      	nop
 8007818:	7ff00000 	.word	0x7ff00000

0800781c <with_errno>:
 800781c:	b570      	push	{r4, r5, r6, lr}
 800781e:	4604      	mov	r4, r0
 8007820:	460d      	mov	r5, r1
 8007822:	4616      	mov	r6, r2
 8007824:	f000 f8ae 	bl	8007984 <__errno>
 8007828:	4629      	mov	r1, r5
 800782a:	6006      	str	r6, [r0, #0]
 800782c:	4620      	mov	r0, r4
 800782e:	bd70      	pop	{r4, r5, r6, pc}

08007830 <xflow>:
 8007830:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007832:	4615      	mov	r5, r2
 8007834:	461c      	mov	r4, r3
 8007836:	b180      	cbz	r0, 800785a <xflow+0x2a>
 8007838:	4610      	mov	r0, r2
 800783a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800783e:	e9cd 0100 	strd	r0, r1, [sp]
 8007842:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007846:	4628      	mov	r0, r5
 8007848:	4621      	mov	r1, r4
 800784a:	f7f8 fe45 	bl	80004d8 <__aeabi_dmul>
 800784e:	2222      	movs	r2, #34	; 0x22
 8007850:	b003      	add	sp, #12
 8007852:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007856:	f7ff bfe1 	b.w	800781c <with_errno>
 800785a:	4610      	mov	r0, r2
 800785c:	4619      	mov	r1, r3
 800785e:	e7ee      	b.n	800783e <xflow+0xe>

08007860 <__math_uflow>:
 8007860:	2200      	movs	r2, #0
 8007862:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007866:	f7ff bfe3 	b.w	8007830 <xflow>

0800786a <__math_oflow>:
 800786a:	2200      	movs	r2, #0
 800786c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8007870:	f7ff bfde 	b.w	8007830 <xflow>

08007874 <fabs>:
 8007874:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007878:	4770      	bx	lr

0800787a <finite>:
 800787a:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800787e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8007882:	0fc0      	lsrs	r0, r0, #31
 8007884:	4770      	bx	lr
	...

08007888 <scalbn>:
 8007888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800788a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800788e:	4604      	mov	r4, r0
 8007890:	460d      	mov	r5, r1
 8007892:	4617      	mov	r7, r2
 8007894:	460b      	mov	r3, r1
 8007896:	b996      	cbnz	r6, 80078be <scalbn+0x36>
 8007898:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800789c:	4303      	orrs	r3, r0
 800789e:	d039      	beq.n	8007914 <scalbn+0x8c>
 80078a0:	4b33      	ldr	r3, [pc, #204]	; (8007970 <scalbn+0xe8>)
 80078a2:	2200      	movs	r2, #0
 80078a4:	f7f8 fe18 	bl	80004d8 <__aeabi_dmul>
 80078a8:	4b32      	ldr	r3, [pc, #200]	; (8007974 <scalbn+0xec>)
 80078aa:	4604      	mov	r4, r0
 80078ac:	429f      	cmp	r7, r3
 80078ae:	460d      	mov	r5, r1
 80078b0:	da0f      	bge.n	80078d2 <scalbn+0x4a>
 80078b2:	a32b      	add	r3, pc, #172	; (adr r3, 8007960 <scalbn+0xd8>)
 80078b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078b8:	f7f8 fe0e 	bl	80004d8 <__aeabi_dmul>
 80078bc:	e006      	b.n	80078cc <scalbn+0x44>
 80078be:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80078c2:	4296      	cmp	r6, r2
 80078c4:	d10a      	bne.n	80078dc <scalbn+0x54>
 80078c6:	4602      	mov	r2, r0
 80078c8:	f7f8 fc50 	bl	800016c <__adddf3>
 80078cc:	4604      	mov	r4, r0
 80078ce:	460d      	mov	r5, r1
 80078d0:	e020      	b.n	8007914 <scalbn+0x8c>
 80078d2:	460b      	mov	r3, r1
 80078d4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80078d8:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 80078dc:	f240 72fe 	movw	r2, #2046	; 0x7fe
 80078e0:	19b9      	adds	r1, r7, r6
 80078e2:	4291      	cmp	r1, r2
 80078e4:	dd0e      	ble.n	8007904 <scalbn+0x7c>
 80078e6:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 80078ea:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 80078ee:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 80078f2:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 80078f6:	4820      	ldr	r0, [pc, #128]	; (8007978 <scalbn+0xf0>)
 80078f8:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 80078fc:	a31a      	add	r3, pc, #104	; (adr r3, 8007968 <scalbn+0xe0>)
 80078fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007902:	e7d9      	b.n	80078b8 <scalbn+0x30>
 8007904:	2900      	cmp	r1, #0
 8007906:	dd08      	ble.n	800791a <scalbn+0x92>
 8007908:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800790c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007910:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8007914:	4620      	mov	r0, r4
 8007916:	4629      	mov	r1, r5
 8007918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800791a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800791e:	da12      	bge.n	8007946 <scalbn+0xbe>
 8007920:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007924:	429f      	cmp	r7, r3
 8007926:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800792a:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 800792e:	dcdc      	bgt.n	80078ea <scalbn+0x62>
 8007930:	a30b      	add	r3, pc, #44	; (adr r3, 8007960 <scalbn+0xd8>)
 8007932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007936:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800793a:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800793e:	480f      	ldr	r0, [pc, #60]	; (800797c <scalbn+0xf4>)
 8007940:	f041 011f 	orr.w	r1, r1, #31
 8007944:	e7b8      	b.n	80078b8 <scalbn+0x30>
 8007946:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800794a:	3136      	adds	r1, #54	; 0x36
 800794c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007950:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8007954:	4620      	mov	r0, r4
 8007956:	4629      	mov	r1, r5
 8007958:	2200      	movs	r2, #0
 800795a:	4b09      	ldr	r3, [pc, #36]	; (8007980 <scalbn+0xf8>)
 800795c:	e7ac      	b.n	80078b8 <scalbn+0x30>
 800795e:	bf00      	nop
 8007960:	c2f8f359 	.word	0xc2f8f359
 8007964:	01a56e1f 	.word	0x01a56e1f
 8007968:	8800759c 	.word	0x8800759c
 800796c:	7e37e43c 	.word	0x7e37e43c
 8007970:	43500000 	.word	0x43500000
 8007974:	ffff3cb0 	.word	0xffff3cb0
 8007978:	8800759c 	.word	0x8800759c
 800797c:	c2f8f359 	.word	0xc2f8f359
 8007980:	3c900000 	.word	0x3c900000

08007984 <__errno>:
 8007984:	4b01      	ldr	r3, [pc, #4]	; (800798c <__errno+0x8>)
 8007986:	6818      	ldr	r0, [r3, #0]
 8007988:	4770      	bx	lr
 800798a:	bf00      	nop
 800798c:	20000048 	.word	0x20000048

08007990 <__libc_init_array>:
 8007990:	b570      	push	{r4, r5, r6, lr}
 8007992:	2600      	movs	r6, #0
 8007994:	4d0c      	ldr	r5, [pc, #48]	; (80079c8 <__libc_init_array+0x38>)
 8007996:	4c0d      	ldr	r4, [pc, #52]	; (80079cc <__libc_init_array+0x3c>)
 8007998:	1b64      	subs	r4, r4, r5
 800799a:	10a4      	asrs	r4, r4, #2
 800799c:	42a6      	cmp	r6, r4
 800799e:	d109      	bne.n	80079b4 <__libc_init_array+0x24>
 80079a0:	f000 f822 	bl	80079e8 <_init>
 80079a4:	2600      	movs	r6, #0
 80079a6:	4d0a      	ldr	r5, [pc, #40]	; (80079d0 <__libc_init_array+0x40>)
 80079a8:	4c0a      	ldr	r4, [pc, #40]	; (80079d4 <__libc_init_array+0x44>)
 80079aa:	1b64      	subs	r4, r4, r5
 80079ac:	10a4      	asrs	r4, r4, #2
 80079ae:	42a6      	cmp	r6, r4
 80079b0:	d105      	bne.n	80079be <__libc_init_array+0x2e>
 80079b2:	bd70      	pop	{r4, r5, r6, pc}
 80079b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80079b8:	4798      	blx	r3
 80079ba:	3601      	adds	r6, #1
 80079bc:	e7ee      	b.n	800799c <__libc_init_array+0xc>
 80079be:	f855 3b04 	ldr.w	r3, [r5], #4
 80079c2:	4798      	blx	r3
 80079c4:	3601      	adds	r6, #1
 80079c6:	e7f2      	b.n	80079ae <__libc_init_array+0x1e>
 80079c8:	08007a58 	.word	0x08007a58
 80079cc:	08007a58 	.word	0x08007a58
 80079d0:	08007a58 	.word	0x08007a58
 80079d4:	08007a5c 	.word	0x08007a5c

080079d8 <memset>:
 80079d8:	4603      	mov	r3, r0
 80079da:	4402      	add	r2, r0
 80079dc:	4293      	cmp	r3, r2
 80079de:	d100      	bne.n	80079e2 <memset+0xa>
 80079e0:	4770      	bx	lr
 80079e2:	f803 1b01 	strb.w	r1, [r3], #1
 80079e6:	e7f9      	b.n	80079dc <memset+0x4>

080079e8 <_init>:
 80079e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ea:	bf00      	nop
 80079ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079ee:	bc08      	pop	{r3}
 80079f0:	469e      	mov	lr, r3
 80079f2:	4770      	bx	lr

080079f4 <_fini>:
 80079f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079f6:	bf00      	nop
 80079f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079fa:	bc08      	pop	{r3}
 80079fc:	469e      	mov	lr, r3
 80079fe:	4770      	bx	lr
