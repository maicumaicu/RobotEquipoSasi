
RobotAlgoritmoSasi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005608  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08005718  08005718  00015718  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005770  08005770  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005770  08005770  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005770  08005770  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005770  08005770  00015770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005774  08005774  00015774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005778  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012a4  20000070  080057e8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001314  080057e8  00021314  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d92c  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027d2  00000000  00000000  0002d9c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed0  00000000  00000000  00030198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000da8  00000000  00000000  00031068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002fd0  00000000  00000000  00031e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011956  00000000  00000000  00034de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090c3d  00000000  00000000  00046736  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d7373  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004108  00000000  00000000  000d73c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08005700 	.word	0x08005700

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08005700 	.word	0x08005700

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2f>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a30:	bf24      	itt	cs
 8000a32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a3a:	d90d      	bls.n	8000a58 <__aeabi_d2f+0x30>
 8000a3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a50:	bf08      	it	eq
 8000a52:	f020 0001 	biceq.w	r0, r0, #1
 8000a56:	4770      	bx	lr
 8000a58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a5c:	d121      	bne.n	8000aa2 <__aeabi_d2f+0x7a>
 8000a5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a62:	bfbc      	itt	lt
 8000a64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	4770      	bxlt	lr
 8000a6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a72:	f1c2 0218 	rsb	r2, r2, #24
 8000a76:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a82:	bf18      	it	ne
 8000a84:	f040 0001 	orrne.w	r0, r0, #1
 8000a88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a94:	ea40 000c 	orr.w	r0, r0, ip
 8000a98:	fa23 f302 	lsr.w	r3, r3, r2
 8000a9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa0:	e7cc      	b.n	8000a3c <__aeabi_d2f+0x14>
 8000aa2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aa6:	d107      	bne.n	8000ab8 <__aeabi_d2f+0x90>
 8000aa8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aac:	bf1e      	ittt	ne
 8000aae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ab2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ab6:	4770      	bxne	lr
 8000ab8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	; 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	3a01      	subs	r2, #1
 8000b82:	bf28      	it	cs
 8000b84:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b88:	d2ed      	bcs.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d36:	2afd      	cmp	r2, #253	; 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	; 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	; 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	; 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f8a:	1d3b      	adds	r3, r7, #4
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f94:	4b2e      	ldr	r3, [pc, #184]	; (8001050 <MX_ADC1_Init+0xcc>)
 8000f96:	4a2f      	ldr	r2, [pc, #188]	; (8001054 <MX_ADC1_Init+0xd0>)
 8000f98:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f9a:	4b2d      	ldr	r3, [pc, #180]	; (8001050 <MX_ADC1_Init+0xcc>)
 8000f9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fa0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000fa2:	4b2b      	ldr	r3, [pc, #172]	; (8001050 <MX_ADC1_Init+0xcc>)
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fa8:	4b29      	ldr	r3, [pc, #164]	; (8001050 <MX_ADC1_Init+0xcc>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fae:	4b28      	ldr	r3, [pc, #160]	; (8001050 <MX_ADC1_Init+0xcc>)
 8000fb0:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000fb4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fb6:	4b26      	ldr	r3, [pc, #152]	; (8001050 <MX_ADC1_Init+0xcc>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8000fbc:	4b24      	ldr	r3, [pc, #144]	; (8001050 <MX_ADC1_Init+0xcc>)
 8000fbe:	2204      	movs	r2, #4
 8000fc0:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fc2:	4823      	ldr	r0, [pc, #140]	; (8001050 <MX_ADC1_Init+0xcc>)
 8000fc4:	f001 f840 	bl	8002048 <HAL_ADC_Init>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000fce:	f000 fbd1 	bl	8001774 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fde:	1d3b      	adds	r3, r7, #4
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	481b      	ldr	r0, [pc, #108]	; (8001050 <MX_ADC1_Init+0xcc>)
 8000fe4:	f001 f9f8 	bl	80023d8 <HAL_ADC_ConfigChannel>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000fee:	f000 fbc1 	bl	8001774 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ffa:	1d3b      	adds	r3, r7, #4
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4814      	ldr	r0, [pc, #80]	; (8001050 <MX_ADC1_Init+0xcc>)
 8001000:	f001 f9ea 	bl	80023d8 <HAL_ADC_ConfigChannel>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800100a:	f000 fbb3 	bl	8001774 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800100e:	2302      	movs	r3, #2
 8001010:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001012:	2303      	movs	r3, #3
 8001014:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001016:	1d3b      	adds	r3, r7, #4
 8001018:	4619      	mov	r1, r3
 800101a:	480d      	ldr	r0, [pc, #52]	; (8001050 <MX_ADC1_Init+0xcc>)
 800101c:	f001 f9dc 	bl	80023d8 <HAL_ADC_ConfigChannel>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001026:	f000 fba5 	bl	8001774 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800102a:	2303      	movs	r3, #3
 800102c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800102e:	2304      	movs	r3, #4
 8001030:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001032:	1d3b      	adds	r3, r7, #4
 8001034:	4619      	mov	r1, r3
 8001036:	4806      	ldr	r0, [pc, #24]	; (8001050 <MX_ADC1_Init+0xcc>)
 8001038:	f001 f9ce 	bl	80023d8 <HAL_ADC_ConfigChannel>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8001042:	f000 fb97 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001046:	bf00      	nop
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	2000008c 	.word	0x2000008c
 8001054:	40012400 	.word	0x40012400

08001058 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b088      	sub	sp, #32
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001060:	f107 0310 	add.w	r3, r7, #16
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a28      	ldr	r2, [pc, #160]	; (8001114 <HAL_ADC_MspInit+0xbc>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d149      	bne.n	800110c <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001078:	4b27      	ldr	r3, [pc, #156]	; (8001118 <HAL_ADC_MspInit+0xc0>)
 800107a:	699b      	ldr	r3, [r3, #24]
 800107c:	4a26      	ldr	r2, [pc, #152]	; (8001118 <HAL_ADC_MspInit+0xc0>)
 800107e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001082:	6193      	str	r3, [r2, #24]
 8001084:	4b24      	ldr	r3, [pc, #144]	; (8001118 <HAL_ADC_MspInit+0xc0>)
 8001086:	699b      	ldr	r3, [r3, #24]
 8001088:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001090:	4b21      	ldr	r3, [pc, #132]	; (8001118 <HAL_ADC_MspInit+0xc0>)
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	4a20      	ldr	r2, [pc, #128]	; (8001118 <HAL_ADC_MspInit+0xc0>)
 8001096:	f043 0304 	orr.w	r3, r3, #4
 800109a:	6193      	str	r3, [r2, #24]
 800109c:	4b1e      	ldr	r3, [pc, #120]	; (8001118 <HAL_ADC_MspInit+0xc0>)
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	f003 0304 	and.w	r3, r3, #4
 80010a4:	60bb      	str	r3, [r7, #8]
 80010a6:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = CNY70_Pin|SHARP_D_Pin|SHARP_C_Pin|SHARP_I_Pin;
 80010a8:	230f      	movs	r3, #15
 80010aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010ac:	2303      	movs	r3, #3
 80010ae:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b0:	f107 0310 	add.w	r3, r7, #16
 80010b4:	4619      	mov	r1, r3
 80010b6:	4819      	ldr	r0, [pc, #100]	; (800111c <HAL_ADC_MspInit+0xc4>)
 80010b8:	f001 fe84 	bl	8002dc4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80010bc:	4b18      	ldr	r3, [pc, #96]	; (8001120 <HAL_ADC_MspInit+0xc8>)
 80010be:	4a19      	ldr	r2, [pc, #100]	; (8001124 <HAL_ADC_MspInit+0xcc>)
 80010c0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010c2:	4b17      	ldr	r3, [pc, #92]	; (8001120 <HAL_ADC_MspInit+0xc8>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010c8:	4b15      	ldr	r3, [pc, #84]	; (8001120 <HAL_ADC_MspInit+0xc8>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80010ce:	4b14      	ldr	r3, [pc, #80]	; (8001120 <HAL_ADC_MspInit+0xc8>)
 80010d0:	2280      	movs	r2, #128	; 0x80
 80010d2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80010d4:	4b12      	ldr	r3, [pc, #72]	; (8001120 <HAL_ADC_MspInit+0xc8>)
 80010d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010da:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80010dc:	4b10      	ldr	r3, [pc, #64]	; (8001120 <HAL_ADC_MspInit+0xc8>)
 80010de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010e2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80010e4:	4b0e      	ldr	r3, [pc, #56]	; (8001120 <HAL_ADC_MspInit+0xc8>)
 80010e6:	2220      	movs	r2, #32
 80010e8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80010ea:	4b0d      	ldr	r3, [pc, #52]	; (8001120 <HAL_ADC_MspInit+0xc8>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80010f0:	480b      	ldr	r0, [pc, #44]	; (8001120 <HAL_ADC_MspInit+0xc8>)
 80010f2:	f001 fc79 	bl	80029e8 <HAL_DMA_Init>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80010fc:	f000 fb3a 	bl	8001774 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4a07      	ldr	r2, [pc, #28]	; (8001120 <HAL_ADC_MspInit+0xc8>)
 8001104:	621a      	str	r2, [r3, #32]
 8001106:	4a06      	ldr	r2, [pc, #24]	; (8001120 <HAL_ADC_MspInit+0xc8>)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800110c:	bf00      	nop
 800110e:	3720      	adds	r7, #32
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	40012400 	.word	0x40012400
 8001118:	40021000 	.word	0x40021000
 800111c:	40010800 	.word	0x40010800
 8001120:	200000bc 	.word	0x200000bc
 8001124:	40020008 	.word	0x40020008

08001128 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800112e:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <MX_DMA_Init+0x38>)
 8001130:	695b      	ldr	r3, [r3, #20]
 8001132:	4a0b      	ldr	r2, [pc, #44]	; (8001160 <MX_DMA_Init+0x38>)
 8001134:	f043 0301 	orr.w	r3, r3, #1
 8001138:	6153      	str	r3, [r2, #20]
 800113a:	4b09      	ldr	r3, [pc, #36]	; (8001160 <MX_DMA_Init+0x38>)
 800113c:	695b      	ldr	r3, [r3, #20]
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	607b      	str	r3, [r7, #4]
 8001144:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001146:	2200      	movs	r2, #0
 8001148:	2100      	movs	r1, #0
 800114a:	200b      	movs	r0, #11
 800114c:	f001 fc15 	bl	800297a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001150:	200b      	movs	r0, #11
 8001152:	f001 fc2e 	bl	80029b2 <HAL_NVIC_EnableIRQ>

}
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40021000 	.word	0x40021000

08001164 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b088      	sub	sp, #32
 8001168:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116a:	f107 0310 	add.w	r3, r7, #16
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]
 8001176:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001178:	4b3f      	ldr	r3, [pc, #252]	; (8001278 <MX_GPIO_Init+0x114>)
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	4a3e      	ldr	r2, [pc, #248]	; (8001278 <MX_GPIO_Init+0x114>)
 800117e:	f043 0310 	orr.w	r3, r3, #16
 8001182:	6193      	str	r3, [r2, #24]
 8001184:	4b3c      	ldr	r3, [pc, #240]	; (8001278 <MX_GPIO_Init+0x114>)
 8001186:	699b      	ldr	r3, [r3, #24]
 8001188:	f003 0310 	and.w	r3, r3, #16
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001190:	4b39      	ldr	r3, [pc, #228]	; (8001278 <MX_GPIO_Init+0x114>)
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	4a38      	ldr	r2, [pc, #224]	; (8001278 <MX_GPIO_Init+0x114>)
 8001196:	f043 0320 	orr.w	r3, r3, #32
 800119a:	6193      	str	r3, [r2, #24]
 800119c:	4b36      	ldr	r3, [pc, #216]	; (8001278 <MX_GPIO_Init+0x114>)
 800119e:	699b      	ldr	r3, [r3, #24]
 80011a0:	f003 0320 	and.w	r3, r3, #32
 80011a4:	60bb      	str	r3, [r7, #8]
 80011a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a8:	4b33      	ldr	r3, [pc, #204]	; (8001278 <MX_GPIO_Init+0x114>)
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	4a32      	ldr	r2, [pc, #200]	; (8001278 <MX_GPIO_Init+0x114>)
 80011ae:	f043 0304 	orr.w	r3, r3, #4
 80011b2:	6193      	str	r3, [r2, #24]
 80011b4:	4b30      	ldr	r3, [pc, #192]	; (8001278 <MX_GPIO_Init+0x114>)
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	f003 0304 	and.w	r3, r3, #4
 80011bc:	607b      	str	r3, [r7, #4]
 80011be:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c0:	4b2d      	ldr	r3, [pc, #180]	; (8001278 <MX_GPIO_Init+0x114>)
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	4a2c      	ldr	r2, [pc, #176]	; (8001278 <MX_GPIO_Init+0x114>)
 80011c6:	f043 0308 	orr.w	r3, r3, #8
 80011ca:	6193      	str	r3, [r2, #24]
 80011cc:	4b2a      	ldr	r3, [pc, #168]	; (8001278 <MX_GPIO_Init+0x114>)
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	f003 0308 	and.w	r3, r3, #8
 80011d4:	603b      	str	r3, [r7, #0]
 80011d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80011d8:	2200      	movs	r2, #0
 80011da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011de:	4827      	ldr	r0, [pc, #156]	; (800127c <MX_GPIO_Init+0x118>)
 80011e0:	f001 ff8b 	bl	80030fa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|AIN1_Pin|AIN2_Pin, GPIO_PIN_RESET);
 80011e4:	2200      	movs	r2, #0
 80011e6:	f248 0118 	movw	r1, #32792	; 0x8018
 80011ea:	4825      	ldr	r0, [pc, #148]	; (8001280 <MX_GPIO_Init+0x11c>)
 80011ec:	f001 ff85 	bl	80030fa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BIN2_Pin|BIN1_Pin|STBY_Pin, GPIO_PIN_RESET);
 80011f0:	2200      	movs	r2, #0
 80011f2:	f44f 4118 	mov.w	r1, #38912	; 0x9800
 80011f6:	4823      	ldr	r0, [pc, #140]	; (8001284 <MX_GPIO_Init+0x120>)
 80011f8:	f001 ff7f 	bl	80030fa <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80011fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001200:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001202:	2301      	movs	r3, #1
 8001204:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120a:	2302      	movs	r3, #2
 800120c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800120e:	f107 0310 	add.w	r3, r7, #16
 8001212:	4619      	mov	r1, r3
 8001214:	4819      	ldr	r0, [pc, #100]	; (800127c <MX_GPIO_Init+0x118>)
 8001216:	f001 fdd5 	bl	8002dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin|BTN3_Pin;
 800121a:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800121e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001220:	2300      	movs	r3, #0
 8001222:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001228:	f107 0310 	add.w	r3, r7, #16
 800122c:	4619      	mov	r1, r3
 800122e:	4814      	ldr	r0, [pc, #80]	; (8001280 <MX_GPIO_Init+0x11c>)
 8001230:	f001 fdc8 	bl	8002dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_Pin|AIN1_Pin|AIN2_Pin;
 8001234:	f248 0318 	movw	r3, #32792	; 0x8018
 8001238:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800123a:	2301      	movs	r3, #1
 800123c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001242:	2302      	movs	r3, #2
 8001244:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001246:	f107 0310 	add.w	r3, r7, #16
 800124a:	4619      	mov	r1, r3
 800124c:	480c      	ldr	r0, [pc, #48]	; (8001280 <MX_GPIO_Init+0x11c>)
 800124e:	f001 fdb9 	bl	8002dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = BIN2_Pin|BIN1_Pin|STBY_Pin;
 8001252:	f44f 4318 	mov.w	r3, #38912	; 0x9800
 8001256:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001258:	2301      	movs	r3, #1
 800125a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125c:	2300      	movs	r3, #0
 800125e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001260:	2302      	movs	r3, #2
 8001262:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001264:	f107 0310 	add.w	r3, r7, #16
 8001268:	4619      	mov	r1, r3
 800126a:	4806      	ldr	r0, [pc, #24]	; (8001284 <MX_GPIO_Init+0x120>)
 800126c:	f001 fdaa 	bl	8002dc4 <HAL_GPIO_Init>

}
 8001270:	bf00      	nop
 8001272:	3720      	adds	r7, #32
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	40021000 	.word	0x40021000
 800127c:	40011000 	.word	0x40011000
 8001280:	40010c00 	.word	0x40010c00
 8001284:	40010800 	.word	0x40010800

08001288 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800128c:	f000 fe7a 	bl	8001f84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001290:	f000 f894 	bl	80013bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001294:	f7ff ff66 	bl	8001164 <MX_GPIO_Init>
  MX_DMA_Init();
 8001298:	f7ff ff46 	bl	8001128 <MX_DMA_Init>
  MX_TIM4_Init();
 800129c:	f000 fca8 	bl	8001bf0 <MX_TIM4_Init>
  MX_TIM3_Init();
 80012a0:	f000 fc52 	bl	8001b48 <MX_TIM3_Init>
  MX_ADC1_Init();
 80012a4:	f7ff fe6e 	bl	8000f84 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80012a8:	f000 fdd0 	bl	8001e4c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80012ac:	f000 fbe8 	bl	8001a80 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	btns[0].Port = BTN1_GPIO_Port;
 80012b0:	4b37      	ldr	r3, [pc, #220]	; (8001390 <main+0x108>)
 80012b2:	4a38      	ldr	r2, [pc, #224]	; (8001394 <main+0x10c>)
 80012b4:	601a      	str	r2, [r3, #0]
	btns[0].pin = BTN1_Pin;
 80012b6:	4b36      	ldr	r3, [pc, #216]	; (8001390 <main+0x108>)
 80012b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012bc:	809a      	strh	r2, [r3, #4]
	btns[0].estado = ESPERA;
 80012be:	4b34      	ldr	r3, [pc, #208]	; (8001390 <main+0x108>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	609a      	str	r2, [r3, #8]
	btns[0].flag = 0;
 80012c4:	4b32      	ldr	r3, [pc, #200]	; (8001390 <main+0x108>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	60da      	str	r2, [r3, #12]
	btns[1].Port = BTN2_GPIO_Port;
 80012ca:	4b31      	ldr	r3, [pc, #196]	; (8001390 <main+0x108>)
 80012cc:	4a31      	ldr	r2, [pc, #196]	; (8001394 <main+0x10c>)
 80012ce:	611a      	str	r2, [r3, #16]
	btns[1].pin = BTN2_Pin;
 80012d0:	4b2f      	ldr	r3, [pc, #188]	; (8001390 <main+0x108>)
 80012d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012d6:	829a      	strh	r2, [r3, #20]
	btns[1].estado = ESPERA;
 80012d8:	4b2d      	ldr	r3, [pc, #180]	; (8001390 <main+0x108>)
 80012da:	2200      	movs	r2, #0
 80012dc:	619a      	str	r2, [r3, #24]
	btns[1].flag = 0;
 80012de:	4b2c      	ldr	r3, [pc, #176]	; (8001390 <main+0x108>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	61da      	str	r2, [r3, #28]
	btns[2].Port = BTN3_GPIO_Port;
 80012e4:	4b2a      	ldr	r3, [pc, #168]	; (8001390 <main+0x108>)
 80012e6:	4a2b      	ldr	r2, [pc, #172]	; (8001394 <main+0x10c>)
 80012e8:	621a      	str	r2, [r3, #32]
	btns[2].pin = BTN3_Pin;
 80012ea:	4b29      	ldr	r3, [pc, #164]	; (8001390 <main+0x108>)
 80012ec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012f0:	849a      	strh	r2, [r3, #36]	; 0x24
	btns[2].estado = ESPERA;
 80012f2:	4b27      	ldr	r3, [pc, #156]	; (8001390 <main+0x108>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	629a      	str	r2, [r3, #40]	; 0x28
	btns[2].flag = 0;
 80012f8:	4b25      	ldr	r3, [pc, #148]	; (8001390 <main+0x108>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	62da      	str	r2, [r3, #44]	; 0x2c
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80012fe:	2108      	movs	r1, #8
 8001300:	4825      	ldr	r0, [pc, #148]	; (8001398 <main+0x110>)
 8001302:	f002 fc33 	bl	8003b6c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001306:	210c      	movs	r1, #12
 8001308:	4823      	ldr	r0, [pc, #140]	; (8001398 <main+0x110>)
 800130a:	f002 fc2f 	bl	8003b6c <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 800130e:	213c      	movs	r1, #60	; 0x3c
 8001310:	4822      	ldr	r0, [pc, #136]	; (800139c <main+0x114>)
 8001312:	f002 fd6f 	bl	8003df4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001316:	213c      	movs	r1, #60	; 0x3c
 8001318:	4821      	ldr	r0, [pc, #132]	; (80013a0 <main+0x118>)
 800131a:	f002 fd6b 	bl	8003df4 <HAL_TIM_Encoder_Start>
	HAL_GPIO_WritePin(STBY, GPIO_PIN_SET);
 800131e:	2201      	movs	r2, #1
 8001320:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001324:	481f      	ldr	r0, [pc, #124]	; (80013a4 <main+0x11c>)
 8001326:	f001 fee8 	bl	80030fa <HAL_GPIO_WritePin>
	TIM2->CCR3 = 15000;
 800132a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800132e:	f643 2298 	movw	r2, #15000	; 0x3a98
 8001332:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM2->CCR4 = 15000;
 8001334:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001338:	f643 2298 	movw	r2, #15000	; 0x3a98
 800133c:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_buf, ADC_BUF_LEN);
 800133e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001342:	4919      	ldr	r1, [pc, #100]	; (80013a8 <main+0x120>)
 8001344:	4819      	ldr	r0, [pc, #100]	; (80013ac <main+0x124>)
 8001346:	f000 ff57 	bl	80021f8 <HAL_ADC_Start_DMA>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 800134a:	2200      	movs	r2, #0
 800134c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001350:	4817      	ldr	r0, [pc, #92]	; (80013b0 <main+0x128>)
 8001352:	f001 fed2 	bl	80030fa <HAL_GPIO_WritePin>
	TIM3->CNT = 0;
 8001356:	4b17      	ldr	r3, [pc, #92]	; (80013b4 <main+0x12c>)
 8001358:	2200      	movs	r2, #0
 800135a:	625a      	str	r2, [r3, #36]	; 0x24
	TIM4->CNT = 0;
 800135c:	4b16      	ldr	r3, [pc, #88]	; (80013b8 <main+0x130>)
 800135e:	2200      	movs	r2, #0
 8001360:	625a      	str	r2, [r3, #36]	; 0x24
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		//mainMachine();
		//intUartSend((int) calcularDistancia(TIM3->CNT) >> 1);
		runMotor(ADELANTE, MOTOR_A);
 8001362:	2100      	movs	r1, #0
 8001364:	2000      	movs	r0, #0
 8001366:	f000 fa0b 	bl	8001780 <runMotor>
		 runMotor(ADELANTE, MOTOR_B);
 800136a:	2101      	movs	r1, #1
 800136c:	2000      	movs	r0, #0
 800136e:	f000 fa07 	bl	8001780 <runMotor>
		 intUartSend(TIM4->CNT);
 8001372:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <main+0x130>)
 8001374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001376:	4618      	mov	r0, r3
 8001378:	f000 f87c 	bl	8001474 <intUartSend>
		btnMachine(0);
 800137c:	2000      	movs	r0, #0
 800137e:	f000 f94d 	bl	800161c <btnMachine>
		btnMachine(1);
 8001382:	2001      	movs	r0, #1
 8001384:	f000 f94a 	bl	800161c <btnMachine>
		btnMachine(2);
 8001388:	2002      	movs	r0, #2
 800138a:	f000 f947 	bl	800161c <btnMachine>
		runMotor(ADELANTE, MOTOR_A);
 800138e:	e7e8      	b.n	8001362 <main+0xda>
 8001390:	200011c4 	.word	0x200011c4
 8001394:	40010c00 	.word	0x40010c00
 8001398:	200011f4 	.word	0x200011f4
 800139c:	20001284 	.word	0x20001284
 80013a0:	2000123c 	.word	0x2000123c
 80013a4:	40010800 	.word	0x40010800
 80013a8:	20000100 	.word	0x20000100
 80013ac:	2000008c 	.word	0x2000008c
 80013b0:	40011000 	.word	0x40011000
 80013b4:	40000400 	.word	0x40000400
 80013b8:	40000800 	.word	0x40000800

080013bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b094      	sub	sp, #80	; 0x50
 80013c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013c6:	2228      	movs	r2, #40	; 0x28
 80013c8:	2100      	movs	r1, #0
 80013ca:	4618      	mov	r0, r3
 80013cc:	f004 f990 	bl	80056f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013d0:	f107 0314 	add.w	r3, r7, #20
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
 80013de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013e0:	1d3b      	adds	r3, r7, #4
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	605a      	str	r2, [r3, #4]
 80013e8:	609a      	str	r2, [r3, #8]
 80013ea:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013ec:	2301      	movs	r3, #1
 80013ee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80013f6:	2300      	movs	r3, #0
 80013f8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013fa:	2301      	movs	r3, #1
 80013fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013fe:	2302      	movs	r3, #2
 8001400:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001402:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001406:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001408:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800140c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800140e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001412:	4618      	mov	r0, r3
 8001414:	f001 fe8a 	bl	800312c <HAL_RCC_OscConfig>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800141e:	f000 f9a9 	bl	8001774 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001422:	230f      	movs	r3, #15
 8001424:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001426:	2302      	movs	r3, #2
 8001428:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800142a:	2300      	movs	r3, #0
 800142c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800142e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001432:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001434:	2300      	movs	r3, #0
 8001436:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001438:	f107 0314 	add.w	r3, r7, #20
 800143c:	2102      	movs	r1, #2
 800143e:	4618      	mov	r0, r3
 8001440:	f002 f8f6 	bl	8003630 <HAL_RCC_ClockConfig>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800144a:	f000 f993 	bl	8001774 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800144e:	2302      	movs	r3, #2
 8001450:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001452:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001456:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001458:	1d3b      	adds	r3, r7, #4
 800145a:	4618      	mov	r0, r3
 800145c:	f002 fa80 	bl	8003960 <HAL_RCCEx_PeriphCLKConfig>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001466:	f000 f985 	bl	8001774 <Error_Handler>
  }
}
 800146a:	bf00      	nop
 800146c:	3750      	adds	r7, #80	; 0x50
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
	...

08001474 <intUartSend>:

/* USER CODE BEGIN 4 */
void intUartSend(int entero) {
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
	int m;
	int c;
	int d;
	int u;

	m = entero / 1000;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	4a30      	ldr	r2, [pc, #192]	; (8001540 <intUartSend+0xcc>)
 8001480:	fb82 1203 	smull	r1, r2, r2, r3
 8001484:	1192      	asrs	r2, r2, #6
 8001486:	17db      	asrs	r3, r3, #31
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	617b      	str	r3, [r7, #20]
	c = entero / 100 - m * 10;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	4a2d      	ldr	r2, [pc, #180]	; (8001544 <intUartSend+0xd0>)
 8001490:	fb82 1203 	smull	r1, r2, r2, r3
 8001494:	1152      	asrs	r2, r2, #5
 8001496:	17db      	asrs	r3, r3, #31
 8001498:	1ad2      	subs	r2, r2, r3
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	f06f 0109 	mvn.w	r1, #9
 80014a0:	fb01 f303 	mul.w	r3, r1, r3
 80014a4:	4413      	add	r3, r2
 80014a6:	613b      	str	r3, [r7, #16]
	d = entero / 10 - (m * 100 + c * 10);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	4a27      	ldr	r2, [pc, #156]	; (8001548 <intUartSend+0xd4>)
 80014ac:	fb82 1203 	smull	r1, r2, r2, r3
 80014b0:	1092      	asrs	r2, r2, #2
 80014b2:	17db      	asrs	r3, r3, #31
 80014b4:	1ad1      	subs	r1, r2, r3
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	2264      	movs	r2, #100	; 0x64
 80014ba:	fb02 f003 	mul.w	r0, r2, r3
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	4613      	mov	r3, r2
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	4413      	add	r3, r2
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	4403      	add	r3, r0
 80014ca:	1acb      	subs	r3, r1, r3
 80014cc:	60fb      	str	r3, [r7, #12]
	u = entero - (m * 1000 + c * 100 + d * 10);
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80014d4:	fb03 f202 	mul.w	r2, r3, r2
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	2164      	movs	r1, #100	; 0x64
 80014dc:	fb01 f303 	mul.w	r3, r1, r3
 80014e0:	18d1      	adds	r1, r2, r3
 80014e2:	68fa      	ldr	r2, [r7, #12]
 80014e4:	4613      	mov	r3, r2
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	4413      	add	r3, r2
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	440b      	add	r3, r1
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	60bb      	str	r3, [r7, #8]

	TX_BUFFER[0] = m + '0';
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	3330      	adds	r3, #48	; 0x30
 80014fa:	b2da      	uxtb	r2, r3
 80014fc:	4b13      	ldr	r3, [pc, #76]	; (800154c <intUartSend+0xd8>)
 80014fe:	701a      	strb	r2, [r3, #0]
	TX_BUFFER[1] = c + '0';
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	b2db      	uxtb	r3, r3
 8001504:	3330      	adds	r3, #48	; 0x30
 8001506:	b2da      	uxtb	r2, r3
 8001508:	4b10      	ldr	r3, [pc, #64]	; (800154c <intUartSend+0xd8>)
 800150a:	705a      	strb	r2, [r3, #1]
	TX_BUFFER[2] = d + '0';
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	b2db      	uxtb	r3, r3
 8001510:	3330      	adds	r3, #48	; 0x30
 8001512:	b2da      	uxtb	r2, r3
 8001514:	4b0d      	ldr	r3, [pc, #52]	; (800154c <intUartSend+0xd8>)
 8001516:	709a      	strb	r2, [r3, #2]
	TX_BUFFER[3] = u + '0';
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	b2db      	uxtb	r3, r3
 800151c:	3330      	adds	r3, #48	; 0x30
 800151e:	b2da      	uxtb	r2, r3
 8001520:	4b0a      	ldr	r3, [pc, #40]	; (800154c <intUartSend+0xd8>)
 8001522:	70da      	strb	r2, [r3, #3]
	TX_BUFFER[4] = '\n';
 8001524:	4b09      	ldr	r3, [pc, #36]	; (800154c <intUartSend+0xd8>)
 8001526:	220a      	movs	r2, #10
 8001528:	711a      	strb	r2, [r3, #4]
	HAL_UART_Transmit(&huart1, TX_BUFFER, 5, 100);
 800152a:	2364      	movs	r3, #100	; 0x64
 800152c:	2205      	movs	r2, #5
 800152e:	4907      	ldr	r1, [pc, #28]	; (800154c <intUartSend+0xd8>)
 8001530:	4807      	ldr	r0, [pc, #28]	; (8001550 <intUartSend+0xdc>)
 8001532:	f003 f864 	bl	80045fe <HAL_UART_Transmit>
}
 8001536:	bf00      	nop
 8001538:	3718      	adds	r7, #24
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	10624dd3 	.word	0x10624dd3
 8001544:	51eb851f 	.word	0x51eb851f
 8001548:	66666667 	.word	0x66666667
 800154c:	200011b8 	.word	0x200011b8
 8001550:	200012cc 	.word	0x200012cc

08001554 <HAL_ADC_ConvCpltCallback>:
		HAL_UART_Transmit(&huart1, TX_BUFFER, 1, 100);
	}
}

// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 10; i++) {
 800155c:	2300      	movs	r3, #0
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	e029      	b.n	80015b6 <HAL_ADC_ConvCpltCallback+0x62>
		CNY70[i] = adc_buf[i * 4];
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	4a27      	ldr	r2, [pc, #156]	; (8001604 <HAL_ADC_ConvCpltCallback+0xb0>)
 8001568:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800156c:	4926      	ldr	r1, [pc, #152]	; (8001608 <HAL_ADC_ConvCpltCallback+0xb4>)
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SHARP_1[i] = adc_buf[i * 4 + 1];
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	3301      	adds	r3, #1
 800157a:	4a22      	ldr	r2, [pc, #136]	; (8001604 <HAL_ADC_ConvCpltCallback+0xb0>)
 800157c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001580:	4922      	ldr	r1, [pc, #136]	; (800160c <HAL_ADC_ConvCpltCallback+0xb8>)
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SHARP_2[i] = adc_buf[i * 4 + 2];
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	3302      	adds	r3, #2
 800158e:	4a1d      	ldr	r2, [pc, #116]	; (8001604 <HAL_ADC_ConvCpltCallback+0xb0>)
 8001590:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001594:	491e      	ldr	r1, [pc, #120]	; (8001610 <HAL_ADC_ConvCpltCallback+0xbc>)
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SHARP_3[i] = adc_buf[i * 4 + 3];
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	3303      	adds	r3, #3
 80015a2:	4a18      	ldr	r2, [pc, #96]	; (8001604 <HAL_ADC_ConvCpltCallback+0xb0>)
 80015a4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80015a8:	491a      	ldr	r1, [pc, #104]	; (8001614 <HAL_ADC_ConvCpltCallback+0xc0>)
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < 10; i++) {
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	3301      	adds	r3, #1
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	2b09      	cmp	r3, #9
 80015ba:	ddd2      	ble.n	8001562 <HAL_ADC_ConvCpltCallback+0xe>
	}
	Sensors[0] = lecturaCNY70(10, CNY70);
 80015bc:	4912      	ldr	r1, [pc, #72]	; (8001608 <HAL_ADC_ConvCpltCallback+0xb4>)
 80015be:	200a      	movs	r0, #10
 80015c0:	f000 f9ca 	bl	8001958 <lecturaCNY70>
 80015c4:	4603      	mov	r3, r0
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff fb38 	bl	8000c3c <__aeabi_i2f>
 80015cc:	4603      	mov	r3, r0
 80015ce:	4a12      	ldr	r2, [pc, #72]	; (8001618 <HAL_ADC_ConvCpltCallback+0xc4>)
 80015d0:	6013      	str	r3, [r2, #0]
	Sensors[1] = lecSensor(10, SHARP_1);
 80015d2:	490e      	ldr	r1, [pc, #56]	; (800160c <HAL_ADC_ConvCpltCallback+0xb8>)
 80015d4:	200a      	movs	r0, #10
 80015d6:	f000 f93f 	bl	8001858 <lecSensor>
 80015da:	4603      	mov	r3, r0
 80015dc:	4a0e      	ldr	r2, [pc, #56]	; (8001618 <HAL_ADC_ConvCpltCallback+0xc4>)
 80015de:	6053      	str	r3, [r2, #4]
	Sensors[2] = lecSensor(10, SHARP_2);
 80015e0:	490b      	ldr	r1, [pc, #44]	; (8001610 <HAL_ADC_ConvCpltCallback+0xbc>)
 80015e2:	200a      	movs	r0, #10
 80015e4:	f000 f938 	bl	8001858 <lecSensor>
 80015e8:	4603      	mov	r3, r0
 80015ea:	4a0b      	ldr	r2, [pc, #44]	; (8001618 <HAL_ADC_ConvCpltCallback+0xc4>)
 80015ec:	6093      	str	r3, [r2, #8]
	Sensors[3] = lecSensor(10, SHARP_3);
 80015ee:	4909      	ldr	r1, [pc, #36]	; (8001614 <HAL_ADC_ConvCpltCallback+0xc0>)
 80015f0:	200a      	movs	r0, #10
 80015f2:	f000 f931 	bl	8001858 <lecSensor>
 80015f6:	4603      	mov	r3, r0
 80015f8:	4a07      	ldr	r2, [pc, #28]	; (8001618 <HAL_ADC_ConvCpltCallback+0xc4>)
 80015fa:	60d3      	str	r3, [r2, #12]

}
 80015fc:	bf00      	nop
 80015fe:	3710      	adds	r7, #16
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	20000100 	.word	0x20000100
 8001608:	20001100 	.word	0x20001100
 800160c:	20001128 	.word	0x20001128
 8001610:	20001150 	.word	0x20001150
 8001614:	20001178 	.word	0x20001178
 8001618:	200011a0 	.word	0x200011a0

0800161c <btnMachine>:
void runForward() {
	runMotor(ADELANTE, MOTOR_A);
	runMotor(ADELANTE, MOTOR_B);
}

void btnMachine(int index) {
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
	switch (btns[index].estado) {
 8001624:	4a50      	ldr	r2, [pc, #320]	; (8001768 <btnMachine+0x14c>)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	011b      	lsls	r3, r3, #4
 800162a:	4413      	add	r3, r2
 800162c:	3308      	adds	r3, #8
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2b02      	cmp	r3, #2
 8001632:	d069      	beq.n	8001708 <btnMachine+0xec>
 8001634:	2b02      	cmp	r3, #2
 8001636:	f300 8092 	bgt.w	800175e <btnMachine+0x142>
 800163a:	2b00      	cmp	r3, #0
 800163c:	d002      	beq.n	8001644 <btnMachine+0x28>
 800163e:	2b01      	cmp	r3, #1
 8001640:	d02c      	beq.n	800169c <btnMachine+0x80>
			btns[index].flag = 1;
			btns[index].estado = ESPERA;
		}
		break;
	}
}
 8001642:	e08c      	b.n	800175e <btnMachine+0x142>
		btns[index].flag = 0;
 8001644:	4a48      	ldr	r2, [pc, #288]	; (8001768 <btnMachine+0x14c>)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	011b      	lsls	r3, r3, #4
 800164a:	4413      	add	r3, r2
 800164c:	330c      	adds	r3, #12
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]
		lecturaBtn = HAL_GPIO_ReadPin(btns[index].Port, btns[index].pin);
 8001652:	4a45      	ldr	r2, [pc, #276]	; (8001768 <btnMachine+0x14c>)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	011b      	lsls	r3, r3, #4
 8001658:	4413      	add	r3, r2
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	4942      	ldr	r1, [pc, #264]	; (8001768 <btnMachine+0x14c>)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	011b      	lsls	r3, r3, #4
 8001662:	440b      	add	r3, r1
 8001664:	3304      	adds	r3, #4
 8001666:	881b      	ldrh	r3, [r3, #0]
 8001668:	4619      	mov	r1, r3
 800166a:	4610      	mov	r0, r2
 800166c:	f001 fd2e 	bl	80030cc <HAL_GPIO_ReadPin>
 8001670:	4603      	mov	r3, r0
 8001672:	461a      	mov	r2, r3
 8001674:	4b3d      	ldr	r3, [pc, #244]	; (800176c <btnMachine+0x150>)
 8001676:	601a      	str	r2, [r3, #0]
		if (lecturaBtn == 0) {
 8001678:	4b3c      	ldr	r3, [pc, #240]	; (800176c <btnMachine+0x150>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d169      	bne.n	8001754 <btnMachine+0x138>
			ticks = HAL_GetTick();
 8001680:	f000 fcd8 	bl	8002034 <HAL_GetTick>
 8001684:	4603      	mov	r3, r0
 8001686:	461a      	mov	r2, r3
 8001688:	4b39      	ldr	r3, [pc, #228]	; (8001770 <btnMachine+0x154>)
 800168a:	601a      	str	r2, [r3, #0]
			btns[index].estado = CONFIRMACION;
 800168c:	4a36      	ldr	r2, [pc, #216]	; (8001768 <btnMachine+0x14c>)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	011b      	lsls	r3, r3, #4
 8001692:	4413      	add	r3, r2
 8001694:	3308      	adds	r3, #8
 8001696:	2201      	movs	r2, #1
 8001698:	601a      	str	r2, [r3, #0]
		break;
 800169a:	e05b      	b.n	8001754 <btnMachine+0x138>
		lecturaBtn = HAL_GPIO_ReadPin(btns[index].Port, btns[index].pin);
 800169c:	4a32      	ldr	r2, [pc, #200]	; (8001768 <btnMachine+0x14c>)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	011b      	lsls	r3, r3, #4
 80016a2:	4413      	add	r3, r2
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	4930      	ldr	r1, [pc, #192]	; (8001768 <btnMachine+0x14c>)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	011b      	lsls	r3, r3, #4
 80016ac:	440b      	add	r3, r1
 80016ae:	3304      	adds	r3, #4
 80016b0:	881b      	ldrh	r3, [r3, #0]
 80016b2:	4619      	mov	r1, r3
 80016b4:	4610      	mov	r0, r2
 80016b6:	f001 fd09 	bl	80030cc <HAL_GPIO_ReadPin>
 80016ba:	4603      	mov	r3, r0
 80016bc:	461a      	mov	r2, r3
 80016be:	4b2b      	ldr	r3, [pc, #172]	; (800176c <btnMachine+0x150>)
 80016c0:	601a      	str	r2, [r3, #0]
		if (lecturaBtn == 0 && HAL_GetTick() >= ticks + TICKS_BTN) {
 80016c2:	4b2a      	ldr	r3, [pc, #168]	; (800176c <btnMachine+0x150>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d10e      	bne.n	80016e8 <btnMachine+0xcc>
 80016ca:	f000 fcb3 	bl	8002034 <HAL_GetTick>
 80016ce:	4602      	mov	r2, r0
 80016d0:	4b27      	ldr	r3, [pc, #156]	; (8001770 <btnMachine+0x154>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	3319      	adds	r3, #25
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d306      	bcc.n	80016e8 <btnMachine+0xcc>
			btns[index].estado = LIBERACION;
 80016da:	4a23      	ldr	r2, [pc, #140]	; (8001768 <btnMachine+0x14c>)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	011b      	lsls	r3, r3, #4
 80016e0:	4413      	add	r3, r2
 80016e2:	3308      	adds	r3, #8
 80016e4:	2202      	movs	r2, #2
 80016e6:	601a      	str	r2, [r3, #0]
		if (lecturaBtn == 1 && ticks < TICKS_BTN) {
 80016e8:	4b20      	ldr	r3, [pc, #128]	; (800176c <btnMachine+0x150>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d133      	bne.n	8001758 <btnMachine+0x13c>
 80016f0:	4b1f      	ldr	r3, [pc, #124]	; (8001770 <btnMachine+0x154>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2b18      	cmp	r3, #24
 80016f6:	dc2f      	bgt.n	8001758 <btnMachine+0x13c>
			btns[index].estado = ESPERA;
 80016f8:	4a1b      	ldr	r2, [pc, #108]	; (8001768 <btnMachine+0x14c>)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	011b      	lsls	r3, r3, #4
 80016fe:	4413      	add	r3, r2
 8001700:	3308      	adds	r3, #8
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
		break;
 8001706:	e027      	b.n	8001758 <btnMachine+0x13c>
		lecturaBtn = HAL_GPIO_ReadPin(btns[index].Port, btns[index].pin);
 8001708:	4a17      	ldr	r2, [pc, #92]	; (8001768 <btnMachine+0x14c>)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	011b      	lsls	r3, r3, #4
 800170e:	4413      	add	r3, r2
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	4915      	ldr	r1, [pc, #84]	; (8001768 <btnMachine+0x14c>)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	011b      	lsls	r3, r3, #4
 8001718:	440b      	add	r3, r1
 800171a:	3304      	adds	r3, #4
 800171c:	881b      	ldrh	r3, [r3, #0]
 800171e:	4619      	mov	r1, r3
 8001720:	4610      	mov	r0, r2
 8001722:	f001 fcd3 	bl	80030cc <HAL_GPIO_ReadPin>
 8001726:	4603      	mov	r3, r0
 8001728:	461a      	mov	r2, r3
 800172a:	4b10      	ldr	r3, [pc, #64]	; (800176c <btnMachine+0x150>)
 800172c:	601a      	str	r2, [r3, #0]
		if (lecturaBtn == 1) {
 800172e:	4b0f      	ldr	r3, [pc, #60]	; (800176c <btnMachine+0x150>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d112      	bne.n	800175c <btnMachine+0x140>
			btns[index].flag = 1;
 8001736:	4a0c      	ldr	r2, [pc, #48]	; (8001768 <btnMachine+0x14c>)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	011b      	lsls	r3, r3, #4
 800173c:	4413      	add	r3, r2
 800173e:	330c      	adds	r3, #12
 8001740:	2201      	movs	r2, #1
 8001742:	601a      	str	r2, [r3, #0]
			btns[index].estado = ESPERA;
 8001744:	4a08      	ldr	r2, [pc, #32]	; (8001768 <btnMachine+0x14c>)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	011b      	lsls	r3, r3, #4
 800174a:	4413      	add	r3, r2
 800174c:	3308      	adds	r3, #8
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
		break;
 8001752:	e003      	b.n	800175c <btnMachine+0x140>
		break;
 8001754:	bf00      	nop
 8001756:	e002      	b.n	800175e <btnMachine+0x142>
		break;
 8001758:	bf00      	nop
 800175a:	e000      	b.n	800175e <btnMachine+0x142>
		break;
 800175c:	bf00      	nop
}
 800175e:	bf00      	nop
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	200011c4 	.word	0x200011c4
 800176c:	200011b4 	.word	0x200011b4
 8001770:	200011b0 	.word	0x200011b0

08001774 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001778:	b672      	cpsid	i
}
 800177a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800177c:	e7fe      	b.n	800177c <Error_Handler+0x8>
	...

08001780 <runMotor>:
	} else {
		TIM4->CCR3 = power;
	}
}

void runMotor(int dir, int motor) {
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]
	switch (dir) {
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2b05      	cmp	r3, #5
 800178e:	d03f      	beq.n	8001810 <runMotor+0x90>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2b05      	cmp	r3, #5
 8001794:	dc57      	bgt.n	8001846 <runMotor+0xc6>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d003      	beq.n	80017a4 <runMotor+0x24>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d01b      	beq.n	80017da <runMotor+0x5a>
			HAL_GPIO_WritePin(BIN1, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(BIN2, GPIO_PIN_RESET);
		}
		break;
	}
}
 80017a2:	e050      	b.n	8001846 <runMotor+0xc6>
		if (motor == MOTOR_A) {
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d10a      	bne.n	80017c0 <runMotor+0x40>
			HAL_GPIO_WritePin(AIN1, GPIO_PIN_RESET);
 80017aa:	2200      	movs	r2, #0
 80017ac:	2108      	movs	r1, #8
 80017ae:	4828      	ldr	r0, [pc, #160]	; (8001850 <runMotor+0xd0>)
 80017b0:	f001 fca3 	bl	80030fa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(AIN2, GPIO_PIN_SET);
 80017b4:	2201      	movs	r2, #1
 80017b6:	2110      	movs	r1, #16
 80017b8:	4825      	ldr	r0, [pc, #148]	; (8001850 <runMotor+0xd0>)
 80017ba:	f001 fc9e 	bl	80030fa <HAL_GPIO_WritePin>
		break;
 80017be:	e042      	b.n	8001846 <runMotor+0xc6>
			HAL_GPIO_WritePin(BIN1, GPIO_PIN_RESET);
 80017c0:	2200      	movs	r2, #0
 80017c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017c6:	4823      	ldr	r0, [pc, #140]	; (8001854 <runMotor+0xd4>)
 80017c8:	f001 fc97 	bl	80030fa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BIN2, GPIO_PIN_SET);
 80017cc:	2201      	movs	r2, #1
 80017ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017d2:	4820      	ldr	r0, [pc, #128]	; (8001854 <runMotor+0xd4>)
 80017d4:	f001 fc91 	bl	80030fa <HAL_GPIO_WritePin>
		break;
 80017d8:	e035      	b.n	8001846 <runMotor+0xc6>
		if (motor == MOTOR_A) {
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d10a      	bne.n	80017f6 <runMotor+0x76>
			HAL_GPIO_WritePin(AIN1, GPIO_PIN_SET);
 80017e0:	2201      	movs	r2, #1
 80017e2:	2108      	movs	r1, #8
 80017e4:	481a      	ldr	r0, [pc, #104]	; (8001850 <runMotor+0xd0>)
 80017e6:	f001 fc88 	bl	80030fa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(AIN2, GPIO_PIN_RESET);
 80017ea:	2200      	movs	r2, #0
 80017ec:	2110      	movs	r1, #16
 80017ee:	4818      	ldr	r0, [pc, #96]	; (8001850 <runMotor+0xd0>)
 80017f0:	f001 fc83 	bl	80030fa <HAL_GPIO_WritePin>
		break;
 80017f4:	e027      	b.n	8001846 <runMotor+0xc6>
			HAL_GPIO_WritePin(BIN1, GPIO_PIN_SET);
 80017f6:	2201      	movs	r2, #1
 80017f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017fc:	4815      	ldr	r0, [pc, #84]	; (8001854 <runMotor+0xd4>)
 80017fe:	f001 fc7c 	bl	80030fa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BIN2, GPIO_PIN_RESET);
 8001802:	2200      	movs	r2, #0
 8001804:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001808:	4812      	ldr	r0, [pc, #72]	; (8001854 <runMotor+0xd4>)
 800180a:	f001 fc76 	bl	80030fa <HAL_GPIO_WritePin>
		break;
 800180e:	e01a      	b.n	8001846 <runMotor+0xc6>
		if (motor == MOTOR_A) {
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d10a      	bne.n	800182c <runMotor+0xac>
			HAL_GPIO_WritePin(AIN1, GPIO_PIN_RESET);
 8001816:	2200      	movs	r2, #0
 8001818:	2108      	movs	r1, #8
 800181a:	480d      	ldr	r0, [pc, #52]	; (8001850 <runMotor+0xd0>)
 800181c:	f001 fc6d 	bl	80030fa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(AIN2, GPIO_PIN_RESET);
 8001820:	2200      	movs	r2, #0
 8001822:	2110      	movs	r1, #16
 8001824:	480a      	ldr	r0, [pc, #40]	; (8001850 <runMotor+0xd0>)
 8001826:	f001 fc68 	bl	80030fa <HAL_GPIO_WritePin>
		break;
 800182a:	e00b      	b.n	8001844 <runMotor+0xc4>
			HAL_GPIO_WritePin(BIN1, GPIO_PIN_RESET);
 800182c:	2200      	movs	r2, #0
 800182e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001832:	4808      	ldr	r0, [pc, #32]	; (8001854 <runMotor+0xd4>)
 8001834:	f001 fc61 	bl	80030fa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BIN2, GPIO_PIN_RESET);
 8001838:	2200      	movs	r2, #0
 800183a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800183e:	4805      	ldr	r0, [pc, #20]	; (8001854 <runMotor+0xd4>)
 8001840:	f001 fc5b 	bl	80030fa <HAL_GPIO_WritePin>
		break;
 8001844:	bf00      	nop
}
 8001846:	bf00      	nop
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40010c00 	.word	0x40010c00
 8001854:	40010800 	.word	0x40010800

08001858 <lecSensor>:
		break;
	}
	return 15;
}

float lecSensor(int n, uint32_t values[10]) {
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
	long suma = 0;
 8001862:	2300      	movs	r3, #0
 8001864:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < n; i++) {
 8001866:	2300      	movs	r3, #0
 8001868:	613b      	str	r3, [r7, #16]
 800186a:	e00a      	b.n	8001882 <lecSensor+0x2a>
		suma = suma + values[i];
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	683a      	ldr	r2, [r7, #0]
 8001872:	4413      	add	r3, r2
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	4413      	add	r3, r2
 800187a:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < n; i++) {
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	3301      	adds	r3, #1
 8001880:	613b      	str	r3, [r7, #16]
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	429a      	cmp	r2, r3
 8001888:	dbf0      	blt.n	800186c <lecSensor+0x14>
	}
	float adc = suma / n;
 800188a:	697a      	ldr	r2, [r7, #20]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001892:	4618      	mov	r0, r3
 8001894:	f7ff f9d2 	bl	8000c3c <__aeabi_i2f>
 8001898:	4603      	mov	r3, r0
 800189a:	60bb      	str	r3, [r7, #8]
	float volts = adc * 0.0008056640; // value from sensor * (5/1024)
 800189c:	68b8      	ldr	r0, [r7, #8]
 800189e:	f7fe fdbb 	bl	8000418 <__aeabi_f2d>
 80018a2:	a323      	add	r3, pc, #140	; (adr r3, 8001930 <lecSensor+0xd8>)
 80018a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a8:	f7fe fe0e 	bl	80004c8 <__aeabi_dmul>
 80018ac:	4602      	mov	r2, r0
 80018ae:	460b      	mov	r3, r1
 80018b0:	4610      	mov	r0, r2
 80018b2:	4619      	mov	r1, r3
 80018b4:	f7ff f8b8 	bl	8000a28 <__aeabi_d2f>
 80018b8:	4603      	mov	r3, r0
 80018ba:	60fb      	str	r3, [r7, #12]
	if (volts <= 0.35)
 80018bc:	68f8      	ldr	r0, [r7, #12]
 80018be:	f7fe fdab 	bl	8000418 <__aeabi_f2d>
 80018c2:	a31d      	add	r3, pc, #116	; (adr r3, 8001938 <lecSensor+0xe0>)
 80018c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c8:	f7ff f87a 	bl	80009c0 <__aeabi_dcmple>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <lecSensor+0x7e>
		volts = 0.35;
 80018d2:	4b1d      	ldr	r3, [pc, #116]	; (8001948 <lecSensor+0xf0>)
 80018d4:	60fb      	str	r3, [r7, #12]
	volts = pow(volts - 0.3, 0.25);/*convertimos a cm con un aproximacion grafica*/
 80018d6:	68f8      	ldr	r0, [r7, #12]
 80018d8:	f7fe fd9e 	bl	8000418 <__aeabi_f2d>
 80018dc:	a318      	add	r3, pc, #96	; (adr r3, 8001940 <lecSensor+0xe8>)
 80018de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e2:	f7fe fc39 	bl	8000158 <__aeabi_dsub>
 80018e6:	4602      	mov	r2, r0
 80018e8:	460b      	mov	r3, r1
 80018ea:	4610      	mov	r0, r2
 80018ec:	4619      	mov	r1, r3
 80018ee:	f04f 0200 	mov.w	r2, #0
 80018f2:	4b16      	ldr	r3, [pc, #88]	; (800194c <lecSensor+0xf4>)
 80018f4:	f002 ffee 	bl	80048d4 <pow>
 80018f8:	4602      	mov	r2, r0
 80018fa:	460b      	mov	r3, r1
 80018fc:	4610      	mov	r0, r2
 80018fe:	4619      	mov	r1, r3
 8001900:	f7ff f892 	bl	8000a28 <__aeabi_d2f>
 8001904:	4603      	mov	r3, r0
 8001906:	60fb      	str	r3, [r7, #12]
	volts = 27.5 / volts; /*no preguntar por los valores*/
 8001908:	68f9      	ldr	r1, [r7, #12]
 800190a:	4811      	ldr	r0, [pc, #68]	; (8001950 <lecSensor+0xf8>)
 800190c:	f7ff fa9e 	bl	8000e4c <__aeabi_fdiv>
 8001910:	4603      	mov	r3, r0
 8001912:	60fb      	str	r3, [r7, #12]
	volts -= 18;
 8001914:	490f      	ldr	r1, [pc, #60]	; (8001954 <lecSensor+0xfc>)
 8001916:	68f8      	ldr	r0, [r7, #12]
 8001918:	f7ff f8da 	bl	8000ad0 <__aeabi_fsub>
 800191c:	4603      	mov	r3, r0
 800191e:	60fb      	str	r3, [r7, #12]

	return volts;
 8001920:	68fb      	ldr	r3, [r7, #12]

}
 8001922:	4618      	mov	r0, r3
 8001924:	3718      	adds	r7, #24
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	f3af 8000 	nop.w
 8001930:	440a4e96 	.word	0x440a4e96
 8001934:	3f4a6666 	.word	0x3f4a6666
 8001938:	66666666 	.word	0x66666666
 800193c:	3fd66666 	.word	0x3fd66666
 8001940:	33333333 	.word	0x33333333
 8001944:	3fd33333 	.word	0x3fd33333
 8001948:	3eb33333 	.word	0x3eb33333
 800194c:	3fd00000 	.word	0x3fd00000
 8001950:	41dc0000 	.word	0x41dc0000
 8001954:	41900000 	.word	0x41900000

08001958 <lecturaCNY70>:

int lecturaCNY70(int n, uint32_t values[10]) {
 8001958:	b480      	push	{r7}
 800195a:	b087      	sub	sp, #28
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
	long suma = 0;
 8001962:	2300      	movs	r3, #0
 8001964:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < n; i++) {
 8001966:	2300      	movs	r3, #0
 8001968:	613b      	str	r3, [r7, #16]
 800196a:	e00a      	b.n	8001982 <lecturaCNY70+0x2a>
		suma = suma + values[i];
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	683a      	ldr	r2, [r7, #0]
 8001972:	4413      	add	r3, r2
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	4413      	add	r3, r2
 800197a:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < n; i++) {
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	3301      	adds	r3, #1
 8001980:	613b      	str	r3, [r7, #16]
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	429a      	cmp	r2, r3
 8001988:	dbf0      	blt.n	800196c <lecturaCNY70+0x14>
	}
	int adc = (suma / n);
 800198a:	697a      	ldr	r2, [r7, #20]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001992:	60fb      	str	r3, [r7, #12]
	if (adc < 1000) {
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800199a:	da01      	bge.n	80019a0 <lecturaCNY70+0x48>
		return BLANCO;
 800199c:	2300      	movs	r3, #0
 800199e:	e000      	b.n	80019a2 <lecturaCNY70+0x4a>
	} else {
		return NEGRO;
 80019a0:	2301      	movs	r3, #1
	}
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	371c      	adds	r7, #28
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bc80      	pop	{r7}
 80019aa:	4770      	bx	lr

080019ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019b2:	4b15      	ldr	r3, [pc, #84]	; (8001a08 <HAL_MspInit+0x5c>)
 80019b4:	699b      	ldr	r3, [r3, #24]
 80019b6:	4a14      	ldr	r2, [pc, #80]	; (8001a08 <HAL_MspInit+0x5c>)
 80019b8:	f043 0301 	orr.w	r3, r3, #1
 80019bc:	6193      	str	r3, [r2, #24]
 80019be:	4b12      	ldr	r3, [pc, #72]	; (8001a08 <HAL_MspInit+0x5c>)
 80019c0:	699b      	ldr	r3, [r3, #24]
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	60bb      	str	r3, [r7, #8]
 80019c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ca:	4b0f      	ldr	r3, [pc, #60]	; (8001a08 <HAL_MspInit+0x5c>)
 80019cc:	69db      	ldr	r3, [r3, #28]
 80019ce:	4a0e      	ldr	r2, [pc, #56]	; (8001a08 <HAL_MspInit+0x5c>)
 80019d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019d4:	61d3      	str	r3, [r2, #28]
 80019d6:	4b0c      	ldr	r3, [pc, #48]	; (8001a08 <HAL_MspInit+0x5c>)
 80019d8:	69db      	ldr	r3, [r3, #28]
 80019da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019de:	607b      	str	r3, [r7, #4]
 80019e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80019e2:	4b0a      	ldr	r3, [pc, #40]	; (8001a0c <HAL_MspInit+0x60>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	4a04      	ldr	r2, [pc, #16]	; (8001a0c <HAL_MspInit+0x60>)
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019fe:	bf00      	nop
 8001a00:	3714      	adds	r7, #20
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bc80      	pop	{r7}
 8001a06:	4770      	bx	lr
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	40010000 	.word	0x40010000

08001a10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a14:	e7fe      	b.n	8001a14 <NMI_Handler+0x4>

08001a16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a16:	b480      	push	{r7}
 8001a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a1a:	e7fe      	b.n	8001a1a <HardFault_Handler+0x4>

08001a1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a20:	e7fe      	b.n	8001a20 <MemManage_Handler+0x4>

08001a22 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a22:	b480      	push	{r7}
 8001a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a26:	e7fe      	b.n	8001a26 <BusFault_Handler+0x4>

08001a28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a2c:	e7fe      	b.n	8001a2c <UsageFault_Handler+0x4>

08001a2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a32:	bf00      	nop
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bc80      	pop	{r7}
 8001a38:	4770      	bx	lr

08001a3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bc80      	pop	{r7}
 8001a44:	4770      	bx	lr

08001a46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a46:	b480      	push	{r7}
 8001a48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a4a:	bf00      	nop
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bc80      	pop	{r7}
 8001a50:	4770      	bx	lr

08001a52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a56:	f000 fadb 	bl	8002010 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}
	...

08001a60 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001a64:	4802      	ldr	r0, [pc, #8]	; (8001a70 <DMA1_Channel1_IRQHandler+0x10>)
 8001a66:	f001 f879 	bl	8002b5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	200000bc 	.word	0x200000bc

08001a74 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a78:	bf00      	nop
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bc80      	pop	{r7}
 8001a7e:	4770      	bx	lr

08001a80 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b08a      	sub	sp, #40	; 0x28
 8001a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a86:	f107 0320 	add.w	r3, r7, #32
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]
 8001a8e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a90:	1d3b      	adds	r3, r7, #4
 8001a92:	2200      	movs	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]
 8001a96:	605a      	str	r2, [r3, #4]
 8001a98:	609a      	str	r2, [r3, #8]
 8001a9a:	60da      	str	r2, [r3, #12]
 8001a9c:	611a      	str	r2, [r3, #16]
 8001a9e:	615a      	str	r2, [r3, #20]
 8001aa0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001aa2:	4b28      	ldr	r3, [pc, #160]	; (8001b44 <MX_TIM2_Init+0xc4>)
 8001aa4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001aa8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001aaa:	4b26      	ldr	r3, [pc, #152]	; (8001b44 <MX_TIM2_Init+0xc4>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ab0:	4b24      	ldr	r3, [pc, #144]	; (8001b44 <MX_TIM2_Init+0xc4>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001ab6:	4b23      	ldr	r3, [pc, #140]	; (8001b44 <MX_TIM2_Init+0xc4>)
 8001ab8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001abc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001abe:	4b21      	ldr	r3, [pc, #132]	; (8001b44 <MX_TIM2_Init+0xc4>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ac4:	4b1f      	ldr	r3, [pc, #124]	; (8001b44 <MX_TIM2_Init+0xc4>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001aca:	481e      	ldr	r0, [pc, #120]	; (8001b44 <MX_TIM2_Init+0xc4>)
 8001acc:	f001 fffe 	bl	8003acc <HAL_TIM_PWM_Init>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001ad6:	f7ff fe4d 	bl	8001774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ada:	2300      	movs	r3, #0
 8001adc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ae2:	f107 0320 	add.w	r3, r7, #32
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	4816      	ldr	r0, [pc, #88]	; (8001b44 <MX_TIM2_Init+0xc4>)
 8001aea:	f002 fcdd 	bl	80044a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001af4:	f7ff fe3e 	bl	8001774 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001af8:	2360      	movs	r3, #96	; 0x60
 8001afa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001afc:	2300      	movs	r3, #0
 8001afe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b00:	2300      	movs	r3, #0
 8001b02:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b04:	2300      	movs	r3, #0
 8001b06:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b08:	1d3b      	adds	r3, r7, #4
 8001b0a:	2208      	movs	r2, #8
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	480d      	ldr	r0, [pc, #52]	; (8001b44 <MX_TIM2_Init+0xc4>)
 8001b10:	f002 f9fe 	bl	8003f10 <HAL_TIM_PWM_ConfigChannel>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001b1a:	f7ff fe2b 	bl	8001774 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b1e:	1d3b      	adds	r3, r7, #4
 8001b20:	220c      	movs	r2, #12
 8001b22:	4619      	mov	r1, r3
 8001b24:	4807      	ldr	r0, [pc, #28]	; (8001b44 <MX_TIM2_Init+0xc4>)
 8001b26:	f002 f9f3 	bl	8003f10 <HAL_TIM_PWM_ConfigChannel>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001b30:	f7ff fe20 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001b34:	4803      	ldr	r0, [pc, #12]	; (8001b44 <MX_TIM2_Init+0xc4>)
 8001b36:	f000 f943 	bl	8001dc0 <HAL_TIM_MspPostInit>

}
 8001b3a:	bf00      	nop
 8001b3c:	3728      	adds	r7, #40	; 0x28
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	200011f4 	.word	0x200011f4

08001b48 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b08c      	sub	sp, #48	; 0x30
 8001b4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b4e:	f107 030c 	add.w	r3, r7, #12
 8001b52:	2224      	movs	r2, #36	; 0x24
 8001b54:	2100      	movs	r1, #0
 8001b56:	4618      	mov	r0, r3
 8001b58:	f003 fdca 	bl	80056f0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b5c:	1d3b      	adds	r3, r7, #4
 8001b5e:	2200      	movs	r2, #0
 8001b60:	601a      	str	r2, [r3, #0]
 8001b62:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b64:	4b20      	ldr	r3, [pc, #128]	; (8001be8 <MX_TIM3_Init+0xa0>)
 8001b66:	4a21      	ldr	r2, [pc, #132]	; (8001bec <MX_TIM3_Init+0xa4>)
 8001b68:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001b6a:	4b1f      	ldr	r3, [pc, #124]	; (8001be8 <MX_TIM3_Init+0xa0>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b70:	4b1d      	ldr	r3, [pc, #116]	; (8001be8 <MX_TIM3_Init+0xa0>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001b76:	4b1c      	ldr	r3, [pc, #112]	; (8001be8 <MX_TIM3_Init+0xa0>)
 8001b78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b7c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b7e:	4b1a      	ldr	r3, [pc, #104]	; (8001be8 <MX_TIM3_Init+0xa0>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b84:	4b18      	ldr	r3, [pc, #96]	; (8001be8 <MX_TIM3_Init+0xa0>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b92:	2301      	movs	r3, #1
 8001b94:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b96:	2300      	movs	r3, #0
 8001b98:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001b9a:	230a      	movs	r3, #10
 8001b9c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001baa:	2300      	movs	r3, #0
 8001bac:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001bae:	f107 030c 	add.w	r3, r7, #12
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	480c      	ldr	r0, [pc, #48]	; (8001be8 <MX_TIM3_Init+0xa0>)
 8001bb6:	f002 f87b 	bl	8003cb0 <HAL_TIM_Encoder_Init>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001bc0:	f7ff fdd8 	bl	8001774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001bcc:	1d3b      	adds	r3, r7, #4
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4805      	ldr	r0, [pc, #20]	; (8001be8 <MX_TIM3_Init+0xa0>)
 8001bd2:	f002 fc69 	bl	80044a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001bdc:	f7ff fdca 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001be0:	bf00      	nop
 8001be2:	3730      	adds	r7, #48	; 0x30
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	2000123c 	.word	0x2000123c
 8001bec:	40000400 	.word	0x40000400

08001bf0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b08c      	sub	sp, #48	; 0x30
 8001bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001bf6:	f107 030c 	add.w	r3, r7, #12
 8001bfa:	2224      	movs	r2, #36	; 0x24
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f003 fd76 	bl	80056f0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c04:	1d3b      	adds	r3, r7, #4
 8001c06:	2200      	movs	r2, #0
 8001c08:	601a      	str	r2, [r3, #0]
 8001c0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001c0c:	4b20      	ldr	r3, [pc, #128]	; (8001c90 <MX_TIM4_Init+0xa0>)
 8001c0e:	4a21      	ldr	r2, [pc, #132]	; (8001c94 <MX_TIM4_Init+0xa4>)
 8001c10:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001c12:	4b1f      	ldr	r3, [pc, #124]	; (8001c90 <MX_TIM4_Init+0xa0>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c18:	4b1d      	ldr	r3, [pc, #116]	; (8001c90 <MX_TIM4_Init+0xa0>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001c1e:	4b1c      	ldr	r3, [pc, #112]	; (8001c90 <MX_TIM4_Init+0xa0>)
 8001c20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c24:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c26:	4b1a      	ldr	r3, [pc, #104]	; (8001c90 <MX_TIM4_Init+0xa0>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c2c:	4b18      	ldr	r3, [pc, #96]	; (8001c90 <MX_TIM4_Init+0xa0>)
 8001c2e:	2280      	movs	r2, #128	; 0x80
 8001c30:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c32:	2303      	movs	r3, #3
 8001c34:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c36:	2300      	movs	r3, #0
 8001c38:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001c42:	230a      	movs	r3, #10
 8001c44:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c46:	2300      	movs	r3, #0
 8001c48:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001c52:	2300      	movs	r3, #0
 8001c54:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001c56:	f107 030c 	add.w	r3, r7, #12
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	480c      	ldr	r0, [pc, #48]	; (8001c90 <MX_TIM4_Init+0xa0>)
 8001c5e:	f002 f827 	bl	8003cb0 <HAL_TIM_Encoder_Init>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001c68:	f7ff fd84 	bl	8001774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c70:	2300      	movs	r3, #0
 8001c72:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c74:	1d3b      	adds	r3, r7, #4
 8001c76:	4619      	mov	r1, r3
 8001c78:	4805      	ldr	r0, [pc, #20]	; (8001c90 <MX_TIM4_Init+0xa0>)
 8001c7a:	f002 fc15 	bl	80044a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001c84:	f7ff fd76 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001c88:	bf00      	nop
 8001c8a:	3730      	adds	r7, #48	; 0x30
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	20001284 	.word	0x20001284
 8001c94:	40000800 	.word	0x40000800

08001c98 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ca8:	d10b      	bne.n	8001cc2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001caa:	4b08      	ldr	r3, [pc, #32]	; (8001ccc <HAL_TIM_PWM_MspInit+0x34>)
 8001cac:	69db      	ldr	r3, [r3, #28]
 8001cae:	4a07      	ldr	r2, [pc, #28]	; (8001ccc <HAL_TIM_PWM_MspInit+0x34>)
 8001cb0:	f043 0301 	orr.w	r3, r3, #1
 8001cb4:	61d3      	str	r3, [r2, #28]
 8001cb6:	4b05      	ldr	r3, [pc, #20]	; (8001ccc <HAL_TIM_PWM_MspInit+0x34>)
 8001cb8:	69db      	ldr	r3, [r3, #28]
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	60fb      	str	r3, [r7, #12]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001cc2:	bf00      	nop
 8001cc4:	3714      	adds	r7, #20
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bc80      	pop	{r7}
 8001cca:	4770      	bx	lr
 8001ccc:	40021000 	.word	0x40021000

08001cd0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b08a      	sub	sp, #40	; 0x28
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd8:	f107 0318 	add.w	r3, r7, #24
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	605a      	str	r2, [r3, #4]
 8001ce2:	609a      	str	r2, [r3, #8]
 8001ce4:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM3)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a30      	ldr	r2, [pc, #192]	; (8001dac <HAL_TIM_Encoder_MspInit+0xdc>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d124      	bne.n	8001d3a <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001cf0:	4b2f      	ldr	r3, [pc, #188]	; (8001db0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001cf2:	69db      	ldr	r3, [r3, #28]
 8001cf4:	4a2e      	ldr	r2, [pc, #184]	; (8001db0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001cf6:	f043 0302 	orr.w	r3, r3, #2
 8001cfa:	61d3      	str	r3, [r2, #28]
 8001cfc:	4b2c      	ldr	r3, [pc, #176]	; (8001db0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001cfe:	69db      	ldr	r3, [r3, #28]
 8001d00:	f003 0302 	and.w	r3, r3, #2
 8001d04:	617b      	str	r3, [r7, #20]
 8001d06:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d08:	4b29      	ldr	r3, [pc, #164]	; (8001db0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	4a28      	ldr	r2, [pc, #160]	; (8001db0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001d0e:	f043 0304 	orr.w	r3, r3, #4
 8001d12:	6193      	str	r3, [r2, #24]
 8001d14:	4b26      	ldr	r3, [pc, #152]	; (8001db0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	f003 0304 	and.w	r3, r3, #4
 8001d1c:	613b      	str	r3, [r7, #16]
 8001d1e:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = MB1_Pin|MB2_Pin;
 8001d20:	23c0      	movs	r3, #192	; 0xc0
 8001d22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d24:	2300      	movs	r3, #0
 8001d26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d2c:	f107 0318 	add.w	r3, r7, #24
 8001d30:	4619      	mov	r1, r3
 8001d32:	4820      	ldr	r0, [pc, #128]	; (8001db4 <HAL_TIM_Encoder_MspInit+0xe4>)
 8001d34:	f001 f846 	bl	8002dc4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001d38:	e034      	b.n	8001da4 <HAL_TIM_Encoder_MspInit+0xd4>
  else if(tim_encoderHandle->Instance==TIM4)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a1e      	ldr	r2, [pc, #120]	; (8001db8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d12f      	bne.n	8001da4 <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d44:	4b1a      	ldr	r3, [pc, #104]	; (8001db0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001d46:	69db      	ldr	r3, [r3, #28]
 8001d48:	4a19      	ldr	r2, [pc, #100]	; (8001db0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001d4a:	f043 0304 	orr.w	r3, r3, #4
 8001d4e:	61d3      	str	r3, [r2, #28]
 8001d50:	4b17      	ldr	r3, [pc, #92]	; (8001db0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001d52:	69db      	ldr	r3, [r3, #28]
 8001d54:	f003 0304 	and.w	r3, r3, #4
 8001d58:	60fb      	str	r3, [r7, #12]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d5c:	4b14      	ldr	r3, [pc, #80]	; (8001db0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001d5e:	699b      	ldr	r3, [r3, #24]
 8001d60:	4a13      	ldr	r2, [pc, #76]	; (8001db0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001d62:	f043 0308 	orr.w	r3, r3, #8
 8001d66:	6193      	str	r3, [r2, #24]
 8001d68:	4b11      	ldr	r3, [pc, #68]	; (8001db0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	f003 0308 	and.w	r3, r3, #8
 8001d70:	60bb      	str	r3, [r7, #8]
 8001d72:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MA2_Pin;
 8001d74:	2340      	movs	r3, #64	; 0x40
 8001d76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(MA2_GPIO_Port, &GPIO_InitStruct);
 8001d80:	f107 0318 	add.w	r3, r7, #24
 8001d84:	4619      	mov	r1, r3
 8001d86:	480d      	ldr	r0, [pc, #52]	; (8001dbc <HAL_TIM_Encoder_MspInit+0xec>)
 8001d88:	f001 f81c 	bl	8002dc4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MA1_Pin;
 8001d8c:	2380      	movs	r3, #128	; 0x80
 8001d8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d90:	2300      	movs	r3, #0
 8001d92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d94:	2300      	movs	r3, #0
 8001d96:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(MA1_GPIO_Port, &GPIO_InitStruct);
 8001d98:	f107 0318 	add.w	r3, r7, #24
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4807      	ldr	r0, [pc, #28]	; (8001dbc <HAL_TIM_Encoder_MspInit+0xec>)
 8001da0:	f001 f810 	bl	8002dc4 <HAL_GPIO_Init>
}
 8001da4:	bf00      	nop
 8001da6:	3728      	adds	r7, #40	; 0x28
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	40000400 	.word	0x40000400
 8001db0:	40021000 	.word	0x40021000
 8001db4:	40010800 	.word	0x40010800
 8001db8:	40000800 	.word	0x40000800
 8001dbc:	40010c00 	.word	0x40010c00

08001dc0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b088      	sub	sp, #32
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc8:	f107 030c 	add.w	r3, r7, #12
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	605a      	str	r2, [r3, #4]
 8001dd2:	609a      	str	r2, [r3, #8]
 8001dd4:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dde:	d12a      	bne.n	8001e36 <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de0:	4b17      	ldr	r3, [pc, #92]	; (8001e40 <HAL_TIM_MspPostInit+0x80>)
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	4a16      	ldr	r2, [pc, #88]	; (8001e40 <HAL_TIM_MspPostInit+0x80>)
 8001de6:	f043 0308 	orr.w	r3, r3, #8
 8001dea:	6193      	str	r3, [r2, #24]
 8001dec:	4b14      	ldr	r3, [pc, #80]	; (8001e40 <HAL_TIM_MspPostInit+0x80>)
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	f003 0308 	and.w	r3, r3, #8
 8001df4:	60bb      	str	r3, [r7, #8]
 8001df6:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 8001df8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001dfc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfe:	2302      	movs	r3, #2
 8001e00:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e02:	2302      	movs	r3, #2
 8001e04:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e06:	f107 030c 	add.w	r3, r7, #12
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	480d      	ldr	r0, [pc, #52]	; (8001e44 <HAL_TIM_MspPostInit+0x84>)
 8001e0e:	f000 ffd9 	bl	8002dc4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 8001e12:	4b0d      	ldr	r3, [pc, #52]	; (8001e48 <HAL_TIM_MspPostInit+0x88>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	61fb      	str	r3, [r7, #28]
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e1e:	61fb      	str	r3, [r7, #28]
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001e26:	61fb      	str	r3, [r7, #28]
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e2e:	61fb      	str	r3, [r7, #28]
 8001e30:	4a05      	ldr	r2, [pc, #20]	; (8001e48 <HAL_TIM_MspPostInit+0x88>)
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001e36:	bf00      	nop
 8001e38:	3720      	adds	r7, #32
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40021000 	.word	0x40021000
 8001e44:	40010c00 	.word	0x40010c00
 8001e48:	40010000 	.word	0x40010000

08001e4c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e50:	4b11      	ldr	r3, [pc, #68]	; (8001e98 <MX_USART1_UART_Init+0x4c>)
 8001e52:	4a12      	ldr	r2, [pc, #72]	; (8001e9c <MX_USART1_UART_Init+0x50>)
 8001e54:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001e56:	4b10      	ldr	r3, [pc, #64]	; (8001e98 <MX_USART1_UART_Init+0x4c>)
 8001e58:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001e5c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e5e:	4b0e      	ldr	r3, [pc, #56]	; (8001e98 <MX_USART1_UART_Init+0x4c>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e64:	4b0c      	ldr	r3, [pc, #48]	; (8001e98 <MX_USART1_UART_Init+0x4c>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e6a:	4b0b      	ldr	r3, [pc, #44]	; (8001e98 <MX_USART1_UART_Init+0x4c>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e70:	4b09      	ldr	r3, [pc, #36]	; (8001e98 <MX_USART1_UART_Init+0x4c>)
 8001e72:	220c      	movs	r2, #12
 8001e74:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e76:	4b08      	ldr	r3, [pc, #32]	; (8001e98 <MX_USART1_UART_Init+0x4c>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e7c:	4b06      	ldr	r3, [pc, #24]	; (8001e98 <MX_USART1_UART_Init+0x4c>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e82:	4805      	ldr	r0, [pc, #20]	; (8001e98 <MX_USART1_UART_Init+0x4c>)
 8001e84:	f002 fb6e 	bl	8004564 <HAL_UART_Init>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001e8e:	f7ff fc71 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e92:	bf00      	nop
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	200012cc 	.word	0x200012cc
 8001e9c:	40013800 	.word	0x40013800

08001ea0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b088      	sub	sp, #32
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea8:	f107 0310 	add.w	r3, r7, #16
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	605a      	str	r2, [r3, #4]
 8001eb2:	609a      	str	r2, [r3, #8]
 8001eb4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a1c      	ldr	r2, [pc, #112]	; (8001f2c <HAL_UART_MspInit+0x8c>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d131      	bne.n	8001f24 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ec0:	4b1b      	ldr	r3, [pc, #108]	; (8001f30 <HAL_UART_MspInit+0x90>)
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	4a1a      	ldr	r2, [pc, #104]	; (8001f30 <HAL_UART_MspInit+0x90>)
 8001ec6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eca:	6193      	str	r3, [r2, #24]
 8001ecc:	4b18      	ldr	r3, [pc, #96]	; (8001f30 <HAL_UART_MspInit+0x90>)
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ed4:	60fb      	str	r3, [r7, #12]
 8001ed6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed8:	4b15      	ldr	r3, [pc, #84]	; (8001f30 <HAL_UART_MspInit+0x90>)
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	4a14      	ldr	r2, [pc, #80]	; (8001f30 <HAL_UART_MspInit+0x90>)
 8001ede:	f043 0304 	orr.w	r3, r3, #4
 8001ee2:	6193      	str	r3, [r2, #24]
 8001ee4:	4b12      	ldr	r3, [pc, #72]	; (8001f30 <HAL_UART_MspInit+0x90>)
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	f003 0304 	and.w	r3, r3, #4
 8001eec:	60bb      	str	r3, [r7, #8]
 8001eee:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ef0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ef4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001efa:	2303      	movs	r3, #3
 8001efc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001efe:	f107 0310 	add.w	r3, r7, #16
 8001f02:	4619      	mov	r1, r3
 8001f04:	480b      	ldr	r0, [pc, #44]	; (8001f34 <HAL_UART_MspInit+0x94>)
 8001f06:	f000 ff5d 	bl	8002dc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f10:	2300      	movs	r3, #0
 8001f12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f14:	2300      	movs	r3, #0
 8001f16:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f18:	f107 0310 	add.w	r3, r7, #16
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	4805      	ldr	r0, [pc, #20]	; (8001f34 <HAL_UART_MspInit+0x94>)
 8001f20:	f000 ff50 	bl	8002dc4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001f24:	bf00      	nop
 8001f26:	3720      	adds	r7, #32
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	40013800 	.word	0x40013800
 8001f30:	40021000 	.word	0x40021000
 8001f34:	40010800 	.word	0x40010800

08001f38 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
    ldr r0, =_sdata
 8001f38:	480c      	ldr	r0, [pc, #48]	; (8001f6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f3a:	490d      	ldr	r1, [pc, #52]	; (8001f70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f3c:	4a0d      	ldr	r2, [pc, #52]	; (8001f74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f40:	e002      	b.n	8001f48 <LoopCopyDataInit>

08001f42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f46:	3304      	adds	r3, #4

08001f48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f4c:	d3f9      	bcc.n	8001f42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f4e:	4a0a      	ldr	r2, [pc, #40]	; (8001f78 <LoopFillZerobss+0x1e>)
	  ldr r4, =_ebss
 8001f50:	4c0a      	ldr	r4, [pc, #40]	; (8001f7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f54:	e001      	b.n	8001f5a <LoopFillZerobss>

08001f56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f58:	3204      	adds	r2, #4

08001f5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f5c:	d3fb      	bcc.n	8001f56 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001f5e:	f7ff fd89 	bl	8001a74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f62:	f003 fba1 	bl	80056a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f66:	f7ff f98f 	bl	8001288 <main>
  bx lr
 8001f6a:	4770      	bx	lr
    ldr r0, =_sdata
 8001f6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f70:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001f74:	08005778 	.word	0x08005778
  ldr r2, =_sbss
 8001f78:	20000070 	.word	0x20000070
	  ldr r4, =_ebss
 8001f7c:	20001314 	.word	0x20001314

08001f80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f80:	e7fe      	b.n	8001f80 <ADC1_2_IRQHandler>
	...

08001f84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f88:	4b08      	ldr	r3, [pc, #32]	; (8001fac <HAL_Init+0x28>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a07      	ldr	r2, [pc, #28]	; (8001fac <HAL_Init+0x28>)
 8001f8e:	f043 0310 	orr.w	r3, r3, #16
 8001f92:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f94:	2003      	movs	r0, #3
 8001f96:	f000 fce5 	bl	8002964 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f9a:	200f      	movs	r0, #15
 8001f9c:	f000 f808 	bl	8001fb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fa0:	f7ff fd04 	bl	80019ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40022000 	.word	0x40022000

08001fb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fb8:	4b12      	ldr	r3, [pc, #72]	; (8002004 <HAL_InitTick+0x54>)
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	4b12      	ldr	r3, [pc, #72]	; (8002008 <HAL_InitTick+0x58>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f000 fcfd 	bl	80029ce <HAL_SYSTICK_Config>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e00e      	b.n	8001ffc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2b0f      	cmp	r3, #15
 8001fe2:	d80a      	bhi.n	8001ffa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	6879      	ldr	r1, [r7, #4]
 8001fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fec:	f000 fcc5 	bl	800297a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ff0:	4a06      	ldr	r2, [pc, #24]	; (800200c <HAL_InitTick+0x5c>)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	e000      	b.n	8001ffc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3708      	adds	r7, #8
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	20000000 	.word	0x20000000
 8002008:	20000008 	.word	0x20000008
 800200c:	20000004 	.word	0x20000004

08002010 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002014:	4b05      	ldr	r3, [pc, #20]	; (800202c <HAL_IncTick+0x1c>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	461a      	mov	r2, r3
 800201a:	4b05      	ldr	r3, [pc, #20]	; (8002030 <HAL_IncTick+0x20>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4413      	add	r3, r2
 8002020:	4a03      	ldr	r2, [pc, #12]	; (8002030 <HAL_IncTick+0x20>)
 8002022:	6013      	str	r3, [r2, #0]
}
 8002024:	bf00      	nop
 8002026:	46bd      	mov	sp, r7
 8002028:	bc80      	pop	{r7}
 800202a:	4770      	bx	lr
 800202c:	20000008 	.word	0x20000008
 8002030:	20001310 	.word	0x20001310

08002034 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  return uwTick;
 8002038:	4b02      	ldr	r3, [pc, #8]	; (8002044 <HAL_GetTick+0x10>)
 800203a:	681b      	ldr	r3, [r3, #0]
}
 800203c:	4618      	mov	r0, r3
 800203e:	46bd      	mov	sp, r7
 8002040:	bc80      	pop	{r7}
 8002042:	4770      	bx	lr
 8002044:	20001310 	.word	0x20001310

08002048 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002050:	2300      	movs	r3, #0
 8002052:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002054:	2300      	movs	r3, #0
 8002056:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002058:	2300      	movs	r3, #0
 800205a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800205c:	2300      	movs	r3, #0
 800205e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d101      	bne.n	800206a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e0be      	b.n	80021e8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002074:	2b00      	cmp	r3, #0
 8002076:	d109      	bne.n	800208c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f7fe ffe6 	bl	8001058 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f000 faf5 	bl	800267c <ADC_ConversionStop_Disable>
 8002092:	4603      	mov	r3, r0
 8002094:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800209a:	f003 0310 	and.w	r3, r3, #16
 800209e:	2b00      	cmp	r3, #0
 80020a0:	f040 8099 	bne.w	80021d6 <HAL_ADC_Init+0x18e>
 80020a4:	7dfb      	ldrb	r3, [r7, #23]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	f040 8095 	bne.w	80021d6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80020b4:	f023 0302 	bic.w	r3, r3, #2
 80020b8:	f043 0202 	orr.w	r2, r3, #2
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80020c8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	7b1b      	ldrb	r3, [r3, #12]
 80020ce:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80020d0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80020d2:	68ba      	ldr	r2, [r7, #8]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020e0:	d003      	beq.n	80020ea <HAL_ADC_Init+0xa2>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d102      	bne.n	80020f0 <HAL_ADC_Init+0xa8>
 80020ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020ee:	e000      	b.n	80020f2 <HAL_ADC_Init+0xaa>
 80020f0:	2300      	movs	r3, #0
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	7d1b      	ldrb	r3, [r3, #20]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d119      	bne.n	8002134 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	7b1b      	ldrb	r3, [r3, #12]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d109      	bne.n	800211c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	699b      	ldr	r3, [r3, #24]
 800210c:	3b01      	subs	r3, #1
 800210e:	035a      	lsls	r2, r3, #13
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	4313      	orrs	r3, r2
 8002114:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002118:	613b      	str	r3, [r7, #16]
 800211a:	e00b      	b.n	8002134 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002120:	f043 0220 	orr.w	r2, r3, #32
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800212c:	f043 0201 	orr.w	r2, r3, #1
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	693a      	ldr	r2, [r7, #16]
 8002144:	430a      	orrs	r2, r1
 8002146:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	689a      	ldr	r2, [r3, #8]
 800214e:	4b28      	ldr	r3, [pc, #160]	; (80021f0 <HAL_ADC_Init+0x1a8>)
 8002150:	4013      	ands	r3, r2
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	6812      	ldr	r2, [r2, #0]
 8002156:	68b9      	ldr	r1, [r7, #8]
 8002158:	430b      	orrs	r3, r1
 800215a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002164:	d003      	beq.n	800216e <HAL_ADC_Init+0x126>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d104      	bne.n	8002178 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	3b01      	subs	r3, #1
 8002174:	051b      	lsls	r3, r3, #20
 8002176:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800217e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68fa      	ldr	r2, [r7, #12]
 8002188:	430a      	orrs	r2, r1
 800218a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	689a      	ldr	r2, [r3, #8]
 8002192:	4b18      	ldr	r3, [pc, #96]	; (80021f4 <HAL_ADC_Init+0x1ac>)
 8002194:	4013      	ands	r3, r2
 8002196:	68ba      	ldr	r2, [r7, #8]
 8002198:	429a      	cmp	r2, r3
 800219a:	d10b      	bne.n	80021b4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a6:	f023 0303 	bic.w	r3, r3, #3
 80021aa:	f043 0201 	orr.w	r2, r3, #1
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80021b2:	e018      	b.n	80021e6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b8:	f023 0312 	bic.w	r3, r3, #18
 80021bc:	f043 0210 	orr.w	r2, r3, #16
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c8:	f043 0201 	orr.w	r2, r3, #1
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80021d4:	e007      	b.n	80021e6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021da:	f043 0210 	orr.w	r2, r3, #16
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80021e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3718      	adds	r7, #24
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	ffe1f7fd 	.word	0xffe1f7fd
 80021f4:	ff1f0efe 	.word	0xff1f0efe

080021f8 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002204:	2300      	movs	r3, #0
 8002206:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a64      	ldr	r2, [pc, #400]	; (80023a0 <HAL_ADC_Start_DMA+0x1a8>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d004      	beq.n	800221c <HAL_ADC_Start_DMA+0x24>
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a63      	ldr	r2, [pc, #396]	; (80023a4 <HAL_ADC_Start_DMA+0x1ac>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d106      	bne.n	800222a <HAL_ADC_Start_DMA+0x32>
 800221c:	4b60      	ldr	r3, [pc, #384]	; (80023a0 <HAL_ADC_Start_DMA+0x1a8>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002224:	2b00      	cmp	r3, #0
 8002226:	f040 80b3 	bne.w	8002390 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002230:	2b01      	cmp	r3, #1
 8002232:	d101      	bne.n	8002238 <HAL_ADC_Start_DMA+0x40>
 8002234:	2302      	movs	r3, #2
 8002236:	e0ae      	b.n	8002396 <HAL_ADC_Start_DMA+0x19e>
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002240:	68f8      	ldr	r0, [r7, #12]
 8002242:	f000 f9c1 	bl	80025c8 <ADC_Enable>
 8002246:	4603      	mov	r3, r0
 8002248:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800224a:	7dfb      	ldrb	r3, [r7, #23]
 800224c:	2b00      	cmp	r3, #0
 800224e:	f040 809a 	bne.w	8002386 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002256:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800225a:	f023 0301 	bic.w	r3, r3, #1
 800225e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a4e      	ldr	r2, [pc, #312]	; (80023a4 <HAL_ADC_Start_DMA+0x1ac>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d105      	bne.n	800227c <HAL_ADC_Start_DMA+0x84>
 8002270:	4b4b      	ldr	r3, [pc, #300]	; (80023a0 <HAL_ADC_Start_DMA+0x1a8>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d115      	bne.n	80022a8 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002280:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002292:	2b00      	cmp	r3, #0
 8002294:	d026      	beq.n	80022e4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800229a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800229e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80022a6:	e01d      	b.n	80022e4 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ac:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a39      	ldr	r2, [pc, #228]	; (80023a0 <HAL_ADC_Start_DMA+0x1a8>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d004      	beq.n	80022c8 <HAL_ADC_Start_DMA+0xd0>
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a38      	ldr	r2, [pc, #224]	; (80023a4 <HAL_ADC_Start_DMA+0x1ac>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d10d      	bne.n	80022e4 <HAL_ADC_Start_DMA+0xec>
 80022c8:	4b35      	ldr	r3, [pc, #212]	; (80023a0 <HAL_ADC_Start_DMA+0x1a8>)
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d007      	beq.n	80022e4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80022dc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d006      	beq.n	80022fe <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f4:	f023 0206 	bic.w	r2, r3, #6
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	62da      	str	r2, [r3, #44]	; 0x2c
 80022fc:	e002      	b.n	8002304 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2200      	movs	r2, #0
 8002302:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2200      	movs	r2, #0
 8002308:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6a1b      	ldr	r3, [r3, #32]
 8002310:	4a25      	ldr	r2, [pc, #148]	; (80023a8 <HAL_ADC_Start_DMA+0x1b0>)
 8002312:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6a1b      	ldr	r3, [r3, #32]
 8002318:	4a24      	ldr	r2, [pc, #144]	; (80023ac <HAL_ADC_Start_DMA+0x1b4>)
 800231a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	6a1b      	ldr	r3, [r3, #32]
 8002320:	4a23      	ldr	r2, [pc, #140]	; (80023b0 <HAL_ADC_Start_DMA+0x1b8>)
 8002322:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f06f 0202 	mvn.w	r2, #2
 800232c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	689a      	ldr	r2, [r3, #8]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800233c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6a18      	ldr	r0, [r3, #32]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	334c      	adds	r3, #76	; 0x4c
 8002348:	4619      	mov	r1, r3
 800234a:	68ba      	ldr	r2, [r7, #8]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f000 fba5 	bl	8002a9c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800235c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002360:	d108      	bne.n	8002374 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	689a      	ldr	r2, [r3, #8]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002370:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002372:	e00f      	b.n	8002394 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	689a      	ldr	r2, [r3, #8]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002382:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002384:	e006      	b.n	8002394 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2200      	movs	r2, #0
 800238a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800238e:	e001      	b.n	8002394 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002394:	7dfb      	ldrb	r3, [r7, #23]
}
 8002396:	4618      	mov	r0, r3
 8002398:	3718      	adds	r7, #24
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	40012400 	.word	0x40012400
 80023a4:	40012800 	.word	0x40012800
 80023a8:	080026ff 	.word	0x080026ff
 80023ac:	0800277b 	.word	0x0800277b
 80023b0:	08002797 	.word	0x08002797

080023b4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80023bc:	bf00      	nop
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bc80      	pop	{r7}
 80023c4:	4770      	bx	lr

080023c6 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80023c6:	b480      	push	{r7}
 80023c8:	b083      	sub	sp, #12
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80023ce:	bf00      	nop
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bc80      	pop	{r7}
 80023d6:	4770      	bx	lr

080023d8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023e2:	2300      	movs	r3, #0
 80023e4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80023e6:	2300      	movs	r3, #0
 80023e8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d101      	bne.n	80023f8 <HAL_ADC_ConfigChannel+0x20>
 80023f4:	2302      	movs	r3, #2
 80023f6:	e0dc      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x1da>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	2b06      	cmp	r3, #6
 8002406:	d81c      	bhi.n	8002442 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	685a      	ldr	r2, [r3, #4]
 8002412:	4613      	mov	r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	4413      	add	r3, r2
 8002418:	3b05      	subs	r3, #5
 800241a:	221f      	movs	r2, #31
 800241c:	fa02 f303 	lsl.w	r3, r2, r3
 8002420:	43db      	mvns	r3, r3
 8002422:	4019      	ands	r1, r3
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	6818      	ldr	r0, [r3, #0]
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685a      	ldr	r2, [r3, #4]
 800242c:	4613      	mov	r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	4413      	add	r3, r2
 8002432:	3b05      	subs	r3, #5
 8002434:	fa00 f203 	lsl.w	r2, r0, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	430a      	orrs	r2, r1
 800243e:	635a      	str	r2, [r3, #52]	; 0x34
 8002440:	e03c      	b.n	80024bc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	2b0c      	cmp	r3, #12
 8002448:	d81c      	bhi.n	8002484 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685a      	ldr	r2, [r3, #4]
 8002454:	4613      	mov	r3, r2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	4413      	add	r3, r2
 800245a:	3b23      	subs	r3, #35	; 0x23
 800245c:	221f      	movs	r2, #31
 800245e:	fa02 f303 	lsl.w	r3, r2, r3
 8002462:	43db      	mvns	r3, r3
 8002464:	4019      	ands	r1, r3
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	6818      	ldr	r0, [r3, #0]
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685a      	ldr	r2, [r3, #4]
 800246e:	4613      	mov	r3, r2
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	4413      	add	r3, r2
 8002474:	3b23      	subs	r3, #35	; 0x23
 8002476:	fa00 f203 	lsl.w	r2, r0, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	430a      	orrs	r2, r1
 8002480:	631a      	str	r2, [r3, #48]	; 0x30
 8002482:	e01b      	b.n	80024bc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685a      	ldr	r2, [r3, #4]
 800248e:	4613      	mov	r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	4413      	add	r3, r2
 8002494:	3b41      	subs	r3, #65	; 0x41
 8002496:	221f      	movs	r2, #31
 8002498:	fa02 f303 	lsl.w	r3, r2, r3
 800249c:	43db      	mvns	r3, r3
 800249e:	4019      	ands	r1, r3
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	6818      	ldr	r0, [r3, #0]
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685a      	ldr	r2, [r3, #4]
 80024a8:	4613      	mov	r3, r2
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	4413      	add	r3, r2
 80024ae:	3b41      	subs	r3, #65	; 0x41
 80024b0:	fa00 f203 	lsl.w	r2, r0, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	430a      	orrs	r2, r1
 80024ba:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2b09      	cmp	r3, #9
 80024c2:	d91c      	bls.n	80024fe <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68d9      	ldr	r1, [r3, #12]
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	4613      	mov	r3, r2
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	4413      	add	r3, r2
 80024d4:	3b1e      	subs	r3, #30
 80024d6:	2207      	movs	r2, #7
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	43db      	mvns	r3, r3
 80024de:	4019      	ands	r1, r3
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	6898      	ldr	r0, [r3, #8]
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	4613      	mov	r3, r2
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	4413      	add	r3, r2
 80024ee:	3b1e      	subs	r3, #30
 80024f0:	fa00 f203 	lsl.w	r2, r0, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	430a      	orrs	r2, r1
 80024fa:	60da      	str	r2, [r3, #12]
 80024fc:	e019      	b.n	8002532 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	6919      	ldr	r1, [r3, #16]
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	4613      	mov	r3, r2
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	4413      	add	r3, r2
 800250e:	2207      	movs	r2, #7
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	43db      	mvns	r3, r3
 8002516:	4019      	ands	r1, r3
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	6898      	ldr	r0, [r3, #8]
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	4613      	mov	r3, r2
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	4413      	add	r3, r2
 8002526:	fa00 f203 	lsl.w	r2, r0, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	430a      	orrs	r2, r1
 8002530:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2b10      	cmp	r3, #16
 8002538:	d003      	beq.n	8002542 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800253e:	2b11      	cmp	r3, #17
 8002540:	d132      	bne.n	80025a8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a1d      	ldr	r2, [pc, #116]	; (80025bc <HAL_ADC_ConfigChannel+0x1e4>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d125      	bne.n	8002598 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d126      	bne.n	80025a8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	689a      	ldr	r2, [r3, #8]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002568:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2b10      	cmp	r3, #16
 8002570:	d11a      	bne.n	80025a8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002572:	4b13      	ldr	r3, [pc, #76]	; (80025c0 <HAL_ADC_ConfigChannel+0x1e8>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a13      	ldr	r2, [pc, #76]	; (80025c4 <HAL_ADC_ConfigChannel+0x1ec>)
 8002578:	fba2 2303 	umull	r2, r3, r2, r3
 800257c:	0c9a      	lsrs	r2, r3, #18
 800257e:	4613      	mov	r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	4413      	add	r3, r2
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002588:	e002      	b.n	8002590 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	3b01      	subs	r3, #1
 800258e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1f9      	bne.n	800258a <HAL_ADC_ConfigChannel+0x1b2>
 8002596:	e007      	b.n	80025a8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800259c:	f043 0220 	orr.w	r2, r3, #32
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80025b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3714      	adds	r7, #20
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bc80      	pop	{r7}
 80025ba:	4770      	bx	lr
 80025bc:	40012400 	.word	0x40012400
 80025c0:	20000000 	.word	0x20000000
 80025c4:	431bde83 	.word	0x431bde83

080025c8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025d0:	2300      	movs	r3, #0
 80025d2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80025d4:	2300      	movs	r3, #0
 80025d6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d040      	beq.n	8002668 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	689a      	ldr	r2, [r3, #8]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f042 0201 	orr.w	r2, r2, #1
 80025f4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80025f6:	4b1f      	ldr	r3, [pc, #124]	; (8002674 <ADC_Enable+0xac>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a1f      	ldr	r2, [pc, #124]	; (8002678 <ADC_Enable+0xb0>)
 80025fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002600:	0c9b      	lsrs	r3, r3, #18
 8002602:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002604:	e002      	b.n	800260c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	3b01      	subs	r3, #1
 800260a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1f9      	bne.n	8002606 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002612:	f7ff fd0f 	bl	8002034 <HAL_GetTick>
 8002616:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002618:	e01f      	b.n	800265a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800261a:	f7ff fd0b 	bl	8002034 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	2b02      	cmp	r3, #2
 8002626:	d918      	bls.n	800265a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	2b01      	cmp	r3, #1
 8002634:	d011      	beq.n	800265a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800263a:	f043 0210 	orr.w	r2, r3, #16
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002646:	f043 0201 	orr.w	r2, r3, #1
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e007      	b.n	800266a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f003 0301 	and.w	r3, r3, #1
 8002664:	2b01      	cmp	r3, #1
 8002666:	d1d8      	bne.n	800261a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	3710      	adds	r7, #16
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	20000000 	.word	0x20000000
 8002678:	431bde83 	.word	0x431bde83

0800267c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002684:	2300      	movs	r3, #0
 8002686:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f003 0301 	and.w	r3, r3, #1
 8002692:	2b01      	cmp	r3, #1
 8002694:	d12e      	bne.n	80026f4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	689a      	ldr	r2, [r3, #8]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f022 0201 	bic.w	r2, r2, #1
 80026a4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80026a6:	f7ff fcc5 	bl	8002034 <HAL_GetTick>
 80026aa:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80026ac:	e01b      	b.n	80026e6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80026ae:	f7ff fcc1 	bl	8002034 <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d914      	bls.n	80026e6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f003 0301 	and.w	r3, r3, #1
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d10d      	bne.n	80026e6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ce:	f043 0210 	orr.w	r2, r3, #16
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026da:	f043 0201 	orr.w	r2, r3, #1
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e007      	b.n	80026f6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f003 0301 	and.w	r3, r3, #1
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d0dc      	beq.n	80026ae <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80026fe:	b580      	push	{r7, lr}
 8002700:	b084      	sub	sp, #16
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002710:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002714:	2b00      	cmp	r3, #0
 8002716:	d127      	bne.n	8002768 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800271c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800272e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002732:	d115      	bne.n	8002760 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002738:	2b00      	cmp	r3, #0
 800273a:	d111      	bne.n	8002760 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002740:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800274c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d105      	bne.n	8002760 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002758:	f043 0201 	orr.w	r2, r3, #1
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002760:	68f8      	ldr	r0, [r7, #12]
 8002762:	f7fe fef7 	bl	8001554 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002766:	e004      	b.n	8002772 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6a1b      	ldr	r3, [r3, #32]
 800276c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	4798      	blx	r3
}
 8002772:	bf00      	nop
 8002774:	3710      	adds	r7, #16
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800277a:	b580      	push	{r7, lr}
 800277c:	b084      	sub	sp, #16
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002786:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002788:	68f8      	ldr	r0, [r7, #12]
 800278a:	f7ff fe13 	bl	80023b4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800278e:	bf00      	nop
 8002790:	3710      	adds	r7, #16
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002796:	b580      	push	{r7, lr}
 8002798:	b084      	sub	sp, #16
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b4:	f043 0204 	orr.w	r2, r3, #4
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80027bc:	68f8      	ldr	r0, [r7, #12]
 80027be:	f7ff fe02 	bl	80023c6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80027c2:	bf00      	nop
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
	...

080027cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b085      	sub	sp, #20
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f003 0307 	and.w	r3, r3, #7
 80027da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027dc:	4b0c      	ldr	r3, [pc, #48]	; (8002810 <__NVIC_SetPriorityGrouping+0x44>)
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027e2:	68ba      	ldr	r2, [r7, #8]
 80027e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027e8:	4013      	ands	r3, r2
 80027ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027fe:	4a04      	ldr	r2, [pc, #16]	; (8002810 <__NVIC_SetPriorityGrouping+0x44>)
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	60d3      	str	r3, [r2, #12]
}
 8002804:	bf00      	nop
 8002806:	3714      	adds	r7, #20
 8002808:	46bd      	mov	sp, r7
 800280a:	bc80      	pop	{r7}
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	e000ed00 	.word	0xe000ed00

08002814 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002818:	4b04      	ldr	r3, [pc, #16]	; (800282c <__NVIC_GetPriorityGrouping+0x18>)
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	0a1b      	lsrs	r3, r3, #8
 800281e:	f003 0307 	and.w	r3, r3, #7
}
 8002822:	4618      	mov	r0, r3
 8002824:	46bd      	mov	sp, r7
 8002826:	bc80      	pop	{r7}
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	e000ed00 	.word	0xe000ed00

08002830 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	4603      	mov	r3, r0
 8002838:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800283a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283e:	2b00      	cmp	r3, #0
 8002840:	db0b      	blt.n	800285a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002842:	79fb      	ldrb	r3, [r7, #7]
 8002844:	f003 021f 	and.w	r2, r3, #31
 8002848:	4906      	ldr	r1, [pc, #24]	; (8002864 <__NVIC_EnableIRQ+0x34>)
 800284a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284e:	095b      	lsrs	r3, r3, #5
 8002850:	2001      	movs	r0, #1
 8002852:	fa00 f202 	lsl.w	r2, r0, r2
 8002856:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800285a:	bf00      	nop
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	bc80      	pop	{r7}
 8002862:	4770      	bx	lr
 8002864:	e000e100 	.word	0xe000e100

08002868 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	4603      	mov	r3, r0
 8002870:	6039      	str	r1, [r7, #0]
 8002872:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002878:	2b00      	cmp	r3, #0
 800287a:	db0a      	blt.n	8002892 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	b2da      	uxtb	r2, r3
 8002880:	490c      	ldr	r1, [pc, #48]	; (80028b4 <__NVIC_SetPriority+0x4c>)
 8002882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002886:	0112      	lsls	r2, r2, #4
 8002888:	b2d2      	uxtb	r2, r2
 800288a:	440b      	add	r3, r1
 800288c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002890:	e00a      	b.n	80028a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	b2da      	uxtb	r2, r3
 8002896:	4908      	ldr	r1, [pc, #32]	; (80028b8 <__NVIC_SetPriority+0x50>)
 8002898:	79fb      	ldrb	r3, [r7, #7]
 800289a:	f003 030f 	and.w	r3, r3, #15
 800289e:	3b04      	subs	r3, #4
 80028a0:	0112      	lsls	r2, r2, #4
 80028a2:	b2d2      	uxtb	r2, r2
 80028a4:	440b      	add	r3, r1
 80028a6:	761a      	strb	r2, [r3, #24]
}
 80028a8:	bf00      	nop
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bc80      	pop	{r7}
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	e000e100 	.word	0xe000e100
 80028b8:	e000ed00 	.word	0xe000ed00

080028bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028bc:	b480      	push	{r7}
 80028be:	b089      	sub	sp, #36	; 0x24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f003 0307 	and.w	r3, r3, #7
 80028ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	f1c3 0307 	rsb	r3, r3, #7
 80028d6:	2b04      	cmp	r3, #4
 80028d8:	bf28      	it	cs
 80028da:	2304      	movcs	r3, #4
 80028dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	3304      	adds	r3, #4
 80028e2:	2b06      	cmp	r3, #6
 80028e4:	d902      	bls.n	80028ec <NVIC_EncodePriority+0x30>
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	3b03      	subs	r3, #3
 80028ea:	e000      	b.n	80028ee <NVIC_EncodePriority+0x32>
 80028ec:	2300      	movs	r3, #0
 80028ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028f0:	f04f 32ff 	mov.w	r2, #4294967295
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	fa02 f303 	lsl.w	r3, r2, r3
 80028fa:	43da      	mvns	r2, r3
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	401a      	ands	r2, r3
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002904:	f04f 31ff 	mov.w	r1, #4294967295
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	fa01 f303 	lsl.w	r3, r1, r3
 800290e:	43d9      	mvns	r1, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002914:	4313      	orrs	r3, r2
         );
}
 8002916:	4618      	mov	r0, r3
 8002918:	3724      	adds	r7, #36	; 0x24
 800291a:	46bd      	mov	sp, r7
 800291c:	bc80      	pop	{r7}
 800291e:	4770      	bx	lr

08002920 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	3b01      	subs	r3, #1
 800292c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002930:	d301      	bcc.n	8002936 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002932:	2301      	movs	r3, #1
 8002934:	e00f      	b.n	8002956 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002936:	4a0a      	ldr	r2, [pc, #40]	; (8002960 <SysTick_Config+0x40>)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	3b01      	subs	r3, #1
 800293c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800293e:	210f      	movs	r1, #15
 8002940:	f04f 30ff 	mov.w	r0, #4294967295
 8002944:	f7ff ff90 	bl	8002868 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002948:	4b05      	ldr	r3, [pc, #20]	; (8002960 <SysTick_Config+0x40>)
 800294a:	2200      	movs	r2, #0
 800294c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800294e:	4b04      	ldr	r3, [pc, #16]	; (8002960 <SysTick_Config+0x40>)
 8002950:	2207      	movs	r2, #7
 8002952:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	e000e010 	.word	0xe000e010

08002964 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f7ff ff2d 	bl	80027cc <__NVIC_SetPriorityGrouping>
}
 8002972:	bf00      	nop
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800297a:	b580      	push	{r7, lr}
 800297c:	b086      	sub	sp, #24
 800297e:	af00      	add	r7, sp, #0
 8002980:	4603      	mov	r3, r0
 8002982:	60b9      	str	r1, [r7, #8]
 8002984:	607a      	str	r2, [r7, #4]
 8002986:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002988:	2300      	movs	r3, #0
 800298a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800298c:	f7ff ff42 	bl	8002814 <__NVIC_GetPriorityGrouping>
 8002990:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	68b9      	ldr	r1, [r7, #8]
 8002996:	6978      	ldr	r0, [r7, #20]
 8002998:	f7ff ff90 	bl	80028bc <NVIC_EncodePriority>
 800299c:	4602      	mov	r2, r0
 800299e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029a2:	4611      	mov	r1, r2
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7ff ff5f 	bl	8002868 <__NVIC_SetPriority>
}
 80029aa:	bf00      	nop
 80029ac:	3718      	adds	r7, #24
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b082      	sub	sp, #8
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	4603      	mov	r3, r0
 80029ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7ff ff35 	bl	8002830 <__NVIC_EnableIRQ>
}
 80029c6:	bf00      	nop
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b082      	sub	sp, #8
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f7ff ffa2 	bl	8002920 <SysTick_Config>
 80029dc:	4603      	mov	r3, r0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3708      	adds	r7, #8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
	...

080029e8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80029f0:	2300      	movs	r3, #0
 80029f2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d101      	bne.n	80029fe <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e043      	b.n	8002a86 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	461a      	mov	r2, r3
 8002a04:	4b22      	ldr	r3, [pc, #136]	; (8002a90 <HAL_DMA_Init+0xa8>)
 8002a06:	4413      	add	r3, r2
 8002a08:	4a22      	ldr	r2, [pc, #136]	; (8002a94 <HAL_DMA_Init+0xac>)
 8002a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a0e:	091b      	lsrs	r3, r3, #4
 8002a10:	009a      	lsls	r2, r3, #2
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a1f      	ldr	r2, [pc, #124]	; (8002a98 <HAL_DMA_Init+0xb0>)
 8002a1a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2202      	movs	r2, #2
 8002a20:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002a32:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002a36:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002a40:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	69db      	ldr	r3, [r3, #28]
 8002a5e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3714      	adds	r7, #20
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bc80      	pop	{r7}
 8002a8e:	4770      	bx	lr
 8002a90:	bffdfff8 	.word	0xbffdfff8
 8002a94:	cccccccd 	.word	0xcccccccd
 8002a98:	40020000 	.word	0x40020000

08002a9c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b086      	sub	sp, #24
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	60b9      	str	r1, [r7, #8]
 8002aa6:	607a      	str	r2, [r7, #4]
 8002aa8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d101      	bne.n	8002abc <HAL_DMA_Start_IT+0x20>
 8002ab8:	2302      	movs	r3, #2
 8002aba:	e04a      	b.n	8002b52 <HAL_DMA_Start_IT+0xb6>
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d13a      	bne.n	8002b44 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2202      	movs	r2, #2
 8002ad2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f022 0201 	bic.w	r2, r2, #1
 8002aea:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	68b9      	ldr	r1, [r7, #8]
 8002af2:	68f8      	ldr	r0, [r7, #12]
 8002af4:	f000 f938 	bl	8002d68 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d008      	beq.n	8002b12 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f042 020e 	orr.w	r2, r2, #14
 8002b0e:	601a      	str	r2, [r3, #0]
 8002b10:	e00f      	b.n	8002b32 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f022 0204 	bic.w	r2, r2, #4
 8002b20:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f042 020a 	orr.w	r2, r2, #10
 8002b30:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f042 0201 	orr.w	r2, r2, #1
 8002b40:	601a      	str	r2, [r3, #0]
 8002b42:	e005      	b.n	8002b50 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002b50:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3718      	adds	r7, #24
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
	...

08002b5c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b78:	2204      	movs	r2, #4
 8002b7a:	409a      	lsls	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	4013      	ands	r3, r2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d04f      	beq.n	8002c24 <HAL_DMA_IRQHandler+0xc8>
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	f003 0304 	and.w	r3, r3, #4
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d04a      	beq.n	8002c24 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0320 	and.w	r3, r3, #32
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d107      	bne.n	8002bac <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f022 0204 	bic.w	r2, r2, #4
 8002baa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a66      	ldr	r2, [pc, #408]	; (8002d4c <HAL_DMA_IRQHandler+0x1f0>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d029      	beq.n	8002c0a <HAL_DMA_IRQHandler+0xae>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a65      	ldr	r2, [pc, #404]	; (8002d50 <HAL_DMA_IRQHandler+0x1f4>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d022      	beq.n	8002c06 <HAL_DMA_IRQHandler+0xaa>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a63      	ldr	r2, [pc, #396]	; (8002d54 <HAL_DMA_IRQHandler+0x1f8>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d01a      	beq.n	8002c00 <HAL_DMA_IRQHandler+0xa4>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a62      	ldr	r2, [pc, #392]	; (8002d58 <HAL_DMA_IRQHandler+0x1fc>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d012      	beq.n	8002bfa <HAL_DMA_IRQHandler+0x9e>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a60      	ldr	r2, [pc, #384]	; (8002d5c <HAL_DMA_IRQHandler+0x200>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d00a      	beq.n	8002bf4 <HAL_DMA_IRQHandler+0x98>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a5f      	ldr	r2, [pc, #380]	; (8002d60 <HAL_DMA_IRQHandler+0x204>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d102      	bne.n	8002bee <HAL_DMA_IRQHandler+0x92>
 8002be8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002bec:	e00e      	b.n	8002c0c <HAL_DMA_IRQHandler+0xb0>
 8002bee:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002bf2:	e00b      	b.n	8002c0c <HAL_DMA_IRQHandler+0xb0>
 8002bf4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002bf8:	e008      	b.n	8002c0c <HAL_DMA_IRQHandler+0xb0>
 8002bfa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002bfe:	e005      	b.n	8002c0c <HAL_DMA_IRQHandler+0xb0>
 8002c00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c04:	e002      	b.n	8002c0c <HAL_DMA_IRQHandler+0xb0>
 8002c06:	2340      	movs	r3, #64	; 0x40
 8002c08:	e000      	b.n	8002c0c <HAL_DMA_IRQHandler+0xb0>
 8002c0a:	2304      	movs	r3, #4
 8002c0c:	4a55      	ldr	r2, [pc, #340]	; (8002d64 <HAL_DMA_IRQHandler+0x208>)
 8002c0e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	f000 8094 	beq.w	8002d42 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002c22:	e08e      	b.n	8002d42 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c28:	2202      	movs	r2, #2
 8002c2a:	409a      	lsls	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d056      	beq.n	8002ce2 <HAL_DMA_IRQHandler+0x186>
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d051      	beq.n	8002ce2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0320 	and.w	r3, r3, #32
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d10b      	bne.n	8002c64 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f022 020a 	bic.w	r2, r2, #10
 8002c5a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a38      	ldr	r2, [pc, #224]	; (8002d4c <HAL_DMA_IRQHandler+0x1f0>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d029      	beq.n	8002cc2 <HAL_DMA_IRQHandler+0x166>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a37      	ldr	r2, [pc, #220]	; (8002d50 <HAL_DMA_IRQHandler+0x1f4>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d022      	beq.n	8002cbe <HAL_DMA_IRQHandler+0x162>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a35      	ldr	r2, [pc, #212]	; (8002d54 <HAL_DMA_IRQHandler+0x1f8>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d01a      	beq.n	8002cb8 <HAL_DMA_IRQHandler+0x15c>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a34      	ldr	r2, [pc, #208]	; (8002d58 <HAL_DMA_IRQHandler+0x1fc>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d012      	beq.n	8002cb2 <HAL_DMA_IRQHandler+0x156>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a32      	ldr	r2, [pc, #200]	; (8002d5c <HAL_DMA_IRQHandler+0x200>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d00a      	beq.n	8002cac <HAL_DMA_IRQHandler+0x150>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a31      	ldr	r2, [pc, #196]	; (8002d60 <HAL_DMA_IRQHandler+0x204>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d102      	bne.n	8002ca6 <HAL_DMA_IRQHandler+0x14a>
 8002ca0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002ca4:	e00e      	b.n	8002cc4 <HAL_DMA_IRQHandler+0x168>
 8002ca6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002caa:	e00b      	b.n	8002cc4 <HAL_DMA_IRQHandler+0x168>
 8002cac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cb0:	e008      	b.n	8002cc4 <HAL_DMA_IRQHandler+0x168>
 8002cb2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002cb6:	e005      	b.n	8002cc4 <HAL_DMA_IRQHandler+0x168>
 8002cb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002cbc:	e002      	b.n	8002cc4 <HAL_DMA_IRQHandler+0x168>
 8002cbe:	2320      	movs	r3, #32
 8002cc0:	e000      	b.n	8002cc4 <HAL_DMA_IRQHandler+0x168>
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	4a27      	ldr	r2, [pc, #156]	; (8002d64 <HAL_DMA_IRQHandler+0x208>)
 8002cc6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d034      	beq.n	8002d42 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002ce0:	e02f      	b.n	8002d42 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce6:	2208      	movs	r2, #8
 8002ce8:	409a      	lsls	r2, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	4013      	ands	r3, r2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d028      	beq.n	8002d44 <HAL_DMA_IRQHandler+0x1e8>
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	f003 0308 	and.w	r3, r3, #8
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d023      	beq.n	8002d44 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f022 020e 	bic.w	r2, r2, #14
 8002d0a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d14:	2101      	movs	r1, #1
 8002d16:	fa01 f202 	lsl.w	r2, r1, r2
 8002d1a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2201      	movs	r2, #1
 8002d26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d004      	beq.n	8002d44 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	4798      	blx	r3
    }
  }
  return;
 8002d42:	bf00      	nop
 8002d44:	bf00      	nop
}
 8002d46:	3710      	adds	r7, #16
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	40020008 	.word	0x40020008
 8002d50:	4002001c 	.word	0x4002001c
 8002d54:	40020030 	.word	0x40020030
 8002d58:	40020044 	.word	0x40020044
 8002d5c:	40020058 	.word	0x40020058
 8002d60:	4002006c 	.word	0x4002006c
 8002d64:	40020000 	.word	0x40020000

08002d68 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b085      	sub	sp, #20
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	607a      	str	r2, [r7, #4]
 8002d74:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d7e:	2101      	movs	r1, #1
 8002d80:	fa01 f202 	lsl.w	r2, r1, r2
 8002d84:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	683a      	ldr	r2, [r7, #0]
 8002d8c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	2b10      	cmp	r3, #16
 8002d94:	d108      	bne.n	8002da8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	68ba      	ldr	r2, [r7, #8]
 8002da4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002da6:	e007      	b.n	8002db8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68ba      	ldr	r2, [r7, #8]
 8002dae:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	60da      	str	r2, [r3, #12]
}
 8002db8:	bf00      	nop
 8002dba:	3714      	adds	r7, #20
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bc80      	pop	{r7}
 8002dc0:	4770      	bx	lr
	...

08002dc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b08b      	sub	sp, #44	; 0x2c
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dd6:	e169      	b.n	80030ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002dd8:	2201      	movs	r2, #1
 8002dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8002de0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	69fa      	ldr	r2, [r7, #28]
 8002de8:	4013      	ands	r3, r2
 8002dea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	f040 8158 	bne.w	80030a6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	4a9a      	ldr	r2, [pc, #616]	; (8003064 <HAL_GPIO_Init+0x2a0>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d05e      	beq.n	8002ebe <HAL_GPIO_Init+0xfa>
 8002e00:	4a98      	ldr	r2, [pc, #608]	; (8003064 <HAL_GPIO_Init+0x2a0>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d875      	bhi.n	8002ef2 <HAL_GPIO_Init+0x12e>
 8002e06:	4a98      	ldr	r2, [pc, #608]	; (8003068 <HAL_GPIO_Init+0x2a4>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d058      	beq.n	8002ebe <HAL_GPIO_Init+0xfa>
 8002e0c:	4a96      	ldr	r2, [pc, #600]	; (8003068 <HAL_GPIO_Init+0x2a4>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d86f      	bhi.n	8002ef2 <HAL_GPIO_Init+0x12e>
 8002e12:	4a96      	ldr	r2, [pc, #600]	; (800306c <HAL_GPIO_Init+0x2a8>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d052      	beq.n	8002ebe <HAL_GPIO_Init+0xfa>
 8002e18:	4a94      	ldr	r2, [pc, #592]	; (800306c <HAL_GPIO_Init+0x2a8>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d869      	bhi.n	8002ef2 <HAL_GPIO_Init+0x12e>
 8002e1e:	4a94      	ldr	r2, [pc, #592]	; (8003070 <HAL_GPIO_Init+0x2ac>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d04c      	beq.n	8002ebe <HAL_GPIO_Init+0xfa>
 8002e24:	4a92      	ldr	r2, [pc, #584]	; (8003070 <HAL_GPIO_Init+0x2ac>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d863      	bhi.n	8002ef2 <HAL_GPIO_Init+0x12e>
 8002e2a:	4a92      	ldr	r2, [pc, #584]	; (8003074 <HAL_GPIO_Init+0x2b0>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d046      	beq.n	8002ebe <HAL_GPIO_Init+0xfa>
 8002e30:	4a90      	ldr	r2, [pc, #576]	; (8003074 <HAL_GPIO_Init+0x2b0>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d85d      	bhi.n	8002ef2 <HAL_GPIO_Init+0x12e>
 8002e36:	2b12      	cmp	r3, #18
 8002e38:	d82a      	bhi.n	8002e90 <HAL_GPIO_Init+0xcc>
 8002e3a:	2b12      	cmp	r3, #18
 8002e3c:	d859      	bhi.n	8002ef2 <HAL_GPIO_Init+0x12e>
 8002e3e:	a201      	add	r2, pc, #4	; (adr r2, 8002e44 <HAL_GPIO_Init+0x80>)
 8002e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e44:	08002ebf 	.word	0x08002ebf
 8002e48:	08002e99 	.word	0x08002e99
 8002e4c:	08002eab 	.word	0x08002eab
 8002e50:	08002eed 	.word	0x08002eed
 8002e54:	08002ef3 	.word	0x08002ef3
 8002e58:	08002ef3 	.word	0x08002ef3
 8002e5c:	08002ef3 	.word	0x08002ef3
 8002e60:	08002ef3 	.word	0x08002ef3
 8002e64:	08002ef3 	.word	0x08002ef3
 8002e68:	08002ef3 	.word	0x08002ef3
 8002e6c:	08002ef3 	.word	0x08002ef3
 8002e70:	08002ef3 	.word	0x08002ef3
 8002e74:	08002ef3 	.word	0x08002ef3
 8002e78:	08002ef3 	.word	0x08002ef3
 8002e7c:	08002ef3 	.word	0x08002ef3
 8002e80:	08002ef3 	.word	0x08002ef3
 8002e84:	08002ef3 	.word	0x08002ef3
 8002e88:	08002ea1 	.word	0x08002ea1
 8002e8c:	08002eb5 	.word	0x08002eb5
 8002e90:	4a79      	ldr	r2, [pc, #484]	; (8003078 <HAL_GPIO_Init+0x2b4>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d013      	beq.n	8002ebe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002e96:	e02c      	b.n	8002ef2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	623b      	str	r3, [r7, #32]
          break;
 8002e9e:	e029      	b.n	8002ef4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	3304      	adds	r3, #4
 8002ea6:	623b      	str	r3, [r7, #32]
          break;
 8002ea8:	e024      	b.n	8002ef4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	3308      	adds	r3, #8
 8002eb0:	623b      	str	r3, [r7, #32]
          break;
 8002eb2:	e01f      	b.n	8002ef4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	330c      	adds	r3, #12
 8002eba:	623b      	str	r3, [r7, #32]
          break;
 8002ebc:	e01a      	b.n	8002ef4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d102      	bne.n	8002ecc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002ec6:	2304      	movs	r3, #4
 8002ec8:	623b      	str	r3, [r7, #32]
          break;
 8002eca:	e013      	b.n	8002ef4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d105      	bne.n	8002ee0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ed4:	2308      	movs	r3, #8
 8002ed6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	69fa      	ldr	r2, [r7, #28]
 8002edc:	611a      	str	r2, [r3, #16]
          break;
 8002ede:	e009      	b.n	8002ef4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ee0:	2308      	movs	r3, #8
 8002ee2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	69fa      	ldr	r2, [r7, #28]
 8002ee8:	615a      	str	r2, [r3, #20]
          break;
 8002eea:	e003      	b.n	8002ef4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002eec:	2300      	movs	r3, #0
 8002eee:	623b      	str	r3, [r7, #32]
          break;
 8002ef0:	e000      	b.n	8002ef4 <HAL_GPIO_Init+0x130>
          break;
 8002ef2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	2bff      	cmp	r3, #255	; 0xff
 8002ef8:	d801      	bhi.n	8002efe <HAL_GPIO_Init+0x13a>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	e001      	b.n	8002f02 <HAL_GPIO_Init+0x13e>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	3304      	adds	r3, #4
 8002f02:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	2bff      	cmp	r3, #255	; 0xff
 8002f08:	d802      	bhi.n	8002f10 <HAL_GPIO_Init+0x14c>
 8002f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	e002      	b.n	8002f16 <HAL_GPIO_Init+0x152>
 8002f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f12:	3b08      	subs	r3, #8
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	210f      	movs	r1, #15
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	fa01 f303 	lsl.w	r3, r1, r3
 8002f24:	43db      	mvns	r3, r3
 8002f26:	401a      	ands	r2, r3
 8002f28:	6a39      	ldr	r1, [r7, #32]
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f30:	431a      	orrs	r2, r3
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f000 80b1 	beq.w	80030a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002f44:	4b4d      	ldr	r3, [pc, #308]	; (800307c <HAL_GPIO_Init+0x2b8>)
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	4a4c      	ldr	r2, [pc, #304]	; (800307c <HAL_GPIO_Init+0x2b8>)
 8002f4a:	f043 0301 	orr.w	r3, r3, #1
 8002f4e:	6193      	str	r3, [r2, #24]
 8002f50:	4b4a      	ldr	r3, [pc, #296]	; (800307c <HAL_GPIO_Init+0x2b8>)
 8002f52:	699b      	ldr	r3, [r3, #24]
 8002f54:	f003 0301 	and.w	r3, r3, #1
 8002f58:	60bb      	str	r3, [r7, #8]
 8002f5a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002f5c:	4a48      	ldr	r2, [pc, #288]	; (8003080 <HAL_GPIO_Init+0x2bc>)
 8002f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f60:	089b      	lsrs	r3, r3, #2
 8002f62:	3302      	adds	r3, #2
 8002f64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f68:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6c:	f003 0303 	and.w	r3, r3, #3
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	220f      	movs	r2, #15
 8002f74:	fa02 f303 	lsl.w	r3, r2, r3
 8002f78:	43db      	mvns	r3, r3
 8002f7a:	68fa      	ldr	r2, [r7, #12]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a40      	ldr	r2, [pc, #256]	; (8003084 <HAL_GPIO_Init+0x2c0>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d013      	beq.n	8002fb0 <HAL_GPIO_Init+0x1ec>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4a3f      	ldr	r2, [pc, #252]	; (8003088 <HAL_GPIO_Init+0x2c4>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d00d      	beq.n	8002fac <HAL_GPIO_Init+0x1e8>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a3e      	ldr	r2, [pc, #248]	; (800308c <HAL_GPIO_Init+0x2c8>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d007      	beq.n	8002fa8 <HAL_GPIO_Init+0x1e4>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4a3d      	ldr	r2, [pc, #244]	; (8003090 <HAL_GPIO_Init+0x2cc>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d101      	bne.n	8002fa4 <HAL_GPIO_Init+0x1e0>
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e006      	b.n	8002fb2 <HAL_GPIO_Init+0x1ee>
 8002fa4:	2304      	movs	r3, #4
 8002fa6:	e004      	b.n	8002fb2 <HAL_GPIO_Init+0x1ee>
 8002fa8:	2302      	movs	r3, #2
 8002faa:	e002      	b.n	8002fb2 <HAL_GPIO_Init+0x1ee>
 8002fac:	2301      	movs	r3, #1
 8002fae:	e000      	b.n	8002fb2 <HAL_GPIO_Init+0x1ee>
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fb4:	f002 0203 	and.w	r2, r2, #3
 8002fb8:	0092      	lsls	r2, r2, #2
 8002fba:	4093      	lsls	r3, r2
 8002fbc:	68fa      	ldr	r2, [r7, #12]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002fc2:	492f      	ldr	r1, [pc, #188]	; (8003080 <HAL_GPIO_Init+0x2bc>)
 8002fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc6:	089b      	lsrs	r3, r3, #2
 8002fc8:	3302      	adds	r3, #2
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d006      	beq.n	8002fea <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002fdc:	4b2d      	ldr	r3, [pc, #180]	; (8003094 <HAL_GPIO_Init+0x2d0>)
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	492c      	ldr	r1, [pc, #176]	; (8003094 <HAL_GPIO_Init+0x2d0>)
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	600b      	str	r3, [r1, #0]
 8002fe8:	e006      	b.n	8002ff8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002fea:	4b2a      	ldr	r3, [pc, #168]	; (8003094 <HAL_GPIO_Init+0x2d0>)
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	43db      	mvns	r3, r3
 8002ff2:	4928      	ldr	r1, [pc, #160]	; (8003094 <HAL_GPIO_Init+0x2d0>)
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d006      	beq.n	8003012 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003004:	4b23      	ldr	r3, [pc, #140]	; (8003094 <HAL_GPIO_Init+0x2d0>)
 8003006:	685a      	ldr	r2, [r3, #4]
 8003008:	4922      	ldr	r1, [pc, #136]	; (8003094 <HAL_GPIO_Init+0x2d0>)
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	4313      	orrs	r3, r2
 800300e:	604b      	str	r3, [r1, #4]
 8003010:	e006      	b.n	8003020 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003012:	4b20      	ldr	r3, [pc, #128]	; (8003094 <HAL_GPIO_Init+0x2d0>)
 8003014:	685a      	ldr	r2, [r3, #4]
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	43db      	mvns	r3, r3
 800301a:	491e      	ldr	r1, [pc, #120]	; (8003094 <HAL_GPIO_Init+0x2d0>)
 800301c:	4013      	ands	r3, r2
 800301e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d006      	beq.n	800303a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800302c:	4b19      	ldr	r3, [pc, #100]	; (8003094 <HAL_GPIO_Init+0x2d0>)
 800302e:	689a      	ldr	r2, [r3, #8]
 8003030:	4918      	ldr	r1, [pc, #96]	; (8003094 <HAL_GPIO_Init+0x2d0>)
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	4313      	orrs	r3, r2
 8003036:	608b      	str	r3, [r1, #8]
 8003038:	e006      	b.n	8003048 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800303a:	4b16      	ldr	r3, [pc, #88]	; (8003094 <HAL_GPIO_Init+0x2d0>)
 800303c:	689a      	ldr	r2, [r3, #8]
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	43db      	mvns	r3, r3
 8003042:	4914      	ldr	r1, [pc, #80]	; (8003094 <HAL_GPIO_Init+0x2d0>)
 8003044:	4013      	ands	r3, r2
 8003046:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d021      	beq.n	8003098 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003054:	4b0f      	ldr	r3, [pc, #60]	; (8003094 <HAL_GPIO_Init+0x2d0>)
 8003056:	68da      	ldr	r2, [r3, #12]
 8003058:	490e      	ldr	r1, [pc, #56]	; (8003094 <HAL_GPIO_Init+0x2d0>)
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	4313      	orrs	r3, r2
 800305e:	60cb      	str	r3, [r1, #12]
 8003060:	e021      	b.n	80030a6 <HAL_GPIO_Init+0x2e2>
 8003062:	bf00      	nop
 8003064:	10320000 	.word	0x10320000
 8003068:	10310000 	.word	0x10310000
 800306c:	10220000 	.word	0x10220000
 8003070:	10210000 	.word	0x10210000
 8003074:	10120000 	.word	0x10120000
 8003078:	10110000 	.word	0x10110000
 800307c:	40021000 	.word	0x40021000
 8003080:	40010000 	.word	0x40010000
 8003084:	40010800 	.word	0x40010800
 8003088:	40010c00 	.word	0x40010c00
 800308c:	40011000 	.word	0x40011000
 8003090:	40011400 	.word	0x40011400
 8003094:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003098:	4b0b      	ldr	r3, [pc, #44]	; (80030c8 <HAL_GPIO_Init+0x304>)
 800309a:	68da      	ldr	r2, [r3, #12]
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	43db      	mvns	r3, r3
 80030a0:	4909      	ldr	r1, [pc, #36]	; (80030c8 <HAL_GPIO_Init+0x304>)
 80030a2:	4013      	ands	r3, r2
 80030a4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80030a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a8:	3301      	adds	r3, #1
 80030aa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b2:	fa22 f303 	lsr.w	r3, r2, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	f47f ae8e 	bne.w	8002dd8 <HAL_GPIO_Init+0x14>
  }
}
 80030bc:	bf00      	nop
 80030be:	bf00      	nop
 80030c0:	372c      	adds	r7, #44	; 0x2c
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bc80      	pop	{r7}
 80030c6:	4770      	bx	lr
 80030c8:	40010400 	.word	0x40010400

080030cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b085      	sub	sp, #20
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	460b      	mov	r3, r1
 80030d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	689a      	ldr	r2, [r3, #8]
 80030dc:	887b      	ldrh	r3, [r7, #2]
 80030de:	4013      	ands	r3, r2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d002      	beq.n	80030ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80030e4:	2301      	movs	r3, #1
 80030e6:	73fb      	strb	r3, [r7, #15]
 80030e8:	e001      	b.n	80030ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80030ea:	2300      	movs	r3, #0
 80030ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80030ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3714      	adds	r7, #20
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bc80      	pop	{r7}
 80030f8:	4770      	bx	lr

080030fa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030fa:	b480      	push	{r7}
 80030fc:	b083      	sub	sp, #12
 80030fe:	af00      	add	r7, sp, #0
 8003100:	6078      	str	r0, [r7, #4]
 8003102:	460b      	mov	r3, r1
 8003104:	807b      	strh	r3, [r7, #2]
 8003106:	4613      	mov	r3, r2
 8003108:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800310a:	787b      	ldrb	r3, [r7, #1]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d003      	beq.n	8003118 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003110:	887a      	ldrh	r2, [r7, #2]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003116:	e003      	b.n	8003120 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003118:	887b      	ldrh	r3, [r7, #2]
 800311a:	041a      	lsls	r2, r3, #16
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	611a      	str	r2, [r3, #16]
}
 8003120:	bf00      	nop
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	bc80      	pop	{r7}
 8003128:	4770      	bx	lr
	...

0800312c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b086      	sub	sp, #24
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d101      	bne.n	800313e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e272      	b.n	8003624 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0301 	and.w	r3, r3, #1
 8003146:	2b00      	cmp	r3, #0
 8003148:	f000 8087 	beq.w	800325a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800314c:	4b92      	ldr	r3, [pc, #584]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f003 030c 	and.w	r3, r3, #12
 8003154:	2b04      	cmp	r3, #4
 8003156:	d00c      	beq.n	8003172 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003158:	4b8f      	ldr	r3, [pc, #572]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f003 030c 	and.w	r3, r3, #12
 8003160:	2b08      	cmp	r3, #8
 8003162:	d112      	bne.n	800318a <HAL_RCC_OscConfig+0x5e>
 8003164:	4b8c      	ldr	r3, [pc, #560]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800316c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003170:	d10b      	bne.n	800318a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003172:	4b89      	ldr	r3, [pc, #548]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d06c      	beq.n	8003258 <HAL_RCC_OscConfig+0x12c>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d168      	bne.n	8003258 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e24c      	b.n	8003624 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003192:	d106      	bne.n	80031a2 <HAL_RCC_OscConfig+0x76>
 8003194:	4b80      	ldr	r3, [pc, #512]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a7f      	ldr	r2, [pc, #508]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 800319a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800319e:	6013      	str	r3, [r2, #0]
 80031a0:	e02e      	b.n	8003200 <HAL_RCC_OscConfig+0xd4>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d10c      	bne.n	80031c4 <HAL_RCC_OscConfig+0x98>
 80031aa:	4b7b      	ldr	r3, [pc, #492]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a7a      	ldr	r2, [pc, #488]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 80031b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031b4:	6013      	str	r3, [r2, #0]
 80031b6:	4b78      	ldr	r3, [pc, #480]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a77      	ldr	r2, [pc, #476]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 80031bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031c0:	6013      	str	r3, [r2, #0]
 80031c2:	e01d      	b.n	8003200 <HAL_RCC_OscConfig+0xd4>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031cc:	d10c      	bne.n	80031e8 <HAL_RCC_OscConfig+0xbc>
 80031ce:	4b72      	ldr	r3, [pc, #456]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a71      	ldr	r2, [pc, #452]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 80031d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031d8:	6013      	str	r3, [r2, #0]
 80031da:	4b6f      	ldr	r3, [pc, #444]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a6e      	ldr	r2, [pc, #440]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 80031e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031e4:	6013      	str	r3, [r2, #0]
 80031e6:	e00b      	b.n	8003200 <HAL_RCC_OscConfig+0xd4>
 80031e8:	4b6b      	ldr	r3, [pc, #428]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a6a      	ldr	r2, [pc, #424]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 80031ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031f2:	6013      	str	r3, [r2, #0]
 80031f4:	4b68      	ldr	r3, [pc, #416]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a67      	ldr	r2, [pc, #412]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 80031fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d013      	beq.n	8003230 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003208:	f7fe ff14 	bl	8002034 <HAL_GetTick>
 800320c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800320e:	e008      	b.n	8003222 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003210:	f7fe ff10 	bl	8002034 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b64      	cmp	r3, #100	; 0x64
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e200      	b.n	8003624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003222:	4b5d      	ldr	r3, [pc, #372]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d0f0      	beq.n	8003210 <HAL_RCC_OscConfig+0xe4>
 800322e:	e014      	b.n	800325a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003230:	f7fe ff00 	bl	8002034 <HAL_GetTick>
 8003234:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003236:	e008      	b.n	800324a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003238:	f7fe fefc 	bl	8002034 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b64      	cmp	r3, #100	; 0x64
 8003244:	d901      	bls.n	800324a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e1ec      	b.n	8003624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800324a:	4b53      	ldr	r3, [pc, #332]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1f0      	bne.n	8003238 <HAL_RCC_OscConfig+0x10c>
 8003256:	e000      	b.n	800325a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003258:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d063      	beq.n	800332e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003266:	4b4c      	ldr	r3, [pc, #304]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f003 030c 	and.w	r3, r3, #12
 800326e:	2b00      	cmp	r3, #0
 8003270:	d00b      	beq.n	800328a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003272:	4b49      	ldr	r3, [pc, #292]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f003 030c 	and.w	r3, r3, #12
 800327a:	2b08      	cmp	r3, #8
 800327c:	d11c      	bne.n	80032b8 <HAL_RCC_OscConfig+0x18c>
 800327e:	4b46      	ldr	r3, [pc, #280]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d116      	bne.n	80032b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800328a:	4b43      	ldr	r3, [pc, #268]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	2b00      	cmp	r3, #0
 8003294:	d005      	beq.n	80032a2 <HAL_RCC_OscConfig+0x176>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	2b01      	cmp	r3, #1
 800329c:	d001      	beq.n	80032a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e1c0      	b.n	8003624 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032a2:	4b3d      	ldr	r3, [pc, #244]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	695b      	ldr	r3, [r3, #20]
 80032ae:	00db      	lsls	r3, r3, #3
 80032b0:	4939      	ldr	r1, [pc, #228]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 80032b2:	4313      	orrs	r3, r2
 80032b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032b6:	e03a      	b.n	800332e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	691b      	ldr	r3, [r3, #16]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d020      	beq.n	8003302 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032c0:	4b36      	ldr	r3, [pc, #216]	; (800339c <HAL_RCC_OscConfig+0x270>)
 80032c2:	2201      	movs	r2, #1
 80032c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c6:	f7fe feb5 	bl	8002034 <HAL_GetTick>
 80032ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032cc:	e008      	b.n	80032e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032ce:	f7fe feb1 	bl	8002034 <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d901      	bls.n	80032e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e1a1      	b.n	8003624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032e0:	4b2d      	ldr	r3, [pc, #180]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0302 	and.w	r3, r3, #2
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d0f0      	beq.n	80032ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032ec:	4b2a      	ldr	r3, [pc, #168]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	695b      	ldr	r3, [r3, #20]
 80032f8:	00db      	lsls	r3, r3, #3
 80032fa:	4927      	ldr	r1, [pc, #156]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 80032fc:	4313      	orrs	r3, r2
 80032fe:	600b      	str	r3, [r1, #0]
 8003300:	e015      	b.n	800332e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003302:	4b26      	ldr	r3, [pc, #152]	; (800339c <HAL_RCC_OscConfig+0x270>)
 8003304:	2200      	movs	r2, #0
 8003306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003308:	f7fe fe94 	bl	8002034 <HAL_GetTick>
 800330c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800330e:	e008      	b.n	8003322 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003310:	f7fe fe90 	bl	8002034 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b02      	cmp	r3, #2
 800331c:	d901      	bls.n	8003322 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e180      	b.n	8003624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003322:	4b1d      	ldr	r3, [pc, #116]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0302 	and.w	r3, r3, #2
 800332a:	2b00      	cmp	r3, #0
 800332c:	d1f0      	bne.n	8003310 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0308 	and.w	r3, r3, #8
 8003336:	2b00      	cmp	r3, #0
 8003338:	d03a      	beq.n	80033b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d019      	beq.n	8003376 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003342:	4b17      	ldr	r3, [pc, #92]	; (80033a0 <HAL_RCC_OscConfig+0x274>)
 8003344:	2201      	movs	r2, #1
 8003346:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003348:	f7fe fe74 	bl	8002034 <HAL_GetTick>
 800334c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800334e:	e008      	b.n	8003362 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003350:	f7fe fe70 	bl	8002034 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b02      	cmp	r3, #2
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e160      	b.n	8003624 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003362:	4b0d      	ldr	r3, [pc, #52]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 8003364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d0f0      	beq.n	8003350 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800336e:	2001      	movs	r0, #1
 8003370:	f000 fad8 	bl	8003924 <RCC_Delay>
 8003374:	e01c      	b.n	80033b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003376:	4b0a      	ldr	r3, [pc, #40]	; (80033a0 <HAL_RCC_OscConfig+0x274>)
 8003378:	2200      	movs	r2, #0
 800337a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800337c:	f7fe fe5a 	bl	8002034 <HAL_GetTick>
 8003380:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003382:	e00f      	b.n	80033a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003384:	f7fe fe56 	bl	8002034 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b02      	cmp	r3, #2
 8003390:	d908      	bls.n	80033a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e146      	b.n	8003624 <HAL_RCC_OscConfig+0x4f8>
 8003396:	bf00      	nop
 8003398:	40021000 	.word	0x40021000
 800339c:	42420000 	.word	0x42420000
 80033a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033a4:	4b92      	ldr	r3, [pc, #584]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 80033a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a8:	f003 0302 	and.w	r3, r3, #2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d1e9      	bne.n	8003384 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0304 	and.w	r3, r3, #4
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	f000 80a6 	beq.w	800350a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033be:	2300      	movs	r3, #0
 80033c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033c2:	4b8b      	ldr	r3, [pc, #556]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 80033c4:	69db      	ldr	r3, [r3, #28]
 80033c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10d      	bne.n	80033ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ce:	4b88      	ldr	r3, [pc, #544]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 80033d0:	69db      	ldr	r3, [r3, #28]
 80033d2:	4a87      	ldr	r2, [pc, #540]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 80033d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033d8:	61d3      	str	r3, [r2, #28]
 80033da:	4b85      	ldr	r3, [pc, #532]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 80033dc:	69db      	ldr	r3, [r3, #28]
 80033de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033e2:	60bb      	str	r3, [r7, #8]
 80033e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033e6:	2301      	movs	r3, #1
 80033e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ea:	4b82      	ldr	r3, [pc, #520]	; (80035f4 <HAL_RCC_OscConfig+0x4c8>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d118      	bne.n	8003428 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033f6:	4b7f      	ldr	r3, [pc, #508]	; (80035f4 <HAL_RCC_OscConfig+0x4c8>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a7e      	ldr	r2, [pc, #504]	; (80035f4 <HAL_RCC_OscConfig+0x4c8>)
 80033fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003400:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003402:	f7fe fe17 	bl	8002034 <HAL_GetTick>
 8003406:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003408:	e008      	b.n	800341c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800340a:	f7fe fe13 	bl	8002034 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	2b64      	cmp	r3, #100	; 0x64
 8003416:	d901      	bls.n	800341c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e103      	b.n	8003624 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800341c:	4b75      	ldr	r3, [pc, #468]	; (80035f4 <HAL_RCC_OscConfig+0x4c8>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003424:	2b00      	cmp	r3, #0
 8003426:	d0f0      	beq.n	800340a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	2b01      	cmp	r3, #1
 800342e:	d106      	bne.n	800343e <HAL_RCC_OscConfig+0x312>
 8003430:	4b6f      	ldr	r3, [pc, #444]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 8003432:	6a1b      	ldr	r3, [r3, #32]
 8003434:	4a6e      	ldr	r2, [pc, #440]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 8003436:	f043 0301 	orr.w	r3, r3, #1
 800343a:	6213      	str	r3, [r2, #32]
 800343c:	e02d      	b.n	800349a <HAL_RCC_OscConfig+0x36e>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d10c      	bne.n	8003460 <HAL_RCC_OscConfig+0x334>
 8003446:	4b6a      	ldr	r3, [pc, #424]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 8003448:	6a1b      	ldr	r3, [r3, #32]
 800344a:	4a69      	ldr	r2, [pc, #420]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 800344c:	f023 0301 	bic.w	r3, r3, #1
 8003450:	6213      	str	r3, [r2, #32]
 8003452:	4b67      	ldr	r3, [pc, #412]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 8003454:	6a1b      	ldr	r3, [r3, #32]
 8003456:	4a66      	ldr	r2, [pc, #408]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 8003458:	f023 0304 	bic.w	r3, r3, #4
 800345c:	6213      	str	r3, [r2, #32]
 800345e:	e01c      	b.n	800349a <HAL_RCC_OscConfig+0x36e>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	2b05      	cmp	r3, #5
 8003466:	d10c      	bne.n	8003482 <HAL_RCC_OscConfig+0x356>
 8003468:	4b61      	ldr	r3, [pc, #388]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 800346a:	6a1b      	ldr	r3, [r3, #32]
 800346c:	4a60      	ldr	r2, [pc, #384]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 800346e:	f043 0304 	orr.w	r3, r3, #4
 8003472:	6213      	str	r3, [r2, #32]
 8003474:	4b5e      	ldr	r3, [pc, #376]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 8003476:	6a1b      	ldr	r3, [r3, #32]
 8003478:	4a5d      	ldr	r2, [pc, #372]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 800347a:	f043 0301 	orr.w	r3, r3, #1
 800347e:	6213      	str	r3, [r2, #32]
 8003480:	e00b      	b.n	800349a <HAL_RCC_OscConfig+0x36e>
 8003482:	4b5b      	ldr	r3, [pc, #364]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 8003484:	6a1b      	ldr	r3, [r3, #32]
 8003486:	4a5a      	ldr	r2, [pc, #360]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 8003488:	f023 0301 	bic.w	r3, r3, #1
 800348c:	6213      	str	r3, [r2, #32]
 800348e:	4b58      	ldr	r3, [pc, #352]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 8003490:	6a1b      	ldr	r3, [r3, #32]
 8003492:	4a57      	ldr	r2, [pc, #348]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 8003494:	f023 0304 	bic.w	r3, r3, #4
 8003498:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d015      	beq.n	80034ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034a2:	f7fe fdc7 	bl	8002034 <HAL_GetTick>
 80034a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034a8:	e00a      	b.n	80034c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034aa:	f7fe fdc3 	bl	8002034 <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d901      	bls.n	80034c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e0b1      	b.n	8003624 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034c0:	4b4b      	ldr	r3, [pc, #300]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 80034c2:	6a1b      	ldr	r3, [r3, #32]
 80034c4:	f003 0302 	and.w	r3, r3, #2
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d0ee      	beq.n	80034aa <HAL_RCC_OscConfig+0x37e>
 80034cc:	e014      	b.n	80034f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034ce:	f7fe fdb1 	bl	8002034 <HAL_GetTick>
 80034d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034d4:	e00a      	b.n	80034ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034d6:	f7fe fdad 	bl	8002034 <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d901      	bls.n	80034ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e09b      	b.n	8003624 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034ec:	4b40      	ldr	r3, [pc, #256]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 80034ee:	6a1b      	ldr	r3, [r3, #32]
 80034f0:	f003 0302 	and.w	r3, r3, #2
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d1ee      	bne.n	80034d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80034f8:	7dfb      	ldrb	r3, [r7, #23]
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d105      	bne.n	800350a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034fe:	4b3c      	ldr	r3, [pc, #240]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 8003500:	69db      	ldr	r3, [r3, #28]
 8003502:	4a3b      	ldr	r2, [pc, #236]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 8003504:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003508:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	69db      	ldr	r3, [r3, #28]
 800350e:	2b00      	cmp	r3, #0
 8003510:	f000 8087 	beq.w	8003622 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003514:	4b36      	ldr	r3, [pc, #216]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f003 030c 	and.w	r3, r3, #12
 800351c:	2b08      	cmp	r3, #8
 800351e:	d061      	beq.n	80035e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	69db      	ldr	r3, [r3, #28]
 8003524:	2b02      	cmp	r3, #2
 8003526:	d146      	bne.n	80035b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003528:	4b33      	ldr	r3, [pc, #204]	; (80035f8 <HAL_RCC_OscConfig+0x4cc>)
 800352a:	2200      	movs	r2, #0
 800352c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800352e:	f7fe fd81 	bl	8002034 <HAL_GetTick>
 8003532:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003534:	e008      	b.n	8003548 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003536:	f7fe fd7d 	bl	8002034 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	2b02      	cmp	r3, #2
 8003542:	d901      	bls.n	8003548 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e06d      	b.n	8003624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003548:	4b29      	ldr	r3, [pc, #164]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d1f0      	bne.n	8003536 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a1b      	ldr	r3, [r3, #32]
 8003558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800355c:	d108      	bne.n	8003570 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800355e:	4b24      	ldr	r3, [pc, #144]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	4921      	ldr	r1, [pc, #132]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 800356c:	4313      	orrs	r3, r2
 800356e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003570:	4b1f      	ldr	r3, [pc, #124]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a19      	ldr	r1, [r3, #32]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003580:	430b      	orrs	r3, r1
 8003582:	491b      	ldr	r1, [pc, #108]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 8003584:	4313      	orrs	r3, r2
 8003586:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003588:	4b1b      	ldr	r3, [pc, #108]	; (80035f8 <HAL_RCC_OscConfig+0x4cc>)
 800358a:	2201      	movs	r2, #1
 800358c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800358e:	f7fe fd51 	bl	8002034 <HAL_GetTick>
 8003592:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003594:	e008      	b.n	80035a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003596:	f7fe fd4d 	bl	8002034 <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d901      	bls.n	80035a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e03d      	b.n	8003624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035a8:	4b11      	ldr	r3, [pc, #68]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d0f0      	beq.n	8003596 <HAL_RCC_OscConfig+0x46a>
 80035b4:	e035      	b.n	8003622 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035b6:	4b10      	ldr	r3, [pc, #64]	; (80035f8 <HAL_RCC_OscConfig+0x4cc>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035bc:	f7fe fd3a 	bl	8002034 <HAL_GetTick>
 80035c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035c2:	e008      	b.n	80035d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035c4:	f7fe fd36 	bl	8002034 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e026      	b.n	8003624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035d6:	4b06      	ldr	r3, [pc, #24]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1f0      	bne.n	80035c4 <HAL_RCC_OscConfig+0x498>
 80035e2:	e01e      	b.n	8003622 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	69db      	ldr	r3, [r3, #28]
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d107      	bne.n	80035fc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e019      	b.n	8003624 <HAL_RCC_OscConfig+0x4f8>
 80035f0:	40021000 	.word	0x40021000
 80035f4:	40007000 	.word	0x40007000
 80035f8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80035fc:	4b0b      	ldr	r3, [pc, #44]	; (800362c <HAL_RCC_OscConfig+0x500>)
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a1b      	ldr	r3, [r3, #32]
 800360c:	429a      	cmp	r2, r3
 800360e:	d106      	bne.n	800361e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800361a:	429a      	cmp	r2, r3
 800361c:	d001      	beq.n	8003622 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e000      	b.n	8003624 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003622:	2300      	movs	r3, #0
}
 8003624:	4618      	mov	r0, r3
 8003626:	3718      	adds	r7, #24
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	40021000 	.word	0x40021000

08003630 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d101      	bne.n	8003644 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e0d0      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003644:	4b6a      	ldr	r3, [pc, #424]	; (80037f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0307 	and.w	r3, r3, #7
 800364c:	683a      	ldr	r2, [r7, #0]
 800364e:	429a      	cmp	r2, r3
 8003650:	d910      	bls.n	8003674 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003652:	4b67      	ldr	r3, [pc, #412]	; (80037f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f023 0207 	bic.w	r2, r3, #7
 800365a:	4965      	ldr	r1, [pc, #404]	; (80037f0 <HAL_RCC_ClockConfig+0x1c0>)
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	4313      	orrs	r3, r2
 8003660:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003662:	4b63      	ldr	r3, [pc, #396]	; (80037f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0307 	and.w	r3, r3, #7
 800366a:	683a      	ldr	r2, [r7, #0]
 800366c:	429a      	cmp	r2, r3
 800366e:	d001      	beq.n	8003674 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e0b8      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0302 	and.w	r3, r3, #2
 800367c:	2b00      	cmp	r3, #0
 800367e:	d020      	beq.n	80036c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0304 	and.w	r3, r3, #4
 8003688:	2b00      	cmp	r3, #0
 800368a:	d005      	beq.n	8003698 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800368c:	4b59      	ldr	r3, [pc, #356]	; (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	4a58      	ldr	r2, [pc, #352]	; (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003692:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003696:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0308 	and.w	r3, r3, #8
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d005      	beq.n	80036b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036a4:	4b53      	ldr	r3, [pc, #332]	; (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	4a52      	ldr	r2, [pc, #328]	; (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 80036aa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80036ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036b0:	4b50      	ldr	r3, [pc, #320]	; (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	494d      	ldr	r1, [pc, #308]	; (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d040      	beq.n	8003750 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d107      	bne.n	80036e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036d6:	4b47      	ldr	r3, [pc, #284]	; (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d115      	bne.n	800370e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e07f      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d107      	bne.n	80036fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ee:	4b41      	ldr	r3, [pc, #260]	; (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d109      	bne.n	800370e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e073      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036fe:	4b3d      	ldr	r3, [pc, #244]	; (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0302 	and.w	r3, r3, #2
 8003706:	2b00      	cmp	r3, #0
 8003708:	d101      	bne.n	800370e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e06b      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800370e:	4b39      	ldr	r3, [pc, #228]	; (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f023 0203 	bic.w	r2, r3, #3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	4936      	ldr	r1, [pc, #216]	; (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 800371c:	4313      	orrs	r3, r2
 800371e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003720:	f7fe fc88 	bl	8002034 <HAL_GetTick>
 8003724:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003726:	e00a      	b.n	800373e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003728:	f7fe fc84 	bl	8002034 <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	f241 3288 	movw	r2, #5000	; 0x1388
 8003736:	4293      	cmp	r3, r2
 8003738:	d901      	bls.n	800373e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e053      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800373e:	4b2d      	ldr	r3, [pc, #180]	; (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f003 020c 	and.w	r2, r3, #12
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	429a      	cmp	r2, r3
 800374e:	d1eb      	bne.n	8003728 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003750:	4b27      	ldr	r3, [pc, #156]	; (80037f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0307 	and.w	r3, r3, #7
 8003758:	683a      	ldr	r2, [r7, #0]
 800375a:	429a      	cmp	r2, r3
 800375c:	d210      	bcs.n	8003780 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800375e:	4b24      	ldr	r3, [pc, #144]	; (80037f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f023 0207 	bic.w	r2, r3, #7
 8003766:	4922      	ldr	r1, [pc, #136]	; (80037f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	4313      	orrs	r3, r2
 800376c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800376e:	4b20      	ldr	r3, [pc, #128]	; (80037f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0307 	and.w	r3, r3, #7
 8003776:	683a      	ldr	r2, [r7, #0]
 8003778:	429a      	cmp	r2, r3
 800377a:	d001      	beq.n	8003780 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e032      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0304 	and.w	r3, r3, #4
 8003788:	2b00      	cmp	r3, #0
 800378a:	d008      	beq.n	800379e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800378c:	4b19      	ldr	r3, [pc, #100]	; (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	4916      	ldr	r1, [pc, #88]	; (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 800379a:	4313      	orrs	r3, r2
 800379c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0308 	and.w	r3, r3, #8
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d009      	beq.n	80037be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80037aa:	4b12      	ldr	r3, [pc, #72]	; (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	00db      	lsls	r3, r3, #3
 80037b8:	490e      	ldr	r1, [pc, #56]	; (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80037be:	f000 f821 	bl	8003804 <HAL_RCC_GetSysClockFreq>
 80037c2:	4602      	mov	r2, r0
 80037c4:	4b0b      	ldr	r3, [pc, #44]	; (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	091b      	lsrs	r3, r3, #4
 80037ca:	f003 030f 	and.w	r3, r3, #15
 80037ce:	490a      	ldr	r1, [pc, #40]	; (80037f8 <HAL_RCC_ClockConfig+0x1c8>)
 80037d0:	5ccb      	ldrb	r3, [r1, r3]
 80037d2:	fa22 f303 	lsr.w	r3, r2, r3
 80037d6:	4a09      	ldr	r2, [pc, #36]	; (80037fc <HAL_RCC_ClockConfig+0x1cc>)
 80037d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80037da:	4b09      	ldr	r3, [pc, #36]	; (8003800 <HAL_RCC_ClockConfig+0x1d0>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4618      	mov	r0, r3
 80037e0:	f7fe fbe6 	bl	8001fb0 <HAL_InitTick>

  return HAL_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3710      	adds	r7, #16
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	40022000 	.word	0x40022000
 80037f4:	40021000 	.word	0x40021000
 80037f8:	08005728 	.word	0x08005728
 80037fc:	20000000 	.word	0x20000000
 8003800:	20000004 	.word	0x20000004

08003804 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003804:	b490      	push	{r4, r7}
 8003806:	b08a      	sub	sp, #40	; 0x28
 8003808:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800380a:	4b29      	ldr	r3, [pc, #164]	; (80038b0 <HAL_RCC_GetSysClockFreq+0xac>)
 800380c:	1d3c      	adds	r4, r7, #4
 800380e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003810:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003814:	f240 2301 	movw	r3, #513	; 0x201
 8003818:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800381a:	2300      	movs	r3, #0
 800381c:	61fb      	str	r3, [r7, #28]
 800381e:	2300      	movs	r3, #0
 8003820:	61bb      	str	r3, [r7, #24]
 8003822:	2300      	movs	r3, #0
 8003824:	627b      	str	r3, [r7, #36]	; 0x24
 8003826:	2300      	movs	r3, #0
 8003828:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800382a:	2300      	movs	r3, #0
 800382c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800382e:	4b21      	ldr	r3, [pc, #132]	; (80038b4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	f003 030c 	and.w	r3, r3, #12
 800383a:	2b04      	cmp	r3, #4
 800383c:	d002      	beq.n	8003844 <HAL_RCC_GetSysClockFreq+0x40>
 800383e:	2b08      	cmp	r3, #8
 8003840:	d003      	beq.n	800384a <HAL_RCC_GetSysClockFreq+0x46>
 8003842:	e02b      	b.n	800389c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003844:	4b1c      	ldr	r3, [pc, #112]	; (80038b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003846:	623b      	str	r3, [r7, #32]
      break;
 8003848:	e02b      	b.n	80038a2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	0c9b      	lsrs	r3, r3, #18
 800384e:	f003 030f 	and.w	r3, r3, #15
 8003852:	3328      	adds	r3, #40	; 0x28
 8003854:	443b      	add	r3, r7
 8003856:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800385a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d012      	beq.n	800388c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003866:	4b13      	ldr	r3, [pc, #76]	; (80038b4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	0c5b      	lsrs	r3, r3, #17
 800386c:	f003 0301 	and.w	r3, r3, #1
 8003870:	3328      	adds	r3, #40	; 0x28
 8003872:	443b      	add	r3, r7
 8003874:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003878:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	4a0e      	ldr	r2, [pc, #56]	; (80038b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800387e:	fb03 f202 	mul.w	r2, r3, r2
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	fbb2 f3f3 	udiv	r3, r2, r3
 8003888:	627b      	str	r3, [r7, #36]	; 0x24
 800388a:	e004      	b.n	8003896 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	4a0b      	ldr	r2, [pc, #44]	; (80038bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003890:	fb02 f303 	mul.w	r3, r2, r3
 8003894:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003898:	623b      	str	r3, [r7, #32]
      break;
 800389a:	e002      	b.n	80038a2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800389c:	4b06      	ldr	r3, [pc, #24]	; (80038b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800389e:	623b      	str	r3, [r7, #32]
      break;
 80038a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038a2:	6a3b      	ldr	r3, [r7, #32]
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3728      	adds	r7, #40	; 0x28
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bc90      	pop	{r4, r7}
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	08005718 	.word	0x08005718
 80038b4:	40021000 	.word	0x40021000
 80038b8:	007a1200 	.word	0x007a1200
 80038bc:	003d0900 	.word	0x003d0900

080038c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038c0:	b480      	push	{r7}
 80038c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038c4:	4b02      	ldr	r3, [pc, #8]	; (80038d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80038c6:	681b      	ldr	r3, [r3, #0]
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bc80      	pop	{r7}
 80038ce:	4770      	bx	lr
 80038d0:	20000000 	.word	0x20000000

080038d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80038d8:	f7ff fff2 	bl	80038c0 <HAL_RCC_GetHCLKFreq>
 80038dc:	4602      	mov	r2, r0
 80038de:	4b05      	ldr	r3, [pc, #20]	; (80038f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	0a1b      	lsrs	r3, r3, #8
 80038e4:	f003 0307 	and.w	r3, r3, #7
 80038e8:	4903      	ldr	r1, [pc, #12]	; (80038f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038ea:	5ccb      	ldrb	r3, [r1, r3]
 80038ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	40021000 	.word	0x40021000
 80038f8:	08005738 	.word	0x08005738

080038fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003900:	f7ff ffde 	bl	80038c0 <HAL_RCC_GetHCLKFreq>
 8003904:	4602      	mov	r2, r0
 8003906:	4b05      	ldr	r3, [pc, #20]	; (800391c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	0adb      	lsrs	r3, r3, #11
 800390c:	f003 0307 	and.w	r3, r3, #7
 8003910:	4903      	ldr	r1, [pc, #12]	; (8003920 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003912:	5ccb      	ldrb	r3, [r1, r3]
 8003914:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003918:	4618      	mov	r0, r3
 800391a:	bd80      	pop	{r7, pc}
 800391c:	40021000 	.word	0x40021000
 8003920:	08005738 	.word	0x08005738

08003924 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003924:	b480      	push	{r7}
 8003926:	b085      	sub	sp, #20
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800392c:	4b0a      	ldr	r3, [pc, #40]	; (8003958 <RCC_Delay+0x34>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a0a      	ldr	r2, [pc, #40]	; (800395c <RCC_Delay+0x38>)
 8003932:	fba2 2303 	umull	r2, r3, r2, r3
 8003936:	0a5b      	lsrs	r3, r3, #9
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	fb02 f303 	mul.w	r3, r2, r3
 800393e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003940:	bf00      	nop
  }
  while (Delay --);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	1e5a      	subs	r2, r3, #1
 8003946:	60fa      	str	r2, [r7, #12]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1f9      	bne.n	8003940 <RCC_Delay+0x1c>
}
 800394c:	bf00      	nop
 800394e:	bf00      	nop
 8003950:	3714      	adds	r7, #20
 8003952:	46bd      	mov	sp, r7
 8003954:	bc80      	pop	{r7}
 8003956:	4770      	bx	lr
 8003958:	20000000 	.word	0x20000000
 800395c:	10624dd3 	.word	0x10624dd3

08003960 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b086      	sub	sp, #24
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003968:	2300      	movs	r3, #0
 800396a:	613b      	str	r3, [r7, #16]
 800396c:	2300      	movs	r3, #0
 800396e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0301 	and.w	r3, r3, #1
 8003978:	2b00      	cmp	r3, #0
 800397a:	d07d      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800397c:	2300      	movs	r3, #0
 800397e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003980:	4b4f      	ldr	r3, [pc, #316]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003982:	69db      	ldr	r3, [r3, #28]
 8003984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d10d      	bne.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800398c:	4b4c      	ldr	r3, [pc, #304]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800398e:	69db      	ldr	r3, [r3, #28]
 8003990:	4a4b      	ldr	r2, [pc, #300]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003992:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003996:	61d3      	str	r3, [r2, #28]
 8003998:	4b49      	ldr	r3, [pc, #292]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800399a:	69db      	ldr	r3, [r3, #28]
 800399c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039a0:	60bb      	str	r3, [r7, #8]
 80039a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039a4:	2301      	movs	r3, #1
 80039a6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039a8:	4b46      	ldr	r3, [pc, #280]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d118      	bne.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039b4:	4b43      	ldr	r3, [pc, #268]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a42      	ldr	r2, [pc, #264]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039c0:	f7fe fb38 	bl	8002034 <HAL_GetTick>
 80039c4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039c6:	e008      	b.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039c8:	f7fe fb34 	bl	8002034 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	2b64      	cmp	r3, #100	; 0x64
 80039d4:	d901      	bls.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e06d      	b.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039da:	4b3a      	ldr	r3, [pc, #232]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d0f0      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80039e6:	4b36      	ldr	r3, [pc, #216]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039e8:	6a1b      	ldr	r3, [r3, #32]
 80039ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039ee:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d02e      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039fe:	68fa      	ldr	r2, [r7, #12]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d027      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a04:	4b2e      	ldr	r3, [pc, #184]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a06:	6a1b      	ldr	r3, [r3, #32]
 8003a08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a0c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a0e:	4b2e      	ldr	r3, [pc, #184]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a10:	2201      	movs	r2, #1
 8003a12:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a14:	4b2c      	ldr	r3, [pc, #176]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003a1a:	4a29      	ldr	r2, [pc, #164]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f003 0301 	and.w	r3, r3, #1
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d014      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a2a:	f7fe fb03 	bl	8002034 <HAL_GetTick>
 8003a2e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a30:	e00a      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a32:	f7fe faff 	bl	8002034 <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d901      	bls.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	e036      	b.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a48:	4b1d      	ldr	r3, [pc, #116]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a4a:	6a1b      	ldr	r3, [r3, #32]
 8003a4c:	f003 0302 	and.w	r3, r3, #2
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d0ee      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a54:	4b1a      	ldr	r3, [pc, #104]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a56:	6a1b      	ldr	r3, [r3, #32]
 8003a58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	4917      	ldr	r1, [pc, #92]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a66:	7dfb      	ldrb	r3, [r7, #23]
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d105      	bne.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a6c:	4b14      	ldr	r3, [pc, #80]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a6e:	69db      	ldr	r3, [r3, #28]
 8003a70:	4a13      	ldr	r2, [pc, #76]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a76:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0302 	and.w	r3, r3, #2
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d008      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a84:	4b0e      	ldr	r3, [pc, #56]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	490b      	ldr	r1, [pc, #44]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0310 	and.w	r3, r3, #16
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d008      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003aa2:	4b07      	ldr	r3, [pc, #28]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	4904      	ldr	r1, [pc, #16]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3718      	adds	r7, #24
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	40021000 	.word	0x40021000
 8003ac4:	40007000 	.word	0x40007000
 8003ac8:	42420440 	.word	0x42420440

08003acc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d101      	bne.n	8003ade <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e041      	b.n	8003b62 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d106      	bne.n	8003af8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f7fe f8d0 	bl	8001c98 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2202      	movs	r2, #2
 8003afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	3304      	adds	r3, #4
 8003b08:	4619      	mov	r1, r3
 8003b0a:	4610      	mov	r0, r2
 8003b0c:	f000 fabe 	bl	800408c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3708      	adds	r7, #8
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
	...

08003b6c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d109      	bne.n	8003b90 <HAL_TIM_PWM_Start+0x24>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	bf14      	ite	ne
 8003b88:	2301      	movne	r3, #1
 8003b8a:	2300      	moveq	r3, #0
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	e022      	b.n	8003bd6 <HAL_TIM_PWM_Start+0x6a>
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	2b04      	cmp	r3, #4
 8003b94:	d109      	bne.n	8003baa <HAL_TIM_PWM_Start+0x3e>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	bf14      	ite	ne
 8003ba2:	2301      	movne	r3, #1
 8003ba4:	2300      	moveq	r3, #0
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	e015      	b.n	8003bd6 <HAL_TIM_PWM_Start+0x6a>
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	2b08      	cmp	r3, #8
 8003bae:	d109      	bne.n	8003bc4 <HAL_TIM_PWM_Start+0x58>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	bf14      	ite	ne
 8003bbc:	2301      	movne	r3, #1
 8003bbe:	2300      	moveq	r3, #0
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	e008      	b.n	8003bd6 <HAL_TIM_PWM_Start+0x6a>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	bf14      	ite	ne
 8003bd0:	2301      	movne	r3, #1
 8003bd2:	2300      	moveq	r3, #0
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d001      	beq.n	8003bde <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e05e      	b.n	8003c9c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d104      	bne.n	8003bee <HAL_TIM_PWM_Start+0x82>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2202      	movs	r2, #2
 8003be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bec:	e013      	b.n	8003c16 <HAL_TIM_PWM_Start+0xaa>
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	2b04      	cmp	r3, #4
 8003bf2:	d104      	bne.n	8003bfe <HAL_TIM_PWM_Start+0x92>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2202      	movs	r2, #2
 8003bf8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bfc:	e00b      	b.n	8003c16 <HAL_TIM_PWM_Start+0xaa>
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	2b08      	cmp	r3, #8
 8003c02:	d104      	bne.n	8003c0e <HAL_TIM_PWM_Start+0xa2>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2202      	movs	r2, #2
 8003c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c0c:	e003      	b.n	8003c16 <HAL_TIM_PWM_Start+0xaa>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2202      	movs	r2, #2
 8003c12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	6839      	ldr	r1, [r7, #0]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f000 fc1e 	bl	8004460 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a1e      	ldr	r2, [pc, #120]	; (8003ca4 <HAL_TIM_PWM_Start+0x138>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d107      	bne.n	8003c3e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c3c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a18      	ldr	r2, [pc, #96]	; (8003ca4 <HAL_TIM_PWM_Start+0x138>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d00e      	beq.n	8003c66 <HAL_TIM_PWM_Start+0xfa>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c50:	d009      	beq.n	8003c66 <HAL_TIM_PWM_Start+0xfa>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a14      	ldr	r2, [pc, #80]	; (8003ca8 <HAL_TIM_PWM_Start+0x13c>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d004      	beq.n	8003c66 <HAL_TIM_PWM_Start+0xfa>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a12      	ldr	r2, [pc, #72]	; (8003cac <HAL_TIM_PWM_Start+0x140>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d111      	bne.n	8003c8a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	f003 0307 	and.w	r3, r3, #7
 8003c70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2b06      	cmp	r3, #6
 8003c76:	d010      	beq.n	8003c9a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f042 0201 	orr.w	r2, r2, #1
 8003c86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c88:	e007      	b.n	8003c9a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f042 0201 	orr.w	r2, r2, #1
 8003c98:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c9a:	2300      	movs	r3, #0
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3710      	adds	r7, #16
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	40012c00 	.word	0x40012c00
 8003ca8:	40000400 	.word	0x40000400
 8003cac:	40000800 	.word	0x40000800

08003cb0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b086      	sub	sp, #24
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d101      	bne.n	8003cc4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e093      	b.n	8003dec <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d106      	bne.n	8003cde <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f7fd fff9 	bl	8001cd0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2202      	movs	r2, #2
 8003ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	6812      	ldr	r2, [r2, #0]
 8003cf0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003cf4:	f023 0307 	bic.w	r3, r3, #7
 8003cf8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	3304      	adds	r3, #4
 8003d02:	4619      	mov	r1, r3
 8003d04:	4610      	mov	r0, r2
 8003d06:	f000 f9c1 	bl	800408c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	699b      	ldr	r3, [r3, #24]
 8003d18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	6a1b      	ldr	r3, [r3, #32]
 8003d20:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	697a      	ldr	r2, [r7, #20]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d32:	f023 0303 	bic.w	r3, r3, #3
 8003d36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	689a      	ldr	r2, [r3, #8]
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	699b      	ldr	r3, [r3, #24]
 8003d40:	021b      	lsls	r3, r3, #8
 8003d42:	4313      	orrs	r3, r2
 8003d44:	693a      	ldr	r2, [r7, #16]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003d50:	f023 030c 	bic.w	r3, r3, #12
 8003d54:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d5c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d60:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	68da      	ldr	r2, [r3, #12]
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	69db      	ldr	r3, [r3, #28]
 8003d6a:	021b      	lsls	r3, r3, #8
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	693a      	ldr	r2, [r7, #16]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	691b      	ldr	r3, [r3, #16]
 8003d78:	011a      	lsls	r2, r3, #4
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	031b      	lsls	r3, r3, #12
 8003d80:	4313      	orrs	r3, r2
 8003d82:	693a      	ldr	r2, [r7, #16]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003d8e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	685a      	ldr	r2, [r3, #4]
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	695b      	ldr	r3, [r3, #20]
 8003d98:	011b      	lsls	r3, r3, #4
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	697a      	ldr	r2, [r7, #20]
 8003da8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	693a      	ldr	r2, [r7, #16]
 8003db0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68fa      	ldr	r2, [r7, #12]
 8003db8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2201      	movs	r2, #1
 8003dde:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2201      	movs	r2, #1
 8003de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003dea:	2300      	movs	r3, #0
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3718      	adds	r7, #24
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e04:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003e0c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003e14:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003e1c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d110      	bne.n	8003e46 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e24:	7bfb      	ldrb	r3, [r7, #15]
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d102      	bne.n	8003e30 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003e2a:	7b7b      	ldrb	r3, [r7, #13]
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d001      	beq.n	8003e34 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e069      	b.n	8003f08 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2202      	movs	r2, #2
 8003e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2202      	movs	r2, #2
 8003e40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e44:	e031      	b.n	8003eaa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	2b04      	cmp	r3, #4
 8003e4a:	d110      	bne.n	8003e6e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e4c:	7bbb      	ldrb	r3, [r7, #14]
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d102      	bne.n	8003e58 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003e52:	7b3b      	ldrb	r3, [r7, #12]
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d001      	beq.n	8003e5c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e055      	b.n	8003f08 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2202      	movs	r2, #2
 8003e60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2202      	movs	r2, #2
 8003e68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e6c:	e01d      	b.n	8003eaa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e6e:	7bfb      	ldrb	r3, [r7, #15]
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d108      	bne.n	8003e86 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e74:	7bbb      	ldrb	r3, [r7, #14]
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d105      	bne.n	8003e86 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e7a:	7b7b      	ldrb	r3, [r7, #13]
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d102      	bne.n	8003e86 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003e80:	7b3b      	ldrb	r3, [r7, #12]
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d001      	beq.n	8003e8a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e03e      	b.n	8003f08 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2202      	movs	r2, #2
 8003e8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2202      	movs	r2, #2
 8003e96:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2202      	movs	r2, #2
 8003e9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2202      	movs	r2, #2
 8003ea6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d003      	beq.n	8003eb8 <HAL_TIM_Encoder_Start+0xc4>
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	2b04      	cmp	r3, #4
 8003eb4:	d008      	beq.n	8003ec8 <HAL_TIM_Encoder_Start+0xd4>
 8003eb6:	e00f      	b.n	8003ed8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	2100      	movs	r1, #0
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f000 facd 	bl	8004460 <TIM_CCxChannelCmd>
      break;
 8003ec6:	e016      	b.n	8003ef6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2201      	movs	r2, #1
 8003ece:	2104      	movs	r1, #4
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f000 fac5 	bl	8004460 <TIM_CCxChannelCmd>
      break;
 8003ed6:	e00e      	b.n	8003ef6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2201      	movs	r2, #1
 8003ede:	2100      	movs	r1, #0
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f000 fabd 	bl	8004460 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2201      	movs	r2, #1
 8003eec:	2104      	movs	r1, #4
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f000 fab6 	bl	8004460 <TIM_CCxChannelCmd>
      break;
 8003ef4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f042 0201 	orr.w	r2, r2, #1
 8003f04:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3710      	adds	r7, #16
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d101      	bne.n	8003f2a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003f26:	2302      	movs	r3, #2
 8003f28:	e0ac      	b.n	8004084 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2b0c      	cmp	r3, #12
 8003f36:	f200 809f 	bhi.w	8004078 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003f3a:	a201      	add	r2, pc, #4	; (adr r2, 8003f40 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f40:	08003f75 	.word	0x08003f75
 8003f44:	08004079 	.word	0x08004079
 8003f48:	08004079 	.word	0x08004079
 8003f4c:	08004079 	.word	0x08004079
 8003f50:	08003fb5 	.word	0x08003fb5
 8003f54:	08004079 	.word	0x08004079
 8003f58:	08004079 	.word	0x08004079
 8003f5c:	08004079 	.word	0x08004079
 8003f60:	08003ff7 	.word	0x08003ff7
 8003f64:	08004079 	.word	0x08004079
 8003f68:	08004079 	.word	0x08004079
 8003f6c:	08004079 	.word	0x08004079
 8003f70:	08004037 	.word	0x08004037
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	68b9      	ldr	r1, [r7, #8]
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f000 f8e8 	bl	8004150 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	699a      	ldr	r2, [r3, #24]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f042 0208 	orr.w	r2, r2, #8
 8003f8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	699a      	ldr	r2, [r3, #24]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f022 0204 	bic.w	r2, r2, #4
 8003f9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	6999      	ldr	r1, [r3, #24]
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	691a      	ldr	r2, [r3, #16]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	619a      	str	r2, [r3, #24]
      break;
 8003fb2:	e062      	b.n	800407a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68b9      	ldr	r1, [r7, #8]
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f000 f92e 	bl	800421c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	699a      	ldr	r2, [r3, #24]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	699a      	ldr	r2, [r3, #24]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	6999      	ldr	r1, [r3, #24]
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	021a      	lsls	r2, r3, #8
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	430a      	orrs	r2, r1
 8003ff2:	619a      	str	r2, [r3, #24]
      break;
 8003ff4:	e041      	b.n	800407a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68b9      	ldr	r1, [r7, #8]
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f000 f977 	bl	80042f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	69da      	ldr	r2, [r3, #28]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f042 0208 	orr.w	r2, r2, #8
 8004010:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	69da      	ldr	r2, [r3, #28]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f022 0204 	bic.w	r2, r2, #4
 8004020:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	69d9      	ldr	r1, [r3, #28]
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	691a      	ldr	r2, [r3, #16]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	430a      	orrs	r2, r1
 8004032:	61da      	str	r2, [r3, #28]
      break;
 8004034:	e021      	b.n	800407a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68b9      	ldr	r1, [r7, #8]
 800403c:	4618      	mov	r0, r3
 800403e:	f000 f9c1 	bl	80043c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	69da      	ldr	r2, [r3, #28]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004050:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	69da      	ldr	r2, [r3, #28]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004060:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	69d9      	ldr	r1, [r3, #28]
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	021a      	lsls	r2, r3, #8
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	430a      	orrs	r2, r1
 8004074:	61da      	str	r2, [r3, #28]
      break;
 8004076:	e000      	b.n	800407a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004078:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004082:	2300      	movs	r3, #0
}
 8004084:	4618      	mov	r0, r3
 8004086:	3710      	adds	r7, #16
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}

0800408c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800408c:	b480      	push	{r7}
 800408e:	b085      	sub	sp, #20
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4a29      	ldr	r2, [pc, #164]	; (8004144 <TIM_Base_SetConfig+0xb8>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d00b      	beq.n	80040bc <TIM_Base_SetConfig+0x30>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040aa:	d007      	beq.n	80040bc <TIM_Base_SetConfig+0x30>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a26      	ldr	r2, [pc, #152]	; (8004148 <TIM_Base_SetConfig+0xbc>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d003      	beq.n	80040bc <TIM_Base_SetConfig+0x30>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a25      	ldr	r2, [pc, #148]	; (800414c <TIM_Base_SetConfig+0xc0>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d108      	bne.n	80040ce <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	68fa      	ldr	r2, [r7, #12]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a1c      	ldr	r2, [pc, #112]	; (8004144 <TIM_Base_SetConfig+0xb8>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d00b      	beq.n	80040ee <TIM_Base_SetConfig+0x62>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040dc:	d007      	beq.n	80040ee <TIM_Base_SetConfig+0x62>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a19      	ldr	r2, [pc, #100]	; (8004148 <TIM_Base_SetConfig+0xbc>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d003      	beq.n	80040ee <TIM_Base_SetConfig+0x62>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a18      	ldr	r2, [pc, #96]	; (800414c <TIM_Base_SetConfig+0xc0>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d108      	bne.n	8004100 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	695b      	ldr	r3, [r3, #20]
 800410a:	4313      	orrs	r3, r2
 800410c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	68fa      	ldr	r2, [r7, #12]
 8004112:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	689a      	ldr	r2, [r3, #8]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	4a07      	ldr	r2, [pc, #28]	; (8004144 <TIM_Base_SetConfig+0xb8>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d103      	bne.n	8004134 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	691a      	ldr	r2, [r3, #16]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	615a      	str	r2, [r3, #20]
}
 800413a:	bf00      	nop
 800413c:	3714      	adds	r7, #20
 800413e:	46bd      	mov	sp, r7
 8004140:	bc80      	pop	{r7}
 8004142:	4770      	bx	lr
 8004144:	40012c00 	.word	0x40012c00
 8004148:	40000400 	.word	0x40000400
 800414c:	40000800 	.word	0x40000800

08004150 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004150:	b480      	push	{r7}
 8004152:	b087      	sub	sp, #28
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a1b      	ldr	r3, [r3, #32]
 800415e:	f023 0201 	bic.w	r2, r3, #1
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a1b      	ldr	r3, [r3, #32]
 800416a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	699b      	ldr	r3, [r3, #24]
 8004176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800417e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f023 0303 	bic.w	r3, r3, #3
 8004186:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68fa      	ldr	r2, [r7, #12]
 800418e:	4313      	orrs	r3, r2
 8004190:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	f023 0302 	bic.w	r3, r3, #2
 8004198:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	697a      	ldr	r2, [r7, #20]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a1c      	ldr	r2, [pc, #112]	; (8004218 <TIM_OC1_SetConfig+0xc8>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d10c      	bne.n	80041c6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	f023 0308 	bic.w	r3, r3, #8
 80041b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	697a      	ldr	r2, [r7, #20]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	f023 0304 	bic.w	r3, r3, #4
 80041c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a13      	ldr	r2, [pc, #76]	; (8004218 <TIM_OC1_SetConfig+0xc8>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d111      	bne.n	80041f2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	695b      	ldr	r3, [r3, #20]
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	693a      	ldr	r2, [r7, #16]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	693a      	ldr	r2, [r7, #16]
 80041f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	68fa      	ldr	r2, [r7, #12]
 80041fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	685a      	ldr	r2, [r3, #4]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	697a      	ldr	r2, [r7, #20]
 800420a:	621a      	str	r2, [r3, #32]
}
 800420c:	bf00      	nop
 800420e:	371c      	adds	r7, #28
 8004210:	46bd      	mov	sp, r7
 8004212:	bc80      	pop	{r7}
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	40012c00 	.word	0x40012c00

0800421c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800421c:	b480      	push	{r7}
 800421e:	b087      	sub	sp, #28
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a1b      	ldr	r3, [r3, #32]
 800422a:	f023 0210 	bic.w	r2, r3, #16
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a1b      	ldr	r3, [r3, #32]
 8004236:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	699b      	ldr	r3, [r3, #24]
 8004242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800424a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004252:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	021b      	lsls	r3, r3, #8
 800425a:	68fa      	ldr	r2, [r7, #12]
 800425c:	4313      	orrs	r3, r2
 800425e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	f023 0320 	bic.w	r3, r3, #32
 8004266:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	011b      	lsls	r3, r3, #4
 800426e:	697a      	ldr	r2, [r7, #20]
 8004270:	4313      	orrs	r3, r2
 8004272:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	4a1d      	ldr	r2, [pc, #116]	; (80042ec <TIM_OC2_SetConfig+0xd0>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d10d      	bne.n	8004298 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004282:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	011b      	lsls	r3, r3, #4
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	4313      	orrs	r3, r2
 800428e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004296:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	4a14      	ldr	r2, [pc, #80]	; (80042ec <TIM_OC2_SetConfig+0xd0>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d113      	bne.n	80042c8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	695b      	ldr	r3, [r3, #20]
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	693a      	ldr	r2, [r7, #16]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	699b      	ldr	r3, [r3, #24]
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	693a      	ldr	r2, [r7, #16]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	693a      	ldr	r2, [r7, #16]
 80042cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	68fa      	ldr	r2, [r7, #12]
 80042d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	685a      	ldr	r2, [r3, #4]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	697a      	ldr	r2, [r7, #20]
 80042e0:	621a      	str	r2, [r3, #32]
}
 80042e2:	bf00      	nop
 80042e4:	371c      	adds	r7, #28
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bc80      	pop	{r7}
 80042ea:	4770      	bx	lr
 80042ec:	40012c00 	.word	0x40012c00

080042f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b087      	sub	sp, #28
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a1b      	ldr	r3, [r3, #32]
 80042fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a1b      	ldr	r3, [r3, #32]
 800430a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	69db      	ldr	r3, [r3, #28]
 8004316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800431e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f023 0303 	bic.w	r3, r3, #3
 8004326:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	68fa      	ldr	r2, [r7, #12]
 800432e:	4313      	orrs	r3, r2
 8004330:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004338:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	021b      	lsls	r3, r3, #8
 8004340:	697a      	ldr	r2, [r7, #20]
 8004342:	4313      	orrs	r3, r2
 8004344:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a1d      	ldr	r2, [pc, #116]	; (80043c0 <TIM_OC3_SetConfig+0xd0>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d10d      	bne.n	800436a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004354:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	021b      	lsls	r3, r3, #8
 800435c:	697a      	ldr	r2, [r7, #20]
 800435e:	4313      	orrs	r3, r2
 8004360:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004368:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a14      	ldr	r2, [pc, #80]	; (80043c0 <TIM_OC3_SetConfig+0xd0>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d113      	bne.n	800439a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004378:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004380:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	011b      	lsls	r3, r3, #4
 8004388:	693a      	ldr	r2, [r7, #16]
 800438a:	4313      	orrs	r3, r2
 800438c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	699b      	ldr	r3, [r3, #24]
 8004392:	011b      	lsls	r3, r3, #4
 8004394:	693a      	ldr	r2, [r7, #16]
 8004396:	4313      	orrs	r3, r2
 8004398:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	693a      	ldr	r2, [r7, #16]
 800439e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	685a      	ldr	r2, [r3, #4]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	697a      	ldr	r2, [r7, #20]
 80043b2:	621a      	str	r2, [r3, #32]
}
 80043b4:	bf00      	nop
 80043b6:	371c      	adds	r7, #28
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bc80      	pop	{r7}
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	40012c00 	.word	0x40012c00

080043c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b087      	sub	sp, #28
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a1b      	ldr	r3, [r3, #32]
 80043d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a1b      	ldr	r3, [r3, #32]
 80043de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	69db      	ldr	r3, [r3, #28]
 80043ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	021b      	lsls	r3, r3, #8
 8004402:	68fa      	ldr	r2, [r7, #12]
 8004404:	4313      	orrs	r3, r2
 8004406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800440e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	031b      	lsls	r3, r3, #12
 8004416:	693a      	ldr	r2, [r7, #16]
 8004418:	4313      	orrs	r3, r2
 800441a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	4a0f      	ldr	r2, [pc, #60]	; (800445c <TIM_OC4_SetConfig+0x98>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d109      	bne.n	8004438 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800442a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	695b      	ldr	r3, [r3, #20]
 8004430:	019b      	lsls	r3, r3, #6
 8004432:	697a      	ldr	r2, [r7, #20]
 8004434:	4313      	orrs	r3, r2
 8004436:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	697a      	ldr	r2, [r7, #20]
 800443c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	68fa      	ldr	r2, [r7, #12]
 8004442:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	685a      	ldr	r2, [r3, #4]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	693a      	ldr	r2, [r7, #16]
 8004450:	621a      	str	r2, [r3, #32]
}
 8004452:	bf00      	nop
 8004454:	371c      	adds	r7, #28
 8004456:	46bd      	mov	sp, r7
 8004458:	bc80      	pop	{r7}
 800445a:	4770      	bx	lr
 800445c:	40012c00 	.word	0x40012c00

08004460 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004460:	b480      	push	{r7}
 8004462:	b087      	sub	sp, #28
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	f003 031f 	and.w	r3, r3, #31
 8004472:	2201      	movs	r2, #1
 8004474:	fa02 f303 	lsl.w	r3, r2, r3
 8004478:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6a1a      	ldr	r2, [r3, #32]
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	43db      	mvns	r3, r3
 8004482:	401a      	ands	r2, r3
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6a1a      	ldr	r2, [r3, #32]
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	f003 031f 	and.w	r3, r3, #31
 8004492:	6879      	ldr	r1, [r7, #4]
 8004494:	fa01 f303 	lsl.w	r3, r1, r3
 8004498:	431a      	orrs	r2, r3
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	621a      	str	r2, [r3, #32]
}
 800449e:	bf00      	nop
 80044a0:	371c      	adds	r7, #28
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bc80      	pop	{r7}
 80044a6:	4770      	bx	lr

080044a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b085      	sub	sp, #20
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d101      	bne.n	80044c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044bc:	2302      	movs	r3, #2
 80044be:	e046      	b.n	800454e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2202      	movs	r2, #2
 80044cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68fa      	ldr	r2, [r7, #12]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68fa      	ldr	r2, [r7, #12]
 80044f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a16      	ldr	r2, [pc, #88]	; (8004558 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d00e      	beq.n	8004522 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800450c:	d009      	beq.n	8004522 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a12      	ldr	r2, [pc, #72]	; (800455c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d004      	beq.n	8004522 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a10      	ldr	r2, [pc, #64]	; (8004560 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d10c      	bne.n	800453c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004528:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	68ba      	ldr	r2, [r7, #8]
 8004530:	4313      	orrs	r3, r2
 8004532:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68ba      	ldr	r2, [r7, #8]
 800453a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	3714      	adds	r7, #20
 8004552:	46bd      	mov	sp, r7
 8004554:	bc80      	pop	{r7}
 8004556:	4770      	bx	lr
 8004558:	40012c00 	.word	0x40012c00
 800455c:	40000400 	.word	0x40000400
 8004560:	40000800 	.word	0x40000800

08004564 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b082      	sub	sp, #8
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d101      	bne.n	8004576 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e03f      	b.n	80045f6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800457c:	b2db      	uxtb	r3, r3
 800457e:	2b00      	cmp	r3, #0
 8004580:	d106      	bne.n	8004590 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f7fd fc88 	bl	8001ea0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2224      	movs	r2, #36	; 0x24
 8004594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	68da      	ldr	r2, [r3, #12]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f000 f905 	bl	80047b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	691a      	ldr	r2, [r3, #16]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	695a      	ldr	r2, [r3, #20]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	68da      	ldr	r2, [r3, #12]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2220      	movs	r2, #32
 80045e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2220      	movs	r2, #32
 80045f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3708      	adds	r7, #8
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}

080045fe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045fe:	b580      	push	{r7, lr}
 8004600:	b08a      	sub	sp, #40	; 0x28
 8004602:	af02      	add	r7, sp, #8
 8004604:	60f8      	str	r0, [r7, #12]
 8004606:	60b9      	str	r1, [r7, #8]
 8004608:	603b      	str	r3, [r7, #0]
 800460a:	4613      	mov	r3, r2
 800460c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800460e:	2300      	movs	r3, #0
 8004610:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004618:	b2db      	uxtb	r3, r3
 800461a:	2b20      	cmp	r3, #32
 800461c:	d17c      	bne.n	8004718 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d002      	beq.n	800462a <HAL_UART_Transmit+0x2c>
 8004624:	88fb      	ldrh	r3, [r7, #6]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d101      	bne.n	800462e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e075      	b.n	800471a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004634:	2b01      	cmp	r3, #1
 8004636:	d101      	bne.n	800463c <HAL_UART_Transmit+0x3e>
 8004638:	2302      	movs	r3, #2
 800463a:	e06e      	b.n	800471a <HAL_UART_Transmit+0x11c>
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2200      	movs	r2, #0
 8004648:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2221      	movs	r2, #33	; 0x21
 800464e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004652:	f7fd fcef 	bl	8002034 <HAL_GetTick>
 8004656:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	88fa      	ldrh	r2, [r7, #6]
 800465c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	88fa      	ldrh	r2, [r7, #6]
 8004662:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800466c:	d108      	bne.n	8004680 <HAL_UART_Transmit+0x82>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d104      	bne.n	8004680 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004676:	2300      	movs	r3, #0
 8004678:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	61bb      	str	r3, [r7, #24]
 800467e:	e003      	b.n	8004688 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004684:	2300      	movs	r3, #0
 8004686:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2200      	movs	r2, #0
 800468c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004690:	e02a      	b.n	80046e8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	9300      	str	r3, [sp, #0]
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	2200      	movs	r2, #0
 800469a:	2180      	movs	r1, #128	; 0x80
 800469c:	68f8      	ldr	r0, [r7, #12]
 800469e:	f000 f840 	bl	8004722 <UART_WaitOnFlagUntilTimeout>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d001      	beq.n	80046ac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e036      	b.n	800471a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d10b      	bne.n	80046ca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046b2:	69bb      	ldr	r3, [r7, #24]
 80046b4:	881b      	ldrh	r3, [r3, #0]
 80046b6:	461a      	mov	r2, r3
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	3302      	adds	r3, #2
 80046c6:	61bb      	str	r3, [r7, #24]
 80046c8:	e007      	b.n	80046da <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	781a      	ldrb	r2, [r3, #0]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	3301      	adds	r3, #1
 80046d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046de:	b29b      	uxth	r3, r3
 80046e0:	3b01      	subs	r3, #1
 80046e2:	b29a      	uxth	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1cf      	bne.n	8004692 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	9300      	str	r3, [sp, #0]
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	2200      	movs	r2, #0
 80046fa:	2140      	movs	r1, #64	; 0x40
 80046fc:	68f8      	ldr	r0, [r7, #12]
 80046fe:	f000 f810 	bl	8004722 <UART_WaitOnFlagUntilTimeout>
 8004702:	4603      	mov	r3, r0
 8004704:	2b00      	cmp	r3, #0
 8004706:	d001      	beq.n	800470c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004708:	2303      	movs	r3, #3
 800470a:	e006      	b.n	800471a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2220      	movs	r2, #32
 8004710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004714:	2300      	movs	r3, #0
 8004716:	e000      	b.n	800471a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004718:	2302      	movs	r3, #2
  }
}
 800471a:	4618      	mov	r0, r3
 800471c:	3720      	adds	r7, #32
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}

08004722 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004722:	b580      	push	{r7, lr}
 8004724:	b084      	sub	sp, #16
 8004726:	af00      	add	r7, sp, #0
 8004728:	60f8      	str	r0, [r7, #12]
 800472a:	60b9      	str	r1, [r7, #8]
 800472c:	603b      	str	r3, [r7, #0]
 800472e:	4613      	mov	r3, r2
 8004730:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004732:	e02c      	b.n	800478e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800473a:	d028      	beq.n	800478e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d007      	beq.n	8004752 <UART_WaitOnFlagUntilTimeout+0x30>
 8004742:	f7fd fc77 	bl	8002034 <HAL_GetTick>
 8004746:	4602      	mov	r2, r0
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	69ba      	ldr	r2, [r7, #24]
 800474e:	429a      	cmp	r2, r3
 8004750:	d21d      	bcs.n	800478e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	68da      	ldr	r2, [r3, #12]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004760:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	695a      	ldr	r2, [r3, #20]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f022 0201 	bic.w	r2, r2, #1
 8004770:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2220      	movs	r2, #32
 8004776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2220      	movs	r2, #32
 800477e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2200      	movs	r2, #0
 8004786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e00f      	b.n	80047ae <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	4013      	ands	r3, r2
 8004798:	68ba      	ldr	r2, [r7, #8]
 800479a:	429a      	cmp	r2, r3
 800479c:	bf0c      	ite	eq
 800479e:	2301      	moveq	r3, #1
 80047a0:	2300      	movne	r3, #0
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	461a      	mov	r2, r3
 80047a6:	79fb      	ldrb	r3, [r7, #7]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d0c3      	beq.n	8004734 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3710      	adds	r7, #16
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
	...

080047b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	68da      	ldr	r2, [r3, #12]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	430a      	orrs	r2, r1
 80047d4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	689a      	ldr	r2, [r3, #8]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	431a      	orrs	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	695b      	ldr	r3, [r3, #20]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80047f2:	f023 030c 	bic.w	r3, r3, #12
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	6812      	ldr	r2, [r2, #0]
 80047fa:	68b9      	ldr	r1, [r7, #8]
 80047fc:	430b      	orrs	r3, r1
 80047fe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	695b      	ldr	r3, [r3, #20]
 8004806:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	699a      	ldr	r2, [r3, #24]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	430a      	orrs	r2, r1
 8004814:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a2c      	ldr	r2, [pc, #176]	; (80048cc <UART_SetConfig+0x114>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d103      	bne.n	8004828 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004820:	f7ff f86c 	bl	80038fc <HAL_RCC_GetPCLK2Freq>
 8004824:	60f8      	str	r0, [r7, #12]
 8004826:	e002      	b.n	800482e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004828:	f7ff f854 	bl	80038d4 <HAL_RCC_GetPCLK1Freq>
 800482c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800482e:	68fa      	ldr	r2, [r7, #12]
 8004830:	4613      	mov	r3, r2
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	4413      	add	r3, r2
 8004836:	009a      	lsls	r2, r3, #2
 8004838:	441a      	add	r2, r3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	fbb2 f3f3 	udiv	r3, r2, r3
 8004844:	4a22      	ldr	r2, [pc, #136]	; (80048d0 <UART_SetConfig+0x118>)
 8004846:	fba2 2303 	umull	r2, r3, r2, r3
 800484a:	095b      	lsrs	r3, r3, #5
 800484c:	0119      	lsls	r1, r3, #4
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	4613      	mov	r3, r2
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	4413      	add	r3, r2
 8004856:	009a      	lsls	r2, r3, #2
 8004858:	441a      	add	r2, r3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	fbb2 f2f3 	udiv	r2, r2, r3
 8004864:	4b1a      	ldr	r3, [pc, #104]	; (80048d0 <UART_SetConfig+0x118>)
 8004866:	fba3 0302 	umull	r0, r3, r3, r2
 800486a:	095b      	lsrs	r3, r3, #5
 800486c:	2064      	movs	r0, #100	; 0x64
 800486e:	fb00 f303 	mul.w	r3, r0, r3
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	011b      	lsls	r3, r3, #4
 8004876:	3332      	adds	r3, #50	; 0x32
 8004878:	4a15      	ldr	r2, [pc, #84]	; (80048d0 <UART_SetConfig+0x118>)
 800487a:	fba2 2303 	umull	r2, r3, r2, r3
 800487e:	095b      	lsrs	r3, r3, #5
 8004880:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004884:	4419      	add	r1, r3
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	4613      	mov	r3, r2
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	4413      	add	r3, r2
 800488e:	009a      	lsls	r2, r3, #2
 8004890:	441a      	add	r2, r3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	fbb2 f2f3 	udiv	r2, r2, r3
 800489c:	4b0c      	ldr	r3, [pc, #48]	; (80048d0 <UART_SetConfig+0x118>)
 800489e:	fba3 0302 	umull	r0, r3, r3, r2
 80048a2:	095b      	lsrs	r3, r3, #5
 80048a4:	2064      	movs	r0, #100	; 0x64
 80048a6:	fb00 f303 	mul.w	r3, r0, r3
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	011b      	lsls	r3, r3, #4
 80048ae:	3332      	adds	r3, #50	; 0x32
 80048b0:	4a07      	ldr	r2, [pc, #28]	; (80048d0 <UART_SetConfig+0x118>)
 80048b2:	fba2 2303 	umull	r2, r3, r2, r3
 80048b6:	095b      	lsrs	r3, r3, #5
 80048b8:	f003 020f 	and.w	r2, r3, #15
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	440a      	add	r2, r1
 80048c2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80048c4:	bf00      	nop
 80048c6:	3710      	adds	r7, #16
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	40013800 	.word	0x40013800
 80048d0:	51eb851f 	.word	0x51eb851f

080048d4 <pow>:
 80048d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048d8:	4614      	mov	r4, r2
 80048da:	461d      	mov	r5, r3
 80048dc:	4680      	mov	r8, r0
 80048de:	4689      	mov	r9, r1
 80048e0:	f000 f862 	bl	80049a8 <__ieee754_pow>
 80048e4:	4622      	mov	r2, r4
 80048e6:	4606      	mov	r6, r0
 80048e8:	460f      	mov	r7, r1
 80048ea:	462b      	mov	r3, r5
 80048ec:	4620      	mov	r0, r4
 80048ee:	4629      	mov	r1, r5
 80048f0:	f7fc f884 	bl	80009fc <__aeabi_dcmpun>
 80048f4:	bbc8      	cbnz	r0, 800496a <pow+0x96>
 80048f6:	2200      	movs	r2, #0
 80048f8:	2300      	movs	r3, #0
 80048fa:	4640      	mov	r0, r8
 80048fc:	4649      	mov	r1, r9
 80048fe:	f7fc f84b 	bl	8000998 <__aeabi_dcmpeq>
 8004902:	b1b8      	cbz	r0, 8004934 <pow+0x60>
 8004904:	2200      	movs	r2, #0
 8004906:	2300      	movs	r3, #0
 8004908:	4620      	mov	r0, r4
 800490a:	4629      	mov	r1, r5
 800490c:	f7fc f844 	bl	8000998 <__aeabi_dcmpeq>
 8004910:	2800      	cmp	r0, #0
 8004912:	d141      	bne.n	8004998 <pow+0xc4>
 8004914:	4620      	mov	r0, r4
 8004916:	4629      	mov	r1, r5
 8004918:	f000 fe3b 	bl	8005592 <finite>
 800491c:	b328      	cbz	r0, 800496a <pow+0x96>
 800491e:	2200      	movs	r2, #0
 8004920:	2300      	movs	r3, #0
 8004922:	4620      	mov	r0, r4
 8004924:	4629      	mov	r1, r5
 8004926:	f7fc f841 	bl	80009ac <__aeabi_dcmplt>
 800492a:	b1f0      	cbz	r0, 800496a <pow+0x96>
 800492c:	f000 feb6 	bl	800569c <__errno>
 8004930:	2322      	movs	r3, #34	; 0x22
 8004932:	e019      	b.n	8004968 <pow+0x94>
 8004934:	4630      	mov	r0, r6
 8004936:	4639      	mov	r1, r7
 8004938:	f000 fe2b 	bl	8005592 <finite>
 800493c:	b9c8      	cbnz	r0, 8004972 <pow+0x9e>
 800493e:	4640      	mov	r0, r8
 8004940:	4649      	mov	r1, r9
 8004942:	f000 fe26 	bl	8005592 <finite>
 8004946:	b1a0      	cbz	r0, 8004972 <pow+0x9e>
 8004948:	4620      	mov	r0, r4
 800494a:	4629      	mov	r1, r5
 800494c:	f000 fe21 	bl	8005592 <finite>
 8004950:	b178      	cbz	r0, 8004972 <pow+0x9e>
 8004952:	4632      	mov	r2, r6
 8004954:	463b      	mov	r3, r7
 8004956:	4630      	mov	r0, r6
 8004958:	4639      	mov	r1, r7
 800495a:	f7fc f84f 	bl	80009fc <__aeabi_dcmpun>
 800495e:	2800      	cmp	r0, #0
 8004960:	d0e4      	beq.n	800492c <pow+0x58>
 8004962:	f000 fe9b 	bl	800569c <__errno>
 8004966:	2321      	movs	r3, #33	; 0x21
 8004968:	6003      	str	r3, [r0, #0]
 800496a:	4630      	mov	r0, r6
 800496c:	4639      	mov	r1, r7
 800496e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004972:	2200      	movs	r2, #0
 8004974:	2300      	movs	r3, #0
 8004976:	4630      	mov	r0, r6
 8004978:	4639      	mov	r1, r7
 800497a:	f7fc f80d 	bl	8000998 <__aeabi_dcmpeq>
 800497e:	2800      	cmp	r0, #0
 8004980:	d0f3      	beq.n	800496a <pow+0x96>
 8004982:	4640      	mov	r0, r8
 8004984:	4649      	mov	r1, r9
 8004986:	f000 fe04 	bl	8005592 <finite>
 800498a:	2800      	cmp	r0, #0
 800498c:	d0ed      	beq.n	800496a <pow+0x96>
 800498e:	4620      	mov	r0, r4
 8004990:	4629      	mov	r1, r5
 8004992:	f000 fdfe 	bl	8005592 <finite>
 8004996:	e7c8      	b.n	800492a <pow+0x56>
 8004998:	2600      	movs	r6, #0
 800499a:	4f01      	ldr	r7, [pc, #4]	; (80049a0 <pow+0xcc>)
 800499c:	e7e5      	b.n	800496a <pow+0x96>
 800499e:	bf00      	nop
 80049a0:	3ff00000 	.word	0x3ff00000
 80049a4:	00000000 	.word	0x00000000

080049a8 <__ieee754_pow>:
 80049a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049ac:	b093      	sub	sp, #76	; 0x4c
 80049ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80049b2:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 80049b6:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 80049ba:	4689      	mov	r9, r1
 80049bc:	ea56 0102 	orrs.w	r1, r6, r2
 80049c0:	4680      	mov	r8, r0
 80049c2:	d111      	bne.n	80049e8 <__ieee754_pow+0x40>
 80049c4:	1803      	adds	r3, r0, r0
 80049c6:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 80049ca:	4152      	adcs	r2, r2
 80049cc:	4299      	cmp	r1, r3
 80049ce:	4b82      	ldr	r3, [pc, #520]	; (8004bd8 <__ieee754_pow+0x230>)
 80049d0:	4193      	sbcs	r3, r2
 80049d2:	f080 84b9 	bcs.w	8005348 <__ieee754_pow+0x9a0>
 80049d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80049da:	4640      	mov	r0, r8
 80049dc:	4649      	mov	r1, r9
 80049de:	f7fb fbbd 	bl	800015c <__adddf3>
 80049e2:	4683      	mov	fp, r0
 80049e4:	468c      	mov	ip, r1
 80049e6:	e06f      	b.n	8004ac8 <__ieee754_pow+0x120>
 80049e8:	4b7c      	ldr	r3, [pc, #496]	; (8004bdc <__ieee754_pow+0x234>)
 80049ea:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 80049ee:	429c      	cmp	r4, r3
 80049f0:	464d      	mov	r5, r9
 80049f2:	4682      	mov	sl, r0
 80049f4:	dc06      	bgt.n	8004a04 <__ieee754_pow+0x5c>
 80049f6:	d101      	bne.n	80049fc <__ieee754_pow+0x54>
 80049f8:	2800      	cmp	r0, #0
 80049fa:	d1ec      	bne.n	80049d6 <__ieee754_pow+0x2e>
 80049fc:	429e      	cmp	r6, r3
 80049fe:	dc01      	bgt.n	8004a04 <__ieee754_pow+0x5c>
 8004a00:	d10f      	bne.n	8004a22 <__ieee754_pow+0x7a>
 8004a02:	b172      	cbz	r2, 8004a22 <__ieee754_pow+0x7a>
 8004a04:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8004a08:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8004a0c:	ea55 050a 	orrs.w	r5, r5, sl
 8004a10:	d1e1      	bne.n	80049d6 <__ieee754_pow+0x2e>
 8004a12:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8004a16:	18db      	adds	r3, r3, r3
 8004a18:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8004a1c:	4152      	adcs	r2, r2
 8004a1e:	429d      	cmp	r5, r3
 8004a20:	e7d5      	b.n	80049ce <__ieee754_pow+0x26>
 8004a22:	2d00      	cmp	r5, #0
 8004a24:	da39      	bge.n	8004a9a <__ieee754_pow+0xf2>
 8004a26:	4b6e      	ldr	r3, [pc, #440]	; (8004be0 <__ieee754_pow+0x238>)
 8004a28:	429e      	cmp	r6, r3
 8004a2a:	dc52      	bgt.n	8004ad2 <__ieee754_pow+0x12a>
 8004a2c:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8004a30:	429e      	cmp	r6, r3
 8004a32:	f340 849c 	ble.w	800536e <__ieee754_pow+0x9c6>
 8004a36:	1533      	asrs	r3, r6, #20
 8004a38:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004a3c:	2b14      	cmp	r3, #20
 8004a3e:	dd0f      	ble.n	8004a60 <__ieee754_pow+0xb8>
 8004a40:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8004a44:	fa22 f103 	lsr.w	r1, r2, r3
 8004a48:	fa01 f303 	lsl.w	r3, r1, r3
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	f040 848e 	bne.w	800536e <__ieee754_pow+0x9c6>
 8004a52:	f001 0101 	and.w	r1, r1, #1
 8004a56:	f1c1 0302 	rsb	r3, r1, #2
 8004a5a:	9300      	str	r3, [sp, #0]
 8004a5c:	b182      	cbz	r2, 8004a80 <__ieee754_pow+0xd8>
 8004a5e:	e05d      	b.n	8004b1c <__ieee754_pow+0x174>
 8004a60:	2a00      	cmp	r2, #0
 8004a62:	d159      	bne.n	8004b18 <__ieee754_pow+0x170>
 8004a64:	f1c3 0314 	rsb	r3, r3, #20
 8004a68:	fa46 f103 	asr.w	r1, r6, r3
 8004a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a70:	42b3      	cmp	r3, r6
 8004a72:	f040 8479 	bne.w	8005368 <__ieee754_pow+0x9c0>
 8004a76:	f001 0101 	and.w	r1, r1, #1
 8004a7a:	f1c1 0302 	rsb	r3, r1, #2
 8004a7e:	9300      	str	r3, [sp, #0]
 8004a80:	4b58      	ldr	r3, [pc, #352]	; (8004be4 <__ieee754_pow+0x23c>)
 8004a82:	429e      	cmp	r6, r3
 8004a84:	d132      	bne.n	8004aec <__ieee754_pow+0x144>
 8004a86:	2f00      	cmp	r7, #0
 8004a88:	f280 846a 	bge.w	8005360 <__ieee754_pow+0x9b8>
 8004a8c:	4642      	mov	r2, r8
 8004a8e:	464b      	mov	r3, r9
 8004a90:	2000      	movs	r0, #0
 8004a92:	4954      	ldr	r1, [pc, #336]	; (8004be4 <__ieee754_pow+0x23c>)
 8004a94:	f7fb fe42 	bl	800071c <__aeabi_ddiv>
 8004a98:	e7a3      	b.n	80049e2 <__ieee754_pow+0x3a>
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	9300      	str	r3, [sp, #0]
 8004a9e:	2a00      	cmp	r2, #0
 8004aa0:	d13c      	bne.n	8004b1c <__ieee754_pow+0x174>
 8004aa2:	4b4e      	ldr	r3, [pc, #312]	; (8004bdc <__ieee754_pow+0x234>)
 8004aa4:	429e      	cmp	r6, r3
 8004aa6:	d1eb      	bne.n	8004a80 <__ieee754_pow+0xd8>
 8004aa8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8004aac:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8004ab0:	ea53 030a 	orrs.w	r3, r3, sl
 8004ab4:	f000 8448 	beq.w	8005348 <__ieee754_pow+0x9a0>
 8004ab8:	4b4b      	ldr	r3, [pc, #300]	; (8004be8 <__ieee754_pow+0x240>)
 8004aba:	429c      	cmp	r4, r3
 8004abc:	dd0b      	ble.n	8004ad6 <__ieee754_pow+0x12e>
 8004abe:	2f00      	cmp	r7, #0
 8004ac0:	f2c0 8448 	blt.w	8005354 <__ieee754_pow+0x9ac>
 8004ac4:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8004ac8:	4658      	mov	r0, fp
 8004aca:	4661      	mov	r1, ip
 8004acc:	b013      	add	sp, #76	; 0x4c
 8004ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ad2:	2302      	movs	r3, #2
 8004ad4:	e7e2      	b.n	8004a9c <__ieee754_pow+0xf4>
 8004ad6:	2f00      	cmp	r7, #0
 8004ad8:	f04f 0b00 	mov.w	fp, #0
 8004adc:	f04f 0c00 	mov.w	ip, #0
 8004ae0:	daf2      	bge.n	8004ac8 <__ieee754_pow+0x120>
 8004ae2:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8004ae6:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8004aea:	e7ed      	b.n	8004ac8 <__ieee754_pow+0x120>
 8004aec:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8004af0:	d106      	bne.n	8004b00 <__ieee754_pow+0x158>
 8004af2:	4642      	mov	r2, r8
 8004af4:	464b      	mov	r3, r9
 8004af6:	4640      	mov	r0, r8
 8004af8:	4649      	mov	r1, r9
 8004afa:	f7fb fce5 	bl	80004c8 <__aeabi_dmul>
 8004afe:	e770      	b.n	80049e2 <__ieee754_pow+0x3a>
 8004b00:	4b3a      	ldr	r3, [pc, #232]	; (8004bec <__ieee754_pow+0x244>)
 8004b02:	429f      	cmp	r7, r3
 8004b04:	d10a      	bne.n	8004b1c <__ieee754_pow+0x174>
 8004b06:	2d00      	cmp	r5, #0
 8004b08:	db08      	blt.n	8004b1c <__ieee754_pow+0x174>
 8004b0a:	4640      	mov	r0, r8
 8004b0c:	4649      	mov	r1, r9
 8004b0e:	b013      	add	sp, #76	; 0x4c
 8004b10:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b14:	f000 bc5e 	b.w	80053d4 <__ieee754_sqrt>
 8004b18:	2300      	movs	r3, #0
 8004b1a:	9300      	str	r3, [sp, #0]
 8004b1c:	4640      	mov	r0, r8
 8004b1e:	4649      	mov	r1, r9
 8004b20:	f000 fd34 	bl	800558c <fabs>
 8004b24:	4683      	mov	fp, r0
 8004b26:	468c      	mov	ip, r1
 8004b28:	f1ba 0f00 	cmp.w	sl, #0
 8004b2c:	d128      	bne.n	8004b80 <__ieee754_pow+0x1d8>
 8004b2e:	b124      	cbz	r4, 8004b3a <__ieee754_pow+0x192>
 8004b30:	4b2c      	ldr	r3, [pc, #176]	; (8004be4 <__ieee754_pow+0x23c>)
 8004b32:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d122      	bne.n	8004b80 <__ieee754_pow+0x1d8>
 8004b3a:	2f00      	cmp	r7, #0
 8004b3c:	da07      	bge.n	8004b4e <__ieee754_pow+0x1a6>
 8004b3e:	465a      	mov	r2, fp
 8004b40:	4663      	mov	r3, ip
 8004b42:	2000      	movs	r0, #0
 8004b44:	4927      	ldr	r1, [pc, #156]	; (8004be4 <__ieee754_pow+0x23c>)
 8004b46:	f7fb fde9 	bl	800071c <__aeabi_ddiv>
 8004b4a:	4683      	mov	fp, r0
 8004b4c:	468c      	mov	ip, r1
 8004b4e:	2d00      	cmp	r5, #0
 8004b50:	daba      	bge.n	8004ac8 <__ieee754_pow+0x120>
 8004b52:	9b00      	ldr	r3, [sp, #0]
 8004b54:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8004b58:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8004b5c:	4323      	orrs	r3, r4
 8004b5e:	d108      	bne.n	8004b72 <__ieee754_pow+0x1ca>
 8004b60:	465a      	mov	r2, fp
 8004b62:	4663      	mov	r3, ip
 8004b64:	4658      	mov	r0, fp
 8004b66:	4661      	mov	r1, ip
 8004b68:	f7fb faf6 	bl	8000158 <__aeabi_dsub>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	460b      	mov	r3, r1
 8004b70:	e790      	b.n	8004a94 <__ieee754_pow+0xec>
 8004b72:	9b00      	ldr	r3, [sp, #0]
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d1a7      	bne.n	8004ac8 <__ieee754_pow+0x120>
 8004b78:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8004b7c:	469c      	mov	ip, r3
 8004b7e:	e7a3      	b.n	8004ac8 <__ieee754_pow+0x120>
 8004b80:	0feb      	lsrs	r3, r5, #31
 8004b82:	3b01      	subs	r3, #1
 8004b84:	930c      	str	r3, [sp, #48]	; 0x30
 8004b86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004b88:	9b00      	ldr	r3, [sp, #0]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	d104      	bne.n	8004b98 <__ieee754_pow+0x1f0>
 8004b8e:	4642      	mov	r2, r8
 8004b90:	464b      	mov	r3, r9
 8004b92:	4640      	mov	r0, r8
 8004b94:	4649      	mov	r1, r9
 8004b96:	e7e7      	b.n	8004b68 <__ieee754_pow+0x1c0>
 8004b98:	4b15      	ldr	r3, [pc, #84]	; (8004bf0 <__ieee754_pow+0x248>)
 8004b9a:	429e      	cmp	r6, r3
 8004b9c:	f340 80f6 	ble.w	8004d8c <__ieee754_pow+0x3e4>
 8004ba0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8004ba4:	429e      	cmp	r6, r3
 8004ba6:	4b10      	ldr	r3, [pc, #64]	; (8004be8 <__ieee754_pow+0x240>)
 8004ba8:	dd09      	ble.n	8004bbe <__ieee754_pow+0x216>
 8004baa:	429c      	cmp	r4, r3
 8004bac:	dc0c      	bgt.n	8004bc8 <__ieee754_pow+0x220>
 8004bae:	2f00      	cmp	r7, #0
 8004bb0:	da0c      	bge.n	8004bcc <__ieee754_pow+0x224>
 8004bb2:	2000      	movs	r0, #0
 8004bb4:	b013      	add	sp, #76	; 0x4c
 8004bb6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bba:	f000 bce2 	b.w	8005582 <__math_oflow>
 8004bbe:	429c      	cmp	r4, r3
 8004bc0:	dbf5      	blt.n	8004bae <__ieee754_pow+0x206>
 8004bc2:	4b08      	ldr	r3, [pc, #32]	; (8004be4 <__ieee754_pow+0x23c>)
 8004bc4:	429c      	cmp	r4, r3
 8004bc6:	dd15      	ble.n	8004bf4 <__ieee754_pow+0x24c>
 8004bc8:	2f00      	cmp	r7, #0
 8004bca:	dcf2      	bgt.n	8004bb2 <__ieee754_pow+0x20a>
 8004bcc:	2000      	movs	r0, #0
 8004bce:	b013      	add	sp, #76	; 0x4c
 8004bd0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bd4:	f000 bcd0 	b.w	8005578 <__math_uflow>
 8004bd8:	fff00000 	.word	0xfff00000
 8004bdc:	7ff00000 	.word	0x7ff00000
 8004be0:	433fffff 	.word	0x433fffff
 8004be4:	3ff00000 	.word	0x3ff00000
 8004be8:	3fefffff 	.word	0x3fefffff
 8004bec:	3fe00000 	.word	0x3fe00000
 8004bf0:	41e00000 	.word	0x41e00000
 8004bf4:	4661      	mov	r1, ip
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	4658      	mov	r0, fp
 8004bfa:	4b5f      	ldr	r3, [pc, #380]	; (8004d78 <__ieee754_pow+0x3d0>)
 8004bfc:	f7fb faac 	bl	8000158 <__aeabi_dsub>
 8004c00:	a355      	add	r3, pc, #340	; (adr r3, 8004d58 <__ieee754_pow+0x3b0>)
 8004c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c06:	4604      	mov	r4, r0
 8004c08:	460d      	mov	r5, r1
 8004c0a:	f7fb fc5d 	bl	80004c8 <__aeabi_dmul>
 8004c0e:	a354      	add	r3, pc, #336	; (adr r3, 8004d60 <__ieee754_pow+0x3b8>)
 8004c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c14:	4606      	mov	r6, r0
 8004c16:	460f      	mov	r7, r1
 8004c18:	4620      	mov	r0, r4
 8004c1a:	4629      	mov	r1, r5
 8004c1c:	f7fb fc54 	bl	80004c8 <__aeabi_dmul>
 8004c20:	2200      	movs	r2, #0
 8004c22:	4682      	mov	sl, r0
 8004c24:	468b      	mov	fp, r1
 8004c26:	4620      	mov	r0, r4
 8004c28:	4629      	mov	r1, r5
 8004c2a:	4b54      	ldr	r3, [pc, #336]	; (8004d7c <__ieee754_pow+0x3d4>)
 8004c2c:	f7fb fc4c 	bl	80004c8 <__aeabi_dmul>
 8004c30:	4602      	mov	r2, r0
 8004c32:	460b      	mov	r3, r1
 8004c34:	a14c      	add	r1, pc, #304	; (adr r1, 8004d68 <__ieee754_pow+0x3c0>)
 8004c36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004c3a:	f7fb fa8d 	bl	8000158 <__aeabi_dsub>
 8004c3e:	4622      	mov	r2, r4
 8004c40:	462b      	mov	r3, r5
 8004c42:	f7fb fc41 	bl	80004c8 <__aeabi_dmul>
 8004c46:	4602      	mov	r2, r0
 8004c48:	460b      	mov	r3, r1
 8004c4a:	2000      	movs	r0, #0
 8004c4c:	494c      	ldr	r1, [pc, #304]	; (8004d80 <__ieee754_pow+0x3d8>)
 8004c4e:	f7fb fa83 	bl	8000158 <__aeabi_dsub>
 8004c52:	4622      	mov	r2, r4
 8004c54:	462b      	mov	r3, r5
 8004c56:	4680      	mov	r8, r0
 8004c58:	4689      	mov	r9, r1
 8004c5a:	4620      	mov	r0, r4
 8004c5c:	4629      	mov	r1, r5
 8004c5e:	f7fb fc33 	bl	80004c8 <__aeabi_dmul>
 8004c62:	4602      	mov	r2, r0
 8004c64:	460b      	mov	r3, r1
 8004c66:	4640      	mov	r0, r8
 8004c68:	4649      	mov	r1, r9
 8004c6a:	f7fb fc2d 	bl	80004c8 <__aeabi_dmul>
 8004c6e:	a340      	add	r3, pc, #256	; (adr r3, 8004d70 <__ieee754_pow+0x3c8>)
 8004c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c74:	f7fb fc28 	bl	80004c8 <__aeabi_dmul>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	4650      	mov	r0, sl
 8004c7e:	4659      	mov	r1, fp
 8004c80:	f7fb fa6a 	bl	8000158 <__aeabi_dsub>
 8004c84:	f04f 0a00 	mov.w	sl, #0
 8004c88:	4602      	mov	r2, r0
 8004c8a:	460b      	mov	r3, r1
 8004c8c:	4604      	mov	r4, r0
 8004c8e:	460d      	mov	r5, r1
 8004c90:	4630      	mov	r0, r6
 8004c92:	4639      	mov	r1, r7
 8004c94:	f7fb fa62 	bl	800015c <__adddf3>
 8004c98:	4632      	mov	r2, r6
 8004c9a:	463b      	mov	r3, r7
 8004c9c:	4650      	mov	r0, sl
 8004c9e:	468b      	mov	fp, r1
 8004ca0:	f7fb fa5a 	bl	8000158 <__aeabi_dsub>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	460b      	mov	r3, r1
 8004ca8:	4620      	mov	r0, r4
 8004caa:	4629      	mov	r1, r5
 8004cac:	f7fb fa54 	bl	8000158 <__aeabi_dsub>
 8004cb0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004cb4:	9b00      	ldr	r3, [sp, #0]
 8004cb6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004cb8:	3b01      	subs	r3, #1
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	f04f 0600 	mov.w	r6, #0
 8004cc0:	f04f 0200 	mov.w	r2, #0
 8004cc4:	bf0c      	ite	eq
 8004cc6:	4b2f      	ldreq	r3, [pc, #188]	; (8004d84 <__ieee754_pow+0x3dc>)
 8004cc8:	4b2b      	ldrne	r3, [pc, #172]	; (8004d78 <__ieee754_pow+0x3d0>)
 8004cca:	4604      	mov	r4, r0
 8004ccc:	460d      	mov	r5, r1
 8004cce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004cd2:	e9cd 2300 	strd	r2, r3, [sp]
 8004cd6:	4632      	mov	r2, r6
 8004cd8:	463b      	mov	r3, r7
 8004cda:	f7fb fa3d 	bl	8000158 <__aeabi_dsub>
 8004cde:	4652      	mov	r2, sl
 8004ce0:	465b      	mov	r3, fp
 8004ce2:	f7fb fbf1 	bl	80004c8 <__aeabi_dmul>
 8004ce6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004cea:	4680      	mov	r8, r0
 8004cec:	4689      	mov	r9, r1
 8004cee:	4620      	mov	r0, r4
 8004cf0:	4629      	mov	r1, r5
 8004cf2:	f7fb fbe9 	bl	80004c8 <__aeabi_dmul>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	460b      	mov	r3, r1
 8004cfa:	4640      	mov	r0, r8
 8004cfc:	4649      	mov	r1, r9
 8004cfe:	f7fb fa2d 	bl	800015c <__adddf3>
 8004d02:	4632      	mov	r2, r6
 8004d04:	463b      	mov	r3, r7
 8004d06:	4680      	mov	r8, r0
 8004d08:	4689      	mov	r9, r1
 8004d0a:	4650      	mov	r0, sl
 8004d0c:	4659      	mov	r1, fp
 8004d0e:	f7fb fbdb 	bl	80004c8 <__aeabi_dmul>
 8004d12:	4604      	mov	r4, r0
 8004d14:	460d      	mov	r5, r1
 8004d16:	460b      	mov	r3, r1
 8004d18:	4602      	mov	r2, r0
 8004d1a:	4649      	mov	r1, r9
 8004d1c:	4640      	mov	r0, r8
 8004d1e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004d22:	f7fb fa1b 	bl	800015c <__adddf3>
 8004d26:	4b18      	ldr	r3, [pc, #96]	; (8004d88 <__ieee754_pow+0x3e0>)
 8004d28:	4682      	mov	sl, r0
 8004d2a:	4299      	cmp	r1, r3
 8004d2c:	460f      	mov	r7, r1
 8004d2e:	460e      	mov	r6, r1
 8004d30:	f340 82e5 	ble.w	80052fe <__ieee754_pow+0x956>
 8004d34:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8004d38:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8004d3c:	4303      	orrs	r3, r0
 8004d3e:	f000 81df 	beq.w	8005100 <__ieee754_pow+0x758>
 8004d42:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004d46:	2200      	movs	r2, #0
 8004d48:	2300      	movs	r3, #0
 8004d4a:	f7fb fe2f 	bl	80009ac <__aeabi_dcmplt>
 8004d4e:	3800      	subs	r0, #0
 8004d50:	bf18      	it	ne
 8004d52:	2001      	movne	r0, #1
 8004d54:	e72e      	b.n	8004bb4 <__ieee754_pow+0x20c>
 8004d56:	bf00      	nop
 8004d58:	60000000 	.word	0x60000000
 8004d5c:	3ff71547 	.word	0x3ff71547
 8004d60:	f85ddf44 	.word	0xf85ddf44
 8004d64:	3e54ae0b 	.word	0x3e54ae0b
 8004d68:	55555555 	.word	0x55555555
 8004d6c:	3fd55555 	.word	0x3fd55555
 8004d70:	652b82fe 	.word	0x652b82fe
 8004d74:	3ff71547 	.word	0x3ff71547
 8004d78:	3ff00000 	.word	0x3ff00000
 8004d7c:	3fd00000 	.word	0x3fd00000
 8004d80:	3fe00000 	.word	0x3fe00000
 8004d84:	bff00000 	.word	0xbff00000
 8004d88:	408fffff 	.word	0x408fffff
 8004d8c:	4bd2      	ldr	r3, [pc, #840]	; (80050d8 <__ieee754_pow+0x730>)
 8004d8e:	2200      	movs	r2, #0
 8004d90:	402b      	ands	r3, r5
 8004d92:	b943      	cbnz	r3, 8004da6 <__ieee754_pow+0x3fe>
 8004d94:	4658      	mov	r0, fp
 8004d96:	4661      	mov	r1, ip
 8004d98:	4bd0      	ldr	r3, [pc, #832]	; (80050dc <__ieee754_pow+0x734>)
 8004d9a:	f7fb fb95 	bl	80004c8 <__aeabi_dmul>
 8004d9e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8004da2:	4683      	mov	fp, r0
 8004da4:	460c      	mov	r4, r1
 8004da6:	1523      	asrs	r3, r4, #20
 8004da8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004dac:	4413      	add	r3, r2
 8004dae:	930b      	str	r3, [sp, #44]	; 0x2c
 8004db0:	4bcb      	ldr	r3, [pc, #812]	; (80050e0 <__ieee754_pow+0x738>)
 8004db2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8004db6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8004dba:	429c      	cmp	r4, r3
 8004dbc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8004dc0:	dd08      	ble.n	8004dd4 <__ieee754_pow+0x42c>
 8004dc2:	4bc8      	ldr	r3, [pc, #800]	; (80050e4 <__ieee754_pow+0x73c>)
 8004dc4:	429c      	cmp	r4, r3
 8004dc6:	f340 8199 	ble.w	80050fc <__ieee754_pow+0x754>
 8004dca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004dcc:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8004dd0:	3301      	adds	r3, #1
 8004dd2:	930b      	str	r3, [sp, #44]	; 0x2c
 8004dd4:	2600      	movs	r6, #0
 8004dd6:	00f3      	lsls	r3, r6, #3
 8004dd8:	930d      	str	r3, [sp, #52]	; 0x34
 8004dda:	4bc3      	ldr	r3, [pc, #780]	; (80050e8 <__ieee754_pow+0x740>)
 8004ddc:	4658      	mov	r0, fp
 8004dde:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004de2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004de6:	4629      	mov	r1, r5
 8004de8:	461a      	mov	r2, r3
 8004dea:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8004dee:	4623      	mov	r3, r4
 8004df0:	f7fb f9b2 	bl	8000158 <__aeabi_dsub>
 8004df4:	46da      	mov	sl, fp
 8004df6:	462b      	mov	r3, r5
 8004df8:	4652      	mov	r2, sl
 8004dfa:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8004dfe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004e02:	f7fb f9ab 	bl	800015c <__adddf3>
 8004e06:	4602      	mov	r2, r0
 8004e08:	460b      	mov	r3, r1
 8004e0a:	2000      	movs	r0, #0
 8004e0c:	49b7      	ldr	r1, [pc, #732]	; (80050ec <__ieee754_pow+0x744>)
 8004e0e:	f7fb fc85 	bl	800071c <__aeabi_ddiv>
 8004e12:	4602      	mov	r2, r0
 8004e14:	460b      	mov	r3, r1
 8004e16:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004e1a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004e1e:	f7fb fb53 	bl	80004c8 <__aeabi_dmul>
 8004e22:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004e26:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8004e2a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004e2e:	2300      	movs	r3, #0
 8004e30:	2200      	movs	r2, #0
 8004e32:	46ab      	mov	fp, r5
 8004e34:	106d      	asrs	r5, r5, #1
 8004e36:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8004e3a:	9304      	str	r3, [sp, #16]
 8004e3c:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8004e40:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8004e44:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8004e48:	4640      	mov	r0, r8
 8004e4a:	4649      	mov	r1, r9
 8004e4c:	4614      	mov	r4, r2
 8004e4e:	461d      	mov	r5, r3
 8004e50:	f7fb fb3a 	bl	80004c8 <__aeabi_dmul>
 8004e54:	4602      	mov	r2, r0
 8004e56:	460b      	mov	r3, r1
 8004e58:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004e5c:	f7fb f97c 	bl	8000158 <__aeabi_dsub>
 8004e60:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004e64:	4606      	mov	r6, r0
 8004e66:	460f      	mov	r7, r1
 8004e68:	4620      	mov	r0, r4
 8004e6a:	4629      	mov	r1, r5
 8004e6c:	f7fb f974 	bl	8000158 <__aeabi_dsub>
 8004e70:	4602      	mov	r2, r0
 8004e72:	460b      	mov	r3, r1
 8004e74:	4650      	mov	r0, sl
 8004e76:	4659      	mov	r1, fp
 8004e78:	f7fb f96e 	bl	8000158 <__aeabi_dsub>
 8004e7c:	4642      	mov	r2, r8
 8004e7e:	464b      	mov	r3, r9
 8004e80:	f7fb fb22 	bl	80004c8 <__aeabi_dmul>
 8004e84:	4602      	mov	r2, r0
 8004e86:	460b      	mov	r3, r1
 8004e88:	4630      	mov	r0, r6
 8004e8a:	4639      	mov	r1, r7
 8004e8c:	f7fb f964 	bl	8000158 <__aeabi_dsub>
 8004e90:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004e94:	f7fb fb18 	bl	80004c8 <__aeabi_dmul>
 8004e98:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004e9c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004ea0:	4610      	mov	r0, r2
 8004ea2:	4619      	mov	r1, r3
 8004ea4:	f7fb fb10 	bl	80004c8 <__aeabi_dmul>
 8004ea8:	a379      	add	r3, pc, #484	; (adr r3, 8005090 <__ieee754_pow+0x6e8>)
 8004eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eae:	4604      	mov	r4, r0
 8004eb0:	460d      	mov	r5, r1
 8004eb2:	f7fb fb09 	bl	80004c8 <__aeabi_dmul>
 8004eb6:	a378      	add	r3, pc, #480	; (adr r3, 8005098 <__ieee754_pow+0x6f0>)
 8004eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ebc:	f7fb f94e 	bl	800015c <__adddf3>
 8004ec0:	4622      	mov	r2, r4
 8004ec2:	462b      	mov	r3, r5
 8004ec4:	f7fb fb00 	bl	80004c8 <__aeabi_dmul>
 8004ec8:	a375      	add	r3, pc, #468	; (adr r3, 80050a0 <__ieee754_pow+0x6f8>)
 8004eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ece:	f7fb f945 	bl	800015c <__adddf3>
 8004ed2:	4622      	mov	r2, r4
 8004ed4:	462b      	mov	r3, r5
 8004ed6:	f7fb faf7 	bl	80004c8 <__aeabi_dmul>
 8004eda:	a373      	add	r3, pc, #460	; (adr r3, 80050a8 <__ieee754_pow+0x700>)
 8004edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee0:	f7fb f93c 	bl	800015c <__adddf3>
 8004ee4:	4622      	mov	r2, r4
 8004ee6:	462b      	mov	r3, r5
 8004ee8:	f7fb faee 	bl	80004c8 <__aeabi_dmul>
 8004eec:	a370      	add	r3, pc, #448	; (adr r3, 80050b0 <__ieee754_pow+0x708>)
 8004eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef2:	f7fb f933 	bl	800015c <__adddf3>
 8004ef6:	4622      	mov	r2, r4
 8004ef8:	462b      	mov	r3, r5
 8004efa:	f7fb fae5 	bl	80004c8 <__aeabi_dmul>
 8004efe:	a36e      	add	r3, pc, #440	; (adr r3, 80050b8 <__ieee754_pow+0x710>)
 8004f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f04:	f7fb f92a 	bl	800015c <__adddf3>
 8004f08:	4622      	mov	r2, r4
 8004f0a:	4606      	mov	r6, r0
 8004f0c:	460f      	mov	r7, r1
 8004f0e:	462b      	mov	r3, r5
 8004f10:	4620      	mov	r0, r4
 8004f12:	4629      	mov	r1, r5
 8004f14:	f7fb fad8 	bl	80004c8 <__aeabi_dmul>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	460b      	mov	r3, r1
 8004f1c:	4630      	mov	r0, r6
 8004f1e:	4639      	mov	r1, r7
 8004f20:	f7fb fad2 	bl	80004c8 <__aeabi_dmul>
 8004f24:	4604      	mov	r4, r0
 8004f26:	460d      	mov	r5, r1
 8004f28:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f2c:	4642      	mov	r2, r8
 8004f2e:	464b      	mov	r3, r9
 8004f30:	f7fb f914 	bl	800015c <__adddf3>
 8004f34:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004f38:	f7fb fac6 	bl	80004c8 <__aeabi_dmul>
 8004f3c:	4622      	mov	r2, r4
 8004f3e:	462b      	mov	r3, r5
 8004f40:	f7fb f90c 	bl	800015c <__adddf3>
 8004f44:	4642      	mov	r2, r8
 8004f46:	4606      	mov	r6, r0
 8004f48:	460f      	mov	r7, r1
 8004f4a:	464b      	mov	r3, r9
 8004f4c:	4640      	mov	r0, r8
 8004f4e:	4649      	mov	r1, r9
 8004f50:	f7fb faba 	bl	80004c8 <__aeabi_dmul>
 8004f54:	2200      	movs	r2, #0
 8004f56:	4b66      	ldr	r3, [pc, #408]	; (80050f0 <__ieee754_pow+0x748>)
 8004f58:	4682      	mov	sl, r0
 8004f5a:	468b      	mov	fp, r1
 8004f5c:	f7fb f8fe 	bl	800015c <__adddf3>
 8004f60:	4632      	mov	r2, r6
 8004f62:	463b      	mov	r3, r7
 8004f64:	f7fb f8fa 	bl	800015c <__adddf3>
 8004f68:	2400      	movs	r4, #0
 8004f6a:	460d      	mov	r5, r1
 8004f6c:	4622      	mov	r2, r4
 8004f6e:	460b      	mov	r3, r1
 8004f70:	4640      	mov	r0, r8
 8004f72:	4649      	mov	r1, r9
 8004f74:	f7fb faa8 	bl	80004c8 <__aeabi_dmul>
 8004f78:	2200      	movs	r2, #0
 8004f7a:	4680      	mov	r8, r0
 8004f7c:	4689      	mov	r9, r1
 8004f7e:	4620      	mov	r0, r4
 8004f80:	4629      	mov	r1, r5
 8004f82:	4b5b      	ldr	r3, [pc, #364]	; (80050f0 <__ieee754_pow+0x748>)
 8004f84:	f7fb f8e8 	bl	8000158 <__aeabi_dsub>
 8004f88:	4652      	mov	r2, sl
 8004f8a:	465b      	mov	r3, fp
 8004f8c:	f7fb f8e4 	bl	8000158 <__aeabi_dsub>
 8004f90:	4602      	mov	r2, r0
 8004f92:	460b      	mov	r3, r1
 8004f94:	4630      	mov	r0, r6
 8004f96:	4639      	mov	r1, r7
 8004f98:	f7fb f8de 	bl	8000158 <__aeabi_dsub>
 8004f9c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004fa0:	f7fb fa92 	bl	80004c8 <__aeabi_dmul>
 8004fa4:	4622      	mov	r2, r4
 8004fa6:	4606      	mov	r6, r0
 8004fa8:	460f      	mov	r7, r1
 8004faa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004fae:	462b      	mov	r3, r5
 8004fb0:	f7fb fa8a 	bl	80004c8 <__aeabi_dmul>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	460b      	mov	r3, r1
 8004fb8:	4630      	mov	r0, r6
 8004fba:	4639      	mov	r1, r7
 8004fbc:	f7fb f8ce 	bl	800015c <__adddf3>
 8004fc0:	2400      	movs	r4, #0
 8004fc2:	4606      	mov	r6, r0
 8004fc4:	460f      	mov	r7, r1
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	460b      	mov	r3, r1
 8004fca:	4640      	mov	r0, r8
 8004fcc:	4649      	mov	r1, r9
 8004fce:	f7fb f8c5 	bl	800015c <__adddf3>
 8004fd2:	a33b      	add	r3, pc, #236	; (adr r3, 80050c0 <__ieee754_pow+0x718>)
 8004fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd8:	4620      	mov	r0, r4
 8004fda:	460d      	mov	r5, r1
 8004fdc:	f7fb fa74 	bl	80004c8 <__aeabi_dmul>
 8004fe0:	4642      	mov	r2, r8
 8004fe2:	464b      	mov	r3, r9
 8004fe4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004fe8:	4620      	mov	r0, r4
 8004fea:	4629      	mov	r1, r5
 8004fec:	f7fb f8b4 	bl	8000158 <__aeabi_dsub>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	460b      	mov	r3, r1
 8004ff4:	4630      	mov	r0, r6
 8004ff6:	4639      	mov	r1, r7
 8004ff8:	f7fb f8ae 	bl	8000158 <__aeabi_dsub>
 8004ffc:	a332      	add	r3, pc, #200	; (adr r3, 80050c8 <__ieee754_pow+0x720>)
 8004ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005002:	f7fb fa61 	bl	80004c8 <__aeabi_dmul>
 8005006:	a332      	add	r3, pc, #200	; (adr r3, 80050d0 <__ieee754_pow+0x728>)
 8005008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800500c:	4606      	mov	r6, r0
 800500e:	460f      	mov	r7, r1
 8005010:	4620      	mov	r0, r4
 8005012:	4629      	mov	r1, r5
 8005014:	f7fb fa58 	bl	80004c8 <__aeabi_dmul>
 8005018:	4602      	mov	r2, r0
 800501a:	460b      	mov	r3, r1
 800501c:	4630      	mov	r0, r6
 800501e:	4639      	mov	r1, r7
 8005020:	f7fb f89c 	bl	800015c <__adddf3>
 8005024:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005026:	4b33      	ldr	r3, [pc, #204]	; (80050f4 <__ieee754_pow+0x74c>)
 8005028:	f04f 0a00 	mov.w	sl, #0
 800502c:	4413      	add	r3, r2
 800502e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005032:	f7fb f893 	bl	800015c <__adddf3>
 8005036:	4680      	mov	r8, r0
 8005038:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800503a:	4689      	mov	r9, r1
 800503c:	f7fb f9da 	bl	80003f4 <__aeabi_i2d>
 8005040:	4604      	mov	r4, r0
 8005042:	460d      	mov	r5, r1
 8005044:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005046:	4b2c      	ldr	r3, [pc, #176]	; (80050f8 <__ieee754_pow+0x750>)
 8005048:	4413      	add	r3, r2
 800504a:	e9d3 6700 	ldrd	r6, r7, [r3]
 800504e:	4642      	mov	r2, r8
 8005050:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005054:	464b      	mov	r3, r9
 8005056:	f7fb f881 	bl	800015c <__adddf3>
 800505a:	4632      	mov	r2, r6
 800505c:	463b      	mov	r3, r7
 800505e:	f7fb f87d 	bl	800015c <__adddf3>
 8005062:	4622      	mov	r2, r4
 8005064:	462b      	mov	r3, r5
 8005066:	f7fb f879 	bl	800015c <__adddf3>
 800506a:	4622      	mov	r2, r4
 800506c:	462b      	mov	r3, r5
 800506e:	4650      	mov	r0, sl
 8005070:	468b      	mov	fp, r1
 8005072:	f7fb f871 	bl	8000158 <__aeabi_dsub>
 8005076:	4632      	mov	r2, r6
 8005078:	463b      	mov	r3, r7
 800507a:	f7fb f86d 	bl	8000158 <__aeabi_dsub>
 800507e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005082:	f7fb f869 	bl	8000158 <__aeabi_dsub>
 8005086:	4602      	mov	r2, r0
 8005088:	460b      	mov	r3, r1
 800508a:	4640      	mov	r0, r8
 800508c:	4649      	mov	r1, r9
 800508e:	e60d      	b.n	8004cac <__ieee754_pow+0x304>
 8005090:	4a454eef 	.word	0x4a454eef
 8005094:	3fca7e28 	.word	0x3fca7e28
 8005098:	93c9db65 	.word	0x93c9db65
 800509c:	3fcd864a 	.word	0x3fcd864a
 80050a0:	a91d4101 	.word	0xa91d4101
 80050a4:	3fd17460 	.word	0x3fd17460
 80050a8:	518f264d 	.word	0x518f264d
 80050ac:	3fd55555 	.word	0x3fd55555
 80050b0:	db6fabff 	.word	0xdb6fabff
 80050b4:	3fdb6db6 	.word	0x3fdb6db6
 80050b8:	33333303 	.word	0x33333303
 80050bc:	3fe33333 	.word	0x3fe33333
 80050c0:	e0000000 	.word	0xe0000000
 80050c4:	3feec709 	.word	0x3feec709
 80050c8:	dc3a03fd 	.word	0xdc3a03fd
 80050cc:	3feec709 	.word	0x3feec709
 80050d0:	145b01f5 	.word	0x145b01f5
 80050d4:	be3e2fe0 	.word	0xbe3e2fe0
 80050d8:	7ff00000 	.word	0x7ff00000
 80050dc:	43400000 	.word	0x43400000
 80050e0:	0003988e 	.word	0x0003988e
 80050e4:	000bb679 	.word	0x000bb679
 80050e8:	08005740 	.word	0x08005740
 80050ec:	3ff00000 	.word	0x3ff00000
 80050f0:	40080000 	.word	0x40080000
 80050f4:	08005760 	.word	0x08005760
 80050f8:	08005750 	.word	0x08005750
 80050fc:	2601      	movs	r6, #1
 80050fe:	e66a      	b.n	8004dd6 <__ieee754_pow+0x42e>
 8005100:	a39d      	add	r3, pc, #628	; (adr r3, 8005378 <__ieee754_pow+0x9d0>)
 8005102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005106:	4640      	mov	r0, r8
 8005108:	4649      	mov	r1, r9
 800510a:	f7fb f827 	bl	800015c <__adddf3>
 800510e:	4622      	mov	r2, r4
 8005110:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005114:	462b      	mov	r3, r5
 8005116:	4650      	mov	r0, sl
 8005118:	4639      	mov	r1, r7
 800511a:	f7fb f81d 	bl	8000158 <__aeabi_dsub>
 800511e:	4602      	mov	r2, r0
 8005120:	460b      	mov	r3, r1
 8005122:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005126:	f7fb fc5f 	bl	80009e8 <__aeabi_dcmpgt>
 800512a:	2800      	cmp	r0, #0
 800512c:	f47f ae09 	bne.w	8004d42 <__ieee754_pow+0x39a>
 8005130:	4aa3      	ldr	r2, [pc, #652]	; (80053c0 <__ieee754_pow+0xa18>)
 8005132:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8005136:	4293      	cmp	r3, r2
 8005138:	f340 8101 	ble.w	800533e <__ieee754_pow+0x996>
 800513c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8005140:	2000      	movs	r0, #0
 8005142:	151b      	asrs	r3, r3, #20
 8005144:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8005148:	fa4a f303 	asr.w	r3, sl, r3
 800514c:	4433      	add	r3, r6
 800514e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8005152:	4f9c      	ldr	r7, [pc, #624]	; (80053c4 <__ieee754_pow+0xa1c>)
 8005154:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8005158:	4117      	asrs	r7, r2
 800515a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800515e:	ea23 0107 	bic.w	r1, r3, r7
 8005162:	f1c2 0214 	rsb	r2, r2, #20
 8005166:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800516a:	460b      	mov	r3, r1
 800516c:	fa4a fa02 	asr.w	sl, sl, r2
 8005170:	2e00      	cmp	r6, #0
 8005172:	4602      	mov	r2, r0
 8005174:	4629      	mov	r1, r5
 8005176:	4620      	mov	r0, r4
 8005178:	bfb8      	it	lt
 800517a:	f1ca 0a00 	rsblt	sl, sl, #0
 800517e:	f7fa ffeb 	bl	8000158 <__aeabi_dsub>
 8005182:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005186:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800518a:	2400      	movs	r4, #0
 800518c:	4642      	mov	r2, r8
 800518e:	464b      	mov	r3, r9
 8005190:	f7fa ffe4 	bl	800015c <__adddf3>
 8005194:	a37a      	add	r3, pc, #488	; (adr r3, 8005380 <__ieee754_pow+0x9d8>)
 8005196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800519a:	4620      	mov	r0, r4
 800519c:	460d      	mov	r5, r1
 800519e:	f7fb f993 	bl	80004c8 <__aeabi_dmul>
 80051a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80051a6:	4606      	mov	r6, r0
 80051a8:	460f      	mov	r7, r1
 80051aa:	4620      	mov	r0, r4
 80051ac:	4629      	mov	r1, r5
 80051ae:	f7fa ffd3 	bl	8000158 <__aeabi_dsub>
 80051b2:	4602      	mov	r2, r0
 80051b4:	460b      	mov	r3, r1
 80051b6:	4640      	mov	r0, r8
 80051b8:	4649      	mov	r1, r9
 80051ba:	f7fa ffcd 	bl	8000158 <__aeabi_dsub>
 80051be:	a372      	add	r3, pc, #456	; (adr r3, 8005388 <__ieee754_pow+0x9e0>)
 80051c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c4:	f7fb f980 	bl	80004c8 <__aeabi_dmul>
 80051c8:	a371      	add	r3, pc, #452	; (adr r3, 8005390 <__ieee754_pow+0x9e8>)
 80051ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ce:	4680      	mov	r8, r0
 80051d0:	4689      	mov	r9, r1
 80051d2:	4620      	mov	r0, r4
 80051d4:	4629      	mov	r1, r5
 80051d6:	f7fb f977 	bl	80004c8 <__aeabi_dmul>
 80051da:	4602      	mov	r2, r0
 80051dc:	460b      	mov	r3, r1
 80051de:	4640      	mov	r0, r8
 80051e0:	4649      	mov	r1, r9
 80051e2:	f7fa ffbb 	bl	800015c <__adddf3>
 80051e6:	4604      	mov	r4, r0
 80051e8:	460d      	mov	r5, r1
 80051ea:	4602      	mov	r2, r0
 80051ec:	460b      	mov	r3, r1
 80051ee:	4630      	mov	r0, r6
 80051f0:	4639      	mov	r1, r7
 80051f2:	f7fa ffb3 	bl	800015c <__adddf3>
 80051f6:	4632      	mov	r2, r6
 80051f8:	463b      	mov	r3, r7
 80051fa:	4680      	mov	r8, r0
 80051fc:	4689      	mov	r9, r1
 80051fe:	f7fa ffab 	bl	8000158 <__aeabi_dsub>
 8005202:	4602      	mov	r2, r0
 8005204:	460b      	mov	r3, r1
 8005206:	4620      	mov	r0, r4
 8005208:	4629      	mov	r1, r5
 800520a:	f7fa ffa5 	bl	8000158 <__aeabi_dsub>
 800520e:	4642      	mov	r2, r8
 8005210:	4606      	mov	r6, r0
 8005212:	460f      	mov	r7, r1
 8005214:	464b      	mov	r3, r9
 8005216:	4640      	mov	r0, r8
 8005218:	4649      	mov	r1, r9
 800521a:	f7fb f955 	bl	80004c8 <__aeabi_dmul>
 800521e:	a35e      	add	r3, pc, #376	; (adr r3, 8005398 <__ieee754_pow+0x9f0>)
 8005220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005224:	4604      	mov	r4, r0
 8005226:	460d      	mov	r5, r1
 8005228:	f7fb f94e 	bl	80004c8 <__aeabi_dmul>
 800522c:	a35c      	add	r3, pc, #368	; (adr r3, 80053a0 <__ieee754_pow+0x9f8>)
 800522e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005232:	f7fa ff91 	bl	8000158 <__aeabi_dsub>
 8005236:	4622      	mov	r2, r4
 8005238:	462b      	mov	r3, r5
 800523a:	f7fb f945 	bl	80004c8 <__aeabi_dmul>
 800523e:	a35a      	add	r3, pc, #360	; (adr r3, 80053a8 <__ieee754_pow+0xa00>)
 8005240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005244:	f7fa ff8a 	bl	800015c <__adddf3>
 8005248:	4622      	mov	r2, r4
 800524a:	462b      	mov	r3, r5
 800524c:	f7fb f93c 	bl	80004c8 <__aeabi_dmul>
 8005250:	a357      	add	r3, pc, #348	; (adr r3, 80053b0 <__ieee754_pow+0xa08>)
 8005252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005256:	f7fa ff7f 	bl	8000158 <__aeabi_dsub>
 800525a:	4622      	mov	r2, r4
 800525c:	462b      	mov	r3, r5
 800525e:	f7fb f933 	bl	80004c8 <__aeabi_dmul>
 8005262:	a355      	add	r3, pc, #340	; (adr r3, 80053b8 <__ieee754_pow+0xa10>)
 8005264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005268:	f7fa ff78 	bl	800015c <__adddf3>
 800526c:	4622      	mov	r2, r4
 800526e:	462b      	mov	r3, r5
 8005270:	f7fb f92a 	bl	80004c8 <__aeabi_dmul>
 8005274:	4602      	mov	r2, r0
 8005276:	460b      	mov	r3, r1
 8005278:	4640      	mov	r0, r8
 800527a:	4649      	mov	r1, r9
 800527c:	f7fa ff6c 	bl	8000158 <__aeabi_dsub>
 8005280:	4604      	mov	r4, r0
 8005282:	460d      	mov	r5, r1
 8005284:	4602      	mov	r2, r0
 8005286:	460b      	mov	r3, r1
 8005288:	4640      	mov	r0, r8
 800528a:	4649      	mov	r1, r9
 800528c:	f7fb f91c 	bl	80004c8 <__aeabi_dmul>
 8005290:	2200      	movs	r2, #0
 8005292:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005296:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800529a:	4620      	mov	r0, r4
 800529c:	4629      	mov	r1, r5
 800529e:	f7fa ff5b 	bl	8000158 <__aeabi_dsub>
 80052a2:	4602      	mov	r2, r0
 80052a4:	460b      	mov	r3, r1
 80052a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052aa:	f7fb fa37 	bl	800071c <__aeabi_ddiv>
 80052ae:	4632      	mov	r2, r6
 80052b0:	4604      	mov	r4, r0
 80052b2:	460d      	mov	r5, r1
 80052b4:	463b      	mov	r3, r7
 80052b6:	4640      	mov	r0, r8
 80052b8:	4649      	mov	r1, r9
 80052ba:	f7fb f905 	bl	80004c8 <__aeabi_dmul>
 80052be:	4632      	mov	r2, r6
 80052c0:	463b      	mov	r3, r7
 80052c2:	f7fa ff4b 	bl	800015c <__adddf3>
 80052c6:	4602      	mov	r2, r0
 80052c8:	460b      	mov	r3, r1
 80052ca:	4620      	mov	r0, r4
 80052cc:	4629      	mov	r1, r5
 80052ce:	f7fa ff43 	bl	8000158 <__aeabi_dsub>
 80052d2:	4642      	mov	r2, r8
 80052d4:	464b      	mov	r3, r9
 80052d6:	f7fa ff3f 	bl	8000158 <__aeabi_dsub>
 80052da:	4602      	mov	r2, r0
 80052dc:	460b      	mov	r3, r1
 80052de:	2000      	movs	r0, #0
 80052e0:	4939      	ldr	r1, [pc, #228]	; (80053c8 <__ieee754_pow+0xa20>)
 80052e2:	f7fa ff39 	bl	8000158 <__aeabi_dsub>
 80052e6:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80052ea:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80052ee:	da29      	bge.n	8005344 <__ieee754_pow+0x99c>
 80052f0:	4652      	mov	r2, sl
 80052f2:	f000 f955 	bl	80055a0 <scalbn>
 80052f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80052fa:	f7ff bbfe 	b.w	8004afa <__ieee754_pow+0x152>
 80052fe:	4b33      	ldr	r3, [pc, #204]	; (80053cc <__ieee754_pow+0xa24>)
 8005300:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8005304:	429f      	cmp	r7, r3
 8005306:	f77f af13 	ble.w	8005130 <__ieee754_pow+0x788>
 800530a:	4b31      	ldr	r3, [pc, #196]	; (80053d0 <__ieee754_pow+0xa28>)
 800530c:	440b      	add	r3, r1
 800530e:	4303      	orrs	r3, r0
 8005310:	d009      	beq.n	8005326 <__ieee754_pow+0x97e>
 8005312:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005316:	2200      	movs	r2, #0
 8005318:	2300      	movs	r3, #0
 800531a:	f7fb fb47 	bl	80009ac <__aeabi_dcmplt>
 800531e:	3800      	subs	r0, #0
 8005320:	bf18      	it	ne
 8005322:	2001      	movne	r0, #1
 8005324:	e453      	b.n	8004bce <__ieee754_pow+0x226>
 8005326:	4622      	mov	r2, r4
 8005328:	462b      	mov	r3, r5
 800532a:	f7fa ff15 	bl	8000158 <__aeabi_dsub>
 800532e:	4642      	mov	r2, r8
 8005330:	464b      	mov	r3, r9
 8005332:	f7fb fb4f 	bl	80009d4 <__aeabi_dcmpge>
 8005336:	2800      	cmp	r0, #0
 8005338:	f43f aefa 	beq.w	8005130 <__ieee754_pow+0x788>
 800533c:	e7e9      	b.n	8005312 <__ieee754_pow+0x96a>
 800533e:	f04f 0a00 	mov.w	sl, #0
 8005342:	e720      	b.n	8005186 <__ieee754_pow+0x7de>
 8005344:	4621      	mov	r1, r4
 8005346:	e7d6      	b.n	80052f6 <__ieee754_pow+0x94e>
 8005348:	f04f 0b00 	mov.w	fp, #0
 800534c:	f8df c078 	ldr.w	ip, [pc, #120]	; 80053c8 <__ieee754_pow+0xa20>
 8005350:	f7ff bbba 	b.w	8004ac8 <__ieee754_pow+0x120>
 8005354:	f04f 0b00 	mov.w	fp, #0
 8005358:	f04f 0c00 	mov.w	ip, #0
 800535c:	f7ff bbb4 	b.w	8004ac8 <__ieee754_pow+0x120>
 8005360:	4640      	mov	r0, r8
 8005362:	4649      	mov	r1, r9
 8005364:	f7ff bb3d 	b.w	80049e2 <__ieee754_pow+0x3a>
 8005368:	9200      	str	r2, [sp, #0]
 800536a:	f7ff bb89 	b.w	8004a80 <__ieee754_pow+0xd8>
 800536e:	2300      	movs	r3, #0
 8005370:	f7ff bb73 	b.w	8004a5a <__ieee754_pow+0xb2>
 8005374:	f3af 8000 	nop.w
 8005378:	652b82fe 	.word	0x652b82fe
 800537c:	3c971547 	.word	0x3c971547
 8005380:	00000000 	.word	0x00000000
 8005384:	3fe62e43 	.word	0x3fe62e43
 8005388:	fefa39ef 	.word	0xfefa39ef
 800538c:	3fe62e42 	.word	0x3fe62e42
 8005390:	0ca86c39 	.word	0x0ca86c39
 8005394:	be205c61 	.word	0xbe205c61
 8005398:	72bea4d0 	.word	0x72bea4d0
 800539c:	3e663769 	.word	0x3e663769
 80053a0:	c5d26bf1 	.word	0xc5d26bf1
 80053a4:	3ebbbd41 	.word	0x3ebbbd41
 80053a8:	af25de2c 	.word	0xaf25de2c
 80053ac:	3f11566a 	.word	0x3f11566a
 80053b0:	16bebd93 	.word	0x16bebd93
 80053b4:	3f66c16c 	.word	0x3f66c16c
 80053b8:	5555553e 	.word	0x5555553e
 80053bc:	3fc55555 	.word	0x3fc55555
 80053c0:	3fe00000 	.word	0x3fe00000
 80053c4:	000fffff 	.word	0x000fffff
 80053c8:	3ff00000 	.word	0x3ff00000
 80053cc:	4090cbff 	.word	0x4090cbff
 80053d0:	3f6f3400 	.word	0x3f6f3400

080053d4 <__ieee754_sqrt>:
 80053d4:	f8df c158 	ldr.w	ip, [pc, #344]	; 8005530 <__ieee754_sqrt+0x15c>
 80053d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053dc:	ea3c 0c01 	bics.w	ip, ip, r1
 80053e0:	4606      	mov	r6, r0
 80053e2:	460d      	mov	r5, r1
 80053e4:	460c      	mov	r4, r1
 80053e6:	460a      	mov	r2, r1
 80053e8:	4607      	mov	r7, r0
 80053ea:	4603      	mov	r3, r0
 80053ec:	d10f      	bne.n	800540e <__ieee754_sqrt+0x3a>
 80053ee:	4602      	mov	r2, r0
 80053f0:	460b      	mov	r3, r1
 80053f2:	f7fb f869 	bl	80004c8 <__aeabi_dmul>
 80053f6:	4602      	mov	r2, r0
 80053f8:	460b      	mov	r3, r1
 80053fa:	4630      	mov	r0, r6
 80053fc:	4629      	mov	r1, r5
 80053fe:	f7fa fead 	bl	800015c <__adddf3>
 8005402:	4606      	mov	r6, r0
 8005404:	460d      	mov	r5, r1
 8005406:	4630      	mov	r0, r6
 8005408:	4629      	mov	r1, r5
 800540a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800540e:	2900      	cmp	r1, #0
 8005410:	dc0e      	bgt.n	8005430 <__ieee754_sqrt+0x5c>
 8005412:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8005416:	ea5c 0707 	orrs.w	r7, ip, r7
 800541a:	d0f4      	beq.n	8005406 <__ieee754_sqrt+0x32>
 800541c:	b141      	cbz	r1, 8005430 <__ieee754_sqrt+0x5c>
 800541e:	4602      	mov	r2, r0
 8005420:	460b      	mov	r3, r1
 8005422:	f7fa fe99 	bl	8000158 <__aeabi_dsub>
 8005426:	4602      	mov	r2, r0
 8005428:	460b      	mov	r3, r1
 800542a:	f7fb f977 	bl	800071c <__aeabi_ddiv>
 800542e:	e7e8      	b.n	8005402 <__ieee754_sqrt+0x2e>
 8005430:	1521      	asrs	r1, r4, #20
 8005432:	d075      	beq.n	8005520 <__ieee754_sqrt+0x14c>
 8005434:	07cc      	lsls	r4, r1, #31
 8005436:	f04f 0400 	mov.w	r4, #0
 800543a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800543e:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 8005442:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005446:	bf5e      	ittt	pl
 8005448:	0fd9      	lsrpl	r1, r3, #31
 800544a:	005b      	lslpl	r3, r3, #1
 800544c:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8005450:	0fd9      	lsrs	r1, r3, #31
 8005452:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8005456:	2516      	movs	r5, #22
 8005458:	4620      	mov	r0, r4
 800545a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800545e:	107f      	asrs	r7, r7, #1
 8005460:	005b      	lsls	r3, r3, #1
 8005462:	1846      	adds	r6, r0, r1
 8005464:	4296      	cmp	r6, r2
 8005466:	bfde      	ittt	le
 8005468:	1b92      	suble	r2, r2, r6
 800546a:	1870      	addle	r0, r6, r1
 800546c:	1864      	addle	r4, r4, r1
 800546e:	0052      	lsls	r2, r2, #1
 8005470:	3d01      	subs	r5, #1
 8005472:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8005476:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800547a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800547e:	d1f0      	bne.n	8005462 <__ieee754_sqrt+0x8e>
 8005480:	4629      	mov	r1, r5
 8005482:	f04f 0e20 	mov.w	lr, #32
 8005486:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800548a:	4282      	cmp	r2, r0
 800548c:	eb06 0c05 	add.w	ip, r6, r5
 8005490:	dc02      	bgt.n	8005498 <__ieee754_sqrt+0xc4>
 8005492:	d113      	bne.n	80054bc <__ieee754_sqrt+0xe8>
 8005494:	459c      	cmp	ip, r3
 8005496:	d811      	bhi.n	80054bc <__ieee754_sqrt+0xe8>
 8005498:	f1bc 0f00 	cmp.w	ip, #0
 800549c:	eb0c 0506 	add.w	r5, ip, r6
 80054a0:	da43      	bge.n	800552a <__ieee754_sqrt+0x156>
 80054a2:	2d00      	cmp	r5, #0
 80054a4:	db41      	blt.n	800552a <__ieee754_sqrt+0x156>
 80054a6:	f100 0801 	add.w	r8, r0, #1
 80054aa:	1a12      	subs	r2, r2, r0
 80054ac:	4640      	mov	r0, r8
 80054ae:	459c      	cmp	ip, r3
 80054b0:	bf88      	it	hi
 80054b2:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80054b6:	eba3 030c 	sub.w	r3, r3, ip
 80054ba:	4431      	add	r1, r6
 80054bc:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80054c0:	f1be 0e01 	subs.w	lr, lr, #1
 80054c4:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 80054c8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80054cc:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80054d0:	d1db      	bne.n	800548a <__ieee754_sqrt+0xb6>
 80054d2:	4313      	orrs	r3, r2
 80054d4:	d006      	beq.n	80054e4 <__ieee754_sqrt+0x110>
 80054d6:	1c48      	adds	r0, r1, #1
 80054d8:	bf0b      	itete	eq
 80054da:	4671      	moveq	r1, lr
 80054dc:	3101      	addne	r1, #1
 80054de:	3401      	addeq	r4, #1
 80054e0:	f021 0101 	bicne.w	r1, r1, #1
 80054e4:	1063      	asrs	r3, r4, #1
 80054e6:	0849      	lsrs	r1, r1, #1
 80054e8:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80054ec:	07e2      	lsls	r2, r4, #31
 80054ee:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80054f2:	bf48      	it	mi
 80054f4:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80054f8:	460e      	mov	r6, r1
 80054fa:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80054fe:	e782      	b.n	8005406 <__ieee754_sqrt+0x32>
 8005500:	0ada      	lsrs	r2, r3, #11
 8005502:	3815      	subs	r0, #21
 8005504:	055b      	lsls	r3, r3, #21
 8005506:	2a00      	cmp	r2, #0
 8005508:	d0fa      	beq.n	8005500 <__ieee754_sqrt+0x12c>
 800550a:	02d5      	lsls	r5, r2, #11
 800550c:	d50a      	bpl.n	8005524 <__ieee754_sqrt+0x150>
 800550e:	f1c1 0420 	rsb	r4, r1, #32
 8005512:	fa23 f404 	lsr.w	r4, r3, r4
 8005516:	1e4d      	subs	r5, r1, #1
 8005518:	408b      	lsls	r3, r1
 800551a:	4322      	orrs	r2, r4
 800551c:	1b41      	subs	r1, r0, r5
 800551e:	e789      	b.n	8005434 <__ieee754_sqrt+0x60>
 8005520:	4608      	mov	r0, r1
 8005522:	e7f0      	b.n	8005506 <__ieee754_sqrt+0x132>
 8005524:	0052      	lsls	r2, r2, #1
 8005526:	3101      	adds	r1, #1
 8005528:	e7ef      	b.n	800550a <__ieee754_sqrt+0x136>
 800552a:	4680      	mov	r8, r0
 800552c:	e7bd      	b.n	80054aa <__ieee754_sqrt+0xd6>
 800552e:	bf00      	nop
 8005530:	7ff00000 	.word	0x7ff00000

08005534 <with_errno>:
 8005534:	b570      	push	{r4, r5, r6, lr}
 8005536:	4604      	mov	r4, r0
 8005538:	460d      	mov	r5, r1
 800553a:	4616      	mov	r6, r2
 800553c:	f000 f8ae 	bl	800569c <__errno>
 8005540:	4629      	mov	r1, r5
 8005542:	6006      	str	r6, [r0, #0]
 8005544:	4620      	mov	r0, r4
 8005546:	bd70      	pop	{r4, r5, r6, pc}

08005548 <xflow>:
 8005548:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800554a:	4615      	mov	r5, r2
 800554c:	461c      	mov	r4, r3
 800554e:	b180      	cbz	r0, 8005572 <xflow+0x2a>
 8005550:	4610      	mov	r0, r2
 8005552:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005556:	e9cd 0100 	strd	r0, r1, [sp]
 800555a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800555e:	4628      	mov	r0, r5
 8005560:	4621      	mov	r1, r4
 8005562:	f7fa ffb1 	bl	80004c8 <__aeabi_dmul>
 8005566:	2222      	movs	r2, #34	; 0x22
 8005568:	b003      	add	sp, #12
 800556a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800556e:	f7ff bfe1 	b.w	8005534 <with_errno>
 8005572:	4610      	mov	r0, r2
 8005574:	4619      	mov	r1, r3
 8005576:	e7ee      	b.n	8005556 <xflow+0xe>

08005578 <__math_uflow>:
 8005578:	2200      	movs	r2, #0
 800557a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800557e:	f7ff bfe3 	b.w	8005548 <xflow>

08005582 <__math_oflow>:
 8005582:	2200      	movs	r2, #0
 8005584:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005588:	f7ff bfde 	b.w	8005548 <xflow>

0800558c <fabs>:
 800558c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005590:	4770      	bx	lr

08005592 <finite>:
 8005592:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8005596:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800559a:	0fc0      	lsrs	r0, r0, #31
 800559c:	4770      	bx	lr
	...

080055a0 <scalbn>:
 80055a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055a2:	f3c1 560a 	ubfx	r6, r1, #20, #11
 80055a6:	4604      	mov	r4, r0
 80055a8:	460d      	mov	r5, r1
 80055aa:	4617      	mov	r7, r2
 80055ac:	460b      	mov	r3, r1
 80055ae:	b996      	cbnz	r6, 80055d6 <scalbn+0x36>
 80055b0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80055b4:	4303      	orrs	r3, r0
 80055b6:	d039      	beq.n	800562c <scalbn+0x8c>
 80055b8:	4b33      	ldr	r3, [pc, #204]	; (8005688 <scalbn+0xe8>)
 80055ba:	2200      	movs	r2, #0
 80055bc:	f7fa ff84 	bl	80004c8 <__aeabi_dmul>
 80055c0:	4b32      	ldr	r3, [pc, #200]	; (800568c <scalbn+0xec>)
 80055c2:	4604      	mov	r4, r0
 80055c4:	429f      	cmp	r7, r3
 80055c6:	460d      	mov	r5, r1
 80055c8:	da0f      	bge.n	80055ea <scalbn+0x4a>
 80055ca:	a32b      	add	r3, pc, #172	; (adr r3, 8005678 <scalbn+0xd8>)
 80055cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d0:	f7fa ff7a 	bl	80004c8 <__aeabi_dmul>
 80055d4:	e006      	b.n	80055e4 <scalbn+0x44>
 80055d6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80055da:	4296      	cmp	r6, r2
 80055dc:	d10a      	bne.n	80055f4 <scalbn+0x54>
 80055de:	4602      	mov	r2, r0
 80055e0:	f7fa fdbc 	bl	800015c <__adddf3>
 80055e4:	4604      	mov	r4, r0
 80055e6:	460d      	mov	r5, r1
 80055e8:	e020      	b.n	800562c <scalbn+0x8c>
 80055ea:	460b      	mov	r3, r1
 80055ec:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80055f0:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 80055f4:	f240 72fe 	movw	r2, #2046	; 0x7fe
 80055f8:	19b9      	adds	r1, r7, r6
 80055fa:	4291      	cmp	r1, r2
 80055fc:	dd0e      	ble.n	800561c <scalbn+0x7c>
 80055fe:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8005602:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8005606:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800560a:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800560e:	4820      	ldr	r0, [pc, #128]	; (8005690 <scalbn+0xf0>)
 8005610:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8005614:	a31a      	add	r3, pc, #104	; (adr r3, 8005680 <scalbn+0xe0>)
 8005616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800561a:	e7d9      	b.n	80055d0 <scalbn+0x30>
 800561c:	2900      	cmp	r1, #0
 800561e:	dd08      	ble.n	8005632 <scalbn+0x92>
 8005620:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005624:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005628:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800562c:	4620      	mov	r0, r4
 800562e:	4629      	mov	r1, r5
 8005630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005632:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8005636:	da12      	bge.n	800565e <scalbn+0xbe>
 8005638:	f24c 3350 	movw	r3, #50000	; 0xc350
 800563c:	429f      	cmp	r7, r3
 800563e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8005642:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 8005646:	dcdc      	bgt.n	8005602 <scalbn+0x62>
 8005648:	a30b      	add	r3, pc, #44	; (adr r3, 8005678 <scalbn+0xd8>)
 800564a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800564e:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8005652:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8005656:	480f      	ldr	r0, [pc, #60]	; (8005694 <scalbn+0xf4>)
 8005658:	f041 011f 	orr.w	r1, r1, #31
 800565c:	e7b8      	b.n	80055d0 <scalbn+0x30>
 800565e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005662:	3136      	adds	r1, #54	; 0x36
 8005664:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005668:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800566c:	4620      	mov	r0, r4
 800566e:	4629      	mov	r1, r5
 8005670:	2200      	movs	r2, #0
 8005672:	4b09      	ldr	r3, [pc, #36]	; (8005698 <scalbn+0xf8>)
 8005674:	e7ac      	b.n	80055d0 <scalbn+0x30>
 8005676:	bf00      	nop
 8005678:	c2f8f359 	.word	0xc2f8f359
 800567c:	01a56e1f 	.word	0x01a56e1f
 8005680:	8800759c 	.word	0x8800759c
 8005684:	7e37e43c 	.word	0x7e37e43c
 8005688:	43500000 	.word	0x43500000
 800568c:	ffff3cb0 	.word	0xffff3cb0
 8005690:	8800759c 	.word	0x8800759c
 8005694:	c2f8f359 	.word	0xc2f8f359
 8005698:	3c900000 	.word	0x3c900000

0800569c <__errno>:
 800569c:	4b01      	ldr	r3, [pc, #4]	; (80056a4 <__errno+0x8>)
 800569e:	6818      	ldr	r0, [r3, #0]
 80056a0:	4770      	bx	lr
 80056a2:	bf00      	nop
 80056a4:	2000000c 	.word	0x2000000c

080056a8 <__libc_init_array>:
 80056a8:	b570      	push	{r4, r5, r6, lr}
 80056aa:	2600      	movs	r6, #0
 80056ac:	4d0c      	ldr	r5, [pc, #48]	; (80056e0 <__libc_init_array+0x38>)
 80056ae:	4c0d      	ldr	r4, [pc, #52]	; (80056e4 <__libc_init_array+0x3c>)
 80056b0:	1b64      	subs	r4, r4, r5
 80056b2:	10a4      	asrs	r4, r4, #2
 80056b4:	42a6      	cmp	r6, r4
 80056b6:	d109      	bne.n	80056cc <__libc_init_array+0x24>
 80056b8:	f000 f822 	bl	8005700 <_init>
 80056bc:	2600      	movs	r6, #0
 80056be:	4d0a      	ldr	r5, [pc, #40]	; (80056e8 <__libc_init_array+0x40>)
 80056c0:	4c0a      	ldr	r4, [pc, #40]	; (80056ec <__libc_init_array+0x44>)
 80056c2:	1b64      	subs	r4, r4, r5
 80056c4:	10a4      	asrs	r4, r4, #2
 80056c6:	42a6      	cmp	r6, r4
 80056c8:	d105      	bne.n	80056d6 <__libc_init_array+0x2e>
 80056ca:	bd70      	pop	{r4, r5, r6, pc}
 80056cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80056d0:	4798      	blx	r3
 80056d2:	3601      	adds	r6, #1
 80056d4:	e7ee      	b.n	80056b4 <__libc_init_array+0xc>
 80056d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80056da:	4798      	blx	r3
 80056dc:	3601      	adds	r6, #1
 80056de:	e7f2      	b.n	80056c6 <__libc_init_array+0x1e>
 80056e0:	08005770 	.word	0x08005770
 80056e4:	08005770 	.word	0x08005770
 80056e8:	08005770 	.word	0x08005770
 80056ec:	08005774 	.word	0x08005774

080056f0 <memset>:
 80056f0:	4603      	mov	r3, r0
 80056f2:	4402      	add	r2, r0
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d100      	bne.n	80056fa <memset+0xa>
 80056f8:	4770      	bx	lr
 80056fa:	f803 1b01 	strb.w	r1, [r3], #1
 80056fe:	e7f9      	b.n	80056f4 <memset+0x4>

08005700 <_init>:
 8005700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005702:	bf00      	nop
 8005704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005706:	bc08      	pop	{r3}
 8005708:	469e      	mov	lr, r3
 800570a:	4770      	bx	lr

0800570c <_fini>:
 800570c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800570e:	bf00      	nop
 8005710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005712:	bc08      	pop	{r3}
 8005714:	469e      	mov	lr, r3
 8005716:	4770      	bx	lr
