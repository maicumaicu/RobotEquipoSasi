
RobotAlgoritmoSasi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079e0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08007af0  08007af0  00017af0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b48  08007b48  000200ac  2**0
                  CONTENTS
  4 .ARM          00000000  08007b48  08007b48  000200ac  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007b48  08007b48  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b48  08007b48  00017b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b4c  08007b4c  00017b4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  08007b50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002b60  200000ac  08007bfc  000200ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002c0c  08007bfc  00022c0c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dcca  00000000  00000000  000200d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027f0  00000000  00000000  0002dd9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed8  00000000  00000000  00030590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000db0  00000000  00000000  00031468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000197c4  00000000  00000000  00032218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011831  00000000  00000000  0004b9dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090bac  00000000  00000000  0005d20d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eddb9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004210  00000000  00000000  000ede0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000ac 	.word	0x200000ac
 800012c:	00000000 	.word	0x00000000
 8000130:	08007ad8 	.word	0x08007ad8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000b0 	.word	0x200000b0
 800014c:	08007ad8 	.word	0x08007ad8

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2f>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a30:	bf24      	itt	cs
 8000a32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a3a:	d90d      	bls.n	8000a58 <__aeabi_d2f+0x30>
 8000a3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a50:	bf08      	it	eq
 8000a52:	f020 0001 	biceq.w	r0, r0, #1
 8000a56:	4770      	bx	lr
 8000a58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a5c:	d121      	bne.n	8000aa2 <__aeabi_d2f+0x7a>
 8000a5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a62:	bfbc      	itt	lt
 8000a64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	4770      	bxlt	lr
 8000a6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a72:	f1c2 0218 	rsb	r2, r2, #24
 8000a76:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a82:	bf18      	it	ne
 8000a84:	f040 0001 	orrne.w	r0, r0, #1
 8000a88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a94:	ea40 000c 	orr.w	r0, r0, ip
 8000a98:	fa23 f302 	lsr.w	r3, r3, r2
 8000a9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa0:	e7cc      	b.n	8000a3c <__aeabi_d2f+0x14>
 8000aa2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aa6:	d107      	bne.n	8000ab8 <__aeabi_d2f+0x90>
 8000aa8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aac:	bf1e      	ittt	ne
 8000aae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ab2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ab6:	4770      	bxne	lr
 8000ab8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	; 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	3a01      	subs	r2, #1
 8000b82:	bf28      	it	cs
 8000b84:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b88:	d2ed      	bcs.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d36:	2afd      	cmp	r2, #253	; 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	; 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	; 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	; 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <__gesf2>:
 8000f84:	f04f 3cff 	mov.w	ip, #4294967295
 8000f88:	e006      	b.n	8000f98 <__cmpsf2+0x4>
 8000f8a:	bf00      	nop

08000f8c <__lesf2>:
 8000f8c:	f04f 0c01 	mov.w	ip, #1
 8000f90:	e002      	b.n	8000f98 <__cmpsf2+0x4>
 8000f92:	bf00      	nop

08000f94 <__cmpsf2>:
 8000f94:	f04f 0c01 	mov.w	ip, #1
 8000f98:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f9c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fa0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fa4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fa8:	bf18      	it	ne
 8000faa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fae:	d011      	beq.n	8000fd4 <__cmpsf2+0x40>
 8000fb0:	b001      	add	sp, #4
 8000fb2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fb6:	bf18      	it	ne
 8000fb8:	ea90 0f01 	teqne	r0, r1
 8000fbc:	bf58      	it	pl
 8000fbe:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fc2:	bf88      	it	hi
 8000fc4:	17c8      	asrhi	r0, r1, #31
 8000fc6:	bf38      	it	cc
 8000fc8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fcc:	bf18      	it	ne
 8000fce:	f040 0001 	orrne.w	r0, r0, #1
 8000fd2:	4770      	bx	lr
 8000fd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fd8:	d102      	bne.n	8000fe0 <__cmpsf2+0x4c>
 8000fda:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fde:	d105      	bne.n	8000fec <__cmpsf2+0x58>
 8000fe0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fe4:	d1e4      	bne.n	8000fb0 <__cmpsf2+0x1c>
 8000fe6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fea:	d0e1      	beq.n	8000fb0 <__cmpsf2+0x1c>
 8000fec:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_cfrcmple>:
 8000ff4:	4684      	mov	ip, r0
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	4661      	mov	r1, ip
 8000ffa:	e7ff      	b.n	8000ffc <__aeabi_cfcmpeq>

08000ffc <__aeabi_cfcmpeq>:
 8000ffc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ffe:	f7ff ffc9 	bl	8000f94 <__cmpsf2>
 8001002:	2800      	cmp	r0, #0
 8001004:	bf48      	it	mi
 8001006:	f110 0f00 	cmnmi.w	r0, #0
 800100a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800100c <__aeabi_fcmpeq>:
 800100c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001010:	f7ff fff4 	bl	8000ffc <__aeabi_cfcmpeq>
 8001014:	bf0c      	ite	eq
 8001016:	2001      	moveq	r0, #1
 8001018:	2000      	movne	r0, #0
 800101a:	f85d fb08 	ldr.w	pc, [sp], #8
 800101e:	bf00      	nop

08001020 <__aeabi_fcmplt>:
 8001020:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001024:	f7ff ffea 	bl	8000ffc <__aeabi_cfcmpeq>
 8001028:	bf34      	ite	cc
 800102a:	2001      	movcc	r0, #1
 800102c:	2000      	movcs	r0, #0
 800102e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001032:	bf00      	nop

08001034 <__aeabi_fcmple>:
 8001034:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001038:	f7ff ffe0 	bl	8000ffc <__aeabi_cfcmpeq>
 800103c:	bf94      	ite	ls
 800103e:	2001      	movls	r0, #1
 8001040:	2000      	movhi	r0, #0
 8001042:	f85d fb08 	ldr.w	pc, [sp], #8
 8001046:	bf00      	nop

08001048 <__aeabi_fcmpge>:
 8001048:	f84d ed08 	str.w	lr, [sp, #-8]!
 800104c:	f7ff ffd2 	bl	8000ff4 <__aeabi_cfrcmple>
 8001050:	bf94      	ite	ls
 8001052:	2001      	movls	r0, #1
 8001054:	2000      	movhi	r0, #0
 8001056:	f85d fb08 	ldr.w	pc, [sp], #8
 800105a:	bf00      	nop

0800105c <__aeabi_fcmpgt>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff ffc8 	bl	8000ff4 <__aeabi_cfrcmple>
 8001064:	bf34      	ite	cc
 8001066:	2001      	movcc	r0, #1
 8001068:	2000      	movcs	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_f2iz>:
 8001070:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001074:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001078:	d30f      	bcc.n	800109a <__aeabi_f2iz+0x2a>
 800107a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800107e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001082:	d90d      	bls.n	80010a0 <__aeabi_f2iz+0x30>
 8001084:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001088:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800108c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001090:	fa23 f002 	lsr.w	r0, r3, r2
 8001094:	bf18      	it	ne
 8001096:	4240      	negne	r0, r0
 8001098:	4770      	bx	lr
 800109a:	f04f 0000 	mov.w	r0, #0
 800109e:	4770      	bx	lr
 80010a0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010a4:	d101      	bne.n	80010aa <__aeabi_f2iz+0x3a>
 80010a6:	0242      	lsls	r2, r0, #9
 80010a8:	d105      	bne.n	80010b6 <__aeabi_f2iz+0x46>
 80010aa:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010ae:	bf08      	it	eq
 80010b0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80010b4:	4770      	bx	lr
 80010b6:	f04f 0000 	mov.w	r0, #0
 80010ba:	4770      	bx	lr

080010bc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010c2:	1d3b      	adds	r3, r7, #4
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80010cc:	4b2e      	ldr	r3, [pc, #184]	; (8001188 <MX_ADC1_Init+0xcc>)
 80010ce:	4a2f      	ldr	r2, [pc, #188]	; (800118c <MX_ADC1_Init+0xd0>)
 80010d0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80010d2:	4b2d      	ldr	r3, [pc, #180]	; (8001188 <MX_ADC1_Init+0xcc>)
 80010d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010d8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80010da:	4b2b      	ldr	r3, [pc, #172]	; (8001188 <MX_ADC1_Init+0xcc>)
 80010dc:	2201      	movs	r2, #1
 80010de:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010e0:	4b29      	ldr	r3, [pc, #164]	; (8001188 <MX_ADC1_Init+0xcc>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010e6:	4b28      	ldr	r3, [pc, #160]	; (8001188 <MX_ADC1_Init+0xcc>)
 80010e8:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80010ec:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010ee:	4b26      	ldr	r3, [pc, #152]	; (8001188 <MX_ADC1_Init+0xcc>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 80010f4:	4b24      	ldr	r3, [pc, #144]	; (8001188 <MX_ADC1_Init+0xcc>)
 80010f6:	2204      	movs	r2, #4
 80010f8:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010fa:	4823      	ldr	r0, [pc, #140]	; (8001188 <MX_ADC1_Init+0xcc>)
 80010fc:	f002 fdc2 	bl	8003c84 <HAL_ADC_Init>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001106:	f002 f8a5 	bl	8003254 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800110a:	2300      	movs	r3, #0
 800110c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800110e:	2301      	movs	r3, #1
 8001110:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8001112:	2303      	movs	r3, #3
 8001114:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001116:	1d3b      	adds	r3, r7, #4
 8001118:	4619      	mov	r1, r3
 800111a:	481b      	ldr	r0, [pc, #108]	; (8001188 <MX_ADC1_Init+0xcc>)
 800111c:	f002 ff7a 	bl	8004014 <HAL_ADC_ConfigChannel>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001126:	f002 f895 	bl	8003254 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800112a:	2301      	movs	r3, #1
 800112c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800112e:	2302      	movs	r3, #2
 8001130:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001132:	1d3b      	adds	r3, r7, #4
 8001134:	4619      	mov	r1, r3
 8001136:	4814      	ldr	r0, [pc, #80]	; (8001188 <MX_ADC1_Init+0xcc>)
 8001138:	f002 ff6c 	bl	8004014 <HAL_ADC_ConfigChannel>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001142:	f002 f887 	bl	8003254 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001146:	2302      	movs	r3, #2
 8001148:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800114a:	2303      	movs	r3, #3
 800114c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800114e:	1d3b      	adds	r3, r7, #4
 8001150:	4619      	mov	r1, r3
 8001152:	480d      	ldr	r0, [pc, #52]	; (8001188 <MX_ADC1_Init+0xcc>)
 8001154:	f002 ff5e 	bl	8004014 <HAL_ADC_ConfigChannel>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800115e:	f002 f879 	bl	8003254 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001162:	2303      	movs	r3, #3
 8001164:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001166:	2304      	movs	r3, #4
 8001168:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800116a:	1d3b      	adds	r3, r7, #4
 800116c:	4619      	mov	r1, r3
 800116e:	4806      	ldr	r0, [pc, #24]	; (8001188 <MX_ADC1_Init+0xcc>)
 8001170:	f002 ff50 	bl	8004014 <HAL_ADC_ConfigChannel>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 800117a:	f002 f86b 	bl	8003254 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800117e:	bf00      	nop
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	200000c8 	.word	0x200000c8
 800118c:	40012400 	.word	0x40012400

08001190 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b088      	sub	sp, #32
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001198:	f107 0310 	add.w	r3, r7, #16
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a28      	ldr	r2, [pc, #160]	; (800124c <HAL_ADC_MspInit+0xbc>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d149      	bne.n	8001244 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011b0:	4b27      	ldr	r3, [pc, #156]	; (8001250 <HAL_ADC_MspInit+0xc0>)
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	4a26      	ldr	r2, [pc, #152]	; (8001250 <HAL_ADC_MspInit+0xc0>)
 80011b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011ba:	6193      	str	r3, [r2, #24]
 80011bc:	4b24      	ldr	r3, [pc, #144]	; (8001250 <HAL_ADC_MspInit+0xc0>)
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c8:	4b21      	ldr	r3, [pc, #132]	; (8001250 <HAL_ADC_MspInit+0xc0>)
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	4a20      	ldr	r2, [pc, #128]	; (8001250 <HAL_ADC_MspInit+0xc0>)
 80011ce:	f043 0304 	orr.w	r3, r3, #4
 80011d2:	6193      	str	r3, [r2, #24]
 80011d4:	4b1e      	ldr	r3, [pc, #120]	; (8001250 <HAL_ADC_MspInit+0xc0>)
 80011d6:	699b      	ldr	r3, [r3, #24]
 80011d8:	f003 0304 	and.w	r3, r3, #4
 80011dc:	60bb      	str	r3, [r7, #8]
 80011de:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = CNY70_Pin|SHARP_D_Pin|SHARP_C_Pin|SHARP_I_Pin;
 80011e0:	230f      	movs	r3, #15
 80011e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011e4:	2303      	movs	r3, #3
 80011e6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e8:	f107 0310 	add.w	r3, r7, #16
 80011ec:	4619      	mov	r1, r3
 80011ee:	4819      	ldr	r0, [pc, #100]	; (8001254 <HAL_ADC_MspInit+0xc4>)
 80011f0:	f003 fcb6 	bl	8004b60 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80011f4:	4b18      	ldr	r3, [pc, #96]	; (8001258 <HAL_ADC_MspInit+0xc8>)
 80011f6:	4a19      	ldr	r2, [pc, #100]	; (800125c <HAL_ADC_MspInit+0xcc>)
 80011f8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011fa:	4b17      	ldr	r3, [pc, #92]	; (8001258 <HAL_ADC_MspInit+0xc8>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001200:	4b15      	ldr	r3, [pc, #84]	; (8001258 <HAL_ADC_MspInit+0xc8>)
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001206:	4b14      	ldr	r3, [pc, #80]	; (8001258 <HAL_ADC_MspInit+0xc8>)
 8001208:	2280      	movs	r2, #128	; 0x80
 800120a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800120c:	4b12      	ldr	r3, [pc, #72]	; (8001258 <HAL_ADC_MspInit+0xc8>)
 800120e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001212:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001214:	4b10      	ldr	r3, [pc, #64]	; (8001258 <HAL_ADC_MspInit+0xc8>)
 8001216:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800121a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800121c:	4b0e      	ldr	r3, [pc, #56]	; (8001258 <HAL_ADC_MspInit+0xc8>)
 800121e:	2220      	movs	r2, #32
 8001220:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001222:	4b0d      	ldr	r3, [pc, #52]	; (8001258 <HAL_ADC_MspInit+0xc8>)
 8001224:	2200      	movs	r2, #0
 8001226:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001228:	480b      	ldr	r0, [pc, #44]	; (8001258 <HAL_ADC_MspInit+0xc8>)
 800122a:	f003 f9fb 	bl	8004624 <HAL_DMA_Init>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001234:	f002 f80e 	bl	8003254 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	4a07      	ldr	r2, [pc, #28]	; (8001258 <HAL_ADC_MspInit+0xc8>)
 800123c:	621a      	str	r2, [r3, #32]
 800123e:	4a06      	ldr	r2, [pc, #24]	; (8001258 <HAL_ADC_MspInit+0xc8>)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001244:	bf00      	nop
 8001246:	3720      	adds	r7, #32
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	40012400 	.word	0x40012400
 8001250:	40021000 	.word	0x40021000
 8001254:	40010800 	.word	0x40010800
 8001258:	200000f8 	.word	0x200000f8
 800125c:	40020008 	.word	0x40020008

08001260 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001266:	4b0c      	ldr	r3, [pc, #48]	; (8001298 <MX_DMA_Init+0x38>)
 8001268:	695b      	ldr	r3, [r3, #20]
 800126a:	4a0b      	ldr	r2, [pc, #44]	; (8001298 <MX_DMA_Init+0x38>)
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	6153      	str	r3, [r2, #20]
 8001272:	4b09      	ldr	r3, [pc, #36]	; (8001298 <MX_DMA_Init+0x38>)
 8001274:	695b      	ldr	r3, [r3, #20]
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	607b      	str	r3, [r7, #4]
 800127c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800127e:	2200      	movs	r2, #0
 8001280:	2100      	movs	r1, #0
 8001282:	200b      	movs	r0, #11
 8001284:	f003 f997 	bl	80045b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001288:	200b      	movs	r0, #11
 800128a:	f003 f9b0 	bl	80045ee <HAL_NVIC_EnableIRQ>

}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40021000 	.word	0x40021000

0800129c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b088      	sub	sp, #32
 80012a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a2:	f107 0310 	add.w	r3, r7, #16
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	605a      	str	r2, [r3, #4]
 80012ac:	609a      	str	r2, [r3, #8]
 80012ae:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012b0:	4b3f      	ldr	r3, [pc, #252]	; (80013b0 <MX_GPIO_Init+0x114>)
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	4a3e      	ldr	r2, [pc, #248]	; (80013b0 <MX_GPIO_Init+0x114>)
 80012b6:	f043 0310 	orr.w	r3, r3, #16
 80012ba:	6193      	str	r3, [r2, #24]
 80012bc:	4b3c      	ldr	r3, [pc, #240]	; (80013b0 <MX_GPIO_Init+0x114>)
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	f003 0310 	and.w	r3, r3, #16
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012c8:	4b39      	ldr	r3, [pc, #228]	; (80013b0 <MX_GPIO_Init+0x114>)
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	4a38      	ldr	r2, [pc, #224]	; (80013b0 <MX_GPIO_Init+0x114>)
 80012ce:	f043 0320 	orr.w	r3, r3, #32
 80012d2:	6193      	str	r3, [r2, #24]
 80012d4:	4b36      	ldr	r3, [pc, #216]	; (80013b0 <MX_GPIO_Init+0x114>)
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	f003 0320 	and.w	r3, r3, #32
 80012dc:	60bb      	str	r3, [r7, #8]
 80012de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e0:	4b33      	ldr	r3, [pc, #204]	; (80013b0 <MX_GPIO_Init+0x114>)
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	4a32      	ldr	r2, [pc, #200]	; (80013b0 <MX_GPIO_Init+0x114>)
 80012e6:	f043 0304 	orr.w	r3, r3, #4
 80012ea:	6193      	str	r3, [r2, #24]
 80012ec:	4b30      	ldr	r3, [pc, #192]	; (80013b0 <MX_GPIO_Init+0x114>)
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	f003 0304 	and.w	r3, r3, #4
 80012f4:	607b      	str	r3, [r7, #4]
 80012f6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f8:	4b2d      	ldr	r3, [pc, #180]	; (80013b0 <MX_GPIO_Init+0x114>)
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	4a2c      	ldr	r2, [pc, #176]	; (80013b0 <MX_GPIO_Init+0x114>)
 80012fe:	f043 0308 	orr.w	r3, r3, #8
 8001302:	6193      	str	r3, [r2, #24]
 8001304:	4b2a      	ldr	r3, [pc, #168]	; (80013b0 <MX_GPIO_Init+0x114>)
 8001306:	699b      	ldr	r3, [r3, #24]
 8001308:	f003 0308 	and.w	r3, r3, #8
 800130c:	603b      	str	r3, [r7, #0]
 800130e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001310:	2200      	movs	r2, #0
 8001312:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001316:	4827      	ldr	r0, [pc, #156]	; (80013b4 <MX_GPIO_Init+0x118>)
 8001318:	f003 fdbd 	bl	8004e96 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|AIN1_Pin|AIN2_Pin, GPIO_PIN_RESET);
 800131c:	2200      	movs	r2, #0
 800131e:	f248 0118 	movw	r1, #32792	; 0x8018
 8001322:	4825      	ldr	r0, [pc, #148]	; (80013b8 <MX_GPIO_Init+0x11c>)
 8001324:	f003 fdb7 	bl	8004e96 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BIN2_Pin|BIN1_Pin|STBY_Pin, GPIO_PIN_RESET);
 8001328:	2200      	movs	r2, #0
 800132a:	f44f 4118 	mov.w	r1, #38912	; 0x9800
 800132e:	4823      	ldr	r0, [pc, #140]	; (80013bc <MX_GPIO_Init+0x120>)
 8001330:	f003 fdb1 	bl	8004e96 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001334:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001338:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133a:	2301      	movs	r3, #1
 800133c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	2300      	movs	r3, #0
 8001340:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001342:	2302      	movs	r3, #2
 8001344:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001346:	f107 0310 	add.w	r3, r7, #16
 800134a:	4619      	mov	r1, r3
 800134c:	4819      	ldr	r0, [pc, #100]	; (80013b4 <MX_GPIO_Init+0x118>)
 800134e:	f003 fc07 	bl	8004b60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin|BTN3_Pin;
 8001352:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001356:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001358:	2300      	movs	r3, #0
 800135a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001360:	f107 0310 	add.w	r3, r7, #16
 8001364:	4619      	mov	r1, r3
 8001366:	4814      	ldr	r0, [pc, #80]	; (80013b8 <MX_GPIO_Init+0x11c>)
 8001368:	f003 fbfa 	bl	8004b60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_Pin|AIN1_Pin|AIN2_Pin;
 800136c:	f248 0318 	movw	r3, #32792	; 0x8018
 8001370:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001372:	2301      	movs	r3, #1
 8001374:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137a:	2302      	movs	r3, #2
 800137c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800137e:	f107 0310 	add.w	r3, r7, #16
 8001382:	4619      	mov	r1, r3
 8001384:	480c      	ldr	r0, [pc, #48]	; (80013b8 <MX_GPIO_Init+0x11c>)
 8001386:	f003 fbeb 	bl	8004b60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = BIN2_Pin|BIN1_Pin|STBY_Pin;
 800138a:	f44f 4318 	mov.w	r3, #38912	; 0x9800
 800138e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001390:	2301      	movs	r3, #1
 8001392:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001398:	2302      	movs	r3, #2
 800139a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139c:	f107 0310 	add.w	r3, r7, #16
 80013a0:	4619      	mov	r1, r3
 80013a2:	4806      	ldr	r0, [pc, #24]	; (80013bc <MX_GPIO_Init+0x120>)
 80013a4:	f003 fbdc 	bl	8004b60 <HAL_GPIO_Init>

}
 80013a8:	bf00      	nop
 80013aa:	3720      	adds	r7, #32
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	40021000 	.word	0x40021000
 80013b4:	40011000 	.word	0x40011000
 80013b8:	40010c00 	.word	0x40010c00
 80013bc:	40010800 	.word	0x40010800

080013c0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80013c4:	f002 fbd8 	bl	8003b78 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80013c8:	f000 f88a 	bl	80014e0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80013cc:	f7ff ff66 	bl	800129c <MX_GPIO_Init>
	MX_DMA_Init();
 80013d0:	f7ff ff46 	bl	8001260 <MX_DMA_Init>
	MX_TIM4_Init();
 80013d4:	f002 f9fe 	bl	80037d4 <MX_TIM4_Init>
	MX_TIM3_Init();
 80013d8:	f002 f9a8 	bl	800372c <MX_TIM3_Init>
	MX_ADC1_Init();
 80013dc:	f7ff fe6e 	bl	80010bc <MX_ADC1_Init>
	MX_USART1_UART_Init();
 80013e0:	f002 fb26 	bl	8003a30 <MX_USART1_UART_Init>
	MX_TIM2_Init();
 80013e4:	f002 f93e 	bl	8003664 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	btns[0].Port = BTN1_GPIO_Port;
 80013e8:	4b32      	ldr	r3, [pc, #200]	; (80014b4 <main+0xf4>)
 80013ea:	4a33      	ldr	r2, [pc, #204]	; (80014b8 <main+0xf8>)
 80013ec:	601a      	str	r2, [r3, #0]
	btns[0].pin = BTN1_Pin;
 80013ee:	4b31      	ldr	r3, [pc, #196]	; (80014b4 <main+0xf4>)
 80013f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013f4:	809a      	strh	r2, [r3, #4]
	btns[0].estado = ESPERA;
 80013f6:	4b2f      	ldr	r3, [pc, #188]	; (80014b4 <main+0xf4>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	609a      	str	r2, [r3, #8]
	btns[0].flag = 0;
 80013fc:	4b2d      	ldr	r3, [pc, #180]	; (80014b4 <main+0xf4>)
 80013fe:	2200      	movs	r2, #0
 8001400:	60da      	str	r2, [r3, #12]
	btns[1].Port = BTN2_GPIO_Port;
 8001402:	4b2c      	ldr	r3, [pc, #176]	; (80014b4 <main+0xf4>)
 8001404:	4a2c      	ldr	r2, [pc, #176]	; (80014b8 <main+0xf8>)
 8001406:	611a      	str	r2, [r3, #16]
	btns[1].pin = BTN2_Pin;
 8001408:	4b2a      	ldr	r3, [pc, #168]	; (80014b4 <main+0xf4>)
 800140a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800140e:	829a      	strh	r2, [r3, #20]
	btns[1].estado = ESPERA;
 8001410:	4b28      	ldr	r3, [pc, #160]	; (80014b4 <main+0xf4>)
 8001412:	2200      	movs	r2, #0
 8001414:	619a      	str	r2, [r3, #24]
	btns[1].flag = 0;
 8001416:	4b27      	ldr	r3, [pc, #156]	; (80014b4 <main+0xf4>)
 8001418:	2200      	movs	r2, #0
 800141a:	61da      	str	r2, [r3, #28]
	btns[2].Port = BTN3_GPIO_Port;
 800141c:	4b25      	ldr	r3, [pc, #148]	; (80014b4 <main+0xf4>)
 800141e:	4a26      	ldr	r2, [pc, #152]	; (80014b8 <main+0xf8>)
 8001420:	621a      	str	r2, [r3, #32]
	btns[2].pin = BTN3_Pin;
 8001422:	4b24      	ldr	r3, [pc, #144]	; (80014b4 <main+0xf4>)
 8001424:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001428:	849a      	strh	r2, [r3, #36]	; 0x24
	btns[2].estado = ESPERA;
 800142a:	4b22      	ldr	r3, [pc, #136]	; (80014b4 <main+0xf4>)
 800142c:	2200      	movs	r2, #0
 800142e:	629a      	str	r2, [r3, #40]	; 0x28
	btns[2].flag = 0;
 8001430:	4b20      	ldr	r3, [pc, #128]	; (80014b4 <main+0xf4>)
 8001432:	2200      	movs	r2, #0
 8001434:	62da      	str	r2, [r3, #44]	; 0x2c
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001436:	2108      	movs	r1, #8
 8001438:	4820      	ldr	r0, [pc, #128]	; (80014bc <main+0xfc>)
 800143a:	f004 fa65 	bl	8005908 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800143e:	210c      	movs	r1, #12
 8001440:	481e      	ldr	r0, [pc, #120]	; (80014bc <main+0xfc>)
 8001442:	f004 fa61 	bl	8005908 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001446:	213c      	movs	r1, #60	; 0x3c
 8001448:	481d      	ldr	r0, [pc, #116]	; (80014c0 <main+0x100>)
 800144a:	f004 fba1 	bl	8005b90 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800144e:	213c      	movs	r1, #60	; 0x3c
 8001450:	481c      	ldr	r0, [pc, #112]	; (80014c4 <main+0x104>)
 8001452:	f004 fb9d 	bl	8005b90 <HAL_TIM_Encoder_Start>
	HAL_GPIO_WritePin(STBY, GPIO_PIN_SET);
 8001456:	2201      	movs	r2, #1
 8001458:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800145c:	481a      	ldr	r0, [pc, #104]	; (80014c8 <main+0x108>)
 800145e:	f003 fd1a 	bl	8004e96 <HAL_GPIO_WritePin>
	TIM2->CCR3 = 15000;
 8001462:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001466:	f643 2298 	movw	r2, #15000	; 0x3a98
 800146a:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM2->CCR4 = 15000;
 800146c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001470:	f643 2298 	movw	r2, #15000	; 0x3a98
 8001474:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_buf, ADC_BUF_LEN);
 8001476:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800147a:	4914      	ldr	r1, [pc, #80]	; (80014cc <main+0x10c>)
 800147c:	4814      	ldr	r0, [pc, #80]	; (80014d0 <main+0x110>)
 800147e:	f002 fcd9 	bl	8003e34 <HAL_ADC_Start_DMA>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8001482:	2200      	movs	r2, #0
 8001484:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001488:	4812      	ldr	r0, [pc, #72]	; (80014d4 <main+0x114>)
 800148a:	f003 fd04 	bl	8004e96 <HAL_GPIO_WritePin>
	TIM3->CNT = 0;
 800148e:	4b12      	ldr	r3, [pc, #72]	; (80014d8 <main+0x118>)
 8001490:	2200      	movs	r2, #0
 8001492:	625a      	str	r2, [r3, #36]	; 0x24
	TIM4->CNT = 0;
 8001494:	4b11      	ldr	r3, [pc, #68]	; (80014dc <main+0x11c>)
 8001496:	2200      	movs	r2, #0
 8001498:	625a      	str	r2, [r3, #36]	; 0x24
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		mainMachine();
 800149a:	f000 f8ed 	bl	8001678 <mainMachine>
		/*intUartSend((int) calcularDistancia(TIM3->CNT) >> 1);
		 runMotor(ADELANTE, MOTOR_A);
		 runMotor(ATRAS, MOTOR_B);*/
		btnMachine(0);
 800149e:	2000      	movs	r0, #0
 80014a0:	f001 fe2c 	bl	80030fc <btnMachine>
		btnMachine(1);
 80014a4:	2001      	movs	r0, #1
 80014a6:	f001 fe29 	bl	80030fc <btnMachine>
		btnMachine(2);
 80014aa:	2002      	movs	r0, #2
 80014ac:	f001 fe26 	bl	80030fc <btnMachine>
		mainMachine();
 80014b0:	e7f3      	b.n	800149a <main+0xda>
 80014b2:	bf00      	nop
 80014b4:	2000125c 	.word	0x2000125c
 80014b8:	40010c00 	.word	0x40010c00
 80014bc:	20002aec 	.word	0x20002aec
 80014c0:	20002b7c 	.word	0x20002b7c
 80014c4:	20002b34 	.word	0x20002b34
 80014c8:	40010800 	.word	0x40010800
 80014cc:	2000013c 	.word	0x2000013c
 80014d0:	200000c8 	.word	0x200000c8
 80014d4:	40011000 	.word	0x40011000
 80014d8:	40000400 	.word	0x40000400
 80014dc:	40000800 	.word	0x40000800

080014e0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b094      	sub	sp, #80	; 0x50
 80014e4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80014e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014ea:	2228      	movs	r2, #40	; 0x28
 80014ec:	2100      	movs	r1, #0
 80014ee:	4618      	mov	r0, r3
 80014f0:	f006 faea 	bl	8007ac8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80014f4:	f107 0314 	add.w	r3, r7, #20
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]
 8001502:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8001504:	1d3b      	adds	r3, r7, #4
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	605a      	str	r2, [r3, #4]
 800150c:	609a      	str	r2, [r3, #8]
 800150e:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001510:	2301      	movs	r3, #1
 8001512:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001514:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001518:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800151a:	2300      	movs	r3, #0
 800151c:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800151e:	2301      	movs	r3, #1
 8001520:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001522:	2302      	movs	r3, #2
 8001524:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001526:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800152a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800152c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001530:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001532:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001536:	4618      	mov	r0, r3
 8001538:	f003 fcc6 	bl	8004ec8 <HAL_RCC_OscConfig>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <SystemClock_Config+0x66>
		Error_Handler();
 8001542:	f001 fe87 	bl	8003254 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001546:	230f      	movs	r3, #15
 8001548:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800154a:	2302      	movs	r3, #2
 800154c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800154e:	2300      	movs	r3, #0
 8001550:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001552:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001556:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001558:	2300      	movs	r3, #0
 800155a:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800155c:	f107 0314 	add.w	r3, r7, #20
 8001560:	2102      	movs	r1, #2
 8001562:	4618      	mov	r0, r3
 8001564:	f003 ff32 	bl	80053cc <HAL_RCC_ClockConfig>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <SystemClock_Config+0x92>
		Error_Handler();
 800156e:	f001 fe71 	bl	8003254 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001572:	2302      	movs	r3, #2
 8001574:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001576:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800157a:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800157c:	1d3b      	adds	r3, r7, #4
 800157e:	4618      	mov	r0, r3
 8001580:	f004 f8bc 	bl	80056fc <HAL_RCCEx_PeriphCLKConfig>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <SystemClock_Config+0xae>
		Error_Handler();
 800158a:	f001 fe63 	bl	8003254 <Error_Handler>
	}
}
 800158e:	bf00      	nop
 8001590:	3750      	adds	r7, #80	; 0x50
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
	...

08001598 <intUartSend>:

/* USER CODE BEGIN 4 */
void intUartSend(int entero) {
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
	int m;
	int c;
	int d;
	int u;

	m = entero / 1000;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	4a30      	ldr	r2, [pc, #192]	; (8001664 <intUartSend+0xcc>)
 80015a4:	fb82 1203 	smull	r1, r2, r2, r3
 80015a8:	1192      	asrs	r2, r2, #6
 80015aa:	17db      	asrs	r3, r3, #31
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	617b      	str	r3, [r7, #20]
	c = entero / 100 - m * 10;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	4a2d      	ldr	r2, [pc, #180]	; (8001668 <intUartSend+0xd0>)
 80015b4:	fb82 1203 	smull	r1, r2, r2, r3
 80015b8:	1152      	asrs	r2, r2, #5
 80015ba:	17db      	asrs	r3, r3, #31
 80015bc:	1ad2      	subs	r2, r2, r3
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	f06f 0109 	mvn.w	r1, #9
 80015c4:	fb01 f303 	mul.w	r3, r1, r3
 80015c8:	4413      	add	r3, r2
 80015ca:	613b      	str	r3, [r7, #16]
	d = entero / 10 - (m * 100 + c * 10);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	4a27      	ldr	r2, [pc, #156]	; (800166c <intUartSend+0xd4>)
 80015d0:	fb82 1203 	smull	r1, r2, r2, r3
 80015d4:	1092      	asrs	r2, r2, #2
 80015d6:	17db      	asrs	r3, r3, #31
 80015d8:	1ad1      	subs	r1, r2, r3
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	2264      	movs	r2, #100	; 0x64
 80015de:	fb02 f003 	mul.w	r0, r2, r3
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	4613      	mov	r3, r2
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	4413      	add	r3, r2
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	4403      	add	r3, r0
 80015ee:	1acb      	subs	r3, r1, r3
 80015f0:	60fb      	str	r3, [r7, #12]
	u = entero - (m * 1000 + c * 100 + d * 10);
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015f8:	fb03 f202 	mul.w	r2, r3, r2
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	2164      	movs	r1, #100	; 0x64
 8001600:	fb01 f303 	mul.w	r3, r1, r3
 8001604:	18d1      	adds	r1, r2, r3
 8001606:	68fa      	ldr	r2, [r7, #12]
 8001608:	4613      	mov	r3, r2
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	4413      	add	r3, r2
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	440b      	add	r3, r1
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	60bb      	str	r3, [r7, #8]

	TX_BUFFER[0] = m + '0';
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	b2db      	uxtb	r3, r3
 800161c:	3330      	adds	r3, #48	; 0x30
 800161e:	b2da      	uxtb	r2, r3
 8001620:	4b13      	ldr	r3, [pc, #76]	; (8001670 <intUartSend+0xd8>)
 8001622:	701a      	strb	r2, [r3, #0]
	TX_BUFFER[1] = c + '0';
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	b2db      	uxtb	r3, r3
 8001628:	3330      	adds	r3, #48	; 0x30
 800162a:	b2da      	uxtb	r2, r3
 800162c:	4b10      	ldr	r3, [pc, #64]	; (8001670 <intUartSend+0xd8>)
 800162e:	705a      	strb	r2, [r3, #1]
	TX_BUFFER[2] = d + '0';
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	b2db      	uxtb	r3, r3
 8001634:	3330      	adds	r3, #48	; 0x30
 8001636:	b2da      	uxtb	r2, r3
 8001638:	4b0d      	ldr	r3, [pc, #52]	; (8001670 <intUartSend+0xd8>)
 800163a:	709a      	strb	r2, [r3, #2]
	TX_BUFFER[3] = u + '0';
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	b2db      	uxtb	r3, r3
 8001640:	3330      	adds	r3, #48	; 0x30
 8001642:	b2da      	uxtb	r2, r3
 8001644:	4b0a      	ldr	r3, [pc, #40]	; (8001670 <intUartSend+0xd8>)
 8001646:	70da      	strb	r2, [r3, #3]
	TX_BUFFER[4] = '\n';
 8001648:	4b09      	ldr	r3, [pc, #36]	; (8001670 <intUartSend+0xd8>)
 800164a:	220a      	movs	r2, #10
 800164c:	711a      	strb	r2, [r3, #4]
	HAL_UART_Transmit(&huart1, TX_BUFFER, 5, 100);
 800164e:	2364      	movs	r3, #100	; 0x64
 8001650:	2205      	movs	r2, #5
 8001652:	4907      	ldr	r1, [pc, #28]	; (8001670 <intUartSend+0xd8>)
 8001654:	4807      	ldr	r0, [pc, #28]	; (8001674 <intUartSend+0xdc>)
 8001656:	f004 fea0 	bl	800639a <HAL_UART_Transmit>
}
 800165a:	bf00      	nop
 800165c:	3718      	adds	r7, #24
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	10624dd3 	.word	0x10624dd3
 8001668:	51eb851f 	.word	0x51eb851f
 800166c:	66666667 	.word	0x66666667
 8001670:	2000121c 	.word	0x2000121c
 8001674:	20002bc4 	.word	0x20002bc4

08001678 <mainMachine>:

void mainMachine() {
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
	switch (mainState) {
 800167c:	4b9a      	ldr	r3, [pc, #616]	; (80018e8 <mainMachine+0x270>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2b04      	cmp	r3, #4
 8001682:	f200 812e 	bhi.w	80018e2 <mainMachine+0x26a>
 8001686:	a201      	add	r2, pc, #4	; (adr r2, 800168c <mainMachine+0x14>)
 8001688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800168c:	080016a1 	.word	0x080016a1
 8001690:	080017f7 	.word	0x080017f7
 8001694:	0800185f 	.word	0x0800185f
 8001698:	080018d9 	.word	0x080018d9
 800169c:	080017f1 	.word	0x080017f1
	case SETUP:
		actual.x = ALTO;
 80016a0:	4b92      	ldr	r3, [pc, #584]	; (80018ec <mainMachine+0x274>)
 80016a2:	2208      	movs	r2, #8
 80016a4:	601a      	str	r2, [r3, #0]
		actual.y = ANCHO;
 80016a6:	4b91      	ldr	r3, [pc, #580]	; (80018ec <mainMachine+0x274>)
 80016a8:	2208      	movs	r2, #8
 80016aa:	605a      	str	r2, [r3, #4]
		/*visual.x = 0;
		 visual.y = 0;*/
		resetAxis();
 80016ac:	f001 fa58 	bl	8002b60 <resetAxis>
		movimientoFlag = 0;
 80016b0:	4b8f      	ldr	r3, [pc, #572]	; (80018f0 <mainMachine+0x278>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
		finishFlag = 0;
 80016b6:	4b8f      	ldr	r3, [pc, #572]	; (80018f4 <mainMachine+0x27c>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
		if (abs(Sensors[1] - Sensors[3]) < 0.5) {
 80016bc:	4b8e      	ldr	r3, [pc, #568]	; (80018f8 <mainMachine+0x280>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	4a8d      	ldr	r2, [pc, #564]	; (80018f8 <mainMachine+0x280>)
 80016c2:	68d2      	ldr	r2, [r2, #12]
 80016c4:	4611      	mov	r1, r2
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff fa02 	bl	8000ad0 <__aeabi_fsub>
 80016cc:	4603      	mov	r3, r0
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff fcce 	bl	8001070 <__aeabi_f2iz>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	db15      	blt.n	8001706 <mainMachine+0x8e>
 80016da:	4b87      	ldr	r3, [pc, #540]	; (80018f8 <mainMachine+0x280>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	4a86      	ldr	r2, [pc, #536]	; (80018f8 <mainMachine+0x280>)
 80016e0:	68d2      	ldr	r2, [r2, #12]
 80016e2:	4611      	mov	r1, r2
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff f9f3 	bl	8000ad0 <__aeabi_fsub>
 80016ea:	4603      	mov	r3, r0
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff fcbf 	bl	8001070 <__aeabi_f2iz>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	dc06      	bgt.n	8001706 <mainMachine+0x8e>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80016f8:	2200      	movs	r2, #0
 80016fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016fe:	487f      	ldr	r0, [pc, #508]	; (80018fc <mainMachine+0x284>)
 8001700:	f003 fbc9 	bl	8004e96 <HAL_GPIO_WritePin>
 8001704:	e005      	b.n	8001712 <mainMachine+0x9a>
		} else {
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001706:	2201      	movs	r2, #1
 8001708:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800170c:	487b      	ldr	r0, [pc, #492]	; (80018fc <mainMachine+0x284>)
 800170e:	f003 fbc2 	bl	8004e96 <HAL_GPIO_WritePin>
		}
		if (btns[0].flag == 1) {
 8001712:	4b7b      	ldr	r3, [pc, #492]	; (8001900 <mainMachine+0x288>)
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d12e      	bne.n	8001778 <mainMachine+0x100>
			// Set The LED ON!
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800171a:	2200      	movs	r2, #0
 800171c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001720:	4876      	ldr	r0, [pc, #472]	; (80018fc <mainMachine+0x284>)
 8001722:	f003 fbb8 	bl	8004e96 <HAL_GPIO_WritePin>
			choice = SLOW;
 8001726:	4b77      	ldr	r3, [pc, #476]	; (8001904 <mainMachine+0x28c>)
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
			velocity = velocityChoice[SLOW];
 800172c:	4b76      	ldr	r3, [pc, #472]	; (8001908 <mainMachine+0x290>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a76      	ldr	r2, [pc, #472]	; (800190c <mainMachine+0x294>)
 8001732:	6013      	str	r3, [r2, #0]
			TIM2->CCR3 = baseChoice[SLOW];
 8001734:	4b76      	ldr	r3, [pc, #472]	; (8001910 <mainMachine+0x298>)
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800173c:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM2->CCR4 = baseChoice[SLOW];
 800173e:	4b74      	ldr	r3, [pc, #464]	; (8001910 <mainMachine+0x298>)
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001746:	641a      	str	r2, [r3, #64]	; 0x40
			KP = KPchoice[SLOW];
 8001748:	4b72      	ldr	r3, [pc, #456]	; (8001914 <mainMachine+0x29c>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a72      	ldr	r2, [pc, #456]	; (8001918 <mainMachine+0x2a0>)
 800174e:	6013      	str	r3, [r2, #0]
			KD = KDchoice[SLOW];
 8001750:	4b72      	ldr	r3, [pc, #456]	; (800191c <mainMachine+0x2a4>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a72      	ldr	r2, [pc, #456]	; (8001920 <mainMachine+0x2a8>)
 8001756:	6013      	str	r3, [r2, #0]
			if (q == 0) {
 8001758:	4b72      	ldr	r3, [pc, #456]	; (8001924 <mainMachine+0x2ac>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d108      	bne.n	8001772 <mainMachine+0xfa>
				mainState = CALIBRATE;
 8001760:	4b61      	ldr	r3, [pc, #388]	; (80018e8 <mainMachine+0x270>)
 8001762:	2204      	movs	r2, #4
 8001764:	601a      	str	r2, [r3, #0]
				q++;
 8001766:	4b6f      	ldr	r3, [pc, #444]	; (8001924 <mainMachine+0x2ac>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	3301      	adds	r3, #1
 800176c:	4a6d      	ldr	r2, [pc, #436]	; (8001924 <mainMachine+0x2ac>)
 800176e:	6013      	str	r3, [r2, #0]
 8001770:	e002      	b.n	8001778 <mainMachine+0x100>
			} else {
				mainState = MAPPING;
 8001772:	4b5d      	ldr	r3, [pc, #372]	; (80018e8 <mainMachine+0x270>)
 8001774:	2201      	movs	r2, #1
 8001776:	601a      	str	r2, [r3, #0]
			}

		}
		if (btns[1].flag == 1) {
 8001778:	4b61      	ldr	r3, [pc, #388]	; (8001900 <mainMachine+0x288>)
 800177a:	69db      	ldr	r3, [r3, #28]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d102      	bne.n	8001786 <mainMachine+0x10e>
			// Set The LED ON!
			mainState = RACING;
 8001780:	4b59      	ldr	r3, [pc, #356]	; (80018e8 <mainMachine+0x270>)
 8001782:	2203      	movs	r2, #3
 8001784:	601a      	str	r2, [r3, #0]
			//directions = ReadRun();
			//ShowRun();
		}
		if (btns[2].flag == 1) {
 8001786:	4b5e      	ldr	r3, [pc, #376]	; (8001900 <mainMachine+0x288>)
 8001788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800178a:	2b01      	cmp	r3, #1
 800178c:	f040 80a8 	bne.w	80018e0 <mainMachine+0x268>
			// Set The LED ON!
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001790:	2200      	movs	r2, #0
 8001792:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001796:	4859      	ldr	r0, [pc, #356]	; (80018fc <mainMachine+0x284>)
 8001798:	f003 fb7d 	bl	8004e96 <HAL_GPIO_WritePin>
			choice = FAST;
 800179c:	4b59      	ldr	r3, [pc, #356]	; (8001904 <mainMachine+0x28c>)
 800179e:	2201      	movs	r2, #1
 80017a0:	601a      	str	r2, [r3, #0]
			velocity = velocityChoice[FAST];
 80017a2:	4b59      	ldr	r3, [pc, #356]	; (8001908 <mainMachine+0x290>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	4a59      	ldr	r2, [pc, #356]	; (800190c <mainMachine+0x294>)
 80017a8:	6013      	str	r3, [r2, #0]
			TIM2->CCR3 = baseChoice[FAST];
 80017aa:	4b59      	ldr	r3, [pc, #356]	; (8001910 <mainMachine+0x298>)
 80017ac:	685a      	ldr	r2, [r3, #4]
 80017ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017b2:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM2->CCR4 = baseChoice[FAST];
 80017b4:	4b56      	ldr	r3, [pc, #344]	; (8001910 <mainMachine+0x298>)
 80017b6:	685a      	ldr	r2, [r3, #4]
 80017b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017bc:	641a      	str	r2, [r3, #64]	; 0x40
			KP = KPchoice[FAST];
 80017be:	4b55      	ldr	r3, [pc, #340]	; (8001914 <mainMachine+0x29c>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	4a55      	ldr	r2, [pc, #340]	; (8001918 <mainMachine+0x2a0>)
 80017c4:	6013      	str	r3, [r2, #0]
			KD = KDchoice[FAST];
 80017c6:	4b55      	ldr	r3, [pc, #340]	; (800191c <mainMachine+0x2a4>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	4a55      	ldr	r2, [pc, #340]	; (8001920 <mainMachine+0x2a8>)
 80017cc:	6013      	str	r3, [r2, #0]
			if (q == 0) {
 80017ce:	4b55      	ldr	r3, [pc, #340]	; (8001924 <mainMachine+0x2ac>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d108      	bne.n	80017e8 <mainMachine+0x170>
				mainState = CALIBRATE;
 80017d6:	4b44      	ldr	r3, [pc, #272]	; (80018e8 <mainMachine+0x270>)
 80017d8:	2204      	movs	r2, #4
 80017da:	601a      	str	r2, [r3, #0]
				q++;
 80017dc:	4b51      	ldr	r3, [pc, #324]	; (8001924 <mainMachine+0x2ac>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	3301      	adds	r3, #1
 80017e2:	4a50      	ldr	r2, [pc, #320]	; (8001924 <mainMachine+0x2ac>)
 80017e4:	6013      	str	r3, [r2, #0]
			} else {
				mainState = MAPPING;
			}
		}
		//confirmacionCentrado();
		break;
 80017e6:	e07b      	b.n	80018e0 <mainMachine+0x268>
				mainState = MAPPING;
 80017e8:	4b3f      	ldr	r3, [pc, #252]	; (80018e8 <mainMachine+0x270>)
 80017ea:	2201      	movs	r2, #1
 80017ec:	601a      	str	r2, [r3, #0]
		break;
 80017ee:	e077      	b.n	80018e0 <mainMachine+0x268>
	case CALIBRATE:
		calibrateMachine();
 80017f0:	f000 f8a2 	bl	8001938 <calibrateMachine>
		//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
		break;
 80017f4:	e075      	b.n	80018e2 <mainMachine+0x26a>
	case MAPPING:
		if (finishFlag == 0) {
 80017f6:	4b3f      	ldr	r3, [pc, #252]	; (80018f4 <mainMachine+0x27c>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d102      	bne.n	8001804 <mainMachine+0x18c>
			robotMachine();
 80017fe:	f000 f9af 	bl	8001b60 <robotMachine>
			finishFlag = 0;
			resetAxis();
			PrintMap();
			mainState = RESOLUTION;
		}
		break;
 8001802:	e06e      	b.n	80018e2 <mainMachine+0x26a>
			TX_BUFFER[0] = 'X';
 8001804:	4b48      	ldr	r3, [pc, #288]	; (8001928 <mainMachine+0x2b0>)
 8001806:	2258      	movs	r2, #88	; 0x58
 8001808:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, TX_BUFFER, 1, 100);
 800180a:	2364      	movs	r3, #100	; 0x64
 800180c:	2201      	movs	r2, #1
 800180e:	4946      	ldr	r1, [pc, #280]	; (8001928 <mainMachine+0x2b0>)
 8001810:	4846      	ldr	r0, [pc, #280]	; (800192c <mainMachine+0x2b4>)
 8001812:	f004 fdc2 	bl	800639a <HAL_UART_Transmit>
			intUartSend(actual.x);
 8001816:	4b35      	ldr	r3, [pc, #212]	; (80018ec <mainMachine+0x274>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff febc 	bl	8001598 <intUartSend>
			TX_BUFFER[0] = 'Y';
 8001820:	4b41      	ldr	r3, [pc, #260]	; (8001928 <mainMachine+0x2b0>)
 8001822:	2259      	movs	r2, #89	; 0x59
 8001824:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, TX_BUFFER, 1, 100);
 8001826:	2364      	movs	r3, #100	; 0x64
 8001828:	2201      	movs	r2, #1
 800182a:	493f      	ldr	r1, [pc, #252]	; (8001928 <mainMachine+0x2b0>)
 800182c:	483f      	ldr	r0, [pc, #252]	; (800192c <mainMachine+0x2b4>)
 800182e:	f004 fdb4 	bl	800639a <HAL_UART_Transmit>
			intUartSend(actual.y);
 8001832:	4b2e      	ldr	r3, [pc, #184]	; (80018ec <mainMachine+0x274>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff feae 	bl	8001598 <intUartSend>
			actual.x = ALTO;
 800183c:	4b2b      	ldr	r3, [pc, #172]	; (80018ec <mainMachine+0x274>)
 800183e:	2208      	movs	r2, #8
 8001840:	601a      	str	r2, [r3, #0]
			actual.y = ANCHO;
 8001842:	4b2a      	ldr	r3, [pc, #168]	; (80018ec <mainMachine+0x274>)
 8001844:	2208      	movs	r2, #8
 8001846:	605a      	str	r2, [r3, #4]
			finishFlag = 0;
 8001848:	4b2a      	ldr	r3, [pc, #168]	; (80018f4 <mainMachine+0x27c>)
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
			resetAxis();
 800184e:	f001 f987 	bl	8002b60 <resetAxis>
			PrintMap();
 8001852:	f001 f99f 	bl	8002b94 <PrintMap>
			mainState = RESOLUTION;
 8001856:	4b24      	ldr	r3, [pc, #144]	; (80018e8 <mainMachine+0x270>)
 8001858:	2202      	movs	r2, #2
 800185a:	601a      	str	r2, [r3, #0]
		break;
 800185c:	e041      	b.n	80018e2 <mainMachine+0x26a>
	case RESOLUTION:
		if (Map[actual.x][actual.y].final == 0) {
 800185e:	4b23      	ldr	r3, [pc, #140]	; (80018ec <mainMachine+0x274>)
 8001860:	6819      	ldr	r1, [r3, #0]
 8001862:	4b22      	ldr	r3, [pc, #136]	; (80018ec <mainMachine+0x274>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	4832      	ldr	r0, [pc, #200]	; (8001930 <mainMachine+0x2b8>)
 8001868:	461a      	mov	r2, r3
 800186a:	0052      	lsls	r2, r2, #1
 800186c:	441a      	add	r2, r3
 800186e:	00d3      	lsls	r3, r2, #3
 8001870:	461a      	mov	r2, r3
 8001872:	460b      	mov	r3, r1
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	440b      	add	r3, r1
 8001878:	01db      	lsls	r3, r3, #7
 800187a:	4413      	add	r3, r2
 800187c:	4403      	add	r3, r0
 800187e:	3314      	adds	r3, #20
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d124      	bne.n	80018d0 <mainMachine+0x258>
			addDirection(actual.x, actual.y);
 8001886:	4b19      	ldr	r3, [pc, #100]	; (80018ec <mainMachine+0x274>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a18      	ldr	r2, [pc, #96]	; (80018ec <mainMachine+0x274>)
 800188c:	6852      	ldr	r2, [r2, #4]
 800188e:	4611      	mov	r1, r2
 8001890:	4618      	mov	r0, r3
 8001892:	f000 fb45 	bl	8001f20 <addDirection>
			TX_BUFFER[0] = 'X';
 8001896:	4b24      	ldr	r3, [pc, #144]	; (8001928 <mainMachine+0x2b0>)
 8001898:	2258      	movs	r2, #88	; 0x58
 800189a:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, TX_BUFFER, 1, 100);
 800189c:	2364      	movs	r3, #100	; 0x64
 800189e:	2201      	movs	r2, #1
 80018a0:	4921      	ldr	r1, [pc, #132]	; (8001928 <mainMachine+0x2b0>)
 80018a2:	4822      	ldr	r0, [pc, #136]	; (800192c <mainMachine+0x2b4>)
 80018a4:	f004 fd79 	bl	800639a <HAL_UART_Transmit>
			intUartSend(actual.x);
 80018a8:	4b10      	ldr	r3, [pc, #64]	; (80018ec <mainMachine+0x274>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff fe73 	bl	8001598 <intUartSend>
			TX_BUFFER[0] = 'Y';
 80018b2:	4b1d      	ldr	r3, [pc, #116]	; (8001928 <mainMachine+0x2b0>)
 80018b4:	2259      	movs	r2, #89	; 0x59
 80018b6:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, TX_BUFFER, 1, 100);
 80018b8:	2364      	movs	r3, #100	; 0x64
 80018ba:	2201      	movs	r2, #1
 80018bc:	491a      	ldr	r1, [pc, #104]	; (8001928 <mainMachine+0x2b0>)
 80018be:	481b      	ldr	r0, [pc, #108]	; (800192c <mainMachine+0x2b4>)
 80018c0:	f004 fd6b 	bl	800639a <HAL_UART_Transmit>
			intUartSend(actual.y);
 80018c4:	4b09      	ldr	r3, [pc, #36]	; (80018ec <mainMachine+0x274>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff fe65 	bl	8001598 <intUartSend>
			//SerialBT.println(directions);
			// UploadRun(directions);
			mainState = SETUP;
		}

		break;
 80018ce:	e008      	b.n	80018e2 <mainMachine+0x26a>
			mainState = SETUP;
 80018d0:	4b05      	ldr	r3, [pc, #20]	; (80018e8 <mainMachine+0x270>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
		break;
 80018d6:	e004      	b.n	80018e2 <mainMachine+0x26a>
	case RACING:
		runDirections(directions);
 80018d8:	4816      	ldr	r0, [pc, #88]	; (8001934 <mainMachine+0x2bc>)
 80018da:	f000 fad3 	bl	8001e84 <runDirections>
		break;
 80018de:	e000      	b.n	80018e2 <mainMachine+0x26a>
		break;
 80018e0:	bf00      	nop
	}

}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	2000128c 	.word	0x2000128c
 80018ec:	200012b0 	.word	0x200012b0
 80018f0:	2000124c 	.word	0x2000124c
 80018f4:	20001248 	.word	0x20001248
 80018f8:	200011dc 	.word	0x200011dc
 80018fc:	40011000 	.word	0x40011000
 8001900:	2000125c 	.word	0x2000125c
 8001904:	20001238 	.word	0x20001238
 8001908:	20000010 	.word	0x20000010
 800190c:	20001230 	.word	0x20001230
 8001910:	20000018 	.word	0x20000018
 8001914:	20000000 	.word	0x20000000
 8001918:	20001228 	.word	0x20001228
 800191c:	20000008 	.word	0x20000008
 8001920:	2000122c 	.word	0x2000122c
 8001924:	20002ae8 	.word	0x20002ae8
 8001928:	2000121c 	.word	0x2000121c
 800192c:	20002bc4 	.word	0x20002bc4
 8001930:	200012c0 	.word	0x200012c0
 8001934:	20001294 	.word	0x20001294

08001938 <calibrateMachine>:

void calibrateMachine() {
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
	switch (calState) {
 800193c:	4b7e      	ldr	r3, [pc, #504]	; (8001b38 <calibrateMachine+0x200>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2b03      	cmp	r3, #3
 8001942:	f200 80f7 	bhi.w	8001b34 <calibrateMachine+0x1fc>
 8001946:	a201      	add	r2, pc, #4	; (adr r2, 800194c <calibrateMachine+0x14>)
 8001948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800194c:	0800195d 	.word	0x0800195d
 8001950:	08001a0d 	.word	0x08001a0d
 8001954:	08001a69 	.word	0x08001a69
 8001958:	08001ac5 	.word	0x08001ac5
	case CENTER:
		intUartSend(abs(Sensors[1] - Sensors[3]));
 800195c:	4b77      	ldr	r3, [pc, #476]	; (8001b3c <calibrateMachine+0x204>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	4a76      	ldr	r2, [pc, #472]	; (8001b3c <calibrateMachine+0x204>)
 8001962:	68d2      	ldr	r2, [r2, #12]
 8001964:	4611      	mov	r1, r2
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff f8b2 	bl	8000ad0 <__aeabi_fsub>
 800196c:	4603      	mov	r3, r0
 800196e:	4618      	mov	r0, r3
 8001970:	f7ff fb7e 	bl	8001070 <__aeabi_f2iz>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	bfb8      	it	lt
 800197a:	425b      	neglt	r3, r3
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff fe0b 	bl	8001598 <intUartSend>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001982:	2201      	movs	r2, #1
 8001984:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001988:	486d      	ldr	r0, [pc, #436]	; (8001b40 <calibrateMachine+0x208>)
 800198a:	f003 fa84 	bl	8004e96 <HAL_GPIO_WritePin>
		if (abs(Sensors[1] - Sensors[3]) < 0.5) {
 800198e:	4b6b      	ldr	r3, [pc, #428]	; (8001b3c <calibrateMachine+0x204>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	4a6a      	ldr	r2, [pc, #424]	; (8001b3c <calibrateMachine+0x204>)
 8001994:	68d2      	ldr	r2, [r2, #12]
 8001996:	4611      	mov	r1, r2
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff f899 	bl	8000ad0 <__aeabi_fsub>
 800199e:	4603      	mov	r3, r0
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff fb65 	bl	8001070 <__aeabi_f2iz>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	f2c0 80bc 	blt.w	8001b26 <calibrateMachine+0x1ee>
 80019ae:	4b63      	ldr	r3, [pc, #396]	; (8001b3c <calibrateMachine+0x204>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	4a62      	ldr	r2, [pc, #392]	; (8001b3c <calibrateMachine+0x204>)
 80019b4:	68d2      	ldr	r2, [r2, #12]
 80019b6:	4611      	mov	r1, r2
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff f889 	bl	8000ad0 <__aeabi_fsub>
 80019be:	4603      	mov	r3, r0
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff fb55 	bl	8001070 <__aeabi_f2iz>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	f300 80ac 	bgt.w	8001b26 <calibrateMachine+0x1ee>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80019ce:	2200      	movs	r2, #0
 80019d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019d4:	485a      	ldr	r0, [pc, #360]	; (8001b40 <calibrateMachine+0x208>)
 80019d6:	f003 fa5e 	bl	8004e96 <HAL_GPIO_WritePin>
			if (btns[0].flag == 1) {
 80019da:	4b5a      	ldr	r3, [pc, #360]	; (8001b44 <calibrateMachine+0x20c>)
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	f040 80a1 	bne.w	8001b26 <calibrateMachine+0x1ee>
				CenterDistanceRight = Sensors[3];
 80019e4:	4b55      	ldr	r3, [pc, #340]	; (8001b3c <calibrateMachine+0x204>)
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff fb41 	bl	8001070 <__aeabi_f2iz>
 80019ee:	4603      	mov	r3, r0
 80019f0:	4a55      	ldr	r2, [pc, #340]	; (8001b48 <calibrateMachine+0x210>)
 80019f2:	6013      	str	r3, [r2, #0]
				CenterDistanceLeft = Sensors[1];
 80019f4:	4b51      	ldr	r3, [pc, #324]	; (8001b3c <calibrateMachine+0x204>)
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff fb39 	bl	8001070 <__aeabi_f2iz>
 80019fe:	4603      	mov	r3, r0
 8001a00:	4a52      	ldr	r2, [pc, #328]	; (8001b4c <calibrateMachine+0x214>)
 8001a02:	6013      	str	r3, [r2, #0]
				calState = LEFT;
 8001a04:	4b4c      	ldr	r3, [pc, #304]	; (8001b38 <calibrateMachine+0x200>)
 8001a06:	2201      	movs	r2, #1
 8001a08:	601a      	str	r2, [r3, #0]
			}
		}
		break;
 8001a0a:	e08c      	b.n	8001b26 <calibrateMachine+0x1ee>
	case LEFT:
		intUartSend(abs(Sensors[3]));
 8001a0c:	4b4b      	ldr	r3, [pc, #300]	; (8001b3c <calibrateMachine+0x204>)
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff fb2d 	bl	8001070 <__aeabi_f2iz>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	bfb8      	it	lt
 8001a1c:	425b      	neglt	r3, r3
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7ff fdba 	bl	8001598 <intUartSend>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001a24:	2201      	movs	r2, #1
 8001a26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a2a:	4845      	ldr	r0, [pc, #276]	; (8001b40 <calibrateMachine+0x208>)
 8001a2c:	f003 fa33 	bl	8004e96 <HAL_GPIO_WritePin>
		if (btns[0].flag == 1) {
 8001a30:	4b44      	ldr	r3, [pc, #272]	; (8001b44 <calibrateMachine+0x20c>)
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d178      	bne.n	8001b2a <calibrateMachine+0x1f2>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a3e:	4840      	ldr	r0, [pc, #256]	; (8001b40 <calibrateMachine+0x208>)
 8001a40:	f003 fa29 	bl	8004e96 <HAL_GPIO_WritePin>
			MaxLeftDistance = Sensors[3] + 2;
 8001a44:	4b3d      	ldr	r3, [pc, #244]	; (8001b3c <calibrateMachine+0x204>)
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff f841 	bl	8000ad4 <__addsf3>
 8001a52:	4603      	mov	r3, r0
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff fb0b 	bl	8001070 <__aeabi_f2iz>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	4a3c      	ldr	r2, [pc, #240]	; (8001b50 <calibrateMachine+0x218>)
 8001a5e:	6013      	str	r3, [r2, #0]
			calState = RIGHT;
 8001a60:	4b35      	ldr	r3, [pc, #212]	; (8001b38 <calibrateMachine+0x200>)
 8001a62:	2202      	movs	r2, #2
 8001a64:	601a      	str	r2, [r3, #0]
		}
		break;
 8001a66:	e060      	b.n	8001b2a <calibrateMachine+0x1f2>
	case RIGHT:
		intUartSend(abs(Sensors[1]));
 8001a68:	4b34      	ldr	r3, [pc, #208]	; (8001b3c <calibrateMachine+0x204>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff faff 	bl	8001070 <__aeabi_f2iz>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	bfb8      	it	lt
 8001a78:	425b      	neglt	r3, r3
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff fd8c 	bl	8001598 <intUartSend>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001a80:	2201      	movs	r2, #1
 8001a82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a86:	482e      	ldr	r0, [pc, #184]	; (8001b40 <calibrateMachine+0x208>)
 8001a88:	f003 fa05 	bl	8004e96 <HAL_GPIO_WritePin>
		if (btns[0].flag == 1) {
 8001a8c:	4b2d      	ldr	r3, [pc, #180]	; (8001b44 <calibrateMachine+0x20c>)
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d14c      	bne.n	8001b2e <calibrateMachine+0x1f6>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001a94:	2200      	movs	r2, #0
 8001a96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a9a:	4829      	ldr	r0, [pc, #164]	; (8001b40 <calibrateMachine+0x208>)
 8001a9c:	f003 f9fb 	bl	8004e96 <HAL_GPIO_WritePin>
			MaxRightDistance = Sensors[1] + 2;
 8001aa0:	4b26      	ldr	r3, [pc, #152]	; (8001b3c <calibrateMachine+0x204>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff f813 	bl	8000ad4 <__addsf3>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff fadd 	bl	8001070 <__aeabi_f2iz>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	4a26      	ldr	r2, [pc, #152]	; (8001b54 <calibrateMachine+0x21c>)
 8001aba:	6013      	str	r3, [r2, #0]
			calState = FORWARD;
 8001abc:	4b1e      	ldr	r3, [pc, #120]	; (8001b38 <calibrateMachine+0x200>)
 8001abe:	2203      	movs	r2, #3
 8001ac0:	601a      	str	r2, [r3, #0]
		}
		break;
 8001ac2:	e034      	b.n	8001b2e <calibrateMachine+0x1f6>
	case FORWARD:
		intUartSend(abs(Sensors[2]));
 8001ac4:	4b1d      	ldr	r3, [pc, #116]	; (8001b3c <calibrateMachine+0x204>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7ff fad1 	bl	8001070 <__aeabi_f2iz>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	bfb8      	it	lt
 8001ad4:	425b      	neglt	r3, r3
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff fd5e 	bl	8001598 <intUartSend>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001adc:	2201      	movs	r2, #1
 8001ade:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ae2:	4817      	ldr	r0, [pc, #92]	; (8001b40 <calibrateMachine+0x208>)
 8001ae4:	f003 f9d7 	bl	8004e96 <HAL_GPIO_WritePin>
		if (btns[0].flag == 1) {
 8001ae8:	4b16      	ldr	r3, [pc, #88]	; (8001b44 <calibrateMachine+0x20c>)
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d120      	bne.n	8001b32 <calibrateMachine+0x1fa>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001af0:	2200      	movs	r2, #0
 8001af2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001af6:	4812      	ldr	r0, [pc, #72]	; (8001b40 <calibrateMachine+0x208>)
 8001af8:	f003 f9cd 	bl	8004e96 <HAL_GPIO_WritePin>
			MaxCenterDistance = Sensors[2] + 2;
 8001afc:	4b0f      	ldr	r3, [pc, #60]	; (8001b3c <calibrateMachine+0x204>)
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7fe ffe5 	bl	8000ad4 <__addsf3>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff faaf 	bl	8001070 <__aeabi_f2iz>
 8001b12:	4603      	mov	r3, r0
 8001b14:	4a10      	ldr	r2, [pc, #64]	; (8001b58 <calibrateMachine+0x220>)
 8001b16:	6013      	str	r3, [r2, #0]
			mainState = SETUP;
 8001b18:	4b10      	ldr	r3, [pc, #64]	; (8001b5c <calibrateMachine+0x224>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	601a      	str	r2, [r3, #0]
			calState = CENTER;
 8001b1e:	4b06      	ldr	r3, [pc, #24]	; (8001b38 <calibrateMachine+0x200>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
		}
		break;
 8001b24:	e005      	b.n	8001b32 <calibrateMachine+0x1fa>
		break;
 8001b26:	bf00      	nop
 8001b28:	e004      	b.n	8001b34 <calibrateMachine+0x1fc>
		break;
 8001b2a:	bf00      	nop
 8001b2c:	e002      	b.n	8001b34 <calibrateMachine+0x1fc>
		break;
 8001b2e:	bf00      	nop
 8001b30:	e000      	b.n	8001b34 <calibrateMachine+0x1fc>
		break;
 8001b32:	bf00      	nop
	}
}
 8001b34:	bf00      	nop
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	200011fc 	.word	0x200011fc
 8001b3c:	200011dc 	.word	0x200011dc
 8001b40:	40011000 	.word	0x40011000
 8001b44:	2000125c 	.word	0x2000125c
 8001b48:	20001200 	.word	0x20001200
 8001b4c:	20001204 	.word	0x20001204
 8001b50:	2000120c 	.word	0x2000120c
 8001b54:	20001208 	.word	0x20001208
 8001b58:	20001210 	.word	0x20001210
 8001b5c:	2000128c 	.word	0x2000128c

08001b60 <robotMachine>:

void robotMachine() {
 8001b60:	b5b0      	push	{r4, r5, r7, lr}
 8001b62:	af00      	add	r7, sp, #0
	switch (robotState) {
 8001b64:	4bab      	ldr	r3, [pc, #684]	; (8001e14 <robotMachine+0x2b4>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	f000 816d 	beq.w	8001e48 <robotMachine+0x2e8>
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	f300 817d 	bgt.w	8001e6e <robotMachine+0x30e>
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d003      	beq.n	8001b80 <robotMachine+0x20>
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	f000 80e1 	beq.w	8001d40 <robotMachine+0x1e0>
		if (movimientoFlag == 1) {
			robotState = READING;
		}
		break;
	}
}
 8001b7e:	e176      	b.n	8001e6e <robotMachine+0x30e>
		HAL_Delay(10);
 8001b80:	200a      	movs	r0, #10
 8001b82:	f002 f85b 	bl	8003c3c <HAL_Delay>
		TX_BUFFER[0] = 'X';
 8001b86:	4ba4      	ldr	r3, [pc, #656]	; (8001e18 <robotMachine+0x2b8>)
 8001b88:	2258      	movs	r2, #88	; 0x58
 8001b8a:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = actual.x + '0';
 8001b8c:	4ba3      	ldr	r3, [pc, #652]	; (8001e1c <robotMachine+0x2bc>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	3330      	adds	r3, #48	; 0x30
 8001b94:	b2da      	uxtb	r2, r3
 8001b96:	4ba0      	ldr	r3, [pc, #640]	; (8001e18 <robotMachine+0x2b8>)
 8001b98:	705a      	strb	r2, [r3, #1]
		TX_BUFFER[2] = '\n';
 8001b9a:	4b9f      	ldr	r3, [pc, #636]	; (8001e18 <robotMachine+0x2b8>)
 8001b9c:	220a      	movs	r2, #10
 8001b9e:	709a      	strb	r2, [r3, #2]
		TX_BUFFER[3] = 'Y';
 8001ba0:	4b9d      	ldr	r3, [pc, #628]	; (8001e18 <robotMachine+0x2b8>)
 8001ba2:	2259      	movs	r2, #89	; 0x59
 8001ba4:	70da      	strb	r2, [r3, #3]
		TX_BUFFER[4] = actual.y + '0';
 8001ba6:	4b9d      	ldr	r3, [pc, #628]	; (8001e1c <robotMachine+0x2bc>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	3330      	adds	r3, #48	; 0x30
 8001bae:	b2da      	uxtb	r2, r3
 8001bb0:	4b99      	ldr	r3, [pc, #612]	; (8001e18 <robotMachine+0x2b8>)
 8001bb2:	711a      	strb	r2, [r3, #4]
		TX_BUFFER[5] = '\n';
 8001bb4:	4b98      	ldr	r3, [pc, #608]	; (8001e18 <robotMachine+0x2b8>)
 8001bb6:	220a      	movs	r2, #10
 8001bb8:	715a      	strb	r2, [r3, #5]
		HAL_UART_Transmit(&huart1, TX_BUFFER, 6, 100);
 8001bba:	2364      	movs	r3, #100	; 0x64
 8001bbc:	2206      	movs	r2, #6
 8001bbe:	4996      	ldr	r1, [pc, #600]	; (8001e18 <robotMachine+0x2b8>)
 8001bc0:	4897      	ldr	r0, [pc, #604]	; (8001e20 <robotMachine+0x2c0>)
 8001bc2:	f004 fbea 	bl	800639a <HAL_UART_Transmit>
		Map[actual.x][actual.y].visitado++;
 8001bc6:	4b95      	ldr	r3, [pc, #596]	; (8001e1c <robotMachine+0x2bc>)
 8001bc8:	6819      	ldr	r1, [r3, #0]
 8001bca:	4b94      	ldr	r3, [pc, #592]	; (8001e1c <robotMachine+0x2bc>)
 8001bcc:	6858      	ldr	r0, [r3, #4]
 8001bce:	4c95      	ldr	r4, [pc, #596]	; (8001e24 <robotMachine+0x2c4>)
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	0052      	lsls	r2, r2, #1
 8001bd4:	4402      	add	r2, r0
 8001bd6:	00d3      	lsls	r3, r2, #3
 8001bd8:	461a      	mov	r2, r3
 8001bda:	460b      	mov	r3, r1
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	440b      	add	r3, r1
 8001be0:	01db      	lsls	r3, r3, #7
 8001be2:	4413      	add	r3, r2
 8001be4:	4423      	add	r3, r4
 8001be6:	3310      	adds	r3, #16
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	1c5c      	adds	r4, r3, #1
 8001bec:	4d8d      	ldr	r5, [pc, #564]	; (8001e24 <robotMachine+0x2c4>)
 8001bee:	4602      	mov	r2, r0
 8001bf0:	0052      	lsls	r2, r2, #1
 8001bf2:	4402      	add	r2, r0
 8001bf4:	00d3      	lsls	r3, r2, #3
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	440b      	add	r3, r1
 8001bfe:	01db      	lsls	r3, r3, #7
 8001c00:	4413      	add	r3, r2
 8001c02:	442b      	add	r3, r5
 8001c04:	3310      	adds	r3, #16
 8001c06:	601c      	str	r4, [r3, #0]
		if (Map[actual.x][actual.y].visitado == 1) {
 8001c08:	4b84      	ldr	r3, [pc, #528]	; (8001e1c <robotMachine+0x2bc>)
 8001c0a:	6819      	ldr	r1, [r3, #0]
 8001c0c:	4b83      	ldr	r3, [pc, #524]	; (8001e1c <robotMachine+0x2bc>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	4884      	ldr	r0, [pc, #528]	; (8001e24 <robotMachine+0x2c4>)
 8001c12:	461a      	mov	r2, r3
 8001c14:	0052      	lsls	r2, r2, #1
 8001c16:	441a      	add	r2, r3
 8001c18:	00d3      	lsls	r3, r2, #3
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	440b      	add	r3, r1
 8001c22:	01db      	lsls	r3, r3, #7
 8001c24:	4413      	add	r3, r2
 8001c26:	4403      	add	r3, r0
 8001c28:	3310      	adds	r3, #16
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d10f      	bne.n	8001c50 <robotMachine+0xf0>
			runMotor(OFF, MOTOR_A);
 8001c30:	2100      	movs	r1, #0
 8001c32:	2005      	movs	r0, #5
 8001c34:	f001 fb3a 	bl	80032ac <runMotor>
			runMotor(OFF, MOTOR_B);
 8001c38:	2101      	movs	r1, #1
 8001c3a:	2005      	movs	r0, #5
 8001c3c:	f001 fb36 	bl	80032ac <runMotor>
			CreateNode(actual.x, actual.y);
 8001c40:	4b76      	ldr	r3, [pc, #472]	; (8001e1c <robotMachine+0x2bc>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a75      	ldr	r2, [pc, #468]	; (8001e1c <robotMachine+0x2bc>)
 8001c46:	6852      	ldr	r2, [r2, #4]
 8001c48:	4611      	mov	r1, r2
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f000 fec2 	bl	80029d4 <CreateNode>
		intUartSend(Map[actual.x][actual.y].Lados[DERECHA]);
 8001c50:	4b72      	ldr	r3, [pc, #456]	; (8001e1c <robotMachine+0x2bc>)
 8001c52:	6819      	ldr	r1, [r3, #0]
 8001c54:	4b71      	ldr	r3, [pc, #452]	; (8001e1c <robotMachine+0x2bc>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	4872      	ldr	r0, [pc, #456]	; (8001e24 <robotMachine+0x2c4>)
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	0052      	lsls	r2, r2, #1
 8001c5e:	441a      	add	r2, r3
 8001c60:	00d3      	lsls	r3, r2, #3
 8001c62:	461a      	mov	r2, r3
 8001c64:	460b      	mov	r3, r1
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	440b      	add	r3, r1
 8001c6a:	01db      	lsls	r3, r3, #7
 8001c6c:	4413      	add	r3, r2
 8001c6e:	4403      	add	r3, r0
 8001c70:	330c      	adds	r3, #12
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff fc8f 	bl	8001598 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[ADELANTE]);
 8001c7a:	4b68      	ldr	r3, [pc, #416]	; (8001e1c <robotMachine+0x2bc>)
 8001c7c:	6819      	ldr	r1, [r3, #0]
 8001c7e:	4b67      	ldr	r3, [pc, #412]	; (8001e1c <robotMachine+0x2bc>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	4868      	ldr	r0, [pc, #416]	; (8001e24 <robotMachine+0x2c4>)
 8001c84:	461a      	mov	r2, r3
 8001c86:	0052      	lsls	r2, r2, #1
 8001c88:	441a      	add	r2, r3
 8001c8a:	00d3      	lsls	r3, r2, #3
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	460b      	mov	r3, r1
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	440b      	add	r3, r1
 8001c94:	01db      	lsls	r3, r3, #7
 8001c96:	4413      	add	r3, r2
 8001c98:	4403      	add	r3, r0
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7ff fc7b 	bl	8001598 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[IZQUIERDA]);
 8001ca2:	4b5e      	ldr	r3, [pc, #376]	; (8001e1c <robotMachine+0x2bc>)
 8001ca4:	6819      	ldr	r1, [r3, #0]
 8001ca6:	4b5d      	ldr	r3, [pc, #372]	; (8001e1c <robotMachine+0x2bc>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	485e      	ldr	r0, [pc, #376]	; (8001e24 <robotMachine+0x2c4>)
 8001cac:	461a      	mov	r2, r3
 8001cae:	0052      	lsls	r2, r2, #1
 8001cb0:	441a      	add	r2, r3
 8001cb2:	00d3      	lsls	r3, r2, #3
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	440b      	add	r3, r1
 8001cbc:	01db      	lsls	r3, r3, #7
 8001cbe:	4413      	add	r3, r2
 8001cc0:	4403      	add	r3, r0
 8001cc2:	3304      	adds	r3, #4
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff fc66 	bl	8001598 <intUartSend>
		valueCNY = Sensors[0];
 8001ccc:	4b56      	ldr	r3, [pc, #344]	; (8001e28 <robotMachine+0x2c8>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff f9cd 	bl	8001070 <__aeabi_f2iz>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	4a54      	ldr	r2, [pc, #336]	; (8001e2c <robotMachine+0x2cc>)
 8001cda:	6013      	str	r3, [r2, #0]
		if (valueCNY == BLANCO) {
 8001cdc:	4b53      	ldr	r3, [pc, #332]	; (8001e2c <robotMachine+0x2cc>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d116      	bne.n	8001d12 <robotMachine+0x1b2>
			Map[actual.x][actual.y].final = 1;
 8001ce4:	4b4d      	ldr	r3, [pc, #308]	; (8001e1c <robotMachine+0x2bc>)
 8001ce6:	6819      	ldr	r1, [r3, #0]
 8001ce8:	4b4c      	ldr	r3, [pc, #304]	; (8001e1c <robotMachine+0x2bc>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	484d      	ldr	r0, [pc, #308]	; (8001e24 <robotMachine+0x2c4>)
 8001cee:	461a      	mov	r2, r3
 8001cf0:	0052      	lsls	r2, r2, #1
 8001cf2:	441a      	add	r2, r3
 8001cf4:	00d3      	lsls	r3, r2, #3
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	440b      	add	r3, r1
 8001cfe:	01db      	lsls	r3, r3, #7
 8001d00:	4413      	add	r3, r2
 8001d02:	4403      	add	r3, r0
 8001d04:	3314      	adds	r3, #20
 8001d06:	2201      	movs	r2, #1
 8001d08:	601a      	str	r2, [r3, #0]
			finishFlag = 1;
 8001d0a:	4b49      	ldr	r3, [pc, #292]	; (8001e30 <robotMachine+0x2d0>)
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	601a      	str	r2, [r3, #0]
		break;
 8001d10:	e0ad      	b.n	8001e6e <robotMachine+0x30e>
			Map[actual.x][actual.y].final = 0;
 8001d12:	4b42      	ldr	r3, [pc, #264]	; (8001e1c <robotMachine+0x2bc>)
 8001d14:	6819      	ldr	r1, [r3, #0]
 8001d16:	4b41      	ldr	r3, [pc, #260]	; (8001e1c <robotMachine+0x2bc>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	4842      	ldr	r0, [pc, #264]	; (8001e24 <robotMachine+0x2c4>)
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	0052      	lsls	r2, r2, #1
 8001d20:	441a      	add	r2, r3
 8001d22:	00d3      	lsls	r3, r2, #3
 8001d24:	461a      	mov	r2, r3
 8001d26:	460b      	mov	r3, r1
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	440b      	add	r3, r1
 8001d2c:	01db      	lsls	r3, r3, #7
 8001d2e:	4413      	add	r3, r2
 8001d30:	4403      	add	r3, r0
 8001d32:	3314      	adds	r3, #20
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
			robotState = CHOOSING;
 8001d38:	4b36      	ldr	r3, [pc, #216]	; (8001e14 <robotMachine+0x2b4>)
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	601a      	str	r2, [r3, #0]
		break;
 8001d3e:	e096      	b.n	8001e6e <robotMachine+0x30e>
		movimiento = ChooseNextNode(actual.x, actual.y);
 8001d40:	4b36      	ldr	r3, [pc, #216]	; (8001e1c <robotMachine+0x2bc>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a35      	ldr	r2, [pc, #212]	; (8001e1c <robotMachine+0x2bc>)
 8001d46:	6852      	ldr	r2, [r2, #4]
 8001d48:	4611      	mov	r1, r2
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f000 f9e8 	bl	8002120 <ChooseNextNode>
 8001d50:	4603      	mov	r3, r0
 8001d52:	4a38      	ldr	r2, [pc, #224]	; (8001e34 <robotMachine+0x2d4>)
 8001d54:	6013      	str	r3, [r2, #0]
		TX_BUFFER[0] = 'M';
 8001d56:	4b30      	ldr	r3, [pc, #192]	; (8001e18 <robotMachine+0x2b8>)
 8001d58:	224d      	movs	r2, #77	; 0x4d
 8001d5a:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = movimiento + '0';
 8001d5c:	4b35      	ldr	r3, [pc, #212]	; (8001e34 <robotMachine+0x2d4>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	3330      	adds	r3, #48	; 0x30
 8001d64:	b2da      	uxtb	r2, r3
 8001d66:	4b2c      	ldr	r3, [pc, #176]	; (8001e18 <robotMachine+0x2b8>)
 8001d68:	705a      	strb	r2, [r3, #1]
		TX_BUFFER[2] = '\n';
 8001d6a:	4b2b      	ldr	r3, [pc, #172]	; (8001e18 <robotMachine+0x2b8>)
 8001d6c:	220a      	movs	r2, #10
 8001d6e:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart1, TX_BUFFER, 3, 100);
 8001d70:	2364      	movs	r3, #100	; 0x64
 8001d72:	2203      	movs	r2, #3
 8001d74:	4928      	ldr	r1, [pc, #160]	; (8001e18 <robotMachine+0x2b8>)
 8001d76:	482a      	ldr	r0, [pc, #168]	; (8001e20 <robotMachine+0x2c0>)
 8001d78:	f004 fb0f 	bl	800639a <HAL_UART_Transmit>
		last.x = actual.x;
 8001d7c:	4b27      	ldr	r3, [pc, #156]	; (8001e1c <robotMachine+0x2bc>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a2d      	ldr	r2, [pc, #180]	; (8001e38 <robotMachine+0x2d8>)
 8001d82:	6013      	str	r3, [r2, #0]
		last.y = actual.y;
 8001d84:	4b25      	ldr	r3, [pc, #148]	; (8001e1c <robotMachine+0x2bc>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	4a2b      	ldr	r2, [pc, #172]	; (8001e38 <robotMachine+0x2d8>)
 8001d8a:	6053      	str	r3, [r2, #4]
		if (movimiento == IZQUIERDA) {
 8001d8c:	4b29      	ldr	r3, [pc, #164]	; (8001e34 <robotMachine+0x2d4>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d105      	bne.n	8001da0 <robotMachine+0x240>
			counter--;
 8001d94:	4b29      	ldr	r3, [pc, #164]	; (8001e3c <robotMachine+0x2dc>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	4a28      	ldr	r2, [pc, #160]	; (8001e3c <robotMachine+0x2dc>)
 8001d9c:	6013      	str	r3, [r2, #0]
 8001d9e:	e017      	b.n	8001dd0 <robotMachine+0x270>
		} else if (movimiento == DERECHA) {
 8001da0:	4b24      	ldr	r3, [pc, #144]	; (8001e34 <robotMachine+0x2d4>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2b03      	cmp	r3, #3
 8001da6:	d105      	bne.n	8001db4 <robotMachine+0x254>
			counter++;
 8001da8:	4b24      	ldr	r3, [pc, #144]	; (8001e3c <robotMachine+0x2dc>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	3301      	adds	r3, #1
 8001dae:	4a23      	ldr	r2, [pc, #140]	; (8001e3c <robotMachine+0x2dc>)
 8001db0:	6013      	str	r3, [r2, #0]
 8001db2:	e00d      	b.n	8001dd0 <robotMachine+0x270>
		} else if (movimiento == ATRAS) {
 8001db4:	4b1f      	ldr	r3, [pc, #124]	; (8001e34 <robotMachine+0x2d4>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d109      	bne.n	8001dd0 <robotMachine+0x270>
			counter++;
 8001dbc:	4b1f      	ldr	r3, [pc, #124]	; (8001e3c <robotMachine+0x2dc>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	4a1e      	ldr	r2, [pc, #120]	; (8001e3c <robotMachine+0x2dc>)
 8001dc4:	6013      	str	r3, [r2, #0]
			counter++;
 8001dc6:	4b1d      	ldr	r3, [pc, #116]	; (8001e3c <robotMachine+0x2dc>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	3301      	adds	r3, #1
 8001dcc:	4a1b      	ldr	r2, [pc, #108]	; (8001e3c <robotMachine+0x2dc>)
 8001dce:	6013      	str	r3, [r2, #0]
		intUartSend(counter);
 8001dd0:	4b1a      	ldr	r3, [pc, #104]	; (8001e3c <robotMachine+0x2dc>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff fbdf 	bl	8001598 <intUartSend>
		TX_BUFFER[0] = '*';
 8001dda:	4b0f      	ldr	r3, [pc, #60]	; (8001e18 <robotMachine+0x2b8>)
 8001ddc:	222a      	movs	r2, #42	; 0x2a
 8001dde:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = '*';
 8001de0:	4b0d      	ldr	r3, [pc, #52]	; (8001e18 <robotMachine+0x2b8>)
 8001de2:	222a      	movs	r2, #42	; 0x2a
 8001de4:	705a      	strb	r2, [r3, #1]
		TX_BUFFER[2] = '\n';
 8001de6:	4b0c      	ldr	r3, [pc, #48]	; (8001e18 <robotMachine+0x2b8>)
 8001de8:	220a      	movs	r2, #10
 8001dea:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart1, TX_BUFFER, 3, 100);
 8001dec:	2364      	movs	r3, #100	; 0x64
 8001dee:	2203      	movs	r2, #3
 8001df0:	4909      	ldr	r1, [pc, #36]	; (8001e18 <robotMachine+0x2b8>)
 8001df2:	480b      	ldr	r0, [pc, #44]	; (8001e20 <robotMachine+0x2c0>)
 8001df4:	f004 fad1 	bl	800639a <HAL_UART_Transmit>
		movimientoFlag = 0;
 8001df8:	4b11      	ldr	r3, [pc, #68]	; (8001e40 <robotMachine+0x2e0>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	601a      	str	r2, [r3, #0]
		ticksNow = HAL_GetTick();
 8001dfe:	f001 ff13 	bl	8003c28 <HAL_GetTick>
 8001e02:	4603      	mov	r3, r0
 8001e04:	461a      	mov	r2, r3
 8001e06:	4b0f      	ldr	r3, [pc, #60]	; (8001e44 <robotMachine+0x2e4>)
 8001e08:	601a      	str	r2, [r3, #0]
		robotState = MOVING;
 8001e0a:	4b02      	ldr	r3, [pc, #8]	; (8001e14 <robotMachine+0x2b4>)
 8001e0c:	2202      	movs	r2, #2
 8001e0e:	601a      	str	r2, [r3, #0]
		break;
 8001e10:	e02d      	b.n	8001e6e <robotMachine+0x30e>
 8001e12:	bf00      	nop
 8001e14:	20001290 	.word	0x20001290
 8001e18:	2000121c 	.word	0x2000121c
 8001e1c:	200012b0 	.word	0x200012b0
 8001e20:	20002bc4 	.word	0x20002bc4
 8001e24:	200012c0 	.word	0x200012c0
 8001e28:	200011dc 	.word	0x200011dc
 8001e2c:	20001250 	.word	0x20001250
 8001e30:	20001248 	.word	0x20001248
 8001e34:	20001244 	.word	0x20001244
 8001e38:	200012b8 	.word	0x200012b8
 8001e3c:	20001258 	.word	0x20001258
 8001e40:	2000124c 	.word	0x2000124c
 8001e44:	20001234 	.word	0x20001234
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e4e:	4809      	ldr	r0, [pc, #36]	; (8001e74 <robotMachine+0x314>)
 8001e50:	f003 f821 	bl	8004e96 <HAL_GPIO_WritePin>
		movementMachine(movimiento);
 8001e54:	4b08      	ldr	r3, [pc, #32]	; (8001e78 <robotMachine+0x318>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f000 fc4d 	bl	80026f8 <movementMachine>
		if (movimientoFlag == 1) {
 8001e5e:	4b07      	ldr	r3, [pc, #28]	; (8001e7c <robotMachine+0x31c>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d102      	bne.n	8001e6c <robotMachine+0x30c>
			robotState = READING;
 8001e66:	4b06      	ldr	r3, [pc, #24]	; (8001e80 <robotMachine+0x320>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
		break;
 8001e6c:	bf00      	nop
}
 8001e6e:	bf00      	nop
 8001e70:	bdb0      	pop	{r4, r5, r7, pc}
 8001e72:	bf00      	nop
 8001e74:	40011000 	.word	0x40011000
 8001e78:	20001244 	.word	0x20001244
 8001e7c:	2000124c 	.word	0x2000124c
 8001e80:	20001290 	.word	0x20001290

08001e84 <runDirections>:

void runDirections(char moves[25]) {
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
	if (moves[m] == 'a') {
 8001e8c:	4b20      	ldr	r3, [pc, #128]	; (8001f10 <runDirections+0x8c>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	461a      	mov	r2, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4413      	add	r3, r2
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	2b61      	cmp	r3, #97	; 0x61
 8001e9a:	d103      	bne.n	8001ea4 <runDirections+0x20>
		movementMachine(ADELANTE);
 8001e9c:	2000      	movs	r0, #0
 8001e9e:	f000 fc2b 	bl	80026f8 <movementMachine>
 8001ea2:	e016      	b.n	8001ed2 <runDirections+0x4e>
	} else if (moves[m] == 'd') {
 8001ea4:	4b1a      	ldr	r3, [pc, #104]	; (8001f10 <runDirections+0x8c>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4413      	add	r3, r2
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	2b64      	cmp	r3, #100	; 0x64
 8001eb2:	d103      	bne.n	8001ebc <runDirections+0x38>
		movementMachine(DERECHA);
 8001eb4:	2003      	movs	r0, #3
 8001eb6:	f000 fc1f 	bl	80026f8 <movementMachine>
 8001eba:	e00a      	b.n	8001ed2 <runDirections+0x4e>
	} else if (moves[m] == 'i') {
 8001ebc:	4b14      	ldr	r3, [pc, #80]	; (8001f10 <runDirections+0x8c>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	2b69      	cmp	r3, #105	; 0x69
 8001eca:	d102      	bne.n	8001ed2 <runDirections+0x4e>
		movementMachine(IZQUIERDA);
 8001ecc:	2001      	movs	r0, #1
 8001ece:	f000 fc13 	bl	80026f8 <movementMachine>
	}/* else {
	 movementMachine(SUPER);
	 }*/
	TX_BUFFER[0] = moves[m];
 8001ed2:	4b0f      	ldr	r3, [pc, #60]	; (8001f10 <runDirections+0x8c>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4413      	add	r3, r2
 8001edc:	781a      	ldrb	r2, [r3, #0]
 8001ede:	4b0d      	ldr	r3, [pc, #52]	; (8001f14 <runDirections+0x90>)
 8001ee0:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, TX_BUFFER, 1, 100);
 8001ee2:	2364      	movs	r3, #100	; 0x64
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	490b      	ldr	r1, [pc, #44]	; (8001f14 <runDirections+0x90>)
 8001ee8:	480b      	ldr	r0, [pc, #44]	; (8001f18 <runDirections+0x94>)
 8001eea:	f004 fa56 	bl	800639a <HAL_UART_Transmit>
	if (movimientoFlag == 1) {
 8001eee:	4b0b      	ldr	r3, [pc, #44]	; (8001f1c <runDirections+0x98>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d107      	bne.n	8001f06 <runDirections+0x82>
		m++;
 8001ef6:	4b06      	ldr	r3, [pc, #24]	; (8001f10 <runDirections+0x8c>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	3301      	adds	r3, #1
 8001efc:	4a04      	ldr	r2, [pc, #16]	; (8001f10 <runDirections+0x8c>)
 8001efe:	6013      	str	r3, [r2, #0]
		movimientoFlag = 0;
 8001f00:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <runDirections+0x98>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	601a      	str	r2, [r3, #0]
	}
}
 8001f06:	bf00      	nop
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	2000123c 	.word	0x2000123c
 8001f14:	2000121c 	.word	0x2000121c
 8001f18:	20002bc4 	.word	0x20002bc4
 8001f1c:	2000124c 	.word	0x2000124c

08001f20 <addDirection>:

void addDirection(int x, int y) {
 8001f20:	b590      	push	{r4, r7, lr}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	6039      	str	r1, [r7, #0]

	if (Map[x][y].Lados[direcciones[ADELANTE]] != 1) {
 8001f2a:	4b77      	ldr	r3, [pc, #476]	; (8002108 <addDirection+0x1e8>)
 8001f2c:	6818      	ldr	r0, [r3, #0]
 8001f2e:	4c77      	ldr	r4, [pc, #476]	; (800210c <addDirection+0x1ec>)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	6879      	ldr	r1, [r7, #4]
 8001f34:	461a      	mov	r2, r3
 8001f36:	0052      	lsls	r2, r2, #1
 8001f38:	441a      	add	r2, r3
 8001f3a:	0053      	lsls	r3, r2, #1
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	460b      	mov	r3, r1
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	440b      	add	r3, r1
 8001f44:	015b      	lsls	r3, r3, #5
 8001f46:	4413      	add	r3, r2
 8001f48:	4403      	add	r3, r0
 8001f4a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d01b      	beq.n	8001f8a <addDirection+0x6a>
		Map[x][y].Lados[direcciones[ADELANTE]] = 2;
 8001f52:	4b6d      	ldr	r3, [pc, #436]	; (8002108 <addDirection+0x1e8>)
 8001f54:	6818      	ldr	r0, [r3, #0]
 8001f56:	4c6d      	ldr	r4, [pc, #436]	; (800210c <addDirection+0x1ec>)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	6879      	ldr	r1, [r7, #4]
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	0052      	lsls	r2, r2, #1
 8001f60:	441a      	add	r2, r3
 8001f62:	0053      	lsls	r3, r2, #1
 8001f64:	461a      	mov	r2, r3
 8001f66:	460b      	mov	r3, r1
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	440b      	add	r3, r1
 8001f6c:	015b      	lsls	r3, r3, #5
 8001f6e:	4413      	add	r3, r2
 8001f70:	4403      	add	r3, r0
 8001f72:	2202      	movs	r2, #2
 8001f74:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
		moveNode(ADELANTE);
 8001f78:	2000      	movs	r0, #0
 8001f7a:	f000 fb8b 	bl	8002694 <moveNode>
		directions[directionsSize] = 'a';
 8001f7e:	4b64      	ldr	r3, [pc, #400]	; (8002110 <addDirection+0x1f0>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a64      	ldr	r2, [pc, #400]	; (8002114 <addDirection+0x1f4>)
 8001f84:	2161      	movs	r1, #97	; 0x61
 8001f86:	54d1      	strb	r1, [r2, r3]
 8001f88:	e064      	b.n	8002054 <addDirection+0x134>
	} else if (Map[x][y].Lados[direcciones[IZQUIERDA]] != 1) {
 8001f8a:	4b5f      	ldr	r3, [pc, #380]	; (8002108 <addDirection+0x1e8>)
 8001f8c:	6858      	ldr	r0, [r3, #4]
 8001f8e:	4c5f      	ldr	r4, [pc, #380]	; (800210c <addDirection+0x1ec>)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	6879      	ldr	r1, [r7, #4]
 8001f94:	461a      	mov	r2, r3
 8001f96:	0052      	lsls	r2, r2, #1
 8001f98:	441a      	add	r2, r3
 8001f9a:	0053      	lsls	r3, r2, #1
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	440b      	add	r3, r1
 8001fa4:	015b      	lsls	r3, r3, #5
 8001fa6:	4413      	add	r3, r2
 8001fa8:	4403      	add	r3, r0
 8001faa:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d01e      	beq.n	8001ff0 <addDirection+0xd0>
		Map[x][y].Lados[direcciones[IZQUIERDA]] = 2;
 8001fb2:	4b55      	ldr	r3, [pc, #340]	; (8002108 <addDirection+0x1e8>)
 8001fb4:	6858      	ldr	r0, [r3, #4]
 8001fb6:	4c55      	ldr	r4, [pc, #340]	; (800210c <addDirection+0x1ec>)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	6879      	ldr	r1, [r7, #4]
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	0052      	lsls	r2, r2, #1
 8001fc0:	441a      	add	r2, r3
 8001fc2:	0053      	lsls	r3, r2, #1
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	440b      	add	r3, r1
 8001fcc:	015b      	lsls	r3, r3, #5
 8001fce:	4413      	add	r3, r2
 8001fd0:	4403      	add	r3, r0
 8001fd2:	2202      	movs	r2, #2
 8001fd4:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
		moveNode(IZQUIERDA);
 8001fd8:	2001      	movs	r0, #1
 8001fda:	f000 fb5b 	bl	8002694 <moveNode>
		rotateAxis(IZQUIERDA);
 8001fde:	2001      	movs	r0, #1
 8001fe0:	f000 fd70 	bl	8002ac4 <rotateAxis>
		directions[directionsSize] = 'i';
 8001fe4:	4b4a      	ldr	r3, [pc, #296]	; (8002110 <addDirection+0x1f0>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a4a      	ldr	r2, [pc, #296]	; (8002114 <addDirection+0x1f4>)
 8001fea:	2169      	movs	r1, #105	; 0x69
 8001fec:	54d1      	strb	r1, [r2, r3]
 8001fee:	e031      	b.n	8002054 <addDirection+0x134>
	} else if (Map[x][y].Lados[direcciones[DERECHA]] != 1) {
 8001ff0:	4b45      	ldr	r3, [pc, #276]	; (8002108 <addDirection+0x1e8>)
 8001ff2:	68d8      	ldr	r0, [r3, #12]
 8001ff4:	4c45      	ldr	r4, [pc, #276]	; (800210c <addDirection+0x1ec>)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	6879      	ldr	r1, [r7, #4]
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	0052      	lsls	r2, r2, #1
 8001ffe:	441a      	add	r2, r3
 8002000:	0053      	lsls	r3, r2, #1
 8002002:	461a      	mov	r2, r3
 8002004:	460b      	mov	r3, r1
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	440b      	add	r3, r1
 800200a:	015b      	lsls	r3, r3, #5
 800200c:	4413      	add	r3, r2
 800200e:	4403      	add	r3, r0
 8002010:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8002014:	2b01      	cmp	r3, #1
 8002016:	d01d      	beq.n	8002054 <addDirection+0x134>
		Map[x][y].Lados[direcciones[DERECHA]] = 2;
 8002018:	4b3b      	ldr	r3, [pc, #236]	; (8002108 <addDirection+0x1e8>)
 800201a:	68d8      	ldr	r0, [r3, #12]
 800201c:	4c3b      	ldr	r4, [pc, #236]	; (800210c <addDirection+0x1ec>)
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	6879      	ldr	r1, [r7, #4]
 8002022:	461a      	mov	r2, r3
 8002024:	0052      	lsls	r2, r2, #1
 8002026:	441a      	add	r2, r3
 8002028:	0053      	lsls	r3, r2, #1
 800202a:	461a      	mov	r2, r3
 800202c:	460b      	mov	r3, r1
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	440b      	add	r3, r1
 8002032:	015b      	lsls	r3, r3, #5
 8002034:	4413      	add	r3, r2
 8002036:	4403      	add	r3, r0
 8002038:	2202      	movs	r2, #2
 800203a:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
		moveNode(DERECHA);
 800203e:	2003      	movs	r0, #3
 8002040:	f000 fb28 	bl	8002694 <moveNode>
		rotateAxis(DERECHA);
 8002044:	2003      	movs	r0, #3
 8002046:	f000 fd3d 	bl	8002ac4 <rotateAxis>
		directions[directionsSize] = 'd';
 800204a:	4b31      	ldr	r3, [pc, #196]	; (8002110 <addDirection+0x1f0>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a31      	ldr	r2, [pc, #196]	; (8002114 <addDirection+0x1f4>)
 8002050:	2164      	movs	r1, #100	; 0x64
 8002052:	54d1      	strb	r1, [r2, r3]
	}
	intUartSend(Map[x][y].Lados[direcciones[ADELANTE]]);
 8002054:	4b2c      	ldr	r3, [pc, #176]	; (8002108 <addDirection+0x1e8>)
 8002056:	6818      	ldr	r0, [r3, #0]
 8002058:	4c2c      	ldr	r4, [pc, #176]	; (800210c <addDirection+0x1ec>)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	6879      	ldr	r1, [r7, #4]
 800205e:	461a      	mov	r2, r3
 8002060:	0052      	lsls	r2, r2, #1
 8002062:	441a      	add	r2, r3
 8002064:	0053      	lsls	r3, r2, #1
 8002066:	461a      	mov	r2, r3
 8002068:	460b      	mov	r3, r1
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	440b      	add	r3, r1
 800206e:	015b      	lsls	r3, r3, #5
 8002070:	4413      	add	r3, r2
 8002072:	4403      	add	r3, r0
 8002074:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8002078:	4618      	mov	r0, r3
 800207a:	f7ff fa8d 	bl	8001598 <intUartSend>
	intUartSend(Map[x][y].Lados[direcciones[IZQUIERDA]]);
 800207e:	4b22      	ldr	r3, [pc, #136]	; (8002108 <addDirection+0x1e8>)
 8002080:	6858      	ldr	r0, [r3, #4]
 8002082:	4c22      	ldr	r4, [pc, #136]	; (800210c <addDirection+0x1ec>)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	6879      	ldr	r1, [r7, #4]
 8002088:	461a      	mov	r2, r3
 800208a:	0052      	lsls	r2, r2, #1
 800208c:	441a      	add	r2, r3
 800208e:	0053      	lsls	r3, r2, #1
 8002090:	461a      	mov	r2, r3
 8002092:	460b      	mov	r3, r1
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	440b      	add	r3, r1
 8002098:	015b      	lsls	r3, r3, #5
 800209a:	4413      	add	r3, r2
 800209c:	4403      	add	r3, r0
 800209e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7ff fa78 	bl	8001598 <intUartSend>
	intUartSend(Map[x][y].Lados[direcciones[DERECHA]]);
 80020a8:	4b17      	ldr	r3, [pc, #92]	; (8002108 <addDirection+0x1e8>)
 80020aa:	68d8      	ldr	r0, [r3, #12]
 80020ac:	4c17      	ldr	r4, [pc, #92]	; (800210c <addDirection+0x1ec>)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	6879      	ldr	r1, [r7, #4]
 80020b2:	461a      	mov	r2, r3
 80020b4:	0052      	lsls	r2, r2, #1
 80020b6:	441a      	add	r2, r3
 80020b8:	0053      	lsls	r3, r2, #1
 80020ba:	461a      	mov	r2, r3
 80020bc:	460b      	mov	r3, r1
 80020be:	005b      	lsls	r3, r3, #1
 80020c0:	440b      	add	r3, r1
 80020c2:	015b      	lsls	r3, r3, #5
 80020c4:	4413      	add	r3, r2
 80020c6:	4403      	add	r3, r0
 80020c8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff fa63 	bl	8001598 <intUartSend>
	TX_BUFFER[0] = 'D';
 80020d2:	4b11      	ldr	r3, [pc, #68]	; (8002118 <addDirection+0x1f8>)
 80020d4:	2244      	movs	r2, #68	; 0x44
 80020d6:	701a      	strb	r2, [r3, #0]
	TX_BUFFER[1] = directions[directionsSize];
 80020d8:	4b0d      	ldr	r3, [pc, #52]	; (8002110 <addDirection+0x1f0>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a0d      	ldr	r2, [pc, #52]	; (8002114 <addDirection+0x1f4>)
 80020de:	5cd2      	ldrb	r2, [r2, r3]
 80020e0:	4b0d      	ldr	r3, [pc, #52]	; (8002118 <addDirection+0x1f8>)
 80020e2:	705a      	strb	r2, [r3, #1]
	TX_BUFFER[2] = '\n';
 80020e4:	4b0c      	ldr	r3, [pc, #48]	; (8002118 <addDirection+0x1f8>)
 80020e6:	220a      	movs	r2, #10
 80020e8:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(&huart1, TX_BUFFER, 3, 100);
 80020ea:	2364      	movs	r3, #100	; 0x64
 80020ec:	2203      	movs	r2, #3
 80020ee:	490a      	ldr	r1, [pc, #40]	; (8002118 <addDirection+0x1f8>)
 80020f0:	480a      	ldr	r0, [pc, #40]	; (800211c <addDirection+0x1fc>)
 80020f2:	f004 f952 	bl	800639a <HAL_UART_Transmit>
	directionsSize++;
 80020f6:	4b06      	ldr	r3, [pc, #24]	; (8002110 <addDirection+0x1f0>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	3301      	adds	r3, #1
 80020fc:	4a04      	ldr	r2, [pc, #16]	; (8002110 <addDirection+0x1f0>)
 80020fe:	6013      	str	r3, [r2, #0]

}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	bd90      	pop	{r4, r7, pc}
 8002108:	200011ec 	.word	0x200011ec
 800210c:	200012c0 	.word	0x200012c0
 8002110:	20001240 	.word	0x20001240
 8002114:	20001294 	.word	0x20001294
 8002118:	2000121c 	.word	0x2000121c
 800211c:	20002bc4 	.word	0x20002bc4

08002120 <ChooseNextNode>:

int ChooseNextNode(int x, int y) {
 8002120:	b590      	push	{r4, r7, lr}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
	if (Map[x][y].Lados[direcciones[ADELANTE]] == 0) {
 800212a:	4b7f      	ldr	r3, [pc, #508]	; (8002328 <ChooseNextNode+0x208>)
 800212c:	6818      	ldr	r0, [r3, #0]
 800212e:	4c7f      	ldr	r4, [pc, #508]	; (800232c <ChooseNextNode+0x20c>)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	6879      	ldr	r1, [r7, #4]
 8002134:	461a      	mov	r2, r3
 8002136:	0052      	lsls	r2, r2, #1
 8002138:	441a      	add	r2, r3
 800213a:	0053      	lsls	r3, r2, #1
 800213c:	461a      	mov	r2, r3
 800213e:	460b      	mov	r3, r1
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	440b      	add	r3, r1
 8002144:	015b      	lsls	r3, r3, #5
 8002146:	4413      	add	r3, r2
 8002148:	4403      	add	r3, r0
 800214a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d166      	bne.n	8002220 <ChooseNextNode+0x100>
		TX_BUFFER[0] = 'A';
 8002152:	4b77      	ldr	r3, [pc, #476]	; (8002330 <ChooseNextNode+0x210>)
 8002154:	2241      	movs	r2, #65	; 0x41
 8002156:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = '\n';
 8002158:	4b75      	ldr	r3, [pc, #468]	; (8002330 <ChooseNextNode+0x210>)
 800215a:	220a      	movs	r2, #10
 800215c:	705a      	strb	r2, [r3, #1]
		HAL_UART_Transmit(&huart1, TX_BUFFER, 2, 100);
 800215e:	2364      	movs	r3, #100	; 0x64
 8002160:	2202      	movs	r2, #2
 8002162:	4973      	ldr	r1, [pc, #460]	; (8002330 <ChooseNextNode+0x210>)
 8002164:	4873      	ldr	r0, [pc, #460]	; (8002334 <ChooseNextNode+0x214>)
 8002166:	f004 f918 	bl	800639a <HAL_UART_Transmit>
		Map[x][y].Lados[direcciones[ADELANTE]] = 2;
 800216a:	4b6f      	ldr	r3, [pc, #444]	; (8002328 <ChooseNextNode+0x208>)
 800216c:	6818      	ldr	r0, [r3, #0]
 800216e:	4c6f      	ldr	r4, [pc, #444]	; (800232c <ChooseNextNode+0x20c>)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	6879      	ldr	r1, [r7, #4]
 8002174:	461a      	mov	r2, r3
 8002176:	0052      	lsls	r2, r2, #1
 8002178:	441a      	add	r2, r3
 800217a:	0053      	lsls	r3, r2, #1
 800217c:	461a      	mov	r2, r3
 800217e:	460b      	mov	r3, r1
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	440b      	add	r3, r1
 8002184:	015b      	lsls	r3, r3, #5
 8002186:	4413      	add	r3, r2
 8002188:	4403      	add	r3, r0
 800218a:	2202      	movs	r2, #2
 800218c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
		if (Map[x][y].visitado > 1) {
 8002190:	4866      	ldr	r0, [pc, #408]	; (800232c <ChooseNextNode+0x20c>)
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	6879      	ldr	r1, [r7, #4]
 8002196:	461a      	mov	r2, r3
 8002198:	0052      	lsls	r2, r2, #1
 800219a:	441a      	add	r2, r3
 800219c:	00d3      	lsls	r3, r2, #3
 800219e:	461a      	mov	r2, r3
 80021a0:	460b      	mov	r3, r1
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	440b      	add	r3, r1
 80021a6:	01db      	lsls	r3, r3, #7
 80021a8:	4413      	add	r3, r2
 80021aa:	4403      	add	r3, r0
 80021ac:	3310      	adds	r3, #16
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	dd07      	ble.n	80021c4 <ChooseNextNode+0xa4>
			EliminateNode(x, y);
 80021b4:	6839      	ldr	r1, [r7, #0]
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 f962 	bl	8002480 <EliminateNode>
			intUartSend(5000);
 80021bc:	f241 3088 	movw	r0, #5000	; 0x1388
 80021c0:	f7ff f9ea 	bl	8001598 <intUartSend>
		}
		if (Map[x][y].Lados[direcciones[ATRAS]] != 1)
 80021c4:	4b58      	ldr	r3, [pc, #352]	; (8002328 <ChooseNextNode+0x208>)
 80021c6:	6898      	ldr	r0, [r3, #8]
 80021c8:	4c58      	ldr	r4, [pc, #352]	; (800232c <ChooseNextNode+0x20c>)
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	6879      	ldr	r1, [r7, #4]
 80021ce:	461a      	mov	r2, r3
 80021d0:	0052      	lsls	r2, r2, #1
 80021d2:	441a      	add	r2, r3
 80021d4:	0053      	lsls	r3, r2, #1
 80021d6:	461a      	mov	r2, r3
 80021d8:	460b      	mov	r3, r1
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	440b      	add	r3, r1
 80021de:	015b      	lsls	r3, r3, #5
 80021e0:	4413      	add	r3, r2
 80021e2:	4403      	add	r3, r0
 80021e4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d012      	beq.n	8002212 <ChooseNextNode+0xf2>
			Map[x][y].Lados[direcciones[ATRAS]] = 2;
 80021ec:	4b4e      	ldr	r3, [pc, #312]	; (8002328 <ChooseNextNode+0x208>)
 80021ee:	6898      	ldr	r0, [r3, #8]
 80021f0:	4c4e      	ldr	r4, [pc, #312]	; (800232c <ChooseNextNode+0x20c>)
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	6879      	ldr	r1, [r7, #4]
 80021f6:	461a      	mov	r2, r3
 80021f8:	0052      	lsls	r2, r2, #1
 80021fa:	441a      	add	r2, r3
 80021fc:	0053      	lsls	r3, r2, #1
 80021fe:	461a      	mov	r2, r3
 8002200:	460b      	mov	r3, r1
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	440b      	add	r3, r1
 8002206:	015b      	lsls	r3, r3, #5
 8002208:	4413      	add	r3, r2
 800220a:	4403      	add	r3, r0
 800220c:	2202      	movs	r2, #2
 800220e:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
		moveNode(direcciones[ADELANTE]);
 8002212:	4b45      	ldr	r3, [pc, #276]	; (8002328 <ChooseNextNode+0x208>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4618      	mov	r0, r3
 8002218:	f000 fa3c 	bl	8002694 <moveNode>
		return ADELANTE;
 800221c:	2300      	movs	r3, #0
 800221e:	e121      	b.n	8002464 <ChooseNextNode+0x344>
	} else if (Map[x][y].Lados[direcciones[IZQUIERDA]] == 0) {
 8002220:	4b41      	ldr	r3, [pc, #260]	; (8002328 <ChooseNextNode+0x208>)
 8002222:	6858      	ldr	r0, [r3, #4]
 8002224:	4c41      	ldr	r4, [pc, #260]	; (800232c <ChooseNextNode+0x20c>)
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	6879      	ldr	r1, [r7, #4]
 800222a:	461a      	mov	r2, r3
 800222c:	0052      	lsls	r2, r2, #1
 800222e:	441a      	add	r2, r3
 8002230:	0053      	lsls	r3, r2, #1
 8002232:	461a      	mov	r2, r3
 8002234:	460b      	mov	r3, r1
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	440b      	add	r3, r1
 800223a:	015b      	lsls	r3, r3, #5
 800223c:	4413      	add	r3, r2
 800223e:	4403      	add	r3, r0
 8002240:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d179      	bne.n	800233c <ChooseNextNode+0x21c>
		TX_BUFFER[0] = 'I';
 8002248:	4b39      	ldr	r3, [pc, #228]	; (8002330 <ChooseNextNode+0x210>)
 800224a:	2249      	movs	r2, #73	; 0x49
 800224c:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = '\n';
 800224e:	4b38      	ldr	r3, [pc, #224]	; (8002330 <ChooseNextNode+0x210>)
 8002250:	220a      	movs	r2, #10
 8002252:	705a      	strb	r2, [r3, #1]
		HAL_UART_Transmit(&huart1, TX_BUFFER, 2, 100);
 8002254:	2364      	movs	r3, #100	; 0x64
 8002256:	2202      	movs	r2, #2
 8002258:	4935      	ldr	r1, [pc, #212]	; (8002330 <ChooseNextNode+0x210>)
 800225a:	4836      	ldr	r0, [pc, #216]	; (8002334 <ChooseNextNode+0x214>)
 800225c:	f004 f89d 	bl	800639a <HAL_UART_Transmit>
		Map[x][y].Lados[direcciones[IZQUIERDA]] = 2;
 8002260:	4b31      	ldr	r3, [pc, #196]	; (8002328 <ChooseNextNode+0x208>)
 8002262:	6858      	ldr	r0, [r3, #4]
 8002264:	4c31      	ldr	r4, [pc, #196]	; (800232c <ChooseNextNode+0x20c>)
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	6879      	ldr	r1, [r7, #4]
 800226a:	461a      	mov	r2, r3
 800226c:	0052      	lsls	r2, r2, #1
 800226e:	441a      	add	r2, r3
 8002270:	0053      	lsls	r3, r2, #1
 8002272:	461a      	mov	r2, r3
 8002274:	460b      	mov	r3, r1
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	440b      	add	r3, r1
 800227a:	015b      	lsls	r3, r3, #5
 800227c:	4413      	add	r3, r2
 800227e:	4403      	add	r3, r0
 8002280:	2202      	movs	r2, #2
 8002282:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
		if (Map[x][y].visitado > 1) {
 8002286:	4829      	ldr	r0, [pc, #164]	; (800232c <ChooseNextNode+0x20c>)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	6879      	ldr	r1, [r7, #4]
 800228c:	461a      	mov	r2, r3
 800228e:	0052      	lsls	r2, r2, #1
 8002290:	441a      	add	r2, r3
 8002292:	00d3      	lsls	r3, r2, #3
 8002294:	461a      	mov	r2, r3
 8002296:	460b      	mov	r3, r1
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	440b      	add	r3, r1
 800229c:	01db      	lsls	r3, r3, #7
 800229e:	4413      	add	r3, r2
 80022a0:	4403      	add	r3, r0
 80022a2:	3310      	adds	r3, #16
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	dd07      	ble.n	80022ba <ChooseNextNode+0x19a>
			EliminateNode(x, y);
 80022aa:	6839      	ldr	r1, [r7, #0]
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f000 f8e7 	bl	8002480 <EliminateNode>
			intUartSend(5000);
 80022b2:	f241 3088 	movw	r0, #5000	; 0x1388
 80022b6:	f7ff f96f 	bl	8001598 <intUartSend>
		}
		moveNode(direcciones[IZQUIERDA]);
 80022ba:	4b1b      	ldr	r3, [pc, #108]	; (8002328 <ChooseNextNode+0x208>)
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	4618      	mov	r0, r3
 80022c0:	f000 f9e8 	bl	8002694 <moveNode>
		rotateAxis(IZQUIERDA);
 80022c4:	2001      	movs	r0, #1
 80022c6:	f000 fbfd 	bl	8002ac4 <rotateAxis>
		if (Map[actual.x + 1][actual.y].Lados[direcciones[ATRAS]] != 1) {
 80022ca:	4b1b      	ldr	r3, [pc, #108]	; (8002338 <ChooseNextNode+0x218>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	1c59      	adds	r1, r3, #1
 80022d0:	4b19      	ldr	r3, [pc, #100]	; (8002338 <ChooseNextNode+0x218>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	4a14      	ldr	r2, [pc, #80]	; (8002328 <ChooseNextNode+0x208>)
 80022d6:	6890      	ldr	r0, [r2, #8]
 80022d8:	4c14      	ldr	r4, [pc, #80]	; (800232c <ChooseNextNode+0x20c>)
 80022da:	461a      	mov	r2, r3
 80022dc:	0052      	lsls	r2, r2, #1
 80022de:	441a      	add	r2, r3
 80022e0:	0053      	lsls	r3, r2, #1
 80022e2:	461a      	mov	r2, r3
 80022e4:	460b      	mov	r3, r1
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	440b      	add	r3, r1
 80022ea:	015b      	lsls	r3, r3, #5
 80022ec:	4413      	add	r3, r2
 80022ee:	4403      	add	r3, r0
 80022f0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d014      	beq.n	8002322 <ChooseNextNode+0x202>
			Map[actual.x][actual.y].Lados[direcciones[ATRAS]] = 2;
 80022f8:	4b0f      	ldr	r3, [pc, #60]	; (8002338 <ChooseNextNode+0x218>)
 80022fa:	6819      	ldr	r1, [r3, #0]
 80022fc:	4b0e      	ldr	r3, [pc, #56]	; (8002338 <ChooseNextNode+0x218>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	4a09      	ldr	r2, [pc, #36]	; (8002328 <ChooseNextNode+0x208>)
 8002302:	6890      	ldr	r0, [r2, #8]
 8002304:	4c09      	ldr	r4, [pc, #36]	; (800232c <ChooseNextNode+0x20c>)
 8002306:	461a      	mov	r2, r3
 8002308:	0052      	lsls	r2, r2, #1
 800230a:	441a      	add	r2, r3
 800230c:	0053      	lsls	r3, r2, #1
 800230e:	461a      	mov	r2, r3
 8002310:	460b      	mov	r3, r1
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	440b      	add	r3, r1
 8002316:	015b      	lsls	r3, r3, #5
 8002318:	4413      	add	r3, r2
 800231a:	4403      	add	r3, r0
 800231c:	2202      	movs	r2, #2
 800231e:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
		}
		return IZQUIERDA;
 8002322:	2301      	movs	r3, #1
 8002324:	e09e      	b.n	8002464 <ChooseNextNode+0x344>
 8002326:	bf00      	nop
 8002328:	200011ec 	.word	0x200011ec
 800232c:	200012c0 	.word	0x200012c0
 8002330:	2000121c 	.word	0x2000121c
 8002334:	20002bc4 	.word	0x20002bc4
 8002338:	200012b0 	.word	0x200012b0
	} else if (Map[x][y].Lados[direcciones[DERECHA]] == 0) {
 800233c:	4b4b      	ldr	r3, [pc, #300]	; (800246c <ChooseNextNode+0x34c>)
 800233e:	68d8      	ldr	r0, [r3, #12]
 8002340:	4c4b      	ldr	r4, [pc, #300]	; (8002470 <ChooseNextNode+0x350>)
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	6879      	ldr	r1, [r7, #4]
 8002346:	461a      	mov	r2, r3
 8002348:	0052      	lsls	r2, r2, #1
 800234a:	441a      	add	r2, r3
 800234c:	0053      	lsls	r3, r2, #1
 800234e:	461a      	mov	r2, r3
 8002350:	460b      	mov	r3, r1
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	440b      	add	r3, r1
 8002356:	015b      	lsls	r3, r3, #5
 8002358:	4413      	add	r3, r2
 800235a:	4403      	add	r3, r0
 800235c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d16e      	bne.n	8002442 <ChooseNextNode+0x322>
		TX_BUFFER[0] = 'D';
 8002364:	4b43      	ldr	r3, [pc, #268]	; (8002474 <ChooseNextNode+0x354>)
 8002366:	2244      	movs	r2, #68	; 0x44
 8002368:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = '\n';
 800236a:	4b42      	ldr	r3, [pc, #264]	; (8002474 <ChooseNextNode+0x354>)
 800236c:	220a      	movs	r2, #10
 800236e:	705a      	strb	r2, [r3, #1]
		HAL_UART_Transmit(&huart1, TX_BUFFER, 2, 100);
 8002370:	2364      	movs	r3, #100	; 0x64
 8002372:	2202      	movs	r2, #2
 8002374:	493f      	ldr	r1, [pc, #252]	; (8002474 <ChooseNextNode+0x354>)
 8002376:	4840      	ldr	r0, [pc, #256]	; (8002478 <ChooseNextNode+0x358>)
 8002378:	f004 f80f 	bl	800639a <HAL_UART_Transmit>
		Map[x][y].Lados[direcciones[DERECHA]] = 2;
 800237c:	4b3b      	ldr	r3, [pc, #236]	; (800246c <ChooseNextNode+0x34c>)
 800237e:	68d8      	ldr	r0, [r3, #12]
 8002380:	4c3b      	ldr	r4, [pc, #236]	; (8002470 <ChooseNextNode+0x350>)
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	6879      	ldr	r1, [r7, #4]
 8002386:	461a      	mov	r2, r3
 8002388:	0052      	lsls	r2, r2, #1
 800238a:	441a      	add	r2, r3
 800238c:	0053      	lsls	r3, r2, #1
 800238e:	461a      	mov	r2, r3
 8002390:	460b      	mov	r3, r1
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	440b      	add	r3, r1
 8002396:	015b      	lsls	r3, r3, #5
 8002398:	4413      	add	r3, r2
 800239a:	4403      	add	r3, r0
 800239c:	2202      	movs	r2, #2
 800239e:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
		if (Map[x][y].visitado > 1) {
 80023a2:	4833      	ldr	r0, [pc, #204]	; (8002470 <ChooseNextNode+0x350>)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	6879      	ldr	r1, [r7, #4]
 80023a8:	461a      	mov	r2, r3
 80023aa:	0052      	lsls	r2, r2, #1
 80023ac:	441a      	add	r2, r3
 80023ae:	00d3      	lsls	r3, r2, #3
 80023b0:	461a      	mov	r2, r3
 80023b2:	460b      	mov	r3, r1
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	440b      	add	r3, r1
 80023b8:	01db      	lsls	r3, r3, #7
 80023ba:	4413      	add	r3, r2
 80023bc:	4403      	add	r3, r0
 80023be:	3310      	adds	r3, #16
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	dd07      	ble.n	80023d6 <ChooseNextNode+0x2b6>
			EliminateNode(x, y);
 80023c6:	6839      	ldr	r1, [r7, #0]
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f000 f859 	bl	8002480 <EliminateNode>
			intUartSend(5000);
 80023ce:	f241 3088 	movw	r0, #5000	; 0x1388
 80023d2:	f7ff f8e1 	bl	8001598 <intUartSend>
		}
		moveNode(direcciones[DERECHA]);
 80023d6:	4b25      	ldr	r3, [pc, #148]	; (800246c <ChooseNextNode+0x34c>)
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	4618      	mov	r0, r3
 80023dc:	f000 f95a 	bl	8002694 <moveNode>
		rotateAxis(DERECHA);
 80023e0:	2003      	movs	r0, #3
 80023e2:	f000 fb6f 	bl	8002ac4 <rotateAxis>
		if (Map[actual.x - 1][actual.y].Lados[direcciones[ATRAS]] != 1) {
 80023e6:	4b25      	ldr	r3, [pc, #148]	; (800247c <ChooseNextNode+0x35c>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	1e59      	subs	r1, r3, #1
 80023ec:	4b23      	ldr	r3, [pc, #140]	; (800247c <ChooseNextNode+0x35c>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	4a1e      	ldr	r2, [pc, #120]	; (800246c <ChooseNextNode+0x34c>)
 80023f2:	6890      	ldr	r0, [r2, #8]
 80023f4:	4c1e      	ldr	r4, [pc, #120]	; (8002470 <ChooseNextNode+0x350>)
 80023f6:	461a      	mov	r2, r3
 80023f8:	0052      	lsls	r2, r2, #1
 80023fa:	441a      	add	r2, r3
 80023fc:	0053      	lsls	r3, r2, #1
 80023fe:	461a      	mov	r2, r3
 8002400:	460b      	mov	r3, r1
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	440b      	add	r3, r1
 8002406:	015b      	lsls	r3, r3, #5
 8002408:	4413      	add	r3, r2
 800240a:	4403      	add	r3, r0
 800240c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8002410:	2b01      	cmp	r3, #1
 8002412:	d014      	beq.n	800243e <ChooseNextNode+0x31e>
			Map[actual.x][actual.y].Lados[direcciones[ATRAS]] = 2;
 8002414:	4b19      	ldr	r3, [pc, #100]	; (800247c <ChooseNextNode+0x35c>)
 8002416:	6819      	ldr	r1, [r3, #0]
 8002418:	4b18      	ldr	r3, [pc, #96]	; (800247c <ChooseNextNode+0x35c>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	4a13      	ldr	r2, [pc, #76]	; (800246c <ChooseNextNode+0x34c>)
 800241e:	6890      	ldr	r0, [r2, #8]
 8002420:	4c13      	ldr	r4, [pc, #76]	; (8002470 <ChooseNextNode+0x350>)
 8002422:	461a      	mov	r2, r3
 8002424:	0052      	lsls	r2, r2, #1
 8002426:	441a      	add	r2, r3
 8002428:	0053      	lsls	r3, r2, #1
 800242a:	461a      	mov	r2, r3
 800242c:	460b      	mov	r3, r1
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	440b      	add	r3, r1
 8002432:	015b      	lsls	r3, r3, #5
 8002434:	4413      	add	r3, r2
 8002436:	4403      	add	r3, r0
 8002438:	2202      	movs	r2, #2
 800243a:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
		}
		return DERECHA;
 800243e:	2303      	movs	r3, #3
 8002440:	e010      	b.n	8002464 <ChooseNextNode+0x344>
	} else {
		TX_BUFFER[0] = 'O';
 8002442:	4b0c      	ldr	r3, [pc, #48]	; (8002474 <ChooseNextNode+0x354>)
 8002444:	224f      	movs	r2, #79	; 0x4f
 8002446:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = '\n';
 8002448:	4b0a      	ldr	r3, [pc, #40]	; (8002474 <ChooseNextNode+0x354>)
 800244a:	220a      	movs	r2, #10
 800244c:	705a      	strb	r2, [r3, #1]
		HAL_UART_Transmit(&huart1, TX_BUFFER, 2, 100);
 800244e:	2364      	movs	r3, #100	; 0x64
 8002450:	2202      	movs	r2, #2
 8002452:	4908      	ldr	r1, [pc, #32]	; (8002474 <ChooseNextNode+0x354>)
 8002454:	4808      	ldr	r0, [pc, #32]	; (8002478 <ChooseNextNode+0x358>)
 8002456:	f003 ffa0 	bl	800639a <HAL_UART_Transmit>
		return SearchAvailableNode(x, y);
 800245a:	6839      	ldr	r1, [r7, #0]
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f000 f845 	bl	80024ec <SearchAvailableNode>
 8002462:	4603      	mov	r3, r0
	}

}
 8002464:	4618      	mov	r0, r3
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	bd90      	pop	{r4, r7, pc}
 800246c:	200011ec 	.word	0x200011ec
 8002470:	200012c0 	.word	0x200012c0
 8002474:	2000121c 	.word	0x2000121c
 8002478:	20002bc4 	.word	0x20002bc4
 800247c:	200012b0 	.word	0x200012b0

08002480 <EliminateNode>:
void EliminateNode(int x, int y) {
 8002480:	b490      	push	{r4, r7}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
//Serial.println("Borro");
	Map[x][y].Lados[direcciones[ATRAS]] = 1;
 800248a:	4b15      	ldr	r3, [pc, #84]	; (80024e0 <EliminateNode+0x60>)
 800248c:	6898      	ldr	r0, [r3, #8]
 800248e:	4c15      	ldr	r4, [pc, #84]	; (80024e4 <EliminateNode+0x64>)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	6879      	ldr	r1, [r7, #4]
 8002494:	461a      	mov	r2, r3
 8002496:	0052      	lsls	r2, r2, #1
 8002498:	441a      	add	r2, r3
 800249a:	0053      	lsls	r3, r2, #1
 800249c:	461a      	mov	r2, r3
 800249e:	460b      	mov	r3, r1
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	440b      	add	r3, r1
 80024a4:	015b      	lsls	r3, r3, #5
 80024a6:	4413      	add	r3, r2
 80024a8:	4403      	add	r3, r0
 80024aa:	2201      	movs	r2, #1
 80024ac:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	Map[last.x][last.y].visitado = 0;
 80024b0:	4b0d      	ldr	r3, [pc, #52]	; (80024e8 <EliminateNode+0x68>)
 80024b2:	6819      	ldr	r1, [r3, #0]
 80024b4:	4b0c      	ldr	r3, [pc, #48]	; (80024e8 <EliminateNode+0x68>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	480a      	ldr	r0, [pc, #40]	; (80024e4 <EliminateNode+0x64>)
 80024ba:	461a      	mov	r2, r3
 80024bc:	0052      	lsls	r2, r2, #1
 80024be:	441a      	add	r2, r3
 80024c0:	00d3      	lsls	r3, r2, #3
 80024c2:	461a      	mov	r2, r3
 80024c4:	460b      	mov	r3, r1
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	440b      	add	r3, r1
 80024ca:	01db      	lsls	r3, r3, #7
 80024cc:	4413      	add	r3, r2
 80024ce:	4403      	add	r3, r0
 80024d0:	3310      	adds	r3, #16
 80024d2:	2200      	movs	r2, #0
 80024d4:	601a      	str	r2, [r3, #0]
}
 80024d6:	bf00      	nop
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bc90      	pop	{r4, r7}
 80024de:	4770      	bx	lr
 80024e0:	200011ec 	.word	0x200011ec
 80024e4:	200012c0 	.word	0x200012c0
 80024e8:	200012b8 	.word	0x200012b8

080024ec <SearchAvailableNode>:

int SearchAvailableNode(int x, int y) {
 80024ec:	b590      	push	{r4, r7, lr}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
	if (Map[x][y].Lados[direcciones[ADELANTE]] != 1) {
 80024f6:	4b65      	ldr	r3, [pc, #404]	; (800268c <SearchAvailableNode+0x1a0>)
 80024f8:	6818      	ldr	r0, [r3, #0]
 80024fa:	4c65      	ldr	r4, [pc, #404]	; (8002690 <SearchAvailableNode+0x1a4>)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	6879      	ldr	r1, [r7, #4]
 8002500:	461a      	mov	r2, r3
 8002502:	0052      	lsls	r2, r2, #1
 8002504:	441a      	add	r2, r3
 8002506:	0053      	lsls	r3, r2, #1
 8002508:	461a      	mov	r2, r3
 800250a:	460b      	mov	r3, r1
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	440b      	add	r3, r1
 8002510:	015b      	lsls	r3, r3, #5
 8002512:	4413      	add	r3, r2
 8002514:	4403      	add	r3, r0
 8002516:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d020      	beq.n	8002560 <SearchAvailableNode+0x74>
		//Serial.println("Adelante1");

		if (Map[x][y].visitado > 1) {
 800251e:	485c      	ldr	r0, [pc, #368]	; (8002690 <SearchAvailableNode+0x1a4>)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	6879      	ldr	r1, [r7, #4]
 8002524:	461a      	mov	r2, r3
 8002526:	0052      	lsls	r2, r2, #1
 8002528:	441a      	add	r2, r3
 800252a:	00d3      	lsls	r3, r2, #3
 800252c:	461a      	mov	r2, r3
 800252e:	460b      	mov	r3, r1
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	440b      	add	r3, r1
 8002534:	01db      	lsls	r3, r3, #7
 8002536:	4413      	add	r3, r2
 8002538:	4403      	add	r3, r0
 800253a:	3310      	adds	r3, #16
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2b01      	cmp	r3, #1
 8002540:	dd07      	ble.n	8002552 <SearchAvailableNode+0x66>
			EliminateNode(x, y);
 8002542:	6839      	ldr	r1, [r7, #0]
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f7ff ff9b 	bl	8002480 <EliminateNode>
			intUartSend(4000);
 800254a:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800254e:	f7ff f823 	bl	8001598 <intUartSend>
		}
		moveNode(direcciones[ADELANTE]);
 8002552:	4b4e      	ldr	r3, [pc, #312]	; (800268c <SearchAvailableNode+0x1a0>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4618      	mov	r0, r3
 8002558:	f000 f89c 	bl	8002694 <moveNode>
		return ADELANTE;
 800255c:	2300      	movs	r3, #0
 800255e:	e091      	b.n	8002684 <SearchAvailableNode+0x198>
	} else if (Map[x][y].Lados[direcciones[IZQUIERDA]] != 1) {
 8002560:	4b4a      	ldr	r3, [pc, #296]	; (800268c <SearchAvailableNode+0x1a0>)
 8002562:	6858      	ldr	r0, [r3, #4]
 8002564:	4c4a      	ldr	r4, [pc, #296]	; (8002690 <SearchAvailableNode+0x1a4>)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	6879      	ldr	r1, [r7, #4]
 800256a:	461a      	mov	r2, r3
 800256c:	0052      	lsls	r2, r2, #1
 800256e:	441a      	add	r2, r3
 8002570:	0053      	lsls	r3, r2, #1
 8002572:	461a      	mov	r2, r3
 8002574:	460b      	mov	r3, r1
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	440b      	add	r3, r1
 800257a:	015b      	lsls	r3, r3, #5
 800257c:	4413      	add	r3, r2
 800257e:	4403      	add	r3, r0
 8002580:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8002584:	2b01      	cmp	r3, #1
 8002586:	d023      	beq.n	80025d0 <SearchAvailableNode+0xe4>
		//Serial.println("IZQUIERDA1");l
		//moveNode(IZQUIERDA);
		//rotateAxis(IZQUIERDA);
		if (Map[x][y].visitado > 1) {
 8002588:	4841      	ldr	r0, [pc, #260]	; (8002690 <SearchAvailableNode+0x1a4>)
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	6879      	ldr	r1, [r7, #4]
 800258e:	461a      	mov	r2, r3
 8002590:	0052      	lsls	r2, r2, #1
 8002592:	441a      	add	r2, r3
 8002594:	00d3      	lsls	r3, r2, #3
 8002596:	461a      	mov	r2, r3
 8002598:	460b      	mov	r3, r1
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	440b      	add	r3, r1
 800259e:	01db      	lsls	r3, r3, #7
 80025a0:	4413      	add	r3, r2
 80025a2:	4403      	add	r3, r0
 80025a4:	3310      	adds	r3, #16
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	dd07      	ble.n	80025bc <SearchAvailableNode+0xd0>
			EliminateNode(x, y);
 80025ac:	6839      	ldr	r1, [r7, #0]
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f7ff ff66 	bl	8002480 <EliminateNode>
			intUartSend(4000);
 80025b4:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80025b8:	f7fe ffee 	bl	8001598 <intUartSend>
		}
		moveNode(direcciones[IZQUIERDA]);
 80025bc:	4b33      	ldr	r3, [pc, #204]	; (800268c <SearchAvailableNode+0x1a0>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f000 f867 	bl	8002694 <moveNode>
		rotateAxis(IZQUIERDA);
 80025c6:	2001      	movs	r0, #1
 80025c8:	f000 fa7c 	bl	8002ac4 <rotateAxis>
		return IZQUIERDA;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e059      	b.n	8002684 <SearchAvailableNode+0x198>
	} else if (Map[x][y].Lados[direcciones[DERECHA]] != 1) {
 80025d0:	4b2e      	ldr	r3, [pc, #184]	; (800268c <SearchAvailableNode+0x1a0>)
 80025d2:	68d8      	ldr	r0, [r3, #12]
 80025d4:	4c2e      	ldr	r4, [pc, #184]	; (8002690 <SearchAvailableNode+0x1a4>)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	6879      	ldr	r1, [r7, #4]
 80025da:	461a      	mov	r2, r3
 80025dc:	0052      	lsls	r2, r2, #1
 80025de:	441a      	add	r2, r3
 80025e0:	0053      	lsls	r3, r2, #1
 80025e2:	461a      	mov	r2, r3
 80025e4:	460b      	mov	r3, r1
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	440b      	add	r3, r1
 80025ea:	015b      	lsls	r3, r3, #5
 80025ec:	4413      	add	r3, r2
 80025ee:	4403      	add	r3, r0
 80025f0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d023      	beq.n	8002640 <SearchAvailableNode+0x154>
		//Serial.println("DERECHA1");
		if (Map[x][y].visitado > 1) {
 80025f8:	4825      	ldr	r0, [pc, #148]	; (8002690 <SearchAvailableNode+0x1a4>)
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	6879      	ldr	r1, [r7, #4]
 80025fe:	461a      	mov	r2, r3
 8002600:	0052      	lsls	r2, r2, #1
 8002602:	441a      	add	r2, r3
 8002604:	00d3      	lsls	r3, r2, #3
 8002606:	461a      	mov	r2, r3
 8002608:	460b      	mov	r3, r1
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	440b      	add	r3, r1
 800260e:	01db      	lsls	r3, r3, #7
 8002610:	4413      	add	r3, r2
 8002612:	4403      	add	r3, r0
 8002614:	3310      	adds	r3, #16
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2b01      	cmp	r3, #1
 800261a:	dd07      	ble.n	800262c <SearchAvailableNode+0x140>
			EliminateNode(x, y);
 800261c:	6839      	ldr	r1, [r7, #0]
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f7ff ff2e 	bl	8002480 <EliminateNode>
			intUartSend(4000);
 8002624:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8002628:	f7fe ffb6 	bl	8001598 <intUartSend>
		}
		moveNode(direcciones[DERECHA]);
 800262c:	4b17      	ldr	r3, [pc, #92]	; (800268c <SearchAvailableNode+0x1a0>)
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	4618      	mov	r0, r3
 8002632:	f000 f82f 	bl	8002694 <moveNode>
		rotateAxis(DERECHA);
 8002636:	2003      	movs	r0, #3
 8002638:	f000 fa44 	bl	8002ac4 <rotateAxis>
		return DERECHA;
 800263c:	2303      	movs	r3, #3
 800263e:	e021      	b.n	8002684 <SearchAvailableNode+0x198>
	} else if (Map[x][y].Lados[direcciones[ATRAS]] != 1) {
 8002640:	4b12      	ldr	r3, [pc, #72]	; (800268c <SearchAvailableNode+0x1a0>)
 8002642:	6898      	ldr	r0, [r3, #8]
 8002644:	4c12      	ldr	r4, [pc, #72]	; (8002690 <SearchAvailableNode+0x1a4>)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	6879      	ldr	r1, [r7, #4]
 800264a:	461a      	mov	r2, r3
 800264c:	0052      	lsls	r2, r2, #1
 800264e:	441a      	add	r2, r3
 8002650:	0053      	lsls	r3, r2, #1
 8002652:	461a      	mov	r2, r3
 8002654:	460b      	mov	r3, r1
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	440b      	add	r3, r1
 800265a:	015b      	lsls	r3, r3, #5
 800265c:	4413      	add	r3, r2
 800265e:	4403      	add	r3, r0
 8002660:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8002664:	2b01      	cmp	r3, #1
 8002666:	d00c      	beq.n	8002682 <SearchAvailableNode+0x196>
		moveNode(direcciones[ATRAS]);
 8002668:	4b08      	ldr	r3, [pc, #32]	; (800268c <SearchAvailableNode+0x1a0>)
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	4618      	mov	r0, r3
 800266e:	f000 f811 	bl	8002694 <moveNode>
		rotateAxis(DERECHA);
 8002672:	2003      	movs	r0, #3
 8002674:	f000 fa26 	bl	8002ac4 <rotateAxis>
		rotateAxis(DERECHA);
 8002678:	2003      	movs	r0, #3
 800267a:	f000 fa23 	bl	8002ac4 <rotateAxis>
		return ATRAS;
 800267e:	2302      	movs	r3, #2
 8002680:	e000      	b.n	8002684 <SearchAvailableNode+0x198>
	}
	return 0;
 8002682:	2300      	movs	r3, #0
}
 8002684:	4618      	mov	r0, r3
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	bd90      	pop	{r4, r7, pc}
 800268c:	200011ec 	.word	0x200011ec
 8002690:	200012c0 	.word	0x200012c0

08002694 <moveNode>:
void moveNode(int lado) {
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
	switch (lado) {
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2b03      	cmp	r3, #3
 80026a0:	d822      	bhi.n	80026e8 <moveNode+0x54>
 80026a2:	a201      	add	r2, pc, #4	; (adr r2, 80026a8 <moveNode+0x14>)
 80026a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026a8:	080026b9 	.word	0x080026b9
 80026ac:	080026c5 	.word	0x080026c5
 80026b0:	080026dd 	.word	0x080026dd
 80026b4:	080026d1 	.word	0x080026d1
	case ADELANTE:
		//if (visual.y != ALTO - 1) {
		actual.y++;
 80026b8:	4b0e      	ldr	r3, [pc, #56]	; (80026f4 <moveNode+0x60>)
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	3301      	adds	r3, #1
 80026be:	4a0d      	ldr	r2, [pc, #52]	; (80026f4 <moveNode+0x60>)
 80026c0:	6053      	str	r3, [r2, #4]
		//visual.y++;
		//}
		break;
 80026c2:	e011      	b.n	80026e8 <moveNode+0x54>
	case IZQUIERDA:
		//if (visual.x != 0) {
		actual.x--;
 80026c4:	4b0b      	ldr	r3, [pc, #44]	; (80026f4 <moveNode+0x60>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	3b01      	subs	r3, #1
 80026ca:	4a0a      	ldr	r2, [pc, #40]	; (80026f4 <moveNode+0x60>)
 80026cc:	6013      	str	r3, [r2, #0]
		//visual.x--;
		//}
		break;
 80026ce:	e00b      	b.n	80026e8 <moveNode+0x54>
	case DERECHA:
		// if (visual.x != ANCHO - 1) {
		actual.x++;
 80026d0:	4b08      	ldr	r3, [pc, #32]	; (80026f4 <moveNode+0x60>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	3301      	adds	r3, #1
 80026d6:	4a07      	ldr	r2, [pc, #28]	; (80026f4 <moveNode+0x60>)
 80026d8:	6013      	str	r3, [r2, #0]
		// visual.x++;
		// }
		break;
 80026da:	e005      	b.n	80026e8 <moveNode+0x54>
	case ATRAS:
		// if (visual.y != 0) {
		actual.y--;
 80026dc:	4b05      	ldr	r3, [pc, #20]	; (80026f4 <moveNode+0x60>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	3b01      	subs	r3, #1
 80026e2:	4a04      	ldr	r2, [pc, #16]	; (80026f4 <moveNode+0x60>)
 80026e4:	6053      	str	r3, [r2, #4]
		// visual.y--;
		// }

		break;
 80026e6:	bf00      	nop
	}
}
 80026e8:	bf00      	nop
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bc80      	pop	{r7}
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	200012b0 	.word	0x200012b0

080026f8 <movementMachine>:
 offset = 30;
 }
 break;
 }
 }*/
void movementMachine(int move) {
 80026f8:	b590      	push	{r4, r7, lr}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
	switch (movementState) {
 8002700:	4baa      	ldr	r3, [pc, #680]	; (80029ac <movementMachine+0x2b4>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2b05      	cmp	r3, #5
 8002706:	f200 814c 	bhi.w	80029a2 <movementMachine+0x2aa>
 800270a:	a201      	add	r2, pc, #4	; (adr r2, 8002710 <movementMachine+0x18>)
 800270c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002710:	08002765 	.word	0x08002765
 8002714:	08002807 	.word	0x08002807
 8002718:	08002917 	.word	0x08002917
 800271c:	0800288f 	.word	0x0800288f
 8002720:	080029a3 	.word	0x080029a3
 8002724:	08002729 	.word	0x08002729
	case OFF:
		runMotor(OFF, MOTOR_A);
 8002728:	2100      	movs	r1, #0
 800272a:	2005      	movs	r0, #5
 800272c:	f000 fdbe 	bl	80032ac <runMotor>
		runMotor(OFF, MOTOR_B);
 8002730:	2101      	movs	r1, #1
 8002732:	2005      	movs	r0, #5
 8002734:	f000 fdba 	bl	80032ac <runMotor>
		if (move != OFF) {
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2b05      	cmp	r3, #5
 800273c:	f000 8130 	beq.w	80029a0 <movementMachine+0x2a8>
			movementState = move;
 8002740:	4a9a      	ldr	r2, [pc, #616]	; (80029ac <movementMachine+0x2b4>)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6013      	str	r3, [r2, #0]
			TIM3->CNT = 0;
 8002746:	4b9a      	ldr	r3, [pc, #616]	; (80029b0 <movementMachine+0x2b8>)
 8002748:	2200      	movs	r2, #0
 800274a:	625a      	str	r2, [r3, #36]	; 0x24
			TIM4->CNT = 0;
 800274c:	4b99      	ldr	r3, [pc, #612]	; (80029b4 <movementMachine+0x2bc>)
 800274e:	2200      	movs	r2, #0
 8002750:	625a      	str	r2, [r3, #36]	; 0x24
			if (move == IZQUIERDA) {
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2b01      	cmp	r3, #1
 8002756:	f040 8123 	bne.w	80029a0 <movementMachine+0x2a8>
				TIM3->CNT = 500 + 100;
 800275a:	4b95      	ldr	r3, [pc, #596]	; (80029b0 <movementMachine+0x2b8>)
 800275c:	f44f 7216 	mov.w	r2, #600	; 0x258
 8002760:	625a      	str	r2, [r3, #36]	; 0x24
			}
			//intUartSend(TIM3->CNT);
		}
		break;
 8002762:	e11d      	b.n	80029a0 <movementMachine+0x2a8>
	case ADELANTE:
		//intUartSend((int) calcularDistancia(TIM3->CNT));
		if ((calcularDistancia((TIM3->CNT >> 1)) < forwardChoice[choice]) || (calcularDistancia((TIM4->CNT >> 1)) < forwardChoice[choice]) /*&& Sensors[2] > 5*/) {
 8002764:	4b92      	ldr	r3, [pc, #584]	; (80029b0 <movementMachine+0x2b8>)
 8002766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002768:	085b      	lsrs	r3, r3, #1
 800276a:	4618      	mov	r0, r3
 800276c:	f000 fd78 	bl	8003260 <calcularDistancia>
 8002770:	4604      	mov	r4, r0
 8002772:	4b91      	ldr	r3, [pc, #580]	; (80029b8 <movementMachine+0x2c0>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a91      	ldr	r2, [pc, #580]	; (80029bc <movementMachine+0x2c4>)
 8002778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800277c:	4618      	mov	r0, r3
 800277e:	f7fe fa5d 	bl	8000c3c <__aeabi_i2f>
 8002782:	4603      	mov	r3, r0
 8002784:	4619      	mov	r1, r3
 8002786:	4620      	mov	r0, r4
 8002788:	f7fe fc4a 	bl	8001020 <__aeabi_fcmplt>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d116      	bne.n	80027c0 <movementMachine+0xc8>
 8002792:	4b88      	ldr	r3, [pc, #544]	; (80029b4 <movementMachine+0x2bc>)
 8002794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002796:	085b      	lsrs	r3, r3, #1
 8002798:	4618      	mov	r0, r3
 800279a:	f000 fd61 	bl	8003260 <calcularDistancia>
 800279e:	4604      	mov	r4, r0
 80027a0:	4b85      	ldr	r3, [pc, #532]	; (80029b8 <movementMachine+0x2c0>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a85      	ldr	r2, [pc, #532]	; (80029bc <movementMachine+0x2c4>)
 80027a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7fe fa46 	bl	8000c3c <__aeabi_i2f>
 80027b0:	4603      	mov	r3, r0
 80027b2:	4619      	mov	r1, r3
 80027b4:	4620      	mov	r0, r4
 80027b6:	f7fe fc33 	bl	8001020 <__aeabi_fcmplt>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d00a      	beq.n	80027d6 <movementMachine+0xde>
			moveStraight();
 80027c0:	f000 fb02 	bl	8002dc8 <moveStraight>
			runMotor(ADELANTE, MOTOR_A);
 80027c4:	2100      	movs	r1, #0
 80027c6:	2000      	movs	r0, #0
 80027c8:	f000 fd70 	bl	80032ac <runMotor>
			runMotor(ADELANTE, MOTOR_B);
 80027cc:	2101      	movs	r1, #1
 80027ce:	2000      	movs	r0, #0
 80027d0:	f000 fd6c 	bl	80032ac <runMotor>
			TIM3->CNT = 0;
			TIM4->CNT = 0;
			offset = 0;
			//intUartSend(10);
		}
		break;
 80027d4:	e0e5      	b.n	80029a2 <movementMachine+0x2aa>
			movimientoFlag = 1;
 80027d6:	4b7a      	ldr	r3, [pc, #488]	; (80029c0 <movementMachine+0x2c8>)
 80027d8:	2201      	movs	r2, #1
 80027da:	601a      	str	r2, [r3, #0]
			movementState = OFF;
 80027dc:	4b73      	ldr	r3, [pc, #460]	; (80029ac <movementMachine+0x2b4>)
 80027de:	2205      	movs	r2, #5
 80027e0:	601a      	str	r2, [r3, #0]
			runMotor(OFF, MOTOR_A);
 80027e2:	2100      	movs	r1, #0
 80027e4:	2005      	movs	r0, #5
 80027e6:	f000 fd61 	bl	80032ac <runMotor>
			runMotor(OFF, MOTOR_B);
 80027ea:	2101      	movs	r1, #1
 80027ec:	2005      	movs	r0, #5
 80027ee:	f000 fd5d 	bl	80032ac <runMotor>
			TIM3->CNT = 0;
 80027f2:	4b6f      	ldr	r3, [pc, #444]	; (80029b0 <movementMachine+0x2b8>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	625a      	str	r2, [r3, #36]	; 0x24
			TIM4->CNT = 0;
 80027f8:	4b6e      	ldr	r3, [pc, #440]	; (80029b4 <movementMachine+0x2bc>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	625a      	str	r2, [r3, #36]	; 0x24
			offset = 0;
 80027fe:	4b71      	ldr	r3, [pc, #452]	; (80029c4 <movementMachine+0x2cc>)
 8002800:	2200      	movs	r2, #0
 8002802:	601a      	str	r2, [r3, #0]
		break;
 8002804:	e0cd      	b.n	80029a2 <movementMachine+0x2aa>
	case IZQUIERDA:
		TIM2->CCR3 = baseChoice[choice];
 8002806:	4b6c      	ldr	r3, [pc, #432]	; (80029b8 <movementMachine+0x2c0>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a6f      	ldr	r2, [pc, #444]	; (80029c8 <movementMachine+0x2d0>)
 800280c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002810:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002814:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM2->CCR4 = baseChoice[choice];
 8002816:	4b68      	ldr	r3, [pc, #416]	; (80029b8 <movementMachine+0x2c0>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a6b      	ldr	r2, [pc, #428]	; (80029c8 <movementMachine+0x2d0>)
 800281c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002820:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002824:	641a      	str	r2, [r3, #64]	; 0x40
		//intUartSend((TIM3->CNT));
		if (calcularDistancia((TIM4->CNT)) < LeftChoice[choice]) {
 8002826:	4b63      	ldr	r3, [pc, #396]	; (80029b4 <movementMachine+0x2bc>)
 8002828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282a:	4618      	mov	r0, r3
 800282c:	f000 fd18 	bl	8003260 <calcularDistancia>
 8002830:	4604      	mov	r4, r0
 8002832:	4b61      	ldr	r3, [pc, #388]	; (80029b8 <movementMachine+0x2c0>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a65      	ldr	r2, [pc, #404]	; (80029cc <movementMachine+0x2d4>)
 8002838:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800283c:	4618      	mov	r0, r3
 800283e:	f7fe f9fd 	bl	8000c3c <__aeabi_i2f>
 8002842:	4603      	mov	r3, r0
 8002844:	4619      	mov	r1, r3
 8002846:	4620      	mov	r0, r4
 8002848:	f7fe fbea 	bl	8001020 <__aeabi_fcmplt>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d008      	beq.n	8002864 <movementMachine+0x16c>
			runMotor(ADELANTE, MOTOR_A);
 8002852:	2100      	movs	r1, #0
 8002854:	2000      	movs	r0, #0
 8002856:	f000 fd29 	bl	80032ac <runMotor>
			runMotor(ATRAS, MOTOR_B);
 800285a:	2101      	movs	r1, #1
 800285c:	2002      	movs	r0, #2
 800285e:	f000 fd25 	bl	80032ac <runMotor>
			TIM3->CNT = 0;
			TIM4->CNT = 0;
			offset = 30;
			//intUartSend(9);
		}
		break;
 8002862:	e09e      	b.n	80029a2 <movementMachine+0x2aa>
			movementState = ADELANTE;
 8002864:	4b51      	ldr	r3, [pc, #324]	; (80029ac <movementMachine+0x2b4>)
 8002866:	2200      	movs	r2, #0
 8002868:	601a      	str	r2, [r3, #0]
			runMotor(OFF, MOTOR_A);
 800286a:	2100      	movs	r1, #0
 800286c:	2005      	movs	r0, #5
 800286e:	f000 fd1d 	bl	80032ac <runMotor>
			runMotor(OFF, MOTOR_B);
 8002872:	2101      	movs	r1, #1
 8002874:	2005      	movs	r0, #5
 8002876:	f000 fd19 	bl	80032ac <runMotor>
			TIM3->CNT = 0;
 800287a:	4b4d      	ldr	r3, [pc, #308]	; (80029b0 <movementMachine+0x2b8>)
 800287c:	2200      	movs	r2, #0
 800287e:	625a      	str	r2, [r3, #36]	; 0x24
			TIM4->CNT = 0;
 8002880:	4b4c      	ldr	r3, [pc, #304]	; (80029b4 <movementMachine+0x2bc>)
 8002882:	2200      	movs	r2, #0
 8002884:	625a      	str	r2, [r3, #36]	; 0x24
			offset = 30;
 8002886:	4b4f      	ldr	r3, [pc, #316]	; (80029c4 <movementMachine+0x2cc>)
 8002888:	221e      	movs	r2, #30
 800288a:	601a      	str	r2, [r3, #0]
		break;
 800288c:	e089      	b.n	80029a2 <movementMachine+0x2aa>
	case DERECHA:
		TIM2->CCR3 = baseChoice[choice];
 800288e:	4b4a      	ldr	r3, [pc, #296]	; (80029b8 <movementMachine+0x2c0>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a4d      	ldr	r2, [pc, #308]	; (80029c8 <movementMachine+0x2d0>)
 8002894:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002898:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800289c:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM2->CCR4 = baseChoice[choice];
 800289e:	4b46      	ldr	r3, [pc, #280]	; (80029b8 <movementMachine+0x2c0>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a49      	ldr	r2, [pc, #292]	; (80029c8 <movementMachine+0x2d0>)
 80028a4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80028a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80028ac:	641a      	str	r2, [r3, #64]	; 0x40
		if (calcularDistancia((TIM3->CNT)) < RightChoice[choice]) {
 80028ae:	4b40      	ldr	r3, [pc, #256]	; (80029b0 <movementMachine+0x2b8>)
 80028b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b2:	4618      	mov	r0, r3
 80028b4:	f000 fcd4 	bl	8003260 <calcularDistancia>
 80028b8:	4604      	mov	r4, r0
 80028ba:	4b3f      	ldr	r3, [pc, #252]	; (80029b8 <movementMachine+0x2c0>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a44      	ldr	r2, [pc, #272]	; (80029d0 <movementMachine+0x2d8>)
 80028c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7fe f9b9 	bl	8000c3c <__aeabi_i2f>
 80028ca:	4603      	mov	r3, r0
 80028cc:	4619      	mov	r1, r3
 80028ce:	4620      	mov	r0, r4
 80028d0:	f7fe fba6 	bl	8001020 <__aeabi_fcmplt>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d008      	beq.n	80028ec <movementMachine+0x1f4>
			runMotor(ATRAS, MOTOR_A);
 80028da:	2100      	movs	r1, #0
 80028dc:	2002      	movs	r0, #2
 80028de:	f000 fce5 	bl	80032ac <runMotor>
			runMotor(ADELANTE, MOTOR_B);
 80028e2:	2101      	movs	r1, #1
 80028e4:	2000      	movs	r0, #0
 80028e6:	f000 fce1 	bl	80032ac <runMotor>
			TIM3->CNT = 0;
			TIM4->CNT = 0;
			offset = 30;
			//intUartSend(8);
		}
		break;
 80028ea:	e05a      	b.n	80029a2 <movementMachine+0x2aa>
			movementState = ADELANTE;
 80028ec:	4b2f      	ldr	r3, [pc, #188]	; (80029ac <movementMachine+0x2b4>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	601a      	str	r2, [r3, #0]
			runMotor(OFF, MOTOR_A);
 80028f2:	2100      	movs	r1, #0
 80028f4:	2005      	movs	r0, #5
 80028f6:	f000 fcd9 	bl	80032ac <runMotor>
			runMotor(OFF, MOTOR_B);
 80028fa:	2101      	movs	r1, #1
 80028fc:	2005      	movs	r0, #5
 80028fe:	f000 fcd5 	bl	80032ac <runMotor>
			TIM3->CNT = 0;
 8002902:	4b2b      	ldr	r3, [pc, #172]	; (80029b0 <movementMachine+0x2b8>)
 8002904:	2200      	movs	r2, #0
 8002906:	625a      	str	r2, [r3, #36]	; 0x24
			TIM4->CNT = 0;
 8002908:	4b2a      	ldr	r3, [pc, #168]	; (80029b4 <movementMachine+0x2bc>)
 800290a:	2200      	movs	r2, #0
 800290c:	625a      	str	r2, [r3, #36]	; 0x24
			offset = 30;
 800290e:	4b2d      	ldr	r3, [pc, #180]	; (80029c4 <movementMachine+0x2cc>)
 8002910:	221e      	movs	r2, #30
 8002912:	601a      	str	r2, [r3, #0]
		break;
 8002914:	e045      	b.n	80029a2 <movementMachine+0x2aa>
	case ATRAS:
		TIM2->CCR3 = baseChoice[choice];
 8002916:	4b28      	ldr	r3, [pc, #160]	; (80029b8 <movementMachine+0x2c0>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a2b      	ldr	r2, [pc, #172]	; (80029c8 <movementMachine+0x2d0>)
 800291c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002920:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002924:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM2->CCR4 = baseChoice[choice];
 8002926:	4b24      	ldr	r3, [pc, #144]	; (80029b8 <movementMachine+0x2c0>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a27      	ldr	r2, [pc, #156]	; (80029c8 <movementMachine+0x2d0>)
 800292c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002930:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002934:	641a      	str	r2, [r3, #64]	; 0x40
		if (calcularDistancia((TIM3->CNT)) < RightChoice[choice] * 2) {
 8002936:	4b1e      	ldr	r3, [pc, #120]	; (80029b0 <movementMachine+0x2b8>)
 8002938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293a:	4618      	mov	r0, r3
 800293c:	f000 fc90 	bl	8003260 <calcularDistancia>
 8002940:	4604      	mov	r4, r0
 8002942:	4b1d      	ldr	r3, [pc, #116]	; (80029b8 <movementMachine+0x2c0>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a22      	ldr	r2, [pc, #136]	; (80029d0 <movementMachine+0x2d8>)
 8002948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	4618      	mov	r0, r3
 8002950:	f7fe f974 	bl	8000c3c <__aeabi_i2f>
 8002954:	4603      	mov	r3, r0
 8002956:	4619      	mov	r1, r3
 8002958:	4620      	mov	r0, r4
 800295a:	f7fe fb61 	bl	8001020 <__aeabi_fcmplt>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d008      	beq.n	8002976 <movementMachine+0x27e>
			runMotor(ATRAS, MOTOR_A);
 8002964:	2100      	movs	r1, #0
 8002966:	2002      	movs	r0, #2
 8002968:	f000 fca0 	bl	80032ac <runMotor>
			runMotor(ADELANTE, MOTOR_B);
 800296c:	2101      	movs	r1, #1
 800296e:	2000      	movs	r0, #0
 8002970:	f000 fc9c 	bl	80032ac <runMotor>
			TIM3->CNT = 0;
			TIM4->CNT = 0;
			offset = 30;
			//intUartSend(7);
		}
		break;
 8002974:	e015      	b.n	80029a2 <movementMachine+0x2aa>
			movementState = ADELANTE;
 8002976:	4b0d      	ldr	r3, [pc, #52]	; (80029ac <movementMachine+0x2b4>)
 8002978:	2200      	movs	r2, #0
 800297a:	601a      	str	r2, [r3, #0]
			runMotor(OFF, MOTOR_A);
 800297c:	2100      	movs	r1, #0
 800297e:	2005      	movs	r0, #5
 8002980:	f000 fc94 	bl	80032ac <runMotor>
			runMotor(OFF, MOTOR_B);
 8002984:	2101      	movs	r1, #1
 8002986:	2005      	movs	r0, #5
 8002988:	f000 fc90 	bl	80032ac <runMotor>
			TIM3->CNT = 0;
 800298c:	4b08      	ldr	r3, [pc, #32]	; (80029b0 <movementMachine+0x2b8>)
 800298e:	2200      	movs	r2, #0
 8002990:	625a      	str	r2, [r3, #36]	; 0x24
			TIM4->CNT = 0;
 8002992:	4b08      	ldr	r3, [pc, #32]	; (80029b4 <movementMachine+0x2bc>)
 8002994:	2200      	movs	r2, #0
 8002996:	625a      	str	r2, [r3, #36]	; 0x24
			offset = 30;
 8002998:	4b0a      	ldr	r3, [pc, #40]	; (80029c4 <movementMachine+0x2cc>)
 800299a:	221e      	movs	r2, #30
 800299c:	601a      	str	r2, [r3, #0]
		break;
 800299e:	e000      	b.n	80029a2 <movementMachine+0x2aa>
		break;
 80029a0:	bf00      	nop

	}
}
 80029a2:	bf00      	nop
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd90      	pop	{r4, r7, pc}
 80029aa:	bf00      	nop
 80029ac:	20000038 	.word	0x20000038
 80029b0:	40000400 	.word	0x40000400
 80029b4:	40000800 	.word	0x40000800
 80029b8:	20001238 	.word	0x20001238
 80029bc:	20000020 	.word	0x20000020
 80029c0:	2000124c 	.word	0x2000124c
 80029c4:	20001254 	.word	0x20001254
 80029c8:	20000018 	.word	0x20000018
 80029cc:	20000030 	.word	0x20000030
 80029d0:	20000028 	.word	0x20000028

080029d4 <CreateNode>:

void CreateNode(int x, int y) {
 80029d4:	b5b0      	push	{r4, r5, r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
	Map[x][y].Lados[direcciones[ADELANTE]] = lecturaSensor(ADELANTE, Sensors);
 80029de:	4936      	ldr	r1, [pc, #216]	; (8002ab8 <CreateNode+0xe4>)
 80029e0:	2000      	movs	r0, #0
 80029e2:	f000 fccf 	bl	8003384 <lecturaSensor>
 80029e6:	4603      	mov	r3, r0
 80029e8:	4a34      	ldr	r2, [pc, #208]	; (8002abc <CreateNode+0xe8>)
 80029ea:	6814      	ldr	r4, [r2, #0]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7fe fb3f 	bl	8001070 <__aeabi_f2iz>
 80029f2:	4d33      	ldr	r5, [pc, #204]	; (8002ac0 <CreateNode+0xec>)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	6879      	ldr	r1, [r7, #4]
 80029f8:	461a      	mov	r2, r3
 80029fa:	0052      	lsls	r2, r2, #1
 80029fc:	441a      	add	r2, r3
 80029fe:	0053      	lsls	r3, r2, #1
 8002a00:	461a      	mov	r2, r3
 8002a02:	460b      	mov	r3, r1
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	440b      	add	r3, r1
 8002a08:	015b      	lsls	r3, r3, #5
 8002a0a:	4413      	add	r3, r2
 8002a0c:	4423      	add	r3, r4
 8002a0e:	f845 0023 	str.w	r0, [r5, r3, lsl #2]
	Map[x][y].Lados[direcciones[IZQUIERDA]] = lecturaSensor(IZQUIERDA, Sensors);
 8002a12:	4929      	ldr	r1, [pc, #164]	; (8002ab8 <CreateNode+0xe4>)
 8002a14:	2001      	movs	r0, #1
 8002a16:	f000 fcb5 	bl	8003384 <lecturaSensor>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	4a27      	ldr	r2, [pc, #156]	; (8002abc <CreateNode+0xe8>)
 8002a1e:	6854      	ldr	r4, [r2, #4]
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7fe fb25 	bl	8001070 <__aeabi_f2iz>
 8002a26:	4d26      	ldr	r5, [pc, #152]	; (8002ac0 <CreateNode+0xec>)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	6879      	ldr	r1, [r7, #4]
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	0052      	lsls	r2, r2, #1
 8002a30:	441a      	add	r2, r3
 8002a32:	0053      	lsls	r3, r2, #1
 8002a34:	461a      	mov	r2, r3
 8002a36:	460b      	mov	r3, r1
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	440b      	add	r3, r1
 8002a3c:	015b      	lsls	r3, r3, #5
 8002a3e:	4413      	add	r3, r2
 8002a40:	4423      	add	r3, r4
 8002a42:	f845 0023 	str.w	r0, [r5, r3, lsl #2]
	Map[x][y].Lados[direcciones[DERECHA]] = lecturaSensor(DERECHA, Sensors);
 8002a46:	491c      	ldr	r1, [pc, #112]	; (8002ab8 <CreateNode+0xe4>)
 8002a48:	2003      	movs	r0, #3
 8002a4a:	f000 fc9b 	bl	8003384 <lecturaSensor>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	4a1a      	ldr	r2, [pc, #104]	; (8002abc <CreateNode+0xe8>)
 8002a52:	68d4      	ldr	r4, [r2, #12]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7fe fb0b 	bl	8001070 <__aeabi_f2iz>
 8002a5a:	4d19      	ldr	r5, [pc, #100]	; (8002ac0 <CreateNode+0xec>)
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	6879      	ldr	r1, [r7, #4]
 8002a60:	461a      	mov	r2, r3
 8002a62:	0052      	lsls	r2, r2, #1
 8002a64:	441a      	add	r2, r3
 8002a66:	0053      	lsls	r3, r2, #1
 8002a68:	461a      	mov	r2, r3
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	440b      	add	r3, r1
 8002a70:	015b      	lsls	r3, r3, #5
 8002a72:	4413      	add	r3, r2
 8002a74:	4423      	add	r3, r4
 8002a76:	f845 0023 	str.w	r0, [r5, r3, lsl #2]
	Map[x][y].Lados[direcciones[ATRAS]] = lecturaSensor(ATRAS, Sensors);
 8002a7a:	490f      	ldr	r1, [pc, #60]	; (8002ab8 <CreateNode+0xe4>)
 8002a7c:	2002      	movs	r0, #2
 8002a7e:	f000 fc81 	bl	8003384 <lecturaSensor>
 8002a82:	4603      	mov	r3, r0
 8002a84:	4a0d      	ldr	r2, [pc, #52]	; (8002abc <CreateNode+0xe8>)
 8002a86:	6894      	ldr	r4, [r2, #8]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7fe faf1 	bl	8001070 <__aeabi_f2iz>
 8002a8e:	4d0c      	ldr	r5, [pc, #48]	; (8002ac0 <CreateNode+0xec>)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	6879      	ldr	r1, [r7, #4]
 8002a94:	461a      	mov	r2, r3
 8002a96:	0052      	lsls	r2, r2, #1
 8002a98:	441a      	add	r2, r3
 8002a9a:	0053      	lsls	r3, r2, #1
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	460b      	mov	r3, r1
 8002aa0:	005b      	lsls	r3, r3, #1
 8002aa2:	440b      	add	r3, r1
 8002aa4:	015b      	lsls	r3, r3, #5
 8002aa6:	4413      	add	r3, r2
 8002aa8:	4423      	add	r3, r4
 8002aaa:	f845 0023 	str.w	r0, [r5, r3, lsl #2]

}
 8002aae:	bf00      	nop
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bdb0      	pop	{r4, r5, r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	200011dc 	.word	0x200011dc
 8002abc:	200011ec 	.word	0x200011ec
 8002ac0:	200012c0 	.word	0x200012c0

08002ac4 <rotateAxis>:

void rotateAxis(int direccion) {
 8002ac4:	b480      	push	{r7}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
	switch (direccion) {
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d021      	beq.n	8002b16 <rotateAxis+0x52>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2b03      	cmp	r3, #3
 8002ad6:	d13c      	bne.n	8002b52 <rotateAxis+0x8e>
	case DERECHA:
		for (int i = 0; i < 4; i++) {
 8002ad8:	2300      	movs	r3, #0
 8002ada:	60fb      	str	r3, [r7, #12]
 8002adc:	e017      	b.n	8002b0e <rotateAxis+0x4a>
			direcciones[i] = direcciones[i] - 1;
 8002ade:	4a1f      	ldr	r2, [pc, #124]	; (8002b5c <rotateAxis+0x98>)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ae6:	1e5a      	subs	r2, r3, #1
 8002ae8:	491c      	ldr	r1, [pc, #112]	; (8002b5c <rotateAxis+0x98>)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (direcciones[i] == -1) {
 8002af0:	4a1a      	ldr	r2, [pc, #104]	; (8002b5c <rotateAxis+0x98>)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002afc:	d104      	bne.n	8002b08 <rotateAxis+0x44>
				direcciones[i] = 3;
 8002afe:	4a17      	ldr	r2, [pc, #92]	; (8002b5c <rotateAxis+0x98>)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2103      	movs	r1, #3
 8002b04:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int i = 0; i < 4; i++) {
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	60fb      	str	r3, [r7, #12]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2b03      	cmp	r3, #3
 8002b12:	dde4      	ble.n	8002ade <rotateAxis+0x1a>
			}
		}
		break;
 8002b14:	e01d      	b.n	8002b52 <rotateAxis+0x8e>
	case IZQUIERDA:
		for (int j = 0; j < 4; j++) {
 8002b16:	2300      	movs	r3, #0
 8002b18:	60bb      	str	r3, [r7, #8]
 8002b1a:	e016      	b.n	8002b4a <rotateAxis+0x86>
			direcciones[j] = direcciones[j] + 1;
 8002b1c:	4a0f      	ldr	r2, [pc, #60]	; (8002b5c <rotateAxis+0x98>)
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b24:	1c5a      	adds	r2, r3, #1
 8002b26:	490d      	ldr	r1, [pc, #52]	; (8002b5c <rotateAxis+0x98>)
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (direcciones[j] == 4) {
 8002b2e:	4a0b      	ldr	r2, [pc, #44]	; (8002b5c <rotateAxis+0x98>)
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b36:	2b04      	cmp	r3, #4
 8002b38:	d104      	bne.n	8002b44 <rotateAxis+0x80>
				direcciones[j] = 0;
 8002b3a:	4a08      	ldr	r2, [pc, #32]	; (8002b5c <rotateAxis+0x98>)
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	2100      	movs	r1, #0
 8002b40:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int j = 0; j < 4; j++) {
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	3301      	adds	r3, #1
 8002b48:	60bb      	str	r3, [r7, #8]
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	2b03      	cmp	r3, #3
 8002b4e:	dde5      	ble.n	8002b1c <rotateAxis+0x58>
			}
		}
		break;
 8002b50:	bf00      	nop
	}
}
 8002b52:	bf00      	nop
 8002b54:	3714      	adds	r7, #20
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bc80      	pop	{r7}
 8002b5a:	4770      	bx	lr
 8002b5c:	200011ec 	.word	0x200011ec

08002b60 <resetAxis>:

void resetAxis() {
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
	for (int i = 0; i < 4; i++) {
 8002b66:	2300      	movs	r3, #0
 8002b68:	607b      	str	r3, [r7, #4]
 8002b6a:	e007      	b.n	8002b7c <resetAxis+0x1c>
		direcciones[i] = i;
 8002b6c:	4908      	ldr	r1, [pc, #32]	; (8002b90 <resetAxis+0x30>)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < 4; i++) {
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	3301      	adds	r3, #1
 8002b7a:	607b      	str	r3, [r7, #4]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2b03      	cmp	r3, #3
 8002b80:	ddf4      	ble.n	8002b6c <resetAxis+0xc>
	}
}
 8002b82:	bf00      	nop
 8002b84:	bf00      	nop
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bc80      	pop	{r7}
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	200011ec 	.word	0x200011ec

08002b94 <PrintMap>:

void PrintMap() {
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
	for (int i = 0; i < alto; i++) {
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	607b      	str	r3, [r7, #4]
 8002b9e:	e032      	b.n	8002c06 <PrintMap+0x72>
		for (int j = 0; j < ancho; j++) {
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	603b      	str	r3, [r7, #0]
 8002ba4:	e020      	b.n	8002be8 <PrintMap+0x54>
			//SerialBT.print(Map[i][j].visitado);
			//SerialBT.print(" ");
			TX_BUFFER[0] = Map[i][j].visitado + '0';
 8002ba6:	481c      	ldr	r0, [pc, #112]	; (8002c18 <PrintMap+0x84>)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	6879      	ldr	r1, [r7, #4]
 8002bac:	461a      	mov	r2, r3
 8002bae:	0052      	lsls	r2, r2, #1
 8002bb0:	441a      	add	r2, r3
 8002bb2:	00d3      	lsls	r3, r2, #3
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	460b      	mov	r3, r1
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	440b      	add	r3, r1
 8002bbc:	01db      	lsls	r3, r3, #7
 8002bbe:	4413      	add	r3, r2
 8002bc0:	4403      	add	r3, r0
 8002bc2:	3310      	adds	r3, #16
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	3330      	adds	r3, #48	; 0x30
 8002bca:	b2da      	uxtb	r2, r3
 8002bcc:	4b13      	ldr	r3, [pc, #76]	; (8002c1c <PrintMap+0x88>)
 8002bce:	701a      	strb	r2, [r3, #0]
			TX_BUFFER[1] = ' ';
 8002bd0:	4b12      	ldr	r3, [pc, #72]	; (8002c1c <PrintMap+0x88>)
 8002bd2:	2220      	movs	r2, #32
 8002bd4:	705a      	strb	r2, [r3, #1]
			HAL_UART_Transmit(&huart1, TX_BUFFER, 2, 100);
 8002bd6:	2364      	movs	r3, #100	; 0x64
 8002bd8:	2202      	movs	r2, #2
 8002bda:	4910      	ldr	r1, [pc, #64]	; (8002c1c <PrintMap+0x88>)
 8002bdc:	4810      	ldr	r0, [pc, #64]	; (8002c20 <PrintMap+0x8c>)
 8002bde:	f003 fbdc 	bl	800639a <HAL_UART_Transmit>
		for (int j = 0; j < ancho; j++) {
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	3301      	adds	r3, #1
 8002be6:	603b      	str	r3, [r7, #0]
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	2b0f      	cmp	r3, #15
 8002bec:	dddb      	ble.n	8002ba6 <PrintMap+0x12>
		}
		TX_BUFFER[0] = '\n';
 8002bee:	4b0b      	ldr	r3, [pc, #44]	; (8002c1c <PrintMap+0x88>)
 8002bf0:	220a      	movs	r2, #10
 8002bf2:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, TX_BUFFER, 1, 100);
 8002bf4:	2364      	movs	r3, #100	; 0x64
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	4908      	ldr	r1, [pc, #32]	; (8002c1c <PrintMap+0x88>)
 8002bfa:	4809      	ldr	r0, [pc, #36]	; (8002c20 <PrintMap+0x8c>)
 8002bfc:	f003 fbcd 	bl	800639a <HAL_UART_Transmit>
	for (int i = 0; i < alto; i++) {
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	3301      	adds	r3, #1
 8002c04:	607b      	str	r3, [r7, #4]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2b0f      	cmp	r3, #15
 8002c0a:	ddc9      	ble.n	8002ba0 <PrintMap+0xc>
	}
}
 8002c0c:	bf00      	nop
 8002c0e:	bf00      	nop
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	200012c0 	.word	0x200012c0
 8002c1c:	2000121c 	.word	0x2000121c
 8002c20:	20002bc4 	.word	0x20002bc4

08002c24 <HAL_ADC_ConvCpltCallback>:

// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 10; i++) {
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	60fb      	str	r3, [r7, #12]
 8002c30:	e029      	b.n	8002c86 <HAL_ADC_ConvCpltCallback+0x62>
		CNY70[i] = adc_buf[i * 4];
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	4a27      	ldr	r2, [pc, #156]	; (8002cd4 <HAL_ADC_ConvCpltCallback+0xb0>)
 8002c38:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002c3c:	4926      	ldr	r1, [pc, #152]	; (8002cd8 <HAL_ADC_ConvCpltCallback+0xb4>)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SHARP_1[i] = adc_buf[i * 4 + 1];
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	3301      	adds	r3, #1
 8002c4a:	4a22      	ldr	r2, [pc, #136]	; (8002cd4 <HAL_ADC_ConvCpltCallback+0xb0>)
 8002c4c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002c50:	4922      	ldr	r1, [pc, #136]	; (8002cdc <HAL_ADC_ConvCpltCallback+0xb8>)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SHARP_2[i] = adc_buf[i * 4 + 2];
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	3302      	adds	r3, #2
 8002c5e:	4a1d      	ldr	r2, [pc, #116]	; (8002cd4 <HAL_ADC_ConvCpltCallback+0xb0>)
 8002c60:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002c64:	491e      	ldr	r1, [pc, #120]	; (8002ce0 <HAL_ADC_ConvCpltCallback+0xbc>)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SHARP_3[i] = adc_buf[i * 4 + 3];
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	3303      	adds	r3, #3
 8002c72:	4a18      	ldr	r2, [pc, #96]	; (8002cd4 <HAL_ADC_ConvCpltCallback+0xb0>)
 8002c74:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002c78:	491a      	ldr	r1, [pc, #104]	; (8002ce4 <HAL_ADC_ConvCpltCallback+0xc0>)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < 10; i++) {
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	3301      	adds	r3, #1
 8002c84:	60fb      	str	r3, [r7, #12]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2b09      	cmp	r3, #9
 8002c8a:	ddd2      	ble.n	8002c32 <HAL_ADC_ConvCpltCallback+0xe>
	}
	Sensors[0] = lecturaCNY70(10, CNY70);
 8002c8c:	4912      	ldr	r1, [pc, #72]	; (8002cd8 <HAL_ADC_ConvCpltCallback+0xb4>)
 8002c8e:	200a      	movs	r0, #10
 8002c90:	f000 fc4a 	bl	8003528 <lecturaCNY70>
 8002c94:	4603      	mov	r3, r0
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7fd ffd0 	bl	8000c3c <__aeabi_i2f>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	4a12      	ldr	r2, [pc, #72]	; (8002ce8 <HAL_ADC_ConvCpltCallback+0xc4>)
 8002ca0:	6013      	str	r3, [r2, #0]
	Sensors[1] = lecSensor(10, SHARP_1);
 8002ca2:	490e      	ldr	r1, [pc, #56]	; (8002cdc <HAL_ADC_ConvCpltCallback+0xb8>)
 8002ca4:	200a      	movs	r0, #10
 8002ca6:	f000 fbbf 	bl	8003428 <lecSensor>
 8002caa:	4603      	mov	r3, r0
 8002cac:	4a0e      	ldr	r2, [pc, #56]	; (8002ce8 <HAL_ADC_ConvCpltCallback+0xc4>)
 8002cae:	6053      	str	r3, [r2, #4]
	Sensors[2] = lecSensor(10, SHARP_2);
 8002cb0:	490b      	ldr	r1, [pc, #44]	; (8002ce0 <HAL_ADC_ConvCpltCallback+0xbc>)
 8002cb2:	200a      	movs	r0, #10
 8002cb4:	f000 fbb8 	bl	8003428 <lecSensor>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	4a0b      	ldr	r2, [pc, #44]	; (8002ce8 <HAL_ADC_ConvCpltCallback+0xc4>)
 8002cbc:	6093      	str	r3, [r2, #8]
	Sensors[3] = lecSensor(10, SHARP_3);
 8002cbe:	4909      	ldr	r1, [pc, #36]	; (8002ce4 <HAL_ADC_ConvCpltCallback+0xc0>)
 8002cc0:	200a      	movs	r0, #10
 8002cc2:	f000 fbb1 	bl	8003428 <lecSensor>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	4a07      	ldr	r2, [pc, #28]	; (8002ce8 <HAL_ADC_ConvCpltCallback+0xc4>)
 8002cca:	60d3      	str	r3, [r2, #12]

}
 8002ccc:	bf00      	nop
 8002cce:	3710      	adds	r7, #16
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	2000013c 	.word	0x2000013c
 8002cd8:	2000113c 	.word	0x2000113c
 8002cdc:	20001164 	.word	0x20001164
 8002ce0:	2000118c 	.word	0x2000118c
 8002ce4:	200011b4 	.word	0x200011b4
 8002ce8:	200011dc 	.word	0x200011dc

08002cec <MAP>:

uint32_t MAP(uint32_t au32_IN, uint32_t au32_INmin, uint32_t au32_INmax,
		uint32_t au32_OUTmin, uint32_t au32_OUTmax) {
 8002cec:	b480      	push	{r7}
 8002cee:	b085      	sub	sp, #20
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	607a      	str	r2, [r7, #4]
 8002cf8:	603b      	str	r3, [r7, #0]
	return ((((au32_IN - au32_INmin) * (au32_OUTmax - au32_OUTmin))
 8002cfa:	68fa      	ldr	r2, [r7, #12]
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	69b9      	ldr	r1, [r7, #24]
 8002d02:	683a      	ldr	r2, [r7, #0]
 8002d04:	1a8a      	subs	r2, r1, r2
 8002d06:	fb03 f202 	mul.w	r2, r3, r2
			/ (au32_INmax - au32_INmin)) + au32_OUTmin);
 8002d0a:	6879      	ldr	r1, [r7, #4]
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	1acb      	subs	r3, r1, r3
 8002d10:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	4413      	add	r3, r2
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3714      	adds	r7, #20
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bc80      	pop	{r7}
 8002d20:	4770      	bx	lr

08002d22 <constrain>:

int constrain(int x, int a, int b) {
 8002d22:	b480      	push	{r7}
 8002d24:	b085      	sub	sp, #20
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	60f8      	str	r0, [r7, #12]
 8002d2a:	60b9      	str	r1, [r7, #8]
 8002d2c:	607a      	str	r2, [r7, #4]
	if (x < a) {
 8002d2e:	68fa      	ldr	r2, [r7, #12]
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	da01      	bge.n	8002d3a <constrain+0x18>
		return a;
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	e006      	b.n	8002d48 <constrain+0x26>
	} else if (b < x) {
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	da01      	bge.n	8002d46 <constrain+0x24>
		return b;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	e000      	b.n	8002d48 <constrain+0x26>
	} else
		return x;
 8002d46:	68fb      	ldr	r3, [r7, #12]
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3714      	adds	r7, #20
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bc80      	pop	{r7}
 8002d50:	4770      	bx	lr
	...

08002d54 <wallDetector>:

int wallDetector(int n, int d) {
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]
	switch (d) {
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	2b03      	cmp	r3, #3
 8002d62:	d01b      	beq.n	8002d9c <wallDetector+0x48>
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	2b03      	cmp	r3, #3
 8002d68:	dc21      	bgt.n	8002dae <wallDetector+0x5a>
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d003      	beq.n	8002d78 <wallDetector+0x24>
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d009      	beq.n	8002d8a <wallDetector+0x36>
 8002d76:	e01a      	b.n	8002dae <wallDetector+0x5a>
	case ADELANTE:
		if (n < MaxCenterDistance) {
 8002d78:	4b10      	ldr	r3, [pc, #64]	; (8002dbc <wallDetector+0x68>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	da01      	bge.n	8002d86 <wallDetector+0x32>
			return 1;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e014      	b.n	8002db0 <wallDetector+0x5c>
		} else {
			return 0;
 8002d86:	2300      	movs	r3, #0
 8002d88:	e012      	b.n	8002db0 <wallDetector+0x5c>
		}
		break;

	case IZQUIERDA:
		if (n < MaxLeftDistance) {
 8002d8a:	4b0d      	ldr	r3, [pc, #52]	; (8002dc0 <wallDetector+0x6c>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	da01      	bge.n	8002d98 <wallDetector+0x44>
			return 1;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e00b      	b.n	8002db0 <wallDetector+0x5c>
		} else {
			return 0;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	e009      	b.n	8002db0 <wallDetector+0x5c>
		}
		break;
	case DERECHA:
		if (n < MaxRightDistance) {
 8002d9c:	4b09      	ldr	r3, [pc, #36]	; (8002dc4 <wallDetector+0x70>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	da01      	bge.n	8002daa <wallDetector+0x56>
			return 1;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e002      	b.n	8002db0 <wallDetector+0x5c>
		} else {
			return 0;
 8002daa:	2300      	movs	r3, #0
 8002dac:	e000      	b.n	8002db0 <wallDetector+0x5c>
		}
		break;
	default:
		return 0;
 8002dae:	2300      	movs	r3, #0
		break;
	}
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bc80      	pop	{r7}
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	20001210 	.word	0x20001210
 8002dc0:	2000120c 	.word	0x2000120c
 8002dc4:	20001208 	.word	0x20001208

08002dc8 <moveStraight>:

void moveStraight() {
 8002dc8:	b590      	push	{r4, r7, lr}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af02      	add	r7, sp, #8
	if (Sensors[3] < MaxLeftDistance && Sensors[1] < MaxRightDistance - 2) {
 8002dce:	4b37      	ldr	r3, [pc, #220]	; (8002eac <moveStraight+0xe4>)
 8002dd0:	68dc      	ldr	r4, [r3, #12]
 8002dd2:	4b37      	ldr	r3, [pc, #220]	; (8002eb0 <moveStraight+0xe8>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7fd ff30 	bl	8000c3c <__aeabi_i2f>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	4619      	mov	r1, r3
 8002de0:	4620      	mov	r0, r4
 8002de2:	f7fe f91d 	bl	8001020 <__aeabi_fcmplt>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d01c      	beq.n	8002e26 <moveStraight+0x5e>
 8002dec:	4b2f      	ldr	r3, [pc, #188]	; (8002eac <moveStraight+0xe4>)
 8002dee:	685c      	ldr	r4, [r3, #4]
 8002df0:	4b30      	ldr	r3, [pc, #192]	; (8002eb4 <moveStraight+0xec>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	3b02      	subs	r3, #2
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7fd ff20 	bl	8000c3c <__aeabi_i2f>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	4619      	mov	r1, r3
 8002e00:	4620      	mov	r0, r4
 8002e02:	f7fe f90d 	bl	8001020 <__aeabi_fcmplt>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d00c      	beq.n	8002e26 <moveStraight+0x5e>
		//intUartSend(0);
		error = Sensors[3] - Sensors[1];
 8002e0c:	4b27      	ldr	r3, [pc, #156]	; (8002eac <moveStraight+0xe4>)
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	4a26      	ldr	r2, [pc, #152]	; (8002eac <moveStraight+0xe4>)
 8002e12:	6852      	ldr	r2, [r2, #4]
 8002e14:	4611      	mov	r1, r2
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7fd fe5a 	bl	8000ad0 <__aeabi_fsub>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	461a      	mov	r2, r3
 8002e20:	4b25      	ldr	r3, [pc, #148]	; (8002eb8 <moveStraight+0xf0>)
 8002e22:	601a      	str	r2, [r3, #0]
 8002e24:	e052      	b.n	8002ecc <moveStraight+0x104>
	} else if (Sensors[3] < MaxLeftDistance - 2) {
 8002e26:	4b21      	ldr	r3, [pc, #132]	; (8002eac <moveStraight+0xe4>)
 8002e28:	68dc      	ldr	r4, [r3, #12]
 8002e2a:	4b21      	ldr	r3, [pc, #132]	; (8002eb0 <moveStraight+0xe8>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	3b02      	subs	r3, #2
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7fd ff03 	bl	8000c3c <__aeabi_i2f>
 8002e36:	4603      	mov	r3, r0
 8002e38:	4619      	mov	r1, r3
 8002e3a:	4620      	mov	r0, r4
 8002e3c:	f7fe f8f0 	bl	8001020 <__aeabi_fcmplt>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d010      	beq.n	8002e68 <moveStraight+0xa0>
		//intUartSend(1);
		error = Sensors[3] - CenterDistanceLeft;
 8002e46:	4b19      	ldr	r3, [pc, #100]	; (8002eac <moveStraight+0xe4>)
 8002e48:	68dc      	ldr	r4, [r3, #12]
 8002e4a:	4b1c      	ldr	r3, [pc, #112]	; (8002ebc <moveStraight+0xf4>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7fd fef4 	bl	8000c3c <__aeabi_i2f>
 8002e54:	4603      	mov	r3, r0
 8002e56:	4619      	mov	r1, r3
 8002e58:	4620      	mov	r0, r4
 8002e5a:	f7fd fe39 	bl	8000ad0 <__aeabi_fsub>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	461a      	mov	r2, r3
 8002e62:	4b15      	ldr	r3, [pc, #84]	; (8002eb8 <moveStraight+0xf0>)
 8002e64:	601a      	str	r2, [r3, #0]
 8002e66:	e031      	b.n	8002ecc <moveStraight+0x104>
	} else if (Sensors[1] < MaxRightDistance - 2) {
 8002e68:	4b10      	ldr	r3, [pc, #64]	; (8002eac <moveStraight+0xe4>)
 8002e6a:	685c      	ldr	r4, [r3, #4]
 8002e6c:	4b11      	ldr	r3, [pc, #68]	; (8002eb4 <moveStraight+0xec>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	3b02      	subs	r3, #2
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7fd fee2 	bl	8000c3c <__aeabi_i2f>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	4620      	mov	r0, r4
 8002e7e:	f7fe f8cf 	bl	8001020 <__aeabi_fcmplt>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d01d      	beq.n	8002ec4 <moveStraight+0xfc>
		//intUartSend(2);
		error = CenterDistanceRight - Sensors[1];
 8002e88:	4b0d      	ldr	r3, [pc, #52]	; (8002ec0 <moveStraight+0xf8>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7fd fed5 	bl	8000c3c <__aeabi_i2f>
 8002e92:	4602      	mov	r2, r0
 8002e94:	4b05      	ldr	r3, [pc, #20]	; (8002eac <moveStraight+0xe4>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	4619      	mov	r1, r3
 8002e9a:	4610      	mov	r0, r2
 8002e9c:	f7fd fe18 	bl	8000ad0 <__aeabi_fsub>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	4b04      	ldr	r3, [pc, #16]	; (8002eb8 <moveStraight+0xf0>)
 8002ea6:	601a      	str	r2, [r3, #0]
 8002ea8:	e010      	b.n	8002ecc <moveStraight+0x104>
 8002eaa:	bf00      	nop
 8002eac:	200011dc 	.word	0x200011dc
 8002eb0:	2000120c 	.word	0x2000120c
 8002eb4:	20001208 	.word	0x20001208
 8002eb8:	20002ac0 	.word	0x20002ac0
 8002ebc:	20001204 	.word	0x20001204
 8002ec0:	20001200 	.word	0x20001200
	} else {
		//intUartSend(3);
		error = 0;
 8002ec4:	4b7c      	ldr	r3, [pc, #496]	; (80030b8 <moveStraight+0x2f0>)
 8002ec6:	f04f 0200 	mov.w	r2, #0
 8002eca:	601a      	str	r2, [r3, #0]
	}

	timePrev = timeNow;
 8002ecc:	4b7b      	ldr	r3, [pc, #492]	; (80030bc <moveStraight+0x2f4>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a7b      	ldr	r2, [pc, #492]	; (80030c0 <moveStraight+0x2f8>)
 8002ed2:	6013      	str	r3, [r2, #0]
	timeNow = HAL_GetTick();
 8002ed4:	f000 fea8 	bl	8003c28 <HAL_GetTick>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7fd feaa 	bl	8000c34 <__aeabi_ui2f>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	4a76      	ldr	r2, [pc, #472]	; (80030bc <moveStraight+0x2f4>)
 8002ee4:	6013      	str	r3, [r2, #0]
	elapsedTime = (timeNow - timePrev) / 1000;
 8002ee6:	4b75      	ldr	r3, [pc, #468]	; (80030bc <moveStraight+0x2f4>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a75      	ldr	r2, [pc, #468]	; (80030c0 <moveStraight+0x2f8>)
 8002eec:	6812      	ldr	r2, [r2, #0]
 8002eee:	4611      	mov	r1, r2
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7fd fded 	bl	8000ad0 <__aeabi_fsub>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	4972      	ldr	r1, [pc, #456]	; (80030c4 <moveStraight+0x2fc>)
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7fd ffa6 	bl	8000e4c <__aeabi_fdiv>
 8002f00:	4603      	mov	r3, r0
 8002f02:	461a      	mov	r2, r3
 8002f04:	4b70      	ldr	r3, [pc, #448]	; (80030c8 <moveStraight+0x300>)
 8002f06:	601a      	str	r2, [r3, #0]
	pidD = KD * ((error - previousError) / elapsedTime);
 8002f08:	4b6b      	ldr	r3, [pc, #428]	; (80030b8 <moveStraight+0x2f0>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a6f      	ldr	r2, [pc, #444]	; (80030cc <moveStraight+0x304>)
 8002f0e:	6812      	ldr	r2, [r2, #0]
 8002f10:	4611      	mov	r1, r2
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7fd fddc 	bl	8000ad0 <__aeabi_fsub>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	4b6a      	ldr	r3, [pc, #424]	; (80030c8 <moveStraight+0x300>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4619      	mov	r1, r3
 8002f22:	4610      	mov	r0, r2
 8002f24:	f7fd ff92 	bl	8000e4c <__aeabi_fdiv>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	4b68      	ldr	r3, [pc, #416]	; (80030d0 <moveStraight+0x308>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4619      	mov	r1, r3
 8002f32:	4610      	mov	r0, r2
 8002f34:	f7fd fed6 	bl	8000ce4 <__aeabi_fmul>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	4b65      	ldr	r3, [pc, #404]	; (80030d4 <moveStraight+0x30c>)
 8002f3e:	601a      	str	r2, [r3, #0]
	pidP = KP * error;
 8002f40:	4b65      	ldr	r3, [pc, #404]	; (80030d8 <moveStraight+0x310>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a5c      	ldr	r2, [pc, #368]	; (80030b8 <moveStraight+0x2f0>)
 8002f46:	6812      	ldr	r2, [r2, #0]
 8002f48:	4611      	mov	r1, r2
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7fd feca 	bl	8000ce4 <__aeabi_fmul>
 8002f50:	4603      	mov	r3, r0
 8002f52:	461a      	mov	r2, r3
 8002f54:	4b61      	ldr	r3, [pc, #388]	; (80030dc <moveStraight+0x314>)
 8002f56:	601a      	str	r2, [r3, #0]
	pid = pidP + pidD;
 8002f58:	4b60      	ldr	r3, [pc, #384]	; (80030dc <moveStraight+0x314>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a5d      	ldr	r2, [pc, #372]	; (80030d4 <moveStraight+0x30c>)
 8002f5e:	6812      	ldr	r2, [r2, #0]
 8002f60:	4611      	mov	r1, r2
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7fd fdb6 	bl	8000ad4 <__addsf3>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	4b5c      	ldr	r3, [pc, #368]	; (80030e0 <moveStraight+0x318>)
 8002f6e:	601a      	str	r2, [r3, #0]
	if (pid > velocity) {
 8002f70:	4b5b      	ldr	r3, [pc, #364]	; (80030e0 <moveStraight+0x318>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a5b      	ldr	r2, [pc, #364]	; (80030e4 <moveStraight+0x31c>)
 8002f76:	6812      	ldr	r2, [r2, #0]
 8002f78:	4611      	mov	r1, r2
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7fe f86e 	bl	800105c <__aeabi_fcmpgt>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d003      	beq.n	8002f8e <moveStraight+0x1c6>
		//intUartSend(1);
		pid = velocity;
 8002f86:	4b57      	ldr	r3, [pc, #348]	; (80030e4 <moveStraight+0x31c>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a55      	ldr	r2, [pc, #340]	; (80030e0 <moveStraight+0x318>)
 8002f8c:	6013      	str	r3, [r2, #0]
	}
	if (pid < -velocity) {
 8002f8e:	4b55      	ldr	r3, [pc, #340]	; (80030e4 <moveStraight+0x31c>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002f96:	4a52      	ldr	r2, [pc, #328]	; (80030e0 <moveStraight+0x318>)
 8002f98:	6812      	ldr	r2, [r2, #0]
 8002f9a:	4611      	mov	r1, r2
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7fe f85d 	bl	800105c <__aeabi_fcmpgt>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d005      	beq.n	8002fb4 <moveStraight+0x1ec>
		//intUartSend(0);
		pid = -velocity;
 8002fa8:	4b4e      	ldr	r3, [pc, #312]	; (80030e4 <moveStraight+0x31c>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002fb0:	4a4b      	ldr	r2, [pc, #300]	; (80030e0 <moveStraight+0x318>)
 8002fb2:	6013      	str	r3, [r2, #0]
	}
	//intUartSend(abs(pid));
	HAL_Delay(10);
 8002fb4:	200a      	movs	r0, #10
 8002fb6:	f000 fe41 	bl	8003c3c <HAL_Delay>
	motLeft = velocity - pid;
 8002fba:	4b4a      	ldr	r3, [pc, #296]	; (80030e4 <moveStraight+0x31c>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a48      	ldr	r2, [pc, #288]	; (80030e0 <moveStraight+0x318>)
 8002fc0:	6812      	ldr	r2, [r2, #0]
 8002fc2:	4611      	mov	r1, r2
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7fd fd83 	bl	8000ad0 <__aeabi_fsub>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f7fe f84f 	bl	8001070 <__aeabi_f2iz>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	4a44      	ldr	r2, [pc, #272]	; (80030e8 <moveStraight+0x320>)
 8002fd6:	6013      	str	r3, [r2, #0]
	motRight = velocity + pid;
 8002fd8:	4b42      	ldr	r3, [pc, #264]	; (80030e4 <moveStraight+0x31c>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a40      	ldr	r2, [pc, #256]	; (80030e0 <moveStraight+0x318>)
 8002fde:	6812      	ldr	r2, [r2, #0]
 8002fe0:	4611      	mov	r1, r2
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7fd fd76 	bl	8000ad4 <__addsf3>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7fe f840 	bl	8001070 <__aeabi_f2iz>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	4a3e      	ldr	r2, [pc, #248]	; (80030ec <moveStraight+0x324>)
 8002ff4:	6013      	str	r3, [r2, #0]
	if (motLeft < -1000) {
 8002ff6:	4b3c      	ldr	r3, [pc, #240]	; (80030e8 <moveStraight+0x320>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8002ffe:	da02      	bge.n	8003006 <moveStraight+0x23e>
		motLeft = -1000;
 8003000:	4b39      	ldr	r3, [pc, #228]	; (80030e8 <moveStraight+0x320>)
 8003002:	4a3b      	ldr	r2, [pc, #236]	; (80030f0 <moveStraight+0x328>)
 8003004:	601a      	str	r2, [r3, #0]
	}
	if (motRight < -1000) {
 8003006:	4b39      	ldr	r3, [pc, #228]	; (80030ec <moveStraight+0x324>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800300e:	da02      	bge.n	8003016 <moveStraight+0x24e>
		motRight = -1000;
 8003010:	4b36      	ldr	r3, [pc, #216]	; (80030ec <moveStraight+0x324>)
 8003012:	4a37      	ldr	r2, [pc, #220]	; (80030f0 <moveStraight+0x328>)
 8003014:	601a      	str	r2, [r3, #0]
	}

	previousError = error;
 8003016:	4b28      	ldr	r3, [pc, #160]	; (80030b8 <moveStraight+0x2f0>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a2c      	ldr	r2, [pc, #176]	; (80030cc <moveStraight+0x304>)
 800301c:	6013      	str	r3, [r2, #0]
	motRight = constrain(motRight, -1000, 1000);
 800301e:	4b33      	ldr	r3, [pc, #204]	; (80030ec <moveStraight+0x324>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003026:	4932      	ldr	r1, [pc, #200]	; (80030f0 <moveStraight+0x328>)
 8003028:	4618      	mov	r0, r3
 800302a:	f7ff fe7a 	bl	8002d22 <constrain>
 800302e:	4603      	mov	r3, r0
 8003030:	4a2e      	ldr	r2, [pc, #184]	; (80030ec <moveStraight+0x324>)
 8003032:	6013      	str	r3, [r2, #0]
	motLeft = constrain(motLeft, -1000, 1000);
 8003034:	4b2c      	ldr	r3, [pc, #176]	; (80030e8 <moveStraight+0x320>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800303c:	492c      	ldr	r1, [pc, #176]	; (80030f0 <moveStraight+0x328>)
 800303e:	4618      	mov	r0, r3
 8003040:	f7ff fe6f 	bl	8002d22 <constrain>
 8003044:	4603      	mov	r3, r0
 8003046:	4a28      	ldr	r2, [pc, #160]	; (80030e8 <moveStraight+0x320>)
 8003048:	6013      	str	r3, [r2, #0]

	motRight = MAP(motRight, -1000, 1000, 0, baseChoice[choice] * 2);
 800304a:	4b28      	ldr	r3, [pc, #160]	; (80030ec <moveStraight+0x324>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4618      	mov	r0, r3
 8003050:	4b28      	ldr	r3, [pc, #160]	; (80030f4 <moveStraight+0x32c>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a28      	ldr	r2, [pc, #160]	; (80030f8 <moveStraight+0x330>)
 8003056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800305a:	005b      	lsls	r3, r3, #1
 800305c:	9300      	str	r3, [sp, #0]
 800305e:	2300      	movs	r3, #0
 8003060:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003064:	4922      	ldr	r1, [pc, #136]	; (80030f0 <moveStraight+0x328>)
 8003066:	f7ff fe41 	bl	8002cec <MAP>
 800306a:	4603      	mov	r3, r0
 800306c:	461a      	mov	r2, r3
 800306e:	4b1f      	ldr	r3, [pc, #124]	; (80030ec <moveStraight+0x324>)
 8003070:	601a      	str	r2, [r3, #0]
	motLeft = MAP(motLeft, -1000, 1000, 0, baseChoice[choice] * 2);
 8003072:	4b1d      	ldr	r3, [pc, #116]	; (80030e8 <moveStraight+0x320>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4618      	mov	r0, r3
 8003078:	4b1e      	ldr	r3, [pc, #120]	; (80030f4 <moveStraight+0x32c>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a1e      	ldr	r2, [pc, #120]	; (80030f8 <moveStraight+0x330>)
 800307e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003082:	005b      	lsls	r3, r3, #1
 8003084:	9300      	str	r3, [sp, #0]
 8003086:	2300      	movs	r3, #0
 8003088:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800308c:	4918      	ldr	r1, [pc, #96]	; (80030f0 <moveStraight+0x328>)
 800308e:	f7ff fe2d 	bl	8002cec <MAP>
 8003092:	4603      	mov	r3, r0
 8003094:	461a      	mov	r2, r3
 8003096:	4b14      	ldr	r3, [pc, #80]	; (80030e8 <moveStraight+0x320>)
 8003098:	601a      	str	r2, [r3, #0]
	TIM2->CCR4 = motLeft;
 800309a:	4b13      	ldr	r3, [pc, #76]	; (80030e8 <moveStraight+0x320>)
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80030a2:	641a      	str	r2, [r3, #64]	; 0x40
	TIM2->CCR3 = motRight;
 80030a4:	4b11      	ldr	r3, [pc, #68]	; (80030ec <moveStraight+0x324>)
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80030ac:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80030ae:	bf00      	nop
 80030b0:	3704      	adds	r7, #4
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd90      	pop	{r4, r7, pc}
 80030b6:	bf00      	nop
 80030b8:	20002ac0 	.word	0x20002ac0
 80030bc:	20002ad0 	.word	0x20002ad0
 80030c0:	20002ad4 	.word	0x20002ad4
 80030c4:	447a0000 	.word	0x447a0000
 80030c8:	20002acc 	.word	0x20002acc
 80030cc:	20002ac8 	.word	0x20002ac8
 80030d0:	2000122c 	.word	0x2000122c
 80030d4:	20002adc 	.word	0x20002adc
 80030d8:	20001228 	.word	0x20001228
 80030dc:	20002ad8 	.word	0x20002ad8
 80030e0:	20002ac4 	.word	0x20002ac4
 80030e4:	20001230 	.word	0x20001230
 80030e8:	20002ae0 	.word	0x20002ae0
 80030ec:	20002ae4 	.word	0x20002ae4
 80030f0:	fffffc18 	.word	0xfffffc18
 80030f4:	20001238 	.word	0x20001238
 80030f8:	20000018 	.word	0x20000018

080030fc <btnMachine>:
void runForward() {
	runMotor(ADELANTE, MOTOR_A);
	runMotor(ADELANTE, MOTOR_B);
}

void btnMachine(int index) {
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
	switch (btns[index].estado) {
 8003104:	4a50      	ldr	r2, [pc, #320]	; (8003248 <btnMachine+0x14c>)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	011b      	lsls	r3, r3, #4
 800310a:	4413      	add	r3, r2
 800310c:	3308      	adds	r3, #8
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2b02      	cmp	r3, #2
 8003112:	d069      	beq.n	80031e8 <btnMachine+0xec>
 8003114:	2b02      	cmp	r3, #2
 8003116:	f300 8092 	bgt.w	800323e <btnMachine+0x142>
 800311a:	2b00      	cmp	r3, #0
 800311c:	d002      	beq.n	8003124 <btnMachine+0x28>
 800311e:	2b01      	cmp	r3, #1
 8003120:	d02c      	beq.n	800317c <btnMachine+0x80>
			btns[index].flag = 1;
			btns[index].estado = ESPERA;
		}
		break;
	}
}
 8003122:	e08c      	b.n	800323e <btnMachine+0x142>
		btns[index].flag = 0;
 8003124:	4a48      	ldr	r2, [pc, #288]	; (8003248 <btnMachine+0x14c>)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	011b      	lsls	r3, r3, #4
 800312a:	4413      	add	r3, r2
 800312c:	330c      	adds	r3, #12
 800312e:	2200      	movs	r2, #0
 8003130:	601a      	str	r2, [r3, #0]
		lecturaBtn = HAL_GPIO_ReadPin(btns[index].Port, btns[index].pin);
 8003132:	4a45      	ldr	r2, [pc, #276]	; (8003248 <btnMachine+0x14c>)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	011b      	lsls	r3, r3, #4
 8003138:	4413      	add	r3, r2
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	4942      	ldr	r1, [pc, #264]	; (8003248 <btnMachine+0x14c>)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	011b      	lsls	r3, r3, #4
 8003142:	440b      	add	r3, r1
 8003144:	3304      	adds	r3, #4
 8003146:	881b      	ldrh	r3, [r3, #0]
 8003148:	4619      	mov	r1, r3
 800314a:	4610      	mov	r0, r2
 800314c:	f001 fe8c 	bl	8004e68 <HAL_GPIO_ReadPin>
 8003150:	4603      	mov	r3, r0
 8003152:	461a      	mov	r2, r3
 8003154:	4b3d      	ldr	r3, [pc, #244]	; (800324c <btnMachine+0x150>)
 8003156:	601a      	str	r2, [r3, #0]
		if (lecturaBtn == 0) {
 8003158:	4b3c      	ldr	r3, [pc, #240]	; (800324c <btnMachine+0x150>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d169      	bne.n	8003234 <btnMachine+0x138>
			ticks = HAL_GetTick();
 8003160:	f000 fd62 	bl	8003c28 <HAL_GetTick>
 8003164:	4603      	mov	r3, r0
 8003166:	461a      	mov	r2, r3
 8003168:	4b39      	ldr	r3, [pc, #228]	; (8003250 <btnMachine+0x154>)
 800316a:	601a      	str	r2, [r3, #0]
			btns[index].estado = CONFIRMACION;
 800316c:	4a36      	ldr	r2, [pc, #216]	; (8003248 <btnMachine+0x14c>)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	011b      	lsls	r3, r3, #4
 8003172:	4413      	add	r3, r2
 8003174:	3308      	adds	r3, #8
 8003176:	2201      	movs	r2, #1
 8003178:	601a      	str	r2, [r3, #0]
		break;
 800317a:	e05b      	b.n	8003234 <btnMachine+0x138>
		lecturaBtn = HAL_GPIO_ReadPin(btns[index].Port, btns[index].pin);
 800317c:	4a32      	ldr	r2, [pc, #200]	; (8003248 <btnMachine+0x14c>)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	011b      	lsls	r3, r3, #4
 8003182:	4413      	add	r3, r2
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	4930      	ldr	r1, [pc, #192]	; (8003248 <btnMachine+0x14c>)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	011b      	lsls	r3, r3, #4
 800318c:	440b      	add	r3, r1
 800318e:	3304      	adds	r3, #4
 8003190:	881b      	ldrh	r3, [r3, #0]
 8003192:	4619      	mov	r1, r3
 8003194:	4610      	mov	r0, r2
 8003196:	f001 fe67 	bl	8004e68 <HAL_GPIO_ReadPin>
 800319a:	4603      	mov	r3, r0
 800319c:	461a      	mov	r2, r3
 800319e:	4b2b      	ldr	r3, [pc, #172]	; (800324c <btnMachine+0x150>)
 80031a0:	601a      	str	r2, [r3, #0]
		if (lecturaBtn == 0 && HAL_GetTick() >= ticks + TICKS_BTN) {
 80031a2:	4b2a      	ldr	r3, [pc, #168]	; (800324c <btnMachine+0x150>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d10e      	bne.n	80031c8 <btnMachine+0xcc>
 80031aa:	f000 fd3d 	bl	8003c28 <HAL_GetTick>
 80031ae:	4602      	mov	r2, r0
 80031b0:	4b27      	ldr	r3, [pc, #156]	; (8003250 <btnMachine+0x154>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	3319      	adds	r3, #25
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d306      	bcc.n	80031c8 <btnMachine+0xcc>
			btns[index].estado = LIBERACION;
 80031ba:	4a23      	ldr	r2, [pc, #140]	; (8003248 <btnMachine+0x14c>)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	011b      	lsls	r3, r3, #4
 80031c0:	4413      	add	r3, r2
 80031c2:	3308      	adds	r3, #8
 80031c4:	2202      	movs	r2, #2
 80031c6:	601a      	str	r2, [r3, #0]
		if (lecturaBtn == 1 && ticks < TICKS_BTN) {
 80031c8:	4b20      	ldr	r3, [pc, #128]	; (800324c <btnMachine+0x150>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d133      	bne.n	8003238 <btnMachine+0x13c>
 80031d0:	4b1f      	ldr	r3, [pc, #124]	; (8003250 <btnMachine+0x154>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2b18      	cmp	r3, #24
 80031d6:	dc2f      	bgt.n	8003238 <btnMachine+0x13c>
			btns[index].estado = ESPERA;
 80031d8:	4a1b      	ldr	r2, [pc, #108]	; (8003248 <btnMachine+0x14c>)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	011b      	lsls	r3, r3, #4
 80031de:	4413      	add	r3, r2
 80031e0:	3308      	adds	r3, #8
 80031e2:	2200      	movs	r2, #0
 80031e4:	601a      	str	r2, [r3, #0]
		break;
 80031e6:	e027      	b.n	8003238 <btnMachine+0x13c>
		lecturaBtn = HAL_GPIO_ReadPin(btns[index].Port, btns[index].pin);
 80031e8:	4a17      	ldr	r2, [pc, #92]	; (8003248 <btnMachine+0x14c>)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	011b      	lsls	r3, r3, #4
 80031ee:	4413      	add	r3, r2
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	4915      	ldr	r1, [pc, #84]	; (8003248 <btnMachine+0x14c>)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	011b      	lsls	r3, r3, #4
 80031f8:	440b      	add	r3, r1
 80031fa:	3304      	adds	r3, #4
 80031fc:	881b      	ldrh	r3, [r3, #0]
 80031fe:	4619      	mov	r1, r3
 8003200:	4610      	mov	r0, r2
 8003202:	f001 fe31 	bl	8004e68 <HAL_GPIO_ReadPin>
 8003206:	4603      	mov	r3, r0
 8003208:	461a      	mov	r2, r3
 800320a:	4b10      	ldr	r3, [pc, #64]	; (800324c <btnMachine+0x150>)
 800320c:	601a      	str	r2, [r3, #0]
		if (lecturaBtn == 1) {
 800320e:	4b0f      	ldr	r3, [pc, #60]	; (800324c <btnMachine+0x150>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2b01      	cmp	r3, #1
 8003214:	d112      	bne.n	800323c <btnMachine+0x140>
			btns[index].flag = 1;
 8003216:	4a0c      	ldr	r2, [pc, #48]	; (8003248 <btnMachine+0x14c>)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	011b      	lsls	r3, r3, #4
 800321c:	4413      	add	r3, r2
 800321e:	330c      	adds	r3, #12
 8003220:	2201      	movs	r2, #1
 8003222:	601a      	str	r2, [r3, #0]
			btns[index].estado = ESPERA;
 8003224:	4a08      	ldr	r2, [pc, #32]	; (8003248 <btnMachine+0x14c>)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	011b      	lsls	r3, r3, #4
 800322a:	4413      	add	r3, r2
 800322c:	3308      	adds	r3, #8
 800322e:	2200      	movs	r2, #0
 8003230:	601a      	str	r2, [r3, #0]
		break;
 8003232:	e003      	b.n	800323c <btnMachine+0x140>
		break;
 8003234:	bf00      	nop
 8003236:	e002      	b.n	800323e <btnMachine+0x142>
		break;
 8003238:	bf00      	nop
 800323a:	e000      	b.n	800323e <btnMachine+0x142>
		break;
 800323c:	bf00      	nop
}
 800323e:	bf00      	nop
 8003240:	3708      	adds	r7, #8
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	2000125c 	.word	0x2000125c
 800324c:	20001218 	.word	0x20001218
 8003250:	20001214 	.word	0x20001214

08003254 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8003254:	b480      	push	{r7}
 8003256:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003258:	b672      	cpsid	i
}
 800325a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800325c:	e7fe      	b.n	800325c <Error_Handler+0x8>
	...

08003260 <calcularDistancia>:
#include "motors.h"


int counterD, counterI;

float calcularDistancia(int counter) {
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  return ((counter) * 2.51 / 10);
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f7fd f8c3 	bl	80003f4 <__aeabi_i2d>
 800326e:	a30c      	add	r3, pc, #48	; (adr r3, 80032a0 <calcularDistancia+0x40>)
 8003270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003274:	f7fd f928 	bl	80004c8 <__aeabi_dmul>
 8003278:	4602      	mov	r2, r0
 800327a:	460b      	mov	r3, r1
 800327c:	4610      	mov	r0, r2
 800327e:	4619      	mov	r1, r3
 8003280:	f04f 0200 	mov.w	r2, #0
 8003284:	4b08      	ldr	r3, [pc, #32]	; (80032a8 <calcularDistancia+0x48>)
 8003286:	f7fd fa49 	bl	800071c <__aeabi_ddiv>
 800328a:	4602      	mov	r2, r0
 800328c:	460b      	mov	r3, r1
 800328e:	4610      	mov	r0, r2
 8003290:	4619      	mov	r1, r3
 8003292:	f7fd fbc9 	bl	8000a28 <__aeabi_d2f>
 8003296:	4603      	mov	r3, r0
}
 8003298:	4618      	mov	r0, r3
 800329a:	3708      	adds	r7, #8
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	e147ae14 	.word	0xe147ae14
 80032a4:	4004147a 	.word	0x4004147a
 80032a8:	40240000 	.word	0x40240000

080032ac <runMotor>:
	} else {
		TIM4->CCR3 = power;
	}
}

void runMotor(int dir, int motor) {
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
	switch (dir) {
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2b05      	cmp	r3, #5
 80032ba:	d03f      	beq.n	800333c <runMotor+0x90>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2b05      	cmp	r3, #5
 80032c0:	dc57      	bgt.n	8003372 <runMotor+0xc6>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d003      	beq.n	80032d0 <runMotor+0x24>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d01b      	beq.n	8003306 <runMotor+0x5a>
			HAL_GPIO_WritePin(BIN1, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(BIN2, GPIO_PIN_RESET);
		}
		break;
	}
}
 80032ce:	e050      	b.n	8003372 <runMotor+0xc6>
		if (motor == MOTOR_A) {
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d10a      	bne.n	80032ec <runMotor+0x40>
			HAL_GPIO_WritePin(AIN1, GPIO_PIN_RESET);
 80032d6:	2200      	movs	r2, #0
 80032d8:	2108      	movs	r1, #8
 80032da:	4828      	ldr	r0, [pc, #160]	; (800337c <runMotor+0xd0>)
 80032dc:	f001 fddb 	bl	8004e96 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(AIN2, GPIO_PIN_SET);
 80032e0:	2201      	movs	r2, #1
 80032e2:	2110      	movs	r1, #16
 80032e4:	4825      	ldr	r0, [pc, #148]	; (800337c <runMotor+0xd0>)
 80032e6:	f001 fdd6 	bl	8004e96 <HAL_GPIO_WritePin>
		break;
 80032ea:	e042      	b.n	8003372 <runMotor+0xc6>
			HAL_GPIO_WritePin(BIN1, GPIO_PIN_RESET);
 80032ec:	2200      	movs	r2, #0
 80032ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80032f2:	4823      	ldr	r0, [pc, #140]	; (8003380 <runMotor+0xd4>)
 80032f4:	f001 fdcf 	bl	8004e96 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BIN2, GPIO_PIN_SET);
 80032f8:	2201      	movs	r2, #1
 80032fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80032fe:	4820      	ldr	r0, [pc, #128]	; (8003380 <runMotor+0xd4>)
 8003300:	f001 fdc9 	bl	8004e96 <HAL_GPIO_WritePin>
		break;
 8003304:	e035      	b.n	8003372 <runMotor+0xc6>
		if (motor == MOTOR_A) {
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d10a      	bne.n	8003322 <runMotor+0x76>
			HAL_GPIO_WritePin(AIN1, GPIO_PIN_SET);
 800330c:	2201      	movs	r2, #1
 800330e:	2108      	movs	r1, #8
 8003310:	481a      	ldr	r0, [pc, #104]	; (800337c <runMotor+0xd0>)
 8003312:	f001 fdc0 	bl	8004e96 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(AIN2, GPIO_PIN_RESET);
 8003316:	2200      	movs	r2, #0
 8003318:	2110      	movs	r1, #16
 800331a:	4818      	ldr	r0, [pc, #96]	; (800337c <runMotor+0xd0>)
 800331c:	f001 fdbb 	bl	8004e96 <HAL_GPIO_WritePin>
		break;
 8003320:	e027      	b.n	8003372 <runMotor+0xc6>
			HAL_GPIO_WritePin(BIN1, GPIO_PIN_SET);
 8003322:	2201      	movs	r2, #1
 8003324:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003328:	4815      	ldr	r0, [pc, #84]	; (8003380 <runMotor+0xd4>)
 800332a:	f001 fdb4 	bl	8004e96 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BIN2, GPIO_PIN_RESET);
 800332e:	2200      	movs	r2, #0
 8003330:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003334:	4812      	ldr	r0, [pc, #72]	; (8003380 <runMotor+0xd4>)
 8003336:	f001 fdae 	bl	8004e96 <HAL_GPIO_WritePin>
		break;
 800333a:	e01a      	b.n	8003372 <runMotor+0xc6>
		if (motor == MOTOR_A) {
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d10a      	bne.n	8003358 <runMotor+0xac>
			HAL_GPIO_WritePin(AIN1, GPIO_PIN_RESET);
 8003342:	2200      	movs	r2, #0
 8003344:	2108      	movs	r1, #8
 8003346:	480d      	ldr	r0, [pc, #52]	; (800337c <runMotor+0xd0>)
 8003348:	f001 fda5 	bl	8004e96 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(AIN2, GPIO_PIN_RESET);
 800334c:	2200      	movs	r2, #0
 800334e:	2110      	movs	r1, #16
 8003350:	480a      	ldr	r0, [pc, #40]	; (800337c <runMotor+0xd0>)
 8003352:	f001 fda0 	bl	8004e96 <HAL_GPIO_WritePin>
		break;
 8003356:	e00b      	b.n	8003370 <runMotor+0xc4>
			HAL_GPIO_WritePin(BIN1, GPIO_PIN_RESET);
 8003358:	2200      	movs	r2, #0
 800335a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800335e:	4808      	ldr	r0, [pc, #32]	; (8003380 <runMotor+0xd4>)
 8003360:	f001 fd99 	bl	8004e96 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BIN2, GPIO_PIN_RESET);
 8003364:	2200      	movs	r2, #0
 8003366:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800336a:	4805      	ldr	r0, [pc, #20]	; (8003380 <runMotor+0xd4>)
 800336c:	f001 fd93 	bl	8004e96 <HAL_GPIO_WritePin>
		break;
 8003370:	bf00      	nop
}
 8003372:	bf00      	nop
 8003374:	3708      	adds	r7, #8
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	40010c00 	.word	0x40010c00
 8003380:	40010800 	.word	0x40010800

08003384 <lecturaSensor>:

#include <math.h>



float lecturaSensor(int direccion, float values[4]) {
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
	switch (direccion) {
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2b03      	cmp	r3, #3
 8003392:	d841      	bhi.n	8003418 <lecturaSensor+0x94>
 8003394:	a201      	add	r2, pc, #4	; (adr r2, 800339c <lecturaSensor+0x18>)
 8003396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800339a:	bf00      	nop
 800339c:	080033ad 	.word	0x080033ad
 80033a0:	080033f1 	.word	0x080033f1
 80033a4:	08003413 	.word	0x08003413
 80033a8:	080033cf 	.word	0x080033cf
	case ADELANTE:
		return wallDetector(values[2], direccion);
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	3308      	adds	r3, #8
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7fd fe5c 	bl	8001070 <__aeabi_f2iz>
 80033b8:	4603      	mov	r3, r0
 80033ba:	6879      	ldr	r1, [r7, #4]
 80033bc:	4618      	mov	r0, r3
 80033be:	f7ff fcc9 	bl	8002d54 <wallDetector>
 80033c2:	4603      	mov	r3, r0
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7fd fc39 	bl	8000c3c <__aeabi_i2f>
 80033ca:	4603      	mov	r3, r0
 80033cc:	e025      	b.n	800341a <lecturaSensor+0x96>
		break;
	case DERECHA:
		return wallDetector(values[1], direccion);
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	3304      	adds	r3, #4
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7fd fe4b 	bl	8001070 <__aeabi_f2iz>
 80033da:	4603      	mov	r3, r0
 80033dc:	6879      	ldr	r1, [r7, #4]
 80033de:	4618      	mov	r0, r3
 80033e0:	f7ff fcb8 	bl	8002d54 <wallDetector>
 80033e4:	4603      	mov	r3, r0
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7fd fc28 	bl	8000c3c <__aeabi_i2f>
 80033ec:	4603      	mov	r3, r0
 80033ee:	e014      	b.n	800341a <lecturaSensor+0x96>
		break;
	case IZQUIERDA:
		return wallDetector(values[3], direccion);
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	330c      	adds	r3, #12
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7fd fe3a 	bl	8001070 <__aeabi_f2iz>
 80033fc:	4603      	mov	r3, r0
 80033fe:	6879      	ldr	r1, [r7, #4]
 8003400:	4618      	mov	r0, r3
 8003402:	f7ff fca7 	bl	8002d54 <wallDetector>
 8003406:	4603      	mov	r3, r0
 8003408:	4618      	mov	r0, r3
 800340a:	f7fd fc17 	bl	8000c3c <__aeabi_i2f>
 800340e:	4603      	mov	r3, r0
 8003410:	e003      	b.n	800341a <lecturaSensor+0x96>
		break;
	case ATRAS:
		return 0;
 8003412:	f04f 0300 	mov.w	r3, #0
 8003416:	e000      	b.n	800341a <lecturaSensor+0x96>
		break;
	}
	return 15;
 8003418:	4b02      	ldr	r3, [pc, #8]	; (8003424 <lecturaSensor+0xa0>)
}
 800341a:	4618      	mov	r0, r3
 800341c:	3708      	adds	r7, #8
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	41700000 	.word	0x41700000

08003428 <lecSensor>:

float lecSensor(int n, uint32_t values[10]) {
 8003428:	b580      	push	{r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
	long suma = 0;
 8003432:	2300      	movs	r3, #0
 8003434:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < n; i++) {
 8003436:	2300      	movs	r3, #0
 8003438:	613b      	str	r3, [r7, #16]
 800343a:	e00a      	b.n	8003452 <lecSensor+0x2a>
		suma = suma + values[i];
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	683a      	ldr	r2, [r7, #0]
 8003442:	4413      	add	r3, r2
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	4413      	add	r3, r2
 800344a:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < n; i++) {
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	3301      	adds	r3, #1
 8003450:	613b      	str	r3, [r7, #16]
 8003452:	693a      	ldr	r2, [r7, #16]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	429a      	cmp	r2, r3
 8003458:	dbf0      	blt.n	800343c <lecSensor+0x14>
	}
	float adc = suma / n;
 800345a:	697a      	ldr	r2, [r7, #20]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	fb92 f3f3 	sdiv	r3, r2, r3
 8003462:	4618      	mov	r0, r3
 8003464:	f7fd fbea 	bl	8000c3c <__aeabi_i2f>
 8003468:	4603      	mov	r3, r0
 800346a:	60bb      	str	r3, [r7, #8]
	float volts = adc * 0.0008056640; // value from sensor * (5/1024)
 800346c:	68b8      	ldr	r0, [r7, #8]
 800346e:	f7fc ffd3 	bl	8000418 <__aeabi_f2d>
 8003472:	a323      	add	r3, pc, #140	; (adr r3, 8003500 <lecSensor+0xd8>)
 8003474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003478:	f7fd f826 	bl	80004c8 <__aeabi_dmul>
 800347c:	4602      	mov	r2, r0
 800347e:	460b      	mov	r3, r1
 8003480:	4610      	mov	r0, r2
 8003482:	4619      	mov	r1, r3
 8003484:	f7fd fad0 	bl	8000a28 <__aeabi_d2f>
 8003488:	4603      	mov	r3, r0
 800348a:	60fb      	str	r3, [r7, #12]
	if (volts <= 0.35)
 800348c:	68f8      	ldr	r0, [r7, #12]
 800348e:	f7fc ffc3 	bl	8000418 <__aeabi_f2d>
 8003492:	a31d      	add	r3, pc, #116	; (adr r3, 8003508 <lecSensor+0xe0>)
 8003494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003498:	f7fd fa92 	bl	80009c0 <__aeabi_dcmple>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d001      	beq.n	80034a6 <lecSensor+0x7e>
		volts = 0.35;
 80034a2:	4b1d      	ldr	r3, [pc, #116]	; (8003518 <lecSensor+0xf0>)
 80034a4:	60fb      	str	r3, [r7, #12]
	volts = pow(volts - 0.3, 0.25);/*convertimos a cm con un aproximacion grafica*/
 80034a6:	68f8      	ldr	r0, [r7, #12]
 80034a8:	f7fc ffb6 	bl	8000418 <__aeabi_f2d>
 80034ac:	a318      	add	r3, pc, #96	; (adr r3, 8003510 <lecSensor+0xe8>)
 80034ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b2:	f7fc fe51 	bl	8000158 <__aeabi_dsub>
 80034b6:	4602      	mov	r2, r0
 80034b8:	460b      	mov	r3, r1
 80034ba:	4610      	mov	r0, r2
 80034bc:	4619      	mov	r1, r3
 80034be:	f04f 0200 	mov.w	r2, #0
 80034c2:	4b16      	ldr	r3, [pc, #88]	; (800351c <lecSensor+0xf4>)
 80034c4:	f003 fbf4 	bl	8006cb0 <pow>
 80034c8:	4602      	mov	r2, r0
 80034ca:	460b      	mov	r3, r1
 80034cc:	4610      	mov	r0, r2
 80034ce:	4619      	mov	r1, r3
 80034d0:	f7fd faaa 	bl	8000a28 <__aeabi_d2f>
 80034d4:	4603      	mov	r3, r0
 80034d6:	60fb      	str	r3, [r7, #12]
	volts = 27.5 / volts; /*no preguntar por los valores*/
 80034d8:	68f9      	ldr	r1, [r7, #12]
 80034da:	4811      	ldr	r0, [pc, #68]	; (8003520 <lecSensor+0xf8>)
 80034dc:	f7fd fcb6 	bl	8000e4c <__aeabi_fdiv>
 80034e0:	4603      	mov	r3, r0
 80034e2:	60fb      	str	r3, [r7, #12]
	volts -= 18;
 80034e4:	490f      	ldr	r1, [pc, #60]	; (8003524 <lecSensor+0xfc>)
 80034e6:	68f8      	ldr	r0, [r7, #12]
 80034e8:	f7fd faf2 	bl	8000ad0 <__aeabi_fsub>
 80034ec:	4603      	mov	r3, r0
 80034ee:	60fb      	str	r3, [r7, #12]

	return volts;
 80034f0:	68fb      	ldr	r3, [r7, #12]

}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3718      	adds	r7, #24
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	f3af 8000 	nop.w
 8003500:	440a4e96 	.word	0x440a4e96
 8003504:	3f4a6666 	.word	0x3f4a6666
 8003508:	66666666 	.word	0x66666666
 800350c:	3fd66666 	.word	0x3fd66666
 8003510:	33333333 	.word	0x33333333
 8003514:	3fd33333 	.word	0x3fd33333
 8003518:	3eb33333 	.word	0x3eb33333
 800351c:	3fd00000 	.word	0x3fd00000
 8003520:	41dc0000 	.word	0x41dc0000
 8003524:	41900000 	.word	0x41900000

08003528 <lecturaCNY70>:

int lecturaCNY70(int n, uint32_t values[10]) {
 8003528:	b480      	push	{r7}
 800352a:	b087      	sub	sp, #28
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
	long suma = 0;
 8003532:	2300      	movs	r3, #0
 8003534:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < n; i++) {
 8003536:	2300      	movs	r3, #0
 8003538:	613b      	str	r3, [r7, #16]
 800353a:	e00a      	b.n	8003552 <lecturaCNY70+0x2a>
		suma = suma + values[i];
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	683a      	ldr	r2, [r7, #0]
 8003542:	4413      	add	r3, r2
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	4413      	add	r3, r2
 800354a:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < n; i++) {
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	3301      	adds	r3, #1
 8003550:	613b      	str	r3, [r7, #16]
 8003552:	693a      	ldr	r2, [r7, #16]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	429a      	cmp	r2, r3
 8003558:	dbf0      	blt.n	800353c <lecturaCNY70+0x14>
	}
	int adc = (suma / n);
 800355a:	697a      	ldr	r2, [r7, #20]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	fb92 f3f3 	sdiv	r3, r2, r3
 8003562:	60fb      	str	r3, [r7, #12]
	if (adc < 1000) {
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800356a:	da01      	bge.n	8003570 <lecturaCNY70+0x48>
		return BLANCO;
 800356c:	2300      	movs	r3, #0
 800356e:	e000      	b.n	8003572 <lecturaCNY70+0x4a>
	} else {
		return NEGRO;
 8003570:	2301      	movs	r3, #1
	}
}
 8003572:	4618      	mov	r0, r3
 8003574:	371c      	adds	r7, #28
 8003576:	46bd      	mov	sp, r7
 8003578:	bc80      	pop	{r7}
 800357a:	4770      	bx	lr

0800357c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800357c:	b480      	push	{r7}
 800357e:	b085      	sub	sp, #20
 8003580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003582:	4b15      	ldr	r3, [pc, #84]	; (80035d8 <HAL_MspInit+0x5c>)
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	4a14      	ldr	r2, [pc, #80]	; (80035d8 <HAL_MspInit+0x5c>)
 8003588:	f043 0301 	orr.w	r3, r3, #1
 800358c:	6193      	str	r3, [r2, #24]
 800358e:	4b12      	ldr	r3, [pc, #72]	; (80035d8 <HAL_MspInit+0x5c>)
 8003590:	699b      	ldr	r3, [r3, #24]
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	60bb      	str	r3, [r7, #8]
 8003598:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800359a:	4b0f      	ldr	r3, [pc, #60]	; (80035d8 <HAL_MspInit+0x5c>)
 800359c:	69db      	ldr	r3, [r3, #28]
 800359e:	4a0e      	ldr	r2, [pc, #56]	; (80035d8 <HAL_MspInit+0x5c>)
 80035a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035a4:	61d3      	str	r3, [r2, #28]
 80035a6:	4b0c      	ldr	r3, [pc, #48]	; (80035d8 <HAL_MspInit+0x5c>)
 80035a8:	69db      	ldr	r3, [r3, #28]
 80035aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ae:	607b      	str	r3, [r7, #4]
 80035b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80035b2:	4b0a      	ldr	r3, [pc, #40]	; (80035dc <HAL_MspInit+0x60>)
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	60fb      	str	r3, [r7, #12]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80035be:	60fb      	str	r3, [r7, #12]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80035c6:	60fb      	str	r3, [r7, #12]
 80035c8:	4a04      	ldr	r2, [pc, #16]	; (80035dc <HAL_MspInit+0x60>)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035ce:	bf00      	nop
 80035d0:	3714      	adds	r7, #20
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bc80      	pop	{r7}
 80035d6:	4770      	bx	lr
 80035d8:	40021000 	.word	0x40021000
 80035dc:	40010000 	.word	0x40010000

080035e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80035e0:	b480      	push	{r7}
 80035e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80035e4:	e7fe      	b.n	80035e4 <NMI_Handler+0x4>

080035e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035e6:	b480      	push	{r7}
 80035e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035ea:	e7fe      	b.n	80035ea <HardFault_Handler+0x4>

080035ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80035ec:	b480      	push	{r7}
 80035ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80035f0:	e7fe      	b.n	80035f0 <MemManage_Handler+0x4>

080035f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80035f2:	b480      	push	{r7}
 80035f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80035f6:	e7fe      	b.n	80035f6 <BusFault_Handler+0x4>

080035f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80035f8:	b480      	push	{r7}
 80035fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80035fc:	e7fe      	b.n	80035fc <UsageFault_Handler+0x4>

080035fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80035fe:	b480      	push	{r7}
 8003600:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003602:	bf00      	nop
 8003604:	46bd      	mov	sp, r7
 8003606:	bc80      	pop	{r7}
 8003608:	4770      	bx	lr

0800360a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800360a:	b480      	push	{r7}
 800360c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800360e:	bf00      	nop
 8003610:	46bd      	mov	sp, r7
 8003612:	bc80      	pop	{r7}
 8003614:	4770      	bx	lr

08003616 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003616:	b480      	push	{r7}
 8003618:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800361a:	bf00      	nop
 800361c:	46bd      	mov	sp, r7
 800361e:	bc80      	pop	{r7}
 8003620:	4770      	bx	lr

08003622 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003622:	b580      	push	{r7, lr}
 8003624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003626:	f000 faed 	bl	8003c04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800362a:	bf00      	nop
 800362c:	bd80      	pop	{r7, pc}
	...

08003630 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003634:	4802      	ldr	r0, [pc, #8]	; (8003640 <DMA1_Channel1_IRQHandler+0x10>)
 8003636:	f001 f95f 	bl	80048f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800363a:	bf00      	nop
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	200000f8 	.word	0x200000f8

08003644 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003648:	4802      	ldr	r0, [pc, #8]	; (8003654 <USART1_IRQHandler+0x10>)
 800364a:	f002 ff39 	bl	80064c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800364e:	bf00      	nop
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	20002bc4 	.word	0x20002bc4

08003658 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003658:	b480      	push	{r7}
 800365a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800365c:	bf00      	nop
 800365e:	46bd      	mov	sp, r7
 8003660:	bc80      	pop	{r7}
 8003662:	4770      	bx	lr

08003664 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b08a      	sub	sp, #40	; 0x28
 8003668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800366a:	f107 0320 	add.w	r3, r7, #32
 800366e:	2200      	movs	r2, #0
 8003670:	601a      	str	r2, [r3, #0]
 8003672:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003674:	1d3b      	adds	r3, r7, #4
 8003676:	2200      	movs	r2, #0
 8003678:	601a      	str	r2, [r3, #0]
 800367a:	605a      	str	r2, [r3, #4]
 800367c:	609a      	str	r2, [r3, #8]
 800367e:	60da      	str	r2, [r3, #12]
 8003680:	611a      	str	r2, [r3, #16]
 8003682:	615a      	str	r2, [r3, #20]
 8003684:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003686:	4b28      	ldr	r3, [pc, #160]	; (8003728 <MX_TIM2_Init+0xc4>)
 8003688:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800368c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800368e:	4b26      	ldr	r3, [pc, #152]	; (8003728 <MX_TIM2_Init+0xc4>)
 8003690:	2200      	movs	r2, #0
 8003692:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003694:	4b24      	ldr	r3, [pc, #144]	; (8003728 <MX_TIM2_Init+0xc4>)
 8003696:	2200      	movs	r2, #0
 8003698:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800369a:	4b23      	ldr	r3, [pc, #140]	; (8003728 <MX_TIM2_Init+0xc4>)
 800369c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036a0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036a2:	4b21      	ldr	r3, [pc, #132]	; (8003728 <MX_TIM2_Init+0xc4>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036a8:	4b1f      	ldr	r3, [pc, #124]	; (8003728 <MX_TIM2_Init+0xc4>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80036ae:	481e      	ldr	r0, [pc, #120]	; (8003728 <MX_TIM2_Init+0xc4>)
 80036b0:	f002 f8da 	bl	8005868 <HAL_TIM_PWM_Init>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d001      	beq.n	80036be <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80036ba:	f7ff fdcb 	bl	8003254 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036be:	2300      	movs	r3, #0
 80036c0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036c2:	2300      	movs	r3, #0
 80036c4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80036c6:	f107 0320 	add.w	r3, r7, #32
 80036ca:	4619      	mov	r1, r3
 80036cc:	4816      	ldr	r0, [pc, #88]	; (8003728 <MX_TIM2_Init+0xc4>)
 80036ce:	f002 fdb9 	bl	8006244 <HAL_TIMEx_MasterConfigSynchronization>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d001      	beq.n	80036dc <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80036d8:	f7ff fdbc 	bl	8003254 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80036dc:	2360      	movs	r3, #96	; 0x60
 80036de:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80036e0:	2300      	movs	r3, #0
 80036e2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80036e4:	2300      	movs	r3, #0
 80036e6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80036e8:	2300      	movs	r3, #0
 80036ea:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80036ec:	1d3b      	adds	r3, r7, #4
 80036ee:	2208      	movs	r2, #8
 80036f0:	4619      	mov	r1, r3
 80036f2:	480d      	ldr	r0, [pc, #52]	; (8003728 <MX_TIM2_Init+0xc4>)
 80036f4:	f002 fada 	bl	8005cac <HAL_TIM_PWM_ConfigChannel>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d001      	beq.n	8003702 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80036fe:	f7ff fda9 	bl	8003254 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003702:	1d3b      	adds	r3, r7, #4
 8003704:	220c      	movs	r2, #12
 8003706:	4619      	mov	r1, r3
 8003708:	4807      	ldr	r0, [pc, #28]	; (8003728 <MX_TIM2_Init+0xc4>)
 800370a:	f002 facf 	bl	8005cac <HAL_TIM_PWM_ConfigChannel>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d001      	beq.n	8003718 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8003714:	f7ff fd9e 	bl	8003254 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003718:	4803      	ldr	r0, [pc, #12]	; (8003728 <MX_TIM2_Init+0xc4>)
 800371a:	f000 f943 	bl	80039a4 <HAL_TIM_MspPostInit>

}
 800371e:	bf00      	nop
 8003720:	3728      	adds	r7, #40	; 0x28
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	20002aec 	.word	0x20002aec

0800372c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b08c      	sub	sp, #48	; 0x30
 8003730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003732:	f107 030c 	add.w	r3, r7, #12
 8003736:	2224      	movs	r2, #36	; 0x24
 8003738:	2100      	movs	r1, #0
 800373a:	4618      	mov	r0, r3
 800373c:	f004 f9c4 	bl	8007ac8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003740:	1d3b      	adds	r3, r7, #4
 8003742:	2200      	movs	r2, #0
 8003744:	601a      	str	r2, [r3, #0]
 8003746:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003748:	4b20      	ldr	r3, [pc, #128]	; (80037cc <MX_TIM3_Init+0xa0>)
 800374a:	4a21      	ldr	r2, [pc, #132]	; (80037d0 <MX_TIM3_Init+0xa4>)
 800374c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800374e:	4b1f      	ldr	r3, [pc, #124]	; (80037cc <MX_TIM3_Init+0xa0>)
 8003750:	2200      	movs	r2, #0
 8003752:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003754:	4b1d      	ldr	r3, [pc, #116]	; (80037cc <MX_TIM3_Init+0xa0>)
 8003756:	2200      	movs	r2, #0
 8003758:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800375a:	4b1c      	ldr	r3, [pc, #112]	; (80037cc <MX_TIM3_Init+0xa0>)
 800375c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003760:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003762:	4b1a      	ldr	r3, [pc, #104]	; (80037cc <MX_TIM3_Init+0xa0>)
 8003764:	2200      	movs	r2, #0
 8003766:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003768:	4b18      	ldr	r3, [pc, #96]	; (80037cc <MX_TIM3_Init+0xa0>)
 800376a:	2200      	movs	r2, #0
 800376c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800376e:	2303      	movs	r3, #3
 8003770:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003772:	2300      	movs	r3, #0
 8003774:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003776:	2301      	movs	r3, #1
 8003778:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800377a:	2300      	movs	r3, #0
 800377c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800377e:	230a      	movs	r3, #10
 8003780:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003782:	2300      	movs	r3, #0
 8003784:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003786:	2301      	movs	r3, #1
 8003788:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800378a:	2300      	movs	r3, #0
 800378c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800378e:	2300      	movs	r3, #0
 8003790:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003792:	f107 030c 	add.w	r3, r7, #12
 8003796:	4619      	mov	r1, r3
 8003798:	480c      	ldr	r0, [pc, #48]	; (80037cc <MX_TIM3_Init+0xa0>)
 800379a:	f002 f957 	bl	8005a4c <HAL_TIM_Encoder_Init>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d001      	beq.n	80037a8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80037a4:	f7ff fd56 	bl	8003254 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037a8:	2300      	movs	r3, #0
 80037aa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037ac:	2300      	movs	r3, #0
 80037ae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80037b0:	1d3b      	adds	r3, r7, #4
 80037b2:	4619      	mov	r1, r3
 80037b4:	4805      	ldr	r0, [pc, #20]	; (80037cc <MX_TIM3_Init+0xa0>)
 80037b6:	f002 fd45 	bl	8006244 <HAL_TIMEx_MasterConfigSynchronization>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d001      	beq.n	80037c4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80037c0:	f7ff fd48 	bl	8003254 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80037c4:	bf00      	nop
 80037c6:	3730      	adds	r7, #48	; 0x30
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	20002b34 	.word	0x20002b34
 80037d0:	40000400 	.word	0x40000400

080037d4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b08c      	sub	sp, #48	; 0x30
 80037d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80037da:	f107 030c 	add.w	r3, r7, #12
 80037de:	2224      	movs	r2, #36	; 0x24
 80037e0:	2100      	movs	r1, #0
 80037e2:	4618      	mov	r0, r3
 80037e4:	f004 f970 	bl	8007ac8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037e8:	1d3b      	adds	r3, r7, #4
 80037ea:	2200      	movs	r2, #0
 80037ec:	601a      	str	r2, [r3, #0]
 80037ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80037f0:	4b20      	ldr	r3, [pc, #128]	; (8003874 <MX_TIM4_Init+0xa0>)
 80037f2:	4a21      	ldr	r2, [pc, #132]	; (8003878 <MX_TIM4_Init+0xa4>)
 80037f4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80037f6:	4b1f      	ldr	r3, [pc, #124]	; (8003874 <MX_TIM4_Init+0xa0>)
 80037f8:	2200      	movs	r2, #0
 80037fa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037fc:	4b1d      	ldr	r3, [pc, #116]	; (8003874 <MX_TIM4_Init+0xa0>)
 80037fe:	2200      	movs	r2, #0
 8003800:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003802:	4b1c      	ldr	r3, [pc, #112]	; (8003874 <MX_TIM4_Init+0xa0>)
 8003804:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003808:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800380a:	4b1a      	ldr	r3, [pc, #104]	; (8003874 <MX_TIM4_Init+0xa0>)
 800380c:	2200      	movs	r2, #0
 800380e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003810:	4b18      	ldr	r3, [pc, #96]	; (8003874 <MX_TIM4_Init+0xa0>)
 8003812:	2280      	movs	r2, #128	; 0x80
 8003814:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003816:	2303      	movs	r3, #3
 8003818:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800381a:	2300      	movs	r3, #0
 800381c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800381e:	2301      	movs	r3, #1
 8003820:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003822:	2300      	movs	r3, #0
 8003824:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8003826:	230a      	movs	r3, #10
 8003828:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800382a:	2300      	movs	r3, #0
 800382c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800382e:	2301      	movs	r3, #1
 8003830:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003832:	2300      	movs	r3, #0
 8003834:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003836:	2300      	movs	r3, #0
 8003838:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800383a:	f107 030c 	add.w	r3, r7, #12
 800383e:	4619      	mov	r1, r3
 8003840:	480c      	ldr	r0, [pc, #48]	; (8003874 <MX_TIM4_Init+0xa0>)
 8003842:	f002 f903 	bl	8005a4c <HAL_TIM_Encoder_Init>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d001      	beq.n	8003850 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800384c:	f7ff fd02 	bl	8003254 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003850:	2300      	movs	r3, #0
 8003852:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003854:	2300      	movs	r3, #0
 8003856:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003858:	1d3b      	adds	r3, r7, #4
 800385a:	4619      	mov	r1, r3
 800385c:	4805      	ldr	r0, [pc, #20]	; (8003874 <MX_TIM4_Init+0xa0>)
 800385e:	f002 fcf1 	bl	8006244 <HAL_TIMEx_MasterConfigSynchronization>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d001      	beq.n	800386c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8003868:	f7ff fcf4 	bl	8003254 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800386c:	bf00      	nop
 800386e:	3730      	adds	r7, #48	; 0x30
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	20002b7c 	.word	0x20002b7c
 8003878:	40000800 	.word	0x40000800

0800387c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800387c:	b480      	push	{r7}
 800387e:	b085      	sub	sp, #20
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800388c:	d10b      	bne.n	80038a6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800388e:	4b08      	ldr	r3, [pc, #32]	; (80038b0 <HAL_TIM_PWM_MspInit+0x34>)
 8003890:	69db      	ldr	r3, [r3, #28]
 8003892:	4a07      	ldr	r2, [pc, #28]	; (80038b0 <HAL_TIM_PWM_MspInit+0x34>)
 8003894:	f043 0301 	orr.w	r3, r3, #1
 8003898:	61d3      	str	r3, [r2, #28]
 800389a:	4b05      	ldr	r3, [pc, #20]	; (80038b0 <HAL_TIM_PWM_MspInit+0x34>)
 800389c:	69db      	ldr	r3, [r3, #28]
 800389e:	f003 0301 	and.w	r3, r3, #1
 80038a2:	60fb      	str	r3, [r7, #12]
 80038a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80038a6:	bf00      	nop
 80038a8:	3714      	adds	r7, #20
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bc80      	pop	{r7}
 80038ae:	4770      	bx	lr
 80038b0:	40021000 	.word	0x40021000

080038b4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b08a      	sub	sp, #40	; 0x28
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038bc:	f107 0318 	add.w	r3, r7, #24
 80038c0:	2200      	movs	r2, #0
 80038c2:	601a      	str	r2, [r3, #0]
 80038c4:	605a      	str	r2, [r3, #4]
 80038c6:	609a      	str	r2, [r3, #8]
 80038c8:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM3)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a30      	ldr	r2, [pc, #192]	; (8003990 <HAL_TIM_Encoder_MspInit+0xdc>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d124      	bne.n	800391e <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80038d4:	4b2f      	ldr	r3, [pc, #188]	; (8003994 <HAL_TIM_Encoder_MspInit+0xe0>)
 80038d6:	69db      	ldr	r3, [r3, #28]
 80038d8:	4a2e      	ldr	r2, [pc, #184]	; (8003994 <HAL_TIM_Encoder_MspInit+0xe0>)
 80038da:	f043 0302 	orr.w	r3, r3, #2
 80038de:	61d3      	str	r3, [r2, #28]
 80038e0:	4b2c      	ldr	r3, [pc, #176]	; (8003994 <HAL_TIM_Encoder_MspInit+0xe0>)
 80038e2:	69db      	ldr	r3, [r3, #28]
 80038e4:	f003 0302 	and.w	r3, r3, #2
 80038e8:	617b      	str	r3, [r7, #20]
 80038ea:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038ec:	4b29      	ldr	r3, [pc, #164]	; (8003994 <HAL_TIM_Encoder_MspInit+0xe0>)
 80038ee:	699b      	ldr	r3, [r3, #24]
 80038f0:	4a28      	ldr	r2, [pc, #160]	; (8003994 <HAL_TIM_Encoder_MspInit+0xe0>)
 80038f2:	f043 0304 	orr.w	r3, r3, #4
 80038f6:	6193      	str	r3, [r2, #24]
 80038f8:	4b26      	ldr	r3, [pc, #152]	; (8003994 <HAL_TIM_Encoder_MspInit+0xe0>)
 80038fa:	699b      	ldr	r3, [r3, #24]
 80038fc:	f003 0304 	and.w	r3, r3, #4
 8003900:	613b      	str	r3, [r7, #16]
 8003902:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = MB1_Pin|MB2_Pin;
 8003904:	23c0      	movs	r3, #192	; 0xc0
 8003906:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003908:	2300      	movs	r3, #0
 800390a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800390c:	2300      	movs	r3, #0
 800390e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003910:	f107 0318 	add.w	r3, r7, #24
 8003914:	4619      	mov	r1, r3
 8003916:	4820      	ldr	r0, [pc, #128]	; (8003998 <HAL_TIM_Encoder_MspInit+0xe4>)
 8003918:	f001 f922 	bl	8004b60 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800391c:	e034      	b.n	8003988 <HAL_TIM_Encoder_MspInit+0xd4>
  else if(tim_encoderHandle->Instance==TIM4)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a1e      	ldr	r2, [pc, #120]	; (800399c <HAL_TIM_Encoder_MspInit+0xe8>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d12f      	bne.n	8003988 <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003928:	4b1a      	ldr	r3, [pc, #104]	; (8003994 <HAL_TIM_Encoder_MspInit+0xe0>)
 800392a:	69db      	ldr	r3, [r3, #28]
 800392c:	4a19      	ldr	r2, [pc, #100]	; (8003994 <HAL_TIM_Encoder_MspInit+0xe0>)
 800392e:	f043 0304 	orr.w	r3, r3, #4
 8003932:	61d3      	str	r3, [r2, #28]
 8003934:	4b17      	ldr	r3, [pc, #92]	; (8003994 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003936:	69db      	ldr	r3, [r3, #28]
 8003938:	f003 0304 	and.w	r3, r3, #4
 800393c:	60fb      	str	r3, [r7, #12]
 800393e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003940:	4b14      	ldr	r3, [pc, #80]	; (8003994 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	4a13      	ldr	r2, [pc, #76]	; (8003994 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003946:	f043 0308 	orr.w	r3, r3, #8
 800394a:	6193      	str	r3, [r2, #24]
 800394c:	4b11      	ldr	r3, [pc, #68]	; (8003994 <HAL_TIM_Encoder_MspInit+0xe0>)
 800394e:	699b      	ldr	r3, [r3, #24]
 8003950:	f003 0308 	and.w	r3, r3, #8
 8003954:	60bb      	str	r3, [r7, #8]
 8003956:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MA2_Pin;
 8003958:	2340      	movs	r3, #64	; 0x40
 800395a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800395c:	2300      	movs	r3, #0
 800395e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003960:	2300      	movs	r3, #0
 8003962:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(MA2_GPIO_Port, &GPIO_InitStruct);
 8003964:	f107 0318 	add.w	r3, r7, #24
 8003968:	4619      	mov	r1, r3
 800396a:	480d      	ldr	r0, [pc, #52]	; (80039a0 <HAL_TIM_Encoder_MspInit+0xec>)
 800396c:	f001 f8f8 	bl	8004b60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MA1_Pin;
 8003970:	2380      	movs	r3, #128	; 0x80
 8003972:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003974:	2300      	movs	r3, #0
 8003976:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003978:	2300      	movs	r3, #0
 800397a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(MA1_GPIO_Port, &GPIO_InitStruct);
 800397c:	f107 0318 	add.w	r3, r7, #24
 8003980:	4619      	mov	r1, r3
 8003982:	4807      	ldr	r0, [pc, #28]	; (80039a0 <HAL_TIM_Encoder_MspInit+0xec>)
 8003984:	f001 f8ec 	bl	8004b60 <HAL_GPIO_Init>
}
 8003988:	bf00      	nop
 800398a:	3728      	adds	r7, #40	; 0x28
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	40000400 	.word	0x40000400
 8003994:	40021000 	.word	0x40021000
 8003998:	40010800 	.word	0x40010800
 800399c:	40000800 	.word	0x40000800
 80039a0:	40010c00 	.word	0x40010c00

080039a4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b088      	sub	sp, #32
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039ac:	f107 030c 	add.w	r3, r7, #12
 80039b0:	2200      	movs	r2, #0
 80039b2:	601a      	str	r2, [r3, #0]
 80039b4:	605a      	str	r2, [r3, #4]
 80039b6:	609a      	str	r2, [r3, #8]
 80039b8:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039c2:	d12a      	bne.n	8003a1a <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039c4:	4b17      	ldr	r3, [pc, #92]	; (8003a24 <HAL_TIM_MspPostInit+0x80>)
 80039c6:	699b      	ldr	r3, [r3, #24]
 80039c8:	4a16      	ldr	r2, [pc, #88]	; (8003a24 <HAL_TIM_MspPostInit+0x80>)
 80039ca:	f043 0308 	orr.w	r3, r3, #8
 80039ce:	6193      	str	r3, [r2, #24]
 80039d0:	4b14      	ldr	r3, [pc, #80]	; (8003a24 <HAL_TIM_MspPostInit+0x80>)
 80039d2:	699b      	ldr	r3, [r3, #24]
 80039d4:	f003 0308 	and.w	r3, r3, #8
 80039d8:	60bb      	str	r3, [r7, #8]
 80039da:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 80039dc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80039e0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039e2:	2302      	movs	r3, #2
 80039e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039e6:	2302      	movs	r3, #2
 80039e8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039ea:	f107 030c 	add.w	r3, r7, #12
 80039ee:	4619      	mov	r1, r3
 80039f0:	480d      	ldr	r0, [pc, #52]	; (8003a28 <HAL_TIM_MspPostInit+0x84>)
 80039f2:	f001 f8b5 	bl	8004b60 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 80039f6:	4b0d      	ldr	r3, [pc, #52]	; (8003a2c <HAL_TIM_MspPostInit+0x88>)
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	61fb      	str	r3, [r7, #28]
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a02:	61fb      	str	r3, [r7, #28]
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003a0a:	61fb      	str	r3, [r7, #28]
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a12:	61fb      	str	r3, [r7, #28]
 8003a14:	4a05      	ldr	r2, [pc, #20]	; (8003a2c <HAL_TIM_MspPostInit+0x88>)
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003a1a:	bf00      	nop
 8003a1c:	3720      	adds	r7, #32
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	40021000 	.word	0x40021000
 8003a28:	40010c00 	.word	0x40010c00
 8003a2c:	40010000 	.word	0x40010000

08003a30 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003a34:	4b11      	ldr	r3, [pc, #68]	; (8003a7c <MX_USART1_UART_Init+0x4c>)
 8003a36:	4a12      	ldr	r2, [pc, #72]	; (8003a80 <MX_USART1_UART_Init+0x50>)
 8003a38:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8003a3a:	4b10      	ldr	r3, [pc, #64]	; (8003a7c <MX_USART1_UART_Init+0x4c>)
 8003a3c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8003a40:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003a42:	4b0e      	ldr	r3, [pc, #56]	; (8003a7c <MX_USART1_UART_Init+0x4c>)
 8003a44:	2200      	movs	r2, #0
 8003a46:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003a48:	4b0c      	ldr	r3, [pc, #48]	; (8003a7c <MX_USART1_UART_Init+0x4c>)
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003a4e:	4b0b      	ldr	r3, [pc, #44]	; (8003a7c <MX_USART1_UART_Init+0x4c>)
 8003a50:	2200      	movs	r2, #0
 8003a52:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003a54:	4b09      	ldr	r3, [pc, #36]	; (8003a7c <MX_USART1_UART_Init+0x4c>)
 8003a56:	220c      	movs	r2, #12
 8003a58:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a5a:	4b08      	ldr	r3, [pc, #32]	; (8003a7c <MX_USART1_UART_Init+0x4c>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a60:	4b06      	ldr	r3, [pc, #24]	; (8003a7c <MX_USART1_UART_Init+0x4c>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003a66:	4805      	ldr	r0, [pc, #20]	; (8003a7c <MX_USART1_UART_Init+0x4c>)
 8003a68:	f002 fc4a 	bl	8006300 <HAL_UART_Init>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d001      	beq.n	8003a76 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003a72:	f7ff fbef 	bl	8003254 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003a76:	bf00      	nop
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	20002bc4 	.word	0x20002bc4
 8003a80:	40013800 	.word	0x40013800

08003a84 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b088      	sub	sp, #32
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a8c:	f107 0310 	add.w	r3, r7, #16
 8003a90:	2200      	movs	r2, #0
 8003a92:	601a      	str	r2, [r3, #0]
 8003a94:	605a      	str	r2, [r3, #4]
 8003a96:	609a      	str	r2, [r3, #8]
 8003a98:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a20      	ldr	r2, [pc, #128]	; (8003b20 <HAL_UART_MspInit+0x9c>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d139      	bne.n	8003b18 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003aa4:	4b1f      	ldr	r3, [pc, #124]	; (8003b24 <HAL_UART_MspInit+0xa0>)
 8003aa6:	699b      	ldr	r3, [r3, #24]
 8003aa8:	4a1e      	ldr	r2, [pc, #120]	; (8003b24 <HAL_UART_MspInit+0xa0>)
 8003aaa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003aae:	6193      	str	r3, [r2, #24]
 8003ab0:	4b1c      	ldr	r3, [pc, #112]	; (8003b24 <HAL_UART_MspInit+0xa0>)
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ab8:	60fb      	str	r3, [r7, #12]
 8003aba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003abc:	4b19      	ldr	r3, [pc, #100]	; (8003b24 <HAL_UART_MspInit+0xa0>)
 8003abe:	699b      	ldr	r3, [r3, #24]
 8003ac0:	4a18      	ldr	r2, [pc, #96]	; (8003b24 <HAL_UART_MspInit+0xa0>)
 8003ac2:	f043 0304 	orr.w	r3, r3, #4
 8003ac6:	6193      	str	r3, [r2, #24]
 8003ac8:	4b16      	ldr	r3, [pc, #88]	; (8003b24 <HAL_UART_MspInit+0xa0>)
 8003aca:	699b      	ldr	r3, [r3, #24]
 8003acc:	f003 0304 	and.w	r3, r3, #4
 8003ad0:	60bb      	str	r3, [r7, #8]
 8003ad2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003ad4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ad8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ada:	2302      	movs	r3, #2
 8003adc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ae2:	f107 0310 	add.w	r3, r7, #16
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	480f      	ldr	r0, [pc, #60]	; (8003b28 <HAL_UART_MspInit+0xa4>)
 8003aea:	f001 f839 	bl	8004b60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003aee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003af2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003af4:	2300      	movs	r3, #0
 8003af6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003af8:	2300      	movs	r3, #0
 8003afa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003afc:	f107 0310 	add.w	r3, r7, #16
 8003b00:	4619      	mov	r1, r3
 8003b02:	4809      	ldr	r0, [pc, #36]	; (8003b28 <HAL_UART_MspInit+0xa4>)
 8003b04:	f001 f82c 	bl	8004b60 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
     HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003b08:	2200      	movs	r2, #0
 8003b0a:	2100      	movs	r1, #0
 8003b0c:	2025      	movs	r0, #37	; 0x25
 8003b0e:	f000 fd52 	bl	80045b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003b12:	2025      	movs	r0, #37	; 0x25
 8003b14:	f000 fd6b 	bl	80045ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003b18:	bf00      	nop
 8003b1a:	3720      	adds	r7, #32
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	40013800 	.word	0x40013800
 8003b24:	40021000 	.word	0x40021000
 8003b28:	40010800 	.word	0x40010800

08003b2c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003b2c:	480c      	ldr	r0, [pc, #48]	; (8003b60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003b2e:	490d      	ldr	r1, [pc, #52]	; (8003b64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003b30:	4a0d      	ldr	r2, [pc, #52]	; (8003b68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003b32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b34:	e002      	b.n	8003b3c <LoopCopyDataInit>

08003b36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b3a:	3304      	adds	r3, #4

08003b3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b40:	d3f9      	bcc.n	8003b36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b42:	4a0a      	ldr	r2, [pc, #40]	; (8003b6c <LoopFillZerobss+0x1e>)
	  ldr r4, =_ebss
 8003b44:	4c0a      	ldr	r4, [pc, #40]	; (8003b70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003b46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b48:	e001      	b.n	8003b4e <LoopFillZerobss>

08003b4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b4c:	3204      	adds	r2, #4

08003b4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b50:	d3fb      	bcc.n	8003b4a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003b52:	f7ff fd81 	bl	8003658 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003b56:	f003 ff93 	bl	8007a80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003b5a:	f7fd fc31 	bl	80013c0 <main>
  bx lr
 8003b5e:	4770      	bx	lr
  ldr r0, =_sdata
 8003b60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b64:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8003b68:	08007b50 	.word	0x08007b50
  ldr r2, =_sbss
 8003b6c:	200000ac 	.word	0x200000ac
	  ldr r4, =_ebss
 8003b70:	20002c0c 	.word	0x20002c0c

08003b74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003b74:	e7fe      	b.n	8003b74 <ADC1_2_IRQHandler>
	...

08003b78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b7c:	4b08      	ldr	r3, [pc, #32]	; (8003ba0 <HAL_Init+0x28>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a07      	ldr	r2, [pc, #28]	; (8003ba0 <HAL_Init+0x28>)
 8003b82:	f043 0310 	orr.w	r3, r3, #16
 8003b86:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b88:	2003      	movs	r0, #3
 8003b8a:	f000 fd09 	bl	80045a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b8e:	200f      	movs	r0, #15
 8003b90:	f000 f808 	bl	8003ba4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b94:	f7ff fcf2 	bl	800357c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	40022000 	.word	0x40022000

08003ba4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b082      	sub	sp, #8
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003bac:	4b12      	ldr	r3, [pc, #72]	; (8003bf8 <HAL_InitTick+0x54>)
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	4b12      	ldr	r3, [pc, #72]	; (8003bfc <HAL_InitTick+0x58>)
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003bba:	fbb3 f3f1 	udiv	r3, r3, r1
 8003bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f000 fd21 	bl	800460a <HAL_SYSTICK_Config>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d001      	beq.n	8003bd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e00e      	b.n	8003bf0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2b0f      	cmp	r3, #15
 8003bd6:	d80a      	bhi.n	8003bee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003bd8:	2200      	movs	r2, #0
 8003bda:	6879      	ldr	r1, [r7, #4]
 8003bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8003be0:	f000 fce9 	bl	80045b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003be4:	4a06      	ldr	r2, [pc, #24]	; (8003c00 <HAL_InitTick+0x5c>)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003bea:	2300      	movs	r3, #0
 8003bec:	e000      	b.n	8003bf0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3708      	adds	r7, #8
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	2000003c 	.word	0x2000003c
 8003bfc:	20000044 	.word	0x20000044
 8003c00:	20000040 	.word	0x20000040

08003c04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c04:	b480      	push	{r7}
 8003c06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c08:	4b05      	ldr	r3, [pc, #20]	; (8003c20 <HAL_IncTick+0x1c>)
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	4b05      	ldr	r3, [pc, #20]	; (8003c24 <HAL_IncTick+0x20>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4413      	add	r3, r2
 8003c14:	4a03      	ldr	r2, [pc, #12]	; (8003c24 <HAL_IncTick+0x20>)
 8003c16:	6013      	str	r3, [r2, #0]
}
 8003c18:	bf00      	nop
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bc80      	pop	{r7}
 8003c1e:	4770      	bx	lr
 8003c20:	20000044 	.word	0x20000044
 8003c24:	20002c08 	.word	0x20002c08

08003c28 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	af00      	add	r7, sp, #0
  return uwTick;
 8003c2c:	4b02      	ldr	r3, [pc, #8]	; (8003c38 <HAL_GetTick+0x10>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bc80      	pop	{r7}
 8003c36:	4770      	bx	lr
 8003c38:	20002c08 	.word	0x20002c08

08003c3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c44:	f7ff fff0 	bl	8003c28 <HAL_GetTick>
 8003c48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c54:	d005      	beq.n	8003c62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c56:	4b0a      	ldr	r3, [pc, #40]	; (8003c80 <HAL_Delay+0x44>)
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	4413      	add	r3, r2
 8003c60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003c62:	bf00      	nop
 8003c64:	f7ff ffe0 	bl	8003c28 <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d8f7      	bhi.n	8003c64 <HAL_Delay+0x28>
  {
  }
}
 8003c74:	bf00      	nop
 8003c76:	bf00      	nop
 8003c78:	3710      	adds	r7, #16
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	20000044 	.word	0x20000044

08003c84 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b086      	sub	sp, #24
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003c90:	2300      	movs	r3, #0
 8003c92:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003c94:	2300      	movs	r3, #0
 8003c96:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d101      	bne.n	8003ca6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e0be      	b.n	8003e24 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d109      	bne.n	8003cc8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f7fd fa64 	bl	8001190 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f000 faf5 	bl	80042b8 <ADC_ConversionStop_Disable>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd6:	f003 0310 	and.w	r3, r3, #16
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	f040 8099 	bne.w	8003e12 <HAL_ADC_Init+0x18e>
 8003ce0:	7dfb      	ldrb	r3, [r7, #23]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	f040 8095 	bne.w	8003e12 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cec:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003cf0:	f023 0302 	bic.w	r3, r3, #2
 8003cf4:	f043 0202 	orr.w	r2, r3, #2
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003d04:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	7b1b      	ldrb	r3, [r3, #12]
 8003d0a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003d0c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003d0e:	68ba      	ldr	r2, [r7, #8]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d1c:	d003      	beq.n	8003d26 <HAL_ADC_Init+0xa2>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d102      	bne.n	8003d2c <HAL_ADC_Init+0xa8>
 8003d26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d2a:	e000      	b.n	8003d2e <HAL_ADC_Init+0xaa>
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	693a      	ldr	r2, [r7, #16]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	7d1b      	ldrb	r3, [r3, #20]
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d119      	bne.n	8003d70 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	7b1b      	ldrb	r3, [r3, #12]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d109      	bne.n	8003d58 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	699b      	ldr	r3, [r3, #24]
 8003d48:	3b01      	subs	r3, #1
 8003d4a:	035a      	lsls	r2, r3, #13
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003d54:	613b      	str	r3, [r7, #16]
 8003d56:	e00b      	b.n	8003d70 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d5c:	f043 0220 	orr.w	r2, r3, #32
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d68:	f043 0201 	orr.w	r2, r3, #1
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	693a      	ldr	r2, [r7, #16]
 8003d80:	430a      	orrs	r2, r1
 8003d82:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	689a      	ldr	r2, [r3, #8]
 8003d8a:	4b28      	ldr	r3, [pc, #160]	; (8003e2c <HAL_ADC_Init+0x1a8>)
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	6812      	ldr	r2, [r2, #0]
 8003d92:	68b9      	ldr	r1, [r7, #8]
 8003d94:	430b      	orrs	r3, r1
 8003d96:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003da0:	d003      	beq.n	8003daa <HAL_ADC_Init+0x126>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d104      	bne.n	8003db4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	3b01      	subs	r3, #1
 8003db0:	051b      	lsls	r3, r3, #20
 8003db2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dba:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68fa      	ldr	r2, [r7, #12]
 8003dc4:	430a      	orrs	r2, r1
 8003dc6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	689a      	ldr	r2, [r3, #8]
 8003dce:	4b18      	ldr	r3, [pc, #96]	; (8003e30 <HAL_ADC_Init+0x1ac>)
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	68ba      	ldr	r2, [r7, #8]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d10b      	bne.n	8003df0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de2:	f023 0303 	bic.w	r3, r3, #3
 8003de6:	f043 0201 	orr.w	r2, r3, #1
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003dee:	e018      	b.n	8003e22 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df4:	f023 0312 	bic.w	r3, r3, #18
 8003df8:	f043 0210 	orr.w	r2, r3, #16
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e04:	f043 0201 	orr.w	r2, r3, #1
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003e10:	e007      	b.n	8003e22 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e16:	f043 0210 	orr.w	r2, r3, #16
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003e22:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3718      	adds	r7, #24
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	ffe1f7fd 	.word	0xffe1f7fd
 8003e30:	ff1f0efe 	.word	0xff1f0efe

08003e34 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b086      	sub	sp, #24
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	60b9      	str	r1, [r7, #8]
 8003e3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e40:	2300      	movs	r3, #0
 8003e42:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a64      	ldr	r2, [pc, #400]	; (8003fdc <HAL_ADC_Start_DMA+0x1a8>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d004      	beq.n	8003e58 <HAL_ADC_Start_DMA+0x24>
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a63      	ldr	r2, [pc, #396]	; (8003fe0 <HAL_ADC_Start_DMA+0x1ac>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d106      	bne.n	8003e66 <HAL_ADC_Start_DMA+0x32>
 8003e58:	4b60      	ldr	r3, [pc, #384]	; (8003fdc <HAL_ADC_Start_DMA+0x1a8>)
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	f040 80b3 	bne.w	8003fcc <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d101      	bne.n	8003e74 <HAL_ADC_Start_DMA+0x40>
 8003e70:	2302      	movs	r3, #2
 8003e72:	e0ae      	b.n	8003fd2 <HAL_ADC_Start_DMA+0x19e>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003e7c:	68f8      	ldr	r0, [r7, #12]
 8003e7e:	f000 f9c1 	bl	8004204 <ADC_Enable>
 8003e82:	4603      	mov	r3, r0
 8003e84:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003e86:	7dfb      	ldrb	r3, [r7, #23]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	f040 809a 	bne.w	8003fc2 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e92:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003e96:	f023 0301 	bic.w	r3, r3, #1
 8003e9a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a4e      	ldr	r2, [pc, #312]	; (8003fe0 <HAL_ADC_Start_DMA+0x1ac>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d105      	bne.n	8003eb8 <HAL_ADC_Start_DMA+0x84>
 8003eac:	4b4b      	ldr	r3, [pc, #300]	; (8003fdc <HAL_ADC_Start_DMA+0x1a8>)
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d115      	bne.n	8003ee4 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ebc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d026      	beq.n	8003f20 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003eda:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003ee2:	e01d      	b.n	8003f20 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a39      	ldr	r2, [pc, #228]	; (8003fdc <HAL_ADC_Start_DMA+0x1a8>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d004      	beq.n	8003f04 <HAL_ADC_Start_DMA+0xd0>
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a38      	ldr	r2, [pc, #224]	; (8003fe0 <HAL_ADC_Start_DMA+0x1ac>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d10d      	bne.n	8003f20 <HAL_ADC_Start_DMA+0xec>
 8003f04:	4b35      	ldr	r3, [pc, #212]	; (8003fdc <HAL_ADC_Start_DMA+0x1a8>)
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d007      	beq.n	8003f20 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f14:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003f18:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d006      	beq.n	8003f3a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f30:	f023 0206 	bic.w	r2, r3, #6
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	62da      	str	r2, [r3, #44]	; 0x2c
 8003f38:	e002      	b.n	8003f40 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6a1b      	ldr	r3, [r3, #32]
 8003f4c:	4a25      	ldr	r2, [pc, #148]	; (8003fe4 <HAL_ADC_Start_DMA+0x1b0>)
 8003f4e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6a1b      	ldr	r3, [r3, #32]
 8003f54:	4a24      	ldr	r2, [pc, #144]	; (8003fe8 <HAL_ADC_Start_DMA+0x1b4>)
 8003f56:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6a1b      	ldr	r3, [r3, #32]
 8003f5c:	4a23      	ldr	r2, [pc, #140]	; (8003fec <HAL_ADC_Start_DMA+0x1b8>)
 8003f5e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f06f 0202 	mvn.w	r2, #2
 8003f68:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	689a      	ldr	r2, [r3, #8]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f78:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6a18      	ldr	r0, [r3, #32]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	334c      	adds	r3, #76	; 0x4c
 8003f84:	4619      	mov	r1, r3
 8003f86:	68ba      	ldr	r2, [r7, #8]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f000 fba5 	bl	80046d8 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003f98:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003f9c:	d108      	bne.n	8003fb0 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	689a      	ldr	r2, [r3, #8]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003fac:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003fae:	e00f      	b.n	8003fd0 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	689a      	ldr	r2, [r3, #8]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003fbe:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003fc0:	e006      	b.n	8003fd0 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8003fca:	e001      	b.n	8003fd0 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003fd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3718      	adds	r7, #24
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	40012400 	.word	0x40012400
 8003fe0:	40012800 	.word	0x40012800
 8003fe4:	0800433b 	.word	0x0800433b
 8003fe8:	080043b7 	.word	0x080043b7
 8003fec:	080043d3 	.word	0x080043d3

08003ff0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003ff8:	bf00      	nop
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bc80      	pop	{r7}
 8004000:	4770      	bx	lr

08004002 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004002:	b480      	push	{r7}
 8004004:	b083      	sub	sp, #12
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800400a:	bf00      	nop
 800400c:	370c      	adds	r7, #12
 800400e:	46bd      	mov	sp, r7
 8004010:	bc80      	pop	{r7}
 8004012:	4770      	bx	lr

08004014 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8004014:	b480      	push	{r7}
 8004016:	b085      	sub	sp, #20
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800401e:	2300      	movs	r3, #0
 8004020:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8004022:	2300      	movs	r3, #0
 8004024:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800402c:	2b01      	cmp	r3, #1
 800402e:	d101      	bne.n	8004034 <HAL_ADC_ConfigChannel+0x20>
 8004030:	2302      	movs	r3, #2
 8004032:	e0dc      	b.n	80041ee <HAL_ADC_ConfigChannel+0x1da>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	2b06      	cmp	r3, #6
 8004042:	d81c      	bhi.n	800407e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	685a      	ldr	r2, [r3, #4]
 800404e:	4613      	mov	r3, r2
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	4413      	add	r3, r2
 8004054:	3b05      	subs	r3, #5
 8004056:	221f      	movs	r2, #31
 8004058:	fa02 f303 	lsl.w	r3, r2, r3
 800405c:	43db      	mvns	r3, r3
 800405e:	4019      	ands	r1, r3
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	6818      	ldr	r0, [r3, #0]
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	685a      	ldr	r2, [r3, #4]
 8004068:	4613      	mov	r3, r2
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	4413      	add	r3, r2
 800406e:	3b05      	subs	r3, #5
 8004070:	fa00 f203 	lsl.w	r2, r0, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	430a      	orrs	r2, r1
 800407a:	635a      	str	r2, [r3, #52]	; 0x34
 800407c:	e03c      	b.n	80040f8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	2b0c      	cmp	r3, #12
 8004084:	d81c      	bhi.n	80040c0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	685a      	ldr	r2, [r3, #4]
 8004090:	4613      	mov	r3, r2
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	4413      	add	r3, r2
 8004096:	3b23      	subs	r3, #35	; 0x23
 8004098:	221f      	movs	r2, #31
 800409a:	fa02 f303 	lsl.w	r3, r2, r3
 800409e:	43db      	mvns	r3, r3
 80040a0:	4019      	ands	r1, r3
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	6818      	ldr	r0, [r3, #0]
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	685a      	ldr	r2, [r3, #4]
 80040aa:	4613      	mov	r3, r2
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	4413      	add	r3, r2
 80040b0:	3b23      	subs	r3, #35	; 0x23
 80040b2:	fa00 f203 	lsl.w	r2, r0, r3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	430a      	orrs	r2, r1
 80040bc:	631a      	str	r2, [r3, #48]	; 0x30
 80040be:	e01b      	b.n	80040f8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	685a      	ldr	r2, [r3, #4]
 80040ca:	4613      	mov	r3, r2
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	4413      	add	r3, r2
 80040d0:	3b41      	subs	r3, #65	; 0x41
 80040d2:	221f      	movs	r2, #31
 80040d4:	fa02 f303 	lsl.w	r3, r2, r3
 80040d8:	43db      	mvns	r3, r3
 80040da:	4019      	ands	r1, r3
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	6818      	ldr	r0, [r3, #0]
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	685a      	ldr	r2, [r3, #4]
 80040e4:	4613      	mov	r3, r2
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	4413      	add	r3, r2
 80040ea:	3b41      	subs	r3, #65	; 0x41
 80040ec:	fa00 f203 	lsl.w	r2, r0, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	430a      	orrs	r2, r1
 80040f6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	2b09      	cmp	r3, #9
 80040fe:	d91c      	bls.n	800413a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	68d9      	ldr	r1, [r3, #12]
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	4613      	mov	r3, r2
 800410c:	005b      	lsls	r3, r3, #1
 800410e:	4413      	add	r3, r2
 8004110:	3b1e      	subs	r3, #30
 8004112:	2207      	movs	r2, #7
 8004114:	fa02 f303 	lsl.w	r3, r2, r3
 8004118:	43db      	mvns	r3, r3
 800411a:	4019      	ands	r1, r3
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	6898      	ldr	r0, [r3, #8]
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	4613      	mov	r3, r2
 8004126:	005b      	lsls	r3, r3, #1
 8004128:	4413      	add	r3, r2
 800412a:	3b1e      	subs	r3, #30
 800412c:	fa00 f203 	lsl.w	r2, r0, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	430a      	orrs	r2, r1
 8004136:	60da      	str	r2, [r3, #12]
 8004138:	e019      	b.n	800416e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	6919      	ldr	r1, [r3, #16]
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	4613      	mov	r3, r2
 8004146:	005b      	lsls	r3, r3, #1
 8004148:	4413      	add	r3, r2
 800414a:	2207      	movs	r2, #7
 800414c:	fa02 f303 	lsl.w	r3, r2, r3
 8004150:	43db      	mvns	r3, r3
 8004152:	4019      	ands	r1, r3
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	6898      	ldr	r0, [r3, #8]
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	4613      	mov	r3, r2
 800415e:	005b      	lsls	r3, r3, #1
 8004160:	4413      	add	r3, r2
 8004162:	fa00 f203 	lsl.w	r2, r0, r3
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	430a      	orrs	r2, r1
 800416c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2b10      	cmp	r3, #16
 8004174:	d003      	beq.n	800417e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800417a:	2b11      	cmp	r3, #17
 800417c:	d132      	bne.n	80041e4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a1d      	ldr	r2, [pc, #116]	; (80041f8 <HAL_ADC_ConfigChannel+0x1e4>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d125      	bne.n	80041d4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d126      	bne.n	80041e4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	689a      	ldr	r2, [r3, #8]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80041a4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	2b10      	cmp	r3, #16
 80041ac:	d11a      	bne.n	80041e4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80041ae:	4b13      	ldr	r3, [pc, #76]	; (80041fc <HAL_ADC_ConfigChannel+0x1e8>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a13      	ldr	r2, [pc, #76]	; (8004200 <HAL_ADC_ConfigChannel+0x1ec>)
 80041b4:	fba2 2303 	umull	r2, r3, r2, r3
 80041b8:	0c9a      	lsrs	r2, r3, #18
 80041ba:	4613      	mov	r3, r2
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	4413      	add	r3, r2
 80041c0:	005b      	lsls	r3, r3, #1
 80041c2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80041c4:	e002      	b.n	80041cc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	3b01      	subs	r3, #1
 80041ca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d1f9      	bne.n	80041c6 <HAL_ADC_ConfigChannel+0x1b2>
 80041d2:	e007      	b.n	80041e4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d8:	f043 0220 	orr.w	r2, r3, #32
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80041ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3714      	adds	r7, #20
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bc80      	pop	{r7}
 80041f6:	4770      	bx	lr
 80041f8:	40012400 	.word	0x40012400
 80041fc:	2000003c 	.word	0x2000003c
 8004200:	431bde83 	.word	0x431bde83

08004204 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800420c:	2300      	movs	r3, #0
 800420e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8004210:	2300      	movs	r3, #0
 8004212:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f003 0301 	and.w	r3, r3, #1
 800421e:	2b01      	cmp	r3, #1
 8004220:	d040      	beq.n	80042a4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	689a      	ldr	r2, [r3, #8]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f042 0201 	orr.w	r2, r2, #1
 8004230:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004232:	4b1f      	ldr	r3, [pc, #124]	; (80042b0 <ADC_Enable+0xac>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a1f      	ldr	r2, [pc, #124]	; (80042b4 <ADC_Enable+0xb0>)
 8004238:	fba2 2303 	umull	r2, r3, r2, r3
 800423c:	0c9b      	lsrs	r3, r3, #18
 800423e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004240:	e002      	b.n	8004248 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	3b01      	subs	r3, #1
 8004246:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1f9      	bne.n	8004242 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800424e:	f7ff fceb 	bl	8003c28 <HAL_GetTick>
 8004252:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004254:	e01f      	b.n	8004296 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004256:	f7ff fce7 	bl	8003c28 <HAL_GetTick>
 800425a:	4602      	mov	r2, r0
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	2b02      	cmp	r3, #2
 8004262:	d918      	bls.n	8004296 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	f003 0301 	and.w	r3, r3, #1
 800426e:	2b01      	cmp	r3, #1
 8004270:	d011      	beq.n	8004296 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004276:	f043 0210 	orr.w	r2, r3, #16
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004282:	f043 0201 	orr.w	r2, r3, #1
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e007      	b.n	80042a6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	f003 0301 	and.w	r3, r3, #1
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d1d8      	bne.n	8004256 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3710      	adds	r7, #16
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	2000003c 	.word	0x2000003c
 80042b4:	431bde83 	.word	0x431bde83

080042b8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80042c0:	2300      	movs	r3, #0
 80042c2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f003 0301 	and.w	r3, r3, #1
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d12e      	bne.n	8004330 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	689a      	ldr	r2, [r3, #8]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f022 0201 	bic.w	r2, r2, #1
 80042e0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80042e2:	f7ff fca1 	bl	8003c28 <HAL_GetTick>
 80042e6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80042e8:	e01b      	b.n	8004322 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80042ea:	f7ff fc9d 	bl	8003c28 <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d914      	bls.n	8004322 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f003 0301 	and.w	r3, r3, #1
 8004302:	2b01      	cmp	r3, #1
 8004304:	d10d      	bne.n	8004322 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800430a:	f043 0210 	orr.w	r2, r3, #16
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004316:	f043 0201 	orr.w	r2, r3, #1
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e007      	b.n	8004332 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	f003 0301 	and.w	r3, r3, #1
 800432c:	2b01      	cmp	r3, #1
 800432e:	d0dc      	beq.n	80042ea <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3710      	adds	r7, #16
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}

0800433a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800433a:	b580      	push	{r7, lr}
 800433c:	b084      	sub	sp, #16
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004346:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800434c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004350:	2b00      	cmp	r3, #0
 8004352:	d127      	bne.n	80043a4 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004358:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800436a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800436e:	d115      	bne.n	800439c <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004374:	2b00      	cmp	r3, #0
 8004376:	d111      	bne.n	800439c <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800437c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004388:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d105      	bne.n	800439c <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004394:	f043 0201 	orr.w	r2, r3, #1
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800439c:	68f8      	ldr	r0, [r7, #12]
 800439e:	f7fe fc41 	bl	8002c24 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80043a2:	e004      	b.n	80043ae <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6a1b      	ldr	r3, [r3, #32]
 80043a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	4798      	blx	r3
}
 80043ae:	bf00      	nop
 80043b0:	3710      	adds	r7, #16
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}

080043b6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80043b6:	b580      	push	{r7, lr}
 80043b8:	b084      	sub	sp, #16
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c2:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80043c4:	68f8      	ldr	r0, [r7, #12]
 80043c6:	f7ff fe13 	bl	8003ff0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80043ca:	bf00      	nop
 80043cc:	3710      	adds	r7, #16
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80043d2:	b580      	push	{r7, lr}
 80043d4:	b084      	sub	sp, #16
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043de:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f0:	f043 0204 	orr.w	r2, r3, #4
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80043f8:	68f8      	ldr	r0, [r7, #12]
 80043fa:	f7ff fe02 	bl	8004002 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80043fe:	bf00      	nop
 8004400:	3710      	adds	r7, #16
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
	...

08004408 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004408:	b480      	push	{r7}
 800440a:	b085      	sub	sp, #20
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f003 0307 	and.w	r3, r3, #7
 8004416:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004418:	4b0c      	ldr	r3, [pc, #48]	; (800444c <__NVIC_SetPriorityGrouping+0x44>)
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800441e:	68ba      	ldr	r2, [r7, #8]
 8004420:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004424:	4013      	ands	r3, r2
 8004426:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004430:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004434:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004438:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800443a:	4a04      	ldr	r2, [pc, #16]	; (800444c <__NVIC_SetPriorityGrouping+0x44>)
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	60d3      	str	r3, [r2, #12]
}
 8004440:	bf00      	nop
 8004442:	3714      	adds	r7, #20
 8004444:	46bd      	mov	sp, r7
 8004446:	bc80      	pop	{r7}
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop
 800444c:	e000ed00 	.word	0xe000ed00

08004450 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004450:	b480      	push	{r7}
 8004452:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004454:	4b04      	ldr	r3, [pc, #16]	; (8004468 <__NVIC_GetPriorityGrouping+0x18>)
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	0a1b      	lsrs	r3, r3, #8
 800445a:	f003 0307 	and.w	r3, r3, #7
}
 800445e:	4618      	mov	r0, r3
 8004460:	46bd      	mov	sp, r7
 8004462:	bc80      	pop	{r7}
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop
 8004468:	e000ed00 	.word	0xe000ed00

0800446c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	4603      	mov	r3, r0
 8004474:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800447a:	2b00      	cmp	r3, #0
 800447c:	db0b      	blt.n	8004496 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800447e:	79fb      	ldrb	r3, [r7, #7]
 8004480:	f003 021f 	and.w	r2, r3, #31
 8004484:	4906      	ldr	r1, [pc, #24]	; (80044a0 <__NVIC_EnableIRQ+0x34>)
 8004486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800448a:	095b      	lsrs	r3, r3, #5
 800448c:	2001      	movs	r0, #1
 800448e:	fa00 f202 	lsl.w	r2, r0, r2
 8004492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004496:	bf00      	nop
 8004498:	370c      	adds	r7, #12
 800449a:	46bd      	mov	sp, r7
 800449c:	bc80      	pop	{r7}
 800449e:	4770      	bx	lr
 80044a0:	e000e100 	.word	0xe000e100

080044a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	4603      	mov	r3, r0
 80044ac:	6039      	str	r1, [r7, #0]
 80044ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	db0a      	blt.n	80044ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	b2da      	uxtb	r2, r3
 80044bc:	490c      	ldr	r1, [pc, #48]	; (80044f0 <__NVIC_SetPriority+0x4c>)
 80044be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044c2:	0112      	lsls	r2, r2, #4
 80044c4:	b2d2      	uxtb	r2, r2
 80044c6:	440b      	add	r3, r1
 80044c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80044cc:	e00a      	b.n	80044e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	b2da      	uxtb	r2, r3
 80044d2:	4908      	ldr	r1, [pc, #32]	; (80044f4 <__NVIC_SetPriority+0x50>)
 80044d4:	79fb      	ldrb	r3, [r7, #7]
 80044d6:	f003 030f 	and.w	r3, r3, #15
 80044da:	3b04      	subs	r3, #4
 80044dc:	0112      	lsls	r2, r2, #4
 80044de:	b2d2      	uxtb	r2, r2
 80044e0:	440b      	add	r3, r1
 80044e2:	761a      	strb	r2, [r3, #24]
}
 80044e4:	bf00      	nop
 80044e6:	370c      	adds	r7, #12
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bc80      	pop	{r7}
 80044ec:	4770      	bx	lr
 80044ee:	bf00      	nop
 80044f0:	e000e100 	.word	0xe000e100
 80044f4:	e000ed00 	.word	0xe000ed00

080044f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b089      	sub	sp, #36	; 0x24
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f003 0307 	and.w	r3, r3, #7
 800450a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	f1c3 0307 	rsb	r3, r3, #7
 8004512:	2b04      	cmp	r3, #4
 8004514:	bf28      	it	cs
 8004516:	2304      	movcs	r3, #4
 8004518:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	3304      	adds	r3, #4
 800451e:	2b06      	cmp	r3, #6
 8004520:	d902      	bls.n	8004528 <NVIC_EncodePriority+0x30>
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	3b03      	subs	r3, #3
 8004526:	e000      	b.n	800452a <NVIC_EncodePriority+0x32>
 8004528:	2300      	movs	r3, #0
 800452a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800452c:	f04f 32ff 	mov.w	r2, #4294967295
 8004530:	69bb      	ldr	r3, [r7, #24]
 8004532:	fa02 f303 	lsl.w	r3, r2, r3
 8004536:	43da      	mvns	r2, r3
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	401a      	ands	r2, r3
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004540:	f04f 31ff 	mov.w	r1, #4294967295
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	fa01 f303 	lsl.w	r3, r1, r3
 800454a:	43d9      	mvns	r1, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004550:	4313      	orrs	r3, r2
         );
}
 8004552:	4618      	mov	r0, r3
 8004554:	3724      	adds	r7, #36	; 0x24
 8004556:	46bd      	mov	sp, r7
 8004558:	bc80      	pop	{r7}
 800455a:	4770      	bx	lr

0800455c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	3b01      	subs	r3, #1
 8004568:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800456c:	d301      	bcc.n	8004572 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800456e:	2301      	movs	r3, #1
 8004570:	e00f      	b.n	8004592 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004572:	4a0a      	ldr	r2, [pc, #40]	; (800459c <SysTick_Config+0x40>)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	3b01      	subs	r3, #1
 8004578:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800457a:	210f      	movs	r1, #15
 800457c:	f04f 30ff 	mov.w	r0, #4294967295
 8004580:	f7ff ff90 	bl	80044a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004584:	4b05      	ldr	r3, [pc, #20]	; (800459c <SysTick_Config+0x40>)
 8004586:	2200      	movs	r2, #0
 8004588:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800458a:	4b04      	ldr	r3, [pc, #16]	; (800459c <SysTick_Config+0x40>)
 800458c:	2207      	movs	r2, #7
 800458e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3708      	adds	r7, #8
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	e000e010 	.word	0xe000e010

080045a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f7ff ff2d 	bl	8004408 <__NVIC_SetPriorityGrouping>
}
 80045ae:	bf00      	nop
 80045b0:	3708      	adds	r7, #8
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}

080045b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80045b6:	b580      	push	{r7, lr}
 80045b8:	b086      	sub	sp, #24
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	4603      	mov	r3, r0
 80045be:	60b9      	str	r1, [r7, #8]
 80045c0:	607a      	str	r2, [r7, #4]
 80045c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80045c4:	2300      	movs	r3, #0
 80045c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80045c8:	f7ff ff42 	bl	8004450 <__NVIC_GetPriorityGrouping>
 80045cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	68b9      	ldr	r1, [r7, #8]
 80045d2:	6978      	ldr	r0, [r7, #20]
 80045d4:	f7ff ff90 	bl	80044f8 <NVIC_EncodePriority>
 80045d8:	4602      	mov	r2, r0
 80045da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045de:	4611      	mov	r1, r2
 80045e0:	4618      	mov	r0, r3
 80045e2:	f7ff ff5f 	bl	80044a4 <__NVIC_SetPriority>
}
 80045e6:	bf00      	nop
 80045e8:	3718      	adds	r7, #24
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}

080045ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045ee:	b580      	push	{r7, lr}
 80045f0:	b082      	sub	sp, #8
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	4603      	mov	r3, r0
 80045f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80045f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045fc:	4618      	mov	r0, r3
 80045fe:	f7ff ff35 	bl	800446c <__NVIC_EnableIRQ>
}
 8004602:	bf00      	nop
 8004604:	3708      	adds	r7, #8
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}

0800460a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800460a:	b580      	push	{r7, lr}
 800460c:	b082      	sub	sp, #8
 800460e:	af00      	add	r7, sp, #0
 8004610:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f7ff ffa2 	bl	800455c <SysTick_Config>
 8004618:	4603      	mov	r3, r0
}
 800461a:	4618      	mov	r0, r3
 800461c:	3708      	adds	r7, #8
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
	...

08004624 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004624:	b480      	push	{r7}
 8004626:	b085      	sub	sp, #20
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800462c:	2300      	movs	r3, #0
 800462e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d101      	bne.n	800463a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e043      	b.n	80046c2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	461a      	mov	r2, r3
 8004640:	4b22      	ldr	r3, [pc, #136]	; (80046cc <HAL_DMA_Init+0xa8>)
 8004642:	4413      	add	r3, r2
 8004644:	4a22      	ldr	r2, [pc, #136]	; (80046d0 <HAL_DMA_Init+0xac>)
 8004646:	fba2 2303 	umull	r2, r3, r2, r3
 800464a:	091b      	lsrs	r3, r3, #4
 800464c:	009a      	lsls	r2, r3, #2
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4a1f      	ldr	r2, [pc, #124]	; (80046d4 <HAL_DMA_Init+0xb0>)
 8004656:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2202      	movs	r2, #2
 800465c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800466e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004672:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800467c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004688:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	695b      	ldr	r3, [r3, #20]
 800468e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004694:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	69db      	ldr	r3, [r3, #28]
 800469a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800469c:	68fa      	ldr	r2, [r7, #12]
 800469e:	4313      	orrs	r3, r2
 80046a0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	68fa      	ldr	r2, [r7, #12]
 80046a8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3714      	adds	r7, #20
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bc80      	pop	{r7}
 80046ca:	4770      	bx	lr
 80046cc:	bffdfff8 	.word	0xbffdfff8
 80046d0:	cccccccd 	.word	0xcccccccd
 80046d4:	40020000 	.word	0x40020000

080046d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b086      	sub	sp, #24
 80046dc:	af00      	add	r7, sp, #0
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	60b9      	str	r1, [r7, #8]
 80046e2:	607a      	str	r2, [r7, #4]
 80046e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046e6:	2300      	movs	r3, #0
 80046e8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d101      	bne.n	80046f8 <HAL_DMA_Start_IT+0x20>
 80046f4:	2302      	movs	r3, #2
 80046f6:	e04a      	b.n	800478e <HAL_DMA_Start_IT+0xb6>
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004706:	2b01      	cmp	r3, #1
 8004708:	d13a      	bne.n	8004780 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2202      	movs	r2, #2
 800470e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2200      	movs	r2, #0
 8004716:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f022 0201 	bic.w	r2, r2, #1
 8004726:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	68b9      	ldr	r1, [r7, #8]
 800472e:	68f8      	ldr	r0, [r7, #12]
 8004730:	f000 f9e8 	bl	8004b04 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004738:	2b00      	cmp	r3, #0
 800473a:	d008      	beq.n	800474e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f042 020e 	orr.w	r2, r2, #14
 800474a:	601a      	str	r2, [r3, #0]
 800474c:	e00f      	b.n	800476e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f022 0204 	bic.w	r2, r2, #4
 800475c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f042 020a 	orr.w	r2, r2, #10
 800476c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f042 0201 	orr.w	r2, r2, #1
 800477c:	601a      	str	r2, [r3, #0]
 800477e:	e005      	b.n	800478c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004788:	2302      	movs	r3, #2
 800478a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800478c:	7dfb      	ldrb	r3, [r7, #23]
}
 800478e:	4618      	mov	r0, r3
 8004790:	3718      	adds	r7, #24
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}

08004796 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004796:	b480      	push	{r7}
 8004798:	b085      	sub	sp, #20
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800479e:	2300      	movs	r3, #0
 80047a0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80047a8:	2b02      	cmp	r3, #2
 80047aa:	d008      	beq.n	80047be <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2204      	movs	r2, #4
 80047b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e020      	b.n	8004800 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f022 020e 	bic.w	r2, r2, #14
 80047cc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f022 0201 	bic.w	r2, r2, #1
 80047dc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047e6:	2101      	movs	r1, #1
 80047e8:	fa01 f202 	lsl.w	r2, r1, r2
 80047ec:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2201      	movs	r2, #1
 80047f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80047fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004800:	4618      	mov	r0, r3
 8004802:	3714      	adds	r7, #20
 8004804:	46bd      	mov	sp, r7
 8004806:	bc80      	pop	{r7}
 8004808:	4770      	bx	lr
	...

0800480c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004814:	2300      	movs	r3, #0
 8004816:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800481e:	2b02      	cmp	r3, #2
 8004820:	d005      	beq.n	800482e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2204      	movs	r2, #4
 8004826:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	73fb      	strb	r3, [r7, #15]
 800482c:	e051      	b.n	80048d2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f022 020e 	bic.w	r2, r2, #14
 800483c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f022 0201 	bic.w	r2, r2, #1
 800484c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a22      	ldr	r2, [pc, #136]	; (80048dc <HAL_DMA_Abort_IT+0xd0>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d029      	beq.n	80048ac <HAL_DMA_Abort_IT+0xa0>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a20      	ldr	r2, [pc, #128]	; (80048e0 <HAL_DMA_Abort_IT+0xd4>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d022      	beq.n	80048a8 <HAL_DMA_Abort_IT+0x9c>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a1f      	ldr	r2, [pc, #124]	; (80048e4 <HAL_DMA_Abort_IT+0xd8>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d01a      	beq.n	80048a2 <HAL_DMA_Abort_IT+0x96>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a1d      	ldr	r2, [pc, #116]	; (80048e8 <HAL_DMA_Abort_IT+0xdc>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d012      	beq.n	800489c <HAL_DMA_Abort_IT+0x90>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a1c      	ldr	r2, [pc, #112]	; (80048ec <HAL_DMA_Abort_IT+0xe0>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d00a      	beq.n	8004896 <HAL_DMA_Abort_IT+0x8a>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a1a      	ldr	r2, [pc, #104]	; (80048f0 <HAL_DMA_Abort_IT+0xe4>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d102      	bne.n	8004890 <HAL_DMA_Abort_IT+0x84>
 800488a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800488e:	e00e      	b.n	80048ae <HAL_DMA_Abort_IT+0xa2>
 8004890:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004894:	e00b      	b.n	80048ae <HAL_DMA_Abort_IT+0xa2>
 8004896:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800489a:	e008      	b.n	80048ae <HAL_DMA_Abort_IT+0xa2>
 800489c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80048a0:	e005      	b.n	80048ae <HAL_DMA_Abort_IT+0xa2>
 80048a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80048a6:	e002      	b.n	80048ae <HAL_DMA_Abort_IT+0xa2>
 80048a8:	2310      	movs	r3, #16
 80048aa:	e000      	b.n	80048ae <HAL_DMA_Abort_IT+0xa2>
 80048ac:	2301      	movs	r3, #1
 80048ae:	4a11      	ldr	r2, [pc, #68]	; (80048f4 <HAL_DMA_Abort_IT+0xe8>)
 80048b0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2201      	movs	r2, #1
 80048b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d003      	beq.n	80048d2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	4798      	blx	r3
    } 
  }
  return status;
 80048d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3710      	adds	r7, #16
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	40020008 	.word	0x40020008
 80048e0:	4002001c 	.word	0x4002001c
 80048e4:	40020030 	.word	0x40020030
 80048e8:	40020044 	.word	0x40020044
 80048ec:	40020058 	.word	0x40020058
 80048f0:	4002006c 	.word	0x4002006c
 80048f4:	40020000 	.word	0x40020000

080048f8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004914:	2204      	movs	r2, #4
 8004916:	409a      	lsls	r2, r3
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	4013      	ands	r3, r2
 800491c:	2b00      	cmp	r3, #0
 800491e:	d04f      	beq.n	80049c0 <HAL_DMA_IRQHandler+0xc8>
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	f003 0304 	and.w	r3, r3, #4
 8004926:	2b00      	cmp	r3, #0
 8004928:	d04a      	beq.n	80049c0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0320 	and.w	r3, r3, #32
 8004934:	2b00      	cmp	r3, #0
 8004936:	d107      	bne.n	8004948 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f022 0204 	bic.w	r2, r2, #4
 8004946:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a66      	ldr	r2, [pc, #408]	; (8004ae8 <HAL_DMA_IRQHandler+0x1f0>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d029      	beq.n	80049a6 <HAL_DMA_IRQHandler+0xae>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a65      	ldr	r2, [pc, #404]	; (8004aec <HAL_DMA_IRQHandler+0x1f4>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d022      	beq.n	80049a2 <HAL_DMA_IRQHandler+0xaa>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a63      	ldr	r2, [pc, #396]	; (8004af0 <HAL_DMA_IRQHandler+0x1f8>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d01a      	beq.n	800499c <HAL_DMA_IRQHandler+0xa4>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a62      	ldr	r2, [pc, #392]	; (8004af4 <HAL_DMA_IRQHandler+0x1fc>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d012      	beq.n	8004996 <HAL_DMA_IRQHandler+0x9e>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a60      	ldr	r2, [pc, #384]	; (8004af8 <HAL_DMA_IRQHandler+0x200>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d00a      	beq.n	8004990 <HAL_DMA_IRQHandler+0x98>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a5f      	ldr	r2, [pc, #380]	; (8004afc <HAL_DMA_IRQHandler+0x204>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d102      	bne.n	800498a <HAL_DMA_IRQHandler+0x92>
 8004984:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004988:	e00e      	b.n	80049a8 <HAL_DMA_IRQHandler+0xb0>
 800498a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800498e:	e00b      	b.n	80049a8 <HAL_DMA_IRQHandler+0xb0>
 8004990:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004994:	e008      	b.n	80049a8 <HAL_DMA_IRQHandler+0xb0>
 8004996:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800499a:	e005      	b.n	80049a8 <HAL_DMA_IRQHandler+0xb0>
 800499c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049a0:	e002      	b.n	80049a8 <HAL_DMA_IRQHandler+0xb0>
 80049a2:	2340      	movs	r3, #64	; 0x40
 80049a4:	e000      	b.n	80049a8 <HAL_DMA_IRQHandler+0xb0>
 80049a6:	2304      	movs	r3, #4
 80049a8:	4a55      	ldr	r2, [pc, #340]	; (8004b00 <HAL_DMA_IRQHandler+0x208>)
 80049aa:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	f000 8094 	beq.w	8004ade <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80049be:	e08e      	b.n	8004ade <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c4:	2202      	movs	r2, #2
 80049c6:	409a      	lsls	r2, r3
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	4013      	ands	r3, r2
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d056      	beq.n	8004a7e <HAL_DMA_IRQHandler+0x186>
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	f003 0302 	and.w	r3, r3, #2
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d051      	beq.n	8004a7e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0320 	and.w	r3, r3, #32
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d10b      	bne.n	8004a00 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f022 020a 	bic.w	r2, r2, #10
 80049f6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a38      	ldr	r2, [pc, #224]	; (8004ae8 <HAL_DMA_IRQHandler+0x1f0>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d029      	beq.n	8004a5e <HAL_DMA_IRQHandler+0x166>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a37      	ldr	r2, [pc, #220]	; (8004aec <HAL_DMA_IRQHandler+0x1f4>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d022      	beq.n	8004a5a <HAL_DMA_IRQHandler+0x162>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a35      	ldr	r2, [pc, #212]	; (8004af0 <HAL_DMA_IRQHandler+0x1f8>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d01a      	beq.n	8004a54 <HAL_DMA_IRQHandler+0x15c>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a34      	ldr	r2, [pc, #208]	; (8004af4 <HAL_DMA_IRQHandler+0x1fc>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d012      	beq.n	8004a4e <HAL_DMA_IRQHandler+0x156>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a32      	ldr	r2, [pc, #200]	; (8004af8 <HAL_DMA_IRQHandler+0x200>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d00a      	beq.n	8004a48 <HAL_DMA_IRQHandler+0x150>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a31      	ldr	r2, [pc, #196]	; (8004afc <HAL_DMA_IRQHandler+0x204>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d102      	bne.n	8004a42 <HAL_DMA_IRQHandler+0x14a>
 8004a3c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004a40:	e00e      	b.n	8004a60 <HAL_DMA_IRQHandler+0x168>
 8004a42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a46:	e00b      	b.n	8004a60 <HAL_DMA_IRQHandler+0x168>
 8004a48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a4c:	e008      	b.n	8004a60 <HAL_DMA_IRQHandler+0x168>
 8004a4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004a52:	e005      	b.n	8004a60 <HAL_DMA_IRQHandler+0x168>
 8004a54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a58:	e002      	b.n	8004a60 <HAL_DMA_IRQHandler+0x168>
 8004a5a:	2320      	movs	r3, #32
 8004a5c:	e000      	b.n	8004a60 <HAL_DMA_IRQHandler+0x168>
 8004a5e:	2302      	movs	r3, #2
 8004a60:	4a27      	ldr	r2, [pc, #156]	; (8004b00 <HAL_DMA_IRQHandler+0x208>)
 8004a62:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d034      	beq.n	8004ade <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004a7c:	e02f      	b.n	8004ade <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a82:	2208      	movs	r2, #8
 8004a84:	409a      	lsls	r2, r3
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	4013      	ands	r3, r2
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d028      	beq.n	8004ae0 <HAL_DMA_IRQHandler+0x1e8>
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	f003 0308 	and.w	r3, r3, #8
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d023      	beq.n	8004ae0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f022 020e 	bic.w	r2, r2, #14
 8004aa6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ab0:	2101      	movs	r1, #1
 8004ab2:	fa01 f202 	lsl.w	r2, r1, r2
 8004ab6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d004      	beq.n	8004ae0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	4798      	blx	r3
    }
  }
  return;
 8004ade:	bf00      	nop
 8004ae0:	bf00      	nop
}
 8004ae2:	3710      	adds	r7, #16
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	40020008 	.word	0x40020008
 8004aec:	4002001c 	.word	0x4002001c
 8004af0:	40020030 	.word	0x40020030
 8004af4:	40020044 	.word	0x40020044
 8004af8:	40020058 	.word	0x40020058
 8004afc:	4002006c 	.word	0x4002006c
 8004b00:	40020000 	.word	0x40020000

08004b04 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b085      	sub	sp, #20
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	607a      	str	r2, [r7, #4]
 8004b10:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b1a:	2101      	movs	r1, #1
 8004b1c:	fa01 f202 	lsl.w	r2, r1, r2
 8004b20:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	683a      	ldr	r2, [r7, #0]
 8004b28:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	2b10      	cmp	r3, #16
 8004b30:	d108      	bne.n	8004b44 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	68ba      	ldr	r2, [r7, #8]
 8004b40:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004b42:	e007      	b.n	8004b54 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	68ba      	ldr	r2, [r7, #8]
 8004b4a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	60da      	str	r2, [r3, #12]
}
 8004b54:	bf00      	nop
 8004b56:	3714      	adds	r7, #20
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bc80      	pop	{r7}
 8004b5c:	4770      	bx	lr
	...

08004b60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b08b      	sub	sp, #44	; 0x2c
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b72:	e169      	b.n	8004e48 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004b74:	2201      	movs	r2, #1
 8004b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b78:	fa02 f303 	lsl.w	r3, r2, r3
 8004b7c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	69fa      	ldr	r2, [r7, #28]
 8004b84:	4013      	ands	r3, r2
 8004b86:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004b88:	69ba      	ldr	r2, [r7, #24]
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	f040 8158 	bne.w	8004e42 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	4a9a      	ldr	r2, [pc, #616]	; (8004e00 <HAL_GPIO_Init+0x2a0>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d05e      	beq.n	8004c5a <HAL_GPIO_Init+0xfa>
 8004b9c:	4a98      	ldr	r2, [pc, #608]	; (8004e00 <HAL_GPIO_Init+0x2a0>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d875      	bhi.n	8004c8e <HAL_GPIO_Init+0x12e>
 8004ba2:	4a98      	ldr	r2, [pc, #608]	; (8004e04 <HAL_GPIO_Init+0x2a4>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d058      	beq.n	8004c5a <HAL_GPIO_Init+0xfa>
 8004ba8:	4a96      	ldr	r2, [pc, #600]	; (8004e04 <HAL_GPIO_Init+0x2a4>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d86f      	bhi.n	8004c8e <HAL_GPIO_Init+0x12e>
 8004bae:	4a96      	ldr	r2, [pc, #600]	; (8004e08 <HAL_GPIO_Init+0x2a8>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d052      	beq.n	8004c5a <HAL_GPIO_Init+0xfa>
 8004bb4:	4a94      	ldr	r2, [pc, #592]	; (8004e08 <HAL_GPIO_Init+0x2a8>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d869      	bhi.n	8004c8e <HAL_GPIO_Init+0x12e>
 8004bba:	4a94      	ldr	r2, [pc, #592]	; (8004e0c <HAL_GPIO_Init+0x2ac>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d04c      	beq.n	8004c5a <HAL_GPIO_Init+0xfa>
 8004bc0:	4a92      	ldr	r2, [pc, #584]	; (8004e0c <HAL_GPIO_Init+0x2ac>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d863      	bhi.n	8004c8e <HAL_GPIO_Init+0x12e>
 8004bc6:	4a92      	ldr	r2, [pc, #584]	; (8004e10 <HAL_GPIO_Init+0x2b0>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d046      	beq.n	8004c5a <HAL_GPIO_Init+0xfa>
 8004bcc:	4a90      	ldr	r2, [pc, #576]	; (8004e10 <HAL_GPIO_Init+0x2b0>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d85d      	bhi.n	8004c8e <HAL_GPIO_Init+0x12e>
 8004bd2:	2b12      	cmp	r3, #18
 8004bd4:	d82a      	bhi.n	8004c2c <HAL_GPIO_Init+0xcc>
 8004bd6:	2b12      	cmp	r3, #18
 8004bd8:	d859      	bhi.n	8004c8e <HAL_GPIO_Init+0x12e>
 8004bda:	a201      	add	r2, pc, #4	; (adr r2, 8004be0 <HAL_GPIO_Init+0x80>)
 8004bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004be0:	08004c5b 	.word	0x08004c5b
 8004be4:	08004c35 	.word	0x08004c35
 8004be8:	08004c47 	.word	0x08004c47
 8004bec:	08004c89 	.word	0x08004c89
 8004bf0:	08004c8f 	.word	0x08004c8f
 8004bf4:	08004c8f 	.word	0x08004c8f
 8004bf8:	08004c8f 	.word	0x08004c8f
 8004bfc:	08004c8f 	.word	0x08004c8f
 8004c00:	08004c8f 	.word	0x08004c8f
 8004c04:	08004c8f 	.word	0x08004c8f
 8004c08:	08004c8f 	.word	0x08004c8f
 8004c0c:	08004c8f 	.word	0x08004c8f
 8004c10:	08004c8f 	.word	0x08004c8f
 8004c14:	08004c8f 	.word	0x08004c8f
 8004c18:	08004c8f 	.word	0x08004c8f
 8004c1c:	08004c8f 	.word	0x08004c8f
 8004c20:	08004c8f 	.word	0x08004c8f
 8004c24:	08004c3d 	.word	0x08004c3d
 8004c28:	08004c51 	.word	0x08004c51
 8004c2c:	4a79      	ldr	r2, [pc, #484]	; (8004e14 <HAL_GPIO_Init+0x2b4>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d013      	beq.n	8004c5a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004c32:	e02c      	b.n	8004c8e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	623b      	str	r3, [r7, #32]
          break;
 8004c3a:	e029      	b.n	8004c90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	3304      	adds	r3, #4
 8004c42:	623b      	str	r3, [r7, #32]
          break;
 8004c44:	e024      	b.n	8004c90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	3308      	adds	r3, #8
 8004c4c:	623b      	str	r3, [r7, #32]
          break;
 8004c4e:	e01f      	b.n	8004c90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	330c      	adds	r3, #12
 8004c56:	623b      	str	r3, [r7, #32]
          break;
 8004c58:	e01a      	b.n	8004c90 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d102      	bne.n	8004c68 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004c62:	2304      	movs	r3, #4
 8004c64:	623b      	str	r3, [r7, #32]
          break;
 8004c66:	e013      	b.n	8004c90 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d105      	bne.n	8004c7c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004c70:	2308      	movs	r3, #8
 8004c72:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	69fa      	ldr	r2, [r7, #28]
 8004c78:	611a      	str	r2, [r3, #16]
          break;
 8004c7a:	e009      	b.n	8004c90 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004c7c:	2308      	movs	r3, #8
 8004c7e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	69fa      	ldr	r2, [r7, #28]
 8004c84:	615a      	str	r2, [r3, #20]
          break;
 8004c86:	e003      	b.n	8004c90 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	623b      	str	r3, [r7, #32]
          break;
 8004c8c:	e000      	b.n	8004c90 <HAL_GPIO_Init+0x130>
          break;
 8004c8e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	2bff      	cmp	r3, #255	; 0xff
 8004c94:	d801      	bhi.n	8004c9a <HAL_GPIO_Init+0x13a>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	e001      	b.n	8004c9e <HAL_GPIO_Init+0x13e>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	3304      	adds	r3, #4
 8004c9e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004ca0:	69bb      	ldr	r3, [r7, #24]
 8004ca2:	2bff      	cmp	r3, #255	; 0xff
 8004ca4:	d802      	bhi.n	8004cac <HAL_GPIO_Init+0x14c>
 8004ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	e002      	b.n	8004cb2 <HAL_GPIO_Init+0x152>
 8004cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cae:	3b08      	subs	r3, #8
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	210f      	movs	r1, #15
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8004cc0:	43db      	mvns	r3, r3
 8004cc2:	401a      	ands	r2, r3
 8004cc4:	6a39      	ldr	r1, [r7, #32]
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8004ccc:	431a      	orrs	r2, r3
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	f000 80b1 	beq.w	8004e42 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004ce0:	4b4d      	ldr	r3, [pc, #308]	; (8004e18 <HAL_GPIO_Init+0x2b8>)
 8004ce2:	699b      	ldr	r3, [r3, #24]
 8004ce4:	4a4c      	ldr	r2, [pc, #304]	; (8004e18 <HAL_GPIO_Init+0x2b8>)
 8004ce6:	f043 0301 	orr.w	r3, r3, #1
 8004cea:	6193      	str	r3, [r2, #24]
 8004cec:	4b4a      	ldr	r3, [pc, #296]	; (8004e18 <HAL_GPIO_Init+0x2b8>)
 8004cee:	699b      	ldr	r3, [r3, #24]
 8004cf0:	f003 0301 	and.w	r3, r3, #1
 8004cf4:	60bb      	str	r3, [r7, #8]
 8004cf6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004cf8:	4a48      	ldr	r2, [pc, #288]	; (8004e1c <HAL_GPIO_Init+0x2bc>)
 8004cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfc:	089b      	lsrs	r3, r3, #2
 8004cfe:	3302      	adds	r3, #2
 8004d00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d04:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d08:	f003 0303 	and.w	r3, r3, #3
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	220f      	movs	r2, #15
 8004d10:	fa02 f303 	lsl.w	r3, r2, r3
 8004d14:	43db      	mvns	r3, r3
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	4013      	ands	r3, r2
 8004d1a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4a40      	ldr	r2, [pc, #256]	; (8004e20 <HAL_GPIO_Init+0x2c0>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d013      	beq.n	8004d4c <HAL_GPIO_Init+0x1ec>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a3f      	ldr	r2, [pc, #252]	; (8004e24 <HAL_GPIO_Init+0x2c4>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d00d      	beq.n	8004d48 <HAL_GPIO_Init+0x1e8>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4a3e      	ldr	r2, [pc, #248]	; (8004e28 <HAL_GPIO_Init+0x2c8>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d007      	beq.n	8004d44 <HAL_GPIO_Init+0x1e4>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4a3d      	ldr	r2, [pc, #244]	; (8004e2c <HAL_GPIO_Init+0x2cc>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d101      	bne.n	8004d40 <HAL_GPIO_Init+0x1e0>
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	e006      	b.n	8004d4e <HAL_GPIO_Init+0x1ee>
 8004d40:	2304      	movs	r3, #4
 8004d42:	e004      	b.n	8004d4e <HAL_GPIO_Init+0x1ee>
 8004d44:	2302      	movs	r3, #2
 8004d46:	e002      	b.n	8004d4e <HAL_GPIO_Init+0x1ee>
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e000      	b.n	8004d4e <HAL_GPIO_Init+0x1ee>
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d50:	f002 0203 	and.w	r2, r2, #3
 8004d54:	0092      	lsls	r2, r2, #2
 8004d56:	4093      	lsls	r3, r2
 8004d58:	68fa      	ldr	r2, [r7, #12]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004d5e:	492f      	ldr	r1, [pc, #188]	; (8004e1c <HAL_GPIO_Init+0x2bc>)
 8004d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d62:	089b      	lsrs	r3, r3, #2
 8004d64:	3302      	adds	r3, #2
 8004d66:	68fa      	ldr	r2, [r7, #12]
 8004d68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d006      	beq.n	8004d86 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004d78:	4b2d      	ldr	r3, [pc, #180]	; (8004e30 <HAL_GPIO_Init+0x2d0>)
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	492c      	ldr	r1, [pc, #176]	; (8004e30 <HAL_GPIO_Init+0x2d0>)
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	600b      	str	r3, [r1, #0]
 8004d84:	e006      	b.n	8004d94 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004d86:	4b2a      	ldr	r3, [pc, #168]	; (8004e30 <HAL_GPIO_Init+0x2d0>)
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	43db      	mvns	r3, r3
 8004d8e:	4928      	ldr	r1, [pc, #160]	; (8004e30 <HAL_GPIO_Init+0x2d0>)
 8004d90:	4013      	ands	r3, r2
 8004d92:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d006      	beq.n	8004dae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004da0:	4b23      	ldr	r3, [pc, #140]	; (8004e30 <HAL_GPIO_Init+0x2d0>)
 8004da2:	685a      	ldr	r2, [r3, #4]
 8004da4:	4922      	ldr	r1, [pc, #136]	; (8004e30 <HAL_GPIO_Init+0x2d0>)
 8004da6:	69bb      	ldr	r3, [r7, #24]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	604b      	str	r3, [r1, #4]
 8004dac:	e006      	b.n	8004dbc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004dae:	4b20      	ldr	r3, [pc, #128]	; (8004e30 <HAL_GPIO_Init+0x2d0>)
 8004db0:	685a      	ldr	r2, [r3, #4]
 8004db2:	69bb      	ldr	r3, [r7, #24]
 8004db4:	43db      	mvns	r3, r3
 8004db6:	491e      	ldr	r1, [pc, #120]	; (8004e30 <HAL_GPIO_Init+0x2d0>)
 8004db8:	4013      	ands	r3, r2
 8004dba:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d006      	beq.n	8004dd6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004dc8:	4b19      	ldr	r3, [pc, #100]	; (8004e30 <HAL_GPIO_Init+0x2d0>)
 8004dca:	689a      	ldr	r2, [r3, #8]
 8004dcc:	4918      	ldr	r1, [pc, #96]	; (8004e30 <HAL_GPIO_Init+0x2d0>)
 8004dce:	69bb      	ldr	r3, [r7, #24]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	608b      	str	r3, [r1, #8]
 8004dd4:	e006      	b.n	8004de4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004dd6:	4b16      	ldr	r3, [pc, #88]	; (8004e30 <HAL_GPIO_Init+0x2d0>)
 8004dd8:	689a      	ldr	r2, [r3, #8]
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	43db      	mvns	r3, r3
 8004dde:	4914      	ldr	r1, [pc, #80]	; (8004e30 <HAL_GPIO_Init+0x2d0>)
 8004de0:	4013      	ands	r3, r2
 8004de2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d021      	beq.n	8004e34 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004df0:	4b0f      	ldr	r3, [pc, #60]	; (8004e30 <HAL_GPIO_Init+0x2d0>)
 8004df2:	68da      	ldr	r2, [r3, #12]
 8004df4:	490e      	ldr	r1, [pc, #56]	; (8004e30 <HAL_GPIO_Init+0x2d0>)
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	60cb      	str	r3, [r1, #12]
 8004dfc:	e021      	b.n	8004e42 <HAL_GPIO_Init+0x2e2>
 8004dfe:	bf00      	nop
 8004e00:	10320000 	.word	0x10320000
 8004e04:	10310000 	.word	0x10310000
 8004e08:	10220000 	.word	0x10220000
 8004e0c:	10210000 	.word	0x10210000
 8004e10:	10120000 	.word	0x10120000
 8004e14:	10110000 	.word	0x10110000
 8004e18:	40021000 	.word	0x40021000
 8004e1c:	40010000 	.word	0x40010000
 8004e20:	40010800 	.word	0x40010800
 8004e24:	40010c00 	.word	0x40010c00
 8004e28:	40011000 	.word	0x40011000
 8004e2c:	40011400 	.word	0x40011400
 8004e30:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004e34:	4b0b      	ldr	r3, [pc, #44]	; (8004e64 <HAL_GPIO_Init+0x304>)
 8004e36:	68da      	ldr	r2, [r3, #12]
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	43db      	mvns	r3, r3
 8004e3c:	4909      	ldr	r1, [pc, #36]	; (8004e64 <HAL_GPIO_Init+0x304>)
 8004e3e:	4013      	ands	r3, r2
 8004e40:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e44:	3301      	adds	r3, #1
 8004e46:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4e:	fa22 f303 	lsr.w	r3, r2, r3
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	f47f ae8e 	bne.w	8004b74 <HAL_GPIO_Init+0x14>
  }
}
 8004e58:	bf00      	nop
 8004e5a:	bf00      	nop
 8004e5c:	372c      	adds	r7, #44	; 0x2c
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bc80      	pop	{r7}
 8004e62:	4770      	bx	lr
 8004e64:	40010400 	.word	0x40010400

08004e68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b085      	sub	sp, #20
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	460b      	mov	r3, r1
 8004e72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	689a      	ldr	r2, [r3, #8]
 8004e78:	887b      	ldrh	r3, [r7, #2]
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d002      	beq.n	8004e86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004e80:	2301      	movs	r3, #1
 8004e82:	73fb      	strb	r3, [r7, #15]
 8004e84:	e001      	b.n	8004e8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004e86:	2300      	movs	r3, #0
 8004e88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3714      	adds	r7, #20
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bc80      	pop	{r7}
 8004e94:	4770      	bx	lr

08004e96 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e96:	b480      	push	{r7}
 8004e98:	b083      	sub	sp, #12
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	807b      	strh	r3, [r7, #2]
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004ea6:	787b      	ldrb	r3, [r7, #1]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d003      	beq.n	8004eb4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004eac:	887a      	ldrh	r2, [r7, #2]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004eb2:	e003      	b.n	8004ebc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004eb4:	887b      	ldrh	r3, [r7, #2]
 8004eb6:	041a      	lsls	r2, r3, #16
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	611a      	str	r2, [r3, #16]
}
 8004ebc:	bf00      	nop
 8004ebe:	370c      	adds	r7, #12
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bc80      	pop	{r7}
 8004ec4:	4770      	bx	lr
	...

08004ec8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b086      	sub	sp, #24
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d101      	bne.n	8004eda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e272      	b.n	80053c0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 0301 	and.w	r3, r3, #1
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	f000 8087 	beq.w	8004ff6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ee8:	4b92      	ldr	r3, [pc, #584]	; (8005134 <HAL_RCC_OscConfig+0x26c>)
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	f003 030c 	and.w	r3, r3, #12
 8004ef0:	2b04      	cmp	r3, #4
 8004ef2:	d00c      	beq.n	8004f0e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004ef4:	4b8f      	ldr	r3, [pc, #572]	; (8005134 <HAL_RCC_OscConfig+0x26c>)
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	f003 030c 	and.w	r3, r3, #12
 8004efc:	2b08      	cmp	r3, #8
 8004efe:	d112      	bne.n	8004f26 <HAL_RCC_OscConfig+0x5e>
 8004f00:	4b8c      	ldr	r3, [pc, #560]	; (8005134 <HAL_RCC_OscConfig+0x26c>)
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f0c:	d10b      	bne.n	8004f26 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f0e:	4b89      	ldr	r3, [pc, #548]	; (8005134 <HAL_RCC_OscConfig+0x26c>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d06c      	beq.n	8004ff4 <HAL_RCC_OscConfig+0x12c>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d168      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e24c      	b.n	80053c0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f2e:	d106      	bne.n	8004f3e <HAL_RCC_OscConfig+0x76>
 8004f30:	4b80      	ldr	r3, [pc, #512]	; (8005134 <HAL_RCC_OscConfig+0x26c>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a7f      	ldr	r2, [pc, #508]	; (8005134 <HAL_RCC_OscConfig+0x26c>)
 8004f36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f3a:	6013      	str	r3, [r2, #0]
 8004f3c:	e02e      	b.n	8004f9c <HAL_RCC_OscConfig+0xd4>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d10c      	bne.n	8004f60 <HAL_RCC_OscConfig+0x98>
 8004f46:	4b7b      	ldr	r3, [pc, #492]	; (8005134 <HAL_RCC_OscConfig+0x26c>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a7a      	ldr	r2, [pc, #488]	; (8005134 <HAL_RCC_OscConfig+0x26c>)
 8004f4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f50:	6013      	str	r3, [r2, #0]
 8004f52:	4b78      	ldr	r3, [pc, #480]	; (8005134 <HAL_RCC_OscConfig+0x26c>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a77      	ldr	r2, [pc, #476]	; (8005134 <HAL_RCC_OscConfig+0x26c>)
 8004f58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f5c:	6013      	str	r3, [r2, #0]
 8004f5e:	e01d      	b.n	8004f9c <HAL_RCC_OscConfig+0xd4>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f68:	d10c      	bne.n	8004f84 <HAL_RCC_OscConfig+0xbc>
 8004f6a:	4b72      	ldr	r3, [pc, #456]	; (8005134 <HAL_RCC_OscConfig+0x26c>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a71      	ldr	r2, [pc, #452]	; (8005134 <HAL_RCC_OscConfig+0x26c>)
 8004f70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f74:	6013      	str	r3, [r2, #0]
 8004f76:	4b6f      	ldr	r3, [pc, #444]	; (8005134 <HAL_RCC_OscConfig+0x26c>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a6e      	ldr	r2, [pc, #440]	; (8005134 <HAL_RCC_OscConfig+0x26c>)
 8004f7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f80:	6013      	str	r3, [r2, #0]
 8004f82:	e00b      	b.n	8004f9c <HAL_RCC_OscConfig+0xd4>
 8004f84:	4b6b      	ldr	r3, [pc, #428]	; (8005134 <HAL_RCC_OscConfig+0x26c>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a6a      	ldr	r2, [pc, #424]	; (8005134 <HAL_RCC_OscConfig+0x26c>)
 8004f8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f8e:	6013      	str	r3, [r2, #0]
 8004f90:	4b68      	ldr	r3, [pc, #416]	; (8005134 <HAL_RCC_OscConfig+0x26c>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a67      	ldr	r2, [pc, #412]	; (8005134 <HAL_RCC_OscConfig+0x26c>)
 8004f96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f9a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d013      	beq.n	8004fcc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fa4:	f7fe fe40 	bl	8003c28 <HAL_GetTick>
 8004fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004faa:	e008      	b.n	8004fbe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fac:	f7fe fe3c 	bl	8003c28 <HAL_GetTick>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	2b64      	cmp	r3, #100	; 0x64
 8004fb8:	d901      	bls.n	8004fbe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e200      	b.n	80053c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fbe:	4b5d      	ldr	r3, [pc, #372]	; (8005134 <HAL_RCC_OscConfig+0x26c>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d0f0      	beq.n	8004fac <HAL_RCC_OscConfig+0xe4>
 8004fca:	e014      	b.n	8004ff6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fcc:	f7fe fe2c 	bl	8003c28 <HAL_GetTick>
 8004fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fd2:	e008      	b.n	8004fe6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fd4:	f7fe fe28 	bl	8003c28 <HAL_GetTick>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	2b64      	cmp	r3, #100	; 0x64
 8004fe0:	d901      	bls.n	8004fe6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e1ec      	b.n	80053c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fe6:	4b53      	ldr	r3, [pc, #332]	; (8005134 <HAL_RCC_OscConfig+0x26c>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d1f0      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x10c>
 8004ff2:	e000      	b.n	8004ff6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ff4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 0302 	and.w	r3, r3, #2
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d063      	beq.n	80050ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005002:	4b4c      	ldr	r3, [pc, #304]	; (8005134 <HAL_RCC_OscConfig+0x26c>)
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	f003 030c 	and.w	r3, r3, #12
 800500a:	2b00      	cmp	r3, #0
 800500c:	d00b      	beq.n	8005026 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800500e:	4b49      	ldr	r3, [pc, #292]	; (8005134 <HAL_RCC_OscConfig+0x26c>)
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	f003 030c 	and.w	r3, r3, #12
 8005016:	2b08      	cmp	r3, #8
 8005018:	d11c      	bne.n	8005054 <HAL_RCC_OscConfig+0x18c>
 800501a:	4b46      	ldr	r3, [pc, #280]	; (8005134 <HAL_RCC_OscConfig+0x26c>)
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005022:	2b00      	cmp	r3, #0
 8005024:	d116      	bne.n	8005054 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005026:	4b43      	ldr	r3, [pc, #268]	; (8005134 <HAL_RCC_OscConfig+0x26c>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 0302 	and.w	r3, r3, #2
 800502e:	2b00      	cmp	r3, #0
 8005030:	d005      	beq.n	800503e <HAL_RCC_OscConfig+0x176>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	2b01      	cmp	r3, #1
 8005038:	d001      	beq.n	800503e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	e1c0      	b.n	80053c0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800503e:	4b3d      	ldr	r3, [pc, #244]	; (8005134 <HAL_RCC_OscConfig+0x26c>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	695b      	ldr	r3, [r3, #20]
 800504a:	00db      	lsls	r3, r3, #3
 800504c:	4939      	ldr	r1, [pc, #228]	; (8005134 <HAL_RCC_OscConfig+0x26c>)
 800504e:	4313      	orrs	r3, r2
 8005050:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005052:	e03a      	b.n	80050ca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	691b      	ldr	r3, [r3, #16]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d020      	beq.n	800509e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800505c:	4b36      	ldr	r3, [pc, #216]	; (8005138 <HAL_RCC_OscConfig+0x270>)
 800505e:	2201      	movs	r2, #1
 8005060:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005062:	f7fe fde1 	bl	8003c28 <HAL_GetTick>
 8005066:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005068:	e008      	b.n	800507c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800506a:	f7fe fddd 	bl	8003c28 <HAL_GetTick>
 800506e:	4602      	mov	r2, r0
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	2b02      	cmp	r3, #2
 8005076:	d901      	bls.n	800507c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005078:	2303      	movs	r3, #3
 800507a:	e1a1      	b.n	80053c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800507c:	4b2d      	ldr	r3, [pc, #180]	; (8005134 <HAL_RCC_OscConfig+0x26c>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 0302 	and.w	r3, r3, #2
 8005084:	2b00      	cmp	r3, #0
 8005086:	d0f0      	beq.n	800506a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005088:	4b2a      	ldr	r3, [pc, #168]	; (8005134 <HAL_RCC_OscConfig+0x26c>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	695b      	ldr	r3, [r3, #20]
 8005094:	00db      	lsls	r3, r3, #3
 8005096:	4927      	ldr	r1, [pc, #156]	; (8005134 <HAL_RCC_OscConfig+0x26c>)
 8005098:	4313      	orrs	r3, r2
 800509a:	600b      	str	r3, [r1, #0]
 800509c:	e015      	b.n	80050ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800509e:	4b26      	ldr	r3, [pc, #152]	; (8005138 <HAL_RCC_OscConfig+0x270>)
 80050a0:	2200      	movs	r2, #0
 80050a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050a4:	f7fe fdc0 	bl	8003c28 <HAL_GetTick>
 80050a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050aa:	e008      	b.n	80050be <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050ac:	f7fe fdbc 	bl	8003c28 <HAL_GetTick>
 80050b0:	4602      	mov	r2, r0
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	d901      	bls.n	80050be <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80050ba:	2303      	movs	r3, #3
 80050bc:	e180      	b.n	80053c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050be:	4b1d      	ldr	r3, [pc, #116]	; (8005134 <HAL_RCC_OscConfig+0x26c>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0302 	and.w	r3, r3, #2
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d1f0      	bne.n	80050ac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 0308 	and.w	r3, r3, #8
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d03a      	beq.n	800514c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	699b      	ldr	r3, [r3, #24]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d019      	beq.n	8005112 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050de:	4b17      	ldr	r3, [pc, #92]	; (800513c <HAL_RCC_OscConfig+0x274>)
 80050e0:	2201      	movs	r2, #1
 80050e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050e4:	f7fe fda0 	bl	8003c28 <HAL_GetTick>
 80050e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050ea:	e008      	b.n	80050fe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050ec:	f7fe fd9c 	bl	8003c28 <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	2b02      	cmp	r3, #2
 80050f8:	d901      	bls.n	80050fe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e160      	b.n	80053c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050fe:	4b0d      	ldr	r3, [pc, #52]	; (8005134 <HAL_RCC_OscConfig+0x26c>)
 8005100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005102:	f003 0302 	and.w	r3, r3, #2
 8005106:	2b00      	cmp	r3, #0
 8005108:	d0f0      	beq.n	80050ec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800510a:	2001      	movs	r0, #1
 800510c:	f000 fad8 	bl	80056c0 <RCC_Delay>
 8005110:	e01c      	b.n	800514c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005112:	4b0a      	ldr	r3, [pc, #40]	; (800513c <HAL_RCC_OscConfig+0x274>)
 8005114:	2200      	movs	r2, #0
 8005116:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005118:	f7fe fd86 	bl	8003c28 <HAL_GetTick>
 800511c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800511e:	e00f      	b.n	8005140 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005120:	f7fe fd82 	bl	8003c28 <HAL_GetTick>
 8005124:	4602      	mov	r2, r0
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	2b02      	cmp	r3, #2
 800512c:	d908      	bls.n	8005140 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	e146      	b.n	80053c0 <HAL_RCC_OscConfig+0x4f8>
 8005132:	bf00      	nop
 8005134:	40021000 	.word	0x40021000
 8005138:	42420000 	.word	0x42420000
 800513c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005140:	4b92      	ldr	r3, [pc, #584]	; (800538c <HAL_RCC_OscConfig+0x4c4>)
 8005142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005144:	f003 0302 	and.w	r3, r3, #2
 8005148:	2b00      	cmp	r3, #0
 800514a:	d1e9      	bne.n	8005120 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 0304 	and.w	r3, r3, #4
 8005154:	2b00      	cmp	r3, #0
 8005156:	f000 80a6 	beq.w	80052a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800515a:	2300      	movs	r3, #0
 800515c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800515e:	4b8b      	ldr	r3, [pc, #556]	; (800538c <HAL_RCC_OscConfig+0x4c4>)
 8005160:	69db      	ldr	r3, [r3, #28]
 8005162:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005166:	2b00      	cmp	r3, #0
 8005168:	d10d      	bne.n	8005186 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800516a:	4b88      	ldr	r3, [pc, #544]	; (800538c <HAL_RCC_OscConfig+0x4c4>)
 800516c:	69db      	ldr	r3, [r3, #28]
 800516e:	4a87      	ldr	r2, [pc, #540]	; (800538c <HAL_RCC_OscConfig+0x4c4>)
 8005170:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005174:	61d3      	str	r3, [r2, #28]
 8005176:	4b85      	ldr	r3, [pc, #532]	; (800538c <HAL_RCC_OscConfig+0x4c4>)
 8005178:	69db      	ldr	r3, [r3, #28]
 800517a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800517e:	60bb      	str	r3, [r7, #8]
 8005180:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005182:	2301      	movs	r3, #1
 8005184:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005186:	4b82      	ldr	r3, [pc, #520]	; (8005390 <HAL_RCC_OscConfig+0x4c8>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800518e:	2b00      	cmp	r3, #0
 8005190:	d118      	bne.n	80051c4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005192:	4b7f      	ldr	r3, [pc, #508]	; (8005390 <HAL_RCC_OscConfig+0x4c8>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a7e      	ldr	r2, [pc, #504]	; (8005390 <HAL_RCC_OscConfig+0x4c8>)
 8005198:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800519c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800519e:	f7fe fd43 	bl	8003c28 <HAL_GetTick>
 80051a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051a4:	e008      	b.n	80051b8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051a6:	f7fe fd3f 	bl	8003c28 <HAL_GetTick>
 80051aa:	4602      	mov	r2, r0
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	1ad3      	subs	r3, r2, r3
 80051b0:	2b64      	cmp	r3, #100	; 0x64
 80051b2:	d901      	bls.n	80051b8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80051b4:	2303      	movs	r3, #3
 80051b6:	e103      	b.n	80053c0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051b8:	4b75      	ldr	r3, [pc, #468]	; (8005390 <HAL_RCC_OscConfig+0x4c8>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d0f0      	beq.n	80051a6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d106      	bne.n	80051da <HAL_RCC_OscConfig+0x312>
 80051cc:	4b6f      	ldr	r3, [pc, #444]	; (800538c <HAL_RCC_OscConfig+0x4c4>)
 80051ce:	6a1b      	ldr	r3, [r3, #32]
 80051d0:	4a6e      	ldr	r2, [pc, #440]	; (800538c <HAL_RCC_OscConfig+0x4c4>)
 80051d2:	f043 0301 	orr.w	r3, r3, #1
 80051d6:	6213      	str	r3, [r2, #32]
 80051d8:	e02d      	b.n	8005236 <HAL_RCC_OscConfig+0x36e>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	68db      	ldr	r3, [r3, #12]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d10c      	bne.n	80051fc <HAL_RCC_OscConfig+0x334>
 80051e2:	4b6a      	ldr	r3, [pc, #424]	; (800538c <HAL_RCC_OscConfig+0x4c4>)
 80051e4:	6a1b      	ldr	r3, [r3, #32]
 80051e6:	4a69      	ldr	r2, [pc, #420]	; (800538c <HAL_RCC_OscConfig+0x4c4>)
 80051e8:	f023 0301 	bic.w	r3, r3, #1
 80051ec:	6213      	str	r3, [r2, #32]
 80051ee:	4b67      	ldr	r3, [pc, #412]	; (800538c <HAL_RCC_OscConfig+0x4c4>)
 80051f0:	6a1b      	ldr	r3, [r3, #32]
 80051f2:	4a66      	ldr	r2, [pc, #408]	; (800538c <HAL_RCC_OscConfig+0x4c4>)
 80051f4:	f023 0304 	bic.w	r3, r3, #4
 80051f8:	6213      	str	r3, [r2, #32]
 80051fa:	e01c      	b.n	8005236 <HAL_RCC_OscConfig+0x36e>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	2b05      	cmp	r3, #5
 8005202:	d10c      	bne.n	800521e <HAL_RCC_OscConfig+0x356>
 8005204:	4b61      	ldr	r3, [pc, #388]	; (800538c <HAL_RCC_OscConfig+0x4c4>)
 8005206:	6a1b      	ldr	r3, [r3, #32]
 8005208:	4a60      	ldr	r2, [pc, #384]	; (800538c <HAL_RCC_OscConfig+0x4c4>)
 800520a:	f043 0304 	orr.w	r3, r3, #4
 800520e:	6213      	str	r3, [r2, #32]
 8005210:	4b5e      	ldr	r3, [pc, #376]	; (800538c <HAL_RCC_OscConfig+0x4c4>)
 8005212:	6a1b      	ldr	r3, [r3, #32]
 8005214:	4a5d      	ldr	r2, [pc, #372]	; (800538c <HAL_RCC_OscConfig+0x4c4>)
 8005216:	f043 0301 	orr.w	r3, r3, #1
 800521a:	6213      	str	r3, [r2, #32]
 800521c:	e00b      	b.n	8005236 <HAL_RCC_OscConfig+0x36e>
 800521e:	4b5b      	ldr	r3, [pc, #364]	; (800538c <HAL_RCC_OscConfig+0x4c4>)
 8005220:	6a1b      	ldr	r3, [r3, #32]
 8005222:	4a5a      	ldr	r2, [pc, #360]	; (800538c <HAL_RCC_OscConfig+0x4c4>)
 8005224:	f023 0301 	bic.w	r3, r3, #1
 8005228:	6213      	str	r3, [r2, #32]
 800522a:	4b58      	ldr	r3, [pc, #352]	; (800538c <HAL_RCC_OscConfig+0x4c4>)
 800522c:	6a1b      	ldr	r3, [r3, #32]
 800522e:	4a57      	ldr	r2, [pc, #348]	; (800538c <HAL_RCC_OscConfig+0x4c4>)
 8005230:	f023 0304 	bic.w	r3, r3, #4
 8005234:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d015      	beq.n	800526a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800523e:	f7fe fcf3 	bl	8003c28 <HAL_GetTick>
 8005242:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005244:	e00a      	b.n	800525c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005246:	f7fe fcef 	bl	8003c28 <HAL_GetTick>
 800524a:	4602      	mov	r2, r0
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	1ad3      	subs	r3, r2, r3
 8005250:	f241 3288 	movw	r2, #5000	; 0x1388
 8005254:	4293      	cmp	r3, r2
 8005256:	d901      	bls.n	800525c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005258:	2303      	movs	r3, #3
 800525a:	e0b1      	b.n	80053c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800525c:	4b4b      	ldr	r3, [pc, #300]	; (800538c <HAL_RCC_OscConfig+0x4c4>)
 800525e:	6a1b      	ldr	r3, [r3, #32]
 8005260:	f003 0302 	and.w	r3, r3, #2
 8005264:	2b00      	cmp	r3, #0
 8005266:	d0ee      	beq.n	8005246 <HAL_RCC_OscConfig+0x37e>
 8005268:	e014      	b.n	8005294 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800526a:	f7fe fcdd 	bl	8003c28 <HAL_GetTick>
 800526e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005270:	e00a      	b.n	8005288 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005272:	f7fe fcd9 	bl	8003c28 <HAL_GetTick>
 8005276:	4602      	mov	r2, r0
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	1ad3      	subs	r3, r2, r3
 800527c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005280:	4293      	cmp	r3, r2
 8005282:	d901      	bls.n	8005288 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005284:	2303      	movs	r3, #3
 8005286:	e09b      	b.n	80053c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005288:	4b40      	ldr	r3, [pc, #256]	; (800538c <HAL_RCC_OscConfig+0x4c4>)
 800528a:	6a1b      	ldr	r3, [r3, #32]
 800528c:	f003 0302 	and.w	r3, r3, #2
 8005290:	2b00      	cmp	r3, #0
 8005292:	d1ee      	bne.n	8005272 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005294:	7dfb      	ldrb	r3, [r7, #23]
 8005296:	2b01      	cmp	r3, #1
 8005298:	d105      	bne.n	80052a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800529a:	4b3c      	ldr	r3, [pc, #240]	; (800538c <HAL_RCC_OscConfig+0x4c4>)
 800529c:	69db      	ldr	r3, [r3, #28]
 800529e:	4a3b      	ldr	r2, [pc, #236]	; (800538c <HAL_RCC_OscConfig+0x4c4>)
 80052a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	69db      	ldr	r3, [r3, #28]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	f000 8087 	beq.w	80053be <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80052b0:	4b36      	ldr	r3, [pc, #216]	; (800538c <HAL_RCC_OscConfig+0x4c4>)
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	f003 030c 	and.w	r3, r3, #12
 80052b8:	2b08      	cmp	r3, #8
 80052ba:	d061      	beq.n	8005380 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	69db      	ldr	r3, [r3, #28]
 80052c0:	2b02      	cmp	r3, #2
 80052c2:	d146      	bne.n	8005352 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052c4:	4b33      	ldr	r3, [pc, #204]	; (8005394 <HAL_RCC_OscConfig+0x4cc>)
 80052c6:	2200      	movs	r2, #0
 80052c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052ca:	f7fe fcad 	bl	8003c28 <HAL_GetTick>
 80052ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052d0:	e008      	b.n	80052e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052d2:	f7fe fca9 	bl	8003c28 <HAL_GetTick>
 80052d6:	4602      	mov	r2, r0
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	1ad3      	subs	r3, r2, r3
 80052dc:	2b02      	cmp	r3, #2
 80052de:	d901      	bls.n	80052e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80052e0:	2303      	movs	r3, #3
 80052e2:	e06d      	b.n	80053c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052e4:	4b29      	ldr	r3, [pc, #164]	; (800538c <HAL_RCC_OscConfig+0x4c4>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d1f0      	bne.n	80052d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6a1b      	ldr	r3, [r3, #32]
 80052f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052f8:	d108      	bne.n	800530c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80052fa:	4b24      	ldr	r3, [pc, #144]	; (800538c <HAL_RCC_OscConfig+0x4c4>)
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	4921      	ldr	r1, [pc, #132]	; (800538c <HAL_RCC_OscConfig+0x4c4>)
 8005308:	4313      	orrs	r3, r2
 800530a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800530c:	4b1f      	ldr	r3, [pc, #124]	; (800538c <HAL_RCC_OscConfig+0x4c4>)
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6a19      	ldr	r1, [r3, #32]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531c:	430b      	orrs	r3, r1
 800531e:	491b      	ldr	r1, [pc, #108]	; (800538c <HAL_RCC_OscConfig+0x4c4>)
 8005320:	4313      	orrs	r3, r2
 8005322:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005324:	4b1b      	ldr	r3, [pc, #108]	; (8005394 <HAL_RCC_OscConfig+0x4cc>)
 8005326:	2201      	movs	r2, #1
 8005328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800532a:	f7fe fc7d 	bl	8003c28 <HAL_GetTick>
 800532e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005330:	e008      	b.n	8005344 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005332:	f7fe fc79 	bl	8003c28 <HAL_GetTick>
 8005336:	4602      	mov	r2, r0
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	1ad3      	subs	r3, r2, r3
 800533c:	2b02      	cmp	r3, #2
 800533e:	d901      	bls.n	8005344 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005340:	2303      	movs	r3, #3
 8005342:	e03d      	b.n	80053c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005344:	4b11      	ldr	r3, [pc, #68]	; (800538c <HAL_RCC_OscConfig+0x4c4>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800534c:	2b00      	cmp	r3, #0
 800534e:	d0f0      	beq.n	8005332 <HAL_RCC_OscConfig+0x46a>
 8005350:	e035      	b.n	80053be <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005352:	4b10      	ldr	r3, [pc, #64]	; (8005394 <HAL_RCC_OscConfig+0x4cc>)
 8005354:	2200      	movs	r2, #0
 8005356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005358:	f7fe fc66 	bl	8003c28 <HAL_GetTick>
 800535c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800535e:	e008      	b.n	8005372 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005360:	f7fe fc62 	bl	8003c28 <HAL_GetTick>
 8005364:	4602      	mov	r2, r0
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	2b02      	cmp	r3, #2
 800536c:	d901      	bls.n	8005372 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800536e:	2303      	movs	r3, #3
 8005370:	e026      	b.n	80053c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005372:	4b06      	ldr	r3, [pc, #24]	; (800538c <HAL_RCC_OscConfig+0x4c4>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800537a:	2b00      	cmp	r3, #0
 800537c:	d1f0      	bne.n	8005360 <HAL_RCC_OscConfig+0x498>
 800537e:	e01e      	b.n	80053be <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	69db      	ldr	r3, [r3, #28]
 8005384:	2b01      	cmp	r3, #1
 8005386:	d107      	bne.n	8005398 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	e019      	b.n	80053c0 <HAL_RCC_OscConfig+0x4f8>
 800538c:	40021000 	.word	0x40021000
 8005390:	40007000 	.word	0x40007000
 8005394:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005398:	4b0b      	ldr	r3, [pc, #44]	; (80053c8 <HAL_RCC_OscConfig+0x500>)
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6a1b      	ldr	r3, [r3, #32]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d106      	bne.n	80053ba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d001      	beq.n	80053be <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e000      	b.n	80053c0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80053be:	2300      	movs	r3, #0
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3718      	adds	r7, #24
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}
 80053c8:	40021000 	.word	0x40021000

080053cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b084      	sub	sp, #16
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d101      	bne.n	80053e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	e0d0      	b.n	8005582 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80053e0:	4b6a      	ldr	r3, [pc, #424]	; (800558c <HAL_RCC_ClockConfig+0x1c0>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 0307 	and.w	r3, r3, #7
 80053e8:	683a      	ldr	r2, [r7, #0]
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d910      	bls.n	8005410 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053ee:	4b67      	ldr	r3, [pc, #412]	; (800558c <HAL_RCC_ClockConfig+0x1c0>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f023 0207 	bic.w	r2, r3, #7
 80053f6:	4965      	ldr	r1, [pc, #404]	; (800558c <HAL_RCC_ClockConfig+0x1c0>)
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053fe:	4b63      	ldr	r3, [pc, #396]	; (800558c <HAL_RCC_ClockConfig+0x1c0>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f003 0307 	and.w	r3, r3, #7
 8005406:	683a      	ldr	r2, [r7, #0]
 8005408:	429a      	cmp	r2, r3
 800540a:	d001      	beq.n	8005410 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e0b8      	b.n	8005582 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 0302 	and.w	r3, r3, #2
 8005418:	2b00      	cmp	r3, #0
 800541a:	d020      	beq.n	800545e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f003 0304 	and.w	r3, r3, #4
 8005424:	2b00      	cmp	r3, #0
 8005426:	d005      	beq.n	8005434 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005428:	4b59      	ldr	r3, [pc, #356]	; (8005590 <HAL_RCC_ClockConfig+0x1c4>)
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	4a58      	ldr	r2, [pc, #352]	; (8005590 <HAL_RCC_ClockConfig+0x1c4>)
 800542e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005432:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 0308 	and.w	r3, r3, #8
 800543c:	2b00      	cmp	r3, #0
 800543e:	d005      	beq.n	800544c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005440:	4b53      	ldr	r3, [pc, #332]	; (8005590 <HAL_RCC_ClockConfig+0x1c4>)
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	4a52      	ldr	r2, [pc, #328]	; (8005590 <HAL_RCC_ClockConfig+0x1c4>)
 8005446:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800544a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800544c:	4b50      	ldr	r3, [pc, #320]	; (8005590 <HAL_RCC_ClockConfig+0x1c4>)
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	494d      	ldr	r1, [pc, #308]	; (8005590 <HAL_RCC_ClockConfig+0x1c4>)
 800545a:	4313      	orrs	r3, r2
 800545c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 0301 	and.w	r3, r3, #1
 8005466:	2b00      	cmp	r3, #0
 8005468:	d040      	beq.n	80054ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	2b01      	cmp	r3, #1
 8005470:	d107      	bne.n	8005482 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005472:	4b47      	ldr	r3, [pc, #284]	; (8005590 <HAL_RCC_ClockConfig+0x1c4>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800547a:	2b00      	cmp	r3, #0
 800547c:	d115      	bne.n	80054aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e07f      	b.n	8005582 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	2b02      	cmp	r3, #2
 8005488:	d107      	bne.n	800549a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800548a:	4b41      	ldr	r3, [pc, #260]	; (8005590 <HAL_RCC_ClockConfig+0x1c4>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005492:	2b00      	cmp	r3, #0
 8005494:	d109      	bne.n	80054aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	e073      	b.n	8005582 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800549a:	4b3d      	ldr	r3, [pc, #244]	; (8005590 <HAL_RCC_ClockConfig+0x1c4>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 0302 	and.w	r3, r3, #2
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d101      	bne.n	80054aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e06b      	b.n	8005582 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80054aa:	4b39      	ldr	r3, [pc, #228]	; (8005590 <HAL_RCC_ClockConfig+0x1c4>)
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	f023 0203 	bic.w	r2, r3, #3
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	4936      	ldr	r1, [pc, #216]	; (8005590 <HAL_RCC_ClockConfig+0x1c4>)
 80054b8:	4313      	orrs	r3, r2
 80054ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80054bc:	f7fe fbb4 	bl	8003c28 <HAL_GetTick>
 80054c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054c2:	e00a      	b.n	80054da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054c4:	f7fe fbb0 	bl	8003c28 <HAL_GetTick>
 80054c8:	4602      	mov	r2, r0
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	1ad3      	subs	r3, r2, r3
 80054ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d901      	bls.n	80054da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	e053      	b.n	8005582 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054da:	4b2d      	ldr	r3, [pc, #180]	; (8005590 <HAL_RCC_ClockConfig+0x1c4>)
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	f003 020c 	and.w	r2, r3, #12
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d1eb      	bne.n	80054c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80054ec:	4b27      	ldr	r3, [pc, #156]	; (800558c <HAL_RCC_ClockConfig+0x1c0>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 0307 	and.w	r3, r3, #7
 80054f4:	683a      	ldr	r2, [r7, #0]
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d210      	bcs.n	800551c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054fa:	4b24      	ldr	r3, [pc, #144]	; (800558c <HAL_RCC_ClockConfig+0x1c0>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f023 0207 	bic.w	r2, r3, #7
 8005502:	4922      	ldr	r1, [pc, #136]	; (800558c <HAL_RCC_ClockConfig+0x1c0>)
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	4313      	orrs	r3, r2
 8005508:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800550a:	4b20      	ldr	r3, [pc, #128]	; (800558c <HAL_RCC_ClockConfig+0x1c0>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 0307 	and.w	r3, r3, #7
 8005512:	683a      	ldr	r2, [r7, #0]
 8005514:	429a      	cmp	r2, r3
 8005516:	d001      	beq.n	800551c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	e032      	b.n	8005582 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 0304 	and.w	r3, r3, #4
 8005524:	2b00      	cmp	r3, #0
 8005526:	d008      	beq.n	800553a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005528:	4b19      	ldr	r3, [pc, #100]	; (8005590 <HAL_RCC_ClockConfig+0x1c4>)
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	4916      	ldr	r1, [pc, #88]	; (8005590 <HAL_RCC_ClockConfig+0x1c4>)
 8005536:	4313      	orrs	r3, r2
 8005538:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 0308 	and.w	r3, r3, #8
 8005542:	2b00      	cmp	r3, #0
 8005544:	d009      	beq.n	800555a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005546:	4b12      	ldr	r3, [pc, #72]	; (8005590 <HAL_RCC_ClockConfig+0x1c4>)
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	00db      	lsls	r3, r3, #3
 8005554:	490e      	ldr	r1, [pc, #56]	; (8005590 <HAL_RCC_ClockConfig+0x1c4>)
 8005556:	4313      	orrs	r3, r2
 8005558:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800555a:	f000 f821 	bl	80055a0 <HAL_RCC_GetSysClockFreq>
 800555e:	4602      	mov	r2, r0
 8005560:	4b0b      	ldr	r3, [pc, #44]	; (8005590 <HAL_RCC_ClockConfig+0x1c4>)
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	091b      	lsrs	r3, r3, #4
 8005566:	f003 030f 	and.w	r3, r3, #15
 800556a:	490a      	ldr	r1, [pc, #40]	; (8005594 <HAL_RCC_ClockConfig+0x1c8>)
 800556c:	5ccb      	ldrb	r3, [r1, r3]
 800556e:	fa22 f303 	lsr.w	r3, r2, r3
 8005572:	4a09      	ldr	r2, [pc, #36]	; (8005598 <HAL_RCC_ClockConfig+0x1cc>)
 8005574:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005576:	4b09      	ldr	r3, [pc, #36]	; (800559c <HAL_RCC_ClockConfig+0x1d0>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4618      	mov	r0, r3
 800557c:	f7fe fb12 	bl	8003ba4 <HAL_InitTick>

  return HAL_OK;
 8005580:	2300      	movs	r3, #0
}
 8005582:	4618      	mov	r0, r3
 8005584:	3710      	adds	r7, #16
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
 800558a:	bf00      	nop
 800558c:	40022000 	.word	0x40022000
 8005590:	40021000 	.word	0x40021000
 8005594:	08007b00 	.word	0x08007b00
 8005598:	2000003c 	.word	0x2000003c
 800559c:	20000040 	.word	0x20000040

080055a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055a0:	b490      	push	{r4, r7}
 80055a2:	b08a      	sub	sp, #40	; 0x28
 80055a4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80055a6:	4b29      	ldr	r3, [pc, #164]	; (800564c <HAL_RCC_GetSysClockFreq+0xac>)
 80055a8:	1d3c      	adds	r4, r7, #4
 80055aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80055ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80055b0:	f240 2301 	movw	r3, #513	; 0x201
 80055b4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80055b6:	2300      	movs	r3, #0
 80055b8:	61fb      	str	r3, [r7, #28]
 80055ba:	2300      	movs	r3, #0
 80055bc:	61bb      	str	r3, [r7, #24]
 80055be:	2300      	movs	r3, #0
 80055c0:	627b      	str	r3, [r7, #36]	; 0x24
 80055c2:	2300      	movs	r3, #0
 80055c4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80055c6:	2300      	movs	r3, #0
 80055c8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80055ca:	4b21      	ldr	r3, [pc, #132]	; (8005650 <HAL_RCC_GetSysClockFreq+0xb0>)
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	f003 030c 	and.w	r3, r3, #12
 80055d6:	2b04      	cmp	r3, #4
 80055d8:	d002      	beq.n	80055e0 <HAL_RCC_GetSysClockFreq+0x40>
 80055da:	2b08      	cmp	r3, #8
 80055dc:	d003      	beq.n	80055e6 <HAL_RCC_GetSysClockFreq+0x46>
 80055de:	e02b      	b.n	8005638 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80055e0:	4b1c      	ldr	r3, [pc, #112]	; (8005654 <HAL_RCC_GetSysClockFreq+0xb4>)
 80055e2:	623b      	str	r3, [r7, #32]
      break;
 80055e4:	e02b      	b.n	800563e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80055e6:	69fb      	ldr	r3, [r7, #28]
 80055e8:	0c9b      	lsrs	r3, r3, #18
 80055ea:	f003 030f 	and.w	r3, r3, #15
 80055ee:	3328      	adds	r3, #40	; 0x28
 80055f0:	443b      	add	r3, r7
 80055f2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80055f6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80055f8:	69fb      	ldr	r3, [r7, #28]
 80055fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d012      	beq.n	8005628 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005602:	4b13      	ldr	r3, [pc, #76]	; (8005650 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	0c5b      	lsrs	r3, r3, #17
 8005608:	f003 0301 	and.w	r3, r3, #1
 800560c:	3328      	adds	r3, #40	; 0x28
 800560e:	443b      	add	r3, r7
 8005610:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005614:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	4a0e      	ldr	r2, [pc, #56]	; (8005654 <HAL_RCC_GetSysClockFreq+0xb4>)
 800561a:	fb03 f202 	mul.w	r2, r3, r2
 800561e:	69bb      	ldr	r3, [r7, #24]
 8005620:	fbb2 f3f3 	udiv	r3, r2, r3
 8005624:	627b      	str	r3, [r7, #36]	; 0x24
 8005626:	e004      	b.n	8005632 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	4a0b      	ldr	r2, [pc, #44]	; (8005658 <HAL_RCC_GetSysClockFreq+0xb8>)
 800562c:	fb02 f303 	mul.w	r3, r2, r3
 8005630:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005634:	623b      	str	r3, [r7, #32]
      break;
 8005636:	e002      	b.n	800563e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005638:	4b06      	ldr	r3, [pc, #24]	; (8005654 <HAL_RCC_GetSysClockFreq+0xb4>)
 800563a:	623b      	str	r3, [r7, #32]
      break;
 800563c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800563e:	6a3b      	ldr	r3, [r7, #32]
}
 8005640:	4618      	mov	r0, r3
 8005642:	3728      	adds	r7, #40	; 0x28
 8005644:	46bd      	mov	sp, r7
 8005646:	bc90      	pop	{r4, r7}
 8005648:	4770      	bx	lr
 800564a:	bf00      	nop
 800564c:	08007af0 	.word	0x08007af0
 8005650:	40021000 	.word	0x40021000
 8005654:	007a1200 	.word	0x007a1200
 8005658:	003d0900 	.word	0x003d0900

0800565c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800565c:	b480      	push	{r7}
 800565e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005660:	4b02      	ldr	r3, [pc, #8]	; (800566c <HAL_RCC_GetHCLKFreq+0x10>)
 8005662:	681b      	ldr	r3, [r3, #0]
}
 8005664:	4618      	mov	r0, r3
 8005666:	46bd      	mov	sp, r7
 8005668:	bc80      	pop	{r7}
 800566a:	4770      	bx	lr
 800566c:	2000003c 	.word	0x2000003c

08005670 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005674:	f7ff fff2 	bl	800565c <HAL_RCC_GetHCLKFreq>
 8005678:	4602      	mov	r2, r0
 800567a:	4b05      	ldr	r3, [pc, #20]	; (8005690 <HAL_RCC_GetPCLK1Freq+0x20>)
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	0a1b      	lsrs	r3, r3, #8
 8005680:	f003 0307 	and.w	r3, r3, #7
 8005684:	4903      	ldr	r1, [pc, #12]	; (8005694 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005686:	5ccb      	ldrb	r3, [r1, r3]
 8005688:	fa22 f303 	lsr.w	r3, r2, r3
}
 800568c:	4618      	mov	r0, r3
 800568e:	bd80      	pop	{r7, pc}
 8005690:	40021000 	.word	0x40021000
 8005694:	08007b10 	.word	0x08007b10

08005698 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800569c:	f7ff ffde 	bl	800565c <HAL_RCC_GetHCLKFreq>
 80056a0:	4602      	mov	r2, r0
 80056a2:	4b05      	ldr	r3, [pc, #20]	; (80056b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	0adb      	lsrs	r3, r3, #11
 80056a8:	f003 0307 	and.w	r3, r3, #7
 80056ac:	4903      	ldr	r1, [pc, #12]	; (80056bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80056ae:	5ccb      	ldrb	r3, [r1, r3]
 80056b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	bd80      	pop	{r7, pc}
 80056b8:	40021000 	.word	0x40021000
 80056bc:	08007b10 	.word	0x08007b10

080056c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b085      	sub	sp, #20
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80056c8:	4b0a      	ldr	r3, [pc, #40]	; (80056f4 <RCC_Delay+0x34>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a0a      	ldr	r2, [pc, #40]	; (80056f8 <RCC_Delay+0x38>)
 80056ce:	fba2 2303 	umull	r2, r3, r2, r3
 80056d2:	0a5b      	lsrs	r3, r3, #9
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	fb02 f303 	mul.w	r3, r2, r3
 80056da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80056dc:	bf00      	nop
  }
  while (Delay --);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	1e5a      	subs	r2, r3, #1
 80056e2:	60fa      	str	r2, [r7, #12]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d1f9      	bne.n	80056dc <RCC_Delay+0x1c>
}
 80056e8:	bf00      	nop
 80056ea:	bf00      	nop
 80056ec:	3714      	adds	r7, #20
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bc80      	pop	{r7}
 80056f2:	4770      	bx	lr
 80056f4:	2000003c 	.word	0x2000003c
 80056f8:	10624dd3 	.word	0x10624dd3

080056fc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b086      	sub	sp, #24
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005704:	2300      	movs	r3, #0
 8005706:	613b      	str	r3, [r7, #16]
 8005708:	2300      	movs	r3, #0
 800570a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 0301 	and.w	r3, r3, #1
 8005714:	2b00      	cmp	r3, #0
 8005716:	d07d      	beq.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005718:	2300      	movs	r3, #0
 800571a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800571c:	4b4f      	ldr	r3, [pc, #316]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800571e:	69db      	ldr	r3, [r3, #28]
 8005720:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005724:	2b00      	cmp	r3, #0
 8005726:	d10d      	bne.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005728:	4b4c      	ldr	r3, [pc, #304]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800572a:	69db      	ldr	r3, [r3, #28]
 800572c:	4a4b      	ldr	r2, [pc, #300]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800572e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005732:	61d3      	str	r3, [r2, #28]
 8005734:	4b49      	ldr	r3, [pc, #292]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005736:	69db      	ldr	r3, [r3, #28]
 8005738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800573c:	60bb      	str	r3, [r7, #8]
 800573e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005740:	2301      	movs	r3, #1
 8005742:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005744:	4b46      	ldr	r3, [pc, #280]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800574c:	2b00      	cmp	r3, #0
 800574e:	d118      	bne.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005750:	4b43      	ldr	r3, [pc, #268]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a42      	ldr	r2, [pc, #264]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005756:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800575a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800575c:	f7fe fa64 	bl	8003c28 <HAL_GetTick>
 8005760:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005762:	e008      	b.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005764:	f7fe fa60 	bl	8003c28 <HAL_GetTick>
 8005768:	4602      	mov	r2, r0
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	2b64      	cmp	r3, #100	; 0x64
 8005770:	d901      	bls.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005772:	2303      	movs	r3, #3
 8005774:	e06d      	b.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005776:	4b3a      	ldr	r3, [pc, #232]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800577e:	2b00      	cmp	r3, #0
 8005780:	d0f0      	beq.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005782:	4b36      	ldr	r3, [pc, #216]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005784:	6a1b      	ldr	r3, [r3, #32]
 8005786:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800578a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d02e      	beq.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800579a:	68fa      	ldr	r2, [r7, #12]
 800579c:	429a      	cmp	r2, r3
 800579e:	d027      	beq.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80057a0:	4b2e      	ldr	r3, [pc, #184]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057a2:	6a1b      	ldr	r3, [r3, #32]
 80057a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057a8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80057aa:	4b2e      	ldr	r3, [pc, #184]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80057ac:	2201      	movs	r2, #1
 80057ae:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80057b0:	4b2c      	ldr	r3, [pc, #176]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80057b2:	2200      	movs	r2, #0
 80057b4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80057b6:	4a29      	ldr	r2, [pc, #164]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f003 0301 	and.w	r3, r3, #1
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d014      	beq.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057c6:	f7fe fa2f 	bl	8003c28 <HAL_GetTick>
 80057ca:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057cc:	e00a      	b.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057ce:	f7fe fa2b 	bl	8003c28 <HAL_GetTick>
 80057d2:	4602      	mov	r2, r0
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	1ad3      	subs	r3, r2, r3
 80057d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80057dc:	4293      	cmp	r3, r2
 80057de:	d901      	bls.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80057e0:	2303      	movs	r3, #3
 80057e2:	e036      	b.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057e4:	4b1d      	ldr	r3, [pc, #116]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057e6:	6a1b      	ldr	r3, [r3, #32]
 80057e8:	f003 0302 	and.w	r3, r3, #2
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d0ee      	beq.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80057f0:	4b1a      	ldr	r3, [pc, #104]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057f2:	6a1b      	ldr	r3, [r3, #32]
 80057f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	4917      	ldr	r1, [pc, #92]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057fe:	4313      	orrs	r3, r2
 8005800:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005802:	7dfb      	ldrb	r3, [r7, #23]
 8005804:	2b01      	cmp	r3, #1
 8005806:	d105      	bne.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005808:	4b14      	ldr	r3, [pc, #80]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800580a:	69db      	ldr	r3, [r3, #28]
 800580c:	4a13      	ldr	r2, [pc, #76]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800580e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005812:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 0302 	and.w	r3, r3, #2
 800581c:	2b00      	cmp	r3, #0
 800581e:	d008      	beq.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005820:	4b0e      	ldr	r3, [pc, #56]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	490b      	ldr	r1, [pc, #44]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800582e:	4313      	orrs	r3, r2
 8005830:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 0310 	and.w	r3, r3, #16
 800583a:	2b00      	cmp	r3, #0
 800583c:	d008      	beq.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800583e:	4b07      	ldr	r3, [pc, #28]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	4904      	ldr	r1, [pc, #16]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800584c:	4313      	orrs	r3, r2
 800584e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	3718      	adds	r7, #24
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
 800585a:	bf00      	nop
 800585c:	40021000 	.word	0x40021000
 8005860:	40007000 	.word	0x40007000
 8005864:	42420440 	.word	0x42420440

08005868 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b082      	sub	sp, #8
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d101      	bne.n	800587a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	e041      	b.n	80058fe <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005880:	b2db      	uxtb	r3, r3
 8005882:	2b00      	cmp	r3, #0
 8005884:	d106      	bne.n	8005894 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2200      	movs	r2, #0
 800588a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f7fd fff4 	bl	800387c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2202      	movs	r2, #2
 8005898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	3304      	adds	r3, #4
 80058a4:	4619      	mov	r1, r3
 80058a6:	4610      	mov	r0, r2
 80058a8:	f000 fabe 	bl	8005e28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058fc:	2300      	movs	r3, #0
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3708      	adds	r7, #8
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
	...

08005908 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b084      	sub	sp, #16
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d109      	bne.n	800592c <HAL_TIM_PWM_Start+0x24>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800591e:	b2db      	uxtb	r3, r3
 8005920:	2b01      	cmp	r3, #1
 8005922:	bf14      	ite	ne
 8005924:	2301      	movne	r3, #1
 8005926:	2300      	moveq	r3, #0
 8005928:	b2db      	uxtb	r3, r3
 800592a:	e022      	b.n	8005972 <HAL_TIM_PWM_Start+0x6a>
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	2b04      	cmp	r3, #4
 8005930:	d109      	bne.n	8005946 <HAL_TIM_PWM_Start+0x3e>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005938:	b2db      	uxtb	r3, r3
 800593a:	2b01      	cmp	r3, #1
 800593c:	bf14      	ite	ne
 800593e:	2301      	movne	r3, #1
 8005940:	2300      	moveq	r3, #0
 8005942:	b2db      	uxtb	r3, r3
 8005944:	e015      	b.n	8005972 <HAL_TIM_PWM_Start+0x6a>
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	2b08      	cmp	r3, #8
 800594a:	d109      	bne.n	8005960 <HAL_TIM_PWM_Start+0x58>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005952:	b2db      	uxtb	r3, r3
 8005954:	2b01      	cmp	r3, #1
 8005956:	bf14      	ite	ne
 8005958:	2301      	movne	r3, #1
 800595a:	2300      	moveq	r3, #0
 800595c:	b2db      	uxtb	r3, r3
 800595e:	e008      	b.n	8005972 <HAL_TIM_PWM_Start+0x6a>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005966:	b2db      	uxtb	r3, r3
 8005968:	2b01      	cmp	r3, #1
 800596a:	bf14      	ite	ne
 800596c:	2301      	movne	r3, #1
 800596e:	2300      	moveq	r3, #0
 8005970:	b2db      	uxtb	r3, r3
 8005972:	2b00      	cmp	r3, #0
 8005974:	d001      	beq.n	800597a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e05e      	b.n	8005a38 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d104      	bne.n	800598a <HAL_TIM_PWM_Start+0x82>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2202      	movs	r2, #2
 8005984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005988:	e013      	b.n	80059b2 <HAL_TIM_PWM_Start+0xaa>
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	2b04      	cmp	r3, #4
 800598e:	d104      	bne.n	800599a <HAL_TIM_PWM_Start+0x92>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2202      	movs	r2, #2
 8005994:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005998:	e00b      	b.n	80059b2 <HAL_TIM_PWM_Start+0xaa>
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	2b08      	cmp	r3, #8
 800599e:	d104      	bne.n	80059aa <HAL_TIM_PWM_Start+0xa2>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2202      	movs	r2, #2
 80059a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059a8:	e003      	b.n	80059b2 <HAL_TIM_PWM_Start+0xaa>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2202      	movs	r2, #2
 80059ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	2201      	movs	r2, #1
 80059b8:	6839      	ldr	r1, [r7, #0]
 80059ba:	4618      	mov	r0, r3
 80059bc:	f000 fc1e 	bl	80061fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a1e      	ldr	r2, [pc, #120]	; (8005a40 <HAL_TIM_PWM_Start+0x138>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d107      	bne.n	80059da <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80059d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a18      	ldr	r2, [pc, #96]	; (8005a40 <HAL_TIM_PWM_Start+0x138>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d00e      	beq.n	8005a02 <HAL_TIM_PWM_Start+0xfa>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059ec:	d009      	beq.n	8005a02 <HAL_TIM_PWM_Start+0xfa>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a14      	ldr	r2, [pc, #80]	; (8005a44 <HAL_TIM_PWM_Start+0x13c>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d004      	beq.n	8005a02 <HAL_TIM_PWM_Start+0xfa>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a12      	ldr	r2, [pc, #72]	; (8005a48 <HAL_TIM_PWM_Start+0x140>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d111      	bne.n	8005a26 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	f003 0307 	and.w	r3, r3, #7
 8005a0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2b06      	cmp	r3, #6
 8005a12:	d010      	beq.n	8005a36 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f042 0201 	orr.w	r2, r2, #1
 8005a22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a24:	e007      	b.n	8005a36 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f042 0201 	orr.w	r2, r2, #1
 8005a34:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a36:	2300      	movs	r3, #0
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3710      	adds	r7, #16
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}
 8005a40:	40012c00 	.word	0x40012c00
 8005a44:	40000400 	.word	0x40000400
 8005a48:	40000800 	.word	0x40000800

08005a4c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b086      	sub	sp, #24
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d101      	bne.n	8005a60 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e093      	b.n	8005b88 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a66:	b2db      	uxtb	r3, r3
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d106      	bne.n	8005a7a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f7fd ff1d 	bl	80038b4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2202      	movs	r2, #2
 8005a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	6812      	ldr	r2, [r2, #0]
 8005a8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a90:	f023 0307 	bic.w	r3, r3, #7
 8005a94:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	3304      	adds	r3, #4
 8005a9e:	4619      	mov	r1, r3
 8005aa0:	4610      	mov	r0, r2
 8005aa2:	f000 f9c1 	bl	8005e28 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	699b      	ldr	r3, [r3, #24]
 8005ab4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	6a1b      	ldr	r3, [r3, #32]
 8005abc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	697a      	ldr	r2, [r7, #20]
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ace:	f023 0303 	bic.w	r3, r3, #3
 8005ad2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	689a      	ldr	r2, [r3, #8]
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	699b      	ldr	r3, [r3, #24]
 8005adc:	021b      	lsls	r3, r3, #8
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	693a      	ldr	r2, [r7, #16]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005aec:	f023 030c 	bic.w	r3, r3, #12
 8005af0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005af8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005afc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	68da      	ldr	r2, [r3, #12]
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	69db      	ldr	r3, [r3, #28]
 8005b06:	021b      	lsls	r3, r3, #8
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	693a      	ldr	r2, [r7, #16]
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	691b      	ldr	r3, [r3, #16]
 8005b14:	011a      	lsls	r2, r3, #4
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	6a1b      	ldr	r3, [r3, #32]
 8005b1a:	031b      	lsls	r3, r3, #12
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	693a      	ldr	r2, [r7, #16]
 8005b20:	4313      	orrs	r3, r2
 8005b22:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005b2a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	685a      	ldr	r2, [r3, #4]
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	695b      	ldr	r3, [r3, #20]
 8005b34:	011b      	lsls	r3, r3, #4
 8005b36:	4313      	orrs	r3, r2
 8005b38:	68fa      	ldr	r2, [r7, #12]
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	697a      	ldr	r2, [r7, #20]
 8005b44:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	693a      	ldr	r2, [r7, #16]
 8005b4c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	68fa      	ldr	r2, [r7, #12]
 8005b54:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2201      	movs	r2, #1
 8005b5a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2201      	movs	r2, #1
 8005b62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2201      	movs	r2, #1
 8005b6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2201      	movs	r2, #1
 8005b72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2201      	movs	r2, #1
 8005b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b86:	2300      	movs	r3, #0
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3718      	adds	r7, #24
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b084      	sub	sp, #16
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ba0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005ba8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005bb0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005bb8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d110      	bne.n	8005be2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005bc0:	7bfb      	ldrb	r3, [r7, #15]
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d102      	bne.n	8005bcc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005bc6:	7b7b      	ldrb	r3, [r7, #13]
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d001      	beq.n	8005bd0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e069      	b.n	8005ca4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2202      	movs	r2, #2
 8005bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2202      	movs	r2, #2
 8005bdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005be0:	e031      	b.n	8005c46 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	2b04      	cmp	r3, #4
 8005be6:	d110      	bne.n	8005c0a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005be8:	7bbb      	ldrb	r3, [r7, #14]
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d102      	bne.n	8005bf4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005bee:	7b3b      	ldrb	r3, [r7, #12]
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d001      	beq.n	8005bf8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e055      	b.n	8005ca4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2202      	movs	r2, #2
 8005bfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2202      	movs	r2, #2
 8005c04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c08:	e01d      	b.n	8005c46 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c0a:	7bfb      	ldrb	r3, [r7, #15]
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d108      	bne.n	8005c22 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c10:	7bbb      	ldrb	r3, [r7, #14]
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	d105      	bne.n	8005c22 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c16:	7b7b      	ldrb	r3, [r7, #13]
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d102      	bne.n	8005c22 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005c1c:	7b3b      	ldrb	r3, [r7, #12]
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d001      	beq.n	8005c26 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	e03e      	b.n	8005ca4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2202      	movs	r2, #2
 8005c2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2202      	movs	r2, #2
 8005c32:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2202      	movs	r2, #2
 8005c3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2202      	movs	r2, #2
 8005c42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d003      	beq.n	8005c54 <HAL_TIM_Encoder_Start+0xc4>
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	2b04      	cmp	r3, #4
 8005c50:	d008      	beq.n	8005c64 <HAL_TIM_Encoder_Start+0xd4>
 8005c52:	e00f      	b.n	8005c74 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	2201      	movs	r2, #1
 8005c5a:	2100      	movs	r1, #0
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f000 facd 	bl	80061fc <TIM_CCxChannelCmd>
      break;
 8005c62:	e016      	b.n	8005c92 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2201      	movs	r2, #1
 8005c6a:	2104      	movs	r1, #4
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f000 fac5 	bl	80061fc <TIM_CCxChannelCmd>
      break;
 8005c72:	e00e      	b.n	8005c92 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	2201      	movs	r2, #1
 8005c7a:	2100      	movs	r1, #0
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f000 fabd 	bl	80061fc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	2201      	movs	r2, #1
 8005c88:	2104      	movs	r1, #4
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f000 fab6 	bl	80061fc <TIM_CCxChannelCmd>
      break;
 8005c90:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f042 0201 	orr.w	r2, r2, #1
 8005ca0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005ca2:	2300      	movs	r3, #0
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3710      	adds	r7, #16
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}

08005cac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b084      	sub	sp, #16
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	60f8      	str	r0, [r7, #12]
 8005cb4:	60b9      	str	r1, [r7, #8]
 8005cb6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d101      	bne.n	8005cc6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005cc2:	2302      	movs	r3, #2
 8005cc4:	e0ac      	b.n	8005e20 <HAL_TIM_PWM_ConfigChannel+0x174>
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2201      	movs	r2, #1
 8005cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2b0c      	cmp	r3, #12
 8005cd2:	f200 809f 	bhi.w	8005e14 <HAL_TIM_PWM_ConfigChannel+0x168>
 8005cd6:	a201      	add	r2, pc, #4	; (adr r2, 8005cdc <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cdc:	08005d11 	.word	0x08005d11
 8005ce0:	08005e15 	.word	0x08005e15
 8005ce4:	08005e15 	.word	0x08005e15
 8005ce8:	08005e15 	.word	0x08005e15
 8005cec:	08005d51 	.word	0x08005d51
 8005cf0:	08005e15 	.word	0x08005e15
 8005cf4:	08005e15 	.word	0x08005e15
 8005cf8:	08005e15 	.word	0x08005e15
 8005cfc:	08005d93 	.word	0x08005d93
 8005d00:	08005e15 	.word	0x08005e15
 8005d04:	08005e15 	.word	0x08005e15
 8005d08:	08005e15 	.word	0x08005e15
 8005d0c:	08005dd3 	.word	0x08005dd3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	68b9      	ldr	r1, [r7, #8]
 8005d16:	4618      	mov	r0, r3
 8005d18:	f000 f8e8 	bl	8005eec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	699a      	ldr	r2, [r3, #24]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f042 0208 	orr.w	r2, r2, #8
 8005d2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	699a      	ldr	r2, [r3, #24]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f022 0204 	bic.w	r2, r2, #4
 8005d3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	6999      	ldr	r1, [r3, #24]
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	691a      	ldr	r2, [r3, #16]
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	430a      	orrs	r2, r1
 8005d4c:	619a      	str	r2, [r3, #24]
      break;
 8005d4e:	e062      	b.n	8005e16 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	68b9      	ldr	r1, [r7, #8]
 8005d56:	4618      	mov	r0, r3
 8005d58:	f000 f92e 	bl	8005fb8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	699a      	ldr	r2, [r3, #24]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	699a      	ldr	r2, [r3, #24]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	6999      	ldr	r1, [r3, #24]
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	691b      	ldr	r3, [r3, #16]
 8005d86:	021a      	lsls	r2, r3, #8
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	430a      	orrs	r2, r1
 8005d8e:	619a      	str	r2, [r3, #24]
      break;
 8005d90:	e041      	b.n	8005e16 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	68b9      	ldr	r1, [r7, #8]
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f000 f977 	bl	800608c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	69da      	ldr	r2, [r3, #28]
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f042 0208 	orr.w	r2, r2, #8
 8005dac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	69da      	ldr	r2, [r3, #28]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f022 0204 	bic.w	r2, r2, #4
 8005dbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	69d9      	ldr	r1, [r3, #28]
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	691a      	ldr	r2, [r3, #16]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	430a      	orrs	r2, r1
 8005dce:	61da      	str	r2, [r3, #28]
      break;
 8005dd0:	e021      	b.n	8005e16 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	68b9      	ldr	r1, [r7, #8]
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f000 f9c1 	bl	8006160 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	69da      	ldr	r2, [r3, #28]
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005dec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	69da      	ldr	r2, [r3, #28]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	69d9      	ldr	r1, [r3, #28]
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	691b      	ldr	r3, [r3, #16]
 8005e08:	021a      	lsls	r2, r3, #8
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	430a      	orrs	r2, r1
 8005e10:	61da      	str	r2, [r3, #28]
      break;
 8005e12:	e000      	b.n	8005e16 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005e14:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e1e:	2300      	movs	r3, #0
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3710      	adds	r7, #16
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}

08005e28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b085      	sub	sp, #20
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	4a29      	ldr	r2, [pc, #164]	; (8005ee0 <TIM_Base_SetConfig+0xb8>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d00b      	beq.n	8005e58 <TIM_Base_SetConfig+0x30>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e46:	d007      	beq.n	8005e58 <TIM_Base_SetConfig+0x30>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	4a26      	ldr	r2, [pc, #152]	; (8005ee4 <TIM_Base_SetConfig+0xbc>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d003      	beq.n	8005e58 <TIM_Base_SetConfig+0x30>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	4a25      	ldr	r2, [pc, #148]	; (8005ee8 <TIM_Base_SetConfig+0xc0>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d108      	bne.n	8005e6a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	4313      	orrs	r3, r2
 8005e68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4a1c      	ldr	r2, [pc, #112]	; (8005ee0 <TIM_Base_SetConfig+0xb8>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d00b      	beq.n	8005e8a <TIM_Base_SetConfig+0x62>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e78:	d007      	beq.n	8005e8a <TIM_Base_SetConfig+0x62>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4a19      	ldr	r2, [pc, #100]	; (8005ee4 <TIM_Base_SetConfig+0xbc>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d003      	beq.n	8005e8a <TIM_Base_SetConfig+0x62>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	4a18      	ldr	r2, [pc, #96]	; (8005ee8 <TIM_Base_SetConfig+0xc0>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d108      	bne.n	8005e9c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	68db      	ldr	r3, [r3, #12]
 8005e96:	68fa      	ldr	r2, [r7, #12]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	695b      	ldr	r3, [r3, #20]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	68fa      	ldr	r2, [r7, #12]
 8005eae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	689a      	ldr	r2, [r3, #8]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	4a07      	ldr	r2, [pc, #28]	; (8005ee0 <TIM_Base_SetConfig+0xb8>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d103      	bne.n	8005ed0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	691a      	ldr	r2, [r3, #16]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	615a      	str	r2, [r3, #20]
}
 8005ed6:	bf00      	nop
 8005ed8:	3714      	adds	r7, #20
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bc80      	pop	{r7}
 8005ede:	4770      	bx	lr
 8005ee0:	40012c00 	.word	0x40012c00
 8005ee4:	40000400 	.word	0x40000400
 8005ee8:	40000800 	.word	0x40000800

08005eec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b087      	sub	sp, #28
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6a1b      	ldr	r3, [r3, #32]
 8005efa:	f023 0201 	bic.w	r2, r3, #1
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6a1b      	ldr	r3, [r3, #32]
 8005f06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	699b      	ldr	r3, [r3, #24]
 8005f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f023 0303 	bic.w	r3, r3, #3
 8005f22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	68fa      	ldr	r2, [r7, #12]
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	f023 0302 	bic.w	r3, r3, #2
 8005f34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	697a      	ldr	r2, [r7, #20]
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	4a1c      	ldr	r2, [pc, #112]	; (8005fb4 <TIM_OC1_SetConfig+0xc8>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d10c      	bne.n	8005f62 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	f023 0308 	bic.w	r3, r3, #8
 8005f4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	68db      	ldr	r3, [r3, #12]
 8005f54:	697a      	ldr	r2, [r7, #20]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	f023 0304 	bic.w	r3, r3, #4
 8005f60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	4a13      	ldr	r2, [pc, #76]	; (8005fb4 <TIM_OC1_SetConfig+0xc8>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d111      	bne.n	8005f8e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	695b      	ldr	r3, [r3, #20]
 8005f7e:	693a      	ldr	r2, [r7, #16]
 8005f80:	4313      	orrs	r3, r2
 8005f82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	699b      	ldr	r3, [r3, #24]
 8005f88:	693a      	ldr	r2, [r7, #16]
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	693a      	ldr	r2, [r7, #16]
 8005f92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	68fa      	ldr	r2, [r7, #12]
 8005f98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	685a      	ldr	r2, [r3, #4]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	697a      	ldr	r2, [r7, #20]
 8005fa6:	621a      	str	r2, [r3, #32]
}
 8005fa8:	bf00      	nop
 8005faa:	371c      	adds	r7, #28
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bc80      	pop	{r7}
 8005fb0:	4770      	bx	lr
 8005fb2:	bf00      	nop
 8005fb4:	40012c00 	.word	0x40012c00

08005fb8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b087      	sub	sp, #28
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6a1b      	ldr	r3, [r3, #32]
 8005fc6:	f023 0210 	bic.w	r2, r3, #16
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6a1b      	ldr	r3, [r3, #32]
 8005fd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	699b      	ldr	r3, [r3, #24]
 8005fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fe6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	021b      	lsls	r3, r3, #8
 8005ff6:	68fa      	ldr	r2, [r7, #12]
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	f023 0320 	bic.w	r3, r3, #32
 8006002:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	011b      	lsls	r3, r3, #4
 800600a:	697a      	ldr	r2, [r7, #20]
 800600c:	4313      	orrs	r3, r2
 800600e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	4a1d      	ldr	r2, [pc, #116]	; (8006088 <TIM_OC2_SetConfig+0xd0>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d10d      	bne.n	8006034 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800601e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	011b      	lsls	r3, r3, #4
 8006026:	697a      	ldr	r2, [r7, #20]
 8006028:	4313      	orrs	r3, r2
 800602a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006032:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	4a14      	ldr	r2, [pc, #80]	; (8006088 <TIM_OC2_SetConfig+0xd0>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d113      	bne.n	8006064 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006042:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800604a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	695b      	ldr	r3, [r3, #20]
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	693a      	ldr	r2, [r7, #16]
 8006054:	4313      	orrs	r3, r2
 8006056:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	699b      	ldr	r3, [r3, #24]
 800605c:	009b      	lsls	r3, r3, #2
 800605e:	693a      	ldr	r2, [r7, #16]
 8006060:	4313      	orrs	r3, r2
 8006062:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	693a      	ldr	r2, [r7, #16]
 8006068:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	68fa      	ldr	r2, [r7, #12]
 800606e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	685a      	ldr	r2, [r3, #4]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	697a      	ldr	r2, [r7, #20]
 800607c:	621a      	str	r2, [r3, #32]
}
 800607e:	bf00      	nop
 8006080:	371c      	adds	r7, #28
 8006082:	46bd      	mov	sp, r7
 8006084:	bc80      	pop	{r7}
 8006086:	4770      	bx	lr
 8006088:	40012c00 	.word	0x40012c00

0800608c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800608c:	b480      	push	{r7}
 800608e:	b087      	sub	sp, #28
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6a1b      	ldr	r3, [r3, #32]
 800609a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6a1b      	ldr	r3, [r3, #32]
 80060a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	69db      	ldr	r3, [r3, #28]
 80060b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f023 0303 	bic.w	r3, r3, #3
 80060c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	68fa      	ldr	r2, [r7, #12]
 80060ca:	4313      	orrs	r3, r2
 80060cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80060d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	021b      	lsls	r3, r3, #8
 80060dc:	697a      	ldr	r2, [r7, #20]
 80060de:	4313      	orrs	r3, r2
 80060e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	4a1d      	ldr	r2, [pc, #116]	; (800615c <TIM_OC3_SetConfig+0xd0>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d10d      	bne.n	8006106 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80060f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	68db      	ldr	r3, [r3, #12]
 80060f6:	021b      	lsls	r3, r3, #8
 80060f8:	697a      	ldr	r2, [r7, #20]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006104:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	4a14      	ldr	r2, [pc, #80]	; (800615c <TIM_OC3_SetConfig+0xd0>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d113      	bne.n	8006136 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006114:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800611c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	695b      	ldr	r3, [r3, #20]
 8006122:	011b      	lsls	r3, r3, #4
 8006124:	693a      	ldr	r2, [r7, #16]
 8006126:	4313      	orrs	r3, r2
 8006128:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	699b      	ldr	r3, [r3, #24]
 800612e:	011b      	lsls	r3, r3, #4
 8006130:	693a      	ldr	r2, [r7, #16]
 8006132:	4313      	orrs	r3, r2
 8006134:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	693a      	ldr	r2, [r7, #16]
 800613a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	68fa      	ldr	r2, [r7, #12]
 8006140:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	685a      	ldr	r2, [r3, #4]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	697a      	ldr	r2, [r7, #20]
 800614e:	621a      	str	r2, [r3, #32]
}
 8006150:	bf00      	nop
 8006152:	371c      	adds	r7, #28
 8006154:	46bd      	mov	sp, r7
 8006156:	bc80      	pop	{r7}
 8006158:	4770      	bx	lr
 800615a:	bf00      	nop
 800615c:	40012c00 	.word	0x40012c00

08006160 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006160:	b480      	push	{r7}
 8006162:	b087      	sub	sp, #28
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6a1b      	ldr	r3, [r3, #32]
 800616e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6a1b      	ldr	r3, [r3, #32]
 800617a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	69db      	ldr	r3, [r3, #28]
 8006186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800618e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006196:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	021b      	lsls	r3, r3, #8
 800619e:	68fa      	ldr	r2, [r7, #12]
 80061a0:	4313      	orrs	r3, r2
 80061a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80061aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	031b      	lsls	r3, r3, #12
 80061b2:	693a      	ldr	r2, [r7, #16]
 80061b4:	4313      	orrs	r3, r2
 80061b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	4a0f      	ldr	r2, [pc, #60]	; (80061f8 <TIM_OC4_SetConfig+0x98>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d109      	bne.n	80061d4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	695b      	ldr	r3, [r3, #20]
 80061cc:	019b      	lsls	r3, r3, #6
 80061ce:	697a      	ldr	r2, [r7, #20]
 80061d0:	4313      	orrs	r3, r2
 80061d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	697a      	ldr	r2, [r7, #20]
 80061d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	68fa      	ldr	r2, [r7, #12]
 80061de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	685a      	ldr	r2, [r3, #4]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	693a      	ldr	r2, [r7, #16]
 80061ec:	621a      	str	r2, [r3, #32]
}
 80061ee:	bf00      	nop
 80061f0:	371c      	adds	r7, #28
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bc80      	pop	{r7}
 80061f6:	4770      	bx	lr
 80061f8:	40012c00 	.word	0x40012c00

080061fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b087      	sub	sp, #28
 8006200:	af00      	add	r7, sp, #0
 8006202:	60f8      	str	r0, [r7, #12]
 8006204:	60b9      	str	r1, [r7, #8]
 8006206:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	f003 031f 	and.w	r3, r3, #31
 800620e:	2201      	movs	r2, #1
 8006210:	fa02 f303 	lsl.w	r3, r2, r3
 8006214:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	6a1a      	ldr	r2, [r3, #32]
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	43db      	mvns	r3, r3
 800621e:	401a      	ands	r2, r3
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	6a1a      	ldr	r2, [r3, #32]
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	f003 031f 	and.w	r3, r3, #31
 800622e:	6879      	ldr	r1, [r7, #4]
 8006230:	fa01 f303 	lsl.w	r3, r1, r3
 8006234:	431a      	orrs	r2, r3
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	621a      	str	r2, [r3, #32]
}
 800623a:	bf00      	nop
 800623c:	371c      	adds	r7, #28
 800623e:	46bd      	mov	sp, r7
 8006240:	bc80      	pop	{r7}
 8006242:	4770      	bx	lr

08006244 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006244:	b480      	push	{r7}
 8006246:	b085      	sub	sp, #20
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006254:	2b01      	cmp	r3, #1
 8006256:	d101      	bne.n	800625c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006258:	2302      	movs	r3, #2
 800625a:	e046      	b.n	80062ea <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2201      	movs	r2, #1
 8006260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2202      	movs	r2, #2
 8006268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006282:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	68fa      	ldr	r2, [r7, #12]
 800628a:	4313      	orrs	r3, r2
 800628c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	68fa      	ldr	r2, [r7, #12]
 8006294:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a16      	ldr	r2, [pc, #88]	; (80062f4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d00e      	beq.n	80062be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062a8:	d009      	beq.n	80062be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a12      	ldr	r2, [pc, #72]	; (80062f8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d004      	beq.n	80062be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a10      	ldr	r2, [pc, #64]	; (80062fc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d10c      	bne.n	80062d8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	68ba      	ldr	r2, [r7, #8]
 80062cc:	4313      	orrs	r3, r2
 80062ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	68ba      	ldr	r2, [r7, #8]
 80062d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2201      	movs	r2, #1
 80062dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062e8:	2300      	movs	r3, #0
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3714      	adds	r7, #20
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bc80      	pop	{r7}
 80062f2:	4770      	bx	lr
 80062f4:	40012c00 	.word	0x40012c00
 80062f8:	40000400 	.word	0x40000400
 80062fc:	40000800 	.word	0x40000800

08006300 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b082      	sub	sp, #8
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d101      	bne.n	8006312 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	e03f      	b.n	8006392 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006318:	b2db      	uxtb	r3, r3
 800631a:	2b00      	cmp	r3, #0
 800631c:	d106      	bne.n	800632c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2200      	movs	r2, #0
 8006322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f7fd fbac 	bl	8003a84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2224      	movs	r2, #36	; 0x24
 8006330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	68da      	ldr	r2, [r3, #12]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006342:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f000 fc25 	bl	8006b94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	691a      	ldr	r2, [r3, #16]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006358:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	695a      	ldr	r2, [r3, #20]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006368:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	68da      	ldr	r2, [r3, #12]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006378:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2200      	movs	r2, #0
 800637e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2220      	movs	r2, #32
 8006384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2220      	movs	r2, #32
 800638c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006390:	2300      	movs	r3, #0
}
 8006392:	4618      	mov	r0, r3
 8006394:	3708      	adds	r7, #8
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}

0800639a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800639a:	b580      	push	{r7, lr}
 800639c:	b08a      	sub	sp, #40	; 0x28
 800639e:	af02      	add	r7, sp, #8
 80063a0:	60f8      	str	r0, [r7, #12]
 80063a2:	60b9      	str	r1, [r7, #8]
 80063a4:	603b      	str	r3, [r7, #0]
 80063a6:	4613      	mov	r3, r2
 80063a8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80063aa:	2300      	movs	r3, #0
 80063ac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	2b20      	cmp	r3, #32
 80063b8:	d17c      	bne.n	80064b4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d002      	beq.n	80063c6 <HAL_UART_Transmit+0x2c>
 80063c0:	88fb      	ldrh	r3, [r7, #6]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d101      	bne.n	80063ca <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	e075      	b.n	80064b6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d101      	bne.n	80063d8 <HAL_UART_Transmit+0x3e>
 80063d4:	2302      	movs	r3, #2
 80063d6:	e06e      	b.n	80064b6 <HAL_UART_Transmit+0x11c>
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2201      	movs	r2, #1
 80063dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2200      	movs	r2, #0
 80063e4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2221      	movs	r2, #33	; 0x21
 80063ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80063ee:	f7fd fc1b 	bl	8003c28 <HAL_GetTick>
 80063f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	88fa      	ldrh	r2, [r7, #6]
 80063f8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	88fa      	ldrh	r2, [r7, #6]
 80063fe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006408:	d108      	bne.n	800641c <HAL_UART_Transmit+0x82>
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	691b      	ldr	r3, [r3, #16]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d104      	bne.n	800641c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006412:	2300      	movs	r3, #0
 8006414:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	61bb      	str	r3, [r7, #24]
 800641a:	e003      	b.n	8006424 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006420:	2300      	movs	r3, #0
 8006422:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2200      	movs	r2, #0
 8006428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800642c:	e02a      	b.n	8006484 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	9300      	str	r3, [sp, #0]
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	2200      	movs	r2, #0
 8006436:	2180      	movs	r1, #128	; 0x80
 8006438:	68f8      	ldr	r0, [r7, #12]
 800643a:	f000 fa11 	bl	8006860 <UART_WaitOnFlagUntilTimeout>
 800643e:	4603      	mov	r3, r0
 8006440:	2b00      	cmp	r3, #0
 8006442:	d001      	beq.n	8006448 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006444:	2303      	movs	r3, #3
 8006446:	e036      	b.n	80064b6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006448:	69fb      	ldr	r3, [r7, #28]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d10b      	bne.n	8006466 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800644e:	69bb      	ldr	r3, [r7, #24]
 8006450:	881b      	ldrh	r3, [r3, #0]
 8006452:	461a      	mov	r2, r3
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800645c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800645e:	69bb      	ldr	r3, [r7, #24]
 8006460:	3302      	adds	r3, #2
 8006462:	61bb      	str	r3, [r7, #24]
 8006464:	e007      	b.n	8006476 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	781a      	ldrb	r2, [r3, #0]
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006470:	69fb      	ldr	r3, [r7, #28]
 8006472:	3301      	adds	r3, #1
 8006474:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800647a:	b29b      	uxth	r3, r3
 800647c:	3b01      	subs	r3, #1
 800647e:	b29a      	uxth	r2, r3
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006488:	b29b      	uxth	r3, r3
 800648a:	2b00      	cmp	r3, #0
 800648c:	d1cf      	bne.n	800642e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	9300      	str	r3, [sp, #0]
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	2200      	movs	r2, #0
 8006496:	2140      	movs	r1, #64	; 0x40
 8006498:	68f8      	ldr	r0, [r7, #12]
 800649a:	f000 f9e1 	bl	8006860 <UART_WaitOnFlagUntilTimeout>
 800649e:	4603      	mov	r3, r0
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d001      	beq.n	80064a8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80064a4:	2303      	movs	r3, #3
 80064a6:	e006      	b.n	80064b6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2220      	movs	r2, #32
 80064ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80064b0:	2300      	movs	r3, #0
 80064b2:	e000      	b.n	80064b6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80064b4:	2302      	movs	r3, #2
  }
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3720      	adds	r7, #32
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
	...

080064c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b08a      	sub	sp, #40	; 0x28
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	695b      	ldr	r3, [r3, #20]
 80064de:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80064e0:	2300      	movs	r3, #0
 80064e2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80064e4:	2300      	movs	r3, #0
 80064e6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80064e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ea:	f003 030f 	and.w	r3, r3, #15
 80064ee:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80064f0:	69bb      	ldr	r3, [r7, #24]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d10d      	bne.n	8006512 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80064f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f8:	f003 0320 	and.w	r3, r3, #32
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d008      	beq.n	8006512 <HAL_UART_IRQHandler+0x52>
 8006500:	6a3b      	ldr	r3, [r7, #32]
 8006502:	f003 0320 	and.w	r3, r3, #32
 8006506:	2b00      	cmp	r3, #0
 8006508:	d003      	beq.n	8006512 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f000 fa99 	bl	8006a42 <UART_Receive_IT>
      return;
 8006510:	e17b      	b.n	800680a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006512:	69bb      	ldr	r3, [r7, #24]
 8006514:	2b00      	cmp	r3, #0
 8006516:	f000 80b1 	beq.w	800667c <HAL_UART_IRQHandler+0x1bc>
 800651a:	69fb      	ldr	r3, [r7, #28]
 800651c:	f003 0301 	and.w	r3, r3, #1
 8006520:	2b00      	cmp	r3, #0
 8006522:	d105      	bne.n	8006530 <HAL_UART_IRQHandler+0x70>
 8006524:	6a3b      	ldr	r3, [r7, #32]
 8006526:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800652a:	2b00      	cmp	r3, #0
 800652c:	f000 80a6 	beq.w	800667c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006532:	f003 0301 	and.w	r3, r3, #1
 8006536:	2b00      	cmp	r3, #0
 8006538:	d00a      	beq.n	8006550 <HAL_UART_IRQHandler+0x90>
 800653a:	6a3b      	ldr	r3, [r7, #32]
 800653c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006540:	2b00      	cmp	r3, #0
 8006542:	d005      	beq.n	8006550 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006548:	f043 0201 	orr.w	r2, r3, #1
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006552:	f003 0304 	and.w	r3, r3, #4
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00a      	beq.n	8006570 <HAL_UART_IRQHandler+0xb0>
 800655a:	69fb      	ldr	r3, [r7, #28]
 800655c:	f003 0301 	and.w	r3, r3, #1
 8006560:	2b00      	cmp	r3, #0
 8006562:	d005      	beq.n	8006570 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006568:	f043 0202 	orr.w	r2, r3, #2
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006572:	f003 0302 	and.w	r3, r3, #2
 8006576:	2b00      	cmp	r3, #0
 8006578:	d00a      	beq.n	8006590 <HAL_UART_IRQHandler+0xd0>
 800657a:	69fb      	ldr	r3, [r7, #28]
 800657c:	f003 0301 	and.w	r3, r3, #1
 8006580:	2b00      	cmp	r3, #0
 8006582:	d005      	beq.n	8006590 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006588:	f043 0204 	orr.w	r2, r3, #4
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006592:	f003 0308 	and.w	r3, r3, #8
 8006596:	2b00      	cmp	r3, #0
 8006598:	d00f      	beq.n	80065ba <HAL_UART_IRQHandler+0xfa>
 800659a:	6a3b      	ldr	r3, [r7, #32]
 800659c:	f003 0320 	and.w	r3, r3, #32
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d104      	bne.n	80065ae <HAL_UART_IRQHandler+0xee>
 80065a4:	69fb      	ldr	r3, [r7, #28]
 80065a6:	f003 0301 	and.w	r3, r3, #1
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d005      	beq.n	80065ba <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b2:	f043 0208 	orr.w	r2, r3, #8
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065be:	2b00      	cmp	r3, #0
 80065c0:	f000 811e 	beq.w	8006800 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80065c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c6:	f003 0320 	and.w	r3, r3, #32
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d007      	beq.n	80065de <HAL_UART_IRQHandler+0x11e>
 80065ce:	6a3b      	ldr	r3, [r7, #32]
 80065d0:	f003 0320 	and.w	r3, r3, #32
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d002      	beq.n	80065de <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f000 fa32 	bl	8006a42 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	695b      	ldr	r3, [r3, #20]
 80065e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	bf14      	ite	ne
 80065ec:	2301      	movne	r3, #1
 80065ee:	2300      	moveq	r3, #0
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f8:	f003 0308 	and.w	r3, r3, #8
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d102      	bne.n	8006606 <HAL_UART_IRQHandler+0x146>
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d031      	beq.n	800666a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 f974 	bl	80068f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	695b      	ldr	r3, [r3, #20]
 8006612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006616:	2b00      	cmp	r3, #0
 8006618:	d023      	beq.n	8006662 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	695a      	ldr	r2, [r3, #20]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006628:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800662e:	2b00      	cmp	r3, #0
 8006630:	d013      	beq.n	800665a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006636:	4a76      	ldr	r2, [pc, #472]	; (8006810 <HAL_UART_IRQHandler+0x350>)
 8006638:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800663e:	4618      	mov	r0, r3
 8006640:	f7fe f8e4 	bl	800480c <HAL_DMA_Abort_IT>
 8006644:	4603      	mov	r3, r0
 8006646:	2b00      	cmp	r3, #0
 8006648:	d016      	beq.n	8006678 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800664e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006650:	687a      	ldr	r2, [r7, #4]
 8006652:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006654:	4610      	mov	r0, r2
 8006656:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006658:	e00e      	b.n	8006678 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f000 f8ec 	bl	8006838 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006660:	e00a      	b.n	8006678 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f000 f8e8 	bl	8006838 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006668:	e006      	b.n	8006678 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f000 f8e4 	bl	8006838 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2200      	movs	r2, #0
 8006674:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006676:	e0c3      	b.n	8006800 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006678:	bf00      	nop
    return;
 800667a:	e0c1      	b.n	8006800 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006680:	2b01      	cmp	r3, #1
 8006682:	f040 80a1 	bne.w	80067c8 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8006686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006688:	f003 0310 	and.w	r3, r3, #16
 800668c:	2b00      	cmp	r3, #0
 800668e:	f000 809b 	beq.w	80067c8 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8006692:	6a3b      	ldr	r3, [r7, #32]
 8006694:	f003 0310 	and.w	r3, r3, #16
 8006698:	2b00      	cmp	r3, #0
 800669a:	f000 8095 	beq.w	80067c8 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800669e:	2300      	movs	r3, #0
 80066a0:	60fb      	str	r3, [r7, #12]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	60fb      	str	r3, [r7, #12]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	60fb      	str	r3, [r7, #12]
 80066b2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	695b      	ldr	r3, [r3, #20]
 80066ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d04e      	beq.n	8006760 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80066cc:	8a3b      	ldrh	r3, [r7, #16]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	f000 8098 	beq.w	8006804 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80066d8:	8a3a      	ldrh	r2, [r7, #16]
 80066da:	429a      	cmp	r2, r3
 80066dc:	f080 8092 	bcs.w	8006804 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	8a3a      	ldrh	r2, [r7, #16]
 80066e4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ea:	699b      	ldr	r3, [r3, #24]
 80066ec:	2b20      	cmp	r3, #32
 80066ee:	d02b      	beq.n	8006748 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	68da      	ldr	r2, [r3, #12]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80066fe:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	695a      	ldr	r2, [r3, #20]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f022 0201 	bic.w	r2, r2, #1
 800670e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	695a      	ldr	r2, [r3, #20]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800671e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2220      	movs	r2, #32
 8006724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	68da      	ldr	r2, [r3, #12]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f022 0210 	bic.w	r2, r2, #16
 800673c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006742:	4618      	mov	r0, r3
 8006744:	f7fe f827 	bl	8004796 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006750:	b29b      	uxth	r3, r3
 8006752:	1ad3      	subs	r3, r2, r3
 8006754:	b29b      	uxth	r3, r3
 8006756:	4619      	mov	r1, r3
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f000 f876 	bl	800684a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800675e:	e051      	b.n	8006804 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006768:	b29b      	uxth	r3, r3
 800676a:	1ad3      	subs	r3, r2, r3
 800676c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006772:	b29b      	uxth	r3, r3
 8006774:	2b00      	cmp	r3, #0
 8006776:	d047      	beq.n	8006808 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8006778:	8a7b      	ldrh	r3, [r7, #18]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d044      	beq.n	8006808 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	68da      	ldr	r2, [r3, #12]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800678c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	695a      	ldr	r2, [r3, #20]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f022 0201 	bic.w	r2, r2, #1
 800679c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2220      	movs	r2, #32
 80067a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2200      	movs	r2, #0
 80067aa:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	68da      	ldr	r2, [r3, #12]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f022 0210 	bic.w	r2, r2, #16
 80067ba:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80067bc:	8a7b      	ldrh	r3, [r7, #18]
 80067be:	4619      	mov	r1, r3
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f000 f842 	bl	800684a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80067c6:	e01f      	b.n	8006808 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80067c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d008      	beq.n	80067e4 <HAL_UART_IRQHandler+0x324>
 80067d2:	6a3b      	ldr	r3, [r7, #32]
 80067d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d003      	beq.n	80067e4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f000 f8c9 	bl	8006974 <UART_Transmit_IT>
    return;
 80067e2:	e012      	b.n	800680a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80067e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d00d      	beq.n	800680a <HAL_UART_IRQHandler+0x34a>
 80067ee:	6a3b      	ldr	r3, [r7, #32]
 80067f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d008      	beq.n	800680a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f000 f90a 	bl	8006a12 <UART_EndTransmit_IT>
    return;
 80067fe:	e004      	b.n	800680a <HAL_UART_IRQHandler+0x34a>
    return;
 8006800:	bf00      	nop
 8006802:	e002      	b.n	800680a <HAL_UART_IRQHandler+0x34a>
      return;
 8006804:	bf00      	nop
 8006806:	e000      	b.n	800680a <HAL_UART_IRQHandler+0x34a>
      return;
 8006808:	bf00      	nop
  }
}
 800680a:	3728      	adds	r7, #40	; 0x28
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}
 8006810:	0800694d 	.word	0x0800694d

08006814 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006814:	b480      	push	{r7}
 8006816:	b083      	sub	sp, #12
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800681c:	bf00      	nop
 800681e:	370c      	adds	r7, #12
 8006820:	46bd      	mov	sp, r7
 8006822:	bc80      	pop	{r7}
 8006824:	4770      	bx	lr

08006826 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006826:	b480      	push	{r7}
 8006828:	b083      	sub	sp, #12
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800682e:	bf00      	nop
 8006830:	370c      	adds	r7, #12
 8006832:	46bd      	mov	sp, r7
 8006834:	bc80      	pop	{r7}
 8006836:	4770      	bx	lr

08006838 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006838:	b480      	push	{r7}
 800683a:	b083      	sub	sp, #12
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006840:	bf00      	nop
 8006842:	370c      	adds	r7, #12
 8006844:	46bd      	mov	sp, r7
 8006846:	bc80      	pop	{r7}
 8006848:	4770      	bx	lr

0800684a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800684a:	b480      	push	{r7}
 800684c:	b083      	sub	sp, #12
 800684e:	af00      	add	r7, sp, #0
 8006850:	6078      	str	r0, [r7, #4]
 8006852:	460b      	mov	r3, r1
 8006854:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006856:	bf00      	nop
 8006858:	370c      	adds	r7, #12
 800685a:	46bd      	mov	sp, r7
 800685c:	bc80      	pop	{r7}
 800685e:	4770      	bx	lr

08006860 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b084      	sub	sp, #16
 8006864:	af00      	add	r7, sp, #0
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	60b9      	str	r1, [r7, #8]
 800686a:	603b      	str	r3, [r7, #0]
 800686c:	4613      	mov	r3, r2
 800686e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006870:	e02c      	b.n	80068cc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006872:	69bb      	ldr	r3, [r7, #24]
 8006874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006878:	d028      	beq.n	80068cc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800687a:	69bb      	ldr	r3, [r7, #24]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d007      	beq.n	8006890 <UART_WaitOnFlagUntilTimeout+0x30>
 8006880:	f7fd f9d2 	bl	8003c28 <HAL_GetTick>
 8006884:	4602      	mov	r2, r0
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	1ad3      	subs	r3, r2, r3
 800688a:	69ba      	ldr	r2, [r7, #24]
 800688c:	429a      	cmp	r2, r3
 800688e:	d21d      	bcs.n	80068cc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	68da      	ldr	r2, [r3, #12]
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800689e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	695a      	ldr	r2, [r3, #20]
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f022 0201 	bic.w	r2, r2, #1
 80068ae:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2220      	movs	r2, #32
 80068b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2220      	movs	r2, #32
 80068bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2200      	movs	r2, #0
 80068c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80068c8:	2303      	movs	r3, #3
 80068ca:	e00f      	b.n	80068ec <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	4013      	ands	r3, r2
 80068d6:	68ba      	ldr	r2, [r7, #8]
 80068d8:	429a      	cmp	r2, r3
 80068da:	bf0c      	ite	eq
 80068dc:	2301      	moveq	r3, #1
 80068de:	2300      	movne	r3, #0
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	461a      	mov	r2, r3
 80068e4:	79fb      	ldrb	r3, [r7, #7]
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d0c3      	beq.n	8006872 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80068ea:	2300      	movs	r3, #0
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3710      	adds	r7, #16
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b083      	sub	sp, #12
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	68da      	ldr	r2, [r3, #12]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800690a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	695a      	ldr	r2, [r3, #20]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f022 0201 	bic.w	r2, r2, #1
 800691a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006920:	2b01      	cmp	r3, #1
 8006922:	d107      	bne.n	8006934 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	68da      	ldr	r2, [r3, #12]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f022 0210 	bic.w	r2, r2, #16
 8006932:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2220      	movs	r2, #32
 8006938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006942:	bf00      	nop
 8006944:	370c      	adds	r7, #12
 8006946:	46bd      	mov	sp, r7
 8006948:	bc80      	pop	{r7}
 800694a:	4770      	bx	lr

0800694c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b084      	sub	sp, #16
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006958:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2200      	movs	r2, #0
 800695e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2200      	movs	r2, #0
 8006964:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006966:	68f8      	ldr	r0, [r7, #12]
 8006968:	f7ff ff66 	bl	8006838 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800696c:	bf00      	nop
 800696e:	3710      	adds	r7, #16
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006974:	b480      	push	{r7}
 8006976:	b085      	sub	sp, #20
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006982:	b2db      	uxtb	r3, r3
 8006984:	2b21      	cmp	r3, #33	; 0x21
 8006986:	d13e      	bne.n	8006a06 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006990:	d114      	bne.n	80069bc <UART_Transmit_IT+0x48>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	691b      	ldr	r3, [r3, #16]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d110      	bne.n	80069bc <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6a1b      	ldr	r3, [r3, #32]
 800699e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	881b      	ldrh	r3, [r3, #0]
 80069a4:	461a      	mov	r2, r3
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069ae:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6a1b      	ldr	r3, [r3, #32]
 80069b4:	1c9a      	adds	r2, r3, #2
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	621a      	str	r2, [r3, #32]
 80069ba:	e008      	b.n	80069ce <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6a1b      	ldr	r3, [r3, #32]
 80069c0:	1c59      	adds	r1, r3, #1
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	6211      	str	r1, [r2, #32]
 80069c6:	781a      	ldrb	r2, [r3, #0]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	3b01      	subs	r3, #1
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	4619      	mov	r1, r3
 80069dc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d10f      	bne.n	8006a02 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	68da      	ldr	r2, [r3, #12]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80069f0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	68da      	ldr	r2, [r3, #12]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a00:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006a02:	2300      	movs	r3, #0
 8006a04:	e000      	b.n	8006a08 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006a06:	2302      	movs	r3, #2
  }
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3714      	adds	r7, #20
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bc80      	pop	{r7}
 8006a10:	4770      	bx	lr

08006a12 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a12:	b580      	push	{r7, lr}
 8006a14:	b082      	sub	sp, #8
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	68da      	ldr	r2, [r3, #12]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a28:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2220      	movs	r2, #32
 8006a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f7ff feee 	bl	8006814 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006a38:	2300      	movs	r3, #0
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3708      	adds	r7, #8
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}

08006a42 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006a42:	b580      	push	{r7, lr}
 8006a44:	b086      	sub	sp, #24
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a50:	b2db      	uxtb	r3, r3
 8006a52:	2b22      	cmp	r3, #34	; 0x22
 8006a54:	f040 8099 	bne.w	8006b8a <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a60:	d117      	bne.n	8006a92 <UART_Receive_IT+0x50>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	691b      	ldr	r3, [r3, #16]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d113      	bne.n	8006a92 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a72:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a80:	b29a      	uxth	r2, r3
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a8a:	1c9a      	adds	r2, r3, #2
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	629a      	str	r2, [r3, #40]	; 0x28
 8006a90:	e026      	b.n	8006ae0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a96:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006aa4:	d007      	beq.n	8006ab6 <UART_Receive_IT+0x74>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d10a      	bne.n	8006ac4 <UART_Receive_IT+0x82>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	691b      	ldr	r3, [r3, #16]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d106      	bne.n	8006ac4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	b2da      	uxtb	r2, r3
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	701a      	strb	r2, [r3, #0]
 8006ac2:	e008      	b.n	8006ad6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	b2db      	uxtb	r3, r3
 8006acc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ad0:	b2da      	uxtb	r2, r3
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ada:	1c5a      	adds	r2, r3, #1
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	3b01      	subs	r3, #1
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	4619      	mov	r1, r3
 8006aee:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d148      	bne.n	8006b86 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	68da      	ldr	r2, [r3, #12]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f022 0220 	bic.w	r2, r2, #32
 8006b02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	68da      	ldr	r2, [r3, #12]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b12:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	695a      	ldr	r2, [r3, #20]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f022 0201 	bic.w	r2, r2, #1
 8006b22:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2220      	movs	r2, #32
 8006b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d123      	bne.n	8006b7c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2200      	movs	r2, #0
 8006b38:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	68da      	ldr	r2, [r3, #12]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f022 0210 	bic.w	r2, r2, #16
 8006b48:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f003 0310 	and.w	r3, r3, #16
 8006b54:	2b10      	cmp	r3, #16
 8006b56:	d10a      	bne.n	8006b6e <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006b58:	2300      	movs	r3, #0
 8006b5a:	60fb      	str	r3, [r7, #12]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	60fb      	str	r3, [r7, #12]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	60fb      	str	r3, [r7, #12]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006b72:	4619      	mov	r1, r3
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f7ff fe68 	bl	800684a <HAL_UARTEx_RxEventCallback>
 8006b7a:	e002      	b.n	8006b82 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f7ff fe52 	bl	8006826 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006b82:	2300      	movs	r3, #0
 8006b84:	e002      	b.n	8006b8c <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8006b86:	2300      	movs	r3, #0
 8006b88:	e000      	b.n	8006b8c <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8006b8a:	2302      	movs	r3, #2
  }
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3718      	adds	r7, #24
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b084      	sub	sp, #16
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	691b      	ldr	r3, [r3, #16]
 8006ba2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	68da      	ldr	r2, [r3, #12]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	430a      	orrs	r2, r1
 8006bb0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	689a      	ldr	r2, [r3, #8]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	691b      	ldr	r3, [r3, #16]
 8006bba:	431a      	orrs	r2, r3
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	695b      	ldr	r3, [r3, #20]
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006bce:	f023 030c 	bic.w	r3, r3, #12
 8006bd2:	687a      	ldr	r2, [r7, #4]
 8006bd4:	6812      	ldr	r2, [r2, #0]
 8006bd6:	68b9      	ldr	r1, [r7, #8]
 8006bd8:	430b      	orrs	r3, r1
 8006bda:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	695b      	ldr	r3, [r3, #20]
 8006be2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	699a      	ldr	r2, [r3, #24]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	430a      	orrs	r2, r1
 8006bf0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a2c      	ldr	r2, [pc, #176]	; (8006ca8 <UART_SetConfig+0x114>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d103      	bne.n	8006c04 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006bfc:	f7fe fd4c 	bl	8005698 <HAL_RCC_GetPCLK2Freq>
 8006c00:	60f8      	str	r0, [r7, #12]
 8006c02:	e002      	b.n	8006c0a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006c04:	f7fe fd34 	bl	8005670 <HAL_RCC_GetPCLK1Freq>
 8006c08:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c0a:	68fa      	ldr	r2, [r7, #12]
 8006c0c:	4613      	mov	r3, r2
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	4413      	add	r3, r2
 8006c12:	009a      	lsls	r2, r3, #2
 8006c14:	441a      	add	r2, r3
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	009b      	lsls	r3, r3, #2
 8006c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c20:	4a22      	ldr	r2, [pc, #136]	; (8006cac <UART_SetConfig+0x118>)
 8006c22:	fba2 2303 	umull	r2, r3, r2, r3
 8006c26:	095b      	lsrs	r3, r3, #5
 8006c28:	0119      	lsls	r1, r3, #4
 8006c2a:	68fa      	ldr	r2, [r7, #12]
 8006c2c:	4613      	mov	r3, r2
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	4413      	add	r3, r2
 8006c32:	009a      	lsls	r2, r3, #2
 8006c34:	441a      	add	r2, r3
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006c40:	4b1a      	ldr	r3, [pc, #104]	; (8006cac <UART_SetConfig+0x118>)
 8006c42:	fba3 0302 	umull	r0, r3, r3, r2
 8006c46:	095b      	lsrs	r3, r3, #5
 8006c48:	2064      	movs	r0, #100	; 0x64
 8006c4a:	fb00 f303 	mul.w	r3, r0, r3
 8006c4e:	1ad3      	subs	r3, r2, r3
 8006c50:	011b      	lsls	r3, r3, #4
 8006c52:	3332      	adds	r3, #50	; 0x32
 8006c54:	4a15      	ldr	r2, [pc, #84]	; (8006cac <UART_SetConfig+0x118>)
 8006c56:	fba2 2303 	umull	r2, r3, r2, r3
 8006c5a:	095b      	lsrs	r3, r3, #5
 8006c5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c60:	4419      	add	r1, r3
 8006c62:	68fa      	ldr	r2, [r7, #12]
 8006c64:	4613      	mov	r3, r2
 8006c66:	009b      	lsls	r3, r3, #2
 8006c68:	4413      	add	r3, r2
 8006c6a:	009a      	lsls	r2, r3, #2
 8006c6c:	441a      	add	r2, r3
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	fbb2 f2f3 	udiv	r2, r2, r3
 8006c78:	4b0c      	ldr	r3, [pc, #48]	; (8006cac <UART_SetConfig+0x118>)
 8006c7a:	fba3 0302 	umull	r0, r3, r3, r2
 8006c7e:	095b      	lsrs	r3, r3, #5
 8006c80:	2064      	movs	r0, #100	; 0x64
 8006c82:	fb00 f303 	mul.w	r3, r0, r3
 8006c86:	1ad3      	subs	r3, r2, r3
 8006c88:	011b      	lsls	r3, r3, #4
 8006c8a:	3332      	adds	r3, #50	; 0x32
 8006c8c:	4a07      	ldr	r2, [pc, #28]	; (8006cac <UART_SetConfig+0x118>)
 8006c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c92:	095b      	lsrs	r3, r3, #5
 8006c94:	f003 020f 	and.w	r2, r3, #15
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	440a      	add	r2, r1
 8006c9e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006ca0:	bf00      	nop
 8006ca2:	3710      	adds	r7, #16
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}
 8006ca8:	40013800 	.word	0x40013800
 8006cac:	51eb851f 	.word	0x51eb851f

08006cb0 <pow>:
 8006cb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006cb4:	4614      	mov	r4, r2
 8006cb6:	461d      	mov	r5, r3
 8006cb8:	4680      	mov	r8, r0
 8006cba:	4689      	mov	r9, r1
 8006cbc:	f000 f860 	bl	8006d80 <__ieee754_pow>
 8006cc0:	4622      	mov	r2, r4
 8006cc2:	4606      	mov	r6, r0
 8006cc4:	460f      	mov	r7, r1
 8006cc6:	462b      	mov	r3, r5
 8006cc8:	4620      	mov	r0, r4
 8006cca:	4629      	mov	r1, r5
 8006ccc:	f7f9 fe96 	bl	80009fc <__aeabi_dcmpun>
 8006cd0:	bbc8      	cbnz	r0, 8006d46 <pow+0x96>
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	4640      	mov	r0, r8
 8006cd8:	4649      	mov	r1, r9
 8006cda:	f7f9 fe5d 	bl	8000998 <__aeabi_dcmpeq>
 8006cde:	b1b8      	cbz	r0, 8006d10 <pow+0x60>
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	4620      	mov	r0, r4
 8006ce6:	4629      	mov	r1, r5
 8006ce8:	f7f9 fe56 	bl	8000998 <__aeabi_dcmpeq>
 8006cec:	2800      	cmp	r0, #0
 8006cee:	d141      	bne.n	8006d74 <pow+0xc4>
 8006cf0:	4620      	mov	r0, r4
 8006cf2:	4629      	mov	r1, r5
 8006cf4:	f000 fe39 	bl	800796a <finite>
 8006cf8:	b328      	cbz	r0, 8006d46 <pow+0x96>
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	4620      	mov	r0, r4
 8006d00:	4629      	mov	r1, r5
 8006d02:	f7f9 fe53 	bl	80009ac <__aeabi_dcmplt>
 8006d06:	b1f0      	cbz	r0, 8006d46 <pow+0x96>
 8006d08:	f000 feb4 	bl	8007a74 <__errno>
 8006d0c:	2322      	movs	r3, #34	; 0x22
 8006d0e:	e019      	b.n	8006d44 <pow+0x94>
 8006d10:	4630      	mov	r0, r6
 8006d12:	4639      	mov	r1, r7
 8006d14:	f000 fe29 	bl	800796a <finite>
 8006d18:	b9c8      	cbnz	r0, 8006d4e <pow+0x9e>
 8006d1a:	4640      	mov	r0, r8
 8006d1c:	4649      	mov	r1, r9
 8006d1e:	f000 fe24 	bl	800796a <finite>
 8006d22:	b1a0      	cbz	r0, 8006d4e <pow+0x9e>
 8006d24:	4620      	mov	r0, r4
 8006d26:	4629      	mov	r1, r5
 8006d28:	f000 fe1f 	bl	800796a <finite>
 8006d2c:	b178      	cbz	r0, 8006d4e <pow+0x9e>
 8006d2e:	4632      	mov	r2, r6
 8006d30:	463b      	mov	r3, r7
 8006d32:	4630      	mov	r0, r6
 8006d34:	4639      	mov	r1, r7
 8006d36:	f7f9 fe61 	bl	80009fc <__aeabi_dcmpun>
 8006d3a:	2800      	cmp	r0, #0
 8006d3c:	d0e4      	beq.n	8006d08 <pow+0x58>
 8006d3e:	f000 fe99 	bl	8007a74 <__errno>
 8006d42:	2321      	movs	r3, #33	; 0x21
 8006d44:	6003      	str	r3, [r0, #0]
 8006d46:	4630      	mov	r0, r6
 8006d48:	4639      	mov	r1, r7
 8006d4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d4e:	2200      	movs	r2, #0
 8006d50:	2300      	movs	r3, #0
 8006d52:	4630      	mov	r0, r6
 8006d54:	4639      	mov	r1, r7
 8006d56:	f7f9 fe1f 	bl	8000998 <__aeabi_dcmpeq>
 8006d5a:	2800      	cmp	r0, #0
 8006d5c:	d0f3      	beq.n	8006d46 <pow+0x96>
 8006d5e:	4640      	mov	r0, r8
 8006d60:	4649      	mov	r1, r9
 8006d62:	f000 fe02 	bl	800796a <finite>
 8006d66:	2800      	cmp	r0, #0
 8006d68:	d0ed      	beq.n	8006d46 <pow+0x96>
 8006d6a:	4620      	mov	r0, r4
 8006d6c:	4629      	mov	r1, r5
 8006d6e:	f000 fdfc 	bl	800796a <finite>
 8006d72:	e7c8      	b.n	8006d06 <pow+0x56>
 8006d74:	2600      	movs	r6, #0
 8006d76:	4f01      	ldr	r7, [pc, #4]	; (8006d7c <pow+0xcc>)
 8006d78:	e7e5      	b.n	8006d46 <pow+0x96>
 8006d7a:	bf00      	nop
 8006d7c:	3ff00000 	.word	0x3ff00000

08006d80 <__ieee754_pow>:
 8006d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d84:	b093      	sub	sp, #76	; 0x4c
 8006d86:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006d8a:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 8006d8e:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8006d92:	4689      	mov	r9, r1
 8006d94:	ea56 0102 	orrs.w	r1, r6, r2
 8006d98:	4680      	mov	r8, r0
 8006d9a:	d111      	bne.n	8006dc0 <__ieee754_pow+0x40>
 8006d9c:	1803      	adds	r3, r0, r0
 8006d9e:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8006da2:	4152      	adcs	r2, r2
 8006da4:	4299      	cmp	r1, r3
 8006da6:	4b82      	ldr	r3, [pc, #520]	; (8006fb0 <__ieee754_pow+0x230>)
 8006da8:	4193      	sbcs	r3, r2
 8006daa:	f080 84b9 	bcs.w	8007720 <__ieee754_pow+0x9a0>
 8006dae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006db2:	4640      	mov	r0, r8
 8006db4:	4649      	mov	r1, r9
 8006db6:	f7f9 f9d1 	bl	800015c <__adddf3>
 8006dba:	4683      	mov	fp, r0
 8006dbc:	468c      	mov	ip, r1
 8006dbe:	e06f      	b.n	8006ea0 <__ieee754_pow+0x120>
 8006dc0:	4b7c      	ldr	r3, [pc, #496]	; (8006fb4 <__ieee754_pow+0x234>)
 8006dc2:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8006dc6:	429c      	cmp	r4, r3
 8006dc8:	464d      	mov	r5, r9
 8006dca:	4682      	mov	sl, r0
 8006dcc:	dc06      	bgt.n	8006ddc <__ieee754_pow+0x5c>
 8006dce:	d101      	bne.n	8006dd4 <__ieee754_pow+0x54>
 8006dd0:	2800      	cmp	r0, #0
 8006dd2:	d1ec      	bne.n	8006dae <__ieee754_pow+0x2e>
 8006dd4:	429e      	cmp	r6, r3
 8006dd6:	dc01      	bgt.n	8006ddc <__ieee754_pow+0x5c>
 8006dd8:	d10f      	bne.n	8006dfa <__ieee754_pow+0x7a>
 8006dda:	b172      	cbz	r2, 8006dfa <__ieee754_pow+0x7a>
 8006ddc:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8006de0:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8006de4:	ea55 050a 	orrs.w	r5, r5, sl
 8006de8:	d1e1      	bne.n	8006dae <__ieee754_pow+0x2e>
 8006dea:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8006dee:	18db      	adds	r3, r3, r3
 8006df0:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8006df4:	4152      	adcs	r2, r2
 8006df6:	429d      	cmp	r5, r3
 8006df8:	e7d5      	b.n	8006da6 <__ieee754_pow+0x26>
 8006dfa:	2d00      	cmp	r5, #0
 8006dfc:	da39      	bge.n	8006e72 <__ieee754_pow+0xf2>
 8006dfe:	4b6e      	ldr	r3, [pc, #440]	; (8006fb8 <__ieee754_pow+0x238>)
 8006e00:	429e      	cmp	r6, r3
 8006e02:	dc52      	bgt.n	8006eaa <__ieee754_pow+0x12a>
 8006e04:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8006e08:	429e      	cmp	r6, r3
 8006e0a:	f340 849c 	ble.w	8007746 <__ieee754_pow+0x9c6>
 8006e0e:	1533      	asrs	r3, r6, #20
 8006e10:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006e14:	2b14      	cmp	r3, #20
 8006e16:	dd0f      	ble.n	8006e38 <__ieee754_pow+0xb8>
 8006e18:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8006e1c:	fa22 f103 	lsr.w	r1, r2, r3
 8006e20:	fa01 f303 	lsl.w	r3, r1, r3
 8006e24:	4293      	cmp	r3, r2
 8006e26:	f040 848e 	bne.w	8007746 <__ieee754_pow+0x9c6>
 8006e2a:	f001 0101 	and.w	r1, r1, #1
 8006e2e:	f1c1 0302 	rsb	r3, r1, #2
 8006e32:	9300      	str	r3, [sp, #0]
 8006e34:	b182      	cbz	r2, 8006e58 <__ieee754_pow+0xd8>
 8006e36:	e05d      	b.n	8006ef4 <__ieee754_pow+0x174>
 8006e38:	2a00      	cmp	r2, #0
 8006e3a:	d159      	bne.n	8006ef0 <__ieee754_pow+0x170>
 8006e3c:	f1c3 0314 	rsb	r3, r3, #20
 8006e40:	fa46 f103 	asr.w	r1, r6, r3
 8006e44:	fa01 f303 	lsl.w	r3, r1, r3
 8006e48:	42b3      	cmp	r3, r6
 8006e4a:	f040 8479 	bne.w	8007740 <__ieee754_pow+0x9c0>
 8006e4e:	f001 0101 	and.w	r1, r1, #1
 8006e52:	f1c1 0302 	rsb	r3, r1, #2
 8006e56:	9300      	str	r3, [sp, #0]
 8006e58:	4b58      	ldr	r3, [pc, #352]	; (8006fbc <__ieee754_pow+0x23c>)
 8006e5a:	429e      	cmp	r6, r3
 8006e5c:	d132      	bne.n	8006ec4 <__ieee754_pow+0x144>
 8006e5e:	2f00      	cmp	r7, #0
 8006e60:	f280 846a 	bge.w	8007738 <__ieee754_pow+0x9b8>
 8006e64:	4642      	mov	r2, r8
 8006e66:	464b      	mov	r3, r9
 8006e68:	2000      	movs	r0, #0
 8006e6a:	4954      	ldr	r1, [pc, #336]	; (8006fbc <__ieee754_pow+0x23c>)
 8006e6c:	f7f9 fc56 	bl	800071c <__aeabi_ddiv>
 8006e70:	e7a3      	b.n	8006dba <__ieee754_pow+0x3a>
 8006e72:	2300      	movs	r3, #0
 8006e74:	9300      	str	r3, [sp, #0]
 8006e76:	2a00      	cmp	r2, #0
 8006e78:	d13c      	bne.n	8006ef4 <__ieee754_pow+0x174>
 8006e7a:	4b4e      	ldr	r3, [pc, #312]	; (8006fb4 <__ieee754_pow+0x234>)
 8006e7c:	429e      	cmp	r6, r3
 8006e7e:	d1eb      	bne.n	8006e58 <__ieee754_pow+0xd8>
 8006e80:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8006e84:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8006e88:	ea53 030a 	orrs.w	r3, r3, sl
 8006e8c:	f000 8448 	beq.w	8007720 <__ieee754_pow+0x9a0>
 8006e90:	4b4b      	ldr	r3, [pc, #300]	; (8006fc0 <__ieee754_pow+0x240>)
 8006e92:	429c      	cmp	r4, r3
 8006e94:	dd0b      	ble.n	8006eae <__ieee754_pow+0x12e>
 8006e96:	2f00      	cmp	r7, #0
 8006e98:	f2c0 8448 	blt.w	800772c <__ieee754_pow+0x9ac>
 8006e9c:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8006ea0:	4658      	mov	r0, fp
 8006ea2:	4661      	mov	r1, ip
 8006ea4:	b013      	add	sp, #76	; 0x4c
 8006ea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eaa:	2302      	movs	r3, #2
 8006eac:	e7e2      	b.n	8006e74 <__ieee754_pow+0xf4>
 8006eae:	2f00      	cmp	r7, #0
 8006eb0:	f04f 0b00 	mov.w	fp, #0
 8006eb4:	f04f 0c00 	mov.w	ip, #0
 8006eb8:	daf2      	bge.n	8006ea0 <__ieee754_pow+0x120>
 8006eba:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8006ebe:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8006ec2:	e7ed      	b.n	8006ea0 <__ieee754_pow+0x120>
 8006ec4:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8006ec8:	d106      	bne.n	8006ed8 <__ieee754_pow+0x158>
 8006eca:	4642      	mov	r2, r8
 8006ecc:	464b      	mov	r3, r9
 8006ece:	4640      	mov	r0, r8
 8006ed0:	4649      	mov	r1, r9
 8006ed2:	f7f9 faf9 	bl	80004c8 <__aeabi_dmul>
 8006ed6:	e770      	b.n	8006dba <__ieee754_pow+0x3a>
 8006ed8:	4b3a      	ldr	r3, [pc, #232]	; (8006fc4 <__ieee754_pow+0x244>)
 8006eda:	429f      	cmp	r7, r3
 8006edc:	d10a      	bne.n	8006ef4 <__ieee754_pow+0x174>
 8006ede:	2d00      	cmp	r5, #0
 8006ee0:	db08      	blt.n	8006ef4 <__ieee754_pow+0x174>
 8006ee2:	4640      	mov	r0, r8
 8006ee4:	4649      	mov	r1, r9
 8006ee6:	b013      	add	sp, #76	; 0x4c
 8006ee8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eec:	f000 bc5e 	b.w	80077ac <__ieee754_sqrt>
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	9300      	str	r3, [sp, #0]
 8006ef4:	4640      	mov	r0, r8
 8006ef6:	4649      	mov	r1, r9
 8006ef8:	f000 fd34 	bl	8007964 <fabs>
 8006efc:	4683      	mov	fp, r0
 8006efe:	468c      	mov	ip, r1
 8006f00:	f1ba 0f00 	cmp.w	sl, #0
 8006f04:	d128      	bne.n	8006f58 <__ieee754_pow+0x1d8>
 8006f06:	b124      	cbz	r4, 8006f12 <__ieee754_pow+0x192>
 8006f08:	4b2c      	ldr	r3, [pc, #176]	; (8006fbc <__ieee754_pow+0x23c>)
 8006f0a:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8006f0e:	429a      	cmp	r2, r3
 8006f10:	d122      	bne.n	8006f58 <__ieee754_pow+0x1d8>
 8006f12:	2f00      	cmp	r7, #0
 8006f14:	da07      	bge.n	8006f26 <__ieee754_pow+0x1a6>
 8006f16:	465a      	mov	r2, fp
 8006f18:	4663      	mov	r3, ip
 8006f1a:	2000      	movs	r0, #0
 8006f1c:	4927      	ldr	r1, [pc, #156]	; (8006fbc <__ieee754_pow+0x23c>)
 8006f1e:	f7f9 fbfd 	bl	800071c <__aeabi_ddiv>
 8006f22:	4683      	mov	fp, r0
 8006f24:	468c      	mov	ip, r1
 8006f26:	2d00      	cmp	r5, #0
 8006f28:	daba      	bge.n	8006ea0 <__ieee754_pow+0x120>
 8006f2a:	9b00      	ldr	r3, [sp, #0]
 8006f2c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006f30:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006f34:	4323      	orrs	r3, r4
 8006f36:	d108      	bne.n	8006f4a <__ieee754_pow+0x1ca>
 8006f38:	465a      	mov	r2, fp
 8006f3a:	4663      	mov	r3, ip
 8006f3c:	4658      	mov	r0, fp
 8006f3e:	4661      	mov	r1, ip
 8006f40:	f7f9 f90a 	bl	8000158 <__aeabi_dsub>
 8006f44:	4602      	mov	r2, r0
 8006f46:	460b      	mov	r3, r1
 8006f48:	e790      	b.n	8006e6c <__ieee754_pow+0xec>
 8006f4a:	9b00      	ldr	r3, [sp, #0]
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d1a7      	bne.n	8006ea0 <__ieee754_pow+0x120>
 8006f50:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8006f54:	469c      	mov	ip, r3
 8006f56:	e7a3      	b.n	8006ea0 <__ieee754_pow+0x120>
 8006f58:	0feb      	lsrs	r3, r5, #31
 8006f5a:	3b01      	subs	r3, #1
 8006f5c:	930c      	str	r3, [sp, #48]	; 0x30
 8006f5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006f60:	9b00      	ldr	r3, [sp, #0]
 8006f62:	4313      	orrs	r3, r2
 8006f64:	d104      	bne.n	8006f70 <__ieee754_pow+0x1f0>
 8006f66:	4642      	mov	r2, r8
 8006f68:	464b      	mov	r3, r9
 8006f6a:	4640      	mov	r0, r8
 8006f6c:	4649      	mov	r1, r9
 8006f6e:	e7e7      	b.n	8006f40 <__ieee754_pow+0x1c0>
 8006f70:	4b15      	ldr	r3, [pc, #84]	; (8006fc8 <__ieee754_pow+0x248>)
 8006f72:	429e      	cmp	r6, r3
 8006f74:	f340 80f6 	ble.w	8007164 <__ieee754_pow+0x3e4>
 8006f78:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8006f7c:	429e      	cmp	r6, r3
 8006f7e:	4b10      	ldr	r3, [pc, #64]	; (8006fc0 <__ieee754_pow+0x240>)
 8006f80:	dd09      	ble.n	8006f96 <__ieee754_pow+0x216>
 8006f82:	429c      	cmp	r4, r3
 8006f84:	dc0c      	bgt.n	8006fa0 <__ieee754_pow+0x220>
 8006f86:	2f00      	cmp	r7, #0
 8006f88:	da0c      	bge.n	8006fa4 <__ieee754_pow+0x224>
 8006f8a:	2000      	movs	r0, #0
 8006f8c:	b013      	add	sp, #76	; 0x4c
 8006f8e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f92:	f000 bce2 	b.w	800795a <__math_oflow>
 8006f96:	429c      	cmp	r4, r3
 8006f98:	dbf5      	blt.n	8006f86 <__ieee754_pow+0x206>
 8006f9a:	4b08      	ldr	r3, [pc, #32]	; (8006fbc <__ieee754_pow+0x23c>)
 8006f9c:	429c      	cmp	r4, r3
 8006f9e:	dd15      	ble.n	8006fcc <__ieee754_pow+0x24c>
 8006fa0:	2f00      	cmp	r7, #0
 8006fa2:	dcf2      	bgt.n	8006f8a <__ieee754_pow+0x20a>
 8006fa4:	2000      	movs	r0, #0
 8006fa6:	b013      	add	sp, #76	; 0x4c
 8006fa8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fac:	f000 bcd0 	b.w	8007950 <__math_uflow>
 8006fb0:	fff00000 	.word	0xfff00000
 8006fb4:	7ff00000 	.word	0x7ff00000
 8006fb8:	433fffff 	.word	0x433fffff
 8006fbc:	3ff00000 	.word	0x3ff00000
 8006fc0:	3fefffff 	.word	0x3fefffff
 8006fc4:	3fe00000 	.word	0x3fe00000
 8006fc8:	41e00000 	.word	0x41e00000
 8006fcc:	4661      	mov	r1, ip
 8006fce:	2200      	movs	r2, #0
 8006fd0:	4658      	mov	r0, fp
 8006fd2:	4b5f      	ldr	r3, [pc, #380]	; (8007150 <__ieee754_pow+0x3d0>)
 8006fd4:	f7f9 f8c0 	bl	8000158 <__aeabi_dsub>
 8006fd8:	a355      	add	r3, pc, #340	; (adr r3, 8007130 <__ieee754_pow+0x3b0>)
 8006fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fde:	4604      	mov	r4, r0
 8006fe0:	460d      	mov	r5, r1
 8006fe2:	f7f9 fa71 	bl	80004c8 <__aeabi_dmul>
 8006fe6:	a354      	add	r3, pc, #336	; (adr r3, 8007138 <__ieee754_pow+0x3b8>)
 8006fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fec:	4606      	mov	r6, r0
 8006fee:	460f      	mov	r7, r1
 8006ff0:	4620      	mov	r0, r4
 8006ff2:	4629      	mov	r1, r5
 8006ff4:	f7f9 fa68 	bl	80004c8 <__aeabi_dmul>
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	4682      	mov	sl, r0
 8006ffc:	468b      	mov	fp, r1
 8006ffe:	4620      	mov	r0, r4
 8007000:	4629      	mov	r1, r5
 8007002:	4b54      	ldr	r3, [pc, #336]	; (8007154 <__ieee754_pow+0x3d4>)
 8007004:	f7f9 fa60 	bl	80004c8 <__aeabi_dmul>
 8007008:	4602      	mov	r2, r0
 800700a:	460b      	mov	r3, r1
 800700c:	a14c      	add	r1, pc, #304	; (adr r1, 8007140 <__ieee754_pow+0x3c0>)
 800700e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007012:	f7f9 f8a1 	bl	8000158 <__aeabi_dsub>
 8007016:	4622      	mov	r2, r4
 8007018:	462b      	mov	r3, r5
 800701a:	f7f9 fa55 	bl	80004c8 <__aeabi_dmul>
 800701e:	4602      	mov	r2, r0
 8007020:	460b      	mov	r3, r1
 8007022:	2000      	movs	r0, #0
 8007024:	494c      	ldr	r1, [pc, #304]	; (8007158 <__ieee754_pow+0x3d8>)
 8007026:	f7f9 f897 	bl	8000158 <__aeabi_dsub>
 800702a:	4622      	mov	r2, r4
 800702c:	462b      	mov	r3, r5
 800702e:	4680      	mov	r8, r0
 8007030:	4689      	mov	r9, r1
 8007032:	4620      	mov	r0, r4
 8007034:	4629      	mov	r1, r5
 8007036:	f7f9 fa47 	bl	80004c8 <__aeabi_dmul>
 800703a:	4602      	mov	r2, r0
 800703c:	460b      	mov	r3, r1
 800703e:	4640      	mov	r0, r8
 8007040:	4649      	mov	r1, r9
 8007042:	f7f9 fa41 	bl	80004c8 <__aeabi_dmul>
 8007046:	a340      	add	r3, pc, #256	; (adr r3, 8007148 <__ieee754_pow+0x3c8>)
 8007048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800704c:	f7f9 fa3c 	bl	80004c8 <__aeabi_dmul>
 8007050:	4602      	mov	r2, r0
 8007052:	460b      	mov	r3, r1
 8007054:	4650      	mov	r0, sl
 8007056:	4659      	mov	r1, fp
 8007058:	f7f9 f87e 	bl	8000158 <__aeabi_dsub>
 800705c:	f04f 0a00 	mov.w	sl, #0
 8007060:	4602      	mov	r2, r0
 8007062:	460b      	mov	r3, r1
 8007064:	4604      	mov	r4, r0
 8007066:	460d      	mov	r5, r1
 8007068:	4630      	mov	r0, r6
 800706a:	4639      	mov	r1, r7
 800706c:	f7f9 f876 	bl	800015c <__adddf3>
 8007070:	4632      	mov	r2, r6
 8007072:	463b      	mov	r3, r7
 8007074:	4650      	mov	r0, sl
 8007076:	468b      	mov	fp, r1
 8007078:	f7f9 f86e 	bl	8000158 <__aeabi_dsub>
 800707c:	4602      	mov	r2, r0
 800707e:	460b      	mov	r3, r1
 8007080:	4620      	mov	r0, r4
 8007082:	4629      	mov	r1, r5
 8007084:	f7f9 f868 	bl	8000158 <__aeabi_dsub>
 8007088:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800708c:	9b00      	ldr	r3, [sp, #0]
 800708e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007090:	3b01      	subs	r3, #1
 8007092:	4313      	orrs	r3, r2
 8007094:	f04f 0600 	mov.w	r6, #0
 8007098:	f04f 0200 	mov.w	r2, #0
 800709c:	bf0c      	ite	eq
 800709e:	4b2f      	ldreq	r3, [pc, #188]	; (800715c <__ieee754_pow+0x3dc>)
 80070a0:	4b2b      	ldrne	r3, [pc, #172]	; (8007150 <__ieee754_pow+0x3d0>)
 80070a2:	4604      	mov	r4, r0
 80070a4:	460d      	mov	r5, r1
 80070a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070aa:	e9cd 2300 	strd	r2, r3, [sp]
 80070ae:	4632      	mov	r2, r6
 80070b0:	463b      	mov	r3, r7
 80070b2:	f7f9 f851 	bl	8000158 <__aeabi_dsub>
 80070b6:	4652      	mov	r2, sl
 80070b8:	465b      	mov	r3, fp
 80070ba:	f7f9 fa05 	bl	80004c8 <__aeabi_dmul>
 80070be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80070c2:	4680      	mov	r8, r0
 80070c4:	4689      	mov	r9, r1
 80070c6:	4620      	mov	r0, r4
 80070c8:	4629      	mov	r1, r5
 80070ca:	f7f9 f9fd 	bl	80004c8 <__aeabi_dmul>
 80070ce:	4602      	mov	r2, r0
 80070d0:	460b      	mov	r3, r1
 80070d2:	4640      	mov	r0, r8
 80070d4:	4649      	mov	r1, r9
 80070d6:	f7f9 f841 	bl	800015c <__adddf3>
 80070da:	4632      	mov	r2, r6
 80070dc:	463b      	mov	r3, r7
 80070de:	4680      	mov	r8, r0
 80070e0:	4689      	mov	r9, r1
 80070e2:	4650      	mov	r0, sl
 80070e4:	4659      	mov	r1, fp
 80070e6:	f7f9 f9ef 	bl	80004c8 <__aeabi_dmul>
 80070ea:	4604      	mov	r4, r0
 80070ec:	460d      	mov	r5, r1
 80070ee:	460b      	mov	r3, r1
 80070f0:	4602      	mov	r2, r0
 80070f2:	4649      	mov	r1, r9
 80070f4:	4640      	mov	r0, r8
 80070f6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80070fa:	f7f9 f82f 	bl	800015c <__adddf3>
 80070fe:	4b18      	ldr	r3, [pc, #96]	; (8007160 <__ieee754_pow+0x3e0>)
 8007100:	4682      	mov	sl, r0
 8007102:	4299      	cmp	r1, r3
 8007104:	460f      	mov	r7, r1
 8007106:	460e      	mov	r6, r1
 8007108:	f340 82e5 	ble.w	80076d6 <__ieee754_pow+0x956>
 800710c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8007110:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8007114:	4303      	orrs	r3, r0
 8007116:	f000 81df 	beq.w	80074d8 <__ieee754_pow+0x758>
 800711a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800711e:	2200      	movs	r2, #0
 8007120:	2300      	movs	r3, #0
 8007122:	f7f9 fc43 	bl	80009ac <__aeabi_dcmplt>
 8007126:	3800      	subs	r0, #0
 8007128:	bf18      	it	ne
 800712a:	2001      	movne	r0, #1
 800712c:	e72e      	b.n	8006f8c <__ieee754_pow+0x20c>
 800712e:	bf00      	nop
 8007130:	60000000 	.word	0x60000000
 8007134:	3ff71547 	.word	0x3ff71547
 8007138:	f85ddf44 	.word	0xf85ddf44
 800713c:	3e54ae0b 	.word	0x3e54ae0b
 8007140:	55555555 	.word	0x55555555
 8007144:	3fd55555 	.word	0x3fd55555
 8007148:	652b82fe 	.word	0x652b82fe
 800714c:	3ff71547 	.word	0x3ff71547
 8007150:	3ff00000 	.word	0x3ff00000
 8007154:	3fd00000 	.word	0x3fd00000
 8007158:	3fe00000 	.word	0x3fe00000
 800715c:	bff00000 	.word	0xbff00000
 8007160:	408fffff 	.word	0x408fffff
 8007164:	4bd2      	ldr	r3, [pc, #840]	; (80074b0 <__ieee754_pow+0x730>)
 8007166:	2200      	movs	r2, #0
 8007168:	402b      	ands	r3, r5
 800716a:	b943      	cbnz	r3, 800717e <__ieee754_pow+0x3fe>
 800716c:	4658      	mov	r0, fp
 800716e:	4661      	mov	r1, ip
 8007170:	4bd0      	ldr	r3, [pc, #832]	; (80074b4 <__ieee754_pow+0x734>)
 8007172:	f7f9 f9a9 	bl	80004c8 <__aeabi_dmul>
 8007176:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800717a:	4683      	mov	fp, r0
 800717c:	460c      	mov	r4, r1
 800717e:	1523      	asrs	r3, r4, #20
 8007180:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007184:	4413      	add	r3, r2
 8007186:	930b      	str	r3, [sp, #44]	; 0x2c
 8007188:	4bcb      	ldr	r3, [pc, #812]	; (80074b8 <__ieee754_pow+0x738>)
 800718a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800718e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8007192:	429c      	cmp	r4, r3
 8007194:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007198:	dd08      	ble.n	80071ac <__ieee754_pow+0x42c>
 800719a:	4bc8      	ldr	r3, [pc, #800]	; (80074bc <__ieee754_pow+0x73c>)
 800719c:	429c      	cmp	r4, r3
 800719e:	f340 8199 	ble.w	80074d4 <__ieee754_pow+0x754>
 80071a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071a4:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80071a8:	3301      	adds	r3, #1
 80071aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80071ac:	2600      	movs	r6, #0
 80071ae:	00f3      	lsls	r3, r6, #3
 80071b0:	930d      	str	r3, [sp, #52]	; 0x34
 80071b2:	4bc3      	ldr	r3, [pc, #780]	; (80074c0 <__ieee754_pow+0x740>)
 80071b4:	4658      	mov	r0, fp
 80071b6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80071ba:	e9d3 3400 	ldrd	r3, r4, [r3]
 80071be:	4629      	mov	r1, r5
 80071c0:	461a      	mov	r2, r3
 80071c2:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80071c6:	4623      	mov	r3, r4
 80071c8:	f7f8 ffc6 	bl	8000158 <__aeabi_dsub>
 80071cc:	46da      	mov	sl, fp
 80071ce:	462b      	mov	r3, r5
 80071d0:	4652      	mov	r2, sl
 80071d2:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80071d6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80071da:	f7f8 ffbf 	bl	800015c <__adddf3>
 80071de:	4602      	mov	r2, r0
 80071e0:	460b      	mov	r3, r1
 80071e2:	2000      	movs	r0, #0
 80071e4:	49b7      	ldr	r1, [pc, #732]	; (80074c4 <__ieee754_pow+0x744>)
 80071e6:	f7f9 fa99 	bl	800071c <__aeabi_ddiv>
 80071ea:	4602      	mov	r2, r0
 80071ec:	460b      	mov	r3, r1
 80071ee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80071f2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80071f6:	f7f9 f967 	bl	80004c8 <__aeabi_dmul>
 80071fa:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80071fe:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8007202:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007206:	2300      	movs	r3, #0
 8007208:	2200      	movs	r2, #0
 800720a:	46ab      	mov	fp, r5
 800720c:	106d      	asrs	r5, r5, #1
 800720e:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007212:	9304      	str	r3, [sp, #16]
 8007214:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8007218:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800721c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8007220:	4640      	mov	r0, r8
 8007222:	4649      	mov	r1, r9
 8007224:	4614      	mov	r4, r2
 8007226:	461d      	mov	r5, r3
 8007228:	f7f9 f94e 	bl	80004c8 <__aeabi_dmul>
 800722c:	4602      	mov	r2, r0
 800722e:	460b      	mov	r3, r1
 8007230:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007234:	f7f8 ff90 	bl	8000158 <__aeabi_dsub>
 8007238:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800723c:	4606      	mov	r6, r0
 800723e:	460f      	mov	r7, r1
 8007240:	4620      	mov	r0, r4
 8007242:	4629      	mov	r1, r5
 8007244:	f7f8 ff88 	bl	8000158 <__aeabi_dsub>
 8007248:	4602      	mov	r2, r0
 800724a:	460b      	mov	r3, r1
 800724c:	4650      	mov	r0, sl
 800724e:	4659      	mov	r1, fp
 8007250:	f7f8 ff82 	bl	8000158 <__aeabi_dsub>
 8007254:	4642      	mov	r2, r8
 8007256:	464b      	mov	r3, r9
 8007258:	f7f9 f936 	bl	80004c8 <__aeabi_dmul>
 800725c:	4602      	mov	r2, r0
 800725e:	460b      	mov	r3, r1
 8007260:	4630      	mov	r0, r6
 8007262:	4639      	mov	r1, r7
 8007264:	f7f8 ff78 	bl	8000158 <__aeabi_dsub>
 8007268:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800726c:	f7f9 f92c 	bl	80004c8 <__aeabi_dmul>
 8007270:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007274:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007278:	4610      	mov	r0, r2
 800727a:	4619      	mov	r1, r3
 800727c:	f7f9 f924 	bl	80004c8 <__aeabi_dmul>
 8007280:	a379      	add	r3, pc, #484	; (adr r3, 8007468 <__ieee754_pow+0x6e8>)
 8007282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007286:	4604      	mov	r4, r0
 8007288:	460d      	mov	r5, r1
 800728a:	f7f9 f91d 	bl	80004c8 <__aeabi_dmul>
 800728e:	a378      	add	r3, pc, #480	; (adr r3, 8007470 <__ieee754_pow+0x6f0>)
 8007290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007294:	f7f8 ff62 	bl	800015c <__adddf3>
 8007298:	4622      	mov	r2, r4
 800729a:	462b      	mov	r3, r5
 800729c:	f7f9 f914 	bl	80004c8 <__aeabi_dmul>
 80072a0:	a375      	add	r3, pc, #468	; (adr r3, 8007478 <__ieee754_pow+0x6f8>)
 80072a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a6:	f7f8 ff59 	bl	800015c <__adddf3>
 80072aa:	4622      	mov	r2, r4
 80072ac:	462b      	mov	r3, r5
 80072ae:	f7f9 f90b 	bl	80004c8 <__aeabi_dmul>
 80072b2:	a373      	add	r3, pc, #460	; (adr r3, 8007480 <__ieee754_pow+0x700>)
 80072b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b8:	f7f8 ff50 	bl	800015c <__adddf3>
 80072bc:	4622      	mov	r2, r4
 80072be:	462b      	mov	r3, r5
 80072c0:	f7f9 f902 	bl	80004c8 <__aeabi_dmul>
 80072c4:	a370      	add	r3, pc, #448	; (adr r3, 8007488 <__ieee754_pow+0x708>)
 80072c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ca:	f7f8 ff47 	bl	800015c <__adddf3>
 80072ce:	4622      	mov	r2, r4
 80072d0:	462b      	mov	r3, r5
 80072d2:	f7f9 f8f9 	bl	80004c8 <__aeabi_dmul>
 80072d6:	a36e      	add	r3, pc, #440	; (adr r3, 8007490 <__ieee754_pow+0x710>)
 80072d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072dc:	f7f8 ff3e 	bl	800015c <__adddf3>
 80072e0:	4622      	mov	r2, r4
 80072e2:	4606      	mov	r6, r0
 80072e4:	460f      	mov	r7, r1
 80072e6:	462b      	mov	r3, r5
 80072e8:	4620      	mov	r0, r4
 80072ea:	4629      	mov	r1, r5
 80072ec:	f7f9 f8ec 	bl	80004c8 <__aeabi_dmul>
 80072f0:	4602      	mov	r2, r0
 80072f2:	460b      	mov	r3, r1
 80072f4:	4630      	mov	r0, r6
 80072f6:	4639      	mov	r1, r7
 80072f8:	f7f9 f8e6 	bl	80004c8 <__aeabi_dmul>
 80072fc:	4604      	mov	r4, r0
 80072fe:	460d      	mov	r5, r1
 8007300:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007304:	4642      	mov	r2, r8
 8007306:	464b      	mov	r3, r9
 8007308:	f7f8 ff28 	bl	800015c <__adddf3>
 800730c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007310:	f7f9 f8da 	bl	80004c8 <__aeabi_dmul>
 8007314:	4622      	mov	r2, r4
 8007316:	462b      	mov	r3, r5
 8007318:	f7f8 ff20 	bl	800015c <__adddf3>
 800731c:	4642      	mov	r2, r8
 800731e:	4606      	mov	r6, r0
 8007320:	460f      	mov	r7, r1
 8007322:	464b      	mov	r3, r9
 8007324:	4640      	mov	r0, r8
 8007326:	4649      	mov	r1, r9
 8007328:	f7f9 f8ce 	bl	80004c8 <__aeabi_dmul>
 800732c:	2200      	movs	r2, #0
 800732e:	4b66      	ldr	r3, [pc, #408]	; (80074c8 <__ieee754_pow+0x748>)
 8007330:	4682      	mov	sl, r0
 8007332:	468b      	mov	fp, r1
 8007334:	f7f8 ff12 	bl	800015c <__adddf3>
 8007338:	4632      	mov	r2, r6
 800733a:	463b      	mov	r3, r7
 800733c:	f7f8 ff0e 	bl	800015c <__adddf3>
 8007340:	2400      	movs	r4, #0
 8007342:	460d      	mov	r5, r1
 8007344:	4622      	mov	r2, r4
 8007346:	460b      	mov	r3, r1
 8007348:	4640      	mov	r0, r8
 800734a:	4649      	mov	r1, r9
 800734c:	f7f9 f8bc 	bl	80004c8 <__aeabi_dmul>
 8007350:	2200      	movs	r2, #0
 8007352:	4680      	mov	r8, r0
 8007354:	4689      	mov	r9, r1
 8007356:	4620      	mov	r0, r4
 8007358:	4629      	mov	r1, r5
 800735a:	4b5b      	ldr	r3, [pc, #364]	; (80074c8 <__ieee754_pow+0x748>)
 800735c:	f7f8 fefc 	bl	8000158 <__aeabi_dsub>
 8007360:	4652      	mov	r2, sl
 8007362:	465b      	mov	r3, fp
 8007364:	f7f8 fef8 	bl	8000158 <__aeabi_dsub>
 8007368:	4602      	mov	r2, r0
 800736a:	460b      	mov	r3, r1
 800736c:	4630      	mov	r0, r6
 800736e:	4639      	mov	r1, r7
 8007370:	f7f8 fef2 	bl	8000158 <__aeabi_dsub>
 8007374:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007378:	f7f9 f8a6 	bl	80004c8 <__aeabi_dmul>
 800737c:	4622      	mov	r2, r4
 800737e:	4606      	mov	r6, r0
 8007380:	460f      	mov	r7, r1
 8007382:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007386:	462b      	mov	r3, r5
 8007388:	f7f9 f89e 	bl	80004c8 <__aeabi_dmul>
 800738c:	4602      	mov	r2, r0
 800738e:	460b      	mov	r3, r1
 8007390:	4630      	mov	r0, r6
 8007392:	4639      	mov	r1, r7
 8007394:	f7f8 fee2 	bl	800015c <__adddf3>
 8007398:	2400      	movs	r4, #0
 800739a:	4606      	mov	r6, r0
 800739c:	460f      	mov	r7, r1
 800739e:	4602      	mov	r2, r0
 80073a0:	460b      	mov	r3, r1
 80073a2:	4640      	mov	r0, r8
 80073a4:	4649      	mov	r1, r9
 80073a6:	f7f8 fed9 	bl	800015c <__adddf3>
 80073aa:	a33b      	add	r3, pc, #236	; (adr r3, 8007498 <__ieee754_pow+0x718>)
 80073ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b0:	4620      	mov	r0, r4
 80073b2:	460d      	mov	r5, r1
 80073b4:	f7f9 f888 	bl	80004c8 <__aeabi_dmul>
 80073b8:	4642      	mov	r2, r8
 80073ba:	464b      	mov	r3, r9
 80073bc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80073c0:	4620      	mov	r0, r4
 80073c2:	4629      	mov	r1, r5
 80073c4:	f7f8 fec8 	bl	8000158 <__aeabi_dsub>
 80073c8:	4602      	mov	r2, r0
 80073ca:	460b      	mov	r3, r1
 80073cc:	4630      	mov	r0, r6
 80073ce:	4639      	mov	r1, r7
 80073d0:	f7f8 fec2 	bl	8000158 <__aeabi_dsub>
 80073d4:	a332      	add	r3, pc, #200	; (adr r3, 80074a0 <__ieee754_pow+0x720>)
 80073d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073da:	f7f9 f875 	bl	80004c8 <__aeabi_dmul>
 80073de:	a332      	add	r3, pc, #200	; (adr r3, 80074a8 <__ieee754_pow+0x728>)
 80073e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e4:	4606      	mov	r6, r0
 80073e6:	460f      	mov	r7, r1
 80073e8:	4620      	mov	r0, r4
 80073ea:	4629      	mov	r1, r5
 80073ec:	f7f9 f86c 	bl	80004c8 <__aeabi_dmul>
 80073f0:	4602      	mov	r2, r0
 80073f2:	460b      	mov	r3, r1
 80073f4:	4630      	mov	r0, r6
 80073f6:	4639      	mov	r1, r7
 80073f8:	f7f8 feb0 	bl	800015c <__adddf3>
 80073fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80073fe:	4b33      	ldr	r3, [pc, #204]	; (80074cc <__ieee754_pow+0x74c>)
 8007400:	f04f 0a00 	mov.w	sl, #0
 8007404:	4413      	add	r3, r2
 8007406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800740a:	f7f8 fea7 	bl	800015c <__adddf3>
 800740e:	4680      	mov	r8, r0
 8007410:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007412:	4689      	mov	r9, r1
 8007414:	f7f8 ffee 	bl	80003f4 <__aeabi_i2d>
 8007418:	4604      	mov	r4, r0
 800741a:	460d      	mov	r5, r1
 800741c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800741e:	4b2c      	ldr	r3, [pc, #176]	; (80074d0 <__ieee754_pow+0x750>)
 8007420:	4413      	add	r3, r2
 8007422:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007426:	4642      	mov	r2, r8
 8007428:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800742c:	464b      	mov	r3, r9
 800742e:	f7f8 fe95 	bl	800015c <__adddf3>
 8007432:	4632      	mov	r2, r6
 8007434:	463b      	mov	r3, r7
 8007436:	f7f8 fe91 	bl	800015c <__adddf3>
 800743a:	4622      	mov	r2, r4
 800743c:	462b      	mov	r3, r5
 800743e:	f7f8 fe8d 	bl	800015c <__adddf3>
 8007442:	4622      	mov	r2, r4
 8007444:	462b      	mov	r3, r5
 8007446:	4650      	mov	r0, sl
 8007448:	468b      	mov	fp, r1
 800744a:	f7f8 fe85 	bl	8000158 <__aeabi_dsub>
 800744e:	4632      	mov	r2, r6
 8007450:	463b      	mov	r3, r7
 8007452:	f7f8 fe81 	bl	8000158 <__aeabi_dsub>
 8007456:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800745a:	f7f8 fe7d 	bl	8000158 <__aeabi_dsub>
 800745e:	4602      	mov	r2, r0
 8007460:	460b      	mov	r3, r1
 8007462:	4640      	mov	r0, r8
 8007464:	4649      	mov	r1, r9
 8007466:	e60d      	b.n	8007084 <__ieee754_pow+0x304>
 8007468:	4a454eef 	.word	0x4a454eef
 800746c:	3fca7e28 	.word	0x3fca7e28
 8007470:	93c9db65 	.word	0x93c9db65
 8007474:	3fcd864a 	.word	0x3fcd864a
 8007478:	a91d4101 	.word	0xa91d4101
 800747c:	3fd17460 	.word	0x3fd17460
 8007480:	518f264d 	.word	0x518f264d
 8007484:	3fd55555 	.word	0x3fd55555
 8007488:	db6fabff 	.word	0xdb6fabff
 800748c:	3fdb6db6 	.word	0x3fdb6db6
 8007490:	33333303 	.word	0x33333303
 8007494:	3fe33333 	.word	0x3fe33333
 8007498:	e0000000 	.word	0xe0000000
 800749c:	3feec709 	.word	0x3feec709
 80074a0:	dc3a03fd 	.word	0xdc3a03fd
 80074a4:	3feec709 	.word	0x3feec709
 80074a8:	145b01f5 	.word	0x145b01f5
 80074ac:	be3e2fe0 	.word	0xbe3e2fe0
 80074b0:	7ff00000 	.word	0x7ff00000
 80074b4:	43400000 	.word	0x43400000
 80074b8:	0003988e 	.word	0x0003988e
 80074bc:	000bb679 	.word	0x000bb679
 80074c0:	08007b18 	.word	0x08007b18
 80074c4:	3ff00000 	.word	0x3ff00000
 80074c8:	40080000 	.word	0x40080000
 80074cc:	08007b38 	.word	0x08007b38
 80074d0:	08007b28 	.word	0x08007b28
 80074d4:	2601      	movs	r6, #1
 80074d6:	e66a      	b.n	80071ae <__ieee754_pow+0x42e>
 80074d8:	a39d      	add	r3, pc, #628	; (adr r3, 8007750 <__ieee754_pow+0x9d0>)
 80074da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074de:	4640      	mov	r0, r8
 80074e0:	4649      	mov	r1, r9
 80074e2:	f7f8 fe3b 	bl	800015c <__adddf3>
 80074e6:	4622      	mov	r2, r4
 80074e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80074ec:	462b      	mov	r3, r5
 80074ee:	4650      	mov	r0, sl
 80074f0:	4639      	mov	r1, r7
 80074f2:	f7f8 fe31 	bl	8000158 <__aeabi_dsub>
 80074f6:	4602      	mov	r2, r0
 80074f8:	460b      	mov	r3, r1
 80074fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80074fe:	f7f9 fa73 	bl	80009e8 <__aeabi_dcmpgt>
 8007502:	2800      	cmp	r0, #0
 8007504:	f47f ae09 	bne.w	800711a <__ieee754_pow+0x39a>
 8007508:	4aa3      	ldr	r2, [pc, #652]	; (8007798 <__ieee754_pow+0xa18>)
 800750a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800750e:	4293      	cmp	r3, r2
 8007510:	f340 8101 	ble.w	8007716 <__ieee754_pow+0x996>
 8007514:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8007518:	2000      	movs	r0, #0
 800751a:	151b      	asrs	r3, r3, #20
 800751c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8007520:	fa4a f303 	asr.w	r3, sl, r3
 8007524:	4433      	add	r3, r6
 8007526:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800752a:	4f9c      	ldr	r7, [pc, #624]	; (800779c <__ieee754_pow+0xa1c>)
 800752c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8007530:	4117      	asrs	r7, r2
 8007532:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8007536:	ea23 0107 	bic.w	r1, r3, r7
 800753a:	f1c2 0214 	rsb	r2, r2, #20
 800753e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8007542:	460b      	mov	r3, r1
 8007544:	fa4a fa02 	asr.w	sl, sl, r2
 8007548:	2e00      	cmp	r6, #0
 800754a:	4602      	mov	r2, r0
 800754c:	4629      	mov	r1, r5
 800754e:	4620      	mov	r0, r4
 8007550:	bfb8      	it	lt
 8007552:	f1ca 0a00 	rsblt	sl, sl, #0
 8007556:	f7f8 fdff 	bl	8000158 <__aeabi_dsub>
 800755a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800755e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007562:	2400      	movs	r4, #0
 8007564:	4642      	mov	r2, r8
 8007566:	464b      	mov	r3, r9
 8007568:	f7f8 fdf8 	bl	800015c <__adddf3>
 800756c:	a37a      	add	r3, pc, #488	; (adr r3, 8007758 <__ieee754_pow+0x9d8>)
 800756e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007572:	4620      	mov	r0, r4
 8007574:	460d      	mov	r5, r1
 8007576:	f7f8 ffa7 	bl	80004c8 <__aeabi_dmul>
 800757a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800757e:	4606      	mov	r6, r0
 8007580:	460f      	mov	r7, r1
 8007582:	4620      	mov	r0, r4
 8007584:	4629      	mov	r1, r5
 8007586:	f7f8 fde7 	bl	8000158 <__aeabi_dsub>
 800758a:	4602      	mov	r2, r0
 800758c:	460b      	mov	r3, r1
 800758e:	4640      	mov	r0, r8
 8007590:	4649      	mov	r1, r9
 8007592:	f7f8 fde1 	bl	8000158 <__aeabi_dsub>
 8007596:	a372      	add	r3, pc, #456	; (adr r3, 8007760 <__ieee754_pow+0x9e0>)
 8007598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800759c:	f7f8 ff94 	bl	80004c8 <__aeabi_dmul>
 80075a0:	a371      	add	r3, pc, #452	; (adr r3, 8007768 <__ieee754_pow+0x9e8>)
 80075a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a6:	4680      	mov	r8, r0
 80075a8:	4689      	mov	r9, r1
 80075aa:	4620      	mov	r0, r4
 80075ac:	4629      	mov	r1, r5
 80075ae:	f7f8 ff8b 	bl	80004c8 <__aeabi_dmul>
 80075b2:	4602      	mov	r2, r0
 80075b4:	460b      	mov	r3, r1
 80075b6:	4640      	mov	r0, r8
 80075b8:	4649      	mov	r1, r9
 80075ba:	f7f8 fdcf 	bl	800015c <__adddf3>
 80075be:	4604      	mov	r4, r0
 80075c0:	460d      	mov	r5, r1
 80075c2:	4602      	mov	r2, r0
 80075c4:	460b      	mov	r3, r1
 80075c6:	4630      	mov	r0, r6
 80075c8:	4639      	mov	r1, r7
 80075ca:	f7f8 fdc7 	bl	800015c <__adddf3>
 80075ce:	4632      	mov	r2, r6
 80075d0:	463b      	mov	r3, r7
 80075d2:	4680      	mov	r8, r0
 80075d4:	4689      	mov	r9, r1
 80075d6:	f7f8 fdbf 	bl	8000158 <__aeabi_dsub>
 80075da:	4602      	mov	r2, r0
 80075dc:	460b      	mov	r3, r1
 80075de:	4620      	mov	r0, r4
 80075e0:	4629      	mov	r1, r5
 80075e2:	f7f8 fdb9 	bl	8000158 <__aeabi_dsub>
 80075e6:	4642      	mov	r2, r8
 80075e8:	4606      	mov	r6, r0
 80075ea:	460f      	mov	r7, r1
 80075ec:	464b      	mov	r3, r9
 80075ee:	4640      	mov	r0, r8
 80075f0:	4649      	mov	r1, r9
 80075f2:	f7f8 ff69 	bl	80004c8 <__aeabi_dmul>
 80075f6:	a35e      	add	r3, pc, #376	; (adr r3, 8007770 <__ieee754_pow+0x9f0>)
 80075f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075fc:	4604      	mov	r4, r0
 80075fe:	460d      	mov	r5, r1
 8007600:	f7f8 ff62 	bl	80004c8 <__aeabi_dmul>
 8007604:	a35c      	add	r3, pc, #368	; (adr r3, 8007778 <__ieee754_pow+0x9f8>)
 8007606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800760a:	f7f8 fda5 	bl	8000158 <__aeabi_dsub>
 800760e:	4622      	mov	r2, r4
 8007610:	462b      	mov	r3, r5
 8007612:	f7f8 ff59 	bl	80004c8 <__aeabi_dmul>
 8007616:	a35a      	add	r3, pc, #360	; (adr r3, 8007780 <__ieee754_pow+0xa00>)
 8007618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800761c:	f7f8 fd9e 	bl	800015c <__adddf3>
 8007620:	4622      	mov	r2, r4
 8007622:	462b      	mov	r3, r5
 8007624:	f7f8 ff50 	bl	80004c8 <__aeabi_dmul>
 8007628:	a357      	add	r3, pc, #348	; (adr r3, 8007788 <__ieee754_pow+0xa08>)
 800762a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800762e:	f7f8 fd93 	bl	8000158 <__aeabi_dsub>
 8007632:	4622      	mov	r2, r4
 8007634:	462b      	mov	r3, r5
 8007636:	f7f8 ff47 	bl	80004c8 <__aeabi_dmul>
 800763a:	a355      	add	r3, pc, #340	; (adr r3, 8007790 <__ieee754_pow+0xa10>)
 800763c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007640:	f7f8 fd8c 	bl	800015c <__adddf3>
 8007644:	4622      	mov	r2, r4
 8007646:	462b      	mov	r3, r5
 8007648:	f7f8 ff3e 	bl	80004c8 <__aeabi_dmul>
 800764c:	4602      	mov	r2, r0
 800764e:	460b      	mov	r3, r1
 8007650:	4640      	mov	r0, r8
 8007652:	4649      	mov	r1, r9
 8007654:	f7f8 fd80 	bl	8000158 <__aeabi_dsub>
 8007658:	4604      	mov	r4, r0
 800765a:	460d      	mov	r5, r1
 800765c:	4602      	mov	r2, r0
 800765e:	460b      	mov	r3, r1
 8007660:	4640      	mov	r0, r8
 8007662:	4649      	mov	r1, r9
 8007664:	f7f8 ff30 	bl	80004c8 <__aeabi_dmul>
 8007668:	2200      	movs	r2, #0
 800766a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800766e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007672:	4620      	mov	r0, r4
 8007674:	4629      	mov	r1, r5
 8007676:	f7f8 fd6f 	bl	8000158 <__aeabi_dsub>
 800767a:	4602      	mov	r2, r0
 800767c:	460b      	mov	r3, r1
 800767e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007682:	f7f9 f84b 	bl	800071c <__aeabi_ddiv>
 8007686:	4632      	mov	r2, r6
 8007688:	4604      	mov	r4, r0
 800768a:	460d      	mov	r5, r1
 800768c:	463b      	mov	r3, r7
 800768e:	4640      	mov	r0, r8
 8007690:	4649      	mov	r1, r9
 8007692:	f7f8 ff19 	bl	80004c8 <__aeabi_dmul>
 8007696:	4632      	mov	r2, r6
 8007698:	463b      	mov	r3, r7
 800769a:	f7f8 fd5f 	bl	800015c <__adddf3>
 800769e:	4602      	mov	r2, r0
 80076a0:	460b      	mov	r3, r1
 80076a2:	4620      	mov	r0, r4
 80076a4:	4629      	mov	r1, r5
 80076a6:	f7f8 fd57 	bl	8000158 <__aeabi_dsub>
 80076aa:	4642      	mov	r2, r8
 80076ac:	464b      	mov	r3, r9
 80076ae:	f7f8 fd53 	bl	8000158 <__aeabi_dsub>
 80076b2:	4602      	mov	r2, r0
 80076b4:	460b      	mov	r3, r1
 80076b6:	2000      	movs	r0, #0
 80076b8:	4939      	ldr	r1, [pc, #228]	; (80077a0 <__ieee754_pow+0xa20>)
 80076ba:	f7f8 fd4d 	bl	8000158 <__aeabi_dsub>
 80076be:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80076c2:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80076c6:	da29      	bge.n	800771c <__ieee754_pow+0x99c>
 80076c8:	4652      	mov	r2, sl
 80076ca:	f000 f955 	bl	8007978 <scalbn>
 80076ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80076d2:	f7ff bbfe 	b.w	8006ed2 <__ieee754_pow+0x152>
 80076d6:	4b33      	ldr	r3, [pc, #204]	; (80077a4 <__ieee754_pow+0xa24>)
 80076d8:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80076dc:	429f      	cmp	r7, r3
 80076de:	f77f af13 	ble.w	8007508 <__ieee754_pow+0x788>
 80076e2:	4b31      	ldr	r3, [pc, #196]	; (80077a8 <__ieee754_pow+0xa28>)
 80076e4:	440b      	add	r3, r1
 80076e6:	4303      	orrs	r3, r0
 80076e8:	d009      	beq.n	80076fe <__ieee754_pow+0x97e>
 80076ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 80076ee:	2200      	movs	r2, #0
 80076f0:	2300      	movs	r3, #0
 80076f2:	f7f9 f95b 	bl	80009ac <__aeabi_dcmplt>
 80076f6:	3800      	subs	r0, #0
 80076f8:	bf18      	it	ne
 80076fa:	2001      	movne	r0, #1
 80076fc:	e453      	b.n	8006fa6 <__ieee754_pow+0x226>
 80076fe:	4622      	mov	r2, r4
 8007700:	462b      	mov	r3, r5
 8007702:	f7f8 fd29 	bl	8000158 <__aeabi_dsub>
 8007706:	4642      	mov	r2, r8
 8007708:	464b      	mov	r3, r9
 800770a:	f7f9 f963 	bl	80009d4 <__aeabi_dcmpge>
 800770e:	2800      	cmp	r0, #0
 8007710:	f43f aefa 	beq.w	8007508 <__ieee754_pow+0x788>
 8007714:	e7e9      	b.n	80076ea <__ieee754_pow+0x96a>
 8007716:	f04f 0a00 	mov.w	sl, #0
 800771a:	e720      	b.n	800755e <__ieee754_pow+0x7de>
 800771c:	4621      	mov	r1, r4
 800771e:	e7d6      	b.n	80076ce <__ieee754_pow+0x94e>
 8007720:	f04f 0b00 	mov.w	fp, #0
 8007724:	f8df c078 	ldr.w	ip, [pc, #120]	; 80077a0 <__ieee754_pow+0xa20>
 8007728:	f7ff bbba 	b.w	8006ea0 <__ieee754_pow+0x120>
 800772c:	f04f 0b00 	mov.w	fp, #0
 8007730:	f04f 0c00 	mov.w	ip, #0
 8007734:	f7ff bbb4 	b.w	8006ea0 <__ieee754_pow+0x120>
 8007738:	4640      	mov	r0, r8
 800773a:	4649      	mov	r1, r9
 800773c:	f7ff bb3d 	b.w	8006dba <__ieee754_pow+0x3a>
 8007740:	9200      	str	r2, [sp, #0]
 8007742:	f7ff bb89 	b.w	8006e58 <__ieee754_pow+0xd8>
 8007746:	2300      	movs	r3, #0
 8007748:	f7ff bb73 	b.w	8006e32 <__ieee754_pow+0xb2>
 800774c:	f3af 8000 	nop.w
 8007750:	652b82fe 	.word	0x652b82fe
 8007754:	3c971547 	.word	0x3c971547
 8007758:	00000000 	.word	0x00000000
 800775c:	3fe62e43 	.word	0x3fe62e43
 8007760:	fefa39ef 	.word	0xfefa39ef
 8007764:	3fe62e42 	.word	0x3fe62e42
 8007768:	0ca86c39 	.word	0x0ca86c39
 800776c:	be205c61 	.word	0xbe205c61
 8007770:	72bea4d0 	.word	0x72bea4d0
 8007774:	3e663769 	.word	0x3e663769
 8007778:	c5d26bf1 	.word	0xc5d26bf1
 800777c:	3ebbbd41 	.word	0x3ebbbd41
 8007780:	af25de2c 	.word	0xaf25de2c
 8007784:	3f11566a 	.word	0x3f11566a
 8007788:	16bebd93 	.word	0x16bebd93
 800778c:	3f66c16c 	.word	0x3f66c16c
 8007790:	5555553e 	.word	0x5555553e
 8007794:	3fc55555 	.word	0x3fc55555
 8007798:	3fe00000 	.word	0x3fe00000
 800779c:	000fffff 	.word	0x000fffff
 80077a0:	3ff00000 	.word	0x3ff00000
 80077a4:	4090cbff 	.word	0x4090cbff
 80077a8:	3f6f3400 	.word	0x3f6f3400

080077ac <__ieee754_sqrt>:
 80077ac:	f8df c158 	ldr.w	ip, [pc, #344]	; 8007908 <__ieee754_sqrt+0x15c>
 80077b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077b4:	ea3c 0c01 	bics.w	ip, ip, r1
 80077b8:	4606      	mov	r6, r0
 80077ba:	460d      	mov	r5, r1
 80077bc:	460c      	mov	r4, r1
 80077be:	460a      	mov	r2, r1
 80077c0:	4607      	mov	r7, r0
 80077c2:	4603      	mov	r3, r0
 80077c4:	d10f      	bne.n	80077e6 <__ieee754_sqrt+0x3a>
 80077c6:	4602      	mov	r2, r0
 80077c8:	460b      	mov	r3, r1
 80077ca:	f7f8 fe7d 	bl	80004c8 <__aeabi_dmul>
 80077ce:	4602      	mov	r2, r0
 80077d0:	460b      	mov	r3, r1
 80077d2:	4630      	mov	r0, r6
 80077d4:	4629      	mov	r1, r5
 80077d6:	f7f8 fcc1 	bl	800015c <__adddf3>
 80077da:	4606      	mov	r6, r0
 80077dc:	460d      	mov	r5, r1
 80077de:	4630      	mov	r0, r6
 80077e0:	4629      	mov	r1, r5
 80077e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077e6:	2900      	cmp	r1, #0
 80077e8:	dc0e      	bgt.n	8007808 <__ieee754_sqrt+0x5c>
 80077ea:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80077ee:	ea5c 0707 	orrs.w	r7, ip, r7
 80077f2:	d0f4      	beq.n	80077de <__ieee754_sqrt+0x32>
 80077f4:	b141      	cbz	r1, 8007808 <__ieee754_sqrt+0x5c>
 80077f6:	4602      	mov	r2, r0
 80077f8:	460b      	mov	r3, r1
 80077fa:	f7f8 fcad 	bl	8000158 <__aeabi_dsub>
 80077fe:	4602      	mov	r2, r0
 8007800:	460b      	mov	r3, r1
 8007802:	f7f8 ff8b 	bl	800071c <__aeabi_ddiv>
 8007806:	e7e8      	b.n	80077da <__ieee754_sqrt+0x2e>
 8007808:	1521      	asrs	r1, r4, #20
 800780a:	d075      	beq.n	80078f8 <__ieee754_sqrt+0x14c>
 800780c:	07cc      	lsls	r4, r1, #31
 800780e:	f04f 0400 	mov.w	r4, #0
 8007812:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8007816:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800781a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800781e:	bf5e      	ittt	pl
 8007820:	0fd9      	lsrpl	r1, r3, #31
 8007822:	005b      	lslpl	r3, r3, #1
 8007824:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8007828:	0fd9      	lsrs	r1, r3, #31
 800782a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800782e:	2516      	movs	r5, #22
 8007830:	4620      	mov	r0, r4
 8007832:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007836:	107f      	asrs	r7, r7, #1
 8007838:	005b      	lsls	r3, r3, #1
 800783a:	1846      	adds	r6, r0, r1
 800783c:	4296      	cmp	r6, r2
 800783e:	bfde      	ittt	le
 8007840:	1b92      	suble	r2, r2, r6
 8007842:	1870      	addle	r0, r6, r1
 8007844:	1864      	addle	r4, r4, r1
 8007846:	0052      	lsls	r2, r2, #1
 8007848:	3d01      	subs	r5, #1
 800784a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800784e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007852:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007856:	d1f0      	bne.n	800783a <__ieee754_sqrt+0x8e>
 8007858:	4629      	mov	r1, r5
 800785a:	f04f 0e20 	mov.w	lr, #32
 800785e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007862:	4282      	cmp	r2, r0
 8007864:	eb06 0c05 	add.w	ip, r6, r5
 8007868:	dc02      	bgt.n	8007870 <__ieee754_sqrt+0xc4>
 800786a:	d113      	bne.n	8007894 <__ieee754_sqrt+0xe8>
 800786c:	459c      	cmp	ip, r3
 800786e:	d811      	bhi.n	8007894 <__ieee754_sqrt+0xe8>
 8007870:	f1bc 0f00 	cmp.w	ip, #0
 8007874:	eb0c 0506 	add.w	r5, ip, r6
 8007878:	da43      	bge.n	8007902 <__ieee754_sqrt+0x156>
 800787a:	2d00      	cmp	r5, #0
 800787c:	db41      	blt.n	8007902 <__ieee754_sqrt+0x156>
 800787e:	f100 0801 	add.w	r8, r0, #1
 8007882:	1a12      	subs	r2, r2, r0
 8007884:	4640      	mov	r0, r8
 8007886:	459c      	cmp	ip, r3
 8007888:	bf88      	it	hi
 800788a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800788e:	eba3 030c 	sub.w	r3, r3, ip
 8007892:	4431      	add	r1, r6
 8007894:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8007898:	f1be 0e01 	subs.w	lr, lr, #1
 800789c:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 80078a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80078a4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80078a8:	d1db      	bne.n	8007862 <__ieee754_sqrt+0xb6>
 80078aa:	4313      	orrs	r3, r2
 80078ac:	d006      	beq.n	80078bc <__ieee754_sqrt+0x110>
 80078ae:	1c48      	adds	r0, r1, #1
 80078b0:	bf0b      	itete	eq
 80078b2:	4671      	moveq	r1, lr
 80078b4:	3101      	addne	r1, #1
 80078b6:	3401      	addeq	r4, #1
 80078b8:	f021 0101 	bicne.w	r1, r1, #1
 80078bc:	1063      	asrs	r3, r4, #1
 80078be:	0849      	lsrs	r1, r1, #1
 80078c0:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80078c4:	07e2      	lsls	r2, r4, #31
 80078c6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80078ca:	bf48      	it	mi
 80078cc:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80078d0:	460e      	mov	r6, r1
 80078d2:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80078d6:	e782      	b.n	80077de <__ieee754_sqrt+0x32>
 80078d8:	0ada      	lsrs	r2, r3, #11
 80078da:	3815      	subs	r0, #21
 80078dc:	055b      	lsls	r3, r3, #21
 80078de:	2a00      	cmp	r2, #0
 80078e0:	d0fa      	beq.n	80078d8 <__ieee754_sqrt+0x12c>
 80078e2:	02d5      	lsls	r5, r2, #11
 80078e4:	d50a      	bpl.n	80078fc <__ieee754_sqrt+0x150>
 80078e6:	f1c1 0420 	rsb	r4, r1, #32
 80078ea:	fa23 f404 	lsr.w	r4, r3, r4
 80078ee:	1e4d      	subs	r5, r1, #1
 80078f0:	408b      	lsls	r3, r1
 80078f2:	4322      	orrs	r2, r4
 80078f4:	1b41      	subs	r1, r0, r5
 80078f6:	e789      	b.n	800780c <__ieee754_sqrt+0x60>
 80078f8:	4608      	mov	r0, r1
 80078fa:	e7f0      	b.n	80078de <__ieee754_sqrt+0x132>
 80078fc:	0052      	lsls	r2, r2, #1
 80078fe:	3101      	adds	r1, #1
 8007900:	e7ef      	b.n	80078e2 <__ieee754_sqrt+0x136>
 8007902:	4680      	mov	r8, r0
 8007904:	e7bd      	b.n	8007882 <__ieee754_sqrt+0xd6>
 8007906:	bf00      	nop
 8007908:	7ff00000 	.word	0x7ff00000

0800790c <with_errno>:
 800790c:	b570      	push	{r4, r5, r6, lr}
 800790e:	4604      	mov	r4, r0
 8007910:	460d      	mov	r5, r1
 8007912:	4616      	mov	r6, r2
 8007914:	f000 f8ae 	bl	8007a74 <__errno>
 8007918:	4629      	mov	r1, r5
 800791a:	6006      	str	r6, [r0, #0]
 800791c:	4620      	mov	r0, r4
 800791e:	bd70      	pop	{r4, r5, r6, pc}

08007920 <xflow>:
 8007920:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007922:	4615      	mov	r5, r2
 8007924:	461c      	mov	r4, r3
 8007926:	b180      	cbz	r0, 800794a <xflow+0x2a>
 8007928:	4610      	mov	r0, r2
 800792a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800792e:	e9cd 0100 	strd	r0, r1, [sp]
 8007932:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007936:	4628      	mov	r0, r5
 8007938:	4621      	mov	r1, r4
 800793a:	f7f8 fdc5 	bl	80004c8 <__aeabi_dmul>
 800793e:	2222      	movs	r2, #34	; 0x22
 8007940:	b003      	add	sp, #12
 8007942:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007946:	f7ff bfe1 	b.w	800790c <with_errno>
 800794a:	4610      	mov	r0, r2
 800794c:	4619      	mov	r1, r3
 800794e:	e7ee      	b.n	800792e <xflow+0xe>

08007950 <__math_uflow>:
 8007950:	2200      	movs	r2, #0
 8007952:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007956:	f7ff bfe3 	b.w	8007920 <xflow>

0800795a <__math_oflow>:
 800795a:	2200      	movs	r2, #0
 800795c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8007960:	f7ff bfde 	b.w	8007920 <xflow>

08007964 <fabs>:
 8007964:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007968:	4770      	bx	lr

0800796a <finite>:
 800796a:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800796e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8007972:	0fc0      	lsrs	r0, r0, #31
 8007974:	4770      	bx	lr
	...

08007978 <scalbn>:
 8007978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800797a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800797e:	4604      	mov	r4, r0
 8007980:	460d      	mov	r5, r1
 8007982:	4617      	mov	r7, r2
 8007984:	460b      	mov	r3, r1
 8007986:	b996      	cbnz	r6, 80079ae <scalbn+0x36>
 8007988:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800798c:	4303      	orrs	r3, r0
 800798e:	d039      	beq.n	8007a04 <scalbn+0x8c>
 8007990:	4b33      	ldr	r3, [pc, #204]	; (8007a60 <scalbn+0xe8>)
 8007992:	2200      	movs	r2, #0
 8007994:	f7f8 fd98 	bl	80004c8 <__aeabi_dmul>
 8007998:	4b32      	ldr	r3, [pc, #200]	; (8007a64 <scalbn+0xec>)
 800799a:	4604      	mov	r4, r0
 800799c:	429f      	cmp	r7, r3
 800799e:	460d      	mov	r5, r1
 80079a0:	da0f      	bge.n	80079c2 <scalbn+0x4a>
 80079a2:	a32b      	add	r3, pc, #172	; (adr r3, 8007a50 <scalbn+0xd8>)
 80079a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a8:	f7f8 fd8e 	bl	80004c8 <__aeabi_dmul>
 80079ac:	e006      	b.n	80079bc <scalbn+0x44>
 80079ae:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80079b2:	4296      	cmp	r6, r2
 80079b4:	d10a      	bne.n	80079cc <scalbn+0x54>
 80079b6:	4602      	mov	r2, r0
 80079b8:	f7f8 fbd0 	bl	800015c <__adddf3>
 80079bc:	4604      	mov	r4, r0
 80079be:	460d      	mov	r5, r1
 80079c0:	e020      	b.n	8007a04 <scalbn+0x8c>
 80079c2:	460b      	mov	r3, r1
 80079c4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80079c8:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 80079cc:	f240 72fe 	movw	r2, #2046	; 0x7fe
 80079d0:	19b9      	adds	r1, r7, r6
 80079d2:	4291      	cmp	r1, r2
 80079d4:	dd0e      	ble.n	80079f4 <scalbn+0x7c>
 80079d6:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 80079da:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 80079de:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 80079e2:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 80079e6:	4820      	ldr	r0, [pc, #128]	; (8007a68 <scalbn+0xf0>)
 80079e8:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 80079ec:	a31a      	add	r3, pc, #104	; (adr r3, 8007a58 <scalbn+0xe0>)
 80079ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f2:	e7d9      	b.n	80079a8 <scalbn+0x30>
 80079f4:	2900      	cmp	r1, #0
 80079f6:	dd08      	ble.n	8007a0a <scalbn+0x92>
 80079f8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80079fc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007a00:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8007a04:	4620      	mov	r0, r4
 8007a06:	4629      	mov	r1, r5
 8007a08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a0a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8007a0e:	da12      	bge.n	8007a36 <scalbn+0xbe>
 8007a10:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007a14:	429f      	cmp	r7, r3
 8007a16:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8007a1a:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 8007a1e:	dcdc      	bgt.n	80079da <scalbn+0x62>
 8007a20:	a30b      	add	r3, pc, #44	; (adr r3, 8007a50 <scalbn+0xd8>)
 8007a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a26:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8007a2a:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8007a2e:	480f      	ldr	r0, [pc, #60]	; (8007a6c <scalbn+0xf4>)
 8007a30:	f041 011f 	orr.w	r1, r1, #31
 8007a34:	e7b8      	b.n	80079a8 <scalbn+0x30>
 8007a36:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007a3a:	3136      	adds	r1, #54	; 0x36
 8007a3c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007a40:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8007a44:	4620      	mov	r0, r4
 8007a46:	4629      	mov	r1, r5
 8007a48:	2200      	movs	r2, #0
 8007a4a:	4b09      	ldr	r3, [pc, #36]	; (8007a70 <scalbn+0xf8>)
 8007a4c:	e7ac      	b.n	80079a8 <scalbn+0x30>
 8007a4e:	bf00      	nop
 8007a50:	c2f8f359 	.word	0xc2f8f359
 8007a54:	01a56e1f 	.word	0x01a56e1f
 8007a58:	8800759c 	.word	0x8800759c
 8007a5c:	7e37e43c 	.word	0x7e37e43c
 8007a60:	43500000 	.word	0x43500000
 8007a64:	ffff3cb0 	.word	0xffff3cb0
 8007a68:	8800759c 	.word	0x8800759c
 8007a6c:	c2f8f359 	.word	0xc2f8f359
 8007a70:	3c900000 	.word	0x3c900000

08007a74 <__errno>:
 8007a74:	4b01      	ldr	r3, [pc, #4]	; (8007a7c <__errno+0x8>)
 8007a76:	6818      	ldr	r0, [r3, #0]
 8007a78:	4770      	bx	lr
 8007a7a:	bf00      	nop
 8007a7c:	20000048 	.word	0x20000048

08007a80 <__libc_init_array>:
 8007a80:	b570      	push	{r4, r5, r6, lr}
 8007a82:	2600      	movs	r6, #0
 8007a84:	4d0c      	ldr	r5, [pc, #48]	; (8007ab8 <__libc_init_array+0x38>)
 8007a86:	4c0d      	ldr	r4, [pc, #52]	; (8007abc <__libc_init_array+0x3c>)
 8007a88:	1b64      	subs	r4, r4, r5
 8007a8a:	10a4      	asrs	r4, r4, #2
 8007a8c:	42a6      	cmp	r6, r4
 8007a8e:	d109      	bne.n	8007aa4 <__libc_init_array+0x24>
 8007a90:	f000 f822 	bl	8007ad8 <_init>
 8007a94:	2600      	movs	r6, #0
 8007a96:	4d0a      	ldr	r5, [pc, #40]	; (8007ac0 <__libc_init_array+0x40>)
 8007a98:	4c0a      	ldr	r4, [pc, #40]	; (8007ac4 <__libc_init_array+0x44>)
 8007a9a:	1b64      	subs	r4, r4, r5
 8007a9c:	10a4      	asrs	r4, r4, #2
 8007a9e:	42a6      	cmp	r6, r4
 8007aa0:	d105      	bne.n	8007aae <__libc_init_array+0x2e>
 8007aa2:	bd70      	pop	{r4, r5, r6, pc}
 8007aa4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007aa8:	4798      	blx	r3
 8007aaa:	3601      	adds	r6, #1
 8007aac:	e7ee      	b.n	8007a8c <__libc_init_array+0xc>
 8007aae:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ab2:	4798      	blx	r3
 8007ab4:	3601      	adds	r6, #1
 8007ab6:	e7f2      	b.n	8007a9e <__libc_init_array+0x1e>
 8007ab8:	08007b48 	.word	0x08007b48
 8007abc:	08007b48 	.word	0x08007b48
 8007ac0:	08007b48 	.word	0x08007b48
 8007ac4:	08007b4c 	.word	0x08007b4c

08007ac8 <memset>:
 8007ac8:	4603      	mov	r3, r0
 8007aca:	4402      	add	r2, r0
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d100      	bne.n	8007ad2 <memset+0xa>
 8007ad0:	4770      	bx	lr
 8007ad2:	f803 1b01 	strb.w	r1, [r3], #1
 8007ad6:	e7f9      	b.n	8007acc <memset+0x4>

08007ad8 <_init>:
 8007ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ada:	bf00      	nop
 8007adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ade:	bc08      	pop	{r3}
 8007ae0:	469e      	mov	lr, r3
 8007ae2:	4770      	bx	lr

08007ae4 <_fini>:
 8007ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ae6:	bf00      	nop
 8007ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007aea:	bc08      	pop	{r3}
 8007aec:	469e      	mov	lr, r3
 8007aee:	4770      	bx	lr
