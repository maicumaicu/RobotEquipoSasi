
RobotAlgoritmoSasi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f28  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08008038  08008038  00018038  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008090  08008090  000200a4  2**0
                  CONTENTS
  4 .ARM          00000000  08008090  08008090  000200a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008090  08008090  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008090  08008090  00018090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008094  08008094  00018094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  08008098  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002b60  200000a4  0800813c  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002c04  0800813c  00022c04  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dcca  00000000  00000000  000200cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027f0  00000000  00000000  0002dd97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed8  00000000  00000000  00030588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000db0  00000000  00000000  00031460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000197c4  00000000  00000000  00032210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011968  00000000  00000000  0004b9d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090bac  00000000  00000000  0005d33c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000edee8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004210  00000000  00000000  000edf38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000a4 	.word	0x200000a4
 800012c:	00000000 	.word	0x00000000
 8000130:	08008020 	.word	0x08008020

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000a8 	.word	0x200000a8
 800014c:	08008020 	.word	0x08008020

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2f>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a30:	bf24      	itt	cs
 8000a32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a3a:	d90d      	bls.n	8000a58 <__aeabi_d2f+0x30>
 8000a3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a50:	bf08      	it	eq
 8000a52:	f020 0001 	biceq.w	r0, r0, #1
 8000a56:	4770      	bx	lr
 8000a58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a5c:	d121      	bne.n	8000aa2 <__aeabi_d2f+0x7a>
 8000a5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a62:	bfbc      	itt	lt
 8000a64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	4770      	bxlt	lr
 8000a6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a72:	f1c2 0218 	rsb	r2, r2, #24
 8000a76:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a82:	bf18      	it	ne
 8000a84:	f040 0001 	orrne.w	r0, r0, #1
 8000a88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a94:	ea40 000c 	orr.w	r0, r0, ip
 8000a98:	fa23 f302 	lsr.w	r3, r3, r2
 8000a9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa0:	e7cc      	b.n	8000a3c <__aeabi_d2f+0x14>
 8000aa2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aa6:	d107      	bne.n	8000ab8 <__aeabi_d2f+0x90>
 8000aa8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aac:	bf1e      	ittt	ne
 8000aae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ab2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ab6:	4770      	bxne	lr
 8000ab8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	; 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	3a01      	subs	r2, #1
 8000b82:	bf28      	it	cs
 8000b84:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b88:	d2ed      	bcs.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d36:	2afd      	cmp	r2, #253	; 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	; 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	; 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	; 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <__gesf2>:
 8000f84:	f04f 3cff 	mov.w	ip, #4294967295
 8000f88:	e006      	b.n	8000f98 <__cmpsf2+0x4>
 8000f8a:	bf00      	nop

08000f8c <__lesf2>:
 8000f8c:	f04f 0c01 	mov.w	ip, #1
 8000f90:	e002      	b.n	8000f98 <__cmpsf2+0x4>
 8000f92:	bf00      	nop

08000f94 <__cmpsf2>:
 8000f94:	f04f 0c01 	mov.w	ip, #1
 8000f98:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f9c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fa0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fa4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fa8:	bf18      	it	ne
 8000faa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fae:	d011      	beq.n	8000fd4 <__cmpsf2+0x40>
 8000fb0:	b001      	add	sp, #4
 8000fb2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fb6:	bf18      	it	ne
 8000fb8:	ea90 0f01 	teqne	r0, r1
 8000fbc:	bf58      	it	pl
 8000fbe:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fc2:	bf88      	it	hi
 8000fc4:	17c8      	asrhi	r0, r1, #31
 8000fc6:	bf38      	it	cc
 8000fc8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fcc:	bf18      	it	ne
 8000fce:	f040 0001 	orrne.w	r0, r0, #1
 8000fd2:	4770      	bx	lr
 8000fd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fd8:	d102      	bne.n	8000fe0 <__cmpsf2+0x4c>
 8000fda:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fde:	d105      	bne.n	8000fec <__cmpsf2+0x58>
 8000fe0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fe4:	d1e4      	bne.n	8000fb0 <__cmpsf2+0x1c>
 8000fe6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fea:	d0e1      	beq.n	8000fb0 <__cmpsf2+0x1c>
 8000fec:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_cfrcmple>:
 8000ff4:	4684      	mov	ip, r0
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	4661      	mov	r1, ip
 8000ffa:	e7ff      	b.n	8000ffc <__aeabi_cfcmpeq>

08000ffc <__aeabi_cfcmpeq>:
 8000ffc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ffe:	f7ff ffc9 	bl	8000f94 <__cmpsf2>
 8001002:	2800      	cmp	r0, #0
 8001004:	bf48      	it	mi
 8001006:	f110 0f00 	cmnmi.w	r0, #0
 800100a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800100c <__aeabi_fcmpeq>:
 800100c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001010:	f7ff fff4 	bl	8000ffc <__aeabi_cfcmpeq>
 8001014:	bf0c      	ite	eq
 8001016:	2001      	moveq	r0, #1
 8001018:	2000      	movne	r0, #0
 800101a:	f85d fb08 	ldr.w	pc, [sp], #8
 800101e:	bf00      	nop

08001020 <__aeabi_fcmplt>:
 8001020:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001024:	f7ff ffea 	bl	8000ffc <__aeabi_cfcmpeq>
 8001028:	bf34      	ite	cc
 800102a:	2001      	movcc	r0, #1
 800102c:	2000      	movcs	r0, #0
 800102e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001032:	bf00      	nop

08001034 <__aeabi_fcmple>:
 8001034:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001038:	f7ff ffe0 	bl	8000ffc <__aeabi_cfcmpeq>
 800103c:	bf94      	ite	ls
 800103e:	2001      	movls	r0, #1
 8001040:	2000      	movhi	r0, #0
 8001042:	f85d fb08 	ldr.w	pc, [sp], #8
 8001046:	bf00      	nop

08001048 <__aeabi_fcmpge>:
 8001048:	f84d ed08 	str.w	lr, [sp, #-8]!
 800104c:	f7ff ffd2 	bl	8000ff4 <__aeabi_cfrcmple>
 8001050:	bf94      	ite	ls
 8001052:	2001      	movls	r0, #1
 8001054:	2000      	movhi	r0, #0
 8001056:	f85d fb08 	ldr.w	pc, [sp], #8
 800105a:	bf00      	nop

0800105c <__aeabi_fcmpgt>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff ffc8 	bl	8000ff4 <__aeabi_cfrcmple>
 8001064:	bf34      	ite	cc
 8001066:	2001      	movcc	r0, #1
 8001068:	2000      	movcs	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_f2iz>:
 8001070:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001074:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001078:	d30f      	bcc.n	800109a <__aeabi_f2iz+0x2a>
 800107a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800107e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001082:	d90d      	bls.n	80010a0 <__aeabi_f2iz+0x30>
 8001084:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001088:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800108c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001090:	fa23 f002 	lsr.w	r0, r3, r2
 8001094:	bf18      	it	ne
 8001096:	4240      	negne	r0, r0
 8001098:	4770      	bx	lr
 800109a:	f04f 0000 	mov.w	r0, #0
 800109e:	4770      	bx	lr
 80010a0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010a4:	d101      	bne.n	80010aa <__aeabi_f2iz+0x3a>
 80010a6:	0242      	lsls	r2, r0, #9
 80010a8:	d105      	bne.n	80010b6 <__aeabi_f2iz+0x46>
 80010aa:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010ae:	bf08      	it	eq
 80010b0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80010b4:	4770      	bx	lr
 80010b6:	f04f 0000 	mov.w	r0, #0
 80010ba:	4770      	bx	lr

080010bc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010c2:	1d3b      	adds	r3, r7, #4
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80010cc:	4b2e      	ldr	r3, [pc, #184]	; (8001188 <MX_ADC1_Init+0xcc>)
 80010ce:	4a2f      	ldr	r2, [pc, #188]	; (800118c <MX_ADC1_Init+0xd0>)
 80010d0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80010d2:	4b2d      	ldr	r3, [pc, #180]	; (8001188 <MX_ADC1_Init+0xcc>)
 80010d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010d8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80010da:	4b2b      	ldr	r3, [pc, #172]	; (8001188 <MX_ADC1_Init+0xcc>)
 80010dc:	2201      	movs	r2, #1
 80010de:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010e0:	4b29      	ldr	r3, [pc, #164]	; (8001188 <MX_ADC1_Init+0xcc>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010e6:	4b28      	ldr	r3, [pc, #160]	; (8001188 <MX_ADC1_Init+0xcc>)
 80010e8:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80010ec:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010ee:	4b26      	ldr	r3, [pc, #152]	; (8001188 <MX_ADC1_Init+0xcc>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 80010f4:	4b24      	ldr	r3, [pc, #144]	; (8001188 <MX_ADC1_Init+0xcc>)
 80010f6:	2204      	movs	r2, #4
 80010f8:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010fa:	4823      	ldr	r0, [pc, #140]	; (8001188 <MX_ADC1_Init+0xcc>)
 80010fc:	f003 f866 	bl	80041cc <HAL_ADC_Init>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001106:	f002 fb49 	bl	800379c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800110a:	2300      	movs	r3, #0
 800110c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800110e:	2301      	movs	r3, #1
 8001110:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8001112:	2303      	movs	r3, #3
 8001114:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001116:	1d3b      	adds	r3, r7, #4
 8001118:	4619      	mov	r1, r3
 800111a:	481b      	ldr	r0, [pc, #108]	; (8001188 <MX_ADC1_Init+0xcc>)
 800111c:	f003 fa1e 	bl	800455c <HAL_ADC_ConfigChannel>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001126:	f002 fb39 	bl	800379c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800112a:	2301      	movs	r3, #1
 800112c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800112e:	2302      	movs	r3, #2
 8001130:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001132:	1d3b      	adds	r3, r7, #4
 8001134:	4619      	mov	r1, r3
 8001136:	4814      	ldr	r0, [pc, #80]	; (8001188 <MX_ADC1_Init+0xcc>)
 8001138:	f003 fa10 	bl	800455c <HAL_ADC_ConfigChannel>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001142:	f002 fb2b 	bl	800379c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001146:	2302      	movs	r3, #2
 8001148:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800114a:	2303      	movs	r3, #3
 800114c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800114e:	1d3b      	adds	r3, r7, #4
 8001150:	4619      	mov	r1, r3
 8001152:	480d      	ldr	r0, [pc, #52]	; (8001188 <MX_ADC1_Init+0xcc>)
 8001154:	f003 fa02 	bl	800455c <HAL_ADC_ConfigChannel>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800115e:	f002 fb1d 	bl	800379c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001162:	2303      	movs	r3, #3
 8001164:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001166:	2304      	movs	r3, #4
 8001168:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800116a:	1d3b      	adds	r3, r7, #4
 800116c:	4619      	mov	r1, r3
 800116e:	4806      	ldr	r0, [pc, #24]	; (8001188 <MX_ADC1_Init+0xcc>)
 8001170:	f003 f9f4 	bl	800455c <HAL_ADC_ConfigChannel>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 800117a:	f002 fb0f 	bl	800379c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800117e:	bf00      	nop
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	200000c0 	.word	0x200000c0
 800118c:	40012400 	.word	0x40012400

08001190 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b088      	sub	sp, #32
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001198:	f107 0310 	add.w	r3, r7, #16
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a28      	ldr	r2, [pc, #160]	; (800124c <HAL_ADC_MspInit+0xbc>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d149      	bne.n	8001244 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011b0:	4b27      	ldr	r3, [pc, #156]	; (8001250 <HAL_ADC_MspInit+0xc0>)
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	4a26      	ldr	r2, [pc, #152]	; (8001250 <HAL_ADC_MspInit+0xc0>)
 80011b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011ba:	6193      	str	r3, [r2, #24]
 80011bc:	4b24      	ldr	r3, [pc, #144]	; (8001250 <HAL_ADC_MspInit+0xc0>)
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c8:	4b21      	ldr	r3, [pc, #132]	; (8001250 <HAL_ADC_MspInit+0xc0>)
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	4a20      	ldr	r2, [pc, #128]	; (8001250 <HAL_ADC_MspInit+0xc0>)
 80011ce:	f043 0304 	orr.w	r3, r3, #4
 80011d2:	6193      	str	r3, [r2, #24]
 80011d4:	4b1e      	ldr	r3, [pc, #120]	; (8001250 <HAL_ADC_MspInit+0xc0>)
 80011d6:	699b      	ldr	r3, [r3, #24]
 80011d8:	f003 0304 	and.w	r3, r3, #4
 80011dc:	60bb      	str	r3, [r7, #8]
 80011de:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = CNY70_Pin|SHARP_D_Pin|SHARP_C_Pin|SHARP_I_Pin;
 80011e0:	230f      	movs	r3, #15
 80011e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011e4:	2303      	movs	r3, #3
 80011e6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e8:	f107 0310 	add.w	r3, r7, #16
 80011ec:	4619      	mov	r1, r3
 80011ee:	4819      	ldr	r0, [pc, #100]	; (8001254 <HAL_ADC_MspInit+0xc4>)
 80011f0:	f003 ff5a 	bl	80050a8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80011f4:	4b18      	ldr	r3, [pc, #96]	; (8001258 <HAL_ADC_MspInit+0xc8>)
 80011f6:	4a19      	ldr	r2, [pc, #100]	; (800125c <HAL_ADC_MspInit+0xcc>)
 80011f8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011fa:	4b17      	ldr	r3, [pc, #92]	; (8001258 <HAL_ADC_MspInit+0xc8>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001200:	4b15      	ldr	r3, [pc, #84]	; (8001258 <HAL_ADC_MspInit+0xc8>)
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001206:	4b14      	ldr	r3, [pc, #80]	; (8001258 <HAL_ADC_MspInit+0xc8>)
 8001208:	2280      	movs	r2, #128	; 0x80
 800120a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800120c:	4b12      	ldr	r3, [pc, #72]	; (8001258 <HAL_ADC_MspInit+0xc8>)
 800120e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001212:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001214:	4b10      	ldr	r3, [pc, #64]	; (8001258 <HAL_ADC_MspInit+0xc8>)
 8001216:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800121a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800121c:	4b0e      	ldr	r3, [pc, #56]	; (8001258 <HAL_ADC_MspInit+0xc8>)
 800121e:	2220      	movs	r2, #32
 8001220:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001222:	4b0d      	ldr	r3, [pc, #52]	; (8001258 <HAL_ADC_MspInit+0xc8>)
 8001224:	2200      	movs	r2, #0
 8001226:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001228:	480b      	ldr	r0, [pc, #44]	; (8001258 <HAL_ADC_MspInit+0xc8>)
 800122a:	f003 fc9f 	bl	8004b6c <HAL_DMA_Init>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001234:	f002 fab2 	bl	800379c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	4a07      	ldr	r2, [pc, #28]	; (8001258 <HAL_ADC_MspInit+0xc8>)
 800123c:	621a      	str	r2, [r3, #32]
 800123e:	4a06      	ldr	r2, [pc, #24]	; (8001258 <HAL_ADC_MspInit+0xc8>)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001244:	bf00      	nop
 8001246:	3720      	adds	r7, #32
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	40012400 	.word	0x40012400
 8001250:	40021000 	.word	0x40021000
 8001254:	40010800 	.word	0x40010800
 8001258:	200000f0 	.word	0x200000f0
 800125c:	40020008 	.word	0x40020008

08001260 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001266:	4b0c      	ldr	r3, [pc, #48]	; (8001298 <MX_DMA_Init+0x38>)
 8001268:	695b      	ldr	r3, [r3, #20]
 800126a:	4a0b      	ldr	r2, [pc, #44]	; (8001298 <MX_DMA_Init+0x38>)
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	6153      	str	r3, [r2, #20]
 8001272:	4b09      	ldr	r3, [pc, #36]	; (8001298 <MX_DMA_Init+0x38>)
 8001274:	695b      	ldr	r3, [r3, #20]
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	607b      	str	r3, [r7, #4]
 800127c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800127e:	2200      	movs	r2, #0
 8001280:	2100      	movs	r1, #0
 8001282:	200b      	movs	r0, #11
 8001284:	f003 fc3b 	bl	8004afe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001288:	200b      	movs	r0, #11
 800128a:	f003 fc54 	bl	8004b36 <HAL_NVIC_EnableIRQ>

}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40021000 	.word	0x40021000

0800129c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b088      	sub	sp, #32
 80012a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a2:	f107 0310 	add.w	r3, r7, #16
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	605a      	str	r2, [r3, #4]
 80012ac:	609a      	str	r2, [r3, #8]
 80012ae:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012b0:	4b3f      	ldr	r3, [pc, #252]	; (80013b0 <MX_GPIO_Init+0x114>)
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	4a3e      	ldr	r2, [pc, #248]	; (80013b0 <MX_GPIO_Init+0x114>)
 80012b6:	f043 0310 	orr.w	r3, r3, #16
 80012ba:	6193      	str	r3, [r2, #24]
 80012bc:	4b3c      	ldr	r3, [pc, #240]	; (80013b0 <MX_GPIO_Init+0x114>)
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	f003 0310 	and.w	r3, r3, #16
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012c8:	4b39      	ldr	r3, [pc, #228]	; (80013b0 <MX_GPIO_Init+0x114>)
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	4a38      	ldr	r2, [pc, #224]	; (80013b0 <MX_GPIO_Init+0x114>)
 80012ce:	f043 0320 	orr.w	r3, r3, #32
 80012d2:	6193      	str	r3, [r2, #24]
 80012d4:	4b36      	ldr	r3, [pc, #216]	; (80013b0 <MX_GPIO_Init+0x114>)
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	f003 0320 	and.w	r3, r3, #32
 80012dc:	60bb      	str	r3, [r7, #8]
 80012de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e0:	4b33      	ldr	r3, [pc, #204]	; (80013b0 <MX_GPIO_Init+0x114>)
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	4a32      	ldr	r2, [pc, #200]	; (80013b0 <MX_GPIO_Init+0x114>)
 80012e6:	f043 0304 	orr.w	r3, r3, #4
 80012ea:	6193      	str	r3, [r2, #24]
 80012ec:	4b30      	ldr	r3, [pc, #192]	; (80013b0 <MX_GPIO_Init+0x114>)
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	f003 0304 	and.w	r3, r3, #4
 80012f4:	607b      	str	r3, [r7, #4]
 80012f6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f8:	4b2d      	ldr	r3, [pc, #180]	; (80013b0 <MX_GPIO_Init+0x114>)
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	4a2c      	ldr	r2, [pc, #176]	; (80013b0 <MX_GPIO_Init+0x114>)
 80012fe:	f043 0308 	orr.w	r3, r3, #8
 8001302:	6193      	str	r3, [r2, #24]
 8001304:	4b2a      	ldr	r3, [pc, #168]	; (80013b0 <MX_GPIO_Init+0x114>)
 8001306:	699b      	ldr	r3, [r3, #24]
 8001308:	f003 0308 	and.w	r3, r3, #8
 800130c:	603b      	str	r3, [r7, #0]
 800130e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001310:	2200      	movs	r2, #0
 8001312:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001316:	4827      	ldr	r0, [pc, #156]	; (80013b4 <MX_GPIO_Init+0x118>)
 8001318:	f004 f861 	bl	80053de <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|AIN1_Pin|AIN2_Pin, GPIO_PIN_RESET);
 800131c:	2200      	movs	r2, #0
 800131e:	f248 0118 	movw	r1, #32792	; 0x8018
 8001322:	4825      	ldr	r0, [pc, #148]	; (80013b8 <MX_GPIO_Init+0x11c>)
 8001324:	f004 f85b 	bl	80053de <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BIN2_Pin|BIN1_Pin|STBY_Pin, GPIO_PIN_RESET);
 8001328:	2200      	movs	r2, #0
 800132a:	f44f 4118 	mov.w	r1, #38912	; 0x9800
 800132e:	4823      	ldr	r0, [pc, #140]	; (80013bc <MX_GPIO_Init+0x120>)
 8001330:	f004 f855 	bl	80053de <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001334:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001338:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133a:	2301      	movs	r3, #1
 800133c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	2300      	movs	r3, #0
 8001340:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001342:	2302      	movs	r3, #2
 8001344:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001346:	f107 0310 	add.w	r3, r7, #16
 800134a:	4619      	mov	r1, r3
 800134c:	4819      	ldr	r0, [pc, #100]	; (80013b4 <MX_GPIO_Init+0x118>)
 800134e:	f003 feab 	bl	80050a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin|BTN3_Pin;
 8001352:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001356:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001358:	2300      	movs	r3, #0
 800135a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001360:	f107 0310 	add.w	r3, r7, #16
 8001364:	4619      	mov	r1, r3
 8001366:	4814      	ldr	r0, [pc, #80]	; (80013b8 <MX_GPIO_Init+0x11c>)
 8001368:	f003 fe9e 	bl	80050a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_Pin|AIN1_Pin|AIN2_Pin;
 800136c:	f248 0318 	movw	r3, #32792	; 0x8018
 8001370:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001372:	2301      	movs	r3, #1
 8001374:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137a:	2302      	movs	r3, #2
 800137c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800137e:	f107 0310 	add.w	r3, r7, #16
 8001382:	4619      	mov	r1, r3
 8001384:	480c      	ldr	r0, [pc, #48]	; (80013b8 <MX_GPIO_Init+0x11c>)
 8001386:	f003 fe8f 	bl	80050a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = BIN2_Pin|BIN1_Pin|STBY_Pin;
 800138a:	f44f 4318 	mov.w	r3, #38912	; 0x9800
 800138e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001390:	2301      	movs	r3, #1
 8001392:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001398:	2302      	movs	r3, #2
 800139a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139c:	f107 0310 	add.w	r3, r7, #16
 80013a0:	4619      	mov	r1, r3
 80013a2:	4806      	ldr	r0, [pc, #24]	; (80013bc <MX_GPIO_Init+0x120>)
 80013a4:	f003 fe80 	bl	80050a8 <HAL_GPIO_Init>

}
 80013a8:	bf00      	nop
 80013aa:	3720      	adds	r7, #32
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	40021000 	.word	0x40021000
 80013b4:	40011000 	.word	0x40011000
 80013b8:	40010c00 	.word	0x40010c00
 80013bc:	40010800 	.word	0x40010800

080013c0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80013c4:	f002 fe7c 	bl	80040c0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80013c8:	f000 f894 	bl	80014f4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80013cc:	f7ff ff66 	bl	800129c <MX_GPIO_Init>
	MX_DMA_Init();
 80013d0:	f7ff ff46 	bl	8001260 <MX_DMA_Init>
	MX_TIM4_Init();
 80013d4:	f002 fca2 	bl	8003d1c <MX_TIM4_Init>
	MX_TIM3_Init();
 80013d8:	f002 fc4c 	bl	8003c74 <MX_TIM3_Init>
	MX_ADC1_Init();
 80013dc:	f7ff fe6e 	bl	80010bc <MX_ADC1_Init>
	MX_USART1_UART_Init();
 80013e0:	f002 fdca 	bl	8003f78 <MX_USART1_UART_Init>
	MX_TIM2_Init();
 80013e4:	f002 fbe2 	bl	8003bac <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	btns[0].Port = BTN1_GPIO_Port;
 80013e8:	4b36      	ldr	r3, [pc, #216]	; (80014c4 <main+0x104>)
 80013ea:	4a37      	ldr	r2, [pc, #220]	; (80014c8 <main+0x108>)
 80013ec:	601a      	str	r2, [r3, #0]
	btns[0].pin = BTN1_Pin;
 80013ee:	4b35      	ldr	r3, [pc, #212]	; (80014c4 <main+0x104>)
 80013f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013f4:	809a      	strh	r2, [r3, #4]
	btns[0].estado = ESPERA;
 80013f6:	4b33      	ldr	r3, [pc, #204]	; (80014c4 <main+0x104>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	609a      	str	r2, [r3, #8]
	btns[0].flag = 0;
 80013fc:	4b31      	ldr	r3, [pc, #196]	; (80014c4 <main+0x104>)
 80013fe:	2200      	movs	r2, #0
 8001400:	60da      	str	r2, [r3, #12]
	btns[1].Port = BTN2_GPIO_Port;
 8001402:	4b30      	ldr	r3, [pc, #192]	; (80014c4 <main+0x104>)
 8001404:	4a30      	ldr	r2, [pc, #192]	; (80014c8 <main+0x108>)
 8001406:	611a      	str	r2, [r3, #16]
	btns[1].pin = BTN2_Pin;
 8001408:	4b2e      	ldr	r3, [pc, #184]	; (80014c4 <main+0x104>)
 800140a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800140e:	829a      	strh	r2, [r3, #20]
	btns[1].estado = ESPERA;
 8001410:	4b2c      	ldr	r3, [pc, #176]	; (80014c4 <main+0x104>)
 8001412:	2200      	movs	r2, #0
 8001414:	619a      	str	r2, [r3, #24]
	btns[1].flag = 0;
 8001416:	4b2b      	ldr	r3, [pc, #172]	; (80014c4 <main+0x104>)
 8001418:	2200      	movs	r2, #0
 800141a:	61da      	str	r2, [r3, #28]
	btns[2].Port = BTN3_GPIO_Port;
 800141c:	4b29      	ldr	r3, [pc, #164]	; (80014c4 <main+0x104>)
 800141e:	4a2a      	ldr	r2, [pc, #168]	; (80014c8 <main+0x108>)
 8001420:	621a      	str	r2, [r3, #32]
	btns[2].pin = BTN3_Pin;
 8001422:	4b28      	ldr	r3, [pc, #160]	; (80014c4 <main+0x104>)
 8001424:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001428:	849a      	strh	r2, [r3, #36]	; 0x24
	btns[2].estado = ESPERA;
 800142a:	4b26      	ldr	r3, [pc, #152]	; (80014c4 <main+0x104>)
 800142c:	2200      	movs	r2, #0
 800142e:	629a      	str	r2, [r3, #40]	; 0x28
	btns[2].flag = 0;
 8001430:	4b24      	ldr	r3, [pc, #144]	; (80014c4 <main+0x104>)
 8001432:	2200      	movs	r2, #0
 8001434:	62da      	str	r2, [r3, #44]	; 0x2c
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001436:	2108      	movs	r1, #8
 8001438:	4824      	ldr	r0, [pc, #144]	; (80014cc <main+0x10c>)
 800143a:	f004 fd09 	bl	8005e50 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800143e:	210c      	movs	r1, #12
 8001440:	4822      	ldr	r0, [pc, #136]	; (80014cc <main+0x10c>)
 8001442:	f004 fd05 	bl	8005e50 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001446:	213c      	movs	r1, #60	; 0x3c
 8001448:	4821      	ldr	r0, [pc, #132]	; (80014d0 <main+0x110>)
 800144a:	f004 fe45 	bl	80060d8 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800144e:	213c      	movs	r1, #60	; 0x3c
 8001450:	4820      	ldr	r0, [pc, #128]	; (80014d4 <main+0x114>)
 8001452:	f004 fe41 	bl	80060d8 <HAL_TIM_Encoder_Start>
	HAL_GPIO_WritePin(STBY, GPIO_PIN_SET);
 8001456:	2201      	movs	r2, #1
 8001458:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800145c:	481e      	ldr	r0, [pc, #120]	; (80014d8 <main+0x118>)
 800145e:	f003 ffbe 	bl	80053de <HAL_GPIO_WritePin>
	TIM2->CCR3 = 15000;
 8001462:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001466:	f643 2298 	movw	r2, #15000	; 0x3a98
 800146a:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM2->CCR4 = 15000;
 800146c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001470:	f643 2298 	movw	r2, #15000	; 0x3a98
 8001474:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_buf, ADC_BUF_LEN);
 8001476:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800147a:	4918      	ldr	r1, [pc, #96]	; (80014dc <main+0x11c>)
 800147c:	4818      	ldr	r0, [pc, #96]	; (80014e0 <main+0x120>)
 800147e:	f002 ff7d 	bl	800437c <HAL_ADC_Start_DMA>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8001482:	2200      	movs	r2, #0
 8001484:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001488:	4816      	ldr	r0, [pc, #88]	; (80014e4 <main+0x124>)
 800148a:	f003 ffa8 	bl	80053de <HAL_GPIO_WritePin>
	TIM3->CNT = 0;
 800148e:	4b16      	ldr	r3, [pc, #88]	; (80014e8 <main+0x128>)
 8001490:	2200      	movs	r2, #0
 8001492:	625a      	str	r2, [r3, #36]	; 0x24
	TIM4->CNT = 0;
 8001494:	4b15      	ldr	r3, [pc, #84]	; (80014ec <main+0x12c>)
 8001496:	2200      	movs	r2, #0
 8001498:	625a      	str	r2, [r3, #36]	; 0x24
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		mainMachine();
 800149a:	f000 f8f7 	bl	800168c <mainMachine>
		/*intUartSend((int) calcularDistancia(TIM3->CNT) >> 1);
		 runMotor(ADELANTE, MOTOR_A);
		 runMotor(ATRAS, MOTOR_B);*/
		btnMachine(0);
 800149e:	2000      	movs	r0, #0
 80014a0:	f002 f8d0 	bl	8003644 <btnMachine>
		btnMachine(1);
 80014a4:	2001      	movs	r0, #1
 80014a6:	f002 f8cd 	bl	8003644 <btnMachine>
		btnMachine(2);
 80014aa:	2002      	movs	r0, #2
 80014ac:	f002 f8ca 	bl	8003644 <btnMachine>
		intUartSend(Sensors[0]);
 80014b0:	4b0f      	ldr	r3, [pc, #60]	; (80014f0 <main+0x130>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff fddb 	bl	8001070 <__aeabi_f2iz>
 80014ba:	4603      	mov	r3, r0
 80014bc:	4618      	mov	r0, r3
 80014be:	f000 f875 	bl	80015ac <intUartSend>
		mainMachine();
 80014c2:	e7ea      	b.n	800149a <main+0xda>
 80014c4:	20001254 	.word	0x20001254
 80014c8:	40010c00 	.word	0x40010c00
 80014cc:	20002ae4 	.word	0x20002ae4
 80014d0:	20002b74 	.word	0x20002b74
 80014d4:	20002b2c 	.word	0x20002b2c
 80014d8:	40010800 	.word	0x40010800
 80014dc:	20000134 	.word	0x20000134
 80014e0:	200000c0 	.word	0x200000c0
 80014e4:	40011000 	.word	0x40011000
 80014e8:	40000400 	.word	0x40000400
 80014ec:	40000800 	.word	0x40000800
 80014f0:	200011d4 	.word	0x200011d4

080014f4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b094      	sub	sp, #80	; 0x50
 80014f8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80014fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014fe:	2228      	movs	r2, #40	; 0x28
 8001500:	2100      	movs	r1, #0
 8001502:	4618      	mov	r0, r3
 8001504:	f006 fd84 	bl	8008010 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001508:	f107 0314 	add.w	r3, r7, #20
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	605a      	str	r2, [r3, #4]
 8001512:	609a      	str	r2, [r3, #8]
 8001514:	60da      	str	r2, [r3, #12]
 8001516:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8001518:	1d3b      	adds	r3, r7, #4
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	605a      	str	r2, [r3, #4]
 8001520:	609a      	str	r2, [r3, #8]
 8001522:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001524:	2301      	movs	r3, #1
 8001526:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001528:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800152c:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800152e:	2300      	movs	r3, #0
 8001530:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001532:	2301      	movs	r3, #1
 8001534:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001536:	2302      	movs	r3, #2
 8001538:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800153a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800153e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001540:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001544:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001546:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800154a:	4618      	mov	r0, r3
 800154c:	f003 ff60 	bl	8005410 <HAL_RCC_OscConfig>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <SystemClock_Config+0x66>
		Error_Handler();
 8001556:	f002 f921 	bl	800379c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800155a:	230f      	movs	r3, #15
 800155c:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800155e:	2302      	movs	r3, #2
 8001560:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001562:	2300      	movs	r3, #0
 8001564:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001566:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800156a:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800156c:	2300      	movs	r3, #0
 800156e:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001570:	f107 0314 	add.w	r3, r7, #20
 8001574:	2102      	movs	r1, #2
 8001576:	4618      	mov	r0, r3
 8001578:	f004 f9cc 	bl	8005914 <HAL_RCC_ClockConfig>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <SystemClock_Config+0x92>
		Error_Handler();
 8001582:	f002 f90b 	bl	800379c <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001586:	2302      	movs	r3, #2
 8001588:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800158a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800158e:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001590:	1d3b      	adds	r3, r7, #4
 8001592:	4618      	mov	r0, r3
 8001594:	f004 fb56 	bl	8005c44 <HAL_RCCEx_PeriphCLKConfig>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <SystemClock_Config+0xae>
		Error_Handler();
 800159e:	f002 f8fd 	bl	800379c <Error_Handler>
	}
}
 80015a2:	bf00      	nop
 80015a4:	3750      	adds	r7, #80	; 0x50
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
	...

080015ac <intUartSend>:

/* USER CODE BEGIN 4 */
void intUartSend(int entero) {
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b086      	sub	sp, #24
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
	int m;
	int c;
	int d;
	int u;

	m = entero / 1000;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	4a30      	ldr	r2, [pc, #192]	; (8001678 <intUartSend+0xcc>)
 80015b8:	fb82 1203 	smull	r1, r2, r2, r3
 80015bc:	1192      	asrs	r2, r2, #6
 80015be:	17db      	asrs	r3, r3, #31
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	617b      	str	r3, [r7, #20]
	c = entero / 100 - m * 10;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	4a2d      	ldr	r2, [pc, #180]	; (800167c <intUartSend+0xd0>)
 80015c8:	fb82 1203 	smull	r1, r2, r2, r3
 80015cc:	1152      	asrs	r2, r2, #5
 80015ce:	17db      	asrs	r3, r3, #31
 80015d0:	1ad2      	subs	r2, r2, r3
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	f06f 0109 	mvn.w	r1, #9
 80015d8:	fb01 f303 	mul.w	r3, r1, r3
 80015dc:	4413      	add	r3, r2
 80015de:	613b      	str	r3, [r7, #16]
	d = entero / 10 - (m * 100 + c * 10);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	4a27      	ldr	r2, [pc, #156]	; (8001680 <intUartSend+0xd4>)
 80015e4:	fb82 1203 	smull	r1, r2, r2, r3
 80015e8:	1092      	asrs	r2, r2, #2
 80015ea:	17db      	asrs	r3, r3, #31
 80015ec:	1ad1      	subs	r1, r2, r3
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	2264      	movs	r2, #100	; 0x64
 80015f2:	fb02 f003 	mul.w	r0, r2, r3
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	4613      	mov	r3, r2
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	4413      	add	r3, r2
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	4403      	add	r3, r0
 8001602:	1acb      	subs	r3, r1, r3
 8001604:	60fb      	str	r3, [r7, #12]
	u = entero - (m * 1000 + c * 100 + d * 10);
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800160c:	fb03 f202 	mul.w	r2, r3, r2
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	2164      	movs	r1, #100	; 0x64
 8001614:	fb01 f303 	mul.w	r3, r1, r3
 8001618:	18d1      	adds	r1, r2, r3
 800161a:	68fa      	ldr	r2, [r7, #12]
 800161c:	4613      	mov	r3, r2
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	4413      	add	r3, r2
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	440b      	add	r3, r1
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	60bb      	str	r3, [r7, #8]

	TX_BUFFER[0] = m + '0';
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	b2db      	uxtb	r3, r3
 8001630:	3330      	adds	r3, #48	; 0x30
 8001632:	b2da      	uxtb	r2, r3
 8001634:	4b13      	ldr	r3, [pc, #76]	; (8001684 <intUartSend+0xd8>)
 8001636:	701a      	strb	r2, [r3, #0]
	TX_BUFFER[1] = c + '0';
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	b2db      	uxtb	r3, r3
 800163c:	3330      	adds	r3, #48	; 0x30
 800163e:	b2da      	uxtb	r2, r3
 8001640:	4b10      	ldr	r3, [pc, #64]	; (8001684 <intUartSend+0xd8>)
 8001642:	705a      	strb	r2, [r3, #1]
	TX_BUFFER[2] = d + '0';
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	b2db      	uxtb	r3, r3
 8001648:	3330      	adds	r3, #48	; 0x30
 800164a:	b2da      	uxtb	r2, r3
 800164c:	4b0d      	ldr	r3, [pc, #52]	; (8001684 <intUartSend+0xd8>)
 800164e:	709a      	strb	r2, [r3, #2]
	TX_BUFFER[3] = u + '0';
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	b2db      	uxtb	r3, r3
 8001654:	3330      	adds	r3, #48	; 0x30
 8001656:	b2da      	uxtb	r2, r3
 8001658:	4b0a      	ldr	r3, [pc, #40]	; (8001684 <intUartSend+0xd8>)
 800165a:	70da      	strb	r2, [r3, #3]
	TX_BUFFER[4] = '\n';
 800165c:	4b09      	ldr	r3, [pc, #36]	; (8001684 <intUartSend+0xd8>)
 800165e:	220a      	movs	r2, #10
 8001660:	711a      	strb	r2, [r3, #4]
	HAL_UART_Transmit(&huart1, TX_BUFFER, 5, 100);
 8001662:	2364      	movs	r3, #100	; 0x64
 8001664:	2205      	movs	r2, #5
 8001666:	4907      	ldr	r1, [pc, #28]	; (8001684 <intUartSend+0xd8>)
 8001668:	4807      	ldr	r0, [pc, #28]	; (8001688 <intUartSend+0xdc>)
 800166a:	f005 f93a 	bl	80068e2 <HAL_UART_Transmit>
}
 800166e:	bf00      	nop
 8001670:	3718      	adds	r7, #24
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	10624dd3 	.word	0x10624dd3
 800167c:	51eb851f 	.word	0x51eb851f
 8001680:	66666667 	.word	0x66666667
 8001684:	20001214 	.word	0x20001214
 8001688:	20002bbc 	.word	0x20002bbc

0800168c <mainMachine>:

void mainMachine() {
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
	switch (mainState) {
 8001690:	4b9a      	ldr	r3, [pc, #616]	; (80018fc <mainMachine+0x270>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2b04      	cmp	r3, #4
 8001696:	f200 812e 	bhi.w	80018f6 <mainMachine+0x26a>
 800169a:	a201      	add	r2, pc, #4	; (adr r2, 80016a0 <mainMachine+0x14>)
 800169c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016a0:	080016b5 	.word	0x080016b5
 80016a4:	0800180b 	.word	0x0800180b
 80016a8:	08001873 	.word	0x08001873
 80016ac:	080018ed 	.word	0x080018ed
 80016b0:	08001805 	.word	0x08001805
	case SETUP:
		actual.x = ALTO;
 80016b4:	4b92      	ldr	r3, [pc, #584]	; (8001900 <mainMachine+0x274>)
 80016b6:	2208      	movs	r2, #8
 80016b8:	601a      	str	r2, [r3, #0]
		actual.y = ANCHO;
 80016ba:	4b91      	ldr	r3, [pc, #580]	; (8001900 <mainMachine+0x274>)
 80016bc:	2208      	movs	r2, #8
 80016be:	605a      	str	r2, [r3, #4]
		/*visual.x = 0;
		 visual.y = 0;*/
		resetAxis();
 80016c0:	f001 fcf8 	bl	80030b4 <resetAxis>
		movimientoFlag = 0;
 80016c4:	4b8f      	ldr	r3, [pc, #572]	; (8001904 <mainMachine+0x278>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
		finishFlag = 0;
 80016ca:	4b8f      	ldr	r3, [pc, #572]	; (8001908 <mainMachine+0x27c>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
		if (abs(Sensors[1] - Sensors[3]) < 0.5) {
 80016d0:	4b8e      	ldr	r3, [pc, #568]	; (800190c <mainMachine+0x280>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	4a8d      	ldr	r2, [pc, #564]	; (800190c <mainMachine+0x280>)
 80016d6:	68d2      	ldr	r2, [r2, #12]
 80016d8:	4611      	mov	r1, r2
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff f9f8 	bl	8000ad0 <__aeabi_fsub>
 80016e0:	4603      	mov	r3, r0
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7ff fcc4 	bl	8001070 <__aeabi_f2iz>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	db15      	blt.n	800171a <mainMachine+0x8e>
 80016ee:	4b87      	ldr	r3, [pc, #540]	; (800190c <mainMachine+0x280>)
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	4a86      	ldr	r2, [pc, #536]	; (800190c <mainMachine+0x280>)
 80016f4:	68d2      	ldr	r2, [r2, #12]
 80016f6:	4611      	mov	r1, r2
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff f9e9 	bl	8000ad0 <__aeabi_fsub>
 80016fe:	4603      	mov	r3, r0
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff fcb5 	bl	8001070 <__aeabi_f2iz>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	dc06      	bgt.n	800171a <mainMachine+0x8e>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800170c:	2200      	movs	r2, #0
 800170e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001712:	487f      	ldr	r0, [pc, #508]	; (8001910 <mainMachine+0x284>)
 8001714:	f003 fe63 	bl	80053de <HAL_GPIO_WritePin>
 8001718:	e005      	b.n	8001726 <mainMachine+0x9a>
		} else {
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800171a:	2201      	movs	r2, #1
 800171c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001720:	487b      	ldr	r0, [pc, #492]	; (8001910 <mainMachine+0x284>)
 8001722:	f003 fe5c 	bl	80053de <HAL_GPIO_WritePin>
		}
		if (btns[0].flag == 1) {
 8001726:	4b7b      	ldr	r3, [pc, #492]	; (8001914 <mainMachine+0x288>)
 8001728:	68db      	ldr	r3, [r3, #12]
 800172a:	2b01      	cmp	r3, #1
 800172c:	d12e      	bne.n	800178c <mainMachine+0x100>
			// Set The LED ON!
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800172e:	2200      	movs	r2, #0
 8001730:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001734:	4876      	ldr	r0, [pc, #472]	; (8001910 <mainMachine+0x284>)
 8001736:	f003 fe52 	bl	80053de <HAL_GPIO_WritePin>
			choice = SLOW;
 800173a:	4b77      	ldr	r3, [pc, #476]	; (8001918 <mainMachine+0x28c>)
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
			velocity = velocityChoice[SLOW];
 8001740:	4b76      	ldr	r3, [pc, #472]	; (800191c <mainMachine+0x290>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a76      	ldr	r2, [pc, #472]	; (8001920 <mainMachine+0x294>)
 8001746:	6013      	str	r3, [r2, #0]
			TIM2->CCR3 = baseChoice[SLOW];
 8001748:	4b76      	ldr	r3, [pc, #472]	; (8001924 <mainMachine+0x298>)
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001750:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM2->CCR4 = baseChoice[SLOW];
 8001752:	4b74      	ldr	r3, [pc, #464]	; (8001924 <mainMachine+0x298>)
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800175a:	641a      	str	r2, [r3, #64]	; 0x40
			KP = KPchoice[SLOW];
 800175c:	4b72      	ldr	r3, [pc, #456]	; (8001928 <mainMachine+0x29c>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a72      	ldr	r2, [pc, #456]	; (800192c <mainMachine+0x2a0>)
 8001762:	6013      	str	r3, [r2, #0]
			KD = KDchoice[SLOW];
 8001764:	4b72      	ldr	r3, [pc, #456]	; (8001930 <mainMachine+0x2a4>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a72      	ldr	r2, [pc, #456]	; (8001934 <mainMachine+0x2a8>)
 800176a:	6013      	str	r3, [r2, #0]
			if (q == 0) {
 800176c:	4b72      	ldr	r3, [pc, #456]	; (8001938 <mainMachine+0x2ac>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d108      	bne.n	8001786 <mainMachine+0xfa>
				mainState = CALIBRATE;
 8001774:	4b61      	ldr	r3, [pc, #388]	; (80018fc <mainMachine+0x270>)
 8001776:	2204      	movs	r2, #4
 8001778:	601a      	str	r2, [r3, #0]
				q++;
 800177a:	4b6f      	ldr	r3, [pc, #444]	; (8001938 <mainMachine+0x2ac>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	3301      	adds	r3, #1
 8001780:	4a6d      	ldr	r2, [pc, #436]	; (8001938 <mainMachine+0x2ac>)
 8001782:	6013      	str	r3, [r2, #0]
 8001784:	e002      	b.n	800178c <mainMachine+0x100>
			} else {
				mainState = MAPPING;
 8001786:	4b5d      	ldr	r3, [pc, #372]	; (80018fc <mainMachine+0x270>)
 8001788:	2201      	movs	r2, #1
 800178a:	601a      	str	r2, [r3, #0]
			}

		}
		if (btns[1].flag == 1) {
 800178c:	4b61      	ldr	r3, [pc, #388]	; (8001914 <mainMachine+0x288>)
 800178e:	69db      	ldr	r3, [r3, #28]
 8001790:	2b01      	cmp	r3, #1
 8001792:	d102      	bne.n	800179a <mainMachine+0x10e>
			// Set The LED ON!
			mainState = RACING;
 8001794:	4b59      	ldr	r3, [pc, #356]	; (80018fc <mainMachine+0x270>)
 8001796:	2203      	movs	r2, #3
 8001798:	601a      	str	r2, [r3, #0]
			//directions = ReadRun();
			//ShowRun();
		}
		if (btns[2].flag == 1) {
 800179a:	4b5e      	ldr	r3, [pc, #376]	; (8001914 <mainMachine+0x288>)
 800179c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800179e:	2b01      	cmp	r3, #1
 80017a0:	f040 80a8 	bne.w	80018f4 <mainMachine+0x268>
			// Set The LED ON!
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80017a4:	2200      	movs	r2, #0
 80017a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017aa:	4859      	ldr	r0, [pc, #356]	; (8001910 <mainMachine+0x284>)
 80017ac:	f003 fe17 	bl	80053de <HAL_GPIO_WritePin>
			choice = FAST;
 80017b0:	4b59      	ldr	r3, [pc, #356]	; (8001918 <mainMachine+0x28c>)
 80017b2:	2201      	movs	r2, #1
 80017b4:	601a      	str	r2, [r3, #0]
			velocity = velocityChoice[FAST];
 80017b6:	4b59      	ldr	r3, [pc, #356]	; (800191c <mainMachine+0x290>)
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	4a59      	ldr	r2, [pc, #356]	; (8001920 <mainMachine+0x294>)
 80017bc:	6013      	str	r3, [r2, #0]
			TIM2->CCR3 = baseChoice[FAST];
 80017be:	4b59      	ldr	r3, [pc, #356]	; (8001924 <mainMachine+0x298>)
 80017c0:	685a      	ldr	r2, [r3, #4]
 80017c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017c6:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM2->CCR4 = baseChoice[FAST];
 80017c8:	4b56      	ldr	r3, [pc, #344]	; (8001924 <mainMachine+0x298>)
 80017ca:	685a      	ldr	r2, [r3, #4]
 80017cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017d0:	641a      	str	r2, [r3, #64]	; 0x40
			KP = KPchoice[FAST];
 80017d2:	4b55      	ldr	r3, [pc, #340]	; (8001928 <mainMachine+0x29c>)
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	4a55      	ldr	r2, [pc, #340]	; (800192c <mainMachine+0x2a0>)
 80017d8:	6013      	str	r3, [r2, #0]
			KD = KDchoice[FAST];
 80017da:	4b55      	ldr	r3, [pc, #340]	; (8001930 <mainMachine+0x2a4>)
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	4a55      	ldr	r2, [pc, #340]	; (8001934 <mainMachine+0x2a8>)
 80017e0:	6013      	str	r3, [r2, #0]
			if (q == 0) {
 80017e2:	4b55      	ldr	r3, [pc, #340]	; (8001938 <mainMachine+0x2ac>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d108      	bne.n	80017fc <mainMachine+0x170>
				mainState = CALIBRATE;
 80017ea:	4b44      	ldr	r3, [pc, #272]	; (80018fc <mainMachine+0x270>)
 80017ec:	2204      	movs	r2, #4
 80017ee:	601a      	str	r2, [r3, #0]
				q++;
 80017f0:	4b51      	ldr	r3, [pc, #324]	; (8001938 <mainMachine+0x2ac>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	3301      	adds	r3, #1
 80017f6:	4a50      	ldr	r2, [pc, #320]	; (8001938 <mainMachine+0x2ac>)
 80017f8:	6013      	str	r3, [r2, #0]
			} else {
				mainState = MAPPING;
			}
		}
		//confirmacionCentrado();
		break;
 80017fa:	e07b      	b.n	80018f4 <mainMachine+0x268>
				mainState = MAPPING;
 80017fc:	4b3f      	ldr	r3, [pc, #252]	; (80018fc <mainMachine+0x270>)
 80017fe:	2201      	movs	r2, #1
 8001800:	601a      	str	r2, [r3, #0]
		break;
 8001802:	e077      	b.n	80018f4 <mainMachine+0x268>
	case CALIBRATE:
		calibrateMachine();
 8001804:	f000 f8a2 	bl	800194c <calibrateMachine>
		//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
		break;
 8001808:	e075      	b.n	80018f6 <mainMachine+0x26a>
	case MAPPING:
		if (finishFlag == 0) {
 800180a:	4b3f      	ldr	r3, [pc, #252]	; (8001908 <mainMachine+0x27c>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d102      	bne.n	8001818 <mainMachine+0x18c>
			robotMachine();
 8001812:	f000 f9af 	bl	8001b74 <robotMachine>
			finishFlag = 0;
			resetAxis();
			PrintMap();
			mainState = RESOLUTION;
		}
		break;
 8001816:	e06e      	b.n	80018f6 <mainMachine+0x26a>
			TX_BUFFER[0] = 'X';
 8001818:	4b48      	ldr	r3, [pc, #288]	; (800193c <mainMachine+0x2b0>)
 800181a:	2258      	movs	r2, #88	; 0x58
 800181c:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, TX_BUFFER, 1, 100);
 800181e:	2364      	movs	r3, #100	; 0x64
 8001820:	2201      	movs	r2, #1
 8001822:	4946      	ldr	r1, [pc, #280]	; (800193c <mainMachine+0x2b0>)
 8001824:	4846      	ldr	r0, [pc, #280]	; (8001940 <mainMachine+0x2b4>)
 8001826:	f005 f85c 	bl	80068e2 <HAL_UART_Transmit>
			intUartSend(actual.x);
 800182a:	4b35      	ldr	r3, [pc, #212]	; (8001900 <mainMachine+0x274>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff febc 	bl	80015ac <intUartSend>
			TX_BUFFER[0] = 'Y';
 8001834:	4b41      	ldr	r3, [pc, #260]	; (800193c <mainMachine+0x2b0>)
 8001836:	2259      	movs	r2, #89	; 0x59
 8001838:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, TX_BUFFER, 1, 100);
 800183a:	2364      	movs	r3, #100	; 0x64
 800183c:	2201      	movs	r2, #1
 800183e:	493f      	ldr	r1, [pc, #252]	; (800193c <mainMachine+0x2b0>)
 8001840:	483f      	ldr	r0, [pc, #252]	; (8001940 <mainMachine+0x2b4>)
 8001842:	f005 f84e 	bl	80068e2 <HAL_UART_Transmit>
			intUartSend(actual.y);
 8001846:	4b2e      	ldr	r3, [pc, #184]	; (8001900 <mainMachine+0x274>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff feae 	bl	80015ac <intUartSend>
			actual.x = ALTO;
 8001850:	4b2b      	ldr	r3, [pc, #172]	; (8001900 <mainMachine+0x274>)
 8001852:	2208      	movs	r2, #8
 8001854:	601a      	str	r2, [r3, #0]
			actual.y = ANCHO;
 8001856:	4b2a      	ldr	r3, [pc, #168]	; (8001900 <mainMachine+0x274>)
 8001858:	2208      	movs	r2, #8
 800185a:	605a      	str	r2, [r3, #4]
			finishFlag = 0;
 800185c:	4b2a      	ldr	r3, [pc, #168]	; (8001908 <mainMachine+0x27c>)
 800185e:	2200      	movs	r2, #0
 8001860:	601a      	str	r2, [r3, #0]
			resetAxis();
 8001862:	f001 fc27 	bl	80030b4 <resetAxis>
			PrintMap();
 8001866:	f001 fc3f 	bl	80030e8 <PrintMap>
			mainState = RESOLUTION;
 800186a:	4b24      	ldr	r3, [pc, #144]	; (80018fc <mainMachine+0x270>)
 800186c:	2202      	movs	r2, #2
 800186e:	601a      	str	r2, [r3, #0]
		break;
 8001870:	e041      	b.n	80018f6 <mainMachine+0x26a>
	case RESOLUTION:
		if (Map[actual.x][actual.y].final == 0) {
 8001872:	4b23      	ldr	r3, [pc, #140]	; (8001900 <mainMachine+0x274>)
 8001874:	6819      	ldr	r1, [r3, #0]
 8001876:	4b22      	ldr	r3, [pc, #136]	; (8001900 <mainMachine+0x274>)
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	4832      	ldr	r0, [pc, #200]	; (8001944 <mainMachine+0x2b8>)
 800187c:	461a      	mov	r2, r3
 800187e:	0052      	lsls	r2, r2, #1
 8001880:	441a      	add	r2, r3
 8001882:	00d3      	lsls	r3, r2, #3
 8001884:	461a      	mov	r2, r3
 8001886:	460b      	mov	r3, r1
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	440b      	add	r3, r1
 800188c:	01db      	lsls	r3, r3, #7
 800188e:	4413      	add	r3, r2
 8001890:	4403      	add	r3, r0
 8001892:	3314      	adds	r3, #20
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d124      	bne.n	80018e4 <mainMachine+0x258>
			addDirection(actual.x, actual.y);
 800189a:	4b19      	ldr	r3, [pc, #100]	; (8001900 <mainMachine+0x274>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a18      	ldr	r2, [pc, #96]	; (8001900 <mainMachine+0x274>)
 80018a0:	6852      	ldr	r2, [r2, #4]
 80018a2:	4611      	mov	r1, r2
 80018a4:	4618      	mov	r0, r3
 80018a6:	f000 fc99 	bl	80021dc <addDirection>
			TX_BUFFER[0] = 'X';
 80018aa:	4b24      	ldr	r3, [pc, #144]	; (800193c <mainMachine+0x2b0>)
 80018ac:	2258      	movs	r2, #88	; 0x58
 80018ae:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, TX_BUFFER, 1, 100);
 80018b0:	2364      	movs	r3, #100	; 0x64
 80018b2:	2201      	movs	r2, #1
 80018b4:	4921      	ldr	r1, [pc, #132]	; (800193c <mainMachine+0x2b0>)
 80018b6:	4822      	ldr	r0, [pc, #136]	; (8001940 <mainMachine+0x2b4>)
 80018b8:	f005 f813 	bl	80068e2 <HAL_UART_Transmit>
			intUartSend(actual.x);
 80018bc:	4b10      	ldr	r3, [pc, #64]	; (8001900 <mainMachine+0x274>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff fe73 	bl	80015ac <intUartSend>
			TX_BUFFER[0] = 'Y';
 80018c6:	4b1d      	ldr	r3, [pc, #116]	; (800193c <mainMachine+0x2b0>)
 80018c8:	2259      	movs	r2, #89	; 0x59
 80018ca:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, TX_BUFFER, 1, 100);
 80018cc:	2364      	movs	r3, #100	; 0x64
 80018ce:	2201      	movs	r2, #1
 80018d0:	491a      	ldr	r1, [pc, #104]	; (800193c <mainMachine+0x2b0>)
 80018d2:	481b      	ldr	r0, [pc, #108]	; (8001940 <mainMachine+0x2b4>)
 80018d4:	f005 f805 	bl	80068e2 <HAL_UART_Transmit>
			intUartSend(actual.y);
 80018d8:	4b09      	ldr	r3, [pc, #36]	; (8001900 <mainMachine+0x274>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff fe65 	bl	80015ac <intUartSend>
			//SerialBT.println(directions);
			// UploadRun(directions);
			mainState = SETUP;
		}

		break;
 80018e2:	e008      	b.n	80018f6 <mainMachine+0x26a>
			mainState = SETUP;
 80018e4:	4b05      	ldr	r3, [pc, #20]	; (80018fc <mainMachine+0x270>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
		break;
 80018ea:	e004      	b.n	80018f6 <mainMachine+0x26a>
	case RACING:
		runDirections(directions);
 80018ec:	4816      	ldr	r0, [pc, #88]	; (8001948 <mainMachine+0x2bc>)
 80018ee:	f000 fc27 	bl	8002140 <runDirections>
		break;
 80018f2:	e000      	b.n	80018f6 <mainMachine+0x26a>
		break;
 80018f4:	bf00      	nop
	}

}
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	20001284 	.word	0x20001284
 8001900:	200012a8 	.word	0x200012a8
 8001904:	20001244 	.word	0x20001244
 8001908:	20001240 	.word	0x20001240
 800190c:	200011d4 	.word	0x200011d4
 8001910:	40011000 	.word	0x40011000
 8001914:	20001254 	.word	0x20001254
 8001918:	20001230 	.word	0x20001230
 800191c:	20000010 	.word	0x20000010
 8001920:	20001228 	.word	0x20001228
 8001924:	20000018 	.word	0x20000018
 8001928:	20000000 	.word	0x20000000
 800192c:	20001220 	.word	0x20001220
 8001930:	20000008 	.word	0x20000008
 8001934:	20001224 	.word	0x20001224
 8001938:	20002ae0 	.word	0x20002ae0
 800193c:	20001214 	.word	0x20001214
 8001940:	20002bbc 	.word	0x20002bbc
 8001944:	200012b8 	.word	0x200012b8
 8001948:	2000128c 	.word	0x2000128c

0800194c <calibrateMachine>:

void calibrateMachine() {
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
	switch (calState) {
 8001950:	4b7e      	ldr	r3, [pc, #504]	; (8001b4c <calibrateMachine+0x200>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2b03      	cmp	r3, #3
 8001956:	f200 80f7 	bhi.w	8001b48 <calibrateMachine+0x1fc>
 800195a:	a201      	add	r2, pc, #4	; (adr r2, 8001960 <calibrateMachine+0x14>)
 800195c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001960:	08001971 	.word	0x08001971
 8001964:	08001a21 	.word	0x08001a21
 8001968:	08001a7d 	.word	0x08001a7d
 800196c:	08001ad9 	.word	0x08001ad9
	case CENTER:
		intUartSend(abs(Sensors[1] - Sensors[3]));
 8001970:	4b77      	ldr	r3, [pc, #476]	; (8001b50 <calibrateMachine+0x204>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	4a76      	ldr	r2, [pc, #472]	; (8001b50 <calibrateMachine+0x204>)
 8001976:	68d2      	ldr	r2, [r2, #12]
 8001978:	4611      	mov	r1, r2
 800197a:	4618      	mov	r0, r3
 800197c:	f7ff f8a8 	bl	8000ad0 <__aeabi_fsub>
 8001980:	4603      	mov	r3, r0
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff fb74 	bl	8001070 <__aeabi_f2iz>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	bfb8      	it	lt
 800198e:	425b      	neglt	r3, r3
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff fe0b 	bl	80015ac <intUartSend>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001996:	2201      	movs	r2, #1
 8001998:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800199c:	486d      	ldr	r0, [pc, #436]	; (8001b54 <calibrateMachine+0x208>)
 800199e:	f003 fd1e 	bl	80053de <HAL_GPIO_WritePin>
		if (abs(Sensors[1] - Sensors[3]) < 0.5) {
 80019a2:	4b6b      	ldr	r3, [pc, #428]	; (8001b50 <calibrateMachine+0x204>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	4a6a      	ldr	r2, [pc, #424]	; (8001b50 <calibrateMachine+0x204>)
 80019a8:	68d2      	ldr	r2, [r2, #12]
 80019aa:	4611      	mov	r1, r2
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff f88f 	bl	8000ad0 <__aeabi_fsub>
 80019b2:	4603      	mov	r3, r0
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff fb5b 	bl	8001070 <__aeabi_f2iz>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	f2c0 80bc 	blt.w	8001b3a <calibrateMachine+0x1ee>
 80019c2:	4b63      	ldr	r3, [pc, #396]	; (8001b50 <calibrateMachine+0x204>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	4a62      	ldr	r2, [pc, #392]	; (8001b50 <calibrateMachine+0x204>)
 80019c8:	68d2      	ldr	r2, [r2, #12]
 80019ca:	4611      	mov	r1, r2
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff f87f 	bl	8000ad0 <__aeabi_fsub>
 80019d2:	4603      	mov	r3, r0
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7ff fb4b 	bl	8001070 <__aeabi_f2iz>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	f300 80ac 	bgt.w	8001b3a <calibrateMachine+0x1ee>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80019e2:	2200      	movs	r2, #0
 80019e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019e8:	485a      	ldr	r0, [pc, #360]	; (8001b54 <calibrateMachine+0x208>)
 80019ea:	f003 fcf8 	bl	80053de <HAL_GPIO_WritePin>
			if (btns[0].flag == 1) {
 80019ee:	4b5a      	ldr	r3, [pc, #360]	; (8001b58 <calibrateMachine+0x20c>)
 80019f0:	68db      	ldr	r3, [r3, #12]
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	f040 80a1 	bne.w	8001b3a <calibrateMachine+0x1ee>
				CenterDistanceRight = Sensors[3];
 80019f8:	4b55      	ldr	r3, [pc, #340]	; (8001b50 <calibrateMachine+0x204>)
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff fb37 	bl	8001070 <__aeabi_f2iz>
 8001a02:	4603      	mov	r3, r0
 8001a04:	4a55      	ldr	r2, [pc, #340]	; (8001b5c <calibrateMachine+0x210>)
 8001a06:	6013      	str	r3, [r2, #0]
				CenterDistanceLeft = Sensors[1];
 8001a08:	4b51      	ldr	r3, [pc, #324]	; (8001b50 <calibrateMachine+0x204>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff fb2f 	bl	8001070 <__aeabi_f2iz>
 8001a12:	4603      	mov	r3, r0
 8001a14:	4a52      	ldr	r2, [pc, #328]	; (8001b60 <calibrateMachine+0x214>)
 8001a16:	6013      	str	r3, [r2, #0]
				calState = LEFT;
 8001a18:	4b4c      	ldr	r3, [pc, #304]	; (8001b4c <calibrateMachine+0x200>)
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	601a      	str	r2, [r3, #0]
			}
		}
		break;
 8001a1e:	e08c      	b.n	8001b3a <calibrateMachine+0x1ee>
	case LEFT:
		intUartSend(abs(Sensors[3]));
 8001a20:	4b4b      	ldr	r3, [pc, #300]	; (8001b50 <calibrateMachine+0x204>)
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff fb23 	bl	8001070 <__aeabi_f2iz>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	bfb8      	it	lt
 8001a30:	425b      	neglt	r3, r3
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff fdba 	bl	80015ac <intUartSend>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001a38:	2201      	movs	r2, #1
 8001a3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a3e:	4845      	ldr	r0, [pc, #276]	; (8001b54 <calibrateMachine+0x208>)
 8001a40:	f003 fccd 	bl	80053de <HAL_GPIO_WritePin>
		if (btns[0].flag == 1) {
 8001a44:	4b44      	ldr	r3, [pc, #272]	; (8001b58 <calibrateMachine+0x20c>)
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d178      	bne.n	8001b3e <calibrateMachine+0x1f2>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a52:	4840      	ldr	r0, [pc, #256]	; (8001b54 <calibrateMachine+0x208>)
 8001a54:	f003 fcc3 	bl	80053de <HAL_GPIO_WritePin>
			MaxLeftDistance = Sensors[3] + 2;
 8001a58:	4b3d      	ldr	r3, [pc, #244]	; (8001b50 <calibrateMachine+0x204>)
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff f837 	bl	8000ad4 <__addsf3>
 8001a66:	4603      	mov	r3, r0
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff fb01 	bl	8001070 <__aeabi_f2iz>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	4a3c      	ldr	r2, [pc, #240]	; (8001b64 <calibrateMachine+0x218>)
 8001a72:	6013      	str	r3, [r2, #0]
			calState = RIGHT;
 8001a74:	4b35      	ldr	r3, [pc, #212]	; (8001b4c <calibrateMachine+0x200>)
 8001a76:	2202      	movs	r2, #2
 8001a78:	601a      	str	r2, [r3, #0]
		}
		break;
 8001a7a:	e060      	b.n	8001b3e <calibrateMachine+0x1f2>
	case RIGHT:
		intUartSend(abs(Sensors[1]));
 8001a7c:	4b34      	ldr	r3, [pc, #208]	; (8001b50 <calibrateMachine+0x204>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff faf5 	bl	8001070 <__aeabi_f2iz>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	bfb8      	it	lt
 8001a8c:	425b      	neglt	r3, r3
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff fd8c 	bl	80015ac <intUartSend>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001a94:	2201      	movs	r2, #1
 8001a96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a9a:	482e      	ldr	r0, [pc, #184]	; (8001b54 <calibrateMachine+0x208>)
 8001a9c:	f003 fc9f 	bl	80053de <HAL_GPIO_WritePin>
		if (btns[0].flag == 1) {
 8001aa0:	4b2d      	ldr	r3, [pc, #180]	; (8001b58 <calibrateMachine+0x20c>)
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d14c      	bne.n	8001b42 <calibrateMachine+0x1f6>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001aae:	4829      	ldr	r0, [pc, #164]	; (8001b54 <calibrateMachine+0x208>)
 8001ab0:	f003 fc95 	bl	80053de <HAL_GPIO_WritePin>
			MaxRightDistance = Sensors[1] + 2;
 8001ab4:	4b26      	ldr	r3, [pc, #152]	; (8001b50 <calibrateMachine+0x204>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff f809 	bl	8000ad4 <__addsf3>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff fad3 	bl	8001070 <__aeabi_f2iz>
 8001aca:	4603      	mov	r3, r0
 8001acc:	4a26      	ldr	r2, [pc, #152]	; (8001b68 <calibrateMachine+0x21c>)
 8001ace:	6013      	str	r3, [r2, #0]
			calState = FORWARD;
 8001ad0:	4b1e      	ldr	r3, [pc, #120]	; (8001b4c <calibrateMachine+0x200>)
 8001ad2:	2203      	movs	r2, #3
 8001ad4:	601a      	str	r2, [r3, #0]
		}
		break;
 8001ad6:	e034      	b.n	8001b42 <calibrateMachine+0x1f6>
	case FORWARD:
		intUartSend(abs(Sensors[2]));
 8001ad8:	4b1d      	ldr	r3, [pc, #116]	; (8001b50 <calibrateMachine+0x204>)
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff fac7 	bl	8001070 <__aeabi_f2iz>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	bfb8      	it	lt
 8001ae8:	425b      	neglt	r3, r3
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff fd5e 	bl	80015ac <intUartSend>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001af0:	2201      	movs	r2, #1
 8001af2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001af6:	4817      	ldr	r0, [pc, #92]	; (8001b54 <calibrateMachine+0x208>)
 8001af8:	f003 fc71 	bl	80053de <HAL_GPIO_WritePin>
		if (btns[0].flag == 1) {
 8001afc:	4b16      	ldr	r3, [pc, #88]	; (8001b58 <calibrateMachine+0x20c>)
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d120      	bne.n	8001b46 <calibrateMachine+0x1fa>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001b04:	2200      	movs	r2, #0
 8001b06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b0a:	4812      	ldr	r0, [pc, #72]	; (8001b54 <calibrateMachine+0x208>)
 8001b0c:	f003 fc67 	bl	80053de <HAL_GPIO_WritePin>
			MaxCenterDistance = Sensors[2] + 2;
 8001b10:	4b0f      	ldr	r3, [pc, #60]	; (8001b50 <calibrateMachine+0x204>)
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7fe ffdb 	bl	8000ad4 <__addsf3>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff faa5 	bl	8001070 <__aeabi_f2iz>
 8001b26:	4603      	mov	r3, r0
 8001b28:	4a10      	ldr	r2, [pc, #64]	; (8001b6c <calibrateMachine+0x220>)
 8001b2a:	6013      	str	r3, [r2, #0]
			mainState = SETUP;
 8001b2c:	4b10      	ldr	r3, [pc, #64]	; (8001b70 <calibrateMachine+0x224>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	601a      	str	r2, [r3, #0]
			calState = CENTER;
 8001b32:	4b06      	ldr	r3, [pc, #24]	; (8001b4c <calibrateMachine+0x200>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
		}
		break;
 8001b38:	e005      	b.n	8001b46 <calibrateMachine+0x1fa>
		break;
 8001b3a:	bf00      	nop
 8001b3c:	e004      	b.n	8001b48 <calibrateMachine+0x1fc>
		break;
 8001b3e:	bf00      	nop
 8001b40:	e002      	b.n	8001b48 <calibrateMachine+0x1fc>
		break;
 8001b42:	bf00      	nop
 8001b44:	e000      	b.n	8001b48 <calibrateMachine+0x1fc>
		break;
 8001b46:	bf00      	nop
	}
}
 8001b48:	bf00      	nop
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	200011f4 	.word	0x200011f4
 8001b50:	200011d4 	.word	0x200011d4
 8001b54:	40011000 	.word	0x40011000
 8001b58:	20001254 	.word	0x20001254
 8001b5c:	200011f8 	.word	0x200011f8
 8001b60:	200011fc 	.word	0x200011fc
 8001b64:	20001204 	.word	0x20001204
 8001b68:	20001200 	.word	0x20001200
 8001b6c:	20001208 	.word	0x20001208
 8001b70:	20001284 	.word	0x20001284

08001b74 <robotMachine>:

void robotMachine() {
 8001b74:	b5b0      	push	{r4, r5, r7, lr}
 8001b76:	af00      	add	r7, sp, #0
	switch (robotState) {
 8001b78:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <robotMachine+0x20>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	f000 82ae 	beq.w	80020de <robotMachine+0x56a>
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	f300 82be 	bgt.w	8002104 <robotMachine+0x590>
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d005      	beq.n	8001b98 <robotMachine+0x24>
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	f000 81d9 	beq.w	8001f44 <robotMachine+0x3d0>
		if (movimientoFlag == 1) {
			robotState = READING;
		}
		break;
	}
}
 8001b92:	e2b7      	b.n	8002104 <robotMachine+0x590>
 8001b94:	20001288 	.word	0x20001288
		HAL_Delay(100);
 8001b98:	2064      	movs	r0, #100	; 0x64
 8001b9a:	f002 faf3 	bl	8004184 <HAL_Delay>
		TX_BUFFER[0] = 'X';
 8001b9e:	4bb9      	ldr	r3, [pc, #740]	; (8001e84 <robotMachine+0x310>)
 8001ba0:	2258      	movs	r2, #88	; 0x58
 8001ba2:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = actual.x + '0';
 8001ba4:	4bb8      	ldr	r3, [pc, #736]	; (8001e88 <robotMachine+0x314>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	3330      	adds	r3, #48	; 0x30
 8001bac:	b2da      	uxtb	r2, r3
 8001bae:	4bb5      	ldr	r3, [pc, #724]	; (8001e84 <robotMachine+0x310>)
 8001bb0:	705a      	strb	r2, [r3, #1]
		TX_BUFFER[2] = '\n';
 8001bb2:	4bb4      	ldr	r3, [pc, #720]	; (8001e84 <robotMachine+0x310>)
 8001bb4:	220a      	movs	r2, #10
 8001bb6:	709a      	strb	r2, [r3, #2]
		TX_BUFFER[3] = 'Y';
 8001bb8:	4bb2      	ldr	r3, [pc, #712]	; (8001e84 <robotMachine+0x310>)
 8001bba:	2259      	movs	r2, #89	; 0x59
 8001bbc:	70da      	strb	r2, [r3, #3]
		TX_BUFFER[4] = actual.y + '0';
 8001bbe:	4bb2      	ldr	r3, [pc, #712]	; (8001e88 <robotMachine+0x314>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	3330      	adds	r3, #48	; 0x30
 8001bc6:	b2da      	uxtb	r2, r3
 8001bc8:	4bae      	ldr	r3, [pc, #696]	; (8001e84 <robotMachine+0x310>)
 8001bca:	711a      	strb	r2, [r3, #4]
		TX_BUFFER[5] = '\n';
 8001bcc:	4bad      	ldr	r3, [pc, #692]	; (8001e84 <robotMachine+0x310>)
 8001bce:	220a      	movs	r2, #10
 8001bd0:	715a      	strb	r2, [r3, #5]
		HAL_UART_Transmit(&huart1, TX_BUFFER, 6, 100);
 8001bd2:	2364      	movs	r3, #100	; 0x64
 8001bd4:	2206      	movs	r2, #6
 8001bd6:	49ab      	ldr	r1, [pc, #684]	; (8001e84 <robotMachine+0x310>)
 8001bd8:	48ac      	ldr	r0, [pc, #688]	; (8001e8c <robotMachine+0x318>)
 8001bda:	f004 fe82 	bl	80068e2 <HAL_UART_Transmit>
		Map[actual.x][actual.y].visitado++;
 8001bde:	4baa      	ldr	r3, [pc, #680]	; (8001e88 <robotMachine+0x314>)
 8001be0:	6819      	ldr	r1, [r3, #0]
 8001be2:	4ba9      	ldr	r3, [pc, #676]	; (8001e88 <robotMachine+0x314>)
 8001be4:	6858      	ldr	r0, [r3, #4]
 8001be6:	4caa      	ldr	r4, [pc, #680]	; (8001e90 <robotMachine+0x31c>)
 8001be8:	4602      	mov	r2, r0
 8001bea:	0052      	lsls	r2, r2, #1
 8001bec:	4402      	add	r2, r0
 8001bee:	00d3      	lsls	r3, r2, #3
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	440b      	add	r3, r1
 8001bf8:	01db      	lsls	r3, r3, #7
 8001bfa:	4413      	add	r3, r2
 8001bfc:	4423      	add	r3, r4
 8001bfe:	3310      	adds	r3, #16
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	1c5c      	adds	r4, r3, #1
 8001c04:	4da2      	ldr	r5, [pc, #648]	; (8001e90 <robotMachine+0x31c>)
 8001c06:	4602      	mov	r2, r0
 8001c08:	0052      	lsls	r2, r2, #1
 8001c0a:	4402      	add	r2, r0
 8001c0c:	00d3      	lsls	r3, r2, #3
 8001c0e:	461a      	mov	r2, r3
 8001c10:	460b      	mov	r3, r1
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	440b      	add	r3, r1
 8001c16:	01db      	lsls	r3, r3, #7
 8001c18:	4413      	add	r3, r2
 8001c1a:	442b      	add	r3, r5
 8001c1c:	3310      	adds	r3, #16
 8001c1e:	601c      	str	r4, [r3, #0]
		if (Map[actual.x][actual.y].visitado == 1) {
 8001c20:	4b99      	ldr	r3, [pc, #612]	; (8001e88 <robotMachine+0x314>)
 8001c22:	6819      	ldr	r1, [r3, #0]
 8001c24:	4b98      	ldr	r3, [pc, #608]	; (8001e88 <robotMachine+0x314>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	4899      	ldr	r0, [pc, #612]	; (8001e90 <robotMachine+0x31c>)
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	0052      	lsls	r2, r2, #1
 8001c2e:	441a      	add	r2, r3
 8001c30:	00d3      	lsls	r3, r2, #3
 8001c32:	461a      	mov	r2, r3
 8001c34:	460b      	mov	r3, r1
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	440b      	add	r3, r1
 8001c3a:	01db      	lsls	r3, r3, #7
 8001c3c:	4413      	add	r3, r2
 8001c3e:	4403      	add	r3, r0
 8001c40:	3310      	adds	r3, #16
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	f040 80bf 	bne.w	8001dc8 <robotMachine+0x254>
			runMotor(OFF, MOTOR_A);
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	2005      	movs	r0, #5
 8001c4e:	f001 fdd1 	bl	80037f4 <runMotor>
			runMotor(OFF, MOTOR_B);
 8001c52:	2101      	movs	r1, #1
 8001c54:	2005      	movs	r0, #5
 8001c56:	f001 fdcd 	bl	80037f4 <runMotor>
			CreateNode(actual.x, actual.y);
 8001c5a:	4b8b      	ldr	r3, [pc, #556]	; (8001e88 <robotMachine+0x314>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a8a      	ldr	r2, [pc, #552]	; (8001e88 <robotMachine+0x314>)
 8001c60:	6852      	ldr	r2, [r2, #4]
 8001c62:	4611      	mov	r1, r2
 8001c64:	4618      	mov	r0, r3
 8001c66:	f001 f95f 	bl	8002f28 <CreateNode>
			TX_BUFFER[0] = 'D';
 8001c6a:	4b86      	ldr	r3, [pc, #536]	; (8001e84 <robotMachine+0x310>)
 8001c6c:	2244      	movs	r2, #68	; 0x44
 8001c6e:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, TX_BUFFER, 1, 100);
 8001c70:	2364      	movs	r3, #100	; 0x64
 8001c72:	2201      	movs	r2, #1
 8001c74:	4983      	ldr	r1, [pc, #524]	; (8001e84 <robotMachine+0x310>)
 8001c76:	4885      	ldr	r0, [pc, #532]	; (8001e8c <robotMachine+0x318>)
 8001c78:	f004 fe33 	bl	80068e2 <HAL_UART_Transmit>
			intUartSend(Sensors[1]);
 8001c7c:	4b85      	ldr	r3, [pc, #532]	; (8001e94 <robotMachine+0x320>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff f9f5 	bl	8001070 <__aeabi_f2iz>
 8001c86:	4603      	mov	r3, r0
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff fc8f 	bl	80015ac <intUartSend>
			TX_BUFFER[0] = 'C';
 8001c8e:	4b7d      	ldr	r3, [pc, #500]	; (8001e84 <robotMachine+0x310>)
 8001c90:	2243      	movs	r2, #67	; 0x43
 8001c92:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, TX_BUFFER, 1, 100);
 8001c94:	2364      	movs	r3, #100	; 0x64
 8001c96:	2201      	movs	r2, #1
 8001c98:	497a      	ldr	r1, [pc, #488]	; (8001e84 <robotMachine+0x310>)
 8001c9a:	487c      	ldr	r0, [pc, #496]	; (8001e8c <robotMachine+0x318>)
 8001c9c:	f004 fe21 	bl	80068e2 <HAL_UART_Transmit>
			intUartSend(Sensors[2]);
 8001ca0:	4b7c      	ldr	r3, [pc, #496]	; (8001e94 <robotMachine+0x320>)
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff f9e3 	bl	8001070 <__aeabi_f2iz>
 8001caa:	4603      	mov	r3, r0
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff fc7d 	bl	80015ac <intUartSend>
			TX_BUFFER[0] = 'I';
 8001cb2:	4b74      	ldr	r3, [pc, #464]	; (8001e84 <robotMachine+0x310>)
 8001cb4:	2249      	movs	r2, #73	; 0x49
 8001cb6:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, TX_BUFFER, 1, 100);
 8001cb8:	2364      	movs	r3, #100	; 0x64
 8001cba:	2201      	movs	r2, #1
 8001cbc:	4971      	ldr	r1, [pc, #452]	; (8001e84 <robotMachine+0x310>)
 8001cbe:	4873      	ldr	r0, [pc, #460]	; (8001e8c <robotMachine+0x318>)
 8001cc0:	f004 fe0f 	bl	80068e2 <HAL_UART_Transmit>
			intUartSend(Sensors[3]);
 8001cc4:	4b73      	ldr	r3, [pc, #460]	; (8001e94 <robotMachine+0x320>)
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff f9d1 	bl	8001070 <__aeabi_f2iz>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff fc6b 	bl	80015ac <intUartSend>
			TX_BUFFER[0] = 'D';
 8001cd6:	4b6b      	ldr	r3, [pc, #428]	; (8001e84 <robotMachine+0x310>)
 8001cd8:	2244      	movs	r2, #68	; 0x44
 8001cda:	701a      	strb	r2, [r3, #0]
			TX_BUFFER[1] = Map[actual.x][actual.y].Lados[DERECHA] + '0';
 8001cdc:	4b6a      	ldr	r3, [pc, #424]	; (8001e88 <robotMachine+0x314>)
 8001cde:	6819      	ldr	r1, [r3, #0]
 8001ce0:	4b69      	ldr	r3, [pc, #420]	; (8001e88 <robotMachine+0x314>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	486a      	ldr	r0, [pc, #424]	; (8001e90 <robotMachine+0x31c>)
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	0052      	lsls	r2, r2, #1
 8001cea:	441a      	add	r2, r3
 8001cec:	00d3      	lsls	r3, r2, #3
 8001cee:	461a      	mov	r2, r3
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	440b      	add	r3, r1
 8001cf6:	01db      	lsls	r3, r3, #7
 8001cf8:	4413      	add	r3, r2
 8001cfa:	4403      	add	r3, r0
 8001cfc:	330c      	adds	r3, #12
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	3330      	adds	r3, #48	; 0x30
 8001d04:	b2da      	uxtb	r2, r3
 8001d06:	4b5f      	ldr	r3, [pc, #380]	; (8001e84 <robotMachine+0x310>)
 8001d08:	705a      	strb	r2, [r3, #1]
			TX_BUFFER[2] = '\n';
 8001d0a:	4b5e      	ldr	r3, [pc, #376]	; (8001e84 <robotMachine+0x310>)
 8001d0c:	220a      	movs	r2, #10
 8001d0e:	709a      	strb	r2, [r3, #2]
			TX_BUFFER[3] = 'C';
 8001d10:	4b5c      	ldr	r3, [pc, #368]	; (8001e84 <robotMachine+0x310>)
 8001d12:	2243      	movs	r2, #67	; 0x43
 8001d14:	70da      	strb	r2, [r3, #3]
			TX_BUFFER[4] = Map[actual.x][actual.y].Lados[ADELANTE] + '0';
 8001d16:	4b5c      	ldr	r3, [pc, #368]	; (8001e88 <robotMachine+0x314>)
 8001d18:	6819      	ldr	r1, [r3, #0]
 8001d1a:	4b5b      	ldr	r3, [pc, #364]	; (8001e88 <robotMachine+0x314>)
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	485c      	ldr	r0, [pc, #368]	; (8001e90 <robotMachine+0x31c>)
 8001d20:	461a      	mov	r2, r3
 8001d22:	0052      	lsls	r2, r2, #1
 8001d24:	441a      	add	r2, r3
 8001d26:	00d3      	lsls	r3, r2, #3
 8001d28:	461a      	mov	r2, r3
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	440b      	add	r3, r1
 8001d30:	01db      	lsls	r3, r3, #7
 8001d32:	4413      	add	r3, r2
 8001d34:	4403      	add	r3, r0
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	3330      	adds	r3, #48	; 0x30
 8001d3c:	b2da      	uxtb	r2, r3
 8001d3e:	4b51      	ldr	r3, [pc, #324]	; (8001e84 <robotMachine+0x310>)
 8001d40:	711a      	strb	r2, [r3, #4]
			TX_BUFFER[5] = '\n';
 8001d42:	4b50      	ldr	r3, [pc, #320]	; (8001e84 <robotMachine+0x310>)
 8001d44:	220a      	movs	r2, #10
 8001d46:	715a      	strb	r2, [r3, #5]
			TX_BUFFER[6] = 'I';
 8001d48:	4b4e      	ldr	r3, [pc, #312]	; (8001e84 <robotMachine+0x310>)
 8001d4a:	2249      	movs	r2, #73	; 0x49
 8001d4c:	719a      	strb	r2, [r3, #6]
			TX_BUFFER[7] = Map[actual.x][actual.y].Lados[IZQUIERDA] + '0';
 8001d4e:	4b4e      	ldr	r3, [pc, #312]	; (8001e88 <robotMachine+0x314>)
 8001d50:	6819      	ldr	r1, [r3, #0]
 8001d52:	4b4d      	ldr	r3, [pc, #308]	; (8001e88 <robotMachine+0x314>)
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	484e      	ldr	r0, [pc, #312]	; (8001e90 <robotMachine+0x31c>)
 8001d58:	461a      	mov	r2, r3
 8001d5a:	0052      	lsls	r2, r2, #1
 8001d5c:	441a      	add	r2, r3
 8001d5e:	00d3      	lsls	r3, r2, #3
 8001d60:	461a      	mov	r2, r3
 8001d62:	460b      	mov	r3, r1
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	440b      	add	r3, r1
 8001d68:	01db      	lsls	r3, r3, #7
 8001d6a:	4413      	add	r3, r2
 8001d6c:	4403      	add	r3, r0
 8001d6e:	3304      	adds	r3, #4
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	3330      	adds	r3, #48	; 0x30
 8001d76:	b2da      	uxtb	r2, r3
 8001d78:	4b42      	ldr	r3, [pc, #264]	; (8001e84 <robotMachine+0x310>)
 8001d7a:	71da      	strb	r2, [r3, #7]
			TX_BUFFER[8] = '\n';
 8001d7c:	4b41      	ldr	r3, [pc, #260]	; (8001e84 <robotMachine+0x310>)
 8001d7e:	220a      	movs	r2, #10
 8001d80:	721a      	strb	r2, [r3, #8]
			TX_BUFFER[9] = 'A';
 8001d82:	4b40      	ldr	r3, [pc, #256]	; (8001e84 <robotMachine+0x310>)
 8001d84:	2241      	movs	r2, #65	; 0x41
 8001d86:	725a      	strb	r2, [r3, #9]
			TX_BUFFER[10] = Map[actual.x][actual.y].Lados[ATRAS] + '0';
 8001d88:	4b3f      	ldr	r3, [pc, #252]	; (8001e88 <robotMachine+0x314>)
 8001d8a:	6819      	ldr	r1, [r3, #0]
 8001d8c:	4b3e      	ldr	r3, [pc, #248]	; (8001e88 <robotMachine+0x314>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	483f      	ldr	r0, [pc, #252]	; (8001e90 <robotMachine+0x31c>)
 8001d92:	461a      	mov	r2, r3
 8001d94:	0052      	lsls	r2, r2, #1
 8001d96:	441a      	add	r2, r3
 8001d98:	00d3      	lsls	r3, r2, #3
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	440b      	add	r3, r1
 8001da2:	01db      	lsls	r3, r3, #7
 8001da4:	4413      	add	r3, r2
 8001da6:	4403      	add	r3, r0
 8001da8:	3308      	adds	r3, #8
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	3330      	adds	r3, #48	; 0x30
 8001db0:	b2da      	uxtb	r2, r3
 8001db2:	4b34      	ldr	r3, [pc, #208]	; (8001e84 <robotMachine+0x310>)
 8001db4:	729a      	strb	r2, [r3, #10]
			TX_BUFFER[11] = '\n';
 8001db6:	4b33      	ldr	r3, [pc, #204]	; (8001e84 <robotMachine+0x310>)
 8001db8:	220a      	movs	r2, #10
 8001dba:	72da      	strb	r2, [r3, #11]
			HAL_UART_Transmit(&huart1, TX_BUFFER, 12, 100);
 8001dbc:	2364      	movs	r3, #100	; 0x64
 8001dbe:	220c      	movs	r2, #12
 8001dc0:	4930      	ldr	r1, [pc, #192]	; (8001e84 <robotMachine+0x310>)
 8001dc2:	4832      	ldr	r0, [pc, #200]	; (8001e8c <robotMachine+0x318>)
 8001dc4:	f004 fd8d 	bl	80068e2 <HAL_UART_Transmit>
		TX_BUFFER[0] = 'D';
 8001dc8:	4b2e      	ldr	r3, [pc, #184]	; (8001e84 <robotMachine+0x310>)
 8001dca:	2244      	movs	r2, #68	; 0x44
 8001dcc:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = Map[actual.x][actual.y].Lados[DERECHA] + '0';
 8001dce:	4b2e      	ldr	r3, [pc, #184]	; (8001e88 <robotMachine+0x314>)
 8001dd0:	6819      	ldr	r1, [r3, #0]
 8001dd2:	4b2d      	ldr	r3, [pc, #180]	; (8001e88 <robotMachine+0x314>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	482e      	ldr	r0, [pc, #184]	; (8001e90 <robotMachine+0x31c>)
 8001dd8:	461a      	mov	r2, r3
 8001dda:	0052      	lsls	r2, r2, #1
 8001ddc:	441a      	add	r2, r3
 8001dde:	00d3      	lsls	r3, r2, #3
 8001de0:	461a      	mov	r2, r3
 8001de2:	460b      	mov	r3, r1
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	440b      	add	r3, r1
 8001de8:	01db      	lsls	r3, r3, #7
 8001dea:	4413      	add	r3, r2
 8001dec:	4403      	add	r3, r0
 8001dee:	330c      	adds	r3, #12
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	3330      	adds	r3, #48	; 0x30
 8001df6:	b2da      	uxtb	r2, r3
 8001df8:	4b22      	ldr	r3, [pc, #136]	; (8001e84 <robotMachine+0x310>)
 8001dfa:	705a      	strb	r2, [r3, #1]
		TX_BUFFER[2] = '\n';
 8001dfc:	4b21      	ldr	r3, [pc, #132]	; (8001e84 <robotMachine+0x310>)
 8001dfe:	220a      	movs	r2, #10
 8001e00:	709a      	strb	r2, [r3, #2]
		TX_BUFFER[3] = 'C';
 8001e02:	4b20      	ldr	r3, [pc, #128]	; (8001e84 <robotMachine+0x310>)
 8001e04:	2243      	movs	r2, #67	; 0x43
 8001e06:	70da      	strb	r2, [r3, #3]
		TX_BUFFER[4] = Map[actual.x][actual.y].Lados[ADELANTE] + '0';
 8001e08:	4b1f      	ldr	r3, [pc, #124]	; (8001e88 <robotMachine+0x314>)
 8001e0a:	6819      	ldr	r1, [r3, #0]
 8001e0c:	4b1e      	ldr	r3, [pc, #120]	; (8001e88 <robotMachine+0x314>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	481f      	ldr	r0, [pc, #124]	; (8001e90 <robotMachine+0x31c>)
 8001e12:	461a      	mov	r2, r3
 8001e14:	0052      	lsls	r2, r2, #1
 8001e16:	441a      	add	r2, r3
 8001e18:	00d3      	lsls	r3, r2, #3
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	440b      	add	r3, r1
 8001e22:	01db      	lsls	r3, r3, #7
 8001e24:	4413      	add	r3, r2
 8001e26:	4403      	add	r3, r0
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	3330      	adds	r3, #48	; 0x30
 8001e2e:	b2da      	uxtb	r2, r3
 8001e30:	4b14      	ldr	r3, [pc, #80]	; (8001e84 <robotMachine+0x310>)
 8001e32:	711a      	strb	r2, [r3, #4]
		TX_BUFFER[5] = '\n';
 8001e34:	4b13      	ldr	r3, [pc, #76]	; (8001e84 <robotMachine+0x310>)
 8001e36:	220a      	movs	r2, #10
 8001e38:	715a      	strb	r2, [r3, #5]
		TX_BUFFER[6] = 'I';
 8001e3a:	4b12      	ldr	r3, [pc, #72]	; (8001e84 <robotMachine+0x310>)
 8001e3c:	2249      	movs	r2, #73	; 0x49
 8001e3e:	719a      	strb	r2, [r3, #6]
		TX_BUFFER[7] = Map[actual.x][actual.y].Lados[IZQUIERDA] + '0';
 8001e40:	4b11      	ldr	r3, [pc, #68]	; (8001e88 <robotMachine+0x314>)
 8001e42:	6819      	ldr	r1, [r3, #0]
 8001e44:	4b10      	ldr	r3, [pc, #64]	; (8001e88 <robotMachine+0x314>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	4811      	ldr	r0, [pc, #68]	; (8001e90 <robotMachine+0x31c>)
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	0052      	lsls	r2, r2, #1
 8001e4e:	441a      	add	r2, r3
 8001e50:	00d3      	lsls	r3, r2, #3
 8001e52:	461a      	mov	r2, r3
 8001e54:	460b      	mov	r3, r1
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	440b      	add	r3, r1
 8001e5a:	01db      	lsls	r3, r3, #7
 8001e5c:	4413      	add	r3, r2
 8001e5e:	4403      	add	r3, r0
 8001e60:	3304      	adds	r3, #4
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	3330      	adds	r3, #48	; 0x30
 8001e68:	b2da      	uxtb	r2, r3
 8001e6a:	4b06      	ldr	r3, [pc, #24]	; (8001e84 <robotMachine+0x310>)
 8001e6c:	71da      	strb	r2, [r3, #7]
		TX_BUFFER[8] = '\n';
 8001e6e:	4b05      	ldr	r3, [pc, #20]	; (8001e84 <robotMachine+0x310>)
 8001e70:	220a      	movs	r2, #10
 8001e72:	721a      	strb	r2, [r3, #8]
		TX_BUFFER[9] = 'A';
 8001e74:	4b03      	ldr	r3, [pc, #12]	; (8001e84 <robotMachine+0x310>)
 8001e76:	2241      	movs	r2, #65	; 0x41
 8001e78:	725a      	strb	r2, [r3, #9]
		TX_BUFFER[10] = Map[actual.x][actual.y].Lados[ATRAS] + '0';
 8001e7a:	4b03      	ldr	r3, [pc, #12]	; (8001e88 <robotMachine+0x314>)
 8001e7c:	6819      	ldr	r1, [r3, #0]
 8001e7e:	4b02      	ldr	r3, [pc, #8]	; (8001e88 <robotMachine+0x314>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	e009      	b.n	8001e98 <robotMachine+0x324>
 8001e84:	20001214 	.word	0x20001214
 8001e88:	200012a8 	.word	0x200012a8
 8001e8c:	20002bbc 	.word	0x20002bbc
 8001e90:	200012b8 	.word	0x200012b8
 8001e94:	200011d4 	.word	0x200011d4
 8001e98:	489b      	ldr	r0, [pc, #620]	; (8002108 <robotMachine+0x594>)
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	0052      	lsls	r2, r2, #1
 8001e9e:	441a      	add	r2, r3
 8001ea0:	00d3      	lsls	r3, r2, #3
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	440b      	add	r3, r1
 8001eaa:	01db      	lsls	r3, r3, #7
 8001eac:	4413      	add	r3, r2
 8001eae:	4403      	add	r3, r0
 8001eb0:	3308      	adds	r3, #8
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	3330      	adds	r3, #48	; 0x30
 8001eb8:	b2da      	uxtb	r2, r3
 8001eba:	4b94      	ldr	r3, [pc, #592]	; (800210c <robotMachine+0x598>)
 8001ebc:	729a      	strb	r2, [r3, #10]
		TX_BUFFER[11] = '\n';
 8001ebe:	4b93      	ldr	r3, [pc, #588]	; (800210c <robotMachine+0x598>)
 8001ec0:	220a      	movs	r2, #10
 8001ec2:	72da      	strb	r2, [r3, #11]
		HAL_UART_Transmit(&huart1, TX_BUFFER, 12, 100);
 8001ec4:	2364      	movs	r3, #100	; 0x64
 8001ec6:	220c      	movs	r2, #12
 8001ec8:	4990      	ldr	r1, [pc, #576]	; (800210c <robotMachine+0x598>)
 8001eca:	4891      	ldr	r0, [pc, #580]	; (8002110 <robotMachine+0x59c>)
 8001ecc:	f004 fd09 	bl	80068e2 <HAL_UART_Transmit>
		valueCNY = Sensors[0];
 8001ed0:	4b90      	ldr	r3, [pc, #576]	; (8002114 <robotMachine+0x5a0>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff f8cb 	bl	8001070 <__aeabi_f2iz>
 8001eda:	4603      	mov	r3, r0
 8001edc:	4a8e      	ldr	r2, [pc, #568]	; (8002118 <robotMachine+0x5a4>)
 8001ede:	6013      	str	r3, [r2, #0]
		if (valueCNY == BLANCO) {
 8001ee0:	4b8d      	ldr	r3, [pc, #564]	; (8002118 <robotMachine+0x5a4>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d116      	bne.n	8001f16 <robotMachine+0x3a2>
			Map[actual.x][actual.y].final = 1;
 8001ee8:	4b8c      	ldr	r3, [pc, #560]	; (800211c <robotMachine+0x5a8>)
 8001eea:	6819      	ldr	r1, [r3, #0]
 8001eec:	4b8b      	ldr	r3, [pc, #556]	; (800211c <robotMachine+0x5a8>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	4885      	ldr	r0, [pc, #532]	; (8002108 <robotMachine+0x594>)
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	0052      	lsls	r2, r2, #1
 8001ef6:	441a      	add	r2, r3
 8001ef8:	00d3      	lsls	r3, r2, #3
 8001efa:	461a      	mov	r2, r3
 8001efc:	460b      	mov	r3, r1
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	440b      	add	r3, r1
 8001f02:	01db      	lsls	r3, r3, #7
 8001f04:	4413      	add	r3, r2
 8001f06:	4403      	add	r3, r0
 8001f08:	3314      	adds	r3, #20
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	601a      	str	r2, [r3, #0]
			finishFlag = 1;
 8001f0e:	4b84      	ldr	r3, [pc, #528]	; (8002120 <robotMachine+0x5ac>)
 8001f10:	2201      	movs	r2, #1
 8001f12:	601a      	str	r2, [r3, #0]
		break;
 8001f14:	e0f6      	b.n	8002104 <robotMachine+0x590>
			Map[actual.x][actual.y].final = 0;
 8001f16:	4b81      	ldr	r3, [pc, #516]	; (800211c <robotMachine+0x5a8>)
 8001f18:	6819      	ldr	r1, [r3, #0]
 8001f1a:	4b80      	ldr	r3, [pc, #512]	; (800211c <robotMachine+0x5a8>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	487a      	ldr	r0, [pc, #488]	; (8002108 <robotMachine+0x594>)
 8001f20:	461a      	mov	r2, r3
 8001f22:	0052      	lsls	r2, r2, #1
 8001f24:	441a      	add	r2, r3
 8001f26:	00d3      	lsls	r3, r2, #3
 8001f28:	461a      	mov	r2, r3
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	440b      	add	r3, r1
 8001f30:	01db      	lsls	r3, r3, #7
 8001f32:	4413      	add	r3, r2
 8001f34:	4403      	add	r3, r0
 8001f36:	3314      	adds	r3, #20
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
			robotState = CHOOSING;
 8001f3c:	4b79      	ldr	r3, [pc, #484]	; (8002124 <robotMachine+0x5b0>)
 8001f3e:	2201      	movs	r2, #1
 8001f40:	601a      	str	r2, [r3, #0]
		break;
 8001f42:	e0df      	b.n	8002104 <robotMachine+0x590>
		movimiento = ChooseNextNode(actual.x, actual.y);
 8001f44:	4b75      	ldr	r3, [pc, #468]	; (800211c <robotMachine+0x5a8>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a74      	ldr	r2, [pc, #464]	; (800211c <robotMachine+0x5a8>)
 8001f4a:	6852      	ldr	r2, [r2, #4]
 8001f4c:	4611      	mov	r1, r2
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f000 fa44 	bl	80023dc <ChooseNextNode>
 8001f54:	4603      	mov	r3, r0
 8001f56:	4a74      	ldr	r2, [pc, #464]	; (8002128 <robotMachine+0x5b4>)
 8001f58:	6013      	str	r3, [r2, #0]
		TX_BUFFER[0] = 'M';
 8001f5a:	4b6c      	ldr	r3, [pc, #432]	; (800210c <robotMachine+0x598>)
 8001f5c:	224d      	movs	r2, #77	; 0x4d
 8001f5e:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = movimiento + '0';
 8001f60:	4b71      	ldr	r3, [pc, #452]	; (8002128 <robotMachine+0x5b4>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	3330      	adds	r3, #48	; 0x30
 8001f68:	b2da      	uxtb	r2, r3
 8001f6a:	4b68      	ldr	r3, [pc, #416]	; (800210c <robotMachine+0x598>)
 8001f6c:	705a      	strb	r2, [r3, #1]
		TX_BUFFER[2] = '\n';
 8001f6e:	4b67      	ldr	r3, [pc, #412]	; (800210c <robotMachine+0x598>)
 8001f70:	220a      	movs	r2, #10
 8001f72:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart1, TX_BUFFER, 3, 100);
 8001f74:	2364      	movs	r3, #100	; 0x64
 8001f76:	2203      	movs	r2, #3
 8001f78:	4964      	ldr	r1, [pc, #400]	; (800210c <robotMachine+0x598>)
 8001f7a:	4865      	ldr	r0, [pc, #404]	; (8002110 <robotMachine+0x59c>)
 8001f7c:	f004 fcb1 	bl	80068e2 <HAL_UART_Transmit>
		if (movimiento == IZQUIERDA) {
 8001f80:	4b69      	ldr	r3, [pc, #420]	; (8002128 <robotMachine+0x5b4>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d138      	bne.n	8001ffa <robotMachine+0x486>
			if (Map[actual.x][actual.y].Lados[direcciones[ATRAS]] != 1) {
 8001f88:	4b64      	ldr	r3, [pc, #400]	; (800211c <robotMachine+0x5a8>)
 8001f8a:	6819      	ldr	r1, [r3, #0]
 8001f8c:	4b63      	ldr	r3, [pc, #396]	; (800211c <robotMachine+0x5a8>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	4a66      	ldr	r2, [pc, #408]	; (800212c <robotMachine+0x5b8>)
 8001f92:	6890      	ldr	r0, [r2, #8]
 8001f94:	4c5c      	ldr	r4, [pc, #368]	; (8002108 <robotMachine+0x594>)
 8001f96:	461a      	mov	r2, r3
 8001f98:	0052      	lsls	r2, r2, #1
 8001f9a:	441a      	add	r2, r3
 8001f9c:	0053      	lsls	r3, r2, #1
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	440b      	add	r3, r1
 8001fa6:	015b      	lsls	r3, r3, #5
 8001fa8:	4413      	add	r3, r2
 8001faa:	4403      	add	r3, r0
 8001fac:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d014      	beq.n	8001fde <robotMachine+0x46a>
				Map[actual.x][actual.y].Lados[direcciones[ATRAS]] = 2;
 8001fb4:	4b59      	ldr	r3, [pc, #356]	; (800211c <robotMachine+0x5a8>)
 8001fb6:	6819      	ldr	r1, [r3, #0]
 8001fb8:	4b58      	ldr	r3, [pc, #352]	; (800211c <robotMachine+0x5a8>)
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	4a5b      	ldr	r2, [pc, #364]	; (800212c <robotMachine+0x5b8>)
 8001fbe:	6890      	ldr	r0, [r2, #8]
 8001fc0:	4c51      	ldr	r4, [pc, #324]	; (8002108 <robotMachine+0x594>)
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	0052      	lsls	r2, r2, #1
 8001fc6:	441a      	add	r2, r3
 8001fc8:	0053      	lsls	r3, r2, #1
 8001fca:	461a      	mov	r2, r3
 8001fcc:	460b      	mov	r3, r1
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	440b      	add	r3, r1
 8001fd2:	015b      	lsls	r3, r3, #5
 8001fd4:	4413      	add	r3, r2
 8001fd6:	4403      	add	r3, r0
 8001fd8:	2202      	movs	r2, #2
 8001fda:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
			moveNode(direcciones[IZQUIERDA]);
 8001fde:	4b53      	ldr	r3, [pc, #332]	; (800212c <robotMachine+0x5b8>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f000 fe1e 	bl	8002c24 <moveNode>
			rotateAxis(IZQUIERDA);
 8001fe8:	2001      	movs	r0, #1
 8001fea:	f001 f815 	bl	8003018 <rotateAxis>
			counter--;
 8001fee:	4b50      	ldr	r3, [pc, #320]	; (8002130 <robotMachine+0x5bc>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	4a4e      	ldr	r2, [pc, #312]	; (8002130 <robotMachine+0x5bc>)
 8001ff6:	6013      	str	r3, [r2, #0]
 8001ff8:	e055      	b.n	80020a6 <robotMachine+0x532>
		} else if (movimiento == DERECHA) {
 8001ffa:	4b4b      	ldr	r3, [pc, #300]	; (8002128 <robotMachine+0x5b4>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	2b03      	cmp	r3, #3
 8002000:	d138      	bne.n	8002074 <robotMachine+0x500>
			if (Map[actual.x][actual.y].Lados[direcciones[ATRAS]] != 1) {
 8002002:	4b46      	ldr	r3, [pc, #280]	; (800211c <robotMachine+0x5a8>)
 8002004:	6819      	ldr	r1, [r3, #0]
 8002006:	4b45      	ldr	r3, [pc, #276]	; (800211c <robotMachine+0x5a8>)
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	4a48      	ldr	r2, [pc, #288]	; (800212c <robotMachine+0x5b8>)
 800200c:	6890      	ldr	r0, [r2, #8]
 800200e:	4c3e      	ldr	r4, [pc, #248]	; (8002108 <robotMachine+0x594>)
 8002010:	461a      	mov	r2, r3
 8002012:	0052      	lsls	r2, r2, #1
 8002014:	441a      	add	r2, r3
 8002016:	0053      	lsls	r3, r2, #1
 8002018:	461a      	mov	r2, r3
 800201a:	460b      	mov	r3, r1
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	440b      	add	r3, r1
 8002020:	015b      	lsls	r3, r3, #5
 8002022:	4413      	add	r3, r2
 8002024:	4403      	add	r3, r0
 8002026:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d014      	beq.n	8002058 <robotMachine+0x4e4>
				Map[actual.x][actual.y].Lados[direcciones[ATRAS]] = 2;
 800202e:	4b3b      	ldr	r3, [pc, #236]	; (800211c <robotMachine+0x5a8>)
 8002030:	6819      	ldr	r1, [r3, #0]
 8002032:	4b3a      	ldr	r3, [pc, #232]	; (800211c <robotMachine+0x5a8>)
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	4a3d      	ldr	r2, [pc, #244]	; (800212c <robotMachine+0x5b8>)
 8002038:	6890      	ldr	r0, [r2, #8]
 800203a:	4c33      	ldr	r4, [pc, #204]	; (8002108 <robotMachine+0x594>)
 800203c:	461a      	mov	r2, r3
 800203e:	0052      	lsls	r2, r2, #1
 8002040:	441a      	add	r2, r3
 8002042:	0053      	lsls	r3, r2, #1
 8002044:	461a      	mov	r2, r3
 8002046:	460b      	mov	r3, r1
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	440b      	add	r3, r1
 800204c:	015b      	lsls	r3, r3, #5
 800204e:	4413      	add	r3, r2
 8002050:	4403      	add	r3, r0
 8002052:	2202      	movs	r2, #2
 8002054:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
			moveNode(direcciones[DERECHA]);
 8002058:	4b34      	ldr	r3, [pc, #208]	; (800212c <robotMachine+0x5b8>)
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	4618      	mov	r0, r3
 800205e:	f000 fde1 	bl	8002c24 <moveNode>
			rotateAxis(DERECHA);
 8002062:	2003      	movs	r0, #3
 8002064:	f000 ffd8 	bl	8003018 <rotateAxis>
			counter++;
 8002068:	4b31      	ldr	r3, [pc, #196]	; (8002130 <robotMachine+0x5bc>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	3301      	adds	r3, #1
 800206e:	4a30      	ldr	r2, [pc, #192]	; (8002130 <robotMachine+0x5bc>)
 8002070:	6013      	str	r3, [r2, #0]
 8002072:	e018      	b.n	80020a6 <robotMachine+0x532>
		} else if (movimiento == ATRAS) {
 8002074:	4b2c      	ldr	r3, [pc, #176]	; (8002128 <robotMachine+0x5b4>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2b02      	cmp	r3, #2
 800207a:	d114      	bne.n	80020a6 <robotMachine+0x532>
			counter++;
 800207c:	4b2c      	ldr	r3, [pc, #176]	; (8002130 <robotMachine+0x5bc>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	3301      	adds	r3, #1
 8002082:	4a2b      	ldr	r2, [pc, #172]	; (8002130 <robotMachine+0x5bc>)
 8002084:	6013      	str	r3, [r2, #0]
			counter++;
 8002086:	4b2a      	ldr	r3, [pc, #168]	; (8002130 <robotMachine+0x5bc>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	3301      	adds	r3, #1
 800208c:	4a28      	ldr	r2, [pc, #160]	; (8002130 <robotMachine+0x5bc>)
 800208e:	6013      	str	r3, [r2, #0]
			moveNode(direcciones[ATRAS]);
 8002090:	4b26      	ldr	r3, [pc, #152]	; (800212c <robotMachine+0x5b8>)
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	4618      	mov	r0, r3
 8002096:	f000 fdc5 	bl	8002c24 <moveNode>
			rotateAxis(DERECHA);
 800209a:	2003      	movs	r0, #3
 800209c:	f000 ffbc 	bl	8003018 <rotateAxis>
			rotateAxis(DERECHA);
 80020a0:	2003      	movs	r0, #3
 80020a2:	f000 ffb9 	bl	8003018 <rotateAxis>
		TX_BUFFER[0] = '*';
 80020a6:	4b19      	ldr	r3, [pc, #100]	; (800210c <robotMachine+0x598>)
 80020a8:	222a      	movs	r2, #42	; 0x2a
 80020aa:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = '*';
 80020ac:	4b17      	ldr	r3, [pc, #92]	; (800210c <robotMachine+0x598>)
 80020ae:	222a      	movs	r2, #42	; 0x2a
 80020b0:	705a      	strb	r2, [r3, #1]
		TX_BUFFER[2] = '\n';
 80020b2:	4b16      	ldr	r3, [pc, #88]	; (800210c <robotMachine+0x598>)
 80020b4:	220a      	movs	r2, #10
 80020b6:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart1, TX_BUFFER, 3, 100);
 80020b8:	2364      	movs	r3, #100	; 0x64
 80020ba:	2203      	movs	r2, #3
 80020bc:	4913      	ldr	r1, [pc, #76]	; (800210c <robotMachine+0x598>)
 80020be:	4814      	ldr	r0, [pc, #80]	; (8002110 <robotMachine+0x59c>)
 80020c0:	f004 fc0f 	bl	80068e2 <HAL_UART_Transmit>
		movimientoFlag = 0;
 80020c4:	4b1b      	ldr	r3, [pc, #108]	; (8002134 <robotMachine+0x5c0>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	601a      	str	r2, [r3, #0]
		ticksNow = HAL_GetTick();
 80020ca:	f002 f851 	bl	8004170 <HAL_GetTick>
 80020ce:	4603      	mov	r3, r0
 80020d0:	461a      	mov	r2, r3
 80020d2:	4b19      	ldr	r3, [pc, #100]	; (8002138 <robotMachine+0x5c4>)
 80020d4:	601a      	str	r2, [r3, #0]
		robotState = MOVING;
 80020d6:	4b13      	ldr	r3, [pc, #76]	; (8002124 <robotMachine+0x5b0>)
 80020d8:	2202      	movs	r2, #2
 80020da:	601a      	str	r2, [r3, #0]
		break;
 80020dc:	e012      	b.n	8002104 <robotMachine+0x590>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80020de:	2200      	movs	r2, #0
 80020e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020e4:	4815      	ldr	r0, [pc, #84]	; (800213c <robotMachine+0x5c8>)
 80020e6:	f003 f97a 	bl	80053de <HAL_GPIO_WritePin>
		movementMachine(movimiento);
 80020ea:	4b0f      	ldr	r3, [pc, #60]	; (8002128 <robotMachine+0x5b4>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f000 fdca 	bl	8002c88 <movementMachine>
		if (movimientoFlag == 1) {
 80020f4:	4b0f      	ldr	r3, [pc, #60]	; (8002134 <robotMachine+0x5c0>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d102      	bne.n	8002102 <robotMachine+0x58e>
			robotState = READING;
 80020fc:	4b09      	ldr	r3, [pc, #36]	; (8002124 <robotMachine+0x5b0>)
 80020fe:	2200      	movs	r2, #0
 8002100:	601a      	str	r2, [r3, #0]
		break;
 8002102:	bf00      	nop
}
 8002104:	bf00      	nop
 8002106:	bdb0      	pop	{r4, r5, r7, pc}
 8002108:	200012b8 	.word	0x200012b8
 800210c:	20001214 	.word	0x20001214
 8002110:	20002bbc 	.word	0x20002bbc
 8002114:	200011d4 	.word	0x200011d4
 8002118:	20001248 	.word	0x20001248
 800211c:	200012a8 	.word	0x200012a8
 8002120:	20001240 	.word	0x20001240
 8002124:	20001288 	.word	0x20001288
 8002128:	2000123c 	.word	0x2000123c
 800212c:	200011e4 	.word	0x200011e4
 8002130:	20001250 	.word	0x20001250
 8002134:	20001244 	.word	0x20001244
 8002138:	2000122c 	.word	0x2000122c
 800213c:	40011000 	.word	0x40011000

08002140 <runDirections>:

void runDirections(char moves[25]) {
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
	if (moves[m] == 'a') {
 8002148:	4b20      	ldr	r3, [pc, #128]	; (80021cc <runDirections+0x8c>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	461a      	mov	r2, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4413      	add	r3, r2
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	2b61      	cmp	r3, #97	; 0x61
 8002156:	d103      	bne.n	8002160 <runDirections+0x20>
		movementMachine(ADELANTE);
 8002158:	2000      	movs	r0, #0
 800215a:	f000 fd95 	bl	8002c88 <movementMachine>
 800215e:	e016      	b.n	800218e <runDirections+0x4e>
	} else if (moves[m] == 'd') {
 8002160:	4b1a      	ldr	r3, [pc, #104]	; (80021cc <runDirections+0x8c>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	461a      	mov	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4413      	add	r3, r2
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	2b64      	cmp	r3, #100	; 0x64
 800216e:	d103      	bne.n	8002178 <runDirections+0x38>
		movementMachine(DERECHA);
 8002170:	2003      	movs	r0, #3
 8002172:	f000 fd89 	bl	8002c88 <movementMachine>
 8002176:	e00a      	b.n	800218e <runDirections+0x4e>
	} else if (moves[m] == 'i') {
 8002178:	4b14      	ldr	r3, [pc, #80]	; (80021cc <runDirections+0x8c>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	461a      	mov	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4413      	add	r3, r2
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	2b69      	cmp	r3, #105	; 0x69
 8002186:	d102      	bne.n	800218e <runDirections+0x4e>
		movementMachine(IZQUIERDA);
 8002188:	2001      	movs	r0, #1
 800218a:	f000 fd7d 	bl	8002c88 <movementMachine>
	}/* else {
	 movementMachine(SUPER);
	 }*/
	TX_BUFFER[0] = moves[m];
 800218e:	4b0f      	ldr	r3, [pc, #60]	; (80021cc <runDirections+0x8c>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	461a      	mov	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4413      	add	r3, r2
 8002198:	781a      	ldrb	r2, [r3, #0]
 800219a:	4b0d      	ldr	r3, [pc, #52]	; (80021d0 <runDirections+0x90>)
 800219c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, TX_BUFFER, 1, 100);
 800219e:	2364      	movs	r3, #100	; 0x64
 80021a0:	2201      	movs	r2, #1
 80021a2:	490b      	ldr	r1, [pc, #44]	; (80021d0 <runDirections+0x90>)
 80021a4:	480b      	ldr	r0, [pc, #44]	; (80021d4 <runDirections+0x94>)
 80021a6:	f004 fb9c 	bl	80068e2 <HAL_UART_Transmit>
	if (movimientoFlag == 1) {
 80021aa:	4b0b      	ldr	r3, [pc, #44]	; (80021d8 <runDirections+0x98>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d107      	bne.n	80021c2 <runDirections+0x82>
		m++;
 80021b2:	4b06      	ldr	r3, [pc, #24]	; (80021cc <runDirections+0x8c>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	3301      	adds	r3, #1
 80021b8:	4a04      	ldr	r2, [pc, #16]	; (80021cc <runDirections+0x8c>)
 80021ba:	6013      	str	r3, [r2, #0]
		movimientoFlag = 0;
 80021bc:	4b06      	ldr	r3, [pc, #24]	; (80021d8 <runDirections+0x98>)
 80021be:	2200      	movs	r2, #0
 80021c0:	601a      	str	r2, [r3, #0]
	}
}
 80021c2:	bf00      	nop
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	20001234 	.word	0x20001234
 80021d0:	20001214 	.word	0x20001214
 80021d4:	20002bbc 	.word	0x20002bbc
 80021d8:	20001244 	.word	0x20001244

080021dc <addDirection>:

void addDirection(int x, int y) {
 80021dc:	b590      	push	{r4, r7, lr}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]

	if (Map[x][y].Lados[direcciones[ADELANTE]] != 1) {
 80021e6:	4b77      	ldr	r3, [pc, #476]	; (80023c4 <addDirection+0x1e8>)
 80021e8:	6818      	ldr	r0, [r3, #0]
 80021ea:	4c77      	ldr	r4, [pc, #476]	; (80023c8 <addDirection+0x1ec>)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	6879      	ldr	r1, [r7, #4]
 80021f0:	461a      	mov	r2, r3
 80021f2:	0052      	lsls	r2, r2, #1
 80021f4:	441a      	add	r2, r3
 80021f6:	0053      	lsls	r3, r2, #1
 80021f8:	461a      	mov	r2, r3
 80021fa:	460b      	mov	r3, r1
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	440b      	add	r3, r1
 8002200:	015b      	lsls	r3, r3, #5
 8002202:	4413      	add	r3, r2
 8002204:	4403      	add	r3, r0
 8002206:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d01b      	beq.n	8002246 <addDirection+0x6a>
		Map[x][y].Lados[direcciones[ADELANTE]] = 2;
 800220e:	4b6d      	ldr	r3, [pc, #436]	; (80023c4 <addDirection+0x1e8>)
 8002210:	6818      	ldr	r0, [r3, #0]
 8002212:	4c6d      	ldr	r4, [pc, #436]	; (80023c8 <addDirection+0x1ec>)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	6879      	ldr	r1, [r7, #4]
 8002218:	461a      	mov	r2, r3
 800221a:	0052      	lsls	r2, r2, #1
 800221c:	441a      	add	r2, r3
 800221e:	0053      	lsls	r3, r2, #1
 8002220:	461a      	mov	r2, r3
 8002222:	460b      	mov	r3, r1
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	440b      	add	r3, r1
 8002228:	015b      	lsls	r3, r3, #5
 800222a:	4413      	add	r3, r2
 800222c:	4403      	add	r3, r0
 800222e:	2202      	movs	r2, #2
 8002230:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
		moveNode(ADELANTE);
 8002234:	2000      	movs	r0, #0
 8002236:	f000 fcf5 	bl	8002c24 <moveNode>
		directions[directionsSize] = 'a';
 800223a:	4b64      	ldr	r3, [pc, #400]	; (80023cc <addDirection+0x1f0>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a64      	ldr	r2, [pc, #400]	; (80023d0 <addDirection+0x1f4>)
 8002240:	2161      	movs	r1, #97	; 0x61
 8002242:	54d1      	strb	r1, [r2, r3]
 8002244:	e064      	b.n	8002310 <addDirection+0x134>
	} else if (Map[x][y].Lados[direcciones[IZQUIERDA]] != 1) {
 8002246:	4b5f      	ldr	r3, [pc, #380]	; (80023c4 <addDirection+0x1e8>)
 8002248:	6858      	ldr	r0, [r3, #4]
 800224a:	4c5f      	ldr	r4, [pc, #380]	; (80023c8 <addDirection+0x1ec>)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	6879      	ldr	r1, [r7, #4]
 8002250:	461a      	mov	r2, r3
 8002252:	0052      	lsls	r2, r2, #1
 8002254:	441a      	add	r2, r3
 8002256:	0053      	lsls	r3, r2, #1
 8002258:	461a      	mov	r2, r3
 800225a:	460b      	mov	r3, r1
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	440b      	add	r3, r1
 8002260:	015b      	lsls	r3, r3, #5
 8002262:	4413      	add	r3, r2
 8002264:	4403      	add	r3, r0
 8002266:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d01e      	beq.n	80022ac <addDirection+0xd0>
		Map[x][y].Lados[direcciones[IZQUIERDA]] = 2;
 800226e:	4b55      	ldr	r3, [pc, #340]	; (80023c4 <addDirection+0x1e8>)
 8002270:	6858      	ldr	r0, [r3, #4]
 8002272:	4c55      	ldr	r4, [pc, #340]	; (80023c8 <addDirection+0x1ec>)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	6879      	ldr	r1, [r7, #4]
 8002278:	461a      	mov	r2, r3
 800227a:	0052      	lsls	r2, r2, #1
 800227c:	441a      	add	r2, r3
 800227e:	0053      	lsls	r3, r2, #1
 8002280:	461a      	mov	r2, r3
 8002282:	460b      	mov	r3, r1
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	440b      	add	r3, r1
 8002288:	015b      	lsls	r3, r3, #5
 800228a:	4413      	add	r3, r2
 800228c:	4403      	add	r3, r0
 800228e:	2202      	movs	r2, #2
 8002290:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
		moveNode(IZQUIERDA);
 8002294:	2001      	movs	r0, #1
 8002296:	f000 fcc5 	bl	8002c24 <moveNode>
		rotateAxis(IZQUIERDA);
 800229a:	2001      	movs	r0, #1
 800229c:	f000 febc 	bl	8003018 <rotateAxis>
		directions[directionsSize] = 'i';
 80022a0:	4b4a      	ldr	r3, [pc, #296]	; (80023cc <addDirection+0x1f0>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a4a      	ldr	r2, [pc, #296]	; (80023d0 <addDirection+0x1f4>)
 80022a6:	2169      	movs	r1, #105	; 0x69
 80022a8:	54d1      	strb	r1, [r2, r3]
 80022aa:	e031      	b.n	8002310 <addDirection+0x134>
	} else if (Map[x][y].Lados[direcciones[DERECHA]] != 1) {
 80022ac:	4b45      	ldr	r3, [pc, #276]	; (80023c4 <addDirection+0x1e8>)
 80022ae:	68d8      	ldr	r0, [r3, #12]
 80022b0:	4c45      	ldr	r4, [pc, #276]	; (80023c8 <addDirection+0x1ec>)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	6879      	ldr	r1, [r7, #4]
 80022b6:	461a      	mov	r2, r3
 80022b8:	0052      	lsls	r2, r2, #1
 80022ba:	441a      	add	r2, r3
 80022bc:	0053      	lsls	r3, r2, #1
 80022be:	461a      	mov	r2, r3
 80022c0:	460b      	mov	r3, r1
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	440b      	add	r3, r1
 80022c6:	015b      	lsls	r3, r3, #5
 80022c8:	4413      	add	r3, r2
 80022ca:	4403      	add	r3, r0
 80022cc:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d01d      	beq.n	8002310 <addDirection+0x134>
		Map[x][y].Lados[direcciones[DERECHA]] = 2;
 80022d4:	4b3b      	ldr	r3, [pc, #236]	; (80023c4 <addDirection+0x1e8>)
 80022d6:	68d8      	ldr	r0, [r3, #12]
 80022d8:	4c3b      	ldr	r4, [pc, #236]	; (80023c8 <addDirection+0x1ec>)
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	6879      	ldr	r1, [r7, #4]
 80022de:	461a      	mov	r2, r3
 80022e0:	0052      	lsls	r2, r2, #1
 80022e2:	441a      	add	r2, r3
 80022e4:	0053      	lsls	r3, r2, #1
 80022e6:	461a      	mov	r2, r3
 80022e8:	460b      	mov	r3, r1
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	440b      	add	r3, r1
 80022ee:	015b      	lsls	r3, r3, #5
 80022f0:	4413      	add	r3, r2
 80022f2:	4403      	add	r3, r0
 80022f4:	2202      	movs	r2, #2
 80022f6:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
		moveNode(DERECHA);
 80022fa:	2003      	movs	r0, #3
 80022fc:	f000 fc92 	bl	8002c24 <moveNode>
		rotateAxis(DERECHA);
 8002300:	2003      	movs	r0, #3
 8002302:	f000 fe89 	bl	8003018 <rotateAxis>
		directions[directionsSize] = 'd';
 8002306:	4b31      	ldr	r3, [pc, #196]	; (80023cc <addDirection+0x1f0>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a31      	ldr	r2, [pc, #196]	; (80023d0 <addDirection+0x1f4>)
 800230c:	2164      	movs	r1, #100	; 0x64
 800230e:	54d1      	strb	r1, [r2, r3]
	}
	intUartSend(Map[x][y].Lados[direcciones[ADELANTE]]);
 8002310:	4b2c      	ldr	r3, [pc, #176]	; (80023c4 <addDirection+0x1e8>)
 8002312:	6818      	ldr	r0, [r3, #0]
 8002314:	4c2c      	ldr	r4, [pc, #176]	; (80023c8 <addDirection+0x1ec>)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	6879      	ldr	r1, [r7, #4]
 800231a:	461a      	mov	r2, r3
 800231c:	0052      	lsls	r2, r2, #1
 800231e:	441a      	add	r2, r3
 8002320:	0053      	lsls	r3, r2, #1
 8002322:	461a      	mov	r2, r3
 8002324:	460b      	mov	r3, r1
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	440b      	add	r3, r1
 800232a:	015b      	lsls	r3, r3, #5
 800232c:	4413      	add	r3, r2
 800232e:	4403      	add	r3, r0
 8002330:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8002334:	4618      	mov	r0, r3
 8002336:	f7ff f939 	bl	80015ac <intUartSend>
	intUartSend(Map[x][y].Lados[direcciones[IZQUIERDA]]);
 800233a:	4b22      	ldr	r3, [pc, #136]	; (80023c4 <addDirection+0x1e8>)
 800233c:	6858      	ldr	r0, [r3, #4]
 800233e:	4c22      	ldr	r4, [pc, #136]	; (80023c8 <addDirection+0x1ec>)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	6879      	ldr	r1, [r7, #4]
 8002344:	461a      	mov	r2, r3
 8002346:	0052      	lsls	r2, r2, #1
 8002348:	441a      	add	r2, r3
 800234a:	0053      	lsls	r3, r2, #1
 800234c:	461a      	mov	r2, r3
 800234e:	460b      	mov	r3, r1
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	440b      	add	r3, r1
 8002354:	015b      	lsls	r3, r3, #5
 8002356:	4413      	add	r3, r2
 8002358:	4403      	add	r3, r0
 800235a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800235e:	4618      	mov	r0, r3
 8002360:	f7ff f924 	bl	80015ac <intUartSend>
	intUartSend(Map[x][y].Lados[direcciones[DERECHA]]);
 8002364:	4b17      	ldr	r3, [pc, #92]	; (80023c4 <addDirection+0x1e8>)
 8002366:	68d8      	ldr	r0, [r3, #12]
 8002368:	4c17      	ldr	r4, [pc, #92]	; (80023c8 <addDirection+0x1ec>)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	6879      	ldr	r1, [r7, #4]
 800236e:	461a      	mov	r2, r3
 8002370:	0052      	lsls	r2, r2, #1
 8002372:	441a      	add	r2, r3
 8002374:	0053      	lsls	r3, r2, #1
 8002376:	461a      	mov	r2, r3
 8002378:	460b      	mov	r3, r1
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	440b      	add	r3, r1
 800237e:	015b      	lsls	r3, r3, #5
 8002380:	4413      	add	r3, r2
 8002382:	4403      	add	r3, r0
 8002384:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8002388:	4618      	mov	r0, r3
 800238a:	f7ff f90f 	bl	80015ac <intUartSend>
	TX_BUFFER[0] = 'D';
 800238e:	4b11      	ldr	r3, [pc, #68]	; (80023d4 <addDirection+0x1f8>)
 8002390:	2244      	movs	r2, #68	; 0x44
 8002392:	701a      	strb	r2, [r3, #0]
	TX_BUFFER[1] = directions[directionsSize];
 8002394:	4b0d      	ldr	r3, [pc, #52]	; (80023cc <addDirection+0x1f0>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a0d      	ldr	r2, [pc, #52]	; (80023d0 <addDirection+0x1f4>)
 800239a:	5cd2      	ldrb	r2, [r2, r3]
 800239c:	4b0d      	ldr	r3, [pc, #52]	; (80023d4 <addDirection+0x1f8>)
 800239e:	705a      	strb	r2, [r3, #1]
	TX_BUFFER[2] = '\n';
 80023a0:	4b0c      	ldr	r3, [pc, #48]	; (80023d4 <addDirection+0x1f8>)
 80023a2:	220a      	movs	r2, #10
 80023a4:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(&huart1, TX_BUFFER, 3, 100);
 80023a6:	2364      	movs	r3, #100	; 0x64
 80023a8:	2203      	movs	r2, #3
 80023aa:	490a      	ldr	r1, [pc, #40]	; (80023d4 <addDirection+0x1f8>)
 80023ac:	480a      	ldr	r0, [pc, #40]	; (80023d8 <addDirection+0x1fc>)
 80023ae:	f004 fa98 	bl	80068e2 <HAL_UART_Transmit>
	directionsSize++;
 80023b2:	4b06      	ldr	r3, [pc, #24]	; (80023cc <addDirection+0x1f0>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	3301      	adds	r3, #1
 80023b8:	4a04      	ldr	r2, [pc, #16]	; (80023cc <addDirection+0x1f0>)
 80023ba:	6013      	str	r3, [r2, #0]

}
 80023bc:	bf00      	nop
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd90      	pop	{r4, r7, pc}
 80023c4:	200011e4 	.word	0x200011e4
 80023c8:	200012b8 	.word	0x200012b8
 80023cc:	20001238 	.word	0x20001238
 80023d0:	2000128c 	.word	0x2000128c
 80023d4:	20001214 	.word	0x20001214
 80023d8:	20002bbc 	.word	0x20002bbc

080023dc <ChooseNextNode>:

int ChooseNextNode(int x, int y) {
 80023dc:	b590      	push	{r4, r7, lr}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
	if (Map[x][y].Lados[direcciones[ADELANTE]] == 0) {
 80023e6:	4b74      	ldr	r3, [pc, #464]	; (80025b8 <ChooseNextNode+0x1dc>)
 80023e8:	6818      	ldr	r0, [r3, #0]
 80023ea:	4c74      	ldr	r4, [pc, #464]	; (80025bc <ChooseNextNode+0x1e0>)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	6879      	ldr	r1, [r7, #4]
 80023f0:	461a      	mov	r2, r3
 80023f2:	0052      	lsls	r2, r2, #1
 80023f4:	441a      	add	r2, r3
 80023f6:	0053      	lsls	r3, r2, #1
 80023f8:	461a      	mov	r2, r3
 80023fa:	460b      	mov	r3, r1
 80023fc:	005b      	lsls	r3, r3, #1
 80023fe:	440b      	add	r3, r1
 8002400:	015b      	lsls	r3, r3, #5
 8002402:	4413      	add	r3, r2
 8002404:	4403      	add	r3, r0
 8002406:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800240a:	2b00      	cmp	r3, #0
 800240c:	f040 80dc 	bne.w	80025c8 <ChooseNextNode+0x1ec>
		TX_BUFFER[0] = 'A';
 8002410:	4b6b      	ldr	r3, [pc, #428]	; (80025c0 <ChooseNextNode+0x1e4>)
 8002412:	2241      	movs	r2, #65	; 0x41
 8002414:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = '\n';
 8002416:	4b6a      	ldr	r3, [pc, #424]	; (80025c0 <ChooseNextNode+0x1e4>)
 8002418:	220a      	movs	r2, #10
 800241a:	705a      	strb	r2, [r3, #1]
		HAL_UART_Transmit(&huart1, TX_BUFFER, 2, 100);
 800241c:	2364      	movs	r3, #100	; 0x64
 800241e:	2202      	movs	r2, #2
 8002420:	4967      	ldr	r1, [pc, #412]	; (80025c0 <ChooseNextNode+0x1e4>)
 8002422:	4868      	ldr	r0, [pc, #416]	; (80025c4 <ChooseNextNode+0x1e8>)
 8002424:	f004 fa5d 	bl	80068e2 <HAL_UART_Transmit>
		Map[x][y].Lados[direcciones[ADELANTE]] = 2;
 8002428:	4b63      	ldr	r3, [pc, #396]	; (80025b8 <ChooseNextNode+0x1dc>)
 800242a:	6818      	ldr	r0, [r3, #0]
 800242c:	4c63      	ldr	r4, [pc, #396]	; (80025bc <ChooseNextNode+0x1e0>)
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	6879      	ldr	r1, [r7, #4]
 8002432:	461a      	mov	r2, r3
 8002434:	0052      	lsls	r2, r2, #1
 8002436:	441a      	add	r2, r3
 8002438:	0053      	lsls	r3, r2, #1
 800243a:	461a      	mov	r2, r3
 800243c:	460b      	mov	r3, r1
 800243e:	005b      	lsls	r3, r3, #1
 8002440:	440b      	add	r3, r1
 8002442:	015b      	lsls	r3, r3, #5
 8002444:	4413      	add	r3, r2
 8002446:	4403      	add	r3, r0
 8002448:	2202      	movs	r2, #2
 800244a:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
		if (Map[x][y].visitado > 1) {
 800244e:	485b      	ldr	r0, [pc, #364]	; (80025bc <ChooseNextNode+0x1e0>)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	6879      	ldr	r1, [r7, #4]
 8002454:	461a      	mov	r2, r3
 8002456:	0052      	lsls	r2, r2, #1
 8002458:	441a      	add	r2, r3
 800245a:	00d3      	lsls	r3, r2, #3
 800245c:	461a      	mov	r2, r3
 800245e:	460b      	mov	r3, r1
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	440b      	add	r3, r1
 8002464:	01db      	lsls	r3, r3, #7
 8002466:	4413      	add	r3, r2
 8002468:	4403      	add	r3, r0
 800246a:	3310      	adds	r3, #16
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2b01      	cmp	r3, #1
 8002470:	dd03      	ble.n	800247a <ChooseNextNode+0x9e>
			EliminateNode(x, y);
 8002472:	6839      	ldr	r1, [r7, #0]
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f000 fab5 	bl	80029e4 <EliminateNode>
		}
		moveNode(direcciones[ADELANTE]);
 800247a:	4b4f      	ldr	r3, [pc, #316]	; (80025b8 <ChooseNextNode+0x1dc>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4618      	mov	r0, r3
 8002480:	f000 fbd0 	bl	8002c24 <moveNode>
		if (Map[x][y].Lados[direcciones[ATRAS]] != 1)
 8002484:	4b4c      	ldr	r3, [pc, #304]	; (80025b8 <ChooseNextNode+0x1dc>)
 8002486:	6898      	ldr	r0, [r3, #8]
 8002488:	4c4c      	ldr	r4, [pc, #304]	; (80025bc <ChooseNextNode+0x1e0>)
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	6879      	ldr	r1, [r7, #4]
 800248e:	461a      	mov	r2, r3
 8002490:	0052      	lsls	r2, r2, #1
 8002492:	441a      	add	r2, r3
 8002494:	0053      	lsls	r3, r2, #1
 8002496:	461a      	mov	r2, r3
 8002498:	460b      	mov	r3, r1
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	440b      	add	r3, r1
 800249e:	015b      	lsls	r3, r3, #5
 80024a0:	4413      	add	r3, r2
 80024a2:	4403      	add	r3, r0
 80024a4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d012      	beq.n	80024d2 <ChooseNextNode+0xf6>
			Map[x][y].Lados[direcciones[ATRAS]] = 2;
 80024ac:	4b42      	ldr	r3, [pc, #264]	; (80025b8 <ChooseNextNode+0x1dc>)
 80024ae:	6898      	ldr	r0, [r3, #8]
 80024b0:	4c42      	ldr	r4, [pc, #264]	; (80025bc <ChooseNextNode+0x1e0>)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	6879      	ldr	r1, [r7, #4]
 80024b6:	461a      	mov	r2, r3
 80024b8:	0052      	lsls	r2, r2, #1
 80024ba:	441a      	add	r2, r3
 80024bc:	0053      	lsls	r3, r2, #1
 80024be:	461a      	mov	r2, r3
 80024c0:	460b      	mov	r3, r1
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	440b      	add	r3, r1
 80024c6:	015b      	lsls	r3, r3, #5
 80024c8:	4413      	add	r3, r2
 80024ca:	4403      	add	r3, r0
 80024cc:	2202      	movs	r2, #2
 80024ce:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
		TX_BUFFER[0] = 'D';
 80024d2:	4b3b      	ldr	r3, [pc, #236]	; (80025c0 <ChooseNextNode+0x1e4>)
 80024d4:	2244      	movs	r2, #68	; 0x44
 80024d6:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = Map[x][y].Lados[DERECHA] + '0';
 80024d8:	4838      	ldr	r0, [pc, #224]	; (80025bc <ChooseNextNode+0x1e0>)
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	6879      	ldr	r1, [r7, #4]
 80024de:	461a      	mov	r2, r3
 80024e0:	0052      	lsls	r2, r2, #1
 80024e2:	441a      	add	r2, r3
 80024e4:	00d3      	lsls	r3, r2, #3
 80024e6:	461a      	mov	r2, r3
 80024e8:	460b      	mov	r3, r1
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	440b      	add	r3, r1
 80024ee:	01db      	lsls	r3, r3, #7
 80024f0:	4413      	add	r3, r2
 80024f2:	4403      	add	r3, r0
 80024f4:	330c      	adds	r3, #12
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	3330      	adds	r3, #48	; 0x30
 80024fc:	b2da      	uxtb	r2, r3
 80024fe:	4b30      	ldr	r3, [pc, #192]	; (80025c0 <ChooseNextNode+0x1e4>)
 8002500:	705a      	strb	r2, [r3, #1]
		TX_BUFFER[2] = '\n';
 8002502:	4b2f      	ldr	r3, [pc, #188]	; (80025c0 <ChooseNextNode+0x1e4>)
 8002504:	220a      	movs	r2, #10
 8002506:	709a      	strb	r2, [r3, #2]
		TX_BUFFER[3] = 'C';
 8002508:	4b2d      	ldr	r3, [pc, #180]	; (80025c0 <ChooseNextNode+0x1e4>)
 800250a:	2243      	movs	r2, #67	; 0x43
 800250c:	70da      	strb	r2, [r3, #3]
		TX_BUFFER[4] = Map[x][y].Lados[ADELANTE] + '0';
 800250e:	482b      	ldr	r0, [pc, #172]	; (80025bc <ChooseNextNode+0x1e0>)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	6879      	ldr	r1, [r7, #4]
 8002514:	461a      	mov	r2, r3
 8002516:	0052      	lsls	r2, r2, #1
 8002518:	441a      	add	r2, r3
 800251a:	00d3      	lsls	r3, r2, #3
 800251c:	461a      	mov	r2, r3
 800251e:	460b      	mov	r3, r1
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	440b      	add	r3, r1
 8002524:	01db      	lsls	r3, r3, #7
 8002526:	4413      	add	r3, r2
 8002528:	4403      	add	r3, r0
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	b2db      	uxtb	r3, r3
 800252e:	3330      	adds	r3, #48	; 0x30
 8002530:	b2da      	uxtb	r2, r3
 8002532:	4b23      	ldr	r3, [pc, #140]	; (80025c0 <ChooseNextNode+0x1e4>)
 8002534:	711a      	strb	r2, [r3, #4]
		TX_BUFFER[5] = '\n';
 8002536:	4b22      	ldr	r3, [pc, #136]	; (80025c0 <ChooseNextNode+0x1e4>)
 8002538:	220a      	movs	r2, #10
 800253a:	715a      	strb	r2, [r3, #5]
		TX_BUFFER[6] = 'I';
 800253c:	4b20      	ldr	r3, [pc, #128]	; (80025c0 <ChooseNextNode+0x1e4>)
 800253e:	2249      	movs	r2, #73	; 0x49
 8002540:	719a      	strb	r2, [r3, #6]
		TX_BUFFER[7] = Map[x][y].Lados[IZQUIERDA] + '0';
 8002542:	481e      	ldr	r0, [pc, #120]	; (80025bc <ChooseNextNode+0x1e0>)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	6879      	ldr	r1, [r7, #4]
 8002548:	461a      	mov	r2, r3
 800254a:	0052      	lsls	r2, r2, #1
 800254c:	441a      	add	r2, r3
 800254e:	00d3      	lsls	r3, r2, #3
 8002550:	461a      	mov	r2, r3
 8002552:	460b      	mov	r3, r1
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	440b      	add	r3, r1
 8002558:	01db      	lsls	r3, r3, #7
 800255a:	4413      	add	r3, r2
 800255c:	4403      	add	r3, r0
 800255e:	3304      	adds	r3, #4
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	b2db      	uxtb	r3, r3
 8002564:	3330      	adds	r3, #48	; 0x30
 8002566:	b2da      	uxtb	r2, r3
 8002568:	4b15      	ldr	r3, [pc, #84]	; (80025c0 <ChooseNextNode+0x1e4>)
 800256a:	71da      	strb	r2, [r3, #7]
		TX_BUFFER[8] = '\n';
 800256c:	4b14      	ldr	r3, [pc, #80]	; (80025c0 <ChooseNextNode+0x1e4>)
 800256e:	220a      	movs	r2, #10
 8002570:	721a      	strb	r2, [r3, #8]
		TX_BUFFER[9] = 'A';
 8002572:	4b13      	ldr	r3, [pc, #76]	; (80025c0 <ChooseNextNode+0x1e4>)
 8002574:	2241      	movs	r2, #65	; 0x41
 8002576:	725a      	strb	r2, [r3, #9]
		TX_BUFFER[10] = Map[x][y].Lados[ATRAS] + '0';
 8002578:	4810      	ldr	r0, [pc, #64]	; (80025bc <ChooseNextNode+0x1e0>)
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	6879      	ldr	r1, [r7, #4]
 800257e:	461a      	mov	r2, r3
 8002580:	0052      	lsls	r2, r2, #1
 8002582:	441a      	add	r2, r3
 8002584:	00d3      	lsls	r3, r2, #3
 8002586:	461a      	mov	r2, r3
 8002588:	460b      	mov	r3, r1
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	440b      	add	r3, r1
 800258e:	01db      	lsls	r3, r3, #7
 8002590:	4413      	add	r3, r2
 8002592:	4403      	add	r3, r0
 8002594:	3308      	adds	r3, #8
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	b2db      	uxtb	r3, r3
 800259a:	3330      	adds	r3, #48	; 0x30
 800259c:	b2da      	uxtb	r2, r3
 800259e:	4b08      	ldr	r3, [pc, #32]	; (80025c0 <ChooseNextNode+0x1e4>)
 80025a0:	729a      	strb	r2, [r3, #10]
		TX_BUFFER[11] = '\n';
 80025a2:	4b07      	ldr	r3, [pc, #28]	; (80025c0 <ChooseNextNode+0x1e4>)
 80025a4:	220a      	movs	r2, #10
 80025a6:	72da      	strb	r2, [r3, #11]
		HAL_UART_Transmit(&huart1, TX_BUFFER, 12, 100);
 80025a8:	2364      	movs	r3, #100	; 0x64
 80025aa:	220c      	movs	r2, #12
 80025ac:	4904      	ldr	r1, [pc, #16]	; (80025c0 <ChooseNextNode+0x1e4>)
 80025ae:	4805      	ldr	r0, [pc, #20]	; (80025c4 <ChooseNextNode+0x1e8>)
 80025b0:	f004 f997 	bl	80068e2 <HAL_UART_Transmit>

		return ADELANTE;
 80025b4:	2300      	movs	r3, #0
 80025b6:	e20b      	b.n	80029d0 <ChooseNextNode+0x5f4>
 80025b8:	200011e4 	.word	0x200011e4
 80025bc:	200012b8 	.word	0x200012b8
 80025c0:	20001214 	.word	0x20001214
 80025c4:	20002bbc 	.word	0x20002bbc
	} else if (Map[x][y].Lados[direcciones[IZQUIERDA]] == 0) {
 80025c8:	4bbc      	ldr	r3, [pc, #752]	; (80028bc <ChooseNextNode+0x4e0>)
 80025ca:	6858      	ldr	r0, [r3, #4]
 80025cc:	4cbc      	ldr	r4, [pc, #752]	; (80028c0 <ChooseNextNode+0x4e4>)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	6879      	ldr	r1, [r7, #4]
 80025d2:	461a      	mov	r2, r3
 80025d4:	0052      	lsls	r2, r2, #1
 80025d6:	441a      	add	r2, r3
 80025d8:	0053      	lsls	r3, r2, #1
 80025da:	461a      	mov	r2, r3
 80025dc:	460b      	mov	r3, r1
 80025de:	005b      	lsls	r3, r3, #1
 80025e0:	440b      	add	r3, r1
 80025e2:	015b      	lsls	r3, r3, #5
 80025e4:	4413      	add	r3, r2
 80025e6:	4403      	add	r3, r0
 80025e8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	f040 80a8 	bne.w	8002742 <ChooseNextNode+0x366>
		TX_BUFFER[0] = 'I';
 80025f2:	4bb4      	ldr	r3, [pc, #720]	; (80028c4 <ChooseNextNode+0x4e8>)
 80025f4:	2249      	movs	r2, #73	; 0x49
 80025f6:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = '\n';
 80025f8:	4bb2      	ldr	r3, [pc, #712]	; (80028c4 <ChooseNextNode+0x4e8>)
 80025fa:	220a      	movs	r2, #10
 80025fc:	705a      	strb	r2, [r3, #1]
		HAL_UART_Transmit(&huart1, TX_BUFFER, 2, 100);
 80025fe:	2364      	movs	r3, #100	; 0x64
 8002600:	2202      	movs	r2, #2
 8002602:	49b0      	ldr	r1, [pc, #704]	; (80028c4 <ChooseNextNode+0x4e8>)
 8002604:	48b0      	ldr	r0, [pc, #704]	; (80028c8 <ChooseNextNode+0x4ec>)
 8002606:	f004 f96c 	bl	80068e2 <HAL_UART_Transmit>
		Map[x][y].Lados[direcciones[IZQUIERDA]] = 2;
 800260a:	4bac      	ldr	r3, [pc, #688]	; (80028bc <ChooseNextNode+0x4e0>)
 800260c:	6858      	ldr	r0, [r3, #4]
 800260e:	4cac      	ldr	r4, [pc, #688]	; (80028c0 <ChooseNextNode+0x4e4>)
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	6879      	ldr	r1, [r7, #4]
 8002614:	461a      	mov	r2, r3
 8002616:	0052      	lsls	r2, r2, #1
 8002618:	441a      	add	r2, r3
 800261a:	0053      	lsls	r3, r2, #1
 800261c:	461a      	mov	r2, r3
 800261e:	460b      	mov	r3, r1
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	440b      	add	r3, r1
 8002624:	015b      	lsls	r3, r3, #5
 8002626:	4413      	add	r3, r2
 8002628:	4403      	add	r3, r0
 800262a:	2202      	movs	r2, #2
 800262c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]

		if (Map[x][y].visitado > 1) {
 8002630:	48a3      	ldr	r0, [pc, #652]	; (80028c0 <ChooseNextNode+0x4e4>)
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	6879      	ldr	r1, [r7, #4]
 8002636:	461a      	mov	r2, r3
 8002638:	0052      	lsls	r2, r2, #1
 800263a:	441a      	add	r2, r3
 800263c:	00d3      	lsls	r3, r2, #3
 800263e:	461a      	mov	r2, r3
 8002640:	460b      	mov	r3, r1
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	440b      	add	r3, r1
 8002646:	01db      	lsls	r3, r3, #7
 8002648:	4413      	add	r3, r2
 800264a:	4403      	add	r3, r0
 800264c:	3310      	adds	r3, #16
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2b01      	cmp	r3, #1
 8002652:	dd03      	ble.n	800265c <ChooseNextNode+0x280>
			EliminateNode(x, y);
 8002654:	6839      	ldr	r1, [r7, #0]
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f000 f9c4 	bl	80029e4 <EliminateNode>
		}
		TX_BUFFER[0] = 'D';
 800265c:	4b99      	ldr	r3, [pc, #612]	; (80028c4 <ChooseNextNode+0x4e8>)
 800265e:	2244      	movs	r2, #68	; 0x44
 8002660:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = Map[x][y].Lados[DERECHA] + '0';
 8002662:	4897      	ldr	r0, [pc, #604]	; (80028c0 <ChooseNextNode+0x4e4>)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	6879      	ldr	r1, [r7, #4]
 8002668:	461a      	mov	r2, r3
 800266a:	0052      	lsls	r2, r2, #1
 800266c:	441a      	add	r2, r3
 800266e:	00d3      	lsls	r3, r2, #3
 8002670:	461a      	mov	r2, r3
 8002672:	460b      	mov	r3, r1
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	440b      	add	r3, r1
 8002678:	01db      	lsls	r3, r3, #7
 800267a:	4413      	add	r3, r2
 800267c:	4403      	add	r3, r0
 800267e:	330c      	adds	r3, #12
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	b2db      	uxtb	r3, r3
 8002684:	3330      	adds	r3, #48	; 0x30
 8002686:	b2da      	uxtb	r2, r3
 8002688:	4b8e      	ldr	r3, [pc, #568]	; (80028c4 <ChooseNextNode+0x4e8>)
 800268a:	705a      	strb	r2, [r3, #1]
		TX_BUFFER[2] = '\n';
 800268c:	4b8d      	ldr	r3, [pc, #564]	; (80028c4 <ChooseNextNode+0x4e8>)
 800268e:	220a      	movs	r2, #10
 8002690:	709a      	strb	r2, [r3, #2]
		TX_BUFFER[3] = 'C';
 8002692:	4b8c      	ldr	r3, [pc, #560]	; (80028c4 <ChooseNextNode+0x4e8>)
 8002694:	2243      	movs	r2, #67	; 0x43
 8002696:	70da      	strb	r2, [r3, #3]
		TX_BUFFER[4] = Map[x][y].Lados[ADELANTE] + '0';
 8002698:	4889      	ldr	r0, [pc, #548]	; (80028c0 <ChooseNextNode+0x4e4>)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	6879      	ldr	r1, [r7, #4]
 800269e:	461a      	mov	r2, r3
 80026a0:	0052      	lsls	r2, r2, #1
 80026a2:	441a      	add	r2, r3
 80026a4:	00d3      	lsls	r3, r2, #3
 80026a6:	461a      	mov	r2, r3
 80026a8:	460b      	mov	r3, r1
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	440b      	add	r3, r1
 80026ae:	01db      	lsls	r3, r3, #7
 80026b0:	4413      	add	r3, r2
 80026b2:	4403      	add	r3, r0
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	3330      	adds	r3, #48	; 0x30
 80026ba:	b2da      	uxtb	r2, r3
 80026bc:	4b81      	ldr	r3, [pc, #516]	; (80028c4 <ChooseNextNode+0x4e8>)
 80026be:	711a      	strb	r2, [r3, #4]
		TX_BUFFER[5] = '\n';
 80026c0:	4b80      	ldr	r3, [pc, #512]	; (80028c4 <ChooseNextNode+0x4e8>)
 80026c2:	220a      	movs	r2, #10
 80026c4:	715a      	strb	r2, [r3, #5]
		TX_BUFFER[6] = 'I';
 80026c6:	4b7f      	ldr	r3, [pc, #508]	; (80028c4 <ChooseNextNode+0x4e8>)
 80026c8:	2249      	movs	r2, #73	; 0x49
 80026ca:	719a      	strb	r2, [r3, #6]
		TX_BUFFER[7] = Map[x][y].Lados[IZQUIERDA] + '0';
 80026cc:	487c      	ldr	r0, [pc, #496]	; (80028c0 <ChooseNextNode+0x4e4>)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	6879      	ldr	r1, [r7, #4]
 80026d2:	461a      	mov	r2, r3
 80026d4:	0052      	lsls	r2, r2, #1
 80026d6:	441a      	add	r2, r3
 80026d8:	00d3      	lsls	r3, r2, #3
 80026da:	461a      	mov	r2, r3
 80026dc:	460b      	mov	r3, r1
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	440b      	add	r3, r1
 80026e2:	01db      	lsls	r3, r3, #7
 80026e4:	4413      	add	r3, r2
 80026e6:	4403      	add	r3, r0
 80026e8:	3304      	adds	r3, #4
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	3330      	adds	r3, #48	; 0x30
 80026f0:	b2da      	uxtb	r2, r3
 80026f2:	4b74      	ldr	r3, [pc, #464]	; (80028c4 <ChooseNextNode+0x4e8>)
 80026f4:	71da      	strb	r2, [r3, #7]
		TX_BUFFER[8] = '\n';
 80026f6:	4b73      	ldr	r3, [pc, #460]	; (80028c4 <ChooseNextNode+0x4e8>)
 80026f8:	220a      	movs	r2, #10
 80026fa:	721a      	strb	r2, [r3, #8]
		TX_BUFFER[9] = 'A';
 80026fc:	4b71      	ldr	r3, [pc, #452]	; (80028c4 <ChooseNextNode+0x4e8>)
 80026fe:	2241      	movs	r2, #65	; 0x41
 8002700:	725a      	strb	r2, [r3, #9]
		TX_BUFFER[10] = Map[x][y].Lados[ATRAS] + '0';
 8002702:	486f      	ldr	r0, [pc, #444]	; (80028c0 <ChooseNextNode+0x4e4>)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	6879      	ldr	r1, [r7, #4]
 8002708:	461a      	mov	r2, r3
 800270a:	0052      	lsls	r2, r2, #1
 800270c:	441a      	add	r2, r3
 800270e:	00d3      	lsls	r3, r2, #3
 8002710:	461a      	mov	r2, r3
 8002712:	460b      	mov	r3, r1
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	440b      	add	r3, r1
 8002718:	01db      	lsls	r3, r3, #7
 800271a:	4413      	add	r3, r2
 800271c:	4403      	add	r3, r0
 800271e:	3308      	adds	r3, #8
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	b2db      	uxtb	r3, r3
 8002724:	3330      	adds	r3, #48	; 0x30
 8002726:	b2da      	uxtb	r2, r3
 8002728:	4b66      	ldr	r3, [pc, #408]	; (80028c4 <ChooseNextNode+0x4e8>)
 800272a:	729a      	strb	r2, [r3, #10]
		TX_BUFFER[11] = '\n';
 800272c:	4b65      	ldr	r3, [pc, #404]	; (80028c4 <ChooseNextNode+0x4e8>)
 800272e:	220a      	movs	r2, #10
 8002730:	72da      	strb	r2, [r3, #11]
		HAL_UART_Transmit(&huart1, TX_BUFFER, 12, 100);
 8002732:	2364      	movs	r3, #100	; 0x64
 8002734:	220c      	movs	r2, #12
 8002736:	4963      	ldr	r1, [pc, #396]	; (80028c4 <ChooseNextNode+0x4e8>)
 8002738:	4863      	ldr	r0, [pc, #396]	; (80028c8 <ChooseNextNode+0x4ec>)
 800273a:	f004 f8d2 	bl	80068e2 <HAL_UART_Transmit>

		return IZQUIERDA;
 800273e:	2301      	movs	r3, #1
 8002740:	e146      	b.n	80029d0 <ChooseNextNode+0x5f4>
	} else if (Map[x][y].Lados[direcciones[DERECHA]] == 0) {
 8002742:	4b5e      	ldr	r3, [pc, #376]	; (80028bc <ChooseNextNode+0x4e0>)
 8002744:	68d8      	ldr	r0, [r3, #12]
 8002746:	4c5e      	ldr	r4, [pc, #376]	; (80028c0 <ChooseNextNode+0x4e4>)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	6879      	ldr	r1, [r7, #4]
 800274c:	461a      	mov	r2, r3
 800274e:	0052      	lsls	r2, r2, #1
 8002750:	441a      	add	r2, r3
 8002752:	0053      	lsls	r3, r2, #1
 8002754:	461a      	mov	r2, r3
 8002756:	460b      	mov	r3, r1
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	440b      	add	r3, r1
 800275c:	015b      	lsls	r3, r3, #5
 800275e:	4413      	add	r3, r2
 8002760:	4403      	add	r3, r0
 8002762:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8002766:	2b00      	cmp	r3, #0
 8002768:	f040 80b0 	bne.w	80028cc <ChooseNextNode+0x4f0>
		TX_BUFFER[0] = 'D';
 800276c:	4b55      	ldr	r3, [pc, #340]	; (80028c4 <ChooseNextNode+0x4e8>)
 800276e:	2244      	movs	r2, #68	; 0x44
 8002770:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = '\n';
 8002772:	4b54      	ldr	r3, [pc, #336]	; (80028c4 <ChooseNextNode+0x4e8>)
 8002774:	220a      	movs	r2, #10
 8002776:	705a      	strb	r2, [r3, #1]
		HAL_UART_Transmit(&huart1, TX_BUFFER, 2, 100);
 8002778:	2364      	movs	r3, #100	; 0x64
 800277a:	2202      	movs	r2, #2
 800277c:	4951      	ldr	r1, [pc, #324]	; (80028c4 <ChooseNextNode+0x4e8>)
 800277e:	4852      	ldr	r0, [pc, #328]	; (80028c8 <ChooseNextNode+0x4ec>)
 8002780:	f004 f8af 	bl	80068e2 <HAL_UART_Transmit>
		Map[x][y].Lados[direcciones[DERECHA]] = 2;
 8002784:	4b4d      	ldr	r3, [pc, #308]	; (80028bc <ChooseNextNode+0x4e0>)
 8002786:	68d8      	ldr	r0, [r3, #12]
 8002788:	4c4d      	ldr	r4, [pc, #308]	; (80028c0 <ChooseNextNode+0x4e4>)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	6879      	ldr	r1, [r7, #4]
 800278e:	461a      	mov	r2, r3
 8002790:	0052      	lsls	r2, r2, #1
 8002792:	441a      	add	r2, r3
 8002794:	0053      	lsls	r3, r2, #1
 8002796:	461a      	mov	r2, r3
 8002798:	460b      	mov	r3, r1
 800279a:	005b      	lsls	r3, r3, #1
 800279c:	440b      	add	r3, r1
 800279e:	015b      	lsls	r3, r3, #5
 80027a0:	4413      	add	r3, r2
 80027a2:	4403      	add	r3, r0
 80027a4:	2202      	movs	r2, #2
 80027a6:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
		if (Map[x][y].visitado > 1) {
 80027aa:	4845      	ldr	r0, [pc, #276]	; (80028c0 <ChooseNextNode+0x4e4>)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	6879      	ldr	r1, [r7, #4]
 80027b0:	461a      	mov	r2, r3
 80027b2:	0052      	lsls	r2, r2, #1
 80027b4:	441a      	add	r2, r3
 80027b6:	00d3      	lsls	r3, r2, #3
 80027b8:	461a      	mov	r2, r3
 80027ba:	460b      	mov	r3, r1
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	440b      	add	r3, r1
 80027c0:	01db      	lsls	r3, r3, #7
 80027c2:	4413      	add	r3, r2
 80027c4:	4403      	add	r3, r0
 80027c6:	3310      	adds	r3, #16
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	dd03      	ble.n	80027d6 <ChooseNextNode+0x3fa>
			EliminateNode(x, y);
 80027ce:	6839      	ldr	r1, [r7, #0]
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f000 f907 	bl	80029e4 <EliminateNode>
		}
		TX_BUFFER[0] = 'D';
 80027d6:	4b3b      	ldr	r3, [pc, #236]	; (80028c4 <ChooseNextNode+0x4e8>)
 80027d8:	2244      	movs	r2, #68	; 0x44
 80027da:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = Map[x][y].Lados[DERECHA] + '0';
 80027dc:	4838      	ldr	r0, [pc, #224]	; (80028c0 <ChooseNextNode+0x4e4>)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	6879      	ldr	r1, [r7, #4]
 80027e2:	461a      	mov	r2, r3
 80027e4:	0052      	lsls	r2, r2, #1
 80027e6:	441a      	add	r2, r3
 80027e8:	00d3      	lsls	r3, r2, #3
 80027ea:	461a      	mov	r2, r3
 80027ec:	460b      	mov	r3, r1
 80027ee:	005b      	lsls	r3, r3, #1
 80027f0:	440b      	add	r3, r1
 80027f2:	01db      	lsls	r3, r3, #7
 80027f4:	4413      	add	r3, r2
 80027f6:	4403      	add	r3, r0
 80027f8:	330c      	adds	r3, #12
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	3330      	adds	r3, #48	; 0x30
 8002800:	b2da      	uxtb	r2, r3
 8002802:	4b30      	ldr	r3, [pc, #192]	; (80028c4 <ChooseNextNode+0x4e8>)
 8002804:	705a      	strb	r2, [r3, #1]
		TX_BUFFER[2] = '\n';
 8002806:	4b2f      	ldr	r3, [pc, #188]	; (80028c4 <ChooseNextNode+0x4e8>)
 8002808:	220a      	movs	r2, #10
 800280a:	709a      	strb	r2, [r3, #2]
		TX_BUFFER[3] = 'C';
 800280c:	4b2d      	ldr	r3, [pc, #180]	; (80028c4 <ChooseNextNode+0x4e8>)
 800280e:	2243      	movs	r2, #67	; 0x43
 8002810:	70da      	strb	r2, [r3, #3]
		TX_BUFFER[4] = Map[x][y].Lados[ADELANTE] + '0';
 8002812:	482b      	ldr	r0, [pc, #172]	; (80028c0 <ChooseNextNode+0x4e4>)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	6879      	ldr	r1, [r7, #4]
 8002818:	461a      	mov	r2, r3
 800281a:	0052      	lsls	r2, r2, #1
 800281c:	441a      	add	r2, r3
 800281e:	00d3      	lsls	r3, r2, #3
 8002820:	461a      	mov	r2, r3
 8002822:	460b      	mov	r3, r1
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	440b      	add	r3, r1
 8002828:	01db      	lsls	r3, r3, #7
 800282a:	4413      	add	r3, r2
 800282c:	4403      	add	r3, r0
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	b2db      	uxtb	r3, r3
 8002832:	3330      	adds	r3, #48	; 0x30
 8002834:	b2da      	uxtb	r2, r3
 8002836:	4b23      	ldr	r3, [pc, #140]	; (80028c4 <ChooseNextNode+0x4e8>)
 8002838:	711a      	strb	r2, [r3, #4]
		TX_BUFFER[5] = '\n';
 800283a:	4b22      	ldr	r3, [pc, #136]	; (80028c4 <ChooseNextNode+0x4e8>)
 800283c:	220a      	movs	r2, #10
 800283e:	715a      	strb	r2, [r3, #5]
		TX_BUFFER[6] = 'I';
 8002840:	4b20      	ldr	r3, [pc, #128]	; (80028c4 <ChooseNextNode+0x4e8>)
 8002842:	2249      	movs	r2, #73	; 0x49
 8002844:	719a      	strb	r2, [r3, #6]
		TX_BUFFER[7] = Map[x][y].Lados[IZQUIERDA] + '0';
 8002846:	481e      	ldr	r0, [pc, #120]	; (80028c0 <ChooseNextNode+0x4e4>)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	6879      	ldr	r1, [r7, #4]
 800284c:	461a      	mov	r2, r3
 800284e:	0052      	lsls	r2, r2, #1
 8002850:	441a      	add	r2, r3
 8002852:	00d3      	lsls	r3, r2, #3
 8002854:	461a      	mov	r2, r3
 8002856:	460b      	mov	r3, r1
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	440b      	add	r3, r1
 800285c:	01db      	lsls	r3, r3, #7
 800285e:	4413      	add	r3, r2
 8002860:	4403      	add	r3, r0
 8002862:	3304      	adds	r3, #4
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	b2db      	uxtb	r3, r3
 8002868:	3330      	adds	r3, #48	; 0x30
 800286a:	b2da      	uxtb	r2, r3
 800286c:	4b15      	ldr	r3, [pc, #84]	; (80028c4 <ChooseNextNode+0x4e8>)
 800286e:	71da      	strb	r2, [r3, #7]
		TX_BUFFER[8] = '\n';
 8002870:	4b14      	ldr	r3, [pc, #80]	; (80028c4 <ChooseNextNode+0x4e8>)
 8002872:	220a      	movs	r2, #10
 8002874:	721a      	strb	r2, [r3, #8]
		TX_BUFFER[9] = 'A';
 8002876:	4b13      	ldr	r3, [pc, #76]	; (80028c4 <ChooseNextNode+0x4e8>)
 8002878:	2241      	movs	r2, #65	; 0x41
 800287a:	725a      	strb	r2, [r3, #9]
		TX_BUFFER[10] = Map[x][y].Lados[ATRAS] + '0';
 800287c:	4810      	ldr	r0, [pc, #64]	; (80028c0 <ChooseNextNode+0x4e4>)
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	6879      	ldr	r1, [r7, #4]
 8002882:	461a      	mov	r2, r3
 8002884:	0052      	lsls	r2, r2, #1
 8002886:	441a      	add	r2, r3
 8002888:	00d3      	lsls	r3, r2, #3
 800288a:	461a      	mov	r2, r3
 800288c:	460b      	mov	r3, r1
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	440b      	add	r3, r1
 8002892:	01db      	lsls	r3, r3, #7
 8002894:	4413      	add	r3, r2
 8002896:	4403      	add	r3, r0
 8002898:	3308      	adds	r3, #8
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	b2db      	uxtb	r3, r3
 800289e:	3330      	adds	r3, #48	; 0x30
 80028a0:	b2da      	uxtb	r2, r3
 80028a2:	4b08      	ldr	r3, [pc, #32]	; (80028c4 <ChooseNextNode+0x4e8>)
 80028a4:	729a      	strb	r2, [r3, #10]
		TX_BUFFER[11] = '\n';
 80028a6:	4b07      	ldr	r3, [pc, #28]	; (80028c4 <ChooseNextNode+0x4e8>)
 80028a8:	220a      	movs	r2, #10
 80028aa:	72da      	strb	r2, [r3, #11]
		HAL_UART_Transmit(&huart1, TX_BUFFER, 12, 100);
 80028ac:	2364      	movs	r3, #100	; 0x64
 80028ae:	220c      	movs	r2, #12
 80028b0:	4904      	ldr	r1, [pc, #16]	; (80028c4 <ChooseNextNode+0x4e8>)
 80028b2:	4805      	ldr	r0, [pc, #20]	; (80028c8 <ChooseNextNode+0x4ec>)
 80028b4:	f004 f815 	bl	80068e2 <HAL_UART_Transmit>
		return DERECHA;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e089      	b.n	80029d0 <ChooseNextNode+0x5f4>
 80028bc:	200011e4 	.word	0x200011e4
 80028c0:	200012b8 	.word	0x200012b8
 80028c4:	20001214 	.word	0x20001214
 80028c8:	20002bbc 	.word	0x20002bbc
	} else {
		TX_BUFFER[0] = 'O';
 80028cc:	4b42      	ldr	r3, [pc, #264]	; (80029d8 <ChooseNextNode+0x5fc>)
 80028ce:	224f      	movs	r2, #79	; 0x4f
 80028d0:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = '\n';
 80028d2:	4b41      	ldr	r3, [pc, #260]	; (80029d8 <ChooseNextNode+0x5fc>)
 80028d4:	220a      	movs	r2, #10
 80028d6:	705a      	strb	r2, [r3, #1]
		HAL_UART_Transmit(&huart1, TX_BUFFER, 2, 100);
 80028d8:	2364      	movs	r3, #100	; 0x64
 80028da:	2202      	movs	r2, #2
 80028dc:	493e      	ldr	r1, [pc, #248]	; (80029d8 <ChooseNextNode+0x5fc>)
 80028de:	483f      	ldr	r0, [pc, #252]	; (80029dc <ChooseNextNode+0x600>)
 80028e0:	f003 ffff 	bl	80068e2 <HAL_UART_Transmit>
		TX_BUFFER[0] = 'D';
 80028e4:	4b3c      	ldr	r3, [pc, #240]	; (80029d8 <ChooseNextNode+0x5fc>)
 80028e6:	2244      	movs	r2, #68	; 0x44
 80028e8:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = Map[x][y].Lados[DERECHA] + '0';
 80028ea:	483d      	ldr	r0, [pc, #244]	; (80029e0 <ChooseNextNode+0x604>)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	6879      	ldr	r1, [r7, #4]
 80028f0:	461a      	mov	r2, r3
 80028f2:	0052      	lsls	r2, r2, #1
 80028f4:	441a      	add	r2, r3
 80028f6:	00d3      	lsls	r3, r2, #3
 80028f8:	461a      	mov	r2, r3
 80028fa:	460b      	mov	r3, r1
 80028fc:	005b      	lsls	r3, r3, #1
 80028fe:	440b      	add	r3, r1
 8002900:	01db      	lsls	r3, r3, #7
 8002902:	4413      	add	r3, r2
 8002904:	4403      	add	r3, r0
 8002906:	330c      	adds	r3, #12
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	b2db      	uxtb	r3, r3
 800290c:	3330      	adds	r3, #48	; 0x30
 800290e:	b2da      	uxtb	r2, r3
 8002910:	4b31      	ldr	r3, [pc, #196]	; (80029d8 <ChooseNextNode+0x5fc>)
 8002912:	705a      	strb	r2, [r3, #1]
		TX_BUFFER[2] = '\n';
 8002914:	4b30      	ldr	r3, [pc, #192]	; (80029d8 <ChooseNextNode+0x5fc>)
 8002916:	220a      	movs	r2, #10
 8002918:	709a      	strb	r2, [r3, #2]
		TX_BUFFER[3] = 'C';
 800291a:	4b2f      	ldr	r3, [pc, #188]	; (80029d8 <ChooseNextNode+0x5fc>)
 800291c:	2243      	movs	r2, #67	; 0x43
 800291e:	70da      	strb	r2, [r3, #3]
		TX_BUFFER[4] = Map[x][y].Lados[ADELANTE] + '0';
 8002920:	482f      	ldr	r0, [pc, #188]	; (80029e0 <ChooseNextNode+0x604>)
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	6879      	ldr	r1, [r7, #4]
 8002926:	461a      	mov	r2, r3
 8002928:	0052      	lsls	r2, r2, #1
 800292a:	441a      	add	r2, r3
 800292c:	00d3      	lsls	r3, r2, #3
 800292e:	461a      	mov	r2, r3
 8002930:	460b      	mov	r3, r1
 8002932:	005b      	lsls	r3, r3, #1
 8002934:	440b      	add	r3, r1
 8002936:	01db      	lsls	r3, r3, #7
 8002938:	4413      	add	r3, r2
 800293a:	4403      	add	r3, r0
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	b2db      	uxtb	r3, r3
 8002940:	3330      	adds	r3, #48	; 0x30
 8002942:	b2da      	uxtb	r2, r3
 8002944:	4b24      	ldr	r3, [pc, #144]	; (80029d8 <ChooseNextNode+0x5fc>)
 8002946:	711a      	strb	r2, [r3, #4]
		TX_BUFFER[5] = '\n';
 8002948:	4b23      	ldr	r3, [pc, #140]	; (80029d8 <ChooseNextNode+0x5fc>)
 800294a:	220a      	movs	r2, #10
 800294c:	715a      	strb	r2, [r3, #5]
		TX_BUFFER[6] = 'I';
 800294e:	4b22      	ldr	r3, [pc, #136]	; (80029d8 <ChooseNextNode+0x5fc>)
 8002950:	2249      	movs	r2, #73	; 0x49
 8002952:	719a      	strb	r2, [r3, #6]
		TX_BUFFER[7] = Map[x][y].Lados[IZQUIERDA] + '0';
 8002954:	4822      	ldr	r0, [pc, #136]	; (80029e0 <ChooseNextNode+0x604>)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	6879      	ldr	r1, [r7, #4]
 800295a:	461a      	mov	r2, r3
 800295c:	0052      	lsls	r2, r2, #1
 800295e:	441a      	add	r2, r3
 8002960:	00d3      	lsls	r3, r2, #3
 8002962:	461a      	mov	r2, r3
 8002964:	460b      	mov	r3, r1
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	440b      	add	r3, r1
 800296a:	01db      	lsls	r3, r3, #7
 800296c:	4413      	add	r3, r2
 800296e:	4403      	add	r3, r0
 8002970:	3304      	adds	r3, #4
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	b2db      	uxtb	r3, r3
 8002976:	3330      	adds	r3, #48	; 0x30
 8002978:	b2da      	uxtb	r2, r3
 800297a:	4b17      	ldr	r3, [pc, #92]	; (80029d8 <ChooseNextNode+0x5fc>)
 800297c:	71da      	strb	r2, [r3, #7]
		TX_BUFFER[8] = '\n';
 800297e:	4b16      	ldr	r3, [pc, #88]	; (80029d8 <ChooseNextNode+0x5fc>)
 8002980:	220a      	movs	r2, #10
 8002982:	721a      	strb	r2, [r3, #8]
		TX_BUFFER[9] = 'A';
 8002984:	4b14      	ldr	r3, [pc, #80]	; (80029d8 <ChooseNextNode+0x5fc>)
 8002986:	2241      	movs	r2, #65	; 0x41
 8002988:	725a      	strb	r2, [r3, #9]
		TX_BUFFER[10] = Map[x][y].Lados[ATRAS] + '0';
 800298a:	4815      	ldr	r0, [pc, #84]	; (80029e0 <ChooseNextNode+0x604>)
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	6879      	ldr	r1, [r7, #4]
 8002990:	461a      	mov	r2, r3
 8002992:	0052      	lsls	r2, r2, #1
 8002994:	441a      	add	r2, r3
 8002996:	00d3      	lsls	r3, r2, #3
 8002998:	461a      	mov	r2, r3
 800299a:	460b      	mov	r3, r1
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	440b      	add	r3, r1
 80029a0:	01db      	lsls	r3, r3, #7
 80029a2:	4413      	add	r3, r2
 80029a4:	4403      	add	r3, r0
 80029a6:	3308      	adds	r3, #8
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	3330      	adds	r3, #48	; 0x30
 80029ae:	b2da      	uxtb	r2, r3
 80029b0:	4b09      	ldr	r3, [pc, #36]	; (80029d8 <ChooseNextNode+0x5fc>)
 80029b2:	729a      	strb	r2, [r3, #10]
		TX_BUFFER[11] = '\n';
 80029b4:	4b08      	ldr	r3, [pc, #32]	; (80029d8 <ChooseNextNode+0x5fc>)
 80029b6:	220a      	movs	r2, #10
 80029b8:	72da      	strb	r2, [r3, #11]
		HAL_UART_Transmit(&huart1, TX_BUFFER, 12, 100);
 80029ba:	2364      	movs	r3, #100	; 0x64
 80029bc:	220c      	movs	r2, #12
 80029be:	4906      	ldr	r1, [pc, #24]	; (80029d8 <ChooseNextNode+0x5fc>)
 80029c0:	4806      	ldr	r0, [pc, #24]	; (80029dc <ChooseNextNode+0x600>)
 80029c2:	f003 ff8e 	bl	80068e2 <HAL_UART_Transmit>
		return SearchAvailableNode(x, y);
 80029c6:	6839      	ldr	r1, [r7, #0]
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f000 f841 	bl	8002a50 <SearchAvailableNode>
 80029ce:	4603      	mov	r3, r0
	}
	last.x = x;
	last.y = y;
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd90      	pop	{r4, r7, pc}
 80029d8:	20001214 	.word	0x20001214
 80029dc:	20002bbc 	.word	0x20002bbc
 80029e0:	200012b8 	.word	0x200012b8

080029e4 <EliminateNode>:

void EliminateNode(int x, int y) {
 80029e4:	b490      	push	{r4, r7}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
//Serial.println("Borro");
	Map[x][y].Lados[direcciones[ATRAS]] = 1;
 80029ee:	4b15      	ldr	r3, [pc, #84]	; (8002a44 <EliminateNode+0x60>)
 80029f0:	6898      	ldr	r0, [r3, #8]
 80029f2:	4c15      	ldr	r4, [pc, #84]	; (8002a48 <EliminateNode+0x64>)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	6879      	ldr	r1, [r7, #4]
 80029f8:	461a      	mov	r2, r3
 80029fa:	0052      	lsls	r2, r2, #1
 80029fc:	441a      	add	r2, r3
 80029fe:	0053      	lsls	r3, r2, #1
 8002a00:	461a      	mov	r2, r3
 8002a02:	460b      	mov	r3, r1
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	440b      	add	r3, r1
 8002a08:	015b      	lsls	r3, r3, #5
 8002a0a:	4413      	add	r3, r2
 8002a0c:	4403      	add	r3, r0
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	Map[last.x][last.y].visitado = 0;
 8002a14:	4b0d      	ldr	r3, [pc, #52]	; (8002a4c <EliminateNode+0x68>)
 8002a16:	6819      	ldr	r1, [r3, #0]
 8002a18:	4b0c      	ldr	r3, [pc, #48]	; (8002a4c <EliminateNode+0x68>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	480a      	ldr	r0, [pc, #40]	; (8002a48 <EliminateNode+0x64>)
 8002a1e:	461a      	mov	r2, r3
 8002a20:	0052      	lsls	r2, r2, #1
 8002a22:	441a      	add	r2, r3
 8002a24:	00d3      	lsls	r3, r2, #3
 8002a26:	461a      	mov	r2, r3
 8002a28:	460b      	mov	r3, r1
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	440b      	add	r3, r1
 8002a2e:	01db      	lsls	r3, r3, #7
 8002a30:	4413      	add	r3, r2
 8002a32:	4403      	add	r3, r0
 8002a34:	3310      	adds	r3, #16
 8002a36:	2200      	movs	r2, #0
 8002a38:	601a      	str	r2, [r3, #0]
}
 8002a3a:	bf00      	nop
 8002a3c:	3708      	adds	r7, #8
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bc90      	pop	{r4, r7}
 8002a42:	4770      	bx	lr
 8002a44:	200011e4 	.word	0x200011e4
 8002a48:	200012b8 	.word	0x200012b8
 8002a4c:	200012b0 	.word	0x200012b0

08002a50 <SearchAvailableNode>:

int SearchAvailableNode(int x, int y) {
 8002a50:	b590      	push	{r4, r7, lr}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
	if (Map[x][y].Lados[direcciones[ADELANTE]] != 1) {
 8002a5a:	4b70      	ldr	r3, [pc, #448]	; (8002c1c <SearchAvailableNode+0x1cc>)
 8002a5c:	6818      	ldr	r0, [r3, #0]
 8002a5e:	4c70      	ldr	r4, [pc, #448]	; (8002c20 <SearchAvailableNode+0x1d0>)
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	6879      	ldr	r1, [r7, #4]
 8002a64:	461a      	mov	r2, r3
 8002a66:	0052      	lsls	r2, r2, #1
 8002a68:	441a      	add	r2, r3
 8002a6a:	0053      	lsls	r3, r2, #1
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	460b      	mov	r3, r1
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	440b      	add	r3, r1
 8002a74:	015b      	lsls	r3, r3, #5
 8002a76:	4413      	add	r3, r2
 8002a78:	4403      	add	r3, r0
 8002a7a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d02d      	beq.n	8002ade <SearchAvailableNode+0x8e>
		//Serial.println("Adelante1");
		Map[x][y].Lados[direcciones[ADELANTE]] = 2;
 8002a82:	4b66      	ldr	r3, [pc, #408]	; (8002c1c <SearchAvailableNode+0x1cc>)
 8002a84:	6818      	ldr	r0, [r3, #0]
 8002a86:	4c66      	ldr	r4, [pc, #408]	; (8002c20 <SearchAvailableNode+0x1d0>)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	6879      	ldr	r1, [r7, #4]
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	0052      	lsls	r2, r2, #1
 8002a90:	441a      	add	r2, r3
 8002a92:	0053      	lsls	r3, r2, #1
 8002a94:	461a      	mov	r2, r3
 8002a96:	460b      	mov	r3, r1
 8002a98:	005b      	lsls	r3, r3, #1
 8002a9a:	440b      	add	r3, r1
 8002a9c:	015b      	lsls	r3, r3, #5
 8002a9e:	4413      	add	r3, r2
 8002aa0:	4403      	add	r3, r0
 8002aa2:	2202      	movs	r2, #2
 8002aa4:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
		moveNode(ADELANTE);
 8002aa8:	2000      	movs	r0, #0
 8002aaa:	f000 f8bb 	bl	8002c24 <moveNode>
		if (Map[x][y].visitado > 1) {
 8002aae:	485c      	ldr	r0, [pc, #368]	; (8002c20 <SearchAvailableNode+0x1d0>)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	6879      	ldr	r1, [r7, #4]
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	0052      	lsls	r2, r2, #1
 8002ab8:	441a      	add	r2, r3
 8002aba:	00d3      	lsls	r3, r2, #3
 8002abc:	461a      	mov	r2, r3
 8002abe:	460b      	mov	r3, r1
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	440b      	add	r3, r1
 8002ac4:	01db      	lsls	r3, r3, #7
 8002ac6:	4413      	add	r3, r2
 8002ac8:	4403      	add	r3, r0
 8002aca:	3310      	adds	r3, #16
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	dd03      	ble.n	8002ada <SearchAvailableNode+0x8a>
			EliminateNode(x, y);
 8002ad2:	6839      	ldr	r1, [r7, #0]
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f7ff ff85 	bl	80029e4 <EliminateNode>
		}
		return ADELANTE;
 8002ada:	2300      	movs	r3, #0
 8002adc:	e09a      	b.n	8002c14 <SearchAvailableNode+0x1c4>
	} else if (Map[x][y].Lados[direcciones[IZQUIERDA]] != 1) {
 8002ade:	4b4f      	ldr	r3, [pc, #316]	; (8002c1c <SearchAvailableNode+0x1cc>)
 8002ae0:	6858      	ldr	r0, [r3, #4]
 8002ae2:	4c4f      	ldr	r4, [pc, #316]	; (8002c20 <SearchAvailableNode+0x1d0>)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	6879      	ldr	r1, [r7, #4]
 8002ae8:	461a      	mov	r2, r3
 8002aea:	0052      	lsls	r2, r2, #1
 8002aec:	441a      	add	r2, r3
 8002aee:	0053      	lsls	r3, r2, #1
 8002af0:	461a      	mov	r2, r3
 8002af2:	460b      	mov	r3, r1
 8002af4:	005b      	lsls	r3, r3, #1
 8002af6:	440b      	add	r3, r1
 8002af8:	015b      	lsls	r3, r3, #5
 8002afa:	4413      	add	r3, r2
 8002afc:	4403      	add	r3, r0
 8002afe:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d02d      	beq.n	8002b62 <SearchAvailableNode+0x112>
		//Serial.println("IZQUIERDA1");
		Map[x][y].Lados[direcciones[IZQUIERDA]] = 2;
 8002b06:	4b45      	ldr	r3, [pc, #276]	; (8002c1c <SearchAvailableNode+0x1cc>)
 8002b08:	6858      	ldr	r0, [r3, #4]
 8002b0a:	4c45      	ldr	r4, [pc, #276]	; (8002c20 <SearchAvailableNode+0x1d0>)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	6879      	ldr	r1, [r7, #4]
 8002b10:	461a      	mov	r2, r3
 8002b12:	0052      	lsls	r2, r2, #1
 8002b14:	441a      	add	r2, r3
 8002b16:	0053      	lsls	r3, r2, #1
 8002b18:	461a      	mov	r2, r3
 8002b1a:	460b      	mov	r3, r1
 8002b1c:	005b      	lsls	r3, r3, #1
 8002b1e:	440b      	add	r3, r1
 8002b20:	015b      	lsls	r3, r3, #5
 8002b22:	4413      	add	r3, r2
 8002b24:	4403      	add	r3, r0
 8002b26:	2202      	movs	r2, #2
 8002b28:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
		moveNode(IZQUIERDA);
 8002b2c:	2001      	movs	r0, #1
 8002b2e:	f000 f879 	bl	8002c24 <moveNode>
		//rotateAxis(IZQUIERDA);
		if (Map[x][y].visitado > 1) {
 8002b32:	483b      	ldr	r0, [pc, #236]	; (8002c20 <SearchAvailableNode+0x1d0>)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	6879      	ldr	r1, [r7, #4]
 8002b38:	461a      	mov	r2, r3
 8002b3a:	0052      	lsls	r2, r2, #1
 8002b3c:	441a      	add	r2, r3
 8002b3e:	00d3      	lsls	r3, r2, #3
 8002b40:	461a      	mov	r2, r3
 8002b42:	460b      	mov	r3, r1
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	440b      	add	r3, r1
 8002b48:	01db      	lsls	r3, r3, #7
 8002b4a:	4413      	add	r3, r2
 8002b4c:	4403      	add	r3, r0
 8002b4e:	3310      	adds	r3, #16
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	dd03      	ble.n	8002b5e <SearchAvailableNode+0x10e>
			EliminateNode(x, y);
 8002b56:	6839      	ldr	r1, [r7, #0]
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f7ff ff43 	bl	80029e4 <EliminateNode>
		}
		return IZQUIERDA;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e058      	b.n	8002c14 <SearchAvailableNode+0x1c4>
	} else if (Map[x][y].Lados[direcciones[DERECHA]] != 1) {
 8002b62:	4b2e      	ldr	r3, [pc, #184]	; (8002c1c <SearchAvailableNode+0x1cc>)
 8002b64:	68d8      	ldr	r0, [r3, #12]
 8002b66:	4c2e      	ldr	r4, [pc, #184]	; (8002c20 <SearchAvailableNode+0x1d0>)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	6879      	ldr	r1, [r7, #4]
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	0052      	lsls	r2, r2, #1
 8002b70:	441a      	add	r2, r3
 8002b72:	0053      	lsls	r3, r2, #1
 8002b74:	461a      	mov	r2, r3
 8002b76:	460b      	mov	r3, r1
 8002b78:	005b      	lsls	r3, r3, #1
 8002b7a:	440b      	add	r3, r1
 8002b7c:	015b      	lsls	r3, r3, #5
 8002b7e:	4413      	add	r3, r2
 8002b80:	4403      	add	r3, r0
 8002b82:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d02d      	beq.n	8002be6 <SearchAvailableNode+0x196>
		//Serial.println("DERECHA1");
		Map[x][y].Lados[direcciones[DERECHA]] = 2;
 8002b8a:	4b24      	ldr	r3, [pc, #144]	; (8002c1c <SearchAvailableNode+0x1cc>)
 8002b8c:	68d8      	ldr	r0, [r3, #12]
 8002b8e:	4c24      	ldr	r4, [pc, #144]	; (8002c20 <SearchAvailableNode+0x1d0>)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	6879      	ldr	r1, [r7, #4]
 8002b94:	461a      	mov	r2, r3
 8002b96:	0052      	lsls	r2, r2, #1
 8002b98:	441a      	add	r2, r3
 8002b9a:	0053      	lsls	r3, r2, #1
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	005b      	lsls	r3, r3, #1
 8002ba2:	440b      	add	r3, r1
 8002ba4:	015b      	lsls	r3, r3, #5
 8002ba6:	4413      	add	r3, r2
 8002ba8:	4403      	add	r3, r0
 8002baa:	2202      	movs	r2, #2
 8002bac:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
		moveNode(DERECHA);
 8002bb0:	2003      	movs	r0, #3
 8002bb2:	f000 f837 	bl	8002c24 <moveNode>
		if (Map[x][y].visitado > 1) {
 8002bb6:	481a      	ldr	r0, [pc, #104]	; (8002c20 <SearchAvailableNode+0x1d0>)
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	6879      	ldr	r1, [r7, #4]
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	0052      	lsls	r2, r2, #1
 8002bc0:	441a      	add	r2, r3
 8002bc2:	00d3      	lsls	r3, r2, #3
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	005b      	lsls	r3, r3, #1
 8002bca:	440b      	add	r3, r1
 8002bcc:	01db      	lsls	r3, r3, #7
 8002bce:	4413      	add	r3, r2
 8002bd0:	4403      	add	r3, r0
 8002bd2:	3310      	adds	r3, #16
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	dd03      	ble.n	8002be2 <SearchAvailableNode+0x192>
			EliminateNode(x, y);
 8002bda:	6839      	ldr	r1, [r7, #0]
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f7ff ff01 	bl	80029e4 <EliminateNode>
		}
		//rotateAxis(DERECHA);
		return DERECHA;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e016      	b.n	8002c14 <SearchAvailableNode+0x1c4>
	} else if (Map[x][y].Lados[direcciones[ATRAS]] != 1) {
 8002be6:	4b0d      	ldr	r3, [pc, #52]	; (8002c1c <SearchAvailableNode+0x1cc>)
 8002be8:	6898      	ldr	r0, [r3, #8]
 8002bea:	4c0d      	ldr	r4, [pc, #52]	; (8002c20 <SearchAvailableNode+0x1d0>)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	6879      	ldr	r1, [r7, #4]
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	0052      	lsls	r2, r2, #1
 8002bf4:	441a      	add	r2, r3
 8002bf6:	0053      	lsls	r3, r2, #1
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	440b      	add	r3, r1
 8002c00:	015b      	lsls	r3, r3, #5
 8002c02:	4413      	add	r3, r2
 8002c04:	4403      	add	r3, r0
 8002c06:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d001      	beq.n	8002c12 <SearchAvailableNode+0x1c2>
		//Serial.println("atras1");
		return ATRAS;
 8002c0e:	2302      	movs	r3, #2
 8002c10:	e000      	b.n	8002c14 <SearchAvailableNode+0x1c4>
	}
	return 0;
 8002c12:	2300      	movs	r3, #0
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd90      	pop	{r4, r7, pc}
 8002c1c:	200011e4 	.word	0x200011e4
 8002c20:	200012b8 	.word	0x200012b8

08002c24 <moveNode>:
void moveNode(int lado) {
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
	switch (lado) {
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2b03      	cmp	r3, #3
 8002c30:	d822      	bhi.n	8002c78 <moveNode+0x54>
 8002c32:	a201      	add	r2, pc, #4	; (adr r2, 8002c38 <moveNode+0x14>)
 8002c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c38:	08002c49 	.word	0x08002c49
 8002c3c:	08002c55 	.word	0x08002c55
 8002c40:	08002c6d 	.word	0x08002c6d
 8002c44:	08002c61 	.word	0x08002c61
	case ADELANTE:
		//if (visual.y != ALTO - 1) {
		actual.y++;
 8002c48:	4b0e      	ldr	r3, [pc, #56]	; (8002c84 <moveNode+0x60>)
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	4a0d      	ldr	r2, [pc, #52]	; (8002c84 <moveNode+0x60>)
 8002c50:	6053      	str	r3, [r2, #4]
		//visual.y++;
		//}
		break;
 8002c52:	e011      	b.n	8002c78 <moveNode+0x54>
	case IZQUIERDA:
		//if (visual.x != 0) {
		actual.x--;
 8002c54:	4b0b      	ldr	r3, [pc, #44]	; (8002c84 <moveNode+0x60>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	4a0a      	ldr	r2, [pc, #40]	; (8002c84 <moveNode+0x60>)
 8002c5c:	6013      	str	r3, [r2, #0]
		//visual.x--;
		//}
		break;
 8002c5e:	e00b      	b.n	8002c78 <moveNode+0x54>
	case DERECHA:
		// if (visual.x != ANCHO - 1) {
		actual.x++;
 8002c60:	4b08      	ldr	r3, [pc, #32]	; (8002c84 <moveNode+0x60>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	3301      	adds	r3, #1
 8002c66:	4a07      	ldr	r2, [pc, #28]	; (8002c84 <moveNode+0x60>)
 8002c68:	6013      	str	r3, [r2, #0]
		// visual.x++;
		// }
		break;
 8002c6a:	e005      	b.n	8002c78 <moveNode+0x54>
	case ATRAS:
		// if (visual.y != 0) {
		actual.y--;
 8002c6c:	4b05      	ldr	r3, [pc, #20]	; (8002c84 <moveNode+0x60>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	3b01      	subs	r3, #1
 8002c72:	4a04      	ldr	r2, [pc, #16]	; (8002c84 <moveNode+0x60>)
 8002c74:	6053      	str	r3, [r2, #4]
		// visual.y--;
		// }

		break;
 8002c76:	bf00      	nop
	}
}
 8002c78:	bf00      	nop
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bc80      	pop	{r7}
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	200012a8 	.word	0x200012a8

08002c88 <movementMachine>:
 offset = 30;
 }
 break;
 }
 }*/
void movementMachine(int move) {
 8002c88:	b590      	push	{r4, r7, lr}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
	switch (movementState) {
 8002c90:	4b9a      	ldr	r3, [pc, #616]	; (8002efc <movementMachine+0x274>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2b05      	cmp	r3, #5
 8002c96:	f200 812c 	bhi.w	8002ef2 <movementMachine+0x26a>
 8002c9a:	a201      	add	r2, pc, #4	; (adr r2, 8002ca0 <movementMachine+0x18>)
 8002c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ca0:	08002cf5 	.word	0x08002cf5
 8002ca4:	08002d7b 	.word	0x08002d7b
 8002ca8:	08002e67 	.word	0x08002e67
 8002cac:	08002ddf 	.word	0x08002ddf
 8002cb0:	08002ef3 	.word	0x08002ef3
 8002cb4:	08002cb9 	.word	0x08002cb9
	case OFF:
		runMotor(OFF, MOTOR_A);
 8002cb8:	2100      	movs	r1, #0
 8002cba:	2005      	movs	r0, #5
 8002cbc:	f000 fd9a 	bl	80037f4 <runMotor>
		runMotor(OFF, MOTOR_B);
 8002cc0:	2101      	movs	r1, #1
 8002cc2:	2005      	movs	r0, #5
 8002cc4:	f000 fd96 	bl	80037f4 <runMotor>
		if (move != OFF) {
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2b05      	cmp	r3, #5
 8002ccc:	f000 8110 	beq.w	8002ef0 <movementMachine+0x268>
			movementState = move;
 8002cd0:	4a8a      	ldr	r2, [pc, #552]	; (8002efc <movementMachine+0x274>)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6013      	str	r3, [r2, #0]
			TIM3->CNT = 0;
 8002cd6:	4b8a      	ldr	r3, [pc, #552]	; (8002f00 <movementMachine+0x278>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	625a      	str	r2, [r3, #36]	; 0x24
			TIM4->CNT = 0;
 8002cdc:	4b89      	ldr	r3, [pc, #548]	; (8002f04 <movementMachine+0x27c>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	625a      	str	r2, [r3, #36]	; 0x24
			if (move == IZQUIERDA) {
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	f040 8103 	bne.w	8002ef0 <movementMachine+0x268>
				TIM3->CNT = 580 + 100;
 8002cea:	4b85      	ldr	r3, [pc, #532]	; (8002f00 <movementMachine+0x278>)
 8002cec:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8002cf0:	625a      	str	r2, [r3, #36]	; 0x24
			}
		}
		break;
 8002cf2:	e0fd      	b.n	8002ef0 <movementMachine+0x268>
	case ADELANTE:
		//intUartSend((int) calcularDistancia(TIM3->CNT));
		if ((calcularDistancia((TIM3->CNT >> 1)) < forwardChoice[choice]) && Sensors[2] > 5) {
 8002cf4:	4b82      	ldr	r3, [pc, #520]	; (8002f00 <movementMachine+0x278>)
 8002cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf8:	085b      	lsrs	r3, r3, #1
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f000 fd54 	bl	80037a8 <calcularDistancia>
 8002d00:	4604      	mov	r4, r0
 8002d02:	4b81      	ldr	r3, [pc, #516]	; (8002f08 <movementMachine+0x280>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a81      	ldr	r2, [pc, #516]	; (8002f0c <movementMachine+0x284>)
 8002d08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7fd ff95 	bl	8000c3c <__aeabi_i2f>
 8002d12:	4603      	mov	r3, r0
 8002d14:	4619      	mov	r1, r3
 8002d16:	4620      	mov	r0, r4
 8002d18:	f7fe f982 	bl	8001020 <__aeabi_fcmplt>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d013      	beq.n	8002d4a <movementMachine+0xc2>
 8002d22:	4b7b      	ldr	r3, [pc, #492]	; (8002f10 <movementMachine+0x288>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	497b      	ldr	r1, [pc, #492]	; (8002f14 <movementMachine+0x28c>)
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7fe f997 	bl	800105c <__aeabi_fcmpgt>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00a      	beq.n	8002d4a <movementMachine+0xc2>
			moveStraight();
 8002d34:	f000 faf2 	bl	800331c <moveStraight>
			runMotor(ADELANTE, MOTOR_A);
 8002d38:	2100      	movs	r1, #0
 8002d3a:	2000      	movs	r0, #0
 8002d3c:	f000 fd5a 	bl	80037f4 <runMotor>
			runMotor(ADELANTE, MOTOR_B);
 8002d40:	2101      	movs	r1, #1
 8002d42:	2000      	movs	r0, #0
 8002d44:	f000 fd56 	bl	80037f4 <runMotor>
			runMotor(OFF, MOTOR_B);
			TIM3->CNT = 0;
			TIM4->CNT = 0;
			offset = 0;
		}
		break;
 8002d48:	e0d3      	b.n	8002ef2 <movementMachine+0x26a>
			movimientoFlag = 1;
 8002d4a:	4b73      	ldr	r3, [pc, #460]	; (8002f18 <movementMachine+0x290>)
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	601a      	str	r2, [r3, #0]
			movementState = OFF;
 8002d50:	4b6a      	ldr	r3, [pc, #424]	; (8002efc <movementMachine+0x274>)
 8002d52:	2205      	movs	r2, #5
 8002d54:	601a      	str	r2, [r3, #0]
			runMotor(OFF, MOTOR_A);
 8002d56:	2100      	movs	r1, #0
 8002d58:	2005      	movs	r0, #5
 8002d5a:	f000 fd4b 	bl	80037f4 <runMotor>
			runMotor(OFF, MOTOR_B);
 8002d5e:	2101      	movs	r1, #1
 8002d60:	2005      	movs	r0, #5
 8002d62:	f000 fd47 	bl	80037f4 <runMotor>
			TIM3->CNT = 0;
 8002d66:	4b66      	ldr	r3, [pc, #408]	; (8002f00 <movementMachine+0x278>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	625a      	str	r2, [r3, #36]	; 0x24
			TIM4->CNT = 0;
 8002d6c:	4b65      	ldr	r3, [pc, #404]	; (8002f04 <movementMachine+0x27c>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	625a      	str	r2, [r3, #36]	; 0x24
			offset = 0;
 8002d72:	4b6a      	ldr	r3, [pc, #424]	; (8002f1c <movementMachine+0x294>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	601a      	str	r2, [r3, #0]
		break;
 8002d78:	e0bb      	b.n	8002ef2 <movementMachine+0x26a>
	case IZQUIERDA:
		TIM2->CCR3 = baseChoice[choice];
 8002d7a:	4b63      	ldr	r3, [pc, #396]	; (8002f08 <movementMachine+0x280>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a68      	ldr	r2, [pc, #416]	; (8002f20 <movementMachine+0x298>)
 8002d80:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002d84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002d88:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM2->CCR4 = baseChoice[choice];
 8002d8a:	4b5f      	ldr	r3, [pc, #380]	; (8002f08 <movementMachine+0x280>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a64      	ldr	r2, [pc, #400]	; (8002f20 <movementMachine+0x298>)
 8002d90:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002d94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002d98:	641a      	str	r2, [r3, #64]	; 0x40
		//intUartSend((TIM3->CNT));
		if ((TIM3->CNT) > 100) {
 8002d9a:	4b59      	ldr	r3, [pc, #356]	; (8002f00 <movementMachine+0x278>)
 8002d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9e:	2b64      	cmp	r3, #100	; 0x64
 8002da0:	d908      	bls.n	8002db4 <movementMachine+0x12c>
			runMotor(ADELANTE, MOTOR_A);
 8002da2:	2100      	movs	r1, #0
 8002da4:	2000      	movs	r0, #0
 8002da6:	f000 fd25 	bl	80037f4 <runMotor>
			runMotor(ATRAS, MOTOR_B);
 8002daa:	2101      	movs	r1, #1
 8002dac:	2002      	movs	r0, #2
 8002dae:	f000 fd21 	bl	80037f4 <runMotor>
			runMotor(OFF, MOTOR_B);
			TIM3->CNT = 0;
			TIM4->CNT = 0;
			offset = 30;
		}
		break;
 8002db2:	e09e      	b.n	8002ef2 <movementMachine+0x26a>
			movementState = ADELANTE;
 8002db4:	4b51      	ldr	r3, [pc, #324]	; (8002efc <movementMachine+0x274>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	601a      	str	r2, [r3, #0]
			runMotor(OFF, MOTOR_A);
 8002dba:	2100      	movs	r1, #0
 8002dbc:	2005      	movs	r0, #5
 8002dbe:	f000 fd19 	bl	80037f4 <runMotor>
			runMotor(OFF, MOTOR_B);
 8002dc2:	2101      	movs	r1, #1
 8002dc4:	2005      	movs	r0, #5
 8002dc6:	f000 fd15 	bl	80037f4 <runMotor>
			TIM3->CNT = 0;
 8002dca:	4b4d      	ldr	r3, [pc, #308]	; (8002f00 <movementMachine+0x278>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	625a      	str	r2, [r3, #36]	; 0x24
			TIM4->CNT = 0;
 8002dd0:	4b4c      	ldr	r3, [pc, #304]	; (8002f04 <movementMachine+0x27c>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	625a      	str	r2, [r3, #36]	; 0x24
			offset = 30;
 8002dd6:	4b51      	ldr	r3, [pc, #324]	; (8002f1c <movementMachine+0x294>)
 8002dd8:	221e      	movs	r2, #30
 8002dda:	601a      	str	r2, [r3, #0]
		break;
 8002ddc:	e089      	b.n	8002ef2 <movementMachine+0x26a>
	case DERECHA:
		TIM2->CCR3 = baseChoice[choice];
 8002dde:	4b4a      	ldr	r3, [pc, #296]	; (8002f08 <movementMachine+0x280>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a4f      	ldr	r2, [pc, #316]	; (8002f20 <movementMachine+0x298>)
 8002de4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002de8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002dec:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM2->CCR4 = baseChoice[choice];
 8002dee:	4b46      	ldr	r3, [pc, #280]	; (8002f08 <movementMachine+0x280>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a4b      	ldr	r2, [pc, #300]	; (8002f20 <movementMachine+0x298>)
 8002df4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002df8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002dfc:	641a      	str	r2, [r3, #64]	; 0x40
		if (calcularDistancia((TIM3->CNT)) < RightChoice[choice]) {
 8002dfe:	4b40      	ldr	r3, [pc, #256]	; (8002f00 <movementMachine+0x278>)
 8002e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e02:	4618      	mov	r0, r3
 8002e04:	f000 fcd0 	bl	80037a8 <calcularDistancia>
 8002e08:	4604      	mov	r4, r0
 8002e0a:	4b3f      	ldr	r3, [pc, #252]	; (8002f08 <movementMachine+0x280>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a45      	ldr	r2, [pc, #276]	; (8002f24 <movementMachine+0x29c>)
 8002e10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7fd ff11 	bl	8000c3c <__aeabi_i2f>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	4620      	mov	r0, r4
 8002e20:	f7fe f8fe 	bl	8001020 <__aeabi_fcmplt>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d008      	beq.n	8002e3c <movementMachine+0x1b4>
			runMotor(ATRAS, MOTOR_A);
 8002e2a:	2100      	movs	r1, #0
 8002e2c:	2002      	movs	r0, #2
 8002e2e:	f000 fce1 	bl	80037f4 <runMotor>
			runMotor(ADELANTE, MOTOR_B);
 8002e32:	2101      	movs	r1, #1
 8002e34:	2000      	movs	r0, #0
 8002e36:	f000 fcdd 	bl	80037f4 <runMotor>
			runMotor(OFF, MOTOR_B);
			TIM3->CNT = 0;
			TIM4->CNT = 0;
			offset = 30;
		}
		break;
 8002e3a:	e05a      	b.n	8002ef2 <movementMachine+0x26a>
			movementState = ADELANTE;
 8002e3c:	4b2f      	ldr	r3, [pc, #188]	; (8002efc <movementMachine+0x274>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	601a      	str	r2, [r3, #0]
			runMotor(OFF, MOTOR_A);
 8002e42:	2100      	movs	r1, #0
 8002e44:	2005      	movs	r0, #5
 8002e46:	f000 fcd5 	bl	80037f4 <runMotor>
			runMotor(OFF, MOTOR_B);
 8002e4a:	2101      	movs	r1, #1
 8002e4c:	2005      	movs	r0, #5
 8002e4e:	f000 fcd1 	bl	80037f4 <runMotor>
			TIM3->CNT = 0;
 8002e52:	4b2b      	ldr	r3, [pc, #172]	; (8002f00 <movementMachine+0x278>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	625a      	str	r2, [r3, #36]	; 0x24
			TIM4->CNT = 0;
 8002e58:	4b2a      	ldr	r3, [pc, #168]	; (8002f04 <movementMachine+0x27c>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	625a      	str	r2, [r3, #36]	; 0x24
			offset = 30;
 8002e5e:	4b2f      	ldr	r3, [pc, #188]	; (8002f1c <movementMachine+0x294>)
 8002e60:	221e      	movs	r2, #30
 8002e62:	601a      	str	r2, [r3, #0]
		break;
 8002e64:	e045      	b.n	8002ef2 <movementMachine+0x26a>
	case ATRAS:
		TIM2->CCR3 = baseChoice[choice];
 8002e66:	4b28      	ldr	r3, [pc, #160]	; (8002f08 <movementMachine+0x280>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a2d      	ldr	r2, [pc, #180]	; (8002f20 <movementMachine+0x298>)
 8002e6c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002e70:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002e74:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM2->CCR4 = baseChoice[choice];
 8002e76:	4b24      	ldr	r3, [pc, #144]	; (8002f08 <movementMachine+0x280>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a29      	ldr	r2, [pc, #164]	; (8002f20 <movementMachine+0x298>)
 8002e7c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002e80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002e84:	641a      	str	r2, [r3, #64]	; 0x40
		if (calcularDistancia((TIM3->CNT)) < RightChoice[choice] * 2) {
 8002e86:	4b1e      	ldr	r3, [pc, #120]	; (8002f00 <movementMachine+0x278>)
 8002e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f000 fc8c 	bl	80037a8 <calcularDistancia>
 8002e90:	4604      	mov	r4, r0
 8002e92:	4b1d      	ldr	r3, [pc, #116]	; (8002f08 <movementMachine+0x280>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a23      	ldr	r2, [pc, #140]	; (8002f24 <movementMachine+0x29c>)
 8002e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7fd fecc 	bl	8000c3c <__aeabi_i2f>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	4620      	mov	r0, r4
 8002eaa:	f7fe f8b9 	bl	8001020 <__aeabi_fcmplt>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d008      	beq.n	8002ec6 <movementMachine+0x23e>
			runMotor(ATRAS, MOTOR_A);
 8002eb4:	2100      	movs	r1, #0
 8002eb6:	2002      	movs	r0, #2
 8002eb8:	f000 fc9c 	bl	80037f4 <runMotor>
			runMotor(ADELANTE, MOTOR_B);
 8002ebc:	2101      	movs	r1, #1
 8002ebe:	2000      	movs	r0, #0
 8002ec0:	f000 fc98 	bl	80037f4 <runMotor>
			runMotor(OFF, MOTOR_B);
			TIM3->CNT = 0;
			TIM4->CNT = 0;
			offset = 30;
		}
		break;
 8002ec4:	e015      	b.n	8002ef2 <movementMachine+0x26a>
			movementState = ADELANTE;
 8002ec6:	4b0d      	ldr	r3, [pc, #52]	; (8002efc <movementMachine+0x274>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	601a      	str	r2, [r3, #0]
			runMotor(OFF, MOTOR_A);
 8002ecc:	2100      	movs	r1, #0
 8002ece:	2005      	movs	r0, #5
 8002ed0:	f000 fc90 	bl	80037f4 <runMotor>
			runMotor(OFF, MOTOR_B);
 8002ed4:	2101      	movs	r1, #1
 8002ed6:	2005      	movs	r0, #5
 8002ed8:	f000 fc8c 	bl	80037f4 <runMotor>
			TIM3->CNT = 0;
 8002edc:	4b08      	ldr	r3, [pc, #32]	; (8002f00 <movementMachine+0x278>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	625a      	str	r2, [r3, #36]	; 0x24
			TIM4->CNT = 0;
 8002ee2:	4b08      	ldr	r3, [pc, #32]	; (8002f04 <movementMachine+0x27c>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	625a      	str	r2, [r3, #36]	; 0x24
			offset = 30;
 8002ee8:	4b0c      	ldr	r3, [pc, #48]	; (8002f1c <movementMachine+0x294>)
 8002eea:	221e      	movs	r2, #30
 8002eec:	601a      	str	r2, [r3, #0]
		break;
 8002eee:	e000      	b.n	8002ef2 <movementMachine+0x26a>
		break;
 8002ef0:	bf00      	nop

	}
}
 8002ef2:	bf00      	nop
 8002ef4:	370c      	adds	r7, #12
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd90      	pop	{r4, r7, pc}
 8002efa:	bf00      	nop
 8002efc:	20000030 	.word	0x20000030
 8002f00:	40000400 	.word	0x40000400
 8002f04:	40000800 	.word	0x40000800
 8002f08:	20001230 	.word	0x20001230
 8002f0c:	20000020 	.word	0x20000020
 8002f10:	200011d4 	.word	0x200011d4
 8002f14:	40a00000 	.word	0x40a00000
 8002f18:	20001244 	.word	0x20001244
 8002f1c:	2000124c 	.word	0x2000124c
 8002f20:	20000018 	.word	0x20000018
 8002f24:	20000028 	.word	0x20000028

08002f28 <CreateNode>:

void CreateNode(int x, int y) {
 8002f28:	b5b0      	push	{r4, r5, r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
	Map[x][y].Lados[direcciones[ADELANTE]] = lecturaSensor(ADELANTE, Sensors);
 8002f32:	4936      	ldr	r1, [pc, #216]	; (800300c <CreateNode+0xe4>)
 8002f34:	2000      	movs	r0, #0
 8002f36:	f000 fcc9 	bl	80038cc <lecturaSensor>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	4a34      	ldr	r2, [pc, #208]	; (8003010 <CreateNode+0xe8>)
 8002f3e:	6814      	ldr	r4, [r2, #0]
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7fe f895 	bl	8001070 <__aeabi_f2iz>
 8002f46:	4d33      	ldr	r5, [pc, #204]	; (8003014 <CreateNode+0xec>)
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	6879      	ldr	r1, [r7, #4]
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	0052      	lsls	r2, r2, #1
 8002f50:	441a      	add	r2, r3
 8002f52:	0053      	lsls	r3, r2, #1
 8002f54:	461a      	mov	r2, r3
 8002f56:	460b      	mov	r3, r1
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	440b      	add	r3, r1
 8002f5c:	015b      	lsls	r3, r3, #5
 8002f5e:	4413      	add	r3, r2
 8002f60:	4423      	add	r3, r4
 8002f62:	f845 0023 	str.w	r0, [r5, r3, lsl #2]
	Map[x][y].Lados[direcciones[IZQUIERDA]] = lecturaSensor(IZQUIERDA, Sensors);
 8002f66:	4929      	ldr	r1, [pc, #164]	; (800300c <CreateNode+0xe4>)
 8002f68:	2001      	movs	r0, #1
 8002f6a:	f000 fcaf 	bl	80038cc <lecturaSensor>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	4a27      	ldr	r2, [pc, #156]	; (8003010 <CreateNode+0xe8>)
 8002f72:	6854      	ldr	r4, [r2, #4]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7fe f87b 	bl	8001070 <__aeabi_f2iz>
 8002f7a:	4d26      	ldr	r5, [pc, #152]	; (8003014 <CreateNode+0xec>)
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	6879      	ldr	r1, [r7, #4]
 8002f80:	461a      	mov	r2, r3
 8002f82:	0052      	lsls	r2, r2, #1
 8002f84:	441a      	add	r2, r3
 8002f86:	0053      	lsls	r3, r2, #1
 8002f88:	461a      	mov	r2, r3
 8002f8a:	460b      	mov	r3, r1
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	440b      	add	r3, r1
 8002f90:	015b      	lsls	r3, r3, #5
 8002f92:	4413      	add	r3, r2
 8002f94:	4423      	add	r3, r4
 8002f96:	f845 0023 	str.w	r0, [r5, r3, lsl #2]
	Map[x][y].Lados[direcciones[DERECHA]] = lecturaSensor(DERECHA, Sensors);
 8002f9a:	491c      	ldr	r1, [pc, #112]	; (800300c <CreateNode+0xe4>)
 8002f9c:	2003      	movs	r0, #3
 8002f9e:	f000 fc95 	bl	80038cc <lecturaSensor>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	4a1a      	ldr	r2, [pc, #104]	; (8003010 <CreateNode+0xe8>)
 8002fa6:	68d4      	ldr	r4, [r2, #12]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7fe f861 	bl	8001070 <__aeabi_f2iz>
 8002fae:	4d19      	ldr	r5, [pc, #100]	; (8003014 <CreateNode+0xec>)
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	6879      	ldr	r1, [r7, #4]
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	0052      	lsls	r2, r2, #1
 8002fb8:	441a      	add	r2, r3
 8002fba:	0053      	lsls	r3, r2, #1
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	440b      	add	r3, r1
 8002fc4:	015b      	lsls	r3, r3, #5
 8002fc6:	4413      	add	r3, r2
 8002fc8:	4423      	add	r3, r4
 8002fca:	f845 0023 	str.w	r0, [r5, r3, lsl #2]
	Map[x][y].Lados[direcciones[ATRAS]] = lecturaSensor(ATRAS, Sensors);
 8002fce:	490f      	ldr	r1, [pc, #60]	; (800300c <CreateNode+0xe4>)
 8002fd0:	2002      	movs	r0, #2
 8002fd2:	f000 fc7b 	bl	80038cc <lecturaSensor>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	4a0d      	ldr	r2, [pc, #52]	; (8003010 <CreateNode+0xe8>)
 8002fda:	6894      	ldr	r4, [r2, #8]
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f7fe f847 	bl	8001070 <__aeabi_f2iz>
 8002fe2:	4d0c      	ldr	r5, [pc, #48]	; (8003014 <CreateNode+0xec>)
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	6879      	ldr	r1, [r7, #4]
 8002fe8:	461a      	mov	r2, r3
 8002fea:	0052      	lsls	r2, r2, #1
 8002fec:	441a      	add	r2, r3
 8002fee:	0053      	lsls	r3, r2, #1
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	460b      	mov	r3, r1
 8002ff4:	005b      	lsls	r3, r3, #1
 8002ff6:	440b      	add	r3, r1
 8002ff8:	015b      	lsls	r3, r3, #5
 8002ffa:	4413      	add	r3, r2
 8002ffc:	4423      	add	r3, r4
 8002ffe:	f845 0023 	str.w	r0, [r5, r3, lsl #2]

}
 8003002:	bf00      	nop
 8003004:	3708      	adds	r7, #8
 8003006:	46bd      	mov	sp, r7
 8003008:	bdb0      	pop	{r4, r5, r7, pc}
 800300a:	bf00      	nop
 800300c:	200011d4 	.word	0x200011d4
 8003010:	200011e4 	.word	0x200011e4
 8003014:	200012b8 	.word	0x200012b8

08003018 <rotateAxis>:

void rotateAxis(int direccion) {
 8003018:	b480      	push	{r7}
 800301a:	b085      	sub	sp, #20
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
	switch (direccion) {
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2b01      	cmp	r3, #1
 8003024:	d021      	beq.n	800306a <rotateAxis+0x52>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2b03      	cmp	r3, #3
 800302a:	d13c      	bne.n	80030a6 <rotateAxis+0x8e>
	case DERECHA:
		for (int i = 0; i < 4; i++) {
 800302c:	2300      	movs	r3, #0
 800302e:	60fb      	str	r3, [r7, #12]
 8003030:	e017      	b.n	8003062 <rotateAxis+0x4a>
			direcciones[i] = direcciones[i] - 1;
 8003032:	4a1f      	ldr	r2, [pc, #124]	; (80030b0 <rotateAxis+0x98>)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800303a:	1e5a      	subs	r2, r3, #1
 800303c:	491c      	ldr	r1, [pc, #112]	; (80030b0 <rotateAxis+0x98>)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (direcciones[i] == -1) {
 8003044:	4a1a      	ldr	r2, [pc, #104]	; (80030b0 <rotateAxis+0x98>)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800304c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003050:	d104      	bne.n	800305c <rotateAxis+0x44>
				direcciones[i] = 3;
 8003052:	4a17      	ldr	r2, [pc, #92]	; (80030b0 <rotateAxis+0x98>)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2103      	movs	r1, #3
 8003058:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int i = 0; i < 4; i++) {
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	3301      	adds	r3, #1
 8003060:	60fb      	str	r3, [r7, #12]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2b03      	cmp	r3, #3
 8003066:	dde4      	ble.n	8003032 <rotateAxis+0x1a>
			}
		}
		break;
 8003068:	e01d      	b.n	80030a6 <rotateAxis+0x8e>
	case IZQUIERDA:
		for (int j = 0; j < 4; j++) {
 800306a:	2300      	movs	r3, #0
 800306c:	60bb      	str	r3, [r7, #8]
 800306e:	e016      	b.n	800309e <rotateAxis+0x86>
			direcciones[j] = direcciones[j] + 1;
 8003070:	4a0f      	ldr	r2, [pc, #60]	; (80030b0 <rotateAxis+0x98>)
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003078:	1c5a      	adds	r2, r3, #1
 800307a:	490d      	ldr	r1, [pc, #52]	; (80030b0 <rotateAxis+0x98>)
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (direcciones[j] == 4) {
 8003082:	4a0b      	ldr	r2, [pc, #44]	; (80030b0 <rotateAxis+0x98>)
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800308a:	2b04      	cmp	r3, #4
 800308c:	d104      	bne.n	8003098 <rotateAxis+0x80>
				direcciones[j] = 0;
 800308e:	4a08      	ldr	r2, [pc, #32]	; (80030b0 <rotateAxis+0x98>)
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	2100      	movs	r1, #0
 8003094:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int j = 0; j < 4; j++) {
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	3301      	adds	r3, #1
 800309c:	60bb      	str	r3, [r7, #8]
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	2b03      	cmp	r3, #3
 80030a2:	dde5      	ble.n	8003070 <rotateAxis+0x58>
			}
		}
		break;
 80030a4:	bf00      	nop
	}
}
 80030a6:	bf00      	nop
 80030a8:	3714      	adds	r7, #20
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bc80      	pop	{r7}
 80030ae:	4770      	bx	lr
 80030b0:	200011e4 	.word	0x200011e4

080030b4 <resetAxis>:

void resetAxis() {
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
	for (int i = 0; i < 4; i++) {
 80030ba:	2300      	movs	r3, #0
 80030bc:	607b      	str	r3, [r7, #4]
 80030be:	e007      	b.n	80030d0 <resetAxis+0x1c>
		direcciones[i] = i;
 80030c0:	4908      	ldr	r1, [pc, #32]	; (80030e4 <resetAxis+0x30>)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < 4; i++) {
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	3301      	adds	r3, #1
 80030ce:	607b      	str	r3, [r7, #4]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2b03      	cmp	r3, #3
 80030d4:	ddf4      	ble.n	80030c0 <resetAxis+0xc>
	}
}
 80030d6:	bf00      	nop
 80030d8:	bf00      	nop
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	bc80      	pop	{r7}
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	200011e4 	.word	0x200011e4

080030e8 <PrintMap>:

void PrintMap() {
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
	for (int i = 0; i < alto; i++) {
 80030ee:	2300      	movs	r3, #0
 80030f0:	607b      	str	r3, [r7, #4]
 80030f2:	e032      	b.n	800315a <PrintMap+0x72>
		for (int j = 0; j < ancho; j++) {
 80030f4:	2300      	movs	r3, #0
 80030f6:	603b      	str	r3, [r7, #0]
 80030f8:	e020      	b.n	800313c <PrintMap+0x54>
			//SerialBT.print(Map[i][j].visitado);
			//SerialBT.print(" ");
			TX_BUFFER[0] = Map[i][j].visitado + '0';
 80030fa:	481c      	ldr	r0, [pc, #112]	; (800316c <PrintMap+0x84>)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	6879      	ldr	r1, [r7, #4]
 8003100:	461a      	mov	r2, r3
 8003102:	0052      	lsls	r2, r2, #1
 8003104:	441a      	add	r2, r3
 8003106:	00d3      	lsls	r3, r2, #3
 8003108:	461a      	mov	r2, r3
 800310a:	460b      	mov	r3, r1
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	440b      	add	r3, r1
 8003110:	01db      	lsls	r3, r3, #7
 8003112:	4413      	add	r3, r2
 8003114:	4403      	add	r3, r0
 8003116:	3310      	adds	r3, #16
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	b2db      	uxtb	r3, r3
 800311c:	3330      	adds	r3, #48	; 0x30
 800311e:	b2da      	uxtb	r2, r3
 8003120:	4b13      	ldr	r3, [pc, #76]	; (8003170 <PrintMap+0x88>)
 8003122:	701a      	strb	r2, [r3, #0]
			TX_BUFFER[1] = ' ';
 8003124:	4b12      	ldr	r3, [pc, #72]	; (8003170 <PrintMap+0x88>)
 8003126:	2220      	movs	r2, #32
 8003128:	705a      	strb	r2, [r3, #1]
			HAL_UART_Transmit(&huart1, TX_BUFFER, 2, 100);
 800312a:	2364      	movs	r3, #100	; 0x64
 800312c:	2202      	movs	r2, #2
 800312e:	4910      	ldr	r1, [pc, #64]	; (8003170 <PrintMap+0x88>)
 8003130:	4810      	ldr	r0, [pc, #64]	; (8003174 <PrintMap+0x8c>)
 8003132:	f003 fbd6 	bl	80068e2 <HAL_UART_Transmit>
		for (int j = 0; j < ancho; j++) {
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	3301      	adds	r3, #1
 800313a:	603b      	str	r3, [r7, #0]
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	2b0f      	cmp	r3, #15
 8003140:	dddb      	ble.n	80030fa <PrintMap+0x12>
		}
		TX_BUFFER[0] = '\n';
 8003142:	4b0b      	ldr	r3, [pc, #44]	; (8003170 <PrintMap+0x88>)
 8003144:	220a      	movs	r2, #10
 8003146:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, TX_BUFFER, 1, 100);
 8003148:	2364      	movs	r3, #100	; 0x64
 800314a:	2201      	movs	r2, #1
 800314c:	4908      	ldr	r1, [pc, #32]	; (8003170 <PrintMap+0x88>)
 800314e:	4809      	ldr	r0, [pc, #36]	; (8003174 <PrintMap+0x8c>)
 8003150:	f003 fbc7 	bl	80068e2 <HAL_UART_Transmit>
	for (int i = 0; i < alto; i++) {
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	3301      	adds	r3, #1
 8003158:	607b      	str	r3, [r7, #4]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2b0f      	cmp	r3, #15
 800315e:	ddc9      	ble.n	80030f4 <PrintMap+0xc>
	}
}
 8003160:	bf00      	nop
 8003162:	bf00      	nop
 8003164:	3708      	adds	r7, #8
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	200012b8 	.word	0x200012b8
 8003170:	20001214 	.word	0x20001214
 8003174:	20002bbc 	.word	0x20002bbc

08003178 <HAL_ADC_ConvCpltCallback>:

// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 10; i++) {
 8003180:	2300      	movs	r3, #0
 8003182:	60fb      	str	r3, [r7, #12]
 8003184:	e029      	b.n	80031da <HAL_ADC_ConvCpltCallback+0x62>
		CNY70[i] = adc_buf[i * 4];
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	4a27      	ldr	r2, [pc, #156]	; (8003228 <HAL_ADC_ConvCpltCallback+0xb0>)
 800318c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003190:	4926      	ldr	r1, [pc, #152]	; (800322c <HAL_ADC_ConvCpltCallback+0xb4>)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SHARP_1[i] = adc_buf[i * 4 + 1];
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	3301      	adds	r3, #1
 800319e:	4a22      	ldr	r2, [pc, #136]	; (8003228 <HAL_ADC_ConvCpltCallback+0xb0>)
 80031a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80031a4:	4922      	ldr	r1, [pc, #136]	; (8003230 <HAL_ADC_ConvCpltCallback+0xb8>)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SHARP_2[i] = adc_buf[i * 4 + 2];
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	3302      	adds	r3, #2
 80031b2:	4a1d      	ldr	r2, [pc, #116]	; (8003228 <HAL_ADC_ConvCpltCallback+0xb0>)
 80031b4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80031b8:	491e      	ldr	r1, [pc, #120]	; (8003234 <HAL_ADC_ConvCpltCallback+0xbc>)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SHARP_3[i] = adc_buf[i * 4 + 3];
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	3303      	adds	r3, #3
 80031c6:	4a18      	ldr	r2, [pc, #96]	; (8003228 <HAL_ADC_ConvCpltCallback+0xb0>)
 80031c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80031cc:	491a      	ldr	r1, [pc, #104]	; (8003238 <HAL_ADC_ConvCpltCallback+0xc0>)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < 10; i++) {
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	3301      	adds	r3, #1
 80031d8:	60fb      	str	r3, [r7, #12]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2b09      	cmp	r3, #9
 80031de:	ddd2      	ble.n	8003186 <HAL_ADC_ConvCpltCallback+0xe>
	}
	Sensors[0] = lecturaCNY70(10, CNY70);
 80031e0:	4912      	ldr	r1, [pc, #72]	; (800322c <HAL_ADC_ConvCpltCallback+0xb4>)
 80031e2:	200a      	movs	r0, #10
 80031e4:	f000 fc44 	bl	8003a70 <lecturaCNY70>
 80031e8:	4603      	mov	r3, r0
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7fd fd26 	bl	8000c3c <__aeabi_i2f>
 80031f0:	4603      	mov	r3, r0
 80031f2:	4a12      	ldr	r2, [pc, #72]	; (800323c <HAL_ADC_ConvCpltCallback+0xc4>)
 80031f4:	6013      	str	r3, [r2, #0]
	Sensors[1] = lecSensor(10, SHARP_1);
 80031f6:	490e      	ldr	r1, [pc, #56]	; (8003230 <HAL_ADC_ConvCpltCallback+0xb8>)
 80031f8:	200a      	movs	r0, #10
 80031fa:	f000 fbb9 	bl	8003970 <lecSensor>
 80031fe:	4603      	mov	r3, r0
 8003200:	4a0e      	ldr	r2, [pc, #56]	; (800323c <HAL_ADC_ConvCpltCallback+0xc4>)
 8003202:	6053      	str	r3, [r2, #4]
	Sensors[2] = lecSensor(10, SHARP_2);
 8003204:	490b      	ldr	r1, [pc, #44]	; (8003234 <HAL_ADC_ConvCpltCallback+0xbc>)
 8003206:	200a      	movs	r0, #10
 8003208:	f000 fbb2 	bl	8003970 <lecSensor>
 800320c:	4603      	mov	r3, r0
 800320e:	4a0b      	ldr	r2, [pc, #44]	; (800323c <HAL_ADC_ConvCpltCallback+0xc4>)
 8003210:	6093      	str	r3, [r2, #8]
	Sensors[3] = lecSensor(10, SHARP_3);
 8003212:	4909      	ldr	r1, [pc, #36]	; (8003238 <HAL_ADC_ConvCpltCallback+0xc0>)
 8003214:	200a      	movs	r0, #10
 8003216:	f000 fbab 	bl	8003970 <lecSensor>
 800321a:	4603      	mov	r3, r0
 800321c:	4a07      	ldr	r2, [pc, #28]	; (800323c <HAL_ADC_ConvCpltCallback+0xc4>)
 800321e:	60d3      	str	r3, [r2, #12]

}
 8003220:	bf00      	nop
 8003222:	3710      	adds	r7, #16
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	20000134 	.word	0x20000134
 800322c:	20001134 	.word	0x20001134
 8003230:	2000115c 	.word	0x2000115c
 8003234:	20001184 	.word	0x20001184
 8003238:	200011ac 	.word	0x200011ac
 800323c:	200011d4 	.word	0x200011d4

08003240 <MAP>:

uint32_t MAP(uint32_t au32_IN, uint32_t au32_INmin, uint32_t au32_INmax,
		uint32_t au32_OUTmin, uint32_t au32_OUTmax) {
 8003240:	b480      	push	{r7}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	60b9      	str	r1, [r7, #8]
 800324a:	607a      	str	r2, [r7, #4]
 800324c:	603b      	str	r3, [r7, #0]
	return ((((au32_IN - au32_INmin) * (au32_OUTmax - au32_OUTmin))
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	69b9      	ldr	r1, [r7, #24]
 8003256:	683a      	ldr	r2, [r7, #0]
 8003258:	1a8a      	subs	r2, r1, r2
 800325a:	fb03 f202 	mul.w	r2, r3, r2
			/ (au32_INmax - au32_INmin)) + au32_OUTmin);
 800325e:	6879      	ldr	r1, [r7, #4]
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	1acb      	subs	r3, r1, r3
 8003264:	fbb2 f2f3 	udiv	r2, r2, r3
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	4413      	add	r3, r2
}
 800326c:	4618      	mov	r0, r3
 800326e:	3714      	adds	r7, #20
 8003270:	46bd      	mov	sp, r7
 8003272:	bc80      	pop	{r7}
 8003274:	4770      	bx	lr

08003276 <constrain>:

int constrain(int x, int a, int b) {
 8003276:	b480      	push	{r7}
 8003278:	b085      	sub	sp, #20
 800327a:	af00      	add	r7, sp, #0
 800327c:	60f8      	str	r0, [r7, #12]
 800327e:	60b9      	str	r1, [r7, #8]
 8003280:	607a      	str	r2, [r7, #4]
	if (x < a) {
 8003282:	68fa      	ldr	r2, [r7, #12]
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	429a      	cmp	r2, r3
 8003288:	da01      	bge.n	800328e <constrain+0x18>
		return a;
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	e006      	b.n	800329c <constrain+0x26>
	} else if (b < x) {
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	429a      	cmp	r2, r3
 8003294:	da01      	bge.n	800329a <constrain+0x24>
		return b;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	e000      	b.n	800329c <constrain+0x26>
	} else
		return x;
 800329a:	68fb      	ldr	r3, [r7, #12]
}
 800329c:	4618      	mov	r0, r3
 800329e:	3714      	adds	r7, #20
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bc80      	pop	{r7}
 80032a4:	4770      	bx	lr
	...

080032a8 <wallDetector>:

int wallDetector(int n, int d) {
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]
	switch (d) {
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	2b03      	cmp	r3, #3
 80032b6:	d01b      	beq.n	80032f0 <wallDetector+0x48>
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	2b03      	cmp	r3, #3
 80032bc:	dc21      	bgt.n	8003302 <wallDetector+0x5a>
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d003      	beq.n	80032cc <wallDetector+0x24>
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d009      	beq.n	80032de <wallDetector+0x36>
 80032ca:	e01a      	b.n	8003302 <wallDetector+0x5a>
	case ADELANTE:
		if (n < MaxCenterDistance) {
 80032cc:	4b10      	ldr	r3, [pc, #64]	; (8003310 <wallDetector+0x68>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	da01      	bge.n	80032da <wallDetector+0x32>
			return 1;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e014      	b.n	8003304 <wallDetector+0x5c>
		} else {
			return 0;
 80032da:	2300      	movs	r3, #0
 80032dc:	e012      	b.n	8003304 <wallDetector+0x5c>
		}
		break;

	case IZQUIERDA:
		if (n < MaxLeftDistance) {
 80032de:	4b0d      	ldr	r3, [pc, #52]	; (8003314 <wallDetector+0x6c>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	da01      	bge.n	80032ec <wallDetector+0x44>
			return 1;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e00b      	b.n	8003304 <wallDetector+0x5c>
		} else {
			return 0;
 80032ec:	2300      	movs	r3, #0
 80032ee:	e009      	b.n	8003304 <wallDetector+0x5c>
		}
		break;
	case DERECHA:
		if (n < MaxRightDistance) {
 80032f0:	4b09      	ldr	r3, [pc, #36]	; (8003318 <wallDetector+0x70>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	da01      	bge.n	80032fe <wallDetector+0x56>
			return 1;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e002      	b.n	8003304 <wallDetector+0x5c>
		} else {
			return 0;
 80032fe:	2300      	movs	r3, #0
 8003300:	e000      	b.n	8003304 <wallDetector+0x5c>
		}
		break;
	default:
		return 0;
 8003302:	2300      	movs	r3, #0
		break;
	}
}
 8003304:	4618      	mov	r0, r3
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	bc80      	pop	{r7}
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	20001208 	.word	0x20001208
 8003314:	20001204 	.word	0x20001204
 8003318:	20001200 	.word	0x20001200

0800331c <moveStraight>:

void moveStraight() {
 800331c:	b590      	push	{r4, r7, lr}
 800331e:	b083      	sub	sp, #12
 8003320:	af02      	add	r7, sp, #8
	if (Sensors[3] < MaxLeftDistance && Sensors[1] < MaxRightDistance - 2) {
 8003322:	4b37      	ldr	r3, [pc, #220]	; (8003400 <moveStraight+0xe4>)
 8003324:	68dc      	ldr	r4, [r3, #12]
 8003326:	4b37      	ldr	r3, [pc, #220]	; (8003404 <moveStraight+0xe8>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4618      	mov	r0, r3
 800332c:	f7fd fc86 	bl	8000c3c <__aeabi_i2f>
 8003330:	4603      	mov	r3, r0
 8003332:	4619      	mov	r1, r3
 8003334:	4620      	mov	r0, r4
 8003336:	f7fd fe73 	bl	8001020 <__aeabi_fcmplt>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d01c      	beq.n	800337a <moveStraight+0x5e>
 8003340:	4b2f      	ldr	r3, [pc, #188]	; (8003400 <moveStraight+0xe4>)
 8003342:	685c      	ldr	r4, [r3, #4]
 8003344:	4b30      	ldr	r3, [pc, #192]	; (8003408 <moveStraight+0xec>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	3b02      	subs	r3, #2
 800334a:	4618      	mov	r0, r3
 800334c:	f7fd fc76 	bl	8000c3c <__aeabi_i2f>
 8003350:	4603      	mov	r3, r0
 8003352:	4619      	mov	r1, r3
 8003354:	4620      	mov	r0, r4
 8003356:	f7fd fe63 	bl	8001020 <__aeabi_fcmplt>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d00c      	beq.n	800337a <moveStraight+0x5e>
		//intUartSend(0);
		error = Sensors[3] - Sensors[1];
 8003360:	4b27      	ldr	r3, [pc, #156]	; (8003400 <moveStraight+0xe4>)
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	4a26      	ldr	r2, [pc, #152]	; (8003400 <moveStraight+0xe4>)
 8003366:	6852      	ldr	r2, [r2, #4]
 8003368:	4611      	mov	r1, r2
 800336a:	4618      	mov	r0, r3
 800336c:	f7fd fbb0 	bl	8000ad0 <__aeabi_fsub>
 8003370:	4603      	mov	r3, r0
 8003372:	461a      	mov	r2, r3
 8003374:	4b25      	ldr	r3, [pc, #148]	; (800340c <moveStraight+0xf0>)
 8003376:	601a      	str	r2, [r3, #0]
 8003378:	e052      	b.n	8003420 <moveStraight+0x104>
	} else if (Sensors[3] < MaxLeftDistance - 2) {
 800337a:	4b21      	ldr	r3, [pc, #132]	; (8003400 <moveStraight+0xe4>)
 800337c:	68dc      	ldr	r4, [r3, #12]
 800337e:	4b21      	ldr	r3, [pc, #132]	; (8003404 <moveStraight+0xe8>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	3b02      	subs	r3, #2
 8003384:	4618      	mov	r0, r3
 8003386:	f7fd fc59 	bl	8000c3c <__aeabi_i2f>
 800338a:	4603      	mov	r3, r0
 800338c:	4619      	mov	r1, r3
 800338e:	4620      	mov	r0, r4
 8003390:	f7fd fe46 	bl	8001020 <__aeabi_fcmplt>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d010      	beq.n	80033bc <moveStraight+0xa0>
		//intUartSend(1);
		error = Sensors[3] - CenterDistanceLeft;
 800339a:	4b19      	ldr	r3, [pc, #100]	; (8003400 <moveStraight+0xe4>)
 800339c:	68dc      	ldr	r4, [r3, #12]
 800339e:	4b1c      	ldr	r3, [pc, #112]	; (8003410 <moveStraight+0xf4>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7fd fc4a 	bl	8000c3c <__aeabi_i2f>
 80033a8:	4603      	mov	r3, r0
 80033aa:	4619      	mov	r1, r3
 80033ac:	4620      	mov	r0, r4
 80033ae:	f7fd fb8f 	bl	8000ad0 <__aeabi_fsub>
 80033b2:	4603      	mov	r3, r0
 80033b4:	461a      	mov	r2, r3
 80033b6:	4b15      	ldr	r3, [pc, #84]	; (800340c <moveStraight+0xf0>)
 80033b8:	601a      	str	r2, [r3, #0]
 80033ba:	e031      	b.n	8003420 <moveStraight+0x104>
	} else if (Sensors[1] < MaxRightDistance - 2) {
 80033bc:	4b10      	ldr	r3, [pc, #64]	; (8003400 <moveStraight+0xe4>)
 80033be:	685c      	ldr	r4, [r3, #4]
 80033c0:	4b11      	ldr	r3, [pc, #68]	; (8003408 <moveStraight+0xec>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	3b02      	subs	r3, #2
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7fd fc38 	bl	8000c3c <__aeabi_i2f>
 80033cc:	4603      	mov	r3, r0
 80033ce:	4619      	mov	r1, r3
 80033d0:	4620      	mov	r0, r4
 80033d2:	f7fd fe25 	bl	8001020 <__aeabi_fcmplt>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d01d      	beq.n	8003418 <moveStraight+0xfc>
		//intUartSend(2);
		error = CenterDistanceRight - Sensors[1];
 80033dc:	4b0d      	ldr	r3, [pc, #52]	; (8003414 <moveStraight+0xf8>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7fd fc2b 	bl	8000c3c <__aeabi_i2f>
 80033e6:	4602      	mov	r2, r0
 80033e8:	4b05      	ldr	r3, [pc, #20]	; (8003400 <moveStraight+0xe4>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	4619      	mov	r1, r3
 80033ee:	4610      	mov	r0, r2
 80033f0:	f7fd fb6e 	bl	8000ad0 <__aeabi_fsub>
 80033f4:	4603      	mov	r3, r0
 80033f6:	461a      	mov	r2, r3
 80033f8:	4b04      	ldr	r3, [pc, #16]	; (800340c <moveStraight+0xf0>)
 80033fa:	601a      	str	r2, [r3, #0]
 80033fc:	e010      	b.n	8003420 <moveStraight+0x104>
 80033fe:	bf00      	nop
 8003400:	200011d4 	.word	0x200011d4
 8003404:	20001204 	.word	0x20001204
 8003408:	20001200 	.word	0x20001200
 800340c:	20002ab8 	.word	0x20002ab8
 8003410:	200011fc 	.word	0x200011fc
 8003414:	200011f8 	.word	0x200011f8
	} else {
		//intUartSend(3);
		error = 0;
 8003418:	4b79      	ldr	r3, [pc, #484]	; (8003600 <moveStraight+0x2e4>)
 800341a:	f04f 0200 	mov.w	r2, #0
 800341e:	601a      	str	r2, [r3, #0]
	}

	timePrev = timeNow;
 8003420:	4b78      	ldr	r3, [pc, #480]	; (8003604 <moveStraight+0x2e8>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a78      	ldr	r2, [pc, #480]	; (8003608 <moveStraight+0x2ec>)
 8003426:	6013      	str	r3, [r2, #0]
	timeNow = HAL_GetTick();
 8003428:	f000 fea2 	bl	8004170 <HAL_GetTick>
 800342c:	4603      	mov	r3, r0
 800342e:	4618      	mov	r0, r3
 8003430:	f7fd fc00 	bl	8000c34 <__aeabi_ui2f>
 8003434:	4603      	mov	r3, r0
 8003436:	4a73      	ldr	r2, [pc, #460]	; (8003604 <moveStraight+0x2e8>)
 8003438:	6013      	str	r3, [r2, #0]
	elapsedTime = (timeNow - timePrev) / 1000;
 800343a:	4b72      	ldr	r3, [pc, #456]	; (8003604 <moveStraight+0x2e8>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a72      	ldr	r2, [pc, #456]	; (8003608 <moveStraight+0x2ec>)
 8003440:	6812      	ldr	r2, [r2, #0]
 8003442:	4611      	mov	r1, r2
 8003444:	4618      	mov	r0, r3
 8003446:	f7fd fb43 	bl	8000ad0 <__aeabi_fsub>
 800344a:	4603      	mov	r3, r0
 800344c:	496f      	ldr	r1, [pc, #444]	; (800360c <moveStraight+0x2f0>)
 800344e:	4618      	mov	r0, r3
 8003450:	f7fd fcfc 	bl	8000e4c <__aeabi_fdiv>
 8003454:	4603      	mov	r3, r0
 8003456:	461a      	mov	r2, r3
 8003458:	4b6d      	ldr	r3, [pc, #436]	; (8003610 <moveStraight+0x2f4>)
 800345a:	601a      	str	r2, [r3, #0]
	pidD = KD * ((error - previousError) / elapsedTime);
 800345c:	4b68      	ldr	r3, [pc, #416]	; (8003600 <moveStraight+0x2e4>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a6c      	ldr	r2, [pc, #432]	; (8003614 <moveStraight+0x2f8>)
 8003462:	6812      	ldr	r2, [r2, #0]
 8003464:	4611      	mov	r1, r2
 8003466:	4618      	mov	r0, r3
 8003468:	f7fd fb32 	bl	8000ad0 <__aeabi_fsub>
 800346c:	4603      	mov	r3, r0
 800346e:	461a      	mov	r2, r3
 8003470:	4b67      	ldr	r3, [pc, #412]	; (8003610 <moveStraight+0x2f4>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4619      	mov	r1, r3
 8003476:	4610      	mov	r0, r2
 8003478:	f7fd fce8 	bl	8000e4c <__aeabi_fdiv>
 800347c:	4603      	mov	r3, r0
 800347e:	461a      	mov	r2, r3
 8003480:	4b65      	ldr	r3, [pc, #404]	; (8003618 <moveStraight+0x2fc>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4619      	mov	r1, r3
 8003486:	4610      	mov	r0, r2
 8003488:	f7fd fc2c 	bl	8000ce4 <__aeabi_fmul>
 800348c:	4603      	mov	r3, r0
 800348e:	461a      	mov	r2, r3
 8003490:	4b62      	ldr	r3, [pc, #392]	; (800361c <moveStraight+0x300>)
 8003492:	601a      	str	r2, [r3, #0]
	pidP = KP * error;
 8003494:	4b62      	ldr	r3, [pc, #392]	; (8003620 <moveStraight+0x304>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a59      	ldr	r2, [pc, #356]	; (8003600 <moveStraight+0x2e4>)
 800349a:	6812      	ldr	r2, [r2, #0]
 800349c:	4611      	mov	r1, r2
 800349e:	4618      	mov	r0, r3
 80034a0:	f7fd fc20 	bl	8000ce4 <__aeabi_fmul>
 80034a4:	4603      	mov	r3, r0
 80034a6:	461a      	mov	r2, r3
 80034a8:	4b5e      	ldr	r3, [pc, #376]	; (8003624 <moveStraight+0x308>)
 80034aa:	601a      	str	r2, [r3, #0]
	pid = pidP + pidD;
 80034ac:	4b5d      	ldr	r3, [pc, #372]	; (8003624 <moveStraight+0x308>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a5a      	ldr	r2, [pc, #360]	; (800361c <moveStraight+0x300>)
 80034b2:	6812      	ldr	r2, [r2, #0]
 80034b4:	4611      	mov	r1, r2
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7fd fb0c 	bl	8000ad4 <__addsf3>
 80034bc:	4603      	mov	r3, r0
 80034be:	461a      	mov	r2, r3
 80034c0:	4b59      	ldr	r3, [pc, #356]	; (8003628 <moveStraight+0x30c>)
 80034c2:	601a      	str	r2, [r3, #0]
	if (pid > velocity) {
 80034c4:	4b58      	ldr	r3, [pc, #352]	; (8003628 <moveStraight+0x30c>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a58      	ldr	r2, [pc, #352]	; (800362c <moveStraight+0x310>)
 80034ca:	6812      	ldr	r2, [r2, #0]
 80034cc:	4611      	mov	r1, r2
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7fd fdc4 	bl	800105c <__aeabi_fcmpgt>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d003      	beq.n	80034e2 <moveStraight+0x1c6>
		//intUartSend(1);
		pid = velocity;
 80034da:	4b54      	ldr	r3, [pc, #336]	; (800362c <moveStraight+0x310>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a52      	ldr	r2, [pc, #328]	; (8003628 <moveStraight+0x30c>)
 80034e0:	6013      	str	r3, [r2, #0]
	}
	if (pid < -velocity) {
 80034e2:	4b52      	ldr	r3, [pc, #328]	; (800362c <moveStraight+0x310>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80034ea:	4a4f      	ldr	r2, [pc, #316]	; (8003628 <moveStraight+0x30c>)
 80034ec:	6812      	ldr	r2, [r2, #0]
 80034ee:	4611      	mov	r1, r2
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7fd fdb3 	bl	800105c <__aeabi_fcmpgt>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d005      	beq.n	8003508 <moveStraight+0x1ec>
		//intUartSend(0);
		pid = -velocity;
 80034fc:	4b4b      	ldr	r3, [pc, #300]	; (800362c <moveStraight+0x310>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003504:	4a48      	ldr	r2, [pc, #288]	; (8003628 <moveStraight+0x30c>)
 8003506:	6013      	str	r3, [r2, #0]
	}
	//intUartSend(abs(pid));
	motLeft = velocity - pid;
 8003508:	4b48      	ldr	r3, [pc, #288]	; (800362c <moveStraight+0x310>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a46      	ldr	r2, [pc, #280]	; (8003628 <moveStraight+0x30c>)
 800350e:	6812      	ldr	r2, [r2, #0]
 8003510:	4611      	mov	r1, r2
 8003512:	4618      	mov	r0, r3
 8003514:	f7fd fadc 	bl	8000ad0 <__aeabi_fsub>
 8003518:	4603      	mov	r3, r0
 800351a:	4618      	mov	r0, r3
 800351c:	f7fd fda8 	bl	8001070 <__aeabi_f2iz>
 8003520:	4603      	mov	r3, r0
 8003522:	4a43      	ldr	r2, [pc, #268]	; (8003630 <moveStraight+0x314>)
 8003524:	6013      	str	r3, [r2, #0]
	motRight = velocity + pid;
 8003526:	4b41      	ldr	r3, [pc, #260]	; (800362c <moveStraight+0x310>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a3f      	ldr	r2, [pc, #252]	; (8003628 <moveStraight+0x30c>)
 800352c:	6812      	ldr	r2, [r2, #0]
 800352e:	4611      	mov	r1, r2
 8003530:	4618      	mov	r0, r3
 8003532:	f7fd facf 	bl	8000ad4 <__addsf3>
 8003536:	4603      	mov	r3, r0
 8003538:	4618      	mov	r0, r3
 800353a:	f7fd fd99 	bl	8001070 <__aeabi_f2iz>
 800353e:	4603      	mov	r3, r0
 8003540:	4a3c      	ldr	r2, [pc, #240]	; (8003634 <moveStraight+0x318>)
 8003542:	6013      	str	r3, [r2, #0]
	if (motLeft < 0) {
 8003544:	4b3a      	ldr	r3, [pc, #232]	; (8003630 <moveStraight+0x314>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2b00      	cmp	r3, #0
 800354a:	da02      	bge.n	8003552 <moveStraight+0x236>
		motLeft = 0;
 800354c:	4b38      	ldr	r3, [pc, #224]	; (8003630 <moveStraight+0x314>)
 800354e:	2200      	movs	r2, #0
 8003550:	601a      	str	r2, [r3, #0]
	}
	if (motRight < 0) {
 8003552:	4b38      	ldr	r3, [pc, #224]	; (8003634 <moveStraight+0x318>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2b00      	cmp	r3, #0
 8003558:	da02      	bge.n	8003560 <moveStraight+0x244>
		motRight = 0;
 800355a:	4b36      	ldr	r3, [pc, #216]	; (8003634 <moveStraight+0x318>)
 800355c:	2200      	movs	r2, #0
 800355e:	601a      	str	r2, [r3, #0]
	}

	previousError = error;
 8003560:	4b27      	ldr	r3, [pc, #156]	; (8003600 <moveStraight+0x2e4>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a2b      	ldr	r2, [pc, #172]	; (8003614 <moveStraight+0x2f8>)
 8003566:	6013      	str	r3, [r2, #0]
	motRight = constrain(motRight, -1000, 1000);
 8003568:	4b32      	ldr	r3, [pc, #200]	; (8003634 <moveStraight+0x318>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003570:	4931      	ldr	r1, [pc, #196]	; (8003638 <moveStraight+0x31c>)
 8003572:	4618      	mov	r0, r3
 8003574:	f7ff fe7f 	bl	8003276 <constrain>
 8003578:	4603      	mov	r3, r0
 800357a:	4a2e      	ldr	r2, [pc, #184]	; (8003634 <moveStraight+0x318>)
 800357c:	6013      	str	r3, [r2, #0]
	motLeft = constrain(motLeft, -1000, 1000);
 800357e:	4b2c      	ldr	r3, [pc, #176]	; (8003630 <moveStraight+0x314>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003586:	492c      	ldr	r1, [pc, #176]	; (8003638 <moveStraight+0x31c>)
 8003588:	4618      	mov	r0, r3
 800358a:	f7ff fe74 	bl	8003276 <constrain>
 800358e:	4603      	mov	r3, r0
 8003590:	4a27      	ldr	r2, [pc, #156]	; (8003630 <moveStraight+0x314>)
 8003592:	6013      	str	r3, [r2, #0]

	motRight = MAP(motRight, -1000, 1000, 0, baseChoice[choice] * 2);
 8003594:	4b27      	ldr	r3, [pc, #156]	; (8003634 <moveStraight+0x318>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4618      	mov	r0, r3
 800359a:	4b28      	ldr	r3, [pc, #160]	; (800363c <moveStraight+0x320>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a28      	ldr	r2, [pc, #160]	; (8003640 <moveStraight+0x324>)
 80035a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035a4:	005b      	lsls	r3, r3, #1
 80035a6:	9300      	str	r3, [sp, #0]
 80035a8:	2300      	movs	r3, #0
 80035aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80035ae:	4922      	ldr	r1, [pc, #136]	; (8003638 <moveStraight+0x31c>)
 80035b0:	f7ff fe46 	bl	8003240 <MAP>
 80035b4:	4603      	mov	r3, r0
 80035b6:	461a      	mov	r2, r3
 80035b8:	4b1e      	ldr	r3, [pc, #120]	; (8003634 <moveStraight+0x318>)
 80035ba:	601a      	str	r2, [r3, #0]
	motLeft = MAP(motLeft, -1000, 1000, 0, baseChoice[choice] * 2);
 80035bc:	4b1c      	ldr	r3, [pc, #112]	; (8003630 <moveStraight+0x314>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4618      	mov	r0, r3
 80035c2:	4b1e      	ldr	r3, [pc, #120]	; (800363c <moveStraight+0x320>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a1e      	ldr	r2, [pc, #120]	; (8003640 <moveStraight+0x324>)
 80035c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035cc:	005b      	lsls	r3, r3, #1
 80035ce:	9300      	str	r3, [sp, #0]
 80035d0:	2300      	movs	r3, #0
 80035d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80035d6:	4918      	ldr	r1, [pc, #96]	; (8003638 <moveStraight+0x31c>)
 80035d8:	f7ff fe32 	bl	8003240 <MAP>
 80035dc:	4603      	mov	r3, r0
 80035de:	461a      	mov	r2, r3
 80035e0:	4b13      	ldr	r3, [pc, #76]	; (8003630 <moveStraight+0x314>)
 80035e2:	601a      	str	r2, [r3, #0]
	TIM2->CCR4 = motLeft;
 80035e4:	4b12      	ldr	r3, [pc, #72]	; (8003630 <moveStraight+0x314>)
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80035ec:	641a      	str	r2, [r3, #64]	; 0x40
	TIM2->CCR3 = motRight;
 80035ee:	4b11      	ldr	r3, [pc, #68]	; (8003634 <moveStraight+0x318>)
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80035f6:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80035f8:	bf00      	nop
 80035fa:	3704      	adds	r7, #4
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd90      	pop	{r4, r7, pc}
 8003600:	20002ab8 	.word	0x20002ab8
 8003604:	20002ac8 	.word	0x20002ac8
 8003608:	20002acc 	.word	0x20002acc
 800360c:	447a0000 	.word	0x447a0000
 8003610:	20002ac4 	.word	0x20002ac4
 8003614:	20002ac0 	.word	0x20002ac0
 8003618:	20001224 	.word	0x20001224
 800361c:	20002ad4 	.word	0x20002ad4
 8003620:	20001220 	.word	0x20001220
 8003624:	20002ad0 	.word	0x20002ad0
 8003628:	20002abc 	.word	0x20002abc
 800362c:	20001228 	.word	0x20001228
 8003630:	20002ad8 	.word	0x20002ad8
 8003634:	20002adc 	.word	0x20002adc
 8003638:	fffffc18 	.word	0xfffffc18
 800363c:	20001230 	.word	0x20001230
 8003640:	20000018 	.word	0x20000018

08003644 <btnMachine>:
void runForward() {
	runMotor(ADELANTE, MOTOR_A);
	runMotor(ADELANTE, MOTOR_B);
}

void btnMachine(int index) {
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
	switch (btns[index].estado) {
 800364c:	4a50      	ldr	r2, [pc, #320]	; (8003790 <btnMachine+0x14c>)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	011b      	lsls	r3, r3, #4
 8003652:	4413      	add	r3, r2
 8003654:	3308      	adds	r3, #8
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2b02      	cmp	r3, #2
 800365a:	d069      	beq.n	8003730 <btnMachine+0xec>
 800365c:	2b02      	cmp	r3, #2
 800365e:	f300 8092 	bgt.w	8003786 <btnMachine+0x142>
 8003662:	2b00      	cmp	r3, #0
 8003664:	d002      	beq.n	800366c <btnMachine+0x28>
 8003666:	2b01      	cmp	r3, #1
 8003668:	d02c      	beq.n	80036c4 <btnMachine+0x80>
			btns[index].flag = 1;
			btns[index].estado = ESPERA;
		}
		break;
	}
}
 800366a:	e08c      	b.n	8003786 <btnMachine+0x142>
		btns[index].flag = 0;
 800366c:	4a48      	ldr	r2, [pc, #288]	; (8003790 <btnMachine+0x14c>)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	011b      	lsls	r3, r3, #4
 8003672:	4413      	add	r3, r2
 8003674:	330c      	adds	r3, #12
 8003676:	2200      	movs	r2, #0
 8003678:	601a      	str	r2, [r3, #0]
		lecturaBtn = HAL_GPIO_ReadPin(btns[index].Port, btns[index].pin);
 800367a:	4a45      	ldr	r2, [pc, #276]	; (8003790 <btnMachine+0x14c>)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	011b      	lsls	r3, r3, #4
 8003680:	4413      	add	r3, r2
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	4942      	ldr	r1, [pc, #264]	; (8003790 <btnMachine+0x14c>)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	011b      	lsls	r3, r3, #4
 800368a:	440b      	add	r3, r1
 800368c:	3304      	adds	r3, #4
 800368e:	881b      	ldrh	r3, [r3, #0]
 8003690:	4619      	mov	r1, r3
 8003692:	4610      	mov	r0, r2
 8003694:	f001 fe8c 	bl	80053b0 <HAL_GPIO_ReadPin>
 8003698:	4603      	mov	r3, r0
 800369a:	461a      	mov	r2, r3
 800369c:	4b3d      	ldr	r3, [pc, #244]	; (8003794 <btnMachine+0x150>)
 800369e:	601a      	str	r2, [r3, #0]
		if (lecturaBtn == 0) {
 80036a0:	4b3c      	ldr	r3, [pc, #240]	; (8003794 <btnMachine+0x150>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d169      	bne.n	800377c <btnMachine+0x138>
			ticks = HAL_GetTick();
 80036a8:	f000 fd62 	bl	8004170 <HAL_GetTick>
 80036ac:	4603      	mov	r3, r0
 80036ae:	461a      	mov	r2, r3
 80036b0:	4b39      	ldr	r3, [pc, #228]	; (8003798 <btnMachine+0x154>)
 80036b2:	601a      	str	r2, [r3, #0]
			btns[index].estado = CONFIRMACION;
 80036b4:	4a36      	ldr	r2, [pc, #216]	; (8003790 <btnMachine+0x14c>)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	011b      	lsls	r3, r3, #4
 80036ba:	4413      	add	r3, r2
 80036bc:	3308      	adds	r3, #8
 80036be:	2201      	movs	r2, #1
 80036c0:	601a      	str	r2, [r3, #0]
		break;
 80036c2:	e05b      	b.n	800377c <btnMachine+0x138>
		lecturaBtn = HAL_GPIO_ReadPin(btns[index].Port, btns[index].pin);
 80036c4:	4a32      	ldr	r2, [pc, #200]	; (8003790 <btnMachine+0x14c>)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	011b      	lsls	r3, r3, #4
 80036ca:	4413      	add	r3, r2
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	4930      	ldr	r1, [pc, #192]	; (8003790 <btnMachine+0x14c>)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	011b      	lsls	r3, r3, #4
 80036d4:	440b      	add	r3, r1
 80036d6:	3304      	adds	r3, #4
 80036d8:	881b      	ldrh	r3, [r3, #0]
 80036da:	4619      	mov	r1, r3
 80036dc:	4610      	mov	r0, r2
 80036de:	f001 fe67 	bl	80053b0 <HAL_GPIO_ReadPin>
 80036e2:	4603      	mov	r3, r0
 80036e4:	461a      	mov	r2, r3
 80036e6:	4b2b      	ldr	r3, [pc, #172]	; (8003794 <btnMachine+0x150>)
 80036e8:	601a      	str	r2, [r3, #0]
		if (lecturaBtn == 0 && HAL_GetTick() >= ticks + TICKS_BTN) {
 80036ea:	4b2a      	ldr	r3, [pc, #168]	; (8003794 <btnMachine+0x150>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d10e      	bne.n	8003710 <btnMachine+0xcc>
 80036f2:	f000 fd3d 	bl	8004170 <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	4b27      	ldr	r3, [pc, #156]	; (8003798 <btnMachine+0x154>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	3319      	adds	r3, #25
 80036fe:	429a      	cmp	r2, r3
 8003700:	d306      	bcc.n	8003710 <btnMachine+0xcc>
			btns[index].estado = LIBERACION;
 8003702:	4a23      	ldr	r2, [pc, #140]	; (8003790 <btnMachine+0x14c>)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	011b      	lsls	r3, r3, #4
 8003708:	4413      	add	r3, r2
 800370a:	3308      	adds	r3, #8
 800370c:	2202      	movs	r2, #2
 800370e:	601a      	str	r2, [r3, #0]
		if (lecturaBtn == 1 && ticks < TICKS_BTN) {
 8003710:	4b20      	ldr	r3, [pc, #128]	; (8003794 <btnMachine+0x150>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2b01      	cmp	r3, #1
 8003716:	d133      	bne.n	8003780 <btnMachine+0x13c>
 8003718:	4b1f      	ldr	r3, [pc, #124]	; (8003798 <btnMachine+0x154>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2b18      	cmp	r3, #24
 800371e:	dc2f      	bgt.n	8003780 <btnMachine+0x13c>
			btns[index].estado = ESPERA;
 8003720:	4a1b      	ldr	r2, [pc, #108]	; (8003790 <btnMachine+0x14c>)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	011b      	lsls	r3, r3, #4
 8003726:	4413      	add	r3, r2
 8003728:	3308      	adds	r3, #8
 800372a:	2200      	movs	r2, #0
 800372c:	601a      	str	r2, [r3, #0]
		break;
 800372e:	e027      	b.n	8003780 <btnMachine+0x13c>
		lecturaBtn = HAL_GPIO_ReadPin(btns[index].Port, btns[index].pin);
 8003730:	4a17      	ldr	r2, [pc, #92]	; (8003790 <btnMachine+0x14c>)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	011b      	lsls	r3, r3, #4
 8003736:	4413      	add	r3, r2
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	4915      	ldr	r1, [pc, #84]	; (8003790 <btnMachine+0x14c>)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	011b      	lsls	r3, r3, #4
 8003740:	440b      	add	r3, r1
 8003742:	3304      	adds	r3, #4
 8003744:	881b      	ldrh	r3, [r3, #0]
 8003746:	4619      	mov	r1, r3
 8003748:	4610      	mov	r0, r2
 800374a:	f001 fe31 	bl	80053b0 <HAL_GPIO_ReadPin>
 800374e:	4603      	mov	r3, r0
 8003750:	461a      	mov	r2, r3
 8003752:	4b10      	ldr	r3, [pc, #64]	; (8003794 <btnMachine+0x150>)
 8003754:	601a      	str	r2, [r3, #0]
		if (lecturaBtn == 1) {
 8003756:	4b0f      	ldr	r3, [pc, #60]	; (8003794 <btnMachine+0x150>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2b01      	cmp	r3, #1
 800375c:	d112      	bne.n	8003784 <btnMachine+0x140>
			btns[index].flag = 1;
 800375e:	4a0c      	ldr	r2, [pc, #48]	; (8003790 <btnMachine+0x14c>)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	011b      	lsls	r3, r3, #4
 8003764:	4413      	add	r3, r2
 8003766:	330c      	adds	r3, #12
 8003768:	2201      	movs	r2, #1
 800376a:	601a      	str	r2, [r3, #0]
			btns[index].estado = ESPERA;
 800376c:	4a08      	ldr	r2, [pc, #32]	; (8003790 <btnMachine+0x14c>)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	011b      	lsls	r3, r3, #4
 8003772:	4413      	add	r3, r2
 8003774:	3308      	adds	r3, #8
 8003776:	2200      	movs	r2, #0
 8003778:	601a      	str	r2, [r3, #0]
		break;
 800377a:	e003      	b.n	8003784 <btnMachine+0x140>
		break;
 800377c:	bf00      	nop
 800377e:	e002      	b.n	8003786 <btnMachine+0x142>
		break;
 8003780:	bf00      	nop
 8003782:	e000      	b.n	8003786 <btnMachine+0x142>
		break;
 8003784:	bf00      	nop
}
 8003786:	bf00      	nop
 8003788:	3708      	adds	r7, #8
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	20001254 	.word	0x20001254
 8003794:	20001210 	.word	0x20001210
 8003798:	2000120c 	.word	0x2000120c

0800379c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800379c:	b480      	push	{r7}
 800379e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80037a0:	b672      	cpsid	i
}
 80037a2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80037a4:	e7fe      	b.n	80037a4 <Error_Handler+0x8>
	...

080037a8 <calcularDistancia>:
#include "motors.h"


int counterD, counterI;

float calcularDistancia(int counter) {
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  return ((counter) * 2.51 / 10);
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f7fc fe1f 	bl	80003f4 <__aeabi_i2d>
 80037b6:	a30c      	add	r3, pc, #48	; (adr r3, 80037e8 <calcularDistancia+0x40>)
 80037b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037bc:	f7fc fe84 	bl	80004c8 <__aeabi_dmul>
 80037c0:	4602      	mov	r2, r0
 80037c2:	460b      	mov	r3, r1
 80037c4:	4610      	mov	r0, r2
 80037c6:	4619      	mov	r1, r3
 80037c8:	f04f 0200 	mov.w	r2, #0
 80037cc:	4b08      	ldr	r3, [pc, #32]	; (80037f0 <calcularDistancia+0x48>)
 80037ce:	f7fc ffa5 	bl	800071c <__aeabi_ddiv>
 80037d2:	4602      	mov	r2, r0
 80037d4:	460b      	mov	r3, r1
 80037d6:	4610      	mov	r0, r2
 80037d8:	4619      	mov	r1, r3
 80037da:	f7fd f925 	bl	8000a28 <__aeabi_d2f>
 80037de:	4603      	mov	r3, r0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3708      	adds	r7, #8
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	e147ae14 	.word	0xe147ae14
 80037ec:	4004147a 	.word	0x4004147a
 80037f0:	40240000 	.word	0x40240000

080037f4 <runMotor>:
	} else {
		TIM4->CCR3 = power;
	}
}

void runMotor(int dir, int motor) {
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
	switch (dir) {
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2b05      	cmp	r3, #5
 8003802:	d03f      	beq.n	8003884 <runMotor+0x90>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2b05      	cmp	r3, #5
 8003808:	dc57      	bgt.n	80038ba <runMotor+0xc6>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d003      	beq.n	8003818 <runMotor+0x24>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2b02      	cmp	r3, #2
 8003814:	d01b      	beq.n	800384e <runMotor+0x5a>
			HAL_GPIO_WritePin(BIN1, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(BIN2, GPIO_PIN_RESET);
		}
		break;
	}
}
 8003816:	e050      	b.n	80038ba <runMotor+0xc6>
		if (motor == MOTOR_A) {
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d10a      	bne.n	8003834 <runMotor+0x40>
			HAL_GPIO_WritePin(AIN1, GPIO_PIN_SET);
 800381e:	2201      	movs	r2, #1
 8003820:	2108      	movs	r1, #8
 8003822:	4828      	ldr	r0, [pc, #160]	; (80038c4 <runMotor+0xd0>)
 8003824:	f001 fddb 	bl	80053de <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(AIN2, GPIO_PIN_RESET);
 8003828:	2200      	movs	r2, #0
 800382a:	2110      	movs	r1, #16
 800382c:	4825      	ldr	r0, [pc, #148]	; (80038c4 <runMotor+0xd0>)
 800382e:	f001 fdd6 	bl	80053de <HAL_GPIO_WritePin>
		break;
 8003832:	e042      	b.n	80038ba <runMotor+0xc6>
			HAL_GPIO_WritePin(BIN1, GPIO_PIN_RESET);
 8003834:	2200      	movs	r2, #0
 8003836:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800383a:	4823      	ldr	r0, [pc, #140]	; (80038c8 <runMotor+0xd4>)
 800383c:	f001 fdcf 	bl	80053de <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BIN2, GPIO_PIN_SET);
 8003840:	2201      	movs	r2, #1
 8003842:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003846:	4820      	ldr	r0, [pc, #128]	; (80038c8 <runMotor+0xd4>)
 8003848:	f001 fdc9 	bl	80053de <HAL_GPIO_WritePin>
		break;
 800384c:	e035      	b.n	80038ba <runMotor+0xc6>
		if (motor == MOTOR_A) {
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d10a      	bne.n	800386a <runMotor+0x76>
			HAL_GPIO_WritePin(AIN1, GPIO_PIN_RESET);
 8003854:	2200      	movs	r2, #0
 8003856:	2108      	movs	r1, #8
 8003858:	481a      	ldr	r0, [pc, #104]	; (80038c4 <runMotor+0xd0>)
 800385a:	f001 fdc0 	bl	80053de <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(AIN2, GPIO_PIN_SET);
 800385e:	2201      	movs	r2, #1
 8003860:	2110      	movs	r1, #16
 8003862:	4818      	ldr	r0, [pc, #96]	; (80038c4 <runMotor+0xd0>)
 8003864:	f001 fdbb 	bl	80053de <HAL_GPIO_WritePin>
		break;
 8003868:	e027      	b.n	80038ba <runMotor+0xc6>
			HAL_GPIO_WritePin(BIN1, GPIO_PIN_SET);
 800386a:	2201      	movs	r2, #1
 800386c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003870:	4815      	ldr	r0, [pc, #84]	; (80038c8 <runMotor+0xd4>)
 8003872:	f001 fdb4 	bl	80053de <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BIN2, GPIO_PIN_RESET);
 8003876:	2200      	movs	r2, #0
 8003878:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800387c:	4812      	ldr	r0, [pc, #72]	; (80038c8 <runMotor+0xd4>)
 800387e:	f001 fdae 	bl	80053de <HAL_GPIO_WritePin>
		break;
 8003882:	e01a      	b.n	80038ba <runMotor+0xc6>
		if (motor == MOTOR_A) {
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d10a      	bne.n	80038a0 <runMotor+0xac>
			HAL_GPIO_WritePin(AIN1, GPIO_PIN_RESET);
 800388a:	2200      	movs	r2, #0
 800388c:	2108      	movs	r1, #8
 800388e:	480d      	ldr	r0, [pc, #52]	; (80038c4 <runMotor+0xd0>)
 8003890:	f001 fda5 	bl	80053de <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(AIN2, GPIO_PIN_RESET);
 8003894:	2200      	movs	r2, #0
 8003896:	2110      	movs	r1, #16
 8003898:	480a      	ldr	r0, [pc, #40]	; (80038c4 <runMotor+0xd0>)
 800389a:	f001 fda0 	bl	80053de <HAL_GPIO_WritePin>
		break;
 800389e:	e00b      	b.n	80038b8 <runMotor+0xc4>
			HAL_GPIO_WritePin(BIN1, GPIO_PIN_RESET);
 80038a0:	2200      	movs	r2, #0
 80038a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80038a6:	4808      	ldr	r0, [pc, #32]	; (80038c8 <runMotor+0xd4>)
 80038a8:	f001 fd99 	bl	80053de <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BIN2, GPIO_PIN_RESET);
 80038ac:	2200      	movs	r2, #0
 80038ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80038b2:	4805      	ldr	r0, [pc, #20]	; (80038c8 <runMotor+0xd4>)
 80038b4:	f001 fd93 	bl	80053de <HAL_GPIO_WritePin>
		break;
 80038b8:	bf00      	nop
}
 80038ba:	bf00      	nop
 80038bc:	3708      	adds	r7, #8
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	40010c00 	.word	0x40010c00
 80038c8:	40010800 	.word	0x40010800

080038cc <lecturaSensor>:

#include <math.h>



float lecturaSensor(int direccion, float values[4]) {
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
	switch (direccion) {
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2b03      	cmp	r3, #3
 80038da:	d841      	bhi.n	8003960 <lecturaSensor+0x94>
 80038dc:	a201      	add	r2, pc, #4	; (adr r2, 80038e4 <lecturaSensor+0x18>)
 80038de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e2:	bf00      	nop
 80038e4:	080038f5 	.word	0x080038f5
 80038e8:	08003939 	.word	0x08003939
 80038ec:	0800395b 	.word	0x0800395b
 80038f0:	08003917 	.word	0x08003917
	case ADELANTE:
		return wallDetector(values[2], direccion);
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	3308      	adds	r3, #8
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4618      	mov	r0, r3
 80038fc:	f7fd fbb8 	bl	8001070 <__aeabi_f2iz>
 8003900:	4603      	mov	r3, r0
 8003902:	6879      	ldr	r1, [r7, #4]
 8003904:	4618      	mov	r0, r3
 8003906:	f7ff fccf 	bl	80032a8 <wallDetector>
 800390a:	4603      	mov	r3, r0
 800390c:	4618      	mov	r0, r3
 800390e:	f7fd f995 	bl	8000c3c <__aeabi_i2f>
 8003912:	4603      	mov	r3, r0
 8003914:	e025      	b.n	8003962 <lecturaSensor+0x96>
		break;
	case DERECHA:
		return wallDetector(values[1], direccion);
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	3304      	adds	r3, #4
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4618      	mov	r0, r3
 800391e:	f7fd fba7 	bl	8001070 <__aeabi_f2iz>
 8003922:	4603      	mov	r3, r0
 8003924:	6879      	ldr	r1, [r7, #4]
 8003926:	4618      	mov	r0, r3
 8003928:	f7ff fcbe 	bl	80032a8 <wallDetector>
 800392c:	4603      	mov	r3, r0
 800392e:	4618      	mov	r0, r3
 8003930:	f7fd f984 	bl	8000c3c <__aeabi_i2f>
 8003934:	4603      	mov	r3, r0
 8003936:	e014      	b.n	8003962 <lecturaSensor+0x96>
		break;
	case IZQUIERDA:
		return wallDetector(values[3], direccion);
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	330c      	adds	r3, #12
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4618      	mov	r0, r3
 8003940:	f7fd fb96 	bl	8001070 <__aeabi_f2iz>
 8003944:	4603      	mov	r3, r0
 8003946:	6879      	ldr	r1, [r7, #4]
 8003948:	4618      	mov	r0, r3
 800394a:	f7ff fcad 	bl	80032a8 <wallDetector>
 800394e:	4603      	mov	r3, r0
 8003950:	4618      	mov	r0, r3
 8003952:	f7fd f973 	bl	8000c3c <__aeabi_i2f>
 8003956:	4603      	mov	r3, r0
 8003958:	e003      	b.n	8003962 <lecturaSensor+0x96>
		break;
	case ATRAS:
		return 0;
 800395a:	f04f 0300 	mov.w	r3, #0
 800395e:	e000      	b.n	8003962 <lecturaSensor+0x96>
		break;
	}
	return 15;
 8003960:	4b02      	ldr	r3, [pc, #8]	; (800396c <lecturaSensor+0xa0>)
}
 8003962:	4618      	mov	r0, r3
 8003964:	3708      	adds	r7, #8
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	41700000 	.word	0x41700000

08003970 <lecSensor>:

float lecSensor(int n, uint32_t values[10]) {
 8003970:	b580      	push	{r7, lr}
 8003972:	b086      	sub	sp, #24
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
	long suma = 0;
 800397a:	2300      	movs	r3, #0
 800397c:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < n; i++) {
 800397e:	2300      	movs	r3, #0
 8003980:	613b      	str	r3, [r7, #16]
 8003982:	e00a      	b.n	800399a <lecSensor+0x2a>
		suma = suma + values[i];
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	683a      	ldr	r2, [r7, #0]
 800398a:	4413      	add	r3, r2
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	4413      	add	r3, r2
 8003992:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < n; i++) {
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	3301      	adds	r3, #1
 8003998:	613b      	str	r3, [r7, #16]
 800399a:	693a      	ldr	r2, [r7, #16]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	429a      	cmp	r2, r3
 80039a0:	dbf0      	blt.n	8003984 <lecSensor+0x14>
	}
	float adc = suma / n;
 80039a2:	697a      	ldr	r2, [r7, #20]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	fb92 f3f3 	sdiv	r3, r2, r3
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7fd f946 	bl	8000c3c <__aeabi_i2f>
 80039b0:	4603      	mov	r3, r0
 80039b2:	60bb      	str	r3, [r7, #8]
	float volts = adc * 0.0008056640; // value from sensor * (5/1024)
 80039b4:	68b8      	ldr	r0, [r7, #8]
 80039b6:	f7fc fd2f 	bl	8000418 <__aeabi_f2d>
 80039ba:	a323      	add	r3, pc, #140	; (adr r3, 8003a48 <lecSensor+0xd8>)
 80039bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c0:	f7fc fd82 	bl	80004c8 <__aeabi_dmul>
 80039c4:	4602      	mov	r2, r0
 80039c6:	460b      	mov	r3, r1
 80039c8:	4610      	mov	r0, r2
 80039ca:	4619      	mov	r1, r3
 80039cc:	f7fd f82c 	bl	8000a28 <__aeabi_d2f>
 80039d0:	4603      	mov	r3, r0
 80039d2:	60fb      	str	r3, [r7, #12]
	if (volts <= 0.35)
 80039d4:	68f8      	ldr	r0, [r7, #12]
 80039d6:	f7fc fd1f 	bl	8000418 <__aeabi_f2d>
 80039da:	a31d      	add	r3, pc, #116	; (adr r3, 8003a50 <lecSensor+0xe0>)
 80039dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e0:	f7fc ffee 	bl	80009c0 <__aeabi_dcmple>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d001      	beq.n	80039ee <lecSensor+0x7e>
		volts = 0.35;
 80039ea:	4b1d      	ldr	r3, [pc, #116]	; (8003a60 <lecSensor+0xf0>)
 80039ec:	60fb      	str	r3, [r7, #12]
	volts = pow(volts - 0.3, 0.25);/*convertimos a cm con un aproximacion grafica*/
 80039ee:	68f8      	ldr	r0, [r7, #12]
 80039f0:	f7fc fd12 	bl	8000418 <__aeabi_f2d>
 80039f4:	a318      	add	r3, pc, #96	; (adr r3, 8003a58 <lecSensor+0xe8>)
 80039f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039fa:	f7fc fbad 	bl	8000158 <__aeabi_dsub>
 80039fe:	4602      	mov	r2, r0
 8003a00:	460b      	mov	r3, r1
 8003a02:	4610      	mov	r0, r2
 8003a04:	4619      	mov	r1, r3
 8003a06:	f04f 0200 	mov.w	r2, #0
 8003a0a:	4b16      	ldr	r3, [pc, #88]	; (8003a64 <lecSensor+0xf4>)
 8003a0c:	f003 fbf4 	bl	80071f8 <pow>
 8003a10:	4602      	mov	r2, r0
 8003a12:	460b      	mov	r3, r1
 8003a14:	4610      	mov	r0, r2
 8003a16:	4619      	mov	r1, r3
 8003a18:	f7fd f806 	bl	8000a28 <__aeabi_d2f>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	60fb      	str	r3, [r7, #12]
	volts = 27.5 / volts; /*no preguntar por los valores*/
 8003a20:	68f9      	ldr	r1, [r7, #12]
 8003a22:	4811      	ldr	r0, [pc, #68]	; (8003a68 <lecSensor+0xf8>)
 8003a24:	f7fd fa12 	bl	8000e4c <__aeabi_fdiv>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	60fb      	str	r3, [r7, #12]
	volts -= 18;
 8003a2c:	490f      	ldr	r1, [pc, #60]	; (8003a6c <lecSensor+0xfc>)
 8003a2e:	68f8      	ldr	r0, [r7, #12]
 8003a30:	f7fd f84e 	bl	8000ad0 <__aeabi_fsub>
 8003a34:	4603      	mov	r3, r0
 8003a36:	60fb      	str	r3, [r7, #12]

	return volts;
 8003a38:	68fb      	ldr	r3, [r7, #12]

}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3718      	adds	r7, #24
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	f3af 8000 	nop.w
 8003a48:	440a4e96 	.word	0x440a4e96
 8003a4c:	3f4a6666 	.word	0x3f4a6666
 8003a50:	66666666 	.word	0x66666666
 8003a54:	3fd66666 	.word	0x3fd66666
 8003a58:	33333333 	.word	0x33333333
 8003a5c:	3fd33333 	.word	0x3fd33333
 8003a60:	3eb33333 	.word	0x3eb33333
 8003a64:	3fd00000 	.word	0x3fd00000
 8003a68:	41dc0000 	.word	0x41dc0000
 8003a6c:	41900000 	.word	0x41900000

08003a70 <lecturaCNY70>:

int lecturaCNY70(int n, uint32_t values[10]) {
 8003a70:	b480      	push	{r7}
 8003a72:	b087      	sub	sp, #28
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
	long suma = 0;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < n; i++) {
 8003a7e:	2300      	movs	r3, #0
 8003a80:	613b      	str	r3, [r7, #16]
 8003a82:	e00a      	b.n	8003a9a <lecturaCNY70+0x2a>
		suma = suma + values[i];
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	683a      	ldr	r2, [r7, #0]
 8003a8a:	4413      	add	r3, r2
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	4413      	add	r3, r2
 8003a92:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < n; i++) {
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	3301      	adds	r3, #1
 8003a98:	613b      	str	r3, [r7, #16]
 8003a9a:	693a      	ldr	r2, [r7, #16]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	dbf0      	blt.n	8003a84 <lecturaCNY70+0x14>
	}
	int adc = (suma / n);
 8003aa2:	697a      	ldr	r2, [r7, #20]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	fb92 f3f3 	sdiv	r3, r2, r3
 8003aaa:	60fb      	str	r3, [r7, #12]
	if (adc < 1000) {
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ab2:	da01      	bge.n	8003ab8 <lecturaCNY70+0x48>
		return BLANCO;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	e000      	b.n	8003aba <lecturaCNY70+0x4a>
	} else {
		return NEGRO;
 8003ab8:	2301      	movs	r3, #1
	}
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	371c      	adds	r7, #28
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bc80      	pop	{r7}
 8003ac2:	4770      	bx	lr

08003ac4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b085      	sub	sp, #20
 8003ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003aca:	4b15      	ldr	r3, [pc, #84]	; (8003b20 <HAL_MspInit+0x5c>)
 8003acc:	699b      	ldr	r3, [r3, #24]
 8003ace:	4a14      	ldr	r2, [pc, #80]	; (8003b20 <HAL_MspInit+0x5c>)
 8003ad0:	f043 0301 	orr.w	r3, r3, #1
 8003ad4:	6193      	str	r3, [r2, #24]
 8003ad6:	4b12      	ldr	r3, [pc, #72]	; (8003b20 <HAL_MspInit+0x5c>)
 8003ad8:	699b      	ldr	r3, [r3, #24]
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	60bb      	str	r3, [r7, #8]
 8003ae0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ae2:	4b0f      	ldr	r3, [pc, #60]	; (8003b20 <HAL_MspInit+0x5c>)
 8003ae4:	69db      	ldr	r3, [r3, #28]
 8003ae6:	4a0e      	ldr	r2, [pc, #56]	; (8003b20 <HAL_MspInit+0x5c>)
 8003ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aec:	61d3      	str	r3, [r2, #28]
 8003aee:	4b0c      	ldr	r3, [pc, #48]	; (8003b20 <HAL_MspInit+0x5c>)
 8003af0:	69db      	ldr	r3, [r3, #28]
 8003af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003af6:	607b      	str	r3, [r7, #4]
 8003af8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003afa:	4b0a      	ldr	r3, [pc, #40]	; (8003b24 <HAL_MspInit+0x60>)
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	60fb      	str	r3, [r7, #12]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003b06:	60fb      	str	r3, [r7, #12]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003b0e:	60fb      	str	r3, [r7, #12]
 8003b10:	4a04      	ldr	r2, [pc, #16]	; (8003b24 <HAL_MspInit+0x60>)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b16:	bf00      	nop
 8003b18:	3714      	adds	r7, #20
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bc80      	pop	{r7}
 8003b1e:	4770      	bx	lr
 8003b20:	40021000 	.word	0x40021000
 8003b24:	40010000 	.word	0x40010000

08003b28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003b2c:	e7fe      	b.n	8003b2c <NMI_Handler+0x4>

08003b2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b2e:	b480      	push	{r7}
 8003b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b32:	e7fe      	b.n	8003b32 <HardFault_Handler+0x4>

08003b34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b34:	b480      	push	{r7}
 8003b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b38:	e7fe      	b.n	8003b38 <MemManage_Handler+0x4>

08003b3a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b3a:	b480      	push	{r7}
 8003b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b3e:	e7fe      	b.n	8003b3e <BusFault_Handler+0x4>

08003b40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b40:	b480      	push	{r7}
 8003b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b44:	e7fe      	b.n	8003b44 <UsageFault_Handler+0x4>

08003b46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b46:	b480      	push	{r7}
 8003b48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b4a:	bf00      	nop
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bc80      	pop	{r7}
 8003b50:	4770      	bx	lr

08003b52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b52:	b480      	push	{r7}
 8003b54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b56:	bf00      	nop
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bc80      	pop	{r7}
 8003b5c:	4770      	bx	lr

08003b5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b5e:	b480      	push	{r7}
 8003b60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b62:	bf00      	nop
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bc80      	pop	{r7}
 8003b68:	4770      	bx	lr

08003b6a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b6a:	b580      	push	{r7, lr}
 8003b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b6e:	f000 faed 	bl	800414c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b72:	bf00      	nop
 8003b74:	bd80      	pop	{r7, pc}
	...

08003b78 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003b7c:	4802      	ldr	r0, [pc, #8]	; (8003b88 <DMA1_Channel1_IRQHandler+0x10>)
 8003b7e:	f001 f95f 	bl	8004e40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003b82:	bf00      	nop
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	200000f0 	.word	0x200000f0

08003b8c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003b90:	4802      	ldr	r0, [pc, #8]	; (8003b9c <USART1_IRQHandler+0x10>)
 8003b92:	f002 ff39 	bl	8006a08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003b96:	bf00      	nop
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	20002bbc 	.word	0x20002bbc

08003ba0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ba4:	bf00      	nop
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bc80      	pop	{r7}
 8003baa:	4770      	bx	lr

08003bac <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b08a      	sub	sp, #40	; 0x28
 8003bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003bb2:	f107 0320 	add.w	r3, r7, #32
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	601a      	str	r2, [r3, #0]
 8003bba:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003bbc:	1d3b      	adds	r3, r7, #4
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	601a      	str	r2, [r3, #0]
 8003bc2:	605a      	str	r2, [r3, #4]
 8003bc4:	609a      	str	r2, [r3, #8]
 8003bc6:	60da      	str	r2, [r3, #12]
 8003bc8:	611a      	str	r2, [r3, #16]
 8003bca:	615a      	str	r2, [r3, #20]
 8003bcc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003bce:	4b28      	ldr	r3, [pc, #160]	; (8003c70 <MX_TIM2_Init+0xc4>)
 8003bd0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003bd4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003bd6:	4b26      	ldr	r3, [pc, #152]	; (8003c70 <MX_TIM2_Init+0xc4>)
 8003bd8:	2200      	movs	r2, #0
 8003bda:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bdc:	4b24      	ldr	r3, [pc, #144]	; (8003c70 <MX_TIM2_Init+0xc4>)
 8003bde:	2200      	movs	r2, #0
 8003be0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8003be2:	4b23      	ldr	r3, [pc, #140]	; (8003c70 <MX_TIM2_Init+0xc4>)
 8003be4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003be8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bea:	4b21      	ldr	r3, [pc, #132]	; (8003c70 <MX_TIM2_Init+0xc4>)
 8003bec:	2200      	movs	r2, #0
 8003bee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bf0:	4b1f      	ldr	r3, [pc, #124]	; (8003c70 <MX_TIM2_Init+0xc4>)
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003bf6:	481e      	ldr	r0, [pc, #120]	; (8003c70 <MX_TIM2_Init+0xc4>)
 8003bf8:	f002 f8da 	bl	8005db0 <HAL_TIM_PWM_Init>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d001      	beq.n	8003c06 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8003c02:	f7ff fdcb 	bl	800379c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c06:	2300      	movs	r3, #0
 8003c08:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003c0e:	f107 0320 	add.w	r3, r7, #32
 8003c12:	4619      	mov	r1, r3
 8003c14:	4816      	ldr	r0, [pc, #88]	; (8003c70 <MX_TIM2_Init+0xc4>)
 8003c16:	f002 fdb9 	bl	800678c <HAL_TIMEx_MasterConfigSynchronization>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d001      	beq.n	8003c24 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8003c20:	f7ff fdbc 	bl	800379c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003c24:	2360      	movs	r3, #96	; 0x60
 8003c26:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003c30:	2300      	movs	r3, #0
 8003c32:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003c34:	1d3b      	adds	r3, r7, #4
 8003c36:	2208      	movs	r2, #8
 8003c38:	4619      	mov	r1, r3
 8003c3a:	480d      	ldr	r0, [pc, #52]	; (8003c70 <MX_TIM2_Init+0xc4>)
 8003c3c:	f002 fada 	bl	80061f4 <HAL_TIM_PWM_ConfigChannel>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d001      	beq.n	8003c4a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8003c46:	f7ff fda9 	bl	800379c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003c4a:	1d3b      	adds	r3, r7, #4
 8003c4c:	220c      	movs	r2, #12
 8003c4e:	4619      	mov	r1, r3
 8003c50:	4807      	ldr	r0, [pc, #28]	; (8003c70 <MX_TIM2_Init+0xc4>)
 8003c52:	f002 facf 	bl	80061f4 <HAL_TIM_PWM_ConfigChannel>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d001      	beq.n	8003c60 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8003c5c:	f7ff fd9e 	bl	800379c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003c60:	4803      	ldr	r0, [pc, #12]	; (8003c70 <MX_TIM2_Init+0xc4>)
 8003c62:	f000 f943 	bl	8003eec <HAL_TIM_MspPostInit>

}
 8003c66:	bf00      	nop
 8003c68:	3728      	adds	r7, #40	; 0x28
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	20002ae4 	.word	0x20002ae4

08003c74 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b08c      	sub	sp, #48	; 0x30
 8003c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003c7a:	f107 030c 	add.w	r3, r7, #12
 8003c7e:	2224      	movs	r2, #36	; 0x24
 8003c80:	2100      	movs	r1, #0
 8003c82:	4618      	mov	r0, r3
 8003c84:	f004 f9c4 	bl	8008010 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c88:	1d3b      	adds	r3, r7, #4
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	601a      	str	r2, [r3, #0]
 8003c8e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003c90:	4b20      	ldr	r3, [pc, #128]	; (8003d14 <MX_TIM3_Init+0xa0>)
 8003c92:	4a21      	ldr	r2, [pc, #132]	; (8003d18 <MX_TIM3_Init+0xa4>)
 8003c94:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003c96:	4b1f      	ldr	r3, [pc, #124]	; (8003d14 <MX_TIM3_Init+0xa0>)
 8003c98:	2200      	movs	r2, #0
 8003c9a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c9c:	4b1d      	ldr	r3, [pc, #116]	; (8003d14 <MX_TIM3_Init+0xa0>)
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003ca2:	4b1c      	ldr	r3, [pc, #112]	; (8003d14 <MX_TIM3_Init+0xa0>)
 8003ca4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ca8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003caa:	4b1a      	ldr	r3, [pc, #104]	; (8003d14 <MX_TIM3_Init+0xa0>)
 8003cac:	2200      	movs	r2, #0
 8003cae:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003cb0:	4b18      	ldr	r3, [pc, #96]	; (8003d14 <MX_TIM3_Init+0xa0>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8003cc6:	230a      	movs	r3, #10
 8003cc8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003cda:	f107 030c 	add.w	r3, r7, #12
 8003cde:	4619      	mov	r1, r3
 8003ce0:	480c      	ldr	r0, [pc, #48]	; (8003d14 <MX_TIM3_Init+0xa0>)
 8003ce2:	f002 f957 	bl	8005f94 <HAL_TIM_Encoder_Init>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d001      	beq.n	8003cf0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8003cec:	f7ff fd56 	bl	800379c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003cf8:	1d3b      	adds	r3, r7, #4
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	4805      	ldr	r0, [pc, #20]	; (8003d14 <MX_TIM3_Init+0xa0>)
 8003cfe:	f002 fd45 	bl	800678c <HAL_TIMEx_MasterConfigSynchronization>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d001      	beq.n	8003d0c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8003d08:	f7ff fd48 	bl	800379c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003d0c:	bf00      	nop
 8003d0e:	3730      	adds	r7, #48	; 0x30
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	20002b2c 	.word	0x20002b2c
 8003d18:	40000400 	.word	0x40000400

08003d1c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b08c      	sub	sp, #48	; 0x30
 8003d20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003d22:	f107 030c 	add.w	r3, r7, #12
 8003d26:	2224      	movs	r2, #36	; 0x24
 8003d28:	2100      	movs	r1, #0
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f004 f970 	bl	8008010 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d30:	1d3b      	adds	r3, r7, #4
 8003d32:	2200      	movs	r2, #0
 8003d34:	601a      	str	r2, [r3, #0]
 8003d36:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003d38:	4b20      	ldr	r3, [pc, #128]	; (8003dbc <MX_TIM4_Init+0xa0>)
 8003d3a:	4a21      	ldr	r2, [pc, #132]	; (8003dc0 <MX_TIM4_Init+0xa4>)
 8003d3c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003d3e:	4b1f      	ldr	r3, [pc, #124]	; (8003dbc <MX_TIM4_Init+0xa0>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d44:	4b1d      	ldr	r3, [pc, #116]	; (8003dbc <MX_TIM4_Init+0xa0>)
 8003d46:	2200      	movs	r2, #0
 8003d48:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003d4a:	4b1c      	ldr	r3, [pc, #112]	; (8003dbc <MX_TIM4_Init+0xa0>)
 8003d4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d50:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d52:	4b1a      	ldr	r3, [pc, #104]	; (8003dbc <MX_TIM4_Init+0xa0>)
 8003d54:	2200      	movs	r2, #0
 8003d56:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003d58:	4b18      	ldr	r3, [pc, #96]	; (8003dbc <MX_TIM4_Init+0xa0>)
 8003d5a:	2280      	movs	r2, #128	; 0x80
 8003d5c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003d62:	2300      	movs	r3, #0
 8003d64:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003d66:	2301      	movs	r3, #1
 8003d68:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8003d6e:	230a      	movs	r3, #10
 8003d70:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003d72:	2300      	movs	r3, #0
 8003d74:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003d76:	2301      	movs	r3, #1
 8003d78:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003d82:	f107 030c 	add.w	r3, r7, #12
 8003d86:	4619      	mov	r1, r3
 8003d88:	480c      	ldr	r0, [pc, #48]	; (8003dbc <MX_TIM4_Init+0xa0>)
 8003d8a:	f002 f903 	bl	8005f94 <HAL_TIM_Encoder_Init>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d001      	beq.n	8003d98 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8003d94:	f7ff fd02 	bl	800379c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003da0:	1d3b      	adds	r3, r7, #4
 8003da2:	4619      	mov	r1, r3
 8003da4:	4805      	ldr	r0, [pc, #20]	; (8003dbc <MX_TIM4_Init+0xa0>)
 8003da6:	f002 fcf1 	bl	800678c <HAL_TIMEx_MasterConfigSynchronization>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d001      	beq.n	8003db4 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8003db0:	f7ff fcf4 	bl	800379c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003db4:	bf00      	nop
 8003db6:	3730      	adds	r7, #48	; 0x30
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	20002b74 	.word	0x20002b74
 8003dc0:	40000800 	.word	0x40000800

08003dc4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b085      	sub	sp, #20
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dd4:	d10b      	bne.n	8003dee <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003dd6:	4b08      	ldr	r3, [pc, #32]	; (8003df8 <HAL_TIM_PWM_MspInit+0x34>)
 8003dd8:	69db      	ldr	r3, [r3, #28]
 8003dda:	4a07      	ldr	r2, [pc, #28]	; (8003df8 <HAL_TIM_PWM_MspInit+0x34>)
 8003ddc:	f043 0301 	orr.w	r3, r3, #1
 8003de0:	61d3      	str	r3, [r2, #28]
 8003de2:	4b05      	ldr	r3, [pc, #20]	; (8003df8 <HAL_TIM_PWM_MspInit+0x34>)
 8003de4:	69db      	ldr	r3, [r3, #28]
 8003de6:	f003 0301 	and.w	r3, r3, #1
 8003dea:	60fb      	str	r3, [r7, #12]
 8003dec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8003dee:	bf00      	nop
 8003df0:	3714      	adds	r7, #20
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bc80      	pop	{r7}
 8003df6:	4770      	bx	lr
 8003df8:	40021000 	.word	0x40021000

08003dfc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b08a      	sub	sp, #40	; 0x28
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e04:	f107 0318 	add.w	r3, r7, #24
 8003e08:	2200      	movs	r2, #0
 8003e0a:	601a      	str	r2, [r3, #0]
 8003e0c:	605a      	str	r2, [r3, #4]
 8003e0e:	609a      	str	r2, [r3, #8]
 8003e10:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM3)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a30      	ldr	r2, [pc, #192]	; (8003ed8 <HAL_TIM_Encoder_MspInit+0xdc>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d124      	bne.n	8003e66 <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003e1c:	4b2f      	ldr	r3, [pc, #188]	; (8003edc <HAL_TIM_Encoder_MspInit+0xe0>)
 8003e1e:	69db      	ldr	r3, [r3, #28]
 8003e20:	4a2e      	ldr	r2, [pc, #184]	; (8003edc <HAL_TIM_Encoder_MspInit+0xe0>)
 8003e22:	f043 0302 	orr.w	r3, r3, #2
 8003e26:	61d3      	str	r3, [r2, #28]
 8003e28:	4b2c      	ldr	r3, [pc, #176]	; (8003edc <HAL_TIM_Encoder_MspInit+0xe0>)
 8003e2a:	69db      	ldr	r3, [r3, #28]
 8003e2c:	f003 0302 	and.w	r3, r3, #2
 8003e30:	617b      	str	r3, [r7, #20]
 8003e32:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e34:	4b29      	ldr	r3, [pc, #164]	; (8003edc <HAL_TIM_Encoder_MspInit+0xe0>)
 8003e36:	699b      	ldr	r3, [r3, #24]
 8003e38:	4a28      	ldr	r2, [pc, #160]	; (8003edc <HAL_TIM_Encoder_MspInit+0xe0>)
 8003e3a:	f043 0304 	orr.w	r3, r3, #4
 8003e3e:	6193      	str	r3, [r2, #24]
 8003e40:	4b26      	ldr	r3, [pc, #152]	; (8003edc <HAL_TIM_Encoder_MspInit+0xe0>)
 8003e42:	699b      	ldr	r3, [r3, #24]
 8003e44:	f003 0304 	and.w	r3, r3, #4
 8003e48:	613b      	str	r3, [r7, #16]
 8003e4a:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = MB1_Pin|MB2_Pin;
 8003e4c:	23c0      	movs	r3, #192	; 0xc0
 8003e4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e50:	2300      	movs	r3, #0
 8003e52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e54:	2300      	movs	r3, #0
 8003e56:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e58:	f107 0318 	add.w	r3, r7, #24
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	4820      	ldr	r0, [pc, #128]	; (8003ee0 <HAL_TIM_Encoder_MspInit+0xe4>)
 8003e60:	f001 f922 	bl	80050a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003e64:	e034      	b.n	8003ed0 <HAL_TIM_Encoder_MspInit+0xd4>
  else if(tim_encoderHandle->Instance==TIM4)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a1e      	ldr	r2, [pc, #120]	; (8003ee4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d12f      	bne.n	8003ed0 <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003e70:	4b1a      	ldr	r3, [pc, #104]	; (8003edc <HAL_TIM_Encoder_MspInit+0xe0>)
 8003e72:	69db      	ldr	r3, [r3, #28]
 8003e74:	4a19      	ldr	r2, [pc, #100]	; (8003edc <HAL_TIM_Encoder_MspInit+0xe0>)
 8003e76:	f043 0304 	orr.w	r3, r3, #4
 8003e7a:	61d3      	str	r3, [r2, #28]
 8003e7c:	4b17      	ldr	r3, [pc, #92]	; (8003edc <HAL_TIM_Encoder_MspInit+0xe0>)
 8003e7e:	69db      	ldr	r3, [r3, #28]
 8003e80:	f003 0304 	and.w	r3, r3, #4
 8003e84:	60fb      	str	r3, [r7, #12]
 8003e86:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e88:	4b14      	ldr	r3, [pc, #80]	; (8003edc <HAL_TIM_Encoder_MspInit+0xe0>)
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	4a13      	ldr	r2, [pc, #76]	; (8003edc <HAL_TIM_Encoder_MspInit+0xe0>)
 8003e8e:	f043 0308 	orr.w	r3, r3, #8
 8003e92:	6193      	str	r3, [r2, #24]
 8003e94:	4b11      	ldr	r3, [pc, #68]	; (8003edc <HAL_TIM_Encoder_MspInit+0xe0>)
 8003e96:	699b      	ldr	r3, [r3, #24]
 8003e98:	f003 0308 	and.w	r3, r3, #8
 8003e9c:	60bb      	str	r3, [r7, #8]
 8003e9e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MA2_Pin;
 8003ea0:	2340      	movs	r3, #64	; 0x40
 8003ea2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(MA2_GPIO_Port, &GPIO_InitStruct);
 8003eac:	f107 0318 	add.w	r3, r7, #24
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	480d      	ldr	r0, [pc, #52]	; (8003ee8 <HAL_TIM_Encoder_MspInit+0xec>)
 8003eb4:	f001 f8f8 	bl	80050a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MA1_Pin;
 8003eb8:	2380      	movs	r3, #128	; 0x80
 8003eba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(MA1_GPIO_Port, &GPIO_InitStruct);
 8003ec4:	f107 0318 	add.w	r3, r7, #24
 8003ec8:	4619      	mov	r1, r3
 8003eca:	4807      	ldr	r0, [pc, #28]	; (8003ee8 <HAL_TIM_Encoder_MspInit+0xec>)
 8003ecc:	f001 f8ec 	bl	80050a8 <HAL_GPIO_Init>
}
 8003ed0:	bf00      	nop
 8003ed2:	3728      	adds	r7, #40	; 0x28
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	40000400 	.word	0x40000400
 8003edc:	40021000 	.word	0x40021000
 8003ee0:	40010800 	.word	0x40010800
 8003ee4:	40000800 	.word	0x40000800
 8003ee8:	40010c00 	.word	0x40010c00

08003eec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b088      	sub	sp, #32
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ef4:	f107 030c 	add.w	r3, r7, #12
 8003ef8:	2200      	movs	r2, #0
 8003efa:	601a      	str	r2, [r3, #0]
 8003efc:	605a      	str	r2, [r3, #4]
 8003efe:	609a      	str	r2, [r3, #8]
 8003f00:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f0a:	d12a      	bne.n	8003f62 <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f0c:	4b17      	ldr	r3, [pc, #92]	; (8003f6c <HAL_TIM_MspPostInit+0x80>)
 8003f0e:	699b      	ldr	r3, [r3, #24]
 8003f10:	4a16      	ldr	r2, [pc, #88]	; (8003f6c <HAL_TIM_MspPostInit+0x80>)
 8003f12:	f043 0308 	orr.w	r3, r3, #8
 8003f16:	6193      	str	r3, [r2, #24]
 8003f18:	4b14      	ldr	r3, [pc, #80]	; (8003f6c <HAL_TIM_MspPostInit+0x80>)
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	f003 0308 	and.w	r3, r3, #8
 8003f20:	60bb      	str	r3, [r7, #8]
 8003f22:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 8003f24:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003f28:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f2a:	2302      	movs	r3, #2
 8003f2c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f2e:	2302      	movs	r3, #2
 8003f30:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f32:	f107 030c 	add.w	r3, r7, #12
 8003f36:	4619      	mov	r1, r3
 8003f38:	480d      	ldr	r0, [pc, #52]	; (8003f70 <HAL_TIM_MspPostInit+0x84>)
 8003f3a:	f001 f8b5 	bl	80050a8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 8003f3e:	4b0d      	ldr	r3, [pc, #52]	; (8003f74 <HAL_TIM_MspPostInit+0x88>)
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	61fb      	str	r3, [r7, #28]
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f4a:	61fb      	str	r3, [r7, #28]
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003f52:	61fb      	str	r3, [r7, #28]
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f5a:	61fb      	str	r3, [r7, #28]
 8003f5c:	4a05      	ldr	r2, [pc, #20]	; (8003f74 <HAL_TIM_MspPostInit+0x88>)
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003f62:	bf00      	nop
 8003f64:	3720      	adds	r7, #32
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	40021000 	.word	0x40021000
 8003f70:	40010c00 	.word	0x40010c00
 8003f74:	40010000 	.word	0x40010000

08003f78 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003f7c:	4b11      	ldr	r3, [pc, #68]	; (8003fc4 <MX_USART1_UART_Init+0x4c>)
 8003f7e:	4a12      	ldr	r2, [pc, #72]	; (8003fc8 <MX_USART1_UART_Init+0x50>)
 8003f80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8003f82:	4b10      	ldr	r3, [pc, #64]	; (8003fc4 <MX_USART1_UART_Init+0x4c>)
 8003f84:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8003f88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003f8a:	4b0e      	ldr	r3, [pc, #56]	; (8003fc4 <MX_USART1_UART_Init+0x4c>)
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003f90:	4b0c      	ldr	r3, [pc, #48]	; (8003fc4 <MX_USART1_UART_Init+0x4c>)
 8003f92:	2200      	movs	r2, #0
 8003f94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003f96:	4b0b      	ldr	r3, [pc, #44]	; (8003fc4 <MX_USART1_UART_Init+0x4c>)
 8003f98:	2200      	movs	r2, #0
 8003f9a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003f9c:	4b09      	ldr	r3, [pc, #36]	; (8003fc4 <MX_USART1_UART_Init+0x4c>)
 8003f9e:	220c      	movs	r2, #12
 8003fa0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003fa2:	4b08      	ldr	r3, [pc, #32]	; (8003fc4 <MX_USART1_UART_Init+0x4c>)
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003fa8:	4b06      	ldr	r3, [pc, #24]	; (8003fc4 <MX_USART1_UART_Init+0x4c>)
 8003faa:	2200      	movs	r2, #0
 8003fac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003fae:	4805      	ldr	r0, [pc, #20]	; (8003fc4 <MX_USART1_UART_Init+0x4c>)
 8003fb0:	f002 fc4a 	bl	8006848 <HAL_UART_Init>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d001      	beq.n	8003fbe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003fba:	f7ff fbef 	bl	800379c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003fbe:	bf00      	nop
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	20002bbc 	.word	0x20002bbc
 8003fc8:	40013800 	.word	0x40013800

08003fcc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b088      	sub	sp, #32
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fd4:	f107 0310 	add.w	r3, r7, #16
 8003fd8:	2200      	movs	r2, #0
 8003fda:	601a      	str	r2, [r3, #0]
 8003fdc:	605a      	str	r2, [r3, #4]
 8003fde:	609a      	str	r2, [r3, #8]
 8003fe0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a20      	ldr	r2, [pc, #128]	; (8004068 <HAL_UART_MspInit+0x9c>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d139      	bne.n	8004060 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003fec:	4b1f      	ldr	r3, [pc, #124]	; (800406c <HAL_UART_MspInit+0xa0>)
 8003fee:	699b      	ldr	r3, [r3, #24]
 8003ff0:	4a1e      	ldr	r2, [pc, #120]	; (800406c <HAL_UART_MspInit+0xa0>)
 8003ff2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ff6:	6193      	str	r3, [r2, #24]
 8003ff8:	4b1c      	ldr	r3, [pc, #112]	; (800406c <HAL_UART_MspInit+0xa0>)
 8003ffa:	699b      	ldr	r3, [r3, #24]
 8003ffc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004000:	60fb      	str	r3, [r7, #12]
 8004002:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004004:	4b19      	ldr	r3, [pc, #100]	; (800406c <HAL_UART_MspInit+0xa0>)
 8004006:	699b      	ldr	r3, [r3, #24]
 8004008:	4a18      	ldr	r2, [pc, #96]	; (800406c <HAL_UART_MspInit+0xa0>)
 800400a:	f043 0304 	orr.w	r3, r3, #4
 800400e:	6193      	str	r3, [r2, #24]
 8004010:	4b16      	ldr	r3, [pc, #88]	; (800406c <HAL_UART_MspInit+0xa0>)
 8004012:	699b      	ldr	r3, [r3, #24]
 8004014:	f003 0304 	and.w	r3, r3, #4
 8004018:	60bb      	str	r3, [r7, #8]
 800401a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800401c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004020:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004022:	2302      	movs	r3, #2
 8004024:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004026:	2303      	movs	r3, #3
 8004028:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800402a:	f107 0310 	add.w	r3, r7, #16
 800402e:	4619      	mov	r1, r3
 8004030:	480f      	ldr	r0, [pc, #60]	; (8004070 <HAL_UART_MspInit+0xa4>)
 8004032:	f001 f839 	bl	80050a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004036:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800403a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800403c:	2300      	movs	r3, #0
 800403e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004040:	2300      	movs	r3, #0
 8004042:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004044:	f107 0310 	add.w	r3, r7, #16
 8004048:	4619      	mov	r1, r3
 800404a:	4809      	ldr	r0, [pc, #36]	; (8004070 <HAL_UART_MspInit+0xa4>)
 800404c:	f001 f82c 	bl	80050a8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
     HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004050:	2200      	movs	r2, #0
 8004052:	2100      	movs	r1, #0
 8004054:	2025      	movs	r0, #37	; 0x25
 8004056:	f000 fd52 	bl	8004afe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800405a:	2025      	movs	r0, #37	; 0x25
 800405c:	f000 fd6b 	bl	8004b36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004060:	bf00      	nop
 8004062:	3720      	adds	r7, #32
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	40013800 	.word	0x40013800
 800406c:	40021000 	.word	0x40021000
 8004070:	40010800 	.word	0x40010800

08004074 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004074:	480c      	ldr	r0, [pc, #48]	; (80040a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004076:	490d      	ldr	r1, [pc, #52]	; (80040ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004078:	4a0d      	ldr	r2, [pc, #52]	; (80040b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800407a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800407c:	e002      	b.n	8004084 <LoopCopyDataInit>

0800407e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800407e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004080:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004082:	3304      	adds	r3, #4

08004084 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004084:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004086:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004088:	d3f9      	bcc.n	800407e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800408a:	4a0a      	ldr	r2, [pc, #40]	; (80040b4 <LoopFillZerobss+0x1e>)
	  ldr r4, =_ebss
 800408c:	4c0a      	ldr	r4, [pc, #40]	; (80040b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800408e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004090:	e001      	b.n	8004096 <LoopFillZerobss>

08004092 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004092:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004094:	3204      	adds	r2, #4

08004096 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004096:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004098:	d3fb      	bcc.n	8004092 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800409a:	f7ff fd81 	bl	8003ba0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800409e:	f003 ff93 	bl	8007fc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80040a2:	f7fd f98d 	bl	80013c0 <main>
  bx lr
 80040a6:	4770      	bx	lr
  ldr r0, =_sdata
 80040a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80040ac:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 80040b0:	08008098 	.word	0x08008098
  ldr r2, =_sbss
 80040b4:	200000a4 	.word	0x200000a4
	  ldr r4, =_ebss
 80040b8:	20002c04 	.word	0x20002c04

080040bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80040bc:	e7fe      	b.n	80040bc <ADC1_2_IRQHandler>
	...

080040c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80040c4:	4b08      	ldr	r3, [pc, #32]	; (80040e8 <HAL_Init+0x28>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a07      	ldr	r2, [pc, #28]	; (80040e8 <HAL_Init+0x28>)
 80040ca:	f043 0310 	orr.w	r3, r3, #16
 80040ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040d0:	2003      	movs	r0, #3
 80040d2:	f000 fd09 	bl	8004ae8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80040d6:	200f      	movs	r0, #15
 80040d8:	f000 f808 	bl	80040ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80040dc:	f7ff fcf2 	bl	8003ac4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80040e0:	2300      	movs	r3, #0
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	40022000 	.word	0x40022000

080040ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80040f4:	4b12      	ldr	r3, [pc, #72]	; (8004140 <HAL_InitTick+0x54>)
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	4b12      	ldr	r3, [pc, #72]	; (8004144 <HAL_InitTick+0x58>)
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	4619      	mov	r1, r3
 80040fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004102:	fbb3 f3f1 	udiv	r3, r3, r1
 8004106:	fbb2 f3f3 	udiv	r3, r2, r3
 800410a:	4618      	mov	r0, r3
 800410c:	f000 fd21 	bl	8004b52 <HAL_SYSTICK_Config>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d001      	beq.n	800411a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e00e      	b.n	8004138 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2b0f      	cmp	r3, #15
 800411e:	d80a      	bhi.n	8004136 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004120:	2200      	movs	r2, #0
 8004122:	6879      	ldr	r1, [r7, #4]
 8004124:	f04f 30ff 	mov.w	r0, #4294967295
 8004128:	f000 fce9 	bl	8004afe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800412c:	4a06      	ldr	r2, [pc, #24]	; (8004148 <HAL_InitTick+0x5c>)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004132:	2300      	movs	r3, #0
 8004134:	e000      	b.n	8004138 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
}
 8004138:	4618      	mov	r0, r3
 800413a:	3708      	adds	r7, #8
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	20000034 	.word	0x20000034
 8004144:	2000003c 	.word	0x2000003c
 8004148:	20000038 	.word	0x20000038

0800414c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800414c:	b480      	push	{r7}
 800414e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004150:	4b05      	ldr	r3, [pc, #20]	; (8004168 <HAL_IncTick+0x1c>)
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	461a      	mov	r2, r3
 8004156:	4b05      	ldr	r3, [pc, #20]	; (800416c <HAL_IncTick+0x20>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4413      	add	r3, r2
 800415c:	4a03      	ldr	r2, [pc, #12]	; (800416c <HAL_IncTick+0x20>)
 800415e:	6013      	str	r3, [r2, #0]
}
 8004160:	bf00      	nop
 8004162:	46bd      	mov	sp, r7
 8004164:	bc80      	pop	{r7}
 8004166:	4770      	bx	lr
 8004168:	2000003c 	.word	0x2000003c
 800416c:	20002c00 	.word	0x20002c00

08004170 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004170:	b480      	push	{r7}
 8004172:	af00      	add	r7, sp, #0
  return uwTick;
 8004174:	4b02      	ldr	r3, [pc, #8]	; (8004180 <HAL_GetTick+0x10>)
 8004176:	681b      	ldr	r3, [r3, #0]
}
 8004178:	4618      	mov	r0, r3
 800417a:	46bd      	mov	sp, r7
 800417c:	bc80      	pop	{r7}
 800417e:	4770      	bx	lr
 8004180:	20002c00 	.word	0x20002c00

08004184 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800418c:	f7ff fff0 	bl	8004170 <HAL_GetTick>
 8004190:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800419c:	d005      	beq.n	80041aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800419e:	4b0a      	ldr	r3, [pc, #40]	; (80041c8 <HAL_Delay+0x44>)
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	461a      	mov	r2, r3
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	4413      	add	r3, r2
 80041a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80041aa:	bf00      	nop
 80041ac:	f7ff ffe0 	bl	8004170 <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	68fa      	ldr	r2, [r7, #12]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d8f7      	bhi.n	80041ac <HAL_Delay+0x28>
  {
  }
}
 80041bc:	bf00      	nop
 80041be:	bf00      	nop
 80041c0:	3710      	adds	r7, #16
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	2000003c 	.word	0x2000003c

080041cc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b086      	sub	sp, #24
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041d4:	2300      	movs	r3, #0
 80041d6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80041d8:	2300      	movs	r3, #0
 80041da:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80041dc:	2300      	movs	r3, #0
 80041de:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80041e0:	2300      	movs	r3, #0
 80041e2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d101      	bne.n	80041ee <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e0be      	b.n	800436c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d109      	bne.n	8004210 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f7fc ffc0 	bl	8001190 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f000 faf5 	bl	8004800 <ADC_ConversionStop_Disable>
 8004216:	4603      	mov	r3, r0
 8004218:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800421e:	f003 0310 	and.w	r3, r3, #16
 8004222:	2b00      	cmp	r3, #0
 8004224:	f040 8099 	bne.w	800435a <HAL_ADC_Init+0x18e>
 8004228:	7dfb      	ldrb	r3, [r7, #23]
 800422a:	2b00      	cmp	r3, #0
 800422c:	f040 8095 	bne.w	800435a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004234:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004238:	f023 0302 	bic.w	r3, r3, #2
 800423c:	f043 0202 	orr.w	r2, r3, #2
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800424c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	7b1b      	ldrb	r3, [r3, #12]
 8004252:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004254:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004256:	68ba      	ldr	r2, [r7, #8]
 8004258:	4313      	orrs	r3, r2
 800425a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004264:	d003      	beq.n	800426e <HAL_ADC_Init+0xa2>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	2b01      	cmp	r3, #1
 800426c:	d102      	bne.n	8004274 <HAL_ADC_Init+0xa8>
 800426e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004272:	e000      	b.n	8004276 <HAL_ADC_Init+0xaa>
 8004274:	2300      	movs	r3, #0
 8004276:	693a      	ldr	r2, [r7, #16]
 8004278:	4313      	orrs	r3, r2
 800427a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	7d1b      	ldrb	r3, [r3, #20]
 8004280:	2b01      	cmp	r3, #1
 8004282:	d119      	bne.n	80042b8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	7b1b      	ldrb	r3, [r3, #12]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d109      	bne.n	80042a0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	699b      	ldr	r3, [r3, #24]
 8004290:	3b01      	subs	r3, #1
 8004292:	035a      	lsls	r2, r3, #13
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	4313      	orrs	r3, r2
 8004298:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800429c:	613b      	str	r3, [r7, #16]
 800429e:	e00b      	b.n	80042b8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a4:	f043 0220 	orr.w	r2, r3, #32
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b0:	f043 0201 	orr.w	r2, r3, #1
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	693a      	ldr	r2, [r7, #16]
 80042c8:	430a      	orrs	r2, r1
 80042ca:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	689a      	ldr	r2, [r3, #8]
 80042d2:	4b28      	ldr	r3, [pc, #160]	; (8004374 <HAL_ADC_Init+0x1a8>)
 80042d4:	4013      	ands	r3, r2
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	6812      	ldr	r2, [r2, #0]
 80042da:	68b9      	ldr	r1, [r7, #8]
 80042dc:	430b      	orrs	r3, r1
 80042de:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042e8:	d003      	beq.n	80042f2 <HAL_ADC_Init+0x126>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d104      	bne.n	80042fc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	3b01      	subs	r3, #1
 80042f8:	051b      	lsls	r3, r3, #20
 80042fa:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004302:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	68fa      	ldr	r2, [r7, #12]
 800430c:	430a      	orrs	r2, r1
 800430e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	689a      	ldr	r2, [r3, #8]
 8004316:	4b18      	ldr	r3, [pc, #96]	; (8004378 <HAL_ADC_Init+0x1ac>)
 8004318:	4013      	ands	r3, r2
 800431a:	68ba      	ldr	r2, [r7, #8]
 800431c:	429a      	cmp	r2, r3
 800431e:	d10b      	bne.n	8004338 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800432a:	f023 0303 	bic.w	r3, r3, #3
 800432e:	f043 0201 	orr.w	r2, r3, #1
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004336:	e018      	b.n	800436a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800433c:	f023 0312 	bic.w	r3, r3, #18
 8004340:	f043 0210 	orr.w	r2, r3, #16
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800434c:	f043 0201 	orr.w	r2, r3, #1
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004358:	e007      	b.n	800436a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800435e:	f043 0210 	orr.w	r2, r3, #16
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800436a:	7dfb      	ldrb	r3, [r7, #23]
}
 800436c:	4618      	mov	r0, r3
 800436e:	3718      	adds	r7, #24
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}
 8004374:	ffe1f7fd 	.word	0xffe1f7fd
 8004378:	ff1f0efe 	.word	0xff1f0efe

0800437c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b086      	sub	sp, #24
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004388:	2300      	movs	r3, #0
 800438a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a64      	ldr	r2, [pc, #400]	; (8004524 <HAL_ADC_Start_DMA+0x1a8>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d004      	beq.n	80043a0 <HAL_ADC_Start_DMA+0x24>
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a63      	ldr	r2, [pc, #396]	; (8004528 <HAL_ADC_Start_DMA+0x1ac>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d106      	bne.n	80043ae <HAL_ADC_Start_DMA+0x32>
 80043a0:	4b60      	ldr	r3, [pc, #384]	; (8004524 <HAL_ADC_Start_DMA+0x1a8>)
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	f040 80b3 	bne.w	8004514 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d101      	bne.n	80043bc <HAL_ADC_Start_DMA+0x40>
 80043b8:	2302      	movs	r3, #2
 80043ba:	e0ae      	b.n	800451a <HAL_ADC_Start_DMA+0x19e>
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80043c4:	68f8      	ldr	r0, [r7, #12]
 80043c6:	f000 f9c1 	bl	800474c <ADC_Enable>
 80043ca:	4603      	mov	r3, r0
 80043cc:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80043ce:	7dfb      	ldrb	r3, [r7, #23]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	f040 809a 	bne.w	800450a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043da:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80043de:	f023 0301 	bic.w	r3, r3, #1
 80043e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a4e      	ldr	r2, [pc, #312]	; (8004528 <HAL_ADC_Start_DMA+0x1ac>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d105      	bne.n	8004400 <HAL_ADC_Start_DMA+0x84>
 80043f4:	4b4b      	ldr	r3, [pc, #300]	; (8004524 <HAL_ADC_Start_DMA+0x1a8>)
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d115      	bne.n	800442c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004404:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004416:	2b00      	cmp	r3, #0
 8004418:	d026      	beq.n	8004468 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800441e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004422:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800442a:	e01d      	b.n	8004468 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004430:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a39      	ldr	r2, [pc, #228]	; (8004524 <HAL_ADC_Start_DMA+0x1a8>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d004      	beq.n	800444c <HAL_ADC_Start_DMA+0xd0>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a38      	ldr	r2, [pc, #224]	; (8004528 <HAL_ADC_Start_DMA+0x1ac>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d10d      	bne.n	8004468 <HAL_ADC_Start_DMA+0xec>
 800444c:	4b35      	ldr	r3, [pc, #212]	; (8004524 <HAL_ADC_Start_DMA+0x1a8>)
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004454:	2b00      	cmp	r3, #0
 8004456:	d007      	beq.n	8004468 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800445c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004460:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800446c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d006      	beq.n	8004482 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004478:	f023 0206 	bic.w	r2, r3, #6
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	62da      	str	r2, [r3, #44]	; 0x2c
 8004480:	e002      	b.n	8004488 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2200      	movs	r2, #0
 8004486:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2200      	movs	r2, #0
 800448c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6a1b      	ldr	r3, [r3, #32]
 8004494:	4a25      	ldr	r2, [pc, #148]	; (800452c <HAL_ADC_Start_DMA+0x1b0>)
 8004496:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6a1b      	ldr	r3, [r3, #32]
 800449c:	4a24      	ldr	r2, [pc, #144]	; (8004530 <HAL_ADC_Start_DMA+0x1b4>)
 800449e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6a1b      	ldr	r3, [r3, #32]
 80044a4:	4a23      	ldr	r2, [pc, #140]	; (8004534 <HAL_ADC_Start_DMA+0x1b8>)
 80044a6:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f06f 0202 	mvn.w	r2, #2
 80044b0:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	689a      	ldr	r2, [r3, #8]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044c0:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6a18      	ldr	r0, [r3, #32]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	334c      	adds	r3, #76	; 0x4c
 80044cc:	4619      	mov	r1, r3
 80044ce:	68ba      	ldr	r2, [r7, #8]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f000 fba5 	bl	8004c20 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80044e0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80044e4:	d108      	bne.n	80044f8 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	689a      	ldr	r2, [r3, #8]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80044f4:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80044f6:	e00f      	b.n	8004518 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	689a      	ldr	r2, [r3, #8]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004506:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8004508:	e006      	b.n	8004518 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8004512:	e001      	b.n	8004518 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004518:	7dfb      	ldrb	r3, [r7, #23]
}
 800451a:	4618      	mov	r0, r3
 800451c:	3718      	adds	r7, #24
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	40012400 	.word	0x40012400
 8004528:	40012800 	.word	0x40012800
 800452c:	08004883 	.word	0x08004883
 8004530:	080048ff 	.word	0x080048ff
 8004534:	0800491b 	.word	0x0800491b

08004538 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004540:	bf00      	nop
 8004542:	370c      	adds	r7, #12
 8004544:	46bd      	mov	sp, r7
 8004546:	bc80      	pop	{r7}
 8004548:	4770      	bx	lr

0800454a <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800454a:	b480      	push	{r7}
 800454c:	b083      	sub	sp, #12
 800454e:	af00      	add	r7, sp, #0
 8004550:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004552:	bf00      	nop
 8004554:	370c      	adds	r7, #12
 8004556:	46bd      	mov	sp, r7
 8004558:	bc80      	pop	{r7}
 800455a:	4770      	bx	lr

0800455c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800455c:	b480      	push	{r7}
 800455e:	b085      	sub	sp, #20
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004566:	2300      	movs	r3, #0
 8004568:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800456a:	2300      	movs	r3, #0
 800456c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004574:	2b01      	cmp	r3, #1
 8004576:	d101      	bne.n	800457c <HAL_ADC_ConfigChannel+0x20>
 8004578:	2302      	movs	r3, #2
 800457a:	e0dc      	b.n	8004736 <HAL_ADC_ConfigChannel+0x1da>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	2b06      	cmp	r3, #6
 800458a:	d81c      	bhi.n	80045c6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	685a      	ldr	r2, [r3, #4]
 8004596:	4613      	mov	r3, r2
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	4413      	add	r3, r2
 800459c:	3b05      	subs	r3, #5
 800459e:	221f      	movs	r2, #31
 80045a0:	fa02 f303 	lsl.w	r3, r2, r3
 80045a4:	43db      	mvns	r3, r3
 80045a6:	4019      	ands	r1, r3
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	6818      	ldr	r0, [r3, #0]
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	685a      	ldr	r2, [r3, #4]
 80045b0:	4613      	mov	r3, r2
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	4413      	add	r3, r2
 80045b6:	3b05      	subs	r3, #5
 80045b8:	fa00 f203 	lsl.w	r2, r0, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	430a      	orrs	r2, r1
 80045c2:	635a      	str	r2, [r3, #52]	; 0x34
 80045c4:	e03c      	b.n	8004640 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	2b0c      	cmp	r3, #12
 80045cc:	d81c      	bhi.n	8004608 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	685a      	ldr	r2, [r3, #4]
 80045d8:	4613      	mov	r3, r2
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	4413      	add	r3, r2
 80045de:	3b23      	subs	r3, #35	; 0x23
 80045e0:	221f      	movs	r2, #31
 80045e2:	fa02 f303 	lsl.w	r3, r2, r3
 80045e6:	43db      	mvns	r3, r3
 80045e8:	4019      	ands	r1, r3
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	6818      	ldr	r0, [r3, #0]
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	685a      	ldr	r2, [r3, #4]
 80045f2:	4613      	mov	r3, r2
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	4413      	add	r3, r2
 80045f8:	3b23      	subs	r3, #35	; 0x23
 80045fa:	fa00 f203 	lsl.w	r2, r0, r3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	430a      	orrs	r2, r1
 8004604:	631a      	str	r2, [r3, #48]	; 0x30
 8004606:	e01b      	b.n	8004640 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	685a      	ldr	r2, [r3, #4]
 8004612:	4613      	mov	r3, r2
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	4413      	add	r3, r2
 8004618:	3b41      	subs	r3, #65	; 0x41
 800461a:	221f      	movs	r2, #31
 800461c:	fa02 f303 	lsl.w	r3, r2, r3
 8004620:	43db      	mvns	r3, r3
 8004622:	4019      	ands	r1, r3
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	6818      	ldr	r0, [r3, #0]
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	685a      	ldr	r2, [r3, #4]
 800462c:	4613      	mov	r3, r2
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	4413      	add	r3, r2
 8004632:	3b41      	subs	r3, #65	; 0x41
 8004634:	fa00 f203 	lsl.w	r2, r0, r3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	430a      	orrs	r2, r1
 800463e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2b09      	cmp	r3, #9
 8004646:	d91c      	bls.n	8004682 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68d9      	ldr	r1, [r3, #12]
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	4613      	mov	r3, r2
 8004654:	005b      	lsls	r3, r3, #1
 8004656:	4413      	add	r3, r2
 8004658:	3b1e      	subs	r3, #30
 800465a:	2207      	movs	r2, #7
 800465c:	fa02 f303 	lsl.w	r3, r2, r3
 8004660:	43db      	mvns	r3, r3
 8004662:	4019      	ands	r1, r3
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	6898      	ldr	r0, [r3, #8]
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	4613      	mov	r3, r2
 800466e:	005b      	lsls	r3, r3, #1
 8004670:	4413      	add	r3, r2
 8004672:	3b1e      	subs	r3, #30
 8004674:	fa00 f203 	lsl.w	r2, r0, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	430a      	orrs	r2, r1
 800467e:	60da      	str	r2, [r3, #12]
 8004680:	e019      	b.n	80046b6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	6919      	ldr	r1, [r3, #16]
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	4613      	mov	r3, r2
 800468e:	005b      	lsls	r3, r3, #1
 8004690:	4413      	add	r3, r2
 8004692:	2207      	movs	r2, #7
 8004694:	fa02 f303 	lsl.w	r3, r2, r3
 8004698:	43db      	mvns	r3, r3
 800469a:	4019      	ands	r1, r3
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	6898      	ldr	r0, [r3, #8]
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	4613      	mov	r3, r2
 80046a6:	005b      	lsls	r3, r3, #1
 80046a8:	4413      	add	r3, r2
 80046aa:	fa00 f203 	lsl.w	r2, r0, r3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	430a      	orrs	r2, r1
 80046b4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2b10      	cmp	r3, #16
 80046bc:	d003      	beq.n	80046c6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80046c2:	2b11      	cmp	r3, #17
 80046c4:	d132      	bne.n	800472c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a1d      	ldr	r2, [pc, #116]	; (8004740 <HAL_ADC_ConfigChannel+0x1e4>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d125      	bne.n	800471c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d126      	bne.n	800472c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	689a      	ldr	r2, [r3, #8]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80046ec:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	2b10      	cmp	r3, #16
 80046f4:	d11a      	bne.n	800472c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80046f6:	4b13      	ldr	r3, [pc, #76]	; (8004744 <HAL_ADC_ConfigChannel+0x1e8>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a13      	ldr	r2, [pc, #76]	; (8004748 <HAL_ADC_ConfigChannel+0x1ec>)
 80046fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004700:	0c9a      	lsrs	r2, r3, #18
 8004702:	4613      	mov	r3, r2
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	4413      	add	r3, r2
 8004708:	005b      	lsls	r3, r3, #1
 800470a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800470c:	e002      	b.n	8004714 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	3b01      	subs	r3, #1
 8004712:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d1f9      	bne.n	800470e <HAL_ADC_ConfigChannel+0x1b2>
 800471a:	e007      	b.n	800472c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004720:	f043 0220 	orr.w	r2, r3, #32
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004734:	7bfb      	ldrb	r3, [r7, #15]
}
 8004736:	4618      	mov	r0, r3
 8004738:	3714      	adds	r7, #20
 800473a:	46bd      	mov	sp, r7
 800473c:	bc80      	pop	{r7}
 800473e:	4770      	bx	lr
 8004740:	40012400 	.word	0x40012400
 8004744:	20000034 	.word	0x20000034
 8004748:	431bde83 	.word	0x431bde83

0800474c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004754:	2300      	movs	r3, #0
 8004756:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8004758:	2300      	movs	r3, #0
 800475a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	f003 0301 	and.w	r3, r3, #1
 8004766:	2b01      	cmp	r3, #1
 8004768:	d040      	beq.n	80047ec <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	689a      	ldr	r2, [r3, #8]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f042 0201 	orr.w	r2, r2, #1
 8004778:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800477a:	4b1f      	ldr	r3, [pc, #124]	; (80047f8 <ADC_Enable+0xac>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a1f      	ldr	r2, [pc, #124]	; (80047fc <ADC_Enable+0xb0>)
 8004780:	fba2 2303 	umull	r2, r3, r2, r3
 8004784:	0c9b      	lsrs	r3, r3, #18
 8004786:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004788:	e002      	b.n	8004790 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	3b01      	subs	r3, #1
 800478e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d1f9      	bne.n	800478a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004796:	f7ff fceb 	bl	8004170 <HAL_GetTick>
 800479a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800479c:	e01f      	b.n	80047de <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800479e:	f7ff fce7 	bl	8004170 <HAL_GetTick>
 80047a2:	4602      	mov	r2, r0
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	1ad3      	subs	r3, r2, r3
 80047a8:	2b02      	cmp	r3, #2
 80047aa:	d918      	bls.n	80047de <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d011      	beq.n	80047de <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047be:	f043 0210 	orr.w	r2, r3, #16
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ca:	f043 0201 	orr.w	r2, r3, #1
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e007      	b.n	80047ee <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	f003 0301 	and.w	r3, r3, #1
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d1d8      	bne.n	800479e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80047ec:	2300      	movs	r3, #0
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3710      	adds	r7, #16
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	20000034 	.word	0x20000034
 80047fc:	431bde83 	.word	0x431bde83

08004800 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004808:	2300      	movs	r3, #0
 800480a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	f003 0301 	and.w	r3, r3, #1
 8004816:	2b01      	cmp	r3, #1
 8004818:	d12e      	bne.n	8004878 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	689a      	ldr	r2, [r3, #8]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f022 0201 	bic.w	r2, r2, #1
 8004828:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800482a:	f7ff fca1 	bl	8004170 <HAL_GetTick>
 800482e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004830:	e01b      	b.n	800486a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004832:	f7ff fc9d 	bl	8004170 <HAL_GetTick>
 8004836:	4602      	mov	r2, r0
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	2b02      	cmp	r3, #2
 800483e:	d914      	bls.n	800486a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	f003 0301 	and.w	r3, r3, #1
 800484a:	2b01      	cmp	r3, #1
 800484c:	d10d      	bne.n	800486a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004852:	f043 0210 	orr.w	r2, r3, #16
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800485e:	f043 0201 	orr.w	r2, r3, #1
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e007      	b.n	800487a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	f003 0301 	and.w	r3, r3, #1
 8004874:	2b01      	cmp	r3, #1
 8004876:	d0dc      	beq.n	8004832 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3710      	adds	r7, #16
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}

08004882 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004882:	b580      	push	{r7, lr}
 8004884:	b084      	sub	sp, #16
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488e:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004894:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004898:	2b00      	cmp	r3, #0
 800489a:	d127      	bne.n	80048ec <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048a0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80048b2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80048b6:	d115      	bne.n	80048e4 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d111      	bne.n	80048e4 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d105      	bne.n	80048e4 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048dc:	f043 0201 	orr.w	r2, r3, #1
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80048e4:	68f8      	ldr	r0, [r7, #12]
 80048e6:	f7fe fc47 	bl	8003178 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80048ea:	e004      	b.n	80048f6 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6a1b      	ldr	r3, [r3, #32]
 80048f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	4798      	blx	r3
}
 80048f6:	bf00      	nop
 80048f8:	3710      	adds	r7, #16
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}

080048fe <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80048fe:	b580      	push	{r7, lr}
 8004900:	b084      	sub	sp, #16
 8004902:	af00      	add	r7, sp, #0
 8004904:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800490c:	68f8      	ldr	r0, [r7, #12]
 800490e:	f7ff fe13 	bl	8004538 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004912:	bf00      	nop
 8004914:	3710      	adds	r7, #16
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}

0800491a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800491a:	b580      	push	{r7, lr}
 800491c:	b084      	sub	sp, #16
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004926:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800492c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004938:	f043 0204 	orr.w	r2, r3, #4
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004940:	68f8      	ldr	r0, [r7, #12]
 8004942:	f7ff fe02 	bl	800454a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004946:	bf00      	nop
 8004948:	3710      	adds	r7, #16
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
	...

08004950 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004950:	b480      	push	{r7}
 8004952:	b085      	sub	sp, #20
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f003 0307 	and.w	r3, r3, #7
 800495e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004960:	4b0c      	ldr	r3, [pc, #48]	; (8004994 <__NVIC_SetPriorityGrouping+0x44>)
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004966:	68ba      	ldr	r2, [r7, #8]
 8004968:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800496c:	4013      	ands	r3, r2
 800496e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004978:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800497c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004980:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004982:	4a04      	ldr	r2, [pc, #16]	; (8004994 <__NVIC_SetPriorityGrouping+0x44>)
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	60d3      	str	r3, [r2, #12]
}
 8004988:	bf00      	nop
 800498a:	3714      	adds	r7, #20
 800498c:	46bd      	mov	sp, r7
 800498e:	bc80      	pop	{r7}
 8004990:	4770      	bx	lr
 8004992:	bf00      	nop
 8004994:	e000ed00 	.word	0xe000ed00

08004998 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004998:	b480      	push	{r7}
 800499a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800499c:	4b04      	ldr	r3, [pc, #16]	; (80049b0 <__NVIC_GetPriorityGrouping+0x18>)
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	0a1b      	lsrs	r3, r3, #8
 80049a2:	f003 0307 	and.w	r3, r3, #7
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bc80      	pop	{r7}
 80049ac:	4770      	bx	lr
 80049ae:	bf00      	nop
 80049b0:	e000ed00 	.word	0xe000ed00

080049b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b083      	sub	sp, #12
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	4603      	mov	r3, r0
 80049bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	db0b      	blt.n	80049de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049c6:	79fb      	ldrb	r3, [r7, #7]
 80049c8:	f003 021f 	and.w	r2, r3, #31
 80049cc:	4906      	ldr	r1, [pc, #24]	; (80049e8 <__NVIC_EnableIRQ+0x34>)
 80049ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049d2:	095b      	lsrs	r3, r3, #5
 80049d4:	2001      	movs	r0, #1
 80049d6:	fa00 f202 	lsl.w	r2, r0, r2
 80049da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80049de:	bf00      	nop
 80049e0:	370c      	adds	r7, #12
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bc80      	pop	{r7}
 80049e6:	4770      	bx	lr
 80049e8:	e000e100 	.word	0xe000e100

080049ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	4603      	mov	r3, r0
 80049f4:	6039      	str	r1, [r7, #0]
 80049f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	db0a      	blt.n	8004a16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	b2da      	uxtb	r2, r3
 8004a04:	490c      	ldr	r1, [pc, #48]	; (8004a38 <__NVIC_SetPriority+0x4c>)
 8004a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a0a:	0112      	lsls	r2, r2, #4
 8004a0c:	b2d2      	uxtb	r2, r2
 8004a0e:	440b      	add	r3, r1
 8004a10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a14:	e00a      	b.n	8004a2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	b2da      	uxtb	r2, r3
 8004a1a:	4908      	ldr	r1, [pc, #32]	; (8004a3c <__NVIC_SetPriority+0x50>)
 8004a1c:	79fb      	ldrb	r3, [r7, #7]
 8004a1e:	f003 030f 	and.w	r3, r3, #15
 8004a22:	3b04      	subs	r3, #4
 8004a24:	0112      	lsls	r2, r2, #4
 8004a26:	b2d2      	uxtb	r2, r2
 8004a28:	440b      	add	r3, r1
 8004a2a:	761a      	strb	r2, [r3, #24]
}
 8004a2c:	bf00      	nop
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bc80      	pop	{r7}
 8004a34:	4770      	bx	lr
 8004a36:	bf00      	nop
 8004a38:	e000e100 	.word	0xe000e100
 8004a3c:	e000ed00 	.word	0xe000ed00

08004a40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b089      	sub	sp, #36	; 0x24
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f003 0307 	and.w	r3, r3, #7
 8004a52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	f1c3 0307 	rsb	r3, r3, #7
 8004a5a:	2b04      	cmp	r3, #4
 8004a5c:	bf28      	it	cs
 8004a5e:	2304      	movcs	r3, #4
 8004a60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	3304      	adds	r3, #4
 8004a66:	2b06      	cmp	r3, #6
 8004a68:	d902      	bls.n	8004a70 <NVIC_EncodePriority+0x30>
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	3b03      	subs	r3, #3
 8004a6e:	e000      	b.n	8004a72 <NVIC_EncodePriority+0x32>
 8004a70:	2300      	movs	r3, #0
 8004a72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a74:	f04f 32ff 	mov.w	r2, #4294967295
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a7e:	43da      	mvns	r2, r3
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	401a      	ands	r2, r3
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a88:	f04f 31ff 	mov.w	r1, #4294967295
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8004a92:	43d9      	mvns	r1, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a98:	4313      	orrs	r3, r2
         );
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3724      	adds	r7, #36	; 0x24
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bc80      	pop	{r7}
 8004aa2:	4770      	bx	lr

08004aa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b082      	sub	sp, #8
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ab4:	d301      	bcc.n	8004aba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e00f      	b.n	8004ada <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004aba:	4a0a      	ldr	r2, [pc, #40]	; (8004ae4 <SysTick_Config+0x40>)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ac2:	210f      	movs	r1, #15
 8004ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ac8:	f7ff ff90 	bl	80049ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004acc:	4b05      	ldr	r3, [pc, #20]	; (8004ae4 <SysTick_Config+0x40>)
 8004ace:	2200      	movs	r2, #0
 8004ad0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ad2:	4b04      	ldr	r3, [pc, #16]	; (8004ae4 <SysTick_Config+0x40>)
 8004ad4:	2207      	movs	r2, #7
 8004ad6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ad8:	2300      	movs	r3, #0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3708      	adds	r7, #8
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	e000e010 	.word	0xe000e010

08004ae8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f7ff ff2d 	bl	8004950 <__NVIC_SetPriorityGrouping>
}
 8004af6:	bf00      	nop
 8004af8:	3708      	adds	r7, #8
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}

08004afe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004afe:	b580      	push	{r7, lr}
 8004b00:	b086      	sub	sp, #24
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	4603      	mov	r3, r0
 8004b06:	60b9      	str	r1, [r7, #8]
 8004b08:	607a      	str	r2, [r7, #4]
 8004b0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004b10:	f7ff ff42 	bl	8004998 <__NVIC_GetPriorityGrouping>
 8004b14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	68b9      	ldr	r1, [r7, #8]
 8004b1a:	6978      	ldr	r0, [r7, #20]
 8004b1c:	f7ff ff90 	bl	8004a40 <NVIC_EncodePriority>
 8004b20:	4602      	mov	r2, r0
 8004b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b26:	4611      	mov	r1, r2
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f7ff ff5f 	bl	80049ec <__NVIC_SetPriority>
}
 8004b2e:	bf00      	nop
 8004b30:	3718      	adds	r7, #24
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}

08004b36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b36:	b580      	push	{r7, lr}
 8004b38:	b082      	sub	sp, #8
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b44:	4618      	mov	r0, r3
 8004b46:	f7ff ff35 	bl	80049b4 <__NVIC_EnableIRQ>
}
 8004b4a:	bf00      	nop
 8004b4c:	3708      	adds	r7, #8
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}

08004b52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b52:	b580      	push	{r7, lr}
 8004b54:	b082      	sub	sp, #8
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f7ff ffa2 	bl	8004aa4 <SysTick_Config>
 8004b60:	4603      	mov	r3, r0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3708      	adds	r7, #8
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
	...

08004b6c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b085      	sub	sp, #20
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004b74:	2300      	movs	r3, #0
 8004b76:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d101      	bne.n	8004b82 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e043      	b.n	8004c0a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	461a      	mov	r2, r3
 8004b88:	4b22      	ldr	r3, [pc, #136]	; (8004c14 <HAL_DMA_Init+0xa8>)
 8004b8a:	4413      	add	r3, r2
 8004b8c:	4a22      	ldr	r2, [pc, #136]	; (8004c18 <HAL_DMA_Init+0xac>)
 8004b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b92:	091b      	lsrs	r3, r3, #4
 8004b94:	009a      	lsls	r2, r3, #2
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4a1f      	ldr	r2, [pc, #124]	; (8004c1c <HAL_DMA_Init+0xb0>)
 8004b9e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2202      	movs	r2, #2
 8004ba4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004bb6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004bba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004bc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	695b      	ldr	r3, [r3, #20]
 8004bd6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004bdc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	69db      	ldr	r3, [r3, #28]
 8004be2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004be4:	68fa      	ldr	r2, [r7, #12]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	68fa      	ldr	r2, [r7, #12]
 8004bf0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3714      	adds	r7, #20
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bc80      	pop	{r7}
 8004c12:	4770      	bx	lr
 8004c14:	bffdfff8 	.word	0xbffdfff8
 8004c18:	cccccccd 	.word	0xcccccccd
 8004c1c:	40020000 	.word	0x40020000

08004c20 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b086      	sub	sp, #24
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	607a      	str	r2, [r7, #4]
 8004c2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d101      	bne.n	8004c40 <HAL_DMA_Start_IT+0x20>
 8004c3c:	2302      	movs	r3, #2
 8004c3e:	e04a      	b.n	8004cd6 <HAL_DMA_Start_IT+0xb6>
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d13a      	bne.n	8004cc8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2202      	movs	r2, #2
 8004c56:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f022 0201 	bic.w	r2, r2, #1
 8004c6e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	68b9      	ldr	r1, [r7, #8]
 8004c76:	68f8      	ldr	r0, [r7, #12]
 8004c78:	f000 f9e8 	bl	800504c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d008      	beq.n	8004c96 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f042 020e 	orr.w	r2, r2, #14
 8004c92:	601a      	str	r2, [r3, #0]
 8004c94:	e00f      	b.n	8004cb6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f022 0204 	bic.w	r2, r2, #4
 8004ca4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f042 020a 	orr.w	r2, r2, #10
 8004cb4:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f042 0201 	orr.w	r2, r2, #1
 8004cc4:	601a      	str	r2, [r3, #0]
 8004cc6:	e005      	b.n	8004cd4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004cd0:	2302      	movs	r3, #2
 8004cd2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8004cd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3718      	adds	r7, #24
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}

08004cde <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004cde:	b480      	push	{r7}
 8004ce0:	b085      	sub	sp, #20
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004cf0:	2b02      	cmp	r3, #2
 8004cf2:	d008      	beq.n	8004d06 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2204      	movs	r2, #4
 8004cf8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e020      	b.n	8004d48 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f022 020e 	bic.w	r2, r2, #14
 8004d14:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f022 0201 	bic.w	r2, r2, #1
 8004d24:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d2e:	2101      	movs	r1, #1
 8004d30:	fa01 f202 	lsl.w	r2, r1, r2
 8004d34:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2201      	movs	r2, #1
 8004d3a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3714      	adds	r7, #20
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bc80      	pop	{r7}
 8004d50:	4770      	bx	lr
	...

08004d54 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	d005      	beq.n	8004d76 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2204      	movs	r2, #4
 8004d6e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	73fb      	strb	r3, [r7, #15]
 8004d74:	e051      	b.n	8004e1a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f022 020e 	bic.w	r2, r2, #14
 8004d84:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f022 0201 	bic.w	r2, r2, #1
 8004d94:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a22      	ldr	r2, [pc, #136]	; (8004e24 <HAL_DMA_Abort_IT+0xd0>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d029      	beq.n	8004df4 <HAL_DMA_Abort_IT+0xa0>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a20      	ldr	r2, [pc, #128]	; (8004e28 <HAL_DMA_Abort_IT+0xd4>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d022      	beq.n	8004df0 <HAL_DMA_Abort_IT+0x9c>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a1f      	ldr	r2, [pc, #124]	; (8004e2c <HAL_DMA_Abort_IT+0xd8>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d01a      	beq.n	8004dea <HAL_DMA_Abort_IT+0x96>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a1d      	ldr	r2, [pc, #116]	; (8004e30 <HAL_DMA_Abort_IT+0xdc>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d012      	beq.n	8004de4 <HAL_DMA_Abort_IT+0x90>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a1c      	ldr	r2, [pc, #112]	; (8004e34 <HAL_DMA_Abort_IT+0xe0>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d00a      	beq.n	8004dde <HAL_DMA_Abort_IT+0x8a>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a1a      	ldr	r2, [pc, #104]	; (8004e38 <HAL_DMA_Abort_IT+0xe4>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d102      	bne.n	8004dd8 <HAL_DMA_Abort_IT+0x84>
 8004dd2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004dd6:	e00e      	b.n	8004df6 <HAL_DMA_Abort_IT+0xa2>
 8004dd8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ddc:	e00b      	b.n	8004df6 <HAL_DMA_Abort_IT+0xa2>
 8004dde:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004de2:	e008      	b.n	8004df6 <HAL_DMA_Abort_IT+0xa2>
 8004de4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004de8:	e005      	b.n	8004df6 <HAL_DMA_Abort_IT+0xa2>
 8004dea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004dee:	e002      	b.n	8004df6 <HAL_DMA_Abort_IT+0xa2>
 8004df0:	2310      	movs	r3, #16
 8004df2:	e000      	b.n	8004df6 <HAL_DMA_Abort_IT+0xa2>
 8004df4:	2301      	movs	r3, #1
 8004df6:	4a11      	ldr	r2, [pc, #68]	; (8004e3c <HAL_DMA_Abort_IT+0xe8>)
 8004df8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d003      	beq.n	8004e1a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	4798      	blx	r3
    } 
  }
  return status;
 8004e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3710      	adds	r7, #16
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	40020008 	.word	0x40020008
 8004e28:	4002001c 	.word	0x4002001c
 8004e2c:	40020030 	.word	0x40020030
 8004e30:	40020044 	.word	0x40020044
 8004e34:	40020058 	.word	0x40020058
 8004e38:	4002006c 	.word	0x4002006c
 8004e3c:	40020000 	.word	0x40020000

08004e40 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5c:	2204      	movs	r2, #4
 8004e5e:	409a      	lsls	r2, r3
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	4013      	ands	r3, r2
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d04f      	beq.n	8004f08 <HAL_DMA_IRQHandler+0xc8>
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	f003 0304 	and.w	r3, r3, #4
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d04a      	beq.n	8004f08 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 0320 	and.w	r3, r3, #32
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d107      	bne.n	8004e90 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f022 0204 	bic.w	r2, r2, #4
 8004e8e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a66      	ldr	r2, [pc, #408]	; (8005030 <HAL_DMA_IRQHandler+0x1f0>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d029      	beq.n	8004eee <HAL_DMA_IRQHandler+0xae>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a65      	ldr	r2, [pc, #404]	; (8005034 <HAL_DMA_IRQHandler+0x1f4>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d022      	beq.n	8004eea <HAL_DMA_IRQHandler+0xaa>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a63      	ldr	r2, [pc, #396]	; (8005038 <HAL_DMA_IRQHandler+0x1f8>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d01a      	beq.n	8004ee4 <HAL_DMA_IRQHandler+0xa4>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a62      	ldr	r2, [pc, #392]	; (800503c <HAL_DMA_IRQHandler+0x1fc>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d012      	beq.n	8004ede <HAL_DMA_IRQHandler+0x9e>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a60      	ldr	r2, [pc, #384]	; (8005040 <HAL_DMA_IRQHandler+0x200>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d00a      	beq.n	8004ed8 <HAL_DMA_IRQHandler+0x98>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a5f      	ldr	r2, [pc, #380]	; (8005044 <HAL_DMA_IRQHandler+0x204>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d102      	bne.n	8004ed2 <HAL_DMA_IRQHandler+0x92>
 8004ecc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004ed0:	e00e      	b.n	8004ef0 <HAL_DMA_IRQHandler+0xb0>
 8004ed2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004ed6:	e00b      	b.n	8004ef0 <HAL_DMA_IRQHandler+0xb0>
 8004ed8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004edc:	e008      	b.n	8004ef0 <HAL_DMA_IRQHandler+0xb0>
 8004ede:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004ee2:	e005      	b.n	8004ef0 <HAL_DMA_IRQHandler+0xb0>
 8004ee4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ee8:	e002      	b.n	8004ef0 <HAL_DMA_IRQHandler+0xb0>
 8004eea:	2340      	movs	r3, #64	; 0x40
 8004eec:	e000      	b.n	8004ef0 <HAL_DMA_IRQHandler+0xb0>
 8004eee:	2304      	movs	r3, #4
 8004ef0:	4a55      	ldr	r2, [pc, #340]	; (8005048 <HAL_DMA_IRQHandler+0x208>)
 8004ef2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	f000 8094 	beq.w	8005026 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004f06:	e08e      	b.n	8005026 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0c:	2202      	movs	r2, #2
 8004f0e:	409a      	lsls	r2, r3
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	4013      	ands	r3, r2
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d056      	beq.n	8004fc6 <HAL_DMA_IRQHandler+0x186>
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	f003 0302 	and.w	r3, r3, #2
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d051      	beq.n	8004fc6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 0320 	and.w	r3, r3, #32
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d10b      	bne.n	8004f48 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f022 020a 	bic.w	r2, r2, #10
 8004f3e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a38      	ldr	r2, [pc, #224]	; (8005030 <HAL_DMA_IRQHandler+0x1f0>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d029      	beq.n	8004fa6 <HAL_DMA_IRQHandler+0x166>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a37      	ldr	r2, [pc, #220]	; (8005034 <HAL_DMA_IRQHandler+0x1f4>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d022      	beq.n	8004fa2 <HAL_DMA_IRQHandler+0x162>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a35      	ldr	r2, [pc, #212]	; (8005038 <HAL_DMA_IRQHandler+0x1f8>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d01a      	beq.n	8004f9c <HAL_DMA_IRQHandler+0x15c>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a34      	ldr	r2, [pc, #208]	; (800503c <HAL_DMA_IRQHandler+0x1fc>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d012      	beq.n	8004f96 <HAL_DMA_IRQHandler+0x156>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a32      	ldr	r2, [pc, #200]	; (8005040 <HAL_DMA_IRQHandler+0x200>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d00a      	beq.n	8004f90 <HAL_DMA_IRQHandler+0x150>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a31      	ldr	r2, [pc, #196]	; (8005044 <HAL_DMA_IRQHandler+0x204>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d102      	bne.n	8004f8a <HAL_DMA_IRQHandler+0x14a>
 8004f84:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004f88:	e00e      	b.n	8004fa8 <HAL_DMA_IRQHandler+0x168>
 8004f8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f8e:	e00b      	b.n	8004fa8 <HAL_DMA_IRQHandler+0x168>
 8004f90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f94:	e008      	b.n	8004fa8 <HAL_DMA_IRQHandler+0x168>
 8004f96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004f9a:	e005      	b.n	8004fa8 <HAL_DMA_IRQHandler+0x168>
 8004f9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004fa0:	e002      	b.n	8004fa8 <HAL_DMA_IRQHandler+0x168>
 8004fa2:	2320      	movs	r3, #32
 8004fa4:	e000      	b.n	8004fa8 <HAL_DMA_IRQHandler+0x168>
 8004fa6:	2302      	movs	r3, #2
 8004fa8:	4a27      	ldr	r2, [pc, #156]	; (8005048 <HAL_DMA_IRQHandler+0x208>)
 8004faa:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d034      	beq.n	8005026 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004fc4:	e02f      	b.n	8005026 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fca:	2208      	movs	r2, #8
 8004fcc:	409a      	lsls	r2, r3
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d028      	beq.n	8005028 <HAL_DMA_IRQHandler+0x1e8>
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	f003 0308 	and.w	r3, r3, #8
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d023      	beq.n	8005028 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f022 020e 	bic.w	r2, r2, #14
 8004fee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ff8:	2101      	movs	r1, #1
 8004ffa:	fa01 f202 	lsl.w	r2, r1, r2
 8004ffe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2201      	movs	r2, #1
 800500a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800501a:	2b00      	cmp	r3, #0
 800501c:	d004      	beq.n	8005028 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	4798      	blx	r3
    }
  }
  return;
 8005026:	bf00      	nop
 8005028:	bf00      	nop
}
 800502a:	3710      	adds	r7, #16
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}
 8005030:	40020008 	.word	0x40020008
 8005034:	4002001c 	.word	0x4002001c
 8005038:	40020030 	.word	0x40020030
 800503c:	40020044 	.word	0x40020044
 8005040:	40020058 	.word	0x40020058
 8005044:	4002006c 	.word	0x4002006c
 8005048:	40020000 	.word	0x40020000

0800504c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800504c:	b480      	push	{r7}
 800504e:	b085      	sub	sp, #20
 8005050:	af00      	add	r7, sp, #0
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	60b9      	str	r1, [r7, #8]
 8005056:	607a      	str	r2, [r7, #4]
 8005058:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005062:	2101      	movs	r1, #1
 8005064:	fa01 f202 	lsl.w	r2, r1, r2
 8005068:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	683a      	ldr	r2, [r7, #0]
 8005070:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	2b10      	cmp	r3, #16
 8005078:	d108      	bne.n	800508c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	68ba      	ldr	r2, [r7, #8]
 8005088:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800508a:	e007      	b.n	800509c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	68ba      	ldr	r2, [r7, #8]
 8005092:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	687a      	ldr	r2, [r7, #4]
 800509a:	60da      	str	r2, [r3, #12]
}
 800509c:	bf00      	nop
 800509e:	3714      	adds	r7, #20
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bc80      	pop	{r7}
 80050a4:	4770      	bx	lr
	...

080050a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b08b      	sub	sp, #44	; 0x2c
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80050b2:	2300      	movs	r3, #0
 80050b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80050b6:	2300      	movs	r3, #0
 80050b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80050ba:	e169      	b.n	8005390 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80050bc:	2201      	movs	r2, #1
 80050be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c0:	fa02 f303 	lsl.w	r3, r2, r3
 80050c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	69fa      	ldr	r2, [r7, #28]
 80050cc:	4013      	ands	r3, r2
 80050ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80050d0:	69ba      	ldr	r2, [r7, #24]
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	429a      	cmp	r2, r3
 80050d6:	f040 8158 	bne.w	800538a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	4a9a      	ldr	r2, [pc, #616]	; (8005348 <HAL_GPIO_Init+0x2a0>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d05e      	beq.n	80051a2 <HAL_GPIO_Init+0xfa>
 80050e4:	4a98      	ldr	r2, [pc, #608]	; (8005348 <HAL_GPIO_Init+0x2a0>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d875      	bhi.n	80051d6 <HAL_GPIO_Init+0x12e>
 80050ea:	4a98      	ldr	r2, [pc, #608]	; (800534c <HAL_GPIO_Init+0x2a4>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d058      	beq.n	80051a2 <HAL_GPIO_Init+0xfa>
 80050f0:	4a96      	ldr	r2, [pc, #600]	; (800534c <HAL_GPIO_Init+0x2a4>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d86f      	bhi.n	80051d6 <HAL_GPIO_Init+0x12e>
 80050f6:	4a96      	ldr	r2, [pc, #600]	; (8005350 <HAL_GPIO_Init+0x2a8>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d052      	beq.n	80051a2 <HAL_GPIO_Init+0xfa>
 80050fc:	4a94      	ldr	r2, [pc, #592]	; (8005350 <HAL_GPIO_Init+0x2a8>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d869      	bhi.n	80051d6 <HAL_GPIO_Init+0x12e>
 8005102:	4a94      	ldr	r2, [pc, #592]	; (8005354 <HAL_GPIO_Init+0x2ac>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d04c      	beq.n	80051a2 <HAL_GPIO_Init+0xfa>
 8005108:	4a92      	ldr	r2, [pc, #584]	; (8005354 <HAL_GPIO_Init+0x2ac>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d863      	bhi.n	80051d6 <HAL_GPIO_Init+0x12e>
 800510e:	4a92      	ldr	r2, [pc, #584]	; (8005358 <HAL_GPIO_Init+0x2b0>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d046      	beq.n	80051a2 <HAL_GPIO_Init+0xfa>
 8005114:	4a90      	ldr	r2, [pc, #576]	; (8005358 <HAL_GPIO_Init+0x2b0>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d85d      	bhi.n	80051d6 <HAL_GPIO_Init+0x12e>
 800511a:	2b12      	cmp	r3, #18
 800511c:	d82a      	bhi.n	8005174 <HAL_GPIO_Init+0xcc>
 800511e:	2b12      	cmp	r3, #18
 8005120:	d859      	bhi.n	80051d6 <HAL_GPIO_Init+0x12e>
 8005122:	a201      	add	r2, pc, #4	; (adr r2, 8005128 <HAL_GPIO_Init+0x80>)
 8005124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005128:	080051a3 	.word	0x080051a3
 800512c:	0800517d 	.word	0x0800517d
 8005130:	0800518f 	.word	0x0800518f
 8005134:	080051d1 	.word	0x080051d1
 8005138:	080051d7 	.word	0x080051d7
 800513c:	080051d7 	.word	0x080051d7
 8005140:	080051d7 	.word	0x080051d7
 8005144:	080051d7 	.word	0x080051d7
 8005148:	080051d7 	.word	0x080051d7
 800514c:	080051d7 	.word	0x080051d7
 8005150:	080051d7 	.word	0x080051d7
 8005154:	080051d7 	.word	0x080051d7
 8005158:	080051d7 	.word	0x080051d7
 800515c:	080051d7 	.word	0x080051d7
 8005160:	080051d7 	.word	0x080051d7
 8005164:	080051d7 	.word	0x080051d7
 8005168:	080051d7 	.word	0x080051d7
 800516c:	08005185 	.word	0x08005185
 8005170:	08005199 	.word	0x08005199
 8005174:	4a79      	ldr	r2, [pc, #484]	; (800535c <HAL_GPIO_Init+0x2b4>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d013      	beq.n	80051a2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800517a:	e02c      	b.n	80051d6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	623b      	str	r3, [r7, #32]
          break;
 8005182:	e029      	b.n	80051d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	3304      	adds	r3, #4
 800518a:	623b      	str	r3, [r7, #32]
          break;
 800518c:	e024      	b.n	80051d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	3308      	adds	r3, #8
 8005194:	623b      	str	r3, [r7, #32]
          break;
 8005196:	e01f      	b.n	80051d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	330c      	adds	r3, #12
 800519e:	623b      	str	r3, [r7, #32]
          break;
 80051a0:	e01a      	b.n	80051d8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d102      	bne.n	80051b0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80051aa:	2304      	movs	r3, #4
 80051ac:	623b      	str	r3, [r7, #32]
          break;
 80051ae:	e013      	b.n	80051d8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d105      	bne.n	80051c4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80051b8:	2308      	movs	r3, #8
 80051ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	69fa      	ldr	r2, [r7, #28]
 80051c0:	611a      	str	r2, [r3, #16]
          break;
 80051c2:	e009      	b.n	80051d8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80051c4:	2308      	movs	r3, #8
 80051c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	69fa      	ldr	r2, [r7, #28]
 80051cc:	615a      	str	r2, [r3, #20]
          break;
 80051ce:	e003      	b.n	80051d8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80051d0:	2300      	movs	r3, #0
 80051d2:	623b      	str	r3, [r7, #32]
          break;
 80051d4:	e000      	b.n	80051d8 <HAL_GPIO_Init+0x130>
          break;
 80051d6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	2bff      	cmp	r3, #255	; 0xff
 80051dc:	d801      	bhi.n	80051e2 <HAL_GPIO_Init+0x13a>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	e001      	b.n	80051e6 <HAL_GPIO_Init+0x13e>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	3304      	adds	r3, #4
 80051e6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80051e8:	69bb      	ldr	r3, [r7, #24]
 80051ea:	2bff      	cmp	r3, #255	; 0xff
 80051ec:	d802      	bhi.n	80051f4 <HAL_GPIO_Init+0x14c>
 80051ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	e002      	b.n	80051fa <HAL_GPIO_Init+0x152>
 80051f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f6:	3b08      	subs	r3, #8
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	210f      	movs	r1, #15
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	fa01 f303 	lsl.w	r3, r1, r3
 8005208:	43db      	mvns	r3, r3
 800520a:	401a      	ands	r2, r3
 800520c:	6a39      	ldr	r1, [r7, #32]
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	fa01 f303 	lsl.w	r3, r1, r3
 8005214:	431a      	orrs	r2, r3
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005222:	2b00      	cmp	r3, #0
 8005224:	f000 80b1 	beq.w	800538a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005228:	4b4d      	ldr	r3, [pc, #308]	; (8005360 <HAL_GPIO_Init+0x2b8>)
 800522a:	699b      	ldr	r3, [r3, #24]
 800522c:	4a4c      	ldr	r2, [pc, #304]	; (8005360 <HAL_GPIO_Init+0x2b8>)
 800522e:	f043 0301 	orr.w	r3, r3, #1
 8005232:	6193      	str	r3, [r2, #24]
 8005234:	4b4a      	ldr	r3, [pc, #296]	; (8005360 <HAL_GPIO_Init+0x2b8>)
 8005236:	699b      	ldr	r3, [r3, #24]
 8005238:	f003 0301 	and.w	r3, r3, #1
 800523c:	60bb      	str	r3, [r7, #8]
 800523e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005240:	4a48      	ldr	r2, [pc, #288]	; (8005364 <HAL_GPIO_Init+0x2bc>)
 8005242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005244:	089b      	lsrs	r3, r3, #2
 8005246:	3302      	adds	r3, #2
 8005248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800524c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800524e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005250:	f003 0303 	and.w	r3, r3, #3
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	220f      	movs	r2, #15
 8005258:	fa02 f303 	lsl.w	r3, r2, r3
 800525c:	43db      	mvns	r3, r3
 800525e:	68fa      	ldr	r2, [r7, #12]
 8005260:	4013      	ands	r3, r2
 8005262:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	4a40      	ldr	r2, [pc, #256]	; (8005368 <HAL_GPIO_Init+0x2c0>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d013      	beq.n	8005294 <HAL_GPIO_Init+0x1ec>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	4a3f      	ldr	r2, [pc, #252]	; (800536c <HAL_GPIO_Init+0x2c4>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d00d      	beq.n	8005290 <HAL_GPIO_Init+0x1e8>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	4a3e      	ldr	r2, [pc, #248]	; (8005370 <HAL_GPIO_Init+0x2c8>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d007      	beq.n	800528c <HAL_GPIO_Init+0x1e4>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	4a3d      	ldr	r2, [pc, #244]	; (8005374 <HAL_GPIO_Init+0x2cc>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d101      	bne.n	8005288 <HAL_GPIO_Init+0x1e0>
 8005284:	2303      	movs	r3, #3
 8005286:	e006      	b.n	8005296 <HAL_GPIO_Init+0x1ee>
 8005288:	2304      	movs	r3, #4
 800528a:	e004      	b.n	8005296 <HAL_GPIO_Init+0x1ee>
 800528c:	2302      	movs	r3, #2
 800528e:	e002      	b.n	8005296 <HAL_GPIO_Init+0x1ee>
 8005290:	2301      	movs	r3, #1
 8005292:	e000      	b.n	8005296 <HAL_GPIO_Init+0x1ee>
 8005294:	2300      	movs	r3, #0
 8005296:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005298:	f002 0203 	and.w	r2, r2, #3
 800529c:	0092      	lsls	r2, r2, #2
 800529e:	4093      	lsls	r3, r2
 80052a0:	68fa      	ldr	r2, [r7, #12]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80052a6:	492f      	ldr	r1, [pc, #188]	; (8005364 <HAL_GPIO_Init+0x2bc>)
 80052a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052aa:	089b      	lsrs	r3, r3, #2
 80052ac:	3302      	adds	r3, #2
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d006      	beq.n	80052ce <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80052c0:	4b2d      	ldr	r3, [pc, #180]	; (8005378 <HAL_GPIO_Init+0x2d0>)
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	492c      	ldr	r1, [pc, #176]	; (8005378 <HAL_GPIO_Init+0x2d0>)
 80052c6:	69bb      	ldr	r3, [r7, #24]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	600b      	str	r3, [r1, #0]
 80052cc:	e006      	b.n	80052dc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80052ce:	4b2a      	ldr	r3, [pc, #168]	; (8005378 <HAL_GPIO_Init+0x2d0>)
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	69bb      	ldr	r3, [r7, #24]
 80052d4:	43db      	mvns	r3, r3
 80052d6:	4928      	ldr	r1, [pc, #160]	; (8005378 <HAL_GPIO_Init+0x2d0>)
 80052d8:	4013      	ands	r3, r2
 80052da:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d006      	beq.n	80052f6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80052e8:	4b23      	ldr	r3, [pc, #140]	; (8005378 <HAL_GPIO_Init+0x2d0>)
 80052ea:	685a      	ldr	r2, [r3, #4]
 80052ec:	4922      	ldr	r1, [pc, #136]	; (8005378 <HAL_GPIO_Init+0x2d0>)
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	604b      	str	r3, [r1, #4]
 80052f4:	e006      	b.n	8005304 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80052f6:	4b20      	ldr	r3, [pc, #128]	; (8005378 <HAL_GPIO_Init+0x2d0>)
 80052f8:	685a      	ldr	r2, [r3, #4]
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	43db      	mvns	r3, r3
 80052fe:	491e      	ldr	r1, [pc, #120]	; (8005378 <HAL_GPIO_Init+0x2d0>)
 8005300:	4013      	ands	r3, r2
 8005302:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800530c:	2b00      	cmp	r3, #0
 800530e:	d006      	beq.n	800531e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005310:	4b19      	ldr	r3, [pc, #100]	; (8005378 <HAL_GPIO_Init+0x2d0>)
 8005312:	689a      	ldr	r2, [r3, #8]
 8005314:	4918      	ldr	r1, [pc, #96]	; (8005378 <HAL_GPIO_Init+0x2d0>)
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	4313      	orrs	r3, r2
 800531a:	608b      	str	r3, [r1, #8]
 800531c:	e006      	b.n	800532c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800531e:	4b16      	ldr	r3, [pc, #88]	; (8005378 <HAL_GPIO_Init+0x2d0>)
 8005320:	689a      	ldr	r2, [r3, #8]
 8005322:	69bb      	ldr	r3, [r7, #24]
 8005324:	43db      	mvns	r3, r3
 8005326:	4914      	ldr	r1, [pc, #80]	; (8005378 <HAL_GPIO_Init+0x2d0>)
 8005328:	4013      	ands	r3, r2
 800532a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005334:	2b00      	cmp	r3, #0
 8005336:	d021      	beq.n	800537c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005338:	4b0f      	ldr	r3, [pc, #60]	; (8005378 <HAL_GPIO_Init+0x2d0>)
 800533a:	68da      	ldr	r2, [r3, #12]
 800533c:	490e      	ldr	r1, [pc, #56]	; (8005378 <HAL_GPIO_Init+0x2d0>)
 800533e:	69bb      	ldr	r3, [r7, #24]
 8005340:	4313      	orrs	r3, r2
 8005342:	60cb      	str	r3, [r1, #12]
 8005344:	e021      	b.n	800538a <HAL_GPIO_Init+0x2e2>
 8005346:	bf00      	nop
 8005348:	10320000 	.word	0x10320000
 800534c:	10310000 	.word	0x10310000
 8005350:	10220000 	.word	0x10220000
 8005354:	10210000 	.word	0x10210000
 8005358:	10120000 	.word	0x10120000
 800535c:	10110000 	.word	0x10110000
 8005360:	40021000 	.word	0x40021000
 8005364:	40010000 	.word	0x40010000
 8005368:	40010800 	.word	0x40010800
 800536c:	40010c00 	.word	0x40010c00
 8005370:	40011000 	.word	0x40011000
 8005374:	40011400 	.word	0x40011400
 8005378:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800537c:	4b0b      	ldr	r3, [pc, #44]	; (80053ac <HAL_GPIO_Init+0x304>)
 800537e:	68da      	ldr	r2, [r3, #12]
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	43db      	mvns	r3, r3
 8005384:	4909      	ldr	r1, [pc, #36]	; (80053ac <HAL_GPIO_Init+0x304>)
 8005386:	4013      	ands	r3, r2
 8005388:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800538a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538c:	3301      	adds	r3, #1
 800538e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005396:	fa22 f303 	lsr.w	r3, r2, r3
 800539a:	2b00      	cmp	r3, #0
 800539c:	f47f ae8e 	bne.w	80050bc <HAL_GPIO_Init+0x14>
  }
}
 80053a0:	bf00      	nop
 80053a2:	bf00      	nop
 80053a4:	372c      	adds	r7, #44	; 0x2c
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bc80      	pop	{r7}
 80053aa:	4770      	bx	lr
 80053ac:	40010400 	.word	0x40010400

080053b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b085      	sub	sp, #20
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	460b      	mov	r3, r1
 80053ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	689a      	ldr	r2, [r3, #8]
 80053c0:	887b      	ldrh	r3, [r7, #2]
 80053c2:	4013      	ands	r3, r2
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d002      	beq.n	80053ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80053c8:	2301      	movs	r3, #1
 80053ca:	73fb      	strb	r3, [r7, #15]
 80053cc:	e001      	b.n	80053d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80053ce:	2300      	movs	r3, #0
 80053d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80053d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3714      	adds	r7, #20
 80053d8:	46bd      	mov	sp, r7
 80053da:	bc80      	pop	{r7}
 80053dc:	4770      	bx	lr

080053de <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80053de:	b480      	push	{r7}
 80053e0:	b083      	sub	sp, #12
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
 80053e6:	460b      	mov	r3, r1
 80053e8:	807b      	strh	r3, [r7, #2]
 80053ea:	4613      	mov	r3, r2
 80053ec:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80053ee:	787b      	ldrb	r3, [r7, #1]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d003      	beq.n	80053fc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80053f4:	887a      	ldrh	r2, [r7, #2]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80053fa:	e003      	b.n	8005404 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80053fc:	887b      	ldrh	r3, [r7, #2]
 80053fe:	041a      	lsls	r2, r3, #16
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	611a      	str	r2, [r3, #16]
}
 8005404:	bf00      	nop
 8005406:	370c      	adds	r7, #12
 8005408:	46bd      	mov	sp, r7
 800540a:	bc80      	pop	{r7}
 800540c:	4770      	bx	lr
	...

08005410 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b086      	sub	sp, #24
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d101      	bne.n	8005422 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e272      	b.n	8005908 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 0301 	and.w	r3, r3, #1
 800542a:	2b00      	cmp	r3, #0
 800542c:	f000 8087 	beq.w	800553e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005430:	4b92      	ldr	r3, [pc, #584]	; (800567c <HAL_RCC_OscConfig+0x26c>)
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	f003 030c 	and.w	r3, r3, #12
 8005438:	2b04      	cmp	r3, #4
 800543a:	d00c      	beq.n	8005456 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800543c:	4b8f      	ldr	r3, [pc, #572]	; (800567c <HAL_RCC_OscConfig+0x26c>)
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	f003 030c 	and.w	r3, r3, #12
 8005444:	2b08      	cmp	r3, #8
 8005446:	d112      	bne.n	800546e <HAL_RCC_OscConfig+0x5e>
 8005448:	4b8c      	ldr	r3, [pc, #560]	; (800567c <HAL_RCC_OscConfig+0x26c>)
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005450:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005454:	d10b      	bne.n	800546e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005456:	4b89      	ldr	r3, [pc, #548]	; (800567c <HAL_RCC_OscConfig+0x26c>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800545e:	2b00      	cmp	r3, #0
 8005460:	d06c      	beq.n	800553c <HAL_RCC_OscConfig+0x12c>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d168      	bne.n	800553c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e24c      	b.n	8005908 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005476:	d106      	bne.n	8005486 <HAL_RCC_OscConfig+0x76>
 8005478:	4b80      	ldr	r3, [pc, #512]	; (800567c <HAL_RCC_OscConfig+0x26c>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a7f      	ldr	r2, [pc, #508]	; (800567c <HAL_RCC_OscConfig+0x26c>)
 800547e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005482:	6013      	str	r3, [r2, #0]
 8005484:	e02e      	b.n	80054e4 <HAL_RCC_OscConfig+0xd4>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d10c      	bne.n	80054a8 <HAL_RCC_OscConfig+0x98>
 800548e:	4b7b      	ldr	r3, [pc, #492]	; (800567c <HAL_RCC_OscConfig+0x26c>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a7a      	ldr	r2, [pc, #488]	; (800567c <HAL_RCC_OscConfig+0x26c>)
 8005494:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005498:	6013      	str	r3, [r2, #0]
 800549a:	4b78      	ldr	r3, [pc, #480]	; (800567c <HAL_RCC_OscConfig+0x26c>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a77      	ldr	r2, [pc, #476]	; (800567c <HAL_RCC_OscConfig+0x26c>)
 80054a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054a4:	6013      	str	r3, [r2, #0]
 80054a6:	e01d      	b.n	80054e4 <HAL_RCC_OscConfig+0xd4>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054b0:	d10c      	bne.n	80054cc <HAL_RCC_OscConfig+0xbc>
 80054b2:	4b72      	ldr	r3, [pc, #456]	; (800567c <HAL_RCC_OscConfig+0x26c>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a71      	ldr	r2, [pc, #452]	; (800567c <HAL_RCC_OscConfig+0x26c>)
 80054b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054bc:	6013      	str	r3, [r2, #0]
 80054be:	4b6f      	ldr	r3, [pc, #444]	; (800567c <HAL_RCC_OscConfig+0x26c>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a6e      	ldr	r2, [pc, #440]	; (800567c <HAL_RCC_OscConfig+0x26c>)
 80054c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054c8:	6013      	str	r3, [r2, #0]
 80054ca:	e00b      	b.n	80054e4 <HAL_RCC_OscConfig+0xd4>
 80054cc:	4b6b      	ldr	r3, [pc, #428]	; (800567c <HAL_RCC_OscConfig+0x26c>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a6a      	ldr	r2, [pc, #424]	; (800567c <HAL_RCC_OscConfig+0x26c>)
 80054d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054d6:	6013      	str	r3, [r2, #0]
 80054d8:	4b68      	ldr	r3, [pc, #416]	; (800567c <HAL_RCC_OscConfig+0x26c>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a67      	ldr	r2, [pc, #412]	; (800567c <HAL_RCC_OscConfig+0x26c>)
 80054de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d013      	beq.n	8005514 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054ec:	f7fe fe40 	bl	8004170 <HAL_GetTick>
 80054f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054f2:	e008      	b.n	8005506 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054f4:	f7fe fe3c 	bl	8004170 <HAL_GetTick>
 80054f8:	4602      	mov	r2, r0
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	1ad3      	subs	r3, r2, r3
 80054fe:	2b64      	cmp	r3, #100	; 0x64
 8005500:	d901      	bls.n	8005506 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005502:	2303      	movs	r3, #3
 8005504:	e200      	b.n	8005908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005506:	4b5d      	ldr	r3, [pc, #372]	; (800567c <HAL_RCC_OscConfig+0x26c>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800550e:	2b00      	cmp	r3, #0
 8005510:	d0f0      	beq.n	80054f4 <HAL_RCC_OscConfig+0xe4>
 8005512:	e014      	b.n	800553e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005514:	f7fe fe2c 	bl	8004170 <HAL_GetTick>
 8005518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800551a:	e008      	b.n	800552e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800551c:	f7fe fe28 	bl	8004170 <HAL_GetTick>
 8005520:	4602      	mov	r2, r0
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	2b64      	cmp	r3, #100	; 0x64
 8005528:	d901      	bls.n	800552e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800552a:	2303      	movs	r3, #3
 800552c:	e1ec      	b.n	8005908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800552e:	4b53      	ldr	r3, [pc, #332]	; (800567c <HAL_RCC_OscConfig+0x26c>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005536:	2b00      	cmp	r3, #0
 8005538:	d1f0      	bne.n	800551c <HAL_RCC_OscConfig+0x10c>
 800553a:	e000      	b.n	800553e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800553c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 0302 	and.w	r3, r3, #2
 8005546:	2b00      	cmp	r3, #0
 8005548:	d063      	beq.n	8005612 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800554a:	4b4c      	ldr	r3, [pc, #304]	; (800567c <HAL_RCC_OscConfig+0x26c>)
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	f003 030c 	and.w	r3, r3, #12
 8005552:	2b00      	cmp	r3, #0
 8005554:	d00b      	beq.n	800556e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005556:	4b49      	ldr	r3, [pc, #292]	; (800567c <HAL_RCC_OscConfig+0x26c>)
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	f003 030c 	and.w	r3, r3, #12
 800555e:	2b08      	cmp	r3, #8
 8005560:	d11c      	bne.n	800559c <HAL_RCC_OscConfig+0x18c>
 8005562:	4b46      	ldr	r3, [pc, #280]	; (800567c <HAL_RCC_OscConfig+0x26c>)
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800556a:	2b00      	cmp	r3, #0
 800556c:	d116      	bne.n	800559c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800556e:	4b43      	ldr	r3, [pc, #268]	; (800567c <HAL_RCC_OscConfig+0x26c>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f003 0302 	and.w	r3, r3, #2
 8005576:	2b00      	cmp	r3, #0
 8005578:	d005      	beq.n	8005586 <HAL_RCC_OscConfig+0x176>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	2b01      	cmp	r3, #1
 8005580:	d001      	beq.n	8005586 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	e1c0      	b.n	8005908 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005586:	4b3d      	ldr	r3, [pc, #244]	; (800567c <HAL_RCC_OscConfig+0x26c>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	695b      	ldr	r3, [r3, #20]
 8005592:	00db      	lsls	r3, r3, #3
 8005594:	4939      	ldr	r1, [pc, #228]	; (800567c <HAL_RCC_OscConfig+0x26c>)
 8005596:	4313      	orrs	r3, r2
 8005598:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800559a:	e03a      	b.n	8005612 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	691b      	ldr	r3, [r3, #16]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d020      	beq.n	80055e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055a4:	4b36      	ldr	r3, [pc, #216]	; (8005680 <HAL_RCC_OscConfig+0x270>)
 80055a6:	2201      	movs	r2, #1
 80055a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055aa:	f7fe fde1 	bl	8004170 <HAL_GetTick>
 80055ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055b0:	e008      	b.n	80055c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055b2:	f7fe fddd 	bl	8004170 <HAL_GetTick>
 80055b6:	4602      	mov	r2, r0
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	1ad3      	subs	r3, r2, r3
 80055bc:	2b02      	cmp	r3, #2
 80055be:	d901      	bls.n	80055c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80055c0:	2303      	movs	r3, #3
 80055c2:	e1a1      	b.n	8005908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055c4:	4b2d      	ldr	r3, [pc, #180]	; (800567c <HAL_RCC_OscConfig+0x26c>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 0302 	and.w	r3, r3, #2
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d0f0      	beq.n	80055b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055d0:	4b2a      	ldr	r3, [pc, #168]	; (800567c <HAL_RCC_OscConfig+0x26c>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	695b      	ldr	r3, [r3, #20]
 80055dc:	00db      	lsls	r3, r3, #3
 80055de:	4927      	ldr	r1, [pc, #156]	; (800567c <HAL_RCC_OscConfig+0x26c>)
 80055e0:	4313      	orrs	r3, r2
 80055e2:	600b      	str	r3, [r1, #0]
 80055e4:	e015      	b.n	8005612 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055e6:	4b26      	ldr	r3, [pc, #152]	; (8005680 <HAL_RCC_OscConfig+0x270>)
 80055e8:	2200      	movs	r2, #0
 80055ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055ec:	f7fe fdc0 	bl	8004170 <HAL_GetTick>
 80055f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055f2:	e008      	b.n	8005606 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055f4:	f7fe fdbc 	bl	8004170 <HAL_GetTick>
 80055f8:	4602      	mov	r2, r0
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	1ad3      	subs	r3, r2, r3
 80055fe:	2b02      	cmp	r3, #2
 8005600:	d901      	bls.n	8005606 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005602:	2303      	movs	r3, #3
 8005604:	e180      	b.n	8005908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005606:	4b1d      	ldr	r3, [pc, #116]	; (800567c <HAL_RCC_OscConfig+0x26c>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 0302 	and.w	r3, r3, #2
 800560e:	2b00      	cmp	r3, #0
 8005610:	d1f0      	bne.n	80055f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 0308 	and.w	r3, r3, #8
 800561a:	2b00      	cmp	r3, #0
 800561c:	d03a      	beq.n	8005694 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	699b      	ldr	r3, [r3, #24]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d019      	beq.n	800565a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005626:	4b17      	ldr	r3, [pc, #92]	; (8005684 <HAL_RCC_OscConfig+0x274>)
 8005628:	2201      	movs	r2, #1
 800562a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800562c:	f7fe fda0 	bl	8004170 <HAL_GetTick>
 8005630:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005632:	e008      	b.n	8005646 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005634:	f7fe fd9c 	bl	8004170 <HAL_GetTick>
 8005638:	4602      	mov	r2, r0
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	1ad3      	subs	r3, r2, r3
 800563e:	2b02      	cmp	r3, #2
 8005640:	d901      	bls.n	8005646 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005642:	2303      	movs	r3, #3
 8005644:	e160      	b.n	8005908 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005646:	4b0d      	ldr	r3, [pc, #52]	; (800567c <HAL_RCC_OscConfig+0x26c>)
 8005648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564a:	f003 0302 	and.w	r3, r3, #2
 800564e:	2b00      	cmp	r3, #0
 8005650:	d0f0      	beq.n	8005634 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005652:	2001      	movs	r0, #1
 8005654:	f000 fad8 	bl	8005c08 <RCC_Delay>
 8005658:	e01c      	b.n	8005694 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800565a:	4b0a      	ldr	r3, [pc, #40]	; (8005684 <HAL_RCC_OscConfig+0x274>)
 800565c:	2200      	movs	r2, #0
 800565e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005660:	f7fe fd86 	bl	8004170 <HAL_GetTick>
 8005664:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005666:	e00f      	b.n	8005688 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005668:	f7fe fd82 	bl	8004170 <HAL_GetTick>
 800566c:	4602      	mov	r2, r0
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	1ad3      	subs	r3, r2, r3
 8005672:	2b02      	cmp	r3, #2
 8005674:	d908      	bls.n	8005688 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005676:	2303      	movs	r3, #3
 8005678:	e146      	b.n	8005908 <HAL_RCC_OscConfig+0x4f8>
 800567a:	bf00      	nop
 800567c:	40021000 	.word	0x40021000
 8005680:	42420000 	.word	0x42420000
 8005684:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005688:	4b92      	ldr	r3, [pc, #584]	; (80058d4 <HAL_RCC_OscConfig+0x4c4>)
 800568a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568c:	f003 0302 	and.w	r3, r3, #2
 8005690:	2b00      	cmp	r3, #0
 8005692:	d1e9      	bne.n	8005668 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 0304 	and.w	r3, r3, #4
 800569c:	2b00      	cmp	r3, #0
 800569e:	f000 80a6 	beq.w	80057ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056a2:	2300      	movs	r3, #0
 80056a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056a6:	4b8b      	ldr	r3, [pc, #556]	; (80058d4 <HAL_RCC_OscConfig+0x4c4>)
 80056a8:	69db      	ldr	r3, [r3, #28]
 80056aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d10d      	bne.n	80056ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056b2:	4b88      	ldr	r3, [pc, #544]	; (80058d4 <HAL_RCC_OscConfig+0x4c4>)
 80056b4:	69db      	ldr	r3, [r3, #28]
 80056b6:	4a87      	ldr	r2, [pc, #540]	; (80058d4 <HAL_RCC_OscConfig+0x4c4>)
 80056b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056bc:	61d3      	str	r3, [r2, #28]
 80056be:	4b85      	ldr	r3, [pc, #532]	; (80058d4 <HAL_RCC_OscConfig+0x4c4>)
 80056c0:	69db      	ldr	r3, [r3, #28]
 80056c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056c6:	60bb      	str	r3, [r7, #8]
 80056c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056ca:	2301      	movs	r3, #1
 80056cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056ce:	4b82      	ldr	r3, [pc, #520]	; (80058d8 <HAL_RCC_OscConfig+0x4c8>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d118      	bne.n	800570c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056da:	4b7f      	ldr	r3, [pc, #508]	; (80058d8 <HAL_RCC_OscConfig+0x4c8>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a7e      	ldr	r2, [pc, #504]	; (80058d8 <HAL_RCC_OscConfig+0x4c8>)
 80056e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056e6:	f7fe fd43 	bl	8004170 <HAL_GetTick>
 80056ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056ec:	e008      	b.n	8005700 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056ee:	f7fe fd3f 	bl	8004170 <HAL_GetTick>
 80056f2:	4602      	mov	r2, r0
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	1ad3      	subs	r3, r2, r3
 80056f8:	2b64      	cmp	r3, #100	; 0x64
 80056fa:	d901      	bls.n	8005700 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80056fc:	2303      	movs	r3, #3
 80056fe:	e103      	b.n	8005908 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005700:	4b75      	ldr	r3, [pc, #468]	; (80058d8 <HAL_RCC_OscConfig+0x4c8>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005708:	2b00      	cmp	r3, #0
 800570a:	d0f0      	beq.n	80056ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	2b01      	cmp	r3, #1
 8005712:	d106      	bne.n	8005722 <HAL_RCC_OscConfig+0x312>
 8005714:	4b6f      	ldr	r3, [pc, #444]	; (80058d4 <HAL_RCC_OscConfig+0x4c4>)
 8005716:	6a1b      	ldr	r3, [r3, #32]
 8005718:	4a6e      	ldr	r2, [pc, #440]	; (80058d4 <HAL_RCC_OscConfig+0x4c4>)
 800571a:	f043 0301 	orr.w	r3, r3, #1
 800571e:	6213      	str	r3, [r2, #32]
 8005720:	e02d      	b.n	800577e <HAL_RCC_OscConfig+0x36e>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	68db      	ldr	r3, [r3, #12]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d10c      	bne.n	8005744 <HAL_RCC_OscConfig+0x334>
 800572a:	4b6a      	ldr	r3, [pc, #424]	; (80058d4 <HAL_RCC_OscConfig+0x4c4>)
 800572c:	6a1b      	ldr	r3, [r3, #32]
 800572e:	4a69      	ldr	r2, [pc, #420]	; (80058d4 <HAL_RCC_OscConfig+0x4c4>)
 8005730:	f023 0301 	bic.w	r3, r3, #1
 8005734:	6213      	str	r3, [r2, #32]
 8005736:	4b67      	ldr	r3, [pc, #412]	; (80058d4 <HAL_RCC_OscConfig+0x4c4>)
 8005738:	6a1b      	ldr	r3, [r3, #32]
 800573a:	4a66      	ldr	r2, [pc, #408]	; (80058d4 <HAL_RCC_OscConfig+0x4c4>)
 800573c:	f023 0304 	bic.w	r3, r3, #4
 8005740:	6213      	str	r3, [r2, #32]
 8005742:	e01c      	b.n	800577e <HAL_RCC_OscConfig+0x36e>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	2b05      	cmp	r3, #5
 800574a:	d10c      	bne.n	8005766 <HAL_RCC_OscConfig+0x356>
 800574c:	4b61      	ldr	r3, [pc, #388]	; (80058d4 <HAL_RCC_OscConfig+0x4c4>)
 800574e:	6a1b      	ldr	r3, [r3, #32]
 8005750:	4a60      	ldr	r2, [pc, #384]	; (80058d4 <HAL_RCC_OscConfig+0x4c4>)
 8005752:	f043 0304 	orr.w	r3, r3, #4
 8005756:	6213      	str	r3, [r2, #32]
 8005758:	4b5e      	ldr	r3, [pc, #376]	; (80058d4 <HAL_RCC_OscConfig+0x4c4>)
 800575a:	6a1b      	ldr	r3, [r3, #32]
 800575c:	4a5d      	ldr	r2, [pc, #372]	; (80058d4 <HAL_RCC_OscConfig+0x4c4>)
 800575e:	f043 0301 	orr.w	r3, r3, #1
 8005762:	6213      	str	r3, [r2, #32]
 8005764:	e00b      	b.n	800577e <HAL_RCC_OscConfig+0x36e>
 8005766:	4b5b      	ldr	r3, [pc, #364]	; (80058d4 <HAL_RCC_OscConfig+0x4c4>)
 8005768:	6a1b      	ldr	r3, [r3, #32]
 800576a:	4a5a      	ldr	r2, [pc, #360]	; (80058d4 <HAL_RCC_OscConfig+0x4c4>)
 800576c:	f023 0301 	bic.w	r3, r3, #1
 8005770:	6213      	str	r3, [r2, #32]
 8005772:	4b58      	ldr	r3, [pc, #352]	; (80058d4 <HAL_RCC_OscConfig+0x4c4>)
 8005774:	6a1b      	ldr	r3, [r3, #32]
 8005776:	4a57      	ldr	r2, [pc, #348]	; (80058d4 <HAL_RCC_OscConfig+0x4c4>)
 8005778:	f023 0304 	bic.w	r3, r3, #4
 800577c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d015      	beq.n	80057b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005786:	f7fe fcf3 	bl	8004170 <HAL_GetTick>
 800578a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800578c:	e00a      	b.n	80057a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800578e:	f7fe fcef 	bl	8004170 <HAL_GetTick>
 8005792:	4602      	mov	r2, r0
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	1ad3      	subs	r3, r2, r3
 8005798:	f241 3288 	movw	r2, #5000	; 0x1388
 800579c:	4293      	cmp	r3, r2
 800579e:	d901      	bls.n	80057a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80057a0:	2303      	movs	r3, #3
 80057a2:	e0b1      	b.n	8005908 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057a4:	4b4b      	ldr	r3, [pc, #300]	; (80058d4 <HAL_RCC_OscConfig+0x4c4>)
 80057a6:	6a1b      	ldr	r3, [r3, #32]
 80057a8:	f003 0302 	and.w	r3, r3, #2
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d0ee      	beq.n	800578e <HAL_RCC_OscConfig+0x37e>
 80057b0:	e014      	b.n	80057dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057b2:	f7fe fcdd 	bl	8004170 <HAL_GetTick>
 80057b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057b8:	e00a      	b.n	80057d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057ba:	f7fe fcd9 	bl	8004170 <HAL_GetTick>
 80057be:	4602      	mov	r2, r0
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	1ad3      	subs	r3, r2, r3
 80057c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d901      	bls.n	80057d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80057cc:	2303      	movs	r3, #3
 80057ce:	e09b      	b.n	8005908 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057d0:	4b40      	ldr	r3, [pc, #256]	; (80058d4 <HAL_RCC_OscConfig+0x4c4>)
 80057d2:	6a1b      	ldr	r3, [r3, #32]
 80057d4:	f003 0302 	and.w	r3, r3, #2
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d1ee      	bne.n	80057ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80057dc:	7dfb      	ldrb	r3, [r7, #23]
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d105      	bne.n	80057ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057e2:	4b3c      	ldr	r3, [pc, #240]	; (80058d4 <HAL_RCC_OscConfig+0x4c4>)
 80057e4:	69db      	ldr	r3, [r3, #28]
 80057e6:	4a3b      	ldr	r2, [pc, #236]	; (80058d4 <HAL_RCC_OscConfig+0x4c4>)
 80057e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	69db      	ldr	r3, [r3, #28]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	f000 8087 	beq.w	8005906 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80057f8:	4b36      	ldr	r3, [pc, #216]	; (80058d4 <HAL_RCC_OscConfig+0x4c4>)
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	f003 030c 	and.w	r3, r3, #12
 8005800:	2b08      	cmp	r3, #8
 8005802:	d061      	beq.n	80058c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	69db      	ldr	r3, [r3, #28]
 8005808:	2b02      	cmp	r3, #2
 800580a:	d146      	bne.n	800589a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800580c:	4b33      	ldr	r3, [pc, #204]	; (80058dc <HAL_RCC_OscConfig+0x4cc>)
 800580e:	2200      	movs	r2, #0
 8005810:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005812:	f7fe fcad 	bl	8004170 <HAL_GetTick>
 8005816:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005818:	e008      	b.n	800582c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800581a:	f7fe fca9 	bl	8004170 <HAL_GetTick>
 800581e:	4602      	mov	r2, r0
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	1ad3      	subs	r3, r2, r3
 8005824:	2b02      	cmp	r3, #2
 8005826:	d901      	bls.n	800582c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005828:	2303      	movs	r3, #3
 800582a:	e06d      	b.n	8005908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800582c:	4b29      	ldr	r3, [pc, #164]	; (80058d4 <HAL_RCC_OscConfig+0x4c4>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005834:	2b00      	cmp	r3, #0
 8005836:	d1f0      	bne.n	800581a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6a1b      	ldr	r3, [r3, #32]
 800583c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005840:	d108      	bne.n	8005854 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005842:	4b24      	ldr	r3, [pc, #144]	; (80058d4 <HAL_RCC_OscConfig+0x4c4>)
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	4921      	ldr	r1, [pc, #132]	; (80058d4 <HAL_RCC_OscConfig+0x4c4>)
 8005850:	4313      	orrs	r3, r2
 8005852:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005854:	4b1f      	ldr	r3, [pc, #124]	; (80058d4 <HAL_RCC_OscConfig+0x4c4>)
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6a19      	ldr	r1, [r3, #32]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005864:	430b      	orrs	r3, r1
 8005866:	491b      	ldr	r1, [pc, #108]	; (80058d4 <HAL_RCC_OscConfig+0x4c4>)
 8005868:	4313      	orrs	r3, r2
 800586a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800586c:	4b1b      	ldr	r3, [pc, #108]	; (80058dc <HAL_RCC_OscConfig+0x4cc>)
 800586e:	2201      	movs	r2, #1
 8005870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005872:	f7fe fc7d 	bl	8004170 <HAL_GetTick>
 8005876:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005878:	e008      	b.n	800588c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800587a:	f7fe fc79 	bl	8004170 <HAL_GetTick>
 800587e:	4602      	mov	r2, r0
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	1ad3      	subs	r3, r2, r3
 8005884:	2b02      	cmp	r3, #2
 8005886:	d901      	bls.n	800588c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005888:	2303      	movs	r3, #3
 800588a:	e03d      	b.n	8005908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800588c:	4b11      	ldr	r3, [pc, #68]	; (80058d4 <HAL_RCC_OscConfig+0x4c4>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005894:	2b00      	cmp	r3, #0
 8005896:	d0f0      	beq.n	800587a <HAL_RCC_OscConfig+0x46a>
 8005898:	e035      	b.n	8005906 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800589a:	4b10      	ldr	r3, [pc, #64]	; (80058dc <HAL_RCC_OscConfig+0x4cc>)
 800589c:	2200      	movs	r2, #0
 800589e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058a0:	f7fe fc66 	bl	8004170 <HAL_GetTick>
 80058a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80058a6:	e008      	b.n	80058ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058a8:	f7fe fc62 	bl	8004170 <HAL_GetTick>
 80058ac:	4602      	mov	r2, r0
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	1ad3      	subs	r3, r2, r3
 80058b2:	2b02      	cmp	r3, #2
 80058b4:	d901      	bls.n	80058ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80058b6:	2303      	movs	r3, #3
 80058b8:	e026      	b.n	8005908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80058ba:	4b06      	ldr	r3, [pc, #24]	; (80058d4 <HAL_RCC_OscConfig+0x4c4>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d1f0      	bne.n	80058a8 <HAL_RCC_OscConfig+0x498>
 80058c6:	e01e      	b.n	8005906 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	69db      	ldr	r3, [r3, #28]
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d107      	bne.n	80058e0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e019      	b.n	8005908 <HAL_RCC_OscConfig+0x4f8>
 80058d4:	40021000 	.word	0x40021000
 80058d8:	40007000 	.word	0x40007000
 80058dc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80058e0:	4b0b      	ldr	r3, [pc, #44]	; (8005910 <HAL_RCC_OscConfig+0x500>)
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6a1b      	ldr	r3, [r3, #32]
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d106      	bne.n	8005902 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058fe:	429a      	cmp	r2, r3
 8005900:	d001      	beq.n	8005906 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e000      	b.n	8005908 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005906:	2300      	movs	r3, #0
}
 8005908:	4618      	mov	r0, r3
 800590a:	3718      	adds	r7, #24
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}
 8005910:	40021000 	.word	0x40021000

08005914 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d101      	bne.n	8005928 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	e0d0      	b.n	8005aca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005928:	4b6a      	ldr	r3, [pc, #424]	; (8005ad4 <HAL_RCC_ClockConfig+0x1c0>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f003 0307 	and.w	r3, r3, #7
 8005930:	683a      	ldr	r2, [r7, #0]
 8005932:	429a      	cmp	r2, r3
 8005934:	d910      	bls.n	8005958 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005936:	4b67      	ldr	r3, [pc, #412]	; (8005ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f023 0207 	bic.w	r2, r3, #7
 800593e:	4965      	ldr	r1, [pc, #404]	; (8005ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	4313      	orrs	r3, r2
 8005944:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005946:	4b63      	ldr	r3, [pc, #396]	; (8005ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 0307 	and.w	r3, r3, #7
 800594e:	683a      	ldr	r2, [r7, #0]
 8005950:	429a      	cmp	r2, r3
 8005952:	d001      	beq.n	8005958 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e0b8      	b.n	8005aca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 0302 	and.w	r3, r3, #2
 8005960:	2b00      	cmp	r3, #0
 8005962:	d020      	beq.n	80059a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f003 0304 	and.w	r3, r3, #4
 800596c:	2b00      	cmp	r3, #0
 800596e:	d005      	beq.n	800597c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005970:	4b59      	ldr	r3, [pc, #356]	; (8005ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	4a58      	ldr	r2, [pc, #352]	; (8005ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8005976:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800597a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 0308 	and.w	r3, r3, #8
 8005984:	2b00      	cmp	r3, #0
 8005986:	d005      	beq.n	8005994 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005988:	4b53      	ldr	r3, [pc, #332]	; (8005ad8 <HAL_RCC_ClockConfig+0x1c4>)
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	4a52      	ldr	r2, [pc, #328]	; (8005ad8 <HAL_RCC_ClockConfig+0x1c4>)
 800598e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005992:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005994:	4b50      	ldr	r3, [pc, #320]	; (8005ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	494d      	ldr	r1, [pc, #308]	; (8005ad8 <HAL_RCC_ClockConfig+0x1c4>)
 80059a2:	4313      	orrs	r3, r2
 80059a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 0301 	and.w	r3, r3, #1
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d040      	beq.n	8005a34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d107      	bne.n	80059ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059ba:	4b47      	ldr	r3, [pc, #284]	; (8005ad8 <HAL_RCC_ClockConfig+0x1c4>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d115      	bne.n	80059f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	e07f      	b.n	8005aca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	2b02      	cmp	r3, #2
 80059d0:	d107      	bne.n	80059e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059d2:	4b41      	ldr	r3, [pc, #260]	; (8005ad8 <HAL_RCC_ClockConfig+0x1c4>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d109      	bne.n	80059f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	e073      	b.n	8005aca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059e2:	4b3d      	ldr	r3, [pc, #244]	; (8005ad8 <HAL_RCC_ClockConfig+0x1c4>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f003 0302 	and.w	r3, r3, #2
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d101      	bne.n	80059f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e06b      	b.n	8005aca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80059f2:	4b39      	ldr	r3, [pc, #228]	; (8005ad8 <HAL_RCC_ClockConfig+0x1c4>)
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	f023 0203 	bic.w	r2, r3, #3
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	4936      	ldr	r1, [pc, #216]	; (8005ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8005a00:	4313      	orrs	r3, r2
 8005a02:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a04:	f7fe fbb4 	bl	8004170 <HAL_GetTick>
 8005a08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a0a:	e00a      	b.n	8005a22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a0c:	f7fe fbb0 	bl	8004170 <HAL_GetTick>
 8005a10:	4602      	mov	r2, r0
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	1ad3      	subs	r3, r2, r3
 8005a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d901      	bls.n	8005a22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a1e:	2303      	movs	r3, #3
 8005a20:	e053      	b.n	8005aca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a22:	4b2d      	ldr	r3, [pc, #180]	; (8005ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	f003 020c 	and.w	r2, r3, #12
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	009b      	lsls	r3, r3, #2
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d1eb      	bne.n	8005a0c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a34:	4b27      	ldr	r3, [pc, #156]	; (8005ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f003 0307 	and.w	r3, r3, #7
 8005a3c:	683a      	ldr	r2, [r7, #0]
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d210      	bcs.n	8005a64 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a42:	4b24      	ldr	r3, [pc, #144]	; (8005ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f023 0207 	bic.w	r2, r3, #7
 8005a4a:	4922      	ldr	r1, [pc, #136]	; (8005ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a52:	4b20      	ldr	r3, [pc, #128]	; (8005ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 0307 	and.w	r3, r3, #7
 8005a5a:	683a      	ldr	r2, [r7, #0]
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d001      	beq.n	8005a64 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	e032      	b.n	8005aca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f003 0304 	and.w	r3, r3, #4
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d008      	beq.n	8005a82 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a70:	4b19      	ldr	r3, [pc, #100]	; (8005ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	4916      	ldr	r1, [pc, #88]	; (8005ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f003 0308 	and.w	r3, r3, #8
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d009      	beq.n	8005aa2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005a8e:	4b12      	ldr	r3, [pc, #72]	; (8005ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	00db      	lsls	r3, r3, #3
 8005a9c:	490e      	ldr	r1, [pc, #56]	; (8005ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005aa2:	f000 f821 	bl	8005ae8 <HAL_RCC_GetSysClockFreq>
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	4b0b      	ldr	r3, [pc, #44]	; (8005ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	091b      	lsrs	r3, r3, #4
 8005aae:	f003 030f 	and.w	r3, r3, #15
 8005ab2:	490a      	ldr	r1, [pc, #40]	; (8005adc <HAL_RCC_ClockConfig+0x1c8>)
 8005ab4:	5ccb      	ldrb	r3, [r1, r3]
 8005ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8005aba:	4a09      	ldr	r2, [pc, #36]	; (8005ae0 <HAL_RCC_ClockConfig+0x1cc>)
 8005abc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005abe:	4b09      	ldr	r3, [pc, #36]	; (8005ae4 <HAL_RCC_ClockConfig+0x1d0>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f7fe fb12 	bl	80040ec <HAL_InitTick>

  return HAL_OK;
 8005ac8:	2300      	movs	r3, #0
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3710      	adds	r7, #16
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	40022000 	.word	0x40022000
 8005ad8:	40021000 	.word	0x40021000
 8005adc:	08008048 	.word	0x08008048
 8005ae0:	20000034 	.word	0x20000034
 8005ae4:	20000038 	.word	0x20000038

08005ae8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ae8:	b490      	push	{r4, r7}
 8005aea:	b08a      	sub	sp, #40	; 0x28
 8005aec:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005aee:	4b29      	ldr	r3, [pc, #164]	; (8005b94 <HAL_RCC_GetSysClockFreq+0xac>)
 8005af0:	1d3c      	adds	r4, r7, #4
 8005af2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005af4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005af8:	f240 2301 	movw	r3, #513	; 0x201
 8005afc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005afe:	2300      	movs	r3, #0
 8005b00:	61fb      	str	r3, [r7, #28]
 8005b02:	2300      	movs	r3, #0
 8005b04:	61bb      	str	r3, [r7, #24]
 8005b06:	2300      	movs	r3, #0
 8005b08:	627b      	str	r3, [r7, #36]	; 0x24
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005b12:	4b21      	ldr	r3, [pc, #132]	; (8005b98 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	f003 030c 	and.w	r3, r3, #12
 8005b1e:	2b04      	cmp	r3, #4
 8005b20:	d002      	beq.n	8005b28 <HAL_RCC_GetSysClockFreq+0x40>
 8005b22:	2b08      	cmp	r3, #8
 8005b24:	d003      	beq.n	8005b2e <HAL_RCC_GetSysClockFreq+0x46>
 8005b26:	e02b      	b.n	8005b80 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005b28:	4b1c      	ldr	r3, [pc, #112]	; (8005b9c <HAL_RCC_GetSysClockFreq+0xb4>)
 8005b2a:	623b      	str	r3, [r7, #32]
      break;
 8005b2c:	e02b      	b.n	8005b86 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005b2e:	69fb      	ldr	r3, [r7, #28]
 8005b30:	0c9b      	lsrs	r3, r3, #18
 8005b32:	f003 030f 	and.w	r3, r3, #15
 8005b36:	3328      	adds	r3, #40	; 0x28
 8005b38:	443b      	add	r3, r7
 8005b3a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005b3e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d012      	beq.n	8005b70 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005b4a:	4b13      	ldr	r3, [pc, #76]	; (8005b98 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	0c5b      	lsrs	r3, r3, #17
 8005b50:	f003 0301 	and.w	r3, r3, #1
 8005b54:	3328      	adds	r3, #40	; 0x28
 8005b56:	443b      	add	r3, r7
 8005b58:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005b5c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	4a0e      	ldr	r2, [pc, #56]	; (8005b9c <HAL_RCC_GetSysClockFreq+0xb4>)
 8005b62:	fb03 f202 	mul.w	r2, r3, r2
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b6c:	627b      	str	r3, [r7, #36]	; 0x24
 8005b6e:	e004      	b.n	8005b7a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	4a0b      	ldr	r2, [pc, #44]	; (8005ba0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b74:	fb02 f303 	mul.w	r3, r2, r3
 8005b78:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7c:	623b      	str	r3, [r7, #32]
      break;
 8005b7e:	e002      	b.n	8005b86 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005b80:	4b06      	ldr	r3, [pc, #24]	; (8005b9c <HAL_RCC_GetSysClockFreq+0xb4>)
 8005b82:	623b      	str	r3, [r7, #32]
      break;
 8005b84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b86:	6a3b      	ldr	r3, [r7, #32]
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3728      	adds	r7, #40	; 0x28
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bc90      	pop	{r4, r7}
 8005b90:	4770      	bx	lr
 8005b92:	bf00      	nop
 8005b94:	08008038 	.word	0x08008038
 8005b98:	40021000 	.word	0x40021000
 8005b9c:	007a1200 	.word	0x007a1200
 8005ba0:	003d0900 	.word	0x003d0900

08005ba4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ba8:	4b02      	ldr	r3, [pc, #8]	; (8005bb4 <HAL_RCC_GetHCLKFreq+0x10>)
 8005baa:	681b      	ldr	r3, [r3, #0]
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bc80      	pop	{r7}
 8005bb2:	4770      	bx	lr
 8005bb4:	20000034 	.word	0x20000034

08005bb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005bbc:	f7ff fff2 	bl	8005ba4 <HAL_RCC_GetHCLKFreq>
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	4b05      	ldr	r3, [pc, #20]	; (8005bd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	0a1b      	lsrs	r3, r3, #8
 8005bc8:	f003 0307 	and.w	r3, r3, #7
 8005bcc:	4903      	ldr	r1, [pc, #12]	; (8005bdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8005bce:	5ccb      	ldrb	r3, [r1, r3]
 8005bd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	40021000 	.word	0x40021000
 8005bdc:	08008058 	.word	0x08008058

08005be0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005be4:	f7ff ffde 	bl	8005ba4 <HAL_RCC_GetHCLKFreq>
 8005be8:	4602      	mov	r2, r0
 8005bea:	4b05      	ldr	r3, [pc, #20]	; (8005c00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	0adb      	lsrs	r3, r3, #11
 8005bf0:	f003 0307 	and.w	r3, r3, #7
 8005bf4:	4903      	ldr	r1, [pc, #12]	; (8005c04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005bf6:	5ccb      	ldrb	r3, [r1, r3]
 8005bf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	bd80      	pop	{r7, pc}
 8005c00:	40021000 	.word	0x40021000
 8005c04:	08008058 	.word	0x08008058

08005c08 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b085      	sub	sp, #20
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005c10:	4b0a      	ldr	r3, [pc, #40]	; (8005c3c <RCC_Delay+0x34>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a0a      	ldr	r2, [pc, #40]	; (8005c40 <RCC_Delay+0x38>)
 8005c16:	fba2 2303 	umull	r2, r3, r2, r3
 8005c1a:	0a5b      	lsrs	r3, r3, #9
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	fb02 f303 	mul.w	r3, r2, r3
 8005c22:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005c24:	bf00      	nop
  }
  while (Delay --);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	1e5a      	subs	r2, r3, #1
 8005c2a:	60fa      	str	r2, [r7, #12]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d1f9      	bne.n	8005c24 <RCC_Delay+0x1c>
}
 8005c30:	bf00      	nop
 8005c32:	bf00      	nop
 8005c34:	3714      	adds	r7, #20
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bc80      	pop	{r7}
 8005c3a:	4770      	bx	lr
 8005c3c:	20000034 	.word	0x20000034
 8005c40:	10624dd3 	.word	0x10624dd3

08005c44 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b086      	sub	sp, #24
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	613b      	str	r3, [r7, #16]
 8005c50:	2300      	movs	r3, #0
 8005c52:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f003 0301 	and.w	r3, r3, #1
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d07d      	beq.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005c60:	2300      	movs	r3, #0
 8005c62:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c64:	4b4f      	ldr	r3, [pc, #316]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c66:	69db      	ldr	r3, [r3, #28]
 8005c68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d10d      	bne.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c70:	4b4c      	ldr	r3, [pc, #304]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c72:	69db      	ldr	r3, [r3, #28]
 8005c74:	4a4b      	ldr	r2, [pc, #300]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c7a:	61d3      	str	r3, [r2, #28]
 8005c7c:	4b49      	ldr	r3, [pc, #292]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c7e:	69db      	ldr	r3, [r3, #28]
 8005c80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c84:	60bb      	str	r3, [r7, #8]
 8005c86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c8c:	4b46      	ldr	r3, [pc, #280]	; (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d118      	bne.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c98:	4b43      	ldr	r3, [pc, #268]	; (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a42      	ldr	r2, [pc, #264]	; (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005c9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ca2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ca4:	f7fe fa64 	bl	8004170 <HAL_GetTick>
 8005ca8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005caa:	e008      	b.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cac:	f7fe fa60 	bl	8004170 <HAL_GetTick>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	1ad3      	subs	r3, r2, r3
 8005cb6:	2b64      	cmp	r3, #100	; 0x64
 8005cb8:	d901      	bls.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005cba:	2303      	movs	r3, #3
 8005cbc:	e06d      	b.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cbe:	4b3a      	ldr	r3, [pc, #232]	; (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d0f0      	beq.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005cca:	4b36      	ldr	r3, [pc, #216]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ccc:	6a1b      	ldr	r3, [r3, #32]
 8005cce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cd2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d02e      	beq.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d027      	beq.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005ce8:	4b2e      	ldr	r3, [pc, #184]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cea:	6a1b      	ldr	r3, [r3, #32]
 8005cec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cf0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005cf2:	4b2e      	ldr	r3, [pc, #184]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005cf8:	4b2c      	ldr	r3, [pc, #176]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005cfe:	4a29      	ldr	r2, [pc, #164]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f003 0301 	and.w	r3, r3, #1
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d014      	beq.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d0e:	f7fe fa2f 	bl	8004170 <HAL_GetTick>
 8005d12:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d14:	e00a      	b.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d16:	f7fe fa2b 	bl	8004170 <HAL_GetTick>
 8005d1a:	4602      	mov	r2, r0
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	1ad3      	subs	r3, r2, r3
 8005d20:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d901      	bls.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005d28:	2303      	movs	r3, #3
 8005d2a:	e036      	b.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d2c:	4b1d      	ldr	r3, [pc, #116]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d2e:	6a1b      	ldr	r3, [r3, #32]
 8005d30:	f003 0302 	and.w	r3, r3, #2
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d0ee      	beq.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d38:	4b1a      	ldr	r3, [pc, #104]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d3a:	6a1b      	ldr	r3, [r3, #32]
 8005d3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	4917      	ldr	r1, [pc, #92]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d46:	4313      	orrs	r3, r2
 8005d48:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005d4a:	7dfb      	ldrb	r3, [r7, #23]
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d105      	bne.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d50:	4b14      	ldr	r3, [pc, #80]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d52:	69db      	ldr	r3, [r3, #28]
 8005d54:	4a13      	ldr	r2, [pc, #76]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d5a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f003 0302 	and.w	r3, r3, #2
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d008      	beq.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005d68:	4b0e      	ldr	r3, [pc, #56]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	490b      	ldr	r1, [pc, #44]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d76:	4313      	orrs	r3, r2
 8005d78:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f003 0310 	and.w	r3, r3, #16
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d008      	beq.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005d86:	4b07      	ldr	r3, [pc, #28]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	4904      	ldr	r1, [pc, #16]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d94:	4313      	orrs	r3, r2
 8005d96:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005d98:	2300      	movs	r3, #0
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3718      	adds	r7, #24
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}
 8005da2:	bf00      	nop
 8005da4:	40021000 	.word	0x40021000
 8005da8:	40007000 	.word	0x40007000
 8005dac:	42420440 	.word	0x42420440

08005db0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b082      	sub	sp, #8
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d101      	bne.n	8005dc2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e041      	b.n	8005e46 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d106      	bne.n	8005ddc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f7fd fff4 	bl	8003dc4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2202      	movs	r2, #2
 8005de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	3304      	adds	r3, #4
 8005dec:	4619      	mov	r1, r3
 8005dee:	4610      	mov	r0, r2
 8005df0:	f000 fabe 	bl	8006370 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2201      	movs	r2, #1
 8005e08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e44:	2300      	movs	r3, #0
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3708      	adds	r7, #8
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}
	...

08005e50 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d109      	bne.n	8005e74 <HAL_TIM_PWM_Start+0x24>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	bf14      	ite	ne
 8005e6c:	2301      	movne	r3, #1
 8005e6e:	2300      	moveq	r3, #0
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	e022      	b.n	8005eba <HAL_TIM_PWM_Start+0x6a>
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	2b04      	cmp	r3, #4
 8005e78:	d109      	bne.n	8005e8e <HAL_TIM_PWM_Start+0x3e>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	bf14      	ite	ne
 8005e86:	2301      	movne	r3, #1
 8005e88:	2300      	moveq	r3, #0
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	e015      	b.n	8005eba <HAL_TIM_PWM_Start+0x6a>
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	2b08      	cmp	r3, #8
 8005e92:	d109      	bne.n	8005ea8 <HAL_TIM_PWM_Start+0x58>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	bf14      	ite	ne
 8005ea0:	2301      	movne	r3, #1
 8005ea2:	2300      	moveq	r3, #0
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	e008      	b.n	8005eba <HAL_TIM_PWM_Start+0x6a>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	bf14      	ite	ne
 8005eb4:	2301      	movne	r3, #1
 8005eb6:	2300      	moveq	r3, #0
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d001      	beq.n	8005ec2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e05e      	b.n	8005f80 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d104      	bne.n	8005ed2 <HAL_TIM_PWM_Start+0x82>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2202      	movs	r2, #2
 8005ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ed0:	e013      	b.n	8005efa <HAL_TIM_PWM_Start+0xaa>
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	2b04      	cmp	r3, #4
 8005ed6:	d104      	bne.n	8005ee2 <HAL_TIM_PWM_Start+0x92>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2202      	movs	r2, #2
 8005edc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ee0:	e00b      	b.n	8005efa <HAL_TIM_PWM_Start+0xaa>
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	2b08      	cmp	r3, #8
 8005ee6:	d104      	bne.n	8005ef2 <HAL_TIM_PWM_Start+0xa2>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2202      	movs	r2, #2
 8005eec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ef0:	e003      	b.n	8005efa <HAL_TIM_PWM_Start+0xaa>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2202      	movs	r2, #2
 8005ef6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	2201      	movs	r2, #1
 8005f00:	6839      	ldr	r1, [r7, #0]
 8005f02:	4618      	mov	r0, r3
 8005f04:	f000 fc1e 	bl	8006744 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a1e      	ldr	r2, [pc, #120]	; (8005f88 <HAL_TIM_PWM_Start+0x138>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d107      	bne.n	8005f22 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f20:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a18      	ldr	r2, [pc, #96]	; (8005f88 <HAL_TIM_PWM_Start+0x138>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d00e      	beq.n	8005f4a <HAL_TIM_PWM_Start+0xfa>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f34:	d009      	beq.n	8005f4a <HAL_TIM_PWM_Start+0xfa>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a14      	ldr	r2, [pc, #80]	; (8005f8c <HAL_TIM_PWM_Start+0x13c>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d004      	beq.n	8005f4a <HAL_TIM_PWM_Start+0xfa>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a12      	ldr	r2, [pc, #72]	; (8005f90 <HAL_TIM_PWM_Start+0x140>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d111      	bne.n	8005f6e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	f003 0307 	and.w	r3, r3, #7
 8005f54:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2b06      	cmp	r3, #6
 8005f5a:	d010      	beq.n	8005f7e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f042 0201 	orr.w	r2, r2, #1
 8005f6a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f6c:	e007      	b.n	8005f7e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f042 0201 	orr.w	r2, r2, #1
 8005f7c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f7e:	2300      	movs	r3, #0
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3710      	adds	r7, #16
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}
 8005f88:	40012c00 	.word	0x40012c00
 8005f8c:	40000400 	.word	0x40000400
 8005f90:	40000800 	.word	0x40000800

08005f94 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b086      	sub	sp, #24
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d101      	bne.n	8005fa8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e093      	b.n	80060d0 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d106      	bne.n	8005fc2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f7fd ff1d 	bl	8003dfc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2202      	movs	r2, #2
 8005fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	6812      	ldr	r2, [r2, #0]
 8005fd4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fd8:	f023 0307 	bic.w	r3, r3, #7
 8005fdc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	3304      	adds	r3, #4
 8005fe6:	4619      	mov	r1, r3
 8005fe8:	4610      	mov	r0, r2
 8005fea:	f000 f9c1 	bl	8006370 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	699b      	ldr	r3, [r3, #24]
 8005ffc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	6a1b      	ldr	r3, [r3, #32]
 8006004:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	697a      	ldr	r2, [r7, #20]
 800600c:	4313      	orrs	r3, r2
 800600e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006016:	f023 0303 	bic.w	r3, r3, #3
 800601a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	689a      	ldr	r2, [r3, #8]
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	699b      	ldr	r3, [r3, #24]
 8006024:	021b      	lsls	r3, r3, #8
 8006026:	4313      	orrs	r3, r2
 8006028:	693a      	ldr	r2, [r7, #16]
 800602a:	4313      	orrs	r3, r2
 800602c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006034:	f023 030c 	bic.w	r3, r3, #12
 8006038:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006040:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006044:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	68da      	ldr	r2, [r3, #12]
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	69db      	ldr	r3, [r3, #28]
 800604e:	021b      	lsls	r3, r3, #8
 8006050:	4313      	orrs	r3, r2
 8006052:	693a      	ldr	r2, [r7, #16]
 8006054:	4313      	orrs	r3, r2
 8006056:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	691b      	ldr	r3, [r3, #16]
 800605c:	011a      	lsls	r2, r3, #4
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	6a1b      	ldr	r3, [r3, #32]
 8006062:	031b      	lsls	r3, r3, #12
 8006064:	4313      	orrs	r3, r2
 8006066:	693a      	ldr	r2, [r7, #16]
 8006068:	4313      	orrs	r3, r2
 800606a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006072:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	685a      	ldr	r2, [r3, #4]
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	695b      	ldr	r3, [r3, #20]
 800607c:	011b      	lsls	r3, r3, #4
 800607e:	4313      	orrs	r3, r2
 8006080:	68fa      	ldr	r2, [r7, #12]
 8006082:	4313      	orrs	r3, r2
 8006084:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	697a      	ldr	r2, [r7, #20]
 800608c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	693a      	ldr	r2, [r7, #16]
 8006094:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	68fa      	ldr	r2, [r7, #12]
 800609c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2201      	movs	r2, #1
 80060a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2201      	movs	r2, #1
 80060aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2201      	movs	r2, #1
 80060b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2201      	movs	r2, #1
 80060ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2201      	movs	r2, #1
 80060c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2201      	movs	r2, #1
 80060ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060ce:	2300      	movs	r3, #0
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3718      	adds	r7, #24
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}

080060d8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b084      	sub	sp, #16
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060e8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80060f0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80060f8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006100:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d110      	bne.n	800612a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006108:	7bfb      	ldrb	r3, [r7, #15]
 800610a:	2b01      	cmp	r3, #1
 800610c:	d102      	bne.n	8006114 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800610e:	7b7b      	ldrb	r3, [r7, #13]
 8006110:	2b01      	cmp	r3, #1
 8006112:	d001      	beq.n	8006118 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006114:	2301      	movs	r3, #1
 8006116:	e069      	b.n	80061ec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2202      	movs	r2, #2
 800611c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2202      	movs	r2, #2
 8006124:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006128:	e031      	b.n	800618e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	2b04      	cmp	r3, #4
 800612e:	d110      	bne.n	8006152 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006130:	7bbb      	ldrb	r3, [r7, #14]
 8006132:	2b01      	cmp	r3, #1
 8006134:	d102      	bne.n	800613c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006136:	7b3b      	ldrb	r3, [r7, #12]
 8006138:	2b01      	cmp	r3, #1
 800613a:	d001      	beq.n	8006140 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	e055      	b.n	80061ec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2202      	movs	r2, #2
 8006144:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2202      	movs	r2, #2
 800614c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006150:	e01d      	b.n	800618e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006152:	7bfb      	ldrb	r3, [r7, #15]
 8006154:	2b01      	cmp	r3, #1
 8006156:	d108      	bne.n	800616a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006158:	7bbb      	ldrb	r3, [r7, #14]
 800615a:	2b01      	cmp	r3, #1
 800615c:	d105      	bne.n	800616a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800615e:	7b7b      	ldrb	r3, [r7, #13]
 8006160:	2b01      	cmp	r3, #1
 8006162:	d102      	bne.n	800616a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006164:	7b3b      	ldrb	r3, [r7, #12]
 8006166:	2b01      	cmp	r3, #1
 8006168:	d001      	beq.n	800616e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	e03e      	b.n	80061ec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2202      	movs	r2, #2
 8006172:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2202      	movs	r2, #2
 800617a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2202      	movs	r2, #2
 8006182:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2202      	movs	r2, #2
 800618a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d003      	beq.n	800619c <HAL_TIM_Encoder_Start+0xc4>
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	2b04      	cmp	r3, #4
 8006198:	d008      	beq.n	80061ac <HAL_TIM_Encoder_Start+0xd4>
 800619a:	e00f      	b.n	80061bc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	2201      	movs	r2, #1
 80061a2:	2100      	movs	r1, #0
 80061a4:	4618      	mov	r0, r3
 80061a6:	f000 facd 	bl	8006744 <TIM_CCxChannelCmd>
      break;
 80061aa:	e016      	b.n	80061da <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	2201      	movs	r2, #1
 80061b2:	2104      	movs	r1, #4
 80061b4:	4618      	mov	r0, r3
 80061b6:	f000 fac5 	bl	8006744 <TIM_CCxChannelCmd>
      break;
 80061ba:	e00e      	b.n	80061da <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	2201      	movs	r2, #1
 80061c2:	2100      	movs	r1, #0
 80061c4:	4618      	mov	r0, r3
 80061c6:	f000 fabd 	bl	8006744 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	2201      	movs	r2, #1
 80061d0:	2104      	movs	r1, #4
 80061d2:	4618      	mov	r0, r3
 80061d4:	f000 fab6 	bl	8006744 <TIM_CCxChannelCmd>
      break;
 80061d8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f042 0201 	orr.w	r2, r2, #1
 80061e8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80061ea:	2300      	movs	r3, #0
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3710      	adds	r7, #16
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b084      	sub	sp, #16
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	60f8      	str	r0, [r7, #12]
 80061fc:	60b9      	str	r1, [r7, #8]
 80061fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006206:	2b01      	cmp	r3, #1
 8006208:	d101      	bne.n	800620e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800620a:	2302      	movs	r3, #2
 800620c:	e0ac      	b.n	8006368 <HAL_TIM_PWM_ConfigChannel+0x174>
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2201      	movs	r2, #1
 8006212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2b0c      	cmp	r3, #12
 800621a:	f200 809f 	bhi.w	800635c <HAL_TIM_PWM_ConfigChannel+0x168>
 800621e:	a201      	add	r2, pc, #4	; (adr r2, 8006224 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006224:	08006259 	.word	0x08006259
 8006228:	0800635d 	.word	0x0800635d
 800622c:	0800635d 	.word	0x0800635d
 8006230:	0800635d 	.word	0x0800635d
 8006234:	08006299 	.word	0x08006299
 8006238:	0800635d 	.word	0x0800635d
 800623c:	0800635d 	.word	0x0800635d
 8006240:	0800635d 	.word	0x0800635d
 8006244:	080062db 	.word	0x080062db
 8006248:	0800635d 	.word	0x0800635d
 800624c:	0800635d 	.word	0x0800635d
 8006250:	0800635d 	.word	0x0800635d
 8006254:	0800631b 	.word	0x0800631b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	68b9      	ldr	r1, [r7, #8]
 800625e:	4618      	mov	r0, r3
 8006260:	f000 f8e8 	bl	8006434 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	699a      	ldr	r2, [r3, #24]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f042 0208 	orr.w	r2, r2, #8
 8006272:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	699a      	ldr	r2, [r3, #24]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f022 0204 	bic.w	r2, r2, #4
 8006282:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	6999      	ldr	r1, [r3, #24]
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	691a      	ldr	r2, [r3, #16]
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	430a      	orrs	r2, r1
 8006294:	619a      	str	r2, [r3, #24]
      break;
 8006296:	e062      	b.n	800635e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	68b9      	ldr	r1, [r7, #8]
 800629e:	4618      	mov	r0, r3
 80062a0:	f000 f92e 	bl	8006500 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	699a      	ldr	r2, [r3, #24]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	699a      	ldr	r2, [r3, #24]
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	6999      	ldr	r1, [r3, #24]
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	691b      	ldr	r3, [r3, #16]
 80062ce:	021a      	lsls	r2, r3, #8
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	430a      	orrs	r2, r1
 80062d6:	619a      	str	r2, [r3, #24]
      break;
 80062d8:	e041      	b.n	800635e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	68b9      	ldr	r1, [r7, #8]
 80062e0:	4618      	mov	r0, r3
 80062e2:	f000 f977 	bl	80065d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	69da      	ldr	r2, [r3, #28]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f042 0208 	orr.w	r2, r2, #8
 80062f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	69da      	ldr	r2, [r3, #28]
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f022 0204 	bic.w	r2, r2, #4
 8006304:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	69d9      	ldr	r1, [r3, #28]
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	691a      	ldr	r2, [r3, #16]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	430a      	orrs	r2, r1
 8006316:	61da      	str	r2, [r3, #28]
      break;
 8006318:	e021      	b.n	800635e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	68b9      	ldr	r1, [r7, #8]
 8006320:	4618      	mov	r0, r3
 8006322:	f000 f9c1 	bl	80066a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	69da      	ldr	r2, [r3, #28]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006334:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	69da      	ldr	r2, [r3, #28]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006344:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	69d9      	ldr	r1, [r3, #28]
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	691b      	ldr	r3, [r3, #16]
 8006350:	021a      	lsls	r2, r3, #8
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	430a      	orrs	r2, r1
 8006358:	61da      	str	r2, [r3, #28]
      break;
 800635a:	e000      	b.n	800635e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800635c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2200      	movs	r2, #0
 8006362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006366:	2300      	movs	r3, #0
}
 8006368:	4618      	mov	r0, r3
 800636a:	3710      	adds	r7, #16
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}

08006370 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006370:	b480      	push	{r7}
 8006372:	b085      	sub	sp, #20
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	4a29      	ldr	r2, [pc, #164]	; (8006428 <TIM_Base_SetConfig+0xb8>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d00b      	beq.n	80063a0 <TIM_Base_SetConfig+0x30>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800638e:	d007      	beq.n	80063a0 <TIM_Base_SetConfig+0x30>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	4a26      	ldr	r2, [pc, #152]	; (800642c <TIM_Base_SetConfig+0xbc>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d003      	beq.n	80063a0 <TIM_Base_SetConfig+0x30>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	4a25      	ldr	r2, [pc, #148]	; (8006430 <TIM_Base_SetConfig+0xc0>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d108      	bne.n	80063b2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	68fa      	ldr	r2, [r7, #12]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	4a1c      	ldr	r2, [pc, #112]	; (8006428 <TIM_Base_SetConfig+0xb8>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d00b      	beq.n	80063d2 <TIM_Base_SetConfig+0x62>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063c0:	d007      	beq.n	80063d2 <TIM_Base_SetConfig+0x62>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	4a19      	ldr	r2, [pc, #100]	; (800642c <TIM_Base_SetConfig+0xbc>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d003      	beq.n	80063d2 <TIM_Base_SetConfig+0x62>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4a18      	ldr	r2, [pc, #96]	; (8006430 <TIM_Base_SetConfig+0xc0>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d108      	bne.n	80063e4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	68db      	ldr	r3, [r3, #12]
 80063de:	68fa      	ldr	r2, [r7, #12]
 80063e0:	4313      	orrs	r3, r2
 80063e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	695b      	ldr	r3, [r3, #20]
 80063ee:	4313      	orrs	r3, r2
 80063f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	68fa      	ldr	r2, [r7, #12]
 80063f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	689a      	ldr	r2, [r3, #8]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	4a07      	ldr	r2, [pc, #28]	; (8006428 <TIM_Base_SetConfig+0xb8>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d103      	bne.n	8006418 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	691a      	ldr	r2, [r3, #16]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2201      	movs	r2, #1
 800641c:	615a      	str	r2, [r3, #20]
}
 800641e:	bf00      	nop
 8006420:	3714      	adds	r7, #20
 8006422:	46bd      	mov	sp, r7
 8006424:	bc80      	pop	{r7}
 8006426:	4770      	bx	lr
 8006428:	40012c00 	.word	0x40012c00
 800642c:	40000400 	.word	0x40000400
 8006430:	40000800 	.word	0x40000800

08006434 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006434:	b480      	push	{r7}
 8006436:	b087      	sub	sp, #28
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6a1b      	ldr	r3, [r3, #32]
 8006442:	f023 0201 	bic.w	r2, r3, #1
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6a1b      	ldr	r3, [r3, #32]
 800644e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	699b      	ldr	r3, [r3, #24]
 800645a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006462:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f023 0303 	bic.w	r3, r3, #3
 800646a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	68fa      	ldr	r2, [r7, #12]
 8006472:	4313      	orrs	r3, r2
 8006474:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	f023 0302 	bic.w	r3, r3, #2
 800647c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	697a      	ldr	r2, [r7, #20]
 8006484:	4313      	orrs	r3, r2
 8006486:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	4a1c      	ldr	r2, [pc, #112]	; (80064fc <TIM_OC1_SetConfig+0xc8>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d10c      	bne.n	80064aa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	f023 0308 	bic.w	r3, r3, #8
 8006496:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	697a      	ldr	r2, [r7, #20]
 800649e:	4313      	orrs	r3, r2
 80064a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	f023 0304 	bic.w	r3, r3, #4
 80064a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	4a13      	ldr	r2, [pc, #76]	; (80064fc <TIM_OC1_SetConfig+0xc8>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d111      	bne.n	80064d6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80064c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	695b      	ldr	r3, [r3, #20]
 80064c6:	693a      	ldr	r2, [r7, #16]
 80064c8:	4313      	orrs	r3, r2
 80064ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	699b      	ldr	r3, [r3, #24]
 80064d0:	693a      	ldr	r2, [r7, #16]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	693a      	ldr	r2, [r7, #16]
 80064da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	68fa      	ldr	r2, [r7, #12]
 80064e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	685a      	ldr	r2, [r3, #4]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	697a      	ldr	r2, [r7, #20]
 80064ee:	621a      	str	r2, [r3, #32]
}
 80064f0:	bf00      	nop
 80064f2:	371c      	adds	r7, #28
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bc80      	pop	{r7}
 80064f8:	4770      	bx	lr
 80064fa:	bf00      	nop
 80064fc:	40012c00 	.word	0x40012c00

08006500 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006500:	b480      	push	{r7}
 8006502:	b087      	sub	sp, #28
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6a1b      	ldr	r3, [r3, #32]
 800650e:	f023 0210 	bic.w	r2, r3, #16
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6a1b      	ldr	r3, [r3, #32]
 800651a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	699b      	ldr	r3, [r3, #24]
 8006526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800652e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006536:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	021b      	lsls	r3, r3, #8
 800653e:	68fa      	ldr	r2, [r7, #12]
 8006540:	4313      	orrs	r3, r2
 8006542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	f023 0320 	bic.w	r3, r3, #32
 800654a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	011b      	lsls	r3, r3, #4
 8006552:	697a      	ldr	r2, [r7, #20]
 8006554:	4313      	orrs	r3, r2
 8006556:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	4a1d      	ldr	r2, [pc, #116]	; (80065d0 <TIM_OC2_SetConfig+0xd0>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d10d      	bne.n	800657c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006566:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	011b      	lsls	r3, r3, #4
 800656e:	697a      	ldr	r2, [r7, #20]
 8006570:	4313      	orrs	r3, r2
 8006572:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800657a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	4a14      	ldr	r2, [pc, #80]	; (80065d0 <TIM_OC2_SetConfig+0xd0>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d113      	bne.n	80065ac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800658a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006592:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	695b      	ldr	r3, [r3, #20]
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	693a      	ldr	r2, [r7, #16]
 800659c:	4313      	orrs	r3, r2
 800659e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	699b      	ldr	r3, [r3, #24]
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	693a      	ldr	r2, [r7, #16]
 80065a8:	4313      	orrs	r3, r2
 80065aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	693a      	ldr	r2, [r7, #16]
 80065b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	68fa      	ldr	r2, [r7, #12]
 80065b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	685a      	ldr	r2, [r3, #4]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	697a      	ldr	r2, [r7, #20]
 80065c4:	621a      	str	r2, [r3, #32]
}
 80065c6:	bf00      	nop
 80065c8:	371c      	adds	r7, #28
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bc80      	pop	{r7}
 80065ce:	4770      	bx	lr
 80065d0:	40012c00 	.word	0x40012c00

080065d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b087      	sub	sp, #28
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6a1b      	ldr	r3, [r3, #32]
 80065e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6a1b      	ldr	r3, [r3, #32]
 80065ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	69db      	ldr	r3, [r3, #28]
 80065fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006602:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f023 0303 	bic.w	r3, r3, #3
 800660a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	68fa      	ldr	r2, [r7, #12]
 8006612:	4313      	orrs	r3, r2
 8006614:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800661c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	021b      	lsls	r3, r3, #8
 8006624:	697a      	ldr	r2, [r7, #20]
 8006626:	4313      	orrs	r3, r2
 8006628:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	4a1d      	ldr	r2, [pc, #116]	; (80066a4 <TIM_OC3_SetConfig+0xd0>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d10d      	bne.n	800664e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006638:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	68db      	ldr	r3, [r3, #12]
 800663e:	021b      	lsls	r3, r3, #8
 8006640:	697a      	ldr	r2, [r7, #20]
 8006642:	4313      	orrs	r3, r2
 8006644:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800664c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	4a14      	ldr	r2, [pc, #80]	; (80066a4 <TIM_OC3_SetConfig+0xd0>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d113      	bne.n	800667e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800665c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006664:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	695b      	ldr	r3, [r3, #20]
 800666a:	011b      	lsls	r3, r3, #4
 800666c:	693a      	ldr	r2, [r7, #16]
 800666e:	4313      	orrs	r3, r2
 8006670:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	699b      	ldr	r3, [r3, #24]
 8006676:	011b      	lsls	r3, r3, #4
 8006678:	693a      	ldr	r2, [r7, #16]
 800667a:	4313      	orrs	r3, r2
 800667c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	693a      	ldr	r2, [r7, #16]
 8006682:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	68fa      	ldr	r2, [r7, #12]
 8006688:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	685a      	ldr	r2, [r3, #4]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	697a      	ldr	r2, [r7, #20]
 8006696:	621a      	str	r2, [r3, #32]
}
 8006698:	bf00      	nop
 800669a:	371c      	adds	r7, #28
 800669c:	46bd      	mov	sp, r7
 800669e:	bc80      	pop	{r7}
 80066a0:	4770      	bx	lr
 80066a2:	bf00      	nop
 80066a4:	40012c00 	.word	0x40012c00

080066a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b087      	sub	sp, #28
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6a1b      	ldr	r3, [r3, #32]
 80066b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6a1b      	ldr	r3, [r3, #32]
 80066c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	69db      	ldr	r3, [r3, #28]
 80066ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	021b      	lsls	r3, r3, #8
 80066e6:	68fa      	ldr	r2, [r7, #12]
 80066e8:	4313      	orrs	r3, r2
 80066ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80066f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	689b      	ldr	r3, [r3, #8]
 80066f8:	031b      	lsls	r3, r3, #12
 80066fa:	693a      	ldr	r2, [r7, #16]
 80066fc:	4313      	orrs	r3, r2
 80066fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	4a0f      	ldr	r2, [pc, #60]	; (8006740 <TIM_OC4_SetConfig+0x98>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d109      	bne.n	800671c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800670e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	695b      	ldr	r3, [r3, #20]
 8006714:	019b      	lsls	r3, r3, #6
 8006716:	697a      	ldr	r2, [r7, #20]
 8006718:	4313      	orrs	r3, r2
 800671a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	697a      	ldr	r2, [r7, #20]
 8006720:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	68fa      	ldr	r2, [r7, #12]
 8006726:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	685a      	ldr	r2, [r3, #4]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	693a      	ldr	r2, [r7, #16]
 8006734:	621a      	str	r2, [r3, #32]
}
 8006736:	bf00      	nop
 8006738:	371c      	adds	r7, #28
 800673a:	46bd      	mov	sp, r7
 800673c:	bc80      	pop	{r7}
 800673e:	4770      	bx	lr
 8006740:	40012c00 	.word	0x40012c00

08006744 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006744:	b480      	push	{r7}
 8006746:	b087      	sub	sp, #28
 8006748:	af00      	add	r7, sp, #0
 800674a:	60f8      	str	r0, [r7, #12]
 800674c:	60b9      	str	r1, [r7, #8]
 800674e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	f003 031f 	and.w	r3, r3, #31
 8006756:	2201      	movs	r2, #1
 8006758:	fa02 f303 	lsl.w	r3, r2, r3
 800675c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	6a1a      	ldr	r2, [r3, #32]
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	43db      	mvns	r3, r3
 8006766:	401a      	ands	r2, r3
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	6a1a      	ldr	r2, [r3, #32]
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	f003 031f 	and.w	r3, r3, #31
 8006776:	6879      	ldr	r1, [r7, #4]
 8006778:	fa01 f303 	lsl.w	r3, r1, r3
 800677c:	431a      	orrs	r2, r3
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	621a      	str	r2, [r3, #32]
}
 8006782:	bf00      	nop
 8006784:	371c      	adds	r7, #28
 8006786:	46bd      	mov	sp, r7
 8006788:	bc80      	pop	{r7}
 800678a:	4770      	bx	lr

0800678c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800678c:	b480      	push	{r7}
 800678e:	b085      	sub	sp, #20
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800679c:	2b01      	cmp	r3, #1
 800679e:	d101      	bne.n	80067a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80067a0:	2302      	movs	r3, #2
 80067a2:	e046      	b.n	8006832 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2201      	movs	r2, #1
 80067a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2202      	movs	r2, #2
 80067b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	68fa      	ldr	r2, [r7, #12]
 80067d2:	4313      	orrs	r3, r2
 80067d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	68fa      	ldr	r2, [r7, #12]
 80067dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a16      	ldr	r2, [pc, #88]	; (800683c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d00e      	beq.n	8006806 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067f0:	d009      	beq.n	8006806 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a12      	ldr	r2, [pc, #72]	; (8006840 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d004      	beq.n	8006806 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a10      	ldr	r2, [pc, #64]	; (8006844 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d10c      	bne.n	8006820 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800680c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	68ba      	ldr	r2, [r7, #8]
 8006814:	4313      	orrs	r3, r2
 8006816:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	68ba      	ldr	r2, [r7, #8]
 800681e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2201      	movs	r2, #1
 8006824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2200      	movs	r2, #0
 800682c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006830:	2300      	movs	r3, #0
}
 8006832:	4618      	mov	r0, r3
 8006834:	3714      	adds	r7, #20
 8006836:	46bd      	mov	sp, r7
 8006838:	bc80      	pop	{r7}
 800683a:	4770      	bx	lr
 800683c:	40012c00 	.word	0x40012c00
 8006840:	40000400 	.word	0x40000400
 8006844:	40000800 	.word	0x40000800

08006848 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b082      	sub	sp, #8
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d101      	bne.n	800685a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	e03f      	b.n	80068da <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006860:	b2db      	uxtb	r3, r3
 8006862:	2b00      	cmp	r3, #0
 8006864:	d106      	bne.n	8006874 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2200      	movs	r2, #0
 800686a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f7fd fbac 	bl	8003fcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2224      	movs	r2, #36	; 0x24
 8006878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	68da      	ldr	r2, [r3, #12]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800688a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f000 fc25 	bl	80070dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	691a      	ldr	r2, [r3, #16]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80068a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	695a      	ldr	r2, [r3, #20]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80068b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	68da      	ldr	r2, [r3, #12]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80068c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2200      	movs	r2, #0
 80068c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2220      	movs	r2, #32
 80068cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2220      	movs	r2, #32
 80068d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80068d8:	2300      	movs	r3, #0
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3708      	adds	r7, #8
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}

080068e2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068e2:	b580      	push	{r7, lr}
 80068e4:	b08a      	sub	sp, #40	; 0x28
 80068e6:	af02      	add	r7, sp, #8
 80068e8:	60f8      	str	r0, [r7, #12]
 80068ea:	60b9      	str	r1, [r7, #8]
 80068ec:	603b      	str	r3, [r7, #0]
 80068ee:	4613      	mov	r3, r2
 80068f0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80068f2:	2300      	movs	r3, #0
 80068f4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068fc:	b2db      	uxtb	r3, r3
 80068fe:	2b20      	cmp	r3, #32
 8006900:	d17c      	bne.n	80069fc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d002      	beq.n	800690e <HAL_UART_Transmit+0x2c>
 8006908:	88fb      	ldrh	r3, [r7, #6]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d101      	bne.n	8006912 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	e075      	b.n	80069fe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006918:	2b01      	cmp	r3, #1
 800691a:	d101      	bne.n	8006920 <HAL_UART_Transmit+0x3e>
 800691c:	2302      	movs	r3, #2
 800691e:	e06e      	b.n	80069fe <HAL_UART_Transmit+0x11c>
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2201      	movs	r2, #1
 8006924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2200      	movs	r2, #0
 800692c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2221      	movs	r2, #33	; 0x21
 8006932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006936:	f7fd fc1b 	bl	8004170 <HAL_GetTick>
 800693a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	88fa      	ldrh	r2, [r7, #6]
 8006940:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	88fa      	ldrh	r2, [r7, #6]
 8006946:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006950:	d108      	bne.n	8006964 <HAL_UART_Transmit+0x82>
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	691b      	ldr	r3, [r3, #16]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d104      	bne.n	8006964 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800695a:	2300      	movs	r3, #0
 800695c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	61bb      	str	r3, [r7, #24]
 8006962:	e003      	b.n	800696c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006968:	2300      	movs	r3, #0
 800696a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2200      	movs	r2, #0
 8006970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006974:	e02a      	b.n	80069cc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	9300      	str	r3, [sp, #0]
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	2200      	movs	r2, #0
 800697e:	2180      	movs	r1, #128	; 0x80
 8006980:	68f8      	ldr	r0, [r7, #12]
 8006982:	f000 fa11 	bl	8006da8 <UART_WaitOnFlagUntilTimeout>
 8006986:	4603      	mov	r3, r0
 8006988:	2b00      	cmp	r3, #0
 800698a:	d001      	beq.n	8006990 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800698c:	2303      	movs	r3, #3
 800698e:	e036      	b.n	80069fe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006990:	69fb      	ldr	r3, [r7, #28]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d10b      	bne.n	80069ae <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006996:	69bb      	ldr	r3, [r7, #24]
 8006998:	881b      	ldrh	r3, [r3, #0]
 800699a:	461a      	mov	r2, r3
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80069a6:	69bb      	ldr	r3, [r7, #24]
 80069a8:	3302      	adds	r3, #2
 80069aa:	61bb      	str	r3, [r7, #24]
 80069ac:	e007      	b.n	80069be <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80069ae:	69fb      	ldr	r3, [r7, #28]
 80069b0:	781a      	ldrb	r2, [r3, #0]
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80069b8:	69fb      	ldr	r3, [r7, #28]
 80069ba:	3301      	adds	r3, #1
 80069bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	3b01      	subs	r3, #1
 80069c6:	b29a      	uxth	r2, r3
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d1cf      	bne.n	8006976 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	9300      	str	r3, [sp, #0]
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	2200      	movs	r2, #0
 80069de:	2140      	movs	r1, #64	; 0x40
 80069e0:	68f8      	ldr	r0, [r7, #12]
 80069e2:	f000 f9e1 	bl	8006da8 <UART_WaitOnFlagUntilTimeout>
 80069e6:	4603      	mov	r3, r0
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d001      	beq.n	80069f0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80069ec:	2303      	movs	r3, #3
 80069ee:	e006      	b.n	80069fe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2220      	movs	r2, #32
 80069f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80069f8:	2300      	movs	r3, #0
 80069fa:	e000      	b.n	80069fe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80069fc:	2302      	movs	r3, #2
  }
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3720      	adds	r7, #32
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}
	...

08006a08 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b08a      	sub	sp, #40	; 0x28
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	68db      	ldr	r3, [r3, #12]
 8006a1e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	695b      	ldr	r3, [r3, #20]
 8006a26:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a32:	f003 030f 	and.w	r3, r3, #15
 8006a36:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8006a38:	69bb      	ldr	r3, [r7, #24]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d10d      	bne.n	8006a5a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a40:	f003 0320 	and.w	r3, r3, #32
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d008      	beq.n	8006a5a <HAL_UART_IRQHandler+0x52>
 8006a48:	6a3b      	ldr	r3, [r7, #32]
 8006a4a:	f003 0320 	and.w	r3, r3, #32
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d003      	beq.n	8006a5a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 fa99 	bl	8006f8a <UART_Receive_IT>
      return;
 8006a58:	e17b      	b.n	8006d52 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006a5a:	69bb      	ldr	r3, [r7, #24]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	f000 80b1 	beq.w	8006bc4 <HAL_UART_IRQHandler+0x1bc>
 8006a62:	69fb      	ldr	r3, [r7, #28]
 8006a64:	f003 0301 	and.w	r3, r3, #1
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d105      	bne.n	8006a78 <HAL_UART_IRQHandler+0x70>
 8006a6c:	6a3b      	ldr	r3, [r7, #32]
 8006a6e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	f000 80a6 	beq.w	8006bc4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a7a:	f003 0301 	and.w	r3, r3, #1
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d00a      	beq.n	8006a98 <HAL_UART_IRQHandler+0x90>
 8006a82:	6a3b      	ldr	r3, [r7, #32]
 8006a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d005      	beq.n	8006a98 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a90:	f043 0201 	orr.w	r2, r3, #1
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a9a:	f003 0304 	and.w	r3, r3, #4
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d00a      	beq.n	8006ab8 <HAL_UART_IRQHandler+0xb0>
 8006aa2:	69fb      	ldr	r3, [r7, #28]
 8006aa4:	f003 0301 	and.w	r3, r3, #1
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d005      	beq.n	8006ab8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab0:	f043 0202 	orr.w	r2, r3, #2
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aba:	f003 0302 	and.w	r3, r3, #2
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d00a      	beq.n	8006ad8 <HAL_UART_IRQHandler+0xd0>
 8006ac2:	69fb      	ldr	r3, [r7, #28]
 8006ac4:	f003 0301 	and.w	r3, r3, #1
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d005      	beq.n	8006ad8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad0:	f043 0204 	orr.w	r2, r3, #4
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ada:	f003 0308 	and.w	r3, r3, #8
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d00f      	beq.n	8006b02 <HAL_UART_IRQHandler+0xfa>
 8006ae2:	6a3b      	ldr	r3, [r7, #32]
 8006ae4:	f003 0320 	and.w	r3, r3, #32
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d104      	bne.n	8006af6 <HAL_UART_IRQHandler+0xee>
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	f003 0301 	and.w	r3, r3, #1
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d005      	beq.n	8006b02 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006afa:	f043 0208 	orr.w	r2, r3, #8
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	f000 811e 	beq.w	8006d48 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0e:	f003 0320 	and.w	r3, r3, #32
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d007      	beq.n	8006b26 <HAL_UART_IRQHandler+0x11e>
 8006b16:	6a3b      	ldr	r3, [r7, #32]
 8006b18:	f003 0320 	and.w	r3, r3, #32
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d002      	beq.n	8006b26 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f000 fa32 	bl	8006f8a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	695b      	ldr	r3, [r3, #20]
 8006b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	bf14      	ite	ne
 8006b34:	2301      	movne	r3, #1
 8006b36:	2300      	moveq	r3, #0
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b40:	f003 0308 	and.w	r3, r3, #8
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d102      	bne.n	8006b4e <HAL_UART_IRQHandler+0x146>
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d031      	beq.n	8006bb2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 f974 	bl	8006e3c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	695b      	ldr	r3, [r3, #20]
 8006b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d023      	beq.n	8006baa <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	695a      	ldr	r2, [r3, #20]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b70:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d013      	beq.n	8006ba2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b7e:	4a76      	ldr	r2, [pc, #472]	; (8006d58 <HAL_UART_IRQHandler+0x350>)
 8006b80:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b86:	4618      	mov	r0, r3
 8006b88:	f7fe f8e4 	bl	8004d54 <HAL_DMA_Abort_IT>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d016      	beq.n	8006bc0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b98:	687a      	ldr	r2, [r7, #4]
 8006b9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006b9c:	4610      	mov	r0, r2
 8006b9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ba0:	e00e      	b.n	8006bc0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f000 f8ec 	bl	8006d80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ba8:	e00a      	b.n	8006bc0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f000 f8e8 	bl	8006d80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bb0:	e006      	b.n	8006bc0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 f8e4 	bl	8006d80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006bbe:	e0c3      	b.n	8006d48 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bc0:	bf00      	nop
    return;
 8006bc2:	e0c1      	b.n	8006d48 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	f040 80a1 	bne.w	8006d10 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8006bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd0:	f003 0310 	and.w	r3, r3, #16
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	f000 809b 	beq.w	8006d10 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8006bda:	6a3b      	ldr	r3, [r7, #32]
 8006bdc:	f003 0310 	and.w	r3, r3, #16
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	f000 8095 	beq.w	8006d10 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006be6:	2300      	movs	r3, #0
 8006be8:	60fb      	str	r3, [r7, #12]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	60fb      	str	r3, [r7, #12]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	60fb      	str	r3, [r7, #12]
 8006bfa:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	695b      	ldr	r3, [r3, #20]
 8006c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d04e      	beq.n	8006ca8 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8006c14:	8a3b      	ldrh	r3, [r7, #16]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	f000 8098 	beq.w	8006d4c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006c20:	8a3a      	ldrh	r2, [r7, #16]
 8006c22:	429a      	cmp	r2, r3
 8006c24:	f080 8092 	bcs.w	8006d4c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	8a3a      	ldrh	r2, [r7, #16]
 8006c2c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c32:	699b      	ldr	r3, [r3, #24]
 8006c34:	2b20      	cmp	r3, #32
 8006c36:	d02b      	beq.n	8006c90 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	68da      	ldr	r2, [r3, #12]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c46:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	695a      	ldr	r2, [r3, #20]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f022 0201 	bic.w	r2, r2, #1
 8006c56:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	695a      	ldr	r2, [r3, #20]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c66:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2220      	movs	r2, #32
 8006c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2200      	movs	r2, #0
 8006c74:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	68da      	ldr	r2, [r3, #12]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f022 0210 	bic.w	r2, r2, #16
 8006c84:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f7fe f827 	bl	8004cde <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	1ad3      	subs	r3, r2, r3
 8006c9c:	b29b      	uxth	r3, r3
 8006c9e:	4619      	mov	r1, r3
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f000 f876 	bl	8006d92 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006ca6:	e051      	b.n	8006d4c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	1ad3      	subs	r3, r2, r3
 8006cb4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d047      	beq.n	8006d50 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8006cc0:	8a7b      	ldrh	r3, [r7, #18]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d044      	beq.n	8006d50 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	68da      	ldr	r2, [r3, #12]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006cd4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	695a      	ldr	r2, [r3, #20]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f022 0201 	bic.w	r2, r2, #1
 8006ce4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2220      	movs	r2, #32
 8006cea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	68da      	ldr	r2, [r3, #12]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f022 0210 	bic.w	r2, r2, #16
 8006d02:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006d04:	8a7b      	ldrh	r3, [r7, #18]
 8006d06:	4619      	mov	r1, r3
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f000 f842 	bl	8006d92 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006d0e:	e01f      	b.n	8006d50 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d008      	beq.n	8006d2c <HAL_UART_IRQHandler+0x324>
 8006d1a:	6a3b      	ldr	r3, [r7, #32]
 8006d1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d003      	beq.n	8006d2c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f000 f8c9 	bl	8006ebc <UART_Transmit_IT>
    return;
 8006d2a:	e012      	b.n	8006d52 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d00d      	beq.n	8006d52 <HAL_UART_IRQHandler+0x34a>
 8006d36:	6a3b      	ldr	r3, [r7, #32]
 8006d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d008      	beq.n	8006d52 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f000 f90a 	bl	8006f5a <UART_EndTransmit_IT>
    return;
 8006d46:	e004      	b.n	8006d52 <HAL_UART_IRQHandler+0x34a>
    return;
 8006d48:	bf00      	nop
 8006d4a:	e002      	b.n	8006d52 <HAL_UART_IRQHandler+0x34a>
      return;
 8006d4c:	bf00      	nop
 8006d4e:	e000      	b.n	8006d52 <HAL_UART_IRQHandler+0x34a>
      return;
 8006d50:	bf00      	nop
  }
}
 8006d52:	3728      	adds	r7, #40	; 0x28
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}
 8006d58:	08006e95 	.word	0x08006e95

08006d5c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b083      	sub	sp, #12
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006d64:	bf00      	nop
 8006d66:	370c      	adds	r7, #12
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bc80      	pop	{r7}
 8006d6c:	4770      	bx	lr

08006d6e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d6e:	b480      	push	{r7}
 8006d70:	b083      	sub	sp, #12
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006d76:	bf00      	nop
 8006d78:	370c      	adds	r7, #12
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bc80      	pop	{r7}
 8006d7e:	4770      	bx	lr

08006d80 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b083      	sub	sp, #12
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006d88:	bf00      	nop
 8006d8a:	370c      	adds	r7, #12
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bc80      	pop	{r7}
 8006d90:	4770      	bx	lr

08006d92 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006d92:	b480      	push	{r7}
 8006d94:	b083      	sub	sp, #12
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	6078      	str	r0, [r7, #4]
 8006d9a:	460b      	mov	r3, r1
 8006d9c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006d9e:	bf00      	nop
 8006da0:	370c      	adds	r7, #12
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bc80      	pop	{r7}
 8006da6:	4770      	bx	lr

08006da8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b084      	sub	sp, #16
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	60f8      	str	r0, [r7, #12]
 8006db0:	60b9      	str	r1, [r7, #8]
 8006db2:	603b      	str	r3, [r7, #0]
 8006db4:	4613      	mov	r3, r2
 8006db6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006db8:	e02c      	b.n	8006e14 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dba:	69bb      	ldr	r3, [r7, #24]
 8006dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dc0:	d028      	beq.n	8006e14 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006dc2:	69bb      	ldr	r3, [r7, #24]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d007      	beq.n	8006dd8 <UART_WaitOnFlagUntilTimeout+0x30>
 8006dc8:	f7fd f9d2 	bl	8004170 <HAL_GetTick>
 8006dcc:	4602      	mov	r2, r0
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	1ad3      	subs	r3, r2, r3
 8006dd2:	69ba      	ldr	r2, [r7, #24]
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	d21d      	bcs.n	8006e14 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	68da      	ldr	r2, [r3, #12]
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006de6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	695a      	ldr	r2, [r3, #20]
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f022 0201 	bic.w	r2, r2, #1
 8006df6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2220      	movs	r2, #32
 8006dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2220      	movs	r2, #32
 8006e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006e10:	2303      	movs	r3, #3
 8006e12:	e00f      	b.n	8006e34 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	681a      	ldr	r2, [r3, #0]
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	4013      	ands	r3, r2
 8006e1e:	68ba      	ldr	r2, [r7, #8]
 8006e20:	429a      	cmp	r2, r3
 8006e22:	bf0c      	ite	eq
 8006e24:	2301      	moveq	r3, #1
 8006e26:	2300      	movne	r3, #0
 8006e28:	b2db      	uxtb	r3, r3
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	79fb      	ldrb	r3, [r7, #7]
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	d0c3      	beq.n	8006dba <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006e32:	2300      	movs	r3, #0
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	3710      	adds	r7, #16
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}

08006e3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b083      	sub	sp, #12
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	68da      	ldr	r2, [r3, #12]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006e52:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	695a      	ldr	r2, [r3, #20]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f022 0201 	bic.w	r2, r2, #1
 8006e62:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d107      	bne.n	8006e7c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	68da      	ldr	r2, [r3, #12]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f022 0210 	bic.w	r2, r2, #16
 8006e7a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2220      	movs	r2, #32
 8006e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2200      	movs	r2, #0
 8006e88:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006e8a:	bf00      	nop
 8006e8c:	370c      	adds	r7, #12
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bc80      	pop	{r7}
 8006e92:	4770      	bx	lr

08006e94 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b084      	sub	sp, #16
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006eae:	68f8      	ldr	r0, [r7, #12]
 8006eb0:	f7ff ff66 	bl	8006d80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006eb4:	bf00      	nop
 8006eb6:	3710      	adds	r7, #16
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b085      	sub	sp, #20
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006eca:	b2db      	uxtb	r3, r3
 8006ecc:	2b21      	cmp	r3, #33	; 0x21
 8006ece:	d13e      	bne.n	8006f4e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ed8:	d114      	bne.n	8006f04 <UART_Transmit_IT+0x48>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	691b      	ldr	r3, [r3, #16]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d110      	bne.n	8006f04 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6a1b      	ldr	r3, [r3, #32]
 8006ee6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	881b      	ldrh	r3, [r3, #0]
 8006eec:	461a      	mov	r2, r3
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ef6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6a1b      	ldr	r3, [r3, #32]
 8006efc:	1c9a      	adds	r2, r3, #2
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	621a      	str	r2, [r3, #32]
 8006f02:	e008      	b.n	8006f16 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6a1b      	ldr	r3, [r3, #32]
 8006f08:	1c59      	adds	r1, r3, #1
 8006f0a:	687a      	ldr	r2, [r7, #4]
 8006f0c:	6211      	str	r1, [r2, #32]
 8006f0e:	781a      	ldrb	r2, [r3, #0]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	3b01      	subs	r3, #1
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	687a      	ldr	r2, [r7, #4]
 8006f22:	4619      	mov	r1, r3
 8006f24:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d10f      	bne.n	8006f4a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	68da      	ldr	r2, [r3, #12]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f38:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	68da      	ldr	r2, [r3, #12]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f48:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	e000      	b.n	8006f50 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006f4e:	2302      	movs	r3, #2
  }
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3714      	adds	r7, #20
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bc80      	pop	{r7}
 8006f58:	4770      	bx	lr

08006f5a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f5a:	b580      	push	{r7, lr}
 8006f5c:	b082      	sub	sp, #8
 8006f5e:	af00      	add	r7, sp, #0
 8006f60:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	68da      	ldr	r2, [r3, #12]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f70:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2220      	movs	r2, #32
 8006f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f7ff feee 	bl	8006d5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006f80:	2300      	movs	r3, #0
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3708      	adds	r7, #8
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}

08006f8a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006f8a:	b580      	push	{r7, lr}
 8006f8c:	b086      	sub	sp, #24
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f98:	b2db      	uxtb	r3, r3
 8006f9a:	2b22      	cmp	r3, #34	; 0x22
 8006f9c:	f040 8099 	bne.w	80070d2 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	689b      	ldr	r3, [r3, #8]
 8006fa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fa8:	d117      	bne.n	8006fda <UART_Receive_IT+0x50>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	691b      	ldr	r3, [r3, #16]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d113      	bne.n	8006fda <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fba:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fc8:	b29a      	uxth	r2, r3
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fd2:	1c9a      	adds	r2, r3, #2
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	629a      	str	r2, [r3, #40]	; 0x28
 8006fd8:	e026      	b.n	8007028 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fde:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fec:	d007      	beq.n	8006ffe <UART_Receive_IT+0x74>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d10a      	bne.n	800700c <UART_Receive_IT+0x82>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	691b      	ldr	r3, [r3, #16]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d106      	bne.n	800700c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	b2da      	uxtb	r2, r3
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	701a      	strb	r2, [r3, #0]
 800700a:	e008      	b.n	800701e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	b2db      	uxtb	r3, r3
 8007014:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007018:	b2da      	uxtb	r2, r3
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007022:	1c5a      	adds	r2, r3, #1
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800702c:	b29b      	uxth	r3, r3
 800702e:	3b01      	subs	r3, #1
 8007030:	b29b      	uxth	r3, r3
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	4619      	mov	r1, r3
 8007036:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007038:	2b00      	cmp	r3, #0
 800703a:	d148      	bne.n	80070ce <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	68da      	ldr	r2, [r3, #12]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f022 0220 	bic.w	r2, r2, #32
 800704a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	68da      	ldr	r2, [r3, #12]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800705a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	695a      	ldr	r2, [r3, #20]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f022 0201 	bic.w	r2, r2, #1
 800706a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2220      	movs	r2, #32
 8007070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007078:	2b01      	cmp	r3, #1
 800707a:	d123      	bne.n	80070c4 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2200      	movs	r2, #0
 8007080:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	68da      	ldr	r2, [r3, #12]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f022 0210 	bic.w	r2, r2, #16
 8007090:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f003 0310 	and.w	r3, r3, #16
 800709c:	2b10      	cmp	r3, #16
 800709e:	d10a      	bne.n	80070b6 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80070a0:	2300      	movs	r3, #0
 80070a2:	60fb      	str	r3, [r7, #12]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	60fb      	str	r3, [r7, #12]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	60fb      	str	r3, [r7, #12]
 80070b4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80070ba:	4619      	mov	r1, r3
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f7ff fe68 	bl	8006d92 <HAL_UARTEx_RxEventCallback>
 80070c2:	e002      	b.n	80070ca <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f7ff fe52 	bl	8006d6e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80070ca:	2300      	movs	r3, #0
 80070cc:	e002      	b.n	80070d4 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80070ce:	2300      	movs	r3, #0
 80070d0:	e000      	b.n	80070d4 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80070d2:	2302      	movs	r3, #2
  }
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3718      	adds	r7, #24
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}

080070dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b084      	sub	sp, #16
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	691b      	ldr	r3, [r3, #16]
 80070ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	68da      	ldr	r2, [r3, #12]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	430a      	orrs	r2, r1
 80070f8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	689a      	ldr	r2, [r3, #8]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	691b      	ldr	r3, [r3, #16]
 8007102:	431a      	orrs	r2, r3
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	695b      	ldr	r3, [r3, #20]
 8007108:	4313      	orrs	r3, r2
 800710a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	68db      	ldr	r3, [r3, #12]
 8007112:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007116:	f023 030c 	bic.w	r3, r3, #12
 800711a:	687a      	ldr	r2, [r7, #4]
 800711c:	6812      	ldr	r2, [r2, #0]
 800711e:	68b9      	ldr	r1, [r7, #8]
 8007120:	430b      	orrs	r3, r1
 8007122:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	695b      	ldr	r3, [r3, #20]
 800712a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	699a      	ldr	r2, [r3, #24]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	430a      	orrs	r2, r1
 8007138:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a2c      	ldr	r2, [pc, #176]	; (80071f0 <UART_SetConfig+0x114>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d103      	bne.n	800714c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007144:	f7fe fd4c 	bl	8005be0 <HAL_RCC_GetPCLK2Freq>
 8007148:	60f8      	str	r0, [r7, #12]
 800714a:	e002      	b.n	8007152 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800714c:	f7fe fd34 	bl	8005bb8 <HAL_RCC_GetPCLK1Freq>
 8007150:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007152:	68fa      	ldr	r2, [r7, #12]
 8007154:	4613      	mov	r3, r2
 8007156:	009b      	lsls	r3, r3, #2
 8007158:	4413      	add	r3, r2
 800715a:	009a      	lsls	r2, r3, #2
 800715c:	441a      	add	r2, r3
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	009b      	lsls	r3, r3, #2
 8007164:	fbb2 f3f3 	udiv	r3, r2, r3
 8007168:	4a22      	ldr	r2, [pc, #136]	; (80071f4 <UART_SetConfig+0x118>)
 800716a:	fba2 2303 	umull	r2, r3, r2, r3
 800716e:	095b      	lsrs	r3, r3, #5
 8007170:	0119      	lsls	r1, r3, #4
 8007172:	68fa      	ldr	r2, [r7, #12]
 8007174:	4613      	mov	r3, r2
 8007176:	009b      	lsls	r3, r3, #2
 8007178:	4413      	add	r3, r2
 800717a:	009a      	lsls	r2, r3, #2
 800717c:	441a      	add	r2, r3
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	009b      	lsls	r3, r3, #2
 8007184:	fbb2 f2f3 	udiv	r2, r2, r3
 8007188:	4b1a      	ldr	r3, [pc, #104]	; (80071f4 <UART_SetConfig+0x118>)
 800718a:	fba3 0302 	umull	r0, r3, r3, r2
 800718e:	095b      	lsrs	r3, r3, #5
 8007190:	2064      	movs	r0, #100	; 0x64
 8007192:	fb00 f303 	mul.w	r3, r0, r3
 8007196:	1ad3      	subs	r3, r2, r3
 8007198:	011b      	lsls	r3, r3, #4
 800719a:	3332      	adds	r3, #50	; 0x32
 800719c:	4a15      	ldr	r2, [pc, #84]	; (80071f4 <UART_SetConfig+0x118>)
 800719e:	fba2 2303 	umull	r2, r3, r2, r3
 80071a2:	095b      	lsrs	r3, r3, #5
 80071a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80071a8:	4419      	add	r1, r3
 80071aa:	68fa      	ldr	r2, [r7, #12]
 80071ac:	4613      	mov	r3, r2
 80071ae:	009b      	lsls	r3, r3, #2
 80071b0:	4413      	add	r3, r2
 80071b2:	009a      	lsls	r2, r3, #2
 80071b4:	441a      	add	r2, r3
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	009b      	lsls	r3, r3, #2
 80071bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80071c0:	4b0c      	ldr	r3, [pc, #48]	; (80071f4 <UART_SetConfig+0x118>)
 80071c2:	fba3 0302 	umull	r0, r3, r3, r2
 80071c6:	095b      	lsrs	r3, r3, #5
 80071c8:	2064      	movs	r0, #100	; 0x64
 80071ca:	fb00 f303 	mul.w	r3, r0, r3
 80071ce:	1ad3      	subs	r3, r2, r3
 80071d0:	011b      	lsls	r3, r3, #4
 80071d2:	3332      	adds	r3, #50	; 0x32
 80071d4:	4a07      	ldr	r2, [pc, #28]	; (80071f4 <UART_SetConfig+0x118>)
 80071d6:	fba2 2303 	umull	r2, r3, r2, r3
 80071da:	095b      	lsrs	r3, r3, #5
 80071dc:	f003 020f 	and.w	r2, r3, #15
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	440a      	add	r2, r1
 80071e6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80071e8:	bf00      	nop
 80071ea:	3710      	adds	r7, #16
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}
 80071f0:	40013800 	.word	0x40013800
 80071f4:	51eb851f 	.word	0x51eb851f

080071f8 <pow>:
 80071f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071fc:	4614      	mov	r4, r2
 80071fe:	461d      	mov	r5, r3
 8007200:	4680      	mov	r8, r0
 8007202:	4689      	mov	r9, r1
 8007204:	f000 f860 	bl	80072c8 <__ieee754_pow>
 8007208:	4622      	mov	r2, r4
 800720a:	4606      	mov	r6, r0
 800720c:	460f      	mov	r7, r1
 800720e:	462b      	mov	r3, r5
 8007210:	4620      	mov	r0, r4
 8007212:	4629      	mov	r1, r5
 8007214:	f7f9 fbf2 	bl	80009fc <__aeabi_dcmpun>
 8007218:	bbc8      	cbnz	r0, 800728e <pow+0x96>
 800721a:	2200      	movs	r2, #0
 800721c:	2300      	movs	r3, #0
 800721e:	4640      	mov	r0, r8
 8007220:	4649      	mov	r1, r9
 8007222:	f7f9 fbb9 	bl	8000998 <__aeabi_dcmpeq>
 8007226:	b1b8      	cbz	r0, 8007258 <pow+0x60>
 8007228:	2200      	movs	r2, #0
 800722a:	2300      	movs	r3, #0
 800722c:	4620      	mov	r0, r4
 800722e:	4629      	mov	r1, r5
 8007230:	f7f9 fbb2 	bl	8000998 <__aeabi_dcmpeq>
 8007234:	2800      	cmp	r0, #0
 8007236:	d141      	bne.n	80072bc <pow+0xc4>
 8007238:	4620      	mov	r0, r4
 800723a:	4629      	mov	r1, r5
 800723c:	f000 fe39 	bl	8007eb2 <finite>
 8007240:	b328      	cbz	r0, 800728e <pow+0x96>
 8007242:	2200      	movs	r2, #0
 8007244:	2300      	movs	r3, #0
 8007246:	4620      	mov	r0, r4
 8007248:	4629      	mov	r1, r5
 800724a:	f7f9 fbaf 	bl	80009ac <__aeabi_dcmplt>
 800724e:	b1f0      	cbz	r0, 800728e <pow+0x96>
 8007250:	f000 feb4 	bl	8007fbc <__errno>
 8007254:	2322      	movs	r3, #34	; 0x22
 8007256:	e019      	b.n	800728c <pow+0x94>
 8007258:	4630      	mov	r0, r6
 800725a:	4639      	mov	r1, r7
 800725c:	f000 fe29 	bl	8007eb2 <finite>
 8007260:	b9c8      	cbnz	r0, 8007296 <pow+0x9e>
 8007262:	4640      	mov	r0, r8
 8007264:	4649      	mov	r1, r9
 8007266:	f000 fe24 	bl	8007eb2 <finite>
 800726a:	b1a0      	cbz	r0, 8007296 <pow+0x9e>
 800726c:	4620      	mov	r0, r4
 800726e:	4629      	mov	r1, r5
 8007270:	f000 fe1f 	bl	8007eb2 <finite>
 8007274:	b178      	cbz	r0, 8007296 <pow+0x9e>
 8007276:	4632      	mov	r2, r6
 8007278:	463b      	mov	r3, r7
 800727a:	4630      	mov	r0, r6
 800727c:	4639      	mov	r1, r7
 800727e:	f7f9 fbbd 	bl	80009fc <__aeabi_dcmpun>
 8007282:	2800      	cmp	r0, #0
 8007284:	d0e4      	beq.n	8007250 <pow+0x58>
 8007286:	f000 fe99 	bl	8007fbc <__errno>
 800728a:	2321      	movs	r3, #33	; 0x21
 800728c:	6003      	str	r3, [r0, #0]
 800728e:	4630      	mov	r0, r6
 8007290:	4639      	mov	r1, r7
 8007292:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007296:	2200      	movs	r2, #0
 8007298:	2300      	movs	r3, #0
 800729a:	4630      	mov	r0, r6
 800729c:	4639      	mov	r1, r7
 800729e:	f7f9 fb7b 	bl	8000998 <__aeabi_dcmpeq>
 80072a2:	2800      	cmp	r0, #0
 80072a4:	d0f3      	beq.n	800728e <pow+0x96>
 80072a6:	4640      	mov	r0, r8
 80072a8:	4649      	mov	r1, r9
 80072aa:	f000 fe02 	bl	8007eb2 <finite>
 80072ae:	2800      	cmp	r0, #0
 80072b0:	d0ed      	beq.n	800728e <pow+0x96>
 80072b2:	4620      	mov	r0, r4
 80072b4:	4629      	mov	r1, r5
 80072b6:	f000 fdfc 	bl	8007eb2 <finite>
 80072ba:	e7c8      	b.n	800724e <pow+0x56>
 80072bc:	2600      	movs	r6, #0
 80072be:	4f01      	ldr	r7, [pc, #4]	; (80072c4 <pow+0xcc>)
 80072c0:	e7e5      	b.n	800728e <pow+0x96>
 80072c2:	bf00      	nop
 80072c4:	3ff00000 	.word	0x3ff00000

080072c8 <__ieee754_pow>:
 80072c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072cc:	b093      	sub	sp, #76	; 0x4c
 80072ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80072d2:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 80072d6:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 80072da:	4689      	mov	r9, r1
 80072dc:	ea56 0102 	orrs.w	r1, r6, r2
 80072e0:	4680      	mov	r8, r0
 80072e2:	d111      	bne.n	8007308 <__ieee754_pow+0x40>
 80072e4:	1803      	adds	r3, r0, r0
 80072e6:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 80072ea:	4152      	adcs	r2, r2
 80072ec:	4299      	cmp	r1, r3
 80072ee:	4b82      	ldr	r3, [pc, #520]	; (80074f8 <__ieee754_pow+0x230>)
 80072f0:	4193      	sbcs	r3, r2
 80072f2:	f080 84b9 	bcs.w	8007c68 <__ieee754_pow+0x9a0>
 80072f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80072fa:	4640      	mov	r0, r8
 80072fc:	4649      	mov	r1, r9
 80072fe:	f7f8 ff2d 	bl	800015c <__adddf3>
 8007302:	4683      	mov	fp, r0
 8007304:	468c      	mov	ip, r1
 8007306:	e06f      	b.n	80073e8 <__ieee754_pow+0x120>
 8007308:	4b7c      	ldr	r3, [pc, #496]	; (80074fc <__ieee754_pow+0x234>)
 800730a:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 800730e:	429c      	cmp	r4, r3
 8007310:	464d      	mov	r5, r9
 8007312:	4682      	mov	sl, r0
 8007314:	dc06      	bgt.n	8007324 <__ieee754_pow+0x5c>
 8007316:	d101      	bne.n	800731c <__ieee754_pow+0x54>
 8007318:	2800      	cmp	r0, #0
 800731a:	d1ec      	bne.n	80072f6 <__ieee754_pow+0x2e>
 800731c:	429e      	cmp	r6, r3
 800731e:	dc01      	bgt.n	8007324 <__ieee754_pow+0x5c>
 8007320:	d10f      	bne.n	8007342 <__ieee754_pow+0x7a>
 8007322:	b172      	cbz	r2, 8007342 <__ieee754_pow+0x7a>
 8007324:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8007328:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800732c:	ea55 050a 	orrs.w	r5, r5, sl
 8007330:	d1e1      	bne.n	80072f6 <__ieee754_pow+0x2e>
 8007332:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007336:	18db      	adds	r3, r3, r3
 8007338:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800733c:	4152      	adcs	r2, r2
 800733e:	429d      	cmp	r5, r3
 8007340:	e7d5      	b.n	80072ee <__ieee754_pow+0x26>
 8007342:	2d00      	cmp	r5, #0
 8007344:	da39      	bge.n	80073ba <__ieee754_pow+0xf2>
 8007346:	4b6e      	ldr	r3, [pc, #440]	; (8007500 <__ieee754_pow+0x238>)
 8007348:	429e      	cmp	r6, r3
 800734a:	dc52      	bgt.n	80073f2 <__ieee754_pow+0x12a>
 800734c:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8007350:	429e      	cmp	r6, r3
 8007352:	f340 849c 	ble.w	8007c8e <__ieee754_pow+0x9c6>
 8007356:	1533      	asrs	r3, r6, #20
 8007358:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800735c:	2b14      	cmp	r3, #20
 800735e:	dd0f      	ble.n	8007380 <__ieee754_pow+0xb8>
 8007360:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8007364:	fa22 f103 	lsr.w	r1, r2, r3
 8007368:	fa01 f303 	lsl.w	r3, r1, r3
 800736c:	4293      	cmp	r3, r2
 800736e:	f040 848e 	bne.w	8007c8e <__ieee754_pow+0x9c6>
 8007372:	f001 0101 	and.w	r1, r1, #1
 8007376:	f1c1 0302 	rsb	r3, r1, #2
 800737a:	9300      	str	r3, [sp, #0]
 800737c:	b182      	cbz	r2, 80073a0 <__ieee754_pow+0xd8>
 800737e:	e05d      	b.n	800743c <__ieee754_pow+0x174>
 8007380:	2a00      	cmp	r2, #0
 8007382:	d159      	bne.n	8007438 <__ieee754_pow+0x170>
 8007384:	f1c3 0314 	rsb	r3, r3, #20
 8007388:	fa46 f103 	asr.w	r1, r6, r3
 800738c:	fa01 f303 	lsl.w	r3, r1, r3
 8007390:	42b3      	cmp	r3, r6
 8007392:	f040 8479 	bne.w	8007c88 <__ieee754_pow+0x9c0>
 8007396:	f001 0101 	and.w	r1, r1, #1
 800739a:	f1c1 0302 	rsb	r3, r1, #2
 800739e:	9300      	str	r3, [sp, #0]
 80073a0:	4b58      	ldr	r3, [pc, #352]	; (8007504 <__ieee754_pow+0x23c>)
 80073a2:	429e      	cmp	r6, r3
 80073a4:	d132      	bne.n	800740c <__ieee754_pow+0x144>
 80073a6:	2f00      	cmp	r7, #0
 80073a8:	f280 846a 	bge.w	8007c80 <__ieee754_pow+0x9b8>
 80073ac:	4642      	mov	r2, r8
 80073ae:	464b      	mov	r3, r9
 80073b0:	2000      	movs	r0, #0
 80073b2:	4954      	ldr	r1, [pc, #336]	; (8007504 <__ieee754_pow+0x23c>)
 80073b4:	f7f9 f9b2 	bl	800071c <__aeabi_ddiv>
 80073b8:	e7a3      	b.n	8007302 <__ieee754_pow+0x3a>
 80073ba:	2300      	movs	r3, #0
 80073bc:	9300      	str	r3, [sp, #0]
 80073be:	2a00      	cmp	r2, #0
 80073c0:	d13c      	bne.n	800743c <__ieee754_pow+0x174>
 80073c2:	4b4e      	ldr	r3, [pc, #312]	; (80074fc <__ieee754_pow+0x234>)
 80073c4:	429e      	cmp	r6, r3
 80073c6:	d1eb      	bne.n	80073a0 <__ieee754_pow+0xd8>
 80073c8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80073cc:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80073d0:	ea53 030a 	orrs.w	r3, r3, sl
 80073d4:	f000 8448 	beq.w	8007c68 <__ieee754_pow+0x9a0>
 80073d8:	4b4b      	ldr	r3, [pc, #300]	; (8007508 <__ieee754_pow+0x240>)
 80073da:	429c      	cmp	r4, r3
 80073dc:	dd0b      	ble.n	80073f6 <__ieee754_pow+0x12e>
 80073de:	2f00      	cmp	r7, #0
 80073e0:	f2c0 8448 	blt.w	8007c74 <__ieee754_pow+0x9ac>
 80073e4:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 80073e8:	4658      	mov	r0, fp
 80073ea:	4661      	mov	r1, ip
 80073ec:	b013      	add	sp, #76	; 0x4c
 80073ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073f2:	2302      	movs	r3, #2
 80073f4:	e7e2      	b.n	80073bc <__ieee754_pow+0xf4>
 80073f6:	2f00      	cmp	r7, #0
 80073f8:	f04f 0b00 	mov.w	fp, #0
 80073fc:	f04f 0c00 	mov.w	ip, #0
 8007400:	daf2      	bge.n	80073e8 <__ieee754_pow+0x120>
 8007402:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8007406:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800740a:	e7ed      	b.n	80073e8 <__ieee754_pow+0x120>
 800740c:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8007410:	d106      	bne.n	8007420 <__ieee754_pow+0x158>
 8007412:	4642      	mov	r2, r8
 8007414:	464b      	mov	r3, r9
 8007416:	4640      	mov	r0, r8
 8007418:	4649      	mov	r1, r9
 800741a:	f7f9 f855 	bl	80004c8 <__aeabi_dmul>
 800741e:	e770      	b.n	8007302 <__ieee754_pow+0x3a>
 8007420:	4b3a      	ldr	r3, [pc, #232]	; (800750c <__ieee754_pow+0x244>)
 8007422:	429f      	cmp	r7, r3
 8007424:	d10a      	bne.n	800743c <__ieee754_pow+0x174>
 8007426:	2d00      	cmp	r5, #0
 8007428:	db08      	blt.n	800743c <__ieee754_pow+0x174>
 800742a:	4640      	mov	r0, r8
 800742c:	4649      	mov	r1, r9
 800742e:	b013      	add	sp, #76	; 0x4c
 8007430:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007434:	f000 bc5e 	b.w	8007cf4 <__ieee754_sqrt>
 8007438:	2300      	movs	r3, #0
 800743a:	9300      	str	r3, [sp, #0]
 800743c:	4640      	mov	r0, r8
 800743e:	4649      	mov	r1, r9
 8007440:	f000 fd34 	bl	8007eac <fabs>
 8007444:	4683      	mov	fp, r0
 8007446:	468c      	mov	ip, r1
 8007448:	f1ba 0f00 	cmp.w	sl, #0
 800744c:	d128      	bne.n	80074a0 <__ieee754_pow+0x1d8>
 800744e:	b124      	cbz	r4, 800745a <__ieee754_pow+0x192>
 8007450:	4b2c      	ldr	r3, [pc, #176]	; (8007504 <__ieee754_pow+0x23c>)
 8007452:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8007456:	429a      	cmp	r2, r3
 8007458:	d122      	bne.n	80074a0 <__ieee754_pow+0x1d8>
 800745a:	2f00      	cmp	r7, #0
 800745c:	da07      	bge.n	800746e <__ieee754_pow+0x1a6>
 800745e:	465a      	mov	r2, fp
 8007460:	4663      	mov	r3, ip
 8007462:	2000      	movs	r0, #0
 8007464:	4927      	ldr	r1, [pc, #156]	; (8007504 <__ieee754_pow+0x23c>)
 8007466:	f7f9 f959 	bl	800071c <__aeabi_ddiv>
 800746a:	4683      	mov	fp, r0
 800746c:	468c      	mov	ip, r1
 800746e:	2d00      	cmp	r5, #0
 8007470:	daba      	bge.n	80073e8 <__ieee754_pow+0x120>
 8007472:	9b00      	ldr	r3, [sp, #0]
 8007474:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007478:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800747c:	4323      	orrs	r3, r4
 800747e:	d108      	bne.n	8007492 <__ieee754_pow+0x1ca>
 8007480:	465a      	mov	r2, fp
 8007482:	4663      	mov	r3, ip
 8007484:	4658      	mov	r0, fp
 8007486:	4661      	mov	r1, ip
 8007488:	f7f8 fe66 	bl	8000158 <__aeabi_dsub>
 800748c:	4602      	mov	r2, r0
 800748e:	460b      	mov	r3, r1
 8007490:	e790      	b.n	80073b4 <__ieee754_pow+0xec>
 8007492:	9b00      	ldr	r3, [sp, #0]
 8007494:	2b01      	cmp	r3, #1
 8007496:	d1a7      	bne.n	80073e8 <__ieee754_pow+0x120>
 8007498:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800749c:	469c      	mov	ip, r3
 800749e:	e7a3      	b.n	80073e8 <__ieee754_pow+0x120>
 80074a0:	0feb      	lsrs	r3, r5, #31
 80074a2:	3b01      	subs	r3, #1
 80074a4:	930c      	str	r3, [sp, #48]	; 0x30
 80074a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80074a8:	9b00      	ldr	r3, [sp, #0]
 80074aa:	4313      	orrs	r3, r2
 80074ac:	d104      	bne.n	80074b8 <__ieee754_pow+0x1f0>
 80074ae:	4642      	mov	r2, r8
 80074b0:	464b      	mov	r3, r9
 80074b2:	4640      	mov	r0, r8
 80074b4:	4649      	mov	r1, r9
 80074b6:	e7e7      	b.n	8007488 <__ieee754_pow+0x1c0>
 80074b8:	4b15      	ldr	r3, [pc, #84]	; (8007510 <__ieee754_pow+0x248>)
 80074ba:	429e      	cmp	r6, r3
 80074bc:	f340 80f6 	ble.w	80076ac <__ieee754_pow+0x3e4>
 80074c0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80074c4:	429e      	cmp	r6, r3
 80074c6:	4b10      	ldr	r3, [pc, #64]	; (8007508 <__ieee754_pow+0x240>)
 80074c8:	dd09      	ble.n	80074de <__ieee754_pow+0x216>
 80074ca:	429c      	cmp	r4, r3
 80074cc:	dc0c      	bgt.n	80074e8 <__ieee754_pow+0x220>
 80074ce:	2f00      	cmp	r7, #0
 80074d0:	da0c      	bge.n	80074ec <__ieee754_pow+0x224>
 80074d2:	2000      	movs	r0, #0
 80074d4:	b013      	add	sp, #76	; 0x4c
 80074d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074da:	f000 bce2 	b.w	8007ea2 <__math_oflow>
 80074de:	429c      	cmp	r4, r3
 80074e0:	dbf5      	blt.n	80074ce <__ieee754_pow+0x206>
 80074e2:	4b08      	ldr	r3, [pc, #32]	; (8007504 <__ieee754_pow+0x23c>)
 80074e4:	429c      	cmp	r4, r3
 80074e6:	dd15      	ble.n	8007514 <__ieee754_pow+0x24c>
 80074e8:	2f00      	cmp	r7, #0
 80074ea:	dcf2      	bgt.n	80074d2 <__ieee754_pow+0x20a>
 80074ec:	2000      	movs	r0, #0
 80074ee:	b013      	add	sp, #76	; 0x4c
 80074f0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074f4:	f000 bcd0 	b.w	8007e98 <__math_uflow>
 80074f8:	fff00000 	.word	0xfff00000
 80074fc:	7ff00000 	.word	0x7ff00000
 8007500:	433fffff 	.word	0x433fffff
 8007504:	3ff00000 	.word	0x3ff00000
 8007508:	3fefffff 	.word	0x3fefffff
 800750c:	3fe00000 	.word	0x3fe00000
 8007510:	41e00000 	.word	0x41e00000
 8007514:	4661      	mov	r1, ip
 8007516:	2200      	movs	r2, #0
 8007518:	4658      	mov	r0, fp
 800751a:	4b5f      	ldr	r3, [pc, #380]	; (8007698 <__ieee754_pow+0x3d0>)
 800751c:	f7f8 fe1c 	bl	8000158 <__aeabi_dsub>
 8007520:	a355      	add	r3, pc, #340	; (adr r3, 8007678 <__ieee754_pow+0x3b0>)
 8007522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007526:	4604      	mov	r4, r0
 8007528:	460d      	mov	r5, r1
 800752a:	f7f8 ffcd 	bl	80004c8 <__aeabi_dmul>
 800752e:	a354      	add	r3, pc, #336	; (adr r3, 8007680 <__ieee754_pow+0x3b8>)
 8007530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007534:	4606      	mov	r6, r0
 8007536:	460f      	mov	r7, r1
 8007538:	4620      	mov	r0, r4
 800753a:	4629      	mov	r1, r5
 800753c:	f7f8 ffc4 	bl	80004c8 <__aeabi_dmul>
 8007540:	2200      	movs	r2, #0
 8007542:	4682      	mov	sl, r0
 8007544:	468b      	mov	fp, r1
 8007546:	4620      	mov	r0, r4
 8007548:	4629      	mov	r1, r5
 800754a:	4b54      	ldr	r3, [pc, #336]	; (800769c <__ieee754_pow+0x3d4>)
 800754c:	f7f8 ffbc 	bl	80004c8 <__aeabi_dmul>
 8007550:	4602      	mov	r2, r0
 8007552:	460b      	mov	r3, r1
 8007554:	a14c      	add	r1, pc, #304	; (adr r1, 8007688 <__ieee754_pow+0x3c0>)
 8007556:	e9d1 0100 	ldrd	r0, r1, [r1]
 800755a:	f7f8 fdfd 	bl	8000158 <__aeabi_dsub>
 800755e:	4622      	mov	r2, r4
 8007560:	462b      	mov	r3, r5
 8007562:	f7f8 ffb1 	bl	80004c8 <__aeabi_dmul>
 8007566:	4602      	mov	r2, r0
 8007568:	460b      	mov	r3, r1
 800756a:	2000      	movs	r0, #0
 800756c:	494c      	ldr	r1, [pc, #304]	; (80076a0 <__ieee754_pow+0x3d8>)
 800756e:	f7f8 fdf3 	bl	8000158 <__aeabi_dsub>
 8007572:	4622      	mov	r2, r4
 8007574:	462b      	mov	r3, r5
 8007576:	4680      	mov	r8, r0
 8007578:	4689      	mov	r9, r1
 800757a:	4620      	mov	r0, r4
 800757c:	4629      	mov	r1, r5
 800757e:	f7f8 ffa3 	bl	80004c8 <__aeabi_dmul>
 8007582:	4602      	mov	r2, r0
 8007584:	460b      	mov	r3, r1
 8007586:	4640      	mov	r0, r8
 8007588:	4649      	mov	r1, r9
 800758a:	f7f8 ff9d 	bl	80004c8 <__aeabi_dmul>
 800758e:	a340      	add	r3, pc, #256	; (adr r3, 8007690 <__ieee754_pow+0x3c8>)
 8007590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007594:	f7f8 ff98 	bl	80004c8 <__aeabi_dmul>
 8007598:	4602      	mov	r2, r0
 800759a:	460b      	mov	r3, r1
 800759c:	4650      	mov	r0, sl
 800759e:	4659      	mov	r1, fp
 80075a0:	f7f8 fdda 	bl	8000158 <__aeabi_dsub>
 80075a4:	f04f 0a00 	mov.w	sl, #0
 80075a8:	4602      	mov	r2, r0
 80075aa:	460b      	mov	r3, r1
 80075ac:	4604      	mov	r4, r0
 80075ae:	460d      	mov	r5, r1
 80075b0:	4630      	mov	r0, r6
 80075b2:	4639      	mov	r1, r7
 80075b4:	f7f8 fdd2 	bl	800015c <__adddf3>
 80075b8:	4632      	mov	r2, r6
 80075ba:	463b      	mov	r3, r7
 80075bc:	4650      	mov	r0, sl
 80075be:	468b      	mov	fp, r1
 80075c0:	f7f8 fdca 	bl	8000158 <__aeabi_dsub>
 80075c4:	4602      	mov	r2, r0
 80075c6:	460b      	mov	r3, r1
 80075c8:	4620      	mov	r0, r4
 80075ca:	4629      	mov	r1, r5
 80075cc:	f7f8 fdc4 	bl	8000158 <__aeabi_dsub>
 80075d0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80075d4:	9b00      	ldr	r3, [sp, #0]
 80075d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80075d8:	3b01      	subs	r3, #1
 80075da:	4313      	orrs	r3, r2
 80075dc:	f04f 0600 	mov.w	r6, #0
 80075e0:	f04f 0200 	mov.w	r2, #0
 80075e4:	bf0c      	ite	eq
 80075e6:	4b2f      	ldreq	r3, [pc, #188]	; (80076a4 <__ieee754_pow+0x3dc>)
 80075e8:	4b2b      	ldrne	r3, [pc, #172]	; (8007698 <__ieee754_pow+0x3d0>)
 80075ea:	4604      	mov	r4, r0
 80075ec:	460d      	mov	r5, r1
 80075ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075f2:	e9cd 2300 	strd	r2, r3, [sp]
 80075f6:	4632      	mov	r2, r6
 80075f8:	463b      	mov	r3, r7
 80075fa:	f7f8 fdad 	bl	8000158 <__aeabi_dsub>
 80075fe:	4652      	mov	r2, sl
 8007600:	465b      	mov	r3, fp
 8007602:	f7f8 ff61 	bl	80004c8 <__aeabi_dmul>
 8007606:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800760a:	4680      	mov	r8, r0
 800760c:	4689      	mov	r9, r1
 800760e:	4620      	mov	r0, r4
 8007610:	4629      	mov	r1, r5
 8007612:	f7f8 ff59 	bl	80004c8 <__aeabi_dmul>
 8007616:	4602      	mov	r2, r0
 8007618:	460b      	mov	r3, r1
 800761a:	4640      	mov	r0, r8
 800761c:	4649      	mov	r1, r9
 800761e:	f7f8 fd9d 	bl	800015c <__adddf3>
 8007622:	4632      	mov	r2, r6
 8007624:	463b      	mov	r3, r7
 8007626:	4680      	mov	r8, r0
 8007628:	4689      	mov	r9, r1
 800762a:	4650      	mov	r0, sl
 800762c:	4659      	mov	r1, fp
 800762e:	f7f8 ff4b 	bl	80004c8 <__aeabi_dmul>
 8007632:	4604      	mov	r4, r0
 8007634:	460d      	mov	r5, r1
 8007636:	460b      	mov	r3, r1
 8007638:	4602      	mov	r2, r0
 800763a:	4649      	mov	r1, r9
 800763c:	4640      	mov	r0, r8
 800763e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007642:	f7f8 fd8b 	bl	800015c <__adddf3>
 8007646:	4b18      	ldr	r3, [pc, #96]	; (80076a8 <__ieee754_pow+0x3e0>)
 8007648:	4682      	mov	sl, r0
 800764a:	4299      	cmp	r1, r3
 800764c:	460f      	mov	r7, r1
 800764e:	460e      	mov	r6, r1
 8007650:	f340 82e5 	ble.w	8007c1e <__ieee754_pow+0x956>
 8007654:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8007658:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800765c:	4303      	orrs	r3, r0
 800765e:	f000 81df 	beq.w	8007a20 <__ieee754_pow+0x758>
 8007662:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007666:	2200      	movs	r2, #0
 8007668:	2300      	movs	r3, #0
 800766a:	f7f9 f99f 	bl	80009ac <__aeabi_dcmplt>
 800766e:	3800      	subs	r0, #0
 8007670:	bf18      	it	ne
 8007672:	2001      	movne	r0, #1
 8007674:	e72e      	b.n	80074d4 <__ieee754_pow+0x20c>
 8007676:	bf00      	nop
 8007678:	60000000 	.word	0x60000000
 800767c:	3ff71547 	.word	0x3ff71547
 8007680:	f85ddf44 	.word	0xf85ddf44
 8007684:	3e54ae0b 	.word	0x3e54ae0b
 8007688:	55555555 	.word	0x55555555
 800768c:	3fd55555 	.word	0x3fd55555
 8007690:	652b82fe 	.word	0x652b82fe
 8007694:	3ff71547 	.word	0x3ff71547
 8007698:	3ff00000 	.word	0x3ff00000
 800769c:	3fd00000 	.word	0x3fd00000
 80076a0:	3fe00000 	.word	0x3fe00000
 80076a4:	bff00000 	.word	0xbff00000
 80076a8:	408fffff 	.word	0x408fffff
 80076ac:	4bd2      	ldr	r3, [pc, #840]	; (80079f8 <__ieee754_pow+0x730>)
 80076ae:	2200      	movs	r2, #0
 80076b0:	402b      	ands	r3, r5
 80076b2:	b943      	cbnz	r3, 80076c6 <__ieee754_pow+0x3fe>
 80076b4:	4658      	mov	r0, fp
 80076b6:	4661      	mov	r1, ip
 80076b8:	4bd0      	ldr	r3, [pc, #832]	; (80079fc <__ieee754_pow+0x734>)
 80076ba:	f7f8 ff05 	bl	80004c8 <__aeabi_dmul>
 80076be:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80076c2:	4683      	mov	fp, r0
 80076c4:	460c      	mov	r4, r1
 80076c6:	1523      	asrs	r3, r4, #20
 80076c8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80076cc:	4413      	add	r3, r2
 80076ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80076d0:	4bcb      	ldr	r3, [pc, #812]	; (8007a00 <__ieee754_pow+0x738>)
 80076d2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80076d6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80076da:	429c      	cmp	r4, r3
 80076dc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80076e0:	dd08      	ble.n	80076f4 <__ieee754_pow+0x42c>
 80076e2:	4bc8      	ldr	r3, [pc, #800]	; (8007a04 <__ieee754_pow+0x73c>)
 80076e4:	429c      	cmp	r4, r3
 80076e6:	f340 8199 	ble.w	8007a1c <__ieee754_pow+0x754>
 80076ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076ec:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80076f0:	3301      	adds	r3, #1
 80076f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80076f4:	2600      	movs	r6, #0
 80076f6:	00f3      	lsls	r3, r6, #3
 80076f8:	930d      	str	r3, [sp, #52]	; 0x34
 80076fa:	4bc3      	ldr	r3, [pc, #780]	; (8007a08 <__ieee754_pow+0x740>)
 80076fc:	4658      	mov	r0, fp
 80076fe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007702:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007706:	4629      	mov	r1, r5
 8007708:	461a      	mov	r2, r3
 800770a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800770e:	4623      	mov	r3, r4
 8007710:	f7f8 fd22 	bl	8000158 <__aeabi_dsub>
 8007714:	46da      	mov	sl, fp
 8007716:	462b      	mov	r3, r5
 8007718:	4652      	mov	r2, sl
 800771a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800771e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007722:	f7f8 fd1b 	bl	800015c <__adddf3>
 8007726:	4602      	mov	r2, r0
 8007728:	460b      	mov	r3, r1
 800772a:	2000      	movs	r0, #0
 800772c:	49b7      	ldr	r1, [pc, #732]	; (8007a0c <__ieee754_pow+0x744>)
 800772e:	f7f8 fff5 	bl	800071c <__aeabi_ddiv>
 8007732:	4602      	mov	r2, r0
 8007734:	460b      	mov	r3, r1
 8007736:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800773a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800773e:	f7f8 fec3 	bl	80004c8 <__aeabi_dmul>
 8007742:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007746:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800774a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800774e:	2300      	movs	r3, #0
 8007750:	2200      	movs	r2, #0
 8007752:	46ab      	mov	fp, r5
 8007754:	106d      	asrs	r5, r5, #1
 8007756:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800775a:	9304      	str	r3, [sp, #16]
 800775c:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8007760:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007764:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8007768:	4640      	mov	r0, r8
 800776a:	4649      	mov	r1, r9
 800776c:	4614      	mov	r4, r2
 800776e:	461d      	mov	r5, r3
 8007770:	f7f8 feaa 	bl	80004c8 <__aeabi_dmul>
 8007774:	4602      	mov	r2, r0
 8007776:	460b      	mov	r3, r1
 8007778:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800777c:	f7f8 fcec 	bl	8000158 <__aeabi_dsub>
 8007780:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007784:	4606      	mov	r6, r0
 8007786:	460f      	mov	r7, r1
 8007788:	4620      	mov	r0, r4
 800778a:	4629      	mov	r1, r5
 800778c:	f7f8 fce4 	bl	8000158 <__aeabi_dsub>
 8007790:	4602      	mov	r2, r0
 8007792:	460b      	mov	r3, r1
 8007794:	4650      	mov	r0, sl
 8007796:	4659      	mov	r1, fp
 8007798:	f7f8 fcde 	bl	8000158 <__aeabi_dsub>
 800779c:	4642      	mov	r2, r8
 800779e:	464b      	mov	r3, r9
 80077a0:	f7f8 fe92 	bl	80004c8 <__aeabi_dmul>
 80077a4:	4602      	mov	r2, r0
 80077a6:	460b      	mov	r3, r1
 80077a8:	4630      	mov	r0, r6
 80077aa:	4639      	mov	r1, r7
 80077ac:	f7f8 fcd4 	bl	8000158 <__aeabi_dsub>
 80077b0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80077b4:	f7f8 fe88 	bl	80004c8 <__aeabi_dmul>
 80077b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80077bc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80077c0:	4610      	mov	r0, r2
 80077c2:	4619      	mov	r1, r3
 80077c4:	f7f8 fe80 	bl	80004c8 <__aeabi_dmul>
 80077c8:	a379      	add	r3, pc, #484	; (adr r3, 80079b0 <__ieee754_pow+0x6e8>)
 80077ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ce:	4604      	mov	r4, r0
 80077d0:	460d      	mov	r5, r1
 80077d2:	f7f8 fe79 	bl	80004c8 <__aeabi_dmul>
 80077d6:	a378      	add	r3, pc, #480	; (adr r3, 80079b8 <__ieee754_pow+0x6f0>)
 80077d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077dc:	f7f8 fcbe 	bl	800015c <__adddf3>
 80077e0:	4622      	mov	r2, r4
 80077e2:	462b      	mov	r3, r5
 80077e4:	f7f8 fe70 	bl	80004c8 <__aeabi_dmul>
 80077e8:	a375      	add	r3, pc, #468	; (adr r3, 80079c0 <__ieee754_pow+0x6f8>)
 80077ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ee:	f7f8 fcb5 	bl	800015c <__adddf3>
 80077f2:	4622      	mov	r2, r4
 80077f4:	462b      	mov	r3, r5
 80077f6:	f7f8 fe67 	bl	80004c8 <__aeabi_dmul>
 80077fa:	a373      	add	r3, pc, #460	; (adr r3, 80079c8 <__ieee754_pow+0x700>)
 80077fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007800:	f7f8 fcac 	bl	800015c <__adddf3>
 8007804:	4622      	mov	r2, r4
 8007806:	462b      	mov	r3, r5
 8007808:	f7f8 fe5e 	bl	80004c8 <__aeabi_dmul>
 800780c:	a370      	add	r3, pc, #448	; (adr r3, 80079d0 <__ieee754_pow+0x708>)
 800780e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007812:	f7f8 fca3 	bl	800015c <__adddf3>
 8007816:	4622      	mov	r2, r4
 8007818:	462b      	mov	r3, r5
 800781a:	f7f8 fe55 	bl	80004c8 <__aeabi_dmul>
 800781e:	a36e      	add	r3, pc, #440	; (adr r3, 80079d8 <__ieee754_pow+0x710>)
 8007820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007824:	f7f8 fc9a 	bl	800015c <__adddf3>
 8007828:	4622      	mov	r2, r4
 800782a:	4606      	mov	r6, r0
 800782c:	460f      	mov	r7, r1
 800782e:	462b      	mov	r3, r5
 8007830:	4620      	mov	r0, r4
 8007832:	4629      	mov	r1, r5
 8007834:	f7f8 fe48 	bl	80004c8 <__aeabi_dmul>
 8007838:	4602      	mov	r2, r0
 800783a:	460b      	mov	r3, r1
 800783c:	4630      	mov	r0, r6
 800783e:	4639      	mov	r1, r7
 8007840:	f7f8 fe42 	bl	80004c8 <__aeabi_dmul>
 8007844:	4604      	mov	r4, r0
 8007846:	460d      	mov	r5, r1
 8007848:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800784c:	4642      	mov	r2, r8
 800784e:	464b      	mov	r3, r9
 8007850:	f7f8 fc84 	bl	800015c <__adddf3>
 8007854:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007858:	f7f8 fe36 	bl	80004c8 <__aeabi_dmul>
 800785c:	4622      	mov	r2, r4
 800785e:	462b      	mov	r3, r5
 8007860:	f7f8 fc7c 	bl	800015c <__adddf3>
 8007864:	4642      	mov	r2, r8
 8007866:	4606      	mov	r6, r0
 8007868:	460f      	mov	r7, r1
 800786a:	464b      	mov	r3, r9
 800786c:	4640      	mov	r0, r8
 800786e:	4649      	mov	r1, r9
 8007870:	f7f8 fe2a 	bl	80004c8 <__aeabi_dmul>
 8007874:	2200      	movs	r2, #0
 8007876:	4b66      	ldr	r3, [pc, #408]	; (8007a10 <__ieee754_pow+0x748>)
 8007878:	4682      	mov	sl, r0
 800787a:	468b      	mov	fp, r1
 800787c:	f7f8 fc6e 	bl	800015c <__adddf3>
 8007880:	4632      	mov	r2, r6
 8007882:	463b      	mov	r3, r7
 8007884:	f7f8 fc6a 	bl	800015c <__adddf3>
 8007888:	2400      	movs	r4, #0
 800788a:	460d      	mov	r5, r1
 800788c:	4622      	mov	r2, r4
 800788e:	460b      	mov	r3, r1
 8007890:	4640      	mov	r0, r8
 8007892:	4649      	mov	r1, r9
 8007894:	f7f8 fe18 	bl	80004c8 <__aeabi_dmul>
 8007898:	2200      	movs	r2, #0
 800789a:	4680      	mov	r8, r0
 800789c:	4689      	mov	r9, r1
 800789e:	4620      	mov	r0, r4
 80078a0:	4629      	mov	r1, r5
 80078a2:	4b5b      	ldr	r3, [pc, #364]	; (8007a10 <__ieee754_pow+0x748>)
 80078a4:	f7f8 fc58 	bl	8000158 <__aeabi_dsub>
 80078a8:	4652      	mov	r2, sl
 80078aa:	465b      	mov	r3, fp
 80078ac:	f7f8 fc54 	bl	8000158 <__aeabi_dsub>
 80078b0:	4602      	mov	r2, r0
 80078b2:	460b      	mov	r3, r1
 80078b4:	4630      	mov	r0, r6
 80078b6:	4639      	mov	r1, r7
 80078b8:	f7f8 fc4e 	bl	8000158 <__aeabi_dsub>
 80078bc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80078c0:	f7f8 fe02 	bl	80004c8 <__aeabi_dmul>
 80078c4:	4622      	mov	r2, r4
 80078c6:	4606      	mov	r6, r0
 80078c8:	460f      	mov	r7, r1
 80078ca:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80078ce:	462b      	mov	r3, r5
 80078d0:	f7f8 fdfa 	bl	80004c8 <__aeabi_dmul>
 80078d4:	4602      	mov	r2, r0
 80078d6:	460b      	mov	r3, r1
 80078d8:	4630      	mov	r0, r6
 80078da:	4639      	mov	r1, r7
 80078dc:	f7f8 fc3e 	bl	800015c <__adddf3>
 80078e0:	2400      	movs	r4, #0
 80078e2:	4606      	mov	r6, r0
 80078e4:	460f      	mov	r7, r1
 80078e6:	4602      	mov	r2, r0
 80078e8:	460b      	mov	r3, r1
 80078ea:	4640      	mov	r0, r8
 80078ec:	4649      	mov	r1, r9
 80078ee:	f7f8 fc35 	bl	800015c <__adddf3>
 80078f2:	a33b      	add	r3, pc, #236	; (adr r3, 80079e0 <__ieee754_pow+0x718>)
 80078f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f8:	4620      	mov	r0, r4
 80078fa:	460d      	mov	r5, r1
 80078fc:	f7f8 fde4 	bl	80004c8 <__aeabi_dmul>
 8007900:	4642      	mov	r2, r8
 8007902:	464b      	mov	r3, r9
 8007904:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007908:	4620      	mov	r0, r4
 800790a:	4629      	mov	r1, r5
 800790c:	f7f8 fc24 	bl	8000158 <__aeabi_dsub>
 8007910:	4602      	mov	r2, r0
 8007912:	460b      	mov	r3, r1
 8007914:	4630      	mov	r0, r6
 8007916:	4639      	mov	r1, r7
 8007918:	f7f8 fc1e 	bl	8000158 <__aeabi_dsub>
 800791c:	a332      	add	r3, pc, #200	; (adr r3, 80079e8 <__ieee754_pow+0x720>)
 800791e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007922:	f7f8 fdd1 	bl	80004c8 <__aeabi_dmul>
 8007926:	a332      	add	r3, pc, #200	; (adr r3, 80079f0 <__ieee754_pow+0x728>)
 8007928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800792c:	4606      	mov	r6, r0
 800792e:	460f      	mov	r7, r1
 8007930:	4620      	mov	r0, r4
 8007932:	4629      	mov	r1, r5
 8007934:	f7f8 fdc8 	bl	80004c8 <__aeabi_dmul>
 8007938:	4602      	mov	r2, r0
 800793a:	460b      	mov	r3, r1
 800793c:	4630      	mov	r0, r6
 800793e:	4639      	mov	r1, r7
 8007940:	f7f8 fc0c 	bl	800015c <__adddf3>
 8007944:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007946:	4b33      	ldr	r3, [pc, #204]	; (8007a14 <__ieee754_pow+0x74c>)
 8007948:	f04f 0a00 	mov.w	sl, #0
 800794c:	4413      	add	r3, r2
 800794e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007952:	f7f8 fc03 	bl	800015c <__adddf3>
 8007956:	4680      	mov	r8, r0
 8007958:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800795a:	4689      	mov	r9, r1
 800795c:	f7f8 fd4a 	bl	80003f4 <__aeabi_i2d>
 8007960:	4604      	mov	r4, r0
 8007962:	460d      	mov	r5, r1
 8007964:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007966:	4b2c      	ldr	r3, [pc, #176]	; (8007a18 <__ieee754_pow+0x750>)
 8007968:	4413      	add	r3, r2
 800796a:	e9d3 6700 	ldrd	r6, r7, [r3]
 800796e:	4642      	mov	r2, r8
 8007970:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007974:	464b      	mov	r3, r9
 8007976:	f7f8 fbf1 	bl	800015c <__adddf3>
 800797a:	4632      	mov	r2, r6
 800797c:	463b      	mov	r3, r7
 800797e:	f7f8 fbed 	bl	800015c <__adddf3>
 8007982:	4622      	mov	r2, r4
 8007984:	462b      	mov	r3, r5
 8007986:	f7f8 fbe9 	bl	800015c <__adddf3>
 800798a:	4622      	mov	r2, r4
 800798c:	462b      	mov	r3, r5
 800798e:	4650      	mov	r0, sl
 8007990:	468b      	mov	fp, r1
 8007992:	f7f8 fbe1 	bl	8000158 <__aeabi_dsub>
 8007996:	4632      	mov	r2, r6
 8007998:	463b      	mov	r3, r7
 800799a:	f7f8 fbdd 	bl	8000158 <__aeabi_dsub>
 800799e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80079a2:	f7f8 fbd9 	bl	8000158 <__aeabi_dsub>
 80079a6:	4602      	mov	r2, r0
 80079a8:	460b      	mov	r3, r1
 80079aa:	4640      	mov	r0, r8
 80079ac:	4649      	mov	r1, r9
 80079ae:	e60d      	b.n	80075cc <__ieee754_pow+0x304>
 80079b0:	4a454eef 	.word	0x4a454eef
 80079b4:	3fca7e28 	.word	0x3fca7e28
 80079b8:	93c9db65 	.word	0x93c9db65
 80079bc:	3fcd864a 	.word	0x3fcd864a
 80079c0:	a91d4101 	.word	0xa91d4101
 80079c4:	3fd17460 	.word	0x3fd17460
 80079c8:	518f264d 	.word	0x518f264d
 80079cc:	3fd55555 	.word	0x3fd55555
 80079d0:	db6fabff 	.word	0xdb6fabff
 80079d4:	3fdb6db6 	.word	0x3fdb6db6
 80079d8:	33333303 	.word	0x33333303
 80079dc:	3fe33333 	.word	0x3fe33333
 80079e0:	e0000000 	.word	0xe0000000
 80079e4:	3feec709 	.word	0x3feec709
 80079e8:	dc3a03fd 	.word	0xdc3a03fd
 80079ec:	3feec709 	.word	0x3feec709
 80079f0:	145b01f5 	.word	0x145b01f5
 80079f4:	be3e2fe0 	.word	0xbe3e2fe0
 80079f8:	7ff00000 	.word	0x7ff00000
 80079fc:	43400000 	.word	0x43400000
 8007a00:	0003988e 	.word	0x0003988e
 8007a04:	000bb679 	.word	0x000bb679
 8007a08:	08008060 	.word	0x08008060
 8007a0c:	3ff00000 	.word	0x3ff00000
 8007a10:	40080000 	.word	0x40080000
 8007a14:	08008080 	.word	0x08008080
 8007a18:	08008070 	.word	0x08008070
 8007a1c:	2601      	movs	r6, #1
 8007a1e:	e66a      	b.n	80076f6 <__ieee754_pow+0x42e>
 8007a20:	a39d      	add	r3, pc, #628	; (adr r3, 8007c98 <__ieee754_pow+0x9d0>)
 8007a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a26:	4640      	mov	r0, r8
 8007a28:	4649      	mov	r1, r9
 8007a2a:	f7f8 fb97 	bl	800015c <__adddf3>
 8007a2e:	4622      	mov	r2, r4
 8007a30:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a34:	462b      	mov	r3, r5
 8007a36:	4650      	mov	r0, sl
 8007a38:	4639      	mov	r1, r7
 8007a3a:	f7f8 fb8d 	bl	8000158 <__aeabi_dsub>
 8007a3e:	4602      	mov	r2, r0
 8007a40:	460b      	mov	r3, r1
 8007a42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a46:	f7f8 ffcf 	bl	80009e8 <__aeabi_dcmpgt>
 8007a4a:	2800      	cmp	r0, #0
 8007a4c:	f47f ae09 	bne.w	8007662 <__ieee754_pow+0x39a>
 8007a50:	4aa3      	ldr	r2, [pc, #652]	; (8007ce0 <__ieee754_pow+0xa18>)
 8007a52:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8007a56:	4293      	cmp	r3, r2
 8007a58:	f340 8101 	ble.w	8007c5e <__ieee754_pow+0x996>
 8007a5c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8007a60:	2000      	movs	r0, #0
 8007a62:	151b      	asrs	r3, r3, #20
 8007a64:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8007a68:	fa4a f303 	asr.w	r3, sl, r3
 8007a6c:	4433      	add	r3, r6
 8007a6e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8007a72:	4f9c      	ldr	r7, [pc, #624]	; (8007ce4 <__ieee754_pow+0xa1c>)
 8007a74:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8007a78:	4117      	asrs	r7, r2
 8007a7a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8007a7e:	ea23 0107 	bic.w	r1, r3, r7
 8007a82:	f1c2 0214 	rsb	r2, r2, #20
 8007a86:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8007a8a:	460b      	mov	r3, r1
 8007a8c:	fa4a fa02 	asr.w	sl, sl, r2
 8007a90:	2e00      	cmp	r6, #0
 8007a92:	4602      	mov	r2, r0
 8007a94:	4629      	mov	r1, r5
 8007a96:	4620      	mov	r0, r4
 8007a98:	bfb8      	it	lt
 8007a9a:	f1ca 0a00 	rsblt	sl, sl, #0
 8007a9e:	f7f8 fb5b 	bl	8000158 <__aeabi_dsub>
 8007aa2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007aa6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007aaa:	2400      	movs	r4, #0
 8007aac:	4642      	mov	r2, r8
 8007aae:	464b      	mov	r3, r9
 8007ab0:	f7f8 fb54 	bl	800015c <__adddf3>
 8007ab4:	a37a      	add	r3, pc, #488	; (adr r3, 8007ca0 <__ieee754_pow+0x9d8>)
 8007ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aba:	4620      	mov	r0, r4
 8007abc:	460d      	mov	r5, r1
 8007abe:	f7f8 fd03 	bl	80004c8 <__aeabi_dmul>
 8007ac2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ac6:	4606      	mov	r6, r0
 8007ac8:	460f      	mov	r7, r1
 8007aca:	4620      	mov	r0, r4
 8007acc:	4629      	mov	r1, r5
 8007ace:	f7f8 fb43 	bl	8000158 <__aeabi_dsub>
 8007ad2:	4602      	mov	r2, r0
 8007ad4:	460b      	mov	r3, r1
 8007ad6:	4640      	mov	r0, r8
 8007ad8:	4649      	mov	r1, r9
 8007ada:	f7f8 fb3d 	bl	8000158 <__aeabi_dsub>
 8007ade:	a372      	add	r3, pc, #456	; (adr r3, 8007ca8 <__ieee754_pow+0x9e0>)
 8007ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae4:	f7f8 fcf0 	bl	80004c8 <__aeabi_dmul>
 8007ae8:	a371      	add	r3, pc, #452	; (adr r3, 8007cb0 <__ieee754_pow+0x9e8>)
 8007aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aee:	4680      	mov	r8, r0
 8007af0:	4689      	mov	r9, r1
 8007af2:	4620      	mov	r0, r4
 8007af4:	4629      	mov	r1, r5
 8007af6:	f7f8 fce7 	bl	80004c8 <__aeabi_dmul>
 8007afa:	4602      	mov	r2, r0
 8007afc:	460b      	mov	r3, r1
 8007afe:	4640      	mov	r0, r8
 8007b00:	4649      	mov	r1, r9
 8007b02:	f7f8 fb2b 	bl	800015c <__adddf3>
 8007b06:	4604      	mov	r4, r0
 8007b08:	460d      	mov	r5, r1
 8007b0a:	4602      	mov	r2, r0
 8007b0c:	460b      	mov	r3, r1
 8007b0e:	4630      	mov	r0, r6
 8007b10:	4639      	mov	r1, r7
 8007b12:	f7f8 fb23 	bl	800015c <__adddf3>
 8007b16:	4632      	mov	r2, r6
 8007b18:	463b      	mov	r3, r7
 8007b1a:	4680      	mov	r8, r0
 8007b1c:	4689      	mov	r9, r1
 8007b1e:	f7f8 fb1b 	bl	8000158 <__aeabi_dsub>
 8007b22:	4602      	mov	r2, r0
 8007b24:	460b      	mov	r3, r1
 8007b26:	4620      	mov	r0, r4
 8007b28:	4629      	mov	r1, r5
 8007b2a:	f7f8 fb15 	bl	8000158 <__aeabi_dsub>
 8007b2e:	4642      	mov	r2, r8
 8007b30:	4606      	mov	r6, r0
 8007b32:	460f      	mov	r7, r1
 8007b34:	464b      	mov	r3, r9
 8007b36:	4640      	mov	r0, r8
 8007b38:	4649      	mov	r1, r9
 8007b3a:	f7f8 fcc5 	bl	80004c8 <__aeabi_dmul>
 8007b3e:	a35e      	add	r3, pc, #376	; (adr r3, 8007cb8 <__ieee754_pow+0x9f0>)
 8007b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b44:	4604      	mov	r4, r0
 8007b46:	460d      	mov	r5, r1
 8007b48:	f7f8 fcbe 	bl	80004c8 <__aeabi_dmul>
 8007b4c:	a35c      	add	r3, pc, #368	; (adr r3, 8007cc0 <__ieee754_pow+0x9f8>)
 8007b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b52:	f7f8 fb01 	bl	8000158 <__aeabi_dsub>
 8007b56:	4622      	mov	r2, r4
 8007b58:	462b      	mov	r3, r5
 8007b5a:	f7f8 fcb5 	bl	80004c8 <__aeabi_dmul>
 8007b5e:	a35a      	add	r3, pc, #360	; (adr r3, 8007cc8 <__ieee754_pow+0xa00>)
 8007b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b64:	f7f8 fafa 	bl	800015c <__adddf3>
 8007b68:	4622      	mov	r2, r4
 8007b6a:	462b      	mov	r3, r5
 8007b6c:	f7f8 fcac 	bl	80004c8 <__aeabi_dmul>
 8007b70:	a357      	add	r3, pc, #348	; (adr r3, 8007cd0 <__ieee754_pow+0xa08>)
 8007b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b76:	f7f8 faef 	bl	8000158 <__aeabi_dsub>
 8007b7a:	4622      	mov	r2, r4
 8007b7c:	462b      	mov	r3, r5
 8007b7e:	f7f8 fca3 	bl	80004c8 <__aeabi_dmul>
 8007b82:	a355      	add	r3, pc, #340	; (adr r3, 8007cd8 <__ieee754_pow+0xa10>)
 8007b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b88:	f7f8 fae8 	bl	800015c <__adddf3>
 8007b8c:	4622      	mov	r2, r4
 8007b8e:	462b      	mov	r3, r5
 8007b90:	f7f8 fc9a 	bl	80004c8 <__aeabi_dmul>
 8007b94:	4602      	mov	r2, r0
 8007b96:	460b      	mov	r3, r1
 8007b98:	4640      	mov	r0, r8
 8007b9a:	4649      	mov	r1, r9
 8007b9c:	f7f8 fadc 	bl	8000158 <__aeabi_dsub>
 8007ba0:	4604      	mov	r4, r0
 8007ba2:	460d      	mov	r5, r1
 8007ba4:	4602      	mov	r2, r0
 8007ba6:	460b      	mov	r3, r1
 8007ba8:	4640      	mov	r0, r8
 8007baa:	4649      	mov	r1, r9
 8007bac:	f7f8 fc8c 	bl	80004c8 <__aeabi_dmul>
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007bb6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007bba:	4620      	mov	r0, r4
 8007bbc:	4629      	mov	r1, r5
 8007bbe:	f7f8 facb 	bl	8000158 <__aeabi_dsub>
 8007bc2:	4602      	mov	r2, r0
 8007bc4:	460b      	mov	r3, r1
 8007bc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007bca:	f7f8 fda7 	bl	800071c <__aeabi_ddiv>
 8007bce:	4632      	mov	r2, r6
 8007bd0:	4604      	mov	r4, r0
 8007bd2:	460d      	mov	r5, r1
 8007bd4:	463b      	mov	r3, r7
 8007bd6:	4640      	mov	r0, r8
 8007bd8:	4649      	mov	r1, r9
 8007bda:	f7f8 fc75 	bl	80004c8 <__aeabi_dmul>
 8007bde:	4632      	mov	r2, r6
 8007be0:	463b      	mov	r3, r7
 8007be2:	f7f8 fabb 	bl	800015c <__adddf3>
 8007be6:	4602      	mov	r2, r0
 8007be8:	460b      	mov	r3, r1
 8007bea:	4620      	mov	r0, r4
 8007bec:	4629      	mov	r1, r5
 8007bee:	f7f8 fab3 	bl	8000158 <__aeabi_dsub>
 8007bf2:	4642      	mov	r2, r8
 8007bf4:	464b      	mov	r3, r9
 8007bf6:	f7f8 faaf 	bl	8000158 <__aeabi_dsub>
 8007bfa:	4602      	mov	r2, r0
 8007bfc:	460b      	mov	r3, r1
 8007bfe:	2000      	movs	r0, #0
 8007c00:	4939      	ldr	r1, [pc, #228]	; (8007ce8 <__ieee754_pow+0xa20>)
 8007c02:	f7f8 faa9 	bl	8000158 <__aeabi_dsub>
 8007c06:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8007c0a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8007c0e:	da29      	bge.n	8007c64 <__ieee754_pow+0x99c>
 8007c10:	4652      	mov	r2, sl
 8007c12:	f000 f955 	bl	8007ec0 <scalbn>
 8007c16:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c1a:	f7ff bbfe 	b.w	800741a <__ieee754_pow+0x152>
 8007c1e:	4b33      	ldr	r3, [pc, #204]	; (8007cec <__ieee754_pow+0xa24>)
 8007c20:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8007c24:	429f      	cmp	r7, r3
 8007c26:	f77f af13 	ble.w	8007a50 <__ieee754_pow+0x788>
 8007c2a:	4b31      	ldr	r3, [pc, #196]	; (8007cf0 <__ieee754_pow+0xa28>)
 8007c2c:	440b      	add	r3, r1
 8007c2e:	4303      	orrs	r3, r0
 8007c30:	d009      	beq.n	8007c46 <__ieee754_pow+0x97e>
 8007c32:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c36:	2200      	movs	r2, #0
 8007c38:	2300      	movs	r3, #0
 8007c3a:	f7f8 feb7 	bl	80009ac <__aeabi_dcmplt>
 8007c3e:	3800      	subs	r0, #0
 8007c40:	bf18      	it	ne
 8007c42:	2001      	movne	r0, #1
 8007c44:	e453      	b.n	80074ee <__ieee754_pow+0x226>
 8007c46:	4622      	mov	r2, r4
 8007c48:	462b      	mov	r3, r5
 8007c4a:	f7f8 fa85 	bl	8000158 <__aeabi_dsub>
 8007c4e:	4642      	mov	r2, r8
 8007c50:	464b      	mov	r3, r9
 8007c52:	f7f8 febf 	bl	80009d4 <__aeabi_dcmpge>
 8007c56:	2800      	cmp	r0, #0
 8007c58:	f43f aefa 	beq.w	8007a50 <__ieee754_pow+0x788>
 8007c5c:	e7e9      	b.n	8007c32 <__ieee754_pow+0x96a>
 8007c5e:	f04f 0a00 	mov.w	sl, #0
 8007c62:	e720      	b.n	8007aa6 <__ieee754_pow+0x7de>
 8007c64:	4621      	mov	r1, r4
 8007c66:	e7d6      	b.n	8007c16 <__ieee754_pow+0x94e>
 8007c68:	f04f 0b00 	mov.w	fp, #0
 8007c6c:	f8df c078 	ldr.w	ip, [pc, #120]	; 8007ce8 <__ieee754_pow+0xa20>
 8007c70:	f7ff bbba 	b.w	80073e8 <__ieee754_pow+0x120>
 8007c74:	f04f 0b00 	mov.w	fp, #0
 8007c78:	f04f 0c00 	mov.w	ip, #0
 8007c7c:	f7ff bbb4 	b.w	80073e8 <__ieee754_pow+0x120>
 8007c80:	4640      	mov	r0, r8
 8007c82:	4649      	mov	r1, r9
 8007c84:	f7ff bb3d 	b.w	8007302 <__ieee754_pow+0x3a>
 8007c88:	9200      	str	r2, [sp, #0]
 8007c8a:	f7ff bb89 	b.w	80073a0 <__ieee754_pow+0xd8>
 8007c8e:	2300      	movs	r3, #0
 8007c90:	f7ff bb73 	b.w	800737a <__ieee754_pow+0xb2>
 8007c94:	f3af 8000 	nop.w
 8007c98:	652b82fe 	.word	0x652b82fe
 8007c9c:	3c971547 	.word	0x3c971547
 8007ca0:	00000000 	.word	0x00000000
 8007ca4:	3fe62e43 	.word	0x3fe62e43
 8007ca8:	fefa39ef 	.word	0xfefa39ef
 8007cac:	3fe62e42 	.word	0x3fe62e42
 8007cb0:	0ca86c39 	.word	0x0ca86c39
 8007cb4:	be205c61 	.word	0xbe205c61
 8007cb8:	72bea4d0 	.word	0x72bea4d0
 8007cbc:	3e663769 	.word	0x3e663769
 8007cc0:	c5d26bf1 	.word	0xc5d26bf1
 8007cc4:	3ebbbd41 	.word	0x3ebbbd41
 8007cc8:	af25de2c 	.word	0xaf25de2c
 8007ccc:	3f11566a 	.word	0x3f11566a
 8007cd0:	16bebd93 	.word	0x16bebd93
 8007cd4:	3f66c16c 	.word	0x3f66c16c
 8007cd8:	5555553e 	.word	0x5555553e
 8007cdc:	3fc55555 	.word	0x3fc55555
 8007ce0:	3fe00000 	.word	0x3fe00000
 8007ce4:	000fffff 	.word	0x000fffff
 8007ce8:	3ff00000 	.word	0x3ff00000
 8007cec:	4090cbff 	.word	0x4090cbff
 8007cf0:	3f6f3400 	.word	0x3f6f3400

08007cf4 <__ieee754_sqrt>:
 8007cf4:	f8df c158 	ldr.w	ip, [pc, #344]	; 8007e50 <__ieee754_sqrt+0x15c>
 8007cf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cfc:	ea3c 0c01 	bics.w	ip, ip, r1
 8007d00:	4606      	mov	r6, r0
 8007d02:	460d      	mov	r5, r1
 8007d04:	460c      	mov	r4, r1
 8007d06:	460a      	mov	r2, r1
 8007d08:	4607      	mov	r7, r0
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	d10f      	bne.n	8007d2e <__ieee754_sqrt+0x3a>
 8007d0e:	4602      	mov	r2, r0
 8007d10:	460b      	mov	r3, r1
 8007d12:	f7f8 fbd9 	bl	80004c8 <__aeabi_dmul>
 8007d16:	4602      	mov	r2, r0
 8007d18:	460b      	mov	r3, r1
 8007d1a:	4630      	mov	r0, r6
 8007d1c:	4629      	mov	r1, r5
 8007d1e:	f7f8 fa1d 	bl	800015c <__adddf3>
 8007d22:	4606      	mov	r6, r0
 8007d24:	460d      	mov	r5, r1
 8007d26:	4630      	mov	r0, r6
 8007d28:	4629      	mov	r1, r5
 8007d2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d2e:	2900      	cmp	r1, #0
 8007d30:	dc0e      	bgt.n	8007d50 <__ieee754_sqrt+0x5c>
 8007d32:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8007d36:	ea5c 0707 	orrs.w	r7, ip, r7
 8007d3a:	d0f4      	beq.n	8007d26 <__ieee754_sqrt+0x32>
 8007d3c:	b141      	cbz	r1, 8007d50 <__ieee754_sqrt+0x5c>
 8007d3e:	4602      	mov	r2, r0
 8007d40:	460b      	mov	r3, r1
 8007d42:	f7f8 fa09 	bl	8000158 <__aeabi_dsub>
 8007d46:	4602      	mov	r2, r0
 8007d48:	460b      	mov	r3, r1
 8007d4a:	f7f8 fce7 	bl	800071c <__aeabi_ddiv>
 8007d4e:	e7e8      	b.n	8007d22 <__ieee754_sqrt+0x2e>
 8007d50:	1521      	asrs	r1, r4, #20
 8007d52:	d075      	beq.n	8007e40 <__ieee754_sqrt+0x14c>
 8007d54:	07cc      	lsls	r4, r1, #31
 8007d56:	f04f 0400 	mov.w	r4, #0
 8007d5a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8007d5e:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 8007d62:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007d66:	bf5e      	ittt	pl
 8007d68:	0fd9      	lsrpl	r1, r3, #31
 8007d6a:	005b      	lslpl	r3, r3, #1
 8007d6c:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8007d70:	0fd9      	lsrs	r1, r3, #31
 8007d72:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8007d76:	2516      	movs	r5, #22
 8007d78:	4620      	mov	r0, r4
 8007d7a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007d7e:	107f      	asrs	r7, r7, #1
 8007d80:	005b      	lsls	r3, r3, #1
 8007d82:	1846      	adds	r6, r0, r1
 8007d84:	4296      	cmp	r6, r2
 8007d86:	bfde      	ittt	le
 8007d88:	1b92      	suble	r2, r2, r6
 8007d8a:	1870      	addle	r0, r6, r1
 8007d8c:	1864      	addle	r4, r4, r1
 8007d8e:	0052      	lsls	r2, r2, #1
 8007d90:	3d01      	subs	r5, #1
 8007d92:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8007d96:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007d9a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007d9e:	d1f0      	bne.n	8007d82 <__ieee754_sqrt+0x8e>
 8007da0:	4629      	mov	r1, r5
 8007da2:	f04f 0e20 	mov.w	lr, #32
 8007da6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007daa:	4282      	cmp	r2, r0
 8007dac:	eb06 0c05 	add.w	ip, r6, r5
 8007db0:	dc02      	bgt.n	8007db8 <__ieee754_sqrt+0xc4>
 8007db2:	d113      	bne.n	8007ddc <__ieee754_sqrt+0xe8>
 8007db4:	459c      	cmp	ip, r3
 8007db6:	d811      	bhi.n	8007ddc <__ieee754_sqrt+0xe8>
 8007db8:	f1bc 0f00 	cmp.w	ip, #0
 8007dbc:	eb0c 0506 	add.w	r5, ip, r6
 8007dc0:	da43      	bge.n	8007e4a <__ieee754_sqrt+0x156>
 8007dc2:	2d00      	cmp	r5, #0
 8007dc4:	db41      	blt.n	8007e4a <__ieee754_sqrt+0x156>
 8007dc6:	f100 0801 	add.w	r8, r0, #1
 8007dca:	1a12      	subs	r2, r2, r0
 8007dcc:	4640      	mov	r0, r8
 8007dce:	459c      	cmp	ip, r3
 8007dd0:	bf88      	it	hi
 8007dd2:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8007dd6:	eba3 030c 	sub.w	r3, r3, ip
 8007dda:	4431      	add	r1, r6
 8007ddc:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8007de0:	f1be 0e01 	subs.w	lr, lr, #1
 8007de4:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8007de8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007dec:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007df0:	d1db      	bne.n	8007daa <__ieee754_sqrt+0xb6>
 8007df2:	4313      	orrs	r3, r2
 8007df4:	d006      	beq.n	8007e04 <__ieee754_sqrt+0x110>
 8007df6:	1c48      	adds	r0, r1, #1
 8007df8:	bf0b      	itete	eq
 8007dfa:	4671      	moveq	r1, lr
 8007dfc:	3101      	addne	r1, #1
 8007dfe:	3401      	addeq	r4, #1
 8007e00:	f021 0101 	bicne.w	r1, r1, #1
 8007e04:	1063      	asrs	r3, r4, #1
 8007e06:	0849      	lsrs	r1, r1, #1
 8007e08:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007e0c:	07e2      	lsls	r2, r4, #31
 8007e0e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007e12:	bf48      	it	mi
 8007e14:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8007e18:	460e      	mov	r6, r1
 8007e1a:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8007e1e:	e782      	b.n	8007d26 <__ieee754_sqrt+0x32>
 8007e20:	0ada      	lsrs	r2, r3, #11
 8007e22:	3815      	subs	r0, #21
 8007e24:	055b      	lsls	r3, r3, #21
 8007e26:	2a00      	cmp	r2, #0
 8007e28:	d0fa      	beq.n	8007e20 <__ieee754_sqrt+0x12c>
 8007e2a:	02d5      	lsls	r5, r2, #11
 8007e2c:	d50a      	bpl.n	8007e44 <__ieee754_sqrt+0x150>
 8007e2e:	f1c1 0420 	rsb	r4, r1, #32
 8007e32:	fa23 f404 	lsr.w	r4, r3, r4
 8007e36:	1e4d      	subs	r5, r1, #1
 8007e38:	408b      	lsls	r3, r1
 8007e3a:	4322      	orrs	r2, r4
 8007e3c:	1b41      	subs	r1, r0, r5
 8007e3e:	e789      	b.n	8007d54 <__ieee754_sqrt+0x60>
 8007e40:	4608      	mov	r0, r1
 8007e42:	e7f0      	b.n	8007e26 <__ieee754_sqrt+0x132>
 8007e44:	0052      	lsls	r2, r2, #1
 8007e46:	3101      	adds	r1, #1
 8007e48:	e7ef      	b.n	8007e2a <__ieee754_sqrt+0x136>
 8007e4a:	4680      	mov	r8, r0
 8007e4c:	e7bd      	b.n	8007dca <__ieee754_sqrt+0xd6>
 8007e4e:	bf00      	nop
 8007e50:	7ff00000 	.word	0x7ff00000

08007e54 <with_errno>:
 8007e54:	b570      	push	{r4, r5, r6, lr}
 8007e56:	4604      	mov	r4, r0
 8007e58:	460d      	mov	r5, r1
 8007e5a:	4616      	mov	r6, r2
 8007e5c:	f000 f8ae 	bl	8007fbc <__errno>
 8007e60:	4629      	mov	r1, r5
 8007e62:	6006      	str	r6, [r0, #0]
 8007e64:	4620      	mov	r0, r4
 8007e66:	bd70      	pop	{r4, r5, r6, pc}

08007e68 <xflow>:
 8007e68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e6a:	4615      	mov	r5, r2
 8007e6c:	461c      	mov	r4, r3
 8007e6e:	b180      	cbz	r0, 8007e92 <xflow+0x2a>
 8007e70:	4610      	mov	r0, r2
 8007e72:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007e76:	e9cd 0100 	strd	r0, r1, [sp]
 8007e7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e7e:	4628      	mov	r0, r5
 8007e80:	4621      	mov	r1, r4
 8007e82:	f7f8 fb21 	bl	80004c8 <__aeabi_dmul>
 8007e86:	2222      	movs	r2, #34	; 0x22
 8007e88:	b003      	add	sp, #12
 8007e8a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007e8e:	f7ff bfe1 	b.w	8007e54 <with_errno>
 8007e92:	4610      	mov	r0, r2
 8007e94:	4619      	mov	r1, r3
 8007e96:	e7ee      	b.n	8007e76 <xflow+0xe>

08007e98 <__math_uflow>:
 8007e98:	2200      	movs	r2, #0
 8007e9a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007e9e:	f7ff bfe3 	b.w	8007e68 <xflow>

08007ea2 <__math_oflow>:
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8007ea8:	f7ff bfde 	b.w	8007e68 <xflow>

08007eac <fabs>:
 8007eac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007eb0:	4770      	bx	lr

08007eb2 <finite>:
 8007eb2:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8007eb6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8007eba:	0fc0      	lsrs	r0, r0, #31
 8007ebc:	4770      	bx	lr
	...

08007ec0 <scalbn>:
 8007ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ec2:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8007ec6:	4604      	mov	r4, r0
 8007ec8:	460d      	mov	r5, r1
 8007eca:	4617      	mov	r7, r2
 8007ecc:	460b      	mov	r3, r1
 8007ece:	b996      	cbnz	r6, 8007ef6 <scalbn+0x36>
 8007ed0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007ed4:	4303      	orrs	r3, r0
 8007ed6:	d039      	beq.n	8007f4c <scalbn+0x8c>
 8007ed8:	4b33      	ldr	r3, [pc, #204]	; (8007fa8 <scalbn+0xe8>)
 8007eda:	2200      	movs	r2, #0
 8007edc:	f7f8 faf4 	bl	80004c8 <__aeabi_dmul>
 8007ee0:	4b32      	ldr	r3, [pc, #200]	; (8007fac <scalbn+0xec>)
 8007ee2:	4604      	mov	r4, r0
 8007ee4:	429f      	cmp	r7, r3
 8007ee6:	460d      	mov	r5, r1
 8007ee8:	da0f      	bge.n	8007f0a <scalbn+0x4a>
 8007eea:	a32b      	add	r3, pc, #172	; (adr r3, 8007f98 <scalbn+0xd8>)
 8007eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef0:	f7f8 faea 	bl	80004c8 <__aeabi_dmul>
 8007ef4:	e006      	b.n	8007f04 <scalbn+0x44>
 8007ef6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8007efa:	4296      	cmp	r6, r2
 8007efc:	d10a      	bne.n	8007f14 <scalbn+0x54>
 8007efe:	4602      	mov	r2, r0
 8007f00:	f7f8 f92c 	bl	800015c <__adddf3>
 8007f04:	4604      	mov	r4, r0
 8007f06:	460d      	mov	r5, r1
 8007f08:	e020      	b.n	8007f4c <scalbn+0x8c>
 8007f0a:	460b      	mov	r3, r1
 8007f0c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8007f10:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8007f14:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8007f18:	19b9      	adds	r1, r7, r6
 8007f1a:	4291      	cmp	r1, r2
 8007f1c:	dd0e      	ble.n	8007f3c <scalbn+0x7c>
 8007f1e:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8007f22:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8007f26:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8007f2a:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8007f2e:	4820      	ldr	r0, [pc, #128]	; (8007fb0 <scalbn+0xf0>)
 8007f30:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8007f34:	a31a      	add	r3, pc, #104	; (adr r3, 8007fa0 <scalbn+0xe0>)
 8007f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f3a:	e7d9      	b.n	8007ef0 <scalbn+0x30>
 8007f3c:	2900      	cmp	r1, #0
 8007f3e:	dd08      	ble.n	8007f52 <scalbn+0x92>
 8007f40:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007f44:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007f48:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8007f4c:	4620      	mov	r0, r4
 8007f4e:	4629      	mov	r1, r5
 8007f50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f52:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8007f56:	da12      	bge.n	8007f7e <scalbn+0xbe>
 8007f58:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007f5c:	429f      	cmp	r7, r3
 8007f5e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8007f62:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 8007f66:	dcdc      	bgt.n	8007f22 <scalbn+0x62>
 8007f68:	a30b      	add	r3, pc, #44	; (adr r3, 8007f98 <scalbn+0xd8>)
 8007f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f6e:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8007f72:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8007f76:	480f      	ldr	r0, [pc, #60]	; (8007fb4 <scalbn+0xf4>)
 8007f78:	f041 011f 	orr.w	r1, r1, #31
 8007f7c:	e7b8      	b.n	8007ef0 <scalbn+0x30>
 8007f7e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007f82:	3136      	adds	r1, #54	; 0x36
 8007f84:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007f88:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8007f8c:	4620      	mov	r0, r4
 8007f8e:	4629      	mov	r1, r5
 8007f90:	2200      	movs	r2, #0
 8007f92:	4b09      	ldr	r3, [pc, #36]	; (8007fb8 <scalbn+0xf8>)
 8007f94:	e7ac      	b.n	8007ef0 <scalbn+0x30>
 8007f96:	bf00      	nop
 8007f98:	c2f8f359 	.word	0xc2f8f359
 8007f9c:	01a56e1f 	.word	0x01a56e1f
 8007fa0:	8800759c 	.word	0x8800759c
 8007fa4:	7e37e43c 	.word	0x7e37e43c
 8007fa8:	43500000 	.word	0x43500000
 8007fac:	ffff3cb0 	.word	0xffff3cb0
 8007fb0:	8800759c 	.word	0x8800759c
 8007fb4:	c2f8f359 	.word	0xc2f8f359
 8007fb8:	3c900000 	.word	0x3c900000

08007fbc <__errno>:
 8007fbc:	4b01      	ldr	r3, [pc, #4]	; (8007fc4 <__errno+0x8>)
 8007fbe:	6818      	ldr	r0, [r3, #0]
 8007fc0:	4770      	bx	lr
 8007fc2:	bf00      	nop
 8007fc4:	20000040 	.word	0x20000040

08007fc8 <__libc_init_array>:
 8007fc8:	b570      	push	{r4, r5, r6, lr}
 8007fca:	2600      	movs	r6, #0
 8007fcc:	4d0c      	ldr	r5, [pc, #48]	; (8008000 <__libc_init_array+0x38>)
 8007fce:	4c0d      	ldr	r4, [pc, #52]	; (8008004 <__libc_init_array+0x3c>)
 8007fd0:	1b64      	subs	r4, r4, r5
 8007fd2:	10a4      	asrs	r4, r4, #2
 8007fd4:	42a6      	cmp	r6, r4
 8007fd6:	d109      	bne.n	8007fec <__libc_init_array+0x24>
 8007fd8:	f000 f822 	bl	8008020 <_init>
 8007fdc:	2600      	movs	r6, #0
 8007fde:	4d0a      	ldr	r5, [pc, #40]	; (8008008 <__libc_init_array+0x40>)
 8007fe0:	4c0a      	ldr	r4, [pc, #40]	; (800800c <__libc_init_array+0x44>)
 8007fe2:	1b64      	subs	r4, r4, r5
 8007fe4:	10a4      	asrs	r4, r4, #2
 8007fe6:	42a6      	cmp	r6, r4
 8007fe8:	d105      	bne.n	8007ff6 <__libc_init_array+0x2e>
 8007fea:	bd70      	pop	{r4, r5, r6, pc}
 8007fec:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ff0:	4798      	blx	r3
 8007ff2:	3601      	adds	r6, #1
 8007ff4:	e7ee      	b.n	8007fd4 <__libc_init_array+0xc>
 8007ff6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ffa:	4798      	blx	r3
 8007ffc:	3601      	adds	r6, #1
 8007ffe:	e7f2      	b.n	8007fe6 <__libc_init_array+0x1e>
 8008000:	08008090 	.word	0x08008090
 8008004:	08008090 	.word	0x08008090
 8008008:	08008090 	.word	0x08008090
 800800c:	08008094 	.word	0x08008094

08008010 <memset>:
 8008010:	4603      	mov	r3, r0
 8008012:	4402      	add	r2, r0
 8008014:	4293      	cmp	r3, r2
 8008016:	d100      	bne.n	800801a <memset+0xa>
 8008018:	4770      	bx	lr
 800801a:	f803 1b01 	strb.w	r1, [r3], #1
 800801e:	e7f9      	b.n	8008014 <memset+0x4>

08008020 <_init>:
 8008020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008022:	bf00      	nop
 8008024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008026:	bc08      	pop	{r3}
 8008028:	469e      	mov	lr, r3
 800802a:	4770      	bx	lr

0800802c <_fini>:
 800802c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800802e:	bf00      	nop
 8008030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008032:	bc08      	pop	{r3}
 8008034:	469e      	mov	lr, r3
 8008036:	4770      	bx	lr
