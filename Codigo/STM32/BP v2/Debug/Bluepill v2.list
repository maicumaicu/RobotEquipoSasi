
Bluepill v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088c4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  080089d8  080089d8  000189d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a90  08008a90  000200d8  2**0
                  CONTENTS
  4 .ARM          00000000  08008a90  08008a90  000200d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008a90  08008a90  000200d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a90  08008a90  00018a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a94  08008a94  00018a94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d8  20000000  08008a98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004040  200000d8  08008b70  000200d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004118  08008b70  00024118  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000116ae  00000000  00000000  00020101  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e50  00000000  00000000  000317af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d8  00000000  00000000  00034600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011b8  00000000  00000000  000358d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019fac  00000000  00000000  00036a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016ccd  00000000  00000000  00050a3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093e7b  00000000  00000000  00067709  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fb584  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000563c  00000000  00000000  000fb5d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000d8 	.word	0x200000d8
 800012c:	00000000 	.word	0x00000000
 8000130:	080089bc 	.word	0x080089bc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000dc 	.word	0x200000dc
 800014c:	080089bc 	.word	0x080089bc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2iz>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001118:	d30f      	bcc.n	800113a <__aeabi_f2iz+0x2a>
 800111a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d90d      	bls.n	8001140 <__aeabi_f2iz+0x30>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800112c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001130:	fa23 f002 	lsr.w	r0, r3, r2
 8001134:	bf18      	it	ne
 8001136:	4240      	negne	r0, r0
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr
 8001140:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001144:	d101      	bne.n	800114a <__aeabi_f2iz+0x3a>
 8001146:	0242      	lsls	r2, r0, #9
 8001148:	d105      	bne.n	8001156 <__aeabi_f2iz+0x46>
 800114a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800114e:	bf08      	it	eq
 8001150:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001154:	4770      	bx	lr
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	4770      	bx	lr

0800115c <__aeabi_f2uiz>:
 800115c:	0042      	lsls	r2, r0, #1
 800115e:	d20e      	bcs.n	800117e <__aeabi_f2uiz+0x22>
 8001160:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001164:	d30b      	bcc.n	800117e <__aeabi_f2uiz+0x22>
 8001166:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800116a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800116e:	d409      	bmi.n	8001184 <__aeabi_f2uiz+0x28>
 8001170:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001174:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001178:	fa23 f002 	lsr.w	r0, r3, r2
 800117c:	4770      	bx	lr
 800117e:	f04f 0000 	mov.w	r0, #0
 8001182:	4770      	bx	lr
 8001184:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001188:	d101      	bne.n	800118e <__aeabi_f2uiz+0x32>
 800118a:	0242      	lsls	r2, r0, #9
 800118c:	d102      	bne.n	8001194 <__aeabi_f2uiz+0x38>
 800118e:	f04f 30ff 	mov.w	r0, #4294967295
 8001192:	4770      	bx	lr
 8001194:	f04f 0000 	mov.w	r0, #0
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop

0800119c <GetPage>:
 * Some STM32F103C8 have 64 KB FLASH Memory, so I guess they have Page 0 to Page 63 only.
 */

/* FLASH_PAGE_SIZE should be able to get the size of the Page according to the controller */
static uint32_t GetPage(uint32_t Address)
{
 800119c:	b480      	push	{r7}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  for (int indx=0; indx<128; indx++)
 80011a4:	2300      	movs	r3, #0
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	e016      	b.n	80011d8 <GetPage+0x3c>
  {
	  if((Address < (0x08000000 + (FLASH_PAGE_SIZE *(indx+1))) ) && (Address >= (0x08000000 + FLASH_PAGE_SIZE*indx)))
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80011b0:	3301      	adds	r3, #1
 80011b2:	029b      	lsls	r3, r3, #10
 80011b4:	687a      	ldr	r2, [r7, #4]
 80011b6:	429a      	cmp	r2, r3
 80011b8:	d20b      	bcs.n	80011d2 <GetPage+0x36>
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80011c0:	029b      	lsls	r3, r3, #10
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d304      	bcc.n	80011d2 <GetPage+0x36>
	  {
		  return (0x08000000 + FLASH_PAGE_SIZE*indx);
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80011ce:	029b      	lsls	r3, r3, #10
 80011d0:	e006      	b.n	80011e0 <GetPage+0x44>
  for (int indx=0; indx<128; indx++)
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	3301      	adds	r3, #1
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	2b7f      	cmp	r3, #127	; 0x7f
 80011dc:	dde5      	ble.n	80011aa <GetPage+0xe>
	  }
  }

  return 0;
 80011de:	2300      	movs	r3, #0
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3714      	adds	r7, #20
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bc80      	pop	{r7}
 80011e8:	4770      	bx	lr
	...

080011ec <Flash_Write_Data>:
   float float_variable =  thing.a;
   return float_variable;
}

uint32_t Flash_Write_Data (uint32_t StartPageAddress, uint32_t *Data, uint16_t numberofwords)
{
 80011ec:	b5b0      	push	{r4, r5, r7, lr}
 80011ee:	b08a      	sub	sp, #40	; 0x28
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	4613      	mov	r3, r2
 80011f8:	80fb      	strh	r3, [r7, #6]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PAGEError;
	int sofar=0;
 80011fa:	2300      	movs	r3, #0
 80011fc:	627b      	str	r3, [r7, #36]	; 0x24

	  /* Unlock the Flash to enable the flash control register access *************/
	   HAL_FLASH_Unlock();
 80011fe:	f004 fc61 	bl	8005ac4 <HAL_FLASH_Unlock>

	   /* Erase the user Flash area*/

	  uint32_t StartPage = GetPage(StartPageAddress);
 8001202:	68f8      	ldr	r0, [r7, #12]
 8001204:	f7ff ffca 	bl	800119c <GetPage>
 8001208:	6238      	str	r0, [r7, #32]
	  uint32_t EndPageAdress = StartPageAddress + numberofwords*4;
 800120a:	88fb      	ldrh	r3, [r7, #6]
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	461a      	mov	r2, r3
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	4413      	add	r3, r2
 8001214:	61fb      	str	r3, [r7, #28]
	  uint32_t EndPage = GetPage(EndPageAdress);
 8001216:	69f8      	ldr	r0, [r7, #28]
 8001218:	f7ff ffc0 	bl	800119c <GetPage>
 800121c:	61b8      	str	r0, [r7, #24]

	   /* Fill EraseInit structure*/
	   EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 800121e:	4b20      	ldr	r3, [pc, #128]	; (80012a0 <Flash_Write_Data+0xb4>)
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
	   EraseInitStruct.PageAddress = StartPage;
 8001224:	4a1e      	ldr	r2, [pc, #120]	; (80012a0 <Flash_Write_Data+0xb4>)
 8001226:	6a3b      	ldr	r3, [r7, #32]
 8001228:	6093      	str	r3, [r2, #8]
	   EraseInitStruct.NbPages     = ((EndPage - StartPage)/FLASH_PAGE_SIZE) +1;
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	6a3b      	ldr	r3, [r7, #32]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	0a9b      	lsrs	r3, r3, #10
 8001232:	3301      	adds	r3, #1
 8001234:	4a1a      	ldr	r2, [pc, #104]	; (80012a0 <Flash_Write_Data+0xb4>)
 8001236:	60d3      	str	r3, [r2, #12]

	   if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 8001238:	f107 0314 	add.w	r3, r7, #20
 800123c:	4619      	mov	r1, r3
 800123e:	4818      	ldr	r0, [pc, #96]	; (80012a0 <Flash_Write_Data+0xb4>)
 8001240:	f004 fd32 	bl	8005ca8 <HAL_FLASHEx_Erase>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d01f      	beq.n	800128a <Flash_Write_Data+0x9e>
	   {
	     /*Error occurred while page erase.*/
		  return HAL_FLASH_GetError ();
 800124a:	f004 fc71 	bl	8005b30 <HAL_FLASH_GetError>
 800124e:	4603      	mov	r3, r0
 8001250:	e022      	b.n	8001298 <Flash_Write_Data+0xac>

	   /* Program the user Flash area word by word*/

	   while (sofar<numberofwords)
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartPageAddress, Data[sofar]) == HAL_OK)
 8001252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	68ba      	ldr	r2, [r7, #8]
 8001258:	4413      	add	r3, r2
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2200      	movs	r2, #0
 800125e:	461c      	mov	r4, r3
 8001260:	4615      	mov	r5, r2
 8001262:	4622      	mov	r2, r4
 8001264:	462b      	mov	r3, r5
 8001266:	68f9      	ldr	r1, [r7, #12]
 8001268:	2002      	movs	r0, #2
 800126a:	f004 fbbb 	bl	80059e4 <HAL_FLASH_Program>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d106      	bne.n	8001282 <Flash_Write_Data+0x96>
	     {
	    	 StartPageAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	3304      	adds	r3, #4
 8001278:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 800127a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127c:	3301      	adds	r3, #1
 800127e:	627b      	str	r3, [r7, #36]	; 0x24
 8001280:	e003      	b.n	800128a <Flash_Write_Data+0x9e>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 8001282:	f004 fc55 	bl	8005b30 <HAL_FLASH_GetError>
 8001286:	4603      	mov	r3, r0
 8001288:	e006      	b.n	8001298 <Flash_Write_Data+0xac>
	   while (sofar<numberofwords)
 800128a:	88fb      	ldrh	r3, [r7, #6]
 800128c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800128e:	429a      	cmp	r2, r3
 8001290:	dbdf      	blt.n	8001252 <Flash_Write_Data+0x66>
	     }
	   }

	   /* Lock the Flash to disable the flash control register access (recommended
	      to protect the FLASH memory against possible unwanted operation) *********/
	   HAL_FLASH_Lock();
 8001292:	f004 fc3d 	bl	8005b10 <HAL_FLASH_Lock>

	   return 0;
 8001296:	2300      	movs	r3, #0
}
 8001298:	4618      	mov	r0, r3
 800129a:	3728      	adds	r7, #40	; 0x28
 800129c:	46bd      	mov	sp, r7
 800129e:	bdb0      	pop	{r4, r5, r7, pc}
 80012a0:	200000f4 	.word	0x200000f4

080012a4 <Flash_Read_Data>:


void Flash_Read_Data (uint32_t StartPageAddress, uint32_t *RxBuf, uint16_t numberofwords)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	4613      	mov	r3, r2
 80012b0:	80fb      	strh	r3, [r7, #6]
	while (1)
	{

		*RxBuf = *(__IO uint32_t *)StartPageAddress;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	601a      	str	r2, [r3, #0]
		StartPageAddress += 4;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	3304      	adds	r3, #4
 80012be:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	3304      	adds	r3, #4
 80012c4:	60bb      	str	r3, [r7, #8]
		if (!(numberofwords--)) break;
 80012c6:	88fb      	ldrh	r3, [r7, #6]
 80012c8:	1e5a      	subs	r2, r3, #1
 80012ca:	80fa      	strh	r2, [r7, #6]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d000      	beq.n	80012d2 <Flash_Read_Data+0x2e>
		*RxBuf = *(__IO uint32_t *)StartPageAddress;
 80012d0:	e7ef      	b.n	80012b2 <Flash_Read_Data+0xe>
		if (!(numberofwords--)) break;
 80012d2:	bf00      	nop
	}
}
 80012d4:	bf00      	nop
 80012d6:	3714      	adds	r7, #20
 80012d8:	46bd      	mov	sp, r7
 80012da:	bc80      	pop	{r7}
 80012dc:	4770      	bx	lr

080012de <Convert_To_Str>:
void Convert_To_Str (uint32_t *Data, char *Buf)
{
 80012de:	b590      	push	{r4, r7, lr}
 80012e0:	b085      	sub	sp, #20
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
 80012e6:	6039      	str	r1, [r7, #0]
	int numberofbytes = ((strlen((char *)Data)/4) + ((strlen((char *)Data) % 4) != 0)) *4;
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f7fe ff31 	bl	8000150 <strlen>
 80012ee:	4603      	mov	r3, r0
 80012f0:	089c      	lsrs	r4, r3, #2
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f7fe ff2c 	bl	8000150 <strlen>
 80012f8:	4603      	mov	r3, r0
 80012fa:	f003 0303 	and.w	r3, r3, #3
 80012fe:	2b00      	cmp	r3, #0
 8001300:	bf14      	ite	ne
 8001302:	2301      	movne	r3, #1
 8001304:	2300      	moveq	r3, #0
 8001306:	b2db      	uxtb	r3, r3
 8001308:	4423      	add	r3, r4
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	60bb      	str	r3, [r7, #8]

	for (int i=0; i<numberofbytes; i++)
 800130e:	2300      	movs	r3, #0
 8001310:	60fb      	str	r3, [r7, #12]
 8001312:	e01b      	b.n	800134c <Convert_To_Str+0x6e>
	{
		Buf[i] = Data[i/4]>>(8*(i%4));
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	2b00      	cmp	r3, #0
 8001318:	da00      	bge.n	800131c <Convert_To_Str+0x3e>
 800131a:	3303      	adds	r3, #3
 800131c:	109b      	asrs	r3, r3, #2
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	687a      	ldr	r2, [r7, #4]
 8001322:	4413      	add	r3, r2
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	4259      	negs	r1, r3
 800132a:	f003 0303 	and.w	r3, r3, #3
 800132e:	f001 0103 	and.w	r1, r1, #3
 8001332:	bf58      	it	pl
 8001334:	424b      	negpl	r3, r1
 8001336:	00db      	lsls	r3, r3, #3
 8001338:	fa22 f103 	lsr.w	r1, r2, r3
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	683a      	ldr	r2, [r7, #0]
 8001340:	4413      	add	r3, r2
 8001342:	b2ca      	uxtb	r2, r1
 8001344:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<numberofbytes; i++)
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	3301      	adds	r3, #1
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	68fa      	ldr	r2, [r7, #12]
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	429a      	cmp	r2, r3
 8001352:	dbdf      	blt.n	8001314 <Convert_To_Str+0x36>
	}
}
 8001354:	bf00      	nop
 8001356:	bf00      	nop
 8001358:	3714      	adds	r7, #20
 800135a:	46bd      	mov	sp, r7
 800135c:	bd90      	pop	{r4, r7, pc}
	...

08001360 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001364:	f003 fc1e 	bl	8004ba4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001368:	f000 f892 	bl	8001490 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800136c:	f000 fadc 	bl	8001928 <MX_GPIO_Init>
  MX_DMA_Init();
 8001370:	f000 fabc 	bl	80018ec <MX_DMA_Init>
  MX_ADC1_Init();
 8001374:	f000 f8e8 	bl	8001548 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001378:	f000 f97e 	bl	8001678 <MX_TIM1_Init>
  MX_TIM3_Init();
 800137c:	f000 f9d4 	bl	8001728 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001380:	f000 fa26 	bl	80017d0 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 8001384:	f000 fa88 	bl	8001898 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8001388:	f000 f948 	bl	800161c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	btns[0].Port = BTN1_GPIO_Port;
 800138c:	4b35      	ldr	r3, [pc, #212]	; (8001464 <main+0x104>)
 800138e:	4a36      	ldr	r2, [pc, #216]	; (8001468 <main+0x108>)
 8001390:	601a      	str	r2, [r3, #0]
	btns[0].pin = BTN1_Pin;
 8001392:	4b34      	ldr	r3, [pc, #208]	; (8001464 <main+0x104>)
 8001394:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001398:	809a      	strh	r2, [r3, #4]
	btns[0].estado = ESPERA;
 800139a:	4b32      	ldr	r3, [pc, #200]	; (8001464 <main+0x104>)
 800139c:	2200      	movs	r2, #0
 800139e:	609a      	str	r2, [r3, #8]
	btns[0].flag = 0;
 80013a0:	4b30      	ldr	r3, [pc, #192]	; (8001464 <main+0x104>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	60da      	str	r2, [r3, #12]
	btns[1].Port = BTN2_GPIO_Port;
 80013a6:	4b2f      	ldr	r3, [pc, #188]	; (8001464 <main+0x104>)
 80013a8:	4a2f      	ldr	r2, [pc, #188]	; (8001468 <main+0x108>)
 80013aa:	611a      	str	r2, [r3, #16]
	btns[1].pin = BTN2_Pin;
 80013ac:	4b2d      	ldr	r3, [pc, #180]	; (8001464 <main+0x104>)
 80013ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013b2:	829a      	strh	r2, [r3, #20]
	btns[1].estado = ESPERA;
 80013b4:	4b2b      	ldr	r3, [pc, #172]	; (8001464 <main+0x104>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	619a      	str	r2, [r3, #24]
	btns[1].flag = 0;
 80013ba:	4b2a      	ldr	r3, [pc, #168]	; (8001464 <main+0x104>)
 80013bc:	2200      	movs	r2, #0
 80013be:	61da      	str	r2, [r3, #28]
	btns[2].Port = BTN3_GPIO_Port;
 80013c0:	4b28      	ldr	r3, [pc, #160]	; (8001464 <main+0x104>)
 80013c2:	4a29      	ldr	r2, [pc, #164]	; (8001468 <main+0x108>)
 80013c4:	621a      	str	r2, [r3, #32]
	btns[2].pin = BTN3_Pin;
 80013c6:	4b27      	ldr	r3, [pc, #156]	; (8001464 <main+0x104>)
 80013c8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013cc:	849a      	strh	r2, [r3, #36]	; 0x24
	btns[2].estado = ESPERA;
 80013ce:	4b25      	ldr	r3, [pc, #148]	; (8001464 <main+0x104>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	629a      	str	r2, [r3, #40]	; 0x28
	btns[2].flag = 0;
 80013d4:	4b23      	ldr	r3, [pc, #140]	; (8001464 <main+0x104>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	62da      	str	r2, [r3, #44]	; 0x2c
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80013da:	2108      	movs	r1, #8
 80013dc:	4823      	ldr	r0, [pc, #140]	; (800146c <main+0x10c>)
 80013de:	f005 fd23 	bl	8006e28 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80013e2:	210c      	movs	r1, #12
 80013e4:	4821      	ldr	r0, [pc, #132]	; (800146c <main+0x10c>)
 80013e6:	f005 fd1f 	bl	8006e28 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80013ea:	213c      	movs	r1, #60	; 0x3c
 80013ec:	4820      	ldr	r0, [pc, #128]	; (8001470 <main+0x110>)
 80013ee:	f005 fe5f 	bl	80070b0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80013f2:	213c      	movs	r1, #60	; 0x3c
 80013f4:	481f      	ldr	r0, [pc, #124]	; (8001474 <main+0x114>)
 80013f6:	f005 fe5b 	bl	80070b0 <HAL_TIM_Encoder_Start>
	HAL_GPIO_WritePin(STBY, GPIO_PIN_SET);
 80013fa:	2201      	movs	r2, #1
 80013fc:	2108      	movs	r1, #8
 80013fe:	481a      	ldr	r0, [pc, #104]	; (8001468 <main+0x108>)
 8001400:	f004 fe95 	bl	800612e <HAL_GPIO_WritePin>
	TIM4->CCR3 = 15000;
 8001404:	4b1c      	ldr	r3, [pc, #112]	; (8001478 <main+0x118>)
 8001406:	f643 2298 	movw	r2, #15000	; 0x3a98
 800140a:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM4->CCR4 = 15000;
 800140c:	4b1a      	ldr	r3, [pc, #104]	; (8001478 <main+0x118>)
 800140e:	f643 2298 	movw	r2, #15000	; 0x3a98
 8001412:	641a      	str	r2, [r3, #64]	; 0x40
	xSpeed = 15000;
 8001414:	4b19      	ldr	r3, [pc, #100]	; (800147c <main+0x11c>)
 8001416:	f643 2298 	movw	r2, #15000	; 0x3a98
 800141a:	601a      	str	r2, [r3, #0]
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_buf, ADC_BUF_LEN);
 800141c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001420:	4917      	ldr	r1, [pc, #92]	; (8001480 <main+0x120>)
 8001422:	4818      	ldr	r0, [pc, #96]	; (8001484 <main+0x124>)
 8001424:	f003 fcf8 	bl	8004e18 <HAL_ADC_Start_DMA>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 8001428:	2200      	movs	r2, #0
 800142a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800142e:	480e      	ldr	r0, [pc, #56]	; (8001468 <main+0x108>)
 8001430:	f004 fe7d 	bl	800612e <HAL_GPIO_WritePin>
	TIM3->CNT = 1;
 8001434:	4b14      	ldr	r3, [pc, #80]	; (8001488 <main+0x128>)
 8001436:	2201      	movs	r2, #1
 8001438:	625a      	str	r2, [r3, #36]	; 0x24
	TIM1->CNT = 1;
 800143a:	4b14      	ldr	r3, [pc, #80]	; (800148c <main+0x12c>)
 800143c:	2201      	movs	r2, #1
 800143e:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 8001440:	2200      	movs	r2, #0
 8001442:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001446:	4808      	ldr	r0, [pc, #32]	; (8001468 <main+0x108>)
 8001448:	f004 fe71 	bl	800612e <HAL_GPIO_WritePin>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		mainMachine();
 800144c:	f000 fcbc 	bl	8001dc8 <mainMachine>
		 ticksNow = HAL_GetTick();
		 }*/
		//intUartSend(TIM1->CNT);
		/*runMotor(ADELANTE, MOTOR_A);
		 runMotor(ADELANTE, MOTOR_B);*/
		btnMachine(0);
 8001450:	2000      	movs	r0, #0
 8001452:	f001 ffab 	bl	80033ac <btnMachine>
		btnMachine(1);
 8001456:	2001      	movs	r0, #1
 8001458:	f001 ffa8 	bl	80033ac <btnMachine>
		btnMachine(2);
 800145c:	2002      	movs	r0, #2
 800145e:	f001 ffa5 	bl	80033ac <btnMachine>
		mainMachine();
 8001462:	e7f3      	b.n	800144c <main+0xec>
 8001464:	20002348 	.word	0x20002348
 8001468:	40010c00 	.word	0x40010c00
 800146c:	2000025c 	.word	0x2000025c
 8001470:	200001cc 	.word	0x200001cc
 8001474:	20000214 	.word	0x20000214
 8001478:	40000800 	.word	0x40000800
 800147c:	200040a8 	.word	0x200040a8
 8001480:	200002e8 	.word	0x200002e8
 8001484:	20000104 	.word	0x20000104
 8001488:	40000400 	.word	0x40000400
 800148c:	40012c00 	.word	0x40012c00

08001490 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b094      	sub	sp, #80	; 0x50
 8001494:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001496:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800149a:	2228      	movs	r2, #40	; 0x28
 800149c:	2100      	movs	r1, #0
 800149e:	4618      	mov	r0, r3
 80014a0:	f006 fba0 	bl	8007be4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014a4:	f107 0314 	add.w	r3, r7, #20
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	60da      	str	r2, [r3, #12]
 80014b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014b4:	1d3b      	adds	r3, r7, #4
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	605a      	str	r2, [r3, #4]
 80014bc:	609a      	str	r2, [r3, #8]
 80014be:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014c0:	2301      	movs	r3, #1
 80014c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80014ca:	2300      	movs	r3, #0
 80014cc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014ce:	2301      	movs	r3, #1
 80014d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014d2:	2302      	movs	r3, #2
 80014d4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80014dc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80014e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014e6:	4618      	mov	r0, r3
 80014e8:	f004 ff7e 	bl	80063e8 <HAL_RCC_OscConfig>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80014f2:	f002 f807 	bl	8003504 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014f6:	230f      	movs	r3, #15
 80014f8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014fa:	2302      	movs	r3, #2
 80014fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014fe:	2300      	movs	r3, #0
 8001500:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001502:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001506:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001508:	2300      	movs	r3, #0
 800150a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800150c:	f107 0314 	add.w	r3, r7, #20
 8001510:	2102      	movs	r1, #2
 8001512:	4618      	mov	r0, r3
 8001514:	f005 f9ea 	bl	80068ec <HAL_RCC_ClockConfig>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800151e:	f001 fff1 	bl	8003504 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001522:	2302      	movs	r3, #2
 8001524:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001526:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800152a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800152c:	1d3b      	adds	r3, r7, #4
 800152e:	4618      	mov	r0, r3
 8001530:	f005 fb74 	bl	8006c1c <HAL_RCCEx_PeriphCLKConfig>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800153a:	f001 ffe3 	bl	8003504 <Error_Handler>
  }
}
 800153e:	bf00      	nop
 8001540:	3750      	adds	r7, #80	; 0x50
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
	...

08001548 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800154e:	1d3b      	adds	r3, r7, #4
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	605a      	str	r2, [r3, #4]
 8001556:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001558:	4b2e      	ldr	r3, [pc, #184]	; (8001614 <MX_ADC1_Init+0xcc>)
 800155a:	4a2f      	ldr	r2, [pc, #188]	; (8001618 <MX_ADC1_Init+0xd0>)
 800155c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800155e:	4b2d      	ldr	r3, [pc, #180]	; (8001614 <MX_ADC1_Init+0xcc>)
 8001560:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001564:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001566:	4b2b      	ldr	r3, [pc, #172]	; (8001614 <MX_ADC1_Init+0xcc>)
 8001568:	2201      	movs	r2, #1
 800156a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800156c:	4b29      	ldr	r3, [pc, #164]	; (8001614 <MX_ADC1_Init+0xcc>)
 800156e:	2200      	movs	r2, #0
 8001570:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001572:	4b28      	ldr	r3, [pc, #160]	; (8001614 <MX_ADC1_Init+0xcc>)
 8001574:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001578:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800157a:	4b26      	ldr	r3, [pc, #152]	; (8001614 <MX_ADC1_Init+0xcc>)
 800157c:	2200      	movs	r2, #0
 800157e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8001580:	4b24      	ldr	r3, [pc, #144]	; (8001614 <MX_ADC1_Init+0xcc>)
 8001582:	2204      	movs	r2, #4
 8001584:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001586:	4823      	ldr	r0, [pc, #140]	; (8001614 <MX_ADC1_Init+0xcc>)
 8001588:	f003 fb6e 	bl	8004c68 <HAL_ADC_Init>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001592:	f001 ffb7 	bl	8003504 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001596:	2300      	movs	r3, #0
 8001598:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800159a:	2301      	movs	r3, #1
 800159c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800159e:	2300      	movs	r3, #0
 80015a0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015a2:	1d3b      	adds	r3, r7, #4
 80015a4:	4619      	mov	r1, r3
 80015a6:	481b      	ldr	r0, [pc, #108]	; (8001614 <MX_ADC1_Init+0xcc>)
 80015a8:	f003 fd26 	bl	8004ff8 <HAL_ADC_ConfigChannel>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80015b2:	f001 ffa7 	bl	8003504 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80015b6:	2301      	movs	r3, #1
 80015b8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80015ba:	2302      	movs	r3, #2
 80015bc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015be:	1d3b      	adds	r3, r7, #4
 80015c0:	4619      	mov	r1, r3
 80015c2:	4814      	ldr	r0, [pc, #80]	; (8001614 <MX_ADC1_Init+0xcc>)
 80015c4:	f003 fd18 	bl	8004ff8 <HAL_ADC_ConfigChannel>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80015ce:	f001 ff99 	bl	8003504 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80015d2:	2302      	movs	r3, #2
 80015d4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80015d6:	2303      	movs	r3, #3
 80015d8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015da:	1d3b      	adds	r3, r7, #4
 80015dc:	4619      	mov	r1, r3
 80015de:	480d      	ldr	r0, [pc, #52]	; (8001614 <MX_ADC1_Init+0xcc>)
 80015e0:	f003 fd0a 	bl	8004ff8 <HAL_ADC_ConfigChannel>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80015ea:	f001 ff8b 	bl	8003504 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80015ee:	2303      	movs	r3, #3
 80015f0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80015f2:	2304      	movs	r3, #4
 80015f4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015f6:	1d3b      	adds	r3, r7, #4
 80015f8:	4619      	mov	r1, r3
 80015fa:	4806      	ldr	r0, [pc, #24]	; (8001614 <MX_ADC1_Init+0xcc>)
 80015fc:	f003 fcfc 	bl	8004ff8 <HAL_ADC_ConfigChannel>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8001606:	f001 ff7d 	bl	8003504 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800160a:	bf00      	nop
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20000104 	.word	0x20000104
 8001618:	40012400 	.word	0x40012400

0800161c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001620:	4b12      	ldr	r3, [pc, #72]	; (800166c <MX_I2C1_Init+0x50>)
 8001622:	4a13      	ldr	r2, [pc, #76]	; (8001670 <MX_I2C1_Init+0x54>)
 8001624:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001626:	4b11      	ldr	r3, [pc, #68]	; (800166c <MX_I2C1_Init+0x50>)
 8001628:	4a12      	ldr	r2, [pc, #72]	; (8001674 <MX_I2C1_Init+0x58>)
 800162a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800162c:	4b0f      	ldr	r3, [pc, #60]	; (800166c <MX_I2C1_Init+0x50>)
 800162e:	2200      	movs	r2, #0
 8001630:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001632:	4b0e      	ldr	r3, [pc, #56]	; (800166c <MX_I2C1_Init+0x50>)
 8001634:	2200      	movs	r2, #0
 8001636:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001638:	4b0c      	ldr	r3, [pc, #48]	; (800166c <MX_I2C1_Init+0x50>)
 800163a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800163e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001640:	4b0a      	ldr	r3, [pc, #40]	; (800166c <MX_I2C1_Init+0x50>)
 8001642:	2200      	movs	r2, #0
 8001644:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001646:	4b09      	ldr	r3, [pc, #36]	; (800166c <MX_I2C1_Init+0x50>)
 8001648:	2200      	movs	r2, #0
 800164a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800164c:	4b07      	ldr	r3, [pc, #28]	; (800166c <MX_I2C1_Init+0x50>)
 800164e:	2200      	movs	r2, #0
 8001650:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001652:	4b06      	ldr	r3, [pc, #24]	; (800166c <MX_I2C1_Init+0x50>)
 8001654:	2200      	movs	r2, #0
 8001656:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001658:	4804      	ldr	r0, [pc, #16]	; (800166c <MX_I2C1_Init+0x50>)
 800165a:	f004 fd81 	bl	8006160 <HAL_I2C_Init>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001664:	f001 ff4e 	bl	8003504 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001668:	bf00      	nop
 800166a:	bd80      	pop	{r7, pc}
 800166c:	20000178 	.word	0x20000178
 8001670:	40005400 	.word	0x40005400
 8001674:	000186a0 	.word	0x000186a0

08001678 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b08c      	sub	sp, #48	; 0x30
 800167c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800167e:	f107 030c 	add.w	r3, r7, #12
 8001682:	2224      	movs	r2, #36	; 0x24
 8001684:	2100      	movs	r1, #0
 8001686:	4618      	mov	r0, r3
 8001688:	f006 faac 	bl	8007be4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800168c:	1d3b      	adds	r3, r7, #4
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001694:	4b22      	ldr	r3, [pc, #136]	; (8001720 <MX_TIM1_Init+0xa8>)
 8001696:	4a23      	ldr	r2, [pc, #140]	; (8001724 <MX_TIM1_Init+0xac>)
 8001698:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800169a:	4b21      	ldr	r3, [pc, #132]	; (8001720 <MX_TIM1_Init+0xa8>)
 800169c:	2200      	movs	r2, #0
 800169e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016a0:	4b1f      	ldr	r3, [pc, #124]	; (8001720 <MX_TIM1_Init+0xa8>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80016a6:	4b1e      	ldr	r3, [pc, #120]	; (8001720 <MX_TIM1_Init+0xa8>)
 80016a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016ac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016ae:	4b1c      	ldr	r3, [pc, #112]	; (8001720 <MX_TIM1_Init+0xa8>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016b4:	4b1a      	ldr	r3, [pc, #104]	; (8001720 <MX_TIM1_Init+0xa8>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016ba:	4b19      	ldr	r3, [pc, #100]	; (8001720 <MX_TIM1_Init+0xa8>)
 80016bc:	2280      	movs	r2, #128	; 0x80
 80016be:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80016c0:	2303      	movs	r3, #3
 80016c2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80016c4:	2300      	movs	r3, #0
 80016c6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80016c8:	2301      	movs	r3, #1
 80016ca:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80016cc:	2300      	movs	r3, #0
 80016ce:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80016d0:	230a      	movs	r3, #10
 80016d2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80016d4:	2300      	movs	r3, #0
 80016d6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80016d8:	2301      	movs	r3, #1
 80016da:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80016dc:	2300      	movs	r3, #0
 80016de:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 80016e0:	230a      	movs	r3, #10
 80016e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80016e4:	f107 030c 	add.w	r3, r7, #12
 80016e8:	4619      	mov	r1, r3
 80016ea:	480d      	ldr	r0, [pc, #52]	; (8001720 <MX_TIM1_Init+0xa8>)
 80016ec:	f005 fc3e 	bl	8006f6c <HAL_TIM_Encoder_Init>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80016f6:	f001 ff05 	bl	8003504 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016fa:	2300      	movs	r3, #0
 80016fc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016fe:	2300      	movs	r3, #0
 8001700:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001702:	1d3b      	adds	r3, r7, #4
 8001704:	4619      	mov	r1, r3
 8001706:	4806      	ldr	r0, [pc, #24]	; (8001720 <MX_TIM1_Init+0xa8>)
 8001708:	f006 f82c 	bl	8007764 <HAL_TIMEx_MasterConfigSynchronization>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001712:	f001 fef7 	bl	8003504 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001716:	bf00      	nop
 8001718:	3730      	adds	r7, #48	; 0x30
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	200001cc 	.word	0x200001cc
 8001724:	40012c00 	.word	0x40012c00

08001728 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b08c      	sub	sp, #48	; 0x30
 800172c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800172e:	f107 030c 	add.w	r3, r7, #12
 8001732:	2224      	movs	r2, #36	; 0x24
 8001734:	2100      	movs	r1, #0
 8001736:	4618      	mov	r0, r3
 8001738:	f006 fa54 	bl	8007be4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800173c:	1d3b      	adds	r3, r7, #4
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001744:	4b20      	ldr	r3, [pc, #128]	; (80017c8 <MX_TIM3_Init+0xa0>)
 8001746:	4a21      	ldr	r2, [pc, #132]	; (80017cc <MX_TIM3_Init+0xa4>)
 8001748:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800174a:	4b1f      	ldr	r3, [pc, #124]	; (80017c8 <MX_TIM3_Init+0xa0>)
 800174c:	2200      	movs	r2, #0
 800174e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001750:	4b1d      	ldr	r3, [pc, #116]	; (80017c8 <MX_TIM3_Init+0xa0>)
 8001752:	2200      	movs	r2, #0
 8001754:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001756:	4b1c      	ldr	r3, [pc, #112]	; (80017c8 <MX_TIM3_Init+0xa0>)
 8001758:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800175c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800175e:	4b1a      	ldr	r3, [pc, #104]	; (80017c8 <MX_TIM3_Init+0xa0>)
 8001760:	2200      	movs	r2, #0
 8001762:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001764:	4b18      	ldr	r3, [pc, #96]	; (80017c8 <MX_TIM3_Init+0xa0>)
 8001766:	2280      	movs	r2, #128	; 0x80
 8001768:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800176a:	2303      	movs	r3, #3
 800176c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800176e:	2300      	movs	r3, #0
 8001770:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001772:	2301      	movs	r3, #1
 8001774:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001776:	2300      	movs	r3, #0
 8001778:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800177a:	230a      	movs	r3, #10
 800177c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800177e:	2300      	movs	r3, #0
 8001780:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001782:	2301      	movs	r3, #1
 8001784:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001786:	2300      	movs	r3, #0
 8001788:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800178a:	2300      	movs	r3, #0
 800178c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800178e:	f107 030c 	add.w	r3, r7, #12
 8001792:	4619      	mov	r1, r3
 8001794:	480c      	ldr	r0, [pc, #48]	; (80017c8 <MX_TIM3_Init+0xa0>)
 8001796:	f005 fbe9 	bl	8006f6c <HAL_TIM_Encoder_Init>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80017a0:	f001 feb0 	bl	8003504 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017a4:	2300      	movs	r3, #0
 80017a6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017a8:	2300      	movs	r3, #0
 80017aa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017ac:	1d3b      	adds	r3, r7, #4
 80017ae:	4619      	mov	r1, r3
 80017b0:	4805      	ldr	r0, [pc, #20]	; (80017c8 <MX_TIM3_Init+0xa0>)
 80017b2:	f005 ffd7 	bl	8007764 <HAL_TIMEx_MasterConfigSynchronization>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80017bc:	f001 fea2 	bl	8003504 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80017c0:	bf00      	nop
 80017c2:	3730      	adds	r7, #48	; 0x30
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	20000214 	.word	0x20000214
 80017cc:	40000400 	.word	0x40000400

080017d0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b08a      	sub	sp, #40	; 0x28
 80017d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017d6:	f107 0320 	add.w	r3, r7, #32
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017e0:	1d3b      	adds	r3, r7, #4
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]
 80017e6:	605a      	str	r2, [r3, #4]
 80017e8:	609a      	str	r2, [r3, #8]
 80017ea:	60da      	str	r2, [r3, #12]
 80017ec:	611a      	str	r2, [r3, #16]
 80017ee:	615a      	str	r2, [r3, #20]
 80017f0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80017f2:	4b27      	ldr	r3, [pc, #156]	; (8001890 <MX_TIM4_Init+0xc0>)
 80017f4:	4a27      	ldr	r2, [pc, #156]	; (8001894 <MX_TIM4_Init+0xc4>)
 80017f6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80017f8:	4b25      	ldr	r3, [pc, #148]	; (8001890 <MX_TIM4_Init+0xc0>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017fe:	4b24      	ldr	r3, [pc, #144]	; (8001890 <MX_TIM4_Init+0xc0>)
 8001800:	2200      	movs	r2, #0
 8001802:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001804:	4b22      	ldr	r3, [pc, #136]	; (8001890 <MX_TIM4_Init+0xc0>)
 8001806:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800180a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800180c:	4b20      	ldr	r3, [pc, #128]	; (8001890 <MX_TIM4_Init+0xc0>)
 800180e:	2200      	movs	r2, #0
 8001810:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001812:	4b1f      	ldr	r3, [pc, #124]	; (8001890 <MX_TIM4_Init+0xc0>)
 8001814:	2200      	movs	r2, #0
 8001816:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001818:	481d      	ldr	r0, [pc, #116]	; (8001890 <MX_TIM4_Init+0xc0>)
 800181a:	f005 fab5 	bl	8006d88 <HAL_TIM_PWM_Init>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001824:	f001 fe6e 	bl	8003504 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001828:	2300      	movs	r3, #0
 800182a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800182c:	2300      	movs	r3, #0
 800182e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001830:	f107 0320 	add.w	r3, r7, #32
 8001834:	4619      	mov	r1, r3
 8001836:	4816      	ldr	r0, [pc, #88]	; (8001890 <MX_TIM4_Init+0xc0>)
 8001838:	f005 ff94 	bl	8007764 <HAL_TIMEx_MasterConfigSynchronization>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001842:	f001 fe5f 	bl	8003504 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001846:	2360      	movs	r3, #96	; 0x60
 8001848:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800184a:	2300      	movs	r3, #0
 800184c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800184e:	2300      	movs	r3, #0
 8001850:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001852:	2300      	movs	r3, #0
 8001854:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001856:	1d3b      	adds	r3, r7, #4
 8001858:	2208      	movs	r2, #8
 800185a:	4619      	mov	r1, r3
 800185c:	480c      	ldr	r0, [pc, #48]	; (8001890 <MX_TIM4_Init+0xc0>)
 800185e:	f005 fcb5 	bl	80071cc <HAL_TIM_PWM_ConfigChannel>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001868:	f001 fe4c 	bl	8003504 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800186c:	1d3b      	adds	r3, r7, #4
 800186e:	220c      	movs	r2, #12
 8001870:	4619      	mov	r1, r3
 8001872:	4807      	ldr	r0, [pc, #28]	; (8001890 <MX_TIM4_Init+0xc0>)
 8001874:	f005 fcaa 	bl	80071cc <HAL_TIM_PWM_ConfigChannel>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800187e:	f001 fe41 	bl	8003504 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001882:	4803      	ldr	r0, [pc, #12]	; (8001890 <MX_TIM4_Init+0xc0>)
 8001884:	f002 fde2 	bl	800444c <HAL_TIM_MspPostInit>

}
 8001888:	bf00      	nop
 800188a:	3728      	adds	r7, #40	; 0x28
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	2000025c 	.word	0x2000025c
 8001894:	40000800 	.word	0x40000800

08001898 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800189c:	4b11      	ldr	r3, [pc, #68]	; (80018e4 <MX_USART3_UART_Init+0x4c>)
 800189e:	4a12      	ldr	r2, [pc, #72]	; (80018e8 <MX_USART3_UART_Init+0x50>)
 80018a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80018a2:	4b10      	ldr	r3, [pc, #64]	; (80018e4 <MX_USART3_UART_Init+0x4c>)
 80018a4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80018a8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80018aa:	4b0e      	ldr	r3, [pc, #56]	; (80018e4 <MX_USART3_UART_Init+0x4c>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80018b0:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <MX_USART3_UART_Init+0x4c>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80018b6:	4b0b      	ldr	r3, [pc, #44]	; (80018e4 <MX_USART3_UART_Init+0x4c>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80018bc:	4b09      	ldr	r3, [pc, #36]	; (80018e4 <MX_USART3_UART_Init+0x4c>)
 80018be:	220c      	movs	r2, #12
 80018c0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018c2:	4b08      	ldr	r3, [pc, #32]	; (80018e4 <MX_USART3_UART_Init+0x4c>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80018c8:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <MX_USART3_UART_Init+0x4c>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80018ce:	4805      	ldr	r0, [pc, #20]	; (80018e4 <MX_USART3_UART_Init+0x4c>)
 80018d0:	f005 ffa6 	bl	8007820 <HAL_UART_Init>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80018da:	f001 fe13 	bl	8003504 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	200002a4 	.word	0x200002a4
 80018e8:	40004800 	.word	0x40004800

080018ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018f2:	4b0c      	ldr	r3, [pc, #48]	; (8001924 <MX_DMA_Init+0x38>)
 80018f4:	695b      	ldr	r3, [r3, #20]
 80018f6:	4a0b      	ldr	r2, [pc, #44]	; (8001924 <MX_DMA_Init+0x38>)
 80018f8:	f043 0301 	orr.w	r3, r3, #1
 80018fc:	6153      	str	r3, [r2, #20]
 80018fe:	4b09      	ldr	r3, [pc, #36]	; (8001924 <MX_DMA_Init+0x38>)
 8001900:	695b      	ldr	r3, [r3, #20]
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	607b      	str	r3, [r7, #4]
 8001908:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800190a:	2200      	movs	r2, #0
 800190c:	2100      	movs	r1, #0
 800190e:	200b      	movs	r0, #11
 8001910:	f003 fe43 	bl	800559a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001914:	200b      	movs	r0, #11
 8001916:	f003 fe5c 	bl	80055d2 <HAL_NVIC_EnableIRQ>

}
 800191a:	bf00      	nop
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	40021000 	.word	0x40021000

08001928 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b088      	sub	sp, #32
 800192c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800192e:	f107 0310 	add.w	r3, r7, #16
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	605a      	str	r2, [r3, #4]
 8001938:	609a      	str	r2, [r3, #8]
 800193a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800193c:	4b3f      	ldr	r3, [pc, #252]	; (8001a3c <MX_GPIO_Init+0x114>)
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	4a3e      	ldr	r2, [pc, #248]	; (8001a3c <MX_GPIO_Init+0x114>)
 8001942:	f043 0310 	orr.w	r3, r3, #16
 8001946:	6193      	str	r3, [r2, #24]
 8001948:	4b3c      	ldr	r3, [pc, #240]	; (8001a3c <MX_GPIO_Init+0x114>)
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	f003 0310 	and.w	r3, r3, #16
 8001950:	60fb      	str	r3, [r7, #12]
 8001952:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001954:	4b39      	ldr	r3, [pc, #228]	; (8001a3c <MX_GPIO_Init+0x114>)
 8001956:	699b      	ldr	r3, [r3, #24]
 8001958:	4a38      	ldr	r2, [pc, #224]	; (8001a3c <MX_GPIO_Init+0x114>)
 800195a:	f043 0320 	orr.w	r3, r3, #32
 800195e:	6193      	str	r3, [r2, #24]
 8001960:	4b36      	ldr	r3, [pc, #216]	; (8001a3c <MX_GPIO_Init+0x114>)
 8001962:	699b      	ldr	r3, [r3, #24]
 8001964:	f003 0320 	and.w	r3, r3, #32
 8001968:	60bb      	str	r3, [r7, #8]
 800196a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800196c:	4b33      	ldr	r3, [pc, #204]	; (8001a3c <MX_GPIO_Init+0x114>)
 800196e:	699b      	ldr	r3, [r3, #24]
 8001970:	4a32      	ldr	r2, [pc, #200]	; (8001a3c <MX_GPIO_Init+0x114>)
 8001972:	f043 0304 	orr.w	r3, r3, #4
 8001976:	6193      	str	r3, [r2, #24]
 8001978:	4b30      	ldr	r3, [pc, #192]	; (8001a3c <MX_GPIO_Init+0x114>)
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	f003 0304 	and.w	r3, r3, #4
 8001980:	607b      	str	r3, [r7, #4]
 8001982:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001984:	4b2d      	ldr	r3, [pc, #180]	; (8001a3c <MX_GPIO_Init+0x114>)
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	4a2c      	ldr	r2, [pc, #176]	; (8001a3c <MX_GPIO_Init+0x114>)
 800198a:	f043 0308 	orr.w	r3, r3, #8
 800198e:	6193      	str	r3, [r2, #24]
 8001990:	4b2a      	ldr	r3, [pc, #168]	; (8001a3c <MX_GPIO_Init+0x114>)
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	f003 0308 	and.w	r3, r3, #8
 8001998:	603b      	str	r3, [r7, #0]
 800199a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800199c:	2200      	movs	r2, #0
 800199e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019a2:	4827      	ldr	r0, [pc, #156]	; (8001a40 <MX_GPIO_Init+0x118>)
 80019a4:	f004 fbc3 	bl	800612e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|STBY_Pin|AIN1_Pin|AIN2_Pin, GPIO_PIN_RESET);
 80019a8:	2200      	movs	r2, #0
 80019aa:	f248 0138 	movw	r1, #32824	; 0x8038
 80019ae:	4825      	ldr	r0, [pc, #148]	; (8001a44 <MX_GPIO_Init+0x11c>)
 80019b0:	f004 fbbd 	bl	800612e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BIN2_Pin|BIN1_Pin, GPIO_PIN_RESET);
 80019b4:	2200      	movs	r2, #0
 80019b6:	f44f 4110 	mov.w	r1, #36864	; 0x9000
 80019ba:	4823      	ldr	r0, [pc, #140]	; (8001a48 <MX_GPIO_Init+0x120>)
 80019bc:	f004 fbb7 	bl	800612e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80019c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c6:	2301      	movs	r3, #1
 80019c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ca:	2300      	movs	r3, #0
 80019cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ce:	2302      	movs	r3, #2
 80019d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019d2:	f107 0310 	add.w	r3, r7, #16
 80019d6:	4619      	mov	r1, r3
 80019d8:	4819      	ldr	r0, [pc, #100]	; (8001a40 <MX_GPIO_Init+0x118>)
 80019da:	f004 fa0d 	bl	8005df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN1_Pin BTN2_Pin BTN3_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin|BTN3_Pin;
 80019de:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80019e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019e4:	2300      	movs	r3, #0
 80019e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019e8:	2301      	movs	r3, #1
 80019ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ec:	f107 0310 	add.w	r3, r7, #16
 80019f0:	4619      	mov	r1, r3
 80019f2:	4814      	ldr	r0, [pc, #80]	; (8001a44 <MX_GPIO_Init+0x11c>)
 80019f4:	f004 fa00 	bl	8005df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin STBY_Pin AIN1_Pin AIN2_Pin */
  GPIO_InitStruct.Pin = LED_Pin|STBY_Pin|AIN1_Pin|AIN2_Pin;
 80019f8:	f248 0338 	movw	r3, #32824	; 0x8038
 80019fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019fe:	2301      	movs	r3, #1
 8001a00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a02:	2300      	movs	r3, #0
 8001a04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a06:	2302      	movs	r3, #2
 8001a08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a0a:	f107 0310 	add.w	r3, r7, #16
 8001a0e:	4619      	mov	r1, r3
 8001a10:	480c      	ldr	r0, [pc, #48]	; (8001a44 <MX_GPIO_Init+0x11c>)
 8001a12:	f004 f9f1 	bl	8005df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BIN2_Pin BIN1_Pin */
  GPIO_InitStruct.Pin = BIN2_Pin|BIN1_Pin;
 8001a16:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8001a1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a20:	2300      	movs	r3, #0
 8001a22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a24:	2302      	movs	r3, #2
 8001a26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a28:	f107 0310 	add.w	r3, r7, #16
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4806      	ldr	r0, [pc, #24]	; (8001a48 <MX_GPIO_Init+0x120>)
 8001a30:	f004 f9e2 	bl	8005df8 <HAL_GPIO_Init>

}
 8001a34:	bf00      	nop
 8001a36:	3720      	adds	r7, #32
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	40011000 	.word	0x40011000
 8001a44:	40010c00 	.word	0x40010c00
 8001a48:	40010800 	.word	0x40010800
 8001a4c:	00000000 	.word	0x00000000

08001a50 <intUartSend>:

/* USER CODE BEGIN 4 */

void intUartSend(float entero) {
 8001a50:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a54:	b088      	sub	sp, #32
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
	int d;
	int u;
	int de1;
	int de2;

	m = abs(entero / 1000);
 8001a5a:	497d      	ldr	r1, [pc, #500]	; (8001c50 <intUartSend+0x200>)
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f7ff fa45 	bl	8000eec <__aeabi_fdiv>
 8001a62:	4603      	mov	r3, r0
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff fb53 	bl	8001110 <__aeabi_f2iz>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	bfb8      	it	lt
 8001a70:	425b      	neglt	r3, r3
 8001a72:	61fb      	str	r3, [r7, #28]
	c = abs(entero / 100) - m * 10;
 8001a74:	4977      	ldr	r1, [pc, #476]	; (8001c54 <intUartSend+0x204>)
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f7ff fa38 	bl	8000eec <__aeabi_fdiv>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7ff fb46 	bl	8001110 <__aeabi_f2iz>
 8001a84:	4603      	mov	r3, r0
 8001a86:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001a8a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	f06f 0109 	mvn.w	r1, #9
 8001a94:	fb01 f303 	mul.w	r3, r1, r3
 8001a98:	4413      	add	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
	d = abs(entero / 10) - (m * 100 + c * 10);
 8001a9c:	496e      	ldr	r1, [pc, #440]	; (8001c58 <intUartSend+0x208>)
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f7ff fa24 	bl	8000eec <__aeabi_fdiv>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7ff fb32 	bl	8001110 <__aeabi_f2iz>
 8001aac:	4603      	mov	r3, r0
 8001aae:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8001ab2:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	2264      	movs	r2, #100	; 0x64
 8001aba:	fb02 f003 	mul.w	r0, r2, r3
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	4413      	add	r3, r2
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	4403      	add	r3, r0
 8001aca:	1acb      	subs	r3, r1, r3
 8001acc:	617b      	str	r3, [r7, #20]
	u = abs(entero) - (m * 1000 + c * 100 + d * 10);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f7ff fb1e 	bl	8001110 <__aeabi_f2iz>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8001ada:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ae4:	fb03 f202 	mul.w	r2, r3, r2
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	2064      	movs	r0, #100	; 0x64
 8001aec:	fb00 f303 	mul.w	r3, r0, r3
 8001af0:	18d0      	adds	r0, r2, r3
 8001af2:	697a      	ldr	r2, [r7, #20]
 8001af4:	4613      	mov	r3, r2
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	4413      	add	r3, r2
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	4403      	add	r3, r0
 8001afe:	1acb      	subs	r3, r1, r3
 8001b00:	613b      	str	r3, [r7, #16]
	if (entero > 0) {
 8001b02:	f04f 0100 	mov.w	r1, #0
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f7ff faf8 	bl	80010fc <__aeabi_fcmpgt>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	f000 80aa 	beq.w	8001c68 <intUartSend+0x218>
		de1 = (entero - (m * 1000 + c * 100 + d * 10 + u)) * 10;
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b1a:	fb03 f202 	mul.w	r2, r3, r2
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	2164      	movs	r1, #100	; 0x64
 8001b22:	fb01 f303 	mul.w	r3, r1, r3
 8001b26:	18d1      	adds	r1, r2, r3
 8001b28:	697a      	ldr	r2, [r7, #20]
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	4413      	add	r3, r2
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	18ca      	adds	r2, r1, r3
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	4413      	add	r3, r2
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff f8cf 	bl	8000cdc <__aeabi_i2f>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	4619      	mov	r1, r3
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f7ff f814 	bl	8000b70 <__aeabi_fsub>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	4943      	ldr	r1, [pc, #268]	; (8001c58 <intUartSend+0x208>)
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff f919 	bl	8000d84 <__aeabi_fmul>
 8001b52:	4603      	mov	r3, r0
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff fadb 	bl	8001110 <__aeabi_f2iz>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	60fb      	str	r3, [r7, #12]
		de2 = (entero - (m * 1000 + c * 100 + d * 10 + u + de1 * 0.1)) * 100;
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f7fe fc62 	bl	8000428 <__aeabi_f2d>
 8001b64:	4604      	mov	r4, r0
 8001b66:	460d      	mov	r5, r1
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b6e:	fb03 f202 	mul.w	r2, r3, r2
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	2164      	movs	r1, #100	; 0x64
 8001b76:	fb01 f303 	mul.w	r3, r1, r3
 8001b7a:	18d1      	adds	r1, r2, r3
 8001b7c:	697a      	ldr	r2, [r7, #20]
 8001b7e:	4613      	mov	r3, r2
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	4413      	add	r3, r2
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	18ca      	adds	r2, r1, r3
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7fe fc39 	bl	8000404 <__aeabi_i2d>
 8001b92:	4680      	mov	r8, r0
 8001b94:	4689      	mov	r9, r1
 8001b96:	68f8      	ldr	r0, [r7, #12]
 8001b98:	f7fe fc34 	bl	8000404 <__aeabi_i2d>
 8001b9c:	a32a      	add	r3, pc, #168	; (adr r3, 8001c48 <intUartSend+0x1f8>)
 8001b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba2:	f7fe fc99 	bl	80004d8 <__aeabi_dmul>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	460b      	mov	r3, r1
 8001baa:	4640      	mov	r0, r8
 8001bac:	4649      	mov	r1, r9
 8001bae:	f7fe fadd 	bl	800016c <__adddf3>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	4620      	mov	r0, r4
 8001bb8:	4629      	mov	r1, r5
 8001bba:	f7fe fad5 	bl	8000168 <__aeabi_dsub>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	4610      	mov	r0, r2
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	f04f 0200 	mov.w	r2, #0
 8001bca:	4b24      	ldr	r3, [pc, #144]	; (8001c5c <intUartSend+0x20c>)
 8001bcc:	f7fe fc84 	bl	80004d8 <__aeabi_dmul>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	4610      	mov	r0, r2
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	f7fe ff2e 	bl	8000a38 <__aeabi_d2iz>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	60bb      	str	r3, [r7, #8]
		TX_BUFFER[0] = m + '0';
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	3330      	adds	r3, #48	; 0x30
 8001be6:	b2da      	uxtb	r2, r3
 8001be8:	4b1d      	ldr	r3, [pc, #116]	; (8001c60 <intUartSend+0x210>)
 8001bea:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = c + '0';
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	3330      	adds	r3, #48	; 0x30
 8001bf2:	b2da      	uxtb	r2, r3
 8001bf4:	4b1a      	ldr	r3, [pc, #104]	; (8001c60 <intUartSend+0x210>)
 8001bf6:	705a      	strb	r2, [r3, #1]
		TX_BUFFER[2] = d + '0';
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	3330      	adds	r3, #48	; 0x30
 8001bfe:	b2da      	uxtb	r2, r3
 8001c00:	4b17      	ldr	r3, [pc, #92]	; (8001c60 <intUartSend+0x210>)
 8001c02:	709a      	strb	r2, [r3, #2]
		TX_BUFFER[3] = u + '0';
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	3330      	adds	r3, #48	; 0x30
 8001c0a:	b2da      	uxtb	r2, r3
 8001c0c:	4b14      	ldr	r3, [pc, #80]	; (8001c60 <intUartSend+0x210>)
 8001c0e:	70da      	strb	r2, [r3, #3]
		TX_BUFFER[4] = ',';
 8001c10:	4b13      	ldr	r3, [pc, #76]	; (8001c60 <intUartSend+0x210>)
 8001c12:	222c      	movs	r2, #44	; 0x2c
 8001c14:	711a      	strb	r2, [r3, #4]
		TX_BUFFER[5] = de1 + '0';
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	3330      	adds	r3, #48	; 0x30
 8001c1c:	b2da      	uxtb	r2, r3
 8001c1e:	4b10      	ldr	r3, [pc, #64]	; (8001c60 <intUartSend+0x210>)
 8001c20:	715a      	strb	r2, [r3, #5]
		TX_BUFFER[6] = de2 + '0';
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	3330      	adds	r3, #48	; 0x30
 8001c28:	b2da      	uxtb	r2, r3
 8001c2a:	4b0d      	ldr	r3, [pc, #52]	; (8001c60 <intUartSend+0x210>)
 8001c2c:	719a      	strb	r2, [r3, #6]
		TX_BUFFER[7] = '\n';
 8001c2e:	4b0c      	ldr	r3, [pc, #48]	; (8001c60 <intUartSend+0x210>)
 8001c30:	220a      	movs	r2, #10
 8001c32:	71da      	strb	r2, [r3, #7]
		HAL_UART_Transmit(&huart3, TX_BUFFER, 8, 100);
 8001c34:	2364      	movs	r3, #100	; 0x64
 8001c36:	2208      	movs	r2, #8
 8001c38:	4909      	ldr	r1, [pc, #36]	; (8001c60 <intUartSend+0x210>)
 8001c3a:	480a      	ldr	r0, [pc, #40]	; (8001c64 <intUartSend+0x214>)
 8001c3c:	f005 fe3d 	bl	80078ba <HAL_UART_Transmit>
	 TX_BUFFER[4] = ',';
	 TX_BUFFER[5] = de1 + '0';
	 TX_BUFFER[6] = de2 + '0';
	 TX_BUFFER[7] = '\n';
	 HAL_UART_Transmit(&huart3, TX_BUFFER, 8, 100);*/
}
 8001c40:	e0b1      	b.n	8001da6 <intUartSend+0x356>
 8001c42:	bf00      	nop
 8001c44:	f3af 8000 	nop.w
 8001c48:	9999999a 	.word	0x9999999a
 8001c4c:	3fb99999 	.word	0x3fb99999
 8001c50:	447a0000 	.word	0x447a0000
 8001c54:	42c80000 	.word	0x42c80000
 8001c58:	41200000 	.word	0x41200000
 8001c5c:	40590000 	.word	0x40590000
 8001c60:	20002324 	.word	0x20002324
 8001c64:	200002a4 	.word	0x200002a4
		de1 = ((-(entero)) - (m * 1000 + c * 100 + d * 10 + u)) * 10;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c74:	fb03 f202 	mul.w	r2, r3, r2
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	2164      	movs	r1, #100	; 0x64
 8001c7c:	fb01 f303 	mul.w	r3, r1, r3
 8001c80:	18d1      	adds	r1, r2, r3
 8001c82:	697a      	ldr	r2, [r7, #20]
 8001c84:	4613      	mov	r3, r2
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	4413      	add	r3, r2
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	18ca      	adds	r2, r1, r3
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	4413      	add	r3, r2
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7ff f822 	bl	8000cdc <__aeabi_i2f>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4620      	mov	r0, r4
 8001c9e:	f7fe ff67 	bl	8000b70 <__aeabi_fsub>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	4944      	ldr	r1, [pc, #272]	; (8001db8 <intUartSend+0x368>)
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7ff f86c 	bl	8000d84 <__aeabi_fmul>
 8001cac:	4603      	mov	r3, r0
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7ff fa2e 	bl	8001110 <__aeabi_f2iz>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	60fb      	str	r3, [r7, #12]
		de2 = ((-(entero)) - (m * 1000 + c * 100 + d * 10 + u + de1 * 0.1))
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7fe fbb2 	bl	8000428 <__aeabi_f2d>
 8001cc4:	4604      	mov	r4, r0
 8001cc6:	460d      	mov	r5, r1
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001cce:	fb03 f202 	mul.w	r2, r3, r2
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	2164      	movs	r1, #100	; 0x64
 8001cd6:	fb01 f303 	mul.w	r3, r1, r3
 8001cda:	18d1      	adds	r1, r2, r3
 8001cdc:	697a      	ldr	r2, [r7, #20]
 8001cde:	4613      	mov	r3, r2
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	4413      	add	r3, r2
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	18ca      	adds	r2, r1, r3
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	4413      	add	r3, r2
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7fe fb89 	bl	8000404 <__aeabi_i2d>
 8001cf2:	4680      	mov	r8, r0
 8001cf4:	4689      	mov	r9, r1
 8001cf6:	68f8      	ldr	r0, [r7, #12]
 8001cf8:	f7fe fb84 	bl	8000404 <__aeabi_i2d>
 8001cfc:	a32c      	add	r3, pc, #176	; (adr r3, 8001db0 <intUartSend+0x360>)
 8001cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d02:	f7fe fbe9 	bl	80004d8 <__aeabi_dmul>
 8001d06:	4602      	mov	r2, r0
 8001d08:	460b      	mov	r3, r1
 8001d0a:	4640      	mov	r0, r8
 8001d0c:	4649      	mov	r1, r9
 8001d0e:	f7fe fa2d 	bl	800016c <__adddf3>
 8001d12:	4602      	mov	r2, r0
 8001d14:	460b      	mov	r3, r1
 8001d16:	4620      	mov	r0, r4
 8001d18:	4629      	mov	r1, r5
 8001d1a:	f7fe fa25 	bl	8000168 <__aeabi_dsub>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	460b      	mov	r3, r1
 8001d22:	4610      	mov	r0, r2
 8001d24:	4619      	mov	r1, r3
				* 100;
 8001d26:	f04f 0200 	mov.w	r2, #0
 8001d2a:	4b24      	ldr	r3, [pc, #144]	; (8001dbc <intUartSend+0x36c>)
 8001d2c:	f7fe fbd4 	bl	80004d8 <__aeabi_dmul>
 8001d30:	4602      	mov	r2, r0
 8001d32:	460b      	mov	r3, r1
		de2 = ((-(entero)) - (m * 1000 + c * 100 + d * 10 + u + de1 * 0.1))
 8001d34:	4610      	mov	r0, r2
 8001d36:	4619      	mov	r1, r3
 8001d38:	f7fe fe7e 	bl	8000a38 <__aeabi_d2iz>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	60bb      	str	r3, [r7, #8]
		TX_BUFFER[0] = '-';
 8001d40:	4b1f      	ldr	r3, [pc, #124]	; (8001dc0 <intUartSend+0x370>)
 8001d42:	222d      	movs	r2, #45	; 0x2d
 8001d44:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = m + '0';
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	3330      	adds	r3, #48	; 0x30
 8001d4c:	b2da      	uxtb	r2, r3
 8001d4e:	4b1c      	ldr	r3, [pc, #112]	; (8001dc0 <intUartSend+0x370>)
 8001d50:	705a      	strb	r2, [r3, #1]
		TX_BUFFER[2] = c + '0';
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	3330      	adds	r3, #48	; 0x30
 8001d58:	b2da      	uxtb	r2, r3
 8001d5a:	4b19      	ldr	r3, [pc, #100]	; (8001dc0 <intUartSend+0x370>)
 8001d5c:	709a      	strb	r2, [r3, #2]
		TX_BUFFER[3] = d + '0';
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	3330      	adds	r3, #48	; 0x30
 8001d64:	b2da      	uxtb	r2, r3
 8001d66:	4b16      	ldr	r3, [pc, #88]	; (8001dc0 <intUartSend+0x370>)
 8001d68:	70da      	strb	r2, [r3, #3]
		TX_BUFFER[4] = u + '0';
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	3330      	adds	r3, #48	; 0x30
 8001d70:	b2da      	uxtb	r2, r3
 8001d72:	4b13      	ldr	r3, [pc, #76]	; (8001dc0 <intUartSend+0x370>)
 8001d74:	711a      	strb	r2, [r3, #4]
		TX_BUFFER[5] = ',';
 8001d76:	4b12      	ldr	r3, [pc, #72]	; (8001dc0 <intUartSend+0x370>)
 8001d78:	222c      	movs	r2, #44	; 0x2c
 8001d7a:	715a      	strb	r2, [r3, #5]
		TX_BUFFER[6] = de1 + '0';
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	3330      	adds	r3, #48	; 0x30
 8001d82:	b2da      	uxtb	r2, r3
 8001d84:	4b0e      	ldr	r3, [pc, #56]	; (8001dc0 <intUartSend+0x370>)
 8001d86:	719a      	strb	r2, [r3, #6]
		TX_BUFFER[7] = de2 + '0';
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	3330      	adds	r3, #48	; 0x30
 8001d8e:	b2da      	uxtb	r2, r3
 8001d90:	4b0b      	ldr	r3, [pc, #44]	; (8001dc0 <intUartSend+0x370>)
 8001d92:	71da      	strb	r2, [r3, #7]
		TX_BUFFER[8] = '\n';
 8001d94:	4b0a      	ldr	r3, [pc, #40]	; (8001dc0 <intUartSend+0x370>)
 8001d96:	220a      	movs	r2, #10
 8001d98:	721a      	strb	r2, [r3, #8]
		HAL_UART_Transmit(&huart3, TX_BUFFER, 9, 100);
 8001d9a:	2364      	movs	r3, #100	; 0x64
 8001d9c:	2209      	movs	r2, #9
 8001d9e:	4908      	ldr	r1, [pc, #32]	; (8001dc0 <intUartSend+0x370>)
 8001da0:	4808      	ldr	r0, [pc, #32]	; (8001dc4 <intUartSend+0x374>)
 8001da2:	f005 fd8a 	bl	80078ba <HAL_UART_Transmit>
}
 8001da6:	bf00      	nop
 8001da8:	3720      	adds	r7, #32
 8001daa:	46bd      	mov	sp, r7
 8001dac:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001db0:	9999999a 	.word	0x9999999a
 8001db4:	3fb99999 	.word	0x3fb99999
 8001db8:	41200000 	.word	0x41200000
 8001dbc:	40590000 	.word	0x40590000
 8001dc0:	20002324 	.word	0x20002324
 8001dc4:	200002a4 	.word	0x200002a4

08001dc8 <mainMachine>:

void mainMachine() {
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
	switch (mainState) {
 8001dcc:	4b90      	ldr	r3, [pc, #576]	; (8002010 <mainMachine+0x248>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2b04      	cmp	r3, #4
 8001dd2:	f200 81ad 	bhi.w	8002130 <mainMachine+0x368>
 8001dd6:	a201      	add	r2, pc, #4	; (adr r2, 8001ddc <mainMachine+0x14>)
 8001dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ddc:	08001df1 	.word	0x08001df1
 8001de0:	08001f97 	.word	0x08001f97
 8001de4:	08002089 	.word	0x08002089
 8001de8:	08002127 	.word	0x08002127
 8001dec:	08001f91 	.word	0x08001f91
	case SETUP:
		actual.x = ALTO;
 8001df0:	4b88      	ldr	r3, [pc, #544]	; (8002014 <mainMachine+0x24c>)
 8001df2:	2208      	movs	r2, #8
 8001df4:	601a      	str	r2, [r3, #0]
		actual.y = ANCHO;
 8001df6:	4b87      	ldr	r3, [pc, #540]	; (8002014 <mainMachine+0x24c>)
 8001df8:	2208      	movs	r2, #8
 8001dfa:	605a      	str	r2, [r3, #4]
		/*visual.x = 0;
		 visual.y = 0;*/
		resetAxis(direcciones);
 8001dfc:	4886      	ldr	r0, [pc, #536]	; (8002018 <mainMachine+0x250>)
 8001dfe:	f001 fc6e 	bl	80036de <resetAxis>
		movimientoFlag = 0;
 8001e02:	4b86      	ldr	r3, [pc, #536]	; (800201c <mainMachine+0x254>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
		finishFlag = 0;
 8001e08:	4b85      	ldr	r3, [pc, #532]	; (8002020 <mainMachine+0x258>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	601a      	str	r2, [r3, #0]
		/*if (Sensors[1] - Sensors[3] < 0.5 && Sensors[1] - Sensors[3] > -0.5) {
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
		 } else {
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
		 }*/
		if (btns[0].flag == 1) {
 8001e0e:	4b85      	ldr	r3, [pc, #532]	; (8002024 <mainMachine+0x25c>)
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d13e      	bne.n	8001e94 <mainMachine+0xcc>
			// Set The LED ON!
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8001e16:	2200      	movs	r2, #0
 8001e18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e1c:	4882      	ldr	r0, [pc, #520]	; (8002028 <mainMachine+0x260>)
 8001e1e:	f004 f986 	bl	800612e <HAL_GPIO_WritePin>
			choice = SLOW;
 8001e22:	4b82      	ldr	r3, [pc, #520]	; (800202c <mainMachine+0x264>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]
			velocity = velocityChoice[SLOW];
 8001e28:	4b81      	ldr	r3, [pc, #516]	; (8002030 <mainMachine+0x268>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a81      	ldr	r2, [pc, #516]	; (8002034 <mainMachine+0x26c>)
 8001e2e:	6013      	str	r3, [r2, #0]
			TIM2->CCR3 = baseChoice[SLOW];
 8001e30:	4b81      	ldr	r3, [pc, #516]	; (8002038 <mainMachine+0x270>)
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e38:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM2->CCR4 = baseChoice[SLOW];
 8001e3a:	4b7f      	ldr	r3, [pc, #508]	; (8002038 <mainMachine+0x270>)
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e42:	641a      	str	r2, [r3, #64]	; 0x40
			KPT = KPTchoice[SLOW];
 8001e44:	4b7d      	ldr	r3, [pc, #500]	; (800203c <mainMachine+0x274>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a7d      	ldr	r2, [pc, #500]	; (8002040 <mainMachine+0x278>)
 8001e4a:	6013      	str	r3, [r2, #0]
			KDT = KDTchoice[SLOW];
 8001e4c:	4b7d      	ldr	r3, [pc, #500]	; (8002044 <mainMachine+0x27c>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a7d      	ldr	r2, [pc, #500]	; (8002048 <mainMachine+0x280>)
 8001e52:	6013      	str	r3, [r2, #0]
			KPA = KPAchoice[SLOW];
 8001e54:	4b7d      	ldr	r3, [pc, #500]	; (800204c <mainMachine+0x284>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a7d      	ldr	r2, [pc, #500]	; (8002050 <mainMachine+0x288>)
 8001e5a:	6013      	str	r3, [r2, #0]
			KDA = KDAchoice[SLOW];
 8001e5c:	4b7d      	ldr	r3, [pc, #500]	; (8002054 <mainMachine+0x28c>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a7d      	ldr	r2, [pc, #500]	; (8002058 <mainMachine+0x290>)
 8001e62:	6013      	str	r3, [r2, #0]
			KPP = KPPchoice[SLOW];
 8001e64:	4b7d      	ldr	r3, [pc, #500]	; (800205c <mainMachine+0x294>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a7d      	ldr	r2, [pc, #500]	; (8002060 <mainMachine+0x298>)
 8001e6a:	6013      	str	r3, [r2, #0]
			KDP = KDPchoice[SLOW];
 8001e6c:	4b7d      	ldr	r3, [pc, #500]	; (8002064 <mainMachine+0x29c>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a7d      	ldr	r2, [pc, #500]	; (8002068 <mainMachine+0x2a0>)
 8001e72:	6013      	str	r3, [r2, #0]
			if (t == 0) {
 8001e74:	4b7d      	ldr	r3, [pc, #500]	; (800206c <mainMachine+0x2a4>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d108      	bne.n	8001e8e <mainMachine+0xc6>
				mainState = CALIBRATE;
 8001e7c:	4b64      	ldr	r3, [pc, #400]	; (8002010 <mainMachine+0x248>)
 8001e7e:	2204      	movs	r2, #4
 8001e80:	601a      	str	r2, [r3, #0]
				t++;
 8001e82:	4b7a      	ldr	r3, [pc, #488]	; (800206c <mainMachine+0x2a4>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	3301      	adds	r3, #1
 8001e88:	4a78      	ldr	r2, [pc, #480]	; (800206c <mainMachine+0x2a4>)
 8001e8a:	6013      	str	r3, [r2, #0]
 8001e8c:	e002      	b.n	8001e94 <mainMachine+0xcc>
			} else {
				mainState = MAPPING;
 8001e8e:	4b60      	ldr	r3, [pc, #384]	; (8002010 <mainMachine+0x248>)
 8001e90:	2201      	movs	r2, #1
 8001e92:	601a      	str	r2, [r3, #0]
			}

		}
		if (btns[1].flag == 1) {
 8001e94:	4b63      	ldr	r3, [pc, #396]	; (8002024 <mainMachine+0x25c>)
 8001e96:	69db      	ldr	r3, [r3, #28]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d134      	bne.n	8001f06 <mainMachine+0x13e>
			// Set The LED ON!
			choice = FAST;
 8001e9c:	4b63      	ldr	r3, [pc, #396]	; (800202c <mainMachine+0x264>)
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	601a      	str	r2, [r3, #0]
			velocity = velocityChoice[FAST];
 8001ea2:	4b63      	ldr	r3, [pc, #396]	; (8002030 <mainMachine+0x268>)
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	4a63      	ldr	r2, [pc, #396]	; (8002034 <mainMachine+0x26c>)
 8001ea8:	6013      	str	r3, [r2, #0]
			TIM2->CCR3 = baseChoice[FAST];
 8001eaa:	4b63      	ldr	r3, [pc, #396]	; (8002038 <mainMachine+0x270>)
 8001eac:	685a      	ldr	r2, [r3, #4]
 8001eae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001eb2:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM2->CCR4 = baseChoice[FAST];
 8001eb4:	4b60      	ldr	r3, [pc, #384]	; (8002038 <mainMachine+0x270>)
 8001eb6:	685a      	ldr	r2, [r3, #4]
 8001eb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ebc:	641a      	str	r2, [r3, #64]	; 0x40
			KPT = KPTchoice[FAST];
 8001ebe:	4b5f      	ldr	r3, [pc, #380]	; (800203c <mainMachine+0x274>)
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	4a5f      	ldr	r2, [pc, #380]	; (8002040 <mainMachine+0x278>)
 8001ec4:	6013      	str	r3, [r2, #0]
			KDT = KDTchoice[FAST];
 8001ec6:	4b5f      	ldr	r3, [pc, #380]	; (8002044 <mainMachine+0x27c>)
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	4a5f      	ldr	r2, [pc, #380]	; (8002048 <mainMachine+0x280>)
 8001ecc:	6013      	str	r3, [r2, #0]
			KPA = KPAchoice[FAST];
 8001ece:	4b5f      	ldr	r3, [pc, #380]	; (800204c <mainMachine+0x284>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	4a5f      	ldr	r2, [pc, #380]	; (8002050 <mainMachine+0x288>)
 8001ed4:	6013      	str	r3, [r2, #0]
			KDA = KDAchoice[FAST];
 8001ed6:	4b5f      	ldr	r3, [pc, #380]	; (8002054 <mainMachine+0x28c>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	4a5f      	ldr	r2, [pc, #380]	; (8002058 <mainMachine+0x290>)
 8001edc:	6013      	str	r3, [r2, #0]
			KPP = KPPchoice[FAST];
 8001ede:	4b5f      	ldr	r3, [pc, #380]	; (800205c <mainMachine+0x294>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	4a5f      	ldr	r2, [pc, #380]	; (8002060 <mainMachine+0x298>)
 8001ee4:	6013      	str	r3, [r2, #0]
			KDP = KDPchoice[FAST];
 8001ee6:	4b5f      	ldr	r3, [pc, #380]	; (8002064 <mainMachine+0x29c>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	4a5f      	ldr	r2, [pc, #380]	; (8002068 <mainMachine+0x2a0>)
 8001eec:	6013      	str	r3, [r2, #0]
			mainState = RACING;
 8001eee:	4b48      	ldr	r3, [pc, #288]	; (8002010 <mainMachine+0x248>)
 8001ef0:	2203      	movs	r2, #3
 8001ef2:	601a      	str	r2, [r3, #0]
			Flash_Read_Data(0x0801FC00, Rx_Data, 2);
 8001ef4:	2202      	movs	r2, #2
 8001ef6:	495e      	ldr	r1, [pc, #376]	; (8002070 <mainMachine+0x2a8>)
 8001ef8:	485e      	ldr	r0, [pc, #376]	; (8002074 <mainMachine+0x2ac>)
 8001efa:	f7ff f9d3 	bl	80012a4 <Flash_Read_Data>
			Convert_To_Str(Rx_Data, string);
 8001efe:	495e      	ldr	r1, [pc, #376]	; (8002078 <mainMachine+0x2b0>)
 8001f00:	485b      	ldr	r0, [pc, #364]	; (8002070 <mainMachine+0x2a8>)
 8001f02:	f7ff f9ec 	bl	80012de <Convert_To_Str>
			//directions = ReadRun();
			//ShowRun();
		}
		if (btns[2].flag == 1) {
 8001f06:	4b47      	ldr	r3, [pc, #284]	; (8002024 <mainMachine+0x25c>)
 8001f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	f040 810f 	bne.w	800212e <mainMachine+0x366>
			// Set The LED ON!
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001f10:	2200      	movs	r2, #0
 8001f12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f16:	4859      	ldr	r0, [pc, #356]	; (800207c <mainMachine+0x2b4>)
 8001f18:	f004 f909 	bl	800612e <HAL_GPIO_WritePin>
			choice = FAST;
 8001f1c:	4b43      	ldr	r3, [pc, #268]	; (800202c <mainMachine+0x264>)
 8001f1e:	2201      	movs	r2, #1
 8001f20:	601a      	str	r2, [r3, #0]
			velocity = velocityChoice[FAST];
 8001f22:	4b43      	ldr	r3, [pc, #268]	; (8002030 <mainMachine+0x268>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	4a43      	ldr	r2, [pc, #268]	; (8002034 <mainMachine+0x26c>)
 8001f28:	6013      	str	r3, [r2, #0]
			TIM2->CCR3 = baseChoice[FAST];
 8001f2a:	4b43      	ldr	r3, [pc, #268]	; (8002038 <mainMachine+0x270>)
 8001f2c:	685a      	ldr	r2, [r3, #4]
 8001f2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f32:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM2->CCR4 = baseChoice[FAST];
 8001f34:	4b40      	ldr	r3, [pc, #256]	; (8002038 <mainMachine+0x270>)
 8001f36:	685a      	ldr	r2, [r3, #4]
 8001f38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f3c:	641a      	str	r2, [r3, #64]	; 0x40
			KPT = KPTchoice[FAST];
 8001f3e:	4b3f      	ldr	r3, [pc, #252]	; (800203c <mainMachine+0x274>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	4a3f      	ldr	r2, [pc, #252]	; (8002040 <mainMachine+0x278>)
 8001f44:	6013      	str	r3, [r2, #0]
			KDT = KDTchoice[FAST];
 8001f46:	4b3f      	ldr	r3, [pc, #252]	; (8002044 <mainMachine+0x27c>)
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	4a3f      	ldr	r2, [pc, #252]	; (8002048 <mainMachine+0x280>)
 8001f4c:	6013      	str	r3, [r2, #0]
			KPA = KPAchoice[FAST];
 8001f4e:	4b3f      	ldr	r3, [pc, #252]	; (800204c <mainMachine+0x284>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	4a3f      	ldr	r2, [pc, #252]	; (8002050 <mainMachine+0x288>)
 8001f54:	6013      	str	r3, [r2, #0]
			KDA = KDAchoice[FAST];
 8001f56:	4b3f      	ldr	r3, [pc, #252]	; (8002054 <mainMachine+0x28c>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	4a3f      	ldr	r2, [pc, #252]	; (8002058 <mainMachine+0x290>)
 8001f5c:	6013      	str	r3, [r2, #0]
			KPP = KPPchoice[FAST];
 8001f5e:	4b3f      	ldr	r3, [pc, #252]	; (800205c <mainMachine+0x294>)
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	4a3f      	ldr	r2, [pc, #252]	; (8002060 <mainMachine+0x298>)
 8001f64:	6013      	str	r3, [r2, #0]
			KDP = KDPchoice[FAST];
 8001f66:	4b3f      	ldr	r3, [pc, #252]	; (8002064 <mainMachine+0x29c>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	4a3f      	ldr	r2, [pc, #252]	; (8002068 <mainMachine+0x2a0>)
 8001f6c:	6013      	str	r3, [r2, #0]
			if (t == 0) {
 8001f6e:	4b3f      	ldr	r3, [pc, #252]	; (800206c <mainMachine+0x2a4>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d108      	bne.n	8001f88 <mainMachine+0x1c0>
				mainState = CALIBRATE;
 8001f76:	4b26      	ldr	r3, [pc, #152]	; (8002010 <mainMachine+0x248>)
 8001f78:	2204      	movs	r2, #4
 8001f7a:	601a      	str	r2, [r3, #0]
				t++;
 8001f7c:	4b3b      	ldr	r3, [pc, #236]	; (800206c <mainMachine+0x2a4>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	3301      	adds	r3, #1
 8001f82:	4a3a      	ldr	r2, [pc, #232]	; (800206c <mainMachine+0x2a4>)
 8001f84:	6013      	str	r3, [r2, #0]
			} else {
				mainState = MAPPING;
			}
		}
		//confirmacionCentrado();
		break;
 8001f86:	e0d2      	b.n	800212e <mainMachine+0x366>
				mainState = MAPPING;
 8001f88:	4b21      	ldr	r3, [pc, #132]	; (8002010 <mainMachine+0x248>)
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	601a      	str	r2, [r3, #0]
		break;
 8001f8e:	e0ce      	b.n	800212e <mainMachine+0x366>
	case CALIBRATE:
		calibrateMachine();
 8001f90:	f000 f8e2 	bl	8002158 <calibrateMachine>
		//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
		break;
 8001f94:	e0cc      	b.n	8002130 <mainMachine+0x368>
	case MAPPING:
		if (finishFlag == 0) {
 8001f96:	4b22      	ldr	r3, [pc, #136]	; (8002020 <mainMachine+0x258>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d102      	bne.n	8001fa4 <mainMachine+0x1dc>
			robotMachine();
 8001f9e:	f000 f9c5 	bl	800232c <robotMachine>
			finishFlag = 0;
			resetAxis(direcciones);
			PrintMap();
			mainState = RESOLUTION;
		}
		break;
 8001fa2:	e0c5      	b.n	8002130 <mainMachine+0x368>
			TX_BUFFER[0] = 'X';
 8001fa4:	4b36      	ldr	r3, [pc, #216]	; (8002080 <mainMachine+0x2b8>)
 8001fa6:	2258      	movs	r2, #88	; 0x58
 8001fa8:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, TX_BUFFER, 1, 100);
 8001faa:	2364      	movs	r3, #100	; 0x64
 8001fac:	2201      	movs	r2, #1
 8001fae:	4934      	ldr	r1, [pc, #208]	; (8002080 <mainMachine+0x2b8>)
 8001fb0:	4834      	ldr	r0, [pc, #208]	; (8002084 <mainMachine+0x2bc>)
 8001fb2:	f005 fc82 	bl	80078ba <HAL_UART_Transmit>
			intUartSend(actual.x);
 8001fb6:	4b17      	ldr	r3, [pc, #92]	; (8002014 <mainMachine+0x24c>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7fe fe8e 	bl	8000cdc <__aeabi_i2f>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7ff fd44 	bl	8001a50 <intUartSend>
			TX_BUFFER[0] = 'Y';
 8001fc8:	4b2d      	ldr	r3, [pc, #180]	; (8002080 <mainMachine+0x2b8>)
 8001fca:	2259      	movs	r2, #89	; 0x59
 8001fcc:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, TX_BUFFER, 1, 100);
 8001fce:	2364      	movs	r3, #100	; 0x64
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	492b      	ldr	r1, [pc, #172]	; (8002080 <mainMachine+0x2b8>)
 8001fd4:	482b      	ldr	r0, [pc, #172]	; (8002084 <mainMachine+0x2bc>)
 8001fd6:	f005 fc70 	bl	80078ba <HAL_UART_Transmit>
			intUartSend(actual.y);
 8001fda:	4b0e      	ldr	r3, [pc, #56]	; (8002014 <mainMachine+0x24c>)
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7fe fe7c 	bl	8000cdc <__aeabi_i2f>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff fd32 	bl	8001a50 <intUartSend>
			actual.x = ALTO;
 8001fec:	4b09      	ldr	r3, [pc, #36]	; (8002014 <mainMachine+0x24c>)
 8001fee:	2208      	movs	r2, #8
 8001ff0:	601a      	str	r2, [r3, #0]
			actual.y = ANCHO;
 8001ff2:	4b08      	ldr	r3, [pc, #32]	; (8002014 <mainMachine+0x24c>)
 8001ff4:	2208      	movs	r2, #8
 8001ff6:	605a      	str	r2, [r3, #4]
			finishFlag = 0;
 8001ff8:	4b09      	ldr	r3, [pc, #36]	; (8002020 <mainMachine+0x258>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	601a      	str	r2, [r3, #0]
			resetAxis(direcciones);
 8001ffe:	4806      	ldr	r0, [pc, #24]	; (8002018 <mainMachine+0x250>)
 8002000:	f001 fb6d 	bl	80036de <resetAxis>
			PrintMap();
 8002004:	f001 f8f2 	bl	80031ec <PrintMap>
			mainState = RESOLUTION;
 8002008:	4b01      	ldr	r3, [pc, #4]	; (8002010 <mainMachine+0x248>)
 800200a:	2202      	movs	r2, #2
 800200c:	601a      	str	r2, [r3, #0]
		break;
 800200e:	e08f      	b.n	8002130 <mainMachine+0x368>
 8002010:	20002384 	.word	0x20002384
 8002014:	20002474 	.word	0x20002474
 8002018:	200022f8 	.word	0x200022f8
 800201c:	20002340 	.word	0x20002340
 8002020:	2000233c 	.word	0x2000233c
 8002024:	20002348 	.word	0x20002348
 8002028:	40010c00 	.word	0x40010c00
 800202c:	20002308 	.word	0x20002308
 8002030:	20000030 	.word	0x20000030
 8002034:	2000409c 	.word	0x2000409c
 8002038:	20000038 	.word	0x20000038
 800203c:	20000000 	.word	0x20000000
 8002040:	20004084 	.word	0x20004084
 8002044:	20000008 	.word	0x20000008
 8002048:	20004088 	.word	0x20004088
 800204c:	20000010 	.word	0x20000010
 8002050:	2000408c 	.word	0x2000408c
 8002054:	20000018 	.word	0x20000018
 8002058:	20004090 	.word	0x20004090
 800205c:	20000020 	.word	0x20000020
 8002060:	20004094 	.word	0x20004094
 8002064:	20000028 	.word	0x20000028
 8002068:	20004098 	.word	0x20004098
 800206c:	200040a0 	.word	0x200040a0
 8002070:	200023a8 	.word	0x200023a8
 8002074:	0801fc00 	.word	0x0801fc00
 8002078:	20002410 	.word	0x20002410
 800207c:	40011000 	.word	0x40011000
 8002080:	20002324 	.word	0x20002324
 8002084:	200002a4 	.word	0x200002a4
	case RESOLUTION:
		if (Map[actual.x][actual.y].final == 0) {
 8002088:	4b2a      	ldr	r3, [pc, #168]	; (8002134 <mainMachine+0x36c>)
 800208a:	6819      	ldr	r1, [r3, #0]
 800208c:	4b29      	ldr	r3, [pc, #164]	; (8002134 <mainMachine+0x36c>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	4829      	ldr	r0, [pc, #164]	; (8002138 <mainMachine+0x370>)
 8002092:	461a      	mov	r2, r3
 8002094:	00d2      	lsls	r2, r2, #3
 8002096:	1ad2      	subs	r2, r2, r3
 8002098:	0093      	lsls	r3, r2, #2
 800209a:	461a      	mov	r2, r3
 800209c:	460b      	mov	r3, r1
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	1a5b      	subs	r3, r3, r1
 80020a2:	019b      	lsls	r3, r3, #6
 80020a4:	4413      	add	r3, r2
 80020a6:	4403      	add	r3, r0
 80020a8:	3314      	adds	r3, #20
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d12c      	bne.n	800210a <mainMachine+0x342>
			addDirection(actual.x, actual.y);
 80020b0:	4b20      	ldr	r3, [pc, #128]	; (8002134 <mainMachine+0x36c>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a1f      	ldr	r2, [pc, #124]	; (8002134 <mainMachine+0x36c>)
 80020b6:	6852      	ldr	r2, [r2, #4]
 80020b8:	4611      	mov	r1, r2
 80020ba:	4618      	mov	r0, r3
 80020bc:	f000 fb44 	bl	8002748 <addDirection>
			TX_BUFFER[0] = 'X';
 80020c0:	4b1e      	ldr	r3, [pc, #120]	; (800213c <mainMachine+0x374>)
 80020c2:	2258      	movs	r2, #88	; 0x58
 80020c4:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, TX_BUFFER, 1, 100);
 80020c6:	2364      	movs	r3, #100	; 0x64
 80020c8:	2201      	movs	r2, #1
 80020ca:	491c      	ldr	r1, [pc, #112]	; (800213c <mainMachine+0x374>)
 80020cc:	481c      	ldr	r0, [pc, #112]	; (8002140 <mainMachine+0x378>)
 80020ce:	f005 fbf4 	bl	80078ba <HAL_UART_Transmit>
			intUartSend(actual.x);
 80020d2:	4b18      	ldr	r3, [pc, #96]	; (8002134 <mainMachine+0x36c>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7fe fe00 	bl	8000cdc <__aeabi_i2f>
 80020dc:	4603      	mov	r3, r0
 80020de:	4618      	mov	r0, r3
 80020e0:	f7ff fcb6 	bl	8001a50 <intUartSend>
			TX_BUFFER[0] = 'Y';
 80020e4:	4b15      	ldr	r3, [pc, #84]	; (800213c <mainMachine+0x374>)
 80020e6:	2259      	movs	r2, #89	; 0x59
 80020e8:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, TX_BUFFER, 1, 100);
 80020ea:	2364      	movs	r3, #100	; 0x64
 80020ec:	2201      	movs	r2, #1
 80020ee:	4913      	ldr	r1, [pc, #76]	; (800213c <mainMachine+0x374>)
 80020f0:	4813      	ldr	r0, [pc, #76]	; (8002140 <mainMachine+0x378>)
 80020f2:	f005 fbe2 	bl	80078ba <HAL_UART_Transmit>
			intUartSend(actual.y);
 80020f6:	4b0f      	ldr	r3, [pc, #60]	; (8002134 <mainMachine+0x36c>)
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7fe fdee 	bl	8000cdc <__aeabi_i2f>
 8002100:	4603      	mov	r3, r0
 8002102:	4618      	mov	r0, r3
 8002104:	f7ff fca4 	bl	8001a50 <intUartSend>
			directions[directionsSize] = 'o';
			Flash_Write_Data(0x0801FC00, (uint32_t*) directions, 25);
			mainState = SETUP;
		}

		break;
 8002108:	e012      	b.n	8002130 <mainMachine+0x368>
			directions[directionsSize] = 'o';
 800210a:	4b0e      	ldr	r3, [pc, #56]	; (8002144 <mainMachine+0x37c>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a0e      	ldr	r2, [pc, #56]	; (8002148 <mainMachine+0x380>)
 8002110:	216f      	movs	r1, #111	; 0x6f
 8002112:	54d1      	strb	r1, [r2, r3]
			Flash_Write_Data(0x0801FC00, (uint32_t*) directions, 25);
 8002114:	2219      	movs	r2, #25
 8002116:	490c      	ldr	r1, [pc, #48]	; (8002148 <mainMachine+0x380>)
 8002118:	480c      	ldr	r0, [pc, #48]	; (800214c <mainMachine+0x384>)
 800211a:	f7ff f867 	bl	80011ec <Flash_Write_Data>
			mainState = SETUP;
 800211e:	4b0c      	ldr	r3, [pc, #48]	; (8002150 <mainMachine+0x388>)
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]
		break;
 8002124:	e004      	b.n	8002130 <mainMachine+0x368>
	case RACING:
		runDirections(string);
 8002126:	480b      	ldr	r0, [pc, #44]	; (8002154 <mainMachine+0x38c>)
 8002128:	f000 fab0 	bl	800268c <runDirections>
		break;
 800212c:	e000      	b.n	8002130 <mainMachine+0x368>
		break;
 800212e:	bf00      	nop
	}

}
 8002130:	bf00      	nop
 8002132:	bd80      	pop	{r7, pc}
 8002134:	20002474 	.word	0x20002474
 8002138:	20002484 	.word	0x20002484
 800213c:	20002324 	.word	0x20002324
 8002140:	200002a4 	.word	0x200002a4
 8002144:	20002334 	.word	0x20002334
 8002148:	2000238c 	.word	0x2000238c
 800214c:	0801fc00 	.word	0x0801fc00
 8002150:	20002384 	.word	0x20002384
 8002154:	20002410 	.word	0x20002410

08002158 <calibrateMachine>:

void calibrateMachine() {
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
	switch (calState) {
 800215c:	4b6b      	ldr	r3, [pc, #428]	; (800230c <calibrateMachine+0x1b4>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2b03      	cmp	r3, #3
 8002162:	f200 80d0 	bhi.w	8002306 <calibrateMachine+0x1ae>
 8002166:	a201      	add	r2, pc, #4	; (adr r2, 800216c <calibrateMachine+0x14>)
 8002168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800216c:	0800217d 	.word	0x0800217d
 8002170:	08002215 	.word	0x08002215
 8002174:	08002263 	.word	0x08002263
 8002178:	080022b1 	.word	0x080022b1
	case CENTER:
		intUartSend(Sensors[1] - Sensors[3]);
 800217c:	4b64      	ldr	r3, [pc, #400]	; (8002310 <calibrateMachine+0x1b8>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	4a63      	ldr	r2, [pc, #396]	; (8002310 <calibrateMachine+0x1b8>)
 8002182:	68d2      	ldr	r2, [r2, #12]
 8002184:	4611      	mov	r1, r2
 8002186:	4618      	mov	r0, r3
 8002188:	f7fe fcf2 	bl	8000b70 <__aeabi_fsub>
 800218c:	4603      	mov	r3, r0
 800218e:	4618      	mov	r0, r3
 8002190:	f7ff fc5e 	bl	8001a50 <intUartSend>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8002194:	2201      	movs	r2, #1
 8002196:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800219a:	485e      	ldr	r0, [pc, #376]	; (8002314 <calibrateMachine+0x1bc>)
 800219c:	f003 ffc7 	bl	800612e <HAL_GPIO_WritePin>
		if (Sensors[1] - Sensors[3] < 0.5 && Sensors[1] - Sensors[3] > -0.5) {
 80021a0:	4b5b      	ldr	r3, [pc, #364]	; (8002310 <calibrateMachine+0x1b8>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	4a5a      	ldr	r2, [pc, #360]	; (8002310 <calibrateMachine+0x1b8>)
 80021a6:	68d2      	ldr	r2, [r2, #12]
 80021a8:	4611      	mov	r1, r2
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7fe fce0 	bl	8000b70 <__aeabi_fsub>
 80021b0:	4603      	mov	r3, r0
 80021b2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7fe ff82 	bl	80010c0 <__aeabi_fcmplt>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d100      	bne.n	80021c4 <calibrateMachine+0x6c>
			}
		}
		/*runMotor(ADELANTE, MOTOR_A);
		 runMotor(ADELANTE, MOTOR_B);
		 StraightFlag = 1;*/
		break;
 80021c2:	e099      	b.n	80022f8 <calibrateMachine+0x1a0>
		if (Sensors[1] - Sensors[3] < 0.5 && Sensors[1] - Sensors[3] > -0.5) {
 80021c4:	4b52      	ldr	r3, [pc, #328]	; (8002310 <calibrateMachine+0x1b8>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	4a51      	ldr	r2, [pc, #324]	; (8002310 <calibrateMachine+0x1b8>)
 80021ca:	68d2      	ldr	r2, [r2, #12]
 80021cc:	4611      	mov	r1, r2
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7fe fcce 	bl	8000b70 <__aeabi_fsub>
 80021d4:	4603      	mov	r3, r0
 80021d6:	f04f 413f 	mov.w	r1, #3204448256	; 0xbf000000
 80021da:	4618      	mov	r0, r3
 80021dc:	f7fe ff8e 	bl	80010fc <__aeabi_fcmpgt>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d100      	bne.n	80021e8 <calibrateMachine+0x90>
		break;
 80021e6:	e087      	b.n	80022f8 <calibrateMachine+0x1a0>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80021e8:	2200      	movs	r2, #0
 80021ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021ee:	4849      	ldr	r0, [pc, #292]	; (8002314 <calibrateMachine+0x1bc>)
 80021f0:	f003 ff9d 	bl	800612e <HAL_GPIO_WritePin>
			if (btns[0].flag == 1) {
 80021f4:	4b48      	ldr	r3, [pc, #288]	; (8002318 <calibrateMachine+0x1c0>)
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d17d      	bne.n	80022f8 <calibrateMachine+0x1a0>
				CenterDistanceRight = Sensors[3];
 80021fc:	4b44      	ldr	r3, [pc, #272]	; (8002310 <calibrateMachine+0x1b8>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	4a46      	ldr	r2, [pc, #280]	; (800231c <calibrateMachine+0x1c4>)
 8002202:	6013      	str	r3, [r2, #0]
				CenterDistanceLeft = Sensors[1];
 8002204:	4b42      	ldr	r3, [pc, #264]	; (8002310 <calibrateMachine+0x1b8>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	4a45      	ldr	r2, [pc, #276]	; (8002320 <calibrateMachine+0x1c8>)
 800220a:	6013      	str	r3, [r2, #0]
				calState = LEFT;
 800220c:	4b3f      	ldr	r3, [pc, #252]	; (800230c <calibrateMachine+0x1b4>)
 800220e:	2201      	movs	r2, #1
 8002210:	601a      	str	r2, [r3, #0]
		break;
 8002212:	e071      	b.n	80022f8 <calibrateMachine+0x1a0>
	case LEFT:
		intUartSend((Sensors[3]));
 8002214:	4b3e      	ldr	r3, [pc, #248]	; (8002310 <calibrateMachine+0x1b8>)
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff fc19 	bl	8001a50 <intUartSend>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800221e:	2201      	movs	r2, #1
 8002220:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002224:	483b      	ldr	r0, [pc, #236]	; (8002314 <calibrateMachine+0x1bc>)
 8002226:	f003 ff82 	bl	800612e <HAL_GPIO_WritePin>
		if (btns[0].flag == 1) {
 800222a:	4b3b      	ldr	r3, [pc, #236]	; (8002318 <calibrateMachine+0x1c0>)
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d164      	bne.n	80022fc <calibrateMachine+0x1a4>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002232:	2200      	movs	r2, #0
 8002234:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002238:	4836      	ldr	r0, [pc, #216]	; (8002314 <calibrateMachine+0x1bc>)
 800223a:	f003 ff78 	bl	800612e <HAL_GPIO_WritePin>
			maxDistance[1] = Sensors[3] + 2;
 800223e:	4b34      	ldr	r3, [pc, #208]	; (8002310 <calibrateMachine+0x1b8>)
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002246:	4618      	mov	r0, r3
 8002248:	f7fe fc94 	bl	8000b74 <__addsf3>
 800224c:	4603      	mov	r3, r0
 800224e:	4618      	mov	r0, r3
 8002250:	f7fe ff5e 	bl	8001110 <__aeabi_f2iz>
 8002254:	4603      	mov	r3, r0
 8002256:	4a33      	ldr	r2, [pc, #204]	; (8002324 <calibrateMachine+0x1cc>)
 8002258:	6053      	str	r3, [r2, #4]
			calState = RIGHT;
 800225a:	4b2c      	ldr	r3, [pc, #176]	; (800230c <calibrateMachine+0x1b4>)
 800225c:	2202      	movs	r2, #2
 800225e:	601a      	str	r2, [r3, #0]
		}
		break;
 8002260:	e04c      	b.n	80022fc <calibrateMachine+0x1a4>
	case RIGHT:
		intUartSend((Sensors[1]));
 8002262:	4b2b      	ldr	r3, [pc, #172]	; (8002310 <calibrateMachine+0x1b8>)
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	4618      	mov	r0, r3
 8002268:	f7ff fbf2 	bl	8001a50 <intUartSend>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800226c:	2201      	movs	r2, #1
 800226e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002272:	4828      	ldr	r0, [pc, #160]	; (8002314 <calibrateMachine+0x1bc>)
 8002274:	f003 ff5b 	bl	800612e <HAL_GPIO_WritePin>
		if (btns[0].flag == 1) {
 8002278:	4b27      	ldr	r3, [pc, #156]	; (8002318 <calibrateMachine+0x1c0>)
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d13f      	bne.n	8002300 <calibrateMachine+0x1a8>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002280:	2200      	movs	r2, #0
 8002282:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002286:	4823      	ldr	r0, [pc, #140]	; (8002314 <calibrateMachine+0x1bc>)
 8002288:	f003 ff51 	bl	800612e <HAL_GPIO_WritePin>
			maxDistance[2] = Sensors[1] + 2;
 800228c:	4b20      	ldr	r3, [pc, #128]	; (8002310 <calibrateMachine+0x1b8>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002294:	4618      	mov	r0, r3
 8002296:	f7fe fc6d 	bl	8000b74 <__addsf3>
 800229a:	4603      	mov	r3, r0
 800229c:	4618      	mov	r0, r3
 800229e:	f7fe ff37 	bl	8001110 <__aeabi_f2iz>
 80022a2:	4603      	mov	r3, r0
 80022a4:	4a1f      	ldr	r2, [pc, #124]	; (8002324 <calibrateMachine+0x1cc>)
 80022a6:	6093      	str	r3, [r2, #8]
			calState = FORWARD;
 80022a8:	4b18      	ldr	r3, [pc, #96]	; (800230c <calibrateMachine+0x1b4>)
 80022aa:	2203      	movs	r2, #3
 80022ac:	601a      	str	r2, [r3, #0]
		}
		break;
 80022ae:	e027      	b.n	8002300 <calibrateMachine+0x1a8>
	case FORWARD:
		intUartSend((Sensors[2]));
 80022b0:	4b17      	ldr	r3, [pc, #92]	; (8002310 <calibrateMachine+0x1b8>)
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7ff fbcb 	bl	8001a50 <intUartSend>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80022ba:	2201      	movs	r2, #1
 80022bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022c0:	4814      	ldr	r0, [pc, #80]	; (8002314 <calibrateMachine+0x1bc>)
 80022c2:	f003 ff34 	bl	800612e <HAL_GPIO_WritePin>
		if (btns[0].flag == 1) {
 80022c6:	4b14      	ldr	r3, [pc, #80]	; (8002318 <calibrateMachine+0x1c0>)
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d11a      	bne.n	8002304 <calibrateMachine+0x1ac>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80022ce:	2200      	movs	r2, #0
 80022d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022d4:	480f      	ldr	r0, [pc, #60]	; (8002314 <calibrateMachine+0x1bc>)
 80022d6:	f003 ff2a 	bl	800612e <HAL_GPIO_WritePin>
			maxDistance[0] = Sensors[2];
 80022da:	4b0d      	ldr	r3, [pc, #52]	; (8002310 <calibrateMachine+0x1b8>)
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	4618      	mov	r0, r3
 80022e0:	f7fe ff16 	bl	8001110 <__aeabi_f2iz>
 80022e4:	4603      	mov	r3, r0
 80022e6:	4a0f      	ldr	r2, [pc, #60]	; (8002324 <calibrateMachine+0x1cc>)
 80022e8:	6013      	str	r3, [r2, #0]
			mainState = SETUP;
 80022ea:	4b0f      	ldr	r3, [pc, #60]	; (8002328 <calibrateMachine+0x1d0>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]
			calState = CENTER;
 80022f0:	4b06      	ldr	r3, [pc, #24]	; (800230c <calibrateMachine+0x1b4>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	601a      	str	r2, [r3, #0]
		}
		break;
 80022f6:	e005      	b.n	8002304 <calibrateMachine+0x1ac>
		break;
 80022f8:	bf00      	nop
 80022fa:	e004      	b.n	8002306 <calibrateMachine+0x1ae>
		break;
 80022fc:	bf00      	nop
 80022fe:	e002      	b.n	8002306 <calibrateMachine+0x1ae>
		break;
 8002300:	bf00      	nop
 8002302:	e000      	b.n	8002306 <calibrateMachine+0x1ae>
		break;
 8002304:	bf00      	nop
	}
}
 8002306:	bf00      	nop
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	20002318 	.word	0x20002318
 8002310:	200022e8 	.word	0x200022e8
 8002314:	40011000 	.word	0x40011000
 8002318:	20002348 	.word	0x20002348
 800231c:	20002310 	.word	0x20002310
 8002320:	20002314 	.word	0x20002314
 8002324:	20002378 	.word	0x20002378
 8002328:	20002384 	.word	0x20002384

0800232c <robotMachine>:

void robotMachine() {
 800232c:	b5b0      	push	{r4, r5, r7, lr}
 800232e:	af00      	add	r7, sp, #0
	switch (robotState) {
 8002330:	4bb5      	ldr	r3, [pc, #724]	; (8002608 <robotMachine+0x2dc>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2b02      	cmp	r3, #2
 8002336:	f000 8183 	beq.w	8002640 <robotMachine+0x314>
 800233a:	2b02      	cmp	r3, #2
 800233c:	f300 8199 	bgt.w	8002672 <robotMachine+0x346>
 8002340:	2b00      	cmp	r3, #0
 8002342:	d003      	beq.n	800234c <robotMachine+0x20>
 8002344:	2b01      	cmp	r3, #1
 8002346:	f000 8125 	beq.w	8002594 <robotMachine+0x268>
			robotState = READING;
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
		}
		break;
	}
}
 800234a:	e192      	b.n	8002672 <robotMachine+0x346>
		TX_BUFFER[0] = 'X';
 800234c:	4baf      	ldr	r3, [pc, #700]	; (800260c <robotMachine+0x2e0>)
 800234e:	2258      	movs	r2, #88	; 0x58
 8002350:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = actual.x + '0';
 8002352:	4baf      	ldr	r3, [pc, #700]	; (8002610 <robotMachine+0x2e4>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	b2db      	uxtb	r3, r3
 8002358:	3330      	adds	r3, #48	; 0x30
 800235a:	b2da      	uxtb	r2, r3
 800235c:	4bab      	ldr	r3, [pc, #684]	; (800260c <robotMachine+0x2e0>)
 800235e:	705a      	strb	r2, [r3, #1]
		TX_BUFFER[2] = '\n';
 8002360:	4baa      	ldr	r3, [pc, #680]	; (800260c <robotMachine+0x2e0>)
 8002362:	220a      	movs	r2, #10
 8002364:	709a      	strb	r2, [r3, #2]
		TX_BUFFER[3] = 'Y';
 8002366:	4ba9      	ldr	r3, [pc, #676]	; (800260c <robotMachine+0x2e0>)
 8002368:	2259      	movs	r2, #89	; 0x59
 800236a:	70da      	strb	r2, [r3, #3]
		TX_BUFFER[4] = actual.y + '0';
 800236c:	4ba8      	ldr	r3, [pc, #672]	; (8002610 <robotMachine+0x2e4>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	b2db      	uxtb	r3, r3
 8002372:	3330      	adds	r3, #48	; 0x30
 8002374:	b2da      	uxtb	r2, r3
 8002376:	4ba5      	ldr	r3, [pc, #660]	; (800260c <robotMachine+0x2e0>)
 8002378:	711a      	strb	r2, [r3, #4]
		TX_BUFFER[5] = '\n';
 800237a:	4ba4      	ldr	r3, [pc, #656]	; (800260c <robotMachine+0x2e0>)
 800237c:	220a      	movs	r2, #10
 800237e:	715a      	strb	r2, [r3, #5]
		HAL_UART_Transmit(&huart3, TX_BUFFER, 6, 100);
 8002380:	2364      	movs	r3, #100	; 0x64
 8002382:	2206      	movs	r2, #6
 8002384:	49a1      	ldr	r1, [pc, #644]	; (800260c <robotMachine+0x2e0>)
 8002386:	48a3      	ldr	r0, [pc, #652]	; (8002614 <robotMachine+0x2e8>)
 8002388:	f005 fa97 	bl	80078ba <HAL_UART_Transmit>
		Map[actual.x][actual.y].visitado++;
 800238c:	4ba0      	ldr	r3, [pc, #640]	; (8002610 <robotMachine+0x2e4>)
 800238e:	6819      	ldr	r1, [r3, #0]
 8002390:	4b9f      	ldr	r3, [pc, #636]	; (8002610 <robotMachine+0x2e4>)
 8002392:	6858      	ldr	r0, [r3, #4]
 8002394:	4ca0      	ldr	r4, [pc, #640]	; (8002618 <robotMachine+0x2ec>)
 8002396:	4602      	mov	r2, r0
 8002398:	00d2      	lsls	r2, r2, #3
 800239a:	1a12      	subs	r2, r2, r0
 800239c:	0093      	lsls	r3, r2, #2
 800239e:	461a      	mov	r2, r3
 80023a0:	460b      	mov	r3, r1
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	1a5b      	subs	r3, r3, r1
 80023a6:	019b      	lsls	r3, r3, #6
 80023a8:	4413      	add	r3, r2
 80023aa:	4423      	add	r3, r4
 80023ac:	3310      	adds	r3, #16
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	1c5c      	adds	r4, r3, #1
 80023b2:	4d99      	ldr	r5, [pc, #612]	; (8002618 <robotMachine+0x2ec>)
 80023b4:	4602      	mov	r2, r0
 80023b6:	00d2      	lsls	r2, r2, #3
 80023b8:	1a12      	subs	r2, r2, r0
 80023ba:	0093      	lsls	r3, r2, #2
 80023bc:	461a      	mov	r2, r3
 80023be:	460b      	mov	r3, r1
 80023c0:	00db      	lsls	r3, r3, #3
 80023c2:	1a5b      	subs	r3, r3, r1
 80023c4:	019b      	lsls	r3, r3, #6
 80023c6:	4413      	add	r3, r2
 80023c8:	442b      	add	r3, r5
 80023ca:	3310      	adds	r3, #16
 80023cc:	601c      	str	r4, [r3, #0]
		if (Map[actual.x][actual.y].visitado == 1) {
 80023ce:	4b90      	ldr	r3, [pc, #576]	; (8002610 <robotMachine+0x2e4>)
 80023d0:	6819      	ldr	r1, [r3, #0]
 80023d2:	4b8f      	ldr	r3, [pc, #572]	; (8002610 <robotMachine+0x2e4>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	4890      	ldr	r0, [pc, #576]	; (8002618 <robotMachine+0x2ec>)
 80023d8:	461a      	mov	r2, r3
 80023da:	00d2      	lsls	r2, r2, #3
 80023dc:	1ad2      	subs	r2, r2, r3
 80023de:	0093      	lsls	r3, r2, #2
 80023e0:	461a      	mov	r2, r3
 80023e2:	460b      	mov	r3, r1
 80023e4:	00db      	lsls	r3, r3, #3
 80023e6:	1a5b      	subs	r3, r3, r1
 80023e8:	019b      	lsls	r3, r3, #6
 80023ea:	4413      	add	r3, r2
 80023ec:	4403      	add	r3, r0
 80023ee:	3310      	adds	r3, #16
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d136      	bne.n	8002464 <robotMachine+0x138>
			runMotor(OFF, MOTOR_A);
 80023f6:	2100      	movs	r1, #0
 80023f8:	2005      	movs	r0, #5
 80023fa:	f001 f8af 	bl	800355c <runMotor>
			runMotor(OFF, MOTOR_B);
 80023fe:	2101      	movs	r1, #1
 8002400:	2005      	movs	r0, #5
 8002402:	f001 f8ab 	bl	800355c <runMotor>
			CreateNode(&Map[actual.x][actual.y], Sensors, direcciones,
 8002406:	4b82      	ldr	r3, [pc, #520]	; (8002610 <robotMachine+0x2e4>)
 8002408:	6819      	ldr	r1, [r3, #0]
 800240a:	4b81      	ldr	r3, [pc, #516]	; (8002610 <robotMachine+0x2e4>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	461a      	mov	r2, r3
 8002410:	00d2      	lsls	r2, r2, #3
 8002412:	1ad2      	subs	r2, r2, r3
 8002414:	0093      	lsls	r3, r2, #2
 8002416:	461a      	mov	r2, r3
 8002418:	460b      	mov	r3, r1
 800241a:	00db      	lsls	r3, r3, #3
 800241c:	1a5b      	subs	r3, r3, r1
 800241e:	019b      	lsls	r3, r3, #6
 8002420:	4413      	add	r3, r2
 8002422:	4a7d      	ldr	r2, [pc, #500]	; (8002618 <robotMachine+0x2ec>)
 8002424:	1898      	adds	r0, r3, r2
 8002426:	4b7d      	ldr	r3, [pc, #500]	; (800261c <robotMachine+0x2f0>)
 8002428:	4a7d      	ldr	r2, [pc, #500]	; (8002620 <robotMachine+0x2f4>)
 800242a:	497e      	ldr	r1, [pc, #504]	; (8002624 <robotMachine+0x2f8>)
 800242c:	f001 fd26 	bl	8003e7c <CreateNode>
			if(q == 1){
 8002430:	4b7d      	ldr	r3, [pc, #500]	; (8002628 <robotMachine+0x2fc>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2b01      	cmp	r3, #1
 8002436:	d115      	bne.n	8002464 <robotMachine+0x138>
				Map[actual.x][actual.y].Lados[direcciones[ATRAS]] = 1;
 8002438:	4b75      	ldr	r3, [pc, #468]	; (8002610 <robotMachine+0x2e4>)
 800243a:	6819      	ldr	r1, [r3, #0]
 800243c:	4b74      	ldr	r3, [pc, #464]	; (8002610 <robotMachine+0x2e4>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	4a77      	ldr	r2, [pc, #476]	; (8002620 <robotMachine+0x2f4>)
 8002442:	6890      	ldr	r0, [r2, #8]
 8002444:	4c74      	ldr	r4, [pc, #464]	; (8002618 <robotMachine+0x2ec>)
 8002446:	461a      	mov	r2, r3
 8002448:	00d2      	lsls	r2, r2, #3
 800244a:	1ad2      	subs	r2, r2, r3
 800244c:	460b      	mov	r3, r1
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	1a5b      	subs	r3, r3, r1
 8002452:	011b      	lsls	r3, r3, #4
 8002454:	4413      	add	r3, r2
 8002456:	4403      	add	r3, r0
 8002458:	2201      	movs	r2, #1
 800245a:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
				q = 0;
 800245e:	4b72      	ldr	r3, [pc, #456]	; (8002628 <robotMachine+0x2fc>)
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]
		intUartSend(Map[actual.x][actual.y].Lados[DERECHA]);
 8002464:	4b6a      	ldr	r3, [pc, #424]	; (8002610 <robotMachine+0x2e4>)
 8002466:	6819      	ldr	r1, [r3, #0]
 8002468:	4b69      	ldr	r3, [pc, #420]	; (8002610 <robotMachine+0x2e4>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	486a      	ldr	r0, [pc, #424]	; (8002618 <robotMachine+0x2ec>)
 800246e:	461a      	mov	r2, r3
 8002470:	00d2      	lsls	r2, r2, #3
 8002472:	1ad2      	subs	r2, r2, r3
 8002474:	0093      	lsls	r3, r2, #2
 8002476:	461a      	mov	r2, r3
 8002478:	460b      	mov	r3, r1
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	1a5b      	subs	r3, r3, r1
 800247e:	019b      	lsls	r3, r3, #6
 8002480:	4413      	add	r3, r2
 8002482:	4403      	add	r3, r0
 8002484:	330c      	adds	r3, #12
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4618      	mov	r0, r3
 800248a:	f7fe fc27 	bl	8000cdc <__aeabi_i2f>
 800248e:	4603      	mov	r3, r0
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff fadd 	bl	8001a50 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[ADELANTE]);
 8002496:	4b5e      	ldr	r3, [pc, #376]	; (8002610 <robotMachine+0x2e4>)
 8002498:	6819      	ldr	r1, [r3, #0]
 800249a:	4b5d      	ldr	r3, [pc, #372]	; (8002610 <robotMachine+0x2e4>)
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	485e      	ldr	r0, [pc, #376]	; (8002618 <robotMachine+0x2ec>)
 80024a0:	461a      	mov	r2, r3
 80024a2:	00d2      	lsls	r2, r2, #3
 80024a4:	1ad2      	subs	r2, r2, r3
 80024a6:	0093      	lsls	r3, r2, #2
 80024a8:	461a      	mov	r2, r3
 80024aa:	460b      	mov	r3, r1
 80024ac:	00db      	lsls	r3, r3, #3
 80024ae:	1a5b      	subs	r3, r3, r1
 80024b0:	019b      	lsls	r3, r3, #6
 80024b2:	4413      	add	r3, r2
 80024b4:	4403      	add	r3, r0
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7fe fc0f 	bl	8000cdc <__aeabi_i2f>
 80024be:	4603      	mov	r3, r0
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7ff fac5 	bl	8001a50 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[IZQUIERDA]);
 80024c6:	4b52      	ldr	r3, [pc, #328]	; (8002610 <robotMachine+0x2e4>)
 80024c8:	6819      	ldr	r1, [r3, #0]
 80024ca:	4b51      	ldr	r3, [pc, #324]	; (8002610 <robotMachine+0x2e4>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	4852      	ldr	r0, [pc, #328]	; (8002618 <robotMachine+0x2ec>)
 80024d0:	461a      	mov	r2, r3
 80024d2:	00d2      	lsls	r2, r2, #3
 80024d4:	1ad2      	subs	r2, r2, r3
 80024d6:	0093      	lsls	r3, r2, #2
 80024d8:	461a      	mov	r2, r3
 80024da:	460b      	mov	r3, r1
 80024dc:	00db      	lsls	r3, r3, #3
 80024de:	1a5b      	subs	r3, r3, r1
 80024e0:	019b      	lsls	r3, r3, #6
 80024e2:	4413      	add	r3, r2
 80024e4:	4403      	add	r3, r0
 80024e6:	3304      	adds	r3, #4
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7fe fbf6 	bl	8000cdc <__aeabi_i2f>
 80024f0:	4603      	mov	r3, r0
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7ff faac 	bl	8001a50 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[ATRAS]);
 80024f8:	4b45      	ldr	r3, [pc, #276]	; (8002610 <robotMachine+0x2e4>)
 80024fa:	6819      	ldr	r1, [r3, #0]
 80024fc:	4b44      	ldr	r3, [pc, #272]	; (8002610 <robotMachine+0x2e4>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	4845      	ldr	r0, [pc, #276]	; (8002618 <robotMachine+0x2ec>)
 8002502:	461a      	mov	r2, r3
 8002504:	00d2      	lsls	r2, r2, #3
 8002506:	1ad2      	subs	r2, r2, r3
 8002508:	0093      	lsls	r3, r2, #2
 800250a:	461a      	mov	r2, r3
 800250c:	460b      	mov	r3, r1
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	1a5b      	subs	r3, r3, r1
 8002512:	019b      	lsls	r3, r3, #6
 8002514:	4413      	add	r3, r2
 8002516:	4403      	add	r3, r0
 8002518:	3308      	adds	r3, #8
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4618      	mov	r0, r3
 800251e:	f7fe fbdd 	bl	8000cdc <__aeabi_i2f>
 8002522:	4603      	mov	r3, r0
 8002524:	4618      	mov	r0, r3
 8002526:	f7ff fa93 	bl	8001a50 <intUartSend>
		valueCNY = NEGRO;			//Sensors[0];
 800252a:	4b40      	ldr	r3, [pc, #256]	; (800262c <robotMachine+0x300>)
 800252c:	2201      	movs	r2, #1
 800252e:	601a      	str	r2, [r3, #0]
		if (valueCNY == BLANCO) {
 8002530:	4b3e      	ldr	r3, [pc, #248]	; (800262c <robotMachine+0x300>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d116      	bne.n	8002566 <robotMachine+0x23a>
			Map[actual.x][actual.y].final = 1;
 8002538:	4b35      	ldr	r3, [pc, #212]	; (8002610 <robotMachine+0x2e4>)
 800253a:	6819      	ldr	r1, [r3, #0]
 800253c:	4b34      	ldr	r3, [pc, #208]	; (8002610 <robotMachine+0x2e4>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	4835      	ldr	r0, [pc, #212]	; (8002618 <robotMachine+0x2ec>)
 8002542:	461a      	mov	r2, r3
 8002544:	00d2      	lsls	r2, r2, #3
 8002546:	1ad2      	subs	r2, r2, r3
 8002548:	0093      	lsls	r3, r2, #2
 800254a:	461a      	mov	r2, r3
 800254c:	460b      	mov	r3, r1
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	1a5b      	subs	r3, r3, r1
 8002552:	019b      	lsls	r3, r3, #6
 8002554:	4413      	add	r3, r2
 8002556:	4403      	add	r3, r0
 8002558:	3314      	adds	r3, #20
 800255a:	2201      	movs	r2, #1
 800255c:	601a      	str	r2, [r3, #0]
			finishFlag = 1;
 800255e:	4b34      	ldr	r3, [pc, #208]	; (8002630 <robotMachine+0x304>)
 8002560:	2201      	movs	r2, #1
 8002562:	601a      	str	r2, [r3, #0]
		break;
 8002564:	e085      	b.n	8002672 <robotMachine+0x346>
			Map[actual.x][actual.y].final = 0;
 8002566:	4b2a      	ldr	r3, [pc, #168]	; (8002610 <robotMachine+0x2e4>)
 8002568:	6819      	ldr	r1, [r3, #0]
 800256a:	4b29      	ldr	r3, [pc, #164]	; (8002610 <robotMachine+0x2e4>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	482a      	ldr	r0, [pc, #168]	; (8002618 <robotMachine+0x2ec>)
 8002570:	461a      	mov	r2, r3
 8002572:	00d2      	lsls	r2, r2, #3
 8002574:	1ad2      	subs	r2, r2, r3
 8002576:	0093      	lsls	r3, r2, #2
 8002578:	461a      	mov	r2, r3
 800257a:	460b      	mov	r3, r1
 800257c:	00db      	lsls	r3, r3, #3
 800257e:	1a5b      	subs	r3, r3, r1
 8002580:	019b      	lsls	r3, r3, #6
 8002582:	4413      	add	r3, r2
 8002584:	4403      	add	r3, r0
 8002586:	3314      	adds	r3, #20
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]
			robotState = CHOOSING;
 800258c:	4b1e      	ldr	r3, [pc, #120]	; (8002608 <robotMachine+0x2dc>)
 800258e:	2201      	movs	r2, #1
 8002590:	601a      	str	r2, [r3, #0]
		break;
 8002592:	e06e      	b.n	8002672 <robotMachine+0x346>
		movimiento = ChooseNextNode(actual.x, actual.y);
 8002594:	4b1e      	ldr	r3, [pc, #120]	; (8002610 <robotMachine+0x2e4>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a1d      	ldr	r2, [pc, #116]	; (8002610 <robotMachine+0x2e4>)
 800259a:	6852      	ldr	r2, [r2, #4]
 800259c:	4611      	mov	r1, r2
 800259e:	4618      	mov	r0, r3
 80025a0:	f000 f9a6 	bl	80028f0 <ChooseNextNode>
 80025a4:	4603      	mov	r3, r0
 80025a6:	4a23      	ldr	r2, [pc, #140]	; (8002634 <robotMachine+0x308>)
 80025a8:	6013      	str	r3, [r2, #0]
		TX_BUFFER[0] = 'M';
 80025aa:	4b18      	ldr	r3, [pc, #96]	; (800260c <robotMachine+0x2e0>)
 80025ac:	224d      	movs	r2, #77	; 0x4d
 80025ae:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = movimiento + '0';
 80025b0:	4b20      	ldr	r3, [pc, #128]	; (8002634 <robotMachine+0x308>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	3330      	adds	r3, #48	; 0x30
 80025b8:	b2da      	uxtb	r2, r3
 80025ba:	4b14      	ldr	r3, [pc, #80]	; (800260c <robotMachine+0x2e0>)
 80025bc:	705a      	strb	r2, [r3, #1]
		TX_BUFFER[2] = '\n';
 80025be:	4b13      	ldr	r3, [pc, #76]	; (800260c <robotMachine+0x2e0>)
 80025c0:	220a      	movs	r2, #10
 80025c2:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart3, TX_BUFFER, 3, 100);
 80025c4:	2364      	movs	r3, #100	; 0x64
 80025c6:	2203      	movs	r2, #3
 80025c8:	4910      	ldr	r1, [pc, #64]	; (800260c <robotMachine+0x2e0>)
 80025ca:	4812      	ldr	r0, [pc, #72]	; (8002614 <robotMachine+0x2e8>)
 80025cc:	f005 f975 	bl	80078ba <HAL_UART_Transmit>
		TX_BUFFER[0] = '*';
 80025d0:	4b0e      	ldr	r3, [pc, #56]	; (800260c <robotMachine+0x2e0>)
 80025d2:	222a      	movs	r2, #42	; 0x2a
 80025d4:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = '*';
 80025d6:	4b0d      	ldr	r3, [pc, #52]	; (800260c <robotMachine+0x2e0>)
 80025d8:	222a      	movs	r2, #42	; 0x2a
 80025da:	705a      	strb	r2, [r3, #1]
		TX_BUFFER[2] = '\n';
 80025dc:	4b0b      	ldr	r3, [pc, #44]	; (800260c <robotMachine+0x2e0>)
 80025de:	220a      	movs	r2, #10
 80025e0:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart3, TX_BUFFER, 3, 100);
 80025e2:	2364      	movs	r3, #100	; 0x64
 80025e4:	2203      	movs	r2, #3
 80025e6:	4909      	ldr	r1, [pc, #36]	; (800260c <robotMachine+0x2e0>)
 80025e8:	480a      	ldr	r0, [pc, #40]	; (8002614 <robotMachine+0x2e8>)
 80025ea:	f005 f966 	bl	80078ba <HAL_UART_Transmit>
		movimientoFlag = 0;
 80025ee:	4b12      	ldr	r3, [pc, #72]	; (8002638 <robotMachine+0x30c>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	601a      	str	r2, [r3, #0]
		ticksNow = HAL_GetTick();
 80025f4:	f002 fb2e 	bl	8004c54 <HAL_GetTick>
 80025f8:	4603      	mov	r3, r0
 80025fa:	461a      	mov	r2, r3
 80025fc:	4b0f      	ldr	r3, [pc, #60]	; (800263c <robotMachine+0x310>)
 80025fe:	601a      	str	r2, [r3, #0]
		robotState = MOVING;
 8002600:	4b01      	ldr	r3, [pc, #4]	; (8002608 <robotMachine+0x2dc>)
 8002602:	2202      	movs	r2, #2
 8002604:	601a      	str	r2, [r3, #0]
		break;
 8002606:	e034      	b.n	8002672 <robotMachine+0x346>
 8002608:	20002388 	.word	0x20002388
 800260c:	20002324 	.word	0x20002324
 8002610:	20002474 	.word	0x20002474
 8002614:	200002a4 	.word	0x200002a4
 8002618:	20002484 	.word	0x20002484
 800261c:	20002378 	.word	0x20002378
 8002620:	200022f8 	.word	0x200022f8
 8002624:	200022e8 	.word	0x200022e8
 8002628:	20000058 	.word	0x20000058
 800262c:	20002344 	.word	0x20002344
 8002630:	2000233c 	.word	0x2000233c
 8002634:	20002338 	.word	0x20002338
 8002638:	20002340 	.word	0x20002340
 800263c:	2000230c 	.word	0x2000230c
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002640:	2200      	movs	r2, #0
 8002642:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002646:	480c      	ldr	r0, [pc, #48]	; (8002678 <robotMachine+0x34c>)
 8002648:	f003 fd71 	bl	800612e <HAL_GPIO_WritePin>
		movementMachine(movimiento);
 800264c:	4b0b      	ldr	r3, [pc, #44]	; (800267c <robotMachine+0x350>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4618      	mov	r0, r3
 8002652:	f001 f85d 	bl	8003710 <movementMachine>
		if (movimientoFlag == 1) {
 8002656:	4b0a      	ldr	r3, [pc, #40]	; (8002680 <robotMachine+0x354>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d108      	bne.n	8002670 <robotMachine+0x344>
			robotState = READING;
 800265e:	4b09      	ldr	r3, [pc, #36]	; (8002684 <robotMachine+0x358>)
 8002660:	2200      	movs	r2, #0
 8002662:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8002664:	2200      	movs	r2, #0
 8002666:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800266a:	4807      	ldr	r0, [pc, #28]	; (8002688 <robotMachine+0x35c>)
 800266c:	f003 fd5f 	bl	800612e <HAL_GPIO_WritePin>
		break;
 8002670:	bf00      	nop
}
 8002672:	bf00      	nop
 8002674:	bdb0      	pop	{r4, r5, r7, pc}
 8002676:	bf00      	nop
 8002678:	40011000 	.word	0x40011000
 800267c:	20002338 	.word	0x20002338
 8002680:	20002340 	.word	0x20002340
 8002684:	20002388 	.word	0x20002388
 8002688:	40010c00 	.word	0x40010c00

0800268c <runDirections>:

void runDirections(char moves[100]) {
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
	if (moves[m] == 'a') {
 8002694:	4b28      	ldr	r3, [pc, #160]	; (8002738 <runDirections+0xac>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	461a      	mov	r2, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4413      	add	r3, r2
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	2b61      	cmp	r3, #97	; 0x61
 80026a2:	d103      	bne.n	80026ac <runDirections+0x20>
		movementMachine(ADELANTE);
 80026a4:	2000      	movs	r0, #0
 80026a6:	f001 f833 	bl	8003710 <movementMachine>
 80026aa:	e026      	b.n	80026fa <runDirections+0x6e>
	} else if (moves[m] == 'd') {
 80026ac:	4b22      	ldr	r3, [pc, #136]	; (8002738 <runDirections+0xac>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	461a      	mov	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4413      	add	r3, r2
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	2b64      	cmp	r3, #100	; 0x64
 80026ba:	d103      	bne.n	80026c4 <runDirections+0x38>
		movementMachine(DERECHA);
 80026bc:	2003      	movs	r0, #3
 80026be:	f001 f827 	bl	8003710 <movementMachine>
 80026c2:	e01a      	b.n	80026fa <runDirections+0x6e>
	} else if (moves[m] == 'i') {
 80026c4:	4b1c      	ldr	r3, [pc, #112]	; (8002738 <runDirections+0xac>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	461a      	mov	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4413      	add	r3, r2
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	2b69      	cmp	r3, #105	; 0x69
 80026d2:	d103      	bne.n	80026dc <runDirections+0x50>
		movementMachine(IZQUIERDA);
 80026d4:	2001      	movs	r0, #1
 80026d6:	f001 f81b 	bl	8003710 <movementMachine>
 80026da:	e00e      	b.n	80026fa <runDirections+0x6e>
	} else if (moves[m] == 'o') {
 80026dc:	4b16      	ldr	r3, [pc, #88]	; (8002738 <runDirections+0xac>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	461a      	mov	r2, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4413      	add	r3, r2
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	2b6f      	cmp	r3, #111	; 0x6f
 80026ea:	d103      	bne.n	80026f4 <runDirections+0x68>
		movementMachine(OFF);
 80026ec:	2005      	movs	r0, #5
 80026ee:	f001 f80f 	bl	8003710 <movementMachine>
 80026f2:	e002      	b.n	80026fa <runDirections+0x6e>
	} else {
		movementMachine(SUPER);
 80026f4:	2004      	movs	r0, #4
 80026f6:	f001 f80b 	bl	8003710 <movementMachine>
	}
	TX_BUFFER[0] = moves[m];
 80026fa:	4b0f      	ldr	r3, [pc, #60]	; (8002738 <runDirections+0xac>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	461a      	mov	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4413      	add	r3, r2
 8002704:	781a      	ldrb	r2, [r3, #0]
 8002706:	4b0d      	ldr	r3, [pc, #52]	; (800273c <runDirections+0xb0>)
 8002708:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, TX_BUFFER, 1, 100);
 800270a:	2364      	movs	r3, #100	; 0x64
 800270c:	2201      	movs	r2, #1
 800270e:	490b      	ldr	r1, [pc, #44]	; (800273c <runDirections+0xb0>)
 8002710:	480b      	ldr	r0, [pc, #44]	; (8002740 <runDirections+0xb4>)
 8002712:	f005 f8d2 	bl	80078ba <HAL_UART_Transmit>
	if (movimientoFlag == 1) {
 8002716:	4b0b      	ldr	r3, [pc, #44]	; (8002744 <runDirections+0xb8>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d107      	bne.n	800272e <runDirections+0xa2>
		m++;
 800271e:	4b06      	ldr	r3, [pc, #24]	; (8002738 <runDirections+0xac>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	3301      	adds	r3, #1
 8002724:	4a04      	ldr	r2, [pc, #16]	; (8002738 <runDirections+0xac>)
 8002726:	6013      	str	r3, [r2, #0]
		movimientoFlag = 0;
 8002728:	4b06      	ldr	r3, [pc, #24]	; (8002744 <runDirections+0xb8>)
 800272a:	2200      	movs	r2, #0
 800272c:	601a      	str	r2, [r3, #0]
	}
}
 800272e:	bf00      	nop
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	20002330 	.word	0x20002330
 800273c:	20002324 	.word	0x20002324
 8002740:	200002a4 	.word	0x200002a4
 8002744:	20002340 	.word	0x20002340

08002748 <addDirection>:

void addDirection(int x, int y) {
 8002748:	b590      	push	{r4, r7, lr}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
	if (Map[x][y].Lados[direcciones[ADELANTE]] != 1) {
 8002752:	4b60      	ldr	r3, [pc, #384]	; (80028d4 <addDirection+0x18c>)
 8002754:	6818      	ldr	r0, [r3, #0]
 8002756:	4c60      	ldr	r4, [pc, #384]	; (80028d8 <addDirection+0x190>)
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	6879      	ldr	r1, [r7, #4]
 800275c:	461a      	mov	r2, r3
 800275e:	00d2      	lsls	r2, r2, #3
 8002760:	1ad2      	subs	r2, r2, r3
 8002762:	460b      	mov	r3, r1
 8002764:	00db      	lsls	r3, r3, #3
 8002766:	1a5b      	subs	r3, r3, r1
 8002768:	011b      	lsls	r3, r3, #4
 800276a:	4413      	add	r3, r2
 800276c:	4403      	add	r3, r0
 800276e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8002772:	2b01      	cmp	r3, #1
 8002774:	d00b      	beq.n	800278e <addDirection+0x46>
		//Map[x][y].Lados[direcciones[ADELANTE]] = 2;
		moveNode(direcciones[ADELANTE], &actual);
 8002776:	4b57      	ldr	r3, [pc, #348]	; (80028d4 <addDirection+0x18c>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4958      	ldr	r1, [pc, #352]	; (80028dc <addDirection+0x194>)
 800277c:	4618      	mov	r0, r3
 800277e:	f001 fb4b 	bl	8003e18 <moveNode>
		directions[directionsSize] = 'a';
 8002782:	4b57      	ldr	r3, [pc, #348]	; (80028e0 <addDirection+0x198>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a57      	ldr	r2, [pc, #348]	; (80028e4 <addDirection+0x19c>)
 8002788:	2161      	movs	r1, #97	; 0x61
 800278a:	54d1      	strb	r1, [r2, r3]
 800278c:	e042      	b.n	8002814 <addDirection+0xcc>
	} else if (Map[x][y].Lados[direcciones[IZQUIERDA]] != 1) {
 800278e:	4b51      	ldr	r3, [pc, #324]	; (80028d4 <addDirection+0x18c>)
 8002790:	6858      	ldr	r0, [r3, #4]
 8002792:	4c51      	ldr	r4, [pc, #324]	; (80028d8 <addDirection+0x190>)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	6879      	ldr	r1, [r7, #4]
 8002798:	461a      	mov	r2, r3
 800279a:	00d2      	lsls	r2, r2, #3
 800279c:	1ad2      	subs	r2, r2, r3
 800279e:	460b      	mov	r3, r1
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	1a5b      	subs	r3, r3, r1
 80027a4:	011b      	lsls	r3, r3, #4
 80027a6:	4413      	add	r3, r2
 80027a8:	4403      	add	r3, r0
 80027aa:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d00f      	beq.n	80027d2 <addDirection+0x8a>
		//Map[x][y].Lados[direcciones[IZQUIERDA]] = 2;
		moveNode(direcciones[IZQUIERDA], &actual);
 80027b2:	4b48      	ldr	r3, [pc, #288]	; (80028d4 <addDirection+0x18c>)
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	4949      	ldr	r1, [pc, #292]	; (80028dc <addDirection+0x194>)
 80027b8:	4618      	mov	r0, r3
 80027ba:	f001 fb2d 	bl	8003e18 <moveNode>
		rotateAxis(IZQUIERDA, direcciones);
 80027be:	4945      	ldr	r1, [pc, #276]	; (80028d4 <addDirection+0x18c>)
 80027c0:	2001      	movs	r0, #1
 80027c2:	f000 ff37 	bl	8003634 <rotateAxis>
		directions[directionsSize] = 'i';
 80027c6:	4b46      	ldr	r3, [pc, #280]	; (80028e0 <addDirection+0x198>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a46      	ldr	r2, [pc, #280]	; (80028e4 <addDirection+0x19c>)
 80027cc:	2169      	movs	r1, #105	; 0x69
 80027ce:	54d1      	strb	r1, [r2, r3]
 80027d0:	e020      	b.n	8002814 <addDirection+0xcc>
	} else if (Map[x][y].Lados[direcciones[DERECHA]] != 1) {
 80027d2:	4b40      	ldr	r3, [pc, #256]	; (80028d4 <addDirection+0x18c>)
 80027d4:	68d8      	ldr	r0, [r3, #12]
 80027d6:	4c40      	ldr	r4, [pc, #256]	; (80028d8 <addDirection+0x190>)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	6879      	ldr	r1, [r7, #4]
 80027dc:	461a      	mov	r2, r3
 80027de:	00d2      	lsls	r2, r2, #3
 80027e0:	1ad2      	subs	r2, r2, r3
 80027e2:	460b      	mov	r3, r1
 80027e4:	00db      	lsls	r3, r3, #3
 80027e6:	1a5b      	subs	r3, r3, r1
 80027e8:	011b      	lsls	r3, r3, #4
 80027ea:	4413      	add	r3, r2
 80027ec:	4403      	add	r3, r0
 80027ee:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d00e      	beq.n	8002814 <addDirection+0xcc>
		//Map[x][y].Lados[direcciones[DERECHA]] = 2;
		moveNode(direcciones[DERECHA], &actual);
 80027f6:	4b37      	ldr	r3, [pc, #220]	; (80028d4 <addDirection+0x18c>)
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	4938      	ldr	r1, [pc, #224]	; (80028dc <addDirection+0x194>)
 80027fc:	4618      	mov	r0, r3
 80027fe:	f001 fb0b 	bl	8003e18 <moveNode>
		rotateAxis(DERECHA, direcciones);
 8002802:	4934      	ldr	r1, [pc, #208]	; (80028d4 <addDirection+0x18c>)
 8002804:	2003      	movs	r0, #3
 8002806:	f000 ff15 	bl	8003634 <rotateAxis>
		directions[directionsSize] = 'd';
 800280a:	4b35      	ldr	r3, [pc, #212]	; (80028e0 <addDirection+0x198>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a35      	ldr	r2, [pc, #212]	; (80028e4 <addDirection+0x19c>)
 8002810:	2164      	movs	r1, #100	; 0x64
 8002812:	54d1      	strb	r1, [r2, r3]
	}
	intUartSend(Map[x][y].Lados[direcciones[ADELANTE]]);
 8002814:	4b2f      	ldr	r3, [pc, #188]	; (80028d4 <addDirection+0x18c>)
 8002816:	6818      	ldr	r0, [r3, #0]
 8002818:	4c2f      	ldr	r4, [pc, #188]	; (80028d8 <addDirection+0x190>)
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	6879      	ldr	r1, [r7, #4]
 800281e:	461a      	mov	r2, r3
 8002820:	00d2      	lsls	r2, r2, #3
 8002822:	1ad2      	subs	r2, r2, r3
 8002824:	460b      	mov	r3, r1
 8002826:	00db      	lsls	r3, r3, #3
 8002828:	1a5b      	subs	r3, r3, r1
 800282a:	011b      	lsls	r3, r3, #4
 800282c:	4413      	add	r3, r2
 800282e:	4403      	add	r3, r0
 8002830:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8002834:	4618      	mov	r0, r3
 8002836:	f7fe fa51 	bl	8000cdc <__aeabi_i2f>
 800283a:	4603      	mov	r3, r0
 800283c:	4618      	mov	r0, r3
 800283e:	f7ff f907 	bl	8001a50 <intUartSend>
	intUartSend(Map[x][y].Lados[direcciones[IZQUIERDA]]);
 8002842:	4b24      	ldr	r3, [pc, #144]	; (80028d4 <addDirection+0x18c>)
 8002844:	6858      	ldr	r0, [r3, #4]
 8002846:	4c24      	ldr	r4, [pc, #144]	; (80028d8 <addDirection+0x190>)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	6879      	ldr	r1, [r7, #4]
 800284c:	461a      	mov	r2, r3
 800284e:	00d2      	lsls	r2, r2, #3
 8002850:	1ad2      	subs	r2, r2, r3
 8002852:	460b      	mov	r3, r1
 8002854:	00db      	lsls	r3, r3, #3
 8002856:	1a5b      	subs	r3, r3, r1
 8002858:	011b      	lsls	r3, r3, #4
 800285a:	4413      	add	r3, r2
 800285c:	4403      	add	r3, r0
 800285e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8002862:	4618      	mov	r0, r3
 8002864:	f7fe fa3a 	bl	8000cdc <__aeabi_i2f>
 8002868:	4603      	mov	r3, r0
 800286a:	4618      	mov	r0, r3
 800286c:	f7ff f8f0 	bl	8001a50 <intUartSend>
	intUartSend(Map[x][y].Lados[direcciones[DERECHA]]);
 8002870:	4b18      	ldr	r3, [pc, #96]	; (80028d4 <addDirection+0x18c>)
 8002872:	68d8      	ldr	r0, [r3, #12]
 8002874:	4c18      	ldr	r4, [pc, #96]	; (80028d8 <addDirection+0x190>)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	6879      	ldr	r1, [r7, #4]
 800287a:	461a      	mov	r2, r3
 800287c:	00d2      	lsls	r2, r2, #3
 800287e:	1ad2      	subs	r2, r2, r3
 8002880:	460b      	mov	r3, r1
 8002882:	00db      	lsls	r3, r3, #3
 8002884:	1a5b      	subs	r3, r3, r1
 8002886:	011b      	lsls	r3, r3, #4
 8002888:	4413      	add	r3, r2
 800288a:	4403      	add	r3, r0
 800288c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8002890:	4618      	mov	r0, r3
 8002892:	f7fe fa23 	bl	8000cdc <__aeabi_i2f>
 8002896:	4603      	mov	r3, r0
 8002898:	4618      	mov	r0, r3
 800289a:	f7ff f8d9 	bl	8001a50 <intUartSend>
	TX_BUFFER[0] = 'D';
 800289e:	4b12      	ldr	r3, [pc, #72]	; (80028e8 <addDirection+0x1a0>)
 80028a0:	2244      	movs	r2, #68	; 0x44
 80028a2:	701a      	strb	r2, [r3, #0]
	TX_BUFFER[1] = directions[directionsSize];
 80028a4:	4b0e      	ldr	r3, [pc, #56]	; (80028e0 <addDirection+0x198>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a0e      	ldr	r2, [pc, #56]	; (80028e4 <addDirection+0x19c>)
 80028aa:	5cd2      	ldrb	r2, [r2, r3]
 80028ac:	4b0e      	ldr	r3, [pc, #56]	; (80028e8 <addDirection+0x1a0>)
 80028ae:	705a      	strb	r2, [r3, #1]
	TX_BUFFER[2] = '\n';
 80028b0:	4b0d      	ldr	r3, [pc, #52]	; (80028e8 <addDirection+0x1a0>)
 80028b2:	220a      	movs	r2, #10
 80028b4:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(&huart3, TX_BUFFER, 3, 100);
 80028b6:	2364      	movs	r3, #100	; 0x64
 80028b8:	2203      	movs	r2, #3
 80028ba:	490b      	ldr	r1, [pc, #44]	; (80028e8 <addDirection+0x1a0>)
 80028bc:	480b      	ldr	r0, [pc, #44]	; (80028ec <addDirection+0x1a4>)
 80028be:	f004 fffc 	bl	80078ba <HAL_UART_Transmit>
	directionsSize++;
 80028c2:	4b07      	ldr	r3, [pc, #28]	; (80028e0 <addDirection+0x198>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	3301      	adds	r3, #1
 80028c8:	4a05      	ldr	r2, [pc, #20]	; (80028e0 <addDirection+0x198>)
 80028ca:	6013      	str	r3, [r2, #0]
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd90      	pop	{r4, r7, pc}
 80028d4:	200022f8 	.word	0x200022f8
 80028d8:	20002484 	.word	0x20002484
 80028dc:	20002474 	.word	0x20002474
 80028e0:	20002334 	.word	0x20002334
 80028e4:	2000238c 	.word	0x2000238c
 80028e8:	20002324 	.word	0x20002324
 80028ec:	200002a4 	.word	0x200002a4

080028f0 <ChooseNextNode>:

int ChooseNextNode(int x, int y) {
 80028f0:	b590      	push	{r4, r7, lr}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
	if (Map[x][y].Lados[direcciones[ADELANTE]] == 0) {
 80028fa:	4bb2      	ldr	r3, [pc, #712]	; (8002bc4 <ChooseNextNode+0x2d4>)
 80028fc:	6818      	ldr	r0, [r3, #0]
 80028fe:	4cb2      	ldr	r4, [pc, #712]	; (8002bc8 <ChooseNextNode+0x2d8>)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	6879      	ldr	r1, [r7, #4]
 8002904:	461a      	mov	r2, r3
 8002906:	00d2      	lsls	r2, r2, #3
 8002908:	1ad2      	subs	r2, r2, r3
 800290a:	460b      	mov	r3, r1
 800290c:	00db      	lsls	r3, r3, #3
 800290e:	1a5b      	subs	r3, r3, r1
 8002910:	011b      	lsls	r3, r3, #4
 8002912:	4413      	add	r3, r2
 8002914:	4403      	add	r3, r0
 8002916:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800291a:	2b00      	cmp	r3, #0
 800291c:	f040 80b3 	bne.w	8002a86 <ChooseNextNode+0x196>
		TX_BUFFER[0] = 'A';
 8002920:	4baa      	ldr	r3, [pc, #680]	; (8002bcc <ChooseNextNode+0x2dc>)
 8002922:	2241      	movs	r2, #65	; 0x41
 8002924:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = '\n';
 8002926:	4ba9      	ldr	r3, [pc, #676]	; (8002bcc <ChooseNextNode+0x2dc>)
 8002928:	220a      	movs	r2, #10
 800292a:	705a      	strb	r2, [r3, #1]
		HAL_UART_Transmit(&huart3, TX_BUFFER, 2, 100);
 800292c:	2364      	movs	r3, #100	; 0x64
 800292e:	2202      	movs	r2, #2
 8002930:	49a6      	ldr	r1, [pc, #664]	; (8002bcc <ChooseNextNode+0x2dc>)
 8002932:	48a7      	ldr	r0, [pc, #668]	; (8002bd0 <ChooseNextNode+0x2e0>)
 8002934:	f004 ffc1 	bl	80078ba <HAL_UART_Transmit>
		Map[x][y].Lados[direcciones[ADELANTE]] = 2;
 8002938:	4ba2      	ldr	r3, [pc, #648]	; (8002bc4 <ChooseNextNode+0x2d4>)
 800293a:	6818      	ldr	r0, [r3, #0]
 800293c:	4ca2      	ldr	r4, [pc, #648]	; (8002bc8 <ChooseNextNode+0x2d8>)
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	6879      	ldr	r1, [r7, #4]
 8002942:	461a      	mov	r2, r3
 8002944:	00d2      	lsls	r2, r2, #3
 8002946:	1ad2      	subs	r2, r2, r3
 8002948:	460b      	mov	r3, r1
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	1a5b      	subs	r3, r3, r1
 800294e:	011b      	lsls	r3, r3, #4
 8002950:	4413      	add	r3, r2
 8002952:	4403      	add	r3, r0
 8002954:	2202      	movs	r2, #2
 8002956:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
		/*if (Map[x][y].visitado > 1) {
			EliminateNode(&Map[actual.x][actual.y], &Map[last.x][last.y],
					direcciones[ATRAS]);
			intUartSend(5000);
		}*/
		if (Map[x][y].Lados[direcciones[ATRAS]] != 1)
 800295a:	4b9a      	ldr	r3, [pc, #616]	; (8002bc4 <ChooseNextNode+0x2d4>)
 800295c:	6898      	ldr	r0, [r3, #8]
 800295e:	4c9a      	ldr	r4, [pc, #616]	; (8002bc8 <ChooseNextNode+0x2d8>)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	6879      	ldr	r1, [r7, #4]
 8002964:	461a      	mov	r2, r3
 8002966:	00d2      	lsls	r2, r2, #3
 8002968:	1ad2      	subs	r2, r2, r3
 800296a:	460b      	mov	r3, r1
 800296c:	00db      	lsls	r3, r3, #3
 800296e:	1a5b      	subs	r3, r3, r1
 8002970:	011b      	lsls	r3, r3, #4
 8002972:	4413      	add	r3, r2
 8002974:	4403      	add	r3, r0
 8002976:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800297a:	2b01      	cmp	r3, #1
 800297c:	d010      	beq.n	80029a0 <ChooseNextNode+0xb0>
			Map[x][y].Lados[direcciones[ATRAS]] = 2;
 800297e:	4b91      	ldr	r3, [pc, #580]	; (8002bc4 <ChooseNextNode+0x2d4>)
 8002980:	6898      	ldr	r0, [r3, #8]
 8002982:	4c91      	ldr	r4, [pc, #580]	; (8002bc8 <ChooseNextNode+0x2d8>)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	6879      	ldr	r1, [r7, #4]
 8002988:	461a      	mov	r2, r3
 800298a:	00d2      	lsls	r2, r2, #3
 800298c:	1ad2      	subs	r2, r2, r3
 800298e:	460b      	mov	r3, r1
 8002990:	00db      	lsls	r3, r3, #3
 8002992:	1a5b      	subs	r3, r3, r1
 8002994:	011b      	lsls	r3, r3, #4
 8002996:	4413      	add	r3, r2
 8002998:	4403      	add	r3, r0
 800299a:	2202      	movs	r2, #2
 800299c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
		last.x = actual.x;
 80029a0:	4b8c      	ldr	r3, [pc, #560]	; (8002bd4 <ChooseNextNode+0x2e4>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a8c      	ldr	r2, [pc, #560]	; (8002bd8 <ChooseNextNode+0x2e8>)
 80029a6:	6013      	str	r3, [r2, #0]
		last.y = actual.y;
 80029a8:	4b8a      	ldr	r3, [pc, #552]	; (8002bd4 <ChooseNextNode+0x2e4>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	4a8a      	ldr	r2, [pc, #552]	; (8002bd8 <ChooseNextNode+0x2e8>)
 80029ae:	6053      	str	r3, [r2, #4]
		intUartSend(Map[actual.x][actual.y].Lados[DERECHA]);
 80029b0:	4b88      	ldr	r3, [pc, #544]	; (8002bd4 <ChooseNextNode+0x2e4>)
 80029b2:	6819      	ldr	r1, [r3, #0]
 80029b4:	4b87      	ldr	r3, [pc, #540]	; (8002bd4 <ChooseNextNode+0x2e4>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	4883      	ldr	r0, [pc, #524]	; (8002bc8 <ChooseNextNode+0x2d8>)
 80029ba:	461a      	mov	r2, r3
 80029bc:	00d2      	lsls	r2, r2, #3
 80029be:	1ad2      	subs	r2, r2, r3
 80029c0:	0093      	lsls	r3, r2, #2
 80029c2:	461a      	mov	r2, r3
 80029c4:	460b      	mov	r3, r1
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	1a5b      	subs	r3, r3, r1
 80029ca:	019b      	lsls	r3, r3, #6
 80029cc:	4413      	add	r3, r2
 80029ce:	4403      	add	r3, r0
 80029d0:	330c      	adds	r3, #12
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7fe f981 	bl	8000cdc <__aeabi_i2f>
 80029da:	4603      	mov	r3, r0
 80029dc:	4618      	mov	r0, r3
 80029de:	f7ff f837 	bl	8001a50 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[ADELANTE]);
 80029e2:	4b7c      	ldr	r3, [pc, #496]	; (8002bd4 <ChooseNextNode+0x2e4>)
 80029e4:	6819      	ldr	r1, [r3, #0]
 80029e6:	4b7b      	ldr	r3, [pc, #492]	; (8002bd4 <ChooseNextNode+0x2e4>)
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	4877      	ldr	r0, [pc, #476]	; (8002bc8 <ChooseNextNode+0x2d8>)
 80029ec:	461a      	mov	r2, r3
 80029ee:	00d2      	lsls	r2, r2, #3
 80029f0:	1ad2      	subs	r2, r2, r3
 80029f2:	0093      	lsls	r3, r2, #2
 80029f4:	461a      	mov	r2, r3
 80029f6:	460b      	mov	r3, r1
 80029f8:	00db      	lsls	r3, r3, #3
 80029fa:	1a5b      	subs	r3, r3, r1
 80029fc:	019b      	lsls	r3, r3, #6
 80029fe:	4413      	add	r3, r2
 8002a00:	4403      	add	r3, r0
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7fe f969 	bl	8000cdc <__aeabi_i2f>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7ff f81f 	bl	8001a50 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[IZQUIERDA]);
 8002a12:	4b70      	ldr	r3, [pc, #448]	; (8002bd4 <ChooseNextNode+0x2e4>)
 8002a14:	6819      	ldr	r1, [r3, #0]
 8002a16:	4b6f      	ldr	r3, [pc, #444]	; (8002bd4 <ChooseNextNode+0x2e4>)
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	486b      	ldr	r0, [pc, #428]	; (8002bc8 <ChooseNextNode+0x2d8>)
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	00d2      	lsls	r2, r2, #3
 8002a20:	1ad2      	subs	r2, r2, r3
 8002a22:	0093      	lsls	r3, r2, #2
 8002a24:	461a      	mov	r2, r3
 8002a26:	460b      	mov	r3, r1
 8002a28:	00db      	lsls	r3, r3, #3
 8002a2a:	1a5b      	subs	r3, r3, r1
 8002a2c:	019b      	lsls	r3, r3, #6
 8002a2e:	4413      	add	r3, r2
 8002a30:	4403      	add	r3, r0
 8002a32:	3304      	adds	r3, #4
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7fe f950 	bl	8000cdc <__aeabi_i2f>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7ff f806 	bl	8001a50 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[ATRAS]);
 8002a44:	4b63      	ldr	r3, [pc, #396]	; (8002bd4 <ChooseNextNode+0x2e4>)
 8002a46:	6819      	ldr	r1, [r3, #0]
 8002a48:	4b62      	ldr	r3, [pc, #392]	; (8002bd4 <ChooseNextNode+0x2e4>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	485e      	ldr	r0, [pc, #376]	; (8002bc8 <ChooseNextNode+0x2d8>)
 8002a4e:	461a      	mov	r2, r3
 8002a50:	00d2      	lsls	r2, r2, #3
 8002a52:	1ad2      	subs	r2, r2, r3
 8002a54:	0093      	lsls	r3, r2, #2
 8002a56:	461a      	mov	r2, r3
 8002a58:	460b      	mov	r3, r1
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	1a5b      	subs	r3, r3, r1
 8002a5e:	019b      	lsls	r3, r3, #6
 8002a60:	4413      	add	r3, r2
 8002a62:	4403      	add	r3, r0
 8002a64:	3308      	adds	r3, #8
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7fe f937 	bl	8000cdc <__aeabi_i2f>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7fe ffed 	bl	8001a50 <intUartSend>
		moveNode(direcciones[ADELANTE], &actual);
 8002a76:	4b53      	ldr	r3, [pc, #332]	; (8002bc4 <ChooseNextNode+0x2d4>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4956      	ldr	r1, [pc, #344]	; (8002bd4 <ChooseNextNode+0x2e4>)
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f001 f9cb 	bl	8003e18 <moveNode>
		return ADELANTE;
 8002a82:	2300      	movs	r3, #0
 8002a84:	e162      	b.n	8002d4c <ChooseNextNode+0x45c>
	} else if (Map[x][y].Lados[direcciones[IZQUIERDA]] == 0) {
 8002a86:	4b4f      	ldr	r3, [pc, #316]	; (8002bc4 <ChooseNextNode+0x2d4>)
 8002a88:	6858      	ldr	r0, [r3, #4]
 8002a8a:	4c4f      	ldr	r4, [pc, #316]	; (8002bc8 <ChooseNextNode+0x2d8>)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	6879      	ldr	r1, [r7, #4]
 8002a90:	461a      	mov	r2, r3
 8002a92:	00d2      	lsls	r2, r2, #3
 8002a94:	1ad2      	subs	r2, r2, r3
 8002a96:	460b      	mov	r3, r1
 8002a98:	00db      	lsls	r3, r3, #3
 8002a9a:	1a5b      	subs	r3, r3, r1
 8002a9c:	011b      	lsls	r3, r3, #4
 8002a9e:	4413      	add	r3, r2
 8002aa0:	4403      	add	r3, r0
 8002aa2:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	f040 8098 	bne.w	8002bdc <ChooseNextNode+0x2ec>
		TX_BUFFER[0] = 'I';
 8002aac:	4b47      	ldr	r3, [pc, #284]	; (8002bcc <ChooseNextNode+0x2dc>)
 8002aae:	2249      	movs	r2, #73	; 0x49
 8002ab0:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = '\n';
 8002ab2:	4b46      	ldr	r3, [pc, #280]	; (8002bcc <ChooseNextNode+0x2dc>)
 8002ab4:	220a      	movs	r2, #10
 8002ab6:	705a      	strb	r2, [r3, #1]
		HAL_UART_Transmit(&huart3, TX_BUFFER, 2, 100);
 8002ab8:	2364      	movs	r3, #100	; 0x64
 8002aba:	2202      	movs	r2, #2
 8002abc:	4943      	ldr	r1, [pc, #268]	; (8002bcc <ChooseNextNode+0x2dc>)
 8002abe:	4844      	ldr	r0, [pc, #272]	; (8002bd0 <ChooseNextNode+0x2e0>)
 8002ac0:	f004 fefb 	bl	80078ba <HAL_UART_Transmit>
		Map[x][y].Lados[direcciones[IZQUIERDA]] = 2;
 8002ac4:	4b3f      	ldr	r3, [pc, #252]	; (8002bc4 <ChooseNextNode+0x2d4>)
 8002ac6:	6858      	ldr	r0, [r3, #4]
 8002ac8:	4c3f      	ldr	r4, [pc, #252]	; (8002bc8 <ChooseNextNode+0x2d8>)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	6879      	ldr	r1, [r7, #4]
 8002ace:	461a      	mov	r2, r3
 8002ad0:	00d2      	lsls	r2, r2, #3
 8002ad2:	1ad2      	subs	r2, r2, r3
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	00db      	lsls	r3, r3, #3
 8002ad8:	1a5b      	subs	r3, r3, r1
 8002ada:	011b      	lsls	r3, r3, #4
 8002adc:	4413      	add	r3, r2
 8002ade:	4403      	add	r3, r0
 8002ae0:	2202      	movs	r2, #2
 8002ae2:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
			intUartSend(5000);
		}*/
		/*if (Map[x][y].Lados[direcciones[ATRAS]] != 1) {
			Map[x][y].Lados[direcciones[ATRAS]] = 2;
		}*/
		last.x = actual.x;
 8002ae6:	4b3b      	ldr	r3, [pc, #236]	; (8002bd4 <ChooseNextNode+0x2e4>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a3b      	ldr	r2, [pc, #236]	; (8002bd8 <ChooseNextNode+0x2e8>)
 8002aec:	6013      	str	r3, [r2, #0]
		last.y = actual.y;
 8002aee:	4b39      	ldr	r3, [pc, #228]	; (8002bd4 <ChooseNextNode+0x2e4>)
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	4a39      	ldr	r2, [pc, #228]	; (8002bd8 <ChooseNextNode+0x2e8>)
 8002af4:	6053      	str	r3, [r2, #4]
		intUartSend(Map[x][y].Lados[DERECHA]);
 8002af6:	4834      	ldr	r0, [pc, #208]	; (8002bc8 <ChooseNextNode+0x2d8>)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	6879      	ldr	r1, [r7, #4]
 8002afc:	461a      	mov	r2, r3
 8002afe:	00d2      	lsls	r2, r2, #3
 8002b00:	1ad2      	subs	r2, r2, r3
 8002b02:	0093      	lsls	r3, r2, #2
 8002b04:	461a      	mov	r2, r3
 8002b06:	460b      	mov	r3, r1
 8002b08:	00db      	lsls	r3, r3, #3
 8002b0a:	1a5b      	subs	r3, r3, r1
 8002b0c:	019b      	lsls	r3, r3, #6
 8002b0e:	4413      	add	r3, r2
 8002b10:	4403      	add	r3, r0
 8002b12:	330c      	adds	r3, #12
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7fe f8e0 	bl	8000cdc <__aeabi_i2f>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7fe ff96 	bl	8001a50 <intUartSend>
		intUartSend(Map[x][y].Lados[ADELANTE]);
 8002b24:	4828      	ldr	r0, [pc, #160]	; (8002bc8 <ChooseNextNode+0x2d8>)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	6879      	ldr	r1, [r7, #4]
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	00d2      	lsls	r2, r2, #3
 8002b2e:	1ad2      	subs	r2, r2, r3
 8002b30:	0093      	lsls	r3, r2, #2
 8002b32:	461a      	mov	r2, r3
 8002b34:	460b      	mov	r3, r1
 8002b36:	00db      	lsls	r3, r3, #3
 8002b38:	1a5b      	subs	r3, r3, r1
 8002b3a:	019b      	lsls	r3, r3, #6
 8002b3c:	4413      	add	r3, r2
 8002b3e:	4403      	add	r3, r0
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7fe f8ca 	bl	8000cdc <__aeabi_i2f>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7fe ff80 	bl	8001a50 <intUartSend>
		intUartSend(Map[x][y].Lados[IZQUIERDA]);
 8002b50:	481d      	ldr	r0, [pc, #116]	; (8002bc8 <ChooseNextNode+0x2d8>)
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	6879      	ldr	r1, [r7, #4]
 8002b56:	461a      	mov	r2, r3
 8002b58:	00d2      	lsls	r2, r2, #3
 8002b5a:	1ad2      	subs	r2, r2, r3
 8002b5c:	0093      	lsls	r3, r2, #2
 8002b5e:	461a      	mov	r2, r3
 8002b60:	460b      	mov	r3, r1
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	1a5b      	subs	r3, r3, r1
 8002b66:	019b      	lsls	r3, r3, #6
 8002b68:	4413      	add	r3, r2
 8002b6a:	4403      	add	r3, r0
 8002b6c:	3304      	adds	r3, #4
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7fe f8b3 	bl	8000cdc <__aeabi_i2f>
 8002b76:	4603      	mov	r3, r0
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7fe ff69 	bl	8001a50 <intUartSend>
		intUartSend(Map[x][y].Lados[ATRAS]);
 8002b7e:	4812      	ldr	r0, [pc, #72]	; (8002bc8 <ChooseNextNode+0x2d8>)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	6879      	ldr	r1, [r7, #4]
 8002b84:	461a      	mov	r2, r3
 8002b86:	00d2      	lsls	r2, r2, #3
 8002b88:	1ad2      	subs	r2, r2, r3
 8002b8a:	0093      	lsls	r3, r2, #2
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	460b      	mov	r3, r1
 8002b90:	00db      	lsls	r3, r3, #3
 8002b92:	1a5b      	subs	r3, r3, r1
 8002b94:	019b      	lsls	r3, r3, #6
 8002b96:	4413      	add	r3, r2
 8002b98:	4403      	add	r3, r0
 8002b9a:	3308      	adds	r3, #8
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7fe f89c 	bl	8000cdc <__aeabi_i2f>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7fe ff52 	bl	8001a50 <intUartSend>
		moveNode(direcciones[IZQUIERDA], &actual);
 8002bac:	4b05      	ldr	r3, [pc, #20]	; (8002bc4 <ChooseNextNode+0x2d4>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	4908      	ldr	r1, [pc, #32]	; (8002bd4 <ChooseNextNode+0x2e4>)
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f001 f930 	bl	8003e18 <moveNode>
		rotateAxis(IZQUIERDA, direcciones);
 8002bb8:	4902      	ldr	r1, [pc, #8]	; (8002bc4 <ChooseNextNode+0x2d4>)
 8002bba:	2001      	movs	r0, #1
 8002bbc:	f000 fd3a 	bl	8003634 <rotateAxis>
		return IZQUIERDA;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e0c3      	b.n	8002d4c <ChooseNextNode+0x45c>
 8002bc4:	200022f8 	.word	0x200022f8
 8002bc8:	20002484 	.word	0x20002484
 8002bcc:	20002324 	.word	0x20002324
 8002bd0:	200002a4 	.word	0x200002a4
 8002bd4:	20002474 	.word	0x20002474
 8002bd8:	2000247c 	.word	0x2000247c
	} else if (Map[x][y].Lados[direcciones[DERECHA]] == 0) {
 8002bdc:	4b5d      	ldr	r3, [pc, #372]	; (8002d54 <ChooseNextNode+0x464>)
 8002bde:	68d8      	ldr	r0, [r3, #12]
 8002be0:	4c5d      	ldr	r4, [pc, #372]	; (8002d58 <ChooseNextNode+0x468>)
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	6879      	ldr	r1, [r7, #4]
 8002be6:	461a      	mov	r2, r3
 8002be8:	00d2      	lsls	r2, r2, #3
 8002bea:	1ad2      	subs	r2, r2, r3
 8002bec:	460b      	mov	r3, r1
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	1a5b      	subs	r3, r3, r1
 8002bf2:	011b      	lsls	r3, r3, #4
 8002bf4:	4413      	add	r3, r2
 8002bf6:	4403      	add	r3, r0
 8002bf8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	f040 8094 	bne.w	8002d2a <ChooseNextNode+0x43a>
		TX_BUFFER[0] = 'D';
 8002c02:	4b56      	ldr	r3, [pc, #344]	; (8002d5c <ChooseNextNode+0x46c>)
 8002c04:	2244      	movs	r2, #68	; 0x44
 8002c06:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = '\n';
 8002c08:	4b54      	ldr	r3, [pc, #336]	; (8002d5c <ChooseNextNode+0x46c>)
 8002c0a:	220a      	movs	r2, #10
 8002c0c:	705a      	strb	r2, [r3, #1]
		HAL_UART_Transmit(&huart3, TX_BUFFER, 2, 100);
 8002c0e:	2364      	movs	r3, #100	; 0x64
 8002c10:	2202      	movs	r2, #2
 8002c12:	4952      	ldr	r1, [pc, #328]	; (8002d5c <ChooseNextNode+0x46c>)
 8002c14:	4852      	ldr	r0, [pc, #328]	; (8002d60 <ChooseNextNode+0x470>)
 8002c16:	f004 fe50 	bl	80078ba <HAL_UART_Transmit>
		/*if (Map[x][y].visitado > 1) {
			EliminateNode(&Map[actual.x][actual.y], &Map[last.x][last.y],
					direcciones[ATRAS]);
			intUartSend(5000);
		}*/
		Map[x][y].Lados[direcciones[DERECHA]] = 2;
 8002c1a:	4b4e      	ldr	r3, [pc, #312]	; (8002d54 <ChooseNextNode+0x464>)
 8002c1c:	68d8      	ldr	r0, [r3, #12]
 8002c1e:	4c4e      	ldr	r4, [pc, #312]	; (8002d58 <ChooseNextNode+0x468>)
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	6879      	ldr	r1, [r7, #4]
 8002c24:	461a      	mov	r2, r3
 8002c26:	00d2      	lsls	r2, r2, #3
 8002c28:	1ad2      	subs	r2, r2, r3
 8002c2a:	460b      	mov	r3, r1
 8002c2c:	00db      	lsls	r3, r3, #3
 8002c2e:	1a5b      	subs	r3, r3, r1
 8002c30:	011b      	lsls	r3, r3, #4
 8002c32:	4413      	add	r3, r2
 8002c34:	4403      	add	r3, r0
 8002c36:	2202      	movs	r2, #2
 8002c38:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
		/*if (Map[x][y].Lados[direcciones[ATRAS]] != 1) {
			intUartSend(Map[x][y].Lados[direcciones[ATRAS]]);
			Map[x][y].Lados[direcciones[ATRAS]] = 2;
		}*/
		last.x = actual.x;
 8002c3c:	4b49      	ldr	r3, [pc, #292]	; (8002d64 <ChooseNextNode+0x474>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a49      	ldr	r2, [pc, #292]	; (8002d68 <ChooseNextNode+0x478>)
 8002c42:	6013      	str	r3, [r2, #0]
		last.y = actual.y;
 8002c44:	4b47      	ldr	r3, [pc, #284]	; (8002d64 <ChooseNextNode+0x474>)
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	4a47      	ldr	r2, [pc, #284]	; (8002d68 <ChooseNextNode+0x478>)
 8002c4a:	6053      	str	r3, [r2, #4]
		intUartSend(Map[actual.x][actual.y].Lados[DERECHA]);
 8002c4c:	4b45      	ldr	r3, [pc, #276]	; (8002d64 <ChooseNextNode+0x474>)
 8002c4e:	6819      	ldr	r1, [r3, #0]
 8002c50:	4b44      	ldr	r3, [pc, #272]	; (8002d64 <ChooseNextNode+0x474>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	4840      	ldr	r0, [pc, #256]	; (8002d58 <ChooseNextNode+0x468>)
 8002c56:	461a      	mov	r2, r3
 8002c58:	00d2      	lsls	r2, r2, #3
 8002c5a:	1ad2      	subs	r2, r2, r3
 8002c5c:	0093      	lsls	r3, r2, #2
 8002c5e:	461a      	mov	r2, r3
 8002c60:	460b      	mov	r3, r1
 8002c62:	00db      	lsls	r3, r3, #3
 8002c64:	1a5b      	subs	r3, r3, r1
 8002c66:	019b      	lsls	r3, r3, #6
 8002c68:	4413      	add	r3, r2
 8002c6a:	4403      	add	r3, r0
 8002c6c:	330c      	adds	r3, #12
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7fe f833 	bl	8000cdc <__aeabi_i2f>
 8002c76:	4603      	mov	r3, r0
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7fe fee9 	bl	8001a50 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[ADELANTE]);
 8002c7e:	4b39      	ldr	r3, [pc, #228]	; (8002d64 <ChooseNextNode+0x474>)
 8002c80:	6819      	ldr	r1, [r3, #0]
 8002c82:	4b38      	ldr	r3, [pc, #224]	; (8002d64 <ChooseNextNode+0x474>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	4834      	ldr	r0, [pc, #208]	; (8002d58 <ChooseNextNode+0x468>)
 8002c88:	461a      	mov	r2, r3
 8002c8a:	00d2      	lsls	r2, r2, #3
 8002c8c:	1ad2      	subs	r2, r2, r3
 8002c8e:	0093      	lsls	r3, r2, #2
 8002c90:	461a      	mov	r2, r3
 8002c92:	460b      	mov	r3, r1
 8002c94:	00db      	lsls	r3, r3, #3
 8002c96:	1a5b      	subs	r3, r3, r1
 8002c98:	019b      	lsls	r3, r3, #6
 8002c9a:	4413      	add	r3, r2
 8002c9c:	4403      	add	r3, r0
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7fe f81b 	bl	8000cdc <__aeabi_i2f>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7fe fed1 	bl	8001a50 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[IZQUIERDA]);
 8002cae:	4b2d      	ldr	r3, [pc, #180]	; (8002d64 <ChooseNextNode+0x474>)
 8002cb0:	6819      	ldr	r1, [r3, #0]
 8002cb2:	4b2c      	ldr	r3, [pc, #176]	; (8002d64 <ChooseNextNode+0x474>)
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	4828      	ldr	r0, [pc, #160]	; (8002d58 <ChooseNextNode+0x468>)
 8002cb8:	461a      	mov	r2, r3
 8002cba:	00d2      	lsls	r2, r2, #3
 8002cbc:	1ad2      	subs	r2, r2, r3
 8002cbe:	0093      	lsls	r3, r2, #2
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	460b      	mov	r3, r1
 8002cc4:	00db      	lsls	r3, r3, #3
 8002cc6:	1a5b      	subs	r3, r3, r1
 8002cc8:	019b      	lsls	r3, r3, #6
 8002cca:	4413      	add	r3, r2
 8002ccc:	4403      	add	r3, r0
 8002cce:	3304      	adds	r3, #4
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7fe f802 	bl	8000cdc <__aeabi_i2f>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7fe feb8 	bl	8001a50 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[ATRAS]);
 8002ce0:	4b20      	ldr	r3, [pc, #128]	; (8002d64 <ChooseNextNode+0x474>)
 8002ce2:	6819      	ldr	r1, [r3, #0]
 8002ce4:	4b1f      	ldr	r3, [pc, #124]	; (8002d64 <ChooseNextNode+0x474>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	481b      	ldr	r0, [pc, #108]	; (8002d58 <ChooseNextNode+0x468>)
 8002cea:	461a      	mov	r2, r3
 8002cec:	00d2      	lsls	r2, r2, #3
 8002cee:	1ad2      	subs	r2, r2, r3
 8002cf0:	0093      	lsls	r3, r2, #2
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	00db      	lsls	r3, r3, #3
 8002cf8:	1a5b      	subs	r3, r3, r1
 8002cfa:	019b      	lsls	r3, r3, #6
 8002cfc:	4413      	add	r3, r2
 8002cfe:	4403      	add	r3, r0
 8002d00:	3308      	adds	r3, #8
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7fd ffe9 	bl	8000cdc <__aeabi_i2f>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7fe fe9f 	bl	8001a50 <intUartSend>
		moveNode(direcciones[DERECHA], &actual);
 8002d12:	4b10      	ldr	r3, [pc, #64]	; (8002d54 <ChooseNextNode+0x464>)
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	4913      	ldr	r1, [pc, #76]	; (8002d64 <ChooseNextNode+0x474>)
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f001 f87d 	bl	8003e18 <moveNode>
		rotateAxis(DERECHA, direcciones);
 8002d1e:	490d      	ldr	r1, [pc, #52]	; (8002d54 <ChooseNextNode+0x464>)
 8002d20:	2003      	movs	r0, #3
 8002d22:	f000 fc87 	bl	8003634 <rotateAxis>
		return DERECHA;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e010      	b.n	8002d4c <ChooseNextNode+0x45c>
	} else {
		TX_BUFFER[0] = 'O';
 8002d2a:	4b0c      	ldr	r3, [pc, #48]	; (8002d5c <ChooseNextNode+0x46c>)
 8002d2c:	224f      	movs	r2, #79	; 0x4f
 8002d2e:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = '\n';
 8002d30:	4b0a      	ldr	r3, [pc, #40]	; (8002d5c <ChooseNextNode+0x46c>)
 8002d32:	220a      	movs	r2, #10
 8002d34:	705a      	strb	r2, [r3, #1]
		HAL_UART_Transmit(&huart3, TX_BUFFER, 2, 100);
 8002d36:	2364      	movs	r3, #100	; 0x64
 8002d38:	2202      	movs	r2, #2
 8002d3a:	4908      	ldr	r1, [pc, #32]	; (8002d5c <ChooseNextNode+0x46c>)
 8002d3c:	4808      	ldr	r0, [pc, #32]	; (8002d60 <ChooseNextNode+0x470>)
 8002d3e:	f004 fdbc 	bl	80078ba <HAL_UART_Transmit>
		return SearchAvailableNode(x, y);
 8002d42:	6839      	ldr	r1, [r7, #0]
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f000 f811 	bl	8002d6c <SearchAvailableNode>
 8002d4a:	4603      	mov	r3, r0
	}

}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd90      	pop	{r4, r7, pc}
 8002d54:	200022f8 	.word	0x200022f8
 8002d58:	20002484 	.word	0x20002484
 8002d5c:	20002324 	.word	0x20002324
 8002d60:	200002a4 	.word	0x200002a4
 8002d64:	20002474 	.word	0x20002474
 8002d68:	2000247c 	.word	0x2000247c

08002d6c <SearchAvailableNode>:

int SearchAvailableNode(int x, int y) {
 8002d6c:	b590      	push	{r4, r7, lr}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
	if (Map[x][y].Lados[direcciones[ADELANTE]] != 1) {
 8002d76:	4b87      	ldr	r3, [pc, #540]	; (8002f94 <SearchAvailableNode+0x228>)
 8002d78:	6818      	ldr	r0, [r3, #0]
 8002d7a:	4c87      	ldr	r4, [pc, #540]	; (8002f98 <SearchAvailableNode+0x22c>)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	6879      	ldr	r1, [r7, #4]
 8002d80:	461a      	mov	r2, r3
 8002d82:	00d2      	lsls	r2, r2, #3
 8002d84:	1ad2      	subs	r2, r2, r3
 8002d86:	460b      	mov	r3, r1
 8002d88:	00db      	lsls	r3, r3, #3
 8002d8a:	1a5b      	subs	r3, r3, r1
 8002d8c:	011b      	lsls	r3, r3, #4
 8002d8e:	4413      	add	r3, r2
 8002d90:	4403      	add	r3, r0
 8002d92:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d072      	beq.n	8002e80 <SearchAvailableNode+0x114>
		/*if (Map[x][y].visitado > 1) {
			EliminateNode(&Map[actual.x][actual.y], &Map[last.x][last.y],
					direcciones[ATRAS]);
			intUartSend(4000);
		}*/
		last.x = actual.x;
 8002d9a:	4b80      	ldr	r3, [pc, #512]	; (8002f9c <SearchAvailableNode+0x230>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a80      	ldr	r2, [pc, #512]	; (8002fa0 <SearchAvailableNode+0x234>)
 8002da0:	6013      	str	r3, [r2, #0]
		last.y = actual.y;
 8002da2:	4b7e      	ldr	r3, [pc, #504]	; (8002f9c <SearchAvailableNode+0x230>)
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	4a7e      	ldr	r2, [pc, #504]	; (8002fa0 <SearchAvailableNode+0x234>)
 8002da8:	6053      	str	r3, [r2, #4]
		intUartSend(Map[actual.x][actual.y].Lados[DERECHA]);
 8002daa:	4b7c      	ldr	r3, [pc, #496]	; (8002f9c <SearchAvailableNode+0x230>)
 8002dac:	6819      	ldr	r1, [r3, #0]
 8002dae:	4b7b      	ldr	r3, [pc, #492]	; (8002f9c <SearchAvailableNode+0x230>)
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	4879      	ldr	r0, [pc, #484]	; (8002f98 <SearchAvailableNode+0x22c>)
 8002db4:	461a      	mov	r2, r3
 8002db6:	00d2      	lsls	r2, r2, #3
 8002db8:	1ad2      	subs	r2, r2, r3
 8002dba:	0093      	lsls	r3, r2, #2
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	460b      	mov	r3, r1
 8002dc0:	00db      	lsls	r3, r3, #3
 8002dc2:	1a5b      	subs	r3, r3, r1
 8002dc4:	019b      	lsls	r3, r3, #6
 8002dc6:	4413      	add	r3, r2
 8002dc8:	4403      	add	r3, r0
 8002dca:	330c      	adds	r3, #12
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7fd ff84 	bl	8000cdc <__aeabi_i2f>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7fe fe3a 	bl	8001a50 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[ADELANTE]);
 8002ddc:	4b6f      	ldr	r3, [pc, #444]	; (8002f9c <SearchAvailableNode+0x230>)
 8002dde:	6819      	ldr	r1, [r3, #0]
 8002de0:	4b6e      	ldr	r3, [pc, #440]	; (8002f9c <SearchAvailableNode+0x230>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	486c      	ldr	r0, [pc, #432]	; (8002f98 <SearchAvailableNode+0x22c>)
 8002de6:	461a      	mov	r2, r3
 8002de8:	00d2      	lsls	r2, r2, #3
 8002dea:	1ad2      	subs	r2, r2, r3
 8002dec:	0093      	lsls	r3, r2, #2
 8002dee:	461a      	mov	r2, r3
 8002df0:	460b      	mov	r3, r1
 8002df2:	00db      	lsls	r3, r3, #3
 8002df4:	1a5b      	subs	r3, r3, r1
 8002df6:	019b      	lsls	r3, r3, #6
 8002df8:	4413      	add	r3, r2
 8002dfa:	4403      	add	r3, r0
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7fd ff6c 	bl	8000cdc <__aeabi_i2f>
 8002e04:	4603      	mov	r3, r0
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7fe fe22 	bl	8001a50 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[IZQUIERDA]);
 8002e0c:	4b63      	ldr	r3, [pc, #396]	; (8002f9c <SearchAvailableNode+0x230>)
 8002e0e:	6819      	ldr	r1, [r3, #0]
 8002e10:	4b62      	ldr	r3, [pc, #392]	; (8002f9c <SearchAvailableNode+0x230>)
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	4860      	ldr	r0, [pc, #384]	; (8002f98 <SearchAvailableNode+0x22c>)
 8002e16:	461a      	mov	r2, r3
 8002e18:	00d2      	lsls	r2, r2, #3
 8002e1a:	1ad2      	subs	r2, r2, r3
 8002e1c:	0093      	lsls	r3, r2, #2
 8002e1e:	461a      	mov	r2, r3
 8002e20:	460b      	mov	r3, r1
 8002e22:	00db      	lsls	r3, r3, #3
 8002e24:	1a5b      	subs	r3, r3, r1
 8002e26:	019b      	lsls	r3, r3, #6
 8002e28:	4413      	add	r3, r2
 8002e2a:	4403      	add	r3, r0
 8002e2c:	3304      	adds	r3, #4
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7fd ff53 	bl	8000cdc <__aeabi_i2f>
 8002e36:	4603      	mov	r3, r0
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7fe fe09 	bl	8001a50 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[ATRAS]);
 8002e3e:	4b57      	ldr	r3, [pc, #348]	; (8002f9c <SearchAvailableNode+0x230>)
 8002e40:	6819      	ldr	r1, [r3, #0]
 8002e42:	4b56      	ldr	r3, [pc, #344]	; (8002f9c <SearchAvailableNode+0x230>)
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	4854      	ldr	r0, [pc, #336]	; (8002f98 <SearchAvailableNode+0x22c>)
 8002e48:	461a      	mov	r2, r3
 8002e4a:	00d2      	lsls	r2, r2, #3
 8002e4c:	1ad2      	subs	r2, r2, r3
 8002e4e:	0093      	lsls	r3, r2, #2
 8002e50:	461a      	mov	r2, r3
 8002e52:	460b      	mov	r3, r1
 8002e54:	00db      	lsls	r3, r3, #3
 8002e56:	1a5b      	subs	r3, r3, r1
 8002e58:	019b      	lsls	r3, r3, #6
 8002e5a:	4413      	add	r3, r2
 8002e5c:	4403      	add	r3, r0
 8002e5e:	3308      	adds	r3, #8
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7fd ff3a 	bl	8000cdc <__aeabi_i2f>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7fe fdf0 	bl	8001a50 <intUartSend>
		moveNode(direcciones[ADELANTE], &actual);
 8002e70:	4b48      	ldr	r3, [pc, #288]	; (8002f94 <SearchAvailableNode+0x228>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4949      	ldr	r1, [pc, #292]	; (8002f9c <SearchAvailableNode+0x230>)
 8002e76:	4618      	mov	r0, r3
 8002e78:	f000 ffce 	bl	8003e18 <moveNode>

		return ADELANTE;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	e1a8      	b.n	80031d2 <SearchAvailableNode+0x466>
	} else if (Map[x][y].Lados[direcciones[IZQUIERDA]] != 1) {
 8002e80:	4b44      	ldr	r3, [pc, #272]	; (8002f94 <SearchAvailableNode+0x228>)
 8002e82:	6858      	ldr	r0, [r3, #4]
 8002e84:	4c44      	ldr	r4, [pc, #272]	; (8002f98 <SearchAvailableNode+0x22c>)
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	6879      	ldr	r1, [r7, #4]
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	00d2      	lsls	r2, r2, #3
 8002e8e:	1ad2      	subs	r2, r2, r3
 8002e90:	460b      	mov	r3, r1
 8002e92:	00db      	lsls	r3, r3, #3
 8002e94:	1a5b      	subs	r3, r3, r1
 8002e96:	011b      	lsls	r3, r3, #4
 8002e98:	4413      	add	r3, r2
 8002e9a:	4403      	add	r3, r0
 8002e9c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d07f      	beq.n	8002fa4 <SearchAvailableNode+0x238>
		/*if (Map[x][y].visitado > 1) {
			EliminateNode(&Map[actual.x][actual.y], &Map[last.x][last.y],
					direcciones[ATRAS]);
			intUartSend(4000);
		}*/
		last.x = actual.x;
 8002ea4:	4b3d      	ldr	r3, [pc, #244]	; (8002f9c <SearchAvailableNode+0x230>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a3d      	ldr	r2, [pc, #244]	; (8002fa0 <SearchAvailableNode+0x234>)
 8002eaa:	6013      	str	r3, [r2, #0]
		last.y = actual.y;
 8002eac:	4b3b      	ldr	r3, [pc, #236]	; (8002f9c <SearchAvailableNode+0x230>)
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	4a3b      	ldr	r2, [pc, #236]	; (8002fa0 <SearchAvailableNode+0x234>)
 8002eb2:	6053      	str	r3, [r2, #4]
		intUartSend(Map[actual.x][actual.y].Lados[DERECHA]);
 8002eb4:	4b39      	ldr	r3, [pc, #228]	; (8002f9c <SearchAvailableNode+0x230>)
 8002eb6:	6819      	ldr	r1, [r3, #0]
 8002eb8:	4b38      	ldr	r3, [pc, #224]	; (8002f9c <SearchAvailableNode+0x230>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	4836      	ldr	r0, [pc, #216]	; (8002f98 <SearchAvailableNode+0x22c>)
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	00d2      	lsls	r2, r2, #3
 8002ec2:	1ad2      	subs	r2, r2, r3
 8002ec4:	0093      	lsls	r3, r2, #2
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	460b      	mov	r3, r1
 8002eca:	00db      	lsls	r3, r3, #3
 8002ecc:	1a5b      	subs	r3, r3, r1
 8002ece:	019b      	lsls	r3, r3, #6
 8002ed0:	4413      	add	r3, r2
 8002ed2:	4403      	add	r3, r0
 8002ed4:	330c      	adds	r3, #12
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7fd feff 	bl	8000cdc <__aeabi_i2f>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7fe fdb5 	bl	8001a50 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[ADELANTE]);
 8002ee6:	4b2d      	ldr	r3, [pc, #180]	; (8002f9c <SearchAvailableNode+0x230>)
 8002ee8:	6819      	ldr	r1, [r3, #0]
 8002eea:	4b2c      	ldr	r3, [pc, #176]	; (8002f9c <SearchAvailableNode+0x230>)
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	482a      	ldr	r0, [pc, #168]	; (8002f98 <SearchAvailableNode+0x22c>)
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	00d2      	lsls	r2, r2, #3
 8002ef4:	1ad2      	subs	r2, r2, r3
 8002ef6:	0093      	lsls	r3, r2, #2
 8002ef8:	461a      	mov	r2, r3
 8002efa:	460b      	mov	r3, r1
 8002efc:	00db      	lsls	r3, r3, #3
 8002efe:	1a5b      	subs	r3, r3, r1
 8002f00:	019b      	lsls	r3, r3, #6
 8002f02:	4413      	add	r3, r2
 8002f04:	4403      	add	r3, r0
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7fd fee7 	bl	8000cdc <__aeabi_i2f>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	4618      	mov	r0, r3
 8002f12:	f7fe fd9d 	bl	8001a50 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[IZQUIERDA]);
 8002f16:	4b21      	ldr	r3, [pc, #132]	; (8002f9c <SearchAvailableNode+0x230>)
 8002f18:	6819      	ldr	r1, [r3, #0]
 8002f1a:	4b20      	ldr	r3, [pc, #128]	; (8002f9c <SearchAvailableNode+0x230>)
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	481e      	ldr	r0, [pc, #120]	; (8002f98 <SearchAvailableNode+0x22c>)
 8002f20:	461a      	mov	r2, r3
 8002f22:	00d2      	lsls	r2, r2, #3
 8002f24:	1ad2      	subs	r2, r2, r3
 8002f26:	0093      	lsls	r3, r2, #2
 8002f28:	461a      	mov	r2, r3
 8002f2a:	460b      	mov	r3, r1
 8002f2c:	00db      	lsls	r3, r3, #3
 8002f2e:	1a5b      	subs	r3, r3, r1
 8002f30:	019b      	lsls	r3, r3, #6
 8002f32:	4413      	add	r3, r2
 8002f34:	4403      	add	r3, r0
 8002f36:	3304      	adds	r3, #4
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7fd fece 	bl	8000cdc <__aeabi_i2f>
 8002f40:	4603      	mov	r3, r0
 8002f42:	4618      	mov	r0, r3
 8002f44:	f7fe fd84 	bl	8001a50 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[ATRAS]);
 8002f48:	4b14      	ldr	r3, [pc, #80]	; (8002f9c <SearchAvailableNode+0x230>)
 8002f4a:	6819      	ldr	r1, [r3, #0]
 8002f4c:	4b13      	ldr	r3, [pc, #76]	; (8002f9c <SearchAvailableNode+0x230>)
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	4811      	ldr	r0, [pc, #68]	; (8002f98 <SearchAvailableNode+0x22c>)
 8002f52:	461a      	mov	r2, r3
 8002f54:	00d2      	lsls	r2, r2, #3
 8002f56:	1ad2      	subs	r2, r2, r3
 8002f58:	0093      	lsls	r3, r2, #2
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	00db      	lsls	r3, r3, #3
 8002f60:	1a5b      	subs	r3, r3, r1
 8002f62:	019b      	lsls	r3, r3, #6
 8002f64:	4413      	add	r3, r2
 8002f66:	4403      	add	r3, r0
 8002f68:	3308      	adds	r3, #8
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7fd feb5 	bl	8000cdc <__aeabi_i2f>
 8002f72:	4603      	mov	r3, r0
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7fe fd6b 	bl	8001a50 <intUartSend>
		moveNode(direcciones[IZQUIERDA], &actual);
 8002f7a:	4b06      	ldr	r3, [pc, #24]	; (8002f94 <SearchAvailableNode+0x228>)
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	4907      	ldr	r1, [pc, #28]	; (8002f9c <SearchAvailableNode+0x230>)
 8002f80:	4618      	mov	r0, r3
 8002f82:	f000 ff49 	bl	8003e18 <moveNode>

		rotateAxis(IZQUIERDA, direcciones);
 8002f86:	4903      	ldr	r1, [pc, #12]	; (8002f94 <SearchAvailableNode+0x228>)
 8002f88:	2001      	movs	r0, #1
 8002f8a:	f000 fb53 	bl	8003634 <rotateAxis>
		return IZQUIERDA;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e11f      	b.n	80031d2 <SearchAvailableNode+0x466>
 8002f92:	bf00      	nop
 8002f94:	200022f8 	.word	0x200022f8
 8002f98:	20002484 	.word	0x20002484
 8002f9c:	20002474 	.word	0x20002474
 8002fa0:	2000247c 	.word	0x2000247c
	} else if (Map[x][y].Lados[direcciones[DERECHA]] != 1) {
 8002fa4:	4b8d      	ldr	r3, [pc, #564]	; (80031dc <SearchAvailableNode+0x470>)
 8002fa6:	68d8      	ldr	r0, [r3, #12]
 8002fa8:	4c8d      	ldr	r4, [pc, #564]	; (80031e0 <SearchAvailableNode+0x474>)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	6879      	ldr	r1, [r7, #4]
 8002fae:	461a      	mov	r2, r3
 8002fb0:	00d2      	lsls	r2, r2, #3
 8002fb2:	1ad2      	subs	r2, r2, r3
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	00db      	lsls	r3, r3, #3
 8002fb8:	1a5b      	subs	r3, r3, r1
 8002fba:	011b      	lsls	r3, r3, #4
 8002fbc:	4413      	add	r3, r2
 8002fbe:	4403      	add	r3, r0
 8002fc0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d076      	beq.n	80030b6 <SearchAvailableNode+0x34a>
		/*if (Map[x][y].visitado > 1) {
			EliminateNode(&Map[actual.x][actual.y], &Map[last.x][last.y],
					direcciones[ATRAS]);
			intUartSend(4000);
		}*/
		last.x = actual.x;
 8002fc8:	4b86      	ldr	r3, [pc, #536]	; (80031e4 <SearchAvailableNode+0x478>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a86      	ldr	r2, [pc, #536]	; (80031e8 <SearchAvailableNode+0x47c>)
 8002fce:	6013      	str	r3, [r2, #0]
		last.y = actual.y;
 8002fd0:	4b84      	ldr	r3, [pc, #528]	; (80031e4 <SearchAvailableNode+0x478>)
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	4a84      	ldr	r2, [pc, #528]	; (80031e8 <SearchAvailableNode+0x47c>)
 8002fd6:	6053      	str	r3, [r2, #4]
		intUartSend(Map[actual.x][actual.y].Lados[DERECHA]);
 8002fd8:	4b82      	ldr	r3, [pc, #520]	; (80031e4 <SearchAvailableNode+0x478>)
 8002fda:	6819      	ldr	r1, [r3, #0]
 8002fdc:	4b81      	ldr	r3, [pc, #516]	; (80031e4 <SearchAvailableNode+0x478>)
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	487f      	ldr	r0, [pc, #508]	; (80031e0 <SearchAvailableNode+0x474>)
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	00d2      	lsls	r2, r2, #3
 8002fe6:	1ad2      	subs	r2, r2, r3
 8002fe8:	0093      	lsls	r3, r2, #2
 8002fea:	461a      	mov	r2, r3
 8002fec:	460b      	mov	r3, r1
 8002fee:	00db      	lsls	r3, r3, #3
 8002ff0:	1a5b      	subs	r3, r3, r1
 8002ff2:	019b      	lsls	r3, r3, #6
 8002ff4:	4413      	add	r3, r2
 8002ff6:	4403      	add	r3, r0
 8002ff8:	330c      	adds	r3, #12
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f7fd fe6d 	bl	8000cdc <__aeabi_i2f>
 8003002:	4603      	mov	r3, r0
 8003004:	4618      	mov	r0, r3
 8003006:	f7fe fd23 	bl	8001a50 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[ADELANTE]);
 800300a:	4b76      	ldr	r3, [pc, #472]	; (80031e4 <SearchAvailableNode+0x478>)
 800300c:	6819      	ldr	r1, [r3, #0]
 800300e:	4b75      	ldr	r3, [pc, #468]	; (80031e4 <SearchAvailableNode+0x478>)
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	4873      	ldr	r0, [pc, #460]	; (80031e0 <SearchAvailableNode+0x474>)
 8003014:	461a      	mov	r2, r3
 8003016:	00d2      	lsls	r2, r2, #3
 8003018:	1ad2      	subs	r2, r2, r3
 800301a:	0093      	lsls	r3, r2, #2
 800301c:	461a      	mov	r2, r3
 800301e:	460b      	mov	r3, r1
 8003020:	00db      	lsls	r3, r3, #3
 8003022:	1a5b      	subs	r3, r3, r1
 8003024:	019b      	lsls	r3, r3, #6
 8003026:	4413      	add	r3, r2
 8003028:	4403      	add	r3, r0
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4618      	mov	r0, r3
 800302e:	f7fd fe55 	bl	8000cdc <__aeabi_i2f>
 8003032:	4603      	mov	r3, r0
 8003034:	4618      	mov	r0, r3
 8003036:	f7fe fd0b 	bl	8001a50 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[IZQUIERDA]);
 800303a:	4b6a      	ldr	r3, [pc, #424]	; (80031e4 <SearchAvailableNode+0x478>)
 800303c:	6819      	ldr	r1, [r3, #0]
 800303e:	4b69      	ldr	r3, [pc, #420]	; (80031e4 <SearchAvailableNode+0x478>)
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	4867      	ldr	r0, [pc, #412]	; (80031e0 <SearchAvailableNode+0x474>)
 8003044:	461a      	mov	r2, r3
 8003046:	00d2      	lsls	r2, r2, #3
 8003048:	1ad2      	subs	r2, r2, r3
 800304a:	0093      	lsls	r3, r2, #2
 800304c:	461a      	mov	r2, r3
 800304e:	460b      	mov	r3, r1
 8003050:	00db      	lsls	r3, r3, #3
 8003052:	1a5b      	subs	r3, r3, r1
 8003054:	019b      	lsls	r3, r3, #6
 8003056:	4413      	add	r3, r2
 8003058:	4403      	add	r3, r0
 800305a:	3304      	adds	r3, #4
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4618      	mov	r0, r3
 8003060:	f7fd fe3c 	bl	8000cdc <__aeabi_i2f>
 8003064:	4603      	mov	r3, r0
 8003066:	4618      	mov	r0, r3
 8003068:	f7fe fcf2 	bl	8001a50 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[ATRAS]);
 800306c:	4b5d      	ldr	r3, [pc, #372]	; (80031e4 <SearchAvailableNode+0x478>)
 800306e:	6819      	ldr	r1, [r3, #0]
 8003070:	4b5c      	ldr	r3, [pc, #368]	; (80031e4 <SearchAvailableNode+0x478>)
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	485a      	ldr	r0, [pc, #360]	; (80031e0 <SearchAvailableNode+0x474>)
 8003076:	461a      	mov	r2, r3
 8003078:	00d2      	lsls	r2, r2, #3
 800307a:	1ad2      	subs	r2, r2, r3
 800307c:	0093      	lsls	r3, r2, #2
 800307e:	461a      	mov	r2, r3
 8003080:	460b      	mov	r3, r1
 8003082:	00db      	lsls	r3, r3, #3
 8003084:	1a5b      	subs	r3, r3, r1
 8003086:	019b      	lsls	r3, r3, #6
 8003088:	4413      	add	r3, r2
 800308a:	4403      	add	r3, r0
 800308c:	3308      	adds	r3, #8
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4618      	mov	r0, r3
 8003092:	f7fd fe23 	bl	8000cdc <__aeabi_i2f>
 8003096:	4603      	mov	r3, r0
 8003098:	4618      	mov	r0, r3
 800309a:	f7fe fcd9 	bl	8001a50 <intUartSend>
		moveNode(direcciones[DERECHA], &actual);
 800309e:	4b4f      	ldr	r3, [pc, #316]	; (80031dc <SearchAvailableNode+0x470>)
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	4950      	ldr	r1, [pc, #320]	; (80031e4 <SearchAvailableNode+0x478>)
 80030a4:	4618      	mov	r0, r3
 80030a6:	f000 feb7 	bl	8003e18 <moveNode>
		rotateAxis(DERECHA, direcciones);
 80030aa:	494c      	ldr	r1, [pc, #304]	; (80031dc <SearchAvailableNode+0x470>)
 80030ac:	2003      	movs	r0, #3
 80030ae:	f000 fac1 	bl	8003634 <rotateAxis>
		return DERECHA;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e08d      	b.n	80031d2 <SearchAvailableNode+0x466>
	} else if (Map[x][y].Lados[direcciones[ATRAS]] != 1) {
 80030b6:	4b49      	ldr	r3, [pc, #292]	; (80031dc <SearchAvailableNode+0x470>)
 80030b8:	6898      	ldr	r0, [r3, #8]
 80030ba:	4c49      	ldr	r4, [pc, #292]	; (80031e0 <SearchAvailableNode+0x474>)
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	6879      	ldr	r1, [r7, #4]
 80030c0:	461a      	mov	r2, r3
 80030c2:	00d2      	lsls	r2, r2, #3
 80030c4:	1ad2      	subs	r2, r2, r3
 80030c6:	460b      	mov	r3, r1
 80030c8:	00db      	lsls	r3, r3, #3
 80030ca:	1a5b      	subs	r3, r3, r1
 80030cc:	011b      	lsls	r3, r3, #4
 80030ce:	4413      	add	r3, r2
 80030d0:	4403      	add	r3, r0
 80030d2:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d07a      	beq.n	80031d0 <SearchAvailableNode+0x464>
		last.x = actual.x;
 80030da:	4b42      	ldr	r3, [pc, #264]	; (80031e4 <SearchAvailableNode+0x478>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a42      	ldr	r2, [pc, #264]	; (80031e8 <SearchAvailableNode+0x47c>)
 80030e0:	6013      	str	r3, [r2, #0]
		last.y = actual.y;
 80030e2:	4b40      	ldr	r3, [pc, #256]	; (80031e4 <SearchAvailableNode+0x478>)
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	4a40      	ldr	r2, [pc, #256]	; (80031e8 <SearchAvailableNode+0x47c>)
 80030e8:	6053      	str	r3, [r2, #4]
		intUartSend(Map[actual.x][actual.y].Lados[DERECHA]);
 80030ea:	4b3e      	ldr	r3, [pc, #248]	; (80031e4 <SearchAvailableNode+0x478>)
 80030ec:	6819      	ldr	r1, [r3, #0]
 80030ee:	4b3d      	ldr	r3, [pc, #244]	; (80031e4 <SearchAvailableNode+0x478>)
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	483b      	ldr	r0, [pc, #236]	; (80031e0 <SearchAvailableNode+0x474>)
 80030f4:	461a      	mov	r2, r3
 80030f6:	00d2      	lsls	r2, r2, #3
 80030f8:	1ad2      	subs	r2, r2, r3
 80030fa:	0093      	lsls	r3, r2, #2
 80030fc:	461a      	mov	r2, r3
 80030fe:	460b      	mov	r3, r1
 8003100:	00db      	lsls	r3, r3, #3
 8003102:	1a5b      	subs	r3, r3, r1
 8003104:	019b      	lsls	r3, r3, #6
 8003106:	4413      	add	r3, r2
 8003108:	4403      	add	r3, r0
 800310a:	330c      	adds	r3, #12
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4618      	mov	r0, r3
 8003110:	f7fd fde4 	bl	8000cdc <__aeabi_i2f>
 8003114:	4603      	mov	r3, r0
 8003116:	4618      	mov	r0, r3
 8003118:	f7fe fc9a 	bl	8001a50 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[ADELANTE]);
 800311c:	4b31      	ldr	r3, [pc, #196]	; (80031e4 <SearchAvailableNode+0x478>)
 800311e:	6819      	ldr	r1, [r3, #0]
 8003120:	4b30      	ldr	r3, [pc, #192]	; (80031e4 <SearchAvailableNode+0x478>)
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	482e      	ldr	r0, [pc, #184]	; (80031e0 <SearchAvailableNode+0x474>)
 8003126:	461a      	mov	r2, r3
 8003128:	00d2      	lsls	r2, r2, #3
 800312a:	1ad2      	subs	r2, r2, r3
 800312c:	0093      	lsls	r3, r2, #2
 800312e:	461a      	mov	r2, r3
 8003130:	460b      	mov	r3, r1
 8003132:	00db      	lsls	r3, r3, #3
 8003134:	1a5b      	subs	r3, r3, r1
 8003136:	019b      	lsls	r3, r3, #6
 8003138:	4413      	add	r3, r2
 800313a:	4403      	add	r3, r0
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4618      	mov	r0, r3
 8003140:	f7fd fdcc 	bl	8000cdc <__aeabi_i2f>
 8003144:	4603      	mov	r3, r0
 8003146:	4618      	mov	r0, r3
 8003148:	f7fe fc82 	bl	8001a50 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[IZQUIERDA]);
 800314c:	4b25      	ldr	r3, [pc, #148]	; (80031e4 <SearchAvailableNode+0x478>)
 800314e:	6819      	ldr	r1, [r3, #0]
 8003150:	4b24      	ldr	r3, [pc, #144]	; (80031e4 <SearchAvailableNode+0x478>)
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	4822      	ldr	r0, [pc, #136]	; (80031e0 <SearchAvailableNode+0x474>)
 8003156:	461a      	mov	r2, r3
 8003158:	00d2      	lsls	r2, r2, #3
 800315a:	1ad2      	subs	r2, r2, r3
 800315c:	0093      	lsls	r3, r2, #2
 800315e:	461a      	mov	r2, r3
 8003160:	460b      	mov	r3, r1
 8003162:	00db      	lsls	r3, r3, #3
 8003164:	1a5b      	subs	r3, r3, r1
 8003166:	019b      	lsls	r3, r3, #6
 8003168:	4413      	add	r3, r2
 800316a:	4403      	add	r3, r0
 800316c:	3304      	adds	r3, #4
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4618      	mov	r0, r3
 8003172:	f7fd fdb3 	bl	8000cdc <__aeabi_i2f>
 8003176:	4603      	mov	r3, r0
 8003178:	4618      	mov	r0, r3
 800317a:	f7fe fc69 	bl	8001a50 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[ATRAS]);
 800317e:	4b19      	ldr	r3, [pc, #100]	; (80031e4 <SearchAvailableNode+0x478>)
 8003180:	6819      	ldr	r1, [r3, #0]
 8003182:	4b18      	ldr	r3, [pc, #96]	; (80031e4 <SearchAvailableNode+0x478>)
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	4816      	ldr	r0, [pc, #88]	; (80031e0 <SearchAvailableNode+0x474>)
 8003188:	461a      	mov	r2, r3
 800318a:	00d2      	lsls	r2, r2, #3
 800318c:	1ad2      	subs	r2, r2, r3
 800318e:	0093      	lsls	r3, r2, #2
 8003190:	461a      	mov	r2, r3
 8003192:	460b      	mov	r3, r1
 8003194:	00db      	lsls	r3, r3, #3
 8003196:	1a5b      	subs	r3, r3, r1
 8003198:	019b      	lsls	r3, r3, #6
 800319a:	4413      	add	r3, r2
 800319c:	4403      	add	r3, r0
 800319e:	3308      	adds	r3, #8
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7fd fd9a 	bl	8000cdc <__aeabi_i2f>
 80031a8:	4603      	mov	r3, r0
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7fe fc50 	bl	8001a50 <intUartSend>
		//Map[x][y].Lados[direcciones[ATRAS]] = 2;
		moveNode(direcciones[ATRAS], &actual);
 80031b0:	4b0a      	ldr	r3, [pc, #40]	; (80031dc <SearchAvailableNode+0x470>)
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	490b      	ldr	r1, [pc, #44]	; (80031e4 <SearchAvailableNode+0x478>)
 80031b6:	4618      	mov	r0, r3
 80031b8:	f000 fe2e 	bl	8003e18 <moveNode>

		rotateAxis(DERECHA, direcciones);
 80031bc:	4907      	ldr	r1, [pc, #28]	; (80031dc <SearchAvailableNode+0x470>)
 80031be:	2003      	movs	r0, #3
 80031c0:	f000 fa38 	bl	8003634 <rotateAxis>
		rotateAxis(DERECHA, direcciones);
 80031c4:	4905      	ldr	r1, [pc, #20]	; (80031dc <SearchAvailableNode+0x470>)
 80031c6:	2003      	movs	r0, #3
 80031c8:	f000 fa34 	bl	8003634 <rotateAxis>
		return ATRAS;
 80031cc:	2302      	movs	r3, #2
 80031ce:	e000      	b.n	80031d2 <SearchAvailableNode+0x466>
	}
	return 0;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	370c      	adds	r7, #12
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd90      	pop	{r4, r7, pc}
 80031da:	bf00      	nop
 80031dc:	200022f8 	.word	0x200022f8
 80031e0:	20002484 	.word	0x20002484
 80031e4:	20002474 	.word	0x20002474
 80031e8:	2000247c 	.word	0x2000247c

080031ec <PrintMap>:
 for (int i = 0; i < 4; i++) {
 direcciones[i] = i;
 }
 }*/

void PrintMap() {
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
	for (int i = 0; i < alto; i++) {
 80031f2:	2300      	movs	r3, #0
 80031f4:	607b      	str	r3, [r7, #4]
 80031f6:	e032      	b.n	800325e <PrintMap+0x72>
		for (int j = 0; j < ancho; j++) {
 80031f8:	2300      	movs	r3, #0
 80031fa:	603b      	str	r3, [r7, #0]
 80031fc:	e020      	b.n	8003240 <PrintMap+0x54>
			//SerialBT.print(Map[i][j].visitado);
			//SerialBT.print(" ");
			TX_BUFFER[0] = Map[i][j].visitado + '0';
 80031fe:	481c      	ldr	r0, [pc, #112]	; (8003270 <PrintMap+0x84>)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	6879      	ldr	r1, [r7, #4]
 8003204:	461a      	mov	r2, r3
 8003206:	00d2      	lsls	r2, r2, #3
 8003208:	1ad2      	subs	r2, r2, r3
 800320a:	0093      	lsls	r3, r2, #2
 800320c:	461a      	mov	r2, r3
 800320e:	460b      	mov	r3, r1
 8003210:	00db      	lsls	r3, r3, #3
 8003212:	1a5b      	subs	r3, r3, r1
 8003214:	019b      	lsls	r3, r3, #6
 8003216:	4413      	add	r3, r2
 8003218:	4403      	add	r3, r0
 800321a:	3310      	adds	r3, #16
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	b2db      	uxtb	r3, r3
 8003220:	3330      	adds	r3, #48	; 0x30
 8003222:	b2da      	uxtb	r2, r3
 8003224:	4b13      	ldr	r3, [pc, #76]	; (8003274 <PrintMap+0x88>)
 8003226:	701a      	strb	r2, [r3, #0]
			TX_BUFFER[1] = ' ';
 8003228:	4b12      	ldr	r3, [pc, #72]	; (8003274 <PrintMap+0x88>)
 800322a:	2220      	movs	r2, #32
 800322c:	705a      	strb	r2, [r3, #1]
			HAL_UART_Transmit(&huart3, TX_BUFFER, 2, 100);
 800322e:	2364      	movs	r3, #100	; 0x64
 8003230:	2202      	movs	r2, #2
 8003232:	4910      	ldr	r1, [pc, #64]	; (8003274 <PrintMap+0x88>)
 8003234:	4810      	ldr	r0, [pc, #64]	; (8003278 <PrintMap+0x8c>)
 8003236:	f004 fb40 	bl	80078ba <HAL_UART_Transmit>
		for (int j = 0; j < ancho; j++) {
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	3301      	adds	r3, #1
 800323e:	603b      	str	r3, [r7, #0]
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	2b0f      	cmp	r3, #15
 8003244:	dddb      	ble.n	80031fe <PrintMap+0x12>
		}
		TX_BUFFER[0] = '\n';
 8003246:	4b0b      	ldr	r3, [pc, #44]	; (8003274 <PrintMap+0x88>)
 8003248:	220a      	movs	r2, #10
 800324a:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, TX_BUFFER, 1, 100);
 800324c:	2364      	movs	r3, #100	; 0x64
 800324e:	2201      	movs	r2, #1
 8003250:	4908      	ldr	r1, [pc, #32]	; (8003274 <PrintMap+0x88>)
 8003252:	4809      	ldr	r0, [pc, #36]	; (8003278 <PrintMap+0x8c>)
 8003254:	f004 fb31 	bl	80078ba <HAL_UART_Transmit>
	for (int i = 0; i < alto; i++) {
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	3301      	adds	r3, #1
 800325c:	607b      	str	r3, [r7, #4]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2b0f      	cmp	r3, #15
 8003262:	ddc9      	ble.n	80031f8 <PrintMap+0xc>
	}
}
 8003264:	bf00      	nop
 8003266:	bf00      	nop
 8003268:	3708      	adds	r7, #8
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	20002484 	.word	0x20002484
 8003274:	20002324 	.word	0x20002324
 8003278:	200002a4 	.word	0x200002a4

0800327c <HAL_ADC_ConvCpltCallback>:

// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 100; i++) {
 8003284:	2300      	movs	r3, #0
 8003286:	60fb      	str	r3, [r7, #12]
 8003288:	e029      	b.n	80032de <HAL_ADC_ConvCpltCallback+0x62>
		CNY70[i] = adc_buf[i * 4];
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	4a27      	ldr	r2, [pc, #156]	; (800332c <HAL_ADC_ConvCpltCallback+0xb0>)
 8003290:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003294:	4926      	ldr	r1, [pc, #152]	; (8003330 <HAL_ADC_ConvCpltCallback+0xb4>)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SHARP_1[i] = adc_buf[i * 4 + 1];
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	3301      	adds	r3, #1
 80032a2:	4a22      	ldr	r2, [pc, #136]	; (800332c <HAL_ADC_ConvCpltCallback+0xb0>)
 80032a4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80032a8:	4922      	ldr	r1, [pc, #136]	; (8003334 <HAL_ADC_ConvCpltCallback+0xb8>)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SHARP_2[i] = adc_buf[i * 4 + 2];
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	3302      	adds	r3, #2
 80032b6:	4a1d      	ldr	r2, [pc, #116]	; (800332c <HAL_ADC_ConvCpltCallback+0xb0>)
 80032b8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80032bc:	491e      	ldr	r1, [pc, #120]	; (8003338 <HAL_ADC_ConvCpltCallback+0xbc>)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SHARP_3[i] = adc_buf[i * 4 + 3];
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	3303      	adds	r3, #3
 80032ca:	4a18      	ldr	r2, [pc, #96]	; (800332c <HAL_ADC_ConvCpltCallback+0xb0>)
 80032cc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80032d0:	491a      	ldr	r1, [pc, #104]	; (800333c <HAL_ADC_ConvCpltCallback+0xc0>)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < 100; i++) {
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	3301      	adds	r3, #1
 80032dc:	60fb      	str	r3, [r7, #12]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2b63      	cmp	r3, #99	; 0x63
 80032e2:	ddd2      	ble.n	800328a <HAL_ADC_ConvCpltCallback+0xe>
	}
	Sensors[0] = lecturaCNY70(100, CNY70);
 80032e4:	4912      	ldr	r1, [pc, #72]	; (8003330 <HAL_ADC_ConvCpltCallback+0xb4>)
 80032e6:	2064      	movs	r0, #100	; 0x64
 80032e8:	f000 ff24 	bl	8004134 <lecturaCNY70>
 80032ec:	4603      	mov	r3, r0
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7fd fcf4 	bl	8000cdc <__aeabi_i2f>
 80032f4:	4603      	mov	r3, r0
 80032f6:	4a12      	ldr	r2, [pc, #72]	; (8003340 <HAL_ADC_ConvCpltCallback+0xc4>)
 80032f8:	6013      	str	r3, [r2, #0]
	Sensors[1] = lecSensor(100, SHARP_1);
 80032fa:	490e      	ldr	r1, [pc, #56]	; (8003334 <HAL_ADC_ConvCpltCallback+0xb8>)
 80032fc:	2064      	movs	r0, #100	; 0x64
 80032fe:	f000 fe93 	bl	8004028 <lecSensor>
 8003302:	4603      	mov	r3, r0
 8003304:	4a0e      	ldr	r2, [pc, #56]	; (8003340 <HAL_ADC_ConvCpltCallback+0xc4>)
 8003306:	6053      	str	r3, [r2, #4]
	Sensors[2] = lecSensor(100, SHARP_2);
 8003308:	490b      	ldr	r1, [pc, #44]	; (8003338 <HAL_ADC_ConvCpltCallback+0xbc>)
 800330a:	2064      	movs	r0, #100	; 0x64
 800330c:	f000 fe8c 	bl	8004028 <lecSensor>
 8003310:	4603      	mov	r3, r0
 8003312:	4a0b      	ldr	r2, [pc, #44]	; (8003340 <HAL_ADC_ConvCpltCallback+0xc4>)
 8003314:	6093      	str	r3, [r2, #8]
	Sensors[3] = lecSensor(100, SHARP_3);
 8003316:	4909      	ldr	r1, [pc, #36]	; (800333c <HAL_ADC_ConvCpltCallback+0xc0>)
 8003318:	2064      	movs	r0, #100	; 0x64
 800331a:	f000 fe85 	bl	8004028 <lecSensor>
 800331e:	4603      	mov	r3, r0
 8003320:	4a07      	ldr	r2, [pc, #28]	; (8003340 <HAL_ADC_ConvCpltCallback+0xc4>)
 8003322:	60d3      	str	r3, [r2, #12]

}
 8003324:	bf00      	nop
 8003326:	3710      	adds	r7, #16
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	200002e8 	.word	0x200002e8
 8003330:	200012e8 	.word	0x200012e8
 8003334:	200016e8 	.word	0x200016e8
 8003338:	20001ae8 	.word	0x20001ae8
 800333c:	20001ee8 	.word	0x20001ee8
 8003340:	200022e8 	.word	0x200022e8

08003344 <MAP>:

uint32_t MAP(uint32_t au32_IN, uint32_t au32_INmin, uint32_t au32_INmax,
		uint32_t au32_OUTmin, uint32_t au32_OUTmax) {
 8003344:	b480      	push	{r7}
 8003346:	b085      	sub	sp, #20
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
 8003350:	603b      	str	r3, [r7, #0]
	return ((((au32_IN - au32_INmin) * (au32_OUTmax - au32_OUTmin))
 8003352:	68fa      	ldr	r2, [r7, #12]
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	69b9      	ldr	r1, [r7, #24]
 800335a:	683a      	ldr	r2, [r7, #0]
 800335c:	1a8a      	subs	r2, r1, r2
 800335e:	fb03 f202 	mul.w	r2, r3, r2
			/ (au32_INmax - au32_INmin)) + au32_OUTmin);
 8003362:	6879      	ldr	r1, [r7, #4]
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	1acb      	subs	r3, r1, r3
 8003368:	fbb2 f2f3 	udiv	r2, r2, r3
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	4413      	add	r3, r2
}
 8003370:	4618      	mov	r0, r3
 8003372:	3714      	adds	r7, #20
 8003374:	46bd      	mov	sp, r7
 8003376:	bc80      	pop	{r7}
 8003378:	4770      	bx	lr

0800337a <constrain>:

int constrain(int x, int a, int b) {
 800337a:	b480      	push	{r7}
 800337c:	b085      	sub	sp, #20
 800337e:	af00      	add	r7, sp, #0
 8003380:	60f8      	str	r0, [r7, #12]
 8003382:	60b9      	str	r1, [r7, #8]
 8003384:	607a      	str	r2, [r7, #4]
	if (x < a) {
 8003386:	68fa      	ldr	r2, [r7, #12]
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	429a      	cmp	r2, r3
 800338c:	da01      	bge.n	8003392 <constrain+0x18>
		return a;
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	e006      	b.n	80033a0 <constrain+0x26>
	} else if (b < x) {
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	429a      	cmp	r2, r3
 8003398:	da01      	bge.n	800339e <constrain+0x24>
		return b;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	e000      	b.n	80033a0 <constrain+0x26>
	} else
		return x;
 800339e:	68fb      	ldr	r3, [r7, #12]
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3714      	adds	r7, #20
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bc80      	pop	{r7}
 80033a8:	4770      	bx	lr
	...

080033ac <btnMachine>:

void btnMachine(int index) {
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
	switch (btns[index].estado) {
 80033b4:	4a50      	ldr	r2, [pc, #320]	; (80034f8 <btnMachine+0x14c>)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	011b      	lsls	r3, r3, #4
 80033ba:	4413      	add	r3, r2
 80033bc:	3308      	adds	r3, #8
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d069      	beq.n	8003498 <btnMachine+0xec>
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	f300 8092 	bgt.w	80034ee <btnMachine+0x142>
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d002      	beq.n	80033d4 <btnMachine+0x28>
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d02c      	beq.n	800342c <btnMachine+0x80>
			btns[index].flag = 1;
			btns[index].estado = ESPERA;
		}
		break;
	}
}
 80033d2:	e08c      	b.n	80034ee <btnMachine+0x142>
		btns[index].flag = 0;
 80033d4:	4a48      	ldr	r2, [pc, #288]	; (80034f8 <btnMachine+0x14c>)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	011b      	lsls	r3, r3, #4
 80033da:	4413      	add	r3, r2
 80033dc:	330c      	adds	r3, #12
 80033de:	2200      	movs	r2, #0
 80033e0:	601a      	str	r2, [r3, #0]
		lecturaBtn = HAL_GPIO_ReadPin(btns[index].Port, btns[index].pin);
 80033e2:	4a45      	ldr	r2, [pc, #276]	; (80034f8 <btnMachine+0x14c>)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	011b      	lsls	r3, r3, #4
 80033e8:	4413      	add	r3, r2
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	4942      	ldr	r1, [pc, #264]	; (80034f8 <btnMachine+0x14c>)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	011b      	lsls	r3, r3, #4
 80033f2:	440b      	add	r3, r1
 80033f4:	3304      	adds	r3, #4
 80033f6:	881b      	ldrh	r3, [r3, #0]
 80033f8:	4619      	mov	r1, r3
 80033fa:	4610      	mov	r0, r2
 80033fc:	f002 fe80 	bl	8006100 <HAL_GPIO_ReadPin>
 8003400:	4603      	mov	r3, r0
 8003402:	461a      	mov	r2, r3
 8003404:	4b3d      	ldr	r3, [pc, #244]	; (80034fc <btnMachine+0x150>)
 8003406:	601a      	str	r2, [r3, #0]
		if (lecturaBtn == 0) {
 8003408:	4b3c      	ldr	r3, [pc, #240]	; (80034fc <btnMachine+0x150>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d169      	bne.n	80034e4 <btnMachine+0x138>
			ticks = HAL_GetTick();
 8003410:	f001 fc20 	bl	8004c54 <HAL_GetTick>
 8003414:	4603      	mov	r3, r0
 8003416:	461a      	mov	r2, r3
 8003418:	4b39      	ldr	r3, [pc, #228]	; (8003500 <btnMachine+0x154>)
 800341a:	601a      	str	r2, [r3, #0]
			btns[index].estado = CONFIRMACION;
 800341c:	4a36      	ldr	r2, [pc, #216]	; (80034f8 <btnMachine+0x14c>)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	011b      	lsls	r3, r3, #4
 8003422:	4413      	add	r3, r2
 8003424:	3308      	adds	r3, #8
 8003426:	2201      	movs	r2, #1
 8003428:	601a      	str	r2, [r3, #0]
		break;
 800342a:	e05b      	b.n	80034e4 <btnMachine+0x138>
		lecturaBtn = HAL_GPIO_ReadPin(btns[index].Port, btns[index].pin);
 800342c:	4a32      	ldr	r2, [pc, #200]	; (80034f8 <btnMachine+0x14c>)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	011b      	lsls	r3, r3, #4
 8003432:	4413      	add	r3, r2
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	4930      	ldr	r1, [pc, #192]	; (80034f8 <btnMachine+0x14c>)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	011b      	lsls	r3, r3, #4
 800343c:	440b      	add	r3, r1
 800343e:	3304      	adds	r3, #4
 8003440:	881b      	ldrh	r3, [r3, #0]
 8003442:	4619      	mov	r1, r3
 8003444:	4610      	mov	r0, r2
 8003446:	f002 fe5b 	bl	8006100 <HAL_GPIO_ReadPin>
 800344a:	4603      	mov	r3, r0
 800344c:	461a      	mov	r2, r3
 800344e:	4b2b      	ldr	r3, [pc, #172]	; (80034fc <btnMachine+0x150>)
 8003450:	601a      	str	r2, [r3, #0]
		if (lecturaBtn == 0 && HAL_GetTick() >= ticks + TICKS_BTN) {
 8003452:	4b2a      	ldr	r3, [pc, #168]	; (80034fc <btnMachine+0x150>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d10e      	bne.n	8003478 <btnMachine+0xcc>
 800345a:	f001 fbfb 	bl	8004c54 <HAL_GetTick>
 800345e:	4602      	mov	r2, r0
 8003460:	4b27      	ldr	r3, [pc, #156]	; (8003500 <btnMachine+0x154>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	3319      	adds	r3, #25
 8003466:	429a      	cmp	r2, r3
 8003468:	d306      	bcc.n	8003478 <btnMachine+0xcc>
			btns[index].estado = LIBERACION;
 800346a:	4a23      	ldr	r2, [pc, #140]	; (80034f8 <btnMachine+0x14c>)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	011b      	lsls	r3, r3, #4
 8003470:	4413      	add	r3, r2
 8003472:	3308      	adds	r3, #8
 8003474:	2202      	movs	r2, #2
 8003476:	601a      	str	r2, [r3, #0]
		if (lecturaBtn == 1 && ticks < TICKS_BTN) {
 8003478:	4b20      	ldr	r3, [pc, #128]	; (80034fc <btnMachine+0x150>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2b01      	cmp	r3, #1
 800347e:	d133      	bne.n	80034e8 <btnMachine+0x13c>
 8003480:	4b1f      	ldr	r3, [pc, #124]	; (8003500 <btnMachine+0x154>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2b18      	cmp	r3, #24
 8003486:	dc2f      	bgt.n	80034e8 <btnMachine+0x13c>
			btns[index].estado = ESPERA;
 8003488:	4a1b      	ldr	r2, [pc, #108]	; (80034f8 <btnMachine+0x14c>)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	011b      	lsls	r3, r3, #4
 800348e:	4413      	add	r3, r2
 8003490:	3308      	adds	r3, #8
 8003492:	2200      	movs	r2, #0
 8003494:	601a      	str	r2, [r3, #0]
		break;
 8003496:	e027      	b.n	80034e8 <btnMachine+0x13c>
		lecturaBtn = HAL_GPIO_ReadPin(btns[index].Port, btns[index].pin);
 8003498:	4a17      	ldr	r2, [pc, #92]	; (80034f8 <btnMachine+0x14c>)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	011b      	lsls	r3, r3, #4
 800349e:	4413      	add	r3, r2
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	4915      	ldr	r1, [pc, #84]	; (80034f8 <btnMachine+0x14c>)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	011b      	lsls	r3, r3, #4
 80034a8:	440b      	add	r3, r1
 80034aa:	3304      	adds	r3, #4
 80034ac:	881b      	ldrh	r3, [r3, #0]
 80034ae:	4619      	mov	r1, r3
 80034b0:	4610      	mov	r0, r2
 80034b2:	f002 fe25 	bl	8006100 <HAL_GPIO_ReadPin>
 80034b6:	4603      	mov	r3, r0
 80034b8:	461a      	mov	r2, r3
 80034ba:	4b10      	ldr	r3, [pc, #64]	; (80034fc <btnMachine+0x150>)
 80034bc:	601a      	str	r2, [r3, #0]
		if (lecturaBtn == 1) {
 80034be:	4b0f      	ldr	r3, [pc, #60]	; (80034fc <btnMachine+0x150>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d112      	bne.n	80034ec <btnMachine+0x140>
			btns[index].flag = 1;
 80034c6:	4a0c      	ldr	r2, [pc, #48]	; (80034f8 <btnMachine+0x14c>)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	011b      	lsls	r3, r3, #4
 80034cc:	4413      	add	r3, r2
 80034ce:	330c      	adds	r3, #12
 80034d0:	2201      	movs	r2, #1
 80034d2:	601a      	str	r2, [r3, #0]
			btns[index].estado = ESPERA;
 80034d4:	4a08      	ldr	r2, [pc, #32]	; (80034f8 <btnMachine+0x14c>)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	011b      	lsls	r3, r3, #4
 80034da:	4413      	add	r3, r2
 80034dc:	3308      	adds	r3, #8
 80034de:	2200      	movs	r2, #0
 80034e0:	601a      	str	r2, [r3, #0]
		break;
 80034e2:	e003      	b.n	80034ec <btnMachine+0x140>
		break;
 80034e4:	bf00      	nop
 80034e6:	e002      	b.n	80034ee <btnMachine+0x142>
		break;
 80034e8:	bf00      	nop
 80034ea:	e000      	b.n	80034ee <btnMachine+0x142>
		break;
 80034ec:	bf00      	nop
}
 80034ee:	bf00      	nop
 80034f0:	3708      	adds	r7, #8
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	20002348 	.word	0x20002348
 80034fc:	20002320 	.word	0x20002320
 8003500:	2000231c 	.word	0x2000231c

08003504 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003504:	b480      	push	{r7}
 8003506:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003508:	b672      	cpsid	i
}
 800350a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800350c:	e7fe      	b.n	800350c <Error_Handler+0x8>
	...

08003510 <calcularDistancia>:
 */
#include "motors.h"

int counterD, counterI;

float calcularDistancia(int counter) {
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  return ((counter) * 2.51 / 10);
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f7fc ff73 	bl	8000404 <__aeabi_i2d>
 800351e:	a30c      	add	r3, pc, #48	; (adr r3, 8003550 <calcularDistancia+0x40>)
 8003520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003524:	f7fc ffd8 	bl	80004d8 <__aeabi_dmul>
 8003528:	4602      	mov	r2, r0
 800352a:	460b      	mov	r3, r1
 800352c:	4610      	mov	r0, r2
 800352e:	4619      	mov	r1, r3
 8003530:	f04f 0200 	mov.w	r2, #0
 8003534:	4b08      	ldr	r3, [pc, #32]	; (8003558 <calcularDistancia+0x48>)
 8003536:	f7fd f8f9 	bl	800072c <__aeabi_ddiv>
 800353a:	4602      	mov	r2, r0
 800353c:	460b      	mov	r3, r1
 800353e:	4610      	mov	r0, r2
 8003540:	4619      	mov	r1, r3
 8003542:	f7fd fac1 	bl	8000ac8 <__aeabi_d2f>
 8003546:	4603      	mov	r3, r0
}
 8003548:	4618      	mov	r0, r3
 800354a:	3708      	adds	r7, #8
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}
 8003550:	e147ae14 	.word	0xe147ae14
 8003554:	4004147a 	.word	0x4004147a
 8003558:	40240000 	.word	0x40240000

0800355c <runMotor>:
	} else {
		TIM4->CCR3 = power;
	}
}

void runMotor(int dir, int motor) {
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
	switch (dir) {
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2b05      	cmp	r3, #5
 800356a:	d03f      	beq.n	80035ec <runMotor+0x90>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2b05      	cmp	r3, #5
 8003570:	dc57      	bgt.n	8003622 <runMotor+0xc6>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d003      	beq.n	8003580 <runMotor+0x24>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2b02      	cmp	r3, #2
 800357c:	d01b      	beq.n	80035b6 <runMotor+0x5a>
			HAL_GPIO_WritePin(BIN1, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(BIN2, GPIO_PIN_RESET);
		}
		break;
	}
}
 800357e:	e050      	b.n	8003622 <runMotor+0xc6>
		if (motor == MOTOR_A) {
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d10a      	bne.n	800359c <runMotor+0x40>
			HAL_GPIO_WritePin(AIN1, GPIO_PIN_SET);
 8003586:	2201      	movs	r2, #1
 8003588:	2110      	movs	r1, #16
 800358a:	4828      	ldr	r0, [pc, #160]	; (800362c <runMotor+0xd0>)
 800358c:	f002 fdcf 	bl	800612e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(AIN2, GPIO_PIN_RESET);
 8003590:	2200      	movs	r2, #0
 8003592:	2120      	movs	r1, #32
 8003594:	4825      	ldr	r0, [pc, #148]	; (800362c <runMotor+0xd0>)
 8003596:	f002 fdca 	bl	800612e <HAL_GPIO_WritePin>
		break;
 800359a:	e042      	b.n	8003622 <runMotor+0xc6>
			HAL_GPIO_WritePin(BIN1, GPIO_PIN_SET);
 800359c:	2201      	movs	r2, #1
 800359e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80035a2:	4823      	ldr	r0, [pc, #140]	; (8003630 <runMotor+0xd4>)
 80035a4:	f002 fdc3 	bl	800612e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BIN2, GPIO_PIN_RESET);
 80035a8:	2200      	movs	r2, #0
 80035aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80035ae:	4820      	ldr	r0, [pc, #128]	; (8003630 <runMotor+0xd4>)
 80035b0:	f002 fdbd 	bl	800612e <HAL_GPIO_WritePin>
		break;
 80035b4:	e035      	b.n	8003622 <runMotor+0xc6>
		if (motor == MOTOR_A) {
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d10a      	bne.n	80035d2 <runMotor+0x76>
			HAL_GPIO_WritePin(AIN1, GPIO_PIN_RESET);
 80035bc:	2200      	movs	r2, #0
 80035be:	2110      	movs	r1, #16
 80035c0:	481a      	ldr	r0, [pc, #104]	; (800362c <runMotor+0xd0>)
 80035c2:	f002 fdb4 	bl	800612e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(AIN2, GPIO_PIN_SET);
 80035c6:	2201      	movs	r2, #1
 80035c8:	2120      	movs	r1, #32
 80035ca:	4818      	ldr	r0, [pc, #96]	; (800362c <runMotor+0xd0>)
 80035cc:	f002 fdaf 	bl	800612e <HAL_GPIO_WritePin>
		break;
 80035d0:	e027      	b.n	8003622 <runMotor+0xc6>
			HAL_GPIO_WritePin(BIN1, GPIO_PIN_RESET);
 80035d2:	2200      	movs	r2, #0
 80035d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80035d8:	4815      	ldr	r0, [pc, #84]	; (8003630 <runMotor+0xd4>)
 80035da:	f002 fda8 	bl	800612e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BIN2, GPIO_PIN_SET);
 80035de:	2201      	movs	r2, #1
 80035e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80035e4:	4812      	ldr	r0, [pc, #72]	; (8003630 <runMotor+0xd4>)
 80035e6:	f002 fda2 	bl	800612e <HAL_GPIO_WritePin>
		break;
 80035ea:	e01a      	b.n	8003622 <runMotor+0xc6>
		if (motor == MOTOR_A) {
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d10a      	bne.n	8003608 <runMotor+0xac>
			HAL_GPIO_WritePin(AIN1, GPIO_PIN_RESET);
 80035f2:	2200      	movs	r2, #0
 80035f4:	2110      	movs	r1, #16
 80035f6:	480d      	ldr	r0, [pc, #52]	; (800362c <runMotor+0xd0>)
 80035f8:	f002 fd99 	bl	800612e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(AIN2, GPIO_PIN_RESET);
 80035fc:	2200      	movs	r2, #0
 80035fe:	2120      	movs	r1, #32
 8003600:	480a      	ldr	r0, [pc, #40]	; (800362c <runMotor+0xd0>)
 8003602:	f002 fd94 	bl	800612e <HAL_GPIO_WritePin>
		break;
 8003606:	e00b      	b.n	8003620 <runMotor+0xc4>
			HAL_GPIO_WritePin(BIN1, GPIO_PIN_RESET);
 8003608:	2200      	movs	r2, #0
 800360a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800360e:	4808      	ldr	r0, [pc, #32]	; (8003630 <runMotor+0xd4>)
 8003610:	f002 fd8d 	bl	800612e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BIN2, GPIO_PIN_RESET);
 8003614:	2200      	movs	r2, #0
 8003616:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800361a:	4805      	ldr	r0, [pc, #20]	; (8003630 <runMotor+0xd4>)
 800361c:	f002 fd87 	bl	800612e <HAL_GPIO_WritePin>
		break;
 8003620:	bf00      	nop
}
 8003622:	bf00      	nop
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	40010c00 	.word	0x40010c00
 8003630:	40010800 	.word	0x40010800

08003634 <rotateAxis>:
#include "defs.h"
#include "main.h"

float offset = 0;
int giro = 0;
void rotateAxis(int direccion, int direcciones[4]) {
 8003634:	b480      	push	{r7}
 8003636:	b085      	sub	sp, #20
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]
	switch (direccion) {
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2b01      	cmp	r3, #1
 8003642:	d025      	beq.n	8003690 <rotateAxis+0x5c>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2b03      	cmp	r3, #3
 8003648:	d144      	bne.n	80036d4 <rotateAxis+0xa0>
	case DERECHA:
		for (int i = 0; i < 4; i++) {
 800364a:	2300      	movs	r3, #0
 800364c:	60fb      	str	r3, [r7, #12]
 800364e:	e01b      	b.n	8003688 <rotateAxis+0x54>
			direcciones[i] = direcciones[i] - 1;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	683a      	ldr	r2, [r7, #0]
 8003656:	4413      	add	r3, r2
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	6839      	ldr	r1, [r7, #0]
 8003660:	440b      	add	r3, r1
 8003662:	3a01      	subs	r2, #1
 8003664:	601a      	str	r2, [r3, #0]
			if (direcciones[i] == -1) {
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	683a      	ldr	r2, [r7, #0]
 800366c:	4413      	add	r3, r2
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003674:	d105      	bne.n	8003682 <rotateAxis+0x4e>
				direcciones[i] = 3;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	683a      	ldr	r2, [r7, #0]
 800367c:	4413      	add	r3, r2
 800367e:	2203      	movs	r2, #3
 8003680:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < 4; i++) {
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	3301      	adds	r3, #1
 8003686:	60fb      	str	r3, [r7, #12]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2b03      	cmp	r3, #3
 800368c:	dde0      	ble.n	8003650 <rotateAxis+0x1c>
			}
		}
		break;
 800368e:	e021      	b.n	80036d4 <rotateAxis+0xa0>
	case IZQUIERDA:
		for (int j = 0; j < 4; j++) {
 8003690:	2300      	movs	r3, #0
 8003692:	60bb      	str	r3, [r7, #8]
 8003694:	e01a      	b.n	80036cc <rotateAxis+0x98>
			direcciones[j] = direcciones[j] + 1;
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	683a      	ldr	r2, [r7, #0]
 800369c:	4413      	add	r3, r2
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	6839      	ldr	r1, [r7, #0]
 80036a6:	440b      	add	r3, r1
 80036a8:	3201      	adds	r2, #1
 80036aa:	601a      	str	r2, [r3, #0]
			if (direcciones[j] == 4) {
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	683a      	ldr	r2, [r7, #0]
 80036b2:	4413      	add	r3, r2
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2b04      	cmp	r3, #4
 80036b8:	d105      	bne.n	80036c6 <rotateAxis+0x92>
				direcciones[j] = 0;
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	683a      	ldr	r2, [r7, #0]
 80036c0:	4413      	add	r3, r2
 80036c2:	2200      	movs	r2, #0
 80036c4:	601a      	str	r2, [r3, #0]
		for (int j = 0; j < 4; j++) {
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	3301      	adds	r3, #1
 80036ca:	60bb      	str	r3, [r7, #8]
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	2b03      	cmp	r3, #3
 80036d0:	dde1      	ble.n	8003696 <rotateAxis+0x62>
			}
		}
		break;
 80036d2:	bf00      	nop
	}
}
 80036d4:	bf00      	nop
 80036d6:	3714      	adds	r7, #20
 80036d8:	46bd      	mov	sp, r7
 80036da:	bc80      	pop	{r7}
 80036dc:	4770      	bx	lr

080036de <resetAxis>:

void resetAxis(int direcciones[4]) {
 80036de:	b480      	push	{r7}
 80036e0:	b085      	sub	sp, #20
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 4; i++) {
 80036e6:	2300      	movs	r3, #0
 80036e8:	60fb      	str	r3, [r7, #12]
 80036ea:	e008      	b.n	80036fe <resetAxis+0x20>
		direcciones[i] = i;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	4413      	add	r3, r2
 80036f4:	68fa      	ldr	r2, [r7, #12]
 80036f6:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 4; i++) {
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	3301      	adds	r3, #1
 80036fc:	60fb      	str	r3, [r7, #12]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2b03      	cmp	r3, #3
 8003702:	ddf3      	ble.n	80036ec <resetAxis+0xe>
	}
}
 8003704:	bf00      	nop
 8003706:	bf00      	nop
 8003708:	3714      	adds	r7, #20
 800370a:	46bd      	mov	sp, r7
 800370c:	bc80      	pop	{r7}
 800370e:	4770      	bx	lr

08003710 <movementMachine>:

void movementMachine(int move) {
 8003710:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003714:	b083      	sub	sp, #12
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
	switch (movementState) {
 800371a:	4b88      	ldr	r3, [pc, #544]	; (800393c <movementMachine+0x22c>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2b05      	cmp	r3, #5
 8003720:	f200 8359 	bhi.w	8003dd6 <movementMachine+0x6c6>
 8003724:	a201      	add	r2, pc, #4	; (adr r2, 800372c <movementMachine+0x1c>)
 8003726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800372a:	bf00      	nop
 800372c:	08003793 	.word	0x08003793
 8003730:	0800396d 	.word	0x0800396d
 8003734:	08003ca1 	.word	0x08003ca1
 8003738:	08003b0b 	.word	0x08003b0b
 800373c:	08003dd7 	.word	0x08003dd7
 8003740:	08003745 	.word	0x08003745
	case OFF:
		runMotor(OFF, MOTOR_A);
 8003744:	2100      	movs	r1, #0
 8003746:	2005      	movs	r0, #5
 8003748:	f7ff ff08 	bl	800355c <runMotor>
		runMotor(OFF, MOTOR_B);
 800374c:	2101      	movs	r1, #1
 800374e:	2005      	movs	r0, #5
 8003750:	f7ff ff04 	bl	800355c <runMotor>
		if (move != OFF) {
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2b05      	cmp	r3, #5
 8003758:	f000 833c 	beq.w	8003dd4 <movementMachine+0x6c4>
			movementState = move;
 800375c:	4a77      	ldr	r2, [pc, #476]	; (800393c <movementMachine+0x22c>)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6013      	str	r3, [r2, #0]
			if (move != ADELANTE) {
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00a      	beq.n	800377e <movementMachine+0x6e>
				/*TIM3->CNT = 32767;
				 TIM1->CNT = 32767;
				 offset = 8224.5;*/
				TIM3->CNT = 0;
 8003768:	4b75      	ldr	r3, [pc, #468]	; (8003940 <movementMachine+0x230>)
 800376a:	2200      	movs	r2, #0
 800376c:	625a      	str	r2, [r3, #36]	; 0x24
				TIM1->CNT = 0;
 800376e:	4b75      	ldr	r3, [pc, #468]	; (8003944 <movementMachine+0x234>)
 8003770:	2200      	movs	r2, #0
 8003772:	625a      	str	r2, [r3, #36]	; 0x24
				offset = 0;
 8003774:	4b74      	ldr	r3, [pc, #464]	; (8003948 <movementMachine+0x238>)
 8003776:	f04f 0200 	mov.w	r2, #0
 800377a:	601a      	str	r2, [r3, #0]
				TIM1->CNT = 100;
				offset = 25.1;
			}
			//intUartSend(TIM3->CNT);
		}
		break;
 800377c:	e32a      	b.n	8003dd4 <movementMachine+0x6c4>
				TIM3->CNT = 100;
 800377e:	4b70      	ldr	r3, [pc, #448]	; (8003940 <movementMachine+0x230>)
 8003780:	2264      	movs	r2, #100	; 0x64
 8003782:	625a      	str	r2, [r3, #36]	; 0x24
				TIM1->CNT = 100;
 8003784:	4b6f      	ldr	r3, [pc, #444]	; (8003944 <movementMachine+0x234>)
 8003786:	2264      	movs	r2, #100	; 0x64
 8003788:	625a      	str	r2, [r3, #36]	; 0x24
				offset = 25.1;
 800378a:	4b6f      	ldr	r3, [pc, #444]	; (8003948 <movementMachine+0x238>)
 800378c:	4a6f      	ldr	r2, [pc, #444]	; (800394c <movementMachine+0x23c>)
 800378e:	601a      	str	r2, [r3, #0]
		break;
 8003790:	e320      	b.n	8003dd4 <movementMachine+0x6c4>
	case ADELANTE:
		//TIM4->CCR3 = xSpeed;
		//TIM4->CCR4 = xSpeed;
		intUartSend(TIM1->CNT);
 8003792:	4b6c      	ldr	r3, [pc, #432]	; (8003944 <movementMachine+0x234>)
 8003794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003796:	4618      	mov	r0, r3
 8003798:	f7fd fa9c 	bl	8000cd4 <__aeabi_ui2f>
 800379c:	4603      	mov	r3, r0
 800379e:	4618      	mov	r0, r3
 80037a0:	f7fe f956 	bl	8001a50 <intUartSend>

		objectiveDistance = forwardChoice[choice] + offset;
 80037a4:	4b6a      	ldr	r3, [pc, #424]	; (8003950 <movementMachine+0x240>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a6a      	ldr	r2, [pc, #424]	; (8003954 <movementMachine+0x244>)
 80037aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037ae:	4618      	mov	r0, r3
 80037b0:	f7fd fa94 	bl	8000cdc <__aeabi_i2f>
 80037b4:	4602      	mov	r2, r0
 80037b6:	4b64      	ldr	r3, [pc, #400]	; (8003948 <movementMachine+0x238>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4619      	mov	r1, r3
 80037bc:	4610      	mov	r0, r2
 80037be:	f7fd f9d9 	bl	8000b74 <__addsf3>
 80037c2:	4603      	mov	r3, r0
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7fd fca3 	bl	8001110 <__aeabi_f2iz>
 80037ca:	4603      	mov	r3, r0
 80037cc:	4a62      	ldr	r2, [pc, #392]	; (8003958 <movementMachine+0x248>)
 80037ce:	6013      	str	r3, [r2, #0]
		//if (Sensors[2] > 5) {
		if ((calcularDistancia((TIM3->CNT) >> 1)
 80037d0:	4b5b      	ldr	r3, [pc, #364]	; (8003940 <movementMachine+0x230>)
 80037d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d4:	085b      	lsrs	r3, r3, #1
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7ff fe9a 	bl	8003510 <calcularDistancia>
 80037dc:	4604      	mov	r4, r0
				+ calcularDistancia((TIM1->CNT) >> 1)) / 2
 80037de:	4b59      	ldr	r3, [pc, #356]	; (8003944 <movementMachine+0x234>)
 80037e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e2:	085b      	lsrs	r3, r3, #1
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7ff fe93 	bl	8003510 <calcularDistancia>
 80037ea:	4603      	mov	r3, r0
 80037ec:	4619      	mov	r1, r3
 80037ee:	4620      	mov	r0, r4
 80037f0:	f7fd f9c0 	bl	8000b74 <__addsf3>
 80037f4:	4603      	mov	r3, r0
 80037f6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7fd fb76 	bl	8000eec <__aeabi_fdiv>
 8003800:	4603      	mov	r3, r0
 8003802:	461c      	mov	r4, r3
				< forwardChoice[choice] + offset
 8003804:	4b52      	ldr	r3, [pc, #328]	; (8003950 <movementMachine+0x240>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a52      	ldr	r2, [pc, #328]	; (8003954 <movementMachine+0x244>)
 800380a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800380e:	4618      	mov	r0, r3
 8003810:	f7fd fa64 	bl	8000cdc <__aeabi_i2f>
 8003814:	4602      	mov	r2, r0
 8003816:	4b4c      	ldr	r3, [pc, #304]	; (8003948 <movementMachine+0x238>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4619      	mov	r1, r3
 800381c:	4610      	mov	r0, r2
 800381e:	f7fd f9a9 	bl	8000b74 <__addsf3>
 8003822:	4603      	mov	r3, r0
		if ((calcularDistancia((TIM3->CNT) >> 1)
 8003824:	4619      	mov	r1, r3
 8003826:	4620      	mov	r0, r4
 8003828:	f7fd fc4a 	bl	80010c0 <__aeabi_fcmplt>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d13e      	bne.n	80038b0 <movementMachine+0x1a0>
				|| (calcularDistancia((TIM3->CNT) >> 1)
 8003832:	4b43      	ldr	r3, [pc, #268]	; (8003940 <movementMachine+0x230>)
 8003834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003836:	085b      	lsrs	r3, r3, #1
 8003838:	4618      	mov	r0, r3
 800383a:	f7ff fe69 	bl	8003510 <calcularDistancia>
 800383e:	4604      	mov	r4, r0
						+ calcularDistancia((TIM1->CNT) >> 1)) / 2
 8003840:	4b40      	ldr	r3, [pc, #256]	; (8003944 <movementMachine+0x234>)
 8003842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003844:	085b      	lsrs	r3, r3, #1
 8003846:	4618      	mov	r0, r3
 8003848:	f7ff fe62 	bl	8003510 <calcularDistancia>
 800384c:	4603      	mov	r3, r0
 800384e:	4619      	mov	r1, r3
 8003850:	4620      	mov	r0, r4
 8003852:	f7fd f98f 	bl	8000b74 <__addsf3>
 8003856:	4603      	mov	r3, r0
 8003858:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800385c:	4618      	mov	r0, r3
 800385e:	f7fd fb45 	bl	8000eec <__aeabi_fdiv>
 8003862:	4603      	mov	r3, r0
 8003864:	4618      	mov	r0, r3
 8003866:	f7fc fddf 	bl	8000428 <__aeabi_f2d>
 800386a:	4604      	mov	r4, r0
 800386c:	460d      	mov	r5, r1
						> forwardChoice[choice] + offset + 0.5) {
 800386e:	4b38      	ldr	r3, [pc, #224]	; (8003950 <movementMachine+0x240>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a38      	ldr	r2, [pc, #224]	; (8003954 <movementMachine+0x244>)
 8003874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003878:	4618      	mov	r0, r3
 800387a:	f7fd fa2f 	bl	8000cdc <__aeabi_i2f>
 800387e:	4602      	mov	r2, r0
 8003880:	4b31      	ldr	r3, [pc, #196]	; (8003948 <movementMachine+0x238>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4619      	mov	r1, r3
 8003886:	4610      	mov	r0, r2
 8003888:	f7fd f974 	bl	8000b74 <__addsf3>
 800388c:	4603      	mov	r3, r0
 800388e:	4618      	mov	r0, r3
 8003890:	f7fc fdca 	bl	8000428 <__aeabi_f2d>
 8003894:	f04f 0200 	mov.w	r2, #0
 8003898:	4b30      	ldr	r3, [pc, #192]	; (800395c <movementMachine+0x24c>)
 800389a:	f7fc fc67 	bl	800016c <__adddf3>
 800389e:	4602      	mov	r2, r0
 80038a0:	460b      	mov	r3, r1
				|| (calcularDistancia((TIM3->CNT) >> 1)
 80038a2:	4620      	mov	r0, r4
 80038a4:	4629      	mov	r1, r5
 80038a6:	f7fd f8a7 	bl	80009f8 <__aeabi_dcmpgt>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d018      	beq.n	80038e2 <movementMachine+0x1d2>
			//moveStraight();
			StraightFlag = 1;
 80038b0:	4b2b      	ldr	r3, [pc, #172]	; (8003960 <movementMachine+0x250>)
 80038b2:	2201      	movs	r2, #1
 80038b4:	601a      	str	r2, [r3, #0]
			//intUartSend(objectiveDistance -(calcularDistancia(TIM3->CNT) + calcularDistancia(TIM1->CNT))/2);
			//intUartSend(1);
			if (direction == ADELANTE) {
 80038b6:	4b2b      	ldr	r3, [pc, #172]	; (8003964 <movementMachine+0x254>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d108      	bne.n	80038d0 <movementMachine+0x1c0>
				runMotor(ADELANTE, MOTOR_A);
 80038be:	2100      	movs	r1, #0
 80038c0:	2000      	movs	r0, #0
 80038c2:	f7ff fe4b 	bl	800355c <runMotor>
				runMotor(ADELANTE, MOTOR_B);
 80038c6:	2101      	movs	r1, #1
 80038c8:	2000      	movs	r0, #0
 80038ca:	f7ff fe47 	bl	800355c <runMotor>
			if (direction == ADELANTE) {
 80038ce:	e033      	b.n	8003938 <movementMachine+0x228>
			} else {
				runMotor(ATRAS, MOTOR_A);
 80038d0:	2100      	movs	r1, #0
 80038d2:	2002      	movs	r0, #2
 80038d4:	f7ff fe42 	bl	800355c <runMotor>
				runMotor(ATRAS, MOTOR_B);
 80038d8:	2101      	movs	r1, #1
 80038da:	2002      	movs	r0, #2
 80038dc:	f7ff fe3e 	bl	800355c <runMotor>
			if (direction == ADELANTE) {
 80038e0:	e02a      	b.n	8003938 <movementMachine+0x228>
			}

		} else {
			StraightFlag = 0;
 80038e2:	4b1f      	ldr	r3, [pc, #124]	; (8003960 <movementMachine+0x250>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	601a      	str	r2, [r3, #0]
			movimientoFlag = 1;
 80038e8:	4b1f      	ldr	r3, [pc, #124]	; (8003968 <movementMachine+0x258>)
 80038ea:	2201      	movs	r2, #1
 80038ec:	601a      	str	r2, [r3, #0]
			movementState = OFF;
 80038ee:	4b13      	ldr	r3, [pc, #76]	; (800393c <movementMachine+0x22c>)
 80038f0:	2205      	movs	r2, #5
 80038f2:	601a      	str	r2, [r3, #0]
			//runMotor(OFF, MOTOR_A);
			//runMotor(OFF, MOTOR_B);
			intUartSend(offset);
 80038f4:	4b14      	ldr	r3, [pc, #80]	; (8003948 <movementMachine+0x238>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7fe f8a9 	bl	8001a50 <intUartSend>
			//TIM3->CNT = 0;
			//TIM1->CNT = 0;
			offset = (calcularDistancia((TIM3->CNT) >> 1)
 80038fe:	4b10      	ldr	r3, [pc, #64]	; (8003940 <movementMachine+0x230>)
 8003900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003902:	085b      	lsrs	r3, r3, #1
 8003904:	4618      	mov	r0, r3
 8003906:	f7ff fe03 	bl	8003510 <calcularDistancia>
 800390a:	4604      	mov	r4, r0
					+ calcularDistancia((TIM1->CNT) >> 1)) / 2;
 800390c:	4b0d      	ldr	r3, [pc, #52]	; (8003944 <movementMachine+0x234>)
 800390e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003910:	085b      	lsrs	r3, r3, #1
 8003912:	4618      	mov	r0, r3
 8003914:	f7ff fdfc 	bl	8003510 <calcularDistancia>
 8003918:	4603      	mov	r3, r0
 800391a:	4619      	mov	r1, r3
 800391c:	4620      	mov	r0, r4
 800391e:	f7fd f929 	bl	8000b74 <__addsf3>
 8003922:	4603      	mov	r3, r0
 8003924:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003928:	4618      	mov	r0, r3
 800392a:	f7fd fadf 	bl	8000eec <__aeabi_fdiv>
 800392e:	4603      	mov	r3, r0
 8003930:	461a      	mov	r2, r3
			offset = (calcularDistancia((TIM3->CNT) >> 1)
 8003932:	4b05      	ldr	r3, [pc, #20]	; (8003948 <movementMachine+0x238>)
 8003934:	601a      	str	r2, [r3, #0]
		 movementState = OFF;
		 offset = (calcularDistancia((TIM3->CNT) >> 1)
		 + calcularDistancia((TIM1->CNT) >> 1)) / 2;

		 }*/
		break;
 8003936:	e24e      	b.n	8003dd6 <movementMachine+0x6c6>
 8003938:	e24d      	b.n	8003dd6 <movementMachine+0x6c6>
 800393a:	bf00      	nop
 800393c:	2000005c 	.word	0x2000005c
 8003940:	40000400 	.word	0x40000400
 8003944:	40012c00 	.word	0x40012c00
 8003948:	200040b4 	.word	0x200040b4
 800394c:	41c8cccd 	.word	0x41c8cccd
 8003950:	20002308 	.word	0x20002308
 8003954:	20000040 	.word	0x20000040
 8003958:	200040ac 	.word	0x200040ac
 800395c:	3fe00000 	.word	0x3fe00000
 8003960:	200040a4 	.word	0x200040a4
 8003964:	200040b0 	.word	0x200040b0
 8003968:	20002340 	.word	0x20002340
	case IZQUIERDA:
		TIM4->CCR3 = baseChoice[choice]
 800396c:	4bae      	ldr	r3, [pc, #696]	; (8003c28 <movementMachine+0x518>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4aae      	ldr	r2, [pc, #696]	; (8003c2c <movementMachine+0x51c>)
 8003972:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				- (calcularDistancia((TIM3->CNT) >> 1)
 8003976:	4618      	mov	r0, r3
 8003978:	f7fc fd44 	bl	8000404 <__aeabi_i2d>
 800397c:	4604      	mov	r4, r0
 800397e:	460d      	mov	r5, r1
 8003980:	4bab      	ldr	r3, [pc, #684]	; (8003c30 <movementMachine+0x520>)
 8003982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003984:	085b      	lsrs	r3, r3, #1
 8003986:	4618      	mov	r0, r3
 8003988:	f7ff fdc2 	bl	8003510 <calcularDistancia>
 800398c:	4606      	mov	r6, r0
						* (baseChoice[choice] / LeftChoice[choice])
 800398e:	4ba6      	ldr	r3, [pc, #664]	; (8003c28 <movementMachine+0x518>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4aa6      	ldr	r2, [pc, #664]	; (8003c2c <movementMachine+0x51c>)
 8003994:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003998:	4ba3      	ldr	r3, [pc, #652]	; (8003c28 <movementMachine+0x518>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	49a5      	ldr	r1, [pc, #660]	; (8003c34 <movementMachine+0x524>)
 800399e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80039a2:	fb92 f3f3 	sdiv	r3, r2, r3
 80039a6:	4618      	mov	r0, r3
 80039a8:	f7fd f998 	bl	8000cdc <__aeabi_i2f>
 80039ac:	4603      	mov	r3, r0
 80039ae:	4619      	mov	r1, r3
 80039b0:	4630      	mov	r0, r6
 80039b2:	f7fd f9e7 	bl	8000d84 <__aeabi_fmul>
 80039b6:	4603      	mov	r3, r0
 80039b8:	4618      	mov	r0, r3
 80039ba:	f7fc fd35 	bl	8000428 <__aeabi_f2d>
 80039be:	4680      	mov	r8, r0
 80039c0:	4689      	mov	r9, r1
						- baseChoice[choice] / 1.8);
 80039c2:	4b99      	ldr	r3, [pc, #612]	; (8003c28 <movementMachine+0x518>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a99      	ldr	r2, [pc, #612]	; (8003c2c <movementMachine+0x51c>)
 80039c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7fc fd19 	bl	8000404 <__aeabi_i2d>
 80039d2:	a393      	add	r3, pc, #588	; (adr r3, 8003c20 <movementMachine+0x510>)
 80039d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d8:	f7fc fea8 	bl	800072c <__aeabi_ddiv>
 80039dc:	4602      	mov	r2, r0
 80039de:	460b      	mov	r3, r1
 80039e0:	4640      	mov	r0, r8
 80039e2:	4649      	mov	r1, r9
 80039e4:	f7fc fbc0 	bl	8000168 <__aeabi_dsub>
 80039e8:	4602      	mov	r2, r0
 80039ea:	460b      	mov	r3, r1
				- (calcularDistancia((TIM3->CNT) >> 1)
 80039ec:	4620      	mov	r0, r4
 80039ee:	4629      	mov	r1, r5
 80039f0:	f7fc fbba 	bl	8000168 <__aeabi_dsub>
 80039f4:	4602      	mov	r2, r0
 80039f6:	460b      	mov	r3, r1
		TIM4->CCR3 = baseChoice[choice]
 80039f8:	4c8f      	ldr	r4, [pc, #572]	; (8003c38 <movementMachine+0x528>)
 80039fa:	4610      	mov	r0, r2
 80039fc:	4619      	mov	r1, r3
 80039fe:	f7fd f843 	bl	8000a88 <__aeabi_d2uiz>
 8003a02:	4603      	mov	r3, r0
 8003a04:	63e3      	str	r3, [r4, #60]	; 0x3c
		TIM4->CCR4 = baseChoice[choice]
 8003a06:	4b88      	ldr	r3, [pc, #544]	; (8003c28 <movementMachine+0x518>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a88      	ldr	r2, [pc, #544]	; (8003c2c <movementMachine+0x51c>)
 8003a0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				- (calcularDistancia((TIM3->CNT) >> 1)
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7fc fcf7 	bl	8000404 <__aeabi_i2d>
 8003a16:	4604      	mov	r4, r0
 8003a18:	460d      	mov	r5, r1
 8003a1a:	4b85      	ldr	r3, [pc, #532]	; (8003c30 <movementMachine+0x520>)
 8003a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1e:	085b      	lsrs	r3, r3, #1
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7ff fd75 	bl	8003510 <calcularDistancia>
 8003a26:	4606      	mov	r6, r0
						* (baseChoice[choice] / LeftChoice[choice])
 8003a28:	4b7f      	ldr	r3, [pc, #508]	; (8003c28 <movementMachine+0x518>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a7f      	ldr	r2, [pc, #508]	; (8003c2c <movementMachine+0x51c>)
 8003a2e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003a32:	4b7d      	ldr	r3, [pc, #500]	; (8003c28 <movementMachine+0x518>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	497f      	ldr	r1, [pc, #508]	; (8003c34 <movementMachine+0x524>)
 8003a38:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003a3c:	fb92 f3f3 	sdiv	r3, r2, r3
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7fd f94b 	bl	8000cdc <__aeabi_i2f>
 8003a46:	4603      	mov	r3, r0
 8003a48:	4619      	mov	r1, r3
 8003a4a:	4630      	mov	r0, r6
 8003a4c:	f7fd f99a 	bl	8000d84 <__aeabi_fmul>
 8003a50:	4603      	mov	r3, r0
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7fc fce8 	bl	8000428 <__aeabi_f2d>
 8003a58:	4680      	mov	r8, r0
 8003a5a:	4689      	mov	r9, r1
						- baseChoice[choice] / 1.8);
 8003a5c:	4b72      	ldr	r3, [pc, #456]	; (8003c28 <movementMachine+0x518>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a72      	ldr	r2, [pc, #456]	; (8003c2c <movementMachine+0x51c>)
 8003a62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a66:	4618      	mov	r0, r3
 8003a68:	f7fc fccc 	bl	8000404 <__aeabi_i2d>
 8003a6c:	a36c      	add	r3, pc, #432	; (adr r3, 8003c20 <movementMachine+0x510>)
 8003a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a72:	f7fc fe5b 	bl	800072c <__aeabi_ddiv>
 8003a76:	4602      	mov	r2, r0
 8003a78:	460b      	mov	r3, r1
 8003a7a:	4640      	mov	r0, r8
 8003a7c:	4649      	mov	r1, r9
 8003a7e:	f7fc fb73 	bl	8000168 <__aeabi_dsub>
 8003a82:	4602      	mov	r2, r0
 8003a84:	460b      	mov	r3, r1
				- (calcularDistancia((TIM3->CNT) >> 1)
 8003a86:	4620      	mov	r0, r4
 8003a88:	4629      	mov	r1, r5
 8003a8a:	f7fc fb6d 	bl	8000168 <__aeabi_dsub>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	460b      	mov	r3, r1
		TIM4->CCR4 = baseChoice[choice]
 8003a92:	4c69      	ldr	r4, [pc, #420]	; (8003c38 <movementMachine+0x528>)
 8003a94:	4610      	mov	r0, r2
 8003a96:	4619      	mov	r1, r3
 8003a98:	f7fc fff6 	bl	8000a88 <__aeabi_d2uiz>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	6423      	str	r3, [r4, #64]	; 0x40
		//intUartSend((TIM3->CNT));
		if (calcularDistancia((TIM3->CNT) >> 1) < LeftChoice[choice]) {
 8003aa0:	4b63      	ldr	r3, [pc, #396]	; (8003c30 <movementMachine+0x520>)
 8003aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa4:	085b      	lsrs	r3, r3, #1
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f7ff fd32 	bl	8003510 <calcularDistancia>
 8003aac:	4604      	mov	r4, r0
 8003aae:	4b5e      	ldr	r3, [pc, #376]	; (8003c28 <movementMachine+0x518>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a60      	ldr	r2, [pc, #384]	; (8003c34 <movementMachine+0x524>)
 8003ab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f7fd f90f 	bl	8000cdc <__aeabi_i2f>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	4620      	mov	r0, r4
 8003ac4:	f7fd fafc 	bl	80010c0 <__aeabi_fcmplt>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d008      	beq.n	8003ae0 <movementMachine+0x3d0>
			runMotor(ADELANTE, MOTOR_A);
 8003ace:	2100      	movs	r1, #0
 8003ad0:	2000      	movs	r0, #0
 8003ad2:	f7ff fd43 	bl	800355c <runMotor>
			runMotor(ATRAS, MOTOR_B);
 8003ad6:	2101      	movs	r1, #1
 8003ad8:	2002      	movs	r0, #2
 8003ada:	f7ff fd3f 	bl	800355c <runMotor>
			TIM1->CNT = 100;
			offset = 25.1;
			//giro = 1;
			//intUartSend(9);
		}
		break;
 8003ade:	e17a      	b.n	8003dd6 <movementMachine+0x6c6>
			movementState = ADELANTE;
 8003ae0:	4b56      	ldr	r3, [pc, #344]	; (8003c3c <movementMachine+0x52c>)
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	601a      	str	r2, [r3, #0]
			runMotor(OFF, MOTOR_A);
 8003ae6:	2100      	movs	r1, #0
 8003ae8:	2005      	movs	r0, #5
 8003aea:	f7ff fd37 	bl	800355c <runMotor>
			runMotor(OFF, MOTOR_B);
 8003aee:	2101      	movs	r1, #1
 8003af0:	2005      	movs	r0, #5
 8003af2:	f7ff fd33 	bl	800355c <runMotor>
			TIM3->CNT = 100;
 8003af6:	4b4e      	ldr	r3, [pc, #312]	; (8003c30 <movementMachine+0x520>)
 8003af8:	2264      	movs	r2, #100	; 0x64
 8003afa:	625a      	str	r2, [r3, #36]	; 0x24
			TIM1->CNT = 100;
 8003afc:	4b50      	ldr	r3, [pc, #320]	; (8003c40 <movementMachine+0x530>)
 8003afe:	2264      	movs	r2, #100	; 0x64
 8003b00:	625a      	str	r2, [r3, #36]	; 0x24
			offset = 25.1;
 8003b02:	4b50      	ldr	r3, [pc, #320]	; (8003c44 <movementMachine+0x534>)
 8003b04:	4a50      	ldr	r2, [pc, #320]	; (8003c48 <movementMachine+0x538>)
 8003b06:	601a      	str	r2, [r3, #0]
		break;
 8003b08:	e165      	b.n	8003dd6 <movementMachine+0x6c6>
	case DERECHA:
		TIM4->CCR3 = xSpeed;
 8003b0a:	4b50      	ldr	r3, [pc, #320]	; (8003c4c <movementMachine+0x53c>)
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	4b4a      	ldr	r3, [pc, #296]	; (8003c38 <movementMachine+0x528>)
 8003b10:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM4->CCR4 = xSpeed;
 8003b12:	4b4e      	ldr	r3, [pc, #312]	; (8003c4c <movementMachine+0x53c>)
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	4b48      	ldr	r3, [pc, #288]	; (8003c38 <movementMachine+0x528>)
 8003b18:	641a      	str	r2, [r3, #64]	; 0x40
		objectiveDistance = RightChoice[choice] + offset;
 8003b1a:	4b43      	ldr	r3, [pc, #268]	; (8003c28 <movementMachine+0x518>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a4c      	ldr	r2, [pc, #304]	; (8003c50 <movementMachine+0x540>)
 8003b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b24:	4618      	mov	r0, r3
 8003b26:	f7fd f8d9 	bl	8000cdc <__aeabi_i2f>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	4b45      	ldr	r3, [pc, #276]	; (8003c44 <movementMachine+0x534>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4619      	mov	r1, r3
 8003b32:	4610      	mov	r0, r2
 8003b34:	f7fd f81e 	bl	8000b74 <__addsf3>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7fd fae8 	bl	8001110 <__aeabi_f2iz>
 8003b40:	4603      	mov	r3, r0
 8003b42:	4a44      	ldr	r2, [pc, #272]	; (8003c54 <movementMachine+0x544>)
 8003b44:	6013      	str	r3, [r2, #0]
		if (calcularDistancia((TIM1->CNT) >> 1) < RightChoice[choice] + offset
 8003b46:	4b3e      	ldr	r3, [pc, #248]	; (8003c40 <movementMachine+0x530>)
 8003b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4a:	085b      	lsrs	r3, r3, #1
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7ff fcdf 	bl	8003510 <calcularDistancia>
 8003b52:	4604      	mov	r4, r0
 8003b54:	4b34      	ldr	r3, [pc, #208]	; (8003c28 <movementMachine+0x518>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a3d      	ldr	r2, [pc, #244]	; (8003c50 <movementMachine+0x540>)
 8003b5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7fd f8bc 	bl	8000cdc <__aeabi_i2f>
 8003b64:	4602      	mov	r2, r0
 8003b66:	4b37      	ldr	r3, [pc, #220]	; (8003c44 <movementMachine+0x534>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	4610      	mov	r0, r2
 8003b6e:	f7fd f801 	bl	8000b74 <__addsf3>
 8003b72:	4603      	mov	r3, r0
 8003b74:	4619      	mov	r1, r3
 8003b76:	4620      	mov	r0, r4
 8003b78:	f7fd faa2 	bl	80010c0 <__aeabi_fcmplt>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d12c      	bne.n	8003bdc <movementMachine+0x4cc>
				|| calcularDistancia((TIM1->CNT) >> 1)
 8003b82:	4b2f      	ldr	r3, [pc, #188]	; (8003c40 <movementMachine+0x530>)
 8003b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b86:	085b      	lsrs	r3, r3, #1
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f7ff fcc1 	bl	8003510 <calcularDistancia>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	4618      	mov	r0, r3
 8003b92:	f7fc fc49 	bl	8000428 <__aeabi_f2d>
 8003b96:	4604      	mov	r4, r0
 8003b98:	460d      	mov	r5, r1
						> RightChoice[choice] + offset + 0.5) {
 8003b9a:	4b23      	ldr	r3, [pc, #140]	; (8003c28 <movementMachine+0x518>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a2c      	ldr	r2, [pc, #176]	; (8003c50 <movementMachine+0x540>)
 8003ba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f7fd f899 	bl	8000cdc <__aeabi_i2f>
 8003baa:	4602      	mov	r2, r0
 8003bac:	4b25      	ldr	r3, [pc, #148]	; (8003c44 <movementMachine+0x534>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	4610      	mov	r0, r2
 8003bb4:	f7fc ffde 	bl	8000b74 <__addsf3>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f7fc fc34 	bl	8000428 <__aeabi_f2d>
 8003bc0:	f04f 0200 	mov.w	r2, #0
 8003bc4:	4b24      	ldr	r3, [pc, #144]	; (8003c58 <movementMachine+0x548>)
 8003bc6:	f7fc fad1 	bl	800016c <__adddf3>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	460b      	mov	r3, r1
				|| calcularDistancia((TIM1->CNT) >> 1)
 8003bce:	4620      	mov	r0, r4
 8003bd0:	4629      	mov	r1, r5
 8003bd2:	f7fc ff11 	bl	80009f8 <__aeabi_dcmpgt>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d045      	beq.n	8003c68 <movementMachine+0x558>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003be2:	481e      	ldr	r0, [pc, #120]	; (8003c5c <movementMachine+0x54c>)
 8003be4:	f002 faa3 	bl	800612e <HAL_GPIO_WritePin>
			StraightFlag = 2;
 8003be8:	4b1d      	ldr	r3, [pc, #116]	; (8003c60 <movementMachine+0x550>)
 8003bea:	2202      	movs	r2, #2
 8003bec:	601a      	str	r2, [r3, #0]
			if (direction == ADELANTE) {
 8003bee:	4b1d      	ldr	r3, [pc, #116]	; (8003c64 <movementMachine+0x554>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d108      	bne.n	8003c08 <movementMachine+0x4f8>
				runMotor(ATRAS, MOTOR_A);
 8003bf6:	2100      	movs	r1, #0
 8003bf8:	2002      	movs	r0, #2
 8003bfa:	f7ff fcaf 	bl	800355c <runMotor>
				runMotor(ADELANTE, MOTOR_B);
 8003bfe:	2101      	movs	r1, #1
 8003c00:	2000      	movs	r0, #0
 8003c02:	f7ff fcab 	bl	800355c <runMotor>
			if (direction == ADELANTE) {
 8003c06:	e04a      	b.n	8003c9e <movementMachine+0x58e>
			} else {
				runMotor(ADELANTE, MOTOR_A);
 8003c08:	2100      	movs	r1, #0
 8003c0a:	2000      	movs	r0, #0
 8003c0c:	f7ff fca6 	bl	800355c <runMotor>
				runMotor(ATRAS, MOTOR_B);
 8003c10:	2101      	movs	r1, #1
 8003c12:	2002      	movs	r0, #2
 8003c14:	f7ff fca2 	bl	800355c <runMotor>
			if (direction == ADELANTE) {
 8003c18:	e041      	b.n	8003c9e <movementMachine+0x58e>
 8003c1a:	bf00      	nop
 8003c1c:	f3af 8000 	nop.w
 8003c20:	cccccccd 	.word	0xcccccccd
 8003c24:	3ffccccc 	.word	0x3ffccccc
 8003c28:	20002308 	.word	0x20002308
 8003c2c:	20000038 	.word	0x20000038
 8003c30:	40000400 	.word	0x40000400
 8003c34:	20000050 	.word	0x20000050
 8003c38:	40000800 	.word	0x40000800
 8003c3c:	2000005c 	.word	0x2000005c
 8003c40:	40012c00 	.word	0x40012c00
 8003c44:	200040b4 	.word	0x200040b4
 8003c48:	41c8cccd 	.word	0x41c8cccd
 8003c4c:	200040a8 	.word	0x200040a8
 8003c50:	20000048 	.word	0x20000048
 8003c54:	200040ac 	.word	0x200040ac
 8003c58:	3fe00000 	.word	0x3fe00000
 8003c5c:	40010c00 	.word	0x40010c00
 8003c60:	200040a4 	.word	0x200040a4
 8003c64:	200040b0 	.word	0x200040b0
			}
			//intUartSend("HOLA");
		} else {
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
 8003c68:	2201      	movs	r2, #1
 8003c6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c6e:	485c      	ldr	r0, [pc, #368]	; (8003de0 <movementMachine+0x6d0>)
 8003c70:	f002 fa5d 	bl	800612e <HAL_GPIO_WritePin>
			movementState = ADELANTE;
 8003c74:	4b5b      	ldr	r3, [pc, #364]	; (8003de4 <movementMachine+0x6d4>)
 8003c76:	2200      	movs	r2, #0
 8003c78:	601a      	str	r2, [r3, #0]
			runMotor(OFF, MOTOR_A);
 8003c7a:	2100      	movs	r1, #0
 8003c7c:	2005      	movs	r0, #5
 8003c7e:	f7ff fc6d 	bl	800355c <runMotor>
			runMotor(OFF, MOTOR_B);
 8003c82:	2101      	movs	r1, #1
 8003c84:	2005      	movs	r0, #5
 8003c86:	f7ff fc69 	bl	800355c <runMotor>
			TIM3->CNT = 100;
 8003c8a:	4b57      	ldr	r3, [pc, #348]	; (8003de8 <movementMachine+0x6d8>)
 8003c8c:	2264      	movs	r2, #100	; 0x64
 8003c8e:	625a      	str	r2, [r3, #36]	; 0x24
			TIM1->CNT = 100;
 8003c90:	4b56      	ldr	r3, [pc, #344]	; (8003dec <movementMachine+0x6dc>)
 8003c92:	2264      	movs	r2, #100	; 0x64
 8003c94:	625a      	str	r2, [r3, #36]	; 0x24
			offset = 25.1;
 8003c96:	4b56      	ldr	r3, [pc, #344]	; (8003df0 <movementMachine+0x6e0>)
 8003c98:	4a56      	ldr	r2, [pc, #344]	; (8003df4 <movementMachine+0x6e4>)
 8003c9a:	601a      	str	r2, [r3, #0]
			//intUartSend(8);
		}
		break;
 8003c9c:	e09b      	b.n	8003dd6 <movementMachine+0x6c6>
 8003c9e:	e09a      	b.n	8003dd6 <movementMachine+0x6c6>
	case ATRAS:
		TIM4->CCR3 = xSpeed;
 8003ca0:	4b55      	ldr	r3, [pc, #340]	; (8003df8 <movementMachine+0x6e8>)
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	4b55      	ldr	r3, [pc, #340]	; (8003dfc <movementMachine+0x6ec>)
 8003ca6:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM4->CCR4 = xSpeed;
 8003ca8:	4b53      	ldr	r3, [pc, #332]	; (8003df8 <movementMachine+0x6e8>)
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	4b53      	ldr	r3, [pc, #332]	; (8003dfc <movementMachine+0x6ec>)
 8003cae:	641a      	str	r2, [r3, #64]	; 0x40
		objectiveDistance = RightChoice[choice] * 2 + offset;
 8003cb0:	4b53      	ldr	r3, [pc, #332]	; (8003e00 <movementMachine+0x6f0>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a53      	ldr	r2, [pc, #332]	; (8003e04 <movementMachine+0x6f4>)
 8003cb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cba:	005b      	lsls	r3, r3, #1
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7fd f80d 	bl	8000cdc <__aeabi_i2f>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	4b4a      	ldr	r3, [pc, #296]	; (8003df0 <movementMachine+0x6e0>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4619      	mov	r1, r3
 8003cca:	4610      	mov	r0, r2
 8003ccc:	f7fc ff52 	bl	8000b74 <__addsf3>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f7fd fa1c 	bl	8001110 <__aeabi_f2iz>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	4a4b      	ldr	r2, [pc, #300]	; (8003e08 <movementMachine+0x6f8>)
 8003cdc:	6013      	str	r3, [r2, #0]
		if (calcularDistancia((TIM1->CNT) >> 1)
 8003cde:	4b43      	ldr	r3, [pc, #268]	; (8003dec <movementMachine+0x6dc>)
 8003ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce2:	085b      	lsrs	r3, r3, #1
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f7ff fc13 	bl	8003510 <calcularDistancia>
 8003cea:	4604      	mov	r4, r0
				< RightChoice[choice] * 2 + offset
 8003cec:	4b44      	ldr	r3, [pc, #272]	; (8003e00 <movementMachine+0x6f0>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a44      	ldr	r2, [pc, #272]	; (8003e04 <movementMachine+0x6f4>)
 8003cf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cf6:	005b      	lsls	r3, r3, #1
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f7fc ffef 	bl	8000cdc <__aeabi_i2f>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	4b3b      	ldr	r3, [pc, #236]	; (8003df0 <movementMachine+0x6e0>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4619      	mov	r1, r3
 8003d06:	4610      	mov	r0, r2
 8003d08:	f7fc ff34 	bl	8000b74 <__addsf3>
 8003d0c:	4603      	mov	r3, r0
		if (calcularDistancia((TIM1->CNT) >> 1)
 8003d0e:	4619      	mov	r1, r3
 8003d10:	4620      	mov	r0, r4
 8003d12:	f7fd f9d5 	bl	80010c0 <__aeabi_fcmplt>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d131      	bne.n	8003d80 <movementMachine+0x670>
				|| calcularDistancia((TIM1->CNT) >> 1)
 8003d1c:	4b33      	ldr	r3, [pc, #204]	; (8003dec <movementMachine+0x6dc>)
 8003d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d20:	085b      	lsrs	r3, r3, #1
 8003d22:	4618      	mov	r0, r3
 8003d24:	f7ff fbf4 	bl	8003510 <calcularDistancia>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f7fc fb7c 	bl	8000428 <__aeabi_f2d>
 8003d30:	4604      	mov	r4, r0
 8003d32:	460d      	mov	r5, r1
						> RightChoice[choice] * 2 + 0.5 + offset) {
 8003d34:	4b32      	ldr	r3, [pc, #200]	; (8003e00 <movementMachine+0x6f0>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a32      	ldr	r2, [pc, #200]	; (8003e04 <movementMachine+0x6f4>)
 8003d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d3e:	005b      	lsls	r3, r3, #1
 8003d40:	4618      	mov	r0, r3
 8003d42:	f7fc fb5f 	bl	8000404 <__aeabi_i2d>
 8003d46:	f04f 0200 	mov.w	r2, #0
 8003d4a:	4b30      	ldr	r3, [pc, #192]	; (8003e0c <movementMachine+0x6fc>)
 8003d4c:	f7fc fa0e 	bl	800016c <__adddf3>
 8003d50:	4602      	mov	r2, r0
 8003d52:	460b      	mov	r3, r1
 8003d54:	4690      	mov	r8, r2
 8003d56:	4699      	mov	r9, r3
 8003d58:	4b25      	ldr	r3, [pc, #148]	; (8003df0 <movementMachine+0x6e0>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f7fc fb63 	bl	8000428 <__aeabi_f2d>
 8003d62:	4602      	mov	r2, r0
 8003d64:	460b      	mov	r3, r1
 8003d66:	4640      	mov	r0, r8
 8003d68:	4649      	mov	r1, r9
 8003d6a:	f7fc f9ff 	bl	800016c <__adddf3>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	460b      	mov	r3, r1
				|| calcularDistancia((TIM1->CNT) >> 1)
 8003d72:	4620      	mov	r0, r4
 8003d74:	4629      	mov	r1, r5
 8003d76:	f7fc fe3f 	bl	80009f8 <__aeabi_dcmpgt>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d018      	beq.n	8003db2 <movementMachine+0x6a2>

			StraightFlag = 2;
 8003d80:	4b23      	ldr	r3, [pc, #140]	; (8003e10 <movementMachine+0x700>)
 8003d82:	2202      	movs	r2, #2
 8003d84:	601a      	str	r2, [r3, #0]
			if (direction == ADELANTE) {
 8003d86:	4b23      	ldr	r3, [pc, #140]	; (8003e14 <movementMachine+0x704>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d108      	bne.n	8003da0 <movementMachine+0x690>
				runMotor(ATRAS, MOTOR_A);
 8003d8e:	2100      	movs	r1, #0
 8003d90:	2002      	movs	r0, #2
 8003d92:	f7ff fbe3 	bl	800355c <runMotor>
				runMotor(ADELANTE, MOTOR_B);
 8003d96:	2101      	movs	r1, #1
 8003d98:	2000      	movs	r0, #0
 8003d9a:	f7ff fbdf 	bl	800355c <runMotor>
			if (direction == ADELANTE) {
 8003d9e:	e018      	b.n	8003dd2 <movementMachine+0x6c2>
			} else {
				runMotor(ADELANTE, MOTOR_A);
 8003da0:	2100      	movs	r1, #0
 8003da2:	2000      	movs	r0, #0
 8003da4:	f7ff fbda 	bl	800355c <runMotor>
				runMotor(ATRAS, MOTOR_B);
 8003da8:	2101      	movs	r1, #1
 8003daa:	2002      	movs	r0, #2
 8003dac:	f7ff fbd6 	bl	800355c <runMotor>
			if (direction == ADELANTE) {
 8003db0:	e00f      	b.n	8003dd2 <movementMachine+0x6c2>
			}

		} else {

			StraightFlag = 0;
 8003db2:	4b17      	ldr	r3, [pc, #92]	; (8003e10 <movementMachine+0x700>)
 8003db4:	2200      	movs	r2, #0
 8003db6:	601a      	str	r2, [r3, #0]
			movementState = ADELANTE;
 8003db8:	4b0a      	ldr	r3, [pc, #40]	; (8003de4 <movementMachine+0x6d4>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	601a      	str	r2, [r3, #0]
			//runMotor(OFF, MOTOR_A);
			//runMotor(OFF, MOTOR_B);
			TIM3->CNT = 100;
 8003dbe:	4b0a      	ldr	r3, [pc, #40]	; (8003de8 <movementMachine+0x6d8>)
 8003dc0:	2264      	movs	r2, #100	; 0x64
 8003dc2:	625a      	str	r2, [r3, #36]	; 0x24
			TIM1->CNT = 100;
 8003dc4:	4b09      	ldr	r3, [pc, #36]	; (8003dec <movementMachine+0x6dc>)
 8003dc6:	2264      	movs	r2, #100	; 0x64
 8003dc8:	625a      	str	r2, [r3, #36]	; 0x24
			offset = 25.1;
 8003dca:	4b09      	ldr	r3, [pc, #36]	; (8003df0 <movementMachine+0x6e0>)
 8003dcc:	4a09      	ldr	r2, [pc, #36]	; (8003df4 <movementMachine+0x6e4>)
 8003dce:	601a      	str	r2, [r3, #0]
			//intUartSend(7);
		}
		break;
 8003dd0:	e001      	b.n	8003dd6 <movementMachine+0x6c6>
 8003dd2:	e000      	b.n	8003dd6 <movementMachine+0x6c6>
		break;
 8003dd4:	bf00      	nop

	}
}
 8003dd6:	bf00      	nop
 8003dd8:	370c      	adds	r7, #12
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003de0:	40010c00 	.word	0x40010c00
 8003de4:	2000005c 	.word	0x2000005c
 8003de8:	40000400 	.word	0x40000400
 8003dec:	40012c00 	.word	0x40012c00
 8003df0:	200040b4 	.word	0x200040b4
 8003df4:	41c8cccd 	.word	0x41c8cccd
 8003df8:	200040a8 	.word	0x200040a8
 8003dfc:	40000800 	.word	0x40000800
 8003e00:	20002308 	.word	0x20002308
 8003e04:	20000048 	.word	0x20000048
 8003e08:	200040ac 	.word	0x200040ac
 8003e0c:	3fe00000 	.word	0x3fe00000
 8003e10:	200040a4 	.word	0x200040a4
 8003e14:	200040b0 	.word	0x200040b0

08003e18 <moveNode>:
 *      Author: jore
 */
#include "nodeControl.h"
#include "main.h"
#include "sharp.h"
void moveNode(int lado, Position *a) {
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
	switch (lado) {
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2b03      	cmp	r3, #3
 8003e26:	d823      	bhi.n	8003e70 <moveNode+0x58>
 8003e28:	a201      	add	r2, pc, #4	; (adr r2, 8003e30 <moveNode+0x18>)
 8003e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e2e:	bf00      	nop
 8003e30:	08003e41 	.word	0x08003e41
 8003e34:	08003e4d 	.word	0x08003e4d
 8003e38:	08003e65 	.word	0x08003e65
 8003e3c:	08003e59 	.word	0x08003e59
	case ADELANTE:
		//if (visual.y != ALTO - 1) {
		a->y++;
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	1c5a      	adds	r2, r3, #1
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	605a      	str	r2, [r3, #4]
		//visual.y++;
		//}
		break;
 8003e4a:	e011      	b.n	8003e70 <moveNode+0x58>
	case IZQUIERDA:
		//if (visual.x != 0) {
		a->x--;
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	1e5a      	subs	r2, r3, #1
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	601a      	str	r2, [r3, #0]
		//visual.x--;
		//}
		break;
 8003e56:	e00b      	b.n	8003e70 <moveNode+0x58>
	case DERECHA:
		// if (visual.x != ANCHO - 1) {
		a->x++;
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	1c5a      	adds	r2, r3, #1
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	601a      	str	r2, [r3, #0]
		// visual.x++;
		// }
		break;
 8003e62:	e005      	b.n	8003e70 <moveNode+0x58>
	case ATRAS:
		// if (visual.y != 0) {
		a->y--;
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	1e5a      	subs	r2, r3, #1
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	605a      	str	r2, [r3, #4]
		// visual.y--;
		// }

		break;
 8003e6e:	bf00      	nop
	}
}
 8003e70:	bf00      	nop
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bc80      	pop	{r7}
 8003e78:	4770      	bx	lr
 8003e7a:	bf00      	nop

08003e7c <CreateNode>:

void CreateNode(Node* m, float Sensors[4], int direcciones[4], int maxDistance[3]) {
 8003e7c:	b590      	push	{r4, r7, lr}
 8003e7e:	b085      	sub	sp, #20
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	607a      	str	r2, [r7, #4]
 8003e88:	603b      	str	r3, [r7, #0]
	m->Lados[direcciones[ADELANTE]] = lecturaSensor(ADELANTE, Sensors, maxDistance);
 8003e8a:	683a      	ldr	r2, [r7, #0]
 8003e8c:	68b9      	ldr	r1, [r7, #8]
 8003e8e:	2000      	movs	r0, #0
 8003e90:	f000 f874 	bl	8003f7c <lecturaSensor>
 8003e94:	4602      	mov	r2, r0
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681c      	ldr	r4, [r3, #0]
 8003e9a:	4610      	mov	r0, r2
 8003e9c:	f7fd f938 	bl	8001110 <__aeabi_f2iz>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	m->Lados[direcciones[IZQUIERDA]] = lecturaSensor(IZQUIERDA, Sensors,  maxDistance);
 8003ea8:	683a      	ldr	r2, [r7, #0]
 8003eaa:	68b9      	ldr	r1, [r7, #8]
 8003eac:	2001      	movs	r0, #1
 8003eae:	f000 f865 	bl	8003f7c <lecturaSensor>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	3304      	adds	r3, #4
 8003eb8:	681c      	ldr	r4, [r3, #0]
 8003eba:	4610      	mov	r0, r2
 8003ebc:	f7fd f928 	bl	8001110 <__aeabi_f2iz>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	m->Lados[direcciones[DERECHA]] = lecturaSensor(DERECHA, Sensors, maxDistance);
 8003ec8:	683a      	ldr	r2, [r7, #0]
 8003eca:	68b9      	ldr	r1, [r7, #8]
 8003ecc:	2003      	movs	r0, #3
 8003ece:	f000 f855 	bl	8003f7c <lecturaSensor>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	330c      	adds	r3, #12
 8003ed8:	681c      	ldr	r4, [r3, #0]
 8003eda:	4610      	mov	r0, r2
 8003edc:	f7fd f918 	bl	8001110 <__aeabi_f2iz>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	m->Lados[direcciones[ATRAS]] = lecturaSensor(ATRAS, Sensors,  maxDistance);
 8003ee8:	683a      	ldr	r2, [r7, #0]
 8003eea:	68b9      	ldr	r1, [r7, #8]
 8003eec:	2002      	movs	r0, #2
 8003eee:	f000 f845 	bl	8003f7c <lecturaSensor>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	3308      	adds	r3, #8
 8003ef8:	681c      	ldr	r4, [r3, #0]
 8003efa:	4610      	mov	r0, r2
 8003efc:	f7fd f908 	bl	8001110 <__aeabi_f2iz>
 8003f00:	4602      	mov	r2, r0
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
}
 8003f08:	bf00      	nop
 8003f0a:	3714      	adds	r7, #20
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd90      	pop	{r4, r7, pc}

08003f10 <wallDetector>:
#include "sharp.h"
#include "main.h"
#include <math.h>


int wallDetector(int n, int d, int maxDis[3]) {
 8003f10:	b480      	push	{r7}
 8003f12:	b085      	sub	sp, #20
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	607a      	str	r2, [r7, #4]
	switch (d) {
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	2b03      	cmp	r3, #3
 8003f20:	d01c      	beq.n	8003f5c <wallDetector+0x4c>
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	2b03      	cmp	r3, #3
 8003f26:	dc23      	bgt.n	8003f70 <wallDetector+0x60>
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d003      	beq.n	8003f36 <wallDetector+0x26>
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d009      	beq.n	8003f48 <wallDetector+0x38>
 8003f34:	e01c      	b.n	8003f70 <wallDetector+0x60>
	case ADELANTE:
		if (n < maxDis[0]) {
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	68fa      	ldr	r2, [r7, #12]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	da01      	bge.n	8003f44 <wallDetector+0x34>

			return 1;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e016      	b.n	8003f72 <wallDetector+0x62>
		} else {

			return 0;
 8003f44:	2300      	movs	r3, #0
 8003f46:	e014      	b.n	8003f72 <wallDetector+0x62>
		}
		break;

	case IZQUIERDA:
		if (n < maxDis[1]) {
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	3304      	adds	r3, #4
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	da01      	bge.n	8003f58 <wallDetector+0x48>
			return 1;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e00c      	b.n	8003f72 <wallDetector+0x62>
		} else {
			return 0;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	e00a      	b.n	8003f72 <wallDetector+0x62>
		}
		break;
	case DERECHA:
		if (n < maxDis[2]) {
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	3308      	adds	r3, #8
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	da01      	bge.n	8003f6c <wallDetector+0x5c>
			return 1;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e002      	b.n	8003f72 <wallDetector+0x62>
		} else {
			return 0;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	e000      	b.n	8003f72 <wallDetector+0x62>
		}
		break;
	default:
		return 0;
 8003f70:	2300      	movs	r3, #0
		break;
	}
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3714      	adds	r7, #20
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bc80      	pop	{r7}
 8003f7a:	4770      	bx	lr

08003f7c <lecturaSensor>:

float lecturaSensor(int direccion, float values[4], int maxDis[3]) {
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	607a      	str	r2, [r7, #4]
	switch (direccion) {
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2b03      	cmp	r3, #3
 8003f8c:	d843      	bhi.n	8004016 <lecturaSensor+0x9a>
 8003f8e:	a201      	add	r2, pc, #4	; (adr r2, 8003f94 <lecturaSensor+0x18>)
 8003f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f94:	08003fa5 	.word	0x08003fa5
 8003f98:	08003fed 	.word	0x08003fed
 8003f9c:	08004011 	.word	0x08004011
 8003fa0:	08003fc9 	.word	0x08003fc9
	case ADELANTE:
		return wallDetector(values[2], direccion, maxDis);
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	3308      	adds	r3, #8
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4618      	mov	r0, r3
 8003fac:	f7fd f8b0 	bl	8001110 <__aeabi_f2iz>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	68f9      	ldr	r1, [r7, #12]
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f7ff ffaa 	bl	8003f10 <wallDetector>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f7fc fe8c 	bl	8000cdc <__aeabi_i2f>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	e027      	b.n	8004018 <lecturaSensor+0x9c>
		break;
	case DERECHA:
		return wallDetector(values[1], direccion, maxDis);
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	3304      	adds	r3, #4
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f7fd f89e 	bl	8001110 <__aeabi_f2iz>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	68f9      	ldr	r1, [r7, #12]
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7ff ff98 	bl	8003f10 <wallDetector>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7fc fe7a 	bl	8000cdc <__aeabi_i2f>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	e015      	b.n	8004018 <lecturaSensor+0x9c>
		break;
	case IZQUIERDA:
		return wallDetector(values[3], direccion, maxDis);
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	330c      	adds	r3, #12
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7fd f88c 	bl	8001110 <__aeabi_f2iz>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	68f9      	ldr	r1, [r7, #12]
 8003ffe:	4618      	mov	r0, r3
 8004000:	f7ff ff86 	bl	8003f10 <wallDetector>
 8004004:	4603      	mov	r3, r0
 8004006:	4618      	mov	r0, r3
 8004008:	f7fc fe68 	bl	8000cdc <__aeabi_i2f>
 800400c:	4603      	mov	r3, r0
 800400e:	e003      	b.n	8004018 <lecturaSensor+0x9c>
		break;
	case ATRAS:
		return 0;
 8004010:	f04f 0300 	mov.w	r3, #0
 8004014:	e000      	b.n	8004018 <lecturaSensor+0x9c>
		break;
	}
	return 15;
 8004016:	4b02      	ldr	r3, [pc, #8]	; (8004020 <lecturaSensor+0xa4>)
}
 8004018:	4618      	mov	r0, r3
 800401a:	3710      	adds	r7, #16
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}
 8004020:	41700000 	.word	0x41700000
 8004024:	00000000 	.word	0x00000000

08004028 <lecSensor>:

float lecSensor(int n, uint32_t values[10]) {
 8004028:	b580      	push	{r7, lr}
 800402a:	b088      	sub	sp, #32
 800402c:	af02      	add	r7, sp, #8
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
	long suma = 0;
 8004032:	2300      	movs	r3, #0
 8004034:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < n; i++) {
 8004036:	2300      	movs	r3, #0
 8004038:	613b      	str	r3, [r7, #16]
 800403a:	e00a      	b.n	8004052 <lecSensor+0x2a>
		suma = suma + values[i];
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	683a      	ldr	r2, [r7, #0]
 8004042:	4413      	add	r3, r2
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	4413      	add	r3, r2
 800404a:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < n; i++) {
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	3301      	adds	r3, #1
 8004050:	613b      	str	r3, [r7, #16]
 8004052:	693a      	ldr	r2, [r7, #16]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	429a      	cmp	r2, r3
 8004058:	dbf0      	blt.n	800403c <lecSensor+0x14>
	}
	float adc = suma / n;
 800405a:	697a      	ldr	r2, [r7, #20]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	fb92 f3f3 	sdiv	r3, r2, r3
 8004062:	4618      	mov	r0, r3
 8004064:	f7fc fe3a 	bl	8000cdc <__aeabi_i2f>
 8004068:	4603      	mov	r3, r0
 800406a:	60bb      	str	r3, [r7, #8]
	float volts = MAP(adc,900,3400,35,310);
 800406c:	68b8      	ldr	r0, [r7, #8]
 800406e:	f7fd f875 	bl	800115c <__aeabi_f2uiz>
 8004072:	f44f 739b 	mov.w	r3, #310	; 0x136
 8004076:	9300      	str	r3, [sp, #0]
 8004078:	2323      	movs	r3, #35	; 0x23
 800407a:	f640 5248 	movw	r2, #3400	; 0xd48
 800407e:	f44f 7161 	mov.w	r1, #900	; 0x384
 8004082:	f7ff f95f 	bl	8003344 <MAP>
 8004086:	4603      	mov	r3, r0
 8004088:	4618      	mov	r0, r3
 800408a:	f7fc fe23 	bl	8000cd4 <__aeabi_ui2f>
 800408e:	4603      	mov	r3, r0
 8004090:	60fb      	str	r3, [r7, #12]
	volts = volts/100;// value from sensor * (5/1024)
 8004092:	4923      	ldr	r1, [pc, #140]	; (8004120 <lecSensor+0xf8>)
 8004094:	68f8      	ldr	r0, [r7, #12]
 8004096:	f7fc ff29 	bl	8000eec <__aeabi_fdiv>
 800409a:	4603      	mov	r3, r0
 800409c:	60fb      	str	r3, [r7, #12]
	if (volts <= 0.35)
 800409e:	68f8      	ldr	r0, [r7, #12]
 80040a0:	f7fc f9c2 	bl	8000428 <__aeabi_f2d>
 80040a4:	a31a      	add	r3, pc, #104	; (adr r3, 8004110 <lecSensor+0xe8>)
 80040a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040aa:	f7fc fc91 	bl	80009d0 <__aeabi_dcmple>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d001      	beq.n	80040b8 <lecSensor+0x90>
		volts = 0.35;
 80040b4:	4b1b      	ldr	r3, [pc, #108]	; (8004124 <lecSensor+0xfc>)
 80040b6:	60fb      	str	r3, [r7, #12]
	volts = pow(volts - 0.3, 0.5);/*convertimos a cm con un aproximacion grafica*/
 80040b8:	68f8      	ldr	r0, [r7, #12]
 80040ba:	f7fc f9b5 	bl	8000428 <__aeabi_f2d>
 80040be:	a316      	add	r3, pc, #88	; (adr r3, 8004118 <lecSensor+0xf0>)
 80040c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c4:	f7fc f850 	bl	8000168 <__aeabi_dsub>
 80040c8:	4602      	mov	r2, r0
 80040ca:	460b      	mov	r3, r1
 80040cc:	4610      	mov	r0, r2
 80040ce:	4619      	mov	r1, r3
 80040d0:	f04f 0200 	mov.w	r2, #0
 80040d4:	4b14      	ldr	r3, [pc, #80]	; (8004128 <lecSensor+0x100>)
 80040d6:	f003 fd8d 	bl	8007bf4 <pow>
 80040da:	4602      	mov	r2, r0
 80040dc:	460b      	mov	r3, r1
 80040de:	4610      	mov	r0, r2
 80040e0:	4619      	mov	r1, r3
 80040e2:	f7fc fcf1 	bl	8000ac8 <__aeabi_d2f>
 80040e6:	4603      	mov	r3, r0
 80040e8:	60fb      	str	r3, [r7, #12]
	volts = 27.5 / volts; /*no preguntar por los valores*/
 80040ea:	68f9      	ldr	r1, [r7, #12]
 80040ec:	480f      	ldr	r0, [pc, #60]	; (800412c <lecSensor+0x104>)
 80040ee:	f7fc fefd 	bl	8000eec <__aeabi_fdiv>
 80040f2:	4603      	mov	r3, r0
 80040f4:	60fb      	str	r3, [r7, #12]
	volts -= 18;
 80040f6:	490e      	ldr	r1, [pc, #56]	; (8004130 <lecSensor+0x108>)
 80040f8:	68f8      	ldr	r0, [r7, #12]
 80040fa:	f7fc fd39 	bl	8000b70 <__aeabi_fsub>
 80040fe:	4603      	mov	r3, r0
 8004100:	60fb      	str	r3, [r7, #12]
	return volts;
 8004102:	68fb      	ldr	r3, [r7, #12]

}
 8004104:	4618      	mov	r0, r3
 8004106:	3718      	adds	r7, #24
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}
 800410c:	f3af 8000 	nop.w
 8004110:	66666666 	.word	0x66666666
 8004114:	3fd66666 	.word	0x3fd66666
 8004118:	33333333 	.word	0x33333333
 800411c:	3fd33333 	.word	0x3fd33333
 8004120:	42c80000 	.word	0x42c80000
 8004124:	3eb33333 	.word	0x3eb33333
 8004128:	3fe00000 	.word	0x3fe00000
 800412c:	41dc0000 	.word	0x41dc0000
 8004130:	41900000 	.word	0x41900000

08004134 <lecturaCNY70>:

int lecturaCNY70(int n, uint32_t values[10]) {
 8004134:	b480      	push	{r7}
 8004136:	b087      	sub	sp, #28
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
	long suma = 0;
 800413e:	2300      	movs	r3, #0
 8004140:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < n; i++) {
 8004142:	2300      	movs	r3, #0
 8004144:	613b      	str	r3, [r7, #16]
 8004146:	e00a      	b.n	800415e <lecturaCNY70+0x2a>
		suma = suma + values[i];
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	683a      	ldr	r2, [r7, #0]
 800414e:	4413      	add	r3, r2
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	4413      	add	r3, r2
 8004156:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < n; i++) {
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	3301      	adds	r3, #1
 800415c:	613b      	str	r3, [r7, #16]
 800415e:	693a      	ldr	r2, [r7, #16]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	429a      	cmp	r2, r3
 8004164:	dbf0      	blt.n	8004148 <lecturaCNY70+0x14>
	}
	int adc = (suma / n);
 8004166:	697a      	ldr	r2, [r7, #20]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	fb92 f3f3 	sdiv	r3, r2, r3
 800416e:	60fb      	str	r3, [r7, #12]
	if (adc < 1000) {
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004176:	da01      	bge.n	800417c <lecturaCNY70+0x48>
		return BLANCO;
 8004178:	2300      	movs	r3, #0
 800417a:	e000      	b.n	800417e <lecturaCNY70+0x4a>
	} else {
		return NEGRO;
 800417c:	2301      	movs	r3, #1
	}
}
 800417e:	4618      	mov	r0, r3
 8004180:	371c      	adds	r7, #28
 8004182:	46bd      	mov	sp, r7
 8004184:	bc80      	pop	{r7}
 8004186:	4770      	bx	lr

08004188 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004188:	b480      	push	{r7}
 800418a:	b085      	sub	sp, #20
 800418c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800418e:	4b15      	ldr	r3, [pc, #84]	; (80041e4 <HAL_MspInit+0x5c>)
 8004190:	699b      	ldr	r3, [r3, #24]
 8004192:	4a14      	ldr	r2, [pc, #80]	; (80041e4 <HAL_MspInit+0x5c>)
 8004194:	f043 0301 	orr.w	r3, r3, #1
 8004198:	6193      	str	r3, [r2, #24]
 800419a:	4b12      	ldr	r3, [pc, #72]	; (80041e4 <HAL_MspInit+0x5c>)
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	f003 0301 	and.w	r3, r3, #1
 80041a2:	60bb      	str	r3, [r7, #8]
 80041a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80041a6:	4b0f      	ldr	r3, [pc, #60]	; (80041e4 <HAL_MspInit+0x5c>)
 80041a8:	69db      	ldr	r3, [r3, #28]
 80041aa:	4a0e      	ldr	r2, [pc, #56]	; (80041e4 <HAL_MspInit+0x5c>)
 80041ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041b0:	61d3      	str	r3, [r2, #28]
 80041b2:	4b0c      	ldr	r3, [pc, #48]	; (80041e4 <HAL_MspInit+0x5c>)
 80041b4:	69db      	ldr	r3, [r3, #28]
 80041b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ba:	607b      	str	r3, [r7, #4]
 80041bc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80041be:	4b0a      	ldr	r3, [pc, #40]	; (80041e8 <HAL_MspInit+0x60>)
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	60fb      	str	r3, [r7, #12]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80041ca:	60fb      	str	r3, [r7, #12]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80041d2:	60fb      	str	r3, [r7, #12]
 80041d4:	4a04      	ldr	r2, [pc, #16]	; (80041e8 <HAL_MspInit+0x60>)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80041da:	bf00      	nop
 80041dc:	3714      	adds	r7, #20
 80041de:	46bd      	mov	sp, r7
 80041e0:	bc80      	pop	{r7}
 80041e2:	4770      	bx	lr
 80041e4:	40021000 	.word	0x40021000
 80041e8:	40010000 	.word	0x40010000

080041ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b088      	sub	sp, #32
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041f4:	f107 0310 	add.w	r3, r7, #16
 80041f8:	2200      	movs	r2, #0
 80041fa:	601a      	str	r2, [r3, #0]
 80041fc:	605a      	str	r2, [r3, #4]
 80041fe:	609a      	str	r2, [r3, #8]
 8004200:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a28      	ldr	r2, [pc, #160]	; (80042a8 <HAL_ADC_MspInit+0xbc>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d149      	bne.n	80042a0 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800420c:	4b27      	ldr	r3, [pc, #156]	; (80042ac <HAL_ADC_MspInit+0xc0>)
 800420e:	699b      	ldr	r3, [r3, #24]
 8004210:	4a26      	ldr	r2, [pc, #152]	; (80042ac <HAL_ADC_MspInit+0xc0>)
 8004212:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004216:	6193      	str	r3, [r2, #24]
 8004218:	4b24      	ldr	r3, [pc, #144]	; (80042ac <HAL_ADC_MspInit+0xc0>)
 800421a:	699b      	ldr	r3, [r3, #24]
 800421c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004220:	60fb      	str	r3, [r7, #12]
 8004222:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004224:	4b21      	ldr	r3, [pc, #132]	; (80042ac <HAL_ADC_MspInit+0xc0>)
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	4a20      	ldr	r2, [pc, #128]	; (80042ac <HAL_ADC_MspInit+0xc0>)
 800422a:	f043 0304 	orr.w	r3, r3, #4
 800422e:	6193      	str	r3, [r2, #24]
 8004230:	4b1e      	ldr	r3, [pc, #120]	; (80042ac <HAL_ADC_MspInit+0xc0>)
 8004232:	699b      	ldr	r3, [r3, #24]
 8004234:	f003 0304 	and.w	r3, r3, #4
 8004238:	60bb      	str	r3, [r7, #8]
 800423a:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = CNY70_Pin|SHARP_D_Pin|SHARP_C_Pin|SHARP_I_Pin;
 800423c:	230f      	movs	r3, #15
 800423e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004240:	2303      	movs	r3, #3
 8004242:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004244:	f107 0310 	add.w	r3, r7, #16
 8004248:	4619      	mov	r1, r3
 800424a:	4819      	ldr	r0, [pc, #100]	; (80042b0 <HAL_ADC_MspInit+0xc4>)
 800424c:	f001 fdd4 	bl	8005df8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8004250:	4b18      	ldr	r3, [pc, #96]	; (80042b4 <HAL_ADC_MspInit+0xc8>)
 8004252:	4a19      	ldr	r2, [pc, #100]	; (80042b8 <HAL_ADC_MspInit+0xcc>)
 8004254:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004256:	4b17      	ldr	r3, [pc, #92]	; (80042b4 <HAL_ADC_MspInit+0xc8>)
 8004258:	2200      	movs	r2, #0
 800425a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800425c:	4b15      	ldr	r3, [pc, #84]	; (80042b4 <HAL_ADC_MspInit+0xc8>)
 800425e:	2200      	movs	r2, #0
 8004260:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004262:	4b14      	ldr	r3, [pc, #80]	; (80042b4 <HAL_ADC_MspInit+0xc8>)
 8004264:	2280      	movs	r2, #128	; 0x80
 8004266:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004268:	4b12      	ldr	r3, [pc, #72]	; (80042b4 <HAL_ADC_MspInit+0xc8>)
 800426a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800426e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004270:	4b10      	ldr	r3, [pc, #64]	; (80042b4 <HAL_ADC_MspInit+0xc8>)
 8004272:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004276:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004278:	4b0e      	ldr	r3, [pc, #56]	; (80042b4 <HAL_ADC_MspInit+0xc8>)
 800427a:	2220      	movs	r2, #32
 800427c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800427e:	4b0d      	ldr	r3, [pc, #52]	; (80042b4 <HAL_ADC_MspInit+0xc8>)
 8004280:	2200      	movs	r2, #0
 8004282:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004284:	480b      	ldr	r0, [pc, #44]	; (80042b4 <HAL_ADC_MspInit+0xc8>)
 8004286:	f001 f9bf 	bl	8005608 <HAL_DMA_Init>
 800428a:	4603      	mov	r3, r0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d001      	beq.n	8004294 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8004290:	f7ff f938 	bl	8003504 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a07      	ldr	r2, [pc, #28]	; (80042b4 <HAL_ADC_MspInit+0xc8>)
 8004298:	621a      	str	r2, [r3, #32]
 800429a:	4a06      	ldr	r2, [pc, #24]	; (80042b4 <HAL_ADC_MspInit+0xc8>)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80042a0:	bf00      	nop
 80042a2:	3720      	adds	r7, #32
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	40012400 	.word	0x40012400
 80042ac:	40021000 	.word	0x40021000
 80042b0:	40010800 	.word	0x40010800
 80042b4:	20000134 	.word	0x20000134
 80042b8:	40020008 	.word	0x40020008

080042bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b088      	sub	sp, #32
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042c4:	f107 0310 	add.w	r3, r7, #16
 80042c8:	2200      	movs	r2, #0
 80042ca:	601a      	str	r2, [r3, #0]
 80042cc:	605a      	str	r2, [r3, #4]
 80042ce:	609a      	str	r2, [r3, #8]
 80042d0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a15      	ldr	r2, [pc, #84]	; (800432c <HAL_I2C_MspInit+0x70>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d123      	bne.n	8004324 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042dc:	4b14      	ldr	r3, [pc, #80]	; (8004330 <HAL_I2C_MspInit+0x74>)
 80042de:	699b      	ldr	r3, [r3, #24]
 80042e0:	4a13      	ldr	r2, [pc, #76]	; (8004330 <HAL_I2C_MspInit+0x74>)
 80042e2:	f043 0308 	orr.w	r3, r3, #8
 80042e6:	6193      	str	r3, [r2, #24]
 80042e8:	4b11      	ldr	r3, [pc, #68]	; (8004330 <HAL_I2C_MspInit+0x74>)
 80042ea:	699b      	ldr	r3, [r3, #24]
 80042ec:	f003 0308 	and.w	r3, r3, #8
 80042f0:	60fb      	str	r3, [r7, #12]
 80042f2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80042f4:	23c0      	movs	r3, #192	; 0xc0
 80042f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80042f8:	2312      	movs	r3, #18
 80042fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80042fc:	2303      	movs	r3, #3
 80042fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004300:	f107 0310 	add.w	r3, r7, #16
 8004304:	4619      	mov	r1, r3
 8004306:	480b      	ldr	r0, [pc, #44]	; (8004334 <HAL_I2C_MspInit+0x78>)
 8004308:	f001 fd76 	bl	8005df8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800430c:	4b08      	ldr	r3, [pc, #32]	; (8004330 <HAL_I2C_MspInit+0x74>)
 800430e:	69db      	ldr	r3, [r3, #28]
 8004310:	4a07      	ldr	r2, [pc, #28]	; (8004330 <HAL_I2C_MspInit+0x74>)
 8004312:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004316:	61d3      	str	r3, [r2, #28]
 8004318:	4b05      	ldr	r3, [pc, #20]	; (8004330 <HAL_I2C_MspInit+0x74>)
 800431a:	69db      	ldr	r3, [r3, #28]
 800431c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004320:	60bb      	str	r3, [r7, #8]
 8004322:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004324:	bf00      	nop
 8004326:	3720      	adds	r7, #32
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}
 800432c:	40005400 	.word	0x40005400
 8004330:	40021000 	.word	0x40021000
 8004334:	40010c00 	.word	0x40010c00

08004338 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b08a      	sub	sp, #40	; 0x28
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004340:	f107 0318 	add.w	r3, r7, #24
 8004344:	2200      	movs	r2, #0
 8004346:	601a      	str	r2, [r3, #0]
 8004348:	605a      	str	r2, [r3, #4]
 800434a:	609a      	str	r2, [r3, #8]
 800434c:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a2b      	ldr	r2, [pc, #172]	; (8004400 <HAL_TIM_Encoder_MspInit+0xc8>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d125      	bne.n	80043a4 <HAL_TIM_Encoder_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004358:	4b2a      	ldr	r3, [pc, #168]	; (8004404 <HAL_TIM_Encoder_MspInit+0xcc>)
 800435a:	699b      	ldr	r3, [r3, #24]
 800435c:	4a29      	ldr	r2, [pc, #164]	; (8004404 <HAL_TIM_Encoder_MspInit+0xcc>)
 800435e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004362:	6193      	str	r3, [r2, #24]
 8004364:	4b27      	ldr	r3, [pc, #156]	; (8004404 <HAL_TIM_Encoder_MspInit+0xcc>)
 8004366:	699b      	ldr	r3, [r3, #24]
 8004368:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800436c:	617b      	str	r3, [r7, #20]
 800436e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004370:	4b24      	ldr	r3, [pc, #144]	; (8004404 <HAL_TIM_Encoder_MspInit+0xcc>)
 8004372:	699b      	ldr	r3, [r3, #24]
 8004374:	4a23      	ldr	r2, [pc, #140]	; (8004404 <HAL_TIM_Encoder_MspInit+0xcc>)
 8004376:	f043 0304 	orr.w	r3, r3, #4
 800437a:	6193      	str	r3, [r2, #24]
 800437c:	4b21      	ldr	r3, [pc, #132]	; (8004404 <HAL_TIM_Encoder_MspInit+0xcc>)
 800437e:	699b      	ldr	r3, [r3, #24]
 8004380:	f003 0304 	and.w	r3, r3, #4
 8004384:	613b      	str	r3, [r7, #16]
 8004386:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004388:	f44f 7340 	mov.w	r3, #768	; 0x300
 800438c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800438e:	2300      	movs	r3, #0
 8004390:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004392:	2300      	movs	r3, #0
 8004394:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004396:	f107 0318 	add.w	r3, r7, #24
 800439a:	4619      	mov	r1, r3
 800439c:	481a      	ldr	r0, [pc, #104]	; (8004408 <HAL_TIM_Encoder_MspInit+0xd0>)
 800439e:	f001 fd2b 	bl	8005df8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80043a2:	e028      	b.n	80043f6 <HAL_TIM_Encoder_MspInit+0xbe>
  else if(htim_encoder->Instance==TIM3)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a18      	ldr	r2, [pc, #96]	; (800440c <HAL_TIM_Encoder_MspInit+0xd4>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d123      	bne.n	80043f6 <HAL_TIM_Encoder_MspInit+0xbe>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80043ae:	4b15      	ldr	r3, [pc, #84]	; (8004404 <HAL_TIM_Encoder_MspInit+0xcc>)
 80043b0:	69db      	ldr	r3, [r3, #28]
 80043b2:	4a14      	ldr	r2, [pc, #80]	; (8004404 <HAL_TIM_Encoder_MspInit+0xcc>)
 80043b4:	f043 0302 	orr.w	r3, r3, #2
 80043b8:	61d3      	str	r3, [r2, #28]
 80043ba:	4b12      	ldr	r3, [pc, #72]	; (8004404 <HAL_TIM_Encoder_MspInit+0xcc>)
 80043bc:	69db      	ldr	r3, [r3, #28]
 80043be:	f003 0302 	and.w	r3, r3, #2
 80043c2:	60fb      	str	r3, [r7, #12]
 80043c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043c6:	4b0f      	ldr	r3, [pc, #60]	; (8004404 <HAL_TIM_Encoder_MspInit+0xcc>)
 80043c8:	699b      	ldr	r3, [r3, #24]
 80043ca:	4a0e      	ldr	r2, [pc, #56]	; (8004404 <HAL_TIM_Encoder_MspInit+0xcc>)
 80043cc:	f043 0304 	orr.w	r3, r3, #4
 80043d0:	6193      	str	r3, [r2, #24]
 80043d2:	4b0c      	ldr	r3, [pc, #48]	; (8004404 <HAL_TIM_Encoder_MspInit+0xcc>)
 80043d4:	699b      	ldr	r3, [r3, #24]
 80043d6:	f003 0304 	and.w	r3, r3, #4
 80043da:	60bb      	str	r3, [r7, #8]
 80043dc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80043de:	23c0      	movs	r3, #192	; 0xc0
 80043e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80043e2:	2300      	movs	r3, #0
 80043e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043e6:	2300      	movs	r3, #0
 80043e8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043ea:	f107 0318 	add.w	r3, r7, #24
 80043ee:	4619      	mov	r1, r3
 80043f0:	4805      	ldr	r0, [pc, #20]	; (8004408 <HAL_TIM_Encoder_MspInit+0xd0>)
 80043f2:	f001 fd01 	bl	8005df8 <HAL_GPIO_Init>
}
 80043f6:	bf00      	nop
 80043f8:	3728      	adds	r7, #40	; 0x28
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	40012c00 	.word	0x40012c00
 8004404:	40021000 	.word	0x40021000
 8004408:	40010800 	.word	0x40010800
 800440c:	40000400 	.word	0x40000400

08004410 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004410:	b480      	push	{r7}
 8004412:	b085      	sub	sp, #20
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a09      	ldr	r2, [pc, #36]	; (8004444 <HAL_TIM_PWM_MspInit+0x34>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d10b      	bne.n	800443a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004422:	4b09      	ldr	r3, [pc, #36]	; (8004448 <HAL_TIM_PWM_MspInit+0x38>)
 8004424:	69db      	ldr	r3, [r3, #28]
 8004426:	4a08      	ldr	r2, [pc, #32]	; (8004448 <HAL_TIM_PWM_MspInit+0x38>)
 8004428:	f043 0304 	orr.w	r3, r3, #4
 800442c:	61d3      	str	r3, [r2, #28]
 800442e:	4b06      	ldr	r3, [pc, #24]	; (8004448 <HAL_TIM_PWM_MspInit+0x38>)
 8004430:	69db      	ldr	r3, [r3, #28]
 8004432:	f003 0304 	and.w	r3, r3, #4
 8004436:	60fb      	str	r3, [r7, #12]
 8004438:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800443a:	bf00      	nop
 800443c:	3714      	adds	r7, #20
 800443e:	46bd      	mov	sp, r7
 8004440:	bc80      	pop	{r7}
 8004442:	4770      	bx	lr
 8004444:	40000800 	.word	0x40000800
 8004448:	40021000 	.word	0x40021000

0800444c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b088      	sub	sp, #32
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004454:	f107 0310 	add.w	r3, r7, #16
 8004458:	2200      	movs	r2, #0
 800445a:	601a      	str	r2, [r3, #0]
 800445c:	605a      	str	r2, [r3, #4]
 800445e:	609a      	str	r2, [r3, #8]
 8004460:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a10      	ldr	r2, [pc, #64]	; (80044a8 <HAL_TIM_MspPostInit+0x5c>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d118      	bne.n	800449e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800446c:	4b0f      	ldr	r3, [pc, #60]	; (80044ac <HAL_TIM_MspPostInit+0x60>)
 800446e:	699b      	ldr	r3, [r3, #24]
 8004470:	4a0e      	ldr	r2, [pc, #56]	; (80044ac <HAL_TIM_MspPostInit+0x60>)
 8004472:	f043 0308 	orr.w	r3, r3, #8
 8004476:	6193      	str	r3, [r2, #24]
 8004478:	4b0c      	ldr	r3, [pc, #48]	; (80044ac <HAL_TIM_MspPostInit+0x60>)
 800447a:	699b      	ldr	r3, [r3, #24]
 800447c:	f003 0308 	and.w	r3, r3, #8
 8004480:	60fb      	str	r3, [r7, #12]
 8004482:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004484:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004488:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800448a:	2302      	movs	r3, #2
 800448c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800448e:	2302      	movs	r3, #2
 8004490:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004492:	f107 0310 	add.w	r3, r7, #16
 8004496:	4619      	mov	r1, r3
 8004498:	4805      	ldr	r0, [pc, #20]	; (80044b0 <HAL_TIM_MspPostInit+0x64>)
 800449a:	f001 fcad 	bl	8005df8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800449e:	bf00      	nop
 80044a0:	3720      	adds	r7, #32
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	40000800 	.word	0x40000800
 80044ac:	40021000 	.word	0x40021000
 80044b0:	40010c00 	.word	0x40010c00

080044b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b088      	sub	sp, #32
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044bc:	f107 0310 	add.w	r3, r7, #16
 80044c0:	2200      	movs	r2, #0
 80044c2:	601a      	str	r2, [r3, #0]
 80044c4:	605a      	str	r2, [r3, #4]
 80044c6:	609a      	str	r2, [r3, #8]
 80044c8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a1c      	ldr	r2, [pc, #112]	; (8004540 <HAL_UART_MspInit+0x8c>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d131      	bne.n	8004538 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80044d4:	4b1b      	ldr	r3, [pc, #108]	; (8004544 <HAL_UART_MspInit+0x90>)
 80044d6:	69db      	ldr	r3, [r3, #28]
 80044d8:	4a1a      	ldr	r2, [pc, #104]	; (8004544 <HAL_UART_MspInit+0x90>)
 80044da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044de:	61d3      	str	r3, [r2, #28]
 80044e0:	4b18      	ldr	r3, [pc, #96]	; (8004544 <HAL_UART_MspInit+0x90>)
 80044e2:	69db      	ldr	r3, [r3, #28]
 80044e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044e8:	60fb      	str	r3, [r7, #12]
 80044ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044ec:	4b15      	ldr	r3, [pc, #84]	; (8004544 <HAL_UART_MspInit+0x90>)
 80044ee:	699b      	ldr	r3, [r3, #24]
 80044f0:	4a14      	ldr	r2, [pc, #80]	; (8004544 <HAL_UART_MspInit+0x90>)
 80044f2:	f043 0308 	orr.w	r3, r3, #8
 80044f6:	6193      	str	r3, [r2, #24]
 80044f8:	4b12      	ldr	r3, [pc, #72]	; (8004544 <HAL_UART_MspInit+0x90>)
 80044fa:	699b      	ldr	r3, [r3, #24]
 80044fc:	f003 0308 	and.w	r3, r3, #8
 8004500:	60bb      	str	r3, [r7, #8]
 8004502:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004504:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004508:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800450a:	2302      	movs	r3, #2
 800450c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800450e:	2303      	movs	r3, #3
 8004510:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004512:	f107 0310 	add.w	r3, r7, #16
 8004516:	4619      	mov	r1, r3
 8004518:	480b      	ldr	r0, [pc, #44]	; (8004548 <HAL_UART_MspInit+0x94>)
 800451a:	f001 fc6d 	bl	8005df8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800451e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004522:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004524:	2300      	movs	r3, #0
 8004526:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004528:	2300      	movs	r3, #0
 800452a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800452c:	f107 0310 	add.w	r3, r7, #16
 8004530:	4619      	mov	r1, r3
 8004532:	4805      	ldr	r0, [pc, #20]	; (8004548 <HAL_UART_MspInit+0x94>)
 8004534:	f001 fc60 	bl	8005df8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004538:	bf00      	nop
 800453a:	3720      	adds	r7, #32
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}
 8004540:	40004800 	.word	0x40004800
 8004544:	40021000 	.word	0x40021000
 8004548:	40010c00 	.word	0x40010c00

0800454c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800454c:	b480      	push	{r7}
 800454e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004550:	e7fe      	b.n	8004550 <NMI_Handler+0x4>

08004552 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004552:	b480      	push	{r7}
 8004554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004556:	e7fe      	b.n	8004556 <HardFault_Handler+0x4>

08004558 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004558:	b480      	push	{r7}
 800455a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800455c:	e7fe      	b.n	800455c <MemManage_Handler+0x4>

0800455e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800455e:	b480      	push	{r7}
 8004560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004562:	e7fe      	b.n	8004562 <BusFault_Handler+0x4>

08004564 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004564:	b480      	push	{r7}
 8004566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004568:	e7fe      	b.n	8004568 <UsageFault_Handler+0x4>

0800456a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800456a:	b480      	push	{r7}
 800456c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800456e:	bf00      	nop
 8004570:	46bd      	mov	sp, r7
 8004572:	bc80      	pop	{r7}
 8004574:	4770      	bx	lr

08004576 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004576:	b480      	push	{r7}
 8004578:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800457a:	bf00      	nop
 800457c:	46bd      	mov	sp, r7
 800457e:	bc80      	pop	{r7}
 8004580:	4770      	bx	lr

08004582 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004582:	b480      	push	{r7}
 8004584:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004586:	bf00      	nop
 8004588:	46bd      	mov	sp, r7
 800458a:	bc80      	pop	{r7}
 800458c:	4770      	bx	lr
	...

08004590 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if (StraightFlag == 1) {
 8004594:	4b0a      	ldr	r3, [pc, #40]	; (80045c0 <SysTick_Handler+0x30>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2b01      	cmp	r3, #1
 800459a:	d105      	bne.n	80045a8 <SysTick_Handler+0x18>
		aproximationPID(ADELANTE);
 800459c:	2000      	movs	r0, #0
 800459e:	f000 f821 	bl	80045e4 <aproximationPID>
		//angularPID();
		moveStraight();
 80045a2:	f000 f979 	bl	8004898 <moveStraight>
 80045a6:	e006      	b.n	80045b6 <SysTick_Handler+0x26>
	}else if(StraightFlag == 2){
 80045a8:	4b05      	ldr	r3, [pc, #20]	; (80045c0 <SysTick_Handler+0x30>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	d102      	bne.n	80045b6 <SysTick_Handler+0x26>
		aproximationPID(ATRAS);
 80045b0:	2002      	movs	r0, #2
 80045b2:	f000 f817 	bl	80045e4 <aproximationPID>
	}
	//moveStraight();
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80045b6:	f000 fb3b 	bl	8004c30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80045ba:	bf00      	nop
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	200040a4 	.word	0x200040a4

080045c4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80045c8:	4802      	ldr	r0, [pc, #8]	; (80045d4 <DMA1_Channel1_IRQHandler+0x10>)
 80045ca:	f001 f8d7 	bl	800577c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80045ce:	bf00      	nop
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	20000134 	.word	0x20000134

080045d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80045d8:	b480      	push	{r7}
 80045da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80045dc:	bf00      	nop
 80045de:	46bd      	mov	sp, r7
 80045e0:	bc80      	pop	{r7}
 80045e2:	4770      	bx	lr

080045e4 <aproximationPID>:
float timeNowT, timePrevT, timeNowA, timePrevA, timeNowP, timePrevP;
int motLeft, motRight;
int pLeft = 100;
int pRight = 100;

void aproximationPID(int sentido) {
 80045e4:	b5b0      	push	{r4, r5, r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af02      	add	r7, sp, #8
 80045ea:	6078      	str	r0, [r7, #4]
	if (sentido == ADELANTE) {
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d127      	bne.n	8004642 <aproximationPID+0x5e>
		errorP = objectiveDistance
				- (calcularDistancia((TIM1->CNT) >> 1)
 80045f2:	4b92      	ldr	r3, [pc, #584]	; (800483c <aproximationPID+0x258>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4618      	mov	r0, r3
 80045f8:	f7fc fb70 	bl	8000cdc <__aeabi_i2f>
 80045fc:	4604      	mov	r4, r0
 80045fe:	4b90      	ldr	r3, [pc, #576]	; (8004840 <aproximationPID+0x25c>)
 8004600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004602:	085b      	lsrs	r3, r3, #1
 8004604:	4618      	mov	r0, r3
 8004606:	f7fe ff83 	bl	8003510 <calcularDistancia>
 800460a:	4605      	mov	r5, r0
						+ calcularDistancia((TIM3->CNT) >> 1)) / 2;
 800460c:	4b8d      	ldr	r3, [pc, #564]	; (8004844 <aproximationPID+0x260>)
 800460e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004610:	085b      	lsrs	r3, r3, #1
 8004612:	4618      	mov	r0, r3
 8004614:	f7fe ff7c 	bl	8003510 <calcularDistancia>
 8004618:	4603      	mov	r3, r0
 800461a:	4619      	mov	r1, r3
 800461c:	4628      	mov	r0, r5
 800461e:	f7fc faa9 	bl	8000b74 <__addsf3>
 8004622:	4603      	mov	r3, r0
 8004624:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004628:	4618      	mov	r0, r3
 800462a:	f7fc fc5f 	bl	8000eec <__aeabi_fdiv>
 800462e:	4603      	mov	r3, r0
				- (calcularDistancia((TIM1->CNT) >> 1)
 8004630:	4619      	mov	r1, r3
 8004632:	4620      	mov	r0, r4
 8004634:	f7fc fa9c 	bl	8000b70 <__aeabi_fsub>
 8004638:	4603      	mov	r3, r0
 800463a:	461a      	mov	r2, r3
		errorP = objectiveDistance
 800463c:	4b82      	ldr	r3, [pc, #520]	; (8004848 <aproximationPID+0x264>)
 800463e:	601a      	str	r2, [r3, #0]
 8004640:	e02d      	b.n	800469e <aproximationPID+0xba>
	} else if (sentido == IZQUIERDA) {
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2b01      	cmp	r3, #1
 8004646:	d115      	bne.n	8004674 <aproximationPID+0x90>
		errorP =   objectiveDistance - calcularDistancia((TIM3->CNT) >> 1);
 8004648:	4b7c      	ldr	r3, [pc, #496]	; (800483c <aproximationPID+0x258>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4618      	mov	r0, r3
 800464e:	f7fc fb45 	bl	8000cdc <__aeabi_i2f>
 8004652:	4604      	mov	r4, r0
 8004654:	4b7b      	ldr	r3, [pc, #492]	; (8004844 <aproximationPID+0x260>)
 8004656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004658:	085b      	lsrs	r3, r3, #1
 800465a:	4618      	mov	r0, r3
 800465c:	f7fe ff58 	bl	8003510 <calcularDistancia>
 8004660:	4603      	mov	r3, r0
 8004662:	4619      	mov	r1, r3
 8004664:	4620      	mov	r0, r4
 8004666:	f7fc fa83 	bl	8000b70 <__aeabi_fsub>
 800466a:	4603      	mov	r3, r0
 800466c:	461a      	mov	r2, r3
 800466e:	4b76      	ldr	r3, [pc, #472]	; (8004848 <aproximationPID+0x264>)
 8004670:	601a      	str	r2, [r3, #0]
 8004672:	e014      	b.n	800469e <aproximationPID+0xba>
	} else {
		errorP =  objectiveDistance - calcularDistancia((TIM1->CNT) >> 1) ;
 8004674:	4b71      	ldr	r3, [pc, #452]	; (800483c <aproximationPID+0x258>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4618      	mov	r0, r3
 800467a:	f7fc fb2f 	bl	8000cdc <__aeabi_i2f>
 800467e:	4604      	mov	r4, r0
 8004680:	4b6f      	ldr	r3, [pc, #444]	; (8004840 <aproximationPID+0x25c>)
 8004682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004684:	085b      	lsrs	r3, r3, #1
 8004686:	4618      	mov	r0, r3
 8004688:	f7fe ff42 	bl	8003510 <calcularDistancia>
 800468c:	4603      	mov	r3, r0
 800468e:	4619      	mov	r1, r3
 8004690:	4620      	mov	r0, r4
 8004692:	f7fc fa6d 	bl	8000b70 <__aeabi_fsub>
 8004696:	4603      	mov	r3, r0
 8004698:	461a      	mov	r2, r3
 800469a:	4b6b      	ldr	r3, [pc, #428]	; (8004848 <aproximationPID+0x264>)
 800469c:	601a      	str	r2, [r3, #0]
	}
	timePrevP = timeNowT;
 800469e:	4b6b      	ldr	r3, [pc, #428]	; (800484c <aproximationPID+0x268>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a6b      	ldr	r2, [pc, #428]	; (8004850 <aproximationPID+0x26c>)
 80046a4:	6013      	str	r3, [r2, #0]
	timeNowP = HAL_GetTick();
 80046a6:	f000 fad5 	bl	8004c54 <HAL_GetTick>
 80046aa:	4603      	mov	r3, r0
 80046ac:	4618      	mov	r0, r3
 80046ae:	f7fc fb11 	bl	8000cd4 <__aeabi_ui2f>
 80046b2:	4603      	mov	r3, r0
 80046b4:	4a67      	ldr	r2, [pc, #412]	; (8004854 <aproximationPID+0x270>)
 80046b6:	6013      	str	r3, [r2, #0]
	elapsedTime = (timeNowP - timePrevP) / 1000;
 80046b8:	4b66      	ldr	r3, [pc, #408]	; (8004854 <aproximationPID+0x270>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a64      	ldr	r2, [pc, #400]	; (8004850 <aproximationPID+0x26c>)
 80046be:	6812      	ldr	r2, [r2, #0]
 80046c0:	4611      	mov	r1, r2
 80046c2:	4618      	mov	r0, r3
 80046c4:	f7fc fa54 	bl	8000b70 <__aeabi_fsub>
 80046c8:	4603      	mov	r3, r0
 80046ca:	4963      	ldr	r1, [pc, #396]	; (8004858 <aproximationPID+0x274>)
 80046cc:	4618      	mov	r0, r3
 80046ce:	f7fc fc0d 	bl	8000eec <__aeabi_fdiv>
 80046d2:	4603      	mov	r3, r0
 80046d4:	461a      	mov	r2, r3
 80046d6:	4b61      	ldr	r3, [pc, #388]	; (800485c <aproximationPID+0x278>)
 80046d8:	601a      	str	r2, [r3, #0]
	pidD = KDP * ((errorP - previousErrorP) / elapsedTime);
 80046da:	4b5b      	ldr	r3, [pc, #364]	; (8004848 <aproximationPID+0x264>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a60      	ldr	r2, [pc, #384]	; (8004860 <aproximationPID+0x27c>)
 80046e0:	6812      	ldr	r2, [r2, #0]
 80046e2:	4611      	mov	r1, r2
 80046e4:	4618      	mov	r0, r3
 80046e6:	f7fc fa43 	bl	8000b70 <__aeabi_fsub>
 80046ea:	4603      	mov	r3, r0
 80046ec:	461a      	mov	r2, r3
 80046ee:	4b5b      	ldr	r3, [pc, #364]	; (800485c <aproximationPID+0x278>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4619      	mov	r1, r3
 80046f4:	4610      	mov	r0, r2
 80046f6:	f7fc fbf9 	bl	8000eec <__aeabi_fdiv>
 80046fa:	4603      	mov	r3, r0
 80046fc:	461a      	mov	r2, r3
 80046fe:	4b59      	ldr	r3, [pc, #356]	; (8004864 <aproximationPID+0x280>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4619      	mov	r1, r3
 8004704:	4610      	mov	r0, r2
 8004706:	f7fc fb3d 	bl	8000d84 <__aeabi_fmul>
 800470a:	4603      	mov	r3, r0
 800470c:	461a      	mov	r2, r3
 800470e:	4b56      	ldr	r3, [pc, #344]	; (8004868 <aproximationPID+0x284>)
 8004710:	601a      	str	r2, [r3, #0]
	pidP = KPP * errorP;
 8004712:	4b56      	ldr	r3, [pc, #344]	; (800486c <aproximationPID+0x288>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a4c      	ldr	r2, [pc, #304]	; (8004848 <aproximationPID+0x264>)
 8004718:	6812      	ldr	r2, [r2, #0]
 800471a:	4611      	mov	r1, r2
 800471c:	4618      	mov	r0, r3
 800471e:	f7fc fb31 	bl	8000d84 <__aeabi_fmul>
 8004722:	4603      	mov	r3, r0
 8004724:	461a      	mov	r2, r3
 8004726:	4b52      	ldr	r3, [pc, #328]	; (8004870 <aproximationPID+0x28c>)
 8004728:	601a      	str	r2, [r3, #0]
	pid = pidP + pidD;
 800472a:	4b51      	ldr	r3, [pc, #324]	; (8004870 <aproximationPID+0x28c>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a4e      	ldr	r2, [pc, #312]	; (8004868 <aproximationPID+0x284>)
 8004730:	6812      	ldr	r2, [r2, #0]
 8004732:	4611      	mov	r1, r2
 8004734:	4618      	mov	r0, r3
 8004736:	f7fc fa1d 	bl	8000b74 <__addsf3>
 800473a:	4603      	mov	r3, r0
 800473c:	461a      	mov	r2, r3
 800473e:	4b4d      	ldr	r3, [pc, #308]	; (8004874 <aproximationPID+0x290>)
 8004740:	601a      	str	r2, [r3, #0]
	if (pid > velocity) {
 8004742:	4b4c      	ldr	r3, [pc, #304]	; (8004874 <aproximationPID+0x290>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a4c      	ldr	r2, [pc, #304]	; (8004878 <aproximationPID+0x294>)
 8004748:	6812      	ldr	r2, [r2, #0]
 800474a:	4611      	mov	r1, r2
 800474c:	4618      	mov	r0, r3
 800474e:	f7fc fcd5 	bl	80010fc <__aeabi_fcmpgt>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d003      	beq.n	8004760 <aproximationPID+0x17c>
		//intUartSend(1);
		pid = velocity;
 8004758:	4b47      	ldr	r3, [pc, #284]	; (8004878 <aproximationPID+0x294>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a45      	ldr	r2, [pc, #276]	; (8004874 <aproximationPID+0x290>)
 800475e:	6013      	str	r3, [r2, #0]
	}
	if (pid < -velocity) {
 8004760:	4b45      	ldr	r3, [pc, #276]	; (8004878 <aproximationPID+0x294>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004768:	4a42      	ldr	r2, [pc, #264]	; (8004874 <aproximationPID+0x290>)
 800476a:	6812      	ldr	r2, [r2, #0]
 800476c:	4611      	mov	r1, r2
 800476e:	4618      	mov	r0, r3
 8004770:	f7fc fcc4 	bl	80010fc <__aeabi_fcmpgt>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d005      	beq.n	8004786 <aproximationPID+0x1a2>
		//intUartSend(0);
		pid = -velocity;
 800477a:	4b3f      	ldr	r3, [pc, #252]	; (8004878 <aproximationPID+0x294>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004782:	4a3c      	ldr	r2, [pc, #240]	; (8004874 <aproximationPID+0x290>)
 8004784:	6013      	str	r3, [r2, #0]
	}
	xSpeed = pid;
 8004786:	4b3b      	ldr	r3, [pc, #236]	; (8004874 <aproximationPID+0x290>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4618      	mov	r0, r3
 800478c:	f7fc fcc0 	bl	8001110 <__aeabi_f2iz>
 8004790:	4603      	mov	r3, r0
 8004792:	4a3a      	ldr	r2, [pc, #232]	; (800487c <aproximationPID+0x298>)
 8004794:	6013      	str	r3, [r2, #0]
	if (xSpeed < -1000) {
 8004796:	4b39      	ldr	r3, [pc, #228]	; (800487c <aproximationPID+0x298>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800479e:	da02      	bge.n	80047a6 <aproximationPID+0x1c2>
		xSpeed = -1000;
 80047a0:	4b36      	ldr	r3, [pc, #216]	; (800487c <aproximationPID+0x298>)
 80047a2:	4a37      	ldr	r2, [pc, #220]	; (8004880 <aproximationPID+0x29c>)
 80047a4:	601a      	str	r2, [r3, #0]
	}

	previousErrorT = errorT;
 80047a6:	4b37      	ldr	r3, [pc, #220]	; (8004884 <aproximationPID+0x2a0>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a37      	ldr	r2, [pc, #220]	; (8004888 <aproximationPID+0x2a4>)
 80047ac:	6013      	str	r3, [r2, #0]
	xSpeed = constrain(xSpeed, -1000, 1000);
 80047ae:	4b33      	ldr	r3, [pc, #204]	; (800487c <aproximationPID+0x298>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80047b6:	4932      	ldr	r1, [pc, #200]	; (8004880 <aproximationPID+0x29c>)
 80047b8:	4618      	mov	r0, r3
 80047ba:	f7fe fdde 	bl	800337a <constrain>
 80047be:	4603      	mov	r3, r0
 80047c0:	4a2e      	ldr	r2, [pc, #184]	; (800487c <aproximationPID+0x298>)
 80047c2:	6013      	str	r3, [r2, #0]
	xSpeed = MAP(xSpeed, -1000, 1000, -baseChoice[choice], baseChoice[choice]);
 80047c4:	4b2d      	ldr	r3, [pc, #180]	; (800487c <aproximationPID+0x298>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4618      	mov	r0, r3
 80047ca:	4b30      	ldr	r3, [pc, #192]	; (800488c <aproximationPID+0x2a8>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a30      	ldr	r2, [pc, #192]	; (8004890 <aproximationPID+0x2ac>)
 80047d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047d4:	425b      	negs	r3, r3
 80047d6:	4619      	mov	r1, r3
 80047d8:	4b2c      	ldr	r3, [pc, #176]	; (800488c <aproximationPID+0x2a8>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a2c      	ldr	r2, [pc, #176]	; (8004890 <aproximationPID+0x2ac>)
 80047de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047e2:	9300      	str	r3, [sp, #0]
 80047e4:	460b      	mov	r3, r1
 80047e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80047ea:	4925      	ldr	r1, [pc, #148]	; (8004880 <aproximationPID+0x29c>)
 80047ec:	f7fe fdaa 	bl	8003344 <MAP>
 80047f0:	4603      	mov	r3, r0
 80047f2:	461a      	mov	r2, r3
 80047f4:	4b21      	ldr	r3, [pc, #132]	; (800487c <aproximationPID+0x298>)
 80047f6:	601a      	str	r2, [r3, #0]
	if (xSpeed >= 0) {
 80047f8:	4b20      	ldr	r3, [pc, #128]	; (800487c <aproximationPID+0x298>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	db03      	blt.n	8004808 <aproximationPID+0x224>
		direction = ADELANTE;
 8004800:	4b24      	ldr	r3, [pc, #144]	; (8004894 <aproximationPID+0x2b0>)
 8004802:	2200      	movs	r2, #0
 8004804:	601a      	str	r2, [r3, #0]
 8004806:	e007      	b.n	8004818 <aproximationPID+0x234>
	} else {
		xSpeed = -xSpeed;
 8004808:	4b1c      	ldr	r3, [pc, #112]	; (800487c <aproximationPID+0x298>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	425b      	negs	r3, r3
 800480e:	4a1b      	ldr	r2, [pc, #108]	; (800487c <aproximationPID+0x298>)
 8004810:	6013      	str	r3, [r2, #0]
		direction = ATRAS;
 8004812:	4b20      	ldr	r3, [pc, #128]	; (8004894 <aproximationPID+0x2b0>)
 8004814:	2202      	movs	r2, #2
 8004816:	601a      	str	r2, [r3, #0]
	}
	if (xSpeed < 10000 && xSpeed > 0) {
 8004818:	4b18      	ldr	r3, [pc, #96]	; (800487c <aproximationPID+0x298>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f242 720f 	movw	r2, #9999	; 0x270f
 8004820:	4293      	cmp	r3, r2
 8004822:	dc07      	bgt.n	8004834 <aproximationPID+0x250>
 8004824:	4b15      	ldr	r3, [pc, #84]	; (800487c <aproximationPID+0x298>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2b00      	cmp	r3, #0
 800482a:	dd03      	ble.n	8004834 <aproximationPID+0x250>
		xSpeed = 10000;
 800482c:	4b13      	ldr	r3, [pc, #76]	; (800487c <aproximationPID+0x298>)
 800482e:	f242 7210 	movw	r2, #10000	; 0x2710
 8004832:	601a      	str	r2, [r3, #0]
	}
}
 8004834:	bf00      	nop
 8004836:	3708      	adds	r7, #8
 8004838:	46bd      	mov	sp, r7
 800483a:	bdb0      	pop	{r4, r5, r7, pc}
 800483c:	200040ac 	.word	0x200040ac
 8004840:	40012c00 	.word	0x40012c00
 8004844:	40000400 	.word	0x40000400
 8004848:	200040cc 	.word	0x200040cc
 800484c:	200040d8 	.word	0x200040d8
 8004850:	200040e4 	.word	0x200040e4
 8004854:	200040e0 	.word	0x200040e0
 8004858:	447a0000 	.word	0x447a0000
 800485c:	200040bc 	.word	0x200040bc
 8004860:	200040d4 	.word	0x200040d4
 8004864:	20004098 	.word	0x20004098
 8004868:	200040c4 	.word	0x200040c4
 800486c:	20004094 	.word	0x20004094
 8004870:	200040c0 	.word	0x200040c0
 8004874:	200040b8 	.word	0x200040b8
 8004878:	2000409c 	.word	0x2000409c
 800487c:	200040a8 	.word	0x200040a8
 8004880:	fffffc18 	.word	0xfffffc18
 8004884:	200040c8 	.word	0x200040c8
 8004888:	200040d0 	.word	0x200040d0
 800488c:	20002308 	.word	0x20002308
 8004890:	20000038 	.word	0x20000038
 8004894:	200040b0 	.word	0x200040b0

08004898 <moveStraight>:
	pLeft = 100 - pid;
	pRight = 100 + pid;
	previousErrorA = errorA;
}

void moveStraight() {
 8004898:	b5b0      	push	{r4, r5, r7, lr}
 800489a:	b082      	sub	sp, #8
 800489c:	af02      	add	r7, sp, #8
	if (StraightFlag == 1) {
 800489e:	4b98      	ldr	r3, [pc, #608]	; (8004b00 <moveStraight+0x268>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d12d      	bne.n	8004902 <moveStraight+0x6a>
		errorT = calcularDistancia((TIM1->CNT) >> 1) * pLeft
 80048a6:	4b97      	ldr	r3, [pc, #604]	; (8004b04 <moveStraight+0x26c>)
 80048a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048aa:	085b      	lsrs	r3, r3, #1
 80048ac:	4618      	mov	r0, r3
 80048ae:	f7fe fe2f 	bl	8003510 <calcularDistancia>
 80048b2:	4604      	mov	r4, r0
 80048b4:	4b94      	ldr	r3, [pc, #592]	; (8004b08 <moveStraight+0x270>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4618      	mov	r0, r3
 80048ba:	f7fc fa0f 	bl	8000cdc <__aeabi_i2f>
 80048be:	4603      	mov	r3, r0
 80048c0:	4619      	mov	r1, r3
 80048c2:	4620      	mov	r0, r4
 80048c4:	f7fc fa5e 	bl	8000d84 <__aeabi_fmul>
 80048c8:	4603      	mov	r3, r0
 80048ca:	461d      	mov	r5, r3
				- calcularDistancia((TIM3->CNT) >> 1) * pRight;
 80048cc:	4b8f      	ldr	r3, [pc, #572]	; (8004b0c <moveStraight+0x274>)
 80048ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d0:	085b      	lsrs	r3, r3, #1
 80048d2:	4618      	mov	r0, r3
 80048d4:	f7fe fe1c 	bl	8003510 <calcularDistancia>
 80048d8:	4604      	mov	r4, r0
 80048da:	4b8d      	ldr	r3, [pc, #564]	; (8004b10 <moveStraight+0x278>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4618      	mov	r0, r3
 80048e0:	f7fc f9fc 	bl	8000cdc <__aeabi_i2f>
 80048e4:	4603      	mov	r3, r0
 80048e6:	4619      	mov	r1, r3
 80048e8:	4620      	mov	r0, r4
 80048ea:	f7fc fa4b 	bl	8000d84 <__aeabi_fmul>
 80048ee:	4603      	mov	r3, r0
 80048f0:	4619      	mov	r1, r3
 80048f2:	4628      	mov	r0, r5
 80048f4:	f7fc f93c 	bl	8000b70 <__aeabi_fsub>
 80048f8:	4603      	mov	r3, r0
 80048fa:	461a      	mov	r2, r3
		errorT = calcularDistancia((TIM1->CNT) >> 1) * pLeft
 80048fc:	4b85      	ldr	r3, [pc, #532]	; (8004b14 <moveStraight+0x27c>)
 80048fe:	601a      	str	r2, [r3, #0]
 8004900:	e015      	b.n	800492e <moveStraight+0x96>
	}else{
		errorT = calcularDistancia((TIM1->CNT) >> 1)
 8004902:	4b80      	ldr	r3, [pc, #512]	; (8004b04 <moveStraight+0x26c>)
 8004904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004906:	085b      	lsrs	r3, r3, #1
 8004908:	4618      	mov	r0, r3
 800490a:	f7fe fe01 	bl	8003510 <calcularDistancia>
 800490e:	4604      	mov	r4, r0
						- calcularDistancia((TIM3->CNT) >> 1);
 8004910:	4b7e      	ldr	r3, [pc, #504]	; (8004b0c <moveStraight+0x274>)
 8004912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004914:	085b      	lsrs	r3, r3, #1
 8004916:	4618      	mov	r0, r3
 8004918:	f7fe fdfa 	bl	8003510 <calcularDistancia>
 800491c:	4603      	mov	r3, r0
 800491e:	4619      	mov	r1, r3
 8004920:	4620      	mov	r0, r4
 8004922:	f7fc f925 	bl	8000b70 <__aeabi_fsub>
 8004926:	4603      	mov	r3, r0
 8004928:	461a      	mov	r2, r3
		errorT = calcularDistancia((TIM1->CNT) >> 1)
 800492a:	4b7a      	ldr	r3, [pc, #488]	; (8004b14 <moveStraight+0x27c>)
 800492c:	601a      	str	r2, [r3, #0]
	}

	timePrevT = timeNowT;
 800492e:	4b7a      	ldr	r3, [pc, #488]	; (8004b18 <moveStraight+0x280>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a7a      	ldr	r2, [pc, #488]	; (8004b1c <moveStraight+0x284>)
 8004934:	6013      	str	r3, [r2, #0]
	timeNowT = HAL_GetTick();
 8004936:	f000 f98d 	bl	8004c54 <HAL_GetTick>
 800493a:	4603      	mov	r3, r0
 800493c:	4618      	mov	r0, r3
 800493e:	f7fc f9c9 	bl	8000cd4 <__aeabi_ui2f>
 8004942:	4603      	mov	r3, r0
 8004944:	4a74      	ldr	r2, [pc, #464]	; (8004b18 <moveStraight+0x280>)
 8004946:	6013      	str	r3, [r2, #0]
	elapsedTime = (timeNowT - timePrevT) / 1000;
 8004948:	4b73      	ldr	r3, [pc, #460]	; (8004b18 <moveStraight+0x280>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a73      	ldr	r2, [pc, #460]	; (8004b1c <moveStraight+0x284>)
 800494e:	6812      	ldr	r2, [r2, #0]
 8004950:	4611      	mov	r1, r2
 8004952:	4618      	mov	r0, r3
 8004954:	f7fc f90c 	bl	8000b70 <__aeabi_fsub>
 8004958:	4603      	mov	r3, r0
 800495a:	4971      	ldr	r1, [pc, #452]	; (8004b20 <moveStraight+0x288>)
 800495c:	4618      	mov	r0, r3
 800495e:	f7fc fac5 	bl	8000eec <__aeabi_fdiv>
 8004962:	4603      	mov	r3, r0
 8004964:	461a      	mov	r2, r3
 8004966:	4b6f      	ldr	r3, [pc, #444]	; (8004b24 <moveStraight+0x28c>)
 8004968:	601a      	str	r2, [r3, #0]
	pidD = KDT * ((errorT - previousErrorT) / elapsedTime);
 800496a:	4b6a      	ldr	r3, [pc, #424]	; (8004b14 <moveStraight+0x27c>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a6e      	ldr	r2, [pc, #440]	; (8004b28 <moveStraight+0x290>)
 8004970:	6812      	ldr	r2, [r2, #0]
 8004972:	4611      	mov	r1, r2
 8004974:	4618      	mov	r0, r3
 8004976:	f7fc f8fb 	bl	8000b70 <__aeabi_fsub>
 800497a:	4603      	mov	r3, r0
 800497c:	461a      	mov	r2, r3
 800497e:	4b69      	ldr	r3, [pc, #420]	; (8004b24 <moveStraight+0x28c>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4619      	mov	r1, r3
 8004984:	4610      	mov	r0, r2
 8004986:	f7fc fab1 	bl	8000eec <__aeabi_fdiv>
 800498a:	4603      	mov	r3, r0
 800498c:	461a      	mov	r2, r3
 800498e:	4b67      	ldr	r3, [pc, #412]	; (8004b2c <moveStraight+0x294>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4619      	mov	r1, r3
 8004994:	4610      	mov	r0, r2
 8004996:	f7fc f9f5 	bl	8000d84 <__aeabi_fmul>
 800499a:	4603      	mov	r3, r0
 800499c:	461a      	mov	r2, r3
 800499e:	4b64      	ldr	r3, [pc, #400]	; (8004b30 <moveStraight+0x298>)
 80049a0:	601a      	str	r2, [r3, #0]
	pidP = KPT * errorT;
 80049a2:	4b64      	ldr	r3, [pc, #400]	; (8004b34 <moveStraight+0x29c>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a5b      	ldr	r2, [pc, #364]	; (8004b14 <moveStraight+0x27c>)
 80049a8:	6812      	ldr	r2, [r2, #0]
 80049aa:	4611      	mov	r1, r2
 80049ac:	4618      	mov	r0, r3
 80049ae:	f7fc f9e9 	bl	8000d84 <__aeabi_fmul>
 80049b2:	4603      	mov	r3, r0
 80049b4:	461a      	mov	r2, r3
 80049b6:	4b60      	ldr	r3, [pc, #384]	; (8004b38 <moveStraight+0x2a0>)
 80049b8:	601a      	str	r2, [r3, #0]
	pid = pidP + pidD;
 80049ba:	4b5f      	ldr	r3, [pc, #380]	; (8004b38 <moveStraight+0x2a0>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a5c      	ldr	r2, [pc, #368]	; (8004b30 <moveStraight+0x298>)
 80049c0:	6812      	ldr	r2, [r2, #0]
 80049c2:	4611      	mov	r1, r2
 80049c4:	4618      	mov	r0, r3
 80049c6:	f7fc f8d5 	bl	8000b74 <__addsf3>
 80049ca:	4603      	mov	r3, r0
 80049cc:	461a      	mov	r2, r3
 80049ce:	4b5b      	ldr	r3, [pc, #364]	; (8004b3c <moveStraight+0x2a4>)
 80049d0:	601a      	str	r2, [r3, #0]
	if (pid > velocity) {
 80049d2:	4b5a      	ldr	r3, [pc, #360]	; (8004b3c <moveStraight+0x2a4>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a5a      	ldr	r2, [pc, #360]	; (8004b40 <moveStraight+0x2a8>)
 80049d8:	6812      	ldr	r2, [r2, #0]
 80049da:	4611      	mov	r1, r2
 80049dc:	4618      	mov	r0, r3
 80049de:	f7fc fb8d 	bl	80010fc <__aeabi_fcmpgt>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d003      	beq.n	80049f0 <moveStraight+0x158>
		//intUartSend(1);
		pid = velocity;
 80049e8:	4b55      	ldr	r3, [pc, #340]	; (8004b40 <moveStraight+0x2a8>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a53      	ldr	r2, [pc, #332]	; (8004b3c <moveStraight+0x2a4>)
 80049ee:	6013      	str	r3, [r2, #0]
	}
	if (pid < -velocity) {
 80049f0:	4b53      	ldr	r3, [pc, #332]	; (8004b40 <moveStraight+0x2a8>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80049f8:	4a50      	ldr	r2, [pc, #320]	; (8004b3c <moveStraight+0x2a4>)
 80049fa:	6812      	ldr	r2, [r2, #0]
 80049fc:	4611      	mov	r1, r2
 80049fe:	4618      	mov	r0, r3
 8004a00:	f7fc fb7c 	bl	80010fc <__aeabi_fcmpgt>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d005      	beq.n	8004a16 <moveStraight+0x17e>
		//intUartSend(0);
		pid = -velocity;
 8004a0a:	4b4d      	ldr	r3, [pc, #308]	; (8004b40 <moveStraight+0x2a8>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004a12:	4a4a      	ldr	r2, [pc, #296]	; (8004b3c <moveStraight+0x2a4>)
 8004a14:	6013      	str	r3, [r2, #0]
	}
	//intUartSend(pid);
	//HAL_Delay(10);

	motLeft = velocity - pid;
 8004a16:	4b4a      	ldr	r3, [pc, #296]	; (8004b40 <moveStraight+0x2a8>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a48      	ldr	r2, [pc, #288]	; (8004b3c <moveStraight+0x2a4>)
 8004a1c:	6812      	ldr	r2, [r2, #0]
 8004a1e:	4611      	mov	r1, r2
 8004a20:	4618      	mov	r0, r3
 8004a22:	f7fc f8a5 	bl	8000b70 <__aeabi_fsub>
 8004a26:	4603      	mov	r3, r0
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f7fc fb71 	bl	8001110 <__aeabi_f2iz>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	4a44      	ldr	r2, [pc, #272]	; (8004b44 <moveStraight+0x2ac>)
 8004a32:	6013      	str	r3, [r2, #0]
	motRight = velocity + pid;
 8004a34:	4b42      	ldr	r3, [pc, #264]	; (8004b40 <moveStraight+0x2a8>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a40      	ldr	r2, [pc, #256]	; (8004b3c <moveStraight+0x2a4>)
 8004a3a:	6812      	ldr	r2, [r2, #0]
 8004a3c:	4611      	mov	r1, r2
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f7fc f898 	bl	8000b74 <__addsf3>
 8004a44:	4603      	mov	r3, r0
 8004a46:	4618      	mov	r0, r3
 8004a48:	f7fc fb62 	bl	8001110 <__aeabi_f2iz>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	4a3e      	ldr	r2, [pc, #248]	; (8004b48 <moveStraight+0x2b0>)
 8004a50:	6013      	str	r3, [r2, #0]
	if (motLeft < -1000) {
 8004a52:	4b3c      	ldr	r3, [pc, #240]	; (8004b44 <moveStraight+0x2ac>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8004a5a:	da02      	bge.n	8004a62 <moveStraight+0x1ca>
		motLeft = -1000;
 8004a5c:	4b39      	ldr	r3, [pc, #228]	; (8004b44 <moveStraight+0x2ac>)
 8004a5e:	4a3b      	ldr	r2, [pc, #236]	; (8004b4c <moveStraight+0x2b4>)
 8004a60:	601a      	str	r2, [r3, #0]
	}
	if (motRight < -1000) {
 8004a62:	4b39      	ldr	r3, [pc, #228]	; (8004b48 <moveStraight+0x2b0>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8004a6a:	da02      	bge.n	8004a72 <moveStraight+0x1da>
		motRight = -1000;
 8004a6c:	4b36      	ldr	r3, [pc, #216]	; (8004b48 <moveStraight+0x2b0>)
 8004a6e:	4a37      	ldr	r2, [pc, #220]	; (8004b4c <moveStraight+0x2b4>)
 8004a70:	601a      	str	r2, [r3, #0]
	}

	previousErrorT = errorT;
 8004a72:	4b28      	ldr	r3, [pc, #160]	; (8004b14 <moveStraight+0x27c>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a2c      	ldr	r2, [pc, #176]	; (8004b28 <moveStraight+0x290>)
 8004a78:	6013      	str	r3, [r2, #0]
	motRight = constrain(motRight, -1000, 1000);
 8004a7a:	4b33      	ldr	r3, [pc, #204]	; (8004b48 <moveStraight+0x2b0>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004a82:	4932      	ldr	r1, [pc, #200]	; (8004b4c <moveStraight+0x2b4>)
 8004a84:	4618      	mov	r0, r3
 8004a86:	f7fe fc78 	bl	800337a <constrain>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	4a2e      	ldr	r2, [pc, #184]	; (8004b48 <moveStraight+0x2b0>)
 8004a8e:	6013      	str	r3, [r2, #0]
	motLeft = constrain(motLeft, -1000, 1000);
 8004a90:	4b2c      	ldr	r3, [pc, #176]	; (8004b44 <moveStraight+0x2ac>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004a98:	492c      	ldr	r1, [pc, #176]	; (8004b4c <moveStraight+0x2b4>)
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f7fe fc6d 	bl	800337a <constrain>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	4a28      	ldr	r2, [pc, #160]	; (8004b44 <moveStraight+0x2ac>)
 8004aa4:	6013      	str	r3, [r2, #0]

	motRight = MAP(motRight, -1000, 1000, 0, xSpeed * 2);
 8004aa6:	4b28      	ldr	r3, [pc, #160]	; (8004b48 <moveStraight+0x2b0>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4618      	mov	r0, r3
 8004aac:	4b28      	ldr	r3, [pc, #160]	; (8004b50 <moveStraight+0x2b8>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	005b      	lsls	r3, r3, #1
 8004ab2:	9300      	str	r3, [sp, #0]
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004aba:	4924      	ldr	r1, [pc, #144]	; (8004b4c <moveStraight+0x2b4>)
 8004abc:	f7fe fc42 	bl	8003344 <MAP>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	4b20      	ldr	r3, [pc, #128]	; (8004b48 <moveStraight+0x2b0>)
 8004ac6:	601a      	str	r2, [r3, #0]
	motLeft = MAP(motLeft, -1000, 1000, 0, xSpeed * 2);
 8004ac8:	4b1e      	ldr	r3, [pc, #120]	; (8004b44 <moveStraight+0x2ac>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4618      	mov	r0, r3
 8004ace:	4b20      	ldr	r3, [pc, #128]	; (8004b50 <moveStraight+0x2b8>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	005b      	lsls	r3, r3, #1
 8004ad4:	9300      	str	r3, [sp, #0]
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004adc:	491b      	ldr	r1, [pc, #108]	; (8004b4c <moveStraight+0x2b4>)
 8004ade:	f7fe fc31 	bl	8003344 <MAP>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	4b17      	ldr	r3, [pc, #92]	; (8004b44 <moveStraight+0x2ac>)
 8004ae8:	601a      	str	r2, [r3, #0]
	TIM4->CCR4 = motLeft;
 8004aea:	4b16      	ldr	r3, [pc, #88]	; (8004b44 <moveStraight+0x2ac>)
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	4b19      	ldr	r3, [pc, #100]	; (8004b54 <moveStraight+0x2bc>)
 8004af0:	641a      	str	r2, [r3, #64]	; 0x40
	TIM4->CCR3 = motRight;
 8004af2:	4b15      	ldr	r3, [pc, #84]	; (8004b48 <moveStraight+0x2b0>)
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	4b17      	ldr	r3, [pc, #92]	; (8004b54 <moveStraight+0x2bc>)
 8004af8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004afa:	bf00      	nop
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bdb0      	pop	{r4, r5, r7, pc}
 8004b00:	200040a4 	.word	0x200040a4
 8004b04:	40012c00 	.word	0x40012c00
 8004b08:	20000064 	.word	0x20000064
 8004b0c:	40000400 	.word	0x40000400
 8004b10:	20000068 	.word	0x20000068
 8004b14:	200040c8 	.word	0x200040c8
 8004b18:	200040d8 	.word	0x200040d8
 8004b1c:	200040dc 	.word	0x200040dc
 8004b20:	447a0000 	.word	0x447a0000
 8004b24:	200040bc 	.word	0x200040bc
 8004b28:	200040d0 	.word	0x200040d0
 8004b2c:	20004088 	.word	0x20004088
 8004b30:	200040c4 	.word	0x200040c4
 8004b34:	20004084 	.word	0x20004084
 8004b38:	200040c0 	.word	0x200040c0
 8004b3c:	200040b8 	.word	0x200040b8
 8004b40:	2000409c 	.word	0x2000409c
 8004b44:	200040e8 	.word	0x200040e8
 8004b48:	200040ec 	.word	0x200040ec
 8004b4c:	fffffc18 	.word	0xfffffc18
 8004b50:	200040a8 	.word	0x200040a8
 8004b54:	40000800 	.word	0x40000800

08004b58 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004b58:	480c      	ldr	r0, [pc, #48]	; (8004b8c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004b5a:	490d      	ldr	r1, [pc, #52]	; (8004b90 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004b5c:	4a0d      	ldr	r2, [pc, #52]	; (8004b94 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004b5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004b60:	e002      	b.n	8004b68 <LoopCopyDataInit>

08004b62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004b62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004b64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004b66:	3304      	adds	r3, #4

08004b68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004b68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004b6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004b6c:	d3f9      	bcc.n	8004b62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004b6e:	4a0a      	ldr	r2, [pc, #40]	; (8004b98 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004b70:	4c0a      	ldr	r4, [pc, #40]	; (8004b9c <LoopFillZerobss+0x22>)
  movs r3, #0
 8004b72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004b74:	e001      	b.n	8004b7a <LoopFillZerobss>

08004b76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004b76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004b78:	3204      	adds	r2, #4

08004b7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004b7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004b7c:	d3fb      	bcc.n	8004b76 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004b7e:	f7ff fd2b 	bl	80045d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004b82:	f003 f80b 	bl	8007b9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004b86:	f7fc fbeb 	bl	8001360 <main>
  bx lr
 8004b8a:	4770      	bx	lr
  ldr r0, =_sdata
 8004b8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004b90:	200000d8 	.word	0x200000d8
  ldr r2, =_sidata
 8004b94:	08008a98 	.word	0x08008a98
  ldr r2, =_sbss
 8004b98:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 8004b9c:	20004118 	.word	0x20004118

08004ba0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004ba0:	e7fe      	b.n	8004ba0 <ADC1_2_IRQHandler>
	...

08004ba4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004ba8:	4b08      	ldr	r3, [pc, #32]	; (8004bcc <HAL_Init+0x28>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a07      	ldr	r2, [pc, #28]	; (8004bcc <HAL_Init+0x28>)
 8004bae:	f043 0310 	orr.w	r3, r3, #16
 8004bb2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004bb4:	2003      	movs	r0, #3
 8004bb6:	f000 fce5 	bl	8005584 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004bba:	200f      	movs	r0, #15
 8004bbc:	f000 f808 	bl	8004bd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004bc0:	f7ff fae2 	bl	8004188 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	40022000 	.word	0x40022000

08004bd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b082      	sub	sp, #8
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004bd8:	4b12      	ldr	r3, [pc, #72]	; (8004c24 <HAL_InitTick+0x54>)
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	4b12      	ldr	r3, [pc, #72]	; (8004c28 <HAL_InitTick+0x58>)
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	4619      	mov	r1, r3
 8004be2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004be6:	fbb3 f3f1 	udiv	r3, r3, r1
 8004bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f000 fcfd 	bl	80055ee <HAL_SYSTICK_Config>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d001      	beq.n	8004bfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e00e      	b.n	8004c1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2b0f      	cmp	r3, #15
 8004c02:	d80a      	bhi.n	8004c1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004c04:	2200      	movs	r2, #0
 8004c06:	6879      	ldr	r1, [r7, #4]
 8004c08:	f04f 30ff 	mov.w	r0, #4294967295
 8004c0c:	f000 fcc5 	bl	800559a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004c10:	4a06      	ldr	r2, [pc, #24]	; (8004c2c <HAL_InitTick+0x5c>)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004c16:	2300      	movs	r3, #0
 8004c18:	e000      	b.n	8004c1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3708      	adds	r7, #8
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	20000060 	.word	0x20000060
 8004c28:	20000070 	.word	0x20000070
 8004c2c:	2000006c 	.word	0x2000006c

08004c30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004c30:	b480      	push	{r7}
 8004c32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004c34:	4b05      	ldr	r3, [pc, #20]	; (8004c4c <HAL_IncTick+0x1c>)
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	461a      	mov	r2, r3
 8004c3a:	4b05      	ldr	r3, [pc, #20]	; (8004c50 <HAL_IncTick+0x20>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4413      	add	r3, r2
 8004c40:	4a03      	ldr	r2, [pc, #12]	; (8004c50 <HAL_IncTick+0x20>)
 8004c42:	6013      	str	r3, [r2, #0]
}
 8004c44:	bf00      	nop
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bc80      	pop	{r7}
 8004c4a:	4770      	bx	lr
 8004c4c:	20000070 	.word	0x20000070
 8004c50:	200040f0 	.word	0x200040f0

08004c54 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004c54:	b480      	push	{r7}
 8004c56:	af00      	add	r7, sp, #0
  return uwTick;
 8004c58:	4b02      	ldr	r3, [pc, #8]	; (8004c64 <HAL_GetTick+0x10>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bc80      	pop	{r7}
 8004c62:	4770      	bx	lr
 8004c64:	200040f0 	.word	0x200040f0

08004c68 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b086      	sub	sp, #24
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c70:	2300      	movs	r3, #0
 8004c72:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8004c74:	2300      	movs	r3, #0
 8004c76:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d101      	bne.n	8004c8a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e0be      	b.n	8004e08 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d109      	bne.n	8004cac <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f7ff faa0 	bl	80041ec <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f000 faf5 	bl	800529c <ADC_ConversionStop_Disable>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cba:	f003 0310 	and.w	r3, r3, #16
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	f040 8099 	bne.w	8004df6 <HAL_ADC_Init+0x18e>
 8004cc4:	7dfb      	ldrb	r3, [r7, #23]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	f040 8095 	bne.w	8004df6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004cd4:	f023 0302 	bic.w	r3, r3, #2
 8004cd8:	f043 0202 	orr.w	r2, r3, #2
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004ce8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	7b1b      	ldrb	r3, [r3, #12]
 8004cee:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004cf0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004cf2:	68ba      	ldr	r2, [r7, #8]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d00:	d003      	beq.n	8004d0a <HAL_ADC_Init+0xa2>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d102      	bne.n	8004d10 <HAL_ADC_Init+0xa8>
 8004d0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d0e:	e000      	b.n	8004d12 <HAL_ADC_Init+0xaa>
 8004d10:	2300      	movs	r3, #0
 8004d12:	693a      	ldr	r2, [r7, #16]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	7d1b      	ldrb	r3, [r3, #20]
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d119      	bne.n	8004d54 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	7b1b      	ldrb	r3, [r3, #12]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d109      	bne.n	8004d3c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	699b      	ldr	r3, [r3, #24]
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	035a      	lsls	r2, r3, #13
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004d38:	613b      	str	r3, [r7, #16]
 8004d3a:	e00b      	b.n	8004d54 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d40:	f043 0220 	orr.w	r2, r3, #32
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d4c:	f043 0201 	orr.w	r2, r3, #1
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	693a      	ldr	r2, [r7, #16]
 8004d64:	430a      	orrs	r2, r1
 8004d66:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	689a      	ldr	r2, [r3, #8]
 8004d6e:	4b28      	ldr	r3, [pc, #160]	; (8004e10 <HAL_ADC_Init+0x1a8>)
 8004d70:	4013      	ands	r3, r2
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	6812      	ldr	r2, [r2, #0]
 8004d76:	68b9      	ldr	r1, [r7, #8]
 8004d78:	430b      	orrs	r3, r1
 8004d7a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d84:	d003      	beq.n	8004d8e <HAL_ADC_Init+0x126>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d104      	bne.n	8004d98 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	691b      	ldr	r3, [r3, #16]
 8004d92:	3b01      	subs	r3, #1
 8004d94:	051b      	lsls	r3, r3, #20
 8004d96:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d9e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	68fa      	ldr	r2, [r7, #12]
 8004da8:	430a      	orrs	r2, r1
 8004daa:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	689a      	ldr	r2, [r3, #8]
 8004db2:	4b18      	ldr	r3, [pc, #96]	; (8004e14 <HAL_ADC_Init+0x1ac>)
 8004db4:	4013      	ands	r3, r2
 8004db6:	68ba      	ldr	r2, [r7, #8]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d10b      	bne.n	8004dd4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc6:	f023 0303 	bic.w	r3, r3, #3
 8004dca:	f043 0201 	orr.w	r2, r3, #1
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004dd2:	e018      	b.n	8004e06 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd8:	f023 0312 	bic.w	r3, r3, #18
 8004ddc:	f043 0210 	orr.w	r2, r3, #16
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de8:	f043 0201 	orr.w	r2, r3, #1
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004df4:	e007      	b.n	8004e06 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dfa:	f043 0210 	orr.w	r2, r3, #16
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004e06:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3718      	adds	r7, #24
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	ffe1f7fd 	.word	0xffe1f7fd
 8004e14:	ff1f0efe 	.word	0xff1f0efe

08004e18 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b086      	sub	sp, #24
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	60b9      	str	r1, [r7, #8]
 8004e22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e24:	2300      	movs	r3, #0
 8004e26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a64      	ldr	r2, [pc, #400]	; (8004fc0 <HAL_ADC_Start_DMA+0x1a8>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d004      	beq.n	8004e3c <HAL_ADC_Start_DMA+0x24>
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a63      	ldr	r2, [pc, #396]	; (8004fc4 <HAL_ADC_Start_DMA+0x1ac>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d106      	bne.n	8004e4a <HAL_ADC_Start_DMA+0x32>
 8004e3c:	4b60      	ldr	r3, [pc, #384]	; (8004fc0 <HAL_ADC_Start_DMA+0x1a8>)
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	f040 80b3 	bne.w	8004fb0 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d101      	bne.n	8004e58 <HAL_ADC_Start_DMA+0x40>
 8004e54:	2302      	movs	r3, #2
 8004e56:	e0ae      	b.n	8004fb6 <HAL_ADC_Start_DMA+0x19e>
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004e60:	68f8      	ldr	r0, [r7, #12]
 8004e62:	f000 f9c1 	bl	80051e8 <ADC_Enable>
 8004e66:	4603      	mov	r3, r0
 8004e68:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004e6a:	7dfb      	ldrb	r3, [r7, #23]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	f040 809a 	bne.w	8004fa6 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e76:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004e7a:	f023 0301 	bic.w	r3, r3, #1
 8004e7e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a4e      	ldr	r2, [pc, #312]	; (8004fc4 <HAL_ADC_Start_DMA+0x1ac>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d105      	bne.n	8004e9c <HAL_ADC_Start_DMA+0x84>
 8004e90:	4b4b      	ldr	r3, [pc, #300]	; (8004fc0 <HAL_ADC_Start_DMA+0x1a8>)
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d115      	bne.n	8004ec8 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d026      	beq.n	8004f04 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004ebe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004ec6:	e01d      	b.n	8004f04 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ecc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a39      	ldr	r2, [pc, #228]	; (8004fc0 <HAL_ADC_Start_DMA+0x1a8>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d004      	beq.n	8004ee8 <HAL_ADC_Start_DMA+0xd0>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a38      	ldr	r2, [pc, #224]	; (8004fc4 <HAL_ADC_Start_DMA+0x1ac>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d10d      	bne.n	8004f04 <HAL_ADC_Start_DMA+0xec>
 8004ee8:	4b35      	ldr	r3, [pc, #212]	; (8004fc0 <HAL_ADC_Start_DMA+0x1a8>)
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d007      	beq.n	8004f04 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004efc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d006      	beq.n	8004f1e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f14:	f023 0206 	bic.w	r2, r3, #6
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	62da      	str	r2, [r3, #44]	; 0x2c
 8004f1c:	e002      	b.n	8004f24 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2200      	movs	r2, #0
 8004f22:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2200      	movs	r2, #0
 8004f28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6a1b      	ldr	r3, [r3, #32]
 8004f30:	4a25      	ldr	r2, [pc, #148]	; (8004fc8 <HAL_ADC_Start_DMA+0x1b0>)
 8004f32:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6a1b      	ldr	r3, [r3, #32]
 8004f38:	4a24      	ldr	r2, [pc, #144]	; (8004fcc <HAL_ADC_Start_DMA+0x1b4>)
 8004f3a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6a1b      	ldr	r3, [r3, #32]
 8004f40:	4a23      	ldr	r2, [pc, #140]	; (8004fd0 <HAL_ADC_Start_DMA+0x1b8>)
 8004f42:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f06f 0202 	mvn.w	r2, #2
 8004f4c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	689a      	ldr	r2, [r3, #8]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f5c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	6a18      	ldr	r0, [r3, #32]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	334c      	adds	r3, #76	; 0x4c
 8004f68:	4619      	mov	r1, r3
 8004f6a:	68ba      	ldr	r2, [r7, #8]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f000 fba5 	bl	80056bc <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004f7c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004f80:	d108      	bne.n	8004f94 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	689a      	ldr	r2, [r3, #8]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8004f90:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8004f92:	e00f      	b.n	8004fb4 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	689a      	ldr	r2, [r3, #8]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004fa2:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8004fa4:	e006      	b.n	8004fb4 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8004fae:	e001      	b.n	8004fb4 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004fb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3718      	adds	r7, #24
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	40012400 	.word	0x40012400
 8004fc4:	40012800 	.word	0x40012800
 8004fc8:	0800531f 	.word	0x0800531f
 8004fcc:	0800539b 	.word	0x0800539b
 8004fd0:	080053b7 	.word	0x080053b7

08004fd4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b083      	sub	sp, #12
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004fdc:	bf00      	nop
 8004fde:	370c      	adds	r7, #12
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bc80      	pop	{r7}
 8004fe4:	4770      	bx	lr

08004fe6 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004fe6:	b480      	push	{r7}
 8004fe8:	b083      	sub	sp, #12
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004fee:	bf00      	nop
 8004ff0:	370c      	adds	r7, #12
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bc80      	pop	{r7}
 8004ff6:	4770      	bx	lr

08004ff8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8004ff8:	b480      	push	{r7}
 8004ffa:	b085      	sub	sp, #20
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005002:	2300      	movs	r3, #0
 8005004:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8005006:	2300      	movs	r3, #0
 8005008:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005010:	2b01      	cmp	r3, #1
 8005012:	d101      	bne.n	8005018 <HAL_ADC_ConfigChannel+0x20>
 8005014:	2302      	movs	r3, #2
 8005016:	e0dc      	b.n	80051d2 <HAL_ADC_ConfigChannel+0x1da>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	2b06      	cmp	r3, #6
 8005026:	d81c      	bhi.n	8005062 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	685a      	ldr	r2, [r3, #4]
 8005032:	4613      	mov	r3, r2
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	4413      	add	r3, r2
 8005038:	3b05      	subs	r3, #5
 800503a:	221f      	movs	r2, #31
 800503c:	fa02 f303 	lsl.w	r3, r2, r3
 8005040:	43db      	mvns	r3, r3
 8005042:	4019      	ands	r1, r3
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	6818      	ldr	r0, [r3, #0]
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	685a      	ldr	r2, [r3, #4]
 800504c:	4613      	mov	r3, r2
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	4413      	add	r3, r2
 8005052:	3b05      	subs	r3, #5
 8005054:	fa00 f203 	lsl.w	r2, r0, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	430a      	orrs	r2, r1
 800505e:	635a      	str	r2, [r3, #52]	; 0x34
 8005060:	e03c      	b.n	80050dc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	2b0c      	cmp	r3, #12
 8005068:	d81c      	bhi.n	80050a4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	685a      	ldr	r2, [r3, #4]
 8005074:	4613      	mov	r3, r2
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	4413      	add	r3, r2
 800507a:	3b23      	subs	r3, #35	; 0x23
 800507c:	221f      	movs	r2, #31
 800507e:	fa02 f303 	lsl.w	r3, r2, r3
 8005082:	43db      	mvns	r3, r3
 8005084:	4019      	ands	r1, r3
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	6818      	ldr	r0, [r3, #0]
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	685a      	ldr	r2, [r3, #4]
 800508e:	4613      	mov	r3, r2
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	4413      	add	r3, r2
 8005094:	3b23      	subs	r3, #35	; 0x23
 8005096:	fa00 f203 	lsl.w	r2, r0, r3
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	430a      	orrs	r2, r1
 80050a0:	631a      	str	r2, [r3, #48]	; 0x30
 80050a2:	e01b      	b.n	80050dc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	685a      	ldr	r2, [r3, #4]
 80050ae:	4613      	mov	r3, r2
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	4413      	add	r3, r2
 80050b4:	3b41      	subs	r3, #65	; 0x41
 80050b6:	221f      	movs	r2, #31
 80050b8:	fa02 f303 	lsl.w	r3, r2, r3
 80050bc:	43db      	mvns	r3, r3
 80050be:	4019      	ands	r1, r3
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	6818      	ldr	r0, [r3, #0]
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	685a      	ldr	r2, [r3, #4]
 80050c8:	4613      	mov	r3, r2
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	4413      	add	r3, r2
 80050ce:	3b41      	subs	r3, #65	; 0x41
 80050d0:	fa00 f203 	lsl.w	r2, r0, r3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	430a      	orrs	r2, r1
 80050da:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2b09      	cmp	r3, #9
 80050e2:	d91c      	bls.n	800511e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	68d9      	ldr	r1, [r3, #12]
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	4613      	mov	r3, r2
 80050f0:	005b      	lsls	r3, r3, #1
 80050f2:	4413      	add	r3, r2
 80050f4:	3b1e      	subs	r3, #30
 80050f6:	2207      	movs	r2, #7
 80050f8:	fa02 f303 	lsl.w	r3, r2, r3
 80050fc:	43db      	mvns	r3, r3
 80050fe:	4019      	ands	r1, r3
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	6898      	ldr	r0, [r3, #8]
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	4613      	mov	r3, r2
 800510a:	005b      	lsls	r3, r3, #1
 800510c:	4413      	add	r3, r2
 800510e:	3b1e      	subs	r3, #30
 8005110:	fa00 f203 	lsl.w	r2, r0, r3
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	430a      	orrs	r2, r1
 800511a:	60da      	str	r2, [r3, #12]
 800511c:	e019      	b.n	8005152 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	6919      	ldr	r1, [r3, #16]
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	4613      	mov	r3, r2
 800512a:	005b      	lsls	r3, r3, #1
 800512c:	4413      	add	r3, r2
 800512e:	2207      	movs	r2, #7
 8005130:	fa02 f303 	lsl.w	r3, r2, r3
 8005134:	43db      	mvns	r3, r3
 8005136:	4019      	ands	r1, r3
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	6898      	ldr	r0, [r3, #8]
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	4613      	mov	r3, r2
 8005142:	005b      	lsls	r3, r3, #1
 8005144:	4413      	add	r3, r2
 8005146:	fa00 f203 	lsl.w	r2, r0, r3
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	430a      	orrs	r2, r1
 8005150:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	2b10      	cmp	r3, #16
 8005158:	d003      	beq.n	8005162 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800515e:	2b11      	cmp	r3, #17
 8005160:	d132      	bne.n	80051c8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a1d      	ldr	r2, [pc, #116]	; (80051dc <HAL_ADC_ConfigChannel+0x1e4>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d125      	bne.n	80051b8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005176:	2b00      	cmp	r3, #0
 8005178:	d126      	bne.n	80051c8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	689a      	ldr	r2, [r3, #8]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005188:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	2b10      	cmp	r3, #16
 8005190:	d11a      	bne.n	80051c8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005192:	4b13      	ldr	r3, [pc, #76]	; (80051e0 <HAL_ADC_ConfigChannel+0x1e8>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a13      	ldr	r2, [pc, #76]	; (80051e4 <HAL_ADC_ConfigChannel+0x1ec>)
 8005198:	fba2 2303 	umull	r2, r3, r2, r3
 800519c:	0c9a      	lsrs	r2, r3, #18
 800519e:	4613      	mov	r3, r2
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	4413      	add	r3, r2
 80051a4:	005b      	lsls	r3, r3, #1
 80051a6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80051a8:	e002      	b.n	80051b0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	3b01      	subs	r3, #1
 80051ae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d1f9      	bne.n	80051aa <HAL_ADC_ConfigChannel+0x1b2>
 80051b6:	e007      	b.n	80051c8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051bc:	f043 0220 	orr.w	r2, r3, #32
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80051d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3714      	adds	r7, #20
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bc80      	pop	{r7}
 80051da:	4770      	bx	lr
 80051dc:	40012400 	.word	0x40012400
 80051e0:	20000060 	.word	0x20000060
 80051e4:	431bde83 	.word	0x431bde83

080051e8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b084      	sub	sp, #16
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80051f0:	2300      	movs	r3, #0
 80051f2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80051f4:	2300      	movs	r3, #0
 80051f6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	f003 0301 	and.w	r3, r3, #1
 8005202:	2b01      	cmp	r3, #1
 8005204:	d040      	beq.n	8005288 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	689a      	ldr	r2, [r3, #8]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f042 0201 	orr.w	r2, r2, #1
 8005214:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005216:	4b1f      	ldr	r3, [pc, #124]	; (8005294 <ADC_Enable+0xac>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a1f      	ldr	r2, [pc, #124]	; (8005298 <ADC_Enable+0xb0>)
 800521c:	fba2 2303 	umull	r2, r3, r2, r3
 8005220:	0c9b      	lsrs	r3, r3, #18
 8005222:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8005224:	e002      	b.n	800522c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	3b01      	subs	r3, #1
 800522a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d1f9      	bne.n	8005226 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005232:	f7ff fd0f 	bl	8004c54 <HAL_GetTick>
 8005236:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005238:	e01f      	b.n	800527a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800523a:	f7ff fd0b 	bl	8004c54 <HAL_GetTick>
 800523e:	4602      	mov	r2, r0
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	1ad3      	subs	r3, r2, r3
 8005244:	2b02      	cmp	r3, #2
 8005246:	d918      	bls.n	800527a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	f003 0301 	and.w	r3, r3, #1
 8005252:	2b01      	cmp	r3, #1
 8005254:	d011      	beq.n	800527a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800525a:	f043 0210 	orr.w	r2, r3, #16
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005266:	f043 0201 	orr.w	r2, r3, #1
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e007      	b.n	800528a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	f003 0301 	and.w	r3, r3, #1
 8005284:	2b01      	cmp	r3, #1
 8005286:	d1d8      	bne.n	800523a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8005288:	2300      	movs	r3, #0
}
 800528a:	4618      	mov	r0, r3
 800528c:	3710      	adds	r7, #16
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	20000060 	.word	0x20000060
 8005298:	431bde83 	.word	0x431bde83

0800529c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80052a4:	2300      	movs	r3, #0
 80052a6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	f003 0301 	and.w	r3, r3, #1
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d12e      	bne.n	8005314 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	689a      	ldr	r2, [r3, #8]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f022 0201 	bic.w	r2, r2, #1
 80052c4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80052c6:	f7ff fcc5 	bl	8004c54 <HAL_GetTick>
 80052ca:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80052cc:	e01b      	b.n	8005306 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80052ce:	f7ff fcc1 	bl	8004c54 <HAL_GetTick>
 80052d2:	4602      	mov	r2, r0
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	1ad3      	subs	r3, r2, r3
 80052d8:	2b02      	cmp	r3, #2
 80052da:	d914      	bls.n	8005306 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	f003 0301 	and.w	r3, r3, #1
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d10d      	bne.n	8005306 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ee:	f043 0210 	orr.w	r2, r3, #16
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052fa:	f043 0201 	orr.w	r2, r3, #1
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e007      	b.n	8005316 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	f003 0301 	and.w	r3, r3, #1
 8005310:	2b01      	cmp	r3, #1
 8005312:	d0dc      	beq.n	80052ce <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8005314:	2300      	movs	r3, #0
}
 8005316:	4618      	mov	r0, r3
 8005318:	3710      	adds	r7, #16
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}

0800531e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800531e:	b580      	push	{r7, lr}
 8005320:	b084      	sub	sp, #16
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005330:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005334:	2b00      	cmp	r3, #0
 8005336:	d127      	bne.n	8005388 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800533c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800534e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8005352:	d115      	bne.n	8005380 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005358:	2b00      	cmp	r3, #0
 800535a:	d111      	bne.n	8005380 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005360:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800536c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005370:	2b00      	cmp	r3, #0
 8005372:	d105      	bne.n	8005380 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005378:	f043 0201 	orr.w	r2, r3, #1
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005380:	68f8      	ldr	r0, [r7, #12]
 8005382:	f7fd ff7b 	bl	800327c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8005386:	e004      	b.n	8005392 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6a1b      	ldr	r3, [r3, #32]
 800538c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	4798      	blx	r3
}
 8005392:	bf00      	nop
 8005394:	3710      	adds	r7, #16
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}

0800539a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800539a:	b580      	push	{r7, lr}
 800539c:	b084      	sub	sp, #16
 800539e:	af00      	add	r7, sp, #0
 80053a0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80053a8:	68f8      	ldr	r0, [r7, #12]
 80053aa:	f7ff fe13 	bl	8004fd4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80053ae:	bf00      	nop
 80053b0:	3710      	adds	r7, #16
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}

080053b6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80053b6:	b580      	push	{r7, lr}
 80053b8:	b084      	sub	sp, #16
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053c8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d4:	f043 0204 	orr.w	r2, r3, #4
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80053dc:	68f8      	ldr	r0, [r7, #12]
 80053de:	f7ff fe02 	bl	8004fe6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80053e2:	bf00      	nop
 80053e4:	3710      	adds	r7, #16
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
	...

080053ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b085      	sub	sp, #20
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f003 0307 	and.w	r3, r3, #7
 80053fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80053fc:	4b0c      	ldr	r3, [pc, #48]	; (8005430 <__NVIC_SetPriorityGrouping+0x44>)
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005402:	68ba      	ldr	r2, [r7, #8]
 8005404:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005408:	4013      	ands	r3, r2
 800540a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005414:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005418:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800541c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800541e:	4a04      	ldr	r2, [pc, #16]	; (8005430 <__NVIC_SetPriorityGrouping+0x44>)
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	60d3      	str	r3, [r2, #12]
}
 8005424:	bf00      	nop
 8005426:	3714      	adds	r7, #20
 8005428:	46bd      	mov	sp, r7
 800542a:	bc80      	pop	{r7}
 800542c:	4770      	bx	lr
 800542e:	bf00      	nop
 8005430:	e000ed00 	.word	0xe000ed00

08005434 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005434:	b480      	push	{r7}
 8005436:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005438:	4b04      	ldr	r3, [pc, #16]	; (800544c <__NVIC_GetPriorityGrouping+0x18>)
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	0a1b      	lsrs	r3, r3, #8
 800543e:	f003 0307 	and.w	r3, r3, #7
}
 8005442:	4618      	mov	r0, r3
 8005444:	46bd      	mov	sp, r7
 8005446:	bc80      	pop	{r7}
 8005448:	4770      	bx	lr
 800544a:	bf00      	nop
 800544c:	e000ed00 	.word	0xe000ed00

08005450 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
 8005456:	4603      	mov	r3, r0
 8005458:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800545a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800545e:	2b00      	cmp	r3, #0
 8005460:	db0b      	blt.n	800547a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005462:	79fb      	ldrb	r3, [r7, #7]
 8005464:	f003 021f 	and.w	r2, r3, #31
 8005468:	4906      	ldr	r1, [pc, #24]	; (8005484 <__NVIC_EnableIRQ+0x34>)
 800546a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800546e:	095b      	lsrs	r3, r3, #5
 8005470:	2001      	movs	r0, #1
 8005472:	fa00 f202 	lsl.w	r2, r0, r2
 8005476:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800547a:	bf00      	nop
 800547c:	370c      	adds	r7, #12
 800547e:	46bd      	mov	sp, r7
 8005480:	bc80      	pop	{r7}
 8005482:	4770      	bx	lr
 8005484:	e000e100 	.word	0xe000e100

08005488 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	4603      	mov	r3, r0
 8005490:	6039      	str	r1, [r7, #0]
 8005492:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005498:	2b00      	cmp	r3, #0
 800549a:	db0a      	blt.n	80054b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	b2da      	uxtb	r2, r3
 80054a0:	490c      	ldr	r1, [pc, #48]	; (80054d4 <__NVIC_SetPriority+0x4c>)
 80054a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054a6:	0112      	lsls	r2, r2, #4
 80054a8:	b2d2      	uxtb	r2, r2
 80054aa:	440b      	add	r3, r1
 80054ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80054b0:	e00a      	b.n	80054c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	b2da      	uxtb	r2, r3
 80054b6:	4908      	ldr	r1, [pc, #32]	; (80054d8 <__NVIC_SetPriority+0x50>)
 80054b8:	79fb      	ldrb	r3, [r7, #7]
 80054ba:	f003 030f 	and.w	r3, r3, #15
 80054be:	3b04      	subs	r3, #4
 80054c0:	0112      	lsls	r2, r2, #4
 80054c2:	b2d2      	uxtb	r2, r2
 80054c4:	440b      	add	r3, r1
 80054c6:	761a      	strb	r2, [r3, #24]
}
 80054c8:	bf00      	nop
 80054ca:	370c      	adds	r7, #12
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bc80      	pop	{r7}
 80054d0:	4770      	bx	lr
 80054d2:	bf00      	nop
 80054d4:	e000e100 	.word	0xe000e100
 80054d8:	e000ed00 	.word	0xe000ed00

080054dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80054dc:	b480      	push	{r7}
 80054de:	b089      	sub	sp, #36	; 0x24
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	60f8      	str	r0, [r7, #12]
 80054e4:	60b9      	str	r1, [r7, #8]
 80054e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f003 0307 	and.w	r3, r3, #7
 80054ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80054f0:	69fb      	ldr	r3, [r7, #28]
 80054f2:	f1c3 0307 	rsb	r3, r3, #7
 80054f6:	2b04      	cmp	r3, #4
 80054f8:	bf28      	it	cs
 80054fa:	2304      	movcs	r3, #4
 80054fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	3304      	adds	r3, #4
 8005502:	2b06      	cmp	r3, #6
 8005504:	d902      	bls.n	800550c <NVIC_EncodePriority+0x30>
 8005506:	69fb      	ldr	r3, [r7, #28]
 8005508:	3b03      	subs	r3, #3
 800550a:	e000      	b.n	800550e <NVIC_EncodePriority+0x32>
 800550c:	2300      	movs	r3, #0
 800550e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005510:	f04f 32ff 	mov.w	r2, #4294967295
 8005514:	69bb      	ldr	r3, [r7, #24]
 8005516:	fa02 f303 	lsl.w	r3, r2, r3
 800551a:	43da      	mvns	r2, r3
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	401a      	ands	r2, r3
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005524:	f04f 31ff 	mov.w	r1, #4294967295
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	fa01 f303 	lsl.w	r3, r1, r3
 800552e:	43d9      	mvns	r1, r3
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005534:	4313      	orrs	r3, r2
         );
}
 8005536:	4618      	mov	r0, r3
 8005538:	3724      	adds	r7, #36	; 0x24
 800553a:	46bd      	mov	sp, r7
 800553c:	bc80      	pop	{r7}
 800553e:	4770      	bx	lr

08005540 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b082      	sub	sp, #8
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	3b01      	subs	r3, #1
 800554c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005550:	d301      	bcc.n	8005556 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005552:	2301      	movs	r3, #1
 8005554:	e00f      	b.n	8005576 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005556:	4a0a      	ldr	r2, [pc, #40]	; (8005580 <SysTick_Config+0x40>)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	3b01      	subs	r3, #1
 800555c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800555e:	210f      	movs	r1, #15
 8005560:	f04f 30ff 	mov.w	r0, #4294967295
 8005564:	f7ff ff90 	bl	8005488 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005568:	4b05      	ldr	r3, [pc, #20]	; (8005580 <SysTick_Config+0x40>)
 800556a:	2200      	movs	r2, #0
 800556c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800556e:	4b04      	ldr	r3, [pc, #16]	; (8005580 <SysTick_Config+0x40>)
 8005570:	2207      	movs	r2, #7
 8005572:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	3708      	adds	r7, #8
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop
 8005580:	e000e010 	.word	0xe000e010

08005584 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b082      	sub	sp, #8
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f7ff ff2d 	bl	80053ec <__NVIC_SetPriorityGrouping>
}
 8005592:	bf00      	nop
 8005594:	3708      	adds	r7, #8
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}

0800559a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800559a:	b580      	push	{r7, lr}
 800559c:	b086      	sub	sp, #24
 800559e:	af00      	add	r7, sp, #0
 80055a0:	4603      	mov	r3, r0
 80055a2:	60b9      	str	r1, [r7, #8]
 80055a4:	607a      	str	r2, [r7, #4]
 80055a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80055a8:	2300      	movs	r3, #0
 80055aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80055ac:	f7ff ff42 	bl	8005434 <__NVIC_GetPriorityGrouping>
 80055b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	68b9      	ldr	r1, [r7, #8]
 80055b6:	6978      	ldr	r0, [r7, #20]
 80055b8:	f7ff ff90 	bl	80054dc <NVIC_EncodePriority>
 80055bc:	4602      	mov	r2, r0
 80055be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055c2:	4611      	mov	r1, r2
 80055c4:	4618      	mov	r0, r3
 80055c6:	f7ff ff5f 	bl	8005488 <__NVIC_SetPriority>
}
 80055ca:	bf00      	nop
 80055cc:	3718      	adds	r7, #24
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}

080055d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055d2:	b580      	push	{r7, lr}
 80055d4:	b082      	sub	sp, #8
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	4603      	mov	r3, r0
 80055da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80055dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055e0:	4618      	mov	r0, r3
 80055e2:	f7ff ff35 	bl	8005450 <__NVIC_EnableIRQ>
}
 80055e6:	bf00      	nop
 80055e8:	3708      	adds	r7, #8
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}

080055ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80055ee:	b580      	push	{r7, lr}
 80055f0:	b082      	sub	sp, #8
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f7ff ffa2 	bl	8005540 <SysTick_Config>
 80055fc:	4603      	mov	r3, r0
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3708      	adds	r7, #8
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
	...

08005608 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005608:	b480      	push	{r7}
 800560a:	b085      	sub	sp, #20
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005610:	2300      	movs	r3, #0
 8005612:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d101      	bne.n	800561e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e043      	b.n	80056a6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	461a      	mov	r2, r3
 8005624:	4b22      	ldr	r3, [pc, #136]	; (80056b0 <HAL_DMA_Init+0xa8>)
 8005626:	4413      	add	r3, r2
 8005628:	4a22      	ldr	r2, [pc, #136]	; (80056b4 <HAL_DMA_Init+0xac>)
 800562a:	fba2 2303 	umull	r2, r3, r2, r3
 800562e:	091b      	lsrs	r3, r3, #4
 8005630:	009a      	lsls	r2, r3, #2
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4a1f      	ldr	r2, [pc, #124]	; (80056b8 <HAL_DMA_Init+0xb0>)
 800563a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2202      	movs	r2, #2
 8005640:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005652:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005656:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8005660:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800566c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	695b      	ldr	r3, [r3, #20]
 8005672:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005678:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	69db      	ldr	r3, [r3, #28]
 800567e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	4313      	orrs	r3, r2
 8005684:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80056a4:	2300      	movs	r3, #0
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3714      	adds	r7, #20
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bc80      	pop	{r7}
 80056ae:	4770      	bx	lr
 80056b0:	bffdfff8 	.word	0xbffdfff8
 80056b4:	cccccccd 	.word	0xcccccccd
 80056b8:	40020000 	.word	0x40020000

080056bc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b086      	sub	sp, #24
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	60b9      	str	r1, [r7, #8]
 80056c6:	607a      	str	r2, [r7, #4]
 80056c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056ca:	2300      	movs	r3, #0
 80056cc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d101      	bne.n	80056dc <HAL_DMA_Start_IT+0x20>
 80056d8:	2302      	movs	r3, #2
 80056da:	e04a      	b.n	8005772 <HAL_DMA_Start_IT+0xb6>
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d13a      	bne.n	8005764 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2202      	movs	r2, #2
 80056f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2200      	movs	r2, #0
 80056fa:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f022 0201 	bic.w	r2, r2, #1
 800570a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	68b9      	ldr	r1, [r7, #8]
 8005712:	68f8      	ldr	r0, [r7, #12]
 8005714:	f000 f938 	bl	8005988 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800571c:	2b00      	cmp	r3, #0
 800571e:	d008      	beq.n	8005732 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f042 020e 	orr.w	r2, r2, #14
 800572e:	601a      	str	r2, [r3, #0]
 8005730:	e00f      	b.n	8005752 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f022 0204 	bic.w	r2, r2, #4
 8005740:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f042 020a 	orr.w	r2, r2, #10
 8005750:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f042 0201 	orr.w	r2, r2, #1
 8005760:	601a      	str	r2, [r3, #0]
 8005762:	e005      	b.n	8005770 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2200      	movs	r2, #0
 8005768:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800576c:	2302      	movs	r3, #2
 800576e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8005770:	7dfb      	ldrb	r3, [r7, #23]
}
 8005772:	4618      	mov	r0, r3
 8005774:	3718      	adds	r7, #24
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
	...

0800577c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005798:	2204      	movs	r2, #4
 800579a:	409a      	lsls	r2, r3
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	4013      	ands	r3, r2
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d04f      	beq.n	8005844 <HAL_DMA_IRQHandler+0xc8>
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	f003 0304 	and.w	r3, r3, #4
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d04a      	beq.n	8005844 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f003 0320 	and.w	r3, r3, #32
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d107      	bne.n	80057cc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f022 0204 	bic.w	r2, r2, #4
 80057ca:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a66      	ldr	r2, [pc, #408]	; (800596c <HAL_DMA_IRQHandler+0x1f0>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d029      	beq.n	800582a <HAL_DMA_IRQHandler+0xae>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a65      	ldr	r2, [pc, #404]	; (8005970 <HAL_DMA_IRQHandler+0x1f4>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d022      	beq.n	8005826 <HAL_DMA_IRQHandler+0xaa>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a63      	ldr	r2, [pc, #396]	; (8005974 <HAL_DMA_IRQHandler+0x1f8>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d01a      	beq.n	8005820 <HAL_DMA_IRQHandler+0xa4>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a62      	ldr	r2, [pc, #392]	; (8005978 <HAL_DMA_IRQHandler+0x1fc>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d012      	beq.n	800581a <HAL_DMA_IRQHandler+0x9e>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a60      	ldr	r2, [pc, #384]	; (800597c <HAL_DMA_IRQHandler+0x200>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d00a      	beq.n	8005814 <HAL_DMA_IRQHandler+0x98>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a5f      	ldr	r2, [pc, #380]	; (8005980 <HAL_DMA_IRQHandler+0x204>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d102      	bne.n	800580e <HAL_DMA_IRQHandler+0x92>
 8005808:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800580c:	e00e      	b.n	800582c <HAL_DMA_IRQHandler+0xb0>
 800580e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005812:	e00b      	b.n	800582c <HAL_DMA_IRQHandler+0xb0>
 8005814:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005818:	e008      	b.n	800582c <HAL_DMA_IRQHandler+0xb0>
 800581a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800581e:	e005      	b.n	800582c <HAL_DMA_IRQHandler+0xb0>
 8005820:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005824:	e002      	b.n	800582c <HAL_DMA_IRQHandler+0xb0>
 8005826:	2340      	movs	r3, #64	; 0x40
 8005828:	e000      	b.n	800582c <HAL_DMA_IRQHandler+0xb0>
 800582a:	2304      	movs	r3, #4
 800582c:	4a55      	ldr	r2, [pc, #340]	; (8005984 <HAL_DMA_IRQHandler+0x208>)
 800582e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005834:	2b00      	cmp	r3, #0
 8005836:	f000 8094 	beq.w	8005962 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8005842:	e08e      	b.n	8005962 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005848:	2202      	movs	r2, #2
 800584a:	409a      	lsls	r2, r3
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	4013      	ands	r3, r2
 8005850:	2b00      	cmp	r3, #0
 8005852:	d056      	beq.n	8005902 <HAL_DMA_IRQHandler+0x186>
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	f003 0302 	and.w	r3, r3, #2
 800585a:	2b00      	cmp	r3, #0
 800585c:	d051      	beq.n	8005902 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f003 0320 	and.w	r3, r3, #32
 8005868:	2b00      	cmp	r3, #0
 800586a:	d10b      	bne.n	8005884 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f022 020a 	bic.w	r2, r2, #10
 800587a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a38      	ldr	r2, [pc, #224]	; (800596c <HAL_DMA_IRQHandler+0x1f0>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d029      	beq.n	80058e2 <HAL_DMA_IRQHandler+0x166>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a37      	ldr	r2, [pc, #220]	; (8005970 <HAL_DMA_IRQHandler+0x1f4>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d022      	beq.n	80058de <HAL_DMA_IRQHandler+0x162>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a35      	ldr	r2, [pc, #212]	; (8005974 <HAL_DMA_IRQHandler+0x1f8>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d01a      	beq.n	80058d8 <HAL_DMA_IRQHandler+0x15c>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a34      	ldr	r2, [pc, #208]	; (8005978 <HAL_DMA_IRQHandler+0x1fc>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d012      	beq.n	80058d2 <HAL_DMA_IRQHandler+0x156>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a32      	ldr	r2, [pc, #200]	; (800597c <HAL_DMA_IRQHandler+0x200>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d00a      	beq.n	80058cc <HAL_DMA_IRQHandler+0x150>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a31      	ldr	r2, [pc, #196]	; (8005980 <HAL_DMA_IRQHandler+0x204>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d102      	bne.n	80058c6 <HAL_DMA_IRQHandler+0x14a>
 80058c0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80058c4:	e00e      	b.n	80058e4 <HAL_DMA_IRQHandler+0x168>
 80058c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80058ca:	e00b      	b.n	80058e4 <HAL_DMA_IRQHandler+0x168>
 80058cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80058d0:	e008      	b.n	80058e4 <HAL_DMA_IRQHandler+0x168>
 80058d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80058d6:	e005      	b.n	80058e4 <HAL_DMA_IRQHandler+0x168>
 80058d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80058dc:	e002      	b.n	80058e4 <HAL_DMA_IRQHandler+0x168>
 80058de:	2320      	movs	r3, #32
 80058e0:	e000      	b.n	80058e4 <HAL_DMA_IRQHandler+0x168>
 80058e2:	2302      	movs	r3, #2
 80058e4:	4a27      	ldr	r2, [pc, #156]	; (8005984 <HAL_DMA_IRQHandler+0x208>)
 80058e6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d034      	beq.n	8005962 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005900:	e02f      	b.n	8005962 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005906:	2208      	movs	r2, #8
 8005908:	409a      	lsls	r2, r3
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	4013      	ands	r3, r2
 800590e:	2b00      	cmp	r3, #0
 8005910:	d028      	beq.n	8005964 <HAL_DMA_IRQHandler+0x1e8>
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	f003 0308 	and.w	r3, r3, #8
 8005918:	2b00      	cmp	r3, #0
 800591a:	d023      	beq.n	8005964 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f022 020e 	bic.w	r2, r2, #14
 800592a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005934:	2101      	movs	r1, #1
 8005936:	fa01 f202 	lsl.w	r2, r1, r2
 800593a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2201      	movs	r2, #1
 8005940:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2201      	movs	r2, #1
 8005946:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005956:	2b00      	cmp	r3, #0
 8005958:	d004      	beq.n	8005964 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	4798      	blx	r3
    }
  }
  return;
 8005962:	bf00      	nop
 8005964:	bf00      	nop
}
 8005966:	3710      	adds	r7, #16
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}
 800596c:	40020008 	.word	0x40020008
 8005970:	4002001c 	.word	0x4002001c
 8005974:	40020030 	.word	0x40020030
 8005978:	40020044 	.word	0x40020044
 800597c:	40020058 	.word	0x40020058
 8005980:	4002006c 	.word	0x4002006c
 8005984:	40020000 	.word	0x40020000

08005988 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005988:	b480      	push	{r7}
 800598a:	b085      	sub	sp, #20
 800598c:	af00      	add	r7, sp, #0
 800598e:	60f8      	str	r0, [r7, #12]
 8005990:	60b9      	str	r1, [r7, #8]
 8005992:	607a      	str	r2, [r7, #4]
 8005994:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800599e:	2101      	movs	r1, #1
 80059a0:	fa01 f202 	lsl.w	r2, r1, r2
 80059a4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	683a      	ldr	r2, [r7, #0]
 80059ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	2b10      	cmp	r3, #16
 80059b4:	d108      	bne.n	80059c8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	68ba      	ldr	r2, [r7, #8]
 80059c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80059c6:	e007      	b.n	80059d8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	68ba      	ldr	r2, [r7, #8]
 80059ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	60da      	str	r2, [r3, #12]
}
 80059d8:	bf00      	nop
 80059da:	3714      	adds	r7, #20
 80059dc:	46bd      	mov	sp, r7
 80059de:	bc80      	pop	{r7}
 80059e0:	4770      	bx	lr
	...

080059e4 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80059e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059e6:	b087      	sub	sp, #28
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	60b9      	str	r1, [r7, #8]
 80059ee:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 80059f6:	2300      	movs	r3, #0
 80059f8:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 80059fa:	2300      	movs	r3, #0
 80059fc:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80059fe:	4b2f      	ldr	r3, [pc, #188]	; (8005abc <HAL_FLASH_Program+0xd8>)
 8005a00:	7e1b      	ldrb	r3, [r3, #24]
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d101      	bne.n	8005a0a <HAL_FLASH_Program+0x26>
 8005a06:	2302      	movs	r3, #2
 8005a08:	e054      	b.n	8005ab4 <HAL_FLASH_Program+0xd0>
 8005a0a:	4b2c      	ldr	r3, [pc, #176]	; (8005abc <HAL_FLASH_Program+0xd8>)
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005a10:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005a14:	f000 f8b2 	bl	8005b7c <FLASH_WaitForLastOperation>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8005a1c:	7dfb      	ldrb	r3, [r7, #23]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d144      	bne.n	8005aac <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d102      	bne.n	8005a2e <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	757b      	strb	r3, [r7, #21]
 8005a2c:	e007      	b.n	8005a3e <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2b02      	cmp	r3, #2
 8005a32:	d102      	bne.n	8005a3a <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8005a34:	2302      	movs	r3, #2
 8005a36:	757b      	strb	r3, [r7, #21]
 8005a38:	e001      	b.n	8005a3e <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8005a3a:	2304      	movs	r3, #4
 8005a3c:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8005a3e:	2300      	movs	r3, #0
 8005a40:	75bb      	strb	r3, [r7, #22]
 8005a42:	e02d      	b.n	8005aa0 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8005a44:	7dbb      	ldrb	r3, [r7, #22]
 8005a46:	005a      	lsls	r2, r3, #1
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	eb02 0c03 	add.w	ip, r2, r3
 8005a4e:	7dbb      	ldrb	r3, [r7, #22]
 8005a50:	0119      	lsls	r1, r3, #4
 8005a52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a56:	f1c1 0620 	rsb	r6, r1, #32
 8005a5a:	f1a1 0020 	sub.w	r0, r1, #32
 8005a5e:	fa22 f401 	lsr.w	r4, r2, r1
 8005a62:	fa03 f606 	lsl.w	r6, r3, r6
 8005a66:	4334      	orrs	r4, r6
 8005a68:	fa23 f000 	lsr.w	r0, r3, r0
 8005a6c:	4304      	orrs	r4, r0
 8005a6e:	fa23 f501 	lsr.w	r5, r3, r1
 8005a72:	b2a3      	uxth	r3, r4
 8005a74:	4619      	mov	r1, r3
 8005a76:	4660      	mov	r0, ip
 8005a78:	f000 f864 	bl	8005b44 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005a7c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005a80:	f000 f87c 	bl	8005b7c <FLASH_WaitForLastOperation>
 8005a84:	4603      	mov	r3, r0
 8005a86:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8005a88:	4b0d      	ldr	r3, [pc, #52]	; (8005ac0 <HAL_FLASH_Program+0xdc>)
 8005a8a:	691b      	ldr	r3, [r3, #16]
 8005a8c:	4a0c      	ldr	r2, [pc, #48]	; (8005ac0 <HAL_FLASH_Program+0xdc>)
 8005a8e:	f023 0301 	bic.w	r3, r3, #1
 8005a92:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8005a94:	7dfb      	ldrb	r3, [r7, #23]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d107      	bne.n	8005aaa <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8005a9a:	7dbb      	ldrb	r3, [r7, #22]
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	75bb      	strb	r3, [r7, #22]
 8005aa0:	7dba      	ldrb	r2, [r7, #22]
 8005aa2:	7d7b      	ldrb	r3, [r7, #21]
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d3cd      	bcc.n	8005a44 <HAL_FLASH_Program+0x60>
 8005aa8:	e000      	b.n	8005aac <HAL_FLASH_Program+0xc8>
      {
        break;
 8005aaa:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005aac:	4b03      	ldr	r3, [pc, #12]	; (8005abc <HAL_FLASH_Program+0xd8>)
 8005aae:	2200      	movs	r2, #0
 8005ab0:	761a      	strb	r2, [r3, #24]

  return status;
 8005ab2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	371c      	adds	r7, #28
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005abc:	200040f8 	.word	0x200040f8
 8005ac0:	40022000 	.word	0x40022000

08005ac4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005aca:	2300      	movs	r3, #0
 8005acc:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005ace:	4b0d      	ldr	r3, [pc, #52]	; (8005b04 <HAL_FLASH_Unlock+0x40>)
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d00d      	beq.n	8005af6 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005ada:	4b0a      	ldr	r3, [pc, #40]	; (8005b04 <HAL_FLASH_Unlock+0x40>)
 8005adc:	4a0a      	ldr	r2, [pc, #40]	; (8005b08 <HAL_FLASH_Unlock+0x44>)
 8005ade:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005ae0:	4b08      	ldr	r3, [pc, #32]	; (8005b04 <HAL_FLASH_Unlock+0x40>)
 8005ae2:	4a0a      	ldr	r2, [pc, #40]	; (8005b0c <HAL_FLASH_Unlock+0x48>)
 8005ae4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005ae6:	4b07      	ldr	r3, [pc, #28]	; (8005b04 <HAL_FLASH_Unlock+0x40>)
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d001      	beq.n	8005af6 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8005af6:	79fb      	ldrb	r3, [r7, #7]
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	370c      	adds	r7, #12
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bc80      	pop	{r7}
 8005b00:	4770      	bx	lr
 8005b02:	bf00      	nop
 8005b04:	40022000 	.word	0x40022000
 8005b08:	45670123 	.word	0x45670123
 8005b0c:	cdef89ab 	.word	0xcdef89ab

08005b10 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005b10:	b480      	push	{r7}
 8005b12:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8005b14:	4b05      	ldr	r3, [pc, #20]	; (8005b2c <HAL_FLASH_Lock+0x1c>)
 8005b16:	691b      	ldr	r3, [r3, #16]
 8005b18:	4a04      	ldr	r2, [pc, #16]	; (8005b2c <HAL_FLASH_Lock+0x1c>)
 8005b1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b1e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8005b20:	2300      	movs	r3, #0
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bc80      	pop	{r7}
 8005b28:	4770      	bx	lr
 8005b2a:	bf00      	nop
 8005b2c:	40022000 	.word	0x40022000

08005b30 <HAL_FLASH_GetError>:
  * @brief  Get the specific FLASH error flag.
  * @retval FLASH_ErrorCode The returned value can be:
  *            @ref FLASH_Error_Codes
  */
uint32_t HAL_FLASH_GetError(void)
{
 8005b30:	b480      	push	{r7}
 8005b32:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8005b34:	4b02      	ldr	r3, [pc, #8]	; (8005b40 <HAL_FLASH_GetError+0x10>)
 8005b36:	69db      	ldr	r3, [r3, #28]
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bc80      	pop	{r7}
 8005b3e:	4770      	bx	lr
 8005b40:	200040f8 	.word	0x200040f8

08005b44 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	460b      	mov	r3, r1
 8005b4e:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005b50:	4b08      	ldr	r3, [pc, #32]	; (8005b74 <FLASH_Program_HalfWord+0x30>)
 8005b52:	2200      	movs	r2, #0
 8005b54:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005b56:	4b08      	ldr	r3, [pc, #32]	; (8005b78 <FLASH_Program_HalfWord+0x34>)
 8005b58:	691b      	ldr	r3, [r3, #16]
 8005b5a:	4a07      	ldr	r2, [pc, #28]	; (8005b78 <FLASH_Program_HalfWord+0x34>)
 8005b5c:	f043 0301 	orr.w	r3, r3, #1
 8005b60:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	887a      	ldrh	r2, [r7, #2]
 8005b66:	801a      	strh	r2, [r3, #0]
}
 8005b68:	bf00      	nop
 8005b6a:	370c      	adds	r7, #12
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bc80      	pop	{r7}
 8005b70:	4770      	bx	lr
 8005b72:	bf00      	nop
 8005b74:	200040f8 	.word	0x200040f8
 8005b78:	40022000 	.word	0x40022000

08005b7c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8005b84:	f7ff f866 	bl	8004c54 <HAL_GetTick>
 8005b88:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8005b8a:	e010      	b.n	8005bae <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b92:	d00c      	beq.n	8005bae <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d007      	beq.n	8005baa <FLASH_WaitForLastOperation+0x2e>
 8005b9a:	f7ff f85b 	bl	8004c54 <HAL_GetTick>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	1ad3      	subs	r3, r2, r3
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d201      	bcs.n	8005bae <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8005baa:	2303      	movs	r3, #3
 8005bac:	e025      	b.n	8005bfa <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8005bae:	4b15      	ldr	r3, [pc, #84]	; (8005c04 <FLASH_WaitForLastOperation+0x88>)
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	f003 0301 	and.w	r3, r3, #1
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d1e8      	bne.n	8005b8c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8005bba:	4b12      	ldr	r3, [pc, #72]	; (8005c04 <FLASH_WaitForLastOperation+0x88>)
 8005bbc:	68db      	ldr	r3, [r3, #12]
 8005bbe:	f003 0320 	and.w	r3, r3, #32
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d002      	beq.n	8005bcc <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005bc6:	4b0f      	ldr	r3, [pc, #60]	; (8005c04 <FLASH_WaitForLastOperation+0x88>)
 8005bc8:	2220      	movs	r2, #32
 8005bca:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8005bcc:	4b0d      	ldr	r3, [pc, #52]	; (8005c04 <FLASH_WaitForLastOperation+0x88>)
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	f003 0310 	and.w	r3, r3, #16
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d10b      	bne.n	8005bf0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8005bd8:	4b0a      	ldr	r3, [pc, #40]	; (8005c04 <FLASH_WaitForLastOperation+0x88>)
 8005bda:	69db      	ldr	r3, [r3, #28]
 8005bdc:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d105      	bne.n	8005bf0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8005be4:	4b07      	ldr	r3, [pc, #28]	; (8005c04 <FLASH_WaitForLastOperation+0x88>)
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d003      	beq.n	8005bf8 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8005bf0:	f000 f80a 	bl	8005c08 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e000      	b.n	8005bfa <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8005bf8:	2300      	movs	r3, #0
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3710      	adds	r7, #16
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
 8005c02:	bf00      	nop
 8005c04:	40022000 	.word	0x40022000

08005c08 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b083      	sub	sp, #12
 8005c0c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8005c12:	4b23      	ldr	r3, [pc, #140]	; (8005ca0 <FLASH_SetErrorCode+0x98>)
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	f003 0310 	and.w	r3, r3, #16
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d009      	beq.n	8005c32 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005c1e:	4b21      	ldr	r3, [pc, #132]	; (8005ca4 <FLASH_SetErrorCode+0x9c>)
 8005c20:	69db      	ldr	r3, [r3, #28]
 8005c22:	f043 0302 	orr.w	r3, r3, #2
 8005c26:	4a1f      	ldr	r2, [pc, #124]	; (8005ca4 <FLASH_SetErrorCode+0x9c>)
 8005c28:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f043 0310 	orr.w	r3, r3, #16
 8005c30:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8005c32:	4b1b      	ldr	r3, [pc, #108]	; (8005ca0 <FLASH_SetErrorCode+0x98>)
 8005c34:	68db      	ldr	r3, [r3, #12]
 8005c36:	f003 0304 	and.w	r3, r3, #4
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d009      	beq.n	8005c52 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8005c3e:	4b19      	ldr	r3, [pc, #100]	; (8005ca4 <FLASH_SetErrorCode+0x9c>)
 8005c40:	69db      	ldr	r3, [r3, #28]
 8005c42:	f043 0301 	orr.w	r3, r3, #1
 8005c46:	4a17      	ldr	r2, [pc, #92]	; (8005ca4 <FLASH_SetErrorCode+0x9c>)
 8005c48:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f043 0304 	orr.w	r3, r3, #4
 8005c50:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8005c52:	4b13      	ldr	r3, [pc, #76]	; (8005ca0 <FLASH_SetErrorCode+0x98>)
 8005c54:	69db      	ldr	r3, [r3, #28]
 8005c56:	f003 0301 	and.w	r3, r3, #1
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d00b      	beq.n	8005c76 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8005c5e:	4b11      	ldr	r3, [pc, #68]	; (8005ca4 <FLASH_SetErrorCode+0x9c>)
 8005c60:	69db      	ldr	r3, [r3, #28]
 8005c62:	f043 0304 	orr.w	r3, r3, #4
 8005c66:	4a0f      	ldr	r2, [pc, #60]	; (8005ca4 <FLASH_SetErrorCode+0x9c>)
 8005c68:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8005c6a:	4b0d      	ldr	r3, [pc, #52]	; (8005ca0 <FLASH_SetErrorCode+0x98>)
 8005c6c:	69db      	ldr	r3, [r3, #28]
 8005c6e:	4a0c      	ldr	r2, [pc, #48]	; (8005ca0 <FLASH_SetErrorCode+0x98>)
 8005c70:	f023 0301 	bic.w	r3, r3, #1
 8005c74:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f240 1201 	movw	r2, #257	; 0x101
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d106      	bne.n	8005c8e <FLASH_SetErrorCode+0x86>
 8005c80:	4b07      	ldr	r3, [pc, #28]	; (8005ca0 <FLASH_SetErrorCode+0x98>)
 8005c82:	69db      	ldr	r3, [r3, #28]
 8005c84:	4a06      	ldr	r2, [pc, #24]	; (8005ca0 <FLASH_SetErrorCode+0x98>)
 8005c86:	f023 0301 	bic.w	r3, r3, #1
 8005c8a:	61d3      	str	r3, [r2, #28]
}  
 8005c8c:	e002      	b.n	8005c94 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8005c8e:	4a04      	ldr	r2, [pc, #16]	; (8005ca0 <FLASH_SetErrorCode+0x98>)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	60d3      	str	r3, [r2, #12]
}  
 8005c94:	bf00      	nop
 8005c96:	370c      	adds	r7, #12
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bc80      	pop	{r7}
 8005c9c:	4770      	bx	lr
 8005c9e:	bf00      	nop
 8005ca0:	40022000 	.word	0x40022000
 8005ca4:	200040f8 	.word	0x200040f8

08005ca8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b084      	sub	sp, #16
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005cba:	4b2f      	ldr	r3, [pc, #188]	; (8005d78 <HAL_FLASHEx_Erase+0xd0>)
 8005cbc:	7e1b      	ldrb	r3, [r3, #24]
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d101      	bne.n	8005cc6 <HAL_FLASHEx_Erase+0x1e>
 8005cc2:	2302      	movs	r3, #2
 8005cc4:	e053      	b.n	8005d6e <HAL_FLASHEx_Erase+0xc6>
 8005cc6:	4b2c      	ldr	r3, [pc, #176]	; (8005d78 <HAL_FLASHEx_Erase+0xd0>)
 8005cc8:	2201      	movs	r2, #1
 8005cca:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	2b02      	cmp	r3, #2
 8005cd2:	d116      	bne.n	8005d02 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8005cd4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005cd8:	f7ff ff50 	bl	8005b7c <FLASH_WaitForLastOperation>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d141      	bne.n	8005d66 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8005ce2:	2001      	movs	r0, #1
 8005ce4:	f000 f84c 	bl	8005d80 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005ce8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005cec:	f7ff ff46 	bl	8005b7c <FLASH_WaitForLastOperation>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8005cf4:	4b21      	ldr	r3, [pc, #132]	; (8005d7c <HAL_FLASHEx_Erase+0xd4>)
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	4a20      	ldr	r2, [pc, #128]	; (8005d7c <HAL_FLASHEx_Erase+0xd4>)
 8005cfa:	f023 0304 	bic.w	r3, r3, #4
 8005cfe:	6113      	str	r3, [r2, #16]
 8005d00:	e031      	b.n	8005d66 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8005d02:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005d06:	f7ff ff39 	bl	8005b7c <FLASH_WaitForLastOperation>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d12a      	bne.n	8005d66 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	f04f 32ff 	mov.w	r2, #4294967295
 8005d16:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	60bb      	str	r3, [r7, #8]
 8005d1e:	e019      	b.n	8005d54 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8005d20:	68b8      	ldr	r0, [r7, #8]
 8005d22:	f000 f849 	bl	8005db8 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005d26:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005d2a:	f7ff ff27 	bl	8005b7c <FLASH_WaitForLastOperation>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8005d32:	4b12      	ldr	r3, [pc, #72]	; (8005d7c <HAL_FLASHEx_Erase+0xd4>)
 8005d34:	691b      	ldr	r3, [r3, #16]
 8005d36:	4a11      	ldr	r2, [pc, #68]	; (8005d7c <HAL_FLASHEx_Erase+0xd4>)
 8005d38:	f023 0302 	bic.w	r3, r3, #2
 8005d3c:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8005d3e:	7bfb      	ldrb	r3, [r7, #15]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d003      	beq.n	8005d4c <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	68ba      	ldr	r2, [r7, #8]
 8005d48:	601a      	str	r2, [r3, #0]
            break;
 8005d4a:	e00c      	b.n	8005d66 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d52:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	029a      	lsls	r2, r3, #10
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8005d60:	68ba      	ldr	r2, [r7, #8]
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d3dc      	bcc.n	8005d20 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005d66:	4b04      	ldr	r3, [pc, #16]	; (8005d78 <HAL_FLASHEx_Erase+0xd0>)
 8005d68:	2200      	movs	r2, #0
 8005d6a:	761a      	strb	r2, [r3, #24]

  return status;
 8005d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3710      	adds	r7, #16
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	bf00      	nop
 8005d78:	200040f8 	.word	0x200040f8
 8005d7c:	40022000 	.word	0x40022000

08005d80 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b083      	sub	sp, #12
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005d88:	4b09      	ldr	r3, [pc, #36]	; (8005db0 <FLASH_MassErase+0x30>)
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8005d8e:	4b09      	ldr	r3, [pc, #36]	; (8005db4 <FLASH_MassErase+0x34>)
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	4a08      	ldr	r2, [pc, #32]	; (8005db4 <FLASH_MassErase+0x34>)
 8005d94:	f043 0304 	orr.w	r3, r3, #4
 8005d98:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005d9a:	4b06      	ldr	r3, [pc, #24]	; (8005db4 <FLASH_MassErase+0x34>)
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	4a05      	ldr	r2, [pc, #20]	; (8005db4 <FLASH_MassErase+0x34>)
 8005da0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005da4:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8005da6:	bf00      	nop
 8005da8:	370c      	adds	r7, #12
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bc80      	pop	{r7}
 8005dae:	4770      	bx	lr
 8005db0:	200040f8 	.word	0x200040f8
 8005db4:	40022000 	.word	0x40022000

08005db8 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b083      	sub	sp, #12
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005dc0:	4b0b      	ldr	r3, [pc, #44]	; (8005df0 <FLASH_PageErase+0x38>)
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8005dc6:	4b0b      	ldr	r3, [pc, #44]	; (8005df4 <FLASH_PageErase+0x3c>)
 8005dc8:	691b      	ldr	r3, [r3, #16]
 8005dca:	4a0a      	ldr	r2, [pc, #40]	; (8005df4 <FLASH_PageErase+0x3c>)
 8005dcc:	f043 0302 	orr.w	r3, r3, #2
 8005dd0:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8005dd2:	4a08      	ldr	r2, [pc, #32]	; (8005df4 <FLASH_PageErase+0x3c>)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005dd8:	4b06      	ldr	r3, [pc, #24]	; (8005df4 <FLASH_PageErase+0x3c>)
 8005dda:	691b      	ldr	r3, [r3, #16]
 8005ddc:	4a05      	ldr	r2, [pc, #20]	; (8005df4 <FLASH_PageErase+0x3c>)
 8005dde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005de2:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8005de4:	bf00      	nop
 8005de6:	370c      	adds	r7, #12
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bc80      	pop	{r7}
 8005dec:	4770      	bx	lr
 8005dee:	bf00      	nop
 8005df0:	200040f8 	.word	0x200040f8
 8005df4:	40022000 	.word	0x40022000

08005df8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b08b      	sub	sp, #44	; 0x2c
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005e02:	2300      	movs	r3, #0
 8005e04:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005e06:	2300      	movs	r3, #0
 8005e08:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005e0a:	e169      	b.n	80060e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e10:	fa02 f303 	lsl.w	r3, r2, r3
 8005e14:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	69fa      	ldr	r2, [r7, #28]
 8005e1c:	4013      	ands	r3, r2
 8005e1e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005e20:	69ba      	ldr	r2, [r7, #24]
 8005e22:	69fb      	ldr	r3, [r7, #28]
 8005e24:	429a      	cmp	r2, r3
 8005e26:	f040 8158 	bne.w	80060da <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	4a9a      	ldr	r2, [pc, #616]	; (8006098 <HAL_GPIO_Init+0x2a0>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d05e      	beq.n	8005ef2 <HAL_GPIO_Init+0xfa>
 8005e34:	4a98      	ldr	r2, [pc, #608]	; (8006098 <HAL_GPIO_Init+0x2a0>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d875      	bhi.n	8005f26 <HAL_GPIO_Init+0x12e>
 8005e3a:	4a98      	ldr	r2, [pc, #608]	; (800609c <HAL_GPIO_Init+0x2a4>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d058      	beq.n	8005ef2 <HAL_GPIO_Init+0xfa>
 8005e40:	4a96      	ldr	r2, [pc, #600]	; (800609c <HAL_GPIO_Init+0x2a4>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d86f      	bhi.n	8005f26 <HAL_GPIO_Init+0x12e>
 8005e46:	4a96      	ldr	r2, [pc, #600]	; (80060a0 <HAL_GPIO_Init+0x2a8>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d052      	beq.n	8005ef2 <HAL_GPIO_Init+0xfa>
 8005e4c:	4a94      	ldr	r2, [pc, #592]	; (80060a0 <HAL_GPIO_Init+0x2a8>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d869      	bhi.n	8005f26 <HAL_GPIO_Init+0x12e>
 8005e52:	4a94      	ldr	r2, [pc, #592]	; (80060a4 <HAL_GPIO_Init+0x2ac>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d04c      	beq.n	8005ef2 <HAL_GPIO_Init+0xfa>
 8005e58:	4a92      	ldr	r2, [pc, #584]	; (80060a4 <HAL_GPIO_Init+0x2ac>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d863      	bhi.n	8005f26 <HAL_GPIO_Init+0x12e>
 8005e5e:	4a92      	ldr	r2, [pc, #584]	; (80060a8 <HAL_GPIO_Init+0x2b0>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d046      	beq.n	8005ef2 <HAL_GPIO_Init+0xfa>
 8005e64:	4a90      	ldr	r2, [pc, #576]	; (80060a8 <HAL_GPIO_Init+0x2b0>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d85d      	bhi.n	8005f26 <HAL_GPIO_Init+0x12e>
 8005e6a:	2b12      	cmp	r3, #18
 8005e6c:	d82a      	bhi.n	8005ec4 <HAL_GPIO_Init+0xcc>
 8005e6e:	2b12      	cmp	r3, #18
 8005e70:	d859      	bhi.n	8005f26 <HAL_GPIO_Init+0x12e>
 8005e72:	a201      	add	r2, pc, #4	; (adr r2, 8005e78 <HAL_GPIO_Init+0x80>)
 8005e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e78:	08005ef3 	.word	0x08005ef3
 8005e7c:	08005ecd 	.word	0x08005ecd
 8005e80:	08005edf 	.word	0x08005edf
 8005e84:	08005f21 	.word	0x08005f21
 8005e88:	08005f27 	.word	0x08005f27
 8005e8c:	08005f27 	.word	0x08005f27
 8005e90:	08005f27 	.word	0x08005f27
 8005e94:	08005f27 	.word	0x08005f27
 8005e98:	08005f27 	.word	0x08005f27
 8005e9c:	08005f27 	.word	0x08005f27
 8005ea0:	08005f27 	.word	0x08005f27
 8005ea4:	08005f27 	.word	0x08005f27
 8005ea8:	08005f27 	.word	0x08005f27
 8005eac:	08005f27 	.word	0x08005f27
 8005eb0:	08005f27 	.word	0x08005f27
 8005eb4:	08005f27 	.word	0x08005f27
 8005eb8:	08005f27 	.word	0x08005f27
 8005ebc:	08005ed5 	.word	0x08005ed5
 8005ec0:	08005ee9 	.word	0x08005ee9
 8005ec4:	4a79      	ldr	r2, [pc, #484]	; (80060ac <HAL_GPIO_Init+0x2b4>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d013      	beq.n	8005ef2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005eca:	e02c      	b.n	8005f26 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	623b      	str	r3, [r7, #32]
          break;
 8005ed2:	e029      	b.n	8005f28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	3304      	adds	r3, #4
 8005eda:	623b      	str	r3, [r7, #32]
          break;
 8005edc:	e024      	b.n	8005f28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	3308      	adds	r3, #8
 8005ee4:	623b      	str	r3, [r7, #32]
          break;
 8005ee6:	e01f      	b.n	8005f28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	68db      	ldr	r3, [r3, #12]
 8005eec:	330c      	adds	r3, #12
 8005eee:	623b      	str	r3, [r7, #32]
          break;
 8005ef0:	e01a      	b.n	8005f28 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d102      	bne.n	8005f00 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005efa:	2304      	movs	r3, #4
 8005efc:	623b      	str	r3, [r7, #32]
          break;
 8005efe:	e013      	b.n	8005f28 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d105      	bne.n	8005f14 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005f08:	2308      	movs	r3, #8
 8005f0a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	69fa      	ldr	r2, [r7, #28]
 8005f10:	611a      	str	r2, [r3, #16]
          break;
 8005f12:	e009      	b.n	8005f28 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005f14:	2308      	movs	r3, #8
 8005f16:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	69fa      	ldr	r2, [r7, #28]
 8005f1c:	615a      	str	r2, [r3, #20]
          break;
 8005f1e:	e003      	b.n	8005f28 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005f20:	2300      	movs	r3, #0
 8005f22:	623b      	str	r3, [r7, #32]
          break;
 8005f24:	e000      	b.n	8005f28 <HAL_GPIO_Init+0x130>
          break;
 8005f26:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005f28:	69bb      	ldr	r3, [r7, #24]
 8005f2a:	2bff      	cmp	r3, #255	; 0xff
 8005f2c:	d801      	bhi.n	8005f32 <HAL_GPIO_Init+0x13a>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	e001      	b.n	8005f36 <HAL_GPIO_Init+0x13e>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	3304      	adds	r3, #4
 8005f36:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005f38:	69bb      	ldr	r3, [r7, #24]
 8005f3a:	2bff      	cmp	r3, #255	; 0xff
 8005f3c:	d802      	bhi.n	8005f44 <HAL_GPIO_Init+0x14c>
 8005f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	e002      	b.n	8005f4a <HAL_GPIO_Init+0x152>
 8005f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f46:	3b08      	subs	r3, #8
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	210f      	movs	r1, #15
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	fa01 f303 	lsl.w	r3, r1, r3
 8005f58:	43db      	mvns	r3, r3
 8005f5a:	401a      	ands	r2, r3
 8005f5c:	6a39      	ldr	r1, [r7, #32]
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	fa01 f303 	lsl.w	r3, r1, r3
 8005f64:	431a      	orrs	r2, r3
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	f000 80b1 	beq.w	80060da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005f78:	4b4d      	ldr	r3, [pc, #308]	; (80060b0 <HAL_GPIO_Init+0x2b8>)
 8005f7a:	699b      	ldr	r3, [r3, #24]
 8005f7c:	4a4c      	ldr	r2, [pc, #304]	; (80060b0 <HAL_GPIO_Init+0x2b8>)
 8005f7e:	f043 0301 	orr.w	r3, r3, #1
 8005f82:	6193      	str	r3, [r2, #24]
 8005f84:	4b4a      	ldr	r3, [pc, #296]	; (80060b0 <HAL_GPIO_Init+0x2b8>)
 8005f86:	699b      	ldr	r3, [r3, #24]
 8005f88:	f003 0301 	and.w	r3, r3, #1
 8005f8c:	60bb      	str	r3, [r7, #8]
 8005f8e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005f90:	4a48      	ldr	r2, [pc, #288]	; (80060b4 <HAL_GPIO_Init+0x2bc>)
 8005f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f94:	089b      	lsrs	r3, r3, #2
 8005f96:	3302      	adds	r3, #2
 8005f98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f9c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa0:	f003 0303 	and.w	r3, r3, #3
 8005fa4:	009b      	lsls	r3, r3, #2
 8005fa6:	220f      	movs	r2, #15
 8005fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8005fac:	43db      	mvns	r3, r3
 8005fae:	68fa      	ldr	r2, [r7, #12]
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	4a40      	ldr	r2, [pc, #256]	; (80060b8 <HAL_GPIO_Init+0x2c0>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d013      	beq.n	8005fe4 <HAL_GPIO_Init+0x1ec>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	4a3f      	ldr	r2, [pc, #252]	; (80060bc <HAL_GPIO_Init+0x2c4>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d00d      	beq.n	8005fe0 <HAL_GPIO_Init+0x1e8>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	4a3e      	ldr	r2, [pc, #248]	; (80060c0 <HAL_GPIO_Init+0x2c8>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d007      	beq.n	8005fdc <HAL_GPIO_Init+0x1e4>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	4a3d      	ldr	r2, [pc, #244]	; (80060c4 <HAL_GPIO_Init+0x2cc>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d101      	bne.n	8005fd8 <HAL_GPIO_Init+0x1e0>
 8005fd4:	2303      	movs	r3, #3
 8005fd6:	e006      	b.n	8005fe6 <HAL_GPIO_Init+0x1ee>
 8005fd8:	2304      	movs	r3, #4
 8005fda:	e004      	b.n	8005fe6 <HAL_GPIO_Init+0x1ee>
 8005fdc:	2302      	movs	r3, #2
 8005fde:	e002      	b.n	8005fe6 <HAL_GPIO_Init+0x1ee>
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e000      	b.n	8005fe6 <HAL_GPIO_Init+0x1ee>
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fe8:	f002 0203 	and.w	r2, r2, #3
 8005fec:	0092      	lsls	r2, r2, #2
 8005fee:	4093      	lsls	r3, r2
 8005ff0:	68fa      	ldr	r2, [r7, #12]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005ff6:	492f      	ldr	r1, [pc, #188]	; (80060b4 <HAL_GPIO_Init+0x2bc>)
 8005ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffa:	089b      	lsrs	r3, r3, #2
 8005ffc:	3302      	adds	r3, #2
 8005ffe:	68fa      	ldr	r2, [r7, #12]
 8006000:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800600c:	2b00      	cmp	r3, #0
 800600e:	d006      	beq.n	800601e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006010:	4b2d      	ldr	r3, [pc, #180]	; (80060c8 <HAL_GPIO_Init+0x2d0>)
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	492c      	ldr	r1, [pc, #176]	; (80060c8 <HAL_GPIO_Init+0x2d0>)
 8006016:	69bb      	ldr	r3, [r7, #24]
 8006018:	4313      	orrs	r3, r2
 800601a:	600b      	str	r3, [r1, #0]
 800601c:	e006      	b.n	800602c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800601e:	4b2a      	ldr	r3, [pc, #168]	; (80060c8 <HAL_GPIO_Init+0x2d0>)
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	69bb      	ldr	r3, [r7, #24]
 8006024:	43db      	mvns	r3, r3
 8006026:	4928      	ldr	r1, [pc, #160]	; (80060c8 <HAL_GPIO_Init+0x2d0>)
 8006028:	4013      	ands	r3, r2
 800602a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006034:	2b00      	cmp	r3, #0
 8006036:	d006      	beq.n	8006046 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006038:	4b23      	ldr	r3, [pc, #140]	; (80060c8 <HAL_GPIO_Init+0x2d0>)
 800603a:	685a      	ldr	r2, [r3, #4]
 800603c:	4922      	ldr	r1, [pc, #136]	; (80060c8 <HAL_GPIO_Init+0x2d0>)
 800603e:	69bb      	ldr	r3, [r7, #24]
 8006040:	4313      	orrs	r3, r2
 8006042:	604b      	str	r3, [r1, #4]
 8006044:	e006      	b.n	8006054 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006046:	4b20      	ldr	r3, [pc, #128]	; (80060c8 <HAL_GPIO_Init+0x2d0>)
 8006048:	685a      	ldr	r2, [r3, #4]
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	43db      	mvns	r3, r3
 800604e:	491e      	ldr	r1, [pc, #120]	; (80060c8 <HAL_GPIO_Init+0x2d0>)
 8006050:	4013      	ands	r3, r2
 8006052:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800605c:	2b00      	cmp	r3, #0
 800605e:	d006      	beq.n	800606e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006060:	4b19      	ldr	r3, [pc, #100]	; (80060c8 <HAL_GPIO_Init+0x2d0>)
 8006062:	689a      	ldr	r2, [r3, #8]
 8006064:	4918      	ldr	r1, [pc, #96]	; (80060c8 <HAL_GPIO_Init+0x2d0>)
 8006066:	69bb      	ldr	r3, [r7, #24]
 8006068:	4313      	orrs	r3, r2
 800606a:	608b      	str	r3, [r1, #8]
 800606c:	e006      	b.n	800607c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800606e:	4b16      	ldr	r3, [pc, #88]	; (80060c8 <HAL_GPIO_Init+0x2d0>)
 8006070:	689a      	ldr	r2, [r3, #8]
 8006072:	69bb      	ldr	r3, [r7, #24]
 8006074:	43db      	mvns	r3, r3
 8006076:	4914      	ldr	r1, [pc, #80]	; (80060c8 <HAL_GPIO_Init+0x2d0>)
 8006078:	4013      	ands	r3, r2
 800607a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006084:	2b00      	cmp	r3, #0
 8006086:	d021      	beq.n	80060cc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006088:	4b0f      	ldr	r3, [pc, #60]	; (80060c8 <HAL_GPIO_Init+0x2d0>)
 800608a:	68da      	ldr	r2, [r3, #12]
 800608c:	490e      	ldr	r1, [pc, #56]	; (80060c8 <HAL_GPIO_Init+0x2d0>)
 800608e:	69bb      	ldr	r3, [r7, #24]
 8006090:	4313      	orrs	r3, r2
 8006092:	60cb      	str	r3, [r1, #12]
 8006094:	e021      	b.n	80060da <HAL_GPIO_Init+0x2e2>
 8006096:	bf00      	nop
 8006098:	10320000 	.word	0x10320000
 800609c:	10310000 	.word	0x10310000
 80060a0:	10220000 	.word	0x10220000
 80060a4:	10210000 	.word	0x10210000
 80060a8:	10120000 	.word	0x10120000
 80060ac:	10110000 	.word	0x10110000
 80060b0:	40021000 	.word	0x40021000
 80060b4:	40010000 	.word	0x40010000
 80060b8:	40010800 	.word	0x40010800
 80060bc:	40010c00 	.word	0x40010c00
 80060c0:	40011000 	.word	0x40011000
 80060c4:	40011400 	.word	0x40011400
 80060c8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80060cc:	4b0b      	ldr	r3, [pc, #44]	; (80060fc <HAL_GPIO_Init+0x304>)
 80060ce:	68da      	ldr	r2, [r3, #12]
 80060d0:	69bb      	ldr	r3, [r7, #24]
 80060d2:	43db      	mvns	r3, r3
 80060d4:	4909      	ldr	r1, [pc, #36]	; (80060fc <HAL_GPIO_Init+0x304>)
 80060d6:	4013      	ands	r3, r2
 80060d8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80060da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060dc:	3301      	adds	r3, #1
 80060de:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e6:	fa22 f303 	lsr.w	r3, r2, r3
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	f47f ae8e 	bne.w	8005e0c <HAL_GPIO_Init+0x14>
  }
}
 80060f0:	bf00      	nop
 80060f2:	bf00      	nop
 80060f4:	372c      	adds	r7, #44	; 0x2c
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bc80      	pop	{r7}
 80060fa:	4770      	bx	lr
 80060fc:	40010400 	.word	0x40010400

08006100 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006100:	b480      	push	{r7}
 8006102:	b085      	sub	sp, #20
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	460b      	mov	r3, r1
 800610a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	689a      	ldr	r2, [r3, #8]
 8006110:	887b      	ldrh	r3, [r7, #2]
 8006112:	4013      	ands	r3, r2
 8006114:	2b00      	cmp	r3, #0
 8006116:	d002      	beq.n	800611e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006118:	2301      	movs	r3, #1
 800611a:	73fb      	strb	r3, [r7, #15]
 800611c:	e001      	b.n	8006122 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800611e:	2300      	movs	r3, #0
 8006120:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006122:	7bfb      	ldrb	r3, [r7, #15]
}
 8006124:	4618      	mov	r0, r3
 8006126:	3714      	adds	r7, #20
 8006128:	46bd      	mov	sp, r7
 800612a:	bc80      	pop	{r7}
 800612c:	4770      	bx	lr

0800612e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800612e:	b480      	push	{r7}
 8006130:	b083      	sub	sp, #12
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
 8006136:	460b      	mov	r3, r1
 8006138:	807b      	strh	r3, [r7, #2]
 800613a:	4613      	mov	r3, r2
 800613c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800613e:	787b      	ldrb	r3, [r7, #1]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d003      	beq.n	800614c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006144:	887a      	ldrh	r2, [r7, #2]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800614a:	e003      	b.n	8006154 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800614c:	887b      	ldrh	r3, [r7, #2]
 800614e:	041a      	lsls	r2, r3, #16
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	611a      	str	r2, [r3, #16]
}
 8006154:	bf00      	nop
 8006156:	370c      	adds	r7, #12
 8006158:	46bd      	mov	sp, r7
 800615a:	bc80      	pop	{r7}
 800615c:	4770      	bx	lr
	...

08006160 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b084      	sub	sp, #16
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d101      	bne.n	8006172 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	e12b      	b.n	80063ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006178:	b2db      	uxtb	r3, r3
 800617a:	2b00      	cmp	r3, #0
 800617c:	d106      	bne.n	800618c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2200      	movs	r2, #0
 8006182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f7fe f898 	bl	80042bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2224      	movs	r2, #36	; 0x24
 8006190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f022 0201 	bic.w	r2, r2, #1
 80061a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	681a      	ldr	r2, [r3, #0]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80061b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80061c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80061c4:	f000 fce4 	bl	8006b90 <HAL_RCC_GetPCLK1Freq>
 80061c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	4a81      	ldr	r2, [pc, #516]	; (80063d4 <HAL_I2C_Init+0x274>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d807      	bhi.n	80061e4 <HAL_I2C_Init+0x84>
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	4a80      	ldr	r2, [pc, #512]	; (80063d8 <HAL_I2C_Init+0x278>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	bf94      	ite	ls
 80061dc:	2301      	movls	r3, #1
 80061de:	2300      	movhi	r3, #0
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	e006      	b.n	80061f2 <HAL_I2C_Init+0x92>
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	4a7d      	ldr	r2, [pc, #500]	; (80063dc <HAL_I2C_Init+0x27c>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	bf94      	ite	ls
 80061ec:	2301      	movls	r3, #1
 80061ee:	2300      	movhi	r3, #0
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d001      	beq.n	80061fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	e0e7      	b.n	80063ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	4a78      	ldr	r2, [pc, #480]	; (80063e0 <HAL_I2C_Init+0x280>)
 80061fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006202:	0c9b      	lsrs	r3, r3, #18
 8006204:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	68ba      	ldr	r2, [r7, #8]
 8006216:	430a      	orrs	r2, r1
 8006218:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	6a1b      	ldr	r3, [r3, #32]
 8006220:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	4a6a      	ldr	r2, [pc, #424]	; (80063d4 <HAL_I2C_Init+0x274>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d802      	bhi.n	8006234 <HAL_I2C_Init+0xd4>
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	3301      	adds	r3, #1
 8006232:	e009      	b.n	8006248 <HAL_I2C_Init+0xe8>
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800623a:	fb02 f303 	mul.w	r3, r2, r3
 800623e:	4a69      	ldr	r2, [pc, #420]	; (80063e4 <HAL_I2C_Init+0x284>)
 8006240:	fba2 2303 	umull	r2, r3, r2, r3
 8006244:	099b      	lsrs	r3, r3, #6
 8006246:	3301      	adds	r3, #1
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	6812      	ldr	r2, [r2, #0]
 800624c:	430b      	orrs	r3, r1
 800624e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	69db      	ldr	r3, [r3, #28]
 8006256:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800625a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	495c      	ldr	r1, [pc, #368]	; (80063d4 <HAL_I2C_Init+0x274>)
 8006264:	428b      	cmp	r3, r1
 8006266:	d819      	bhi.n	800629c <HAL_I2C_Init+0x13c>
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	1e59      	subs	r1, r3, #1
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	005b      	lsls	r3, r3, #1
 8006272:	fbb1 f3f3 	udiv	r3, r1, r3
 8006276:	1c59      	adds	r1, r3, #1
 8006278:	f640 73fc 	movw	r3, #4092	; 0xffc
 800627c:	400b      	ands	r3, r1
 800627e:	2b00      	cmp	r3, #0
 8006280:	d00a      	beq.n	8006298 <HAL_I2C_Init+0x138>
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	1e59      	subs	r1, r3, #1
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	005b      	lsls	r3, r3, #1
 800628c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006290:	3301      	adds	r3, #1
 8006292:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006296:	e051      	b.n	800633c <HAL_I2C_Init+0x1dc>
 8006298:	2304      	movs	r3, #4
 800629a:	e04f      	b.n	800633c <HAL_I2C_Init+0x1dc>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d111      	bne.n	80062c8 <HAL_I2C_Init+0x168>
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	1e58      	subs	r0, r3, #1
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6859      	ldr	r1, [r3, #4]
 80062ac:	460b      	mov	r3, r1
 80062ae:	005b      	lsls	r3, r3, #1
 80062b0:	440b      	add	r3, r1
 80062b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80062b6:	3301      	adds	r3, #1
 80062b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062bc:	2b00      	cmp	r3, #0
 80062be:	bf0c      	ite	eq
 80062c0:	2301      	moveq	r3, #1
 80062c2:	2300      	movne	r3, #0
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	e012      	b.n	80062ee <HAL_I2C_Init+0x18e>
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	1e58      	subs	r0, r3, #1
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6859      	ldr	r1, [r3, #4]
 80062d0:	460b      	mov	r3, r1
 80062d2:	009b      	lsls	r3, r3, #2
 80062d4:	440b      	add	r3, r1
 80062d6:	0099      	lsls	r1, r3, #2
 80062d8:	440b      	add	r3, r1
 80062da:	fbb0 f3f3 	udiv	r3, r0, r3
 80062de:	3301      	adds	r3, #1
 80062e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	bf0c      	ite	eq
 80062e8:	2301      	moveq	r3, #1
 80062ea:	2300      	movne	r3, #0
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d001      	beq.n	80062f6 <HAL_I2C_Init+0x196>
 80062f2:	2301      	movs	r3, #1
 80062f4:	e022      	b.n	800633c <HAL_I2C_Init+0x1dc>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d10e      	bne.n	800631c <HAL_I2C_Init+0x1bc>
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	1e58      	subs	r0, r3, #1
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6859      	ldr	r1, [r3, #4]
 8006306:	460b      	mov	r3, r1
 8006308:	005b      	lsls	r3, r3, #1
 800630a:	440b      	add	r3, r1
 800630c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006310:	3301      	adds	r3, #1
 8006312:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006316:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800631a:	e00f      	b.n	800633c <HAL_I2C_Init+0x1dc>
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	1e58      	subs	r0, r3, #1
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6859      	ldr	r1, [r3, #4]
 8006324:	460b      	mov	r3, r1
 8006326:	009b      	lsls	r3, r3, #2
 8006328:	440b      	add	r3, r1
 800632a:	0099      	lsls	r1, r3, #2
 800632c:	440b      	add	r3, r1
 800632e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006332:	3301      	adds	r3, #1
 8006334:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006338:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800633c:	6879      	ldr	r1, [r7, #4]
 800633e:	6809      	ldr	r1, [r1, #0]
 8006340:	4313      	orrs	r3, r2
 8006342:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	69da      	ldr	r2, [r3, #28]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6a1b      	ldr	r3, [r3, #32]
 8006356:	431a      	orrs	r2, r3
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	430a      	orrs	r2, r1
 800635e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800636a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800636e:	687a      	ldr	r2, [r7, #4]
 8006370:	6911      	ldr	r1, [r2, #16]
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	68d2      	ldr	r2, [r2, #12]
 8006376:	4311      	orrs	r1, r2
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	6812      	ldr	r2, [r2, #0]
 800637c:	430b      	orrs	r3, r1
 800637e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	68db      	ldr	r3, [r3, #12]
 8006386:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	695a      	ldr	r2, [r3, #20]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	699b      	ldr	r3, [r3, #24]
 8006392:	431a      	orrs	r2, r3
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	430a      	orrs	r2, r1
 800639a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	681a      	ldr	r2, [r3, #0]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f042 0201 	orr.w	r2, r2, #1
 80063aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2200      	movs	r2, #0
 80063b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2220      	movs	r2, #32
 80063b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2200      	movs	r2, #0
 80063be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80063c8:	2300      	movs	r3, #0
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3710      	adds	r7, #16
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}
 80063d2:	bf00      	nop
 80063d4:	000186a0 	.word	0x000186a0
 80063d8:	001e847f 	.word	0x001e847f
 80063dc:	003d08ff 	.word	0x003d08ff
 80063e0:	431bde83 	.word	0x431bde83
 80063e4:	10624dd3 	.word	0x10624dd3

080063e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b086      	sub	sp, #24
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d101      	bne.n	80063fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	e272      	b.n	80068e0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f003 0301 	and.w	r3, r3, #1
 8006402:	2b00      	cmp	r3, #0
 8006404:	f000 8087 	beq.w	8006516 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006408:	4b92      	ldr	r3, [pc, #584]	; (8006654 <HAL_RCC_OscConfig+0x26c>)
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	f003 030c 	and.w	r3, r3, #12
 8006410:	2b04      	cmp	r3, #4
 8006412:	d00c      	beq.n	800642e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006414:	4b8f      	ldr	r3, [pc, #572]	; (8006654 <HAL_RCC_OscConfig+0x26c>)
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	f003 030c 	and.w	r3, r3, #12
 800641c:	2b08      	cmp	r3, #8
 800641e:	d112      	bne.n	8006446 <HAL_RCC_OscConfig+0x5e>
 8006420:	4b8c      	ldr	r3, [pc, #560]	; (8006654 <HAL_RCC_OscConfig+0x26c>)
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006428:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800642c:	d10b      	bne.n	8006446 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800642e:	4b89      	ldr	r3, [pc, #548]	; (8006654 <HAL_RCC_OscConfig+0x26c>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006436:	2b00      	cmp	r3, #0
 8006438:	d06c      	beq.n	8006514 <HAL_RCC_OscConfig+0x12c>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d168      	bne.n	8006514 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	e24c      	b.n	80068e0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800644e:	d106      	bne.n	800645e <HAL_RCC_OscConfig+0x76>
 8006450:	4b80      	ldr	r3, [pc, #512]	; (8006654 <HAL_RCC_OscConfig+0x26c>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a7f      	ldr	r2, [pc, #508]	; (8006654 <HAL_RCC_OscConfig+0x26c>)
 8006456:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800645a:	6013      	str	r3, [r2, #0]
 800645c:	e02e      	b.n	80064bc <HAL_RCC_OscConfig+0xd4>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d10c      	bne.n	8006480 <HAL_RCC_OscConfig+0x98>
 8006466:	4b7b      	ldr	r3, [pc, #492]	; (8006654 <HAL_RCC_OscConfig+0x26c>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a7a      	ldr	r2, [pc, #488]	; (8006654 <HAL_RCC_OscConfig+0x26c>)
 800646c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006470:	6013      	str	r3, [r2, #0]
 8006472:	4b78      	ldr	r3, [pc, #480]	; (8006654 <HAL_RCC_OscConfig+0x26c>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a77      	ldr	r2, [pc, #476]	; (8006654 <HAL_RCC_OscConfig+0x26c>)
 8006478:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800647c:	6013      	str	r3, [r2, #0]
 800647e:	e01d      	b.n	80064bc <HAL_RCC_OscConfig+0xd4>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006488:	d10c      	bne.n	80064a4 <HAL_RCC_OscConfig+0xbc>
 800648a:	4b72      	ldr	r3, [pc, #456]	; (8006654 <HAL_RCC_OscConfig+0x26c>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a71      	ldr	r2, [pc, #452]	; (8006654 <HAL_RCC_OscConfig+0x26c>)
 8006490:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006494:	6013      	str	r3, [r2, #0]
 8006496:	4b6f      	ldr	r3, [pc, #444]	; (8006654 <HAL_RCC_OscConfig+0x26c>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a6e      	ldr	r2, [pc, #440]	; (8006654 <HAL_RCC_OscConfig+0x26c>)
 800649c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064a0:	6013      	str	r3, [r2, #0]
 80064a2:	e00b      	b.n	80064bc <HAL_RCC_OscConfig+0xd4>
 80064a4:	4b6b      	ldr	r3, [pc, #428]	; (8006654 <HAL_RCC_OscConfig+0x26c>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a6a      	ldr	r2, [pc, #424]	; (8006654 <HAL_RCC_OscConfig+0x26c>)
 80064aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064ae:	6013      	str	r3, [r2, #0]
 80064b0:	4b68      	ldr	r3, [pc, #416]	; (8006654 <HAL_RCC_OscConfig+0x26c>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a67      	ldr	r2, [pc, #412]	; (8006654 <HAL_RCC_OscConfig+0x26c>)
 80064b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064ba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d013      	beq.n	80064ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064c4:	f7fe fbc6 	bl	8004c54 <HAL_GetTick>
 80064c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064ca:	e008      	b.n	80064de <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80064cc:	f7fe fbc2 	bl	8004c54 <HAL_GetTick>
 80064d0:	4602      	mov	r2, r0
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	1ad3      	subs	r3, r2, r3
 80064d6:	2b64      	cmp	r3, #100	; 0x64
 80064d8:	d901      	bls.n	80064de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80064da:	2303      	movs	r3, #3
 80064dc:	e200      	b.n	80068e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064de:	4b5d      	ldr	r3, [pc, #372]	; (8006654 <HAL_RCC_OscConfig+0x26c>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d0f0      	beq.n	80064cc <HAL_RCC_OscConfig+0xe4>
 80064ea:	e014      	b.n	8006516 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064ec:	f7fe fbb2 	bl	8004c54 <HAL_GetTick>
 80064f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064f2:	e008      	b.n	8006506 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80064f4:	f7fe fbae 	bl	8004c54 <HAL_GetTick>
 80064f8:	4602      	mov	r2, r0
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	2b64      	cmp	r3, #100	; 0x64
 8006500:	d901      	bls.n	8006506 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006502:	2303      	movs	r3, #3
 8006504:	e1ec      	b.n	80068e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006506:	4b53      	ldr	r3, [pc, #332]	; (8006654 <HAL_RCC_OscConfig+0x26c>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800650e:	2b00      	cmp	r3, #0
 8006510:	d1f0      	bne.n	80064f4 <HAL_RCC_OscConfig+0x10c>
 8006512:	e000      	b.n	8006516 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006514:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f003 0302 	and.w	r3, r3, #2
 800651e:	2b00      	cmp	r3, #0
 8006520:	d063      	beq.n	80065ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006522:	4b4c      	ldr	r3, [pc, #304]	; (8006654 <HAL_RCC_OscConfig+0x26c>)
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	f003 030c 	and.w	r3, r3, #12
 800652a:	2b00      	cmp	r3, #0
 800652c:	d00b      	beq.n	8006546 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800652e:	4b49      	ldr	r3, [pc, #292]	; (8006654 <HAL_RCC_OscConfig+0x26c>)
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	f003 030c 	and.w	r3, r3, #12
 8006536:	2b08      	cmp	r3, #8
 8006538:	d11c      	bne.n	8006574 <HAL_RCC_OscConfig+0x18c>
 800653a:	4b46      	ldr	r3, [pc, #280]	; (8006654 <HAL_RCC_OscConfig+0x26c>)
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006542:	2b00      	cmp	r3, #0
 8006544:	d116      	bne.n	8006574 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006546:	4b43      	ldr	r3, [pc, #268]	; (8006654 <HAL_RCC_OscConfig+0x26c>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f003 0302 	and.w	r3, r3, #2
 800654e:	2b00      	cmp	r3, #0
 8006550:	d005      	beq.n	800655e <HAL_RCC_OscConfig+0x176>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	691b      	ldr	r3, [r3, #16]
 8006556:	2b01      	cmp	r3, #1
 8006558:	d001      	beq.n	800655e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	e1c0      	b.n	80068e0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800655e:	4b3d      	ldr	r3, [pc, #244]	; (8006654 <HAL_RCC_OscConfig+0x26c>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	695b      	ldr	r3, [r3, #20]
 800656a:	00db      	lsls	r3, r3, #3
 800656c:	4939      	ldr	r1, [pc, #228]	; (8006654 <HAL_RCC_OscConfig+0x26c>)
 800656e:	4313      	orrs	r3, r2
 8006570:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006572:	e03a      	b.n	80065ea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	691b      	ldr	r3, [r3, #16]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d020      	beq.n	80065be <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800657c:	4b36      	ldr	r3, [pc, #216]	; (8006658 <HAL_RCC_OscConfig+0x270>)
 800657e:	2201      	movs	r2, #1
 8006580:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006582:	f7fe fb67 	bl	8004c54 <HAL_GetTick>
 8006586:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006588:	e008      	b.n	800659c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800658a:	f7fe fb63 	bl	8004c54 <HAL_GetTick>
 800658e:	4602      	mov	r2, r0
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	1ad3      	subs	r3, r2, r3
 8006594:	2b02      	cmp	r3, #2
 8006596:	d901      	bls.n	800659c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006598:	2303      	movs	r3, #3
 800659a:	e1a1      	b.n	80068e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800659c:	4b2d      	ldr	r3, [pc, #180]	; (8006654 <HAL_RCC_OscConfig+0x26c>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f003 0302 	and.w	r3, r3, #2
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d0f0      	beq.n	800658a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065a8:	4b2a      	ldr	r3, [pc, #168]	; (8006654 <HAL_RCC_OscConfig+0x26c>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	695b      	ldr	r3, [r3, #20]
 80065b4:	00db      	lsls	r3, r3, #3
 80065b6:	4927      	ldr	r1, [pc, #156]	; (8006654 <HAL_RCC_OscConfig+0x26c>)
 80065b8:	4313      	orrs	r3, r2
 80065ba:	600b      	str	r3, [r1, #0]
 80065bc:	e015      	b.n	80065ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80065be:	4b26      	ldr	r3, [pc, #152]	; (8006658 <HAL_RCC_OscConfig+0x270>)
 80065c0:	2200      	movs	r2, #0
 80065c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065c4:	f7fe fb46 	bl	8004c54 <HAL_GetTick>
 80065c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065ca:	e008      	b.n	80065de <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80065cc:	f7fe fb42 	bl	8004c54 <HAL_GetTick>
 80065d0:	4602      	mov	r2, r0
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	1ad3      	subs	r3, r2, r3
 80065d6:	2b02      	cmp	r3, #2
 80065d8:	d901      	bls.n	80065de <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80065da:	2303      	movs	r3, #3
 80065dc:	e180      	b.n	80068e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065de:	4b1d      	ldr	r3, [pc, #116]	; (8006654 <HAL_RCC_OscConfig+0x26c>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f003 0302 	and.w	r3, r3, #2
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d1f0      	bne.n	80065cc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f003 0308 	and.w	r3, r3, #8
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d03a      	beq.n	800666c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	699b      	ldr	r3, [r3, #24]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d019      	beq.n	8006632 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80065fe:	4b17      	ldr	r3, [pc, #92]	; (800665c <HAL_RCC_OscConfig+0x274>)
 8006600:	2201      	movs	r2, #1
 8006602:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006604:	f7fe fb26 	bl	8004c54 <HAL_GetTick>
 8006608:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800660a:	e008      	b.n	800661e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800660c:	f7fe fb22 	bl	8004c54 <HAL_GetTick>
 8006610:	4602      	mov	r2, r0
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	1ad3      	subs	r3, r2, r3
 8006616:	2b02      	cmp	r3, #2
 8006618:	d901      	bls.n	800661e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800661a:	2303      	movs	r3, #3
 800661c:	e160      	b.n	80068e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800661e:	4b0d      	ldr	r3, [pc, #52]	; (8006654 <HAL_RCC_OscConfig+0x26c>)
 8006620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006622:	f003 0302 	and.w	r3, r3, #2
 8006626:	2b00      	cmp	r3, #0
 8006628:	d0f0      	beq.n	800660c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800662a:	2001      	movs	r0, #1
 800662c:	f000 fad8 	bl	8006be0 <RCC_Delay>
 8006630:	e01c      	b.n	800666c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006632:	4b0a      	ldr	r3, [pc, #40]	; (800665c <HAL_RCC_OscConfig+0x274>)
 8006634:	2200      	movs	r2, #0
 8006636:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006638:	f7fe fb0c 	bl	8004c54 <HAL_GetTick>
 800663c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800663e:	e00f      	b.n	8006660 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006640:	f7fe fb08 	bl	8004c54 <HAL_GetTick>
 8006644:	4602      	mov	r2, r0
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	1ad3      	subs	r3, r2, r3
 800664a:	2b02      	cmp	r3, #2
 800664c:	d908      	bls.n	8006660 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800664e:	2303      	movs	r3, #3
 8006650:	e146      	b.n	80068e0 <HAL_RCC_OscConfig+0x4f8>
 8006652:	bf00      	nop
 8006654:	40021000 	.word	0x40021000
 8006658:	42420000 	.word	0x42420000
 800665c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006660:	4b92      	ldr	r3, [pc, #584]	; (80068ac <HAL_RCC_OscConfig+0x4c4>)
 8006662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006664:	f003 0302 	and.w	r3, r3, #2
 8006668:	2b00      	cmp	r3, #0
 800666a:	d1e9      	bne.n	8006640 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f003 0304 	and.w	r3, r3, #4
 8006674:	2b00      	cmp	r3, #0
 8006676:	f000 80a6 	beq.w	80067c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800667a:	2300      	movs	r3, #0
 800667c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800667e:	4b8b      	ldr	r3, [pc, #556]	; (80068ac <HAL_RCC_OscConfig+0x4c4>)
 8006680:	69db      	ldr	r3, [r3, #28]
 8006682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006686:	2b00      	cmp	r3, #0
 8006688:	d10d      	bne.n	80066a6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800668a:	4b88      	ldr	r3, [pc, #544]	; (80068ac <HAL_RCC_OscConfig+0x4c4>)
 800668c:	69db      	ldr	r3, [r3, #28]
 800668e:	4a87      	ldr	r2, [pc, #540]	; (80068ac <HAL_RCC_OscConfig+0x4c4>)
 8006690:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006694:	61d3      	str	r3, [r2, #28]
 8006696:	4b85      	ldr	r3, [pc, #532]	; (80068ac <HAL_RCC_OscConfig+0x4c4>)
 8006698:	69db      	ldr	r3, [r3, #28]
 800669a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800669e:	60bb      	str	r3, [r7, #8]
 80066a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80066a2:	2301      	movs	r3, #1
 80066a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066a6:	4b82      	ldr	r3, [pc, #520]	; (80068b0 <HAL_RCC_OscConfig+0x4c8>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d118      	bne.n	80066e4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80066b2:	4b7f      	ldr	r3, [pc, #508]	; (80068b0 <HAL_RCC_OscConfig+0x4c8>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a7e      	ldr	r2, [pc, #504]	; (80068b0 <HAL_RCC_OscConfig+0x4c8>)
 80066b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80066be:	f7fe fac9 	bl	8004c54 <HAL_GetTick>
 80066c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066c4:	e008      	b.n	80066d8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066c6:	f7fe fac5 	bl	8004c54 <HAL_GetTick>
 80066ca:	4602      	mov	r2, r0
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	1ad3      	subs	r3, r2, r3
 80066d0:	2b64      	cmp	r3, #100	; 0x64
 80066d2:	d901      	bls.n	80066d8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80066d4:	2303      	movs	r3, #3
 80066d6:	e103      	b.n	80068e0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066d8:	4b75      	ldr	r3, [pc, #468]	; (80068b0 <HAL_RCC_OscConfig+0x4c8>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d0f0      	beq.n	80066c6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	68db      	ldr	r3, [r3, #12]
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d106      	bne.n	80066fa <HAL_RCC_OscConfig+0x312>
 80066ec:	4b6f      	ldr	r3, [pc, #444]	; (80068ac <HAL_RCC_OscConfig+0x4c4>)
 80066ee:	6a1b      	ldr	r3, [r3, #32]
 80066f0:	4a6e      	ldr	r2, [pc, #440]	; (80068ac <HAL_RCC_OscConfig+0x4c4>)
 80066f2:	f043 0301 	orr.w	r3, r3, #1
 80066f6:	6213      	str	r3, [r2, #32]
 80066f8:	e02d      	b.n	8006756 <HAL_RCC_OscConfig+0x36e>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	68db      	ldr	r3, [r3, #12]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d10c      	bne.n	800671c <HAL_RCC_OscConfig+0x334>
 8006702:	4b6a      	ldr	r3, [pc, #424]	; (80068ac <HAL_RCC_OscConfig+0x4c4>)
 8006704:	6a1b      	ldr	r3, [r3, #32]
 8006706:	4a69      	ldr	r2, [pc, #420]	; (80068ac <HAL_RCC_OscConfig+0x4c4>)
 8006708:	f023 0301 	bic.w	r3, r3, #1
 800670c:	6213      	str	r3, [r2, #32]
 800670e:	4b67      	ldr	r3, [pc, #412]	; (80068ac <HAL_RCC_OscConfig+0x4c4>)
 8006710:	6a1b      	ldr	r3, [r3, #32]
 8006712:	4a66      	ldr	r2, [pc, #408]	; (80068ac <HAL_RCC_OscConfig+0x4c4>)
 8006714:	f023 0304 	bic.w	r3, r3, #4
 8006718:	6213      	str	r3, [r2, #32]
 800671a:	e01c      	b.n	8006756 <HAL_RCC_OscConfig+0x36e>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	2b05      	cmp	r3, #5
 8006722:	d10c      	bne.n	800673e <HAL_RCC_OscConfig+0x356>
 8006724:	4b61      	ldr	r3, [pc, #388]	; (80068ac <HAL_RCC_OscConfig+0x4c4>)
 8006726:	6a1b      	ldr	r3, [r3, #32]
 8006728:	4a60      	ldr	r2, [pc, #384]	; (80068ac <HAL_RCC_OscConfig+0x4c4>)
 800672a:	f043 0304 	orr.w	r3, r3, #4
 800672e:	6213      	str	r3, [r2, #32]
 8006730:	4b5e      	ldr	r3, [pc, #376]	; (80068ac <HAL_RCC_OscConfig+0x4c4>)
 8006732:	6a1b      	ldr	r3, [r3, #32]
 8006734:	4a5d      	ldr	r2, [pc, #372]	; (80068ac <HAL_RCC_OscConfig+0x4c4>)
 8006736:	f043 0301 	orr.w	r3, r3, #1
 800673a:	6213      	str	r3, [r2, #32]
 800673c:	e00b      	b.n	8006756 <HAL_RCC_OscConfig+0x36e>
 800673e:	4b5b      	ldr	r3, [pc, #364]	; (80068ac <HAL_RCC_OscConfig+0x4c4>)
 8006740:	6a1b      	ldr	r3, [r3, #32]
 8006742:	4a5a      	ldr	r2, [pc, #360]	; (80068ac <HAL_RCC_OscConfig+0x4c4>)
 8006744:	f023 0301 	bic.w	r3, r3, #1
 8006748:	6213      	str	r3, [r2, #32]
 800674a:	4b58      	ldr	r3, [pc, #352]	; (80068ac <HAL_RCC_OscConfig+0x4c4>)
 800674c:	6a1b      	ldr	r3, [r3, #32]
 800674e:	4a57      	ldr	r2, [pc, #348]	; (80068ac <HAL_RCC_OscConfig+0x4c4>)
 8006750:	f023 0304 	bic.w	r3, r3, #4
 8006754:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	68db      	ldr	r3, [r3, #12]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d015      	beq.n	800678a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800675e:	f7fe fa79 	bl	8004c54 <HAL_GetTick>
 8006762:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006764:	e00a      	b.n	800677c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006766:	f7fe fa75 	bl	8004c54 <HAL_GetTick>
 800676a:	4602      	mov	r2, r0
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	1ad3      	subs	r3, r2, r3
 8006770:	f241 3288 	movw	r2, #5000	; 0x1388
 8006774:	4293      	cmp	r3, r2
 8006776:	d901      	bls.n	800677c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006778:	2303      	movs	r3, #3
 800677a:	e0b1      	b.n	80068e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800677c:	4b4b      	ldr	r3, [pc, #300]	; (80068ac <HAL_RCC_OscConfig+0x4c4>)
 800677e:	6a1b      	ldr	r3, [r3, #32]
 8006780:	f003 0302 	and.w	r3, r3, #2
 8006784:	2b00      	cmp	r3, #0
 8006786:	d0ee      	beq.n	8006766 <HAL_RCC_OscConfig+0x37e>
 8006788:	e014      	b.n	80067b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800678a:	f7fe fa63 	bl	8004c54 <HAL_GetTick>
 800678e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006790:	e00a      	b.n	80067a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006792:	f7fe fa5f 	bl	8004c54 <HAL_GetTick>
 8006796:	4602      	mov	r2, r0
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	1ad3      	subs	r3, r2, r3
 800679c:	f241 3288 	movw	r2, #5000	; 0x1388
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d901      	bls.n	80067a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80067a4:	2303      	movs	r3, #3
 80067a6:	e09b      	b.n	80068e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80067a8:	4b40      	ldr	r3, [pc, #256]	; (80068ac <HAL_RCC_OscConfig+0x4c4>)
 80067aa:	6a1b      	ldr	r3, [r3, #32]
 80067ac:	f003 0302 	and.w	r3, r3, #2
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d1ee      	bne.n	8006792 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80067b4:	7dfb      	ldrb	r3, [r7, #23]
 80067b6:	2b01      	cmp	r3, #1
 80067b8:	d105      	bne.n	80067c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80067ba:	4b3c      	ldr	r3, [pc, #240]	; (80068ac <HAL_RCC_OscConfig+0x4c4>)
 80067bc:	69db      	ldr	r3, [r3, #28]
 80067be:	4a3b      	ldr	r2, [pc, #236]	; (80068ac <HAL_RCC_OscConfig+0x4c4>)
 80067c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067c4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	69db      	ldr	r3, [r3, #28]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	f000 8087 	beq.w	80068de <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80067d0:	4b36      	ldr	r3, [pc, #216]	; (80068ac <HAL_RCC_OscConfig+0x4c4>)
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	f003 030c 	and.w	r3, r3, #12
 80067d8:	2b08      	cmp	r3, #8
 80067da:	d061      	beq.n	80068a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	69db      	ldr	r3, [r3, #28]
 80067e0:	2b02      	cmp	r3, #2
 80067e2:	d146      	bne.n	8006872 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067e4:	4b33      	ldr	r3, [pc, #204]	; (80068b4 <HAL_RCC_OscConfig+0x4cc>)
 80067e6:	2200      	movs	r2, #0
 80067e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067ea:	f7fe fa33 	bl	8004c54 <HAL_GetTick>
 80067ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80067f0:	e008      	b.n	8006804 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067f2:	f7fe fa2f 	bl	8004c54 <HAL_GetTick>
 80067f6:	4602      	mov	r2, r0
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	1ad3      	subs	r3, r2, r3
 80067fc:	2b02      	cmp	r3, #2
 80067fe:	d901      	bls.n	8006804 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006800:	2303      	movs	r3, #3
 8006802:	e06d      	b.n	80068e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006804:	4b29      	ldr	r3, [pc, #164]	; (80068ac <HAL_RCC_OscConfig+0x4c4>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800680c:	2b00      	cmp	r3, #0
 800680e:	d1f0      	bne.n	80067f2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6a1b      	ldr	r3, [r3, #32]
 8006814:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006818:	d108      	bne.n	800682c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800681a:	4b24      	ldr	r3, [pc, #144]	; (80068ac <HAL_RCC_OscConfig+0x4c4>)
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	4921      	ldr	r1, [pc, #132]	; (80068ac <HAL_RCC_OscConfig+0x4c4>)
 8006828:	4313      	orrs	r3, r2
 800682a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800682c:	4b1f      	ldr	r3, [pc, #124]	; (80068ac <HAL_RCC_OscConfig+0x4c4>)
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6a19      	ldr	r1, [r3, #32]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800683c:	430b      	orrs	r3, r1
 800683e:	491b      	ldr	r1, [pc, #108]	; (80068ac <HAL_RCC_OscConfig+0x4c4>)
 8006840:	4313      	orrs	r3, r2
 8006842:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006844:	4b1b      	ldr	r3, [pc, #108]	; (80068b4 <HAL_RCC_OscConfig+0x4cc>)
 8006846:	2201      	movs	r2, #1
 8006848:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800684a:	f7fe fa03 	bl	8004c54 <HAL_GetTick>
 800684e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006850:	e008      	b.n	8006864 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006852:	f7fe f9ff 	bl	8004c54 <HAL_GetTick>
 8006856:	4602      	mov	r2, r0
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	1ad3      	subs	r3, r2, r3
 800685c:	2b02      	cmp	r3, #2
 800685e:	d901      	bls.n	8006864 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006860:	2303      	movs	r3, #3
 8006862:	e03d      	b.n	80068e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006864:	4b11      	ldr	r3, [pc, #68]	; (80068ac <HAL_RCC_OscConfig+0x4c4>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800686c:	2b00      	cmp	r3, #0
 800686e:	d0f0      	beq.n	8006852 <HAL_RCC_OscConfig+0x46a>
 8006870:	e035      	b.n	80068de <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006872:	4b10      	ldr	r3, [pc, #64]	; (80068b4 <HAL_RCC_OscConfig+0x4cc>)
 8006874:	2200      	movs	r2, #0
 8006876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006878:	f7fe f9ec 	bl	8004c54 <HAL_GetTick>
 800687c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800687e:	e008      	b.n	8006892 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006880:	f7fe f9e8 	bl	8004c54 <HAL_GetTick>
 8006884:	4602      	mov	r2, r0
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	1ad3      	subs	r3, r2, r3
 800688a:	2b02      	cmp	r3, #2
 800688c:	d901      	bls.n	8006892 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800688e:	2303      	movs	r3, #3
 8006890:	e026      	b.n	80068e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006892:	4b06      	ldr	r3, [pc, #24]	; (80068ac <HAL_RCC_OscConfig+0x4c4>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800689a:	2b00      	cmp	r3, #0
 800689c:	d1f0      	bne.n	8006880 <HAL_RCC_OscConfig+0x498>
 800689e:	e01e      	b.n	80068de <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	69db      	ldr	r3, [r3, #28]
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	d107      	bne.n	80068b8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80068a8:	2301      	movs	r3, #1
 80068aa:	e019      	b.n	80068e0 <HAL_RCC_OscConfig+0x4f8>
 80068ac:	40021000 	.word	0x40021000
 80068b0:	40007000 	.word	0x40007000
 80068b4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80068b8:	4b0b      	ldr	r3, [pc, #44]	; (80068e8 <HAL_RCC_OscConfig+0x500>)
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6a1b      	ldr	r3, [r3, #32]
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d106      	bne.n	80068da <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068d6:	429a      	cmp	r2, r3
 80068d8:	d001      	beq.n	80068de <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	e000      	b.n	80068e0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80068de:	2300      	movs	r3, #0
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3718      	adds	r7, #24
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}
 80068e8:	40021000 	.word	0x40021000

080068ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b084      	sub	sp, #16
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d101      	bne.n	8006900 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80068fc:	2301      	movs	r3, #1
 80068fe:	e0d0      	b.n	8006aa2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006900:	4b6a      	ldr	r3, [pc, #424]	; (8006aac <HAL_RCC_ClockConfig+0x1c0>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f003 0307 	and.w	r3, r3, #7
 8006908:	683a      	ldr	r2, [r7, #0]
 800690a:	429a      	cmp	r2, r3
 800690c:	d910      	bls.n	8006930 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800690e:	4b67      	ldr	r3, [pc, #412]	; (8006aac <HAL_RCC_ClockConfig+0x1c0>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f023 0207 	bic.w	r2, r3, #7
 8006916:	4965      	ldr	r1, [pc, #404]	; (8006aac <HAL_RCC_ClockConfig+0x1c0>)
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	4313      	orrs	r3, r2
 800691c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800691e:	4b63      	ldr	r3, [pc, #396]	; (8006aac <HAL_RCC_ClockConfig+0x1c0>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f003 0307 	and.w	r3, r3, #7
 8006926:	683a      	ldr	r2, [r7, #0]
 8006928:	429a      	cmp	r2, r3
 800692a:	d001      	beq.n	8006930 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800692c:	2301      	movs	r3, #1
 800692e:	e0b8      	b.n	8006aa2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f003 0302 	and.w	r3, r3, #2
 8006938:	2b00      	cmp	r3, #0
 800693a:	d020      	beq.n	800697e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f003 0304 	and.w	r3, r3, #4
 8006944:	2b00      	cmp	r3, #0
 8006946:	d005      	beq.n	8006954 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006948:	4b59      	ldr	r3, [pc, #356]	; (8006ab0 <HAL_RCC_ClockConfig+0x1c4>)
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	4a58      	ldr	r2, [pc, #352]	; (8006ab0 <HAL_RCC_ClockConfig+0x1c4>)
 800694e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006952:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f003 0308 	and.w	r3, r3, #8
 800695c:	2b00      	cmp	r3, #0
 800695e:	d005      	beq.n	800696c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006960:	4b53      	ldr	r3, [pc, #332]	; (8006ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	4a52      	ldr	r2, [pc, #328]	; (8006ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8006966:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800696a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800696c:	4b50      	ldr	r3, [pc, #320]	; (8006ab0 <HAL_RCC_ClockConfig+0x1c4>)
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	494d      	ldr	r1, [pc, #308]	; (8006ab0 <HAL_RCC_ClockConfig+0x1c4>)
 800697a:	4313      	orrs	r3, r2
 800697c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f003 0301 	and.w	r3, r3, #1
 8006986:	2b00      	cmp	r3, #0
 8006988:	d040      	beq.n	8006a0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	2b01      	cmp	r3, #1
 8006990:	d107      	bne.n	80069a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006992:	4b47      	ldr	r3, [pc, #284]	; (8006ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800699a:	2b00      	cmp	r3, #0
 800699c:	d115      	bne.n	80069ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	e07f      	b.n	8006aa2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	2b02      	cmp	r3, #2
 80069a8:	d107      	bne.n	80069ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069aa:	4b41      	ldr	r3, [pc, #260]	; (8006ab0 <HAL_RCC_ClockConfig+0x1c4>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d109      	bne.n	80069ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069b6:	2301      	movs	r3, #1
 80069b8:	e073      	b.n	8006aa2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069ba:	4b3d      	ldr	r3, [pc, #244]	; (8006ab0 <HAL_RCC_ClockConfig+0x1c4>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f003 0302 	and.w	r3, r3, #2
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d101      	bne.n	80069ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069c6:	2301      	movs	r3, #1
 80069c8:	e06b      	b.n	8006aa2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80069ca:	4b39      	ldr	r3, [pc, #228]	; (8006ab0 <HAL_RCC_ClockConfig+0x1c4>)
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	f023 0203 	bic.w	r2, r3, #3
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	4936      	ldr	r1, [pc, #216]	; (8006ab0 <HAL_RCC_ClockConfig+0x1c4>)
 80069d8:	4313      	orrs	r3, r2
 80069da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80069dc:	f7fe f93a 	bl	8004c54 <HAL_GetTick>
 80069e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069e2:	e00a      	b.n	80069fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069e4:	f7fe f936 	bl	8004c54 <HAL_GetTick>
 80069e8:	4602      	mov	r2, r0
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	1ad3      	subs	r3, r2, r3
 80069ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d901      	bls.n	80069fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80069f6:	2303      	movs	r3, #3
 80069f8:	e053      	b.n	8006aa2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069fa:	4b2d      	ldr	r3, [pc, #180]	; (8006ab0 <HAL_RCC_ClockConfig+0x1c4>)
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	f003 020c 	and.w	r2, r3, #12
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	009b      	lsls	r3, r3, #2
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d1eb      	bne.n	80069e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006a0c:	4b27      	ldr	r3, [pc, #156]	; (8006aac <HAL_RCC_ClockConfig+0x1c0>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f003 0307 	and.w	r3, r3, #7
 8006a14:	683a      	ldr	r2, [r7, #0]
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d210      	bcs.n	8006a3c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a1a:	4b24      	ldr	r3, [pc, #144]	; (8006aac <HAL_RCC_ClockConfig+0x1c0>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f023 0207 	bic.w	r2, r3, #7
 8006a22:	4922      	ldr	r1, [pc, #136]	; (8006aac <HAL_RCC_ClockConfig+0x1c0>)
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	4313      	orrs	r3, r2
 8006a28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a2a:	4b20      	ldr	r3, [pc, #128]	; (8006aac <HAL_RCC_ClockConfig+0x1c0>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f003 0307 	and.w	r3, r3, #7
 8006a32:	683a      	ldr	r2, [r7, #0]
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d001      	beq.n	8006a3c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	e032      	b.n	8006aa2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f003 0304 	and.w	r3, r3, #4
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d008      	beq.n	8006a5a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a48:	4b19      	ldr	r3, [pc, #100]	; (8006ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	68db      	ldr	r3, [r3, #12]
 8006a54:	4916      	ldr	r1, [pc, #88]	; (8006ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8006a56:	4313      	orrs	r3, r2
 8006a58:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f003 0308 	and.w	r3, r3, #8
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d009      	beq.n	8006a7a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006a66:	4b12      	ldr	r3, [pc, #72]	; (8006ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	691b      	ldr	r3, [r3, #16]
 8006a72:	00db      	lsls	r3, r3, #3
 8006a74:	490e      	ldr	r1, [pc, #56]	; (8006ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8006a76:	4313      	orrs	r3, r2
 8006a78:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006a7a:	f000 f821 	bl	8006ac0 <HAL_RCC_GetSysClockFreq>
 8006a7e:	4602      	mov	r2, r0
 8006a80:	4b0b      	ldr	r3, [pc, #44]	; (8006ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	091b      	lsrs	r3, r3, #4
 8006a86:	f003 030f 	and.w	r3, r3, #15
 8006a8a:	490a      	ldr	r1, [pc, #40]	; (8006ab4 <HAL_RCC_ClockConfig+0x1c8>)
 8006a8c:	5ccb      	ldrb	r3, [r1, r3]
 8006a8e:	fa22 f303 	lsr.w	r3, r2, r3
 8006a92:	4a09      	ldr	r2, [pc, #36]	; (8006ab8 <HAL_RCC_ClockConfig+0x1cc>)
 8006a94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006a96:	4b09      	ldr	r3, [pc, #36]	; (8006abc <HAL_RCC_ClockConfig+0x1d0>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f7fe f898 	bl	8004bd0 <HAL_InitTick>

  return HAL_OK;
 8006aa0:	2300      	movs	r3, #0
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3710      	adds	r7, #16
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
 8006aaa:	bf00      	nop
 8006aac:	40022000 	.word	0x40022000
 8006ab0:	40021000 	.word	0x40021000
 8006ab4:	080089e8 	.word	0x080089e8
 8006ab8:	20000060 	.word	0x20000060
 8006abc:	2000006c 	.word	0x2000006c

08006ac0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ac0:	b490      	push	{r4, r7}
 8006ac2:	b08a      	sub	sp, #40	; 0x28
 8006ac4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006ac6:	4b29      	ldr	r3, [pc, #164]	; (8006b6c <HAL_RCC_GetSysClockFreq+0xac>)
 8006ac8:	1d3c      	adds	r4, r7, #4
 8006aca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006acc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006ad0:	f240 2301 	movw	r3, #513	; 0x201
 8006ad4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	61fb      	str	r3, [r7, #28]
 8006ada:	2300      	movs	r3, #0
 8006adc:	61bb      	str	r3, [r7, #24]
 8006ade:	2300      	movs	r3, #0
 8006ae0:	627b      	str	r3, [r7, #36]	; 0x24
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006aea:	4b21      	ldr	r3, [pc, #132]	; (8006b70 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006af0:	69fb      	ldr	r3, [r7, #28]
 8006af2:	f003 030c 	and.w	r3, r3, #12
 8006af6:	2b04      	cmp	r3, #4
 8006af8:	d002      	beq.n	8006b00 <HAL_RCC_GetSysClockFreq+0x40>
 8006afa:	2b08      	cmp	r3, #8
 8006afc:	d003      	beq.n	8006b06 <HAL_RCC_GetSysClockFreq+0x46>
 8006afe:	e02b      	b.n	8006b58 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006b00:	4b1c      	ldr	r3, [pc, #112]	; (8006b74 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006b02:	623b      	str	r3, [r7, #32]
      break;
 8006b04:	e02b      	b.n	8006b5e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006b06:	69fb      	ldr	r3, [r7, #28]
 8006b08:	0c9b      	lsrs	r3, r3, #18
 8006b0a:	f003 030f 	and.w	r3, r3, #15
 8006b0e:	3328      	adds	r3, #40	; 0x28
 8006b10:	443b      	add	r3, r7
 8006b12:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006b16:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006b18:	69fb      	ldr	r3, [r7, #28]
 8006b1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d012      	beq.n	8006b48 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006b22:	4b13      	ldr	r3, [pc, #76]	; (8006b70 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	0c5b      	lsrs	r3, r3, #17
 8006b28:	f003 0301 	and.w	r3, r3, #1
 8006b2c:	3328      	adds	r3, #40	; 0x28
 8006b2e:	443b      	add	r3, r7
 8006b30:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006b34:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	4a0e      	ldr	r2, [pc, #56]	; (8006b74 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006b3a:	fb03 f202 	mul.w	r2, r3, r2
 8006b3e:	69bb      	ldr	r3, [r7, #24]
 8006b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b44:	627b      	str	r3, [r7, #36]	; 0x24
 8006b46:	e004      	b.n	8006b52 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	4a0b      	ldr	r2, [pc, #44]	; (8006b78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b4c:	fb02 f303 	mul.w	r3, r2, r3
 8006b50:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b54:	623b      	str	r3, [r7, #32]
      break;
 8006b56:	e002      	b.n	8006b5e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006b58:	4b06      	ldr	r3, [pc, #24]	; (8006b74 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006b5a:	623b      	str	r3, [r7, #32]
      break;
 8006b5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006b5e:	6a3b      	ldr	r3, [r7, #32]
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3728      	adds	r7, #40	; 0x28
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bc90      	pop	{r4, r7}
 8006b68:	4770      	bx	lr
 8006b6a:	bf00      	nop
 8006b6c:	080089d8 	.word	0x080089d8
 8006b70:	40021000 	.word	0x40021000
 8006b74:	007a1200 	.word	0x007a1200
 8006b78:	003d0900 	.word	0x003d0900

08006b7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b80:	4b02      	ldr	r3, [pc, #8]	; (8006b8c <HAL_RCC_GetHCLKFreq+0x10>)
 8006b82:	681b      	ldr	r3, [r3, #0]
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bc80      	pop	{r7}
 8006b8a:	4770      	bx	lr
 8006b8c:	20000060 	.word	0x20000060

08006b90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006b94:	f7ff fff2 	bl	8006b7c <HAL_RCC_GetHCLKFreq>
 8006b98:	4602      	mov	r2, r0
 8006b9a:	4b05      	ldr	r3, [pc, #20]	; (8006bb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	0a1b      	lsrs	r3, r3, #8
 8006ba0:	f003 0307 	and.w	r3, r3, #7
 8006ba4:	4903      	ldr	r1, [pc, #12]	; (8006bb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ba6:	5ccb      	ldrb	r3, [r1, r3]
 8006ba8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	bd80      	pop	{r7, pc}
 8006bb0:	40021000 	.word	0x40021000
 8006bb4:	080089f8 	.word	0x080089f8

08006bb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006bbc:	f7ff ffde 	bl	8006b7c <HAL_RCC_GetHCLKFreq>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	4b05      	ldr	r3, [pc, #20]	; (8006bd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	0adb      	lsrs	r3, r3, #11
 8006bc8:	f003 0307 	and.w	r3, r3, #7
 8006bcc:	4903      	ldr	r1, [pc, #12]	; (8006bdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8006bce:	5ccb      	ldrb	r3, [r1, r3]
 8006bd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	bd80      	pop	{r7, pc}
 8006bd8:	40021000 	.word	0x40021000
 8006bdc:	080089f8 	.word	0x080089f8

08006be0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b085      	sub	sp, #20
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006be8:	4b0a      	ldr	r3, [pc, #40]	; (8006c14 <RCC_Delay+0x34>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a0a      	ldr	r2, [pc, #40]	; (8006c18 <RCC_Delay+0x38>)
 8006bee:	fba2 2303 	umull	r2, r3, r2, r3
 8006bf2:	0a5b      	lsrs	r3, r3, #9
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	fb02 f303 	mul.w	r3, r2, r3
 8006bfa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006bfc:	bf00      	nop
  }
  while (Delay --);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	1e5a      	subs	r2, r3, #1
 8006c02:	60fa      	str	r2, [r7, #12]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d1f9      	bne.n	8006bfc <RCC_Delay+0x1c>
}
 8006c08:	bf00      	nop
 8006c0a:	bf00      	nop
 8006c0c:	3714      	adds	r7, #20
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bc80      	pop	{r7}
 8006c12:	4770      	bx	lr
 8006c14:	20000060 	.word	0x20000060
 8006c18:	10624dd3 	.word	0x10624dd3

08006c1c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b086      	sub	sp, #24
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006c24:	2300      	movs	r3, #0
 8006c26:	613b      	str	r3, [r7, #16]
 8006c28:	2300      	movs	r3, #0
 8006c2a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f003 0301 	and.w	r3, r3, #1
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d07d      	beq.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c3c:	4b4f      	ldr	r3, [pc, #316]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c3e:	69db      	ldr	r3, [r3, #28]
 8006c40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d10d      	bne.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c48:	4b4c      	ldr	r3, [pc, #304]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c4a:	69db      	ldr	r3, [r3, #28]
 8006c4c:	4a4b      	ldr	r2, [pc, #300]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c52:	61d3      	str	r3, [r2, #28]
 8006c54:	4b49      	ldr	r3, [pc, #292]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c56:	69db      	ldr	r3, [r3, #28]
 8006c58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c5c:	60bb      	str	r3, [r7, #8]
 8006c5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c60:	2301      	movs	r3, #1
 8006c62:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c64:	4b46      	ldr	r3, [pc, #280]	; (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d118      	bne.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c70:	4b43      	ldr	r3, [pc, #268]	; (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a42      	ldr	r2, [pc, #264]	; (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006c76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c7a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c7c:	f7fd ffea 	bl	8004c54 <HAL_GetTick>
 8006c80:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c82:	e008      	b.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c84:	f7fd ffe6 	bl	8004c54 <HAL_GetTick>
 8006c88:	4602      	mov	r2, r0
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	1ad3      	subs	r3, r2, r3
 8006c8e:	2b64      	cmp	r3, #100	; 0x64
 8006c90:	d901      	bls.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006c92:	2303      	movs	r3, #3
 8006c94:	e06d      	b.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c96:	4b3a      	ldr	r3, [pc, #232]	; (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d0f0      	beq.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006ca2:	4b36      	ldr	r3, [pc, #216]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ca4:	6a1b      	ldr	r3, [r3, #32]
 8006ca6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006caa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d02e      	beq.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cba:	68fa      	ldr	r2, [r7, #12]
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d027      	beq.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006cc0:	4b2e      	ldr	r3, [pc, #184]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006cc2:	6a1b      	ldr	r3, [r3, #32]
 8006cc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cc8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006cca:	4b2e      	ldr	r3, [pc, #184]	; (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006ccc:	2201      	movs	r2, #1
 8006cce:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006cd0:	4b2c      	ldr	r3, [pc, #176]	; (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006cd6:	4a29      	ldr	r2, [pc, #164]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f003 0301 	and.w	r3, r3, #1
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d014      	beq.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ce6:	f7fd ffb5 	bl	8004c54 <HAL_GetTick>
 8006cea:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cec:	e00a      	b.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cee:	f7fd ffb1 	bl	8004c54 <HAL_GetTick>
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	1ad3      	subs	r3, r2, r3
 8006cf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d901      	bls.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006d00:	2303      	movs	r3, #3
 8006d02:	e036      	b.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d04:	4b1d      	ldr	r3, [pc, #116]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d06:	6a1b      	ldr	r3, [r3, #32]
 8006d08:	f003 0302 	and.w	r3, r3, #2
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d0ee      	beq.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d10:	4b1a      	ldr	r3, [pc, #104]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d12:	6a1b      	ldr	r3, [r3, #32]
 8006d14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	4917      	ldr	r1, [pc, #92]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006d22:	7dfb      	ldrb	r3, [r7, #23]
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d105      	bne.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d28:	4b14      	ldr	r3, [pc, #80]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d2a:	69db      	ldr	r3, [r3, #28]
 8006d2c:	4a13      	ldr	r2, [pc, #76]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d32:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f003 0302 	and.w	r3, r3, #2
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d008      	beq.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006d40:	4b0e      	ldr	r3, [pc, #56]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	490b      	ldr	r1, [pc, #44]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f003 0310 	and.w	r3, r3, #16
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d008      	beq.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006d5e:	4b07      	ldr	r3, [pc, #28]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	68db      	ldr	r3, [r3, #12]
 8006d6a:	4904      	ldr	r1, [pc, #16]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006d70:	2300      	movs	r3, #0
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3718      	adds	r7, #24
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}
 8006d7a:	bf00      	nop
 8006d7c:	40021000 	.word	0x40021000
 8006d80:	40007000 	.word	0x40007000
 8006d84:	42420440 	.word	0x42420440

08006d88 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b082      	sub	sp, #8
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d101      	bne.n	8006d9a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	e041      	b.n	8006e1e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d106      	bne.n	8006db4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2200      	movs	r2, #0
 8006daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f7fd fb2e 	bl	8004410 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2202      	movs	r2, #2
 8006db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	3304      	adds	r3, #4
 8006dc4:	4619      	mov	r1, r3
 8006dc6:	4610      	mov	r0, r2
 8006dc8:	f000 fabe 	bl	8007348 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2201      	movs	r2, #1
 8006de0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2201      	movs	r2, #1
 8006de8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2201      	movs	r2, #1
 8006df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2201      	movs	r2, #1
 8006df8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2201      	movs	r2, #1
 8006e08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2201      	movs	r2, #1
 8006e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e1c:	2300      	movs	r3, #0
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3708      	adds	r7, #8
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
	...

08006e28 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b084      	sub	sp, #16
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d109      	bne.n	8006e4c <HAL_TIM_PWM_Start+0x24>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e3e:	b2db      	uxtb	r3, r3
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	bf14      	ite	ne
 8006e44:	2301      	movne	r3, #1
 8006e46:	2300      	moveq	r3, #0
 8006e48:	b2db      	uxtb	r3, r3
 8006e4a:	e022      	b.n	8006e92 <HAL_TIM_PWM_Start+0x6a>
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	2b04      	cmp	r3, #4
 8006e50:	d109      	bne.n	8006e66 <HAL_TIM_PWM_Start+0x3e>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006e58:	b2db      	uxtb	r3, r3
 8006e5a:	2b01      	cmp	r3, #1
 8006e5c:	bf14      	ite	ne
 8006e5e:	2301      	movne	r3, #1
 8006e60:	2300      	moveq	r3, #0
 8006e62:	b2db      	uxtb	r3, r3
 8006e64:	e015      	b.n	8006e92 <HAL_TIM_PWM_Start+0x6a>
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	2b08      	cmp	r3, #8
 8006e6a:	d109      	bne.n	8006e80 <HAL_TIM_PWM_Start+0x58>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	bf14      	ite	ne
 8006e78:	2301      	movne	r3, #1
 8006e7a:	2300      	moveq	r3, #0
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	e008      	b.n	8006e92 <HAL_TIM_PWM_Start+0x6a>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	bf14      	ite	ne
 8006e8c:	2301      	movne	r3, #1
 8006e8e:	2300      	moveq	r3, #0
 8006e90:	b2db      	uxtb	r3, r3
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d001      	beq.n	8006e9a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006e96:	2301      	movs	r3, #1
 8006e98:	e05e      	b.n	8006f58 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d104      	bne.n	8006eaa <HAL_TIM_PWM_Start+0x82>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2202      	movs	r2, #2
 8006ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ea8:	e013      	b.n	8006ed2 <HAL_TIM_PWM_Start+0xaa>
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	2b04      	cmp	r3, #4
 8006eae:	d104      	bne.n	8006eba <HAL_TIM_PWM_Start+0x92>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2202      	movs	r2, #2
 8006eb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006eb8:	e00b      	b.n	8006ed2 <HAL_TIM_PWM_Start+0xaa>
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	2b08      	cmp	r3, #8
 8006ebe:	d104      	bne.n	8006eca <HAL_TIM_PWM_Start+0xa2>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2202      	movs	r2, #2
 8006ec4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ec8:	e003      	b.n	8006ed2 <HAL_TIM_PWM_Start+0xaa>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2202      	movs	r2, #2
 8006ece:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	6839      	ldr	r1, [r7, #0]
 8006eda:	4618      	mov	r0, r3
 8006edc:	f000 fc1e 	bl	800771c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a1e      	ldr	r2, [pc, #120]	; (8006f60 <HAL_TIM_PWM_Start+0x138>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d107      	bne.n	8006efa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006ef8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a18      	ldr	r2, [pc, #96]	; (8006f60 <HAL_TIM_PWM_Start+0x138>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d00e      	beq.n	8006f22 <HAL_TIM_PWM_Start+0xfa>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f0c:	d009      	beq.n	8006f22 <HAL_TIM_PWM_Start+0xfa>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a14      	ldr	r2, [pc, #80]	; (8006f64 <HAL_TIM_PWM_Start+0x13c>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d004      	beq.n	8006f22 <HAL_TIM_PWM_Start+0xfa>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a12      	ldr	r2, [pc, #72]	; (8006f68 <HAL_TIM_PWM_Start+0x140>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d111      	bne.n	8006f46 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	f003 0307 	and.w	r3, r3, #7
 8006f2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2b06      	cmp	r3, #6
 8006f32:	d010      	beq.n	8006f56 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	681a      	ldr	r2, [r3, #0]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f042 0201 	orr.w	r2, r2, #1
 8006f42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f44:	e007      	b.n	8006f56 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f042 0201 	orr.w	r2, r2, #1
 8006f54:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006f56:	2300      	movs	r3, #0
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3710      	adds	r7, #16
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}
 8006f60:	40012c00 	.word	0x40012c00
 8006f64:	40000400 	.word	0x40000400
 8006f68:	40000800 	.word	0x40000800

08006f6c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b086      	sub	sp, #24
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d101      	bne.n	8006f80 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	e093      	b.n	80070a8 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d106      	bne.n	8006f9a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f7fd f9cf 	bl	8004338 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2202      	movs	r2, #2
 8006f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	687a      	ldr	r2, [r7, #4]
 8006faa:	6812      	ldr	r2, [r2, #0]
 8006fac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fb0:	f023 0307 	bic.w	r3, r3, #7
 8006fb4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	3304      	adds	r3, #4
 8006fbe:	4619      	mov	r1, r3
 8006fc0:	4610      	mov	r0, r2
 8006fc2:	f000 f9c1 	bl	8007348 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	699b      	ldr	r3, [r3, #24]
 8006fd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	6a1b      	ldr	r3, [r3, #32]
 8006fdc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	697a      	ldr	r2, [r7, #20]
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fee:	f023 0303 	bic.w	r3, r3, #3
 8006ff2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	689a      	ldr	r2, [r3, #8]
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	699b      	ldr	r3, [r3, #24]
 8006ffc:	021b      	lsls	r3, r3, #8
 8006ffe:	4313      	orrs	r3, r2
 8007000:	693a      	ldr	r2, [r7, #16]
 8007002:	4313      	orrs	r3, r2
 8007004:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800700c:	f023 030c 	bic.w	r3, r3, #12
 8007010:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007018:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800701c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	68da      	ldr	r2, [r3, #12]
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	69db      	ldr	r3, [r3, #28]
 8007026:	021b      	lsls	r3, r3, #8
 8007028:	4313      	orrs	r3, r2
 800702a:	693a      	ldr	r2, [r7, #16]
 800702c:	4313      	orrs	r3, r2
 800702e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	691b      	ldr	r3, [r3, #16]
 8007034:	011a      	lsls	r2, r3, #4
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	6a1b      	ldr	r3, [r3, #32]
 800703a:	031b      	lsls	r3, r3, #12
 800703c:	4313      	orrs	r3, r2
 800703e:	693a      	ldr	r2, [r7, #16]
 8007040:	4313      	orrs	r3, r2
 8007042:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800704a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	685a      	ldr	r2, [r3, #4]
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	695b      	ldr	r3, [r3, #20]
 8007054:	011b      	lsls	r3, r3, #4
 8007056:	4313      	orrs	r3, r2
 8007058:	68fa      	ldr	r2, [r7, #12]
 800705a:	4313      	orrs	r3, r2
 800705c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	697a      	ldr	r2, [r7, #20]
 8007064:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	693a      	ldr	r2, [r7, #16]
 800706c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	68fa      	ldr	r2, [r7, #12]
 8007074:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2201      	movs	r2, #1
 800707a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2201      	movs	r2, #1
 8007082:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2201      	movs	r2, #1
 800708a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2201      	movs	r2, #1
 8007092:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2201      	movs	r2, #1
 800709a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2201      	movs	r2, #1
 80070a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80070a6:	2300      	movs	r3, #0
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3718      	adds	r7, #24
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}

080070b0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b084      	sub	sp, #16
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
 80070b8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070c0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80070c8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80070d0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80070d8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d110      	bne.n	8007102 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80070e0:	7bfb      	ldrb	r3, [r7, #15]
 80070e2:	2b01      	cmp	r3, #1
 80070e4:	d102      	bne.n	80070ec <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80070e6:	7b7b      	ldrb	r3, [r7, #13]
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d001      	beq.n	80070f0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80070ec:	2301      	movs	r3, #1
 80070ee:	e069      	b.n	80071c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2202      	movs	r2, #2
 80070f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2202      	movs	r2, #2
 80070fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007100:	e031      	b.n	8007166 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	2b04      	cmp	r3, #4
 8007106:	d110      	bne.n	800712a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007108:	7bbb      	ldrb	r3, [r7, #14]
 800710a:	2b01      	cmp	r3, #1
 800710c:	d102      	bne.n	8007114 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800710e:	7b3b      	ldrb	r3, [r7, #12]
 8007110:	2b01      	cmp	r3, #1
 8007112:	d001      	beq.n	8007118 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007114:	2301      	movs	r3, #1
 8007116:	e055      	b.n	80071c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2202      	movs	r2, #2
 800711c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2202      	movs	r2, #2
 8007124:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007128:	e01d      	b.n	8007166 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800712a:	7bfb      	ldrb	r3, [r7, #15]
 800712c:	2b01      	cmp	r3, #1
 800712e:	d108      	bne.n	8007142 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007130:	7bbb      	ldrb	r3, [r7, #14]
 8007132:	2b01      	cmp	r3, #1
 8007134:	d105      	bne.n	8007142 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007136:	7b7b      	ldrb	r3, [r7, #13]
 8007138:	2b01      	cmp	r3, #1
 800713a:	d102      	bne.n	8007142 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800713c:	7b3b      	ldrb	r3, [r7, #12]
 800713e:	2b01      	cmp	r3, #1
 8007140:	d001      	beq.n	8007146 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007142:	2301      	movs	r3, #1
 8007144:	e03e      	b.n	80071c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2202      	movs	r2, #2
 800714a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2202      	movs	r2, #2
 8007152:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2202      	movs	r2, #2
 800715a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2202      	movs	r2, #2
 8007162:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d003      	beq.n	8007174 <HAL_TIM_Encoder_Start+0xc4>
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	2b04      	cmp	r3, #4
 8007170:	d008      	beq.n	8007184 <HAL_TIM_Encoder_Start+0xd4>
 8007172:	e00f      	b.n	8007194 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	2201      	movs	r2, #1
 800717a:	2100      	movs	r1, #0
 800717c:	4618      	mov	r0, r3
 800717e:	f000 facd 	bl	800771c <TIM_CCxChannelCmd>
      break;
 8007182:	e016      	b.n	80071b2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	2201      	movs	r2, #1
 800718a:	2104      	movs	r1, #4
 800718c:	4618      	mov	r0, r3
 800718e:	f000 fac5 	bl	800771c <TIM_CCxChannelCmd>
      break;
 8007192:	e00e      	b.n	80071b2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	2201      	movs	r2, #1
 800719a:	2100      	movs	r1, #0
 800719c:	4618      	mov	r0, r3
 800719e:	f000 fabd 	bl	800771c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	2201      	movs	r2, #1
 80071a8:	2104      	movs	r1, #4
 80071aa:	4618      	mov	r0, r3
 80071ac:	f000 fab6 	bl	800771c <TIM_CCxChannelCmd>
      break;
 80071b0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	681a      	ldr	r2, [r3, #0]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f042 0201 	orr.w	r2, r2, #1
 80071c0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80071c2:	2300      	movs	r3, #0
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3710      	adds	r7, #16
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}

080071cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b084      	sub	sp, #16
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	60f8      	str	r0, [r7, #12]
 80071d4:	60b9      	str	r1, [r7, #8]
 80071d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071de:	2b01      	cmp	r3, #1
 80071e0:	d101      	bne.n	80071e6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80071e2:	2302      	movs	r3, #2
 80071e4:	e0ac      	b.n	8007340 <HAL_TIM_PWM_ConfigChannel+0x174>
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2201      	movs	r2, #1
 80071ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2b0c      	cmp	r3, #12
 80071f2:	f200 809f 	bhi.w	8007334 <HAL_TIM_PWM_ConfigChannel+0x168>
 80071f6:	a201      	add	r2, pc, #4	; (adr r2, 80071fc <HAL_TIM_PWM_ConfigChannel+0x30>)
 80071f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071fc:	08007231 	.word	0x08007231
 8007200:	08007335 	.word	0x08007335
 8007204:	08007335 	.word	0x08007335
 8007208:	08007335 	.word	0x08007335
 800720c:	08007271 	.word	0x08007271
 8007210:	08007335 	.word	0x08007335
 8007214:	08007335 	.word	0x08007335
 8007218:	08007335 	.word	0x08007335
 800721c:	080072b3 	.word	0x080072b3
 8007220:	08007335 	.word	0x08007335
 8007224:	08007335 	.word	0x08007335
 8007228:	08007335 	.word	0x08007335
 800722c:	080072f3 	.word	0x080072f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	68b9      	ldr	r1, [r7, #8]
 8007236:	4618      	mov	r0, r3
 8007238:	f000 f8e8 	bl	800740c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	699a      	ldr	r2, [r3, #24]
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f042 0208 	orr.w	r2, r2, #8
 800724a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	699a      	ldr	r2, [r3, #24]
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f022 0204 	bic.w	r2, r2, #4
 800725a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	6999      	ldr	r1, [r3, #24]
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	691a      	ldr	r2, [r3, #16]
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	430a      	orrs	r2, r1
 800726c:	619a      	str	r2, [r3, #24]
      break;
 800726e:	e062      	b.n	8007336 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	68b9      	ldr	r1, [r7, #8]
 8007276:	4618      	mov	r0, r3
 8007278:	f000 f92e 	bl	80074d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	699a      	ldr	r2, [r3, #24]
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800728a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	699a      	ldr	r2, [r3, #24]
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800729a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	6999      	ldr	r1, [r3, #24]
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	691b      	ldr	r3, [r3, #16]
 80072a6:	021a      	lsls	r2, r3, #8
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	430a      	orrs	r2, r1
 80072ae:	619a      	str	r2, [r3, #24]
      break;
 80072b0:	e041      	b.n	8007336 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	68b9      	ldr	r1, [r7, #8]
 80072b8:	4618      	mov	r0, r3
 80072ba:	f000 f977 	bl	80075ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	69da      	ldr	r2, [r3, #28]
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f042 0208 	orr.w	r2, r2, #8
 80072cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	69da      	ldr	r2, [r3, #28]
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f022 0204 	bic.w	r2, r2, #4
 80072dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	69d9      	ldr	r1, [r3, #28]
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	691a      	ldr	r2, [r3, #16]
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	430a      	orrs	r2, r1
 80072ee:	61da      	str	r2, [r3, #28]
      break;
 80072f0:	e021      	b.n	8007336 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	68b9      	ldr	r1, [r7, #8]
 80072f8:	4618      	mov	r0, r3
 80072fa:	f000 f9c1 	bl	8007680 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	69da      	ldr	r2, [r3, #28]
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800730c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	69da      	ldr	r2, [r3, #28]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800731c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	69d9      	ldr	r1, [r3, #28]
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	691b      	ldr	r3, [r3, #16]
 8007328:	021a      	lsls	r2, r3, #8
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	430a      	orrs	r2, r1
 8007330:	61da      	str	r2, [r3, #28]
      break;
 8007332:	e000      	b.n	8007336 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8007334:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2200      	movs	r2, #0
 800733a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800733e:	2300      	movs	r3, #0
}
 8007340:	4618      	mov	r0, r3
 8007342:	3710      	adds	r7, #16
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}

08007348 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007348:	b480      	push	{r7}
 800734a:	b085      	sub	sp, #20
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	4a29      	ldr	r2, [pc, #164]	; (8007400 <TIM_Base_SetConfig+0xb8>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d00b      	beq.n	8007378 <TIM_Base_SetConfig+0x30>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007366:	d007      	beq.n	8007378 <TIM_Base_SetConfig+0x30>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	4a26      	ldr	r2, [pc, #152]	; (8007404 <TIM_Base_SetConfig+0xbc>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d003      	beq.n	8007378 <TIM_Base_SetConfig+0x30>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	4a25      	ldr	r2, [pc, #148]	; (8007408 <TIM_Base_SetConfig+0xc0>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d108      	bne.n	800738a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800737e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	68fa      	ldr	r2, [r7, #12]
 8007386:	4313      	orrs	r3, r2
 8007388:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	4a1c      	ldr	r2, [pc, #112]	; (8007400 <TIM_Base_SetConfig+0xb8>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d00b      	beq.n	80073aa <TIM_Base_SetConfig+0x62>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007398:	d007      	beq.n	80073aa <TIM_Base_SetConfig+0x62>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	4a19      	ldr	r2, [pc, #100]	; (8007404 <TIM_Base_SetConfig+0xbc>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d003      	beq.n	80073aa <TIM_Base_SetConfig+0x62>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	4a18      	ldr	r2, [pc, #96]	; (8007408 <TIM_Base_SetConfig+0xc0>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d108      	bne.n	80073bc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	68db      	ldr	r3, [r3, #12]
 80073b6:	68fa      	ldr	r2, [r7, #12]
 80073b8:	4313      	orrs	r3, r2
 80073ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	695b      	ldr	r3, [r3, #20]
 80073c6:	4313      	orrs	r3, r2
 80073c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	68fa      	ldr	r2, [r7, #12]
 80073ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	689a      	ldr	r2, [r3, #8]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	4a07      	ldr	r2, [pc, #28]	; (8007400 <TIM_Base_SetConfig+0xb8>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d103      	bne.n	80073f0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	691a      	ldr	r2, [r3, #16]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2201      	movs	r2, #1
 80073f4:	615a      	str	r2, [r3, #20]
}
 80073f6:	bf00      	nop
 80073f8:	3714      	adds	r7, #20
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bc80      	pop	{r7}
 80073fe:	4770      	bx	lr
 8007400:	40012c00 	.word	0x40012c00
 8007404:	40000400 	.word	0x40000400
 8007408:	40000800 	.word	0x40000800

0800740c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800740c:	b480      	push	{r7}
 800740e:	b087      	sub	sp, #28
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6a1b      	ldr	r3, [r3, #32]
 800741a:	f023 0201 	bic.w	r2, r3, #1
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6a1b      	ldr	r3, [r3, #32]
 8007426:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	699b      	ldr	r3, [r3, #24]
 8007432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800743a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f023 0303 	bic.w	r3, r3, #3
 8007442:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	68fa      	ldr	r2, [r7, #12]
 800744a:	4313      	orrs	r3, r2
 800744c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	f023 0302 	bic.w	r3, r3, #2
 8007454:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	689b      	ldr	r3, [r3, #8]
 800745a:	697a      	ldr	r2, [r7, #20]
 800745c:	4313      	orrs	r3, r2
 800745e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	4a1c      	ldr	r2, [pc, #112]	; (80074d4 <TIM_OC1_SetConfig+0xc8>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d10c      	bne.n	8007482 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	f023 0308 	bic.w	r3, r3, #8
 800746e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	68db      	ldr	r3, [r3, #12]
 8007474:	697a      	ldr	r2, [r7, #20]
 8007476:	4313      	orrs	r3, r2
 8007478:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	f023 0304 	bic.w	r3, r3, #4
 8007480:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	4a13      	ldr	r2, [pc, #76]	; (80074d4 <TIM_OC1_SetConfig+0xc8>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d111      	bne.n	80074ae <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007490:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007498:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	695b      	ldr	r3, [r3, #20]
 800749e:	693a      	ldr	r2, [r7, #16]
 80074a0:	4313      	orrs	r3, r2
 80074a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	699b      	ldr	r3, [r3, #24]
 80074a8:	693a      	ldr	r2, [r7, #16]
 80074aa:	4313      	orrs	r3, r2
 80074ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	693a      	ldr	r2, [r7, #16]
 80074b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	68fa      	ldr	r2, [r7, #12]
 80074b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	685a      	ldr	r2, [r3, #4]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	697a      	ldr	r2, [r7, #20]
 80074c6:	621a      	str	r2, [r3, #32]
}
 80074c8:	bf00      	nop
 80074ca:	371c      	adds	r7, #28
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bc80      	pop	{r7}
 80074d0:	4770      	bx	lr
 80074d2:	bf00      	nop
 80074d4:	40012c00 	.word	0x40012c00

080074d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074d8:	b480      	push	{r7}
 80074da:	b087      	sub	sp, #28
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6a1b      	ldr	r3, [r3, #32]
 80074e6:	f023 0210 	bic.w	r2, r3, #16
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6a1b      	ldr	r3, [r3, #32]
 80074f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	699b      	ldr	r3, [r3, #24]
 80074fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007506:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800750e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	021b      	lsls	r3, r3, #8
 8007516:	68fa      	ldr	r2, [r7, #12]
 8007518:	4313      	orrs	r3, r2
 800751a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	f023 0320 	bic.w	r3, r3, #32
 8007522:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	011b      	lsls	r3, r3, #4
 800752a:	697a      	ldr	r2, [r7, #20]
 800752c:	4313      	orrs	r3, r2
 800752e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	4a1d      	ldr	r2, [pc, #116]	; (80075a8 <TIM_OC2_SetConfig+0xd0>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d10d      	bne.n	8007554 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800753e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	68db      	ldr	r3, [r3, #12]
 8007544:	011b      	lsls	r3, r3, #4
 8007546:	697a      	ldr	r2, [r7, #20]
 8007548:	4313      	orrs	r3, r2
 800754a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007552:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	4a14      	ldr	r2, [pc, #80]	; (80075a8 <TIM_OC2_SetConfig+0xd0>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d113      	bne.n	8007584 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007562:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800756a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	695b      	ldr	r3, [r3, #20]
 8007570:	009b      	lsls	r3, r3, #2
 8007572:	693a      	ldr	r2, [r7, #16]
 8007574:	4313      	orrs	r3, r2
 8007576:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	699b      	ldr	r3, [r3, #24]
 800757c:	009b      	lsls	r3, r3, #2
 800757e:	693a      	ldr	r2, [r7, #16]
 8007580:	4313      	orrs	r3, r2
 8007582:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	693a      	ldr	r2, [r7, #16]
 8007588:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	68fa      	ldr	r2, [r7, #12]
 800758e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	685a      	ldr	r2, [r3, #4]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	697a      	ldr	r2, [r7, #20]
 800759c:	621a      	str	r2, [r3, #32]
}
 800759e:	bf00      	nop
 80075a0:	371c      	adds	r7, #28
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bc80      	pop	{r7}
 80075a6:	4770      	bx	lr
 80075a8:	40012c00 	.word	0x40012c00

080075ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b087      	sub	sp, #28
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6a1b      	ldr	r3, [r3, #32]
 80075ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6a1b      	ldr	r3, [r3, #32]
 80075c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	69db      	ldr	r3, [r3, #28]
 80075d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	f023 0303 	bic.w	r3, r3, #3
 80075e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	68fa      	ldr	r2, [r7, #12]
 80075ea:	4313      	orrs	r3, r2
 80075ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80075f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	689b      	ldr	r3, [r3, #8]
 80075fa:	021b      	lsls	r3, r3, #8
 80075fc:	697a      	ldr	r2, [r7, #20]
 80075fe:	4313      	orrs	r3, r2
 8007600:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	4a1d      	ldr	r2, [pc, #116]	; (800767c <TIM_OC3_SetConfig+0xd0>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d10d      	bne.n	8007626 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007610:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	68db      	ldr	r3, [r3, #12]
 8007616:	021b      	lsls	r3, r3, #8
 8007618:	697a      	ldr	r2, [r7, #20]
 800761a:	4313      	orrs	r3, r2
 800761c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007624:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	4a14      	ldr	r2, [pc, #80]	; (800767c <TIM_OC3_SetConfig+0xd0>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d113      	bne.n	8007656 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007634:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800763c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	695b      	ldr	r3, [r3, #20]
 8007642:	011b      	lsls	r3, r3, #4
 8007644:	693a      	ldr	r2, [r7, #16]
 8007646:	4313      	orrs	r3, r2
 8007648:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	699b      	ldr	r3, [r3, #24]
 800764e:	011b      	lsls	r3, r3, #4
 8007650:	693a      	ldr	r2, [r7, #16]
 8007652:	4313      	orrs	r3, r2
 8007654:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	693a      	ldr	r2, [r7, #16]
 800765a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	68fa      	ldr	r2, [r7, #12]
 8007660:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	685a      	ldr	r2, [r3, #4]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	697a      	ldr	r2, [r7, #20]
 800766e:	621a      	str	r2, [r3, #32]
}
 8007670:	bf00      	nop
 8007672:	371c      	adds	r7, #28
 8007674:	46bd      	mov	sp, r7
 8007676:	bc80      	pop	{r7}
 8007678:	4770      	bx	lr
 800767a:	bf00      	nop
 800767c:	40012c00 	.word	0x40012c00

08007680 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007680:	b480      	push	{r7}
 8007682:	b087      	sub	sp, #28
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6a1b      	ldr	r3, [r3, #32]
 800768e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6a1b      	ldr	r3, [r3, #32]
 800769a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	69db      	ldr	r3, [r3, #28]
 80076a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	021b      	lsls	r3, r3, #8
 80076be:	68fa      	ldr	r2, [r7, #12]
 80076c0:	4313      	orrs	r3, r2
 80076c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80076ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	689b      	ldr	r3, [r3, #8]
 80076d0:	031b      	lsls	r3, r3, #12
 80076d2:	693a      	ldr	r2, [r7, #16]
 80076d4:	4313      	orrs	r3, r2
 80076d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	4a0f      	ldr	r2, [pc, #60]	; (8007718 <TIM_OC4_SetConfig+0x98>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d109      	bne.n	80076f4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80076e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	695b      	ldr	r3, [r3, #20]
 80076ec:	019b      	lsls	r3, r3, #6
 80076ee:	697a      	ldr	r2, [r7, #20]
 80076f0:	4313      	orrs	r3, r2
 80076f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	697a      	ldr	r2, [r7, #20]
 80076f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	68fa      	ldr	r2, [r7, #12]
 80076fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	685a      	ldr	r2, [r3, #4]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	693a      	ldr	r2, [r7, #16]
 800770c:	621a      	str	r2, [r3, #32]
}
 800770e:	bf00      	nop
 8007710:	371c      	adds	r7, #28
 8007712:	46bd      	mov	sp, r7
 8007714:	bc80      	pop	{r7}
 8007716:	4770      	bx	lr
 8007718:	40012c00 	.word	0x40012c00

0800771c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800771c:	b480      	push	{r7}
 800771e:	b087      	sub	sp, #28
 8007720:	af00      	add	r7, sp, #0
 8007722:	60f8      	str	r0, [r7, #12]
 8007724:	60b9      	str	r1, [r7, #8]
 8007726:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	f003 031f 	and.w	r3, r3, #31
 800772e:	2201      	movs	r2, #1
 8007730:	fa02 f303 	lsl.w	r3, r2, r3
 8007734:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	6a1a      	ldr	r2, [r3, #32]
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	43db      	mvns	r3, r3
 800773e:	401a      	ands	r2, r3
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	6a1a      	ldr	r2, [r3, #32]
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	f003 031f 	and.w	r3, r3, #31
 800774e:	6879      	ldr	r1, [r7, #4]
 8007750:	fa01 f303 	lsl.w	r3, r1, r3
 8007754:	431a      	orrs	r2, r3
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	621a      	str	r2, [r3, #32]
}
 800775a:	bf00      	nop
 800775c:	371c      	adds	r7, #28
 800775e:	46bd      	mov	sp, r7
 8007760:	bc80      	pop	{r7}
 8007762:	4770      	bx	lr

08007764 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007764:	b480      	push	{r7}
 8007766:	b085      	sub	sp, #20
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
 800776c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007774:	2b01      	cmp	r3, #1
 8007776:	d101      	bne.n	800777c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007778:	2302      	movs	r3, #2
 800777a:	e046      	b.n	800780a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2201      	movs	r2, #1
 8007780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2202      	movs	r2, #2
 8007788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	689b      	ldr	r3, [r3, #8]
 800779a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	68fa      	ldr	r2, [r7, #12]
 80077aa:	4313      	orrs	r3, r2
 80077ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	68fa      	ldr	r2, [r7, #12]
 80077b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a16      	ldr	r2, [pc, #88]	; (8007814 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d00e      	beq.n	80077de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077c8:	d009      	beq.n	80077de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a12      	ldr	r2, [pc, #72]	; (8007818 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d004      	beq.n	80077de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a10      	ldr	r2, [pc, #64]	; (800781c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d10c      	bne.n	80077f8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	685b      	ldr	r3, [r3, #4]
 80077ea:	68ba      	ldr	r2, [r7, #8]
 80077ec:	4313      	orrs	r3, r2
 80077ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	68ba      	ldr	r2, [r7, #8]
 80077f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2201      	movs	r2, #1
 80077fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2200      	movs	r2, #0
 8007804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007808:	2300      	movs	r3, #0
}
 800780a:	4618      	mov	r0, r3
 800780c:	3714      	adds	r7, #20
 800780e:	46bd      	mov	sp, r7
 8007810:	bc80      	pop	{r7}
 8007812:	4770      	bx	lr
 8007814:	40012c00 	.word	0x40012c00
 8007818:	40000400 	.word	0x40000400
 800781c:	40000800 	.word	0x40000800

08007820 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b082      	sub	sp, #8
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d101      	bne.n	8007832 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800782e:	2301      	movs	r3, #1
 8007830:	e03f      	b.n	80078b2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007838:	b2db      	uxtb	r3, r3
 800783a:	2b00      	cmp	r3, #0
 800783c:	d106      	bne.n	800784c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2200      	movs	r2, #0
 8007842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f7fc fe34 	bl	80044b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2224      	movs	r2, #36	; 0x24
 8007850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	68da      	ldr	r2, [r3, #12]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007862:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f000 f905 	bl	8007a74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	691a      	ldr	r2, [r3, #16]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007878:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	695a      	ldr	r2, [r3, #20]
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007888:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	68da      	ldr	r2, [r3, #12]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007898:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2200      	movs	r2, #0
 800789e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2220      	movs	r2, #32
 80078a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2220      	movs	r2, #32
 80078ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80078b0:	2300      	movs	r3, #0
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3708      	adds	r7, #8
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}

080078ba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078ba:	b580      	push	{r7, lr}
 80078bc:	b08a      	sub	sp, #40	; 0x28
 80078be:	af02      	add	r7, sp, #8
 80078c0:	60f8      	str	r0, [r7, #12]
 80078c2:	60b9      	str	r1, [r7, #8]
 80078c4:	603b      	str	r3, [r7, #0]
 80078c6:	4613      	mov	r3, r2
 80078c8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80078ca:	2300      	movs	r3, #0
 80078cc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078d4:	b2db      	uxtb	r3, r3
 80078d6:	2b20      	cmp	r3, #32
 80078d8:	d17c      	bne.n	80079d4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d002      	beq.n	80078e6 <HAL_UART_Transmit+0x2c>
 80078e0:	88fb      	ldrh	r3, [r7, #6]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d101      	bne.n	80078ea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80078e6:	2301      	movs	r3, #1
 80078e8:	e075      	b.n	80079d6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d101      	bne.n	80078f8 <HAL_UART_Transmit+0x3e>
 80078f4:	2302      	movs	r3, #2
 80078f6:	e06e      	b.n	80079d6 <HAL_UART_Transmit+0x11c>
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2201      	movs	r2, #1
 80078fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2200      	movs	r2, #0
 8007904:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2221      	movs	r2, #33	; 0x21
 800790a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800790e:	f7fd f9a1 	bl	8004c54 <HAL_GetTick>
 8007912:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	88fa      	ldrh	r2, [r7, #6]
 8007918:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	88fa      	ldrh	r2, [r7, #6]
 800791e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	689b      	ldr	r3, [r3, #8]
 8007924:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007928:	d108      	bne.n	800793c <HAL_UART_Transmit+0x82>
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	691b      	ldr	r3, [r3, #16]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d104      	bne.n	800793c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007932:	2300      	movs	r3, #0
 8007934:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	61bb      	str	r3, [r7, #24]
 800793a:	e003      	b.n	8007944 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007940:	2300      	movs	r3, #0
 8007942:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2200      	movs	r2, #0
 8007948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800794c:	e02a      	b.n	80079a4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	9300      	str	r3, [sp, #0]
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	2200      	movs	r2, #0
 8007956:	2180      	movs	r1, #128	; 0x80
 8007958:	68f8      	ldr	r0, [r7, #12]
 800795a:	f000 f840 	bl	80079de <UART_WaitOnFlagUntilTimeout>
 800795e:	4603      	mov	r3, r0
 8007960:	2b00      	cmp	r3, #0
 8007962:	d001      	beq.n	8007968 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007964:	2303      	movs	r3, #3
 8007966:	e036      	b.n	80079d6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007968:	69fb      	ldr	r3, [r7, #28]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d10b      	bne.n	8007986 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800796e:	69bb      	ldr	r3, [r7, #24]
 8007970:	881b      	ldrh	r3, [r3, #0]
 8007972:	461a      	mov	r2, r3
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800797c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800797e:	69bb      	ldr	r3, [r7, #24]
 8007980:	3302      	adds	r3, #2
 8007982:	61bb      	str	r3, [r7, #24]
 8007984:	e007      	b.n	8007996 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007986:	69fb      	ldr	r3, [r7, #28]
 8007988:	781a      	ldrb	r2, [r3, #0]
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007990:	69fb      	ldr	r3, [r7, #28]
 8007992:	3301      	adds	r3, #1
 8007994:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800799a:	b29b      	uxth	r3, r3
 800799c:	3b01      	subs	r3, #1
 800799e:	b29a      	uxth	r2, r3
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d1cf      	bne.n	800794e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	9300      	str	r3, [sp, #0]
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	2200      	movs	r2, #0
 80079b6:	2140      	movs	r1, #64	; 0x40
 80079b8:	68f8      	ldr	r0, [r7, #12]
 80079ba:	f000 f810 	bl	80079de <UART_WaitOnFlagUntilTimeout>
 80079be:	4603      	mov	r3, r0
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d001      	beq.n	80079c8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80079c4:	2303      	movs	r3, #3
 80079c6:	e006      	b.n	80079d6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	2220      	movs	r2, #32
 80079cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80079d0:	2300      	movs	r3, #0
 80079d2:	e000      	b.n	80079d6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80079d4:	2302      	movs	r3, #2
  }
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3720      	adds	r7, #32
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}

080079de <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80079de:	b580      	push	{r7, lr}
 80079e0:	b084      	sub	sp, #16
 80079e2:	af00      	add	r7, sp, #0
 80079e4:	60f8      	str	r0, [r7, #12]
 80079e6:	60b9      	str	r1, [r7, #8]
 80079e8:	603b      	str	r3, [r7, #0]
 80079ea:	4613      	mov	r3, r2
 80079ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079ee:	e02c      	b.n	8007a4a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079f0:	69bb      	ldr	r3, [r7, #24]
 80079f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079f6:	d028      	beq.n	8007a4a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80079f8:	69bb      	ldr	r3, [r7, #24]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d007      	beq.n	8007a0e <UART_WaitOnFlagUntilTimeout+0x30>
 80079fe:	f7fd f929 	bl	8004c54 <HAL_GetTick>
 8007a02:	4602      	mov	r2, r0
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	1ad3      	subs	r3, r2, r3
 8007a08:	69ba      	ldr	r2, [r7, #24]
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	d21d      	bcs.n	8007a4a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	68da      	ldr	r2, [r3, #12]
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007a1c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	695a      	ldr	r2, [r3, #20]
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f022 0201 	bic.w	r2, r2, #1
 8007a2c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	2220      	movs	r2, #32
 8007a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	2220      	movs	r2, #32
 8007a3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	2200      	movs	r2, #0
 8007a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007a46:	2303      	movs	r3, #3
 8007a48:	e00f      	b.n	8007a6a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	681a      	ldr	r2, [r3, #0]
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	4013      	ands	r3, r2
 8007a54:	68ba      	ldr	r2, [r7, #8]
 8007a56:	429a      	cmp	r2, r3
 8007a58:	bf0c      	ite	eq
 8007a5a:	2301      	moveq	r3, #1
 8007a5c:	2300      	movne	r3, #0
 8007a5e:	b2db      	uxtb	r3, r3
 8007a60:	461a      	mov	r2, r3
 8007a62:	79fb      	ldrb	r3, [r7, #7]
 8007a64:	429a      	cmp	r2, r3
 8007a66:	d0c3      	beq.n	80079f0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007a68:	2300      	movs	r3, #0
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3710      	adds	r7, #16
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}
	...

08007a74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b084      	sub	sp, #16
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	691b      	ldr	r3, [r3, #16]
 8007a82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	68da      	ldr	r2, [r3, #12]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	430a      	orrs	r2, r1
 8007a90:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	689a      	ldr	r2, [r3, #8]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	691b      	ldr	r3, [r3, #16]
 8007a9a:	431a      	orrs	r2, r3
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	695b      	ldr	r3, [r3, #20]
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	68db      	ldr	r3, [r3, #12]
 8007aaa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007aae:	f023 030c 	bic.w	r3, r3, #12
 8007ab2:	687a      	ldr	r2, [r7, #4]
 8007ab4:	6812      	ldr	r2, [r2, #0]
 8007ab6:	68b9      	ldr	r1, [r7, #8]
 8007ab8:	430b      	orrs	r3, r1
 8007aba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	695b      	ldr	r3, [r3, #20]
 8007ac2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	699a      	ldr	r2, [r3, #24]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	430a      	orrs	r2, r1
 8007ad0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a2c      	ldr	r2, [pc, #176]	; (8007b88 <UART_SetConfig+0x114>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d103      	bne.n	8007ae4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007adc:	f7ff f86c 	bl	8006bb8 <HAL_RCC_GetPCLK2Freq>
 8007ae0:	60f8      	str	r0, [r7, #12]
 8007ae2:	e002      	b.n	8007aea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007ae4:	f7ff f854 	bl	8006b90 <HAL_RCC_GetPCLK1Freq>
 8007ae8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007aea:	68fa      	ldr	r2, [r7, #12]
 8007aec:	4613      	mov	r3, r2
 8007aee:	009b      	lsls	r3, r3, #2
 8007af0:	4413      	add	r3, r2
 8007af2:	009a      	lsls	r2, r3, #2
 8007af4:	441a      	add	r2, r3
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	009b      	lsls	r3, r3, #2
 8007afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b00:	4a22      	ldr	r2, [pc, #136]	; (8007b8c <UART_SetConfig+0x118>)
 8007b02:	fba2 2303 	umull	r2, r3, r2, r3
 8007b06:	095b      	lsrs	r3, r3, #5
 8007b08:	0119      	lsls	r1, r3, #4
 8007b0a:	68fa      	ldr	r2, [r7, #12]
 8007b0c:	4613      	mov	r3, r2
 8007b0e:	009b      	lsls	r3, r3, #2
 8007b10:	4413      	add	r3, r2
 8007b12:	009a      	lsls	r2, r3, #2
 8007b14:	441a      	add	r2, r3
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	685b      	ldr	r3, [r3, #4]
 8007b1a:	009b      	lsls	r3, r3, #2
 8007b1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007b20:	4b1a      	ldr	r3, [pc, #104]	; (8007b8c <UART_SetConfig+0x118>)
 8007b22:	fba3 0302 	umull	r0, r3, r3, r2
 8007b26:	095b      	lsrs	r3, r3, #5
 8007b28:	2064      	movs	r0, #100	; 0x64
 8007b2a:	fb00 f303 	mul.w	r3, r0, r3
 8007b2e:	1ad3      	subs	r3, r2, r3
 8007b30:	011b      	lsls	r3, r3, #4
 8007b32:	3332      	adds	r3, #50	; 0x32
 8007b34:	4a15      	ldr	r2, [pc, #84]	; (8007b8c <UART_SetConfig+0x118>)
 8007b36:	fba2 2303 	umull	r2, r3, r2, r3
 8007b3a:	095b      	lsrs	r3, r3, #5
 8007b3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b40:	4419      	add	r1, r3
 8007b42:	68fa      	ldr	r2, [r7, #12]
 8007b44:	4613      	mov	r3, r2
 8007b46:	009b      	lsls	r3, r3, #2
 8007b48:	4413      	add	r3, r2
 8007b4a:	009a      	lsls	r2, r3, #2
 8007b4c:	441a      	add	r2, r3
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	685b      	ldr	r3, [r3, #4]
 8007b52:	009b      	lsls	r3, r3, #2
 8007b54:	fbb2 f2f3 	udiv	r2, r2, r3
 8007b58:	4b0c      	ldr	r3, [pc, #48]	; (8007b8c <UART_SetConfig+0x118>)
 8007b5a:	fba3 0302 	umull	r0, r3, r3, r2
 8007b5e:	095b      	lsrs	r3, r3, #5
 8007b60:	2064      	movs	r0, #100	; 0x64
 8007b62:	fb00 f303 	mul.w	r3, r0, r3
 8007b66:	1ad3      	subs	r3, r2, r3
 8007b68:	011b      	lsls	r3, r3, #4
 8007b6a:	3332      	adds	r3, #50	; 0x32
 8007b6c:	4a07      	ldr	r2, [pc, #28]	; (8007b8c <UART_SetConfig+0x118>)
 8007b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8007b72:	095b      	lsrs	r3, r3, #5
 8007b74:	f003 020f 	and.w	r2, r3, #15
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	440a      	add	r2, r1
 8007b7e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007b80:	bf00      	nop
 8007b82:	3710      	adds	r7, #16
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}
 8007b88:	40013800 	.word	0x40013800
 8007b8c:	51eb851f 	.word	0x51eb851f

08007b90 <__errno>:
 8007b90:	4b01      	ldr	r3, [pc, #4]	; (8007b98 <__errno+0x8>)
 8007b92:	6818      	ldr	r0, [r3, #0]
 8007b94:	4770      	bx	lr
 8007b96:	bf00      	nop
 8007b98:	20000074 	.word	0x20000074

08007b9c <__libc_init_array>:
 8007b9c:	b570      	push	{r4, r5, r6, lr}
 8007b9e:	2600      	movs	r6, #0
 8007ba0:	4d0c      	ldr	r5, [pc, #48]	; (8007bd4 <__libc_init_array+0x38>)
 8007ba2:	4c0d      	ldr	r4, [pc, #52]	; (8007bd8 <__libc_init_array+0x3c>)
 8007ba4:	1b64      	subs	r4, r4, r5
 8007ba6:	10a4      	asrs	r4, r4, #2
 8007ba8:	42a6      	cmp	r6, r4
 8007baa:	d109      	bne.n	8007bc0 <__libc_init_array+0x24>
 8007bac:	f000 ff06 	bl	80089bc <_init>
 8007bb0:	2600      	movs	r6, #0
 8007bb2:	4d0a      	ldr	r5, [pc, #40]	; (8007bdc <__libc_init_array+0x40>)
 8007bb4:	4c0a      	ldr	r4, [pc, #40]	; (8007be0 <__libc_init_array+0x44>)
 8007bb6:	1b64      	subs	r4, r4, r5
 8007bb8:	10a4      	asrs	r4, r4, #2
 8007bba:	42a6      	cmp	r6, r4
 8007bbc:	d105      	bne.n	8007bca <__libc_init_array+0x2e>
 8007bbe:	bd70      	pop	{r4, r5, r6, pc}
 8007bc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bc4:	4798      	blx	r3
 8007bc6:	3601      	adds	r6, #1
 8007bc8:	e7ee      	b.n	8007ba8 <__libc_init_array+0xc>
 8007bca:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bce:	4798      	blx	r3
 8007bd0:	3601      	adds	r6, #1
 8007bd2:	e7f2      	b.n	8007bba <__libc_init_array+0x1e>
 8007bd4:	08008a90 	.word	0x08008a90
 8007bd8:	08008a90 	.word	0x08008a90
 8007bdc:	08008a90 	.word	0x08008a90
 8007be0:	08008a94 	.word	0x08008a94

08007be4 <memset>:
 8007be4:	4603      	mov	r3, r0
 8007be6:	4402      	add	r2, r0
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d100      	bne.n	8007bee <memset+0xa>
 8007bec:	4770      	bx	lr
 8007bee:	f803 1b01 	strb.w	r1, [r3], #1
 8007bf2:	e7f9      	b.n	8007be8 <memset+0x4>

08007bf4 <pow>:
 8007bf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bf8:	4614      	mov	r4, r2
 8007bfa:	461d      	mov	r5, r3
 8007bfc:	4680      	mov	r8, r0
 8007bfe:	4689      	mov	r9, r1
 8007c00:	f000 f862 	bl	8007cc8 <__ieee754_pow>
 8007c04:	4622      	mov	r2, r4
 8007c06:	4606      	mov	r6, r0
 8007c08:	460f      	mov	r7, r1
 8007c0a:	462b      	mov	r3, r5
 8007c0c:	4620      	mov	r0, r4
 8007c0e:	4629      	mov	r1, r5
 8007c10:	f7f8 fefc 	bl	8000a0c <__aeabi_dcmpun>
 8007c14:	bbc8      	cbnz	r0, 8007c8a <pow+0x96>
 8007c16:	2200      	movs	r2, #0
 8007c18:	2300      	movs	r3, #0
 8007c1a:	4640      	mov	r0, r8
 8007c1c:	4649      	mov	r1, r9
 8007c1e:	f7f8 fec3 	bl	80009a8 <__aeabi_dcmpeq>
 8007c22:	b1b8      	cbz	r0, 8007c54 <pow+0x60>
 8007c24:	2200      	movs	r2, #0
 8007c26:	2300      	movs	r3, #0
 8007c28:	4620      	mov	r0, r4
 8007c2a:	4629      	mov	r1, r5
 8007c2c:	f7f8 febc 	bl	80009a8 <__aeabi_dcmpeq>
 8007c30:	2800      	cmp	r0, #0
 8007c32:	d141      	bne.n	8007cb8 <pow+0xc4>
 8007c34:	4620      	mov	r0, r4
 8007c36:	4629      	mov	r1, r5
 8007c38:	f000 fe3b 	bl	80088b2 <finite>
 8007c3c:	b328      	cbz	r0, 8007c8a <pow+0x96>
 8007c3e:	2200      	movs	r2, #0
 8007c40:	2300      	movs	r3, #0
 8007c42:	4620      	mov	r0, r4
 8007c44:	4629      	mov	r1, r5
 8007c46:	f7f8 feb9 	bl	80009bc <__aeabi_dcmplt>
 8007c4a:	b1f0      	cbz	r0, 8007c8a <pow+0x96>
 8007c4c:	f7ff ffa0 	bl	8007b90 <__errno>
 8007c50:	2322      	movs	r3, #34	; 0x22
 8007c52:	e019      	b.n	8007c88 <pow+0x94>
 8007c54:	4630      	mov	r0, r6
 8007c56:	4639      	mov	r1, r7
 8007c58:	f000 fe2b 	bl	80088b2 <finite>
 8007c5c:	b9c8      	cbnz	r0, 8007c92 <pow+0x9e>
 8007c5e:	4640      	mov	r0, r8
 8007c60:	4649      	mov	r1, r9
 8007c62:	f000 fe26 	bl	80088b2 <finite>
 8007c66:	b1a0      	cbz	r0, 8007c92 <pow+0x9e>
 8007c68:	4620      	mov	r0, r4
 8007c6a:	4629      	mov	r1, r5
 8007c6c:	f000 fe21 	bl	80088b2 <finite>
 8007c70:	b178      	cbz	r0, 8007c92 <pow+0x9e>
 8007c72:	4632      	mov	r2, r6
 8007c74:	463b      	mov	r3, r7
 8007c76:	4630      	mov	r0, r6
 8007c78:	4639      	mov	r1, r7
 8007c7a:	f7f8 fec7 	bl	8000a0c <__aeabi_dcmpun>
 8007c7e:	2800      	cmp	r0, #0
 8007c80:	d0e4      	beq.n	8007c4c <pow+0x58>
 8007c82:	f7ff ff85 	bl	8007b90 <__errno>
 8007c86:	2321      	movs	r3, #33	; 0x21
 8007c88:	6003      	str	r3, [r0, #0]
 8007c8a:	4630      	mov	r0, r6
 8007c8c:	4639      	mov	r1, r7
 8007c8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c92:	2200      	movs	r2, #0
 8007c94:	2300      	movs	r3, #0
 8007c96:	4630      	mov	r0, r6
 8007c98:	4639      	mov	r1, r7
 8007c9a:	f7f8 fe85 	bl	80009a8 <__aeabi_dcmpeq>
 8007c9e:	2800      	cmp	r0, #0
 8007ca0:	d0f3      	beq.n	8007c8a <pow+0x96>
 8007ca2:	4640      	mov	r0, r8
 8007ca4:	4649      	mov	r1, r9
 8007ca6:	f000 fe04 	bl	80088b2 <finite>
 8007caa:	2800      	cmp	r0, #0
 8007cac:	d0ed      	beq.n	8007c8a <pow+0x96>
 8007cae:	4620      	mov	r0, r4
 8007cb0:	4629      	mov	r1, r5
 8007cb2:	f000 fdfe 	bl	80088b2 <finite>
 8007cb6:	e7c8      	b.n	8007c4a <pow+0x56>
 8007cb8:	2600      	movs	r6, #0
 8007cba:	4f01      	ldr	r7, [pc, #4]	; (8007cc0 <pow+0xcc>)
 8007cbc:	e7e5      	b.n	8007c8a <pow+0x96>
 8007cbe:	bf00      	nop
 8007cc0:	3ff00000 	.word	0x3ff00000
 8007cc4:	00000000 	.word	0x00000000

08007cc8 <__ieee754_pow>:
 8007cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ccc:	b093      	sub	sp, #76	; 0x4c
 8007cce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007cd2:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 8007cd6:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8007cda:	4689      	mov	r9, r1
 8007cdc:	ea56 0102 	orrs.w	r1, r6, r2
 8007ce0:	4680      	mov	r8, r0
 8007ce2:	d111      	bne.n	8007d08 <__ieee754_pow+0x40>
 8007ce4:	1803      	adds	r3, r0, r0
 8007ce6:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8007cea:	4152      	adcs	r2, r2
 8007cec:	4299      	cmp	r1, r3
 8007cee:	4b82      	ldr	r3, [pc, #520]	; (8007ef8 <__ieee754_pow+0x230>)
 8007cf0:	4193      	sbcs	r3, r2
 8007cf2:	f080 84b9 	bcs.w	8008668 <__ieee754_pow+0x9a0>
 8007cf6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007cfa:	4640      	mov	r0, r8
 8007cfc:	4649      	mov	r1, r9
 8007cfe:	f7f8 fa35 	bl	800016c <__adddf3>
 8007d02:	4683      	mov	fp, r0
 8007d04:	468c      	mov	ip, r1
 8007d06:	e06f      	b.n	8007de8 <__ieee754_pow+0x120>
 8007d08:	4b7c      	ldr	r3, [pc, #496]	; (8007efc <__ieee754_pow+0x234>)
 8007d0a:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8007d0e:	429c      	cmp	r4, r3
 8007d10:	464d      	mov	r5, r9
 8007d12:	4682      	mov	sl, r0
 8007d14:	dc06      	bgt.n	8007d24 <__ieee754_pow+0x5c>
 8007d16:	d101      	bne.n	8007d1c <__ieee754_pow+0x54>
 8007d18:	2800      	cmp	r0, #0
 8007d1a:	d1ec      	bne.n	8007cf6 <__ieee754_pow+0x2e>
 8007d1c:	429e      	cmp	r6, r3
 8007d1e:	dc01      	bgt.n	8007d24 <__ieee754_pow+0x5c>
 8007d20:	d10f      	bne.n	8007d42 <__ieee754_pow+0x7a>
 8007d22:	b172      	cbz	r2, 8007d42 <__ieee754_pow+0x7a>
 8007d24:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8007d28:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8007d2c:	ea55 050a 	orrs.w	r5, r5, sl
 8007d30:	d1e1      	bne.n	8007cf6 <__ieee754_pow+0x2e>
 8007d32:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007d36:	18db      	adds	r3, r3, r3
 8007d38:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8007d3c:	4152      	adcs	r2, r2
 8007d3e:	429d      	cmp	r5, r3
 8007d40:	e7d5      	b.n	8007cee <__ieee754_pow+0x26>
 8007d42:	2d00      	cmp	r5, #0
 8007d44:	da39      	bge.n	8007dba <__ieee754_pow+0xf2>
 8007d46:	4b6e      	ldr	r3, [pc, #440]	; (8007f00 <__ieee754_pow+0x238>)
 8007d48:	429e      	cmp	r6, r3
 8007d4a:	dc52      	bgt.n	8007df2 <__ieee754_pow+0x12a>
 8007d4c:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8007d50:	429e      	cmp	r6, r3
 8007d52:	f340 849c 	ble.w	800868e <__ieee754_pow+0x9c6>
 8007d56:	1533      	asrs	r3, r6, #20
 8007d58:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007d5c:	2b14      	cmp	r3, #20
 8007d5e:	dd0f      	ble.n	8007d80 <__ieee754_pow+0xb8>
 8007d60:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8007d64:	fa22 f103 	lsr.w	r1, r2, r3
 8007d68:	fa01 f303 	lsl.w	r3, r1, r3
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	f040 848e 	bne.w	800868e <__ieee754_pow+0x9c6>
 8007d72:	f001 0101 	and.w	r1, r1, #1
 8007d76:	f1c1 0302 	rsb	r3, r1, #2
 8007d7a:	9300      	str	r3, [sp, #0]
 8007d7c:	b182      	cbz	r2, 8007da0 <__ieee754_pow+0xd8>
 8007d7e:	e05d      	b.n	8007e3c <__ieee754_pow+0x174>
 8007d80:	2a00      	cmp	r2, #0
 8007d82:	d159      	bne.n	8007e38 <__ieee754_pow+0x170>
 8007d84:	f1c3 0314 	rsb	r3, r3, #20
 8007d88:	fa46 f103 	asr.w	r1, r6, r3
 8007d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8007d90:	42b3      	cmp	r3, r6
 8007d92:	f040 8479 	bne.w	8008688 <__ieee754_pow+0x9c0>
 8007d96:	f001 0101 	and.w	r1, r1, #1
 8007d9a:	f1c1 0302 	rsb	r3, r1, #2
 8007d9e:	9300      	str	r3, [sp, #0]
 8007da0:	4b58      	ldr	r3, [pc, #352]	; (8007f04 <__ieee754_pow+0x23c>)
 8007da2:	429e      	cmp	r6, r3
 8007da4:	d132      	bne.n	8007e0c <__ieee754_pow+0x144>
 8007da6:	2f00      	cmp	r7, #0
 8007da8:	f280 846a 	bge.w	8008680 <__ieee754_pow+0x9b8>
 8007dac:	4642      	mov	r2, r8
 8007dae:	464b      	mov	r3, r9
 8007db0:	2000      	movs	r0, #0
 8007db2:	4954      	ldr	r1, [pc, #336]	; (8007f04 <__ieee754_pow+0x23c>)
 8007db4:	f7f8 fcba 	bl	800072c <__aeabi_ddiv>
 8007db8:	e7a3      	b.n	8007d02 <__ieee754_pow+0x3a>
 8007dba:	2300      	movs	r3, #0
 8007dbc:	9300      	str	r3, [sp, #0]
 8007dbe:	2a00      	cmp	r2, #0
 8007dc0:	d13c      	bne.n	8007e3c <__ieee754_pow+0x174>
 8007dc2:	4b4e      	ldr	r3, [pc, #312]	; (8007efc <__ieee754_pow+0x234>)
 8007dc4:	429e      	cmp	r6, r3
 8007dc6:	d1eb      	bne.n	8007da0 <__ieee754_pow+0xd8>
 8007dc8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8007dcc:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8007dd0:	ea53 030a 	orrs.w	r3, r3, sl
 8007dd4:	f000 8448 	beq.w	8008668 <__ieee754_pow+0x9a0>
 8007dd8:	4b4b      	ldr	r3, [pc, #300]	; (8007f08 <__ieee754_pow+0x240>)
 8007dda:	429c      	cmp	r4, r3
 8007ddc:	dd0b      	ble.n	8007df6 <__ieee754_pow+0x12e>
 8007dde:	2f00      	cmp	r7, #0
 8007de0:	f2c0 8448 	blt.w	8008674 <__ieee754_pow+0x9ac>
 8007de4:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8007de8:	4658      	mov	r0, fp
 8007dea:	4661      	mov	r1, ip
 8007dec:	b013      	add	sp, #76	; 0x4c
 8007dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007df2:	2302      	movs	r3, #2
 8007df4:	e7e2      	b.n	8007dbc <__ieee754_pow+0xf4>
 8007df6:	2f00      	cmp	r7, #0
 8007df8:	f04f 0b00 	mov.w	fp, #0
 8007dfc:	f04f 0c00 	mov.w	ip, #0
 8007e00:	daf2      	bge.n	8007de8 <__ieee754_pow+0x120>
 8007e02:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8007e06:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8007e0a:	e7ed      	b.n	8007de8 <__ieee754_pow+0x120>
 8007e0c:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8007e10:	d106      	bne.n	8007e20 <__ieee754_pow+0x158>
 8007e12:	4642      	mov	r2, r8
 8007e14:	464b      	mov	r3, r9
 8007e16:	4640      	mov	r0, r8
 8007e18:	4649      	mov	r1, r9
 8007e1a:	f7f8 fb5d 	bl	80004d8 <__aeabi_dmul>
 8007e1e:	e770      	b.n	8007d02 <__ieee754_pow+0x3a>
 8007e20:	4b3a      	ldr	r3, [pc, #232]	; (8007f0c <__ieee754_pow+0x244>)
 8007e22:	429f      	cmp	r7, r3
 8007e24:	d10a      	bne.n	8007e3c <__ieee754_pow+0x174>
 8007e26:	2d00      	cmp	r5, #0
 8007e28:	db08      	blt.n	8007e3c <__ieee754_pow+0x174>
 8007e2a:	4640      	mov	r0, r8
 8007e2c:	4649      	mov	r1, r9
 8007e2e:	b013      	add	sp, #76	; 0x4c
 8007e30:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e34:	f000 bc5e 	b.w	80086f4 <__ieee754_sqrt>
 8007e38:	2300      	movs	r3, #0
 8007e3a:	9300      	str	r3, [sp, #0]
 8007e3c:	4640      	mov	r0, r8
 8007e3e:	4649      	mov	r1, r9
 8007e40:	f000 fd34 	bl	80088ac <fabs>
 8007e44:	4683      	mov	fp, r0
 8007e46:	468c      	mov	ip, r1
 8007e48:	f1ba 0f00 	cmp.w	sl, #0
 8007e4c:	d128      	bne.n	8007ea0 <__ieee754_pow+0x1d8>
 8007e4e:	b124      	cbz	r4, 8007e5a <__ieee754_pow+0x192>
 8007e50:	4b2c      	ldr	r3, [pc, #176]	; (8007f04 <__ieee754_pow+0x23c>)
 8007e52:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8007e56:	429a      	cmp	r2, r3
 8007e58:	d122      	bne.n	8007ea0 <__ieee754_pow+0x1d8>
 8007e5a:	2f00      	cmp	r7, #0
 8007e5c:	da07      	bge.n	8007e6e <__ieee754_pow+0x1a6>
 8007e5e:	465a      	mov	r2, fp
 8007e60:	4663      	mov	r3, ip
 8007e62:	2000      	movs	r0, #0
 8007e64:	4927      	ldr	r1, [pc, #156]	; (8007f04 <__ieee754_pow+0x23c>)
 8007e66:	f7f8 fc61 	bl	800072c <__aeabi_ddiv>
 8007e6a:	4683      	mov	fp, r0
 8007e6c:	468c      	mov	ip, r1
 8007e6e:	2d00      	cmp	r5, #0
 8007e70:	daba      	bge.n	8007de8 <__ieee754_pow+0x120>
 8007e72:	9b00      	ldr	r3, [sp, #0]
 8007e74:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007e78:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007e7c:	4323      	orrs	r3, r4
 8007e7e:	d108      	bne.n	8007e92 <__ieee754_pow+0x1ca>
 8007e80:	465a      	mov	r2, fp
 8007e82:	4663      	mov	r3, ip
 8007e84:	4658      	mov	r0, fp
 8007e86:	4661      	mov	r1, ip
 8007e88:	f7f8 f96e 	bl	8000168 <__aeabi_dsub>
 8007e8c:	4602      	mov	r2, r0
 8007e8e:	460b      	mov	r3, r1
 8007e90:	e790      	b.n	8007db4 <__ieee754_pow+0xec>
 8007e92:	9b00      	ldr	r3, [sp, #0]
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	d1a7      	bne.n	8007de8 <__ieee754_pow+0x120>
 8007e98:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8007e9c:	469c      	mov	ip, r3
 8007e9e:	e7a3      	b.n	8007de8 <__ieee754_pow+0x120>
 8007ea0:	0feb      	lsrs	r3, r5, #31
 8007ea2:	3b01      	subs	r3, #1
 8007ea4:	930c      	str	r3, [sp, #48]	; 0x30
 8007ea6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ea8:	9b00      	ldr	r3, [sp, #0]
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	d104      	bne.n	8007eb8 <__ieee754_pow+0x1f0>
 8007eae:	4642      	mov	r2, r8
 8007eb0:	464b      	mov	r3, r9
 8007eb2:	4640      	mov	r0, r8
 8007eb4:	4649      	mov	r1, r9
 8007eb6:	e7e7      	b.n	8007e88 <__ieee754_pow+0x1c0>
 8007eb8:	4b15      	ldr	r3, [pc, #84]	; (8007f10 <__ieee754_pow+0x248>)
 8007eba:	429e      	cmp	r6, r3
 8007ebc:	f340 80f6 	ble.w	80080ac <__ieee754_pow+0x3e4>
 8007ec0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8007ec4:	429e      	cmp	r6, r3
 8007ec6:	4b10      	ldr	r3, [pc, #64]	; (8007f08 <__ieee754_pow+0x240>)
 8007ec8:	dd09      	ble.n	8007ede <__ieee754_pow+0x216>
 8007eca:	429c      	cmp	r4, r3
 8007ecc:	dc0c      	bgt.n	8007ee8 <__ieee754_pow+0x220>
 8007ece:	2f00      	cmp	r7, #0
 8007ed0:	da0c      	bge.n	8007eec <__ieee754_pow+0x224>
 8007ed2:	2000      	movs	r0, #0
 8007ed4:	b013      	add	sp, #76	; 0x4c
 8007ed6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eda:	f000 bce2 	b.w	80088a2 <__math_oflow>
 8007ede:	429c      	cmp	r4, r3
 8007ee0:	dbf5      	blt.n	8007ece <__ieee754_pow+0x206>
 8007ee2:	4b08      	ldr	r3, [pc, #32]	; (8007f04 <__ieee754_pow+0x23c>)
 8007ee4:	429c      	cmp	r4, r3
 8007ee6:	dd15      	ble.n	8007f14 <__ieee754_pow+0x24c>
 8007ee8:	2f00      	cmp	r7, #0
 8007eea:	dcf2      	bgt.n	8007ed2 <__ieee754_pow+0x20a>
 8007eec:	2000      	movs	r0, #0
 8007eee:	b013      	add	sp, #76	; 0x4c
 8007ef0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ef4:	f000 bcd0 	b.w	8008898 <__math_uflow>
 8007ef8:	fff00000 	.word	0xfff00000
 8007efc:	7ff00000 	.word	0x7ff00000
 8007f00:	433fffff 	.word	0x433fffff
 8007f04:	3ff00000 	.word	0x3ff00000
 8007f08:	3fefffff 	.word	0x3fefffff
 8007f0c:	3fe00000 	.word	0x3fe00000
 8007f10:	41e00000 	.word	0x41e00000
 8007f14:	4661      	mov	r1, ip
 8007f16:	2200      	movs	r2, #0
 8007f18:	4658      	mov	r0, fp
 8007f1a:	4b5f      	ldr	r3, [pc, #380]	; (8008098 <__ieee754_pow+0x3d0>)
 8007f1c:	f7f8 f924 	bl	8000168 <__aeabi_dsub>
 8007f20:	a355      	add	r3, pc, #340	; (adr r3, 8008078 <__ieee754_pow+0x3b0>)
 8007f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f26:	4604      	mov	r4, r0
 8007f28:	460d      	mov	r5, r1
 8007f2a:	f7f8 fad5 	bl	80004d8 <__aeabi_dmul>
 8007f2e:	a354      	add	r3, pc, #336	; (adr r3, 8008080 <__ieee754_pow+0x3b8>)
 8007f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f34:	4606      	mov	r6, r0
 8007f36:	460f      	mov	r7, r1
 8007f38:	4620      	mov	r0, r4
 8007f3a:	4629      	mov	r1, r5
 8007f3c:	f7f8 facc 	bl	80004d8 <__aeabi_dmul>
 8007f40:	2200      	movs	r2, #0
 8007f42:	4682      	mov	sl, r0
 8007f44:	468b      	mov	fp, r1
 8007f46:	4620      	mov	r0, r4
 8007f48:	4629      	mov	r1, r5
 8007f4a:	4b54      	ldr	r3, [pc, #336]	; (800809c <__ieee754_pow+0x3d4>)
 8007f4c:	f7f8 fac4 	bl	80004d8 <__aeabi_dmul>
 8007f50:	4602      	mov	r2, r0
 8007f52:	460b      	mov	r3, r1
 8007f54:	a14c      	add	r1, pc, #304	; (adr r1, 8008088 <__ieee754_pow+0x3c0>)
 8007f56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f5a:	f7f8 f905 	bl	8000168 <__aeabi_dsub>
 8007f5e:	4622      	mov	r2, r4
 8007f60:	462b      	mov	r3, r5
 8007f62:	f7f8 fab9 	bl	80004d8 <__aeabi_dmul>
 8007f66:	4602      	mov	r2, r0
 8007f68:	460b      	mov	r3, r1
 8007f6a:	2000      	movs	r0, #0
 8007f6c:	494c      	ldr	r1, [pc, #304]	; (80080a0 <__ieee754_pow+0x3d8>)
 8007f6e:	f7f8 f8fb 	bl	8000168 <__aeabi_dsub>
 8007f72:	4622      	mov	r2, r4
 8007f74:	462b      	mov	r3, r5
 8007f76:	4680      	mov	r8, r0
 8007f78:	4689      	mov	r9, r1
 8007f7a:	4620      	mov	r0, r4
 8007f7c:	4629      	mov	r1, r5
 8007f7e:	f7f8 faab 	bl	80004d8 <__aeabi_dmul>
 8007f82:	4602      	mov	r2, r0
 8007f84:	460b      	mov	r3, r1
 8007f86:	4640      	mov	r0, r8
 8007f88:	4649      	mov	r1, r9
 8007f8a:	f7f8 faa5 	bl	80004d8 <__aeabi_dmul>
 8007f8e:	a340      	add	r3, pc, #256	; (adr r3, 8008090 <__ieee754_pow+0x3c8>)
 8007f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f94:	f7f8 faa0 	bl	80004d8 <__aeabi_dmul>
 8007f98:	4602      	mov	r2, r0
 8007f9a:	460b      	mov	r3, r1
 8007f9c:	4650      	mov	r0, sl
 8007f9e:	4659      	mov	r1, fp
 8007fa0:	f7f8 f8e2 	bl	8000168 <__aeabi_dsub>
 8007fa4:	f04f 0a00 	mov.w	sl, #0
 8007fa8:	4602      	mov	r2, r0
 8007faa:	460b      	mov	r3, r1
 8007fac:	4604      	mov	r4, r0
 8007fae:	460d      	mov	r5, r1
 8007fb0:	4630      	mov	r0, r6
 8007fb2:	4639      	mov	r1, r7
 8007fb4:	f7f8 f8da 	bl	800016c <__adddf3>
 8007fb8:	4632      	mov	r2, r6
 8007fba:	463b      	mov	r3, r7
 8007fbc:	4650      	mov	r0, sl
 8007fbe:	468b      	mov	fp, r1
 8007fc0:	f7f8 f8d2 	bl	8000168 <__aeabi_dsub>
 8007fc4:	4602      	mov	r2, r0
 8007fc6:	460b      	mov	r3, r1
 8007fc8:	4620      	mov	r0, r4
 8007fca:	4629      	mov	r1, r5
 8007fcc:	f7f8 f8cc 	bl	8000168 <__aeabi_dsub>
 8007fd0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007fd4:	9b00      	ldr	r3, [sp, #0]
 8007fd6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007fd8:	3b01      	subs	r3, #1
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	f04f 0600 	mov.w	r6, #0
 8007fe0:	f04f 0200 	mov.w	r2, #0
 8007fe4:	bf0c      	ite	eq
 8007fe6:	4b2f      	ldreq	r3, [pc, #188]	; (80080a4 <__ieee754_pow+0x3dc>)
 8007fe8:	4b2b      	ldrne	r3, [pc, #172]	; (8008098 <__ieee754_pow+0x3d0>)
 8007fea:	4604      	mov	r4, r0
 8007fec:	460d      	mov	r5, r1
 8007fee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ff2:	e9cd 2300 	strd	r2, r3, [sp]
 8007ff6:	4632      	mov	r2, r6
 8007ff8:	463b      	mov	r3, r7
 8007ffa:	f7f8 f8b5 	bl	8000168 <__aeabi_dsub>
 8007ffe:	4652      	mov	r2, sl
 8008000:	465b      	mov	r3, fp
 8008002:	f7f8 fa69 	bl	80004d8 <__aeabi_dmul>
 8008006:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800800a:	4680      	mov	r8, r0
 800800c:	4689      	mov	r9, r1
 800800e:	4620      	mov	r0, r4
 8008010:	4629      	mov	r1, r5
 8008012:	f7f8 fa61 	bl	80004d8 <__aeabi_dmul>
 8008016:	4602      	mov	r2, r0
 8008018:	460b      	mov	r3, r1
 800801a:	4640      	mov	r0, r8
 800801c:	4649      	mov	r1, r9
 800801e:	f7f8 f8a5 	bl	800016c <__adddf3>
 8008022:	4632      	mov	r2, r6
 8008024:	463b      	mov	r3, r7
 8008026:	4680      	mov	r8, r0
 8008028:	4689      	mov	r9, r1
 800802a:	4650      	mov	r0, sl
 800802c:	4659      	mov	r1, fp
 800802e:	f7f8 fa53 	bl	80004d8 <__aeabi_dmul>
 8008032:	4604      	mov	r4, r0
 8008034:	460d      	mov	r5, r1
 8008036:	460b      	mov	r3, r1
 8008038:	4602      	mov	r2, r0
 800803a:	4649      	mov	r1, r9
 800803c:	4640      	mov	r0, r8
 800803e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8008042:	f7f8 f893 	bl	800016c <__adddf3>
 8008046:	4b18      	ldr	r3, [pc, #96]	; (80080a8 <__ieee754_pow+0x3e0>)
 8008048:	4682      	mov	sl, r0
 800804a:	4299      	cmp	r1, r3
 800804c:	460f      	mov	r7, r1
 800804e:	460e      	mov	r6, r1
 8008050:	f340 82e5 	ble.w	800861e <__ieee754_pow+0x956>
 8008054:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8008058:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800805c:	4303      	orrs	r3, r0
 800805e:	f000 81df 	beq.w	8008420 <__ieee754_pow+0x758>
 8008062:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008066:	2200      	movs	r2, #0
 8008068:	2300      	movs	r3, #0
 800806a:	f7f8 fca7 	bl	80009bc <__aeabi_dcmplt>
 800806e:	3800      	subs	r0, #0
 8008070:	bf18      	it	ne
 8008072:	2001      	movne	r0, #1
 8008074:	e72e      	b.n	8007ed4 <__ieee754_pow+0x20c>
 8008076:	bf00      	nop
 8008078:	60000000 	.word	0x60000000
 800807c:	3ff71547 	.word	0x3ff71547
 8008080:	f85ddf44 	.word	0xf85ddf44
 8008084:	3e54ae0b 	.word	0x3e54ae0b
 8008088:	55555555 	.word	0x55555555
 800808c:	3fd55555 	.word	0x3fd55555
 8008090:	652b82fe 	.word	0x652b82fe
 8008094:	3ff71547 	.word	0x3ff71547
 8008098:	3ff00000 	.word	0x3ff00000
 800809c:	3fd00000 	.word	0x3fd00000
 80080a0:	3fe00000 	.word	0x3fe00000
 80080a4:	bff00000 	.word	0xbff00000
 80080a8:	408fffff 	.word	0x408fffff
 80080ac:	4bd2      	ldr	r3, [pc, #840]	; (80083f8 <__ieee754_pow+0x730>)
 80080ae:	2200      	movs	r2, #0
 80080b0:	402b      	ands	r3, r5
 80080b2:	b943      	cbnz	r3, 80080c6 <__ieee754_pow+0x3fe>
 80080b4:	4658      	mov	r0, fp
 80080b6:	4661      	mov	r1, ip
 80080b8:	4bd0      	ldr	r3, [pc, #832]	; (80083fc <__ieee754_pow+0x734>)
 80080ba:	f7f8 fa0d 	bl	80004d8 <__aeabi_dmul>
 80080be:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80080c2:	4683      	mov	fp, r0
 80080c4:	460c      	mov	r4, r1
 80080c6:	1523      	asrs	r3, r4, #20
 80080c8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80080cc:	4413      	add	r3, r2
 80080ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80080d0:	4bcb      	ldr	r3, [pc, #812]	; (8008400 <__ieee754_pow+0x738>)
 80080d2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80080d6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80080da:	429c      	cmp	r4, r3
 80080dc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80080e0:	dd08      	ble.n	80080f4 <__ieee754_pow+0x42c>
 80080e2:	4bc8      	ldr	r3, [pc, #800]	; (8008404 <__ieee754_pow+0x73c>)
 80080e4:	429c      	cmp	r4, r3
 80080e6:	f340 8199 	ble.w	800841c <__ieee754_pow+0x754>
 80080ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080ec:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80080f0:	3301      	adds	r3, #1
 80080f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80080f4:	2600      	movs	r6, #0
 80080f6:	00f3      	lsls	r3, r6, #3
 80080f8:	930d      	str	r3, [sp, #52]	; 0x34
 80080fa:	4bc3      	ldr	r3, [pc, #780]	; (8008408 <__ieee754_pow+0x740>)
 80080fc:	4658      	mov	r0, fp
 80080fe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008102:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008106:	4629      	mov	r1, r5
 8008108:	461a      	mov	r2, r3
 800810a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800810e:	4623      	mov	r3, r4
 8008110:	f7f8 f82a 	bl	8000168 <__aeabi_dsub>
 8008114:	46da      	mov	sl, fp
 8008116:	462b      	mov	r3, r5
 8008118:	4652      	mov	r2, sl
 800811a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800811e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008122:	f7f8 f823 	bl	800016c <__adddf3>
 8008126:	4602      	mov	r2, r0
 8008128:	460b      	mov	r3, r1
 800812a:	2000      	movs	r0, #0
 800812c:	49b7      	ldr	r1, [pc, #732]	; (800840c <__ieee754_pow+0x744>)
 800812e:	f7f8 fafd 	bl	800072c <__aeabi_ddiv>
 8008132:	4602      	mov	r2, r0
 8008134:	460b      	mov	r3, r1
 8008136:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800813a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800813e:	f7f8 f9cb 	bl	80004d8 <__aeabi_dmul>
 8008142:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008146:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800814a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800814e:	2300      	movs	r3, #0
 8008150:	2200      	movs	r2, #0
 8008152:	46ab      	mov	fp, r5
 8008154:	106d      	asrs	r5, r5, #1
 8008156:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800815a:	9304      	str	r3, [sp, #16]
 800815c:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8008160:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008164:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8008168:	4640      	mov	r0, r8
 800816a:	4649      	mov	r1, r9
 800816c:	4614      	mov	r4, r2
 800816e:	461d      	mov	r5, r3
 8008170:	f7f8 f9b2 	bl	80004d8 <__aeabi_dmul>
 8008174:	4602      	mov	r2, r0
 8008176:	460b      	mov	r3, r1
 8008178:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800817c:	f7f7 fff4 	bl	8000168 <__aeabi_dsub>
 8008180:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008184:	4606      	mov	r6, r0
 8008186:	460f      	mov	r7, r1
 8008188:	4620      	mov	r0, r4
 800818a:	4629      	mov	r1, r5
 800818c:	f7f7 ffec 	bl	8000168 <__aeabi_dsub>
 8008190:	4602      	mov	r2, r0
 8008192:	460b      	mov	r3, r1
 8008194:	4650      	mov	r0, sl
 8008196:	4659      	mov	r1, fp
 8008198:	f7f7 ffe6 	bl	8000168 <__aeabi_dsub>
 800819c:	4642      	mov	r2, r8
 800819e:	464b      	mov	r3, r9
 80081a0:	f7f8 f99a 	bl	80004d8 <__aeabi_dmul>
 80081a4:	4602      	mov	r2, r0
 80081a6:	460b      	mov	r3, r1
 80081a8:	4630      	mov	r0, r6
 80081aa:	4639      	mov	r1, r7
 80081ac:	f7f7 ffdc 	bl	8000168 <__aeabi_dsub>
 80081b0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80081b4:	f7f8 f990 	bl	80004d8 <__aeabi_dmul>
 80081b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80081bc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80081c0:	4610      	mov	r0, r2
 80081c2:	4619      	mov	r1, r3
 80081c4:	f7f8 f988 	bl	80004d8 <__aeabi_dmul>
 80081c8:	a379      	add	r3, pc, #484	; (adr r3, 80083b0 <__ieee754_pow+0x6e8>)
 80081ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ce:	4604      	mov	r4, r0
 80081d0:	460d      	mov	r5, r1
 80081d2:	f7f8 f981 	bl	80004d8 <__aeabi_dmul>
 80081d6:	a378      	add	r3, pc, #480	; (adr r3, 80083b8 <__ieee754_pow+0x6f0>)
 80081d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081dc:	f7f7 ffc6 	bl	800016c <__adddf3>
 80081e0:	4622      	mov	r2, r4
 80081e2:	462b      	mov	r3, r5
 80081e4:	f7f8 f978 	bl	80004d8 <__aeabi_dmul>
 80081e8:	a375      	add	r3, pc, #468	; (adr r3, 80083c0 <__ieee754_pow+0x6f8>)
 80081ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ee:	f7f7 ffbd 	bl	800016c <__adddf3>
 80081f2:	4622      	mov	r2, r4
 80081f4:	462b      	mov	r3, r5
 80081f6:	f7f8 f96f 	bl	80004d8 <__aeabi_dmul>
 80081fa:	a373      	add	r3, pc, #460	; (adr r3, 80083c8 <__ieee754_pow+0x700>)
 80081fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008200:	f7f7 ffb4 	bl	800016c <__adddf3>
 8008204:	4622      	mov	r2, r4
 8008206:	462b      	mov	r3, r5
 8008208:	f7f8 f966 	bl	80004d8 <__aeabi_dmul>
 800820c:	a370      	add	r3, pc, #448	; (adr r3, 80083d0 <__ieee754_pow+0x708>)
 800820e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008212:	f7f7 ffab 	bl	800016c <__adddf3>
 8008216:	4622      	mov	r2, r4
 8008218:	462b      	mov	r3, r5
 800821a:	f7f8 f95d 	bl	80004d8 <__aeabi_dmul>
 800821e:	a36e      	add	r3, pc, #440	; (adr r3, 80083d8 <__ieee754_pow+0x710>)
 8008220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008224:	f7f7 ffa2 	bl	800016c <__adddf3>
 8008228:	4622      	mov	r2, r4
 800822a:	4606      	mov	r6, r0
 800822c:	460f      	mov	r7, r1
 800822e:	462b      	mov	r3, r5
 8008230:	4620      	mov	r0, r4
 8008232:	4629      	mov	r1, r5
 8008234:	f7f8 f950 	bl	80004d8 <__aeabi_dmul>
 8008238:	4602      	mov	r2, r0
 800823a:	460b      	mov	r3, r1
 800823c:	4630      	mov	r0, r6
 800823e:	4639      	mov	r1, r7
 8008240:	f7f8 f94a 	bl	80004d8 <__aeabi_dmul>
 8008244:	4604      	mov	r4, r0
 8008246:	460d      	mov	r5, r1
 8008248:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800824c:	4642      	mov	r2, r8
 800824e:	464b      	mov	r3, r9
 8008250:	f7f7 ff8c 	bl	800016c <__adddf3>
 8008254:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008258:	f7f8 f93e 	bl	80004d8 <__aeabi_dmul>
 800825c:	4622      	mov	r2, r4
 800825e:	462b      	mov	r3, r5
 8008260:	f7f7 ff84 	bl	800016c <__adddf3>
 8008264:	4642      	mov	r2, r8
 8008266:	4606      	mov	r6, r0
 8008268:	460f      	mov	r7, r1
 800826a:	464b      	mov	r3, r9
 800826c:	4640      	mov	r0, r8
 800826e:	4649      	mov	r1, r9
 8008270:	f7f8 f932 	bl	80004d8 <__aeabi_dmul>
 8008274:	2200      	movs	r2, #0
 8008276:	4b66      	ldr	r3, [pc, #408]	; (8008410 <__ieee754_pow+0x748>)
 8008278:	4682      	mov	sl, r0
 800827a:	468b      	mov	fp, r1
 800827c:	f7f7 ff76 	bl	800016c <__adddf3>
 8008280:	4632      	mov	r2, r6
 8008282:	463b      	mov	r3, r7
 8008284:	f7f7 ff72 	bl	800016c <__adddf3>
 8008288:	2400      	movs	r4, #0
 800828a:	460d      	mov	r5, r1
 800828c:	4622      	mov	r2, r4
 800828e:	460b      	mov	r3, r1
 8008290:	4640      	mov	r0, r8
 8008292:	4649      	mov	r1, r9
 8008294:	f7f8 f920 	bl	80004d8 <__aeabi_dmul>
 8008298:	2200      	movs	r2, #0
 800829a:	4680      	mov	r8, r0
 800829c:	4689      	mov	r9, r1
 800829e:	4620      	mov	r0, r4
 80082a0:	4629      	mov	r1, r5
 80082a2:	4b5b      	ldr	r3, [pc, #364]	; (8008410 <__ieee754_pow+0x748>)
 80082a4:	f7f7 ff60 	bl	8000168 <__aeabi_dsub>
 80082a8:	4652      	mov	r2, sl
 80082aa:	465b      	mov	r3, fp
 80082ac:	f7f7 ff5c 	bl	8000168 <__aeabi_dsub>
 80082b0:	4602      	mov	r2, r0
 80082b2:	460b      	mov	r3, r1
 80082b4:	4630      	mov	r0, r6
 80082b6:	4639      	mov	r1, r7
 80082b8:	f7f7 ff56 	bl	8000168 <__aeabi_dsub>
 80082bc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80082c0:	f7f8 f90a 	bl	80004d8 <__aeabi_dmul>
 80082c4:	4622      	mov	r2, r4
 80082c6:	4606      	mov	r6, r0
 80082c8:	460f      	mov	r7, r1
 80082ca:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80082ce:	462b      	mov	r3, r5
 80082d0:	f7f8 f902 	bl	80004d8 <__aeabi_dmul>
 80082d4:	4602      	mov	r2, r0
 80082d6:	460b      	mov	r3, r1
 80082d8:	4630      	mov	r0, r6
 80082da:	4639      	mov	r1, r7
 80082dc:	f7f7 ff46 	bl	800016c <__adddf3>
 80082e0:	2400      	movs	r4, #0
 80082e2:	4606      	mov	r6, r0
 80082e4:	460f      	mov	r7, r1
 80082e6:	4602      	mov	r2, r0
 80082e8:	460b      	mov	r3, r1
 80082ea:	4640      	mov	r0, r8
 80082ec:	4649      	mov	r1, r9
 80082ee:	f7f7 ff3d 	bl	800016c <__adddf3>
 80082f2:	a33b      	add	r3, pc, #236	; (adr r3, 80083e0 <__ieee754_pow+0x718>)
 80082f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f8:	4620      	mov	r0, r4
 80082fa:	460d      	mov	r5, r1
 80082fc:	f7f8 f8ec 	bl	80004d8 <__aeabi_dmul>
 8008300:	4642      	mov	r2, r8
 8008302:	464b      	mov	r3, r9
 8008304:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008308:	4620      	mov	r0, r4
 800830a:	4629      	mov	r1, r5
 800830c:	f7f7 ff2c 	bl	8000168 <__aeabi_dsub>
 8008310:	4602      	mov	r2, r0
 8008312:	460b      	mov	r3, r1
 8008314:	4630      	mov	r0, r6
 8008316:	4639      	mov	r1, r7
 8008318:	f7f7 ff26 	bl	8000168 <__aeabi_dsub>
 800831c:	a332      	add	r3, pc, #200	; (adr r3, 80083e8 <__ieee754_pow+0x720>)
 800831e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008322:	f7f8 f8d9 	bl	80004d8 <__aeabi_dmul>
 8008326:	a332      	add	r3, pc, #200	; (adr r3, 80083f0 <__ieee754_pow+0x728>)
 8008328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800832c:	4606      	mov	r6, r0
 800832e:	460f      	mov	r7, r1
 8008330:	4620      	mov	r0, r4
 8008332:	4629      	mov	r1, r5
 8008334:	f7f8 f8d0 	bl	80004d8 <__aeabi_dmul>
 8008338:	4602      	mov	r2, r0
 800833a:	460b      	mov	r3, r1
 800833c:	4630      	mov	r0, r6
 800833e:	4639      	mov	r1, r7
 8008340:	f7f7 ff14 	bl	800016c <__adddf3>
 8008344:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008346:	4b33      	ldr	r3, [pc, #204]	; (8008414 <__ieee754_pow+0x74c>)
 8008348:	f04f 0a00 	mov.w	sl, #0
 800834c:	4413      	add	r3, r2
 800834e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008352:	f7f7 ff0b 	bl	800016c <__adddf3>
 8008356:	4680      	mov	r8, r0
 8008358:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800835a:	4689      	mov	r9, r1
 800835c:	f7f8 f852 	bl	8000404 <__aeabi_i2d>
 8008360:	4604      	mov	r4, r0
 8008362:	460d      	mov	r5, r1
 8008364:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008366:	4b2c      	ldr	r3, [pc, #176]	; (8008418 <__ieee754_pow+0x750>)
 8008368:	4413      	add	r3, r2
 800836a:	e9d3 6700 	ldrd	r6, r7, [r3]
 800836e:	4642      	mov	r2, r8
 8008370:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008374:	464b      	mov	r3, r9
 8008376:	f7f7 fef9 	bl	800016c <__adddf3>
 800837a:	4632      	mov	r2, r6
 800837c:	463b      	mov	r3, r7
 800837e:	f7f7 fef5 	bl	800016c <__adddf3>
 8008382:	4622      	mov	r2, r4
 8008384:	462b      	mov	r3, r5
 8008386:	f7f7 fef1 	bl	800016c <__adddf3>
 800838a:	4622      	mov	r2, r4
 800838c:	462b      	mov	r3, r5
 800838e:	4650      	mov	r0, sl
 8008390:	468b      	mov	fp, r1
 8008392:	f7f7 fee9 	bl	8000168 <__aeabi_dsub>
 8008396:	4632      	mov	r2, r6
 8008398:	463b      	mov	r3, r7
 800839a:	f7f7 fee5 	bl	8000168 <__aeabi_dsub>
 800839e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80083a2:	f7f7 fee1 	bl	8000168 <__aeabi_dsub>
 80083a6:	4602      	mov	r2, r0
 80083a8:	460b      	mov	r3, r1
 80083aa:	4640      	mov	r0, r8
 80083ac:	4649      	mov	r1, r9
 80083ae:	e60d      	b.n	8007fcc <__ieee754_pow+0x304>
 80083b0:	4a454eef 	.word	0x4a454eef
 80083b4:	3fca7e28 	.word	0x3fca7e28
 80083b8:	93c9db65 	.word	0x93c9db65
 80083bc:	3fcd864a 	.word	0x3fcd864a
 80083c0:	a91d4101 	.word	0xa91d4101
 80083c4:	3fd17460 	.word	0x3fd17460
 80083c8:	518f264d 	.word	0x518f264d
 80083cc:	3fd55555 	.word	0x3fd55555
 80083d0:	db6fabff 	.word	0xdb6fabff
 80083d4:	3fdb6db6 	.word	0x3fdb6db6
 80083d8:	33333303 	.word	0x33333303
 80083dc:	3fe33333 	.word	0x3fe33333
 80083e0:	e0000000 	.word	0xe0000000
 80083e4:	3feec709 	.word	0x3feec709
 80083e8:	dc3a03fd 	.word	0xdc3a03fd
 80083ec:	3feec709 	.word	0x3feec709
 80083f0:	145b01f5 	.word	0x145b01f5
 80083f4:	be3e2fe0 	.word	0xbe3e2fe0
 80083f8:	7ff00000 	.word	0x7ff00000
 80083fc:	43400000 	.word	0x43400000
 8008400:	0003988e 	.word	0x0003988e
 8008404:	000bb679 	.word	0x000bb679
 8008408:	08008a60 	.word	0x08008a60
 800840c:	3ff00000 	.word	0x3ff00000
 8008410:	40080000 	.word	0x40080000
 8008414:	08008a80 	.word	0x08008a80
 8008418:	08008a70 	.word	0x08008a70
 800841c:	2601      	movs	r6, #1
 800841e:	e66a      	b.n	80080f6 <__ieee754_pow+0x42e>
 8008420:	a39d      	add	r3, pc, #628	; (adr r3, 8008698 <__ieee754_pow+0x9d0>)
 8008422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008426:	4640      	mov	r0, r8
 8008428:	4649      	mov	r1, r9
 800842a:	f7f7 fe9f 	bl	800016c <__adddf3>
 800842e:	4622      	mov	r2, r4
 8008430:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008434:	462b      	mov	r3, r5
 8008436:	4650      	mov	r0, sl
 8008438:	4639      	mov	r1, r7
 800843a:	f7f7 fe95 	bl	8000168 <__aeabi_dsub>
 800843e:	4602      	mov	r2, r0
 8008440:	460b      	mov	r3, r1
 8008442:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008446:	f7f8 fad7 	bl	80009f8 <__aeabi_dcmpgt>
 800844a:	2800      	cmp	r0, #0
 800844c:	f47f ae09 	bne.w	8008062 <__ieee754_pow+0x39a>
 8008450:	4aa3      	ldr	r2, [pc, #652]	; (80086e0 <__ieee754_pow+0xa18>)
 8008452:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8008456:	4293      	cmp	r3, r2
 8008458:	f340 8101 	ble.w	800865e <__ieee754_pow+0x996>
 800845c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8008460:	2000      	movs	r0, #0
 8008462:	151b      	asrs	r3, r3, #20
 8008464:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008468:	fa4a f303 	asr.w	r3, sl, r3
 800846c:	4433      	add	r3, r6
 800846e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8008472:	4f9c      	ldr	r7, [pc, #624]	; (80086e4 <__ieee754_pow+0xa1c>)
 8008474:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008478:	4117      	asrs	r7, r2
 800847a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800847e:	ea23 0107 	bic.w	r1, r3, r7
 8008482:	f1c2 0214 	rsb	r2, r2, #20
 8008486:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800848a:	460b      	mov	r3, r1
 800848c:	fa4a fa02 	asr.w	sl, sl, r2
 8008490:	2e00      	cmp	r6, #0
 8008492:	4602      	mov	r2, r0
 8008494:	4629      	mov	r1, r5
 8008496:	4620      	mov	r0, r4
 8008498:	bfb8      	it	lt
 800849a:	f1ca 0a00 	rsblt	sl, sl, #0
 800849e:	f7f7 fe63 	bl	8000168 <__aeabi_dsub>
 80084a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084aa:	2400      	movs	r4, #0
 80084ac:	4642      	mov	r2, r8
 80084ae:	464b      	mov	r3, r9
 80084b0:	f7f7 fe5c 	bl	800016c <__adddf3>
 80084b4:	a37a      	add	r3, pc, #488	; (adr r3, 80086a0 <__ieee754_pow+0x9d8>)
 80084b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ba:	4620      	mov	r0, r4
 80084bc:	460d      	mov	r5, r1
 80084be:	f7f8 f80b 	bl	80004d8 <__aeabi_dmul>
 80084c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80084c6:	4606      	mov	r6, r0
 80084c8:	460f      	mov	r7, r1
 80084ca:	4620      	mov	r0, r4
 80084cc:	4629      	mov	r1, r5
 80084ce:	f7f7 fe4b 	bl	8000168 <__aeabi_dsub>
 80084d2:	4602      	mov	r2, r0
 80084d4:	460b      	mov	r3, r1
 80084d6:	4640      	mov	r0, r8
 80084d8:	4649      	mov	r1, r9
 80084da:	f7f7 fe45 	bl	8000168 <__aeabi_dsub>
 80084de:	a372      	add	r3, pc, #456	; (adr r3, 80086a8 <__ieee754_pow+0x9e0>)
 80084e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084e4:	f7f7 fff8 	bl	80004d8 <__aeabi_dmul>
 80084e8:	a371      	add	r3, pc, #452	; (adr r3, 80086b0 <__ieee754_pow+0x9e8>)
 80084ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ee:	4680      	mov	r8, r0
 80084f0:	4689      	mov	r9, r1
 80084f2:	4620      	mov	r0, r4
 80084f4:	4629      	mov	r1, r5
 80084f6:	f7f7 ffef 	bl	80004d8 <__aeabi_dmul>
 80084fa:	4602      	mov	r2, r0
 80084fc:	460b      	mov	r3, r1
 80084fe:	4640      	mov	r0, r8
 8008500:	4649      	mov	r1, r9
 8008502:	f7f7 fe33 	bl	800016c <__adddf3>
 8008506:	4604      	mov	r4, r0
 8008508:	460d      	mov	r5, r1
 800850a:	4602      	mov	r2, r0
 800850c:	460b      	mov	r3, r1
 800850e:	4630      	mov	r0, r6
 8008510:	4639      	mov	r1, r7
 8008512:	f7f7 fe2b 	bl	800016c <__adddf3>
 8008516:	4632      	mov	r2, r6
 8008518:	463b      	mov	r3, r7
 800851a:	4680      	mov	r8, r0
 800851c:	4689      	mov	r9, r1
 800851e:	f7f7 fe23 	bl	8000168 <__aeabi_dsub>
 8008522:	4602      	mov	r2, r0
 8008524:	460b      	mov	r3, r1
 8008526:	4620      	mov	r0, r4
 8008528:	4629      	mov	r1, r5
 800852a:	f7f7 fe1d 	bl	8000168 <__aeabi_dsub>
 800852e:	4642      	mov	r2, r8
 8008530:	4606      	mov	r6, r0
 8008532:	460f      	mov	r7, r1
 8008534:	464b      	mov	r3, r9
 8008536:	4640      	mov	r0, r8
 8008538:	4649      	mov	r1, r9
 800853a:	f7f7 ffcd 	bl	80004d8 <__aeabi_dmul>
 800853e:	a35e      	add	r3, pc, #376	; (adr r3, 80086b8 <__ieee754_pow+0x9f0>)
 8008540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008544:	4604      	mov	r4, r0
 8008546:	460d      	mov	r5, r1
 8008548:	f7f7 ffc6 	bl	80004d8 <__aeabi_dmul>
 800854c:	a35c      	add	r3, pc, #368	; (adr r3, 80086c0 <__ieee754_pow+0x9f8>)
 800854e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008552:	f7f7 fe09 	bl	8000168 <__aeabi_dsub>
 8008556:	4622      	mov	r2, r4
 8008558:	462b      	mov	r3, r5
 800855a:	f7f7 ffbd 	bl	80004d8 <__aeabi_dmul>
 800855e:	a35a      	add	r3, pc, #360	; (adr r3, 80086c8 <__ieee754_pow+0xa00>)
 8008560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008564:	f7f7 fe02 	bl	800016c <__adddf3>
 8008568:	4622      	mov	r2, r4
 800856a:	462b      	mov	r3, r5
 800856c:	f7f7 ffb4 	bl	80004d8 <__aeabi_dmul>
 8008570:	a357      	add	r3, pc, #348	; (adr r3, 80086d0 <__ieee754_pow+0xa08>)
 8008572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008576:	f7f7 fdf7 	bl	8000168 <__aeabi_dsub>
 800857a:	4622      	mov	r2, r4
 800857c:	462b      	mov	r3, r5
 800857e:	f7f7 ffab 	bl	80004d8 <__aeabi_dmul>
 8008582:	a355      	add	r3, pc, #340	; (adr r3, 80086d8 <__ieee754_pow+0xa10>)
 8008584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008588:	f7f7 fdf0 	bl	800016c <__adddf3>
 800858c:	4622      	mov	r2, r4
 800858e:	462b      	mov	r3, r5
 8008590:	f7f7 ffa2 	bl	80004d8 <__aeabi_dmul>
 8008594:	4602      	mov	r2, r0
 8008596:	460b      	mov	r3, r1
 8008598:	4640      	mov	r0, r8
 800859a:	4649      	mov	r1, r9
 800859c:	f7f7 fde4 	bl	8000168 <__aeabi_dsub>
 80085a0:	4604      	mov	r4, r0
 80085a2:	460d      	mov	r5, r1
 80085a4:	4602      	mov	r2, r0
 80085a6:	460b      	mov	r3, r1
 80085a8:	4640      	mov	r0, r8
 80085aa:	4649      	mov	r1, r9
 80085ac:	f7f7 ff94 	bl	80004d8 <__aeabi_dmul>
 80085b0:	2200      	movs	r2, #0
 80085b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80085ba:	4620      	mov	r0, r4
 80085bc:	4629      	mov	r1, r5
 80085be:	f7f7 fdd3 	bl	8000168 <__aeabi_dsub>
 80085c2:	4602      	mov	r2, r0
 80085c4:	460b      	mov	r3, r1
 80085c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085ca:	f7f8 f8af 	bl	800072c <__aeabi_ddiv>
 80085ce:	4632      	mov	r2, r6
 80085d0:	4604      	mov	r4, r0
 80085d2:	460d      	mov	r5, r1
 80085d4:	463b      	mov	r3, r7
 80085d6:	4640      	mov	r0, r8
 80085d8:	4649      	mov	r1, r9
 80085da:	f7f7 ff7d 	bl	80004d8 <__aeabi_dmul>
 80085de:	4632      	mov	r2, r6
 80085e0:	463b      	mov	r3, r7
 80085e2:	f7f7 fdc3 	bl	800016c <__adddf3>
 80085e6:	4602      	mov	r2, r0
 80085e8:	460b      	mov	r3, r1
 80085ea:	4620      	mov	r0, r4
 80085ec:	4629      	mov	r1, r5
 80085ee:	f7f7 fdbb 	bl	8000168 <__aeabi_dsub>
 80085f2:	4642      	mov	r2, r8
 80085f4:	464b      	mov	r3, r9
 80085f6:	f7f7 fdb7 	bl	8000168 <__aeabi_dsub>
 80085fa:	4602      	mov	r2, r0
 80085fc:	460b      	mov	r3, r1
 80085fe:	2000      	movs	r0, #0
 8008600:	4939      	ldr	r1, [pc, #228]	; (80086e8 <__ieee754_pow+0xa20>)
 8008602:	f7f7 fdb1 	bl	8000168 <__aeabi_dsub>
 8008606:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800860a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800860e:	da29      	bge.n	8008664 <__ieee754_pow+0x99c>
 8008610:	4652      	mov	r2, sl
 8008612:	f000 f955 	bl	80088c0 <scalbn>
 8008616:	e9dd 2300 	ldrd	r2, r3, [sp]
 800861a:	f7ff bbfe 	b.w	8007e1a <__ieee754_pow+0x152>
 800861e:	4b33      	ldr	r3, [pc, #204]	; (80086ec <__ieee754_pow+0xa24>)
 8008620:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8008624:	429f      	cmp	r7, r3
 8008626:	f77f af13 	ble.w	8008450 <__ieee754_pow+0x788>
 800862a:	4b31      	ldr	r3, [pc, #196]	; (80086f0 <__ieee754_pow+0xa28>)
 800862c:	440b      	add	r3, r1
 800862e:	4303      	orrs	r3, r0
 8008630:	d009      	beq.n	8008646 <__ieee754_pow+0x97e>
 8008632:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008636:	2200      	movs	r2, #0
 8008638:	2300      	movs	r3, #0
 800863a:	f7f8 f9bf 	bl	80009bc <__aeabi_dcmplt>
 800863e:	3800      	subs	r0, #0
 8008640:	bf18      	it	ne
 8008642:	2001      	movne	r0, #1
 8008644:	e453      	b.n	8007eee <__ieee754_pow+0x226>
 8008646:	4622      	mov	r2, r4
 8008648:	462b      	mov	r3, r5
 800864a:	f7f7 fd8d 	bl	8000168 <__aeabi_dsub>
 800864e:	4642      	mov	r2, r8
 8008650:	464b      	mov	r3, r9
 8008652:	f7f8 f9c7 	bl	80009e4 <__aeabi_dcmpge>
 8008656:	2800      	cmp	r0, #0
 8008658:	f43f aefa 	beq.w	8008450 <__ieee754_pow+0x788>
 800865c:	e7e9      	b.n	8008632 <__ieee754_pow+0x96a>
 800865e:	f04f 0a00 	mov.w	sl, #0
 8008662:	e720      	b.n	80084a6 <__ieee754_pow+0x7de>
 8008664:	4621      	mov	r1, r4
 8008666:	e7d6      	b.n	8008616 <__ieee754_pow+0x94e>
 8008668:	f04f 0b00 	mov.w	fp, #0
 800866c:	f8df c078 	ldr.w	ip, [pc, #120]	; 80086e8 <__ieee754_pow+0xa20>
 8008670:	f7ff bbba 	b.w	8007de8 <__ieee754_pow+0x120>
 8008674:	f04f 0b00 	mov.w	fp, #0
 8008678:	f04f 0c00 	mov.w	ip, #0
 800867c:	f7ff bbb4 	b.w	8007de8 <__ieee754_pow+0x120>
 8008680:	4640      	mov	r0, r8
 8008682:	4649      	mov	r1, r9
 8008684:	f7ff bb3d 	b.w	8007d02 <__ieee754_pow+0x3a>
 8008688:	9200      	str	r2, [sp, #0]
 800868a:	f7ff bb89 	b.w	8007da0 <__ieee754_pow+0xd8>
 800868e:	2300      	movs	r3, #0
 8008690:	f7ff bb73 	b.w	8007d7a <__ieee754_pow+0xb2>
 8008694:	f3af 8000 	nop.w
 8008698:	652b82fe 	.word	0x652b82fe
 800869c:	3c971547 	.word	0x3c971547
 80086a0:	00000000 	.word	0x00000000
 80086a4:	3fe62e43 	.word	0x3fe62e43
 80086a8:	fefa39ef 	.word	0xfefa39ef
 80086ac:	3fe62e42 	.word	0x3fe62e42
 80086b0:	0ca86c39 	.word	0x0ca86c39
 80086b4:	be205c61 	.word	0xbe205c61
 80086b8:	72bea4d0 	.word	0x72bea4d0
 80086bc:	3e663769 	.word	0x3e663769
 80086c0:	c5d26bf1 	.word	0xc5d26bf1
 80086c4:	3ebbbd41 	.word	0x3ebbbd41
 80086c8:	af25de2c 	.word	0xaf25de2c
 80086cc:	3f11566a 	.word	0x3f11566a
 80086d0:	16bebd93 	.word	0x16bebd93
 80086d4:	3f66c16c 	.word	0x3f66c16c
 80086d8:	5555553e 	.word	0x5555553e
 80086dc:	3fc55555 	.word	0x3fc55555
 80086e0:	3fe00000 	.word	0x3fe00000
 80086e4:	000fffff 	.word	0x000fffff
 80086e8:	3ff00000 	.word	0x3ff00000
 80086ec:	4090cbff 	.word	0x4090cbff
 80086f0:	3f6f3400 	.word	0x3f6f3400

080086f4 <__ieee754_sqrt>:
 80086f4:	f8df c158 	ldr.w	ip, [pc, #344]	; 8008850 <__ieee754_sqrt+0x15c>
 80086f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086fc:	ea3c 0c01 	bics.w	ip, ip, r1
 8008700:	4606      	mov	r6, r0
 8008702:	460d      	mov	r5, r1
 8008704:	460c      	mov	r4, r1
 8008706:	460a      	mov	r2, r1
 8008708:	4607      	mov	r7, r0
 800870a:	4603      	mov	r3, r0
 800870c:	d10f      	bne.n	800872e <__ieee754_sqrt+0x3a>
 800870e:	4602      	mov	r2, r0
 8008710:	460b      	mov	r3, r1
 8008712:	f7f7 fee1 	bl	80004d8 <__aeabi_dmul>
 8008716:	4602      	mov	r2, r0
 8008718:	460b      	mov	r3, r1
 800871a:	4630      	mov	r0, r6
 800871c:	4629      	mov	r1, r5
 800871e:	f7f7 fd25 	bl	800016c <__adddf3>
 8008722:	4606      	mov	r6, r0
 8008724:	460d      	mov	r5, r1
 8008726:	4630      	mov	r0, r6
 8008728:	4629      	mov	r1, r5
 800872a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800872e:	2900      	cmp	r1, #0
 8008730:	dc0e      	bgt.n	8008750 <__ieee754_sqrt+0x5c>
 8008732:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8008736:	ea5c 0707 	orrs.w	r7, ip, r7
 800873a:	d0f4      	beq.n	8008726 <__ieee754_sqrt+0x32>
 800873c:	b141      	cbz	r1, 8008750 <__ieee754_sqrt+0x5c>
 800873e:	4602      	mov	r2, r0
 8008740:	460b      	mov	r3, r1
 8008742:	f7f7 fd11 	bl	8000168 <__aeabi_dsub>
 8008746:	4602      	mov	r2, r0
 8008748:	460b      	mov	r3, r1
 800874a:	f7f7 ffef 	bl	800072c <__aeabi_ddiv>
 800874e:	e7e8      	b.n	8008722 <__ieee754_sqrt+0x2e>
 8008750:	1521      	asrs	r1, r4, #20
 8008752:	d075      	beq.n	8008840 <__ieee754_sqrt+0x14c>
 8008754:	07cc      	lsls	r4, r1, #31
 8008756:	f04f 0400 	mov.w	r4, #0
 800875a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800875e:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 8008762:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008766:	bf5e      	ittt	pl
 8008768:	0fd9      	lsrpl	r1, r3, #31
 800876a:	005b      	lslpl	r3, r3, #1
 800876c:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8008770:	0fd9      	lsrs	r1, r3, #31
 8008772:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8008776:	2516      	movs	r5, #22
 8008778:	4620      	mov	r0, r4
 800877a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800877e:	107f      	asrs	r7, r7, #1
 8008780:	005b      	lsls	r3, r3, #1
 8008782:	1846      	adds	r6, r0, r1
 8008784:	4296      	cmp	r6, r2
 8008786:	bfde      	ittt	le
 8008788:	1b92      	suble	r2, r2, r6
 800878a:	1870      	addle	r0, r6, r1
 800878c:	1864      	addle	r4, r4, r1
 800878e:	0052      	lsls	r2, r2, #1
 8008790:	3d01      	subs	r5, #1
 8008792:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8008796:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800879a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800879e:	d1f0      	bne.n	8008782 <__ieee754_sqrt+0x8e>
 80087a0:	4629      	mov	r1, r5
 80087a2:	f04f 0e20 	mov.w	lr, #32
 80087a6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80087aa:	4282      	cmp	r2, r0
 80087ac:	eb06 0c05 	add.w	ip, r6, r5
 80087b0:	dc02      	bgt.n	80087b8 <__ieee754_sqrt+0xc4>
 80087b2:	d113      	bne.n	80087dc <__ieee754_sqrt+0xe8>
 80087b4:	459c      	cmp	ip, r3
 80087b6:	d811      	bhi.n	80087dc <__ieee754_sqrt+0xe8>
 80087b8:	f1bc 0f00 	cmp.w	ip, #0
 80087bc:	eb0c 0506 	add.w	r5, ip, r6
 80087c0:	da43      	bge.n	800884a <__ieee754_sqrt+0x156>
 80087c2:	2d00      	cmp	r5, #0
 80087c4:	db41      	blt.n	800884a <__ieee754_sqrt+0x156>
 80087c6:	f100 0801 	add.w	r8, r0, #1
 80087ca:	1a12      	subs	r2, r2, r0
 80087cc:	4640      	mov	r0, r8
 80087ce:	459c      	cmp	ip, r3
 80087d0:	bf88      	it	hi
 80087d2:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80087d6:	eba3 030c 	sub.w	r3, r3, ip
 80087da:	4431      	add	r1, r6
 80087dc:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80087e0:	f1be 0e01 	subs.w	lr, lr, #1
 80087e4:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 80087e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80087ec:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80087f0:	d1db      	bne.n	80087aa <__ieee754_sqrt+0xb6>
 80087f2:	4313      	orrs	r3, r2
 80087f4:	d006      	beq.n	8008804 <__ieee754_sqrt+0x110>
 80087f6:	1c48      	adds	r0, r1, #1
 80087f8:	bf0b      	itete	eq
 80087fa:	4671      	moveq	r1, lr
 80087fc:	3101      	addne	r1, #1
 80087fe:	3401      	addeq	r4, #1
 8008800:	f021 0101 	bicne.w	r1, r1, #1
 8008804:	1063      	asrs	r3, r4, #1
 8008806:	0849      	lsrs	r1, r1, #1
 8008808:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800880c:	07e2      	lsls	r2, r4, #31
 800880e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8008812:	bf48      	it	mi
 8008814:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8008818:	460e      	mov	r6, r1
 800881a:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800881e:	e782      	b.n	8008726 <__ieee754_sqrt+0x32>
 8008820:	0ada      	lsrs	r2, r3, #11
 8008822:	3815      	subs	r0, #21
 8008824:	055b      	lsls	r3, r3, #21
 8008826:	2a00      	cmp	r2, #0
 8008828:	d0fa      	beq.n	8008820 <__ieee754_sqrt+0x12c>
 800882a:	02d5      	lsls	r5, r2, #11
 800882c:	d50a      	bpl.n	8008844 <__ieee754_sqrt+0x150>
 800882e:	f1c1 0420 	rsb	r4, r1, #32
 8008832:	fa23 f404 	lsr.w	r4, r3, r4
 8008836:	1e4d      	subs	r5, r1, #1
 8008838:	408b      	lsls	r3, r1
 800883a:	4322      	orrs	r2, r4
 800883c:	1b41      	subs	r1, r0, r5
 800883e:	e789      	b.n	8008754 <__ieee754_sqrt+0x60>
 8008840:	4608      	mov	r0, r1
 8008842:	e7f0      	b.n	8008826 <__ieee754_sqrt+0x132>
 8008844:	0052      	lsls	r2, r2, #1
 8008846:	3101      	adds	r1, #1
 8008848:	e7ef      	b.n	800882a <__ieee754_sqrt+0x136>
 800884a:	4680      	mov	r8, r0
 800884c:	e7bd      	b.n	80087ca <__ieee754_sqrt+0xd6>
 800884e:	bf00      	nop
 8008850:	7ff00000 	.word	0x7ff00000

08008854 <with_errno>:
 8008854:	b570      	push	{r4, r5, r6, lr}
 8008856:	4604      	mov	r4, r0
 8008858:	460d      	mov	r5, r1
 800885a:	4616      	mov	r6, r2
 800885c:	f7ff f998 	bl	8007b90 <__errno>
 8008860:	4629      	mov	r1, r5
 8008862:	6006      	str	r6, [r0, #0]
 8008864:	4620      	mov	r0, r4
 8008866:	bd70      	pop	{r4, r5, r6, pc}

08008868 <xflow>:
 8008868:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800886a:	4615      	mov	r5, r2
 800886c:	461c      	mov	r4, r3
 800886e:	b180      	cbz	r0, 8008892 <xflow+0x2a>
 8008870:	4610      	mov	r0, r2
 8008872:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008876:	e9cd 0100 	strd	r0, r1, [sp]
 800887a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800887e:	4628      	mov	r0, r5
 8008880:	4621      	mov	r1, r4
 8008882:	f7f7 fe29 	bl	80004d8 <__aeabi_dmul>
 8008886:	2222      	movs	r2, #34	; 0x22
 8008888:	b003      	add	sp, #12
 800888a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800888e:	f7ff bfe1 	b.w	8008854 <with_errno>
 8008892:	4610      	mov	r0, r2
 8008894:	4619      	mov	r1, r3
 8008896:	e7ee      	b.n	8008876 <xflow+0xe>

08008898 <__math_uflow>:
 8008898:	2200      	movs	r2, #0
 800889a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800889e:	f7ff bfe3 	b.w	8008868 <xflow>

080088a2 <__math_oflow>:
 80088a2:	2200      	movs	r2, #0
 80088a4:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80088a8:	f7ff bfde 	b.w	8008868 <xflow>

080088ac <fabs>:
 80088ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80088b0:	4770      	bx	lr

080088b2 <finite>:
 80088b2:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 80088b6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80088ba:	0fc0      	lsrs	r0, r0, #31
 80088bc:	4770      	bx	lr
	...

080088c0 <scalbn>:
 80088c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088c2:	f3c1 560a 	ubfx	r6, r1, #20, #11
 80088c6:	4604      	mov	r4, r0
 80088c8:	460d      	mov	r5, r1
 80088ca:	4617      	mov	r7, r2
 80088cc:	460b      	mov	r3, r1
 80088ce:	b996      	cbnz	r6, 80088f6 <scalbn+0x36>
 80088d0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80088d4:	4303      	orrs	r3, r0
 80088d6:	d039      	beq.n	800894c <scalbn+0x8c>
 80088d8:	4b33      	ldr	r3, [pc, #204]	; (80089a8 <scalbn+0xe8>)
 80088da:	2200      	movs	r2, #0
 80088dc:	f7f7 fdfc 	bl	80004d8 <__aeabi_dmul>
 80088e0:	4b32      	ldr	r3, [pc, #200]	; (80089ac <scalbn+0xec>)
 80088e2:	4604      	mov	r4, r0
 80088e4:	429f      	cmp	r7, r3
 80088e6:	460d      	mov	r5, r1
 80088e8:	da0f      	bge.n	800890a <scalbn+0x4a>
 80088ea:	a32b      	add	r3, pc, #172	; (adr r3, 8008998 <scalbn+0xd8>)
 80088ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088f0:	f7f7 fdf2 	bl	80004d8 <__aeabi_dmul>
 80088f4:	e006      	b.n	8008904 <scalbn+0x44>
 80088f6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80088fa:	4296      	cmp	r6, r2
 80088fc:	d10a      	bne.n	8008914 <scalbn+0x54>
 80088fe:	4602      	mov	r2, r0
 8008900:	f7f7 fc34 	bl	800016c <__adddf3>
 8008904:	4604      	mov	r4, r0
 8008906:	460d      	mov	r5, r1
 8008908:	e020      	b.n	800894c <scalbn+0x8c>
 800890a:	460b      	mov	r3, r1
 800890c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8008910:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8008914:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8008918:	19b9      	adds	r1, r7, r6
 800891a:	4291      	cmp	r1, r2
 800891c:	dd0e      	ble.n	800893c <scalbn+0x7c>
 800891e:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8008922:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8008926:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800892a:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800892e:	4820      	ldr	r0, [pc, #128]	; (80089b0 <scalbn+0xf0>)
 8008930:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8008934:	a31a      	add	r3, pc, #104	; (adr r3, 80089a0 <scalbn+0xe0>)
 8008936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800893a:	e7d9      	b.n	80088f0 <scalbn+0x30>
 800893c:	2900      	cmp	r1, #0
 800893e:	dd08      	ble.n	8008952 <scalbn+0x92>
 8008940:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008944:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008948:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800894c:	4620      	mov	r0, r4
 800894e:	4629      	mov	r1, r5
 8008950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008952:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8008956:	da12      	bge.n	800897e <scalbn+0xbe>
 8008958:	f24c 3350 	movw	r3, #50000	; 0xc350
 800895c:	429f      	cmp	r7, r3
 800895e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8008962:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 8008966:	dcdc      	bgt.n	8008922 <scalbn+0x62>
 8008968:	a30b      	add	r3, pc, #44	; (adr r3, 8008998 <scalbn+0xd8>)
 800896a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800896e:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8008972:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8008976:	480f      	ldr	r0, [pc, #60]	; (80089b4 <scalbn+0xf4>)
 8008978:	f041 011f 	orr.w	r1, r1, #31
 800897c:	e7b8      	b.n	80088f0 <scalbn+0x30>
 800897e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008982:	3136      	adds	r1, #54	; 0x36
 8008984:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008988:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800898c:	4620      	mov	r0, r4
 800898e:	4629      	mov	r1, r5
 8008990:	2200      	movs	r2, #0
 8008992:	4b09      	ldr	r3, [pc, #36]	; (80089b8 <scalbn+0xf8>)
 8008994:	e7ac      	b.n	80088f0 <scalbn+0x30>
 8008996:	bf00      	nop
 8008998:	c2f8f359 	.word	0xc2f8f359
 800899c:	01a56e1f 	.word	0x01a56e1f
 80089a0:	8800759c 	.word	0x8800759c
 80089a4:	7e37e43c 	.word	0x7e37e43c
 80089a8:	43500000 	.word	0x43500000
 80089ac:	ffff3cb0 	.word	0xffff3cb0
 80089b0:	8800759c 	.word	0x8800759c
 80089b4:	c2f8f359 	.word	0xc2f8f359
 80089b8:	3c900000 	.word	0x3c900000

080089bc <_init>:
 80089bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089be:	bf00      	nop
 80089c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089c2:	bc08      	pop	{r3}
 80089c4:	469e      	mov	lr, r3
 80089c6:	4770      	bx	lr

080089c8 <_fini>:
 80089c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089ca:	bf00      	nop
 80089cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089ce:	bc08      	pop	{r3}
 80089d0:	469e      	mov	lr, r3
 80089d2:	4770      	bx	lr
