
Bluepill v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c8c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08008da0  08008da0  00018da0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e58  08008e58  000200ec  2**0
                  CONTENTS
  4 .ARM          00000000  08008e58  08008e58  000200ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008e58  08008e58  000200ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e58  08008e58  00018e58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e5c  08008e5c  00018e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  08008e60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004050  200000f0  08008f4c  000200f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004140  08008f4c  00024140  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011771  00000000  00000000  00020115  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e63  00000000  00000000  00031886  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d8  00000000  00000000  000346f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011b8  00000000  00000000  000359c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019fb4  00000000  00000000  00036b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016d5c  00000000  00000000  00050b34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093eae  00000000  00000000  00067890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fb73e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005638  00000000  00000000  000fb790  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000f0 	.word	0x200000f0
 800012c:	00000000 	.word	0x00000000
 8000130:	08008d84 	.word	0x08008d84

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000f4 	.word	0x200000f4
 800014c:	08008d84 	.word	0x08008d84

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2iz>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001118:	d30f      	bcc.n	800113a <__aeabi_f2iz+0x2a>
 800111a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d90d      	bls.n	8001140 <__aeabi_f2iz+0x30>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800112c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001130:	fa23 f002 	lsr.w	r0, r3, r2
 8001134:	bf18      	it	ne
 8001136:	4240      	negne	r0, r0
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr
 8001140:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001144:	d101      	bne.n	800114a <__aeabi_f2iz+0x3a>
 8001146:	0242      	lsls	r2, r0, #9
 8001148:	d105      	bne.n	8001156 <__aeabi_f2iz+0x46>
 800114a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800114e:	bf08      	it	eq
 8001150:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001154:	4770      	bx	lr
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	4770      	bx	lr

0800115c <__aeabi_f2uiz>:
 800115c:	0042      	lsls	r2, r0, #1
 800115e:	d20e      	bcs.n	800117e <__aeabi_f2uiz+0x22>
 8001160:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001164:	d30b      	bcc.n	800117e <__aeabi_f2uiz+0x22>
 8001166:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800116a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800116e:	d409      	bmi.n	8001184 <__aeabi_f2uiz+0x28>
 8001170:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001174:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001178:	fa23 f002 	lsr.w	r0, r3, r2
 800117c:	4770      	bx	lr
 800117e:	f04f 0000 	mov.w	r0, #0
 8001182:	4770      	bx	lr
 8001184:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001188:	d101      	bne.n	800118e <__aeabi_f2uiz+0x32>
 800118a:	0242      	lsls	r2, r0, #9
 800118c:	d102      	bne.n	8001194 <__aeabi_f2uiz+0x38>
 800118e:	f04f 30ff 	mov.w	r0, #4294967295
 8001192:	4770      	bx	lr
 8001194:	f04f 0000 	mov.w	r0, #0
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop

0800119c <GetPage>:
 * Some STM32F103C8 have 64 KB FLASH Memory, so I guess they have Page 0 to Page 63 only.
 */

/* FLASH_PAGE_SIZE should be able to get the size of the Page according to the controller */
static uint32_t GetPage(uint32_t Address)
{
 800119c:	b480      	push	{r7}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  for (int indx=0; indx<128; indx++)
 80011a4:	2300      	movs	r3, #0
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	e016      	b.n	80011d8 <GetPage+0x3c>
  {
	  if((Address < (0x08000000 + (FLASH_PAGE_SIZE *(indx+1))) ) && (Address >= (0x08000000 + FLASH_PAGE_SIZE*indx)))
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80011b0:	3301      	adds	r3, #1
 80011b2:	029b      	lsls	r3, r3, #10
 80011b4:	687a      	ldr	r2, [r7, #4]
 80011b6:	429a      	cmp	r2, r3
 80011b8:	d20b      	bcs.n	80011d2 <GetPage+0x36>
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80011c0:	029b      	lsls	r3, r3, #10
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d304      	bcc.n	80011d2 <GetPage+0x36>
	  {
		  return (0x08000000 + FLASH_PAGE_SIZE*indx);
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80011ce:	029b      	lsls	r3, r3, #10
 80011d0:	e006      	b.n	80011e0 <GetPage+0x44>
  for (int indx=0; indx<128; indx++)
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	3301      	adds	r3, #1
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	2b7f      	cmp	r3, #127	; 0x7f
 80011dc:	dde5      	ble.n	80011aa <GetPage+0xe>
	  }
  }

  return 0;
 80011de:	2300      	movs	r3, #0
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3714      	adds	r7, #20
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bc80      	pop	{r7}
 80011e8:	4770      	bx	lr
	...

080011ec <Flash_Write_Data>:
   float float_variable =  thing.a;
   return float_variable;
}

uint32_t Flash_Write_Data (uint32_t StartPageAddress, uint32_t *Data, uint16_t numberofwords)
{
 80011ec:	b5b0      	push	{r4, r5, r7, lr}
 80011ee:	b08a      	sub	sp, #40	; 0x28
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	4613      	mov	r3, r2
 80011f8:	80fb      	strh	r3, [r7, #6]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PAGEError;
	int sofar=0;
 80011fa:	2300      	movs	r3, #0
 80011fc:	627b      	str	r3, [r7, #36]	; 0x24

	  /* Unlock the Flash to enable the flash control register access *************/
	   HAL_FLASH_Unlock();
 80011fe:	f004 fe45 	bl	8005e8c <HAL_FLASH_Unlock>

	   /* Erase the user Flash area*/

	  uint32_t StartPage = GetPage(StartPageAddress);
 8001202:	68f8      	ldr	r0, [r7, #12]
 8001204:	f7ff ffca 	bl	800119c <GetPage>
 8001208:	6238      	str	r0, [r7, #32]
	  uint32_t EndPageAdress = StartPageAddress + numberofwords*4;
 800120a:	88fb      	ldrh	r3, [r7, #6]
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	461a      	mov	r2, r3
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	4413      	add	r3, r2
 8001214:	61fb      	str	r3, [r7, #28]
	  uint32_t EndPage = GetPage(EndPageAdress);
 8001216:	69f8      	ldr	r0, [r7, #28]
 8001218:	f7ff ffc0 	bl	800119c <GetPage>
 800121c:	61b8      	str	r0, [r7, #24]

	   /* Fill EraseInit structure*/
	   EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 800121e:	4b20      	ldr	r3, [pc, #128]	; (80012a0 <Flash_Write_Data+0xb4>)
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
	   EraseInitStruct.PageAddress = StartPage;
 8001224:	4a1e      	ldr	r2, [pc, #120]	; (80012a0 <Flash_Write_Data+0xb4>)
 8001226:	6a3b      	ldr	r3, [r7, #32]
 8001228:	6093      	str	r3, [r2, #8]
	   EraseInitStruct.NbPages     = ((EndPage - StartPage)/FLASH_PAGE_SIZE) +1;
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	6a3b      	ldr	r3, [r7, #32]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	0a9b      	lsrs	r3, r3, #10
 8001232:	3301      	adds	r3, #1
 8001234:	4a1a      	ldr	r2, [pc, #104]	; (80012a0 <Flash_Write_Data+0xb4>)
 8001236:	60d3      	str	r3, [r2, #12]

	   if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 8001238:	f107 0314 	add.w	r3, r7, #20
 800123c:	4619      	mov	r1, r3
 800123e:	4818      	ldr	r0, [pc, #96]	; (80012a0 <Flash_Write_Data+0xb4>)
 8001240:	f004 ff16 	bl	8006070 <HAL_FLASHEx_Erase>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d01f      	beq.n	800128a <Flash_Write_Data+0x9e>
	   {
	     /*Error occurred while page erase.*/
		  return HAL_FLASH_GetError ();
 800124a:	f004 fe55 	bl	8005ef8 <HAL_FLASH_GetError>
 800124e:	4603      	mov	r3, r0
 8001250:	e022      	b.n	8001298 <Flash_Write_Data+0xac>

	   /* Program the user Flash area word by word*/

	   while (sofar<numberofwords)
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartPageAddress, Data[sofar]) == HAL_OK)
 8001252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	68ba      	ldr	r2, [r7, #8]
 8001258:	4413      	add	r3, r2
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2200      	movs	r2, #0
 800125e:	461c      	mov	r4, r3
 8001260:	4615      	mov	r5, r2
 8001262:	4622      	mov	r2, r4
 8001264:	462b      	mov	r3, r5
 8001266:	68f9      	ldr	r1, [r7, #12]
 8001268:	2002      	movs	r0, #2
 800126a:	f004 fd9f 	bl	8005dac <HAL_FLASH_Program>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d106      	bne.n	8001282 <Flash_Write_Data+0x96>
	     {
	    	 StartPageAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	3304      	adds	r3, #4
 8001278:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 800127a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127c:	3301      	adds	r3, #1
 800127e:	627b      	str	r3, [r7, #36]	; 0x24
 8001280:	e003      	b.n	800128a <Flash_Write_Data+0x9e>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 8001282:	f004 fe39 	bl	8005ef8 <HAL_FLASH_GetError>
 8001286:	4603      	mov	r3, r0
 8001288:	e006      	b.n	8001298 <Flash_Write_Data+0xac>
	   while (sofar<numberofwords)
 800128a:	88fb      	ldrh	r3, [r7, #6]
 800128c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800128e:	429a      	cmp	r2, r3
 8001290:	dbdf      	blt.n	8001252 <Flash_Write_Data+0x66>
	     }
	   }

	   /* Lock the Flash to disable the flash control register access (recommended
	      to protect the FLASH memory against possible unwanted operation) *********/
	   HAL_FLASH_Lock();
 8001292:	f004 fe21 	bl	8005ed8 <HAL_FLASH_Lock>

	   return 0;
 8001296:	2300      	movs	r3, #0
}
 8001298:	4618      	mov	r0, r3
 800129a:	3728      	adds	r7, #40	; 0x28
 800129c:	46bd      	mov	sp, r7
 800129e:	bdb0      	pop	{r4, r5, r7, pc}
 80012a0:	2000010c 	.word	0x2000010c

080012a4 <Flash_Read_Data>:


void Flash_Read_Data (uint32_t StartPageAddress, uint32_t *RxBuf, uint16_t numberofwords)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	4613      	mov	r3, r2
 80012b0:	80fb      	strh	r3, [r7, #6]
	while (1)
	{

		*RxBuf = *(__IO uint32_t *)StartPageAddress;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	601a      	str	r2, [r3, #0]
		StartPageAddress += 4;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	3304      	adds	r3, #4
 80012be:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	3304      	adds	r3, #4
 80012c4:	60bb      	str	r3, [r7, #8]
		if (!(numberofwords--)) break;
 80012c6:	88fb      	ldrh	r3, [r7, #6]
 80012c8:	1e5a      	subs	r2, r3, #1
 80012ca:	80fa      	strh	r2, [r7, #6]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d000      	beq.n	80012d2 <Flash_Read_Data+0x2e>
		*RxBuf = *(__IO uint32_t *)StartPageAddress;
 80012d0:	e7ef      	b.n	80012b2 <Flash_Read_Data+0xe>
		if (!(numberofwords--)) break;
 80012d2:	bf00      	nop
	}
}
 80012d4:	bf00      	nop
 80012d6:	3714      	adds	r7, #20
 80012d8:	46bd      	mov	sp, r7
 80012da:	bc80      	pop	{r7}
 80012dc:	4770      	bx	lr

080012de <Convert_To_Str>:
void Convert_To_Str (uint32_t *Data, char *Buf)
{
 80012de:	b590      	push	{r4, r7, lr}
 80012e0:	b085      	sub	sp, #20
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
 80012e6:	6039      	str	r1, [r7, #0]
	int numberofbytes = ((strlen((char *)Data)/4) + ((strlen((char *)Data) % 4) != 0)) *4;
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f7fe ff31 	bl	8000150 <strlen>
 80012ee:	4603      	mov	r3, r0
 80012f0:	089c      	lsrs	r4, r3, #2
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f7fe ff2c 	bl	8000150 <strlen>
 80012f8:	4603      	mov	r3, r0
 80012fa:	f003 0303 	and.w	r3, r3, #3
 80012fe:	2b00      	cmp	r3, #0
 8001300:	bf14      	ite	ne
 8001302:	2301      	movne	r3, #1
 8001304:	2300      	moveq	r3, #0
 8001306:	b2db      	uxtb	r3, r3
 8001308:	4423      	add	r3, r4
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	60bb      	str	r3, [r7, #8]

	for (int i=0; i<numberofbytes; i++)
 800130e:	2300      	movs	r3, #0
 8001310:	60fb      	str	r3, [r7, #12]
 8001312:	e01b      	b.n	800134c <Convert_To_Str+0x6e>
	{
		Buf[i] = Data[i/4]>>(8*(i%4));
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	2b00      	cmp	r3, #0
 8001318:	da00      	bge.n	800131c <Convert_To_Str+0x3e>
 800131a:	3303      	adds	r3, #3
 800131c:	109b      	asrs	r3, r3, #2
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	687a      	ldr	r2, [r7, #4]
 8001322:	4413      	add	r3, r2
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	4259      	negs	r1, r3
 800132a:	f003 0303 	and.w	r3, r3, #3
 800132e:	f001 0103 	and.w	r1, r1, #3
 8001332:	bf58      	it	pl
 8001334:	424b      	negpl	r3, r1
 8001336:	00db      	lsls	r3, r3, #3
 8001338:	fa22 f103 	lsr.w	r1, r2, r3
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	683a      	ldr	r2, [r7, #0]
 8001340:	4413      	add	r3, r2
 8001342:	b2ca      	uxtb	r2, r1
 8001344:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<numberofbytes; i++)
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	3301      	adds	r3, #1
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	68fa      	ldr	r2, [r7, #12]
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	429a      	cmp	r2, r3
 8001352:	dbdf      	blt.n	8001314 <Convert_To_Str+0x36>
	}
}
 8001354:	bf00      	nop
 8001356:	bf00      	nop
 8001358:	3714      	adds	r7, #20
 800135a:	46bd      	mov	sp, r7
 800135c:	bd90      	pop	{r4, r7, pc}
	...

08001360 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001364:	f003 fe02 	bl	8004f6c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001368:	f000 f89a 	bl	80014a0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800136c:	f000 fae4 	bl	8001938 <MX_GPIO_Init>
	MX_DMA_Init();
 8001370:	f000 fac4 	bl	80018fc <MX_DMA_Init>
	MX_ADC1_Init();
 8001374:	f000 f8f0 	bl	8001558 <MX_ADC1_Init>
	MX_TIM1_Init();
 8001378:	f000 f986 	bl	8001688 <MX_TIM1_Init>
	MX_TIM3_Init();
 800137c:	f000 f9dc 	bl	8001738 <MX_TIM3_Init>
	MX_TIM4_Init();
 8001380:	f000 fa2e 	bl	80017e0 <MX_TIM4_Init>
	MX_USART3_UART_Init();
 8001384:	f000 fa90 	bl	80018a8 <MX_USART3_UART_Init>
	MX_I2C1_Init();
 8001388:	f000 f950 	bl	800162c <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	btns[0].Port = BTN1_GPIO_Port;
 800138c:	4b37      	ldr	r3, [pc, #220]	; (800146c <main+0x10c>)
 800138e:	4a38      	ldr	r2, [pc, #224]	; (8001470 <main+0x110>)
 8001390:	601a      	str	r2, [r3, #0]
	btns[0].pin = BTN1_Pin;
 8001392:	4b36      	ldr	r3, [pc, #216]	; (800146c <main+0x10c>)
 8001394:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001398:	809a      	strh	r2, [r3, #4]
	btns[0].estado = ESPERA;
 800139a:	4b34      	ldr	r3, [pc, #208]	; (800146c <main+0x10c>)
 800139c:	2200      	movs	r2, #0
 800139e:	609a      	str	r2, [r3, #8]
	btns[0].flag = 0;
 80013a0:	4b32      	ldr	r3, [pc, #200]	; (800146c <main+0x10c>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	60da      	str	r2, [r3, #12]
	btns[1].Port = BTN2_GPIO_Port;
 80013a6:	4b31      	ldr	r3, [pc, #196]	; (800146c <main+0x10c>)
 80013a8:	4a31      	ldr	r2, [pc, #196]	; (8001470 <main+0x110>)
 80013aa:	611a      	str	r2, [r3, #16]
	btns[1].pin = BTN2_Pin;
 80013ac:	4b2f      	ldr	r3, [pc, #188]	; (800146c <main+0x10c>)
 80013ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013b2:	829a      	strh	r2, [r3, #20]
	btns[1].estado = ESPERA;
 80013b4:	4b2d      	ldr	r3, [pc, #180]	; (800146c <main+0x10c>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	619a      	str	r2, [r3, #24]
	btns[1].flag = 0;
 80013ba:	4b2c      	ldr	r3, [pc, #176]	; (800146c <main+0x10c>)
 80013bc:	2200      	movs	r2, #0
 80013be:	61da      	str	r2, [r3, #28]
	btns[2].Port = BTN3_GPIO_Port;
 80013c0:	4b2a      	ldr	r3, [pc, #168]	; (800146c <main+0x10c>)
 80013c2:	4a2b      	ldr	r2, [pc, #172]	; (8001470 <main+0x110>)
 80013c4:	621a      	str	r2, [r3, #32]
	btns[2].pin = BTN3_Pin;
 80013c6:	4b29      	ldr	r3, [pc, #164]	; (800146c <main+0x10c>)
 80013c8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013cc:	849a      	strh	r2, [r3, #36]	; 0x24
	btns[2].estado = ESPERA;
 80013ce:	4b27      	ldr	r3, [pc, #156]	; (800146c <main+0x10c>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	629a      	str	r2, [r3, #40]	; 0x28
	btns[2].flag = 0;
 80013d4:	4b25      	ldr	r3, [pc, #148]	; (800146c <main+0x10c>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	62da      	str	r2, [r3, #44]	; 0x2c
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80013da:	2108      	movs	r1, #8
 80013dc:	4825      	ldr	r0, [pc, #148]	; (8001474 <main+0x114>)
 80013de:	f005 ff07 	bl	80071f0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80013e2:	210c      	movs	r1, #12
 80013e4:	4823      	ldr	r0, [pc, #140]	; (8001474 <main+0x114>)
 80013e6:	f005 ff03 	bl	80071f0 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80013ea:	213c      	movs	r1, #60	; 0x3c
 80013ec:	4822      	ldr	r0, [pc, #136]	; (8001478 <main+0x118>)
 80013ee:	f006 f843 	bl	8007478 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80013f2:	213c      	movs	r1, #60	; 0x3c
 80013f4:	4821      	ldr	r0, [pc, #132]	; (800147c <main+0x11c>)
 80013f6:	f006 f83f 	bl	8007478 <HAL_TIM_Encoder_Start>
	HAL_GPIO_WritePin(STBY, GPIO_PIN_SET);
 80013fa:	2201      	movs	r2, #1
 80013fc:	2108      	movs	r1, #8
 80013fe:	481c      	ldr	r0, [pc, #112]	; (8001470 <main+0x110>)
 8001400:	f005 f879 	bl	80064f6 <HAL_GPIO_WritePin>
	TIM4->CCR3 = 10000;
 8001404:	4b1e      	ldr	r3, [pc, #120]	; (8001480 <main+0x120>)
 8001406:	f242 7210 	movw	r2, #10000	; 0x2710
 800140a:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM4->CCR4 = 10000;
 800140c:	4b1c      	ldr	r3, [pc, #112]	; (8001480 <main+0x120>)
 800140e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001412:	641a      	str	r2, [r3, #64]	; 0x40
	xSpeed = 15000;
 8001414:	4b1b      	ldr	r3, [pc, #108]	; (8001484 <main+0x124>)
 8001416:	f643 2298 	movw	r2, #15000	; 0x3a98
 800141a:	601a      	str	r2, [r3, #0]
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_buf, ADC_BUF_LEN);
 800141c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001420:	4919      	ldr	r1, [pc, #100]	; (8001488 <main+0x128>)
 8001422:	481a      	ldr	r0, [pc, #104]	; (800148c <main+0x12c>)
 8001424:	f003 fedc 	bl	80051e0 <HAL_ADC_Start_DMA>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 8001428:	2200      	movs	r2, #0
 800142a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800142e:	4810      	ldr	r0, [pc, #64]	; (8001470 <main+0x110>)
 8001430:	f005 f861 	bl	80064f6 <HAL_GPIO_WritePin>
	TIM3->CNT = 100;
 8001434:	4b16      	ldr	r3, [pc, #88]	; (8001490 <main+0x130>)
 8001436:	2264      	movs	r2, #100	; 0x64
 8001438:	625a      	str	r2, [r3, #36]	; 0x24
	TIM1->CNT = 100;
 800143a:	4b16      	ldr	r3, [pc, #88]	; (8001494 <main+0x134>)
 800143c:	2264      	movs	r2, #100	; 0x64
 800143e:	625a      	str	r2, [r3, #36]	; 0x24
	offset = 25.1;
 8001440:	4b15      	ldr	r3, [pc, #84]	; (8001498 <main+0x138>)
 8001442:	4a16      	ldr	r2, [pc, #88]	; (800149c <main+0x13c>)
 8001444:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 8001446:	2200      	movs	r2, #0
 8001448:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800144c:	4808      	ldr	r0, [pc, #32]	; (8001470 <main+0x110>)
 800144e:	f005 f852 	bl	80064f6 <HAL_GPIO_WritePin>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		mainMachine();
 8001452:	f000 fcc1 	bl	8001dd8 <mainMachine>
		 ticksNow = HAL_GetTick();
		 }*/
		//intUartSend(TIM1->CNT);
		/*runMotor(ADELANTE, MOTOR_A);
		 runMotor(ADELANTE, MOTOR_B);*/
		btnMachine(0);
 8001456:	2000      	movs	r0, #0
 8001458:	f002 f808 	bl	800346c <btnMachine>
		btnMachine(1);
 800145c:	2001      	movs	r0, #1
 800145e:	f002 f805 	bl	800346c <btnMachine>
		btnMachine(2);
 8001462:	2002      	movs	r0, #2
 8001464:	f002 f802 	bl	800346c <btnMachine>
		mainMachine();
 8001468:	e7f3      	b.n	8001452 <main+0xf2>
 800146a:	bf00      	nop
 800146c:	20002360 	.word	0x20002360
 8001470:	40010c00 	.word	0x40010c00
 8001474:	20000274 	.word	0x20000274
 8001478:	200001e4 	.word	0x200001e4
 800147c:	2000022c 	.word	0x2000022c
 8001480:	40000800 	.word	0x40000800
 8001484:	200040c0 	.word	0x200040c0
 8001488:	20000300 	.word	0x20000300
 800148c:	2000011c 	.word	0x2000011c
 8001490:	40000400 	.word	0x40000400
 8001494:	40012c00 	.word	0x40012c00
 8001498:	200040d0 	.word	0x200040d0
 800149c:	41c8cccd 	.word	0x41c8cccd

080014a0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b094      	sub	sp, #80	; 0x50
 80014a4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80014a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014aa:	2228      	movs	r2, #40	; 0x28
 80014ac:	2100      	movs	r1, #0
 80014ae:	4618      	mov	r0, r3
 80014b0:	f006 fd7c 	bl	8007fac <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80014b4:	f107 0314 	add.w	r3, r7, #20
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
 80014c2:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80014c4:	1d3b      	adds	r3, r7, #4
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	605a      	str	r2, [r3, #4]
 80014cc:	609a      	str	r2, [r3, #8]
 80014ce:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014d0:	2301      	movs	r3, #1
 80014d2:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80014da:	2300      	movs	r3, #0
 80014dc:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014de:	2301      	movs	r3, #1
 80014e0:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014e2:	2302      	movs	r3, #2
 80014e4:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014ea:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80014ec:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80014f0:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80014f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014f6:	4618      	mov	r0, r3
 80014f8:	f005 f95a 	bl	80067b0 <HAL_RCC_OscConfig>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <SystemClock_Config+0x66>
		Error_Handler();
 8001502:	f002 f85f 	bl	80035c4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001506:	230f      	movs	r3, #15
 8001508:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800150a:	2302      	movs	r3, #2
 800150c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800150e:	2300      	movs	r3, #0
 8001510:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001512:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001516:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001518:	2300      	movs	r3, #0
 800151a:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800151c:	f107 0314 	add.w	r3, r7, #20
 8001520:	2102      	movs	r1, #2
 8001522:	4618      	mov	r0, r3
 8001524:	f005 fbc6 	bl	8006cb4 <HAL_RCC_ClockConfig>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <SystemClock_Config+0x92>
		Error_Handler();
 800152e:	f002 f849 	bl	80035c4 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001532:	2302      	movs	r3, #2
 8001534:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001536:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800153a:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800153c:	1d3b      	adds	r3, r7, #4
 800153e:	4618      	mov	r0, r3
 8001540:	f005 fd50 	bl	8006fe4 <HAL_RCCEx_PeriphCLKConfig>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <SystemClock_Config+0xae>
		Error_Handler();
 800154a:	f002 f83b 	bl	80035c4 <Error_Handler>
	}
}
 800154e:	bf00      	nop
 8001550:	3750      	adds	r7, #80	; 0x50
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
	...

08001558 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800155e:	1d3b      	adds	r3, r7, #4
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	605a      	str	r2, [r3, #4]
 8001566:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8001568:	4b2e      	ldr	r3, [pc, #184]	; (8001624 <MX_ADC1_Init+0xcc>)
 800156a:	4a2f      	ldr	r2, [pc, #188]	; (8001628 <MX_ADC1_Init+0xd0>)
 800156c:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800156e:	4b2d      	ldr	r3, [pc, #180]	; (8001624 <MX_ADC1_Init+0xcc>)
 8001570:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001574:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8001576:	4b2b      	ldr	r3, [pc, #172]	; (8001624 <MX_ADC1_Init+0xcc>)
 8001578:	2201      	movs	r2, #1
 800157a:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800157c:	4b29      	ldr	r3, [pc, #164]	; (8001624 <MX_ADC1_Init+0xcc>)
 800157e:	2200      	movs	r2, #0
 8001580:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001582:	4b28      	ldr	r3, [pc, #160]	; (8001624 <MX_ADC1_Init+0xcc>)
 8001584:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001588:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800158a:	4b26      	ldr	r3, [pc, #152]	; (8001624 <MX_ADC1_Init+0xcc>)
 800158c:	2200      	movs	r2, #0
 800158e:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 4;
 8001590:	4b24      	ldr	r3, [pc, #144]	; (8001624 <MX_ADC1_Init+0xcc>)
 8001592:	2204      	movs	r2, #4
 8001594:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001596:	4823      	ldr	r0, [pc, #140]	; (8001624 <MX_ADC1_Init+0xcc>)
 8001598:	f003 fd4a 	bl	8005030 <HAL_ADC_Init>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_ADC1_Init+0x4e>
		Error_Handler();
 80015a2:	f002 f80f 	bl	80035c4 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 80015a6:	2300      	movs	r3, #0
 80015a8:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80015aa:	2301      	movs	r3, #1
 80015ac:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80015ae:	2300      	movs	r3, #0
 80015b0:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80015b2:	1d3b      	adds	r3, r7, #4
 80015b4:	4619      	mov	r1, r3
 80015b6:	481b      	ldr	r0, [pc, #108]	; (8001624 <MX_ADC1_Init+0xcc>)
 80015b8:	f003 ff02 	bl	80053c0 <HAL_ADC_ConfigChannel>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_ADC1_Init+0x6e>
		Error_Handler();
 80015c2:	f001 ffff 	bl	80035c4 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 80015c6:	2301      	movs	r3, #1
 80015c8:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 80015ca:	2302      	movs	r3, #2
 80015cc:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80015ce:	1d3b      	adds	r3, r7, #4
 80015d0:	4619      	mov	r1, r3
 80015d2:	4814      	ldr	r0, [pc, #80]	; (8001624 <MX_ADC1_Init+0xcc>)
 80015d4:	f003 fef4 	bl	80053c0 <HAL_ADC_ConfigChannel>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_ADC1_Init+0x8a>
		Error_Handler();
 80015de:	f001 fff1 	bl	80035c4 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 80015e2:	2302      	movs	r3, #2
 80015e4:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_3;
 80015e6:	2303      	movs	r3, #3
 80015e8:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80015ea:	1d3b      	adds	r3, r7, #4
 80015ec:	4619      	mov	r1, r3
 80015ee:	480d      	ldr	r0, [pc, #52]	; (8001624 <MX_ADC1_Init+0xcc>)
 80015f0:	f003 fee6 	bl	80053c0 <HAL_ADC_ConfigChannel>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_ADC1_Init+0xa6>
		Error_Handler();
 80015fa:	f001 ffe3 	bl	80035c4 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 80015fe:	2303      	movs	r3, #3
 8001600:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_4;
 8001602:	2304      	movs	r3, #4
 8001604:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001606:	1d3b      	adds	r3, r7, #4
 8001608:	4619      	mov	r1, r3
 800160a:	4806      	ldr	r0, [pc, #24]	; (8001624 <MX_ADC1_Init+0xcc>)
 800160c:	f003 fed8 	bl	80053c0 <HAL_ADC_ConfigChannel>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_ADC1_Init+0xc2>
		Error_Handler();
 8001616:	f001 ffd5 	bl	80035c4 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 800161a:	bf00      	nop
 800161c:	3710      	adds	r7, #16
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	2000011c 	.word	0x2000011c
 8001628:	40012400 	.word	0x40012400

0800162c <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001630:	4b12      	ldr	r3, [pc, #72]	; (800167c <MX_I2C1_Init+0x50>)
 8001632:	4a13      	ldr	r2, [pc, #76]	; (8001680 <MX_I2C1_Init+0x54>)
 8001634:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8001636:	4b11      	ldr	r3, [pc, #68]	; (800167c <MX_I2C1_Init+0x50>)
 8001638:	4a12      	ldr	r2, [pc, #72]	; (8001684 <MX_I2C1_Init+0x58>)
 800163a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800163c:	4b0f      	ldr	r3, [pc, #60]	; (800167c <MX_I2C1_Init+0x50>)
 800163e:	2200      	movs	r2, #0
 8001640:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001642:	4b0e      	ldr	r3, [pc, #56]	; (800167c <MX_I2C1_Init+0x50>)
 8001644:	2200      	movs	r2, #0
 8001646:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001648:	4b0c      	ldr	r3, [pc, #48]	; (800167c <MX_I2C1_Init+0x50>)
 800164a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800164e:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001650:	4b0a      	ldr	r3, [pc, #40]	; (800167c <MX_I2C1_Init+0x50>)
 8001652:	2200      	movs	r2, #0
 8001654:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001656:	4b09      	ldr	r3, [pc, #36]	; (800167c <MX_I2C1_Init+0x50>)
 8001658:	2200      	movs	r2, #0
 800165a:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800165c:	4b07      	ldr	r3, [pc, #28]	; (800167c <MX_I2C1_Init+0x50>)
 800165e:	2200      	movs	r2, #0
 8001660:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001662:	4b06      	ldr	r3, [pc, #24]	; (800167c <MX_I2C1_Init+0x50>)
 8001664:	2200      	movs	r2, #0
 8001666:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001668:	4804      	ldr	r0, [pc, #16]	; (800167c <MX_I2C1_Init+0x50>)
 800166a:	f004 ff5d 	bl	8006528 <HAL_I2C_Init>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8001674:	f001 ffa6 	bl	80035c4 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001678:	bf00      	nop
 800167a:	bd80      	pop	{r7, pc}
 800167c:	20000190 	.word	0x20000190
 8001680:	40005400 	.word	0x40005400
 8001684:	000186a0 	.word	0x000186a0

08001688 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8001688:	b580      	push	{r7, lr}
 800168a:	b08c      	sub	sp, #48	; 0x30
 800168c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 800168e:	f107 030c 	add.w	r3, r7, #12
 8001692:	2224      	movs	r2, #36	; 0x24
 8001694:	2100      	movs	r1, #0
 8001696:	4618      	mov	r0, r3
 8001698:	f006 fc88 	bl	8007fac <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800169c:	1d3b      	adds	r3, r7, #4
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80016a4:	4b22      	ldr	r3, [pc, #136]	; (8001730 <MX_TIM1_Init+0xa8>)
 80016a6:	4a23      	ldr	r2, [pc, #140]	; (8001734 <MX_TIM1_Init+0xac>)
 80016a8:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 80016aa:	4b21      	ldr	r3, [pc, #132]	; (8001730 <MX_TIM1_Init+0xa8>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b0:	4b1f      	ldr	r3, [pc, #124]	; (8001730 <MX_TIM1_Init+0xa8>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 80016b6:	4b1e      	ldr	r3, [pc, #120]	; (8001730 <MX_TIM1_Init+0xa8>)
 80016b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016bc:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016be:	4b1c      	ldr	r3, [pc, #112]	; (8001730 <MX_TIM1_Init+0xa8>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80016c4:	4b1a      	ldr	r3, [pc, #104]	; (8001730 <MX_TIM1_Init+0xa8>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016ca:	4b19      	ldr	r3, [pc, #100]	; (8001730 <MX_TIM1_Init+0xa8>)
 80016cc:	2280      	movs	r2, #128	; 0x80
 80016ce:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80016d0:	2303      	movs	r3, #3
 80016d2:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80016d4:	2300      	movs	r3, #0
 80016d6:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80016d8:	2301      	movs	r3, #1
 80016da:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80016dc:	2300      	movs	r3, #0
 80016de:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 10;
 80016e0:	230a      	movs	r3, #10
 80016e2:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80016e4:	2300      	movs	r3, #0
 80016e6:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80016e8:	2301      	movs	r3, #1
 80016ea:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80016ec:	2300      	movs	r3, #0
 80016ee:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 10;
 80016f0:	230a      	movs	r3, #10
 80016f2:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK) {
 80016f4:	f107 030c 	add.w	r3, r7, #12
 80016f8:	4619      	mov	r1, r3
 80016fa:	480d      	ldr	r0, [pc, #52]	; (8001730 <MX_TIM1_Init+0xa8>)
 80016fc:	f005 fe1a 	bl	8007334 <HAL_TIM_Encoder_Init>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_TIM1_Init+0x82>
		Error_Handler();
 8001706:	f001 ff5d 	bl	80035c4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800170a:	2300      	movs	r3, #0
 800170c:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800170e:	2300      	movs	r3, #0
 8001710:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8001712:	1d3b      	adds	r3, r7, #4
 8001714:	4619      	mov	r1, r3
 8001716:	4806      	ldr	r0, [pc, #24]	; (8001730 <MX_TIM1_Init+0xa8>)
 8001718:	f006 fa08 	bl	8007b2c <HAL_TIMEx_MasterConfigSynchronization>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_TIM1_Init+0x9e>
			!= HAL_OK) {
		Error_Handler();
 8001722:	f001 ff4f 	bl	80035c4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8001726:	bf00      	nop
 8001728:	3730      	adds	r7, #48	; 0x30
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	200001e4 	.word	0x200001e4
 8001734:	40012c00 	.word	0x40012c00

08001738 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8001738:	b580      	push	{r7, lr}
 800173a:	b08c      	sub	sp, #48	; 0x30
 800173c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 800173e:	f107 030c 	add.w	r3, r7, #12
 8001742:	2224      	movs	r2, #36	; 0x24
 8001744:	2100      	movs	r1, #0
 8001746:	4618      	mov	r0, r3
 8001748:	f006 fc30 	bl	8007fac <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800174c:	1d3b      	adds	r3, r7, #4
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001754:	4b20      	ldr	r3, [pc, #128]	; (80017d8 <MX_TIM3_Init+0xa0>)
 8001756:	4a21      	ldr	r2, [pc, #132]	; (80017dc <MX_TIM3_Init+0xa4>)
 8001758:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 800175a:	4b1f      	ldr	r3, [pc, #124]	; (80017d8 <MX_TIM3_Init+0xa0>)
 800175c:	2200      	movs	r2, #0
 800175e:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001760:	4b1d      	ldr	r3, [pc, #116]	; (80017d8 <MX_TIM3_Init+0xa0>)
 8001762:	2200      	movs	r2, #0
 8001764:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8001766:	4b1c      	ldr	r3, [pc, #112]	; (80017d8 <MX_TIM3_Init+0xa0>)
 8001768:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800176c:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800176e:	4b1a      	ldr	r3, [pc, #104]	; (80017d8 <MX_TIM3_Init+0xa0>)
 8001770:	2200      	movs	r2, #0
 8001772:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001774:	4b18      	ldr	r3, [pc, #96]	; (80017d8 <MX_TIM3_Init+0xa0>)
 8001776:	2280      	movs	r2, #128	; 0x80
 8001778:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800177a:	2303      	movs	r3, #3
 800177c:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800177e:	2300      	movs	r3, #0
 8001780:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001782:	2301      	movs	r3, #1
 8001784:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001786:	2300      	movs	r3, #0
 8001788:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 10;
 800178a:	230a      	movs	r3, #10
 800178c:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800178e:	2300      	movs	r3, #0
 8001790:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001792:	2301      	movs	r3, #1
 8001794:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001796:	2300      	movs	r3, #0
 8001798:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 800179a:	2300      	movs	r3, #0
 800179c:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK) {
 800179e:	f107 030c 	add.w	r3, r7, #12
 80017a2:	4619      	mov	r1, r3
 80017a4:	480c      	ldr	r0, [pc, #48]	; (80017d8 <MX_TIM3_Init+0xa0>)
 80017a6:	f005 fdc5 	bl	8007334 <HAL_TIM_Encoder_Init>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_TIM3_Init+0x7c>
		Error_Handler();
 80017b0:	f001 ff08 	bl	80035c4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017b4:	2300      	movs	r3, #0
 80017b6:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017b8:	2300      	movs	r3, #0
 80017ba:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80017bc:	1d3b      	adds	r3, r7, #4
 80017be:	4619      	mov	r1, r3
 80017c0:	4805      	ldr	r0, [pc, #20]	; (80017d8 <MX_TIM3_Init+0xa0>)
 80017c2:	f006 f9b3 	bl	8007b2c <HAL_TIMEx_MasterConfigSynchronization>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_TIM3_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 80017cc:	f001 fefa 	bl	80035c4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 80017d0:	bf00      	nop
 80017d2:	3730      	adds	r7, #48	; 0x30
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	2000022c 	.word	0x2000022c
 80017dc:	40000400 	.word	0x40000400

080017e0 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b08a      	sub	sp, #40	; 0x28
 80017e4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80017e6:	f107 0320 	add.w	r3, r7, #32
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80017f0:	1d3b      	adds	r3, r7, #4
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	605a      	str	r2, [r3, #4]
 80017f8:	609a      	str	r2, [r3, #8]
 80017fa:	60da      	str	r2, [r3, #12]
 80017fc:	611a      	str	r2, [r3, #16]
 80017fe:	615a      	str	r2, [r3, #20]
 8001800:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8001802:	4b27      	ldr	r3, [pc, #156]	; (80018a0 <MX_TIM4_Init+0xc0>)
 8001804:	4a27      	ldr	r2, [pc, #156]	; (80018a4 <MX_TIM4_Init+0xc4>)
 8001806:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8001808:	4b25      	ldr	r3, [pc, #148]	; (80018a0 <MX_TIM4_Init+0xc0>)
 800180a:	2200      	movs	r2, #0
 800180c:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800180e:	4b24      	ldr	r3, [pc, #144]	; (80018a0 <MX_TIM4_Init+0xc0>)
 8001810:	2200      	movs	r2, #0
 8001812:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 8001814:	4b22      	ldr	r3, [pc, #136]	; (80018a0 <MX_TIM4_Init+0xc0>)
 8001816:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800181a:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800181c:	4b20      	ldr	r3, [pc, #128]	; (80018a0 <MX_TIM4_Init+0xc0>)
 800181e:	2200      	movs	r2, #0
 8001820:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001822:	4b1f      	ldr	r3, [pc, #124]	; (80018a0 <MX_TIM4_Init+0xc0>)
 8001824:	2200      	movs	r2, #0
 8001826:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 8001828:	481d      	ldr	r0, [pc, #116]	; (80018a0 <MX_TIM4_Init+0xc0>)
 800182a:	f005 fc91 	bl	8007150 <HAL_TIM_PWM_Init>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <MX_TIM4_Init+0x58>
		Error_Handler();
 8001834:	f001 fec6 	bl	80035c4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001838:	2300      	movs	r3, #0
 800183a:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800183c:	2300      	movs	r3, #0
 800183e:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8001840:	f107 0320 	add.w	r3, r7, #32
 8001844:	4619      	mov	r1, r3
 8001846:	4816      	ldr	r0, [pc, #88]	; (80018a0 <MX_TIM4_Init+0xc0>)
 8001848:	f006 f970 	bl	8007b2c <HAL_TIMEx_MasterConfigSynchronization>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <MX_TIM4_Init+0x76>
			!= HAL_OK) {
		Error_Handler();
 8001852:	f001 feb7 	bl	80035c4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001856:	2360      	movs	r3, #96	; 0x60
 8001858:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 800185a:	2300      	movs	r3, #0
 800185c:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800185e:	2300      	movs	r3, #0
 8001860:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001862:	2300      	movs	r3, #0
 8001864:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3)
 8001866:	1d3b      	adds	r3, r7, #4
 8001868:	2208      	movs	r2, #8
 800186a:	4619      	mov	r1, r3
 800186c:	480c      	ldr	r0, [pc, #48]	; (80018a0 <MX_TIM4_Init+0xc0>)
 800186e:	f005 fe91 	bl	8007594 <HAL_TIM_PWM_ConfigChannel>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <MX_TIM4_Init+0x9c>
			!= HAL_OK) {
		Error_Handler();
 8001878:	f001 fea4 	bl	80035c4 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4)
 800187c:	1d3b      	adds	r3, r7, #4
 800187e:	220c      	movs	r2, #12
 8001880:	4619      	mov	r1, r3
 8001882:	4807      	ldr	r0, [pc, #28]	; (80018a0 <MX_TIM4_Init+0xc0>)
 8001884:	f005 fe86 	bl	8007594 <HAL_TIM_PWM_ConfigChannel>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <MX_TIM4_Init+0xb2>
			!= HAL_OK) {
		Error_Handler();
 800188e:	f001 fe99 	bl	80035c4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 8001892:	4803      	ldr	r0, [pc, #12]	; (80018a0 <MX_TIM4_Init+0xc0>)
 8001894:	f002 fe50 	bl	8004538 <HAL_TIM_MspPostInit>

}
 8001898:	bf00      	nop
 800189a:	3728      	adds	r7, #40	; 0x28
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	20000274 	.word	0x20000274
 80018a4:	40000800 	.word	0x40000800

080018a8 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80018ac:	4b11      	ldr	r3, [pc, #68]	; (80018f4 <MX_USART3_UART_Init+0x4c>)
 80018ae:	4a12      	ldr	r2, [pc, #72]	; (80018f8 <MX_USART3_UART_Init+0x50>)
 80018b0:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 9600;
 80018b2:	4b10      	ldr	r3, [pc, #64]	; (80018f4 <MX_USART3_UART_Init+0x4c>)
 80018b4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80018b8:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80018ba:	4b0e      	ldr	r3, [pc, #56]	; (80018f4 <MX_USART3_UART_Init+0x4c>)
 80018bc:	2200      	movs	r2, #0
 80018be:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80018c0:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <MX_USART3_UART_Init+0x4c>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80018c6:	4b0b      	ldr	r3, [pc, #44]	; (80018f4 <MX_USART3_UART_Init+0x4c>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80018cc:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <MX_USART3_UART_Init+0x4c>)
 80018ce:	220c      	movs	r2, #12
 80018d0:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018d2:	4b08      	ldr	r3, [pc, #32]	; (80018f4 <MX_USART3_UART_Init+0x4c>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80018d8:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <MX_USART3_UART_Init+0x4c>)
 80018da:	2200      	movs	r2, #0
 80018dc:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 80018de:	4805      	ldr	r0, [pc, #20]	; (80018f4 <MX_USART3_UART_Init+0x4c>)
 80018e0:	f006 f982 	bl	8007be8 <HAL_UART_Init>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_USART3_UART_Init+0x46>
		Error_Handler();
 80018ea:	f001 fe6b 	bl	80035c4 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	200002bc 	.word	0x200002bc
 80018f8:	40004800 	.word	0x40004800

080018fc <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001902:	4b0c      	ldr	r3, [pc, #48]	; (8001934 <MX_DMA_Init+0x38>)
 8001904:	695b      	ldr	r3, [r3, #20]
 8001906:	4a0b      	ldr	r2, [pc, #44]	; (8001934 <MX_DMA_Init+0x38>)
 8001908:	f043 0301 	orr.w	r3, r3, #1
 800190c:	6153      	str	r3, [r2, #20]
 800190e:	4b09      	ldr	r3, [pc, #36]	; (8001934 <MX_DMA_Init+0x38>)
 8001910:	695b      	ldr	r3, [r3, #20]
 8001912:	f003 0301 	and.w	r3, r3, #1
 8001916:	607b      	str	r3, [r7, #4]
 8001918:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800191a:	2200      	movs	r2, #0
 800191c:	2100      	movs	r1, #0
 800191e:	200b      	movs	r0, #11
 8001920:	f004 f81f 	bl	8005962 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001924:	200b      	movs	r0, #11
 8001926:	f004 f838 	bl	800599a <HAL_NVIC_EnableIRQ>

}
 800192a:	bf00      	nop
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40021000 	.word	0x40021000

08001938 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001938:	b580      	push	{r7, lr}
 800193a:	b088      	sub	sp, #32
 800193c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800193e:	f107 0310 	add.w	r3, r7, #16
 8001942:	2200      	movs	r2, #0
 8001944:	601a      	str	r2, [r3, #0]
 8001946:	605a      	str	r2, [r3, #4]
 8001948:	609a      	str	r2, [r3, #8]
 800194a:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800194c:	4b3f      	ldr	r3, [pc, #252]	; (8001a4c <MX_GPIO_Init+0x114>)
 800194e:	699b      	ldr	r3, [r3, #24]
 8001950:	4a3e      	ldr	r2, [pc, #248]	; (8001a4c <MX_GPIO_Init+0x114>)
 8001952:	f043 0310 	orr.w	r3, r3, #16
 8001956:	6193      	str	r3, [r2, #24]
 8001958:	4b3c      	ldr	r3, [pc, #240]	; (8001a4c <MX_GPIO_Init+0x114>)
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	f003 0310 	and.w	r3, r3, #16
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001964:	4b39      	ldr	r3, [pc, #228]	; (8001a4c <MX_GPIO_Init+0x114>)
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	4a38      	ldr	r2, [pc, #224]	; (8001a4c <MX_GPIO_Init+0x114>)
 800196a:	f043 0320 	orr.w	r3, r3, #32
 800196e:	6193      	str	r3, [r2, #24]
 8001970:	4b36      	ldr	r3, [pc, #216]	; (8001a4c <MX_GPIO_Init+0x114>)
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	f003 0320 	and.w	r3, r3, #32
 8001978:	60bb      	str	r3, [r7, #8]
 800197a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800197c:	4b33      	ldr	r3, [pc, #204]	; (8001a4c <MX_GPIO_Init+0x114>)
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	4a32      	ldr	r2, [pc, #200]	; (8001a4c <MX_GPIO_Init+0x114>)
 8001982:	f043 0304 	orr.w	r3, r3, #4
 8001986:	6193      	str	r3, [r2, #24]
 8001988:	4b30      	ldr	r3, [pc, #192]	; (8001a4c <MX_GPIO_Init+0x114>)
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	f003 0304 	and.w	r3, r3, #4
 8001990:	607b      	str	r3, [r7, #4]
 8001992:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001994:	4b2d      	ldr	r3, [pc, #180]	; (8001a4c <MX_GPIO_Init+0x114>)
 8001996:	699b      	ldr	r3, [r3, #24]
 8001998:	4a2c      	ldr	r2, [pc, #176]	; (8001a4c <MX_GPIO_Init+0x114>)
 800199a:	f043 0308 	orr.w	r3, r3, #8
 800199e:	6193      	str	r3, [r2, #24]
 80019a0:	4b2a      	ldr	r3, [pc, #168]	; (8001a4c <MX_GPIO_Init+0x114>)
 80019a2:	699b      	ldr	r3, [r3, #24]
 80019a4:	f003 0308 	and.w	r3, r3, #8
 80019a8:	603b      	str	r3, [r7, #0]
 80019aa:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80019ac:	2200      	movs	r2, #0
 80019ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019b2:	4827      	ldr	r0, [pc, #156]	; (8001a50 <MX_GPIO_Init+0x118>)
 80019b4:	f004 fd9f 	bl	80064f6 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LED_Pin | STBY_Pin | AIN1_Pin | AIN2_Pin,
 80019b8:	2200      	movs	r2, #0
 80019ba:	f248 0138 	movw	r1, #32824	; 0x8038
 80019be:	4825      	ldr	r0, [pc, #148]	; (8001a54 <MX_GPIO_Init+0x11c>)
 80019c0:	f004 fd99 	bl	80064f6 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, BIN2_Pin | BIN1_Pin, GPIO_PIN_RESET);
 80019c4:	2200      	movs	r2, #0
 80019c6:	f44f 4110 	mov.w	r1, #36864	; 0x9000
 80019ca:	4823      	ldr	r0, [pc, #140]	; (8001a58 <MX_GPIO_Init+0x120>)
 80019cc:	f004 fd93 	bl	80064f6 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 80019d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019d4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d6:	2301      	movs	r3, #1
 80019d8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019da:	2300      	movs	r3, #0
 80019dc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019de:	2302      	movs	r3, #2
 80019e0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019e2:	f107 0310 	add.w	r3, r7, #16
 80019e6:	4619      	mov	r1, r3
 80019e8:	4819      	ldr	r0, [pc, #100]	; (8001a50 <MX_GPIO_Init+0x118>)
 80019ea:	f004 fbe9 	bl	80061c0 <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN1_Pin BTN2_Pin BTN3_Pin */
	GPIO_InitStruct.Pin = BTN1_Pin | BTN2_Pin | BTN3_Pin;
 80019ee:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80019f2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019f4:	2300      	movs	r3, #0
 80019f6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019f8:	2301      	movs	r3, #1
 80019fa:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019fc:	f107 0310 	add.w	r3, r7, #16
 8001a00:	4619      	mov	r1, r3
 8001a02:	4814      	ldr	r0, [pc, #80]	; (8001a54 <MX_GPIO_Init+0x11c>)
 8001a04:	f004 fbdc 	bl	80061c0 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED_Pin STBY_Pin AIN1_Pin AIN2_Pin */
	GPIO_InitStruct.Pin = LED_Pin | STBY_Pin | AIN1_Pin | AIN2_Pin;
 8001a08:	f248 0338 	movw	r3, #32824	; 0x8038
 8001a0c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a12:	2300      	movs	r3, #0
 8001a14:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a16:	2302      	movs	r3, #2
 8001a18:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a1a:	f107 0310 	add.w	r3, r7, #16
 8001a1e:	4619      	mov	r1, r3
 8001a20:	480c      	ldr	r0, [pc, #48]	; (8001a54 <MX_GPIO_Init+0x11c>)
 8001a22:	f004 fbcd 	bl	80061c0 <HAL_GPIO_Init>

	/*Configure GPIO pins : BIN2_Pin BIN1_Pin */
	GPIO_InitStruct.Pin = BIN2_Pin | BIN1_Pin;
 8001a26:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8001a2a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a30:	2300      	movs	r3, #0
 8001a32:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a34:	2302      	movs	r3, #2
 8001a36:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a38:	f107 0310 	add.w	r3, r7, #16
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4806      	ldr	r0, [pc, #24]	; (8001a58 <MX_GPIO_Init+0x120>)
 8001a40:	f004 fbbe 	bl	80061c0 <HAL_GPIO_Init>

}
 8001a44:	bf00      	nop
 8001a46:	3720      	adds	r7, #32
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	40011000 	.word	0x40011000
 8001a54:	40010c00 	.word	0x40010c00
 8001a58:	40010800 	.word	0x40010800
 8001a5c:	00000000 	.word	0x00000000

08001a60 <intUartSend>:

/* USER CODE BEGIN 4 */

void intUartSend(float entero) {
 8001a60:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a64:	b088      	sub	sp, #32
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
	int d;
	int u;
	int de1;
	int de2;

	m = abs(entero / 1000);
 8001a6a:	497d      	ldr	r1, [pc, #500]	; (8001c60 <intUartSend+0x200>)
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f7ff fa3d 	bl	8000eec <__aeabi_fdiv>
 8001a72:	4603      	mov	r3, r0
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff fb4b 	bl	8001110 <__aeabi_f2iz>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	bfb8      	it	lt
 8001a80:	425b      	neglt	r3, r3
 8001a82:	61fb      	str	r3, [r7, #28]
	c = abs(entero / 100) - m * 10;
 8001a84:	4977      	ldr	r1, [pc, #476]	; (8001c64 <intUartSend+0x204>)
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f7ff fa30 	bl	8000eec <__aeabi_fdiv>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff fb3e 	bl	8001110 <__aeabi_f2iz>
 8001a94:	4603      	mov	r3, r0
 8001a96:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001a9a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	f06f 0109 	mvn.w	r1, #9
 8001aa4:	fb01 f303 	mul.w	r3, r1, r3
 8001aa8:	4413      	add	r3, r2
 8001aaa:	61bb      	str	r3, [r7, #24]
	d = abs(entero / 10) - (m * 100 + c * 10);
 8001aac:	496e      	ldr	r1, [pc, #440]	; (8001c68 <intUartSend+0x208>)
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f7ff fa1c 	bl	8000eec <__aeabi_fdiv>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff fb2a 	bl	8001110 <__aeabi_f2iz>
 8001abc:	4603      	mov	r3, r0
 8001abe:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8001ac2:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	2264      	movs	r2, #100	; 0x64
 8001aca:	fb02 f003 	mul.w	r0, r2, r3
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	4413      	add	r3, r2
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	4403      	add	r3, r0
 8001ada:	1acb      	subs	r3, r1, r3
 8001adc:	617b      	str	r3, [r7, #20]
	u = abs(entero) - (m * 1000 + c * 100 + d * 10);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f7ff fb16 	bl	8001110 <__aeabi_f2iz>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8001aea:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001af4:	fb03 f202 	mul.w	r2, r3, r2
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	2064      	movs	r0, #100	; 0x64
 8001afc:	fb00 f303 	mul.w	r3, r0, r3
 8001b00:	18d0      	adds	r0, r2, r3
 8001b02:	697a      	ldr	r2, [r7, #20]
 8001b04:	4613      	mov	r3, r2
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	4413      	add	r3, r2
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	4403      	add	r3, r0
 8001b0e:	1acb      	subs	r3, r1, r3
 8001b10:	613b      	str	r3, [r7, #16]
	if (entero > 0) {
 8001b12:	f04f 0100 	mov.w	r1, #0
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f7ff faf0 	bl	80010fc <__aeabi_fcmpgt>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	f000 80aa 	beq.w	8001c78 <intUartSend+0x218>
		de1 = (entero - (m * 1000 + c * 100 + d * 10 + u)) * 10;
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b2a:	fb03 f202 	mul.w	r2, r3, r2
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	2164      	movs	r1, #100	; 0x64
 8001b32:	fb01 f303 	mul.w	r3, r1, r3
 8001b36:	18d1      	adds	r1, r2, r3
 8001b38:	697a      	ldr	r2, [r7, #20]
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	4413      	add	r3, r2
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	18ca      	adds	r2, r1, r3
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	4413      	add	r3, r2
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff f8c7 	bl	8000cdc <__aeabi_i2f>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	4619      	mov	r1, r3
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f7ff f80c 	bl	8000b70 <__aeabi_fsub>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	4943      	ldr	r1, [pc, #268]	; (8001c68 <intUartSend+0x208>)
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff f911 	bl	8000d84 <__aeabi_fmul>
 8001b62:	4603      	mov	r3, r0
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff fad3 	bl	8001110 <__aeabi_f2iz>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	60fb      	str	r3, [r7, #12]
		de2 = (entero - (m * 1000 + c * 100 + d * 10 + u + de1 * 0.1)) * 100;
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f7fe fc5a 	bl	8000428 <__aeabi_f2d>
 8001b74:	4604      	mov	r4, r0
 8001b76:	460d      	mov	r5, r1
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b7e:	fb03 f202 	mul.w	r2, r3, r2
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	2164      	movs	r1, #100	; 0x64
 8001b86:	fb01 f303 	mul.w	r3, r1, r3
 8001b8a:	18d1      	adds	r1, r2, r3
 8001b8c:	697a      	ldr	r2, [r7, #20]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	4413      	add	r3, r2
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	18ca      	adds	r2, r1, r3
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7fe fc31 	bl	8000404 <__aeabi_i2d>
 8001ba2:	4680      	mov	r8, r0
 8001ba4:	4689      	mov	r9, r1
 8001ba6:	68f8      	ldr	r0, [r7, #12]
 8001ba8:	f7fe fc2c 	bl	8000404 <__aeabi_i2d>
 8001bac:	a32a      	add	r3, pc, #168	; (adr r3, 8001c58 <intUartSend+0x1f8>)
 8001bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb2:	f7fe fc91 	bl	80004d8 <__aeabi_dmul>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	460b      	mov	r3, r1
 8001bba:	4640      	mov	r0, r8
 8001bbc:	4649      	mov	r1, r9
 8001bbe:	f7fe fad5 	bl	800016c <__adddf3>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	4620      	mov	r0, r4
 8001bc8:	4629      	mov	r1, r5
 8001bca:	f7fe facd 	bl	8000168 <__aeabi_dsub>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	4610      	mov	r0, r2
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	f04f 0200 	mov.w	r2, #0
 8001bda:	4b24      	ldr	r3, [pc, #144]	; (8001c6c <intUartSend+0x20c>)
 8001bdc:	f7fe fc7c 	bl	80004d8 <__aeabi_dmul>
 8001be0:	4602      	mov	r2, r0
 8001be2:	460b      	mov	r3, r1
 8001be4:	4610      	mov	r0, r2
 8001be6:	4619      	mov	r1, r3
 8001be8:	f7fe ff26 	bl	8000a38 <__aeabi_d2iz>
 8001bec:	4603      	mov	r3, r0
 8001bee:	60bb      	str	r3, [r7, #8]
		TX_BUFFER[0] = m + '0';
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	3330      	adds	r3, #48	; 0x30
 8001bf6:	b2da      	uxtb	r2, r3
 8001bf8:	4b1d      	ldr	r3, [pc, #116]	; (8001c70 <intUartSend+0x210>)
 8001bfa:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = c + '0';
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	3330      	adds	r3, #48	; 0x30
 8001c02:	b2da      	uxtb	r2, r3
 8001c04:	4b1a      	ldr	r3, [pc, #104]	; (8001c70 <intUartSend+0x210>)
 8001c06:	705a      	strb	r2, [r3, #1]
		TX_BUFFER[2] = d + '0';
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	3330      	adds	r3, #48	; 0x30
 8001c0e:	b2da      	uxtb	r2, r3
 8001c10:	4b17      	ldr	r3, [pc, #92]	; (8001c70 <intUartSend+0x210>)
 8001c12:	709a      	strb	r2, [r3, #2]
		TX_BUFFER[3] = u + '0';
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	3330      	adds	r3, #48	; 0x30
 8001c1a:	b2da      	uxtb	r2, r3
 8001c1c:	4b14      	ldr	r3, [pc, #80]	; (8001c70 <intUartSend+0x210>)
 8001c1e:	70da      	strb	r2, [r3, #3]
		TX_BUFFER[4] = ',';
 8001c20:	4b13      	ldr	r3, [pc, #76]	; (8001c70 <intUartSend+0x210>)
 8001c22:	222c      	movs	r2, #44	; 0x2c
 8001c24:	711a      	strb	r2, [r3, #4]
		TX_BUFFER[5] = de1 + '0';
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	3330      	adds	r3, #48	; 0x30
 8001c2c:	b2da      	uxtb	r2, r3
 8001c2e:	4b10      	ldr	r3, [pc, #64]	; (8001c70 <intUartSend+0x210>)
 8001c30:	715a      	strb	r2, [r3, #5]
		TX_BUFFER[6] = de2 + '0';
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	3330      	adds	r3, #48	; 0x30
 8001c38:	b2da      	uxtb	r2, r3
 8001c3a:	4b0d      	ldr	r3, [pc, #52]	; (8001c70 <intUartSend+0x210>)
 8001c3c:	719a      	strb	r2, [r3, #6]
		TX_BUFFER[7] = '\n';
 8001c3e:	4b0c      	ldr	r3, [pc, #48]	; (8001c70 <intUartSend+0x210>)
 8001c40:	220a      	movs	r2, #10
 8001c42:	71da      	strb	r2, [r3, #7]
		HAL_UART_Transmit(&huart3, TX_BUFFER, 8, 100);
 8001c44:	2364      	movs	r3, #100	; 0x64
 8001c46:	2208      	movs	r2, #8
 8001c48:	4909      	ldr	r1, [pc, #36]	; (8001c70 <intUartSend+0x210>)
 8001c4a:	480a      	ldr	r0, [pc, #40]	; (8001c74 <intUartSend+0x214>)
 8001c4c:	f006 f819 	bl	8007c82 <HAL_UART_Transmit>
	 TX_BUFFER[4] = ',';
	 TX_BUFFER[5] = de1 + '0';
	 TX_BUFFER[6] = de2 + '0';
	 TX_BUFFER[7] = '\n';
	 HAL_UART_Transmit(&huart3, TX_BUFFER, 8, 100);*/
}
 8001c50:	e0b1      	b.n	8001db6 <intUartSend+0x356>
 8001c52:	bf00      	nop
 8001c54:	f3af 8000 	nop.w
 8001c58:	9999999a 	.word	0x9999999a
 8001c5c:	3fb99999 	.word	0x3fb99999
 8001c60:	447a0000 	.word	0x447a0000
 8001c64:	42c80000 	.word	0x42c80000
 8001c68:	41200000 	.word	0x41200000
 8001c6c:	40590000 	.word	0x40590000
 8001c70:	2000233c 	.word	0x2000233c
 8001c74:	200002bc 	.word	0x200002bc
		de1 = ((-(entero)) - (m * 1000 + c * 100 + d * 10 + u)) * 10;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c84:	fb03 f202 	mul.w	r2, r3, r2
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	2164      	movs	r1, #100	; 0x64
 8001c8c:	fb01 f303 	mul.w	r3, r1, r3
 8001c90:	18d1      	adds	r1, r2, r3
 8001c92:	697a      	ldr	r2, [r7, #20]
 8001c94:	4613      	mov	r3, r2
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	4413      	add	r3, r2
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	18ca      	adds	r2, r1, r3
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7ff f81a 	bl	8000cdc <__aeabi_i2f>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	4619      	mov	r1, r3
 8001cac:	4620      	mov	r0, r4
 8001cae:	f7fe ff5f 	bl	8000b70 <__aeabi_fsub>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	4944      	ldr	r1, [pc, #272]	; (8001dc8 <intUartSend+0x368>)
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7ff f864 	bl	8000d84 <__aeabi_fmul>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff fa26 	bl	8001110 <__aeabi_f2iz>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	60fb      	str	r3, [r7, #12]
		de2 = ((-(entero)) - (m * 1000 + c * 100 + d * 10 + u + de1 * 0.1))
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7fe fbaa 	bl	8000428 <__aeabi_f2d>
 8001cd4:	4604      	mov	r4, r0
 8001cd6:	460d      	mov	r5, r1
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001cde:	fb03 f202 	mul.w	r2, r3, r2
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	2164      	movs	r1, #100	; 0x64
 8001ce6:	fb01 f303 	mul.w	r3, r1, r3
 8001cea:	18d1      	adds	r1, r2, r3
 8001cec:	697a      	ldr	r2, [r7, #20]
 8001cee:	4613      	mov	r3, r2
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	4413      	add	r3, r2
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	18ca      	adds	r2, r1, r3
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7fe fb81 	bl	8000404 <__aeabi_i2d>
 8001d02:	4680      	mov	r8, r0
 8001d04:	4689      	mov	r9, r1
 8001d06:	68f8      	ldr	r0, [r7, #12]
 8001d08:	f7fe fb7c 	bl	8000404 <__aeabi_i2d>
 8001d0c:	a32c      	add	r3, pc, #176	; (adr r3, 8001dc0 <intUartSend+0x360>)
 8001d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d12:	f7fe fbe1 	bl	80004d8 <__aeabi_dmul>
 8001d16:	4602      	mov	r2, r0
 8001d18:	460b      	mov	r3, r1
 8001d1a:	4640      	mov	r0, r8
 8001d1c:	4649      	mov	r1, r9
 8001d1e:	f7fe fa25 	bl	800016c <__adddf3>
 8001d22:	4602      	mov	r2, r0
 8001d24:	460b      	mov	r3, r1
 8001d26:	4620      	mov	r0, r4
 8001d28:	4629      	mov	r1, r5
 8001d2a:	f7fe fa1d 	bl	8000168 <__aeabi_dsub>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	460b      	mov	r3, r1
 8001d32:	4610      	mov	r0, r2
 8001d34:	4619      	mov	r1, r3
				* 100;
 8001d36:	f04f 0200 	mov.w	r2, #0
 8001d3a:	4b24      	ldr	r3, [pc, #144]	; (8001dcc <intUartSend+0x36c>)
 8001d3c:	f7fe fbcc 	bl	80004d8 <__aeabi_dmul>
 8001d40:	4602      	mov	r2, r0
 8001d42:	460b      	mov	r3, r1
		de2 = ((-(entero)) - (m * 1000 + c * 100 + d * 10 + u + de1 * 0.1))
 8001d44:	4610      	mov	r0, r2
 8001d46:	4619      	mov	r1, r3
 8001d48:	f7fe fe76 	bl	8000a38 <__aeabi_d2iz>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	60bb      	str	r3, [r7, #8]
		TX_BUFFER[0] = '-';
 8001d50:	4b1f      	ldr	r3, [pc, #124]	; (8001dd0 <intUartSend+0x370>)
 8001d52:	222d      	movs	r2, #45	; 0x2d
 8001d54:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = m + '0';
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	3330      	adds	r3, #48	; 0x30
 8001d5c:	b2da      	uxtb	r2, r3
 8001d5e:	4b1c      	ldr	r3, [pc, #112]	; (8001dd0 <intUartSend+0x370>)
 8001d60:	705a      	strb	r2, [r3, #1]
		TX_BUFFER[2] = c + '0';
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	3330      	adds	r3, #48	; 0x30
 8001d68:	b2da      	uxtb	r2, r3
 8001d6a:	4b19      	ldr	r3, [pc, #100]	; (8001dd0 <intUartSend+0x370>)
 8001d6c:	709a      	strb	r2, [r3, #2]
		TX_BUFFER[3] = d + '0';
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	3330      	adds	r3, #48	; 0x30
 8001d74:	b2da      	uxtb	r2, r3
 8001d76:	4b16      	ldr	r3, [pc, #88]	; (8001dd0 <intUartSend+0x370>)
 8001d78:	70da      	strb	r2, [r3, #3]
		TX_BUFFER[4] = u + '0';
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	3330      	adds	r3, #48	; 0x30
 8001d80:	b2da      	uxtb	r2, r3
 8001d82:	4b13      	ldr	r3, [pc, #76]	; (8001dd0 <intUartSend+0x370>)
 8001d84:	711a      	strb	r2, [r3, #4]
		TX_BUFFER[5] = ',';
 8001d86:	4b12      	ldr	r3, [pc, #72]	; (8001dd0 <intUartSend+0x370>)
 8001d88:	222c      	movs	r2, #44	; 0x2c
 8001d8a:	715a      	strb	r2, [r3, #5]
		TX_BUFFER[6] = de1 + '0';
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	3330      	adds	r3, #48	; 0x30
 8001d92:	b2da      	uxtb	r2, r3
 8001d94:	4b0e      	ldr	r3, [pc, #56]	; (8001dd0 <intUartSend+0x370>)
 8001d96:	719a      	strb	r2, [r3, #6]
		TX_BUFFER[7] = de2 + '0';
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	3330      	adds	r3, #48	; 0x30
 8001d9e:	b2da      	uxtb	r2, r3
 8001da0:	4b0b      	ldr	r3, [pc, #44]	; (8001dd0 <intUartSend+0x370>)
 8001da2:	71da      	strb	r2, [r3, #7]
		TX_BUFFER[8] = '\n';
 8001da4:	4b0a      	ldr	r3, [pc, #40]	; (8001dd0 <intUartSend+0x370>)
 8001da6:	220a      	movs	r2, #10
 8001da8:	721a      	strb	r2, [r3, #8]
		HAL_UART_Transmit(&huart3, TX_BUFFER, 9, 100);
 8001daa:	2364      	movs	r3, #100	; 0x64
 8001dac:	2209      	movs	r2, #9
 8001dae:	4908      	ldr	r1, [pc, #32]	; (8001dd0 <intUartSend+0x370>)
 8001db0:	4808      	ldr	r0, [pc, #32]	; (8001dd4 <intUartSend+0x374>)
 8001db2:	f005 ff66 	bl	8007c82 <HAL_UART_Transmit>
}
 8001db6:	bf00      	nop
 8001db8:	3720      	adds	r7, #32
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001dc0:	9999999a 	.word	0x9999999a
 8001dc4:	3fb99999 	.word	0x3fb99999
 8001dc8:	41200000 	.word	0x41200000
 8001dcc:	40590000 	.word	0x40590000
 8001dd0:	2000233c 	.word	0x2000233c
 8001dd4:	200002bc 	.word	0x200002bc

08001dd8 <mainMachine>:

void mainMachine() {
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
	switch (mainState) {
 8001ddc:	4b90      	ldr	r3, [pc, #576]	; (8002020 <mainMachine+0x248>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2b04      	cmp	r3, #4
 8001de2:	f200 81ad 	bhi.w	8002140 <mainMachine+0x368>
 8001de6:	a201      	add	r2, pc, #4	; (adr r2, 8001dec <mainMachine+0x14>)
 8001de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dec:	08001e01 	.word	0x08001e01
 8001df0:	08001fa7 	.word	0x08001fa7
 8001df4:	08002099 	.word	0x08002099
 8001df8:	08002137 	.word	0x08002137
 8001dfc:	08001fa1 	.word	0x08001fa1
	case SETUP:
		actual.x = ALTO;
 8001e00:	4b88      	ldr	r3, [pc, #544]	; (8002024 <mainMachine+0x24c>)
 8001e02:	2208      	movs	r2, #8
 8001e04:	601a      	str	r2, [r3, #0]
		actual.y = ANCHO;
 8001e06:	4b87      	ldr	r3, [pc, #540]	; (8002024 <mainMachine+0x24c>)
 8001e08:	2208      	movs	r2, #8
 8001e0a:	605a      	str	r2, [r3, #4]
		/*visual.x = 0;
		 visual.y = 0;*/
		resetAxis(direcciones);
 8001e0c:	4886      	ldr	r0, [pc, #536]	; (8002028 <mainMachine+0x250>)
 8001e0e:	f001 fcc6 	bl	800379e <resetAxis>
		movimientoFlag = 0;
 8001e12:	4b86      	ldr	r3, [pc, #536]	; (800202c <mainMachine+0x254>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
		finishFlag = 0;
 8001e18:	4b85      	ldr	r3, [pc, #532]	; (8002030 <mainMachine+0x258>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	601a      	str	r2, [r3, #0]
		/*if (Sensors[1] - Sensors[3] < 0.5 && Sensors[1] - Sensors[3] > -0.5) {
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
		 } else {
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
		 }*/
		if (btns[0].flag == 1) {
 8001e1e:	4b85      	ldr	r3, [pc, #532]	; (8002034 <mainMachine+0x25c>)
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d13e      	bne.n	8001ea4 <mainMachine+0xcc>
			// Set The LED ON!
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8001e26:	2200      	movs	r2, #0
 8001e28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e2c:	4882      	ldr	r0, [pc, #520]	; (8002038 <mainMachine+0x260>)
 8001e2e:	f004 fb62 	bl	80064f6 <HAL_GPIO_WritePin>
			choice = SLOW;
 8001e32:	4b82      	ldr	r3, [pc, #520]	; (800203c <mainMachine+0x264>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
			velocity = velocityChoice[SLOW];
 8001e38:	4b81      	ldr	r3, [pc, #516]	; (8002040 <mainMachine+0x268>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a81      	ldr	r2, [pc, #516]	; (8002044 <mainMachine+0x26c>)
 8001e3e:	6013      	str	r3, [r2, #0]
			TIM2->CCR3 = baseChoice[SLOW];
 8001e40:	4b81      	ldr	r3, [pc, #516]	; (8002048 <mainMachine+0x270>)
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e48:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM2->CCR4 = baseChoice[SLOW];
 8001e4a:	4b7f      	ldr	r3, [pc, #508]	; (8002048 <mainMachine+0x270>)
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e52:	641a      	str	r2, [r3, #64]	; 0x40
			KPT = KPTchoice[SLOW];
 8001e54:	4b7d      	ldr	r3, [pc, #500]	; (800204c <mainMachine+0x274>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a7d      	ldr	r2, [pc, #500]	; (8002050 <mainMachine+0x278>)
 8001e5a:	6013      	str	r3, [r2, #0]
			KDT = KDTchoice[SLOW];
 8001e5c:	4b7d      	ldr	r3, [pc, #500]	; (8002054 <mainMachine+0x27c>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a7d      	ldr	r2, [pc, #500]	; (8002058 <mainMachine+0x280>)
 8001e62:	6013      	str	r3, [r2, #0]
			KPA = KPAchoice[SLOW];
 8001e64:	4b7d      	ldr	r3, [pc, #500]	; (800205c <mainMachine+0x284>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a7d      	ldr	r2, [pc, #500]	; (8002060 <mainMachine+0x288>)
 8001e6a:	6013      	str	r3, [r2, #0]
			KDA = KDAchoice[SLOW];
 8001e6c:	4b7d      	ldr	r3, [pc, #500]	; (8002064 <mainMachine+0x28c>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a7d      	ldr	r2, [pc, #500]	; (8002068 <mainMachine+0x290>)
 8001e72:	6013      	str	r3, [r2, #0]
			KPP = KPPchoice[SLOW];
 8001e74:	4b7d      	ldr	r3, [pc, #500]	; (800206c <mainMachine+0x294>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a7d      	ldr	r2, [pc, #500]	; (8002070 <mainMachine+0x298>)
 8001e7a:	6013      	str	r3, [r2, #0]
			KDP = KDPchoice[SLOW];
 8001e7c:	4b7d      	ldr	r3, [pc, #500]	; (8002074 <mainMachine+0x29c>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a7d      	ldr	r2, [pc, #500]	; (8002078 <mainMachine+0x2a0>)
 8001e82:	6013      	str	r3, [r2, #0]
			if (t == 0) {
 8001e84:	4b7d      	ldr	r3, [pc, #500]	; (800207c <mainMachine+0x2a4>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d108      	bne.n	8001e9e <mainMachine+0xc6>
				mainState = CALIBRATE;
 8001e8c:	4b64      	ldr	r3, [pc, #400]	; (8002020 <mainMachine+0x248>)
 8001e8e:	2204      	movs	r2, #4
 8001e90:	601a      	str	r2, [r3, #0]
				t++;
 8001e92:	4b7a      	ldr	r3, [pc, #488]	; (800207c <mainMachine+0x2a4>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	3301      	adds	r3, #1
 8001e98:	4a78      	ldr	r2, [pc, #480]	; (800207c <mainMachine+0x2a4>)
 8001e9a:	6013      	str	r3, [r2, #0]
 8001e9c:	e002      	b.n	8001ea4 <mainMachine+0xcc>
			} else {
				mainState = MAPPING;
 8001e9e:	4b60      	ldr	r3, [pc, #384]	; (8002020 <mainMachine+0x248>)
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	601a      	str	r2, [r3, #0]
			}

		}
		if (btns[1].flag == 1) {
 8001ea4:	4b63      	ldr	r3, [pc, #396]	; (8002034 <mainMachine+0x25c>)
 8001ea6:	69db      	ldr	r3, [r3, #28]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d134      	bne.n	8001f16 <mainMachine+0x13e>
			// Set The LED ON!
			choice = FAST;
 8001eac:	4b63      	ldr	r3, [pc, #396]	; (800203c <mainMachine+0x264>)
 8001eae:	2201      	movs	r2, #1
 8001eb0:	601a      	str	r2, [r3, #0]
			velocity = velocityChoice[FAST];
 8001eb2:	4b63      	ldr	r3, [pc, #396]	; (8002040 <mainMachine+0x268>)
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	4a63      	ldr	r2, [pc, #396]	; (8002044 <mainMachine+0x26c>)
 8001eb8:	6013      	str	r3, [r2, #0]
			TIM2->CCR3 = baseChoice[FAST];
 8001eba:	4b63      	ldr	r3, [pc, #396]	; (8002048 <mainMachine+0x270>)
 8001ebc:	685a      	ldr	r2, [r3, #4]
 8001ebe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ec2:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM2->CCR4 = baseChoice[FAST];
 8001ec4:	4b60      	ldr	r3, [pc, #384]	; (8002048 <mainMachine+0x270>)
 8001ec6:	685a      	ldr	r2, [r3, #4]
 8001ec8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ecc:	641a      	str	r2, [r3, #64]	; 0x40
			KPT = KPTchoice[FAST];
 8001ece:	4b5f      	ldr	r3, [pc, #380]	; (800204c <mainMachine+0x274>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	4a5f      	ldr	r2, [pc, #380]	; (8002050 <mainMachine+0x278>)
 8001ed4:	6013      	str	r3, [r2, #0]
			KDT = KDTchoice[FAST];
 8001ed6:	4b5f      	ldr	r3, [pc, #380]	; (8002054 <mainMachine+0x27c>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	4a5f      	ldr	r2, [pc, #380]	; (8002058 <mainMachine+0x280>)
 8001edc:	6013      	str	r3, [r2, #0]
			KPA = KPAchoice[FAST];
 8001ede:	4b5f      	ldr	r3, [pc, #380]	; (800205c <mainMachine+0x284>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	4a5f      	ldr	r2, [pc, #380]	; (8002060 <mainMachine+0x288>)
 8001ee4:	6013      	str	r3, [r2, #0]
			KDA = KDAchoice[FAST];
 8001ee6:	4b5f      	ldr	r3, [pc, #380]	; (8002064 <mainMachine+0x28c>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	4a5f      	ldr	r2, [pc, #380]	; (8002068 <mainMachine+0x290>)
 8001eec:	6013      	str	r3, [r2, #0]
			KPP = KPPchoice[FAST];
 8001eee:	4b5f      	ldr	r3, [pc, #380]	; (800206c <mainMachine+0x294>)
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	4a5f      	ldr	r2, [pc, #380]	; (8002070 <mainMachine+0x298>)
 8001ef4:	6013      	str	r3, [r2, #0]
			KDP = KDPchoice[FAST];
 8001ef6:	4b5f      	ldr	r3, [pc, #380]	; (8002074 <mainMachine+0x29c>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	4a5f      	ldr	r2, [pc, #380]	; (8002078 <mainMachine+0x2a0>)
 8001efc:	6013      	str	r3, [r2, #0]
			mainState = RACING;
 8001efe:	4b48      	ldr	r3, [pc, #288]	; (8002020 <mainMachine+0x248>)
 8001f00:	2203      	movs	r2, #3
 8001f02:	601a      	str	r2, [r3, #0]
			Flash_Read_Data(0x0801FC00, Rx_Data, 2);
 8001f04:	2202      	movs	r2, #2
 8001f06:	495e      	ldr	r1, [pc, #376]	; (8002080 <mainMachine+0x2a8>)
 8001f08:	485e      	ldr	r0, [pc, #376]	; (8002084 <mainMachine+0x2ac>)
 8001f0a:	f7ff f9cb 	bl	80012a4 <Flash_Read_Data>
			Convert_To_Str(Rx_Data, string);
 8001f0e:	495e      	ldr	r1, [pc, #376]	; (8002088 <mainMachine+0x2b0>)
 8001f10:	485b      	ldr	r0, [pc, #364]	; (8002080 <mainMachine+0x2a8>)
 8001f12:	f7ff f9e4 	bl	80012de <Convert_To_Str>
			//directions = ReadRun();
			//ShowRun();
		}
		if (btns[2].flag == 1) {
 8001f16:	4b47      	ldr	r3, [pc, #284]	; (8002034 <mainMachine+0x25c>)
 8001f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	f040 810f 	bne.w	800213e <mainMachine+0x366>
			// Set The LED ON!
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001f20:	2200      	movs	r2, #0
 8001f22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f26:	4859      	ldr	r0, [pc, #356]	; (800208c <mainMachine+0x2b4>)
 8001f28:	f004 fae5 	bl	80064f6 <HAL_GPIO_WritePin>
			choice = FAST;
 8001f2c:	4b43      	ldr	r3, [pc, #268]	; (800203c <mainMachine+0x264>)
 8001f2e:	2201      	movs	r2, #1
 8001f30:	601a      	str	r2, [r3, #0]
			velocity = velocityChoice[FAST];
 8001f32:	4b43      	ldr	r3, [pc, #268]	; (8002040 <mainMachine+0x268>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	4a43      	ldr	r2, [pc, #268]	; (8002044 <mainMachine+0x26c>)
 8001f38:	6013      	str	r3, [r2, #0]
			TIM2->CCR3 = baseChoice[FAST];
 8001f3a:	4b43      	ldr	r3, [pc, #268]	; (8002048 <mainMachine+0x270>)
 8001f3c:	685a      	ldr	r2, [r3, #4]
 8001f3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f42:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM2->CCR4 = baseChoice[FAST];
 8001f44:	4b40      	ldr	r3, [pc, #256]	; (8002048 <mainMachine+0x270>)
 8001f46:	685a      	ldr	r2, [r3, #4]
 8001f48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f4c:	641a      	str	r2, [r3, #64]	; 0x40
			KPT = KPTchoice[FAST];
 8001f4e:	4b3f      	ldr	r3, [pc, #252]	; (800204c <mainMachine+0x274>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	4a3f      	ldr	r2, [pc, #252]	; (8002050 <mainMachine+0x278>)
 8001f54:	6013      	str	r3, [r2, #0]
			KDT = KDTchoice[FAST];
 8001f56:	4b3f      	ldr	r3, [pc, #252]	; (8002054 <mainMachine+0x27c>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	4a3f      	ldr	r2, [pc, #252]	; (8002058 <mainMachine+0x280>)
 8001f5c:	6013      	str	r3, [r2, #0]
			KPA = KPAchoice[FAST];
 8001f5e:	4b3f      	ldr	r3, [pc, #252]	; (800205c <mainMachine+0x284>)
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	4a3f      	ldr	r2, [pc, #252]	; (8002060 <mainMachine+0x288>)
 8001f64:	6013      	str	r3, [r2, #0]
			KDA = KDAchoice[FAST];
 8001f66:	4b3f      	ldr	r3, [pc, #252]	; (8002064 <mainMachine+0x28c>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	4a3f      	ldr	r2, [pc, #252]	; (8002068 <mainMachine+0x290>)
 8001f6c:	6013      	str	r3, [r2, #0]
			KPP = KPPchoice[FAST];
 8001f6e:	4b3f      	ldr	r3, [pc, #252]	; (800206c <mainMachine+0x294>)
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	4a3f      	ldr	r2, [pc, #252]	; (8002070 <mainMachine+0x298>)
 8001f74:	6013      	str	r3, [r2, #0]
			KDP = KDPchoice[FAST];
 8001f76:	4b3f      	ldr	r3, [pc, #252]	; (8002074 <mainMachine+0x29c>)
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	4a3f      	ldr	r2, [pc, #252]	; (8002078 <mainMachine+0x2a0>)
 8001f7c:	6013      	str	r3, [r2, #0]
			if (t == 0) {
 8001f7e:	4b3f      	ldr	r3, [pc, #252]	; (800207c <mainMachine+0x2a4>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d108      	bne.n	8001f98 <mainMachine+0x1c0>
				mainState = CALIBRATE;
 8001f86:	4b26      	ldr	r3, [pc, #152]	; (8002020 <mainMachine+0x248>)
 8001f88:	2204      	movs	r2, #4
 8001f8a:	601a      	str	r2, [r3, #0]
				t++;
 8001f8c:	4b3b      	ldr	r3, [pc, #236]	; (800207c <mainMachine+0x2a4>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	3301      	adds	r3, #1
 8001f92:	4a3a      	ldr	r2, [pc, #232]	; (800207c <mainMachine+0x2a4>)
 8001f94:	6013      	str	r3, [r2, #0]
			} else {
				mainState = MAPPING;
			}
		}
		//confirmacionCentrado();
		break;
 8001f96:	e0d2      	b.n	800213e <mainMachine+0x366>
				mainState = MAPPING;
 8001f98:	4b21      	ldr	r3, [pc, #132]	; (8002020 <mainMachine+0x248>)
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	601a      	str	r2, [r3, #0]
		break;
 8001f9e:	e0ce      	b.n	800213e <mainMachine+0x366>
	case CALIBRATE:
		calibrateMachine();
 8001fa0:	f000 f8e2 	bl	8002168 <calibrateMachine>
		//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
		break;
 8001fa4:	e0cc      	b.n	8002140 <mainMachine+0x368>
	case MAPPING:
		if (finishFlag == 0) {
 8001fa6:	4b22      	ldr	r3, [pc, #136]	; (8002030 <mainMachine+0x258>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d102      	bne.n	8001fb4 <mainMachine+0x1dc>
			robotMachine();
 8001fae:	f000 f9bb 	bl	8002328 <robotMachine>
			finishFlag = 0;
			resetAxis(direcciones);
			PrintMap();
			mainState = RESOLUTION;
		}
		break;
 8001fb2:	e0c5      	b.n	8002140 <mainMachine+0x368>
			TX_BUFFER[0] = 'X';
 8001fb4:	4b36      	ldr	r3, [pc, #216]	; (8002090 <mainMachine+0x2b8>)
 8001fb6:	2258      	movs	r2, #88	; 0x58
 8001fb8:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, TX_BUFFER, 1, 100);
 8001fba:	2364      	movs	r3, #100	; 0x64
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	4934      	ldr	r1, [pc, #208]	; (8002090 <mainMachine+0x2b8>)
 8001fc0:	4834      	ldr	r0, [pc, #208]	; (8002094 <mainMachine+0x2bc>)
 8001fc2:	f005 fe5e 	bl	8007c82 <HAL_UART_Transmit>
			intUartSend(actual.x);
 8001fc6:	4b17      	ldr	r3, [pc, #92]	; (8002024 <mainMachine+0x24c>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7fe fe86 	bl	8000cdc <__aeabi_i2f>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7ff fd44 	bl	8001a60 <intUartSend>
			TX_BUFFER[0] = 'Y';
 8001fd8:	4b2d      	ldr	r3, [pc, #180]	; (8002090 <mainMachine+0x2b8>)
 8001fda:	2259      	movs	r2, #89	; 0x59
 8001fdc:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, TX_BUFFER, 1, 100);
 8001fde:	2364      	movs	r3, #100	; 0x64
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	492b      	ldr	r1, [pc, #172]	; (8002090 <mainMachine+0x2b8>)
 8001fe4:	482b      	ldr	r0, [pc, #172]	; (8002094 <mainMachine+0x2bc>)
 8001fe6:	f005 fe4c 	bl	8007c82 <HAL_UART_Transmit>
			intUartSend(actual.y);
 8001fea:	4b0e      	ldr	r3, [pc, #56]	; (8002024 <mainMachine+0x24c>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7fe fe74 	bl	8000cdc <__aeabi_i2f>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7ff fd32 	bl	8001a60 <intUartSend>
			actual.x = ALTO;
 8001ffc:	4b09      	ldr	r3, [pc, #36]	; (8002024 <mainMachine+0x24c>)
 8001ffe:	2208      	movs	r2, #8
 8002000:	601a      	str	r2, [r3, #0]
			actual.y = ANCHO;
 8002002:	4b08      	ldr	r3, [pc, #32]	; (8002024 <mainMachine+0x24c>)
 8002004:	2208      	movs	r2, #8
 8002006:	605a      	str	r2, [r3, #4]
			finishFlag = 0;
 8002008:	4b09      	ldr	r3, [pc, #36]	; (8002030 <mainMachine+0x258>)
 800200a:	2200      	movs	r2, #0
 800200c:	601a      	str	r2, [r3, #0]
			resetAxis(direcciones);
 800200e:	4806      	ldr	r0, [pc, #24]	; (8002028 <mainMachine+0x250>)
 8002010:	f001 fbc5 	bl	800379e <resetAxis>
			PrintMap();
 8002014:	f001 f94a 	bl	80032ac <PrintMap>
			mainState = RESOLUTION;
 8002018:	4b01      	ldr	r3, [pc, #4]	; (8002020 <mainMachine+0x248>)
 800201a:	2202      	movs	r2, #2
 800201c:	601a      	str	r2, [r3, #0]
		break;
 800201e:	e08f      	b.n	8002140 <mainMachine+0x368>
 8002020:	2000239c 	.word	0x2000239c
 8002024:	2000248c 	.word	0x2000248c
 8002028:	20002310 	.word	0x20002310
 800202c:	20002358 	.word	0x20002358
 8002030:	20002354 	.word	0x20002354
 8002034:	20002360 	.word	0x20002360
 8002038:	40010c00 	.word	0x40010c00
 800203c:	20002320 	.word	0x20002320
 8002040:	20000044 	.word	0x20000044
 8002044:	200040b4 	.word	0x200040b4
 8002048:	2000004c 	.word	0x2000004c
 800204c:	20000000 	.word	0x20000000
 8002050:	2000409c 	.word	0x2000409c
 8002054:	20000008 	.word	0x20000008
 8002058:	200040a0 	.word	0x200040a0
 800205c:	20000010 	.word	0x20000010
 8002060:	200040a4 	.word	0x200040a4
 8002064:	20000018 	.word	0x20000018
 8002068:	200040a8 	.word	0x200040a8
 800206c:	20000020 	.word	0x20000020
 8002070:	200040ac 	.word	0x200040ac
 8002074:	20000030 	.word	0x20000030
 8002078:	200040b0 	.word	0x200040b0
 800207c:	200040b8 	.word	0x200040b8
 8002080:	200023c0 	.word	0x200023c0
 8002084:	0801fc00 	.word	0x0801fc00
 8002088:	20002428 	.word	0x20002428
 800208c:	40011000 	.word	0x40011000
 8002090:	2000233c 	.word	0x2000233c
 8002094:	200002bc 	.word	0x200002bc
	case RESOLUTION:
		if (Map[actual.x][actual.y].final == 0) {
 8002098:	4b2a      	ldr	r3, [pc, #168]	; (8002144 <mainMachine+0x36c>)
 800209a:	6819      	ldr	r1, [r3, #0]
 800209c:	4b29      	ldr	r3, [pc, #164]	; (8002144 <mainMachine+0x36c>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	4829      	ldr	r0, [pc, #164]	; (8002148 <mainMachine+0x370>)
 80020a2:	461a      	mov	r2, r3
 80020a4:	00d2      	lsls	r2, r2, #3
 80020a6:	1ad2      	subs	r2, r2, r3
 80020a8:	0093      	lsls	r3, r2, #2
 80020aa:	461a      	mov	r2, r3
 80020ac:	460b      	mov	r3, r1
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	1a5b      	subs	r3, r3, r1
 80020b2:	019b      	lsls	r3, r3, #6
 80020b4:	4413      	add	r3, r2
 80020b6:	4403      	add	r3, r0
 80020b8:	3314      	adds	r3, #20
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d12c      	bne.n	800211a <mainMachine+0x342>
			addDirection(actual.x, actual.y);
 80020c0:	4b20      	ldr	r3, [pc, #128]	; (8002144 <mainMachine+0x36c>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a1f      	ldr	r2, [pc, #124]	; (8002144 <mainMachine+0x36c>)
 80020c6:	6852      	ldr	r2, [r2, #4]
 80020c8:	4611      	mov	r1, r2
 80020ca:	4618      	mov	r0, r3
 80020cc:	f000 fb32 	bl	8002734 <addDirection>
			TX_BUFFER[0] = 'X';
 80020d0:	4b1e      	ldr	r3, [pc, #120]	; (800214c <mainMachine+0x374>)
 80020d2:	2258      	movs	r2, #88	; 0x58
 80020d4:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, TX_BUFFER, 1, 100);
 80020d6:	2364      	movs	r3, #100	; 0x64
 80020d8:	2201      	movs	r2, #1
 80020da:	491c      	ldr	r1, [pc, #112]	; (800214c <mainMachine+0x374>)
 80020dc:	481c      	ldr	r0, [pc, #112]	; (8002150 <mainMachine+0x378>)
 80020de:	f005 fdd0 	bl	8007c82 <HAL_UART_Transmit>
			intUartSend(actual.x);
 80020e2:	4b18      	ldr	r3, [pc, #96]	; (8002144 <mainMachine+0x36c>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7fe fdf8 	bl	8000cdc <__aeabi_i2f>
 80020ec:	4603      	mov	r3, r0
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7ff fcb6 	bl	8001a60 <intUartSend>
			TX_BUFFER[0] = 'Y';
 80020f4:	4b15      	ldr	r3, [pc, #84]	; (800214c <mainMachine+0x374>)
 80020f6:	2259      	movs	r2, #89	; 0x59
 80020f8:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, TX_BUFFER, 1, 100);
 80020fa:	2364      	movs	r3, #100	; 0x64
 80020fc:	2201      	movs	r2, #1
 80020fe:	4913      	ldr	r1, [pc, #76]	; (800214c <mainMachine+0x374>)
 8002100:	4813      	ldr	r0, [pc, #76]	; (8002150 <mainMachine+0x378>)
 8002102:	f005 fdbe 	bl	8007c82 <HAL_UART_Transmit>
			intUartSend(actual.y);
 8002106:	4b0f      	ldr	r3, [pc, #60]	; (8002144 <mainMachine+0x36c>)
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	4618      	mov	r0, r3
 800210c:	f7fe fde6 	bl	8000cdc <__aeabi_i2f>
 8002110:	4603      	mov	r3, r0
 8002112:	4618      	mov	r0, r3
 8002114:	f7ff fca4 	bl	8001a60 <intUartSend>
			directions[directionsSize] = 'o';
			Flash_Write_Data(0x0801FC00, (uint32_t*) directions, 25);
			mainState = SETUP;
		}

		break;
 8002118:	e012      	b.n	8002140 <mainMachine+0x368>
			directions[directionsSize] = 'o';
 800211a:	4b0e      	ldr	r3, [pc, #56]	; (8002154 <mainMachine+0x37c>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a0e      	ldr	r2, [pc, #56]	; (8002158 <mainMachine+0x380>)
 8002120:	216f      	movs	r1, #111	; 0x6f
 8002122:	54d1      	strb	r1, [r2, r3]
			Flash_Write_Data(0x0801FC00, (uint32_t*) directions, 25);
 8002124:	2219      	movs	r2, #25
 8002126:	490c      	ldr	r1, [pc, #48]	; (8002158 <mainMachine+0x380>)
 8002128:	480c      	ldr	r0, [pc, #48]	; (800215c <mainMachine+0x384>)
 800212a:	f7ff f85f 	bl	80011ec <Flash_Write_Data>
			mainState = SETUP;
 800212e:	4b0c      	ldr	r3, [pc, #48]	; (8002160 <mainMachine+0x388>)
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
		break;
 8002134:	e004      	b.n	8002140 <mainMachine+0x368>
	case RACING:
		runDirections(string);
 8002136:	480b      	ldr	r0, [pc, #44]	; (8002164 <mainMachine+0x38c>)
 8002138:	f000 fa9e 	bl	8002678 <runDirections>
		break;
 800213c:	e000      	b.n	8002140 <mainMachine+0x368>
		break;
 800213e:	bf00      	nop
	}

}
 8002140:	bf00      	nop
 8002142:	bd80      	pop	{r7, pc}
 8002144:	2000248c 	.word	0x2000248c
 8002148:	2000249c 	.word	0x2000249c
 800214c:	2000233c 	.word	0x2000233c
 8002150:	200002bc 	.word	0x200002bc
 8002154:	2000234c 	.word	0x2000234c
 8002158:	200023a4 	.word	0x200023a4
 800215c:	0801fc00 	.word	0x0801fc00
 8002160:	2000239c 	.word	0x2000239c
 8002164:	20002428 	.word	0x20002428

08002168 <calibrateMachine>:

void calibrateMachine() {
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
	switch (calState) {
 800216c:	4b66      	ldr	r3, [pc, #408]	; (8002308 <calibrateMachine+0x1a0>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2b03      	cmp	r3, #3
 8002172:	f200 80c6 	bhi.w	8002302 <calibrateMachine+0x19a>
 8002176:	a201      	add	r2, pc, #4	; (adr r2, 800217c <calibrateMachine+0x14>)
 8002178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800217c:	0800218d 	.word	0x0800218d
 8002180:	08002225 	.word	0x08002225
 8002184:	0800226d 	.word	0x0800226d
 8002188:	080022b5 	.word	0x080022b5
	case CENTER:
		intUartSend(Sensors[1] - Sensors[3]);
 800218c:	4b5f      	ldr	r3, [pc, #380]	; (800230c <calibrateMachine+0x1a4>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	4a5e      	ldr	r2, [pc, #376]	; (800230c <calibrateMachine+0x1a4>)
 8002192:	68d2      	ldr	r2, [r2, #12]
 8002194:	4611      	mov	r1, r2
 8002196:	4618      	mov	r0, r3
 8002198:	f7fe fcea 	bl	8000b70 <__aeabi_fsub>
 800219c:	4603      	mov	r3, r0
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff fc5e 	bl	8001a60 <intUartSend>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80021a4:	2201      	movs	r2, #1
 80021a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021aa:	4859      	ldr	r0, [pc, #356]	; (8002310 <calibrateMachine+0x1a8>)
 80021ac:	f004 f9a3 	bl	80064f6 <HAL_GPIO_WritePin>
		if (Sensors[1] - Sensors[3] < 0.5 && Sensors[1] - Sensors[3] > -0.5) {
 80021b0:	4b56      	ldr	r3, [pc, #344]	; (800230c <calibrateMachine+0x1a4>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	4a55      	ldr	r2, [pc, #340]	; (800230c <calibrateMachine+0x1a4>)
 80021b6:	68d2      	ldr	r2, [r2, #12]
 80021b8:	4611      	mov	r1, r2
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7fe fcd8 	bl	8000b70 <__aeabi_fsub>
 80021c0:	4603      	mov	r3, r0
 80021c2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7fe ff7a 	bl	80010c0 <__aeabi_fcmplt>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d100      	bne.n	80021d4 <calibrateMachine+0x6c>
			}
		}
		/*runMotor(ADELANTE, MOTOR_A);
		 runMotor(ADELANTE, MOTOR_B);
		 StraightFlag = 1;*/
		break;
 80021d2:	e08f      	b.n	80022f4 <calibrateMachine+0x18c>
		if (Sensors[1] - Sensors[3] < 0.5 && Sensors[1] - Sensors[3] > -0.5) {
 80021d4:	4b4d      	ldr	r3, [pc, #308]	; (800230c <calibrateMachine+0x1a4>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	4a4c      	ldr	r2, [pc, #304]	; (800230c <calibrateMachine+0x1a4>)
 80021da:	68d2      	ldr	r2, [r2, #12]
 80021dc:	4611      	mov	r1, r2
 80021de:	4618      	mov	r0, r3
 80021e0:	f7fe fcc6 	bl	8000b70 <__aeabi_fsub>
 80021e4:	4603      	mov	r3, r0
 80021e6:	f04f 413f 	mov.w	r1, #3204448256	; 0xbf000000
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7fe ff86 	bl	80010fc <__aeabi_fcmpgt>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d100      	bne.n	80021f8 <calibrateMachine+0x90>
		break;
 80021f6:	e07d      	b.n	80022f4 <calibrateMachine+0x18c>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80021f8:	2200      	movs	r2, #0
 80021fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021fe:	4844      	ldr	r0, [pc, #272]	; (8002310 <calibrateMachine+0x1a8>)
 8002200:	f004 f979 	bl	80064f6 <HAL_GPIO_WritePin>
			if (btns[0].flag == 1) {
 8002204:	4b43      	ldr	r3, [pc, #268]	; (8002314 <calibrateMachine+0x1ac>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	2b01      	cmp	r3, #1
 800220a:	d173      	bne.n	80022f4 <calibrateMachine+0x18c>
				CenterDistanceRight = Sensors[3];
 800220c:	4b3f      	ldr	r3, [pc, #252]	; (800230c <calibrateMachine+0x1a4>)
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	4a41      	ldr	r2, [pc, #260]	; (8002318 <calibrateMachine+0x1b0>)
 8002212:	6013      	str	r3, [r2, #0]
				CenterDistanceLeft = Sensors[1];
 8002214:	4b3d      	ldr	r3, [pc, #244]	; (800230c <calibrateMachine+0x1a4>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	4a40      	ldr	r2, [pc, #256]	; (800231c <calibrateMachine+0x1b4>)
 800221a:	6013      	str	r3, [r2, #0]
				calState = LEFT;
 800221c:	4b3a      	ldr	r3, [pc, #232]	; (8002308 <calibrateMachine+0x1a0>)
 800221e:	2201      	movs	r2, #1
 8002220:	601a      	str	r2, [r3, #0]
		break;
 8002222:	e067      	b.n	80022f4 <calibrateMachine+0x18c>
	case LEFT:
		intUartSend((Sensors[3]));
 8002224:	4b39      	ldr	r3, [pc, #228]	; (800230c <calibrateMachine+0x1a4>)
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff fc19 	bl	8001a60 <intUartSend>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800222e:	2201      	movs	r2, #1
 8002230:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002234:	4836      	ldr	r0, [pc, #216]	; (8002310 <calibrateMachine+0x1a8>)
 8002236:	f004 f95e 	bl	80064f6 <HAL_GPIO_WritePin>
		if (btns[0].flag == 1) {
 800223a:	4b36      	ldr	r3, [pc, #216]	; (8002314 <calibrateMachine+0x1ac>)
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d15a      	bne.n	80022f8 <calibrateMachine+0x190>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002242:	2200      	movs	r2, #0
 8002244:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002248:	4831      	ldr	r0, [pc, #196]	; (8002310 <calibrateMachine+0x1a8>)
 800224a:	f004 f954 	bl	80064f6 <HAL_GPIO_WritePin>
			maxDistance[1] = Sensors[3] + 2;
 800224e:	4b2f      	ldr	r3, [pc, #188]	; (800230c <calibrateMachine+0x1a4>)
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002256:	4618      	mov	r0, r3
 8002258:	f7fe fc8c 	bl	8000b74 <__addsf3>
 800225c:	4603      	mov	r3, r0
 800225e:	461a      	mov	r2, r3
 8002260:	4b2f      	ldr	r3, [pc, #188]	; (8002320 <calibrateMachine+0x1b8>)
 8002262:	605a      	str	r2, [r3, #4]
			calState = RIGHT;
 8002264:	4b28      	ldr	r3, [pc, #160]	; (8002308 <calibrateMachine+0x1a0>)
 8002266:	2202      	movs	r2, #2
 8002268:	601a      	str	r2, [r3, #0]
		}
		break;
 800226a:	e045      	b.n	80022f8 <calibrateMachine+0x190>
	case RIGHT:
		intUartSend((Sensors[1]));
 800226c:	4b27      	ldr	r3, [pc, #156]	; (800230c <calibrateMachine+0x1a4>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff fbf5 	bl	8001a60 <intUartSend>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8002276:	2201      	movs	r2, #1
 8002278:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800227c:	4824      	ldr	r0, [pc, #144]	; (8002310 <calibrateMachine+0x1a8>)
 800227e:	f004 f93a 	bl	80064f6 <HAL_GPIO_WritePin>
		if (btns[0].flag == 1) {
 8002282:	4b24      	ldr	r3, [pc, #144]	; (8002314 <calibrateMachine+0x1ac>)
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d138      	bne.n	80022fc <calibrateMachine+0x194>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800228a:	2200      	movs	r2, #0
 800228c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002290:	481f      	ldr	r0, [pc, #124]	; (8002310 <calibrateMachine+0x1a8>)
 8002292:	f004 f930 	bl	80064f6 <HAL_GPIO_WritePin>
			maxDistance[2] = Sensors[1] + 2;
 8002296:	4b1d      	ldr	r3, [pc, #116]	; (800230c <calibrateMachine+0x1a4>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800229e:	4618      	mov	r0, r3
 80022a0:	f7fe fc68 	bl	8000b74 <__addsf3>
 80022a4:	4603      	mov	r3, r0
 80022a6:	461a      	mov	r2, r3
 80022a8:	4b1d      	ldr	r3, [pc, #116]	; (8002320 <calibrateMachine+0x1b8>)
 80022aa:	609a      	str	r2, [r3, #8]
			calState = FORWARD;
 80022ac:	4b16      	ldr	r3, [pc, #88]	; (8002308 <calibrateMachine+0x1a0>)
 80022ae:	2203      	movs	r2, #3
 80022b0:	601a      	str	r2, [r3, #0]
		}
		break;
 80022b2:	e023      	b.n	80022fc <calibrateMachine+0x194>
	case FORWARD:
		intUartSend((Sensors[2]));
 80022b4:	4b15      	ldr	r3, [pc, #84]	; (800230c <calibrateMachine+0x1a4>)
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7ff fbd1 	bl	8001a60 <intUartSend>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80022be:	2201      	movs	r2, #1
 80022c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022c4:	4812      	ldr	r0, [pc, #72]	; (8002310 <calibrateMachine+0x1a8>)
 80022c6:	f004 f916 	bl	80064f6 <HAL_GPIO_WritePin>
		if (btns[0].flag == 1) {
 80022ca:	4b12      	ldr	r3, [pc, #72]	; (8002314 <calibrateMachine+0x1ac>)
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d116      	bne.n	8002300 <calibrateMachine+0x198>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80022d2:	2200      	movs	r2, #0
 80022d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022d8:	480d      	ldr	r0, [pc, #52]	; (8002310 <calibrateMachine+0x1a8>)
 80022da:	f004 f90c 	bl	80064f6 <HAL_GPIO_WritePin>
			maxDistance[0] = Sensors[2];
 80022de:	4b0b      	ldr	r3, [pc, #44]	; (800230c <calibrateMachine+0x1a4>)
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	4a0f      	ldr	r2, [pc, #60]	; (8002320 <calibrateMachine+0x1b8>)
 80022e4:	6013      	str	r3, [r2, #0]
			mainState = SETUP;
 80022e6:	4b0f      	ldr	r3, [pc, #60]	; (8002324 <calibrateMachine+0x1bc>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]
			calState = CENTER;
 80022ec:	4b06      	ldr	r3, [pc, #24]	; (8002308 <calibrateMachine+0x1a0>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	601a      	str	r2, [r3, #0]
		}
		break;
 80022f2:	e005      	b.n	8002300 <calibrateMachine+0x198>
		break;
 80022f4:	bf00      	nop
 80022f6:	e004      	b.n	8002302 <calibrateMachine+0x19a>
		break;
 80022f8:	bf00      	nop
 80022fa:	e002      	b.n	8002302 <calibrateMachine+0x19a>
		break;
 80022fc:	bf00      	nop
 80022fe:	e000      	b.n	8002302 <calibrateMachine+0x19a>
		break;
 8002300:	bf00      	nop
	}
}
 8002302:	bf00      	nop
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	20002330 	.word	0x20002330
 800230c:	20002300 	.word	0x20002300
 8002310:	40011000 	.word	0x40011000
 8002314:	20002360 	.word	0x20002360
 8002318:	20002328 	.word	0x20002328
 800231c:	2000232c 	.word	0x2000232c
 8002320:	20002390 	.word	0x20002390
 8002324:	2000239c 	.word	0x2000239c

08002328 <robotMachine>:

void robotMachine() {
 8002328:	b5b0      	push	{r4, r5, r7, lr}
 800232a:	af00      	add	r7, sp, #0
	switch (robotState) {
 800232c:	4bb5      	ldr	r3, [pc, #724]	; (8002604 <robotMachine+0x2dc>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2b02      	cmp	r3, #2
 8002332:	f000 8183 	beq.w	800263c <robotMachine+0x314>
 8002336:	2b02      	cmp	r3, #2
 8002338:	f300 8193 	bgt.w	8002662 <robotMachine+0x33a>
 800233c:	2b00      	cmp	r3, #0
 800233e:	d003      	beq.n	8002348 <robotMachine+0x20>
 8002340:	2b01      	cmp	r3, #1
 8002342:	f000 8125 	beq.w	8002590 <robotMachine+0x268>
			robotState = READING;
			//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
		}
		break;
	}
}
 8002346:	e18c      	b.n	8002662 <robotMachine+0x33a>
		TX_BUFFER[0] = 'X';
 8002348:	4baf      	ldr	r3, [pc, #700]	; (8002608 <robotMachine+0x2e0>)
 800234a:	2258      	movs	r2, #88	; 0x58
 800234c:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = actual.x + '0';
 800234e:	4baf      	ldr	r3, [pc, #700]	; (800260c <robotMachine+0x2e4>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	b2db      	uxtb	r3, r3
 8002354:	3330      	adds	r3, #48	; 0x30
 8002356:	b2da      	uxtb	r2, r3
 8002358:	4bab      	ldr	r3, [pc, #684]	; (8002608 <robotMachine+0x2e0>)
 800235a:	705a      	strb	r2, [r3, #1]
		TX_BUFFER[2] = '\n';
 800235c:	4baa      	ldr	r3, [pc, #680]	; (8002608 <robotMachine+0x2e0>)
 800235e:	220a      	movs	r2, #10
 8002360:	709a      	strb	r2, [r3, #2]
		TX_BUFFER[3] = 'Y';
 8002362:	4ba9      	ldr	r3, [pc, #676]	; (8002608 <robotMachine+0x2e0>)
 8002364:	2259      	movs	r2, #89	; 0x59
 8002366:	70da      	strb	r2, [r3, #3]
		TX_BUFFER[4] = actual.y + '0';
 8002368:	4ba8      	ldr	r3, [pc, #672]	; (800260c <robotMachine+0x2e4>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	b2db      	uxtb	r3, r3
 800236e:	3330      	adds	r3, #48	; 0x30
 8002370:	b2da      	uxtb	r2, r3
 8002372:	4ba5      	ldr	r3, [pc, #660]	; (8002608 <robotMachine+0x2e0>)
 8002374:	711a      	strb	r2, [r3, #4]
		TX_BUFFER[5] = '\n';
 8002376:	4ba4      	ldr	r3, [pc, #656]	; (8002608 <robotMachine+0x2e0>)
 8002378:	220a      	movs	r2, #10
 800237a:	715a      	strb	r2, [r3, #5]
		HAL_UART_Transmit(&huart3, TX_BUFFER, 6, 100);
 800237c:	2364      	movs	r3, #100	; 0x64
 800237e:	2206      	movs	r2, #6
 8002380:	49a1      	ldr	r1, [pc, #644]	; (8002608 <robotMachine+0x2e0>)
 8002382:	48a3      	ldr	r0, [pc, #652]	; (8002610 <robotMachine+0x2e8>)
 8002384:	f005 fc7d 	bl	8007c82 <HAL_UART_Transmit>
		Map[actual.x][actual.y].visitado++;
 8002388:	4ba0      	ldr	r3, [pc, #640]	; (800260c <robotMachine+0x2e4>)
 800238a:	6819      	ldr	r1, [r3, #0]
 800238c:	4b9f      	ldr	r3, [pc, #636]	; (800260c <robotMachine+0x2e4>)
 800238e:	6858      	ldr	r0, [r3, #4]
 8002390:	4ca0      	ldr	r4, [pc, #640]	; (8002614 <robotMachine+0x2ec>)
 8002392:	4602      	mov	r2, r0
 8002394:	00d2      	lsls	r2, r2, #3
 8002396:	1a12      	subs	r2, r2, r0
 8002398:	0093      	lsls	r3, r2, #2
 800239a:	461a      	mov	r2, r3
 800239c:	460b      	mov	r3, r1
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	1a5b      	subs	r3, r3, r1
 80023a2:	019b      	lsls	r3, r3, #6
 80023a4:	4413      	add	r3, r2
 80023a6:	4423      	add	r3, r4
 80023a8:	3310      	adds	r3, #16
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	1c5c      	adds	r4, r3, #1
 80023ae:	4d99      	ldr	r5, [pc, #612]	; (8002614 <robotMachine+0x2ec>)
 80023b0:	4602      	mov	r2, r0
 80023b2:	00d2      	lsls	r2, r2, #3
 80023b4:	1a12      	subs	r2, r2, r0
 80023b6:	0093      	lsls	r3, r2, #2
 80023b8:	461a      	mov	r2, r3
 80023ba:	460b      	mov	r3, r1
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	1a5b      	subs	r3, r3, r1
 80023c0:	019b      	lsls	r3, r3, #6
 80023c2:	4413      	add	r3, r2
 80023c4:	442b      	add	r3, r5
 80023c6:	3310      	adds	r3, #16
 80023c8:	601c      	str	r4, [r3, #0]
		if (Map[actual.x][actual.y].visitado == 1) {
 80023ca:	4b90      	ldr	r3, [pc, #576]	; (800260c <robotMachine+0x2e4>)
 80023cc:	6819      	ldr	r1, [r3, #0]
 80023ce:	4b8f      	ldr	r3, [pc, #572]	; (800260c <robotMachine+0x2e4>)
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	4890      	ldr	r0, [pc, #576]	; (8002614 <robotMachine+0x2ec>)
 80023d4:	461a      	mov	r2, r3
 80023d6:	00d2      	lsls	r2, r2, #3
 80023d8:	1ad2      	subs	r2, r2, r3
 80023da:	0093      	lsls	r3, r2, #2
 80023dc:	461a      	mov	r2, r3
 80023de:	460b      	mov	r3, r1
 80023e0:	00db      	lsls	r3, r3, #3
 80023e2:	1a5b      	subs	r3, r3, r1
 80023e4:	019b      	lsls	r3, r3, #6
 80023e6:	4413      	add	r3, r2
 80023e8:	4403      	add	r3, r0
 80023ea:	3310      	adds	r3, #16
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d136      	bne.n	8002460 <robotMachine+0x138>
			runMotor(OFF, MOTOR_A);
 80023f2:	2100      	movs	r1, #0
 80023f4:	2005      	movs	r0, #5
 80023f6:	f001 f911 	bl	800361c <runMotor>
			runMotor(OFF, MOTOR_B);
 80023fa:	2101      	movs	r1, #1
 80023fc:	2005      	movs	r0, #5
 80023fe:	f001 f90d 	bl	800361c <runMotor>
			CreateNode(&Map[actual.x][actual.y], Sensors, direcciones,
 8002402:	4b82      	ldr	r3, [pc, #520]	; (800260c <robotMachine+0x2e4>)
 8002404:	6819      	ldr	r1, [r3, #0]
 8002406:	4b81      	ldr	r3, [pc, #516]	; (800260c <robotMachine+0x2e4>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	461a      	mov	r2, r3
 800240c:	00d2      	lsls	r2, r2, #3
 800240e:	1ad2      	subs	r2, r2, r3
 8002410:	0093      	lsls	r3, r2, #2
 8002412:	461a      	mov	r2, r3
 8002414:	460b      	mov	r3, r1
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	1a5b      	subs	r3, r3, r1
 800241a:	019b      	lsls	r3, r3, #6
 800241c:	4413      	add	r3, r2
 800241e:	4a7d      	ldr	r2, [pc, #500]	; (8002614 <robotMachine+0x2ec>)
 8002420:	1898      	adds	r0, r3, r2
 8002422:	4b7d      	ldr	r3, [pc, #500]	; (8002618 <robotMachine+0x2f0>)
 8002424:	4a7d      	ldr	r2, [pc, #500]	; (800261c <robotMachine+0x2f4>)
 8002426:	497e      	ldr	r1, [pc, #504]	; (8002620 <robotMachine+0x2f8>)
 8002428:	f001 fd72 	bl	8003f10 <CreateNode>
			if (q == 1) {
 800242c:	4b7d      	ldr	r3, [pc, #500]	; (8002624 <robotMachine+0x2fc>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2b01      	cmp	r3, #1
 8002432:	d115      	bne.n	8002460 <robotMachine+0x138>
				Map[actual.x][actual.y].Lados[direcciones[ATRAS]] = 1;
 8002434:	4b75      	ldr	r3, [pc, #468]	; (800260c <robotMachine+0x2e4>)
 8002436:	6819      	ldr	r1, [r3, #0]
 8002438:	4b74      	ldr	r3, [pc, #464]	; (800260c <robotMachine+0x2e4>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	4a77      	ldr	r2, [pc, #476]	; (800261c <robotMachine+0x2f4>)
 800243e:	6890      	ldr	r0, [r2, #8]
 8002440:	4c74      	ldr	r4, [pc, #464]	; (8002614 <robotMachine+0x2ec>)
 8002442:	461a      	mov	r2, r3
 8002444:	00d2      	lsls	r2, r2, #3
 8002446:	1ad2      	subs	r2, r2, r3
 8002448:	460b      	mov	r3, r1
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	1a5b      	subs	r3, r3, r1
 800244e:	011b      	lsls	r3, r3, #4
 8002450:	4413      	add	r3, r2
 8002452:	4403      	add	r3, r0
 8002454:	2201      	movs	r2, #1
 8002456:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
				q = 0;
 800245a:	4b72      	ldr	r3, [pc, #456]	; (8002624 <robotMachine+0x2fc>)
 800245c:	2200      	movs	r2, #0
 800245e:	601a      	str	r2, [r3, #0]
		intUartSend(Map[actual.x][actual.y].Lados[DERECHA]);
 8002460:	4b6a      	ldr	r3, [pc, #424]	; (800260c <robotMachine+0x2e4>)
 8002462:	6819      	ldr	r1, [r3, #0]
 8002464:	4b69      	ldr	r3, [pc, #420]	; (800260c <robotMachine+0x2e4>)
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	486a      	ldr	r0, [pc, #424]	; (8002614 <robotMachine+0x2ec>)
 800246a:	461a      	mov	r2, r3
 800246c:	00d2      	lsls	r2, r2, #3
 800246e:	1ad2      	subs	r2, r2, r3
 8002470:	0093      	lsls	r3, r2, #2
 8002472:	461a      	mov	r2, r3
 8002474:	460b      	mov	r3, r1
 8002476:	00db      	lsls	r3, r3, #3
 8002478:	1a5b      	subs	r3, r3, r1
 800247a:	019b      	lsls	r3, r3, #6
 800247c:	4413      	add	r3, r2
 800247e:	4403      	add	r3, r0
 8002480:	330c      	adds	r3, #12
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4618      	mov	r0, r3
 8002486:	f7fe fc29 	bl	8000cdc <__aeabi_i2f>
 800248a:	4603      	mov	r3, r0
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff fae7 	bl	8001a60 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[ADELANTE]);
 8002492:	4b5e      	ldr	r3, [pc, #376]	; (800260c <robotMachine+0x2e4>)
 8002494:	6819      	ldr	r1, [r3, #0]
 8002496:	4b5d      	ldr	r3, [pc, #372]	; (800260c <robotMachine+0x2e4>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	485e      	ldr	r0, [pc, #376]	; (8002614 <robotMachine+0x2ec>)
 800249c:	461a      	mov	r2, r3
 800249e:	00d2      	lsls	r2, r2, #3
 80024a0:	1ad2      	subs	r2, r2, r3
 80024a2:	0093      	lsls	r3, r2, #2
 80024a4:	461a      	mov	r2, r3
 80024a6:	460b      	mov	r3, r1
 80024a8:	00db      	lsls	r3, r3, #3
 80024aa:	1a5b      	subs	r3, r3, r1
 80024ac:	019b      	lsls	r3, r3, #6
 80024ae:	4413      	add	r3, r2
 80024b0:	4403      	add	r3, r0
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7fe fc11 	bl	8000cdc <__aeabi_i2f>
 80024ba:	4603      	mov	r3, r0
 80024bc:	4618      	mov	r0, r3
 80024be:	f7ff facf 	bl	8001a60 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[IZQUIERDA]);
 80024c2:	4b52      	ldr	r3, [pc, #328]	; (800260c <robotMachine+0x2e4>)
 80024c4:	6819      	ldr	r1, [r3, #0]
 80024c6:	4b51      	ldr	r3, [pc, #324]	; (800260c <robotMachine+0x2e4>)
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	4852      	ldr	r0, [pc, #328]	; (8002614 <robotMachine+0x2ec>)
 80024cc:	461a      	mov	r2, r3
 80024ce:	00d2      	lsls	r2, r2, #3
 80024d0:	1ad2      	subs	r2, r2, r3
 80024d2:	0093      	lsls	r3, r2, #2
 80024d4:	461a      	mov	r2, r3
 80024d6:	460b      	mov	r3, r1
 80024d8:	00db      	lsls	r3, r3, #3
 80024da:	1a5b      	subs	r3, r3, r1
 80024dc:	019b      	lsls	r3, r3, #6
 80024de:	4413      	add	r3, r2
 80024e0:	4403      	add	r3, r0
 80024e2:	3304      	adds	r3, #4
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7fe fbf8 	bl	8000cdc <__aeabi_i2f>
 80024ec:	4603      	mov	r3, r0
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7ff fab6 	bl	8001a60 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[ATRAS]);
 80024f4:	4b45      	ldr	r3, [pc, #276]	; (800260c <robotMachine+0x2e4>)
 80024f6:	6819      	ldr	r1, [r3, #0]
 80024f8:	4b44      	ldr	r3, [pc, #272]	; (800260c <robotMachine+0x2e4>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	4845      	ldr	r0, [pc, #276]	; (8002614 <robotMachine+0x2ec>)
 80024fe:	461a      	mov	r2, r3
 8002500:	00d2      	lsls	r2, r2, #3
 8002502:	1ad2      	subs	r2, r2, r3
 8002504:	0093      	lsls	r3, r2, #2
 8002506:	461a      	mov	r2, r3
 8002508:	460b      	mov	r3, r1
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	1a5b      	subs	r3, r3, r1
 800250e:	019b      	lsls	r3, r3, #6
 8002510:	4413      	add	r3, r2
 8002512:	4403      	add	r3, r0
 8002514:	3308      	adds	r3, #8
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4618      	mov	r0, r3
 800251a:	f7fe fbdf 	bl	8000cdc <__aeabi_i2f>
 800251e:	4603      	mov	r3, r0
 8002520:	4618      	mov	r0, r3
 8002522:	f7ff fa9d 	bl	8001a60 <intUartSend>
		valueCNY = NEGRO;			//Sensors[0];
 8002526:	4b40      	ldr	r3, [pc, #256]	; (8002628 <robotMachine+0x300>)
 8002528:	2201      	movs	r2, #1
 800252a:	601a      	str	r2, [r3, #0]
		if (valueCNY == BLANCO) {
 800252c:	4b3e      	ldr	r3, [pc, #248]	; (8002628 <robotMachine+0x300>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d116      	bne.n	8002562 <robotMachine+0x23a>
			Map[actual.x][actual.y].final = 1;
 8002534:	4b35      	ldr	r3, [pc, #212]	; (800260c <robotMachine+0x2e4>)
 8002536:	6819      	ldr	r1, [r3, #0]
 8002538:	4b34      	ldr	r3, [pc, #208]	; (800260c <robotMachine+0x2e4>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	4835      	ldr	r0, [pc, #212]	; (8002614 <robotMachine+0x2ec>)
 800253e:	461a      	mov	r2, r3
 8002540:	00d2      	lsls	r2, r2, #3
 8002542:	1ad2      	subs	r2, r2, r3
 8002544:	0093      	lsls	r3, r2, #2
 8002546:	461a      	mov	r2, r3
 8002548:	460b      	mov	r3, r1
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	1a5b      	subs	r3, r3, r1
 800254e:	019b      	lsls	r3, r3, #6
 8002550:	4413      	add	r3, r2
 8002552:	4403      	add	r3, r0
 8002554:	3314      	adds	r3, #20
 8002556:	2201      	movs	r2, #1
 8002558:	601a      	str	r2, [r3, #0]
			finishFlag = 1;
 800255a:	4b34      	ldr	r3, [pc, #208]	; (800262c <robotMachine+0x304>)
 800255c:	2201      	movs	r2, #1
 800255e:	601a      	str	r2, [r3, #0]
		break;
 8002560:	e07f      	b.n	8002662 <robotMachine+0x33a>
			Map[actual.x][actual.y].final = 0;
 8002562:	4b2a      	ldr	r3, [pc, #168]	; (800260c <robotMachine+0x2e4>)
 8002564:	6819      	ldr	r1, [r3, #0]
 8002566:	4b29      	ldr	r3, [pc, #164]	; (800260c <robotMachine+0x2e4>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	482a      	ldr	r0, [pc, #168]	; (8002614 <robotMachine+0x2ec>)
 800256c:	461a      	mov	r2, r3
 800256e:	00d2      	lsls	r2, r2, #3
 8002570:	1ad2      	subs	r2, r2, r3
 8002572:	0093      	lsls	r3, r2, #2
 8002574:	461a      	mov	r2, r3
 8002576:	460b      	mov	r3, r1
 8002578:	00db      	lsls	r3, r3, #3
 800257a:	1a5b      	subs	r3, r3, r1
 800257c:	019b      	lsls	r3, r3, #6
 800257e:	4413      	add	r3, r2
 8002580:	4403      	add	r3, r0
 8002582:	3314      	adds	r3, #20
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]
			robotState = CHOOSING;
 8002588:	4b1e      	ldr	r3, [pc, #120]	; (8002604 <robotMachine+0x2dc>)
 800258a:	2201      	movs	r2, #1
 800258c:	601a      	str	r2, [r3, #0]
		break;
 800258e:	e068      	b.n	8002662 <robotMachine+0x33a>
		movimiento = ChooseNextNode(actual.x, actual.y);
 8002590:	4b1e      	ldr	r3, [pc, #120]	; (800260c <robotMachine+0x2e4>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a1d      	ldr	r2, [pc, #116]	; (800260c <robotMachine+0x2e4>)
 8002596:	6852      	ldr	r2, [r2, #4]
 8002598:	4611      	mov	r1, r2
 800259a:	4618      	mov	r0, r3
 800259c:	f000 f99e 	bl	80028dc <ChooseNextNode>
 80025a0:	4603      	mov	r3, r0
 80025a2:	4a23      	ldr	r2, [pc, #140]	; (8002630 <robotMachine+0x308>)
 80025a4:	6013      	str	r3, [r2, #0]
		TX_BUFFER[0] = 'M';
 80025a6:	4b18      	ldr	r3, [pc, #96]	; (8002608 <robotMachine+0x2e0>)
 80025a8:	224d      	movs	r2, #77	; 0x4d
 80025aa:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = movimiento + '0';
 80025ac:	4b20      	ldr	r3, [pc, #128]	; (8002630 <robotMachine+0x308>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	3330      	adds	r3, #48	; 0x30
 80025b4:	b2da      	uxtb	r2, r3
 80025b6:	4b14      	ldr	r3, [pc, #80]	; (8002608 <robotMachine+0x2e0>)
 80025b8:	705a      	strb	r2, [r3, #1]
		TX_BUFFER[2] = '\n';
 80025ba:	4b13      	ldr	r3, [pc, #76]	; (8002608 <robotMachine+0x2e0>)
 80025bc:	220a      	movs	r2, #10
 80025be:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart3, TX_BUFFER, 3, 100);
 80025c0:	2364      	movs	r3, #100	; 0x64
 80025c2:	2203      	movs	r2, #3
 80025c4:	4910      	ldr	r1, [pc, #64]	; (8002608 <robotMachine+0x2e0>)
 80025c6:	4812      	ldr	r0, [pc, #72]	; (8002610 <robotMachine+0x2e8>)
 80025c8:	f005 fb5b 	bl	8007c82 <HAL_UART_Transmit>
		TX_BUFFER[0] = '*';
 80025cc:	4b0e      	ldr	r3, [pc, #56]	; (8002608 <robotMachine+0x2e0>)
 80025ce:	222a      	movs	r2, #42	; 0x2a
 80025d0:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = '*';
 80025d2:	4b0d      	ldr	r3, [pc, #52]	; (8002608 <robotMachine+0x2e0>)
 80025d4:	222a      	movs	r2, #42	; 0x2a
 80025d6:	705a      	strb	r2, [r3, #1]
		TX_BUFFER[2] = '\n';
 80025d8:	4b0b      	ldr	r3, [pc, #44]	; (8002608 <robotMachine+0x2e0>)
 80025da:	220a      	movs	r2, #10
 80025dc:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart3, TX_BUFFER, 3, 100);
 80025de:	2364      	movs	r3, #100	; 0x64
 80025e0:	2203      	movs	r2, #3
 80025e2:	4909      	ldr	r1, [pc, #36]	; (8002608 <robotMachine+0x2e0>)
 80025e4:	480a      	ldr	r0, [pc, #40]	; (8002610 <robotMachine+0x2e8>)
 80025e6:	f005 fb4c 	bl	8007c82 <HAL_UART_Transmit>
		movimientoFlag = 0;
 80025ea:	4b12      	ldr	r3, [pc, #72]	; (8002634 <robotMachine+0x30c>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	601a      	str	r2, [r3, #0]
		ticksNow = HAL_GetTick();
 80025f0:	f002 fd14 	bl	800501c <HAL_GetTick>
 80025f4:	4603      	mov	r3, r0
 80025f6:	461a      	mov	r2, r3
 80025f8:	4b0f      	ldr	r3, [pc, #60]	; (8002638 <robotMachine+0x310>)
 80025fa:	601a      	str	r2, [r3, #0]
		robotState = MOVING;
 80025fc:	4b01      	ldr	r3, [pc, #4]	; (8002604 <robotMachine+0x2dc>)
 80025fe:	2202      	movs	r2, #2
 8002600:	601a      	str	r2, [r3, #0]
		break;
 8002602:	e02e      	b.n	8002662 <robotMachine+0x33a>
 8002604:	200023a0 	.word	0x200023a0
 8002608:	2000233c 	.word	0x2000233c
 800260c:	2000248c 	.word	0x2000248c
 8002610:	200002bc 	.word	0x200002bc
 8002614:	2000249c 	.word	0x2000249c
 8002618:	20002390 	.word	0x20002390
 800261c:	20002310 	.word	0x20002310
 8002620:	20002300 	.word	0x20002300
 8002624:	2000006c 	.word	0x2000006c
 8002628:	2000235c 	.word	0x2000235c
 800262c:	20002354 	.word	0x20002354
 8002630:	20002350 	.word	0x20002350
 8002634:	20002358 	.word	0x20002358
 8002638:	20002324 	.word	0x20002324
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800263c:	2200      	movs	r2, #0
 800263e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002642:	4809      	ldr	r0, [pc, #36]	; (8002668 <robotMachine+0x340>)
 8002644:	f003 ff57 	bl	80064f6 <HAL_GPIO_WritePin>
		movementMachine(movimiento);
 8002648:	4b08      	ldr	r3, [pc, #32]	; (800266c <robotMachine+0x344>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4618      	mov	r0, r3
 800264e:	f001 f8bf 	bl	80037d0 <movementMachine>
		if (movimientoFlag == 1) {
 8002652:	4b07      	ldr	r3, [pc, #28]	; (8002670 <robotMachine+0x348>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d102      	bne.n	8002660 <robotMachine+0x338>
			robotState = READING;
 800265a:	4b06      	ldr	r3, [pc, #24]	; (8002674 <robotMachine+0x34c>)
 800265c:	2200      	movs	r2, #0
 800265e:	601a      	str	r2, [r3, #0]
		break;
 8002660:	bf00      	nop
}
 8002662:	bf00      	nop
 8002664:	bdb0      	pop	{r4, r5, r7, pc}
 8002666:	bf00      	nop
 8002668:	40011000 	.word	0x40011000
 800266c:	20002350 	.word	0x20002350
 8002670:	20002358 	.word	0x20002358
 8002674:	200023a0 	.word	0x200023a0

08002678 <runDirections>:

void runDirections(char moves[100]) {
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
	if (moves[m] == 'a') {
 8002680:	4b28      	ldr	r3, [pc, #160]	; (8002724 <runDirections+0xac>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	461a      	mov	r2, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4413      	add	r3, r2
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	2b61      	cmp	r3, #97	; 0x61
 800268e:	d103      	bne.n	8002698 <runDirections+0x20>
		movementMachine(ADELANTE);
 8002690:	2000      	movs	r0, #0
 8002692:	f001 f89d 	bl	80037d0 <movementMachine>
 8002696:	e026      	b.n	80026e6 <runDirections+0x6e>
	} else if (moves[m] == 'd') {
 8002698:	4b22      	ldr	r3, [pc, #136]	; (8002724 <runDirections+0xac>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	461a      	mov	r2, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4413      	add	r3, r2
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	2b64      	cmp	r3, #100	; 0x64
 80026a6:	d103      	bne.n	80026b0 <runDirections+0x38>
		movementMachine(DERECHA);
 80026a8:	2003      	movs	r0, #3
 80026aa:	f001 f891 	bl	80037d0 <movementMachine>
 80026ae:	e01a      	b.n	80026e6 <runDirections+0x6e>
	} else if (moves[m] == 'i') {
 80026b0:	4b1c      	ldr	r3, [pc, #112]	; (8002724 <runDirections+0xac>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	461a      	mov	r2, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4413      	add	r3, r2
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	2b69      	cmp	r3, #105	; 0x69
 80026be:	d103      	bne.n	80026c8 <runDirections+0x50>
		movementMachine(IZQUIERDA);
 80026c0:	2001      	movs	r0, #1
 80026c2:	f001 f885 	bl	80037d0 <movementMachine>
 80026c6:	e00e      	b.n	80026e6 <runDirections+0x6e>
	} else if (moves[m] == 'o') {
 80026c8:	4b16      	ldr	r3, [pc, #88]	; (8002724 <runDirections+0xac>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	461a      	mov	r2, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4413      	add	r3, r2
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	2b6f      	cmp	r3, #111	; 0x6f
 80026d6:	d103      	bne.n	80026e0 <runDirections+0x68>
		movementMachine(OFF);
 80026d8:	2005      	movs	r0, #5
 80026da:	f001 f879 	bl	80037d0 <movementMachine>
 80026de:	e002      	b.n	80026e6 <runDirections+0x6e>
	} else {
		movementMachine(SUPER);
 80026e0:	2004      	movs	r0, #4
 80026e2:	f001 f875 	bl	80037d0 <movementMachine>
	}
	TX_BUFFER[0] = moves[m];
 80026e6:	4b0f      	ldr	r3, [pc, #60]	; (8002724 <runDirections+0xac>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	461a      	mov	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	4413      	add	r3, r2
 80026f0:	781a      	ldrb	r2, [r3, #0]
 80026f2:	4b0d      	ldr	r3, [pc, #52]	; (8002728 <runDirections+0xb0>)
 80026f4:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, TX_BUFFER, 1, 100);
 80026f6:	2364      	movs	r3, #100	; 0x64
 80026f8:	2201      	movs	r2, #1
 80026fa:	490b      	ldr	r1, [pc, #44]	; (8002728 <runDirections+0xb0>)
 80026fc:	480b      	ldr	r0, [pc, #44]	; (800272c <runDirections+0xb4>)
 80026fe:	f005 fac0 	bl	8007c82 <HAL_UART_Transmit>
	if (movimientoFlag == 1) {
 8002702:	4b0b      	ldr	r3, [pc, #44]	; (8002730 <runDirections+0xb8>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2b01      	cmp	r3, #1
 8002708:	d107      	bne.n	800271a <runDirections+0xa2>
		m++;
 800270a:	4b06      	ldr	r3, [pc, #24]	; (8002724 <runDirections+0xac>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	3301      	adds	r3, #1
 8002710:	4a04      	ldr	r2, [pc, #16]	; (8002724 <runDirections+0xac>)
 8002712:	6013      	str	r3, [r2, #0]
		movimientoFlag = 0;
 8002714:	4b06      	ldr	r3, [pc, #24]	; (8002730 <runDirections+0xb8>)
 8002716:	2200      	movs	r2, #0
 8002718:	601a      	str	r2, [r3, #0]
	}
}
 800271a:	bf00      	nop
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	20002348 	.word	0x20002348
 8002728:	2000233c 	.word	0x2000233c
 800272c:	200002bc 	.word	0x200002bc
 8002730:	20002358 	.word	0x20002358

08002734 <addDirection>:

void addDirection(int x, int y) {
 8002734:	b590      	push	{r4, r7, lr}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
	if (Map[x][y].Lados[direcciones[ADELANTE]] != 1) {
 800273e:	4b60      	ldr	r3, [pc, #384]	; (80028c0 <addDirection+0x18c>)
 8002740:	6818      	ldr	r0, [r3, #0]
 8002742:	4c60      	ldr	r4, [pc, #384]	; (80028c4 <addDirection+0x190>)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	6879      	ldr	r1, [r7, #4]
 8002748:	461a      	mov	r2, r3
 800274a:	00d2      	lsls	r2, r2, #3
 800274c:	1ad2      	subs	r2, r2, r3
 800274e:	460b      	mov	r3, r1
 8002750:	00db      	lsls	r3, r3, #3
 8002752:	1a5b      	subs	r3, r3, r1
 8002754:	011b      	lsls	r3, r3, #4
 8002756:	4413      	add	r3, r2
 8002758:	4403      	add	r3, r0
 800275a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d00b      	beq.n	800277a <addDirection+0x46>
		//Map[x][y].Lados[direcciones[ADELANTE]] = 2;
		moveNode(direcciones[ADELANTE], &actual);
 8002762:	4b57      	ldr	r3, [pc, #348]	; (80028c0 <addDirection+0x18c>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4958      	ldr	r1, [pc, #352]	; (80028c8 <addDirection+0x194>)
 8002768:	4618      	mov	r0, r3
 800276a:	f001 fb9f 	bl	8003eac <moveNode>
		directions[directionsSize] = 'a';
 800276e:	4b57      	ldr	r3, [pc, #348]	; (80028cc <addDirection+0x198>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a57      	ldr	r2, [pc, #348]	; (80028d0 <addDirection+0x19c>)
 8002774:	2161      	movs	r1, #97	; 0x61
 8002776:	54d1      	strb	r1, [r2, r3]
 8002778:	e042      	b.n	8002800 <addDirection+0xcc>
	} else if (Map[x][y].Lados[direcciones[IZQUIERDA]] != 1) {
 800277a:	4b51      	ldr	r3, [pc, #324]	; (80028c0 <addDirection+0x18c>)
 800277c:	6858      	ldr	r0, [r3, #4]
 800277e:	4c51      	ldr	r4, [pc, #324]	; (80028c4 <addDirection+0x190>)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	6879      	ldr	r1, [r7, #4]
 8002784:	461a      	mov	r2, r3
 8002786:	00d2      	lsls	r2, r2, #3
 8002788:	1ad2      	subs	r2, r2, r3
 800278a:	460b      	mov	r3, r1
 800278c:	00db      	lsls	r3, r3, #3
 800278e:	1a5b      	subs	r3, r3, r1
 8002790:	011b      	lsls	r3, r3, #4
 8002792:	4413      	add	r3, r2
 8002794:	4403      	add	r3, r0
 8002796:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800279a:	2b01      	cmp	r3, #1
 800279c:	d00f      	beq.n	80027be <addDirection+0x8a>
		//Map[x][y].Lados[direcciones[IZQUIERDA]] = 2;
		moveNode(direcciones[IZQUIERDA], &actual);
 800279e:	4b48      	ldr	r3, [pc, #288]	; (80028c0 <addDirection+0x18c>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	4949      	ldr	r1, [pc, #292]	; (80028c8 <addDirection+0x194>)
 80027a4:	4618      	mov	r0, r3
 80027a6:	f001 fb81 	bl	8003eac <moveNode>
		rotateAxis(IZQUIERDA, direcciones);
 80027aa:	4945      	ldr	r1, [pc, #276]	; (80028c0 <addDirection+0x18c>)
 80027ac:	2001      	movs	r0, #1
 80027ae:	f000 ffa1 	bl	80036f4 <rotateAxis>
		directions[directionsSize] = 'i';
 80027b2:	4b46      	ldr	r3, [pc, #280]	; (80028cc <addDirection+0x198>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a46      	ldr	r2, [pc, #280]	; (80028d0 <addDirection+0x19c>)
 80027b8:	2169      	movs	r1, #105	; 0x69
 80027ba:	54d1      	strb	r1, [r2, r3]
 80027bc:	e020      	b.n	8002800 <addDirection+0xcc>
	} else if (Map[x][y].Lados[direcciones[DERECHA]] != 1) {
 80027be:	4b40      	ldr	r3, [pc, #256]	; (80028c0 <addDirection+0x18c>)
 80027c0:	68d8      	ldr	r0, [r3, #12]
 80027c2:	4c40      	ldr	r4, [pc, #256]	; (80028c4 <addDirection+0x190>)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	6879      	ldr	r1, [r7, #4]
 80027c8:	461a      	mov	r2, r3
 80027ca:	00d2      	lsls	r2, r2, #3
 80027cc:	1ad2      	subs	r2, r2, r3
 80027ce:	460b      	mov	r3, r1
 80027d0:	00db      	lsls	r3, r3, #3
 80027d2:	1a5b      	subs	r3, r3, r1
 80027d4:	011b      	lsls	r3, r3, #4
 80027d6:	4413      	add	r3, r2
 80027d8:	4403      	add	r3, r0
 80027da:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d00e      	beq.n	8002800 <addDirection+0xcc>
		//Map[x][y].Lados[direcciones[DERECHA]] = 2;
		moveNode(direcciones[DERECHA], &actual);
 80027e2:	4b37      	ldr	r3, [pc, #220]	; (80028c0 <addDirection+0x18c>)
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	4938      	ldr	r1, [pc, #224]	; (80028c8 <addDirection+0x194>)
 80027e8:	4618      	mov	r0, r3
 80027ea:	f001 fb5f 	bl	8003eac <moveNode>
		rotateAxis(DERECHA, direcciones);
 80027ee:	4934      	ldr	r1, [pc, #208]	; (80028c0 <addDirection+0x18c>)
 80027f0:	2003      	movs	r0, #3
 80027f2:	f000 ff7f 	bl	80036f4 <rotateAxis>
		directions[directionsSize] = 'd';
 80027f6:	4b35      	ldr	r3, [pc, #212]	; (80028cc <addDirection+0x198>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a35      	ldr	r2, [pc, #212]	; (80028d0 <addDirection+0x19c>)
 80027fc:	2164      	movs	r1, #100	; 0x64
 80027fe:	54d1      	strb	r1, [r2, r3]
	}
	intUartSend(Map[x][y].Lados[direcciones[ADELANTE]]);
 8002800:	4b2f      	ldr	r3, [pc, #188]	; (80028c0 <addDirection+0x18c>)
 8002802:	6818      	ldr	r0, [r3, #0]
 8002804:	4c2f      	ldr	r4, [pc, #188]	; (80028c4 <addDirection+0x190>)
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	6879      	ldr	r1, [r7, #4]
 800280a:	461a      	mov	r2, r3
 800280c:	00d2      	lsls	r2, r2, #3
 800280e:	1ad2      	subs	r2, r2, r3
 8002810:	460b      	mov	r3, r1
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	1a5b      	subs	r3, r3, r1
 8002816:	011b      	lsls	r3, r3, #4
 8002818:	4413      	add	r3, r2
 800281a:	4403      	add	r3, r0
 800281c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8002820:	4618      	mov	r0, r3
 8002822:	f7fe fa5b 	bl	8000cdc <__aeabi_i2f>
 8002826:	4603      	mov	r3, r0
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff f919 	bl	8001a60 <intUartSend>
	intUartSend(Map[x][y].Lados[direcciones[IZQUIERDA]]);
 800282e:	4b24      	ldr	r3, [pc, #144]	; (80028c0 <addDirection+0x18c>)
 8002830:	6858      	ldr	r0, [r3, #4]
 8002832:	4c24      	ldr	r4, [pc, #144]	; (80028c4 <addDirection+0x190>)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	6879      	ldr	r1, [r7, #4]
 8002838:	461a      	mov	r2, r3
 800283a:	00d2      	lsls	r2, r2, #3
 800283c:	1ad2      	subs	r2, r2, r3
 800283e:	460b      	mov	r3, r1
 8002840:	00db      	lsls	r3, r3, #3
 8002842:	1a5b      	subs	r3, r3, r1
 8002844:	011b      	lsls	r3, r3, #4
 8002846:	4413      	add	r3, r2
 8002848:	4403      	add	r3, r0
 800284a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800284e:	4618      	mov	r0, r3
 8002850:	f7fe fa44 	bl	8000cdc <__aeabi_i2f>
 8002854:	4603      	mov	r3, r0
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff f902 	bl	8001a60 <intUartSend>
	intUartSend(Map[x][y].Lados[direcciones[DERECHA]]);
 800285c:	4b18      	ldr	r3, [pc, #96]	; (80028c0 <addDirection+0x18c>)
 800285e:	68d8      	ldr	r0, [r3, #12]
 8002860:	4c18      	ldr	r4, [pc, #96]	; (80028c4 <addDirection+0x190>)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	6879      	ldr	r1, [r7, #4]
 8002866:	461a      	mov	r2, r3
 8002868:	00d2      	lsls	r2, r2, #3
 800286a:	1ad2      	subs	r2, r2, r3
 800286c:	460b      	mov	r3, r1
 800286e:	00db      	lsls	r3, r3, #3
 8002870:	1a5b      	subs	r3, r3, r1
 8002872:	011b      	lsls	r3, r3, #4
 8002874:	4413      	add	r3, r2
 8002876:	4403      	add	r3, r0
 8002878:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800287c:	4618      	mov	r0, r3
 800287e:	f7fe fa2d 	bl	8000cdc <__aeabi_i2f>
 8002882:	4603      	mov	r3, r0
 8002884:	4618      	mov	r0, r3
 8002886:	f7ff f8eb 	bl	8001a60 <intUartSend>
	TX_BUFFER[0] = 'D';
 800288a:	4b12      	ldr	r3, [pc, #72]	; (80028d4 <addDirection+0x1a0>)
 800288c:	2244      	movs	r2, #68	; 0x44
 800288e:	701a      	strb	r2, [r3, #0]
	TX_BUFFER[1] = directions[directionsSize];
 8002890:	4b0e      	ldr	r3, [pc, #56]	; (80028cc <addDirection+0x198>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a0e      	ldr	r2, [pc, #56]	; (80028d0 <addDirection+0x19c>)
 8002896:	5cd2      	ldrb	r2, [r2, r3]
 8002898:	4b0e      	ldr	r3, [pc, #56]	; (80028d4 <addDirection+0x1a0>)
 800289a:	705a      	strb	r2, [r3, #1]
	TX_BUFFER[2] = '\n';
 800289c:	4b0d      	ldr	r3, [pc, #52]	; (80028d4 <addDirection+0x1a0>)
 800289e:	220a      	movs	r2, #10
 80028a0:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(&huart3, TX_BUFFER, 3, 100);
 80028a2:	2364      	movs	r3, #100	; 0x64
 80028a4:	2203      	movs	r2, #3
 80028a6:	490b      	ldr	r1, [pc, #44]	; (80028d4 <addDirection+0x1a0>)
 80028a8:	480b      	ldr	r0, [pc, #44]	; (80028d8 <addDirection+0x1a4>)
 80028aa:	f005 f9ea 	bl	8007c82 <HAL_UART_Transmit>
	directionsSize++;
 80028ae:	4b07      	ldr	r3, [pc, #28]	; (80028cc <addDirection+0x198>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	3301      	adds	r3, #1
 80028b4:	4a05      	ldr	r2, [pc, #20]	; (80028cc <addDirection+0x198>)
 80028b6:	6013      	str	r3, [r2, #0]
}
 80028b8:	bf00      	nop
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd90      	pop	{r4, r7, pc}
 80028c0:	20002310 	.word	0x20002310
 80028c4:	2000249c 	.word	0x2000249c
 80028c8:	2000248c 	.word	0x2000248c
 80028cc:	2000234c 	.word	0x2000234c
 80028d0:	200023a4 	.word	0x200023a4
 80028d4:	2000233c 	.word	0x2000233c
 80028d8:	200002bc 	.word	0x200002bc

080028dc <ChooseNextNode>:

int ChooseNextNode(int x, int y) {
 80028dc:	b590      	push	{r4, r7, lr}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
	if (Map[x][y].Lados[direcciones[ADELANTE]] == 0) {
 80028e6:	4b63      	ldr	r3, [pc, #396]	; (8002a74 <ChooseNextNode+0x198>)
 80028e8:	6818      	ldr	r0, [r3, #0]
 80028ea:	4c63      	ldr	r4, [pc, #396]	; (8002a78 <ChooseNextNode+0x19c>)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	6879      	ldr	r1, [r7, #4]
 80028f0:	461a      	mov	r2, r3
 80028f2:	00d2      	lsls	r2, r2, #3
 80028f4:	1ad2      	subs	r2, r2, r3
 80028f6:	460b      	mov	r3, r1
 80028f8:	00db      	lsls	r3, r3, #3
 80028fa:	1a5b      	subs	r3, r3, r1
 80028fc:	011b      	lsls	r3, r3, #4
 80028fe:	4413      	add	r3, r2
 8002900:	4403      	add	r3, r0
 8002902:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8002906:	2b00      	cmp	r3, #0
 8002908:	f040 80c0 	bne.w	8002a8c <ChooseNextNode+0x1b0>
		TX_BUFFER[0] = 'A';
 800290c:	4b5b      	ldr	r3, [pc, #364]	; (8002a7c <ChooseNextNode+0x1a0>)
 800290e:	2241      	movs	r2, #65	; 0x41
 8002910:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = '\n';
 8002912:	4b5a      	ldr	r3, [pc, #360]	; (8002a7c <ChooseNextNode+0x1a0>)
 8002914:	220a      	movs	r2, #10
 8002916:	705a      	strb	r2, [r3, #1]
		HAL_UART_Transmit(&huart3, TX_BUFFER, 2, 100);
 8002918:	2364      	movs	r3, #100	; 0x64
 800291a:	2202      	movs	r2, #2
 800291c:	4957      	ldr	r1, [pc, #348]	; (8002a7c <ChooseNextNode+0x1a0>)
 800291e:	4858      	ldr	r0, [pc, #352]	; (8002a80 <ChooseNextNode+0x1a4>)
 8002920:	f005 f9af 	bl	8007c82 <HAL_UART_Transmit>
		Map[x][y].Lados[direcciones[ADELANTE]] = 2;
 8002924:	4b53      	ldr	r3, [pc, #332]	; (8002a74 <ChooseNextNode+0x198>)
 8002926:	6818      	ldr	r0, [r3, #0]
 8002928:	4c53      	ldr	r4, [pc, #332]	; (8002a78 <ChooseNextNode+0x19c>)
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	6879      	ldr	r1, [r7, #4]
 800292e:	461a      	mov	r2, r3
 8002930:	00d2      	lsls	r2, r2, #3
 8002932:	1ad2      	subs	r2, r2, r3
 8002934:	460b      	mov	r3, r1
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	1a5b      	subs	r3, r3, r1
 800293a:	011b      	lsls	r3, r3, #4
 800293c:	4413      	add	r3, r2
 800293e:	4403      	add	r3, r0
 8002940:	2202      	movs	r2, #2
 8002942:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
		/*if (Map[x][y].visitado > 1) {
		 EliminateNode(&Map[actual.x][actual.y], &Map[last.x][last.y],
		 direcciones[ATRAS]);
		 intUartSend(5000);
		 }*/
		if (Map[x][y].Lados[direcciones[ATRAS]] != 1)
 8002946:	4b4b      	ldr	r3, [pc, #300]	; (8002a74 <ChooseNextNode+0x198>)
 8002948:	6898      	ldr	r0, [r3, #8]
 800294a:	4c4b      	ldr	r4, [pc, #300]	; (8002a78 <ChooseNextNode+0x19c>)
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	6879      	ldr	r1, [r7, #4]
 8002950:	461a      	mov	r2, r3
 8002952:	00d2      	lsls	r2, r2, #3
 8002954:	1ad2      	subs	r2, r2, r3
 8002956:	460b      	mov	r3, r1
 8002958:	00db      	lsls	r3, r3, #3
 800295a:	1a5b      	subs	r3, r3, r1
 800295c:	011b      	lsls	r3, r3, #4
 800295e:	4413      	add	r3, r2
 8002960:	4403      	add	r3, r0
 8002962:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8002966:	2b01      	cmp	r3, #1
 8002968:	d010      	beq.n	800298c <ChooseNextNode+0xb0>
			Map[x][y].Lados[direcciones[ATRAS]] = 2;
 800296a:	4b42      	ldr	r3, [pc, #264]	; (8002a74 <ChooseNextNode+0x198>)
 800296c:	6898      	ldr	r0, [r3, #8]
 800296e:	4c42      	ldr	r4, [pc, #264]	; (8002a78 <ChooseNextNode+0x19c>)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	6879      	ldr	r1, [r7, #4]
 8002974:	461a      	mov	r2, r3
 8002976:	00d2      	lsls	r2, r2, #3
 8002978:	1ad2      	subs	r2, r2, r3
 800297a:	460b      	mov	r3, r1
 800297c:	00db      	lsls	r3, r3, #3
 800297e:	1a5b      	subs	r3, r3, r1
 8002980:	011b      	lsls	r3, r3, #4
 8002982:	4413      	add	r3, r2
 8002984:	4403      	add	r3, r0
 8002986:	2202      	movs	r2, #2
 8002988:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
		last.x = actual.x;
 800298c:	4b3d      	ldr	r3, [pc, #244]	; (8002a84 <ChooseNextNode+0x1a8>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a3d      	ldr	r2, [pc, #244]	; (8002a88 <ChooseNextNode+0x1ac>)
 8002992:	6013      	str	r3, [r2, #0]
		last.y = actual.y;
 8002994:	4b3b      	ldr	r3, [pc, #236]	; (8002a84 <ChooseNextNode+0x1a8>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	4a3b      	ldr	r2, [pc, #236]	; (8002a88 <ChooseNextNode+0x1ac>)
 800299a:	6053      	str	r3, [r2, #4]
		intUartSend(Map[actual.x][actual.y].Lados[DERECHA]);
 800299c:	4b39      	ldr	r3, [pc, #228]	; (8002a84 <ChooseNextNode+0x1a8>)
 800299e:	6819      	ldr	r1, [r3, #0]
 80029a0:	4b38      	ldr	r3, [pc, #224]	; (8002a84 <ChooseNextNode+0x1a8>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	4834      	ldr	r0, [pc, #208]	; (8002a78 <ChooseNextNode+0x19c>)
 80029a6:	461a      	mov	r2, r3
 80029a8:	00d2      	lsls	r2, r2, #3
 80029aa:	1ad2      	subs	r2, r2, r3
 80029ac:	0093      	lsls	r3, r2, #2
 80029ae:	461a      	mov	r2, r3
 80029b0:	460b      	mov	r3, r1
 80029b2:	00db      	lsls	r3, r3, #3
 80029b4:	1a5b      	subs	r3, r3, r1
 80029b6:	019b      	lsls	r3, r3, #6
 80029b8:	4413      	add	r3, r2
 80029ba:	4403      	add	r3, r0
 80029bc:	330c      	adds	r3, #12
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7fe f98b 	bl	8000cdc <__aeabi_i2f>
 80029c6:	4603      	mov	r3, r0
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7ff f849 	bl	8001a60 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[ADELANTE]);
 80029ce:	4b2d      	ldr	r3, [pc, #180]	; (8002a84 <ChooseNextNode+0x1a8>)
 80029d0:	6819      	ldr	r1, [r3, #0]
 80029d2:	4b2c      	ldr	r3, [pc, #176]	; (8002a84 <ChooseNextNode+0x1a8>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	4828      	ldr	r0, [pc, #160]	; (8002a78 <ChooseNextNode+0x19c>)
 80029d8:	461a      	mov	r2, r3
 80029da:	00d2      	lsls	r2, r2, #3
 80029dc:	1ad2      	subs	r2, r2, r3
 80029de:	0093      	lsls	r3, r2, #2
 80029e0:	461a      	mov	r2, r3
 80029e2:	460b      	mov	r3, r1
 80029e4:	00db      	lsls	r3, r3, #3
 80029e6:	1a5b      	subs	r3, r3, r1
 80029e8:	019b      	lsls	r3, r3, #6
 80029ea:	4413      	add	r3, r2
 80029ec:	4403      	add	r3, r0
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7fe f973 	bl	8000cdc <__aeabi_i2f>
 80029f6:	4603      	mov	r3, r0
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7ff f831 	bl	8001a60 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[IZQUIERDA]);
 80029fe:	4b21      	ldr	r3, [pc, #132]	; (8002a84 <ChooseNextNode+0x1a8>)
 8002a00:	6819      	ldr	r1, [r3, #0]
 8002a02:	4b20      	ldr	r3, [pc, #128]	; (8002a84 <ChooseNextNode+0x1a8>)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	481c      	ldr	r0, [pc, #112]	; (8002a78 <ChooseNextNode+0x19c>)
 8002a08:	461a      	mov	r2, r3
 8002a0a:	00d2      	lsls	r2, r2, #3
 8002a0c:	1ad2      	subs	r2, r2, r3
 8002a0e:	0093      	lsls	r3, r2, #2
 8002a10:	461a      	mov	r2, r3
 8002a12:	460b      	mov	r3, r1
 8002a14:	00db      	lsls	r3, r3, #3
 8002a16:	1a5b      	subs	r3, r3, r1
 8002a18:	019b      	lsls	r3, r3, #6
 8002a1a:	4413      	add	r3, r2
 8002a1c:	4403      	add	r3, r0
 8002a1e:	3304      	adds	r3, #4
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7fe f95a 	bl	8000cdc <__aeabi_i2f>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7ff f818 	bl	8001a60 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[ATRAS]);
 8002a30:	4b14      	ldr	r3, [pc, #80]	; (8002a84 <ChooseNextNode+0x1a8>)
 8002a32:	6819      	ldr	r1, [r3, #0]
 8002a34:	4b13      	ldr	r3, [pc, #76]	; (8002a84 <ChooseNextNode+0x1a8>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	480f      	ldr	r0, [pc, #60]	; (8002a78 <ChooseNextNode+0x19c>)
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	00d2      	lsls	r2, r2, #3
 8002a3e:	1ad2      	subs	r2, r2, r3
 8002a40:	0093      	lsls	r3, r2, #2
 8002a42:	461a      	mov	r2, r3
 8002a44:	460b      	mov	r3, r1
 8002a46:	00db      	lsls	r3, r3, #3
 8002a48:	1a5b      	subs	r3, r3, r1
 8002a4a:	019b      	lsls	r3, r3, #6
 8002a4c:	4413      	add	r3, r2
 8002a4e:	4403      	add	r3, r0
 8002a50:	3308      	adds	r3, #8
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7fe f941 	bl	8000cdc <__aeabi_i2f>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7fe ffff 	bl	8001a60 <intUartSend>
		moveNode(direcciones[ADELANTE], &actual);
 8002a62:	4b04      	ldr	r3, [pc, #16]	; (8002a74 <ChooseNextNode+0x198>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4907      	ldr	r1, [pc, #28]	; (8002a84 <ChooseNextNode+0x1a8>)
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f001 fa1f 	bl	8003eac <moveNode>
		return ADELANTE;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	e1cc      	b.n	8002e0c <ChooseNextNode+0x530>
 8002a72:	bf00      	nop
 8002a74:	20002310 	.word	0x20002310
 8002a78:	2000249c 	.word	0x2000249c
 8002a7c:	2000233c 	.word	0x2000233c
 8002a80:	200002bc 	.word	0x200002bc
 8002a84:	2000248c 	.word	0x2000248c
 8002a88:	20002494 	.word	0x20002494
	} else if (Map[x][y].Lados[direcciones[IZQUIERDA]] == 0) {
 8002a8c:	4b60      	ldr	r3, [pc, #384]	; (8002c10 <ChooseNextNode+0x334>)
 8002a8e:	6858      	ldr	r0, [r3, #4]
 8002a90:	4c60      	ldr	r4, [pc, #384]	; (8002c14 <ChooseNextNode+0x338>)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	6879      	ldr	r1, [r7, #4]
 8002a96:	461a      	mov	r2, r3
 8002a98:	00d2      	lsls	r2, r2, #3
 8002a9a:	1ad2      	subs	r2, r2, r3
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	00db      	lsls	r3, r3, #3
 8002aa0:	1a5b      	subs	r3, r3, r1
 8002aa2:	011b      	lsls	r3, r3, #4
 8002aa4:	4413      	add	r3, r2
 8002aa6:	4403      	add	r3, r0
 8002aa8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	f040 80bb 	bne.w	8002c28 <ChooseNextNode+0x34c>
		TX_BUFFER[0] = 'I';
 8002ab2:	4b59      	ldr	r3, [pc, #356]	; (8002c18 <ChooseNextNode+0x33c>)
 8002ab4:	2249      	movs	r2, #73	; 0x49
 8002ab6:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = '\n';
 8002ab8:	4b57      	ldr	r3, [pc, #348]	; (8002c18 <ChooseNextNode+0x33c>)
 8002aba:	220a      	movs	r2, #10
 8002abc:	705a      	strb	r2, [r3, #1]
		HAL_UART_Transmit(&huart3, TX_BUFFER, 2, 100);
 8002abe:	2364      	movs	r3, #100	; 0x64
 8002ac0:	2202      	movs	r2, #2
 8002ac2:	4955      	ldr	r1, [pc, #340]	; (8002c18 <ChooseNextNode+0x33c>)
 8002ac4:	4855      	ldr	r0, [pc, #340]	; (8002c1c <ChooseNextNode+0x340>)
 8002ac6:	f005 f8dc 	bl	8007c82 <HAL_UART_Transmit>
		Map[x][y].Lados[direcciones[IZQUIERDA]] = 2;
 8002aca:	4b51      	ldr	r3, [pc, #324]	; (8002c10 <ChooseNextNode+0x334>)
 8002acc:	6858      	ldr	r0, [r3, #4]
 8002ace:	4c51      	ldr	r4, [pc, #324]	; (8002c14 <ChooseNextNode+0x338>)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	6879      	ldr	r1, [r7, #4]
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	00d2      	lsls	r2, r2, #3
 8002ad8:	1ad2      	subs	r2, r2, r3
 8002ada:	460b      	mov	r3, r1
 8002adc:	00db      	lsls	r3, r3, #3
 8002ade:	1a5b      	subs	r3, r3, r1
 8002ae0:	011b      	lsls	r3, r3, #4
 8002ae2:	4413      	add	r3, r2
 8002ae4:	4403      	add	r3, r0
 8002ae6:	2202      	movs	r2, #2
 8002ae8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
		/*if (Map[x][y].visitado > 1) {
		 EliminateNode(&Map[actual.x][actual.y], &Map[last.x][last.y],
		 direcciones[ATRAS]);
		 intUartSend(5000);
		 }*/
		if (Map[x][y].Lados[direcciones[ATRAS]] != 1) {
 8002aec:	4b48      	ldr	r3, [pc, #288]	; (8002c10 <ChooseNextNode+0x334>)
 8002aee:	6898      	ldr	r0, [r3, #8]
 8002af0:	4c48      	ldr	r4, [pc, #288]	; (8002c14 <ChooseNextNode+0x338>)
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	6879      	ldr	r1, [r7, #4]
 8002af6:	461a      	mov	r2, r3
 8002af8:	00d2      	lsls	r2, r2, #3
 8002afa:	1ad2      	subs	r2, r2, r3
 8002afc:	460b      	mov	r3, r1
 8002afe:	00db      	lsls	r3, r3, #3
 8002b00:	1a5b      	subs	r3, r3, r1
 8002b02:	011b      	lsls	r3, r3, #4
 8002b04:	4413      	add	r3, r2
 8002b06:	4403      	add	r3, r0
 8002b08:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d010      	beq.n	8002b32 <ChooseNextNode+0x256>
		 Map[x][y].Lados[direcciones[ATRAS]] = 2;
 8002b10:	4b3f      	ldr	r3, [pc, #252]	; (8002c10 <ChooseNextNode+0x334>)
 8002b12:	6898      	ldr	r0, [r3, #8]
 8002b14:	4c3f      	ldr	r4, [pc, #252]	; (8002c14 <ChooseNextNode+0x338>)
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	6879      	ldr	r1, [r7, #4]
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	00d2      	lsls	r2, r2, #3
 8002b1e:	1ad2      	subs	r2, r2, r3
 8002b20:	460b      	mov	r3, r1
 8002b22:	00db      	lsls	r3, r3, #3
 8002b24:	1a5b      	subs	r3, r3, r1
 8002b26:	011b      	lsls	r3, r3, #4
 8002b28:	4413      	add	r3, r2
 8002b2a:	4403      	add	r3, r0
 8002b2c:	2202      	movs	r2, #2
 8002b2e:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
		 }
		last.x = actual.x;
 8002b32:	4b3b      	ldr	r3, [pc, #236]	; (8002c20 <ChooseNextNode+0x344>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a3b      	ldr	r2, [pc, #236]	; (8002c24 <ChooseNextNode+0x348>)
 8002b38:	6013      	str	r3, [r2, #0]
		last.y = actual.y;
 8002b3a:	4b39      	ldr	r3, [pc, #228]	; (8002c20 <ChooseNextNode+0x344>)
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	4a39      	ldr	r2, [pc, #228]	; (8002c24 <ChooseNextNode+0x348>)
 8002b40:	6053      	str	r3, [r2, #4]
		intUartSend(Map[x][y].Lados[DERECHA]);
 8002b42:	4834      	ldr	r0, [pc, #208]	; (8002c14 <ChooseNextNode+0x338>)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	6879      	ldr	r1, [r7, #4]
 8002b48:	461a      	mov	r2, r3
 8002b4a:	00d2      	lsls	r2, r2, #3
 8002b4c:	1ad2      	subs	r2, r2, r3
 8002b4e:	0093      	lsls	r3, r2, #2
 8002b50:	461a      	mov	r2, r3
 8002b52:	460b      	mov	r3, r1
 8002b54:	00db      	lsls	r3, r3, #3
 8002b56:	1a5b      	subs	r3, r3, r1
 8002b58:	019b      	lsls	r3, r3, #6
 8002b5a:	4413      	add	r3, r2
 8002b5c:	4403      	add	r3, r0
 8002b5e:	330c      	adds	r3, #12
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7fe f8ba 	bl	8000cdc <__aeabi_i2f>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7fe ff78 	bl	8001a60 <intUartSend>
		intUartSend(Map[x][y].Lados[ADELANTE]);
 8002b70:	4828      	ldr	r0, [pc, #160]	; (8002c14 <ChooseNextNode+0x338>)
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	6879      	ldr	r1, [r7, #4]
 8002b76:	461a      	mov	r2, r3
 8002b78:	00d2      	lsls	r2, r2, #3
 8002b7a:	1ad2      	subs	r2, r2, r3
 8002b7c:	0093      	lsls	r3, r2, #2
 8002b7e:	461a      	mov	r2, r3
 8002b80:	460b      	mov	r3, r1
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	1a5b      	subs	r3, r3, r1
 8002b86:	019b      	lsls	r3, r3, #6
 8002b88:	4413      	add	r3, r2
 8002b8a:	4403      	add	r3, r0
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7fe f8a4 	bl	8000cdc <__aeabi_i2f>
 8002b94:	4603      	mov	r3, r0
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7fe ff62 	bl	8001a60 <intUartSend>
		intUartSend(Map[x][y].Lados[IZQUIERDA]);
 8002b9c:	481d      	ldr	r0, [pc, #116]	; (8002c14 <ChooseNextNode+0x338>)
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	6879      	ldr	r1, [r7, #4]
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	00d2      	lsls	r2, r2, #3
 8002ba6:	1ad2      	subs	r2, r2, r3
 8002ba8:	0093      	lsls	r3, r2, #2
 8002baa:	461a      	mov	r2, r3
 8002bac:	460b      	mov	r3, r1
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	1a5b      	subs	r3, r3, r1
 8002bb2:	019b      	lsls	r3, r3, #6
 8002bb4:	4413      	add	r3, r2
 8002bb6:	4403      	add	r3, r0
 8002bb8:	3304      	adds	r3, #4
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7fe f88d 	bl	8000cdc <__aeabi_i2f>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7fe ff4b 	bl	8001a60 <intUartSend>
		intUartSend(Map[x][y].Lados[ATRAS]);
 8002bca:	4812      	ldr	r0, [pc, #72]	; (8002c14 <ChooseNextNode+0x338>)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	6879      	ldr	r1, [r7, #4]
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	00d2      	lsls	r2, r2, #3
 8002bd4:	1ad2      	subs	r2, r2, r3
 8002bd6:	0093      	lsls	r3, r2, #2
 8002bd8:	461a      	mov	r2, r3
 8002bda:	460b      	mov	r3, r1
 8002bdc:	00db      	lsls	r3, r3, #3
 8002bde:	1a5b      	subs	r3, r3, r1
 8002be0:	019b      	lsls	r3, r3, #6
 8002be2:	4413      	add	r3, r2
 8002be4:	4403      	add	r3, r0
 8002be6:	3308      	adds	r3, #8
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7fe f876 	bl	8000cdc <__aeabi_i2f>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7fe ff34 	bl	8001a60 <intUartSend>
		moveNode(direcciones[IZQUIERDA], &actual);
 8002bf8:	4b05      	ldr	r3, [pc, #20]	; (8002c10 <ChooseNextNode+0x334>)
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	4908      	ldr	r1, [pc, #32]	; (8002c20 <ChooseNextNode+0x344>)
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f001 f954 	bl	8003eac <moveNode>
		rotateAxis(IZQUIERDA, direcciones);
 8002c04:	4902      	ldr	r1, [pc, #8]	; (8002c10 <ChooseNextNode+0x334>)
 8002c06:	2001      	movs	r0, #1
 8002c08:	f000 fd74 	bl	80036f4 <rotateAxis>
		return IZQUIERDA;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e0fd      	b.n	8002e0c <ChooseNextNode+0x530>
 8002c10:	20002310 	.word	0x20002310
 8002c14:	2000249c 	.word	0x2000249c
 8002c18:	2000233c 	.word	0x2000233c
 8002c1c:	200002bc 	.word	0x200002bc
 8002c20:	2000248c 	.word	0x2000248c
 8002c24:	20002494 	.word	0x20002494
	} else if (Map[x][y].Lados[direcciones[DERECHA]] == 0) {
 8002c28:	4b7a      	ldr	r3, [pc, #488]	; (8002e14 <ChooseNextNode+0x538>)
 8002c2a:	68d8      	ldr	r0, [r3, #12]
 8002c2c:	4c7a      	ldr	r4, [pc, #488]	; (8002e18 <ChooseNextNode+0x53c>)
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	6879      	ldr	r1, [r7, #4]
 8002c32:	461a      	mov	r2, r3
 8002c34:	00d2      	lsls	r2, r2, #3
 8002c36:	1ad2      	subs	r2, r2, r3
 8002c38:	460b      	mov	r3, r1
 8002c3a:	00db      	lsls	r3, r3, #3
 8002c3c:	1a5b      	subs	r3, r3, r1
 8002c3e:	011b      	lsls	r3, r3, #4
 8002c40:	4413      	add	r3, r2
 8002c42:	4403      	add	r3, r0
 8002c44:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	f040 80ce 	bne.w	8002dea <ChooseNextNode+0x50e>
		TX_BUFFER[0] = 'D';
 8002c4e:	4b73      	ldr	r3, [pc, #460]	; (8002e1c <ChooseNextNode+0x540>)
 8002c50:	2244      	movs	r2, #68	; 0x44
 8002c52:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = '\n';
 8002c54:	4b71      	ldr	r3, [pc, #452]	; (8002e1c <ChooseNextNode+0x540>)
 8002c56:	220a      	movs	r2, #10
 8002c58:	705a      	strb	r2, [r3, #1]
		HAL_UART_Transmit(&huart3, TX_BUFFER, 2, 100);
 8002c5a:	2364      	movs	r3, #100	; 0x64
 8002c5c:	2202      	movs	r2, #2
 8002c5e:	496f      	ldr	r1, [pc, #444]	; (8002e1c <ChooseNextNode+0x540>)
 8002c60:	486f      	ldr	r0, [pc, #444]	; (8002e20 <ChooseNextNode+0x544>)
 8002c62:	f005 f80e 	bl	8007c82 <HAL_UART_Transmit>
		/*if (Map[x][y].visitado > 1) {
		 EliminateNode(&Map[actual.x][actual.y], &Map[last.x][last.y],
		 direcciones[ATRAS]);
		 intUartSend(5000);
		 }*/
		Map[x][y].Lados[direcciones[DERECHA]] = 2;
 8002c66:	4b6b      	ldr	r3, [pc, #428]	; (8002e14 <ChooseNextNode+0x538>)
 8002c68:	68d8      	ldr	r0, [r3, #12]
 8002c6a:	4c6b      	ldr	r4, [pc, #428]	; (8002e18 <ChooseNextNode+0x53c>)
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	6879      	ldr	r1, [r7, #4]
 8002c70:	461a      	mov	r2, r3
 8002c72:	00d2      	lsls	r2, r2, #3
 8002c74:	1ad2      	subs	r2, r2, r3
 8002c76:	460b      	mov	r3, r1
 8002c78:	00db      	lsls	r3, r3, #3
 8002c7a:	1a5b      	subs	r3, r3, r1
 8002c7c:	011b      	lsls	r3, r3, #4
 8002c7e:	4413      	add	r3, r2
 8002c80:	4403      	add	r3, r0
 8002c82:	2202      	movs	r2, #2
 8002c84:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
		if (Map[x][y].Lados[direcciones[ATRAS]] != 1) {
 8002c88:	4b62      	ldr	r3, [pc, #392]	; (8002e14 <ChooseNextNode+0x538>)
 8002c8a:	6898      	ldr	r0, [r3, #8]
 8002c8c:	4c62      	ldr	r4, [pc, #392]	; (8002e18 <ChooseNextNode+0x53c>)
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	6879      	ldr	r1, [r7, #4]
 8002c92:	461a      	mov	r2, r3
 8002c94:	00d2      	lsls	r2, r2, #3
 8002c96:	1ad2      	subs	r2, r2, r3
 8002c98:	460b      	mov	r3, r1
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	1a5b      	subs	r3, r3, r1
 8002c9e:	011b      	lsls	r3, r3, #4
 8002ca0:	4413      	add	r3, r2
 8002ca2:	4403      	add	r3, r0
 8002ca4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d027      	beq.n	8002cfc <ChooseNextNode+0x420>
		 intUartSend(Map[x][y].Lados[direcciones[ATRAS]]);
 8002cac:	4b59      	ldr	r3, [pc, #356]	; (8002e14 <ChooseNextNode+0x538>)
 8002cae:	6898      	ldr	r0, [r3, #8]
 8002cb0:	4c59      	ldr	r4, [pc, #356]	; (8002e18 <ChooseNextNode+0x53c>)
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	6879      	ldr	r1, [r7, #4]
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	00d2      	lsls	r2, r2, #3
 8002cba:	1ad2      	subs	r2, r2, r3
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	00db      	lsls	r3, r3, #3
 8002cc0:	1a5b      	subs	r3, r3, r1
 8002cc2:	011b      	lsls	r3, r3, #4
 8002cc4:	4413      	add	r3, r2
 8002cc6:	4403      	add	r3, r0
 8002cc8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7fe f805 	bl	8000cdc <__aeabi_i2f>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7fe fec3 	bl	8001a60 <intUartSend>
		 Map[x][y].Lados[direcciones[ATRAS]] = 2;
 8002cda:	4b4e      	ldr	r3, [pc, #312]	; (8002e14 <ChooseNextNode+0x538>)
 8002cdc:	6898      	ldr	r0, [r3, #8]
 8002cde:	4c4e      	ldr	r4, [pc, #312]	; (8002e18 <ChooseNextNode+0x53c>)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	6879      	ldr	r1, [r7, #4]
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	00d2      	lsls	r2, r2, #3
 8002ce8:	1ad2      	subs	r2, r2, r3
 8002cea:	460b      	mov	r3, r1
 8002cec:	00db      	lsls	r3, r3, #3
 8002cee:	1a5b      	subs	r3, r3, r1
 8002cf0:	011b      	lsls	r3, r3, #4
 8002cf2:	4413      	add	r3, r2
 8002cf4:	4403      	add	r3, r0
 8002cf6:	2202      	movs	r2, #2
 8002cf8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
		 }
		last.x = actual.x;
 8002cfc:	4b49      	ldr	r3, [pc, #292]	; (8002e24 <ChooseNextNode+0x548>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a49      	ldr	r2, [pc, #292]	; (8002e28 <ChooseNextNode+0x54c>)
 8002d02:	6013      	str	r3, [r2, #0]
		last.y = actual.y;
 8002d04:	4b47      	ldr	r3, [pc, #284]	; (8002e24 <ChooseNextNode+0x548>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	4a47      	ldr	r2, [pc, #284]	; (8002e28 <ChooseNextNode+0x54c>)
 8002d0a:	6053      	str	r3, [r2, #4]
		intUartSend(Map[actual.x][actual.y].Lados[DERECHA]);
 8002d0c:	4b45      	ldr	r3, [pc, #276]	; (8002e24 <ChooseNextNode+0x548>)
 8002d0e:	6819      	ldr	r1, [r3, #0]
 8002d10:	4b44      	ldr	r3, [pc, #272]	; (8002e24 <ChooseNextNode+0x548>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	4840      	ldr	r0, [pc, #256]	; (8002e18 <ChooseNextNode+0x53c>)
 8002d16:	461a      	mov	r2, r3
 8002d18:	00d2      	lsls	r2, r2, #3
 8002d1a:	1ad2      	subs	r2, r2, r3
 8002d1c:	0093      	lsls	r3, r2, #2
 8002d1e:	461a      	mov	r2, r3
 8002d20:	460b      	mov	r3, r1
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	1a5b      	subs	r3, r3, r1
 8002d26:	019b      	lsls	r3, r3, #6
 8002d28:	4413      	add	r3, r2
 8002d2a:	4403      	add	r3, r0
 8002d2c:	330c      	adds	r3, #12
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7fd ffd3 	bl	8000cdc <__aeabi_i2f>
 8002d36:	4603      	mov	r3, r0
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7fe fe91 	bl	8001a60 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[ADELANTE]);
 8002d3e:	4b39      	ldr	r3, [pc, #228]	; (8002e24 <ChooseNextNode+0x548>)
 8002d40:	6819      	ldr	r1, [r3, #0]
 8002d42:	4b38      	ldr	r3, [pc, #224]	; (8002e24 <ChooseNextNode+0x548>)
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	4834      	ldr	r0, [pc, #208]	; (8002e18 <ChooseNextNode+0x53c>)
 8002d48:	461a      	mov	r2, r3
 8002d4a:	00d2      	lsls	r2, r2, #3
 8002d4c:	1ad2      	subs	r2, r2, r3
 8002d4e:	0093      	lsls	r3, r2, #2
 8002d50:	461a      	mov	r2, r3
 8002d52:	460b      	mov	r3, r1
 8002d54:	00db      	lsls	r3, r3, #3
 8002d56:	1a5b      	subs	r3, r3, r1
 8002d58:	019b      	lsls	r3, r3, #6
 8002d5a:	4413      	add	r3, r2
 8002d5c:	4403      	add	r3, r0
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7fd ffbb 	bl	8000cdc <__aeabi_i2f>
 8002d66:	4603      	mov	r3, r0
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7fe fe79 	bl	8001a60 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[IZQUIERDA]);
 8002d6e:	4b2d      	ldr	r3, [pc, #180]	; (8002e24 <ChooseNextNode+0x548>)
 8002d70:	6819      	ldr	r1, [r3, #0]
 8002d72:	4b2c      	ldr	r3, [pc, #176]	; (8002e24 <ChooseNextNode+0x548>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	4828      	ldr	r0, [pc, #160]	; (8002e18 <ChooseNextNode+0x53c>)
 8002d78:	461a      	mov	r2, r3
 8002d7a:	00d2      	lsls	r2, r2, #3
 8002d7c:	1ad2      	subs	r2, r2, r3
 8002d7e:	0093      	lsls	r3, r2, #2
 8002d80:	461a      	mov	r2, r3
 8002d82:	460b      	mov	r3, r1
 8002d84:	00db      	lsls	r3, r3, #3
 8002d86:	1a5b      	subs	r3, r3, r1
 8002d88:	019b      	lsls	r3, r3, #6
 8002d8a:	4413      	add	r3, r2
 8002d8c:	4403      	add	r3, r0
 8002d8e:	3304      	adds	r3, #4
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7fd ffa2 	bl	8000cdc <__aeabi_i2f>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7fe fe60 	bl	8001a60 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[ATRAS]);
 8002da0:	4b20      	ldr	r3, [pc, #128]	; (8002e24 <ChooseNextNode+0x548>)
 8002da2:	6819      	ldr	r1, [r3, #0]
 8002da4:	4b1f      	ldr	r3, [pc, #124]	; (8002e24 <ChooseNextNode+0x548>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	481b      	ldr	r0, [pc, #108]	; (8002e18 <ChooseNextNode+0x53c>)
 8002daa:	461a      	mov	r2, r3
 8002dac:	00d2      	lsls	r2, r2, #3
 8002dae:	1ad2      	subs	r2, r2, r3
 8002db0:	0093      	lsls	r3, r2, #2
 8002db2:	461a      	mov	r2, r3
 8002db4:	460b      	mov	r3, r1
 8002db6:	00db      	lsls	r3, r3, #3
 8002db8:	1a5b      	subs	r3, r3, r1
 8002dba:	019b      	lsls	r3, r3, #6
 8002dbc:	4413      	add	r3, r2
 8002dbe:	4403      	add	r3, r0
 8002dc0:	3308      	adds	r3, #8
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7fd ff89 	bl	8000cdc <__aeabi_i2f>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7fe fe47 	bl	8001a60 <intUartSend>
		moveNode(direcciones[DERECHA], &actual);
 8002dd2:	4b10      	ldr	r3, [pc, #64]	; (8002e14 <ChooseNextNode+0x538>)
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	4913      	ldr	r1, [pc, #76]	; (8002e24 <ChooseNextNode+0x548>)
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f001 f867 	bl	8003eac <moveNode>
		rotateAxis(DERECHA, direcciones);
 8002dde:	490d      	ldr	r1, [pc, #52]	; (8002e14 <ChooseNextNode+0x538>)
 8002de0:	2003      	movs	r0, #3
 8002de2:	f000 fc87 	bl	80036f4 <rotateAxis>
		return DERECHA;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e010      	b.n	8002e0c <ChooseNextNode+0x530>
	} else {
		TX_BUFFER[0] = 'O';
 8002dea:	4b0c      	ldr	r3, [pc, #48]	; (8002e1c <ChooseNextNode+0x540>)
 8002dec:	224f      	movs	r2, #79	; 0x4f
 8002dee:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = '\n';
 8002df0:	4b0a      	ldr	r3, [pc, #40]	; (8002e1c <ChooseNextNode+0x540>)
 8002df2:	220a      	movs	r2, #10
 8002df4:	705a      	strb	r2, [r3, #1]
		HAL_UART_Transmit(&huart3, TX_BUFFER, 2, 100);
 8002df6:	2364      	movs	r3, #100	; 0x64
 8002df8:	2202      	movs	r2, #2
 8002dfa:	4908      	ldr	r1, [pc, #32]	; (8002e1c <ChooseNextNode+0x540>)
 8002dfc:	4808      	ldr	r0, [pc, #32]	; (8002e20 <ChooseNextNode+0x544>)
 8002dfe:	f004 ff40 	bl	8007c82 <HAL_UART_Transmit>
		return SearchAvailableNode(x, y);
 8002e02:	6839      	ldr	r1, [r7, #0]
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f000 f811 	bl	8002e2c <SearchAvailableNode>
 8002e0a:	4603      	mov	r3, r0
	}

}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd90      	pop	{r4, r7, pc}
 8002e14:	20002310 	.word	0x20002310
 8002e18:	2000249c 	.word	0x2000249c
 8002e1c:	2000233c 	.word	0x2000233c
 8002e20:	200002bc 	.word	0x200002bc
 8002e24:	2000248c 	.word	0x2000248c
 8002e28:	20002494 	.word	0x20002494

08002e2c <SearchAvailableNode>:

int SearchAvailableNode(int x, int y) {
 8002e2c:	b590      	push	{r4, r7, lr}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
	if (Map[x][y].Lados[direcciones[ADELANTE]] != 1) {
 8002e36:	4b87      	ldr	r3, [pc, #540]	; (8003054 <SearchAvailableNode+0x228>)
 8002e38:	6818      	ldr	r0, [r3, #0]
 8002e3a:	4c87      	ldr	r4, [pc, #540]	; (8003058 <SearchAvailableNode+0x22c>)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	6879      	ldr	r1, [r7, #4]
 8002e40:	461a      	mov	r2, r3
 8002e42:	00d2      	lsls	r2, r2, #3
 8002e44:	1ad2      	subs	r2, r2, r3
 8002e46:	460b      	mov	r3, r1
 8002e48:	00db      	lsls	r3, r3, #3
 8002e4a:	1a5b      	subs	r3, r3, r1
 8002e4c:	011b      	lsls	r3, r3, #4
 8002e4e:	4413      	add	r3, r2
 8002e50:	4403      	add	r3, r0
 8002e52:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d072      	beq.n	8002f40 <SearchAvailableNode+0x114>
		/*if (Map[x][y].visitado > 1) {
		 EliminateNode(&Map[actual.x][actual.y], &Map[last.x][last.y],
		 direcciones[ATRAS]);
		 intUartSend(4000);
		 }*/
		last.x = actual.x;
 8002e5a:	4b80      	ldr	r3, [pc, #512]	; (800305c <SearchAvailableNode+0x230>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a80      	ldr	r2, [pc, #512]	; (8003060 <SearchAvailableNode+0x234>)
 8002e60:	6013      	str	r3, [r2, #0]
		last.y = actual.y;
 8002e62:	4b7e      	ldr	r3, [pc, #504]	; (800305c <SearchAvailableNode+0x230>)
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	4a7e      	ldr	r2, [pc, #504]	; (8003060 <SearchAvailableNode+0x234>)
 8002e68:	6053      	str	r3, [r2, #4]
		intUartSend(Map[actual.x][actual.y].Lados[DERECHA]);
 8002e6a:	4b7c      	ldr	r3, [pc, #496]	; (800305c <SearchAvailableNode+0x230>)
 8002e6c:	6819      	ldr	r1, [r3, #0]
 8002e6e:	4b7b      	ldr	r3, [pc, #492]	; (800305c <SearchAvailableNode+0x230>)
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	4879      	ldr	r0, [pc, #484]	; (8003058 <SearchAvailableNode+0x22c>)
 8002e74:	461a      	mov	r2, r3
 8002e76:	00d2      	lsls	r2, r2, #3
 8002e78:	1ad2      	subs	r2, r2, r3
 8002e7a:	0093      	lsls	r3, r2, #2
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	460b      	mov	r3, r1
 8002e80:	00db      	lsls	r3, r3, #3
 8002e82:	1a5b      	subs	r3, r3, r1
 8002e84:	019b      	lsls	r3, r3, #6
 8002e86:	4413      	add	r3, r2
 8002e88:	4403      	add	r3, r0
 8002e8a:	330c      	adds	r3, #12
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7fd ff24 	bl	8000cdc <__aeabi_i2f>
 8002e94:	4603      	mov	r3, r0
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7fe fde2 	bl	8001a60 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[ADELANTE]);
 8002e9c:	4b6f      	ldr	r3, [pc, #444]	; (800305c <SearchAvailableNode+0x230>)
 8002e9e:	6819      	ldr	r1, [r3, #0]
 8002ea0:	4b6e      	ldr	r3, [pc, #440]	; (800305c <SearchAvailableNode+0x230>)
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	486c      	ldr	r0, [pc, #432]	; (8003058 <SearchAvailableNode+0x22c>)
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	00d2      	lsls	r2, r2, #3
 8002eaa:	1ad2      	subs	r2, r2, r3
 8002eac:	0093      	lsls	r3, r2, #2
 8002eae:	461a      	mov	r2, r3
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	00db      	lsls	r3, r3, #3
 8002eb4:	1a5b      	subs	r3, r3, r1
 8002eb6:	019b      	lsls	r3, r3, #6
 8002eb8:	4413      	add	r3, r2
 8002eba:	4403      	add	r3, r0
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7fd ff0c 	bl	8000cdc <__aeabi_i2f>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7fe fdca 	bl	8001a60 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[IZQUIERDA]);
 8002ecc:	4b63      	ldr	r3, [pc, #396]	; (800305c <SearchAvailableNode+0x230>)
 8002ece:	6819      	ldr	r1, [r3, #0]
 8002ed0:	4b62      	ldr	r3, [pc, #392]	; (800305c <SearchAvailableNode+0x230>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	4860      	ldr	r0, [pc, #384]	; (8003058 <SearchAvailableNode+0x22c>)
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	00d2      	lsls	r2, r2, #3
 8002eda:	1ad2      	subs	r2, r2, r3
 8002edc:	0093      	lsls	r3, r2, #2
 8002ede:	461a      	mov	r2, r3
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	00db      	lsls	r3, r3, #3
 8002ee4:	1a5b      	subs	r3, r3, r1
 8002ee6:	019b      	lsls	r3, r3, #6
 8002ee8:	4413      	add	r3, r2
 8002eea:	4403      	add	r3, r0
 8002eec:	3304      	adds	r3, #4
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7fd fef3 	bl	8000cdc <__aeabi_i2f>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7fe fdb1 	bl	8001a60 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[ATRAS]);
 8002efe:	4b57      	ldr	r3, [pc, #348]	; (800305c <SearchAvailableNode+0x230>)
 8002f00:	6819      	ldr	r1, [r3, #0]
 8002f02:	4b56      	ldr	r3, [pc, #344]	; (800305c <SearchAvailableNode+0x230>)
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	4854      	ldr	r0, [pc, #336]	; (8003058 <SearchAvailableNode+0x22c>)
 8002f08:	461a      	mov	r2, r3
 8002f0a:	00d2      	lsls	r2, r2, #3
 8002f0c:	1ad2      	subs	r2, r2, r3
 8002f0e:	0093      	lsls	r3, r2, #2
 8002f10:	461a      	mov	r2, r3
 8002f12:	460b      	mov	r3, r1
 8002f14:	00db      	lsls	r3, r3, #3
 8002f16:	1a5b      	subs	r3, r3, r1
 8002f18:	019b      	lsls	r3, r3, #6
 8002f1a:	4413      	add	r3, r2
 8002f1c:	4403      	add	r3, r0
 8002f1e:	3308      	adds	r3, #8
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7fd feda 	bl	8000cdc <__aeabi_i2f>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7fe fd98 	bl	8001a60 <intUartSend>
		moveNode(direcciones[ADELANTE], &actual);
 8002f30:	4b48      	ldr	r3, [pc, #288]	; (8003054 <SearchAvailableNode+0x228>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4949      	ldr	r1, [pc, #292]	; (800305c <SearchAvailableNode+0x230>)
 8002f36:	4618      	mov	r0, r3
 8002f38:	f000 ffb8 	bl	8003eac <moveNode>

		return ADELANTE;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	e1a8      	b.n	8003292 <SearchAvailableNode+0x466>
	} else if (Map[x][y].Lados[direcciones[IZQUIERDA]] != 1) {
 8002f40:	4b44      	ldr	r3, [pc, #272]	; (8003054 <SearchAvailableNode+0x228>)
 8002f42:	6858      	ldr	r0, [r3, #4]
 8002f44:	4c44      	ldr	r4, [pc, #272]	; (8003058 <SearchAvailableNode+0x22c>)
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	6879      	ldr	r1, [r7, #4]
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	00d2      	lsls	r2, r2, #3
 8002f4e:	1ad2      	subs	r2, r2, r3
 8002f50:	460b      	mov	r3, r1
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	1a5b      	subs	r3, r3, r1
 8002f56:	011b      	lsls	r3, r3, #4
 8002f58:	4413      	add	r3, r2
 8002f5a:	4403      	add	r3, r0
 8002f5c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d07f      	beq.n	8003064 <SearchAvailableNode+0x238>
		/*if (Map[x][y].visitado > 1) {
		 EliminateNode(&Map[actual.x][actual.y], &Map[last.x][last.y],
		 direcciones[ATRAS]);
		 intUartSend(4000);
		 }*/
		last.x = actual.x;
 8002f64:	4b3d      	ldr	r3, [pc, #244]	; (800305c <SearchAvailableNode+0x230>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a3d      	ldr	r2, [pc, #244]	; (8003060 <SearchAvailableNode+0x234>)
 8002f6a:	6013      	str	r3, [r2, #0]
		last.y = actual.y;
 8002f6c:	4b3b      	ldr	r3, [pc, #236]	; (800305c <SearchAvailableNode+0x230>)
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	4a3b      	ldr	r2, [pc, #236]	; (8003060 <SearchAvailableNode+0x234>)
 8002f72:	6053      	str	r3, [r2, #4]
		intUartSend(Map[actual.x][actual.y].Lados[DERECHA]);
 8002f74:	4b39      	ldr	r3, [pc, #228]	; (800305c <SearchAvailableNode+0x230>)
 8002f76:	6819      	ldr	r1, [r3, #0]
 8002f78:	4b38      	ldr	r3, [pc, #224]	; (800305c <SearchAvailableNode+0x230>)
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	4836      	ldr	r0, [pc, #216]	; (8003058 <SearchAvailableNode+0x22c>)
 8002f7e:	461a      	mov	r2, r3
 8002f80:	00d2      	lsls	r2, r2, #3
 8002f82:	1ad2      	subs	r2, r2, r3
 8002f84:	0093      	lsls	r3, r2, #2
 8002f86:	461a      	mov	r2, r3
 8002f88:	460b      	mov	r3, r1
 8002f8a:	00db      	lsls	r3, r3, #3
 8002f8c:	1a5b      	subs	r3, r3, r1
 8002f8e:	019b      	lsls	r3, r3, #6
 8002f90:	4413      	add	r3, r2
 8002f92:	4403      	add	r3, r0
 8002f94:	330c      	adds	r3, #12
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7fd fe9f 	bl	8000cdc <__aeabi_i2f>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7fe fd5d 	bl	8001a60 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[ADELANTE]);
 8002fa6:	4b2d      	ldr	r3, [pc, #180]	; (800305c <SearchAvailableNode+0x230>)
 8002fa8:	6819      	ldr	r1, [r3, #0]
 8002faa:	4b2c      	ldr	r3, [pc, #176]	; (800305c <SearchAvailableNode+0x230>)
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	482a      	ldr	r0, [pc, #168]	; (8003058 <SearchAvailableNode+0x22c>)
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	00d2      	lsls	r2, r2, #3
 8002fb4:	1ad2      	subs	r2, r2, r3
 8002fb6:	0093      	lsls	r3, r2, #2
 8002fb8:	461a      	mov	r2, r3
 8002fba:	460b      	mov	r3, r1
 8002fbc:	00db      	lsls	r3, r3, #3
 8002fbe:	1a5b      	subs	r3, r3, r1
 8002fc0:	019b      	lsls	r3, r3, #6
 8002fc2:	4413      	add	r3, r2
 8002fc4:	4403      	add	r3, r0
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7fd fe87 	bl	8000cdc <__aeabi_i2f>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7fe fd45 	bl	8001a60 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[IZQUIERDA]);
 8002fd6:	4b21      	ldr	r3, [pc, #132]	; (800305c <SearchAvailableNode+0x230>)
 8002fd8:	6819      	ldr	r1, [r3, #0]
 8002fda:	4b20      	ldr	r3, [pc, #128]	; (800305c <SearchAvailableNode+0x230>)
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	481e      	ldr	r0, [pc, #120]	; (8003058 <SearchAvailableNode+0x22c>)
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	00d2      	lsls	r2, r2, #3
 8002fe4:	1ad2      	subs	r2, r2, r3
 8002fe6:	0093      	lsls	r3, r2, #2
 8002fe8:	461a      	mov	r2, r3
 8002fea:	460b      	mov	r3, r1
 8002fec:	00db      	lsls	r3, r3, #3
 8002fee:	1a5b      	subs	r3, r3, r1
 8002ff0:	019b      	lsls	r3, r3, #6
 8002ff2:	4413      	add	r3, r2
 8002ff4:	4403      	add	r3, r0
 8002ff6:	3304      	adds	r3, #4
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7fd fe6e 	bl	8000cdc <__aeabi_i2f>
 8003000:	4603      	mov	r3, r0
 8003002:	4618      	mov	r0, r3
 8003004:	f7fe fd2c 	bl	8001a60 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[ATRAS]);
 8003008:	4b14      	ldr	r3, [pc, #80]	; (800305c <SearchAvailableNode+0x230>)
 800300a:	6819      	ldr	r1, [r3, #0]
 800300c:	4b13      	ldr	r3, [pc, #76]	; (800305c <SearchAvailableNode+0x230>)
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	4811      	ldr	r0, [pc, #68]	; (8003058 <SearchAvailableNode+0x22c>)
 8003012:	461a      	mov	r2, r3
 8003014:	00d2      	lsls	r2, r2, #3
 8003016:	1ad2      	subs	r2, r2, r3
 8003018:	0093      	lsls	r3, r2, #2
 800301a:	461a      	mov	r2, r3
 800301c:	460b      	mov	r3, r1
 800301e:	00db      	lsls	r3, r3, #3
 8003020:	1a5b      	subs	r3, r3, r1
 8003022:	019b      	lsls	r3, r3, #6
 8003024:	4413      	add	r3, r2
 8003026:	4403      	add	r3, r0
 8003028:	3308      	adds	r3, #8
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4618      	mov	r0, r3
 800302e:	f7fd fe55 	bl	8000cdc <__aeabi_i2f>
 8003032:	4603      	mov	r3, r0
 8003034:	4618      	mov	r0, r3
 8003036:	f7fe fd13 	bl	8001a60 <intUartSend>
		moveNode(direcciones[IZQUIERDA], &actual);
 800303a:	4b06      	ldr	r3, [pc, #24]	; (8003054 <SearchAvailableNode+0x228>)
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	4907      	ldr	r1, [pc, #28]	; (800305c <SearchAvailableNode+0x230>)
 8003040:	4618      	mov	r0, r3
 8003042:	f000 ff33 	bl	8003eac <moveNode>

		rotateAxis(IZQUIERDA, direcciones);
 8003046:	4903      	ldr	r1, [pc, #12]	; (8003054 <SearchAvailableNode+0x228>)
 8003048:	2001      	movs	r0, #1
 800304a:	f000 fb53 	bl	80036f4 <rotateAxis>
		return IZQUIERDA;
 800304e:	2301      	movs	r3, #1
 8003050:	e11f      	b.n	8003292 <SearchAvailableNode+0x466>
 8003052:	bf00      	nop
 8003054:	20002310 	.word	0x20002310
 8003058:	2000249c 	.word	0x2000249c
 800305c:	2000248c 	.word	0x2000248c
 8003060:	20002494 	.word	0x20002494
	} else if (Map[x][y].Lados[direcciones[DERECHA]] != 1) {
 8003064:	4b8d      	ldr	r3, [pc, #564]	; (800329c <SearchAvailableNode+0x470>)
 8003066:	68d8      	ldr	r0, [r3, #12]
 8003068:	4c8d      	ldr	r4, [pc, #564]	; (80032a0 <SearchAvailableNode+0x474>)
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	6879      	ldr	r1, [r7, #4]
 800306e:	461a      	mov	r2, r3
 8003070:	00d2      	lsls	r2, r2, #3
 8003072:	1ad2      	subs	r2, r2, r3
 8003074:	460b      	mov	r3, r1
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	1a5b      	subs	r3, r3, r1
 800307a:	011b      	lsls	r3, r3, #4
 800307c:	4413      	add	r3, r2
 800307e:	4403      	add	r3, r0
 8003080:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8003084:	2b01      	cmp	r3, #1
 8003086:	d076      	beq.n	8003176 <SearchAvailableNode+0x34a>
		/*if (Map[x][y].visitado > 1) {
		 EliminateNode(&Map[actual.x][actual.y], &Map[last.x][last.y],
		 direcciones[ATRAS]);
		 intUartSend(4000);
		 }*/
		last.x = actual.x;
 8003088:	4b86      	ldr	r3, [pc, #536]	; (80032a4 <SearchAvailableNode+0x478>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a86      	ldr	r2, [pc, #536]	; (80032a8 <SearchAvailableNode+0x47c>)
 800308e:	6013      	str	r3, [r2, #0]
		last.y = actual.y;
 8003090:	4b84      	ldr	r3, [pc, #528]	; (80032a4 <SearchAvailableNode+0x478>)
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	4a84      	ldr	r2, [pc, #528]	; (80032a8 <SearchAvailableNode+0x47c>)
 8003096:	6053      	str	r3, [r2, #4]
		intUartSend(Map[actual.x][actual.y].Lados[DERECHA]);
 8003098:	4b82      	ldr	r3, [pc, #520]	; (80032a4 <SearchAvailableNode+0x478>)
 800309a:	6819      	ldr	r1, [r3, #0]
 800309c:	4b81      	ldr	r3, [pc, #516]	; (80032a4 <SearchAvailableNode+0x478>)
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	487f      	ldr	r0, [pc, #508]	; (80032a0 <SearchAvailableNode+0x474>)
 80030a2:	461a      	mov	r2, r3
 80030a4:	00d2      	lsls	r2, r2, #3
 80030a6:	1ad2      	subs	r2, r2, r3
 80030a8:	0093      	lsls	r3, r2, #2
 80030aa:	461a      	mov	r2, r3
 80030ac:	460b      	mov	r3, r1
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	1a5b      	subs	r3, r3, r1
 80030b2:	019b      	lsls	r3, r3, #6
 80030b4:	4413      	add	r3, r2
 80030b6:	4403      	add	r3, r0
 80030b8:	330c      	adds	r3, #12
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4618      	mov	r0, r3
 80030be:	f7fd fe0d 	bl	8000cdc <__aeabi_i2f>
 80030c2:	4603      	mov	r3, r0
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7fe fccb 	bl	8001a60 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[ADELANTE]);
 80030ca:	4b76      	ldr	r3, [pc, #472]	; (80032a4 <SearchAvailableNode+0x478>)
 80030cc:	6819      	ldr	r1, [r3, #0]
 80030ce:	4b75      	ldr	r3, [pc, #468]	; (80032a4 <SearchAvailableNode+0x478>)
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	4873      	ldr	r0, [pc, #460]	; (80032a0 <SearchAvailableNode+0x474>)
 80030d4:	461a      	mov	r2, r3
 80030d6:	00d2      	lsls	r2, r2, #3
 80030d8:	1ad2      	subs	r2, r2, r3
 80030da:	0093      	lsls	r3, r2, #2
 80030dc:	461a      	mov	r2, r3
 80030de:	460b      	mov	r3, r1
 80030e0:	00db      	lsls	r3, r3, #3
 80030e2:	1a5b      	subs	r3, r3, r1
 80030e4:	019b      	lsls	r3, r3, #6
 80030e6:	4413      	add	r3, r2
 80030e8:	4403      	add	r3, r0
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7fd fdf5 	bl	8000cdc <__aeabi_i2f>
 80030f2:	4603      	mov	r3, r0
 80030f4:	4618      	mov	r0, r3
 80030f6:	f7fe fcb3 	bl	8001a60 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[IZQUIERDA]);
 80030fa:	4b6a      	ldr	r3, [pc, #424]	; (80032a4 <SearchAvailableNode+0x478>)
 80030fc:	6819      	ldr	r1, [r3, #0]
 80030fe:	4b69      	ldr	r3, [pc, #420]	; (80032a4 <SearchAvailableNode+0x478>)
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	4867      	ldr	r0, [pc, #412]	; (80032a0 <SearchAvailableNode+0x474>)
 8003104:	461a      	mov	r2, r3
 8003106:	00d2      	lsls	r2, r2, #3
 8003108:	1ad2      	subs	r2, r2, r3
 800310a:	0093      	lsls	r3, r2, #2
 800310c:	461a      	mov	r2, r3
 800310e:	460b      	mov	r3, r1
 8003110:	00db      	lsls	r3, r3, #3
 8003112:	1a5b      	subs	r3, r3, r1
 8003114:	019b      	lsls	r3, r3, #6
 8003116:	4413      	add	r3, r2
 8003118:	4403      	add	r3, r0
 800311a:	3304      	adds	r3, #4
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4618      	mov	r0, r3
 8003120:	f7fd fddc 	bl	8000cdc <__aeabi_i2f>
 8003124:	4603      	mov	r3, r0
 8003126:	4618      	mov	r0, r3
 8003128:	f7fe fc9a 	bl	8001a60 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[ATRAS]);
 800312c:	4b5d      	ldr	r3, [pc, #372]	; (80032a4 <SearchAvailableNode+0x478>)
 800312e:	6819      	ldr	r1, [r3, #0]
 8003130:	4b5c      	ldr	r3, [pc, #368]	; (80032a4 <SearchAvailableNode+0x478>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	485a      	ldr	r0, [pc, #360]	; (80032a0 <SearchAvailableNode+0x474>)
 8003136:	461a      	mov	r2, r3
 8003138:	00d2      	lsls	r2, r2, #3
 800313a:	1ad2      	subs	r2, r2, r3
 800313c:	0093      	lsls	r3, r2, #2
 800313e:	461a      	mov	r2, r3
 8003140:	460b      	mov	r3, r1
 8003142:	00db      	lsls	r3, r3, #3
 8003144:	1a5b      	subs	r3, r3, r1
 8003146:	019b      	lsls	r3, r3, #6
 8003148:	4413      	add	r3, r2
 800314a:	4403      	add	r3, r0
 800314c:	3308      	adds	r3, #8
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4618      	mov	r0, r3
 8003152:	f7fd fdc3 	bl	8000cdc <__aeabi_i2f>
 8003156:	4603      	mov	r3, r0
 8003158:	4618      	mov	r0, r3
 800315a:	f7fe fc81 	bl	8001a60 <intUartSend>
		moveNode(direcciones[DERECHA], &actual);
 800315e:	4b4f      	ldr	r3, [pc, #316]	; (800329c <SearchAvailableNode+0x470>)
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	4950      	ldr	r1, [pc, #320]	; (80032a4 <SearchAvailableNode+0x478>)
 8003164:	4618      	mov	r0, r3
 8003166:	f000 fea1 	bl	8003eac <moveNode>
		rotateAxis(DERECHA, direcciones);
 800316a:	494c      	ldr	r1, [pc, #304]	; (800329c <SearchAvailableNode+0x470>)
 800316c:	2003      	movs	r0, #3
 800316e:	f000 fac1 	bl	80036f4 <rotateAxis>
		return DERECHA;
 8003172:	2303      	movs	r3, #3
 8003174:	e08d      	b.n	8003292 <SearchAvailableNode+0x466>
	} else if (Map[x][y].Lados[direcciones[ATRAS]] != 1) {
 8003176:	4b49      	ldr	r3, [pc, #292]	; (800329c <SearchAvailableNode+0x470>)
 8003178:	6898      	ldr	r0, [r3, #8]
 800317a:	4c49      	ldr	r4, [pc, #292]	; (80032a0 <SearchAvailableNode+0x474>)
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	6879      	ldr	r1, [r7, #4]
 8003180:	461a      	mov	r2, r3
 8003182:	00d2      	lsls	r2, r2, #3
 8003184:	1ad2      	subs	r2, r2, r3
 8003186:	460b      	mov	r3, r1
 8003188:	00db      	lsls	r3, r3, #3
 800318a:	1a5b      	subs	r3, r3, r1
 800318c:	011b      	lsls	r3, r3, #4
 800318e:	4413      	add	r3, r2
 8003190:	4403      	add	r3, r0
 8003192:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8003196:	2b01      	cmp	r3, #1
 8003198:	d07a      	beq.n	8003290 <SearchAvailableNode+0x464>
		last.x = actual.x;
 800319a:	4b42      	ldr	r3, [pc, #264]	; (80032a4 <SearchAvailableNode+0x478>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a42      	ldr	r2, [pc, #264]	; (80032a8 <SearchAvailableNode+0x47c>)
 80031a0:	6013      	str	r3, [r2, #0]
		last.y = actual.y;
 80031a2:	4b40      	ldr	r3, [pc, #256]	; (80032a4 <SearchAvailableNode+0x478>)
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	4a40      	ldr	r2, [pc, #256]	; (80032a8 <SearchAvailableNode+0x47c>)
 80031a8:	6053      	str	r3, [r2, #4]
		intUartSend(Map[actual.x][actual.y].Lados[DERECHA]);
 80031aa:	4b3e      	ldr	r3, [pc, #248]	; (80032a4 <SearchAvailableNode+0x478>)
 80031ac:	6819      	ldr	r1, [r3, #0]
 80031ae:	4b3d      	ldr	r3, [pc, #244]	; (80032a4 <SearchAvailableNode+0x478>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	483b      	ldr	r0, [pc, #236]	; (80032a0 <SearchAvailableNode+0x474>)
 80031b4:	461a      	mov	r2, r3
 80031b6:	00d2      	lsls	r2, r2, #3
 80031b8:	1ad2      	subs	r2, r2, r3
 80031ba:	0093      	lsls	r3, r2, #2
 80031bc:	461a      	mov	r2, r3
 80031be:	460b      	mov	r3, r1
 80031c0:	00db      	lsls	r3, r3, #3
 80031c2:	1a5b      	subs	r3, r3, r1
 80031c4:	019b      	lsls	r3, r3, #6
 80031c6:	4413      	add	r3, r2
 80031c8:	4403      	add	r3, r0
 80031ca:	330c      	adds	r3, #12
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7fd fd84 	bl	8000cdc <__aeabi_i2f>
 80031d4:	4603      	mov	r3, r0
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7fe fc42 	bl	8001a60 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[ADELANTE]);
 80031dc:	4b31      	ldr	r3, [pc, #196]	; (80032a4 <SearchAvailableNode+0x478>)
 80031de:	6819      	ldr	r1, [r3, #0]
 80031e0:	4b30      	ldr	r3, [pc, #192]	; (80032a4 <SearchAvailableNode+0x478>)
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	482e      	ldr	r0, [pc, #184]	; (80032a0 <SearchAvailableNode+0x474>)
 80031e6:	461a      	mov	r2, r3
 80031e8:	00d2      	lsls	r2, r2, #3
 80031ea:	1ad2      	subs	r2, r2, r3
 80031ec:	0093      	lsls	r3, r2, #2
 80031ee:	461a      	mov	r2, r3
 80031f0:	460b      	mov	r3, r1
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	1a5b      	subs	r3, r3, r1
 80031f6:	019b      	lsls	r3, r3, #6
 80031f8:	4413      	add	r3, r2
 80031fa:	4403      	add	r3, r0
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4618      	mov	r0, r3
 8003200:	f7fd fd6c 	bl	8000cdc <__aeabi_i2f>
 8003204:	4603      	mov	r3, r0
 8003206:	4618      	mov	r0, r3
 8003208:	f7fe fc2a 	bl	8001a60 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[IZQUIERDA]);
 800320c:	4b25      	ldr	r3, [pc, #148]	; (80032a4 <SearchAvailableNode+0x478>)
 800320e:	6819      	ldr	r1, [r3, #0]
 8003210:	4b24      	ldr	r3, [pc, #144]	; (80032a4 <SearchAvailableNode+0x478>)
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	4822      	ldr	r0, [pc, #136]	; (80032a0 <SearchAvailableNode+0x474>)
 8003216:	461a      	mov	r2, r3
 8003218:	00d2      	lsls	r2, r2, #3
 800321a:	1ad2      	subs	r2, r2, r3
 800321c:	0093      	lsls	r3, r2, #2
 800321e:	461a      	mov	r2, r3
 8003220:	460b      	mov	r3, r1
 8003222:	00db      	lsls	r3, r3, #3
 8003224:	1a5b      	subs	r3, r3, r1
 8003226:	019b      	lsls	r3, r3, #6
 8003228:	4413      	add	r3, r2
 800322a:	4403      	add	r3, r0
 800322c:	3304      	adds	r3, #4
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4618      	mov	r0, r3
 8003232:	f7fd fd53 	bl	8000cdc <__aeabi_i2f>
 8003236:	4603      	mov	r3, r0
 8003238:	4618      	mov	r0, r3
 800323a:	f7fe fc11 	bl	8001a60 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[ATRAS]);
 800323e:	4b19      	ldr	r3, [pc, #100]	; (80032a4 <SearchAvailableNode+0x478>)
 8003240:	6819      	ldr	r1, [r3, #0]
 8003242:	4b18      	ldr	r3, [pc, #96]	; (80032a4 <SearchAvailableNode+0x478>)
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	4816      	ldr	r0, [pc, #88]	; (80032a0 <SearchAvailableNode+0x474>)
 8003248:	461a      	mov	r2, r3
 800324a:	00d2      	lsls	r2, r2, #3
 800324c:	1ad2      	subs	r2, r2, r3
 800324e:	0093      	lsls	r3, r2, #2
 8003250:	461a      	mov	r2, r3
 8003252:	460b      	mov	r3, r1
 8003254:	00db      	lsls	r3, r3, #3
 8003256:	1a5b      	subs	r3, r3, r1
 8003258:	019b      	lsls	r3, r3, #6
 800325a:	4413      	add	r3, r2
 800325c:	4403      	add	r3, r0
 800325e:	3308      	adds	r3, #8
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4618      	mov	r0, r3
 8003264:	f7fd fd3a 	bl	8000cdc <__aeabi_i2f>
 8003268:	4603      	mov	r3, r0
 800326a:	4618      	mov	r0, r3
 800326c:	f7fe fbf8 	bl	8001a60 <intUartSend>
		//Map[x][y].Lados[direcciones[ATRAS]] = 2;
		moveNode(direcciones[ATRAS], &actual);
 8003270:	4b0a      	ldr	r3, [pc, #40]	; (800329c <SearchAvailableNode+0x470>)
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	490b      	ldr	r1, [pc, #44]	; (80032a4 <SearchAvailableNode+0x478>)
 8003276:	4618      	mov	r0, r3
 8003278:	f000 fe18 	bl	8003eac <moveNode>

		rotateAxis(DERECHA, direcciones);
 800327c:	4907      	ldr	r1, [pc, #28]	; (800329c <SearchAvailableNode+0x470>)
 800327e:	2003      	movs	r0, #3
 8003280:	f000 fa38 	bl	80036f4 <rotateAxis>
		rotateAxis(DERECHA, direcciones);
 8003284:	4905      	ldr	r1, [pc, #20]	; (800329c <SearchAvailableNode+0x470>)
 8003286:	2003      	movs	r0, #3
 8003288:	f000 fa34 	bl	80036f4 <rotateAxis>
		return ATRAS;
 800328c:	2302      	movs	r3, #2
 800328e:	e000      	b.n	8003292 <SearchAvailableNode+0x466>
	}
	return 0;
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	bd90      	pop	{r4, r7, pc}
 800329a:	bf00      	nop
 800329c:	20002310 	.word	0x20002310
 80032a0:	2000249c 	.word	0x2000249c
 80032a4:	2000248c 	.word	0x2000248c
 80032a8:	20002494 	.word	0x20002494

080032ac <PrintMap>:
 for (int i = 0; i < 4; i++) {
 direcciones[i] = i;
 }
 }*/

void PrintMap() {
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
	for (int i = 0; i < alto; i++) {
 80032b2:	2300      	movs	r3, #0
 80032b4:	607b      	str	r3, [r7, #4]
 80032b6:	e032      	b.n	800331e <PrintMap+0x72>
		for (int j = 0; j < ancho; j++) {
 80032b8:	2300      	movs	r3, #0
 80032ba:	603b      	str	r3, [r7, #0]
 80032bc:	e020      	b.n	8003300 <PrintMap+0x54>
			//SerialBT.print(Map[i][j].visitado);
			//SerialBT.print(" ");
			TX_BUFFER[0] = Map[i][j].visitado + '0';
 80032be:	481c      	ldr	r0, [pc, #112]	; (8003330 <PrintMap+0x84>)
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	6879      	ldr	r1, [r7, #4]
 80032c4:	461a      	mov	r2, r3
 80032c6:	00d2      	lsls	r2, r2, #3
 80032c8:	1ad2      	subs	r2, r2, r3
 80032ca:	0093      	lsls	r3, r2, #2
 80032cc:	461a      	mov	r2, r3
 80032ce:	460b      	mov	r3, r1
 80032d0:	00db      	lsls	r3, r3, #3
 80032d2:	1a5b      	subs	r3, r3, r1
 80032d4:	019b      	lsls	r3, r3, #6
 80032d6:	4413      	add	r3, r2
 80032d8:	4403      	add	r3, r0
 80032da:	3310      	adds	r3, #16
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	3330      	adds	r3, #48	; 0x30
 80032e2:	b2da      	uxtb	r2, r3
 80032e4:	4b13      	ldr	r3, [pc, #76]	; (8003334 <PrintMap+0x88>)
 80032e6:	701a      	strb	r2, [r3, #0]
			TX_BUFFER[1] = ' ';
 80032e8:	4b12      	ldr	r3, [pc, #72]	; (8003334 <PrintMap+0x88>)
 80032ea:	2220      	movs	r2, #32
 80032ec:	705a      	strb	r2, [r3, #1]
			HAL_UART_Transmit(&huart3, TX_BUFFER, 2, 100);
 80032ee:	2364      	movs	r3, #100	; 0x64
 80032f0:	2202      	movs	r2, #2
 80032f2:	4910      	ldr	r1, [pc, #64]	; (8003334 <PrintMap+0x88>)
 80032f4:	4810      	ldr	r0, [pc, #64]	; (8003338 <PrintMap+0x8c>)
 80032f6:	f004 fcc4 	bl	8007c82 <HAL_UART_Transmit>
		for (int j = 0; j < ancho; j++) {
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	3301      	adds	r3, #1
 80032fe:	603b      	str	r3, [r7, #0]
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	2b0f      	cmp	r3, #15
 8003304:	dddb      	ble.n	80032be <PrintMap+0x12>
		}
		TX_BUFFER[0] = '\n';
 8003306:	4b0b      	ldr	r3, [pc, #44]	; (8003334 <PrintMap+0x88>)
 8003308:	220a      	movs	r2, #10
 800330a:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, TX_BUFFER, 1, 100);
 800330c:	2364      	movs	r3, #100	; 0x64
 800330e:	2201      	movs	r2, #1
 8003310:	4908      	ldr	r1, [pc, #32]	; (8003334 <PrintMap+0x88>)
 8003312:	4809      	ldr	r0, [pc, #36]	; (8003338 <PrintMap+0x8c>)
 8003314:	f004 fcb5 	bl	8007c82 <HAL_UART_Transmit>
	for (int i = 0; i < alto; i++) {
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	3301      	adds	r3, #1
 800331c:	607b      	str	r3, [r7, #4]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2b0f      	cmp	r3, #15
 8003322:	ddc9      	ble.n	80032b8 <PrintMap+0xc>
	}
}
 8003324:	bf00      	nop
 8003326:	bf00      	nop
 8003328:	3708      	adds	r7, #8
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	2000249c 	.word	0x2000249c
 8003334:	2000233c 	.word	0x2000233c
 8003338:	200002bc 	.word	0x200002bc

0800333c <HAL_ADC_ConvCpltCallback>:

// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 100; i++) {
 8003344:	2300      	movs	r3, #0
 8003346:	60fb      	str	r3, [r7, #12]
 8003348:	e029      	b.n	800339e <HAL_ADC_ConvCpltCallback+0x62>
		CNY70[i] = adc_buf[i * 4];
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	4a27      	ldr	r2, [pc, #156]	; (80033ec <HAL_ADC_ConvCpltCallback+0xb0>)
 8003350:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003354:	4926      	ldr	r1, [pc, #152]	; (80033f0 <HAL_ADC_ConvCpltCallback+0xb4>)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SHARP_1[i] = adc_buf[i * 4 + 1];
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	3301      	adds	r3, #1
 8003362:	4a22      	ldr	r2, [pc, #136]	; (80033ec <HAL_ADC_ConvCpltCallback+0xb0>)
 8003364:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003368:	4922      	ldr	r1, [pc, #136]	; (80033f4 <HAL_ADC_ConvCpltCallback+0xb8>)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SHARP_2[i] = adc_buf[i * 4 + 2];
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	3302      	adds	r3, #2
 8003376:	4a1d      	ldr	r2, [pc, #116]	; (80033ec <HAL_ADC_ConvCpltCallback+0xb0>)
 8003378:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800337c:	491e      	ldr	r1, [pc, #120]	; (80033f8 <HAL_ADC_ConvCpltCallback+0xbc>)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SHARP_3[i] = adc_buf[i * 4 + 3];
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	3303      	adds	r3, #3
 800338a:	4a18      	ldr	r2, [pc, #96]	; (80033ec <HAL_ADC_ConvCpltCallback+0xb0>)
 800338c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003390:	491a      	ldr	r1, [pc, #104]	; (80033fc <HAL_ADC_ConvCpltCallback+0xc0>)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < 100; i++) {
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	3301      	adds	r3, #1
 800339c:	60fb      	str	r3, [r7, #12]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2b63      	cmp	r3, #99	; 0x63
 80033a2:	ddd2      	ble.n	800334a <HAL_ADC_ConvCpltCallback+0xe>
	}
	Sensors[0] = lecturaCNY70(100, CNY70);
 80033a4:	4912      	ldr	r1, [pc, #72]	; (80033f0 <HAL_ADC_ConvCpltCallback+0xb4>)
 80033a6:	2064      	movs	r0, #100	; 0x64
 80033a8:	f000 ff3a 	bl	8004220 <lecturaCNY70>
 80033ac:	4603      	mov	r3, r0
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7fd fc94 	bl	8000cdc <__aeabi_i2f>
 80033b4:	4603      	mov	r3, r0
 80033b6:	4a12      	ldr	r2, [pc, #72]	; (8003400 <HAL_ADC_ConvCpltCallback+0xc4>)
 80033b8:	6013      	str	r3, [r2, #0]
	Sensors[1] = lecSensor(100, SHARP_1);
 80033ba:	490e      	ldr	r1, [pc, #56]	; (80033f4 <HAL_ADC_ConvCpltCallback+0xb8>)
 80033bc:	2064      	movs	r0, #100	; 0x64
 80033be:	f000 fe93 	bl	80040e8 <lecSensor>
 80033c2:	4603      	mov	r3, r0
 80033c4:	4a0e      	ldr	r2, [pc, #56]	; (8003400 <HAL_ADC_ConvCpltCallback+0xc4>)
 80033c6:	6053      	str	r3, [r2, #4]
	Sensors[2] = lecSensor(100, SHARP_2);
 80033c8:	490b      	ldr	r1, [pc, #44]	; (80033f8 <HAL_ADC_ConvCpltCallback+0xbc>)
 80033ca:	2064      	movs	r0, #100	; 0x64
 80033cc:	f000 fe8c 	bl	80040e8 <lecSensor>
 80033d0:	4603      	mov	r3, r0
 80033d2:	4a0b      	ldr	r2, [pc, #44]	; (8003400 <HAL_ADC_ConvCpltCallback+0xc4>)
 80033d4:	6093      	str	r3, [r2, #8]
	Sensors[3] = lecSensor(100, SHARP_3);
 80033d6:	4909      	ldr	r1, [pc, #36]	; (80033fc <HAL_ADC_ConvCpltCallback+0xc0>)
 80033d8:	2064      	movs	r0, #100	; 0x64
 80033da:	f000 fe85 	bl	80040e8 <lecSensor>
 80033de:	4603      	mov	r3, r0
 80033e0:	4a07      	ldr	r2, [pc, #28]	; (8003400 <HAL_ADC_ConvCpltCallback+0xc4>)
 80033e2:	60d3      	str	r3, [r2, #12]

}
 80033e4:	bf00      	nop
 80033e6:	3710      	adds	r7, #16
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	20000300 	.word	0x20000300
 80033f0:	20001300 	.word	0x20001300
 80033f4:	20001700 	.word	0x20001700
 80033f8:	20001b00 	.word	0x20001b00
 80033fc:	20001f00 	.word	0x20001f00
 8003400:	20002300 	.word	0x20002300

08003404 <MAP>:

uint32_t MAP(uint32_t au32_IN, uint32_t au32_INmin, uint32_t au32_INmax,
		uint32_t au32_OUTmin, uint32_t au32_OUTmax) {
 8003404:	b480      	push	{r7}
 8003406:	b085      	sub	sp, #20
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
 8003410:	603b      	str	r3, [r7, #0]
	return ((((au32_IN - au32_INmin) * (au32_OUTmax - au32_OUTmin))
 8003412:	68fa      	ldr	r2, [r7, #12]
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	69b9      	ldr	r1, [r7, #24]
 800341a:	683a      	ldr	r2, [r7, #0]
 800341c:	1a8a      	subs	r2, r1, r2
 800341e:	fb03 f202 	mul.w	r2, r3, r2
			/ (au32_INmax - au32_INmin)) + au32_OUTmin);
 8003422:	6879      	ldr	r1, [r7, #4]
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	1acb      	subs	r3, r1, r3
 8003428:	fbb2 f2f3 	udiv	r2, r2, r3
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	4413      	add	r3, r2
}
 8003430:	4618      	mov	r0, r3
 8003432:	3714      	adds	r7, #20
 8003434:	46bd      	mov	sp, r7
 8003436:	bc80      	pop	{r7}
 8003438:	4770      	bx	lr

0800343a <constrain>:

int constrain(int x, int a, int b) {
 800343a:	b480      	push	{r7}
 800343c:	b085      	sub	sp, #20
 800343e:	af00      	add	r7, sp, #0
 8003440:	60f8      	str	r0, [r7, #12]
 8003442:	60b9      	str	r1, [r7, #8]
 8003444:	607a      	str	r2, [r7, #4]
	if (x < a) {
 8003446:	68fa      	ldr	r2, [r7, #12]
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	429a      	cmp	r2, r3
 800344c:	da01      	bge.n	8003452 <constrain+0x18>
		return a;
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	e006      	b.n	8003460 <constrain+0x26>
	} else if (b < x) {
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	429a      	cmp	r2, r3
 8003458:	da01      	bge.n	800345e <constrain+0x24>
		return b;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	e000      	b.n	8003460 <constrain+0x26>
	} else
		return x;
 800345e:	68fb      	ldr	r3, [r7, #12]
}
 8003460:	4618      	mov	r0, r3
 8003462:	3714      	adds	r7, #20
 8003464:	46bd      	mov	sp, r7
 8003466:	bc80      	pop	{r7}
 8003468:	4770      	bx	lr
	...

0800346c <btnMachine>:

void btnMachine(int index) {
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
	switch (btns[index].estado) {
 8003474:	4a50      	ldr	r2, [pc, #320]	; (80035b8 <btnMachine+0x14c>)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	011b      	lsls	r3, r3, #4
 800347a:	4413      	add	r3, r2
 800347c:	3308      	adds	r3, #8
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2b02      	cmp	r3, #2
 8003482:	d069      	beq.n	8003558 <btnMachine+0xec>
 8003484:	2b02      	cmp	r3, #2
 8003486:	f300 8092 	bgt.w	80035ae <btnMachine+0x142>
 800348a:	2b00      	cmp	r3, #0
 800348c:	d002      	beq.n	8003494 <btnMachine+0x28>
 800348e:	2b01      	cmp	r3, #1
 8003490:	d02c      	beq.n	80034ec <btnMachine+0x80>
			btns[index].flag = 1;
			btns[index].estado = ESPERA;
		}
		break;
	}
}
 8003492:	e08c      	b.n	80035ae <btnMachine+0x142>
		btns[index].flag = 0;
 8003494:	4a48      	ldr	r2, [pc, #288]	; (80035b8 <btnMachine+0x14c>)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	011b      	lsls	r3, r3, #4
 800349a:	4413      	add	r3, r2
 800349c:	330c      	adds	r3, #12
 800349e:	2200      	movs	r2, #0
 80034a0:	601a      	str	r2, [r3, #0]
		lecturaBtn = HAL_GPIO_ReadPin(btns[index].Port, btns[index].pin);
 80034a2:	4a45      	ldr	r2, [pc, #276]	; (80035b8 <btnMachine+0x14c>)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	011b      	lsls	r3, r3, #4
 80034a8:	4413      	add	r3, r2
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	4942      	ldr	r1, [pc, #264]	; (80035b8 <btnMachine+0x14c>)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	011b      	lsls	r3, r3, #4
 80034b2:	440b      	add	r3, r1
 80034b4:	3304      	adds	r3, #4
 80034b6:	881b      	ldrh	r3, [r3, #0]
 80034b8:	4619      	mov	r1, r3
 80034ba:	4610      	mov	r0, r2
 80034bc:	f003 f804 	bl	80064c8 <HAL_GPIO_ReadPin>
 80034c0:	4603      	mov	r3, r0
 80034c2:	461a      	mov	r2, r3
 80034c4:	4b3d      	ldr	r3, [pc, #244]	; (80035bc <btnMachine+0x150>)
 80034c6:	601a      	str	r2, [r3, #0]
		if (lecturaBtn == 0) {
 80034c8:	4b3c      	ldr	r3, [pc, #240]	; (80035bc <btnMachine+0x150>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d169      	bne.n	80035a4 <btnMachine+0x138>
			ticks = HAL_GetTick();
 80034d0:	f001 fda4 	bl	800501c <HAL_GetTick>
 80034d4:	4603      	mov	r3, r0
 80034d6:	461a      	mov	r2, r3
 80034d8:	4b39      	ldr	r3, [pc, #228]	; (80035c0 <btnMachine+0x154>)
 80034da:	601a      	str	r2, [r3, #0]
			btns[index].estado = CONFIRMACION;
 80034dc:	4a36      	ldr	r2, [pc, #216]	; (80035b8 <btnMachine+0x14c>)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	011b      	lsls	r3, r3, #4
 80034e2:	4413      	add	r3, r2
 80034e4:	3308      	adds	r3, #8
 80034e6:	2201      	movs	r2, #1
 80034e8:	601a      	str	r2, [r3, #0]
		break;
 80034ea:	e05b      	b.n	80035a4 <btnMachine+0x138>
		lecturaBtn = HAL_GPIO_ReadPin(btns[index].Port, btns[index].pin);
 80034ec:	4a32      	ldr	r2, [pc, #200]	; (80035b8 <btnMachine+0x14c>)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	011b      	lsls	r3, r3, #4
 80034f2:	4413      	add	r3, r2
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	4930      	ldr	r1, [pc, #192]	; (80035b8 <btnMachine+0x14c>)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	011b      	lsls	r3, r3, #4
 80034fc:	440b      	add	r3, r1
 80034fe:	3304      	adds	r3, #4
 8003500:	881b      	ldrh	r3, [r3, #0]
 8003502:	4619      	mov	r1, r3
 8003504:	4610      	mov	r0, r2
 8003506:	f002 ffdf 	bl	80064c8 <HAL_GPIO_ReadPin>
 800350a:	4603      	mov	r3, r0
 800350c:	461a      	mov	r2, r3
 800350e:	4b2b      	ldr	r3, [pc, #172]	; (80035bc <btnMachine+0x150>)
 8003510:	601a      	str	r2, [r3, #0]
		if (lecturaBtn == 0 && HAL_GetTick() >= ticks + TICKS_BTN) {
 8003512:	4b2a      	ldr	r3, [pc, #168]	; (80035bc <btnMachine+0x150>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d10e      	bne.n	8003538 <btnMachine+0xcc>
 800351a:	f001 fd7f 	bl	800501c <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	4b27      	ldr	r3, [pc, #156]	; (80035c0 <btnMachine+0x154>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	3319      	adds	r3, #25
 8003526:	429a      	cmp	r2, r3
 8003528:	d306      	bcc.n	8003538 <btnMachine+0xcc>
			btns[index].estado = LIBERACION;
 800352a:	4a23      	ldr	r2, [pc, #140]	; (80035b8 <btnMachine+0x14c>)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	011b      	lsls	r3, r3, #4
 8003530:	4413      	add	r3, r2
 8003532:	3308      	adds	r3, #8
 8003534:	2202      	movs	r2, #2
 8003536:	601a      	str	r2, [r3, #0]
		if (lecturaBtn == 1 && ticks < TICKS_BTN) {
 8003538:	4b20      	ldr	r3, [pc, #128]	; (80035bc <btnMachine+0x150>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2b01      	cmp	r3, #1
 800353e:	d133      	bne.n	80035a8 <btnMachine+0x13c>
 8003540:	4b1f      	ldr	r3, [pc, #124]	; (80035c0 <btnMachine+0x154>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2b18      	cmp	r3, #24
 8003546:	dc2f      	bgt.n	80035a8 <btnMachine+0x13c>
			btns[index].estado = ESPERA;
 8003548:	4a1b      	ldr	r2, [pc, #108]	; (80035b8 <btnMachine+0x14c>)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	011b      	lsls	r3, r3, #4
 800354e:	4413      	add	r3, r2
 8003550:	3308      	adds	r3, #8
 8003552:	2200      	movs	r2, #0
 8003554:	601a      	str	r2, [r3, #0]
		break;
 8003556:	e027      	b.n	80035a8 <btnMachine+0x13c>
		lecturaBtn = HAL_GPIO_ReadPin(btns[index].Port, btns[index].pin);
 8003558:	4a17      	ldr	r2, [pc, #92]	; (80035b8 <btnMachine+0x14c>)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	011b      	lsls	r3, r3, #4
 800355e:	4413      	add	r3, r2
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	4915      	ldr	r1, [pc, #84]	; (80035b8 <btnMachine+0x14c>)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	011b      	lsls	r3, r3, #4
 8003568:	440b      	add	r3, r1
 800356a:	3304      	adds	r3, #4
 800356c:	881b      	ldrh	r3, [r3, #0]
 800356e:	4619      	mov	r1, r3
 8003570:	4610      	mov	r0, r2
 8003572:	f002 ffa9 	bl	80064c8 <HAL_GPIO_ReadPin>
 8003576:	4603      	mov	r3, r0
 8003578:	461a      	mov	r2, r3
 800357a:	4b10      	ldr	r3, [pc, #64]	; (80035bc <btnMachine+0x150>)
 800357c:	601a      	str	r2, [r3, #0]
		if (lecturaBtn == 1) {
 800357e:	4b0f      	ldr	r3, [pc, #60]	; (80035bc <btnMachine+0x150>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2b01      	cmp	r3, #1
 8003584:	d112      	bne.n	80035ac <btnMachine+0x140>
			btns[index].flag = 1;
 8003586:	4a0c      	ldr	r2, [pc, #48]	; (80035b8 <btnMachine+0x14c>)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	011b      	lsls	r3, r3, #4
 800358c:	4413      	add	r3, r2
 800358e:	330c      	adds	r3, #12
 8003590:	2201      	movs	r2, #1
 8003592:	601a      	str	r2, [r3, #0]
			btns[index].estado = ESPERA;
 8003594:	4a08      	ldr	r2, [pc, #32]	; (80035b8 <btnMachine+0x14c>)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	011b      	lsls	r3, r3, #4
 800359a:	4413      	add	r3, r2
 800359c:	3308      	adds	r3, #8
 800359e:	2200      	movs	r2, #0
 80035a0:	601a      	str	r2, [r3, #0]
		break;
 80035a2:	e003      	b.n	80035ac <btnMachine+0x140>
		break;
 80035a4:	bf00      	nop
 80035a6:	e002      	b.n	80035ae <btnMachine+0x142>
		break;
 80035a8:	bf00      	nop
 80035aa:	e000      	b.n	80035ae <btnMachine+0x142>
		break;
 80035ac:	bf00      	nop
}
 80035ae:	bf00      	nop
 80035b0:	3708      	adds	r7, #8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	20002360 	.word	0x20002360
 80035bc:	20002338 	.word	0x20002338
 80035c0:	20002334 	.word	0x20002334

080035c4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80035c4:	b480      	push	{r7}
 80035c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80035c8:	b672      	cpsid	i
}
 80035ca:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80035cc:	e7fe      	b.n	80035cc <Error_Handler+0x8>
	...

080035d0 <calcularDistancia>:
 */
#include "motors.h"

int counterD, counterI;

float calcularDistancia(int counter) {
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  return ((counter) * 2.51 / 10);
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f7fc ff13 	bl	8000404 <__aeabi_i2d>
 80035de:	a30c      	add	r3, pc, #48	; (adr r3, 8003610 <calcularDistancia+0x40>)
 80035e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e4:	f7fc ff78 	bl	80004d8 <__aeabi_dmul>
 80035e8:	4602      	mov	r2, r0
 80035ea:	460b      	mov	r3, r1
 80035ec:	4610      	mov	r0, r2
 80035ee:	4619      	mov	r1, r3
 80035f0:	f04f 0200 	mov.w	r2, #0
 80035f4:	4b08      	ldr	r3, [pc, #32]	; (8003618 <calcularDistancia+0x48>)
 80035f6:	f7fd f899 	bl	800072c <__aeabi_ddiv>
 80035fa:	4602      	mov	r2, r0
 80035fc:	460b      	mov	r3, r1
 80035fe:	4610      	mov	r0, r2
 8003600:	4619      	mov	r1, r3
 8003602:	f7fd fa61 	bl	8000ac8 <__aeabi_d2f>
 8003606:	4603      	mov	r3, r0
}
 8003608:	4618      	mov	r0, r3
 800360a:	3708      	adds	r7, #8
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}
 8003610:	e147ae14 	.word	0xe147ae14
 8003614:	4004147a 	.word	0x4004147a
 8003618:	40240000 	.word	0x40240000

0800361c <runMotor>:
	} else {
		TIM4->CCR3 = power;
	}
}

void runMotor(int dir, int motor) {
 800361c:	b580      	push	{r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
	switch (dir) {
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2b05      	cmp	r3, #5
 800362a:	d03f      	beq.n	80036ac <runMotor+0x90>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2b05      	cmp	r3, #5
 8003630:	dc57      	bgt.n	80036e2 <runMotor+0xc6>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d003      	beq.n	8003640 <runMotor+0x24>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2b02      	cmp	r3, #2
 800363c:	d01b      	beq.n	8003676 <runMotor+0x5a>
			HAL_GPIO_WritePin(BIN1, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(BIN2, GPIO_PIN_RESET);
		}
		break;
	}
}
 800363e:	e050      	b.n	80036e2 <runMotor+0xc6>
		if (motor == MOTOR_A) {
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d10a      	bne.n	800365c <runMotor+0x40>
			HAL_GPIO_WritePin(AIN1, GPIO_PIN_SET);
 8003646:	2201      	movs	r2, #1
 8003648:	2110      	movs	r1, #16
 800364a:	4828      	ldr	r0, [pc, #160]	; (80036ec <runMotor+0xd0>)
 800364c:	f002 ff53 	bl	80064f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(AIN2, GPIO_PIN_RESET);
 8003650:	2200      	movs	r2, #0
 8003652:	2120      	movs	r1, #32
 8003654:	4825      	ldr	r0, [pc, #148]	; (80036ec <runMotor+0xd0>)
 8003656:	f002 ff4e 	bl	80064f6 <HAL_GPIO_WritePin>
		break;
 800365a:	e042      	b.n	80036e2 <runMotor+0xc6>
			HAL_GPIO_WritePin(BIN1, GPIO_PIN_SET);
 800365c:	2201      	movs	r2, #1
 800365e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003662:	4823      	ldr	r0, [pc, #140]	; (80036f0 <runMotor+0xd4>)
 8003664:	f002 ff47 	bl	80064f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BIN2, GPIO_PIN_RESET);
 8003668:	2200      	movs	r2, #0
 800366a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800366e:	4820      	ldr	r0, [pc, #128]	; (80036f0 <runMotor+0xd4>)
 8003670:	f002 ff41 	bl	80064f6 <HAL_GPIO_WritePin>
		break;
 8003674:	e035      	b.n	80036e2 <runMotor+0xc6>
		if (motor == MOTOR_A) {
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d10a      	bne.n	8003692 <runMotor+0x76>
			HAL_GPIO_WritePin(AIN1, GPIO_PIN_RESET);
 800367c:	2200      	movs	r2, #0
 800367e:	2110      	movs	r1, #16
 8003680:	481a      	ldr	r0, [pc, #104]	; (80036ec <runMotor+0xd0>)
 8003682:	f002 ff38 	bl	80064f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(AIN2, GPIO_PIN_SET);
 8003686:	2201      	movs	r2, #1
 8003688:	2120      	movs	r1, #32
 800368a:	4818      	ldr	r0, [pc, #96]	; (80036ec <runMotor+0xd0>)
 800368c:	f002 ff33 	bl	80064f6 <HAL_GPIO_WritePin>
		break;
 8003690:	e027      	b.n	80036e2 <runMotor+0xc6>
			HAL_GPIO_WritePin(BIN1, GPIO_PIN_RESET);
 8003692:	2200      	movs	r2, #0
 8003694:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003698:	4815      	ldr	r0, [pc, #84]	; (80036f0 <runMotor+0xd4>)
 800369a:	f002 ff2c 	bl	80064f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BIN2, GPIO_PIN_SET);
 800369e:	2201      	movs	r2, #1
 80036a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80036a4:	4812      	ldr	r0, [pc, #72]	; (80036f0 <runMotor+0xd4>)
 80036a6:	f002 ff26 	bl	80064f6 <HAL_GPIO_WritePin>
		break;
 80036aa:	e01a      	b.n	80036e2 <runMotor+0xc6>
		if (motor == MOTOR_A) {
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d10a      	bne.n	80036c8 <runMotor+0xac>
			HAL_GPIO_WritePin(AIN1, GPIO_PIN_RESET);
 80036b2:	2200      	movs	r2, #0
 80036b4:	2110      	movs	r1, #16
 80036b6:	480d      	ldr	r0, [pc, #52]	; (80036ec <runMotor+0xd0>)
 80036b8:	f002 ff1d 	bl	80064f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(AIN2, GPIO_PIN_RESET);
 80036bc:	2200      	movs	r2, #0
 80036be:	2120      	movs	r1, #32
 80036c0:	480a      	ldr	r0, [pc, #40]	; (80036ec <runMotor+0xd0>)
 80036c2:	f002 ff18 	bl	80064f6 <HAL_GPIO_WritePin>
		break;
 80036c6:	e00b      	b.n	80036e0 <runMotor+0xc4>
			HAL_GPIO_WritePin(BIN1, GPIO_PIN_RESET);
 80036c8:	2200      	movs	r2, #0
 80036ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80036ce:	4808      	ldr	r0, [pc, #32]	; (80036f0 <runMotor+0xd4>)
 80036d0:	f002 ff11 	bl	80064f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BIN2, GPIO_PIN_RESET);
 80036d4:	2200      	movs	r2, #0
 80036d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80036da:	4805      	ldr	r0, [pc, #20]	; (80036f0 <runMotor+0xd4>)
 80036dc:	f002 ff0b 	bl	80064f6 <HAL_GPIO_WritePin>
		break;
 80036e0:	bf00      	nop
}
 80036e2:	bf00      	nop
 80036e4:	3708      	adds	r7, #8
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	40010c00 	.word	0x40010c00
 80036f0:	40010800 	.word	0x40010800

080036f4 <rotateAxis>:
#include "defs.h"
#include "main.h"

float offset = 0;
int giro = 0;
void rotateAxis(int direccion, int direcciones[4]) {
 80036f4:	b480      	push	{r7}
 80036f6:	b085      	sub	sp, #20
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
	switch (direccion) {
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2b01      	cmp	r3, #1
 8003702:	d025      	beq.n	8003750 <rotateAxis+0x5c>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2b03      	cmp	r3, #3
 8003708:	d144      	bne.n	8003794 <rotateAxis+0xa0>
	case DERECHA:
		for (int i = 0; i < 4; i++) {
 800370a:	2300      	movs	r3, #0
 800370c:	60fb      	str	r3, [r7, #12]
 800370e:	e01b      	b.n	8003748 <rotateAxis+0x54>
			direcciones[i] = direcciones[i] - 1;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	683a      	ldr	r2, [r7, #0]
 8003716:	4413      	add	r3, r2
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	6839      	ldr	r1, [r7, #0]
 8003720:	440b      	add	r3, r1
 8003722:	3a01      	subs	r2, #1
 8003724:	601a      	str	r2, [r3, #0]
			if (direcciones[i] == -1) {
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	683a      	ldr	r2, [r7, #0]
 800372c:	4413      	add	r3, r2
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003734:	d105      	bne.n	8003742 <rotateAxis+0x4e>
				direcciones[i] = 3;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	683a      	ldr	r2, [r7, #0]
 800373c:	4413      	add	r3, r2
 800373e:	2203      	movs	r2, #3
 8003740:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < 4; i++) {
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	3301      	adds	r3, #1
 8003746:	60fb      	str	r3, [r7, #12]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2b03      	cmp	r3, #3
 800374c:	dde0      	ble.n	8003710 <rotateAxis+0x1c>
			}
		}
		break;
 800374e:	e021      	b.n	8003794 <rotateAxis+0xa0>
	case IZQUIERDA:
		for (int j = 0; j < 4; j++) {
 8003750:	2300      	movs	r3, #0
 8003752:	60bb      	str	r3, [r7, #8]
 8003754:	e01a      	b.n	800378c <rotateAxis+0x98>
			direcciones[j] = direcciones[j] + 1;
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	683a      	ldr	r2, [r7, #0]
 800375c:	4413      	add	r3, r2
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	6839      	ldr	r1, [r7, #0]
 8003766:	440b      	add	r3, r1
 8003768:	3201      	adds	r2, #1
 800376a:	601a      	str	r2, [r3, #0]
			if (direcciones[j] == 4) {
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	683a      	ldr	r2, [r7, #0]
 8003772:	4413      	add	r3, r2
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2b04      	cmp	r3, #4
 8003778:	d105      	bne.n	8003786 <rotateAxis+0x92>
				direcciones[j] = 0;
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	683a      	ldr	r2, [r7, #0]
 8003780:	4413      	add	r3, r2
 8003782:	2200      	movs	r2, #0
 8003784:	601a      	str	r2, [r3, #0]
		for (int j = 0; j < 4; j++) {
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	3301      	adds	r3, #1
 800378a:	60bb      	str	r3, [r7, #8]
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	2b03      	cmp	r3, #3
 8003790:	dde1      	ble.n	8003756 <rotateAxis+0x62>
			}
		}
		break;
 8003792:	bf00      	nop
	}
}
 8003794:	bf00      	nop
 8003796:	3714      	adds	r7, #20
 8003798:	46bd      	mov	sp, r7
 800379a:	bc80      	pop	{r7}
 800379c:	4770      	bx	lr

0800379e <resetAxis>:

void resetAxis(int direcciones[4]) {
 800379e:	b480      	push	{r7}
 80037a0:	b085      	sub	sp, #20
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 4; i++) {
 80037a6:	2300      	movs	r3, #0
 80037a8:	60fb      	str	r3, [r7, #12]
 80037aa:	e008      	b.n	80037be <resetAxis+0x20>
		direcciones[i] = i;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	4413      	add	r3, r2
 80037b4:	68fa      	ldr	r2, [r7, #12]
 80037b6:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 4; i++) {
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	3301      	adds	r3, #1
 80037bc:	60fb      	str	r3, [r7, #12]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2b03      	cmp	r3, #3
 80037c2:	ddf3      	ble.n	80037ac <resetAxis+0xe>
	}
}
 80037c4:	bf00      	nop
 80037c6:	bf00      	nop
 80037c8:	3714      	adds	r7, #20
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bc80      	pop	{r7}
 80037ce:	4770      	bx	lr

080037d0 <movementMachine>:

void movementMachine(int move) {
 80037d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80037d4:	b083      	sub	sp, #12
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]
	switch (movementState) {
 80037da:	4b89      	ldr	r3, [pc, #548]	; (8003a00 <movementMachine+0x230>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2b05      	cmp	r3, #5
 80037e0:	f200 834e 	bhi.w	8003e80 <movementMachine+0x6b0>
 80037e4:	a201      	add	r2, pc, #4	; (adr r2, 80037ec <movementMachine+0x1c>)
 80037e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ea:	bf00      	nop
 80037ec:	08003843 	.word	0x08003843
 80037f0:	08003a45 	.word	0x08003a45
 80037f4:	08003d49 	.word	0x08003d49
 80037f8:	08003be3 	.word	0x08003be3
 80037fc:	08003e81 	.word	0x08003e81
 8003800:	08003805 	.word	0x08003805
	case OFF:
		/*runMotor(OFF, MOTOR_A);
		runMotor(OFF, MOTOR_B);*/
		if (move != OFF) {
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2b05      	cmp	r3, #5
 8003808:	f000 8339 	beq.w	8003e7e <movementMachine+0x6ae>
			movementState = move;
 800380c:	4a7c      	ldr	r2, [pc, #496]	; (8003a00 <movementMachine+0x230>)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6013      	str	r3, [r2, #0]
			if (move != ADELANTE) {
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d00a      	beq.n	800382e <movementMachine+0x5e>
				TIM3->CNT = 0;
 8003818:	4b7a      	ldr	r3, [pc, #488]	; (8003a04 <movementMachine+0x234>)
 800381a:	2200      	movs	r2, #0
 800381c:	625a      	str	r2, [r3, #36]	; 0x24
				TIM1->CNT = 0;
 800381e:	4b7a      	ldr	r3, [pc, #488]	; (8003a08 <movementMachine+0x238>)
 8003820:	2200      	movs	r2, #0
 8003822:	625a      	str	r2, [r3, #36]	; 0x24
				offset = 0;
 8003824:	4b79      	ldr	r3, [pc, #484]	; (8003a0c <movementMachine+0x23c>)
 8003826:	f04f 0200 	mov.w	r2, #0
 800382a:	601a      	str	r2, [r3, #0]
				TIM1->CNT = 100;
				offset = 25.1;
			}
			//intUartSend(TIM3->CNT);
		}
		break;
 800382c:	e327      	b.n	8003e7e <movementMachine+0x6ae>
				TIM3->CNT = 100;
 800382e:	4b75      	ldr	r3, [pc, #468]	; (8003a04 <movementMachine+0x234>)
 8003830:	2264      	movs	r2, #100	; 0x64
 8003832:	625a      	str	r2, [r3, #36]	; 0x24
				TIM1->CNT = 100;
 8003834:	4b74      	ldr	r3, [pc, #464]	; (8003a08 <movementMachine+0x238>)
 8003836:	2264      	movs	r2, #100	; 0x64
 8003838:	625a      	str	r2, [r3, #36]	; 0x24
				offset = 25.1;
 800383a:	4b74      	ldr	r3, [pc, #464]	; (8003a0c <movementMachine+0x23c>)
 800383c:	4a74      	ldr	r2, [pc, #464]	; (8003a10 <movementMachine+0x240>)
 800383e:	601a      	str	r2, [r3, #0]
		break;
 8003840:	e31d      	b.n	8003e7e <movementMachine+0x6ae>
	case ADELANTE:
		//TIM4->CCR3 = xSpeed;
		//TIM4->CCR4 = xSpeed;
		//intUartSend(TIM1->CNT);
		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
		objectiveDistance = forwardChoice[choice] + offset;
 8003842:	4b74      	ldr	r3, [pc, #464]	; (8003a14 <movementMachine+0x244>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a74      	ldr	r2, [pc, #464]	; (8003a18 <movementMachine+0x248>)
 8003848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800384c:	4618      	mov	r0, r3
 800384e:	f7fd fa45 	bl	8000cdc <__aeabi_i2f>
 8003852:	4602      	mov	r2, r0
 8003854:	4b6d      	ldr	r3, [pc, #436]	; (8003a0c <movementMachine+0x23c>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4619      	mov	r1, r3
 800385a:	4610      	mov	r0, r2
 800385c:	f7fd f98a 	bl	8000b74 <__addsf3>
 8003860:	4603      	mov	r3, r0
 8003862:	4618      	mov	r0, r3
 8003864:	f7fd fc54 	bl	8001110 <__aeabi_f2iz>
 8003868:	4603      	mov	r3, r0
 800386a:	4a6c      	ldr	r2, [pc, #432]	; (8003a1c <movementMachine+0x24c>)
 800386c:	6013      	str	r3, [r2, #0]
		//acelerationObjective = offset;
		//if (Sensors[2] > 5) {
		if (((calcularDistancia((TIM3->CNT) >> 1)
 800386e:	4b65      	ldr	r3, [pc, #404]	; (8003a04 <movementMachine+0x234>)
 8003870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003872:	085b      	lsrs	r3, r3, #1
 8003874:	4618      	mov	r0, r3
 8003876:	f7ff feab 	bl	80035d0 <calcularDistancia>
 800387a:	4604      	mov	r4, r0
				+ calcularDistancia((TIM1->CNT) >> 1)) / 2
 800387c:	4b62      	ldr	r3, [pc, #392]	; (8003a08 <movementMachine+0x238>)
 800387e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003880:	085b      	lsrs	r3, r3, #1
 8003882:	4618      	mov	r0, r3
 8003884:	f7ff fea4 	bl	80035d0 <calcularDistancia>
 8003888:	4603      	mov	r3, r0
 800388a:	4619      	mov	r1, r3
 800388c:	4620      	mov	r0, r4
 800388e:	f7fd f971 	bl	8000b74 <__addsf3>
 8003892:	4603      	mov	r3, r0
 8003894:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003898:	4618      	mov	r0, r3
 800389a:	f7fd fb27 	bl	8000eec <__aeabi_fdiv>
 800389e:	4603      	mov	r3, r0
 80038a0:	461c      	mov	r4, r3
				< forwardChoice[choice] + offset
 80038a2:	4b5c      	ldr	r3, [pc, #368]	; (8003a14 <movementMachine+0x244>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a5c      	ldr	r2, [pc, #368]	; (8003a18 <movementMachine+0x248>)
 80038a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038ac:	4618      	mov	r0, r3
 80038ae:	f7fd fa15 	bl	8000cdc <__aeabi_i2f>
 80038b2:	4602      	mov	r2, r0
 80038b4:	4b55      	ldr	r3, [pc, #340]	; (8003a0c <movementMachine+0x23c>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4619      	mov	r1, r3
 80038ba:	4610      	mov	r0, r2
 80038bc:	f7fd f95a 	bl	8000b74 <__addsf3>
 80038c0:	4603      	mov	r3, r0
		if (((calcularDistancia((TIM3->CNT) >> 1)
 80038c2:	4619      	mov	r1, r3
 80038c4:	4620      	mov	r0, r4
 80038c6:	f7fd fbfb 	bl	80010c0 <__aeabi_fcmplt>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d13e      	bne.n	800394e <movementMachine+0x17e>
				|| (calcularDistancia((TIM3->CNT) >> 1)
 80038d0:	4b4c      	ldr	r3, [pc, #304]	; (8003a04 <movementMachine+0x234>)
 80038d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d4:	085b      	lsrs	r3, r3, #1
 80038d6:	4618      	mov	r0, r3
 80038d8:	f7ff fe7a 	bl	80035d0 <calcularDistancia>
 80038dc:	4604      	mov	r4, r0
						+ calcularDistancia((TIM1->CNT) >> 1)) / 2
 80038de:	4b4a      	ldr	r3, [pc, #296]	; (8003a08 <movementMachine+0x238>)
 80038e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e2:	085b      	lsrs	r3, r3, #1
 80038e4:	4618      	mov	r0, r3
 80038e6:	f7ff fe73 	bl	80035d0 <calcularDistancia>
 80038ea:	4603      	mov	r3, r0
 80038ec:	4619      	mov	r1, r3
 80038ee:	4620      	mov	r0, r4
 80038f0:	f7fd f940 	bl	8000b74 <__addsf3>
 80038f4:	4603      	mov	r3, r0
 80038f6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80038fa:	4618      	mov	r0, r3
 80038fc:	f7fd faf6 	bl	8000eec <__aeabi_fdiv>
 8003900:	4603      	mov	r3, r0
 8003902:	4618      	mov	r0, r3
 8003904:	f7fc fd90 	bl	8000428 <__aeabi_f2d>
 8003908:	4604      	mov	r4, r0
 800390a:	460d      	mov	r5, r1
						> forwardChoice[choice] + offset + 0.5 ) ){
 800390c:	4b41      	ldr	r3, [pc, #260]	; (8003a14 <movementMachine+0x244>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a41      	ldr	r2, [pc, #260]	; (8003a18 <movementMachine+0x248>)
 8003912:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003916:	4618      	mov	r0, r3
 8003918:	f7fd f9e0 	bl	8000cdc <__aeabi_i2f>
 800391c:	4602      	mov	r2, r0
 800391e:	4b3b      	ldr	r3, [pc, #236]	; (8003a0c <movementMachine+0x23c>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4619      	mov	r1, r3
 8003924:	4610      	mov	r0, r2
 8003926:	f7fd f925 	bl	8000b74 <__addsf3>
 800392a:	4603      	mov	r3, r0
 800392c:	4618      	mov	r0, r3
 800392e:	f7fc fd7b 	bl	8000428 <__aeabi_f2d>
 8003932:	f04f 0200 	mov.w	r2, #0
 8003936:	4b3a      	ldr	r3, [pc, #232]	; (8003a20 <movementMachine+0x250>)
 8003938:	f7fc fc18 	bl	800016c <__adddf3>
 800393c:	4602      	mov	r2, r0
 800393e:	460b      	mov	r3, r1
				|| (calcularDistancia((TIM3->CNT) >> 1)
 8003940:	4620      	mov	r0, r4
 8003942:	4629      	mov	r1, r5
 8003944:	f7fd f858 	bl	80009f8 <__aeabi_dcmpgt>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d020      	beq.n	8003990 <movementMachine+0x1c0>
			//moveStraight();
			StraightFlag = 1;
 800394e:	4b35      	ldr	r3, [pc, #212]	; (8003a24 <movementMachine+0x254>)
 8003950:	2201      	movs	r2, #1
 8003952:	601a      	str	r2, [r3, #0]
			KPP = KPPchoice[SLOW];
 8003954:	4b34      	ldr	r3, [pc, #208]	; (8003a28 <movementMachine+0x258>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a34      	ldr	r2, [pc, #208]	; (8003a2c <movementMachine+0x25c>)
 800395a:	6013      	str	r3, [r2, #0]
			KDP = KDPchoice[SLOW];
 800395c:	4b34      	ldr	r3, [pc, #208]	; (8003a30 <movementMachine+0x260>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a34      	ldr	r2, [pc, #208]	; (8003a34 <movementMachine+0x264>)
 8003962:	6013      	str	r3, [r2, #0]

			//intUartSend(objectiveDistance -(calcularDistancia(TIM3->CNT) + calcularDistancia(TIM1->CNT))/2);
			//intUartSend(1);
			if (direction == ADELANTE) {
 8003964:	4b34      	ldr	r3, [pc, #208]	; (8003a38 <movementMachine+0x268>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d108      	bne.n	800397e <movementMachine+0x1ae>
				runMotor(ADELANTE, MOTOR_A);
 800396c:	2100      	movs	r1, #0
 800396e:	2000      	movs	r0, #0
 8003970:	f7ff fe54 	bl	800361c <runMotor>
				runMotor(ADELANTE, MOTOR_B);
 8003974:	2101      	movs	r1, #1
 8003976:	2000      	movs	r0, #0
 8003978:	f7ff fe50 	bl	800361c <runMotor>
			if (direction == ADELANTE) {
 800397c:	e03e      	b.n	80039fc <movementMachine+0x22c>
			} else {
				runMotor(ATRAS, MOTOR_A);
 800397e:	2100      	movs	r1, #0
 8003980:	2002      	movs	r0, #2
 8003982:	f7ff fe4b 	bl	800361c <runMotor>
				runMotor(ATRAS, MOTOR_B);
 8003986:	2101      	movs	r1, #1
 8003988:	2002      	movs	r0, #2
 800398a:	f7ff fe47 	bl	800361c <runMotor>
			if (direction == ADELANTE) {
 800398e:	e035      	b.n	80039fc <movementMachine+0x22c>
			}

		} else {
			StraightFlag = 0;
 8003990:	4b24      	ldr	r3, [pc, #144]	; (8003a24 <movementMachine+0x254>)
 8003992:	2200      	movs	r2, #0
 8003994:	601a      	str	r2, [r3, #0]
			movimientoFlag = 1;
 8003996:	4b29      	ldr	r3, [pc, #164]	; (8003a3c <movementMachine+0x26c>)
 8003998:	2201      	movs	r2, #1
 800399a:	601a      	str	r2, [r3, #0]
			movementState = OFF;
 800399c:	4b18      	ldr	r3, [pc, #96]	; (8003a00 <movementMachine+0x230>)
 800399e:	2205      	movs	r2, #5
 80039a0:	601a      	str	r2, [r3, #0]
			runMotor(OFF, MOTOR_A);
 80039a2:	2100      	movs	r1, #0
 80039a4:	2005      	movs	r0, #5
 80039a6:	f7ff fe39 	bl	800361c <runMotor>
			runMotor(OFF, MOTOR_B);
 80039aa:	2101      	movs	r1, #1
 80039ac:	2005      	movs	r0, #5
 80039ae:	f7ff fe35 	bl	800361c <runMotor>
			intUartSend(offset);
 80039b2:	4b16      	ldr	r3, [pc, #88]	; (8003a0c <movementMachine+0x23c>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7fe f852 	bl	8001a60 <intUartSend>
			aceleration = ADELANTE;
 80039bc:	4b20      	ldr	r3, [pc, #128]	; (8003a40 <movementMachine+0x270>)
 80039be:	2200      	movs	r2, #0
 80039c0:	601a      	str	r2, [r3, #0]
			//TIM3->CNT = 0;
			//TIM1->CNT = 0;

			offset = (calcularDistancia((TIM3->CNT) >> 1)
 80039c2:	4b10      	ldr	r3, [pc, #64]	; (8003a04 <movementMachine+0x234>)
 80039c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c6:	085b      	lsrs	r3, r3, #1
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7ff fe01 	bl	80035d0 <calcularDistancia>
 80039ce:	4604      	mov	r4, r0
					+ calcularDistancia((TIM1->CNT) >> 1)) / 2;
 80039d0:	4b0d      	ldr	r3, [pc, #52]	; (8003a08 <movementMachine+0x238>)
 80039d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d4:	085b      	lsrs	r3, r3, #1
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7ff fdfa 	bl	80035d0 <calcularDistancia>
 80039dc:	4603      	mov	r3, r0
 80039de:	4619      	mov	r1, r3
 80039e0:	4620      	mov	r0, r4
 80039e2:	f7fd f8c7 	bl	8000b74 <__addsf3>
 80039e6:	4603      	mov	r3, r0
 80039e8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80039ec:	4618      	mov	r0, r3
 80039ee:	f7fd fa7d 	bl	8000eec <__aeabi_fdiv>
 80039f2:	4603      	mov	r3, r0
 80039f4:	461a      	mov	r2, r3
			offset = (calcularDistancia((TIM3->CNT) >> 1)
 80039f6:	4b05      	ldr	r3, [pc, #20]	; (8003a0c <movementMachine+0x23c>)
 80039f8:	601a      	str	r2, [r3, #0]
		 movementState = OFF;
		 offset = (calcularDistancia((TIM3->CNT) >> 1)
		 + calcularDistancia((TIM1->CNT) >> 1)) / 2;

		 }*/
		break;
 80039fa:	e241      	b.n	8003e80 <movementMachine+0x6b0>
 80039fc:	e240      	b.n	8003e80 <movementMachine+0x6b0>
 80039fe:	bf00      	nop
 8003a00:	20000070 	.word	0x20000070
 8003a04:	40000400 	.word	0x40000400
 8003a08:	40012c00 	.word	0x40012c00
 8003a0c:	200040d0 	.word	0x200040d0
 8003a10:	41c8cccd 	.word	0x41c8cccd
 8003a14:	20002320 	.word	0x20002320
 8003a18:	20000054 	.word	0x20000054
 8003a1c:	200040c4 	.word	0x200040c4
 8003a20:	3fe00000 	.word	0x3fe00000
 8003a24:	200040bc 	.word	0x200040bc
 8003a28:	20000020 	.word	0x20000020
 8003a2c:	200040ac 	.word	0x200040ac
 8003a30:	20000030 	.word	0x20000030
 8003a34:	200040b0 	.word	0x200040b0
 8003a38:	200040c8 	.word	0x200040c8
 8003a3c:	20002358 	.word	0x20002358
 8003a40:	200040cc 	.word	0x200040cc
	case IZQUIERDA:
		TIM4->CCR3 = baseChoice[choice]
 8003a44:	4bac      	ldr	r3, [pc, #688]	; (8003cf8 <movementMachine+0x528>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4aac      	ldr	r2, [pc, #688]	; (8003cfc <movementMachine+0x52c>)
 8003a4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				- (calcularDistancia((TIM3->CNT) >> 1)
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f7fc fcd8 	bl	8000404 <__aeabi_i2d>
 8003a54:	4604      	mov	r4, r0
 8003a56:	460d      	mov	r5, r1
 8003a58:	4ba9      	ldr	r3, [pc, #676]	; (8003d00 <movementMachine+0x530>)
 8003a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5c:	085b      	lsrs	r3, r3, #1
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f7ff fdb6 	bl	80035d0 <calcularDistancia>
 8003a64:	4606      	mov	r6, r0
						* (baseChoice[choice] / LeftChoice[choice])
 8003a66:	4ba4      	ldr	r3, [pc, #656]	; (8003cf8 <movementMachine+0x528>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4aa4      	ldr	r2, [pc, #656]	; (8003cfc <movementMachine+0x52c>)
 8003a6c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003a70:	4ba1      	ldr	r3, [pc, #644]	; (8003cf8 <movementMachine+0x528>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	49a3      	ldr	r1, [pc, #652]	; (8003d04 <movementMachine+0x534>)
 8003a76:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003a7a:	fb92 f3f3 	sdiv	r3, r2, r3
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7fd f92c 	bl	8000cdc <__aeabi_i2f>
 8003a84:	4603      	mov	r3, r0
 8003a86:	4619      	mov	r1, r3
 8003a88:	4630      	mov	r0, r6
 8003a8a:	f7fd f97b 	bl	8000d84 <__aeabi_fmul>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	4618      	mov	r0, r3
 8003a92:	f7fc fcc9 	bl	8000428 <__aeabi_f2d>
 8003a96:	4680      	mov	r8, r0
 8003a98:	4689      	mov	r9, r1
						- baseChoice[choice] / 1.8);
 8003a9a:	4b97      	ldr	r3, [pc, #604]	; (8003cf8 <movementMachine+0x528>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a97      	ldr	r2, [pc, #604]	; (8003cfc <movementMachine+0x52c>)
 8003aa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7fc fcad 	bl	8000404 <__aeabi_i2d>
 8003aaa:	a391      	add	r3, pc, #580	; (adr r3, 8003cf0 <movementMachine+0x520>)
 8003aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab0:	f7fc fe3c 	bl	800072c <__aeabi_ddiv>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	460b      	mov	r3, r1
 8003ab8:	4640      	mov	r0, r8
 8003aba:	4649      	mov	r1, r9
 8003abc:	f7fc fb54 	bl	8000168 <__aeabi_dsub>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	460b      	mov	r3, r1
				- (calcularDistancia((TIM3->CNT) >> 1)
 8003ac4:	4620      	mov	r0, r4
 8003ac6:	4629      	mov	r1, r5
 8003ac8:	f7fc fb4e 	bl	8000168 <__aeabi_dsub>
 8003acc:	4602      	mov	r2, r0
 8003ace:	460b      	mov	r3, r1
		TIM4->CCR3 = baseChoice[choice]
 8003ad0:	4c8d      	ldr	r4, [pc, #564]	; (8003d08 <movementMachine+0x538>)
 8003ad2:	4610      	mov	r0, r2
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	f7fc ffd7 	bl	8000a88 <__aeabi_d2uiz>
 8003ada:	4603      	mov	r3, r0
 8003adc:	63e3      	str	r3, [r4, #60]	; 0x3c
		TIM4->CCR4 = baseChoice[choice]
 8003ade:	4b86      	ldr	r3, [pc, #536]	; (8003cf8 <movementMachine+0x528>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a86      	ldr	r2, [pc, #536]	; (8003cfc <movementMachine+0x52c>)
 8003ae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				- (calcularDistancia((TIM3->CNT) >> 1)
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7fc fc8b 	bl	8000404 <__aeabi_i2d>
 8003aee:	4604      	mov	r4, r0
 8003af0:	460d      	mov	r5, r1
 8003af2:	4b83      	ldr	r3, [pc, #524]	; (8003d00 <movementMachine+0x530>)
 8003af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af6:	085b      	lsrs	r3, r3, #1
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7ff fd69 	bl	80035d0 <calcularDistancia>
 8003afe:	4606      	mov	r6, r0
						* (baseChoice[choice] / LeftChoice[choice])
 8003b00:	4b7d      	ldr	r3, [pc, #500]	; (8003cf8 <movementMachine+0x528>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a7d      	ldr	r2, [pc, #500]	; (8003cfc <movementMachine+0x52c>)
 8003b06:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003b0a:	4b7b      	ldr	r3, [pc, #492]	; (8003cf8 <movementMachine+0x528>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	497d      	ldr	r1, [pc, #500]	; (8003d04 <movementMachine+0x534>)
 8003b10:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003b14:	fb92 f3f3 	sdiv	r3, r2, r3
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f7fd f8df 	bl	8000cdc <__aeabi_i2f>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	4619      	mov	r1, r3
 8003b22:	4630      	mov	r0, r6
 8003b24:	f7fd f92e 	bl	8000d84 <__aeabi_fmul>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f7fc fc7c 	bl	8000428 <__aeabi_f2d>
 8003b30:	4680      	mov	r8, r0
 8003b32:	4689      	mov	r9, r1
						- baseChoice[choice] / 1.8);
 8003b34:	4b70      	ldr	r3, [pc, #448]	; (8003cf8 <movementMachine+0x528>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a70      	ldr	r2, [pc, #448]	; (8003cfc <movementMachine+0x52c>)
 8003b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7fc fc60 	bl	8000404 <__aeabi_i2d>
 8003b44:	a36a      	add	r3, pc, #424	; (adr r3, 8003cf0 <movementMachine+0x520>)
 8003b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b4a:	f7fc fdef 	bl	800072c <__aeabi_ddiv>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	460b      	mov	r3, r1
 8003b52:	4640      	mov	r0, r8
 8003b54:	4649      	mov	r1, r9
 8003b56:	f7fc fb07 	bl	8000168 <__aeabi_dsub>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	460b      	mov	r3, r1
				- (calcularDistancia((TIM3->CNT) >> 1)
 8003b5e:	4620      	mov	r0, r4
 8003b60:	4629      	mov	r1, r5
 8003b62:	f7fc fb01 	bl	8000168 <__aeabi_dsub>
 8003b66:	4602      	mov	r2, r0
 8003b68:	460b      	mov	r3, r1
		TIM4->CCR4 = baseChoice[choice]
 8003b6a:	4c67      	ldr	r4, [pc, #412]	; (8003d08 <movementMachine+0x538>)
 8003b6c:	4610      	mov	r0, r2
 8003b6e:	4619      	mov	r1, r3
 8003b70:	f7fc ff8a 	bl	8000a88 <__aeabi_d2uiz>
 8003b74:	4603      	mov	r3, r0
 8003b76:	6423      	str	r3, [r4, #64]	; 0x40
		//intUartSend((TIM3->CNT));
		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
		if (calcularDistancia((TIM3->CNT) >> 1) < LeftChoice[choice]) {
 8003b78:	4b61      	ldr	r3, [pc, #388]	; (8003d00 <movementMachine+0x530>)
 8003b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7c:	085b      	lsrs	r3, r3, #1
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f7ff fd26 	bl	80035d0 <calcularDistancia>
 8003b84:	4604      	mov	r4, r0
 8003b86:	4b5c      	ldr	r3, [pc, #368]	; (8003cf8 <movementMachine+0x528>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a5e      	ldr	r2, [pc, #376]	; (8003d04 <movementMachine+0x534>)
 8003b8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b90:	4618      	mov	r0, r3
 8003b92:	f7fd f8a3 	bl	8000cdc <__aeabi_i2f>
 8003b96:	4603      	mov	r3, r0
 8003b98:	4619      	mov	r1, r3
 8003b9a:	4620      	mov	r0, r4
 8003b9c:	f7fd fa90 	bl	80010c0 <__aeabi_fcmplt>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d008      	beq.n	8003bb8 <movementMachine+0x3e8>
			runMotor(ADELANTE, MOTOR_A);
 8003ba6:	2100      	movs	r1, #0
 8003ba8:	2000      	movs	r0, #0
 8003baa:	f7ff fd37 	bl	800361c <runMotor>
			runMotor(ATRAS, MOTOR_B);
 8003bae:	2101      	movs	r1, #1
 8003bb0:	2002      	movs	r0, #2
 8003bb2:	f7ff fd33 	bl	800361c <runMotor>
			TIM1->CNT = 100;
			offset = 25.1;
			//giro = 1;
			//intUartSend(9);
		}
		break;
 8003bb6:	e163      	b.n	8003e80 <movementMachine+0x6b0>
			movementState = ADELANTE;
 8003bb8:	4b54      	ldr	r3, [pc, #336]	; (8003d0c <movementMachine+0x53c>)
 8003bba:	2200      	movs	r2, #0
 8003bbc:	601a      	str	r2, [r3, #0]
			runMotor(OFF, MOTOR_A);
 8003bbe:	2100      	movs	r1, #0
 8003bc0:	2005      	movs	r0, #5
 8003bc2:	f7ff fd2b 	bl	800361c <runMotor>
			runMotor(OFF, MOTOR_B);
 8003bc6:	2101      	movs	r1, #1
 8003bc8:	2005      	movs	r0, #5
 8003bca:	f7ff fd27 	bl	800361c <runMotor>
			TIM3->CNT = 100;
 8003bce:	4b4c      	ldr	r3, [pc, #304]	; (8003d00 <movementMachine+0x530>)
 8003bd0:	2264      	movs	r2, #100	; 0x64
 8003bd2:	625a      	str	r2, [r3, #36]	; 0x24
			TIM1->CNT = 100;
 8003bd4:	4b4e      	ldr	r3, [pc, #312]	; (8003d10 <movementMachine+0x540>)
 8003bd6:	2264      	movs	r2, #100	; 0x64
 8003bd8:	625a      	str	r2, [r3, #36]	; 0x24
			offset = 25.1;
 8003bda:	4b4e      	ldr	r3, [pc, #312]	; (8003d14 <movementMachine+0x544>)
 8003bdc:	4a4e      	ldr	r2, [pc, #312]	; (8003d18 <movementMachine+0x548>)
 8003bde:	601a      	str	r2, [r3, #0]
		break;
 8003be0:	e14e      	b.n	8003e80 <movementMachine+0x6b0>
	case DERECHA:
		TIM4->CCR3 = xSpeed;
 8003be2:	4b4e      	ldr	r3, [pc, #312]	; (8003d1c <movementMachine+0x54c>)
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	4b48      	ldr	r3, [pc, #288]	; (8003d08 <movementMachine+0x538>)
 8003be8:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM4->CCR4 = xSpeed;
 8003bea:	4b4c      	ldr	r3, [pc, #304]	; (8003d1c <movementMachine+0x54c>)
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	4b46      	ldr	r3, [pc, #280]	; (8003d08 <movementMachine+0x538>)
 8003bf0:	641a      	str	r2, [r3, #64]	; 0x40
			offset = 25.1;
			//intUartSend(8);
		}*/


		objectiveDistance = RightChoice[choice]/* + offset*/;
 8003bf2:	4b41      	ldr	r3, [pc, #260]	; (8003cf8 <movementMachine+0x528>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a4a      	ldr	r2, [pc, #296]	; (8003d20 <movementMachine+0x550>)
 8003bf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bfc:	4a49      	ldr	r2, [pc, #292]	; (8003d24 <movementMachine+0x554>)
 8003bfe:	6013      	str	r3, [r2, #0]
		if (calcularDistancia((TIM1->CNT) >> 1) < RightChoice[choice]
 8003c00:	4b43      	ldr	r3, [pc, #268]	; (8003d10 <movementMachine+0x540>)
 8003c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c04:	085b      	lsrs	r3, r3, #1
 8003c06:	4618      	mov	r0, r3
 8003c08:	f7ff fce2 	bl	80035d0 <calcularDistancia>
 8003c0c:	4604      	mov	r4, r0
 8003c0e:	4b3a      	ldr	r3, [pc, #232]	; (8003cf8 <movementMachine+0x528>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a43      	ldr	r2, [pc, #268]	; (8003d20 <movementMachine+0x550>)
 8003c14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f7fd f85f 	bl	8000cdc <__aeabi_i2f>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	4619      	mov	r1, r3
 8003c22:	4620      	mov	r0, r4
 8003c24:	f7fd fa4c 	bl	80010c0 <__aeabi_fcmplt>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d121      	bne.n	8003c72 <movementMachine+0x4a2>
				|| calcularDistancia((TIM1->CNT) >> 1)
 8003c2e:	4b38      	ldr	r3, [pc, #224]	; (8003d10 <movementMachine+0x540>)
 8003c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c32:	085b      	lsrs	r3, r3, #1
 8003c34:	4618      	mov	r0, r3
 8003c36:	f7ff fccb 	bl	80035d0 <calcularDistancia>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f7fc fbf3 	bl	8000428 <__aeabi_f2d>
 8003c42:	4604      	mov	r4, r0
 8003c44:	460d      	mov	r5, r1
						> RightChoice[choice] + 0.5) {
 8003c46:	4b2c      	ldr	r3, [pc, #176]	; (8003cf8 <movementMachine+0x528>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a35      	ldr	r2, [pc, #212]	; (8003d20 <movementMachine+0x550>)
 8003c4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c50:	4618      	mov	r0, r3
 8003c52:	f7fc fbd7 	bl	8000404 <__aeabi_i2d>
 8003c56:	f04f 0200 	mov.w	r2, #0
 8003c5a:	4b33      	ldr	r3, [pc, #204]	; (8003d28 <movementMachine+0x558>)
 8003c5c:	f7fc fa86 	bl	800016c <__adddf3>
 8003c60:	4602      	mov	r2, r0
 8003c62:	460b      	mov	r3, r1
				|| calcularDistancia((TIM1->CNT) >> 1)
 8003c64:	4620      	mov	r0, r4
 8003c66:	4629      	mov	r1, r5
 8003c68:	f7fc fec6 	bl	80009f8 <__aeabi_dcmpgt>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d026      	beq.n	8003cc0 <movementMachine+0x4f0>

			StraightFlag = 2;
 8003c72:	4b2e      	ldr	r3, [pc, #184]	; (8003d2c <movementMachine+0x55c>)
 8003c74:	2202      	movs	r2, #2
 8003c76:	601a      	str	r2, [r3, #0]
			KPP = KPPchoice[TURN_90];
 8003c78:	4b2d      	ldr	r3, [pc, #180]	; (8003d30 <movementMachine+0x560>)
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	4a2d      	ldr	r2, [pc, #180]	; (8003d34 <movementMachine+0x564>)
 8003c7e:	6013      	str	r3, [r2, #0]
			KDP = KDPchoice[TURN_90];
 8003c80:	4b2d      	ldr	r3, [pc, #180]	; (8003d38 <movementMachine+0x568>)
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	4a2d      	ldr	r2, [pc, #180]	; (8003d3c <movementMachine+0x56c>)
 8003c86:	6013      	str	r3, [r2, #0]
			if (direction == ADELANTE) {
 8003c88:	4b2d      	ldr	r3, [pc, #180]	; (8003d40 <movementMachine+0x570>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d10e      	bne.n	8003cae <movementMachine+0x4de>

				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8003c90:	2200      	movs	r2, #0
 8003c92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003c96:	482b      	ldr	r0, [pc, #172]	; (8003d44 <movementMachine+0x574>)
 8003c98:	f002 fc2d 	bl	80064f6 <HAL_GPIO_WritePin>
				runMotor(ATRAS, MOTOR_A);
 8003c9c:	2100      	movs	r1, #0
 8003c9e:	2002      	movs	r0, #2
 8003ca0:	f7ff fcbc 	bl	800361c <runMotor>
				runMotor(ADELANTE, MOTOR_B);
 8003ca4:	2101      	movs	r1, #1
 8003ca6:	2000      	movs	r0, #0
 8003ca8:	f7ff fcb8 	bl	800361c <runMotor>
			if (direction == ADELANTE) {
 8003cac:	e01d      	b.n	8003cea <movementMachine+0x51a>
			} else {
				//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);

				runMotor(ADELANTE, MOTOR_A);
 8003cae:	2100      	movs	r1, #0
 8003cb0:	2000      	movs	r0, #0
 8003cb2:	f7ff fcb3 	bl	800361c <runMotor>
				runMotor(ATRAS, MOTOR_B);
 8003cb6:	2101      	movs	r1, #1
 8003cb8:	2002      	movs	r0, #2
 8003cba:	f7ff fcaf 	bl	800361c <runMotor>
			if (direction == ADELANTE) {
 8003cbe:	e014      	b.n	8003cea <movementMachine+0x51a>
			}
			//intUartSend("HOLA");
		} else {
			//
			movementState = ADELANTE;
 8003cc0:	4b12      	ldr	r3, [pc, #72]	; (8003d0c <movementMachine+0x53c>)
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	601a      	str	r2, [r3, #0]
			runMotor(OFF, MOTOR_A);
 8003cc6:	2100      	movs	r1, #0
 8003cc8:	2005      	movs	r0, #5
 8003cca:	f7ff fca7 	bl	800361c <runMotor>
			runMotor(OFF, MOTOR_B);
 8003cce:	2101      	movs	r1, #1
 8003cd0:	2005      	movs	r0, #5
 8003cd2:	f7ff fca3 	bl	800361c <runMotor>
			TIM3->CNT = 100;
 8003cd6:	4b0a      	ldr	r3, [pc, #40]	; (8003d00 <movementMachine+0x530>)
 8003cd8:	2264      	movs	r2, #100	; 0x64
 8003cda:	625a      	str	r2, [r3, #36]	; 0x24
			TIM1->CNT = 100;
 8003cdc:	4b0c      	ldr	r3, [pc, #48]	; (8003d10 <movementMachine+0x540>)
 8003cde:	2264      	movs	r2, #100	; 0x64
 8003ce0:	625a      	str	r2, [r3, #36]	; 0x24
			offset = 25.1;
 8003ce2:	4b0c      	ldr	r3, [pc, #48]	; (8003d14 <movementMachine+0x544>)
 8003ce4:	4a0c      	ldr	r2, [pc, #48]	; (8003d18 <movementMachine+0x548>)
 8003ce6:	601a      	str	r2, [r3, #0]
			//intUartSend(8);
		}
		break;
 8003ce8:	e0ca      	b.n	8003e80 <movementMachine+0x6b0>
 8003cea:	e0c9      	b.n	8003e80 <movementMachine+0x6b0>
 8003cec:	f3af 8000 	nop.w
 8003cf0:	cccccccd 	.word	0xcccccccd
 8003cf4:	3ffccccc 	.word	0x3ffccccc
 8003cf8:	20002320 	.word	0x20002320
 8003cfc:	2000004c 	.word	0x2000004c
 8003d00:	40000400 	.word	0x40000400
 8003d04:	20000064 	.word	0x20000064
 8003d08:	40000800 	.word	0x40000800
 8003d0c:	20000070 	.word	0x20000070
 8003d10:	40012c00 	.word	0x40012c00
 8003d14:	200040d0 	.word	0x200040d0
 8003d18:	41c8cccd 	.word	0x41c8cccd
 8003d1c:	200040c0 	.word	0x200040c0
 8003d20:	2000005c 	.word	0x2000005c
 8003d24:	200040c4 	.word	0x200040c4
 8003d28:	3fe00000 	.word	0x3fe00000
 8003d2c:	200040bc 	.word	0x200040bc
 8003d30:	20000020 	.word	0x20000020
 8003d34:	200040ac 	.word	0x200040ac
 8003d38:	20000030 	.word	0x20000030
 8003d3c:	200040b0 	.word	0x200040b0
 8003d40:	200040c8 	.word	0x200040c8
 8003d44:	40011000 	.word	0x40011000
	case ATRAS:
		TIM4->CCR3 = baseChoice[choice]
 8003d48:	4b53      	ldr	r3, [pc, #332]	; (8003e98 <movementMachine+0x6c8>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a53      	ldr	r2, [pc, #332]	; (8003e9c <movementMachine+0x6cc>)
 8003d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
								- (calcularDistancia((TIM1->CNT) >> 1)
 8003d52:	4618      	mov	r0, r3
 8003d54:	f7fc fb56 	bl	8000404 <__aeabi_i2d>
 8003d58:	4604      	mov	r4, r0
 8003d5a:	460d      	mov	r5, r1
 8003d5c:	4b50      	ldr	r3, [pc, #320]	; (8003ea0 <movementMachine+0x6d0>)
 8003d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d60:	085b      	lsrs	r3, r3, #1
 8003d62:	4618      	mov	r0, r3
 8003d64:	f7ff fc34 	bl	80035d0 <calcularDistancia>
 8003d68:	4606      	mov	r6, r0
										* (baseChoice[choice] / LeftChoice[choice])
 8003d6a:	4b4b      	ldr	r3, [pc, #300]	; (8003e98 <movementMachine+0x6c8>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a4b      	ldr	r2, [pc, #300]	; (8003e9c <movementMachine+0x6cc>)
 8003d70:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003d74:	4b48      	ldr	r3, [pc, #288]	; (8003e98 <movementMachine+0x6c8>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	494a      	ldr	r1, [pc, #296]	; (8003ea4 <movementMachine+0x6d4>)
 8003d7a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d7e:	fb92 f3f3 	sdiv	r3, r2, r3
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7fc ffaa 	bl	8000cdc <__aeabi_i2f>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	4630      	mov	r0, r6
 8003d8e:	f7fc fff9 	bl	8000d84 <__aeabi_fmul>
 8003d92:	4603      	mov	r3, r0
 8003d94:	4618      	mov	r0, r3
 8003d96:	f7fc fb47 	bl	8000428 <__aeabi_f2d>
 8003d9a:	4680      	mov	r8, r0
 8003d9c:	4689      	mov	r9, r1
										- baseChoice[choice] / 1.3);
 8003d9e:	4b3e      	ldr	r3, [pc, #248]	; (8003e98 <movementMachine+0x6c8>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a3e      	ldr	r2, [pc, #248]	; (8003e9c <movementMachine+0x6cc>)
 8003da4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003da8:	4618      	mov	r0, r3
 8003daa:	f7fc fb2b 	bl	8000404 <__aeabi_i2d>
 8003dae:	a338      	add	r3, pc, #224	; (adr r3, 8003e90 <movementMachine+0x6c0>)
 8003db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003db4:	f7fc fcba 	bl	800072c <__aeabi_ddiv>
 8003db8:	4602      	mov	r2, r0
 8003dba:	460b      	mov	r3, r1
 8003dbc:	4640      	mov	r0, r8
 8003dbe:	4649      	mov	r1, r9
 8003dc0:	f7fc f9d2 	bl	8000168 <__aeabi_dsub>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	460b      	mov	r3, r1
								- (calcularDistancia((TIM1->CNT) >> 1)
 8003dc8:	4620      	mov	r0, r4
 8003dca:	4629      	mov	r1, r5
 8003dcc:	f7fc f9cc 	bl	8000168 <__aeabi_dsub>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	460b      	mov	r3, r1
		TIM4->CCR3 = baseChoice[choice]
 8003dd4:	4c34      	ldr	r4, [pc, #208]	; (8003ea8 <movementMachine+0x6d8>)
 8003dd6:	4610      	mov	r0, r2
 8003dd8:	4619      	mov	r1, r3
 8003dda:	f7fc fe55 	bl	8000a88 <__aeabi_d2uiz>
 8003dde:	4603      	mov	r3, r0
 8003de0:	63e3      	str	r3, [r4, #60]	; 0x3c
						TIM4->CCR4 = baseChoice[choice]
 8003de2:	4b2d      	ldr	r3, [pc, #180]	; (8003e98 <movementMachine+0x6c8>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a2d      	ldr	r2, [pc, #180]	; (8003e9c <movementMachine+0x6cc>)
 8003de8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
								- (calcularDistancia((TIM1->CNT) >> 1)
 8003dec:	4618      	mov	r0, r3
 8003dee:	f7fc fb09 	bl	8000404 <__aeabi_i2d>
 8003df2:	4604      	mov	r4, r0
 8003df4:	460d      	mov	r5, r1
 8003df6:	4b2a      	ldr	r3, [pc, #168]	; (8003ea0 <movementMachine+0x6d0>)
 8003df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfa:	085b      	lsrs	r3, r3, #1
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7ff fbe7 	bl	80035d0 <calcularDistancia>
 8003e02:	4606      	mov	r6, r0
										* (baseChoice[choice] / LeftChoice[choice])
 8003e04:	4b24      	ldr	r3, [pc, #144]	; (8003e98 <movementMachine+0x6c8>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a24      	ldr	r2, [pc, #144]	; (8003e9c <movementMachine+0x6cc>)
 8003e0a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003e0e:	4b22      	ldr	r3, [pc, #136]	; (8003e98 <movementMachine+0x6c8>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4924      	ldr	r1, [pc, #144]	; (8003ea4 <movementMachine+0x6d4>)
 8003e14:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003e18:	fb92 f3f3 	sdiv	r3, r2, r3
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f7fc ff5d 	bl	8000cdc <__aeabi_i2f>
 8003e22:	4603      	mov	r3, r0
 8003e24:	4619      	mov	r1, r3
 8003e26:	4630      	mov	r0, r6
 8003e28:	f7fc ffac 	bl	8000d84 <__aeabi_fmul>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f7fc fafa 	bl	8000428 <__aeabi_f2d>
 8003e34:	4680      	mov	r8, r0
 8003e36:	4689      	mov	r9, r1
										- baseChoice[choice] / 1.3);
 8003e38:	4b17      	ldr	r3, [pc, #92]	; (8003e98 <movementMachine+0x6c8>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a17      	ldr	r2, [pc, #92]	; (8003e9c <movementMachine+0x6cc>)
 8003e3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e42:	4618      	mov	r0, r3
 8003e44:	f7fc fade 	bl	8000404 <__aeabi_i2d>
 8003e48:	a311      	add	r3, pc, #68	; (adr r3, 8003e90 <movementMachine+0x6c0>)
 8003e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e4e:	f7fc fc6d 	bl	800072c <__aeabi_ddiv>
 8003e52:	4602      	mov	r2, r0
 8003e54:	460b      	mov	r3, r1
 8003e56:	4640      	mov	r0, r8
 8003e58:	4649      	mov	r1, r9
 8003e5a:	f7fc f985 	bl	8000168 <__aeabi_dsub>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	460b      	mov	r3, r1
								- (calcularDistancia((TIM1->CNT) >> 1)
 8003e62:	4620      	mov	r0, r4
 8003e64:	4629      	mov	r1, r5
 8003e66:	f7fc f97f 	bl	8000168 <__aeabi_dsub>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	460b      	mov	r3, r1
						TIM4->CCR4 = baseChoice[choice]
 8003e6e:	4c0e      	ldr	r4, [pc, #56]	; (8003ea8 <movementMachine+0x6d8>)
 8003e70:	4610      	mov	r0, r2
 8003e72:	4619      	mov	r1, r3
 8003e74:	f7fc fe08 	bl	8000a88 <__aeabi_d2uiz>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	6423      	str	r3, [r4, #64]	; 0x40
			TIM3->CNT = 100;
			TIM1->CNT = 100;
			offset = 25.1;
			//intUartSend(7);
		}*/
		break;
 8003e7c:	e000      	b.n	8003e80 <movementMachine+0x6b0>
		break;
 8003e7e:	bf00      	nop

	}
}
 8003e80:	bf00      	nop
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003e8a:	bf00      	nop
 8003e8c:	f3af 8000 	nop.w
 8003e90:	cccccccd 	.word	0xcccccccd
 8003e94:	3ff4cccc 	.word	0x3ff4cccc
 8003e98:	20002320 	.word	0x20002320
 8003e9c:	2000004c 	.word	0x2000004c
 8003ea0:	40012c00 	.word	0x40012c00
 8003ea4:	20000064 	.word	0x20000064
 8003ea8:	40000800 	.word	0x40000800

08003eac <moveNode>:
 *      Author: jore
 */
#include "nodeControl.h"
#include "main.h"
#include "sharp.h"
void moveNode(int lado, Position *a) {
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
	switch (lado) {
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2b03      	cmp	r3, #3
 8003eba:	d823      	bhi.n	8003f04 <moveNode+0x58>
 8003ebc:	a201      	add	r2, pc, #4	; (adr r2, 8003ec4 <moveNode+0x18>)
 8003ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec2:	bf00      	nop
 8003ec4:	08003ed5 	.word	0x08003ed5
 8003ec8:	08003ee1 	.word	0x08003ee1
 8003ecc:	08003ef9 	.word	0x08003ef9
 8003ed0:	08003eed 	.word	0x08003eed
	case ADELANTE:
		//if (visual.y != ALTO - 1) {
		a->y++;
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	1c5a      	adds	r2, r3, #1
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	605a      	str	r2, [r3, #4]
		//visual.y++;
		//}
		break;
 8003ede:	e011      	b.n	8003f04 <moveNode+0x58>
	case IZQUIERDA:
		//if (visual.x != 0) {
		a->x--;
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	1e5a      	subs	r2, r3, #1
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	601a      	str	r2, [r3, #0]
		//visual.x--;
		//}
		break;
 8003eea:	e00b      	b.n	8003f04 <moveNode+0x58>
	case DERECHA:
		// if (visual.x != ANCHO - 1) {
		a->x++;
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	1c5a      	adds	r2, r3, #1
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	601a      	str	r2, [r3, #0]
		// visual.x++;
		// }
		break;
 8003ef6:	e005      	b.n	8003f04 <moveNode+0x58>
	case ATRAS:
		// if (visual.y != 0) {
		a->y--;
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	1e5a      	subs	r2, r3, #1
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	605a      	str	r2, [r3, #4]
		// visual.y--;
		// }

		break;
 8003f02:	bf00      	nop
	}
}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bc80      	pop	{r7}
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop

08003f10 <CreateNode>:

void CreateNode(Node* m, float Sensors[4], int direcciones[4], float maxDistance[3]) {
 8003f10:	b590      	push	{r4, r7, lr}
 8003f12:	b085      	sub	sp, #20
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	607a      	str	r2, [r7, #4]
 8003f1c:	603b      	str	r3, [r7, #0]
	m->Lados[direcciones[ADELANTE]] = lecturaSensor(ADELANTE, Sensors, maxDistance);
 8003f1e:	683a      	ldr	r2, [r7, #0]
 8003f20:	68b9      	ldr	r1, [r7, #8]
 8003f22:	2000      	movs	r0, #0
 8003f24:	f000 f88c 	bl	8004040 <lecturaSensor>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681c      	ldr	r4, [r3, #0]
 8003f2e:	4610      	mov	r0, r2
 8003f30:	f7fd f8ee 	bl	8001110 <__aeabi_f2iz>
 8003f34:	4602      	mov	r2, r0
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	m->Lados[direcciones[IZQUIERDA]] = lecturaSensor(IZQUIERDA, Sensors,  maxDistance);
 8003f3c:	683a      	ldr	r2, [r7, #0]
 8003f3e:	68b9      	ldr	r1, [r7, #8]
 8003f40:	2001      	movs	r0, #1
 8003f42:	f000 f87d 	bl	8004040 <lecturaSensor>
 8003f46:	4602      	mov	r2, r0
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	3304      	adds	r3, #4
 8003f4c:	681c      	ldr	r4, [r3, #0]
 8003f4e:	4610      	mov	r0, r2
 8003f50:	f7fd f8de 	bl	8001110 <__aeabi_f2iz>
 8003f54:	4602      	mov	r2, r0
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	m->Lados[direcciones[DERECHA]] = lecturaSensor(DERECHA, Sensors, maxDistance);
 8003f5c:	683a      	ldr	r2, [r7, #0]
 8003f5e:	68b9      	ldr	r1, [r7, #8]
 8003f60:	2003      	movs	r0, #3
 8003f62:	f000 f86d 	bl	8004040 <lecturaSensor>
 8003f66:	4602      	mov	r2, r0
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	330c      	adds	r3, #12
 8003f6c:	681c      	ldr	r4, [r3, #0]
 8003f6e:	4610      	mov	r0, r2
 8003f70:	f7fd f8ce 	bl	8001110 <__aeabi_f2iz>
 8003f74:	4602      	mov	r2, r0
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	m->Lados[direcciones[ATRAS]] = lecturaSensor(ATRAS, Sensors,  maxDistance);
 8003f7c:	683a      	ldr	r2, [r7, #0]
 8003f7e:	68b9      	ldr	r1, [r7, #8]
 8003f80:	2002      	movs	r0, #2
 8003f82:	f000 f85d 	bl	8004040 <lecturaSensor>
 8003f86:	4602      	mov	r2, r0
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	3308      	adds	r3, #8
 8003f8c:	681c      	ldr	r4, [r3, #0]
 8003f8e:	4610      	mov	r0, r2
 8003f90:	f7fd f8be 	bl	8001110 <__aeabi_f2iz>
 8003f94:	4602      	mov	r2, r0
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
}
 8003f9c:	bf00      	nop
 8003f9e:	3714      	adds	r7, #20
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd90      	pop	{r4, r7, pc}

08003fa4 <wallDetector>:
#include "sharp.h"
#include "main.h"
#include <math.h>


int wallDetector(int n, int d, float maxDis[3]) {
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	607a      	str	r2, [r7, #4]
	switch (d) {
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	2b03      	cmp	r3, #3
 8003fb4:	d02c      	beq.n	8004010 <wallDetector+0x6c>
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	2b03      	cmp	r3, #3
 8003fba:	dc3b      	bgt.n	8004034 <wallDetector+0x90>
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d003      	beq.n	8003fca <wallDetector+0x26>
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d011      	beq.n	8003fec <wallDetector+0x48>
 8003fc8:	e034      	b.n	8004034 <wallDetector+0x90>
	case ADELANTE:
		if (n < maxDis[0]) {
 8003fca:	68f8      	ldr	r0, [r7, #12]
 8003fcc:	f7fc fe86 	bl	8000cdc <__aeabi_i2f>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	4610      	mov	r0, r2
 8003fda:	f7fd f871 	bl	80010c0 <__aeabi_fcmplt>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d001      	beq.n	8003fe8 <wallDetector+0x44>
			return 1;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e026      	b.n	8004036 <wallDetector+0x92>
		} else {

			return 0;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	e024      	b.n	8004036 <wallDetector+0x92>
		}
		break;

	case IZQUIERDA:
		if (n < maxDis[1]) {
 8003fec:	68f8      	ldr	r0, [r7, #12]
 8003fee:	f7fc fe75 	bl	8000cdc <__aeabi_i2f>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	3304      	adds	r3, #4
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	4610      	mov	r0, r2
 8003ffe:	f7fd f85f 	bl	80010c0 <__aeabi_fcmplt>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d001      	beq.n	800400c <wallDetector+0x68>
			return 1;
 8004008:	2301      	movs	r3, #1
 800400a:	e014      	b.n	8004036 <wallDetector+0x92>
		} else {
			return 0;
 800400c:	2300      	movs	r3, #0
 800400e:	e012      	b.n	8004036 <wallDetector+0x92>
		}
		break;
	case DERECHA:
		if (n < maxDis[2]) {
 8004010:	68f8      	ldr	r0, [r7, #12]
 8004012:	f7fc fe63 	bl	8000cdc <__aeabi_i2f>
 8004016:	4602      	mov	r2, r0
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	3308      	adds	r3, #8
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4619      	mov	r1, r3
 8004020:	4610      	mov	r0, r2
 8004022:	f7fd f84d 	bl	80010c0 <__aeabi_fcmplt>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d001      	beq.n	8004030 <wallDetector+0x8c>
			return 1;
 800402c:	2301      	movs	r3, #1
 800402e:	e002      	b.n	8004036 <wallDetector+0x92>
		} else {
			return 0;
 8004030:	2300      	movs	r3, #0
 8004032:	e000      	b.n	8004036 <wallDetector+0x92>
		}
		break;
	default:
		return 0;
 8004034:	2300      	movs	r3, #0
		break;
	}
}
 8004036:	4618      	mov	r0, r3
 8004038:	3710      	adds	r7, #16
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
	...

08004040 <lecturaSensor>:

float lecturaSensor(int direccion, float values[4], float maxDis[3]) {
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	607a      	str	r2, [r7, #4]
	switch (direccion) {
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2b03      	cmp	r3, #3
 8004050:	d843      	bhi.n	80040da <lecturaSensor+0x9a>
 8004052:	a201      	add	r2, pc, #4	; (adr r2, 8004058 <lecturaSensor+0x18>)
 8004054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004058:	08004069 	.word	0x08004069
 800405c:	080040b1 	.word	0x080040b1
 8004060:	080040d5 	.word	0x080040d5
 8004064:	0800408d 	.word	0x0800408d
	case ADELANTE:
		return wallDetector(values[2], direccion, maxDis);
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	3308      	adds	r3, #8
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4618      	mov	r0, r3
 8004070:	f7fd f84e 	bl	8001110 <__aeabi_f2iz>
 8004074:	4603      	mov	r3, r0
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	68f9      	ldr	r1, [r7, #12]
 800407a:	4618      	mov	r0, r3
 800407c:	f7ff ff92 	bl	8003fa4 <wallDetector>
 8004080:	4603      	mov	r3, r0
 8004082:	4618      	mov	r0, r3
 8004084:	f7fc fe2a 	bl	8000cdc <__aeabi_i2f>
 8004088:	4603      	mov	r3, r0
 800408a:	e027      	b.n	80040dc <lecturaSensor+0x9c>
		break;
	case DERECHA:
		return wallDetector(values[1], direccion, maxDis);
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	3304      	adds	r3, #4
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4618      	mov	r0, r3
 8004094:	f7fd f83c 	bl	8001110 <__aeabi_f2iz>
 8004098:	4603      	mov	r3, r0
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	68f9      	ldr	r1, [r7, #12]
 800409e:	4618      	mov	r0, r3
 80040a0:	f7ff ff80 	bl	8003fa4 <wallDetector>
 80040a4:	4603      	mov	r3, r0
 80040a6:	4618      	mov	r0, r3
 80040a8:	f7fc fe18 	bl	8000cdc <__aeabi_i2f>
 80040ac:	4603      	mov	r3, r0
 80040ae:	e015      	b.n	80040dc <lecturaSensor+0x9c>
		break;
	case IZQUIERDA:
		return wallDetector(values[3], direccion, maxDis);
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	330c      	adds	r3, #12
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4618      	mov	r0, r3
 80040b8:	f7fd f82a 	bl	8001110 <__aeabi_f2iz>
 80040bc:	4603      	mov	r3, r0
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	68f9      	ldr	r1, [r7, #12]
 80040c2:	4618      	mov	r0, r3
 80040c4:	f7ff ff6e 	bl	8003fa4 <wallDetector>
 80040c8:	4603      	mov	r3, r0
 80040ca:	4618      	mov	r0, r3
 80040cc:	f7fc fe06 	bl	8000cdc <__aeabi_i2f>
 80040d0:	4603      	mov	r3, r0
 80040d2:	e003      	b.n	80040dc <lecturaSensor+0x9c>
		break;
	case ATRAS:
		return 0;
 80040d4:	f04f 0300 	mov.w	r3, #0
 80040d8:	e000      	b.n	80040dc <lecturaSensor+0x9c>
		break;
	}
	return 15;
 80040da:	4b02      	ldr	r3, [pc, #8]	; (80040e4 <lecturaSensor+0xa4>)
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3710      	adds	r7, #16
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	41700000 	.word	0x41700000

080040e8 <lecSensor>:

float lecSensor(int n, uint32_t values[10]) {
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b088      	sub	sp, #32
 80040ec:	af02      	add	r7, sp, #8
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
	long suma = 0;
 80040f2:	2300      	movs	r3, #0
 80040f4:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < n; i++) {
 80040f6:	2300      	movs	r3, #0
 80040f8:	613b      	str	r3, [r7, #16]
 80040fa:	e00a      	b.n	8004112 <lecSensor+0x2a>
		suma = suma + values[i];
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	683a      	ldr	r2, [r7, #0]
 8004102:	4413      	add	r3, r2
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	4413      	add	r3, r2
 800410a:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < n; i++) {
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	3301      	adds	r3, #1
 8004110:	613b      	str	r3, [r7, #16]
 8004112:	693a      	ldr	r2, [r7, #16]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	429a      	cmp	r2, r3
 8004118:	dbf0      	blt.n	80040fc <lecSensor+0x14>
	}
	float adc = suma / n;
 800411a:	697a      	ldr	r2, [r7, #20]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	fb92 f3f3 	sdiv	r3, r2, r3
 8004122:	4618      	mov	r0, r3
 8004124:	f7fc fdda 	bl	8000cdc <__aeabi_i2f>
 8004128:	4603      	mov	r3, r0
 800412a:	60bb      	str	r3, [r7, #8]
	float volts = MAP(adc,900,3400,35,310);
 800412c:	68b8      	ldr	r0, [r7, #8]
 800412e:	f7fd f815 	bl	800115c <__aeabi_f2uiz>
 8004132:	f44f 739b 	mov.w	r3, #310	; 0x136
 8004136:	9300      	str	r3, [sp, #0]
 8004138:	2323      	movs	r3, #35	; 0x23
 800413a:	f640 5248 	movw	r2, #3400	; 0xd48
 800413e:	f44f 7161 	mov.w	r1, #900	; 0x384
 8004142:	f7ff f95f 	bl	8003404 <MAP>
 8004146:	4603      	mov	r3, r0
 8004148:	4618      	mov	r0, r3
 800414a:	f7fc fdc3 	bl	8000cd4 <__aeabi_ui2f>
 800414e:	4603      	mov	r3, r0
 8004150:	60fb      	str	r3, [r7, #12]
	volts = volts/100;// value from sensor * (5/1024)
 8004152:	492d      	ldr	r1, [pc, #180]	; (8004208 <lecSensor+0x120>)
 8004154:	68f8      	ldr	r0, [r7, #12]
 8004156:	f7fc fec9 	bl	8000eec <__aeabi_fdiv>
 800415a:	4603      	mov	r3, r0
 800415c:	60fb      	str	r3, [r7, #12]
	if (volts <= 0.35)
 800415e:	68f8      	ldr	r0, [r7, #12]
 8004160:	f7fc f962 	bl	8000428 <__aeabi_f2d>
 8004164:	a324      	add	r3, pc, #144	; (adr r3, 80041f8 <lecSensor+0x110>)
 8004166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800416a:	f7fc fc31 	bl	80009d0 <__aeabi_dcmple>
 800416e:	4603      	mov	r3, r0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d001      	beq.n	8004178 <lecSensor+0x90>
		volts = 0.35;
 8004174:	4b25      	ldr	r3, [pc, #148]	; (800420c <lecSensor+0x124>)
 8004176:	60fb      	str	r3, [r7, #12]
	volts = pow(volts - 0.3, 0.5);/*convertimos a cm con un aproximacion grafica*/
 8004178:	68f8      	ldr	r0, [r7, #12]
 800417a:	f7fc f955 	bl	8000428 <__aeabi_f2d>
 800417e:	a320      	add	r3, pc, #128	; (adr r3, 8004200 <lecSensor+0x118>)
 8004180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004184:	f7fb fff0 	bl	8000168 <__aeabi_dsub>
 8004188:	4602      	mov	r2, r0
 800418a:	460b      	mov	r3, r1
 800418c:	4610      	mov	r0, r2
 800418e:	4619      	mov	r1, r3
 8004190:	f04f 0200 	mov.w	r2, #0
 8004194:	4b1e      	ldr	r3, [pc, #120]	; (8004210 <lecSensor+0x128>)
 8004196:	f003 ff11 	bl	8007fbc <pow>
 800419a:	4602      	mov	r2, r0
 800419c:	460b      	mov	r3, r1
 800419e:	4610      	mov	r0, r2
 80041a0:	4619      	mov	r1, r3
 80041a2:	f7fc fc91 	bl	8000ac8 <__aeabi_d2f>
 80041a6:	4603      	mov	r3, r0
 80041a8:	60fb      	str	r3, [r7, #12]
	volts = 27.5 / volts; /*no preguntar por los valores*/
 80041aa:	68f9      	ldr	r1, [r7, #12]
 80041ac:	4819      	ldr	r0, [pc, #100]	; (8004214 <lecSensor+0x12c>)
 80041ae:	f7fc fe9d 	bl	8000eec <__aeabi_fdiv>
 80041b2:	4603      	mov	r3, r0
 80041b4:	60fb      	str	r3, [r7, #12]
	volts -= 18;
 80041b6:	4918      	ldr	r1, [pc, #96]	; (8004218 <lecSensor+0x130>)
 80041b8:	68f8      	ldr	r0, [r7, #12]
 80041ba:	f7fc fcd9 	bl	8000b70 <__aeabi_fsub>
 80041be:	4603      	mov	r3, r0
 80041c0:	60fb      	str	r3, [r7, #12]

	if(volts < -10){
 80041c2:	4916      	ldr	r1, [pc, #88]	; (800421c <lecSensor+0x134>)
 80041c4:	68f8      	ldr	r0, [r7, #12]
 80041c6:	f7fc ff7b 	bl	80010c0 <__aeabi_fcmplt>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d001      	beq.n	80041d4 <lecSensor+0xec>
			volts = 100;
 80041d0:	4b0d      	ldr	r3, [pc, #52]	; (8004208 <lecSensor+0x120>)
 80041d2:	60fb      	str	r3, [r7, #12]
	}

	if (volts < 0){
 80041d4:	f04f 0100 	mov.w	r1, #0
 80041d8:	68f8      	ldr	r0, [r7, #12]
 80041da:	f7fc ff71 	bl	80010c0 <__aeabi_fcmplt>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d002      	beq.n	80041ea <lecSensor+0x102>
		volts = 0;
 80041e4:	f04f 0300 	mov.w	r3, #0
 80041e8:	60fb      	str	r3, [r7, #12]
	}



	return volts;
 80041ea:	68fb      	ldr	r3, [r7, #12]

}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3718      	adds	r7, #24
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	f3af 8000 	nop.w
 80041f8:	66666666 	.word	0x66666666
 80041fc:	3fd66666 	.word	0x3fd66666
 8004200:	33333333 	.word	0x33333333
 8004204:	3fd33333 	.word	0x3fd33333
 8004208:	42c80000 	.word	0x42c80000
 800420c:	3eb33333 	.word	0x3eb33333
 8004210:	3fe00000 	.word	0x3fe00000
 8004214:	41dc0000 	.word	0x41dc0000
 8004218:	41900000 	.word	0x41900000
 800421c:	c1200000 	.word	0xc1200000

08004220 <lecturaCNY70>:

int lecturaCNY70(int n, uint32_t values[10]) {
 8004220:	b480      	push	{r7}
 8004222:	b087      	sub	sp, #28
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
	long suma = 0;
 800422a:	2300      	movs	r3, #0
 800422c:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < n; i++) {
 800422e:	2300      	movs	r3, #0
 8004230:	613b      	str	r3, [r7, #16]
 8004232:	e00a      	b.n	800424a <lecturaCNY70+0x2a>
		suma = suma + values[i];
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	683a      	ldr	r2, [r7, #0]
 800423a:	4413      	add	r3, r2
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	4413      	add	r3, r2
 8004242:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < n; i++) {
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	3301      	adds	r3, #1
 8004248:	613b      	str	r3, [r7, #16]
 800424a:	693a      	ldr	r2, [r7, #16]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	429a      	cmp	r2, r3
 8004250:	dbf0      	blt.n	8004234 <lecturaCNY70+0x14>
	}
	int adc = (suma / n);
 8004252:	697a      	ldr	r2, [r7, #20]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	fb92 f3f3 	sdiv	r3, r2, r3
 800425a:	60fb      	str	r3, [r7, #12]
	if (adc < 1000) {
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004262:	da01      	bge.n	8004268 <lecturaCNY70+0x48>
		return BLANCO;
 8004264:	2300      	movs	r3, #0
 8004266:	e000      	b.n	800426a <lecturaCNY70+0x4a>
	} else {
		return NEGRO;
 8004268:	2301      	movs	r3, #1
	}
}
 800426a:	4618      	mov	r0, r3
 800426c:	371c      	adds	r7, #28
 800426e:	46bd      	mov	sp, r7
 8004270:	bc80      	pop	{r7}
 8004272:	4770      	bx	lr

08004274 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004274:	b480      	push	{r7}
 8004276:	b085      	sub	sp, #20
 8004278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800427a:	4b15      	ldr	r3, [pc, #84]	; (80042d0 <HAL_MspInit+0x5c>)
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	4a14      	ldr	r2, [pc, #80]	; (80042d0 <HAL_MspInit+0x5c>)
 8004280:	f043 0301 	orr.w	r3, r3, #1
 8004284:	6193      	str	r3, [r2, #24]
 8004286:	4b12      	ldr	r3, [pc, #72]	; (80042d0 <HAL_MspInit+0x5c>)
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	f003 0301 	and.w	r3, r3, #1
 800428e:	60bb      	str	r3, [r7, #8]
 8004290:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004292:	4b0f      	ldr	r3, [pc, #60]	; (80042d0 <HAL_MspInit+0x5c>)
 8004294:	69db      	ldr	r3, [r3, #28]
 8004296:	4a0e      	ldr	r2, [pc, #56]	; (80042d0 <HAL_MspInit+0x5c>)
 8004298:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800429c:	61d3      	str	r3, [r2, #28]
 800429e:	4b0c      	ldr	r3, [pc, #48]	; (80042d0 <HAL_MspInit+0x5c>)
 80042a0:	69db      	ldr	r3, [r3, #28]
 80042a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042a6:	607b      	str	r3, [r7, #4]
 80042a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80042aa:	4b0a      	ldr	r3, [pc, #40]	; (80042d4 <HAL_MspInit+0x60>)
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	60fb      	str	r3, [r7, #12]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80042b6:	60fb      	str	r3, [r7, #12]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80042be:	60fb      	str	r3, [r7, #12]
 80042c0:	4a04      	ldr	r2, [pc, #16]	; (80042d4 <HAL_MspInit+0x60>)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80042c6:	bf00      	nop
 80042c8:	3714      	adds	r7, #20
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bc80      	pop	{r7}
 80042ce:	4770      	bx	lr
 80042d0:	40021000 	.word	0x40021000
 80042d4:	40010000 	.word	0x40010000

080042d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b088      	sub	sp, #32
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042e0:	f107 0310 	add.w	r3, r7, #16
 80042e4:	2200      	movs	r2, #0
 80042e6:	601a      	str	r2, [r3, #0]
 80042e8:	605a      	str	r2, [r3, #4]
 80042ea:	609a      	str	r2, [r3, #8]
 80042ec:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a28      	ldr	r2, [pc, #160]	; (8004394 <HAL_ADC_MspInit+0xbc>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d149      	bne.n	800438c <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80042f8:	4b27      	ldr	r3, [pc, #156]	; (8004398 <HAL_ADC_MspInit+0xc0>)
 80042fa:	699b      	ldr	r3, [r3, #24]
 80042fc:	4a26      	ldr	r2, [pc, #152]	; (8004398 <HAL_ADC_MspInit+0xc0>)
 80042fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004302:	6193      	str	r3, [r2, #24]
 8004304:	4b24      	ldr	r3, [pc, #144]	; (8004398 <HAL_ADC_MspInit+0xc0>)
 8004306:	699b      	ldr	r3, [r3, #24]
 8004308:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800430c:	60fb      	str	r3, [r7, #12]
 800430e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004310:	4b21      	ldr	r3, [pc, #132]	; (8004398 <HAL_ADC_MspInit+0xc0>)
 8004312:	699b      	ldr	r3, [r3, #24]
 8004314:	4a20      	ldr	r2, [pc, #128]	; (8004398 <HAL_ADC_MspInit+0xc0>)
 8004316:	f043 0304 	orr.w	r3, r3, #4
 800431a:	6193      	str	r3, [r2, #24]
 800431c:	4b1e      	ldr	r3, [pc, #120]	; (8004398 <HAL_ADC_MspInit+0xc0>)
 800431e:	699b      	ldr	r3, [r3, #24]
 8004320:	f003 0304 	and.w	r3, r3, #4
 8004324:	60bb      	str	r3, [r7, #8]
 8004326:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = CNY70_Pin|SHARP_D_Pin|SHARP_C_Pin|SHARP_I_Pin;
 8004328:	230f      	movs	r3, #15
 800432a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800432c:	2303      	movs	r3, #3
 800432e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004330:	f107 0310 	add.w	r3, r7, #16
 8004334:	4619      	mov	r1, r3
 8004336:	4819      	ldr	r0, [pc, #100]	; (800439c <HAL_ADC_MspInit+0xc4>)
 8004338:	f001 ff42 	bl	80061c0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800433c:	4b18      	ldr	r3, [pc, #96]	; (80043a0 <HAL_ADC_MspInit+0xc8>)
 800433e:	4a19      	ldr	r2, [pc, #100]	; (80043a4 <HAL_ADC_MspInit+0xcc>)
 8004340:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004342:	4b17      	ldr	r3, [pc, #92]	; (80043a0 <HAL_ADC_MspInit+0xc8>)
 8004344:	2200      	movs	r2, #0
 8004346:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004348:	4b15      	ldr	r3, [pc, #84]	; (80043a0 <HAL_ADC_MspInit+0xc8>)
 800434a:	2200      	movs	r2, #0
 800434c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800434e:	4b14      	ldr	r3, [pc, #80]	; (80043a0 <HAL_ADC_MspInit+0xc8>)
 8004350:	2280      	movs	r2, #128	; 0x80
 8004352:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004354:	4b12      	ldr	r3, [pc, #72]	; (80043a0 <HAL_ADC_MspInit+0xc8>)
 8004356:	f44f 7200 	mov.w	r2, #512	; 0x200
 800435a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800435c:	4b10      	ldr	r3, [pc, #64]	; (80043a0 <HAL_ADC_MspInit+0xc8>)
 800435e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004362:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004364:	4b0e      	ldr	r3, [pc, #56]	; (80043a0 <HAL_ADC_MspInit+0xc8>)
 8004366:	2220      	movs	r2, #32
 8004368:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800436a:	4b0d      	ldr	r3, [pc, #52]	; (80043a0 <HAL_ADC_MspInit+0xc8>)
 800436c:	2200      	movs	r2, #0
 800436e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004370:	480b      	ldr	r0, [pc, #44]	; (80043a0 <HAL_ADC_MspInit+0xc8>)
 8004372:	f001 fb2d 	bl	80059d0 <HAL_DMA_Init>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d001      	beq.n	8004380 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 800437c:	f7ff f922 	bl	80035c4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	4a07      	ldr	r2, [pc, #28]	; (80043a0 <HAL_ADC_MspInit+0xc8>)
 8004384:	621a      	str	r2, [r3, #32]
 8004386:	4a06      	ldr	r2, [pc, #24]	; (80043a0 <HAL_ADC_MspInit+0xc8>)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800438c:	bf00      	nop
 800438e:	3720      	adds	r7, #32
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	40012400 	.word	0x40012400
 8004398:	40021000 	.word	0x40021000
 800439c:	40010800 	.word	0x40010800
 80043a0:	2000014c 	.word	0x2000014c
 80043a4:	40020008 	.word	0x40020008

080043a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b088      	sub	sp, #32
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043b0:	f107 0310 	add.w	r3, r7, #16
 80043b4:	2200      	movs	r2, #0
 80043b6:	601a      	str	r2, [r3, #0]
 80043b8:	605a      	str	r2, [r3, #4]
 80043ba:	609a      	str	r2, [r3, #8]
 80043bc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a15      	ldr	r2, [pc, #84]	; (8004418 <HAL_I2C_MspInit+0x70>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d123      	bne.n	8004410 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043c8:	4b14      	ldr	r3, [pc, #80]	; (800441c <HAL_I2C_MspInit+0x74>)
 80043ca:	699b      	ldr	r3, [r3, #24]
 80043cc:	4a13      	ldr	r2, [pc, #76]	; (800441c <HAL_I2C_MspInit+0x74>)
 80043ce:	f043 0308 	orr.w	r3, r3, #8
 80043d2:	6193      	str	r3, [r2, #24]
 80043d4:	4b11      	ldr	r3, [pc, #68]	; (800441c <HAL_I2C_MspInit+0x74>)
 80043d6:	699b      	ldr	r3, [r3, #24]
 80043d8:	f003 0308 	and.w	r3, r3, #8
 80043dc:	60fb      	str	r3, [r7, #12]
 80043de:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80043e0:	23c0      	movs	r3, #192	; 0xc0
 80043e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80043e4:	2312      	movs	r3, #18
 80043e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80043e8:	2303      	movs	r3, #3
 80043ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043ec:	f107 0310 	add.w	r3, r7, #16
 80043f0:	4619      	mov	r1, r3
 80043f2:	480b      	ldr	r0, [pc, #44]	; (8004420 <HAL_I2C_MspInit+0x78>)
 80043f4:	f001 fee4 	bl	80061c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80043f8:	4b08      	ldr	r3, [pc, #32]	; (800441c <HAL_I2C_MspInit+0x74>)
 80043fa:	69db      	ldr	r3, [r3, #28]
 80043fc:	4a07      	ldr	r2, [pc, #28]	; (800441c <HAL_I2C_MspInit+0x74>)
 80043fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004402:	61d3      	str	r3, [r2, #28]
 8004404:	4b05      	ldr	r3, [pc, #20]	; (800441c <HAL_I2C_MspInit+0x74>)
 8004406:	69db      	ldr	r3, [r3, #28]
 8004408:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800440c:	60bb      	str	r3, [r7, #8]
 800440e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004410:	bf00      	nop
 8004412:	3720      	adds	r7, #32
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	40005400 	.word	0x40005400
 800441c:	40021000 	.word	0x40021000
 8004420:	40010c00 	.word	0x40010c00

08004424 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b08a      	sub	sp, #40	; 0x28
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800442c:	f107 0318 	add.w	r3, r7, #24
 8004430:	2200      	movs	r2, #0
 8004432:	601a      	str	r2, [r3, #0]
 8004434:	605a      	str	r2, [r3, #4]
 8004436:	609a      	str	r2, [r3, #8]
 8004438:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a2b      	ldr	r2, [pc, #172]	; (80044ec <HAL_TIM_Encoder_MspInit+0xc8>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d125      	bne.n	8004490 <HAL_TIM_Encoder_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004444:	4b2a      	ldr	r3, [pc, #168]	; (80044f0 <HAL_TIM_Encoder_MspInit+0xcc>)
 8004446:	699b      	ldr	r3, [r3, #24]
 8004448:	4a29      	ldr	r2, [pc, #164]	; (80044f0 <HAL_TIM_Encoder_MspInit+0xcc>)
 800444a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800444e:	6193      	str	r3, [r2, #24]
 8004450:	4b27      	ldr	r3, [pc, #156]	; (80044f0 <HAL_TIM_Encoder_MspInit+0xcc>)
 8004452:	699b      	ldr	r3, [r3, #24]
 8004454:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004458:	617b      	str	r3, [r7, #20]
 800445a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800445c:	4b24      	ldr	r3, [pc, #144]	; (80044f0 <HAL_TIM_Encoder_MspInit+0xcc>)
 800445e:	699b      	ldr	r3, [r3, #24]
 8004460:	4a23      	ldr	r2, [pc, #140]	; (80044f0 <HAL_TIM_Encoder_MspInit+0xcc>)
 8004462:	f043 0304 	orr.w	r3, r3, #4
 8004466:	6193      	str	r3, [r2, #24]
 8004468:	4b21      	ldr	r3, [pc, #132]	; (80044f0 <HAL_TIM_Encoder_MspInit+0xcc>)
 800446a:	699b      	ldr	r3, [r3, #24]
 800446c:	f003 0304 	and.w	r3, r3, #4
 8004470:	613b      	str	r3, [r7, #16]
 8004472:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004474:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004478:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800447a:	2300      	movs	r3, #0
 800447c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800447e:	2300      	movs	r3, #0
 8004480:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004482:	f107 0318 	add.w	r3, r7, #24
 8004486:	4619      	mov	r1, r3
 8004488:	481a      	ldr	r0, [pc, #104]	; (80044f4 <HAL_TIM_Encoder_MspInit+0xd0>)
 800448a:	f001 fe99 	bl	80061c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800448e:	e028      	b.n	80044e2 <HAL_TIM_Encoder_MspInit+0xbe>
  else if(htim_encoder->Instance==TIM3)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a18      	ldr	r2, [pc, #96]	; (80044f8 <HAL_TIM_Encoder_MspInit+0xd4>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d123      	bne.n	80044e2 <HAL_TIM_Encoder_MspInit+0xbe>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800449a:	4b15      	ldr	r3, [pc, #84]	; (80044f0 <HAL_TIM_Encoder_MspInit+0xcc>)
 800449c:	69db      	ldr	r3, [r3, #28]
 800449e:	4a14      	ldr	r2, [pc, #80]	; (80044f0 <HAL_TIM_Encoder_MspInit+0xcc>)
 80044a0:	f043 0302 	orr.w	r3, r3, #2
 80044a4:	61d3      	str	r3, [r2, #28]
 80044a6:	4b12      	ldr	r3, [pc, #72]	; (80044f0 <HAL_TIM_Encoder_MspInit+0xcc>)
 80044a8:	69db      	ldr	r3, [r3, #28]
 80044aa:	f003 0302 	and.w	r3, r3, #2
 80044ae:	60fb      	str	r3, [r7, #12]
 80044b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044b2:	4b0f      	ldr	r3, [pc, #60]	; (80044f0 <HAL_TIM_Encoder_MspInit+0xcc>)
 80044b4:	699b      	ldr	r3, [r3, #24]
 80044b6:	4a0e      	ldr	r2, [pc, #56]	; (80044f0 <HAL_TIM_Encoder_MspInit+0xcc>)
 80044b8:	f043 0304 	orr.w	r3, r3, #4
 80044bc:	6193      	str	r3, [r2, #24]
 80044be:	4b0c      	ldr	r3, [pc, #48]	; (80044f0 <HAL_TIM_Encoder_MspInit+0xcc>)
 80044c0:	699b      	ldr	r3, [r3, #24]
 80044c2:	f003 0304 	and.w	r3, r3, #4
 80044c6:	60bb      	str	r3, [r7, #8]
 80044c8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80044ca:	23c0      	movs	r3, #192	; 0xc0
 80044cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80044ce:	2300      	movs	r3, #0
 80044d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044d2:	2300      	movs	r3, #0
 80044d4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044d6:	f107 0318 	add.w	r3, r7, #24
 80044da:	4619      	mov	r1, r3
 80044dc:	4805      	ldr	r0, [pc, #20]	; (80044f4 <HAL_TIM_Encoder_MspInit+0xd0>)
 80044de:	f001 fe6f 	bl	80061c0 <HAL_GPIO_Init>
}
 80044e2:	bf00      	nop
 80044e4:	3728      	adds	r7, #40	; 0x28
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	40012c00 	.word	0x40012c00
 80044f0:	40021000 	.word	0x40021000
 80044f4:	40010800 	.word	0x40010800
 80044f8:	40000400 	.word	0x40000400

080044fc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b085      	sub	sp, #20
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a09      	ldr	r2, [pc, #36]	; (8004530 <HAL_TIM_PWM_MspInit+0x34>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d10b      	bne.n	8004526 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800450e:	4b09      	ldr	r3, [pc, #36]	; (8004534 <HAL_TIM_PWM_MspInit+0x38>)
 8004510:	69db      	ldr	r3, [r3, #28]
 8004512:	4a08      	ldr	r2, [pc, #32]	; (8004534 <HAL_TIM_PWM_MspInit+0x38>)
 8004514:	f043 0304 	orr.w	r3, r3, #4
 8004518:	61d3      	str	r3, [r2, #28]
 800451a:	4b06      	ldr	r3, [pc, #24]	; (8004534 <HAL_TIM_PWM_MspInit+0x38>)
 800451c:	69db      	ldr	r3, [r3, #28]
 800451e:	f003 0304 	and.w	r3, r3, #4
 8004522:	60fb      	str	r3, [r7, #12]
 8004524:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004526:	bf00      	nop
 8004528:	3714      	adds	r7, #20
 800452a:	46bd      	mov	sp, r7
 800452c:	bc80      	pop	{r7}
 800452e:	4770      	bx	lr
 8004530:	40000800 	.word	0x40000800
 8004534:	40021000 	.word	0x40021000

08004538 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b088      	sub	sp, #32
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004540:	f107 0310 	add.w	r3, r7, #16
 8004544:	2200      	movs	r2, #0
 8004546:	601a      	str	r2, [r3, #0]
 8004548:	605a      	str	r2, [r3, #4]
 800454a:	609a      	str	r2, [r3, #8]
 800454c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a10      	ldr	r2, [pc, #64]	; (8004594 <HAL_TIM_MspPostInit+0x5c>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d118      	bne.n	800458a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004558:	4b0f      	ldr	r3, [pc, #60]	; (8004598 <HAL_TIM_MspPostInit+0x60>)
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	4a0e      	ldr	r2, [pc, #56]	; (8004598 <HAL_TIM_MspPostInit+0x60>)
 800455e:	f043 0308 	orr.w	r3, r3, #8
 8004562:	6193      	str	r3, [r2, #24]
 8004564:	4b0c      	ldr	r3, [pc, #48]	; (8004598 <HAL_TIM_MspPostInit+0x60>)
 8004566:	699b      	ldr	r3, [r3, #24]
 8004568:	f003 0308 	and.w	r3, r3, #8
 800456c:	60fb      	str	r3, [r7, #12]
 800456e:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004570:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004574:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004576:	2302      	movs	r3, #2
 8004578:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800457a:	2302      	movs	r3, #2
 800457c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800457e:	f107 0310 	add.w	r3, r7, #16
 8004582:	4619      	mov	r1, r3
 8004584:	4805      	ldr	r0, [pc, #20]	; (800459c <HAL_TIM_MspPostInit+0x64>)
 8004586:	f001 fe1b 	bl	80061c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800458a:	bf00      	nop
 800458c:	3720      	adds	r7, #32
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	40000800 	.word	0x40000800
 8004598:	40021000 	.word	0x40021000
 800459c:	40010c00 	.word	0x40010c00

080045a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b088      	sub	sp, #32
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045a8:	f107 0310 	add.w	r3, r7, #16
 80045ac:	2200      	movs	r2, #0
 80045ae:	601a      	str	r2, [r3, #0]
 80045b0:	605a      	str	r2, [r3, #4]
 80045b2:	609a      	str	r2, [r3, #8]
 80045b4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a1c      	ldr	r2, [pc, #112]	; (800462c <HAL_UART_MspInit+0x8c>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d131      	bne.n	8004624 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80045c0:	4b1b      	ldr	r3, [pc, #108]	; (8004630 <HAL_UART_MspInit+0x90>)
 80045c2:	69db      	ldr	r3, [r3, #28]
 80045c4:	4a1a      	ldr	r2, [pc, #104]	; (8004630 <HAL_UART_MspInit+0x90>)
 80045c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045ca:	61d3      	str	r3, [r2, #28]
 80045cc:	4b18      	ldr	r3, [pc, #96]	; (8004630 <HAL_UART_MspInit+0x90>)
 80045ce:	69db      	ldr	r3, [r3, #28]
 80045d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045d4:	60fb      	str	r3, [r7, #12]
 80045d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045d8:	4b15      	ldr	r3, [pc, #84]	; (8004630 <HAL_UART_MspInit+0x90>)
 80045da:	699b      	ldr	r3, [r3, #24]
 80045dc:	4a14      	ldr	r2, [pc, #80]	; (8004630 <HAL_UART_MspInit+0x90>)
 80045de:	f043 0308 	orr.w	r3, r3, #8
 80045e2:	6193      	str	r3, [r2, #24]
 80045e4:	4b12      	ldr	r3, [pc, #72]	; (8004630 <HAL_UART_MspInit+0x90>)
 80045e6:	699b      	ldr	r3, [r3, #24]
 80045e8:	f003 0308 	and.w	r3, r3, #8
 80045ec:	60bb      	str	r3, [r7, #8]
 80045ee:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80045f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045f6:	2302      	movs	r3, #2
 80045f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80045fa:	2303      	movs	r3, #3
 80045fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045fe:	f107 0310 	add.w	r3, r7, #16
 8004602:	4619      	mov	r1, r3
 8004604:	480b      	ldr	r0, [pc, #44]	; (8004634 <HAL_UART_MspInit+0x94>)
 8004606:	f001 fddb 	bl	80061c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800460a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800460e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004610:	2300      	movs	r3, #0
 8004612:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004614:	2300      	movs	r3, #0
 8004616:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004618:	f107 0310 	add.w	r3, r7, #16
 800461c:	4619      	mov	r1, r3
 800461e:	4805      	ldr	r0, [pc, #20]	; (8004634 <HAL_UART_MspInit+0x94>)
 8004620:	f001 fdce 	bl	80061c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004624:	bf00      	nop
 8004626:	3720      	adds	r7, #32
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}
 800462c:	40004800 	.word	0x40004800
 8004630:	40021000 	.word	0x40021000
 8004634:	40010c00 	.word	0x40010c00

08004638 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004638:	b480      	push	{r7}
 800463a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800463c:	e7fe      	b.n	800463c <NMI_Handler+0x4>

0800463e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800463e:	b480      	push	{r7}
 8004640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004642:	e7fe      	b.n	8004642 <HardFault_Handler+0x4>

08004644 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004644:	b480      	push	{r7}
 8004646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004648:	e7fe      	b.n	8004648 <MemManage_Handler+0x4>

0800464a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800464a:	b480      	push	{r7}
 800464c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800464e:	e7fe      	b.n	800464e <BusFault_Handler+0x4>

08004650 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004650:	b480      	push	{r7}
 8004652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004654:	e7fe      	b.n	8004654 <UsageFault_Handler+0x4>

08004656 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004656:	b480      	push	{r7}
 8004658:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800465a:	bf00      	nop
 800465c:	46bd      	mov	sp, r7
 800465e:	bc80      	pop	{r7}
 8004660:	4770      	bx	lr

08004662 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004662:	b480      	push	{r7}
 8004664:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004666:	bf00      	nop
 8004668:	46bd      	mov	sp, r7
 800466a:	bc80      	pop	{r7}
 800466c:	4770      	bx	lr

0800466e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800466e:	b480      	push	{r7}
 8004670:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004672:	bf00      	nop
 8004674:	46bd      	mov	sp, r7
 8004676:	bc80      	pop	{r7}
 8004678:	4770      	bx	lr
	...

0800467c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if (StraightFlag == 1) {
 8004680:	4b0b      	ldr	r3, [pc, #44]	; (80046b0 <SysTick_Handler+0x34>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2b01      	cmp	r3, #1
 8004686:	d107      	bne.n	8004698 <SysTick_Handler+0x1c>
		aproximationPID(ADELANTE);
 8004688:	2000      	movs	r0, #0
 800468a:	f000 f823 	bl	80046d4 <aproximationPID>
		angularPID();
 800468e:	f000 f98f 	bl	80049b0 <angularPID>
		moveStraight();
 8004692:	f000 facf 	bl	8004c34 <moveStraight>
 8004696:	e006      	b.n	80046a6 <SysTick_Handler+0x2a>
	}else if(StraightFlag == 2){
 8004698:	4b05      	ldr	r3, [pc, #20]	; (80046b0 <SysTick_Handler+0x34>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2b02      	cmp	r3, #2
 800469e:	d102      	bne.n	80046a6 <SysTick_Handler+0x2a>
		aproximationPID(ATRAS);
 80046a0:	2002      	movs	r0, #2
 80046a2:	f000 f817 	bl	80046d4 <aproximationPID>
		//moveStraight();
	}
	//moveStraight();
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80046a6:	f000 fca7 	bl	8004ff8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80046aa:	bf00      	nop
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	200040bc 	.word	0x200040bc

080046b4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80046b8:	4802      	ldr	r0, [pc, #8]	; (80046c4 <DMA1_Channel1_IRQHandler+0x10>)
 80046ba:	f001 fa43 	bl	8005b44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80046be:	bf00      	nop
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	2000014c 	.word	0x2000014c

080046c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80046c8:	b480      	push	{r7}
 80046ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80046cc:	bf00      	nop
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bc80      	pop	{r7}
 80046d2:	4770      	bx	lr

080046d4 <aproximationPID>:
float timeNowT, timePrevT, timeNowA, timePrevA, timeNowP, timePrevP;
int motLeft, motRight;
int pLeft = 1;
int pRight = 1;

void aproximationPID(int sentido) {
 80046d4:	b5b0      	push	{r4, r5, r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af02      	add	r7, sp, #8
 80046da:	6078      	str	r0, [r7, #4]
	if (sentido == ADELANTE) {
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d127      	bne.n	8004732 <aproximationPID+0x5e>
			errorP = objectiveDistance
							- (calcularDistancia((TIM1->CNT) >> 1)
 80046e2:	4b92      	ldr	r3, [pc, #584]	; (800492c <aproximationPID+0x258>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4618      	mov	r0, r3
 80046e8:	f7fc faf8 	bl	8000cdc <__aeabi_i2f>
 80046ec:	4604      	mov	r4, r0
 80046ee:	4b90      	ldr	r3, [pc, #576]	; (8004930 <aproximationPID+0x25c>)
 80046f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f2:	085b      	lsrs	r3, r3, #1
 80046f4:	4618      	mov	r0, r3
 80046f6:	f7fe ff6b 	bl	80035d0 <calcularDistancia>
 80046fa:	4605      	mov	r5, r0
									+ calcularDistancia((TIM3->CNT) >> 1)) / 2;
 80046fc:	4b8d      	ldr	r3, [pc, #564]	; (8004934 <aproximationPID+0x260>)
 80046fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004700:	085b      	lsrs	r3, r3, #1
 8004702:	4618      	mov	r0, r3
 8004704:	f7fe ff64 	bl	80035d0 <calcularDistancia>
 8004708:	4603      	mov	r3, r0
 800470a:	4619      	mov	r1, r3
 800470c:	4628      	mov	r0, r5
 800470e:	f7fc fa31 	bl	8000b74 <__addsf3>
 8004712:	4603      	mov	r3, r0
 8004714:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004718:	4618      	mov	r0, r3
 800471a:	f7fc fbe7 	bl	8000eec <__aeabi_fdiv>
 800471e:	4603      	mov	r3, r0
							- (calcularDistancia((TIM1->CNT) >> 1)
 8004720:	4619      	mov	r1, r3
 8004722:	4620      	mov	r0, r4
 8004724:	f7fc fa24 	bl	8000b70 <__aeabi_fsub>
 8004728:	4603      	mov	r3, r0
 800472a:	461a      	mov	r2, r3
			errorP = objectiveDistance
 800472c:	4b82      	ldr	r3, [pc, #520]	; (8004938 <aproximationPID+0x264>)
 800472e:	601a      	str	r2, [r3, #0]
 8004730:	e030      	b.n	8004794 <aproximationPID+0xc0>
	} else if (sentido == IZQUIERDA) {
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2b01      	cmp	r3, #1
 8004736:	d115      	bne.n	8004764 <aproximationPID+0x90>
		errorP =   objectiveDistance - calcularDistancia((TIM3->CNT) >> 1);
 8004738:	4b7c      	ldr	r3, [pc, #496]	; (800492c <aproximationPID+0x258>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4618      	mov	r0, r3
 800473e:	f7fc facd 	bl	8000cdc <__aeabi_i2f>
 8004742:	4604      	mov	r4, r0
 8004744:	4b7b      	ldr	r3, [pc, #492]	; (8004934 <aproximationPID+0x260>)
 8004746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004748:	085b      	lsrs	r3, r3, #1
 800474a:	4618      	mov	r0, r3
 800474c:	f7fe ff40 	bl	80035d0 <calcularDistancia>
 8004750:	4603      	mov	r3, r0
 8004752:	4619      	mov	r1, r3
 8004754:	4620      	mov	r0, r4
 8004756:	f7fc fa0b 	bl	8000b70 <__aeabi_fsub>
 800475a:	4603      	mov	r3, r0
 800475c:	461a      	mov	r2, r3
 800475e:	4b76      	ldr	r3, [pc, #472]	; (8004938 <aproximationPID+0x264>)
 8004760:	601a      	str	r2, [r3, #0]
 8004762:	e017      	b.n	8004794 <aproximationPID+0xc0>
	} else if (sentido == ATRAS) {
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2b02      	cmp	r3, #2
 8004768:	d114      	bne.n	8004794 <aproximationPID+0xc0>
		errorP =  objectiveDistance - calcularDistancia((TIM1->CNT) >> 1) ;
 800476a:	4b70      	ldr	r3, [pc, #448]	; (800492c <aproximationPID+0x258>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4618      	mov	r0, r3
 8004770:	f7fc fab4 	bl	8000cdc <__aeabi_i2f>
 8004774:	4604      	mov	r4, r0
 8004776:	4b6e      	ldr	r3, [pc, #440]	; (8004930 <aproximationPID+0x25c>)
 8004778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477a:	085b      	lsrs	r3, r3, #1
 800477c:	4618      	mov	r0, r3
 800477e:	f7fe ff27 	bl	80035d0 <calcularDistancia>
 8004782:	4603      	mov	r3, r0
 8004784:	4619      	mov	r1, r3
 8004786:	4620      	mov	r0, r4
 8004788:	f7fc f9f2 	bl	8000b70 <__aeabi_fsub>
 800478c:	4603      	mov	r3, r0
 800478e:	461a      	mov	r2, r3
 8004790:	4b69      	ldr	r3, [pc, #420]	; (8004938 <aproximationPID+0x264>)
 8004792:	601a      	str	r2, [r3, #0]
		}else{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
		}*/
	}

	timePrevP = timeNowT;
 8004794:	4b69      	ldr	r3, [pc, #420]	; (800493c <aproximationPID+0x268>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a69      	ldr	r2, [pc, #420]	; (8004940 <aproximationPID+0x26c>)
 800479a:	6013      	str	r3, [r2, #0]
	timeNowP = HAL_GetTick();
 800479c:	f000 fc3e 	bl	800501c <HAL_GetTick>
 80047a0:	4603      	mov	r3, r0
 80047a2:	4618      	mov	r0, r3
 80047a4:	f7fc fa96 	bl	8000cd4 <__aeabi_ui2f>
 80047a8:	4603      	mov	r3, r0
 80047aa:	4a66      	ldr	r2, [pc, #408]	; (8004944 <aproximationPID+0x270>)
 80047ac:	6013      	str	r3, [r2, #0]
	elapsedTime = (timeNowP - timePrevP) / 1000;
 80047ae:	4b65      	ldr	r3, [pc, #404]	; (8004944 <aproximationPID+0x270>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a63      	ldr	r2, [pc, #396]	; (8004940 <aproximationPID+0x26c>)
 80047b4:	6812      	ldr	r2, [r2, #0]
 80047b6:	4611      	mov	r1, r2
 80047b8:	4618      	mov	r0, r3
 80047ba:	f7fc f9d9 	bl	8000b70 <__aeabi_fsub>
 80047be:	4603      	mov	r3, r0
 80047c0:	4961      	ldr	r1, [pc, #388]	; (8004948 <aproximationPID+0x274>)
 80047c2:	4618      	mov	r0, r3
 80047c4:	f7fc fb92 	bl	8000eec <__aeabi_fdiv>
 80047c8:	4603      	mov	r3, r0
 80047ca:	461a      	mov	r2, r3
 80047cc:	4b5f      	ldr	r3, [pc, #380]	; (800494c <aproximationPID+0x278>)
 80047ce:	601a      	str	r2, [r3, #0]
	pidD = KDP * ((errorP - previousErrorP) / elapsedTime);
 80047d0:	4b59      	ldr	r3, [pc, #356]	; (8004938 <aproximationPID+0x264>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a5e      	ldr	r2, [pc, #376]	; (8004950 <aproximationPID+0x27c>)
 80047d6:	6812      	ldr	r2, [r2, #0]
 80047d8:	4611      	mov	r1, r2
 80047da:	4618      	mov	r0, r3
 80047dc:	f7fc f9c8 	bl	8000b70 <__aeabi_fsub>
 80047e0:	4603      	mov	r3, r0
 80047e2:	461a      	mov	r2, r3
 80047e4:	4b59      	ldr	r3, [pc, #356]	; (800494c <aproximationPID+0x278>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4619      	mov	r1, r3
 80047ea:	4610      	mov	r0, r2
 80047ec:	f7fc fb7e 	bl	8000eec <__aeabi_fdiv>
 80047f0:	4603      	mov	r3, r0
 80047f2:	461a      	mov	r2, r3
 80047f4:	4b57      	ldr	r3, [pc, #348]	; (8004954 <aproximationPID+0x280>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4619      	mov	r1, r3
 80047fa:	4610      	mov	r0, r2
 80047fc:	f7fc fac2 	bl	8000d84 <__aeabi_fmul>
 8004800:	4603      	mov	r3, r0
 8004802:	461a      	mov	r2, r3
 8004804:	4b54      	ldr	r3, [pc, #336]	; (8004958 <aproximationPID+0x284>)
 8004806:	601a      	str	r2, [r3, #0]
	pidP = KPP * errorP;
 8004808:	4b54      	ldr	r3, [pc, #336]	; (800495c <aproximationPID+0x288>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a4a      	ldr	r2, [pc, #296]	; (8004938 <aproximationPID+0x264>)
 800480e:	6812      	ldr	r2, [r2, #0]
 8004810:	4611      	mov	r1, r2
 8004812:	4618      	mov	r0, r3
 8004814:	f7fc fab6 	bl	8000d84 <__aeabi_fmul>
 8004818:	4603      	mov	r3, r0
 800481a:	461a      	mov	r2, r3
 800481c:	4b50      	ldr	r3, [pc, #320]	; (8004960 <aproximationPID+0x28c>)
 800481e:	601a      	str	r2, [r3, #0]
	pid = pidP + pidD;
 8004820:	4b4f      	ldr	r3, [pc, #316]	; (8004960 <aproximationPID+0x28c>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a4c      	ldr	r2, [pc, #304]	; (8004958 <aproximationPID+0x284>)
 8004826:	6812      	ldr	r2, [r2, #0]
 8004828:	4611      	mov	r1, r2
 800482a:	4618      	mov	r0, r3
 800482c:	f7fc f9a2 	bl	8000b74 <__addsf3>
 8004830:	4603      	mov	r3, r0
 8004832:	461a      	mov	r2, r3
 8004834:	4b4b      	ldr	r3, [pc, #300]	; (8004964 <aproximationPID+0x290>)
 8004836:	601a      	str	r2, [r3, #0]
	if (pid > velocity) {
 8004838:	4b4a      	ldr	r3, [pc, #296]	; (8004964 <aproximationPID+0x290>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a4a      	ldr	r2, [pc, #296]	; (8004968 <aproximationPID+0x294>)
 800483e:	6812      	ldr	r2, [r2, #0]
 8004840:	4611      	mov	r1, r2
 8004842:	4618      	mov	r0, r3
 8004844:	f7fc fc5a 	bl	80010fc <__aeabi_fcmpgt>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d003      	beq.n	8004856 <aproximationPID+0x182>
		//intUartSend(1);
		pid = velocity;
 800484e:	4b46      	ldr	r3, [pc, #280]	; (8004968 <aproximationPID+0x294>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a44      	ldr	r2, [pc, #272]	; (8004964 <aproximationPID+0x290>)
 8004854:	6013      	str	r3, [r2, #0]
	}
	if (pid < -velocity) {
 8004856:	4b44      	ldr	r3, [pc, #272]	; (8004968 <aproximationPID+0x294>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800485e:	4a41      	ldr	r2, [pc, #260]	; (8004964 <aproximationPID+0x290>)
 8004860:	6812      	ldr	r2, [r2, #0]
 8004862:	4611      	mov	r1, r2
 8004864:	4618      	mov	r0, r3
 8004866:	f7fc fc49 	bl	80010fc <__aeabi_fcmpgt>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d005      	beq.n	800487c <aproximationPID+0x1a8>
		//intUartSend(0);
		pid = -velocity;
 8004870:	4b3d      	ldr	r3, [pc, #244]	; (8004968 <aproximationPID+0x294>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004878:	4a3a      	ldr	r2, [pc, #232]	; (8004964 <aproximationPID+0x290>)
 800487a:	6013      	str	r3, [r2, #0]
	}
	xSpeed = pid;
 800487c:	4b39      	ldr	r3, [pc, #228]	; (8004964 <aproximationPID+0x290>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4618      	mov	r0, r3
 8004882:	f7fc fc45 	bl	8001110 <__aeabi_f2iz>
 8004886:	4603      	mov	r3, r0
 8004888:	4a38      	ldr	r2, [pc, #224]	; (800496c <aproximationPID+0x298>)
 800488a:	6013      	str	r3, [r2, #0]
	if (xSpeed < -1000) {
 800488c:	4b37      	ldr	r3, [pc, #220]	; (800496c <aproximationPID+0x298>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8004894:	da02      	bge.n	800489c <aproximationPID+0x1c8>
		xSpeed = -1000;
 8004896:	4b35      	ldr	r3, [pc, #212]	; (800496c <aproximationPID+0x298>)
 8004898:	4a35      	ldr	r2, [pc, #212]	; (8004970 <aproximationPID+0x29c>)
 800489a:	601a      	str	r2, [r3, #0]
	}

	previousErrorT = errorT;
 800489c:	4b35      	ldr	r3, [pc, #212]	; (8004974 <aproximationPID+0x2a0>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a35      	ldr	r2, [pc, #212]	; (8004978 <aproximationPID+0x2a4>)
 80048a2:	6013      	str	r3, [r2, #0]
	xSpeed = constrain(xSpeed, -1000, 1000);
 80048a4:	4b31      	ldr	r3, [pc, #196]	; (800496c <aproximationPID+0x298>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80048ac:	4930      	ldr	r1, [pc, #192]	; (8004970 <aproximationPID+0x29c>)
 80048ae:	4618      	mov	r0, r3
 80048b0:	f7fe fdc3 	bl	800343a <constrain>
 80048b4:	4603      	mov	r3, r0
 80048b6:	4a2d      	ldr	r2, [pc, #180]	; (800496c <aproximationPID+0x298>)
 80048b8:	6013      	str	r3, [r2, #0]
	xSpeed = MAP(xSpeed, -1000, 1000, -baseChoice[choice], baseChoice[choice]);
 80048ba:	4b2c      	ldr	r3, [pc, #176]	; (800496c <aproximationPID+0x298>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4618      	mov	r0, r3
 80048c0:	4b2e      	ldr	r3, [pc, #184]	; (800497c <aproximationPID+0x2a8>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a2e      	ldr	r2, [pc, #184]	; (8004980 <aproximationPID+0x2ac>)
 80048c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048ca:	425b      	negs	r3, r3
 80048cc:	4619      	mov	r1, r3
 80048ce:	4b2b      	ldr	r3, [pc, #172]	; (800497c <aproximationPID+0x2a8>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a2b      	ldr	r2, [pc, #172]	; (8004980 <aproximationPID+0x2ac>)
 80048d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048d8:	9300      	str	r3, [sp, #0]
 80048da:	460b      	mov	r3, r1
 80048dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80048e0:	4923      	ldr	r1, [pc, #140]	; (8004970 <aproximationPID+0x29c>)
 80048e2:	f7fe fd8f 	bl	8003404 <MAP>
 80048e6:	4603      	mov	r3, r0
 80048e8:	461a      	mov	r2, r3
 80048ea:	4b20      	ldr	r3, [pc, #128]	; (800496c <aproximationPID+0x298>)
 80048ec:	601a      	str	r2, [r3, #0]
	if (xSpeed >= 0) {
 80048ee:	4b1f      	ldr	r3, [pc, #124]	; (800496c <aproximationPID+0x298>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	db03      	blt.n	80048fe <aproximationPID+0x22a>
		direction = ADELANTE;
 80048f6:	4b23      	ldr	r3, [pc, #140]	; (8004984 <aproximationPID+0x2b0>)
 80048f8:	2200      	movs	r2, #0
 80048fa:	601a      	str	r2, [r3, #0]
 80048fc:	e007      	b.n	800490e <aproximationPID+0x23a>

	} else {
		xSpeed = -xSpeed;
 80048fe:	4b1b      	ldr	r3, [pc, #108]	; (800496c <aproximationPID+0x298>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	425b      	negs	r3, r3
 8004904:	4a19      	ldr	r2, [pc, #100]	; (800496c <aproximationPID+0x298>)
 8004906:	6013      	str	r3, [r2, #0]
		direction = ATRAS;
 8004908:	4b1e      	ldr	r3, [pc, #120]	; (8004984 <aproximationPID+0x2b0>)
 800490a:	2202      	movs	r2, #2
 800490c:	601a      	str	r2, [r3, #0]
	}
	if (xSpeed < 10000 && sentido == ADELANTE) {
 800490e:	4b17      	ldr	r3, [pc, #92]	; (800496c <aproximationPID+0x298>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f242 720f 	movw	r2, #9999	; 0x270f
 8004916:	4293      	cmp	r3, r2
 8004918:	dc36      	bgt.n	8004988 <aproximationPID+0x2b4>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d133      	bne.n	8004988 <aproximationPID+0x2b4>
		xSpeed = 10000;
 8004920:	4b12      	ldr	r3, [pc, #72]	; (800496c <aproximationPID+0x298>)
 8004922:	f242 7210 	movw	r2, #10000	; 0x2710
 8004926:	601a      	str	r2, [r3, #0]
	}

	/*if (xSpeed == baseChoice[choice]){
		aceleration = ATRAS;
	}*/
}
 8004928:	e03b      	b.n	80049a2 <aproximationPID+0x2ce>
 800492a:	bf00      	nop
 800492c:	200040c4 	.word	0x200040c4
 8004930:	40012c00 	.word	0x40012c00
 8004934:	40000400 	.word	0x40000400
 8004938:	200040ec 	.word	0x200040ec
 800493c:	200040fc 	.word	0x200040fc
 8004940:	20004110 	.word	0x20004110
 8004944:	2000410c 	.word	0x2000410c
 8004948:	447a0000 	.word	0x447a0000
 800494c:	200040d8 	.word	0x200040d8
 8004950:	200040f8 	.word	0x200040f8
 8004954:	200040b0 	.word	0x200040b0
 8004958:	200040e0 	.word	0x200040e0
 800495c:	200040ac 	.word	0x200040ac
 8004960:	200040dc 	.word	0x200040dc
 8004964:	200040d4 	.word	0x200040d4
 8004968:	200040b4 	.word	0x200040b4
 800496c:	200040c0 	.word	0x200040c0
 8004970:	fffffc18 	.word	0xfffffc18
 8004974:	200040e4 	.word	0x200040e4
 8004978:	200040f0 	.word	0x200040f0
 800497c:	20002320 	.word	0x20002320
 8004980:	2000004c 	.word	0x2000004c
 8004984:	200040c8 	.word	0x200040c8
	}else if (xSpeed < 13000 && sentido == ATRAS ){
 8004988:	4b08      	ldr	r3, [pc, #32]	; (80049ac <aproximationPID+0x2d8>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f243 22c7 	movw	r2, #12999	; 0x32c7
 8004990:	4293      	cmp	r3, r2
 8004992:	dc06      	bgt.n	80049a2 <aproximationPID+0x2ce>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2b02      	cmp	r3, #2
 8004998:	d103      	bne.n	80049a2 <aproximationPID+0x2ce>
		xSpeed = 13000;
 800499a:	4b04      	ldr	r3, [pc, #16]	; (80049ac <aproximationPID+0x2d8>)
 800499c:	f243 22c8 	movw	r2, #13000	; 0x32c8
 80049a0:	601a      	str	r2, [r3, #0]
}
 80049a2:	bf00      	nop
 80049a4:	3708      	adds	r7, #8
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bdb0      	pop	{r4, r5, r7, pc}
 80049aa:	bf00      	nop
 80049ac:	200040c0 	.word	0x200040c0

080049b0 <angularPID>:

void angularPID() {
 80049b0:	b580      	push	{r7, lr}
 80049b2:	af00      	add	r7, sp, #0
	 if (Sensors[3] > maxDistance[1] && Sensors[1] < maxDistance[2]) {
 80049b4:	4b8c      	ldr	r3, [pc, #560]	; (8004be8 <angularPID+0x238>)
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	4a8c      	ldr	r2, [pc, #560]	; (8004bec <angularPID+0x23c>)
 80049ba:	6852      	ldr	r2, [r2, #4]
 80049bc:	4611      	mov	r1, r2
 80049be:	4618      	mov	r0, r3
 80049c0:	f7fc fb9c 	bl	80010fc <__aeabi_fcmpgt>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d017      	beq.n	80049fa <angularPID+0x4a>
 80049ca:	4b87      	ldr	r3, [pc, #540]	; (8004be8 <angularPID+0x238>)
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	4a87      	ldr	r2, [pc, #540]	; (8004bec <angularPID+0x23c>)
 80049d0:	6892      	ldr	r2, [r2, #8]
 80049d2:	4611      	mov	r1, r2
 80049d4:	4618      	mov	r0, r3
 80049d6:	f7fc fb73 	bl	80010c0 <__aeabi_fcmplt>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d00c      	beq.n	80049fa <angularPID+0x4a>
		//intUartSend(0);
		errorA = Sensors[1] - CenterDistanceRight;
 80049e0:	4b81      	ldr	r3, [pc, #516]	; (8004be8 <angularPID+0x238>)
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	4a82      	ldr	r2, [pc, #520]	; (8004bf0 <angularPID+0x240>)
 80049e6:	6812      	ldr	r2, [r2, #0]
 80049e8:	4611      	mov	r1, r2
 80049ea:	4618      	mov	r0, r3
 80049ec:	f7fc f8c0 	bl	8000b70 <__aeabi_fsub>
 80049f0:	4603      	mov	r3, r0
 80049f2:	461a      	mov	r2, r3
 80049f4:	4b7f      	ldr	r3, [pc, #508]	; (8004bf4 <angularPID+0x244>)
 80049f6:	601a      	str	r2, [r3, #0]
 80049f8:	e061      	b.n	8004abe <angularPID+0x10e>
		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
	} else if (Sensors[3] < maxDistance[1]
 80049fa:	4b7b      	ldr	r3, [pc, #492]	; (8004be8 <angularPID+0x238>)
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	4a7b      	ldr	r2, [pc, #492]	; (8004bec <angularPID+0x23c>)
 8004a00:	6852      	ldr	r2, [r2, #4]
 8004a02:	4611      	mov	r1, r2
 8004a04:	4618      	mov	r0, r3
 8004a06:	f7fc fb5b 	bl	80010c0 <__aeabi_fcmplt>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d017      	beq.n	8004a40 <angularPID+0x90>
			&& Sensors[1] > maxDistance[2]) {
 8004a10:	4b75      	ldr	r3, [pc, #468]	; (8004be8 <angularPID+0x238>)
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	4a75      	ldr	r2, [pc, #468]	; (8004bec <angularPID+0x23c>)
 8004a16:	6892      	ldr	r2, [r2, #8]
 8004a18:	4611      	mov	r1, r2
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f7fc fb6e 	bl	80010fc <__aeabi_fcmpgt>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d00c      	beq.n	8004a40 <angularPID+0x90>
		//intUartSend(1);

		errorA = CenterDistanceLeft - Sensors[3];
 8004a26:	4b74      	ldr	r3, [pc, #464]	; (8004bf8 <angularPID+0x248>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a6f      	ldr	r2, [pc, #444]	; (8004be8 <angularPID+0x238>)
 8004a2c:	68d2      	ldr	r2, [r2, #12]
 8004a2e:	4611      	mov	r1, r2
 8004a30:	4618      	mov	r0, r3
 8004a32:	f7fc f89d 	bl	8000b70 <__aeabi_fsub>
 8004a36:	4603      	mov	r3, r0
 8004a38:	461a      	mov	r2, r3
 8004a3a:	4b6e      	ldr	r3, [pc, #440]	; (8004bf4 <angularPID+0x244>)
 8004a3c:	601a      	str	r2, [r3, #0]
 8004a3e:	e03e      	b.n	8004abe <angularPID+0x10e>
		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
	} else if (Sensors[1] > maxDistance[2]  && Sensors[3] > maxDistance[1]){
 8004a40:	4b69      	ldr	r3, [pc, #420]	; (8004be8 <angularPID+0x238>)
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	4a69      	ldr	r2, [pc, #420]	; (8004bec <angularPID+0x23c>)
 8004a46:	6892      	ldr	r2, [r2, #8]
 8004a48:	4611      	mov	r1, r2
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f7fc fb56 	bl	80010fc <__aeabi_fcmpgt>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00f      	beq.n	8004a76 <angularPID+0xc6>
 8004a56:	4b64      	ldr	r3, [pc, #400]	; (8004be8 <angularPID+0x238>)
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	4a64      	ldr	r2, [pc, #400]	; (8004bec <angularPID+0x23c>)
 8004a5c:	6852      	ldr	r2, [r2, #4]
 8004a5e:	4611      	mov	r1, r2
 8004a60:	4618      	mov	r0, r3
 8004a62:	f7fc fb4b 	bl	80010fc <__aeabi_fcmpgt>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d004      	beq.n	8004a76 <angularPID+0xc6>
		//intUartSend(3);

		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
		errorA = 0;
 8004a6c:	4b61      	ldr	r3, [pc, #388]	; (8004bf4 <angularPID+0x244>)
 8004a6e:	f04f 0200 	mov.w	r2, #0
 8004a72:	601a      	str	r2, [r3, #0]
 8004a74:	e023      	b.n	8004abe <angularPID+0x10e>
	} else if(Sensors[3] > CenterDistanceLeft){
 8004a76:	4b5c      	ldr	r3, [pc, #368]	; (8004be8 <angularPID+0x238>)
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	4a5f      	ldr	r2, [pc, #380]	; (8004bf8 <angularPID+0x248>)
 8004a7c:	6812      	ldr	r2, [r2, #0]
 8004a7e:	4611      	mov	r1, r2
 8004a80:	4618      	mov	r0, r3
 8004a82:	f7fc fb3b 	bl	80010fc <__aeabi_fcmpgt>
 8004a86:	4603      	mov	r3, r0
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d00c      	beq.n	8004aa6 <angularPID+0xf6>
		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);

		errorA = Sensors[1] - CenterDistanceRight;
 8004a8c:	4b56      	ldr	r3, [pc, #344]	; (8004be8 <angularPID+0x238>)
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	4a57      	ldr	r2, [pc, #348]	; (8004bf0 <angularPID+0x240>)
 8004a92:	6812      	ldr	r2, [r2, #0]
 8004a94:	4611      	mov	r1, r2
 8004a96:	4618      	mov	r0, r3
 8004a98:	f7fc f86a 	bl	8000b70 <__aeabi_fsub>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	4b54      	ldr	r3, [pc, #336]	; (8004bf4 <angularPID+0x244>)
 8004aa2:	601a      	str	r2, [r3, #0]
 8004aa4:	e00b      	b.n	8004abe <angularPID+0x10e>
	}else {

		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
		errorA = CenterDistanceLeft - Sensors[3];
 8004aa6:	4b54      	ldr	r3, [pc, #336]	; (8004bf8 <angularPID+0x248>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a4f      	ldr	r2, [pc, #316]	; (8004be8 <angularPID+0x238>)
 8004aac:	68d2      	ldr	r2, [r2, #12]
 8004aae:	4611      	mov	r1, r2
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f7fc f85d 	bl	8000b70 <__aeabi_fsub>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	461a      	mov	r2, r3
 8004aba:	4b4e      	ldr	r3, [pc, #312]	; (8004bf4 <angularPID+0x244>)
 8004abc:	601a      	str	r2, [r3, #0]
	/* if (Sensors[2] < maxDistance[0]){
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
	 }else{
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
	 }*/
	timePrevA = timeNowA;
 8004abe:	4b4f      	ldr	r3, [pc, #316]	; (8004bfc <angularPID+0x24c>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a4f      	ldr	r2, [pc, #316]	; (8004c00 <angularPID+0x250>)
 8004ac4:	6013      	str	r3, [r2, #0]
	timeNowA = HAL_GetTick();
 8004ac6:	f000 faa9 	bl	800501c <HAL_GetTick>
 8004aca:	4603      	mov	r3, r0
 8004acc:	4618      	mov	r0, r3
 8004ace:	f7fc f901 	bl	8000cd4 <__aeabi_ui2f>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	4a49      	ldr	r2, [pc, #292]	; (8004bfc <angularPID+0x24c>)
 8004ad6:	6013      	str	r3, [r2, #0]
	elapsedTime = (timeNowA - timePrevA) / 1000;
 8004ad8:	4b48      	ldr	r3, [pc, #288]	; (8004bfc <angularPID+0x24c>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a48      	ldr	r2, [pc, #288]	; (8004c00 <angularPID+0x250>)
 8004ade:	6812      	ldr	r2, [r2, #0]
 8004ae0:	4611      	mov	r1, r2
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f7fc f844 	bl	8000b70 <__aeabi_fsub>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	4946      	ldr	r1, [pc, #280]	; (8004c04 <angularPID+0x254>)
 8004aec:	4618      	mov	r0, r3
 8004aee:	f7fc f9fd 	bl	8000eec <__aeabi_fdiv>
 8004af2:	4603      	mov	r3, r0
 8004af4:	461a      	mov	r2, r3
 8004af6:	4b44      	ldr	r3, [pc, #272]	; (8004c08 <angularPID+0x258>)
 8004af8:	601a      	str	r2, [r3, #0]
	pidD = KDA * ((errorA - previousErrorA) / elapsedTime);
 8004afa:	4b3e      	ldr	r3, [pc, #248]	; (8004bf4 <angularPID+0x244>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a43      	ldr	r2, [pc, #268]	; (8004c0c <angularPID+0x25c>)
 8004b00:	6812      	ldr	r2, [r2, #0]
 8004b02:	4611      	mov	r1, r2
 8004b04:	4618      	mov	r0, r3
 8004b06:	f7fc f833 	bl	8000b70 <__aeabi_fsub>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	4b3e      	ldr	r3, [pc, #248]	; (8004c08 <angularPID+0x258>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4619      	mov	r1, r3
 8004b14:	4610      	mov	r0, r2
 8004b16:	f7fc f9e9 	bl	8000eec <__aeabi_fdiv>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	4b3c      	ldr	r3, [pc, #240]	; (8004c10 <angularPID+0x260>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4619      	mov	r1, r3
 8004b24:	4610      	mov	r0, r2
 8004b26:	f7fc f92d 	bl	8000d84 <__aeabi_fmul>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	4b39      	ldr	r3, [pc, #228]	; (8004c14 <angularPID+0x264>)
 8004b30:	601a      	str	r2, [r3, #0]
	pidP = KPA * errorA;
 8004b32:	4b39      	ldr	r3, [pc, #228]	; (8004c18 <angularPID+0x268>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a2f      	ldr	r2, [pc, #188]	; (8004bf4 <angularPID+0x244>)
 8004b38:	6812      	ldr	r2, [r2, #0]
 8004b3a:	4611      	mov	r1, r2
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f7fc f921 	bl	8000d84 <__aeabi_fmul>
 8004b42:	4603      	mov	r3, r0
 8004b44:	461a      	mov	r2, r3
 8004b46:	4b35      	ldr	r3, [pc, #212]	; (8004c1c <angularPID+0x26c>)
 8004b48:	601a      	str	r2, [r3, #0]
	pid = pidP + pidD;
 8004b4a:	4b34      	ldr	r3, [pc, #208]	; (8004c1c <angularPID+0x26c>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a31      	ldr	r2, [pc, #196]	; (8004c14 <angularPID+0x264>)
 8004b50:	6812      	ldr	r2, [r2, #0]
 8004b52:	4611      	mov	r1, r2
 8004b54:	4618      	mov	r0, r3
 8004b56:	f7fc f80d 	bl	8000b74 <__addsf3>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	4b30      	ldr	r3, [pc, #192]	; (8004c20 <angularPID+0x270>)
 8004b60:	601a      	str	r2, [r3, #0]

	if (pid > 100) {
 8004b62:	4b2f      	ldr	r3, [pc, #188]	; (8004c20 <angularPID+0x270>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	492f      	ldr	r1, [pc, #188]	; (8004c24 <angularPID+0x274>)
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f7fc fac7 	bl	80010fc <__aeabi_fcmpgt>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d002      	beq.n	8004b7a <angularPID+0x1ca>
		//intUartSend(1);
		pid = 100;
 8004b74:	4b2a      	ldr	r3, [pc, #168]	; (8004c20 <angularPID+0x270>)
 8004b76:	4a2b      	ldr	r2, [pc, #172]	; (8004c24 <angularPID+0x274>)
 8004b78:	601a      	str	r2, [r3, #0]
	}
	if (pid < -100) {
 8004b7a:	4b29      	ldr	r3, [pc, #164]	; (8004c20 <angularPID+0x270>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	492a      	ldr	r1, [pc, #168]	; (8004c28 <angularPID+0x278>)
 8004b80:	4618      	mov	r0, r3
 8004b82:	f7fc fa9d 	bl	80010c0 <__aeabi_fcmplt>
 8004b86:	4603      	mov	r3, r0
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d002      	beq.n	8004b92 <angularPID+0x1e2>
		//intUartSend(0);
		pid = -100;
 8004b8c:	4b24      	ldr	r3, [pc, #144]	; (8004c20 <angularPID+0x270>)
 8004b8e:	4a26      	ldr	r2, [pc, #152]	; (8004c28 <angularPID+0x278>)
 8004b90:	601a      	str	r2, [r3, #0]
	}
	pLeft = (100 - pid)/100;
 8004b92:	4b23      	ldr	r3, [pc, #140]	; (8004c20 <angularPID+0x270>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4619      	mov	r1, r3
 8004b98:	4822      	ldr	r0, [pc, #136]	; (8004c24 <angularPID+0x274>)
 8004b9a:	f7fb ffe9 	bl	8000b70 <__aeabi_fsub>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	4920      	ldr	r1, [pc, #128]	; (8004c24 <angularPID+0x274>)
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f7fc f9a2 	bl	8000eec <__aeabi_fdiv>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	4618      	mov	r0, r3
 8004bac:	f7fc fab0 	bl	8001110 <__aeabi_f2iz>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	4a1e      	ldr	r2, [pc, #120]	; (8004c2c <angularPID+0x27c>)
 8004bb4:	6013      	str	r3, [r2, #0]
	pRight = (100 + pid)/100;
 8004bb6:	4b1a      	ldr	r3, [pc, #104]	; (8004c20 <angularPID+0x270>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	491a      	ldr	r1, [pc, #104]	; (8004c24 <angularPID+0x274>)
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f7fb ffd9 	bl	8000b74 <__addsf3>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	4917      	ldr	r1, [pc, #92]	; (8004c24 <angularPID+0x274>)
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f7fc f990 	bl	8000eec <__aeabi_fdiv>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f7fc fa9e 	bl	8001110 <__aeabi_f2iz>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	4a16      	ldr	r2, [pc, #88]	; (8004c30 <angularPID+0x280>)
 8004bd8:	6013      	str	r3, [r2, #0]
	previousErrorA = errorA;
 8004bda:	4b06      	ldr	r3, [pc, #24]	; (8004bf4 <angularPID+0x244>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a0b      	ldr	r2, [pc, #44]	; (8004c0c <angularPID+0x25c>)
 8004be0:	6013      	str	r3, [r2, #0]
}
 8004be2:	bf00      	nop
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop
 8004be8:	20002300 	.word	0x20002300
 8004bec:	20002390 	.word	0x20002390
 8004bf0:	20002328 	.word	0x20002328
 8004bf4:	200040e8 	.word	0x200040e8
 8004bf8:	2000232c 	.word	0x2000232c
 8004bfc:	20004104 	.word	0x20004104
 8004c00:	20004108 	.word	0x20004108
 8004c04:	447a0000 	.word	0x447a0000
 8004c08:	200040d8 	.word	0x200040d8
 8004c0c:	200040f4 	.word	0x200040f4
 8004c10:	200040a8 	.word	0x200040a8
 8004c14:	200040e0 	.word	0x200040e0
 8004c18:	200040a4 	.word	0x200040a4
 8004c1c:	200040dc 	.word	0x200040dc
 8004c20:	200040d4 	.word	0x200040d4
 8004c24:	42c80000 	.word	0x42c80000
 8004c28:	c2c80000 	.word	0xc2c80000
 8004c2c:	20000078 	.word	0x20000078
 8004c30:	2000007c 	.word	0x2000007c

08004c34 <moveStraight>:

void moveStraight() {
 8004c34:	b5b0      	push	{r4, r5, r7, lr}
 8004c36:	b082      	sub	sp, #8
 8004c38:	af02      	add	r7, sp, #8
	if (StraightFlag == 1) {
 8004c3a:	4b19      	ldr	r3, [pc, #100]	; (8004ca0 <moveStraight+0x6c>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d13a      	bne.n	8004cb8 <moveStraight+0x84>
		errorT = calcularDistancia((TIM1->CNT) >> 1) * pLeft
 8004c42:	4b18      	ldr	r3, [pc, #96]	; (8004ca4 <moveStraight+0x70>)
 8004c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c46:	085b      	lsrs	r3, r3, #1
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f7fe fcc1 	bl	80035d0 <calcularDistancia>
 8004c4e:	4604      	mov	r4, r0
 8004c50:	4b15      	ldr	r3, [pc, #84]	; (8004ca8 <moveStraight+0x74>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4618      	mov	r0, r3
 8004c56:	f7fc f841 	bl	8000cdc <__aeabi_i2f>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	4620      	mov	r0, r4
 8004c60:	f7fc f890 	bl	8000d84 <__aeabi_fmul>
 8004c64:	4603      	mov	r3, r0
 8004c66:	461d      	mov	r5, r3
				- calcularDistancia((TIM3->CNT) >> 1) * pRight;
 8004c68:	4b10      	ldr	r3, [pc, #64]	; (8004cac <moveStraight+0x78>)
 8004c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6c:	085b      	lsrs	r3, r3, #1
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f7fe fcae 	bl	80035d0 <calcularDistancia>
 8004c74:	4604      	mov	r4, r0
 8004c76:	4b0e      	ldr	r3, [pc, #56]	; (8004cb0 <moveStraight+0x7c>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f7fc f82e 	bl	8000cdc <__aeabi_i2f>
 8004c80:	4603      	mov	r3, r0
 8004c82:	4619      	mov	r1, r3
 8004c84:	4620      	mov	r0, r4
 8004c86:	f7fc f87d 	bl	8000d84 <__aeabi_fmul>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	4628      	mov	r0, r5
 8004c90:	f7fb ff6e 	bl	8000b70 <__aeabi_fsub>
 8004c94:	4603      	mov	r3, r0
 8004c96:	461a      	mov	r2, r3
		errorT = calcularDistancia((TIM1->CNT) >> 1) * pLeft
 8004c98:	4b06      	ldr	r3, [pc, #24]	; (8004cb4 <moveStraight+0x80>)
 8004c9a:	601a      	str	r2, [r3, #0]
 8004c9c:	e035      	b.n	8004d0a <moveStraight+0xd6>
 8004c9e:	bf00      	nop
 8004ca0:	200040bc 	.word	0x200040bc
 8004ca4:	40012c00 	.word	0x40012c00
 8004ca8:	20000078 	.word	0x20000078
 8004cac:	40000400 	.word	0x40000400
 8004cb0:	2000007c 	.word	0x2000007c
 8004cb4:	200040e4 	.word	0x200040e4
	}else if (StraightFlag == 2){
 8004cb8:	4b84      	ldr	r3, [pc, #528]	; (8004ecc <moveStraight+0x298>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	2b02      	cmp	r3, #2
 8004cbe:	d124      	bne.n	8004d0a <moveStraight+0xd6>
		errorT = (offset - calcularDistancia((TIM1->CNT) >> 1))
 8004cc0:	4b83      	ldr	r3, [pc, #524]	; (8004ed0 <moveStraight+0x29c>)
 8004cc2:	681c      	ldr	r4, [r3, #0]
 8004cc4:	4b83      	ldr	r3, [pc, #524]	; (8004ed4 <moveStraight+0x2a0>)
 8004cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc8:	085b      	lsrs	r3, r3, #1
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f7fe fc80 	bl	80035d0 <calcularDistancia>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	4620      	mov	r0, r4
 8004cd6:	f7fb ff4b 	bl	8000b70 <__aeabi_fsub>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	461d      	mov	r5, r3
						+ (offset - calcularDistancia((TIM3->CNT) >> 1));
 8004cde:	4b7c      	ldr	r3, [pc, #496]	; (8004ed0 <moveStraight+0x29c>)
 8004ce0:	681c      	ldr	r4, [r3, #0]
 8004ce2:	4b7d      	ldr	r3, [pc, #500]	; (8004ed8 <moveStraight+0x2a4>)
 8004ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce6:	085b      	lsrs	r3, r3, #1
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f7fe fc71 	bl	80035d0 <calcularDistancia>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	4620      	mov	r0, r4
 8004cf4:	f7fb ff3c 	bl	8000b70 <__aeabi_fsub>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	4619      	mov	r1, r3
 8004cfc:	4628      	mov	r0, r5
 8004cfe:	f7fb ff39 	bl	8000b74 <__addsf3>
 8004d02:	4603      	mov	r3, r0
 8004d04:	461a      	mov	r2, r3
		errorT = (offset - calcularDistancia((TIM1->CNT) >> 1))
 8004d06:	4b75      	ldr	r3, [pc, #468]	; (8004edc <moveStraight+0x2a8>)
 8004d08:	601a      	str	r2, [r3, #0]
	}

	timePrevT = timeNowT;
 8004d0a:	4b75      	ldr	r3, [pc, #468]	; (8004ee0 <moveStraight+0x2ac>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a75      	ldr	r2, [pc, #468]	; (8004ee4 <moveStraight+0x2b0>)
 8004d10:	6013      	str	r3, [r2, #0]
	timeNowT = HAL_GetTick();
 8004d12:	f000 f983 	bl	800501c <HAL_GetTick>
 8004d16:	4603      	mov	r3, r0
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f7fb ffdb 	bl	8000cd4 <__aeabi_ui2f>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	4a6f      	ldr	r2, [pc, #444]	; (8004ee0 <moveStraight+0x2ac>)
 8004d22:	6013      	str	r3, [r2, #0]
	elapsedTime = (timeNowT - timePrevT) / 1000;
 8004d24:	4b6e      	ldr	r3, [pc, #440]	; (8004ee0 <moveStraight+0x2ac>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a6e      	ldr	r2, [pc, #440]	; (8004ee4 <moveStraight+0x2b0>)
 8004d2a:	6812      	ldr	r2, [r2, #0]
 8004d2c:	4611      	mov	r1, r2
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f7fb ff1e 	bl	8000b70 <__aeabi_fsub>
 8004d34:	4603      	mov	r3, r0
 8004d36:	496c      	ldr	r1, [pc, #432]	; (8004ee8 <moveStraight+0x2b4>)
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f7fc f8d7 	bl	8000eec <__aeabi_fdiv>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	461a      	mov	r2, r3
 8004d42:	4b6a      	ldr	r3, [pc, #424]	; (8004eec <moveStraight+0x2b8>)
 8004d44:	601a      	str	r2, [r3, #0]
	pidD = KDT * ((errorT - previousErrorT));
 8004d46:	4b65      	ldr	r3, [pc, #404]	; (8004edc <moveStraight+0x2a8>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a69      	ldr	r2, [pc, #420]	; (8004ef0 <moveStraight+0x2bc>)
 8004d4c:	6812      	ldr	r2, [r2, #0]
 8004d4e:	4611      	mov	r1, r2
 8004d50:	4618      	mov	r0, r3
 8004d52:	f7fb ff0d 	bl	8000b70 <__aeabi_fsub>
 8004d56:	4603      	mov	r3, r0
 8004d58:	461a      	mov	r2, r3
 8004d5a:	4b66      	ldr	r3, [pc, #408]	; (8004ef4 <moveStraight+0x2c0>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4619      	mov	r1, r3
 8004d60:	4610      	mov	r0, r2
 8004d62:	f7fc f80f 	bl	8000d84 <__aeabi_fmul>
 8004d66:	4603      	mov	r3, r0
 8004d68:	461a      	mov	r2, r3
 8004d6a:	4b63      	ldr	r3, [pc, #396]	; (8004ef8 <moveStraight+0x2c4>)
 8004d6c:	601a      	str	r2, [r3, #0]
	pidP = KPT * errorT;
 8004d6e:	4b63      	ldr	r3, [pc, #396]	; (8004efc <moveStraight+0x2c8>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a5a      	ldr	r2, [pc, #360]	; (8004edc <moveStraight+0x2a8>)
 8004d74:	6812      	ldr	r2, [r2, #0]
 8004d76:	4611      	mov	r1, r2
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f7fc f803 	bl	8000d84 <__aeabi_fmul>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	461a      	mov	r2, r3
 8004d82:	4b5f      	ldr	r3, [pc, #380]	; (8004f00 <moveStraight+0x2cc>)
 8004d84:	601a      	str	r2, [r3, #0]
	pid = pidP + pidD;
 8004d86:	4b5e      	ldr	r3, [pc, #376]	; (8004f00 <moveStraight+0x2cc>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a5b      	ldr	r2, [pc, #364]	; (8004ef8 <moveStraight+0x2c4>)
 8004d8c:	6812      	ldr	r2, [r2, #0]
 8004d8e:	4611      	mov	r1, r2
 8004d90:	4618      	mov	r0, r3
 8004d92:	f7fb feef 	bl	8000b74 <__addsf3>
 8004d96:	4603      	mov	r3, r0
 8004d98:	461a      	mov	r2, r3
 8004d9a:	4b5a      	ldr	r3, [pc, #360]	; (8004f04 <moveStraight+0x2d0>)
 8004d9c:	601a      	str	r2, [r3, #0]
	if (pid > velocity) {
 8004d9e:	4b59      	ldr	r3, [pc, #356]	; (8004f04 <moveStraight+0x2d0>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a59      	ldr	r2, [pc, #356]	; (8004f08 <moveStraight+0x2d4>)
 8004da4:	6812      	ldr	r2, [r2, #0]
 8004da6:	4611      	mov	r1, r2
 8004da8:	4618      	mov	r0, r3
 8004daa:	f7fc f9a7 	bl	80010fc <__aeabi_fcmpgt>
 8004dae:	4603      	mov	r3, r0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d003      	beq.n	8004dbc <moveStraight+0x188>
		//intUartSend(1);
		pid = velocity;
 8004db4:	4b54      	ldr	r3, [pc, #336]	; (8004f08 <moveStraight+0x2d4>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a52      	ldr	r2, [pc, #328]	; (8004f04 <moveStraight+0x2d0>)
 8004dba:	6013      	str	r3, [r2, #0]
	}
	if (pid < -velocity) {
 8004dbc:	4b52      	ldr	r3, [pc, #328]	; (8004f08 <moveStraight+0x2d4>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004dc4:	4a4f      	ldr	r2, [pc, #316]	; (8004f04 <moveStraight+0x2d0>)
 8004dc6:	6812      	ldr	r2, [r2, #0]
 8004dc8:	4611      	mov	r1, r2
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f7fc f996 	bl	80010fc <__aeabi_fcmpgt>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d005      	beq.n	8004de2 <moveStraight+0x1ae>
		//intUartSend(0);
		pid = -velocity;
 8004dd6:	4b4c      	ldr	r3, [pc, #304]	; (8004f08 <moveStraight+0x2d4>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004dde:	4a49      	ldr	r2, [pc, #292]	; (8004f04 <moveStraight+0x2d0>)
 8004de0:	6013      	str	r3, [r2, #0]
	}
	//intUartSend(pid);
	//HAL_Delay(10);

	motLeft = velocity - pid;
 8004de2:	4b49      	ldr	r3, [pc, #292]	; (8004f08 <moveStraight+0x2d4>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a47      	ldr	r2, [pc, #284]	; (8004f04 <moveStraight+0x2d0>)
 8004de8:	6812      	ldr	r2, [r2, #0]
 8004dea:	4611      	mov	r1, r2
 8004dec:	4618      	mov	r0, r3
 8004dee:	f7fb febf 	bl	8000b70 <__aeabi_fsub>
 8004df2:	4603      	mov	r3, r0
 8004df4:	4618      	mov	r0, r3
 8004df6:	f7fc f98b 	bl	8001110 <__aeabi_f2iz>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	4a43      	ldr	r2, [pc, #268]	; (8004f0c <moveStraight+0x2d8>)
 8004dfe:	6013      	str	r3, [r2, #0]
	motRight = velocity + pid;
 8004e00:	4b41      	ldr	r3, [pc, #260]	; (8004f08 <moveStraight+0x2d4>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a3f      	ldr	r2, [pc, #252]	; (8004f04 <moveStraight+0x2d0>)
 8004e06:	6812      	ldr	r2, [r2, #0]
 8004e08:	4611      	mov	r1, r2
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f7fb feb2 	bl	8000b74 <__addsf3>
 8004e10:	4603      	mov	r3, r0
 8004e12:	4618      	mov	r0, r3
 8004e14:	f7fc f97c 	bl	8001110 <__aeabi_f2iz>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	4a3d      	ldr	r2, [pc, #244]	; (8004f10 <moveStraight+0x2dc>)
 8004e1c:	6013      	str	r3, [r2, #0]
	if (motLeft < -1000) {
 8004e1e:	4b3b      	ldr	r3, [pc, #236]	; (8004f0c <moveStraight+0x2d8>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8004e26:	da02      	bge.n	8004e2e <moveStraight+0x1fa>
		motLeft = -1000;
 8004e28:	4b38      	ldr	r3, [pc, #224]	; (8004f0c <moveStraight+0x2d8>)
 8004e2a:	4a3a      	ldr	r2, [pc, #232]	; (8004f14 <moveStraight+0x2e0>)
 8004e2c:	601a      	str	r2, [r3, #0]
	}
	if (motRight < -1000) {
 8004e2e:	4b38      	ldr	r3, [pc, #224]	; (8004f10 <moveStraight+0x2dc>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8004e36:	da02      	bge.n	8004e3e <moveStraight+0x20a>
		motRight = -1000;
 8004e38:	4b35      	ldr	r3, [pc, #212]	; (8004f10 <moveStraight+0x2dc>)
 8004e3a:	4a36      	ldr	r2, [pc, #216]	; (8004f14 <moveStraight+0x2e0>)
 8004e3c:	601a      	str	r2, [r3, #0]
	}

	previousErrorT = errorT;
 8004e3e:	4b27      	ldr	r3, [pc, #156]	; (8004edc <moveStraight+0x2a8>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a2b      	ldr	r2, [pc, #172]	; (8004ef0 <moveStraight+0x2bc>)
 8004e44:	6013      	str	r3, [r2, #0]
	motRight = constrain(motRight, -1000, 1000);
 8004e46:	4b32      	ldr	r3, [pc, #200]	; (8004f10 <moveStraight+0x2dc>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004e4e:	4931      	ldr	r1, [pc, #196]	; (8004f14 <moveStraight+0x2e0>)
 8004e50:	4618      	mov	r0, r3
 8004e52:	f7fe faf2 	bl	800343a <constrain>
 8004e56:	4603      	mov	r3, r0
 8004e58:	4a2d      	ldr	r2, [pc, #180]	; (8004f10 <moveStraight+0x2dc>)
 8004e5a:	6013      	str	r3, [r2, #0]
	motLeft = constrain(motLeft, -1000, 1000);
 8004e5c:	4b2b      	ldr	r3, [pc, #172]	; (8004f0c <moveStraight+0x2d8>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004e64:	492b      	ldr	r1, [pc, #172]	; (8004f14 <moveStraight+0x2e0>)
 8004e66:	4618      	mov	r0, r3
 8004e68:	f7fe fae7 	bl	800343a <constrain>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	4a27      	ldr	r2, [pc, #156]	; (8004f0c <moveStraight+0x2d8>)
 8004e70:	6013      	str	r3, [r2, #0]

	motRight = MAP(motRight, -1000, 1000, 0, xSpeed * 2);
 8004e72:	4b27      	ldr	r3, [pc, #156]	; (8004f10 <moveStraight+0x2dc>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4618      	mov	r0, r3
 8004e78:	4b27      	ldr	r3, [pc, #156]	; (8004f18 <moveStraight+0x2e4>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	005b      	lsls	r3, r3, #1
 8004e7e:	9300      	str	r3, [sp, #0]
 8004e80:	2300      	movs	r3, #0
 8004e82:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004e86:	4923      	ldr	r1, [pc, #140]	; (8004f14 <moveStraight+0x2e0>)
 8004e88:	f7fe fabc 	bl	8003404 <MAP>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	461a      	mov	r2, r3
 8004e90:	4b1f      	ldr	r3, [pc, #124]	; (8004f10 <moveStraight+0x2dc>)
 8004e92:	601a      	str	r2, [r3, #0]
	motLeft = MAP(motLeft, -1000, 1000, 0, xSpeed * 2);
 8004e94:	4b1d      	ldr	r3, [pc, #116]	; (8004f0c <moveStraight+0x2d8>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4618      	mov	r0, r3
 8004e9a:	4b1f      	ldr	r3, [pc, #124]	; (8004f18 <moveStraight+0x2e4>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	005b      	lsls	r3, r3, #1
 8004ea0:	9300      	str	r3, [sp, #0]
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004ea8:	491a      	ldr	r1, [pc, #104]	; (8004f14 <moveStraight+0x2e0>)
 8004eaa:	f7fe faab 	bl	8003404 <MAP>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	4b16      	ldr	r3, [pc, #88]	; (8004f0c <moveStraight+0x2d8>)
 8004eb4:	601a      	str	r2, [r3, #0]

	TIM4->CCR4 = motLeft;
 8004eb6:	4b15      	ldr	r3, [pc, #84]	; (8004f0c <moveStraight+0x2d8>)
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	4b18      	ldr	r3, [pc, #96]	; (8004f1c <moveStraight+0x2e8>)
 8004ebc:	641a      	str	r2, [r3, #64]	; 0x40
	TIM4->CCR3 = motRight;
 8004ebe:	4b14      	ldr	r3, [pc, #80]	; (8004f10 <moveStraight+0x2dc>)
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	4b16      	ldr	r3, [pc, #88]	; (8004f1c <moveStraight+0x2e8>)
 8004ec4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004ec6:	bf00      	nop
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bdb0      	pop	{r4, r5, r7, pc}
 8004ecc:	200040bc 	.word	0x200040bc
 8004ed0:	200040d0 	.word	0x200040d0
 8004ed4:	40012c00 	.word	0x40012c00
 8004ed8:	40000400 	.word	0x40000400
 8004edc:	200040e4 	.word	0x200040e4
 8004ee0:	200040fc 	.word	0x200040fc
 8004ee4:	20004100 	.word	0x20004100
 8004ee8:	447a0000 	.word	0x447a0000
 8004eec:	200040d8 	.word	0x200040d8
 8004ef0:	200040f0 	.word	0x200040f0
 8004ef4:	200040a0 	.word	0x200040a0
 8004ef8:	200040e0 	.word	0x200040e0
 8004efc:	2000409c 	.word	0x2000409c
 8004f00:	200040dc 	.word	0x200040dc
 8004f04:	200040d4 	.word	0x200040d4
 8004f08:	200040b4 	.word	0x200040b4
 8004f0c:	20004114 	.word	0x20004114
 8004f10:	20004118 	.word	0x20004118
 8004f14:	fffffc18 	.word	0xfffffc18
 8004f18:	200040c0 	.word	0x200040c0
 8004f1c:	40000800 	.word	0x40000800

08004f20 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004f20:	480c      	ldr	r0, [pc, #48]	; (8004f54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004f22:	490d      	ldr	r1, [pc, #52]	; (8004f58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004f24:	4a0d      	ldr	r2, [pc, #52]	; (8004f5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004f26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004f28:	e002      	b.n	8004f30 <LoopCopyDataInit>

08004f2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004f2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004f2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004f2e:	3304      	adds	r3, #4

08004f30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004f30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004f32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004f34:	d3f9      	bcc.n	8004f2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004f36:	4a0a      	ldr	r2, [pc, #40]	; (8004f60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004f38:	4c0a      	ldr	r4, [pc, #40]	; (8004f64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004f3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004f3c:	e001      	b.n	8004f42 <LoopFillZerobss>

08004f3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004f3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004f40:	3204      	adds	r2, #4

08004f42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004f42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004f44:	d3fb      	bcc.n	8004f3e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004f46:	f7ff fbbf 	bl	80046c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004f4a:	f003 f80b 	bl	8007f64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004f4e:	f7fc fa07 	bl	8001360 <main>
  bx lr
 8004f52:	4770      	bx	lr
  ldr r0, =_sdata
 8004f54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004f58:	200000ec 	.word	0x200000ec
  ldr r2, =_sidata
 8004f5c:	08008e60 	.word	0x08008e60
  ldr r2, =_sbss
 8004f60:	200000f0 	.word	0x200000f0
  ldr r4, =_ebss
 8004f64:	20004140 	.word	0x20004140

08004f68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004f68:	e7fe      	b.n	8004f68 <ADC1_2_IRQHandler>
	...

08004f6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004f70:	4b08      	ldr	r3, [pc, #32]	; (8004f94 <HAL_Init+0x28>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a07      	ldr	r2, [pc, #28]	; (8004f94 <HAL_Init+0x28>)
 8004f76:	f043 0310 	orr.w	r3, r3, #16
 8004f7a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004f7c:	2003      	movs	r0, #3
 8004f7e:	f000 fce5 	bl	800594c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004f82:	200f      	movs	r0, #15
 8004f84:	f000 f808 	bl	8004f98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004f88:	f7ff f974 	bl	8004274 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004f8c:	2300      	movs	r3, #0
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	40022000 	.word	0x40022000

08004f98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b082      	sub	sp, #8
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004fa0:	4b12      	ldr	r3, [pc, #72]	; (8004fec <HAL_InitTick+0x54>)
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	4b12      	ldr	r3, [pc, #72]	; (8004ff0 <HAL_InitTick+0x58>)
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	4619      	mov	r1, r3
 8004faa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004fae:	fbb3 f3f1 	udiv	r3, r3, r1
 8004fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f000 fcfd 	bl	80059b6 <HAL_SYSTICK_Config>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d001      	beq.n	8004fc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e00e      	b.n	8004fe4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2b0f      	cmp	r3, #15
 8004fca:	d80a      	bhi.n	8004fe2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004fcc:	2200      	movs	r2, #0
 8004fce:	6879      	ldr	r1, [r7, #4]
 8004fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8004fd4:	f000 fcc5 	bl	8005962 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004fd8:	4a06      	ldr	r2, [pc, #24]	; (8004ff4 <HAL_InitTick+0x5c>)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	e000      	b.n	8004fe4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3708      	adds	r7, #8
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}
 8004fec:	20000074 	.word	0x20000074
 8004ff0:	20000084 	.word	0x20000084
 8004ff4:	20000080 	.word	0x20000080

08004ff8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004ffc:	4b05      	ldr	r3, [pc, #20]	; (8005014 <HAL_IncTick+0x1c>)
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	461a      	mov	r2, r3
 8005002:	4b05      	ldr	r3, [pc, #20]	; (8005018 <HAL_IncTick+0x20>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4413      	add	r3, r2
 8005008:	4a03      	ldr	r2, [pc, #12]	; (8005018 <HAL_IncTick+0x20>)
 800500a:	6013      	str	r3, [r2, #0]
}
 800500c:	bf00      	nop
 800500e:	46bd      	mov	sp, r7
 8005010:	bc80      	pop	{r7}
 8005012:	4770      	bx	lr
 8005014:	20000084 	.word	0x20000084
 8005018:	2000411c 	.word	0x2000411c

0800501c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800501c:	b480      	push	{r7}
 800501e:	af00      	add	r7, sp, #0
  return uwTick;
 8005020:	4b02      	ldr	r3, [pc, #8]	; (800502c <HAL_GetTick+0x10>)
 8005022:	681b      	ldr	r3, [r3, #0]
}
 8005024:	4618      	mov	r0, r3
 8005026:	46bd      	mov	sp, r7
 8005028:	bc80      	pop	{r7}
 800502a:	4770      	bx	lr
 800502c:	2000411c 	.word	0x2000411c

08005030 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b086      	sub	sp, #24
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005038:	2300      	movs	r3, #0
 800503a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800503c:	2300      	movs	r3, #0
 800503e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8005040:	2300      	movs	r3, #0
 8005042:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8005044:	2300      	movs	r3, #0
 8005046:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d101      	bne.n	8005052 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e0be      	b.n	80051d0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800505c:	2b00      	cmp	r3, #0
 800505e:	d109      	bne.n	8005074 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f7ff f932 	bl	80042d8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f000 faf5 	bl	8005664 <ADC_ConversionStop_Disable>
 800507a:	4603      	mov	r3, r0
 800507c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005082:	f003 0310 	and.w	r3, r3, #16
 8005086:	2b00      	cmp	r3, #0
 8005088:	f040 8099 	bne.w	80051be <HAL_ADC_Init+0x18e>
 800508c:	7dfb      	ldrb	r3, [r7, #23]
 800508e:	2b00      	cmp	r3, #0
 8005090:	f040 8095 	bne.w	80051be <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005098:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800509c:	f023 0302 	bic.w	r3, r3, #2
 80050a0:	f043 0202 	orr.w	r2, r3, #2
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80050b0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	7b1b      	ldrb	r3, [r3, #12]
 80050b6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80050b8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80050ba:	68ba      	ldr	r2, [r7, #8]
 80050bc:	4313      	orrs	r3, r2
 80050be:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050c8:	d003      	beq.n	80050d2 <HAL_ADC_Init+0xa2>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d102      	bne.n	80050d8 <HAL_ADC_Init+0xa8>
 80050d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80050d6:	e000      	b.n	80050da <HAL_ADC_Init+0xaa>
 80050d8:	2300      	movs	r3, #0
 80050da:	693a      	ldr	r2, [r7, #16]
 80050dc:	4313      	orrs	r3, r2
 80050de:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	7d1b      	ldrb	r3, [r3, #20]
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d119      	bne.n	800511c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	7b1b      	ldrb	r3, [r3, #12]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d109      	bne.n	8005104 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	699b      	ldr	r3, [r3, #24]
 80050f4:	3b01      	subs	r3, #1
 80050f6:	035a      	lsls	r2, r3, #13
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005100:	613b      	str	r3, [r7, #16]
 8005102:	e00b      	b.n	800511c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005108:	f043 0220 	orr.w	r2, r3, #32
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005114:	f043 0201 	orr.w	r2, r3, #1
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	693a      	ldr	r2, [r7, #16]
 800512c:	430a      	orrs	r2, r1
 800512e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	689a      	ldr	r2, [r3, #8]
 8005136:	4b28      	ldr	r3, [pc, #160]	; (80051d8 <HAL_ADC_Init+0x1a8>)
 8005138:	4013      	ands	r3, r2
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	6812      	ldr	r2, [r2, #0]
 800513e:	68b9      	ldr	r1, [r7, #8]
 8005140:	430b      	orrs	r3, r1
 8005142:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800514c:	d003      	beq.n	8005156 <HAL_ADC_Init+0x126>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	2b01      	cmp	r3, #1
 8005154:	d104      	bne.n	8005160 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	3b01      	subs	r3, #1
 800515c:	051b      	lsls	r3, r3, #20
 800515e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005166:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	68fa      	ldr	r2, [r7, #12]
 8005170:	430a      	orrs	r2, r1
 8005172:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	689a      	ldr	r2, [r3, #8]
 800517a:	4b18      	ldr	r3, [pc, #96]	; (80051dc <HAL_ADC_Init+0x1ac>)
 800517c:	4013      	ands	r3, r2
 800517e:	68ba      	ldr	r2, [r7, #8]
 8005180:	429a      	cmp	r2, r3
 8005182:	d10b      	bne.n	800519c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800518e:	f023 0303 	bic.w	r3, r3, #3
 8005192:	f043 0201 	orr.w	r2, r3, #1
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800519a:	e018      	b.n	80051ce <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051a0:	f023 0312 	bic.w	r3, r3, #18
 80051a4:	f043 0210 	orr.w	r2, r3, #16
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b0:	f043 0201 	orr.w	r2, r3, #1
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80051bc:	e007      	b.n	80051ce <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c2:	f043 0210 	orr.w	r2, r3, #16
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80051ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3718      	adds	r7, #24
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	ffe1f7fd 	.word	0xffe1f7fd
 80051dc:	ff1f0efe 	.word	0xff1f0efe

080051e0 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b086      	sub	sp, #24
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80051ec:	2300      	movs	r3, #0
 80051ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a64      	ldr	r2, [pc, #400]	; (8005388 <HAL_ADC_Start_DMA+0x1a8>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d004      	beq.n	8005204 <HAL_ADC_Start_DMA+0x24>
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a63      	ldr	r2, [pc, #396]	; (800538c <HAL_ADC_Start_DMA+0x1ac>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d106      	bne.n	8005212 <HAL_ADC_Start_DMA+0x32>
 8005204:	4b60      	ldr	r3, [pc, #384]	; (8005388 <HAL_ADC_Start_DMA+0x1a8>)
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800520c:	2b00      	cmp	r3, #0
 800520e:	f040 80b3 	bne.w	8005378 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005218:	2b01      	cmp	r3, #1
 800521a:	d101      	bne.n	8005220 <HAL_ADC_Start_DMA+0x40>
 800521c:	2302      	movs	r3, #2
 800521e:	e0ae      	b.n	800537e <HAL_ADC_Start_DMA+0x19e>
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8005228:	68f8      	ldr	r0, [r7, #12]
 800522a:	f000 f9c1 	bl	80055b0 <ADC_Enable>
 800522e:	4603      	mov	r3, r0
 8005230:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8005232:	7dfb      	ldrb	r3, [r7, #23]
 8005234:	2b00      	cmp	r3, #0
 8005236:	f040 809a 	bne.w	800536e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800523e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005242:	f023 0301 	bic.w	r3, r3, #1
 8005246:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a4e      	ldr	r2, [pc, #312]	; (800538c <HAL_ADC_Start_DMA+0x1ac>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d105      	bne.n	8005264 <HAL_ADC_Start_DMA+0x84>
 8005258:	4b4b      	ldr	r3, [pc, #300]	; (8005388 <HAL_ADC_Start_DMA+0x1a8>)
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8005260:	2b00      	cmp	r3, #0
 8005262:	d115      	bne.n	8005290 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005268:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800527a:	2b00      	cmp	r3, #0
 800527c:	d026      	beq.n	80052cc <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005282:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005286:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800528e:	e01d      	b.n	80052cc <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005294:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a39      	ldr	r2, [pc, #228]	; (8005388 <HAL_ADC_Start_DMA+0x1a8>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d004      	beq.n	80052b0 <HAL_ADC_Start_DMA+0xd0>
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a38      	ldr	r2, [pc, #224]	; (800538c <HAL_ADC_Start_DMA+0x1ac>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d10d      	bne.n	80052cc <HAL_ADC_Start_DMA+0xec>
 80052b0:	4b35      	ldr	r3, [pc, #212]	; (8005388 <HAL_ADC_Start_DMA+0x1a8>)
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d007      	beq.n	80052cc <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052c0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80052c4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d006      	beq.n	80052e6 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052dc:	f023 0206 	bic.w	r2, r3, #6
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	62da      	str	r2, [r3, #44]	; 0x2c
 80052e4:	e002      	b.n	80052ec <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2200      	movs	r2, #0
 80052ea:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2200      	movs	r2, #0
 80052f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6a1b      	ldr	r3, [r3, #32]
 80052f8:	4a25      	ldr	r2, [pc, #148]	; (8005390 <HAL_ADC_Start_DMA+0x1b0>)
 80052fa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	6a1b      	ldr	r3, [r3, #32]
 8005300:	4a24      	ldr	r2, [pc, #144]	; (8005394 <HAL_ADC_Start_DMA+0x1b4>)
 8005302:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6a1b      	ldr	r3, [r3, #32]
 8005308:	4a23      	ldr	r2, [pc, #140]	; (8005398 <HAL_ADC_Start_DMA+0x1b8>)
 800530a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f06f 0202 	mvn.w	r2, #2
 8005314:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	689a      	ldr	r2, [r3, #8]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005324:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	6a18      	ldr	r0, [r3, #32]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	334c      	adds	r3, #76	; 0x4c
 8005330:	4619      	mov	r1, r3
 8005332:	68ba      	ldr	r2, [r7, #8]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f000 fba5 	bl	8005a84 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8005344:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8005348:	d108      	bne.n	800535c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	689a      	ldr	r2, [r3, #8]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8005358:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800535a:	e00f      	b.n	800537c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	689a      	ldr	r2, [r3, #8]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800536a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800536c:	e006      	b.n	800537c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2200      	movs	r2, #0
 8005372:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8005376:	e001      	b.n	800537c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800537c:	7dfb      	ldrb	r3, [r7, #23]
}
 800537e:	4618      	mov	r0, r3
 8005380:	3718      	adds	r7, #24
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	40012400 	.word	0x40012400
 800538c:	40012800 	.word	0x40012800
 8005390:	080056e7 	.word	0x080056e7
 8005394:	08005763 	.word	0x08005763
 8005398:	0800577f 	.word	0x0800577f

0800539c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80053a4:	bf00      	nop
 80053a6:	370c      	adds	r7, #12
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bc80      	pop	{r7}
 80053ac:	4770      	bx	lr

080053ae <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80053ae:	b480      	push	{r7}
 80053b0:	b083      	sub	sp, #12
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80053b6:	bf00      	nop
 80053b8:	370c      	adds	r7, #12
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bc80      	pop	{r7}
 80053be:	4770      	bx	lr

080053c0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80053c0:	b480      	push	{r7}
 80053c2:	b085      	sub	sp, #20
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80053ca:	2300      	movs	r3, #0
 80053cc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80053ce:	2300      	movs	r3, #0
 80053d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d101      	bne.n	80053e0 <HAL_ADC_ConfigChannel+0x20>
 80053dc:	2302      	movs	r3, #2
 80053de:	e0dc      	b.n	800559a <HAL_ADC_ConfigChannel+0x1da>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	2b06      	cmp	r3, #6
 80053ee:	d81c      	bhi.n	800542a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	685a      	ldr	r2, [r3, #4]
 80053fa:	4613      	mov	r3, r2
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	4413      	add	r3, r2
 8005400:	3b05      	subs	r3, #5
 8005402:	221f      	movs	r2, #31
 8005404:	fa02 f303 	lsl.w	r3, r2, r3
 8005408:	43db      	mvns	r3, r3
 800540a:	4019      	ands	r1, r3
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	6818      	ldr	r0, [r3, #0]
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	685a      	ldr	r2, [r3, #4]
 8005414:	4613      	mov	r3, r2
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	4413      	add	r3, r2
 800541a:	3b05      	subs	r3, #5
 800541c:	fa00 f203 	lsl.w	r2, r0, r3
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	430a      	orrs	r2, r1
 8005426:	635a      	str	r2, [r3, #52]	; 0x34
 8005428:	e03c      	b.n	80054a4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	2b0c      	cmp	r3, #12
 8005430:	d81c      	bhi.n	800546c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	685a      	ldr	r2, [r3, #4]
 800543c:	4613      	mov	r3, r2
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	4413      	add	r3, r2
 8005442:	3b23      	subs	r3, #35	; 0x23
 8005444:	221f      	movs	r2, #31
 8005446:	fa02 f303 	lsl.w	r3, r2, r3
 800544a:	43db      	mvns	r3, r3
 800544c:	4019      	ands	r1, r3
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	6818      	ldr	r0, [r3, #0]
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	685a      	ldr	r2, [r3, #4]
 8005456:	4613      	mov	r3, r2
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	4413      	add	r3, r2
 800545c:	3b23      	subs	r3, #35	; 0x23
 800545e:	fa00 f203 	lsl.w	r2, r0, r3
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	430a      	orrs	r2, r1
 8005468:	631a      	str	r2, [r3, #48]	; 0x30
 800546a:	e01b      	b.n	80054a4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	685a      	ldr	r2, [r3, #4]
 8005476:	4613      	mov	r3, r2
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	4413      	add	r3, r2
 800547c:	3b41      	subs	r3, #65	; 0x41
 800547e:	221f      	movs	r2, #31
 8005480:	fa02 f303 	lsl.w	r3, r2, r3
 8005484:	43db      	mvns	r3, r3
 8005486:	4019      	ands	r1, r3
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	6818      	ldr	r0, [r3, #0]
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	685a      	ldr	r2, [r3, #4]
 8005490:	4613      	mov	r3, r2
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	4413      	add	r3, r2
 8005496:	3b41      	subs	r3, #65	; 0x41
 8005498:	fa00 f203 	lsl.w	r2, r0, r3
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	430a      	orrs	r2, r1
 80054a2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	2b09      	cmp	r3, #9
 80054aa:	d91c      	bls.n	80054e6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68d9      	ldr	r1, [r3, #12]
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	4613      	mov	r3, r2
 80054b8:	005b      	lsls	r3, r3, #1
 80054ba:	4413      	add	r3, r2
 80054bc:	3b1e      	subs	r3, #30
 80054be:	2207      	movs	r2, #7
 80054c0:	fa02 f303 	lsl.w	r3, r2, r3
 80054c4:	43db      	mvns	r3, r3
 80054c6:	4019      	ands	r1, r3
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	6898      	ldr	r0, [r3, #8]
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	4613      	mov	r3, r2
 80054d2:	005b      	lsls	r3, r3, #1
 80054d4:	4413      	add	r3, r2
 80054d6:	3b1e      	subs	r3, #30
 80054d8:	fa00 f203 	lsl.w	r2, r0, r3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	430a      	orrs	r2, r1
 80054e2:	60da      	str	r2, [r3, #12]
 80054e4:	e019      	b.n	800551a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	6919      	ldr	r1, [r3, #16]
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	4613      	mov	r3, r2
 80054f2:	005b      	lsls	r3, r3, #1
 80054f4:	4413      	add	r3, r2
 80054f6:	2207      	movs	r2, #7
 80054f8:	fa02 f303 	lsl.w	r3, r2, r3
 80054fc:	43db      	mvns	r3, r3
 80054fe:	4019      	ands	r1, r3
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	6898      	ldr	r0, [r3, #8]
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	4613      	mov	r3, r2
 800550a:	005b      	lsls	r3, r3, #1
 800550c:	4413      	add	r3, r2
 800550e:	fa00 f203 	lsl.w	r2, r0, r3
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	430a      	orrs	r2, r1
 8005518:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2b10      	cmp	r3, #16
 8005520:	d003      	beq.n	800552a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005526:	2b11      	cmp	r3, #17
 8005528:	d132      	bne.n	8005590 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a1d      	ldr	r2, [pc, #116]	; (80055a4 <HAL_ADC_ConfigChannel+0x1e4>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d125      	bne.n	8005580 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800553e:	2b00      	cmp	r3, #0
 8005540:	d126      	bne.n	8005590 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	689a      	ldr	r2, [r3, #8]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005550:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	2b10      	cmp	r3, #16
 8005558:	d11a      	bne.n	8005590 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800555a:	4b13      	ldr	r3, [pc, #76]	; (80055a8 <HAL_ADC_ConfigChannel+0x1e8>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a13      	ldr	r2, [pc, #76]	; (80055ac <HAL_ADC_ConfigChannel+0x1ec>)
 8005560:	fba2 2303 	umull	r2, r3, r2, r3
 8005564:	0c9a      	lsrs	r2, r3, #18
 8005566:	4613      	mov	r3, r2
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	4413      	add	r3, r2
 800556c:	005b      	lsls	r3, r3, #1
 800556e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005570:	e002      	b.n	8005578 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	3b01      	subs	r3, #1
 8005576:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d1f9      	bne.n	8005572 <HAL_ADC_ConfigChannel+0x1b2>
 800557e:	e007      	b.n	8005590 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005584:	f043 0220 	orr.w	r2, r3, #32
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2200      	movs	r2, #0
 8005594:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8005598:	7bfb      	ldrb	r3, [r7, #15]
}
 800559a:	4618      	mov	r0, r3
 800559c:	3714      	adds	r7, #20
 800559e:	46bd      	mov	sp, r7
 80055a0:	bc80      	pop	{r7}
 80055a2:	4770      	bx	lr
 80055a4:	40012400 	.word	0x40012400
 80055a8:	20000074 	.word	0x20000074
 80055ac:	431bde83 	.word	0x431bde83

080055b0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80055b8:	2300      	movs	r3, #0
 80055ba:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80055bc:	2300      	movs	r3, #0
 80055be:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	f003 0301 	and.w	r3, r3, #1
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d040      	beq.n	8005650 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	689a      	ldr	r2, [r3, #8]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f042 0201 	orr.w	r2, r2, #1
 80055dc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80055de:	4b1f      	ldr	r3, [pc, #124]	; (800565c <ADC_Enable+0xac>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a1f      	ldr	r2, [pc, #124]	; (8005660 <ADC_Enable+0xb0>)
 80055e4:	fba2 2303 	umull	r2, r3, r2, r3
 80055e8:	0c9b      	lsrs	r3, r3, #18
 80055ea:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80055ec:	e002      	b.n	80055f4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	3b01      	subs	r3, #1
 80055f2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d1f9      	bne.n	80055ee <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80055fa:	f7ff fd0f 	bl	800501c <HAL_GetTick>
 80055fe:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005600:	e01f      	b.n	8005642 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005602:	f7ff fd0b 	bl	800501c <HAL_GetTick>
 8005606:	4602      	mov	r2, r0
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	2b02      	cmp	r3, #2
 800560e:	d918      	bls.n	8005642 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	f003 0301 	and.w	r3, r3, #1
 800561a:	2b01      	cmp	r3, #1
 800561c:	d011      	beq.n	8005642 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005622:	f043 0210 	orr.w	r2, r3, #16
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800562e:	f043 0201 	orr.w	r2, r3, #1
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	e007      	b.n	8005652 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	f003 0301 	and.w	r3, r3, #1
 800564c:	2b01      	cmp	r3, #1
 800564e:	d1d8      	bne.n	8005602 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8005650:	2300      	movs	r3, #0
}
 8005652:	4618      	mov	r0, r3
 8005654:	3710      	adds	r7, #16
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
 800565a:	bf00      	nop
 800565c:	20000074 	.word	0x20000074
 8005660:	431bde83 	.word	0x431bde83

08005664 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800566c:	2300      	movs	r3, #0
 800566e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	f003 0301 	and.w	r3, r3, #1
 800567a:	2b01      	cmp	r3, #1
 800567c:	d12e      	bne.n	80056dc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	689a      	ldr	r2, [r3, #8]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f022 0201 	bic.w	r2, r2, #1
 800568c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800568e:	f7ff fcc5 	bl	800501c <HAL_GetTick>
 8005692:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8005694:	e01b      	b.n	80056ce <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005696:	f7ff fcc1 	bl	800501c <HAL_GetTick>
 800569a:	4602      	mov	r2, r0
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	1ad3      	subs	r3, r2, r3
 80056a0:	2b02      	cmp	r3, #2
 80056a2:	d914      	bls.n	80056ce <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	f003 0301 	and.w	r3, r3, #1
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d10d      	bne.n	80056ce <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b6:	f043 0210 	orr.w	r2, r3, #16
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c2:	f043 0201 	orr.w	r2, r3, #1
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e007      	b.n	80056de <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	f003 0301 	and.w	r3, r3, #1
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d0dc      	beq.n	8005696 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80056dc:	2300      	movs	r3, #0
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3710      	adds	r7, #16
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}

080056e6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80056e6:	b580      	push	{r7, lr}
 80056e8:	b084      	sub	sp, #16
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f2:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d127      	bne.n	8005750 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005704:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8005716:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800571a:	d115      	bne.n	8005748 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005720:	2b00      	cmp	r3, #0
 8005722:	d111      	bne.n	8005748 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005728:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005734:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005738:	2b00      	cmp	r3, #0
 800573a:	d105      	bne.n	8005748 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005740:	f043 0201 	orr.w	r2, r3, #1
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005748:	68f8      	ldr	r0, [r7, #12]
 800574a:	f7fd fdf7 	bl	800333c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800574e:	e004      	b.n	800575a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6a1b      	ldr	r3, [r3, #32]
 8005754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	4798      	blx	r3
}
 800575a:	bf00      	nop
 800575c:	3710      	adds	r7, #16
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}

08005762 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005762:	b580      	push	{r7, lr}
 8005764:	b084      	sub	sp, #16
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005770:	68f8      	ldr	r0, [r7, #12]
 8005772:	f7ff fe13 	bl	800539c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005776:	bf00      	nop
 8005778:	3710      	adds	r7, #16
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}

0800577e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800577e:	b580      	push	{r7, lr}
 8005780:	b084      	sub	sp, #16
 8005782:	af00      	add	r7, sp, #0
 8005784:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005790:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800579c:	f043 0204 	orr.w	r2, r3, #4
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80057a4:	68f8      	ldr	r0, [r7, #12]
 80057a6:	f7ff fe02 	bl	80053ae <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80057aa:	bf00      	nop
 80057ac:	3710      	adds	r7, #16
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
	...

080057b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b085      	sub	sp, #20
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f003 0307 	and.w	r3, r3, #7
 80057c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80057c4:	4b0c      	ldr	r3, [pc, #48]	; (80057f8 <__NVIC_SetPriorityGrouping+0x44>)
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80057ca:	68ba      	ldr	r2, [r7, #8]
 80057cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80057d0:	4013      	ands	r3, r2
 80057d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80057dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80057e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80057e6:	4a04      	ldr	r2, [pc, #16]	; (80057f8 <__NVIC_SetPriorityGrouping+0x44>)
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	60d3      	str	r3, [r2, #12]
}
 80057ec:	bf00      	nop
 80057ee:	3714      	adds	r7, #20
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bc80      	pop	{r7}
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	e000ed00 	.word	0xe000ed00

080057fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80057fc:	b480      	push	{r7}
 80057fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005800:	4b04      	ldr	r3, [pc, #16]	; (8005814 <__NVIC_GetPriorityGrouping+0x18>)
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	0a1b      	lsrs	r3, r3, #8
 8005806:	f003 0307 	and.w	r3, r3, #7
}
 800580a:	4618      	mov	r0, r3
 800580c:	46bd      	mov	sp, r7
 800580e:	bc80      	pop	{r7}
 8005810:	4770      	bx	lr
 8005812:	bf00      	nop
 8005814:	e000ed00 	.word	0xe000ed00

08005818 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005818:	b480      	push	{r7}
 800581a:	b083      	sub	sp, #12
 800581c:	af00      	add	r7, sp, #0
 800581e:	4603      	mov	r3, r0
 8005820:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005826:	2b00      	cmp	r3, #0
 8005828:	db0b      	blt.n	8005842 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800582a:	79fb      	ldrb	r3, [r7, #7]
 800582c:	f003 021f 	and.w	r2, r3, #31
 8005830:	4906      	ldr	r1, [pc, #24]	; (800584c <__NVIC_EnableIRQ+0x34>)
 8005832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005836:	095b      	lsrs	r3, r3, #5
 8005838:	2001      	movs	r0, #1
 800583a:	fa00 f202 	lsl.w	r2, r0, r2
 800583e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005842:	bf00      	nop
 8005844:	370c      	adds	r7, #12
 8005846:	46bd      	mov	sp, r7
 8005848:	bc80      	pop	{r7}
 800584a:	4770      	bx	lr
 800584c:	e000e100 	.word	0xe000e100

08005850 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005850:	b480      	push	{r7}
 8005852:	b083      	sub	sp, #12
 8005854:	af00      	add	r7, sp, #0
 8005856:	4603      	mov	r3, r0
 8005858:	6039      	str	r1, [r7, #0]
 800585a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800585c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005860:	2b00      	cmp	r3, #0
 8005862:	db0a      	blt.n	800587a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	b2da      	uxtb	r2, r3
 8005868:	490c      	ldr	r1, [pc, #48]	; (800589c <__NVIC_SetPriority+0x4c>)
 800586a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800586e:	0112      	lsls	r2, r2, #4
 8005870:	b2d2      	uxtb	r2, r2
 8005872:	440b      	add	r3, r1
 8005874:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005878:	e00a      	b.n	8005890 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	b2da      	uxtb	r2, r3
 800587e:	4908      	ldr	r1, [pc, #32]	; (80058a0 <__NVIC_SetPriority+0x50>)
 8005880:	79fb      	ldrb	r3, [r7, #7]
 8005882:	f003 030f 	and.w	r3, r3, #15
 8005886:	3b04      	subs	r3, #4
 8005888:	0112      	lsls	r2, r2, #4
 800588a:	b2d2      	uxtb	r2, r2
 800588c:	440b      	add	r3, r1
 800588e:	761a      	strb	r2, [r3, #24]
}
 8005890:	bf00      	nop
 8005892:	370c      	adds	r7, #12
 8005894:	46bd      	mov	sp, r7
 8005896:	bc80      	pop	{r7}
 8005898:	4770      	bx	lr
 800589a:	bf00      	nop
 800589c:	e000e100 	.word	0xe000e100
 80058a0:	e000ed00 	.word	0xe000ed00

080058a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b089      	sub	sp, #36	; 0x24
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	60f8      	str	r0, [r7, #12]
 80058ac:	60b9      	str	r1, [r7, #8]
 80058ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f003 0307 	and.w	r3, r3, #7
 80058b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80058b8:	69fb      	ldr	r3, [r7, #28]
 80058ba:	f1c3 0307 	rsb	r3, r3, #7
 80058be:	2b04      	cmp	r3, #4
 80058c0:	bf28      	it	cs
 80058c2:	2304      	movcs	r3, #4
 80058c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	3304      	adds	r3, #4
 80058ca:	2b06      	cmp	r3, #6
 80058cc:	d902      	bls.n	80058d4 <NVIC_EncodePriority+0x30>
 80058ce:	69fb      	ldr	r3, [r7, #28]
 80058d0:	3b03      	subs	r3, #3
 80058d2:	e000      	b.n	80058d6 <NVIC_EncodePriority+0x32>
 80058d4:	2300      	movs	r3, #0
 80058d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058d8:	f04f 32ff 	mov.w	r2, #4294967295
 80058dc:	69bb      	ldr	r3, [r7, #24]
 80058de:	fa02 f303 	lsl.w	r3, r2, r3
 80058e2:	43da      	mvns	r2, r3
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	401a      	ands	r2, r3
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80058ec:	f04f 31ff 	mov.w	r1, #4294967295
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	fa01 f303 	lsl.w	r3, r1, r3
 80058f6:	43d9      	mvns	r1, r3
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058fc:	4313      	orrs	r3, r2
         );
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3724      	adds	r7, #36	; 0x24
 8005902:	46bd      	mov	sp, r7
 8005904:	bc80      	pop	{r7}
 8005906:	4770      	bx	lr

08005908 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b082      	sub	sp, #8
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	3b01      	subs	r3, #1
 8005914:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005918:	d301      	bcc.n	800591e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800591a:	2301      	movs	r3, #1
 800591c:	e00f      	b.n	800593e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800591e:	4a0a      	ldr	r2, [pc, #40]	; (8005948 <SysTick_Config+0x40>)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	3b01      	subs	r3, #1
 8005924:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005926:	210f      	movs	r1, #15
 8005928:	f04f 30ff 	mov.w	r0, #4294967295
 800592c:	f7ff ff90 	bl	8005850 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005930:	4b05      	ldr	r3, [pc, #20]	; (8005948 <SysTick_Config+0x40>)
 8005932:	2200      	movs	r2, #0
 8005934:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005936:	4b04      	ldr	r3, [pc, #16]	; (8005948 <SysTick_Config+0x40>)
 8005938:	2207      	movs	r2, #7
 800593a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800593c:	2300      	movs	r3, #0
}
 800593e:	4618      	mov	r0, r3
 8005940:	3708      	adds	r7, #8
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
 8005946:	bf00      	nop
 8005948:	e000e010 	.word	0xe000e010

0800594c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b082      	sub	sp, #8
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f7ff ff2d 	bl	80057b4 <__NVIC_SetPriorityGrouping>
}
 800595a:	bf00      	nop
 800595c:	3708      	adds	r7, #8
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}

08005962 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005962:	b580      	push	{r7, lr}
 8005964:	b086      	sub	sp, #24
 8005966:	af00      	add	r7, sp, #0
 8005968:	4603      	mov	r3, r0
 800596a:	60b9      	str	r1, [r7, #8]
 800596c:	607a      	str	r2, [r7, #4]
 800596e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005970:	2300      	movs	r3, #0
 8005972:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005974:	f7ff ff42 	bl	80057fc <__NVIC_GetPriorityGrouping>
 8005978:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	68b9      	ldr	r1, [r7, #8]
 800597e:	6978      	ldr	r0, [r7, #20]
 8005980:	f7ff ff90 	bl	80058a4 <NVIC_EncodePriority>
 8005984:	4602      	mov	r2, r0
 8005986:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800598a:	4611      	mov	r1, r2
 800598c:	4618      	mov	r0, r3
 800598e:	f7ff ff5f 	bl	8005850 <__NVIC_SetPriority>
}
 8005992:	bf00      	nop
 8005994:	3718      	adds	r7, #24
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}

0800599a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800599a:	b580      	push	{r7, lr}
 800599c:	b082      	sub	sp, #8
 800599e:	af00      	add	r7, sp, #0
 80059a0:	4603      	mov	r3, r0
 80059a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80059a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059a8:	4618      	mov	r0, r3
 80059aa:	f7ff ff35 	bl	8005818 <__NVIC_EnableIRQ>
}
 80059ae:	bf00      	nop
 80059b0:	3708      	adds	r7, #8
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}

080059b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80059b6:	b580      	push	{r7, lr}
 80059b8:	b082      	sub	sp, #8
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f7ff ffa2 	bl	8005908 <SysTick_Config>
 80059c4:	4603      	mov	r3, r0
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3708      	adds	r7, #8
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
	...

080059d0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b085      	sub	sp, #20
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80059d8:	2300      	movs	r3, #0
 80059da:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d101      	bne.n	80059e6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e043      	b.n	8005a6e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	461a      	mov	r2, r3
 80059ec:	4b22      	ldr	r3, [pc, #136]	; (8005a78 <HAL_DMA_Init+0xa8>)
 80059ee:	4413      	add	r3, r2
 80059f0:	4a22      	ldr	r2, [pc, #136]	; (8005a7c <HAL_DMA_Init+0xac>)
 80059f2:	fba2 2303 	umull	r2, r3, r2, r3
 80059f6:	091b      	lsrs	r3, r3, #4
 80059f8:	009a      	lsls	r2, r3, #2
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a1f      	ldr	r2, [pc, #124]	; (8005a80 <HAL_DMA_Init+0xb0>)
 8005a02:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2202      	movs	r2, #2
 8005a08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005a1a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005a1e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8005a28:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a34:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	695b      	ldr	r3, [r3, #20]
 8005a3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a40:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	69db      	ldr	r3, [r3, #28]
 8005a46:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005a48:	68fa      	ldr	r2, [r7, #12]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	68fa      	ldr	r2, [r7, #12]
 8005a54:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005a6c:	2300      	movs	r3, #0
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3714      	adds	r7, #20
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bc80      	pop	{r7}
 8005a76:	4770      	bx	lr
 8005a78:	bffdfff8 	.word	0xbffdfff8
 8005a7c:	cccccccd 	.word	0xcccccccd
 8005a80:	40020000 	.word	0x40020000

08005a84 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b086      	sub	sp, #24
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	60f8      	str	r0, [r7, #12]
 8005a8c:	60b9      	str	r1, [r7, #8]
 8005a8e:	607a      	str	r2, [r7, #4]
 8005a90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a92:	2300      	movs	r3, #0
 8005a94:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d101      	bne.n	8005aa4 <HAL_DMA_Start_IT+0x20>
 8005aa0:	2302      	movs	r3, #2
 8005aa2:	e04a      	b.n	8005b3a <HAL_DMA_Start_IT+0xb6>
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d13a      	bne.n	8005b2c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2202      	movs	r2, #2
 8005aba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f022 0201 	bic.w	r2, r2, #1
 8005ad2:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	68b9      	ldr	r1, [r7, #8]
 8005ada:	68f8      	ldr	r0, [r7, #12]
 8005adc:	f000 f938 	bl	8005d50 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d008      	beq.n	8005afa <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f042 020e 	orr.w	r2, r2, #14
 8005af6:	601a      	str	r2, [r3, #0]
 8005af8:	e00f      	b.n	8005b1a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f022 0204 	bic.w	r2, r2, #4
 8005b08:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f042 020a 	orr.w	r2, r2, #10
 8005b18:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f042 0201 	orr.w	r2, r2, #1
 8005b28:	601a      	str	r2, [r3, #0]
 8005b2a:	e005      	b.n	8005b38 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8005b34:	2302      	movs	r3, #2
 8005b36:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8005b38:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3718      	adds	r7, #24
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
	...

08005b44 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b084      	sub	sp, #16
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b60:	2204      	movs	r2, #4
 8005b62:	409a      	lsls	r2, r3
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	4013      	ands	r3, r2
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d04f      	beq.n	8005c0c <HAL_DMA_IRQHandler+0xc8>
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	f003 0304 	and.w	r3, r3, #4
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d04a      	beq.n	8005c0c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 0320 	and.w	r3, r3, #32
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d107      	bne.n	8005b94 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f022 0204 	bic.w	r2, r2, #4
 8005b92:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a66      	ldr	r2, [pc, #408]	; (8005d34 <HAL_DMA_IRQHandler+0x1f0>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d029      	beq.n	8005bf2 <HAL_DMA_IRQHandler+0xae>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a65      	ldr	r2, [pc, #404]	; (8005d38 <HAL_DMA_IRQHandler+0x1f4>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d022      	beq.n	8005bee <HAL_DMA_IRQHandler+0xaa>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a63      	ldr	r2, [pc, #396]	; (8005d3c <HAL_DMA_IRQHandler+0x1f8>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d01a      	beq.n	8005be8 <HAL_DMA_IRQHandler+0xa4>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a62      	ldr	r2, [pc, #392]	; (8005d40 <HAL_DMA_IRQHandler+0x1fc>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d012      	beq.n	8005be2 <HAL_DMA_IRQHandler+0x9e>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a60      	ldr	r2, [pc, #384]	; (8005d44 <HAL_DMA_IRQHandler+0x200>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d00a      	beq.n	8005bdc <HAL_DMA_IRQHandler+0x98>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a5f      	ldr	r2, [pc, #380]	; (8005d48 <HAL_DMA_IRQHandler+0x204>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d102      	bne.n	8005bd6 <HAL_DMA_IRQHandler+0x92>
 8005bd0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005bd4:	e00e      	b.n	8005bf4 <HAL_DMA_IRQHandler+0xb0>
 8005bd6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005bda:	e00b      	b.n	8005bf4 <HAL_DMA_IRQHandler+0xb0>
 8005bdc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005be0:	e008      	b.n	8005bf4 <HAL_DMA_IRQHandler+0xb0>
 8005be2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005be6:	e005      	b.n	8005bf4 <HAL_DMA_IRQHandler+0xb0>
 8005be8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005bec:	e002      	b.n	8005bf4 <HAL_DMA_IRQHandler+0xb0>
 8005bee:	2340      	movs	r3, #64	; 0x40
 8005bf0:	e000      	b.n	8005bf4 <HAL_DMA_IRQHandler+0xb0>
 8005bf2:	2304      	movs	r3, #4
 8005bf4:	4a55      	ldr	r2, [pc, #340]	; (8005d4c <HAL_DMA_IRQHandler+0x208>)
 8005bf6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	f000 8094 	beq.w	8005d2a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8005c0a:	e08e      	b.n	8005d2a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c10:	2202      	movs	r2, #2
 8005c12:	409a      	lsls	r2, r3
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	4013      	ands	r3, r2
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d056      	beq.n	8005cca <HAL_DMA_IRQHandler+0x186>
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	f003 0302 	and.w	r3, r3, #2
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d051      	beq.n	8005cca <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 0320 	and.w	r3, r3, #32
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d10b      	bne.n	8005c4c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f022 020a 	bic.w	r2, r2, #10
 8005c42:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a38      	ldr	r2, [pc, #224]	; (8005d34 <HAL_DMA_IRQHandler+0x1f0>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d029      	beq.n	8005caa <HAL_DMA_IRQHandler+0x166>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a37      	ldr	r2, [pc, #220]	; (8005d38 <HAL_DMA_IRQHandler+0x1f4>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d022      	beq.n	8005ca6 <HAL_DMA_IRQHandler+0x162>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a35      	ldr	r2, [pc, #212]	; (8005d3c <HAL_DMA_IRQHandler+0x1f8>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d01a      	beq.n	8005ca0 <HAL_DMA_IRQHandler+0x15c>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a34      	ldr	r2, [pc, #208]	; (8005d40 <HAL_DMA_IRQHandler+0x1fc>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d012      	beq.n	8005c9a <HAL_DMA_IRQHandler+0x156>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a32      	ldr	r2, [pc, #200]	; (8005d44 <HAL_DMA_IRQHandler+0x200>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d00a      	beq.n	8005c94 <HAL_DMA_IRQHandler+0x150>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a31      	ldr	r2, [pc, #196]	; (8005d48 <HAL_DMA_IRQHandler+0x204>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d102      	bne.n	8005c8e <HAL_DMA_IRQHandler+0x14a>
 8005c88:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005c8c:	e00e      	b.n	8005cac <HAL_DMA_IRQHandler+0x168>
 8005c8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005c92:	e00b      	b.n	8005cac <HAL_DMA_IRQHandler+0x168>
 8005c94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005c98:	e008      	b.n	8005cac <HAL_DMA_IRQHandler+0x168>
 8005c9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005c9e:	e005      	b.n	8005cac <HAL_DMA_IRQHandler+0x168>
 8005ca0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ca4:	e002      	b.n	8005cac <HAL_DMA_IRQHandler+0x168>
 8005ca6:	2320      	movs	r3, #32
 8005ca8:	e000      	b.n	8005cac <HAL_DMA_IRQHandler+0x168>
 8005caa:	2302      	movs	r3, #2
 8005cac:	4a27      	ldr	r2, [pc, #156]	; (8005d4c <HAL_DMA_IRQHandler+0x208>)
 8005cae:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d034      	beq.n	8005d2a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005cc8:	e02f      	b.n	8005d2a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cce:	2208      	movs	r2, #8
 8005cd0:	409a      	lsls	r2, r3
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	4013      	ands	r3, r2
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d028      	beq.n	8005d2c <HAL_DMA_IRQHandler+0x1e8>
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	f003 0308 	and.w	r3, r3, #8
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d023      	beq.n	8005d2c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f022 020e 	bic.w	r2, r2, #14
 8005cf2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cfc:	2101      	movs	r1, #1
 8005cfe:	fa01 f202 	lsl.w	r2, r1, r2
 8005d02:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d004      	beq.n	8005d2c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	4798      	blx	r3
    }
  }
  return;
 8005d2a:	bf00      	nop
 8005d2c:	bf00      	nop
}
 8005d2e:	3710      	adds	r7, #16
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	40020008 	.word	0x40020008
 8005d38:	4002001c 	.word	0x4002001c
 8005d3c:	40020030 	.word	0x40020030
 8005d40:	40020044 	.word	0x40020044
 8005d44:	40020058 	.word	0x40020058
 8005d48:	4002006c 	.word	0x4002006c
 8005d4c:	40020000 	.word	0x40020000

08005d50 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b085      	sub	sp, #20
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	60f8      	str	r0, [r7, #12]
 8005d58:	60b9      	str	r1, [r7, #8]
 8005d5a:	607a      	str	r2, [r7, #4]
 8005d5c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d66:	2101      	movs	r1, #1
 8005d68:	fa01 f202 	lsl.w	r2, r1, r2
 8005d6c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	683a      	ldr	r2, [r7, #0]
 8005d74:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	2b10      	cmp	r3, #16
 8005d7c:	d108      	bne.n	8005d90 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	68ba      	ldr	r2, [r7, #8]
 8005d8c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005d8e:	e007      	b.n	8005da0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	68ba      	ldr	r2, [r7, #8]
 8005d96:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	60da      	str	r2, [r3, #12]
}
 8005da0:	bf00      	nop
 8005da2:	3714      	adds	r7, #20
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bc80      	pop	{r7}
 8005da8:	4770      	bx	lr
	...

08005dac <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005dac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dae:	b087      	sub	sp, #28
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	60f8      	str	r0, [r7, #12]
 8005db4:	60b9      	str	r1, [r7, #8]
 8005db6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005dc6:	4b2f      	ldr	r3, [pc, #188]	; (8005e84 <HAL_FLASH_Program+0xd8>)
 8005dc8:	7e1b      	ldrb	r3, [r3, #24]
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d101      	bne.n	8005dd2 <HAL_FLASH_Program+0x26>
 8005dce:	2302      	movs	r3, #2
 8005dd0:	e054      	b.n	8005e7c <HAL_FLASH_Program+0xd0>
 8005dd2:	4b2c      	ldr	r3, [pc, #176]	; (8005e84 <HAL_FLASH_Program+0xd8>)
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005dd8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005ddc:	f000 f8b2 	bl	8005f44 <FLASH_WaitForLastOperation>
 8005de0:	4603      	mov	r3, r0
 8005de2:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8005de4:	7dfb      	ldrb	r3, [r7, #23]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d144      	bne.n	8005e74 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d102      	bne.n	8005df6 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8005df0:	2301      	movs	r3, #1
 8005df2:	757b      	strb	r3, [r7, #21]
 8005df4:	e007      	b.n	8005e06 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2b02      	cmp	r3, #2
 8005dfa:	d102      	bne.n	8005e02 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8005dfc:	2302      	movs	r3, #2
 8005dfe:	757b      	strb	r3, [r7, #21]
 8005e00:	e001      	b.n	8005e06 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8005e02:	2304      	movs	r3, #4
 8005e04:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8005e06:	2300      	movs	r3, #0
 8005e08:	75bb      	strb	r3, [r7, #22]
 8005e0a:	e02d      	b.n	8005e68 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8005e0c:	7dbb      	ldrb	r3, [r7, #22]
 8005e0e:	005a      	lsls	r2, r3, #1
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	eb02 0c03 	add.w	ip, r2, r3
 8005e16:	7dbb      	ldrb	r3, [r7, #22]
 8005e18:	0119      	lsls	r1, r3, #4
 8005e1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e1e:	f1c1 0620 	rsb	r6, r1, #32
 8005e22:	f1a1 0020 	sub.w	r0, r1, #32
 8005e26:	fa22 f401 	lsr.w	r4, r2, r1
 8005e2a:	fa03 f606 	lsl.w	r6, r3, r6
 8005e2e:	4334      	orrs	r4, r6
 8005e30:	fa23 f000 	lsr.w	r0, r3, r0
 8005e34:	4304      	orrs	r4, r0
 8005e36:	fa23 f501 	lsr.w	r5, r3, r1
 8005e3a:	b2a3      	uxth	r3, r4
 8005e3c:	4619      	mov	r1, r3
 8005e3e:	4660      	mov	r0, ip
 8005e40:	f000 f864 	bl	8005f0c <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005e44:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005e48:	f000 f87c 	bl	8005f44 <FLASH_WaitForLastOperation>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8005e50:	4b0d      	ldr	r3, [pc, #52]	; (8005e88 <HAL_FLASH_Program+0xdc>)
 8005e52:	691b      	ldr	r3, [r3, #16]
 8005e54:	4a0c      	ldr	r2, [pc, #48]	; (8005e88 <HAL_FLASH_Program+0xdc>)
 8005e56:	f023 0301 	bic.w	r3, r3, #1
 8005e5a:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8005e5c:	7dfb      	ldrb	r3, [r7, #23]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d107      	bne.n	8005e72 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8005e62:	7dbb      	ldrb	r3, [r7, #22]
 8005e64:	3301      	adds	r3, #1
 8005e66:	75bb      	strb	r3, [r7, #22]
 8005e68:	7dba      	ldrb	r2, [r7, #22]
 8005e6a:	7d7b      	ldrb	r3, [r7, #21]
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d3cd      	bcc.n	8005e0c <HAL_FLASH_Program+0x60>
 8005e70:	e000      	b.n	8005e74 <HAL_FLASH_Program+0xc8>
      {
        break;
 8005e72:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005e74:	4b03      	ldr	r3, [pc, #12]	; (8005e84 <HAL_FLASH_Program+0xd8>)
 8005e76:	2200      	movs	r2, #0
 8005e78:	761a      	strb	r2, [r3, #24]

  return status;
 8005e7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	371c      	adds	r7, #28
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e84:	20004120 	.word	0x20004120
 8005e88:	40022000 	.word	0x40022000

08005e8c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005e92:	2300      	movs	r3, #0
 8005e94:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005e96:	4b0d      	ldr	r3, [pc, #52]	; (8005ecc <HAL_FLASH_Unlock+0x40>)
 8005e98:	691b      	ldr	r3, [r3, #16]
 8005e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d00d      	beq.n	8005ebe <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005ea2:	4b0a      	ldr	r3, [pc, #40]	; (8005ecc <HAL_FLASH_Unlock+0x40>)
 8005ea4:	4a0a      	ldr	r2, [pc, #40]	; (8005ed0 <HAL_FLASH_Unlock+0x44>)
 8005ea6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005ea8:	4b08      	ldr	r3, [pc, #32]	; (8005ecc <HAL_FLASH_Unlock+0x40>)
 8005eaa:	4a0a      	ldr	r2, [pc, #40]	; (8005ed4 <HAL_FLASH_Unlock+0x48>)
 8005eac:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005eae:	4b07      	ldr	r3, [pc, #28]	; (8005ecc <HAL_FLASH_Unlock+0x40>)
 8005eb0:	691b      	ldr	r3, [r3, #16]
 8005eb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d001      	beq.n	8005ebe <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8005ebe:	79fb      	ldrb	r3, [r7, #7]
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	370c      	adds	r7, #12
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bc80      	pop	{r7}
 8005ec8:	4770      	bx	lr
 8005eca:	bf00      	nop
 8005ecc:	40022000 	.word	0x40022000
 8005ed0:	45670123 	.word	0x45670123
 8005ed4:	cdef89ab 	.word	0xcdef89ab

08005ed8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8005edc:	4b05      	ldr	r3, [pc, #20]	; (8005ef4 <HAL_FLASH_Lock+0x1c>)
 8005ede:	691b      	ldr	r3, [r3, #16]
 8005ee0:	4a04      	ldr	r2, [pc, #16]	; (8005ef4 <HAL_FLASH_Lock+0x1c>)
 8005ee2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ee6:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8005ee8:	2300      	movs	r3, #0
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bc80      	pop	{r7}
 8005ef0:	4770      	bx	lr
 8005ef2:	bf00      	nop
 8005ef4:	40022000 	.word	0x40022000

08005ef8 <HAL_FLASH_GetError>:
  * @brief  Get the specific FLASH error flag.
  * @retval FLASH_ErrorCode The returned value can be:
  *            @ref FLASH_Error_Codes
  */
uint32_t HAL_FLASH_GetError(void)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8005efc:	4b02      	ldr	r3, [pc, #8]	; (8005f08 <HAL_FLASH_GetError+0x10>)
 8005efe:	69db      	ldr	r3, [r3, #28]
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bc80      	pop	{r7}
 8005f06:	4770      	bx	lr
 8005f08:	20004120 	.word	0x20004120

08005f0c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b083      	sub	sp, #12
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	460b      	mov	r3, r1
 8005f16:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005f18:	4b08      	ldr	r3, [pc, #32]	; (8005f3c <FLASH_Program_HalfWord+0x30>)
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005f1e:	4b08      	ldr	r3, [pc, #32]	; (8005f40 <FLASH_Program_HalfWord+0x34>)
 8005f20:	691b      	ldr	r3, [r3, #16]
 8005f22:	4a07      	ldr	r2, [pc, #28]	; (8005f40 <FLASH_Program_HalfWord+0x34>)
 8005f24:	f043 0301 	orr.w	r3, r3, #1
 8005f28:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	887a      	ldrh	r2, [r7, #2]
 8005f2e:	801a      	strh	r2, [r3, #0]
}
 8005f30:	bf00      	nop
 8005f32:	370c      	adds	r7, #12
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bc80      	pop	{r7}
 8005f38:	4770      	bx	lr
 8005f3a:	bf00      	nop
 8005f3c:	20004120 	.word	0x20004120
 8005f40:	40022000 	.word	0x40022000

08005f44 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b084      	sub	sp, #16
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8005f4c:	f7ff f866 	bl	800501c <HAL_GetTick>
 8005f50:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8005f52:	e010      	b.n	8005f76 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f5a:	d00c      	beq.n	8005f76 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d007      	beq.n	8005f72 <FLASH_WaitForLastOperation+0x2e>
 8005f62:	f7ff f85b 	bl	800501c <HAL_GetTick>
 8005f66:	4602      	mov	r2, r0
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	1ad3      	subs	r3, r2, r3
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d201      	bcs.n	8005f76 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8005f72:	2303      	movs	r3, #3
 8005f74:	e025      	b.n	8005fc2 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8005f76:	4b15      	ldr	r3, [pc, #84]	; (8005fcc <FLASH_WaitForLastOperation+0x88>)
 8005f78:	68db      	ldr	r3, [r3, #12]
 8005f7a:	f003 0301 	and.w	r3, r3, #1
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d1e8      	bne.n	8005f54 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8005f82:	4b12      	ldr	r3, [pc, #72]	; (8005fcc <FLASH_WaitForLastOperation+0x88>)
 8005f84:	68db      	ldr	r3, [r3, #12]
 8005f86:	f003 0320 	and.w	r3, r3, #32
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d002      	beq.n	8005f94 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005f8e:	4b0f      	ldr	r3, [pc, #60]	; (8005fcc <FLASH_WaitForLastOperation+0x88>)
 8005f90:	2220      	movs	r2, #32
 8005f92:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8005f94:	4b0d      	ldr	r3, [pc, #52]	; (8005fcc <FLASH_WaitForLastOperation+0x88>)
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	f003 0310 	and.w	r3, r3, #16
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d10b      	bne.n	8005fb8 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8005fa0:	4b0a      	ldr	r3, [pc, #40]	; (8005fcc <FLASH_WaitForLastOperation+0x88>)
 8005fa2:	69db      	ldr	r3, [r3, #28]
 8005fa4:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d105      	bne.n	8005fb8 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8005fac:	4b07      	ldr	r3, [pc, #28]	; (8005fcc <FLASH_WaitForLastOperation+0x88>)
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d003      	beq.n	8005fc0 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8005fb8:	f000 f80a 	bl	8005fd0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e000      	b.n	8005fc2 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8005fc0:	2300      	movs	r3, #0
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3710      	adds	r7, #16
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}
 8005fca:	bf00      	nop
 8005fcc:	40022000 	.word	0x40022000

08005fd0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b083      	sub	sp, #12
 8005fd4:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8005fda:	4b23      	ldr	r3, [pc, #140]	; (8006068 <FLASH_SetErrorCode+0x98>)
 8005fdc:	68db      	ldr	r3, [r3, #12]
 8005fde:	f003 0310 	and.w	r3, r3, #16
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d009      	beq.n	8005ffa <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005fe6:	4b21      	ldr	r3, [pc, #132]	; (800606c <FLASH_SetErrorCode+0x9c>)
 8005fe8:	69db      	ldr	r3, [r3, #28]
 8005fea:	f043 0302 	orr.w	r3, r3, #2
 8005fee:	4a1f      	ldr	r2, [pc, #124]	; (800606c <FLASH_SetErrorCode+0x9c>)
 8005ff0:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f043 0310 	orr.w	r3, r3, #16
 8005ff8:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8005ffa:	4b1b      	ldr	r3, [pc, #108]	; (8006068 <FLASH_SetErrorCode+0x98>)
 8005ffc:	68db      	ldr	r3, [r3, #12]
 8005ffe:	f003 0304 	and.w	r3, r3, #4
 8006002:	2b00      	cmp	r3, #0
 8006004:	d009      	beq.n	800601a <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8006006:	4b19      	ldr	r3, [pc, #100]	; (800606c <FLASH_SetErrorCode+0x9c>)
 8006008:	69db      	ldr	r3, [r3, #28]
 800600a:	f043 0301 	orr.w	r3, r3, #1
 800600e:	4a17      	ldr	r2, [pc, #92]	; (800606c <FLASH_SetErrorCode+0x9c>)
 8006010:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f043 0304 	orr.w	r3, r3, #4
 8006018:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800601a:	4b13      	ldr	r3, [pc, #76]	; (8006068 <FLASH_SetErrorCode+0x98>)
 800601c:	69db      	ldr	r3, [r3, #28]
 800601e:	f003 0301 	and.w	r3, r3, #1
 8006022:	2b00      	cmp	r3, #0
 8006024:	d00b      	beq.n	800603e <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8006026:	4b11      	ldr	r3, [pc, #68]	; (800606c <FLASH_SetErrorCode+0x9c>)
 8006028:	69db      	ldr	r3, [r3, #28]
 800602a:	f043 0304 	orr.w	r3, r3, #4
 800602e:	4a0f      	ldr	r2, [pc, #60]	; (800606c <FLASH_SetErrorCode+0x9c>)
 8006030:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8006032:	4b0d      	ldr	r3, [pc, #52]	; (8006068 <FLASH_SetErrorCode+0x98>)
 8006034:	69db      	ldr	r3, [r3, #28]
 8006036:	4a0c      	ldr	r2, [pc, #48]	; (8006068 <FLASH_SetErrorCode+0x98>)
 8006038:	f023 0301 	bic.w	r3, r3, #1
 800603c:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f240 1201 	movw	r2, #257	; 0x101
 8006044:	4293      	cmp	r3, r2
 8006046:	d106      	bne.n	8006056 <FLASH_SetErrorCode+0x86>
 8006048:	4b07      	ldr	r3, [pc, #28]	; (8006068 <FLASH_SetErrorCode+0x98>)
 800604a:	69db      	ldr	r3, [r3, #28]
 800604c:	4a06      	ldr	r2, [pc, #24]	; (8006068 <FLASH_SetErrorCode+0x98>)
 800604e:	f023 0301 	bic.w	r3, r3, #1
 8006052:	61d3      	str	r3, [r2, #28]
}  
 8006054:	e002      	b.n	800605c <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8006056:	4a04      	ldr	r2, [pc, #16]	; (8006068 <FLASH_SetErrorCode+0x98>)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	60d3      	str	r3, [r2, #12]
}  
 800605c:	bf00      	nop
 800605e:	370c      	adds	r7, #12
 8006060:	46bd      	mov	sp, r7
 8006062:	bc80      	pop	{r7}
 8006064:	4770      	bx	lr
 8006066:	bf00      	nop
 8006068:	40022000 	.word	0x40022000
 800606c:	20004120 	.word	0x20004120

08006070 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b084      	sub	sp, #16
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800607e:	2300      	movs	r3, #0
 8006080:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006082:	4b2f      	ldr	r3, [pc, #188]	; (8006140 <HAL_FLASHEx_Erase+0xd0>)
 8006084:	7e1b      	ldrb	r3, [r3, #24]
 8006086:	2b01      	cmp	r3, #1
 8006088:	d101      	bne.n	800608e <HAL_FLASHEx_Erase+0x1e>
 800608a:	2302      	movs	r3, #2
 800608c:	e053      	b.n	8006136 <HAL_FLASHEx_Erase+0xc6>
 800608e:	4b2c      	ldr	r3, [pc, #176]	; (8006140 <HAL_FLASHEx_Erase+0xd0>)
 8006090:	2201      	movs	r2, #1
 8006092:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	2b02      	cmp	r3, #2
 800609a:	d116      	bne.n	80060ca <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800609c:	f24c 3050 	movw	r0, #50000	; 0xc350
 80060a0:	f7ff ff50 	bl	8005f44 <FLASH_WaitForLastOperation>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d141      	bne.n	800612e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80060aa:	2001      	movs	r0, #1
 80060ac:	f000 f84c 	bl	8006148 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80060b0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80060b4:	f7ff ff46 	bl	8005f44 <FLASH_WaitForLastOperation>
 80060b8:	4603      	mov	r3, r0
 80060ba:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80060bc:	4b21      	ldr	r3, [pc, #132]	; (8006144 <HAL_FLASHEx_Erase+0xd4>)
 80060be:	691b      	ldr	r3, [r3, #16]
 80060c0:	4a20      	ldr	r2, [pc, #128]	; (8006144 <HAL_FLASHEx_Erase+0xd4>)
 80060c2:	f023 0304 	bic.w	r3, r3, #4
 80060c6:	6113      	str	r3, [r2, #16]
 80060c8:	e031      	b.n	800612e <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80060ca:	f24c 3050 	movw	r0, #50000	; 0xc350
 80060ce:	f7ff ff39 	bl	8005f44 <FLASH_WaitForLastOperation>
 80060d2:	4603      	mov	r3, r0
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d12a      	bne.n	800612e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	f04f 32ff 	mov.w	r2, #4294967295
 80060de:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	60bb      	str	r3, [r7, #8]
 80060e6:	e019      	b.n	800611c <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80060e8:	68b8      	ldr	r0, [r7, #8]
 80060ea:	f000 f849 	bl	8006180 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80060ee:	f24c 3050 	movw	r0, #50000	; 0xc350
 80060f2:	f7ff ff27 	bl	8005f44 <FLASH_WaitForLastOperation>
 80060f6:	4603      	mov	r3, r0
 80060f8:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80060fa:	4b12      	ldr	r3, [pc, #72]	; (8006144 <HAL_FLASHEx_Erase+0xd4>)
 80060fc:	691b      	ldr	r3, [r3, #16]
 80060fe:	4a11      	ldr	r2, [pc, #68]	; (8006144 <HAL_FLASHEx_Erase+0xd4>)
 8006100:	f023 0302 	bic.w	r3, r3, #2
 8006104:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8006106:	7bfb      	ldrb	r3, [r7, #15]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d003      	beq.n	8006114 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	68ba      	ldr	r2, [r7, #8]
 8006110:	601a      	str	r2, [r3, #0]
            break;
 8006112:	e00c      	b.n	800612e <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800611a:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	68db      	ldr	r3, [r3, #12]
 8006120:	029a      	lsls	r2, r3, #10
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8006128:	68ba      	ldr	r2, [r7, #8]
 800612a:	429a      	cmp	r2, r3
 800612c:	d3dc      	bcc.n	80060e8 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800612e:	4b04      	ldr	r3, [pc, #16]	; (8006140 <HAL_FLASHEx_Erase+0xd0>)
 8006130:	2200      	movs	r2, #0
 8006132:	761a      	strb	r2, [r3, #24]

  return status;
 8006134:	7bfb      	ldrb	r3, [r7, #15]
}
 8006136:	4618      	mov	r0, r3
 8006138:	3710      	adds	r7, #16
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
 800613e:	bf00      	nop
 8006140:	20004120 	.word	0x20004120
 8006144:	40022000 	.word	0x40022000

08006148 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006150:	4b09      	ldr	r3, [pc, #36]	; (8006178 <FLASH_MassErase+0x30>)
 8006152:	2200      	movs	r2, #0
 8006154:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8006156:	4b09      	ldr	r3, [pc, #36]	; (800617c <FLASH_MassErase+0x34>)
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	4a08      	ldr	r2, [pc, #32]	; (800617c <FLASH_MassErase+0x34>)
 800615c:	f043 0304 	orr.w	r3, r3, #4
 8006160:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8006162:	4b06      	ldr	r3, [pc, #24]	; (800617c <FLASH_MassErase+0x34>)
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	4a05      	ldr	r2, [pc, #20]	; (800617c <FLASH_MassErase+0x34>)
 8006168:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800616c:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800616e:	bf00      	nop
 8006170:	370c      	adds	r7, #12
 8006172:	46bd      	mov	sp, r7
 8006174:	bc80      	pop	{r7}
 8006176:	4770      	bx	lr
 8006178:	20004120 	.word	0x20004120
 800617c:	40022000 	.word	0x40022000

08006180 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8006180:	b480      	push	{r7}
 8006182:	b083      	sub	sp, #12
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006188:	4b0b      	ldr	r3, [pc, #44]	; (80061b8 <FLASH_PageErase+0x38>)
 800618a:	2200      	movs	r2, #0
 800618c:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800618e:	4b0b      	ldr	r3, [pc, #44]	; (80061bc <FLASH_PageErase+0x3c>)
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	4a0a      	ldr	r2, [pc, #40]	; (80061bc <FLASH_PageErase+0x3c>)
 8006194:	f043 0302 	orr.w	r3, r3, #2
 8006198:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800619a:	4a08      	ldr	r2, [pc, #32]	; (80061bc <FLASH_PageErase+0x3c>)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80061a0:	4b06      	ldr	r3, [pc, #24]	; (80061bc <FLASH_PageErase+0x3c>)
 80061a2:	691b      	ldr	r3, [r3, #16]
 80061a4:	4a05      	ldr	r2, [pc, #20]	; (80061bc <FLASH_PageErase+0x3c>)
 80061a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061aa:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80061ac:	bf00      	nop
 80061ae:	370c      	adds	r7, #12
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bc80      	pop	{r7}
 80061b4:	4770      	bx	lr
 80061b6:	bf00      	nop
 80061b8:	20004120 	.word	0x20004120
 80061bc:	40022000 	.word	0x40022000

080061c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b08b      	sub	sp, #44	; 0x2c
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80061ca:	2300      	movs	r3, #0
 80061cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80061ce:	2300      	movs	r3, #0
 80061d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80061d2:	e169      	b.n	80064a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80061d4:	2201      	movs	r2, #1
 80061d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d8:	fa02 f303 	lsl.w	r3, r2, r3
 80061dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	69fa      	ldr	r2, [r7, #28]
 80061e4:	4013      	ands	r3, r2
 80061e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80061e8:	69ba      	ldr	r2, [r7, #24]
 80061ea:	69fb      	ldr	r3, [r7, #28]
 80061ec:	429a      	cmp	r2, r3
 80061ee:	f040 8158 	bne.w	80064a2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	4a9a      	ldr	r2, [pc, #616]	; (8006460 <HAL_GPIO_Init+0x2a0>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d05e      	beq.n	80062ba <HAL_GPIO_Init+0xfa>
 80061fc:	4a98      	ldr	r2, [pc, #608]	; (8006460 <HAL_GPIO_Init+0x2a0>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d875      	bhi.n	80062ee <HAL_GPIO_Init+0x12e>
 8006202:	4a98      	ldr	r2, [pc, #608]	; (8006464 <HAL_GPIO_Init+0x2a4>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d058      	beq.n	80062ba <HAL_GPIO_Init+0xfa>
 8006208:	4a96      	ldr	r2, [pc, #600]	; (8006464 <HAL_GPIO_Init+0x2a4>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d86f      	bhi.n	80062ee <HAL_GPIO_Init+0x12e>
 800620e:	4a96      	ldr	r2, [pc, #600]	; (8006468 <HAL_GPIO_Init+0x2a8>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d052      	beq.n	80062ba <HAL_GPIO_Init+0xfa>
 8006214:	4a94      	ldr	r2, [pc, #592]	; (8006468 <HAL_GPIO_Init+0x2a8>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d869      	bhi.n	80062ee <HAL_GPIO_Init+0x12e>
 800621a:	4a94      	ldr	r2, [pc, #592]	; (800646c <HAL_GPIO_Init+0x2ac>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d04c      	beq.n	80062ba <HAL_GPIO_Init+0xfa>
 8006220:	4a92      	ldr	r2, [pc, #584]	; (800646c <HAL_GPIO_Init+0x2ac>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d863      	bhi.n	80062ee <HAL_GPIO_Init+0x12e>
 8006226:	4a92      	ldr	r2, [pc, #584]	; (8006470 <HAL_GPIO_Init+0x2b0>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d046      	beq.n	80062ba <HAL_GPIO_Init+0xfa>
 800622c:	4a90      	ldr	r2, [pc, #576]	; (8006470 <HAL_GPIO_Init+0x2b0>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d85d      	bhi.n	80062ee <HAL_GPIO_Init+0x12e>
 8006232:	2b12      	cmp	r3, #18
 8006234:	d82a      	bhi.n	800628c <HAL_GPIO_Init+0xcc>
 8006236:	2b12      	cmp	r3, #18
 8006238:	d859      	bhi.n	80062ee <HAL_GPIO_Init+0x12e>
 800623a:	a201      	add	r2, pc, #4	; (adr r2, 8006240 <HAL_GPIO_Init+0x80>)
 800623c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006240:	080062bb 	.word	0x080062bb
 8006244:	08006295 	.word	0x08006295
 8006248:	080062a7 	.word	0x080062a7
 800624c:	080062e9 	.word	0x080062e9
 8006250:	080062ef 	.word	0x080062ef
 8006254:	080062ef 	.word	0x080062ef
 8006258:	080062ef 	.word	0x080062ef
 800625c:	080062ef 	.word	0x080062ef
 8006260:	080062ef 	.word	0x080062ef
 8006264:	080062ef 	.word	0x080062ef
 8006268:	080062ef 	.word	0x080062ef
 800626c:	080062ef 	.word	0x080062ef
 8006270:	080062ef 	.word	0x080062ef
 8006274:	080062ef 	.word	0x080062ef
 8006278:	080062ef 	.word	0x080062ef
 800627c:	080062ef 	.word	0x080062ef
 8006280:	080062ef 	.word	0x080062ef
 8006284:	0800629d 	.word	0x0800629d
 8006288:	080062b1 	.word	0x080062b1
 800628c:	4a79      	ldr	r2, [pc, #484]	; (8006474 <HAL_GPIO_Init+0x2b4>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d013      	beq.n	80062ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8006292:	e02c      	b.n	80062ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	623b      	str	r3, [r7, #32]
          break;
 800629a:	e029      	b.n	80062f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	68db      	ldr	r3, [r3, #12]
 80062a0:	3304      	adds	r3, #4
 80062a2:	623b      	str	r3, [r7, #32]
          break;
 80062a4:	e024      	b.n	80062f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	68db      	ldr	r3, [r3, #12]
 80062aa:	3308      	adds	r3, #8
 80062ac:	623b      	str	r3, [r7, #32]
          break;
 80062ae:	e01f      	b.n	80062f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	330c      	adds	r3, #12
 80062b6:	623b      	str	r3, [r7, #32]
          break;
 80062b8:	e01a      	b.n	80062f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d102      	bne.n	80062c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80062c2:	2304      	movs	r3, #4
 80062c4:	623b      	str	r3, [r7, #32]
          break;
 80062c6:	e013      	b.n	80062f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d105      	bne.n	80062dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80062d0:	2308      	movs	r3, #8
 80062d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	69fa      	ldr	r2, [r7, #28]
 80062d8:	611a      	str	r2, [r3, #16]
          break;
 80062da:	e009      	b.n	80062f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80062dc:	2308      	movs	r3, #8
 80062de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	69fa      	ldr	r2, [r7, #28]
 80062e4:	615a      	str	r2, [r3, #20]
          break;
 80062e6:	e003      	b.n	80062f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80062e8:	2300      	movs	r3, #0
 80062ea:	623b      	str	r3, [r7, #32]
          break;
 80062ec:	e000      	b.n	80062f0 <HAL_GPIO_Init+0x130>
          break;
 80062ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80062f0:	69bb      	ldr	r3, [r7, #24]
 80062f2:	2bff      	cmp	r3, #255	; 0xff
 80062f4:	d801      	bhi.n	80062fa <HAL_GPIO_Init+0x13a>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	e001      	b.n	80062fe <HAL_GPIO_Init+0x13e>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	3304      	adds	r3, #4
 80062fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006300:	69bb      	ldr	r3, [r7, #24]
 8006302:	2bff      	cmp	r3, #255	; 0xff
 8006304:	d802      	bhi.n	800630c <HAL_GPIO_Init+0x14c>
 8006306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006308:	009b      	lsls	r3, r3, #2
 800630a:	e002      	b.n	8006312 <HAL_GPIO_Init+0x152>
 800630c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630e:	3b08      	subs	r3, #8
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	210f      	movs	r1, #15
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	fa01 f303 	lsl.w	r3, r1, r3
 8006320:	43db      	mvns	r3, r3
 8006322:	401a      	ands	r2, r3
 8006324:	6a39      	ldr	r1, [r7, #32]
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	fa01 f303 	lsl.w	r3, r1, r3
 800632c:	431a      	orrs	r2, r3
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800633a:	2b00      	cmp	r3, #0
 800633c:	f000 80b1 	beq.w	80064a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006340:	4b4d      	ldr	r3, [pc, #308]	; (8006478 <HAL_GPIO_Init+0x2b8>)
 8006342:	699b      	ldr	r3, [r3, #24]
 8006344:	4a4c      	ldr	r2, [pc, #304]	; (8006478 <HAL_GPIO_Init+0x2b8>)
 8006346:	f043 0301 	orr.w	r3, r3, #1
 800634a:	6193      	str	r3, [r2, #24]
 800634c:	4b4a      	ldr	r3, [pc, #296]	; (8006478 <HAL_GPIO_Init+0x2b8>)
 800634e:	699b      	ldr	r3, [r3, #24]
 8006350:	f003 0301 	and.w	r3, r3, #1
 8006354:	60bb      	str	r3, [r7, #8]
 8006356:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8006358:	4a48      	ldr	r2, [pc, #288]	; (800647c <HAL_GPIO_Init+0x2bc>)
 800635a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635c:	089b      	lsrs	r3, r3, #2
 800635e:	3302      	adds	r3, #2
 8006360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006364:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8006366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006368:	f003 0303 	and.w	r3, r3, #3
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	220f      	movs	r2, #15
 8006370:	fa02 f303 	lsl.w	r3, r2, r3
 8006374:	43db      	mvns	r3, r3
 8006376:	68fa      	ldr	r2, [r7, #12]
 8006378:	4013      	ands	r3, r2
 800637a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	4a40      	ldr	r2, [pc, #256]	; (8006480 <HAL_GPIO_Init+0x2c0>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d013      	beq.n	80063ac <HAL_GPIO_Init+0x1ec>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	4a3f      	ldr	r2, [pc, #252]	; (8006484 <HAL_GPIO_Init+0x2c4>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d00d      	beq.n	80063a8 <HAL_GPIO_Init+0x1e8>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	4a3e      	ldr	r2, [pc, #248]	; (8006488 <HAL_GPIO_Init+0x2c8>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d007      	beq.n	80063a4 <HAL_GPIO_Init+0x1e4>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	4a3d      	ldr	r2, [pc, #244]	; (800648c <HAL_GPIO_Init+0x2cc>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d101      	bne.n	80063a0 <HAL_GPIO_Init+0x1e0>
 800639c:	2303      	movs	r3, #3
 800639e:	e006      	b.n	80063ae <HAL_GPIO_Init+0x1ee>
 80063a0:	2304      	movs	r3, #4
 80063a2:	e004      	b.n	80063ae <HAL_GPIO_Init+0x1ee>
 80063a4:	2302      	movs	r3, #2
 80063a6:	e002      	b.n	80063ae <HAL_GPIO_Init+0x1ee>
 80063a8:	2301      	movs	r3, #1
 80063aa:	e000      	b.n	80063ae <HAL_GPIO_Init+0x1ee>
 80063ac:	2300      	movs	r3, #0
 80063ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063b0:	f002 0203 	and.w	r2, r2, #3
 80063b4:	0092      	lsls	r2, r2, #2
 80063b6:	4093      	lsls	r3, r2
 80063b8:	68fa      	ldr	r2, [r7, #12]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80063be:	492f      	ldr	r1, [pc, #188]	; (800647c <HAL_GPIO_Init+0x2bc>)
 80063c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c2:	089b      	lsrs	r3, r3, #2
 80063c4:	3302      	adds	r3, #2
 80063c6:	68fa      	ldr	r2, [r7, #12]
 80063c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d006      	beq.n	80063e6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80063d8:	4b2d      	ldr	r3, [pc, #180]	; (8006490 <HAL_GPIO_Init+0x2d0>)
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	492c      	ldr	r1, [pc, #176]	; (8006490 <HAL_GPIO_Init+0x2d0>)
 80063de:	69bb      	ldr	r3, [r7, #24]
 80063e0:	4313      	orrs	r3, r2
 80063e2:	600b      	str	r3, [r1, #0]
 80063e4:	e006      	b.n	80063f4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80063e6:	4b2a      	ldr	r3, [pc, #168]	; (8006490 <HAL_GPIO_Init+0x2d0>)
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	69bb      	ldr	r3, [r7, #24]
 80063ec:	43db      	mvns	r3, r3
 80063ee:	4928      	ldr	r1, [pc, #160]	; (8006490 <HAL_GPIO_Init+0x2d0>)
 80063f0:	4013      	ands	r3, r2
 80063f2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d006      	beq.n	800640e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006400:	4b23      	ldr	r3, [pc, #140]	; (8006490 <HAL_GPIO_Init+0x2d0>)
 8006402:	685a      	ldr	r2, [r3, #4]
 8006404:	4922      	ldr	r1, [pc, #136]	; (8006490 <HAL_GPIO_Init+0x2d0>)
 8006406:	69bb      	ldr	r3, [r7, #24]
 8006408:	4313      	orrs	r3, r2
 800640a:	604b      	str	r3, [r1, #4]
 800640c:	e006      	b.n	800641c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800640e:	4b20      	ldr	r3, [pc, #128]	; (8006490 <HAL_GPIO_Init+0x2d0>)
 8006410:	685a      	ldr	r2, [r3, #4]
 8006412:	69bb      	ldr	r3, [r7, #24]
 8006414:	43db      	mvns	r3, r3
 8006416:	491e      	ldr	r1, [pc, #120]	; (8006490 <HAL_GPIO_Init+0x2d0>)
 8006418:	4013      	ands	r3, r2
 800641a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006424:	2b00      	cmp	r3, #0
 8006426:	d006      	beq.n	8006436 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006428:	4b19      	ldr	r3, [pc, #100]	; (8006490 <HAL_GPIO_Init+0x2d0>)
 800642a:	689a      	ldr	r2, [r3, #8]
 800642c:	4918      	ldr	r1, [pc, #96]	; (8006490 <HAL_GPIO_Init+0x2d0>)
 800642e:	69bb      	ldr	r3, [r7, #24]
 8006430:	4313      	orrs	r3, r2
 8006432:	608b      	str	r3, [r1, #8]
 8006434:	e006      	b.n	8006444 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006436:	4b16      	ldr	r3, [pc, #88]	; (8006490 <HAL_GPIO_Init+0x2d0>)
 8006438:	689a      	ldr	r2, [r3, #8]
 800643a:	69bb      	ldr	r3, [r7, #24]
 800643c:	43db      	mvns	r3, r3
 800643e:	4914      	ldr	r1, [pc, #80]	; (8006490 <HAL_GPIO_Init+0x2d0>)
 8006440:	4013      	ands	r3, r2
 8006442:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800644c:	2b00      	cmp	r3, #0
 800644e:	d021      	beq.n	8006494 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006450:	4b0f      	ldr	r3, [pc, #60]	; (8006490 <HAL_GPIO_Init+0x2d0>)
 8006452:	68da      	ldr	r2, [r3, #12]
 8006454:	490e      	ldr	r1, [pc, #56]	; (8006490 <HAL_GPIO_Init+0x2d0>)
 8006456:	69bb      	ldr	r3, [r7, #24]
 8006458:	4313      	orrs	r3, r2
 800645a:	60cb      	str	r3, [r1, #12]
 800645c:	e021      	b.n	80064a2 <HAL_GPIO_Init+0x2e2>
 800645e:	bf00      	nop
 8006460:	10320000 	.word	0x10320000
 8006464:	10310000 	.word	0x10310000
 8006468:	10220000 	.word	0x10220000
 800646c:	10210000 	.word	0x10210000
 8006470:	10120000 	.word	0x10120000
 8006474:	10110000 	.word	0x10110000
 8006478:	40021000 	.word	0x40021000
 800647c:	40010000 	.word	0x40010000
 8006480:	40010800 	.word	0x40010800
 8006484:	40010c00 	.word	0x40010c00
 8006488:	40011000 	.word	0x40011000
 800648c:	40011400 	.word	0x40011400
 8006490:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006494:	4b0b      	ldr	r3, [pc, #44]	; (80064c4 <HAL_GPIO_Init+0x304>)
 8006496:	68da      	ldr	r2, [r3, #12]
 8006498:	69bb      	ldr	r3, [r7, #24]
 800649a:	43db      	mvns	r3, r3
 800649c:	4909      	ldr	r1, [pc, #36]	; (80064c4 <HAL_GPIO_Init+0x304>)
 800649e:	4013      	ands	r3, r2
 80064a0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80064a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a4:	3301      	adds	r3, #1
 80064a6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ae:	fa22 f303 	lsr.w	r3, r2, r3
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	f47f ae8e 	bne.w	80061d4 <HAL_GPIO_Init+0x14>
  }
}
 80064b8:	bf00      	nop
 80064ba:	bf00      	nop
 80064bc:	372c      	adds	r7, #44	; 0x2c
 80064be:	46bd      	mov	sp, r7
 80064c0:	bc80      	pop	{r7}
 80064c2:	4770      	bx	lr
 80064c4:	40010400 	.word	0x40010400

080064c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b085      	sub	sp, #20
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	460b      	mov	r3, r1
 80064d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	689a      	ldr	r2, [r3, #8]
 80064d8:	887b      	ldrh	r3, [r7, #2]
 80064da:	4013      	ands	r3, r2
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d002      	beq.n	80064e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80064e0:	2301      	movs	r3, #1
 80064e2:	73fb      	strb	r3, [r7, #15]
 80064e4:	e001      	b.n	80064ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80064e6:	2300      	movs	r3, #0
 80064e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80064ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3714      	adds	r7, #20
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bc80      	pop	{r7}
 80064f4:	4770      	bx	lr

080064f6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80064f6:	b480      	push	{r7}
 80064f8:	b083      	sub	sp, #12
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	6078      	str	r0, [r7, #4]
 80064fe:	460b      	mov	r3, r1
 8006500:	807b      	strh	r3, [r7, #2]
 8006502:	4613      	mov	r3, r2
 8006504:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006506:	787b      	ldrb	r3, [r7, #1]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d003      	beq.n	8006514 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800650c:	887a      	ldrh	r2, [r7, #2]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006512:	e003      	b.n	800651c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006514:	887b      	ldrh	r3, [r7, #2]
 8006516:	041a      	lsls	r2, r3, #16
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	611a      	str	r2, [r3, #16]
}
 800651c:	bf00      	nop
 800651e:	370c      	adds	r7, #12
 8006520:	46bd      	mov	sp, r7
 8006522:	bc80      	pop	{r7}
 8006524:	4770      	bx	lr
	...

08006528 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d101      	bne.n	800653a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	e12b      	b.n	8006792 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006540:	b2db      	uxtb	r3, r3
 8006542:	2b00      	cmp	r3, #0
 8006544:	d106      	bne.n	8006554 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2200      	movs	r2, #0
 800654a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f7fd ff2a 	bl	80043a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2224      	movs	r2, #36	; 0x24
 8006558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f022 0201 	bic.w	r2, r2, #1
 800656a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800657a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800658a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800658c:	f000 fce4 	bl	8006f58 <HAL_RCC_GetPCLK1Freq>
 8006590:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	4a81      	ldr	r2, [pc, #516]	; (800679c <HAL_I2C_Init+0x274>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d807      	bhi.n	80065ac <HAL_I2C_Init+0x84>
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	4a80      	ldr	r2, [pc, #512]	; (80067a0 <HAL_I2C_Init+0x278>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	bf94      	ite	ls
 80065a4:	2301      	movls	r3, #1
 80065a6:	2300      	movhi	r3, #0
 80065a8:	b2db      	uxtb	r3, r3
 80065aa:	e006      	b.n	80065ba <HAL_I2C_Init+0x92>
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	4a7d      	ldr	r2, [pc, #500]	; (80067a4 <HAL_I2C_Init+0x27c>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	bf94      	ite	ls
 80065b4:	2301      	movls	r3, #1
 80065b6:	2300      	movhi	r3, #0
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d001      	beq.n	80065c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80065be:	2301      	movs	r3, #1
 80065c0:	e0e7      	b.n	8006792 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	4a78      	ldr	r2, [pc, #480]	; (80067a8 <HAL_I2C_Init+0x280>)
 80065c6:	fba2 2303 	umull	r2, r3, r2, r3
 80065ca:	0c9b      	lsrs	r3, r3, #18
 80065cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	68ba      	ldr	r2, [r7, #8]
 80065de:	430a      	orrs	r2, r1
 80065e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	6a1b      	ldr	r3, [r3, #32]
 80065e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	4a6a      	ldr	r2, [pc, #424]	; (800679c <HAL_I2C_Init+0x274>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d802      	bhi.n	80065fc <HAL_I2C_Init+0xd4>
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	3301      	adds	r3, #1
 80065fa:	e009      	b.n	8006610 <HAL_I2C_Init+0xe8>
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006602:	fb02 f303 	mul.w	r3, r2, r3
 8006606:	4a69      	ldr	r2, [pc, #420]	; (80067ac <HAL_I2C_Init+0x284>)
 8006608:	fba2 2303 	umull	r2, r3, r2, r3
 800660c:	099b      	lsrs	r3, r3, #6
 800660e:	3301      	adds	r3, #1
 8006610:	687a      	ldr	r2, [r7, #4]
 8006612:	6812      	ldr	r2, [r2, #0]
 8006614:	430b      	orrs	r3, r1
 8006616:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	69db      	ldr	r3, [r3, #28]
 800661e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006622:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	495c      	ldr	r1, [pc, #368]	; (800679c <HAL_I2C_Init+0x274>)
 800662c:	428b      	cmp	r3, r1
 800662e:	d819      	bhi.n	8006664 <HAL_I2C_Init+0x13c>
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	1e59      	subs	r1, r3, #1
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	005b      	lsls	r3, r3, #1
 800663a:	fbb1 f3f3 	udiv	r3, r1, r3
 800663e:	1c59      	adds	r1, r3, #1
 8006640:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006644:	400b      	ands	r3, r1
 8006646:	2b00      	cmp	r3, #0
 8006648:	d00a      	beq.n	8006660 <HAL_I2C_Init+0x138>
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	1e59      	subs	r1, r3, #1
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	005b      	lsls	r3, r3, #1
 8006654:	fbb1 f3f3 	udiv	r3, r1, r3
 8006658:	3301      	adds	r3, #1
 800665a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800665e:	e051      	b.n	8006704 <HAL_I2C_Init+0x1dc>
 8006660:	2304      	movs	r3, #4
 8006662:	e04f      	b.n	8006704 <HAL_I2C_Init+0x1dc>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d111      	bne.n	8006690 <HAL_I2C_Init+0x168>
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	1e58      	subs	r0, r3, #1
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6859      	ldr	r1, [r3, #4]
 8006674:	460b      	mov	r3, r1
 8006676:	005b      	lsls	r3, r3, #1
 8006678:	440b      	add	r3, r1
 800667a:	fbb0 f3f3 	udiv	r3, r0, r3
 800667e:	3301      	adds	r3, #1
 8006680:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006684:	2b00      	cmp	r3, #0
 8006686:	bf0c      	ite	eq
 8006688:	2301      	moveq	r3, #1
 800668a:	2300      	movne	r3, #0
 800668c:	b2db      	uxtb	r3, r3
 800668e:	e012      	b.n	80066b6 <HAL_I2C_Init+0x18e>
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	1e58      	subs	r0, r3, #1
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6859      	ldr	r1, [r3, #4]
 8006698:	460b      	mov	r3, r1
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	440b      	add	r3, r1
 800669e:	0099      	lsls	r1, r3, #2
 80066a0:	440b      	add	r3, r1
 80066a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80066a6:	3301      	adds	r3, #1
 80066a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	bf0c      	ite	eq
 80066b0:	2301      	moveq	r3, #1
 80066b2:	2300      	movne	r3, #0
 80066b4:	b2db      	uxtb	r3, r3
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d001      	beq.n	80066be <HAL_I2C_Init+0x196>
 80066ba:	2301      	movs	r3, #1
 80066bc:	e022      	b.n	8006704 <HAL_I2C_Init+0x1dc>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d10e      	bne.n	80066e4 <HAL_I2C_Init+0x1bc>
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	1e58      	subs	r0, r3, #1
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6859      	ldr	r1, [r3, #4]
 80066ce:	460b      	mov	r3, r1
 80066d0:	005b      	lsls	r3, r3, #1
 80066d2:	440b      	add	r3, r1
 80066d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80066d8:	3301      	adds	r3, #1
 80066da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066e2:	e00f      	b.n	8006704 <HAL_I2C_Init+0x1dc>
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	1e58      	subs	r0, r3, #1
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6859      	ldr	r1, [r3, #4]
 80066ec:	460b      	mov	r3, r1
 80066ee:	009b      	lsls	r3, r3, #2
 80066f0:	440b      	add	r3, r1
 80066f2:	0099      	lsls	r1, r3, #2
 80066f4:	440b      	add	r3, r1
 80066f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80066fa:	3301      	adds	r3, #1
 80066fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006700:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006704:	6879      	ldr	r1, [r7, #4]
 8006706:	6809      	ldr	r1, [r1, #0]
 8006708:	4313      	orrs	r3, r2
 800670a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	69da      	ldr	r2, [r3, #28]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6a1b      	ldr	r3, [r3, #32]
 800671e:	431a      	orrs	r2, r3
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	430a      	orrs	r2, r1
 8006726:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006732:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	6911      	ldr	r1, [r2, #16]
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	68d2      	ldr	r2, [r2, #12]
 800673e:	4311      	orrs	r1, r2
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	6812      	ldr	r2, [r2, #0]
 8006744:	430b      	orrs	r3, r1
 8006746:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	68db      	ldr	r3, [r3, #12]
 800674e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	695a      	ldr	r2, [r3, #20]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	699b      	ldr	r3, [r3, #24]
 800675a:	431a      	orrs	r2, r3
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	430a      	orrs	r2, r1
 8006762:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f042 0201 	orr.w	r2, r2, #1
 8006772:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2200      	movs	r2, #0
 8006778:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2220      	movs	r2, #32
 800677e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006790:	2300      	movs	r3, #0
}
 8006792:	4618      	mov	r0, r3
 8006794:	3710      	adds	r7, #16
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
 800679a:	bf00      	nop
 800679c:	000186a0 	.word	0x000186a0
 80067a0:	001e847f 	.word	0x001e847f
 80067a4:	003d08ff 	.word	0x003d08ff
 80067a8:	431bde83 	.word	0x431bde83
 80067ac:	10624dd3 	.word	0x10624dd3

080067b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b086      	sub	sp, #24
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d101      	bne.n	80067c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	e272      	b.n	8006ca8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f003 0301 	and.w	r3, r3, #1
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	f000 8087 	beq.w	80068de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80067d0:	4b92      	ldr	r3, [pc, #584]	; (8006a1c <HAL_RCC_OscConfig+0x26c>)
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	f003 030c 	and.w	r3, r3, #12
 80067d8:	2b04      	cmp	r3, #4
 80067da:	d00c      	beq.n	80067f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80067dc:	4b8f      	ldr	r3, [pc, #572]	; (8006a1c <HAL_RCC_OscConfig+0x26c>)
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	f003 030c 	and.w	r3, r3, #12
 80067e4:	2b08      	cmp	r3, #8
 80067e6:	d112      	bne.n	800680e <HAL_RCC_OscConfig+0x5e>
 80067e8:	4b8c      	ldr	r3, [pc, #560]	; (8006a1c <HAL_RCC_OscConfig+0x26c>)
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067f4:	d10b      	bne.n	800680e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067f6:	4b89      	ldr	r3, [pc, #548]	; (8006a1c <HAL_RCC_OscConfig+0x26c>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d06c      	beq.n	80068dc <HAL_RCC_OscConfig+0x12c>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d168      	bne.n	80068dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	e24c      	b.n	8006ca8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006816:	d106      	bne.n	8006826 <HAL_RCC_OscConfig+0x76>
 8006818:	4b80      	ldr	r3, [pc, #512]	; (8006a1c <HAL_RCC_OscConfig+0x26c>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a7f      	ldr	r2, [pc, #508]	; (8006a1c <HAL_RCC_OscConfig+0x26c>)
 800681e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006822:	6013      	str	r3, [r2, #0]
 8006824:	e02e      	b.n	8006884 <HAL_RCC_OscConfig+0xd4>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d10c      	bne.n	8006848 <HAL_RCC_OscConfig+0x98>
 800682e:	4b7b      	ldr	r3, [pc, #492]	; (8006a1c <HAL_RCC_OscConfig+0x26c>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a7a      	ldr	r2, [pc, #488]	; (8006a1c <HAL_RCC_OscConfig+0x26c>)
 8006834:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006838:	6013      	str	r3, [r2, #0]
 800683a:	4b78      	ldr	r3, [pc, #480]	; (8006a1c <HAL_RCC_OscConfig+0x26c>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a77      	ldr	r2, [pc, #476]	; (8006a1c <HAL_RCC_OscConfig+0x26c>)
 8006840:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006844:	6013      	str	r3, [r2, #0]
 8006846:	e01d      	b.n	8006884 <HAL_RCC_OscConfig+0xd4>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006850:	d10c      	bne.n	800686c <HAL_RCC_OscConfig+0xbc>
 8006852:	4b72      	ldr	r3, [pc, #456]	; (8006a1c <HAL_RCC_OscConfig+0x26c>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a71      	ldr	r2, [pc, #452]	; (8006a1c <HAL_RCC_OscConfig+0x26c>)
 8006858:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800685c:	6013      	str	r3, [r2, #0]
 800685e:	4b6f      	ldr	r3, [pc, #444]	; (8006a1c <HAL_RCC_OscConfig+0x26c>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a6e      	ldr	r2, [pc, #440]	; (8006a1c <HAL_RCC_OscConfig+0x26c>)
 8006864:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006868:	6013      	str	r3, [r2, #0]
 800686a:	e00b      	b.n	8006884 <HAL_RCC_OscConfig+0xd4>
 800686c:	4b6b      	ldr	r3, [pc, #428]	; (8006a1c <HAL_RCC_OscConfig+0x26c>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a6a      	ldr	r2, [pc, #424]	; (8006a1c <HAL_RCC_OscConfig+0x26c>)
 8006872:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006876:	6013      	str	r3, [r2, #0]
 8006878:	4b68      	ldr	r3, [pc, #416]	; (8006a1c <HAL_RCC_OscConfig+0x26c>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a67      	ldr	r2, [pc, #412]	; (8006a1c <HAL_RCC_OscConfig+0x26c>)
 800687e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006882:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d013      	beq.n	80068b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800688c:	f7fe fbc6 	bl	800501c <HAL_GetTick>
 8006890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006892:	e008      	b.n	80068a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006894:	f7fe fbc2 	bl	800501c <HAL_GetTick>
 8006898:	4602      	mov	r2, r0
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	1ad3      	subs	r3, r2, r3
 800689e:	2b64      	cmp	r3, #100	; 0x64
 80068a0:	d901      	bls.n	80068a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80068a2:	2303      	movs	r3, #3
 80068a4:	e200      	b.n	8006ca8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068a6:	4b5d      	ldr	r3, [pc, #372]	; (8006a1c <HAL_RCC_OscConfig+0x26c>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d0f0      	beq.n	8006894 <HAL_RCC_OscConfig+0xe4>
 80068b2:	e014      	b.n	80068de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068b4:	f7fe fbb2 	bl	800501c <HAL_GetTick>
 80068b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068ba:	e008      	b.n	80068ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068bc:	f7fe fbae 	bl	800501c <HAL_GetTick>
 80068c0:	4602      	mov	r2, r0
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	1ad3      	subs	r3, r2, r3
 80068c6:	2b64      	cmp	r3, #100	; 0x64
 80068c8:	d901      	bls.n	80068ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80068ca:	2303      	movs	r3, #3
 80068cc:	e1ec      	b.n	8006ca8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068ce:	4b53      	ldr	r3, [pc, #332]	; (8006a1c <HAL_RCC_OscConfig+0x26c>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d1f0      	bne.n	80068bc <HAL_RCC_OscConfig+0x10c>
 80068da:	e000      	b.n	80068de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f003 0302 	and.w	r3, r3, #2
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d063      	beq.n	80069b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80068ea:	4b4c      	ldr	r3, [pc, #304]	; (8006a1c <HAL_RCC_OscConfig+0x26c>)
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	f003 030c 	and.w	r3, r3, #12
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d00b      	beq.n	800690e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80068f6:	4b49      	ldr	r3, [pc, #292]	; (8006a1c <HAL_RCC_OscConfig+0x26c>)
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	f003 030c 	and.w	r3, r3, #12
 80068fe:	2b08      	cmp	r3, #8
 8006900:	d11c      	bne.n	800693c <HAL_RCC_OscConfig+0x18c>
 8006902:	4b46      	ldr	r3, [pc, #280]	; (8006a1c <HAL_RCC_OscConfig+0x26c>)
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800690a:	2b00      	cmp	r3, #0
 800690c:	d116      	bne.n	800693c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800690e:	4b43      	ldr	r3, [pc, #268]	; (8006a1c <HAL_RCC_OscConfig+0x26c>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f003 0302 	and.w	r3, r3, #2
 8006916:	2b00      	cmp	r3, #0
 8006918:	d005      	beq.n	8006926 <HAL_RCC_OscConfig+0x176>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	691b      	ldr	r3, [r3, #16]
 800691e:	2b01      	cmp	r3, #1
 8006920:	d001      	beq.n	8006926 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006922:	2301      	movs	r3, #1
 8006924:	e1c0      	b.n	8006ca8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006926:	4b3d      	ldr	r3, [pc, #244]	; (8006a1c <HAL_RCC_OscConfig+0x26c>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	695b      	ldr	r3, [r3, #20]
 8006932:	00db      	lsls	r3, r3, #3
 8006934:	4939      	ldr	r1, [pc, #228]	; (8006a1c <HAL_RCC_OscConfig+0x26c>)
 8006936:	4313      	orrs	r3, r2
 8006938:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800693a:	e03a      	b.n	80069b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	691b      	ldr	r3, [r3, #16]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d020      	beq.n	8006986 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006944:	4b36      	ldr	r3, [pc, #216]	; (8006a20 <HAL_RCC_OscConfig+0x270>)
 8006946:	2201      	movs	r2, #1
 8006948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800694a:	f7fe fb67 	bl	800501c <HAL_GetTick>
 800694e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006950:	e008      	b.n	8006964 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006952:	f7fe fb63 	bl	800501c <HAL_GetTick>
 8006956:	4602      	mov	r2, r0
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	1ad3      	subs	r3, r2, r3
 800695c:	2b02      	cmp	r3, #2
 800695e:	d901      	bls.n	8006964 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006960:	2303      	movs	r3, #3
 8006962:	e1a1      	b.n	8006ca8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006964:	4b2d      	ldr	r3, [pc, #180]	; (8006a1c <HAL_RCC_OscConfig+0x26c>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f003 0302 	and.w	r3, r3, #2
 800696c:	2b00      	cmp	r3, #0
 800696e:	d0f0      	beq.n	8006952 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006970:	4b2a      	ldr	r3, [pc, #168]	; (8006a1c <HAL_RCC_OscConfig+0x26c>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	695b      	ldr	r3, [r3, #20]
 800697c:	00db      	lsls	r3, r3, #3
 800697e:	4927      	ldr	r1, [pc, #156]	; (8006a1c <HAL_RCC_OscConfig+0x26c>)
 8006980:	4313      	orrs	r3, r2
 8006982:	600b      	str	r3, [r1, #0]
 8006984:	e015      	b.n	80069b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006986:	4b26      	ldr	r3, [pc, #152]	; (8006a20 <HAL_RCC_OscConfig+0x270>)
 8006988:	2200      	movs	r2, #0
 800698a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800698c:	f7fe fb46 	bl	800501c <HAL_GetTick>
 8006990:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006992:	e008      	b.n	80069a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006994:	f7fe fb42 	bl	800501c <HAL_GetTick>
 8006998:	4602      	mov	r2, r0
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	1ad3      	subs	r3, r2, r3
 800699e:	2b02      	cmp	r3, #2
 80069a0:	d901      	bls.n	80069a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80069a2:	2303      	movs	r3, #3
 80069a4:	e180      	b.n	8006ca8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069a6:	4b1d      	ldr	r3, [pc, #116]	; (8006a1c <HAL_RCC_OscConfig+0x26c>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f003 0302 	and.w	r3, r3, #2
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d1f0      	bne.n	8006994 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f003 0308 	and.w	r3, r3, #8
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d03a      	beq.n	8006a34 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	699b      	ldr	r3, [r3, #24]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d019      	beq.n	80069fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80069c6:	4b17      	ldr	r3, [pc, #92]	; (8006a24 <HAL_RCC_OscConfig+0x274>)
 80069c8:	2201      	movs	r2, #1
 80069ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069cc:	f7fe fb26 	bl	800501c <HAL_GetTick>
 80069d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069d2:	e008      	b.n	80069e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069d4:	f7fe fb22 	bl	800501c <HAL_GetTick>
 80069d8:	4602      	mov	r2, r0
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	1ad3      	subs	r3, r2, r3
 80069de:	2b02      	cmp	r3, #2
 80069e0:	d901      	bls.n	80069e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80069e2:	2303      	movs	r3, #3
 80069e4:	e160      	b.n	8006ca8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069e6:	4b0d      	ldr	r3, [pc, #52]	; (8006a1c <HAL_RCC_OscConfig+0x26c>)
 80069e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ea:	f003 0302 	and.w	r3, r3, #2
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d0f0      	beq.n	80069d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80069f2:	2001      	movs	r0, #1
 80069f4:	f000 fad8 	bl	8006fa8 <RCC_Delay>
 80069f8:	e01c      	b.n	8006a34 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80069fa:	4b0a      	ldr	r3, [pc, #40]	; (8006a24 <HAL_RCC_OscConfig+0x274>)
 80069fc:	2200      	movs	r2, #0
 80069fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a00:	f7fe fb0c 	bl	800501c <HAL_GetTick>
 8006a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a06:	e00f      	b.n	8006a28 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a08:	f7fe fb08 	bl	800501c <HAL_GetTick>
 8006a0c:	4602      	mov	r2, r0
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	1ad3      	subs	r3, r2, r3
 8006a12:	2b02      	cmp	r3, #2
 8006a14:	d908      	bls.n	8006a28 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006a16:	2303      	movs	r3, #3
 8006a18:	e146      	b.n	8006ca8 <HAL_RCC_OscConfig+0x4f8>
 8006a1a:	bf00      	nop
 8006a1c:	40021000 	.word	0x40021000
 8006a20:	42420000 	.word	0x42420000
 8006a24:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a28:	4b92      	ldr	r3, [pc, #584]	; (8006c74 <HAL_RCC_OscConfig+0x4c4>)
 8006a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a2c:	f003 0302 	and.w	r3, r3, #2
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d1e9      	bne.n	8006a08 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f003 0304 	and.w	r3, r3, #4
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	f000 80a6 	beq.w	8006b8e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a42:	2300      	movs	r3, #0
 8006a44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a46:	4b8b      	ldr	r3, [pc, #556]	; (8006c74 <HAL_RCC_OscConfig+0x4c4>)
 8006a48:	69db      	ldr	r3, [r3, #28]
 8006a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d10d      	bne.n	8006a6e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a52:	4b88      	ldr	r3, [pc, #544]	; (8006c74 <HAL_RCC_OscConfig+0x4c4>)
 8006a54:	69db      	ldr	r3, [r3, #28]
 8006a56:	4a87      	ldr	r2, [pc, #540]	; (8006c74 <HAL_RCC_OscConfig+0x4c4>)
 8006a58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a5c:	61d3      	str	r3, [r2, #28]
 8006a5e:	4b85      	ldr	r3, [pc, #532]	; (8006c74 <HAL_RCC_OscConfig+0x4c4>)
 8006a60:	69db      	ldr	r3, [r3, #28]
 8006a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a66:	60bb      	str	r3, [r7, #8]
 8006a68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a6e:	4b82      	ldr	r3, [pc, #520]	; (8006c78 <HAL_RCC_OscConfig+0x4c8>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d118      	bne.n	8006aac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a7a:	4b7f      	ldr	r3, [pc, #508]	; (8006c78 <HAL_RCC_OscConfig+0x4c8>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a7e      	ldr	r2, [pc, #504]	; (8006c78 <HAL_RCC_OscConfig+0x4c8>)
 8006a80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a86:	f7fe fac9 	bl	800501c <HAL_GetTick>
 8006a8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a8c:	e008      	b.n	8006aa0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a8e:	f7fe fac5 	bl	800501c <HAL_GetTick>
 8006a92:	4602      	mov	r2, r0
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	1ad3      	subs	r3, r2, r3
 8006a98:	2b64      	cmp	r3, #100	; 0x64
 8006a9a:	d901      	bls.n	8006aa0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006a9c:	2303      	movs	r3, #3
 8006a9e:	e103      	b.n	8006ca8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006aa0:	4b75      	ldr	r3, [pc, #468]	; (8006c78 <HAL_RCC_OscConfig+0x4c8>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d0f0      	beq.n	8006a8e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	68db      	ldr	r3, [r3, #12]
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d106      	bne.n	8006ac2 <HAL_RCC_OscConfig+0x312>
 8006ab4:	4b6f      	ldr	r3, [pc, #444]	; (8006c74 <HAL_RCC_OscConfig+0x4c4>)
 8006ab6:	6a1b      	ldr	r3, [r3, #32]
 8006ab8:	4a6e      	ldr	r2, [pc, #440]	; (8006c74 <HAL_RCC_OscConfig+0x4c4>)
 8006aba:	f043 0301 	orr.w	r3, r3, #1
 8006abe:	6213      	str	r3, [r2, #32]
 8006ac0:	e02d      	b.n	8006b1e <HAL_RCC_OscConfig+0x36e>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	68db      	ldr	r3, [r3, #12]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d10c      	bne.n	8006ae4 <HAL_RCC_OscConfig+0x334>
 8006aca:	4b6a      	ldr	r3, [pc, #424]	; (8006c74 <HAL_RCC_OscConfig+0x4c4>)
 8006acc:	6a1b      	ldr	r3, [r3, #32]
 8006ace:	4a69      	ldr	r2, [pc, #420]	; (8006c74 <HAL_RCC_OscConfig+0x4c4>)
 8006ad0:	f023 0301 	bic.w	r3, r3, #1
 8006ad4:	6213      	str	r3, [r2, #32]
 8006ad6:	4b67      	ldr	r3, [pc, #412]	; (8006c74 <HAL_RCC_OscConfig+0x4c4>)
 8006ad8:	6a1b      	ldr	r3, [r3, #32]
 8006ada:	4a66      	ldr	r2, [pc, #408]	; (8006c74 <HAL_RCC_OscConfig+0x4c4>)
 8006adc:	f023 0304 	bic.w	r3, r3, #4
 8006ae0:	6213      	str	r3, [r2, #32]
 8006ae2:	e01c      	b.n	8006b1e <HAL_RCC_OscConfig+0x36e>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	68db      	ldr	r3, [r3, #12]
 8006ae8:	2b05      	cmp	r3, #5
 8006aea:	d10c      	bne.n	8006b06 <HAL_RCC_OscConfig+0x356>
 8006aec:	4b61      	ldr	r3, [pc, #388]	; (8006c74 <HAL_RCC_OscConfig+0x4c4>)
 8006aee:	6a1b      	ldr	r3, [r3, #32]
 8006af0:	4a60      	ldr	r2, [pc, #384]	; (8006c74 <HAL_RCC_OscConfig+0x4c4>)
 8006af2:	f043 0304 	orr.w	r3, r3, #4
 8006af6:	6213      	str	r3, [r2, #32]
 8006af8:	4b5e      	ldr	r3, [pc, #376]	; (8006c74 <HAL_RCC_OscConfig+0x4c4>)
 8006afa:	6a1b      	ldr	r3, [r3, #32]
 8006afc:	4a5d      	ldr	r2, [pc, #372]	; (8006c74 <HAL_RCC_OscConfig+0x4c4>)
 8006afe:	f043 0301 	orr.w	r3, r3, #1
 8006b02:	6213      	str	r3, [r2, #32]
 8006b04:	e00b      	b.n	8006b1e <HAL_RCC_OscConfig+0x36e>
 8006b06:	4b5b      	ldr	r3, [pc, #364]	; (8006c74 <HAL_RCC_OscConfig+0x4c4>)
 8006b08:	6a1b      	ldr	r3, [r3, #32]
 8006b0a:	4a5a      	ldr	r2, [pc, #360]	; (8006c74 <HAL_RCC_OscConfig+0x4c4>)
 8006b0c:	f023 0301 	bic.w	r3, r3, #1
 8006b10:	6213      	str	r3, [r2, #32]
 8006b12:	4b58      	ldr	r3, [pc, #352]	; (8006c74 <HAL_RCC_OscConfig+0x4c4>)
 8006b14:	6a1b      	ldr	r3, [r3, #32]
 8006b16:	4a57      	ldr	r2, [pc, #348]	; (8006c74 <HAL_RCC_OscConfig+0x4c4>)
 8006b18:	f023 0304 	bic.w	r3, r3, #4
 8006b1c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	68db      	ldr	r3, [r3, #12]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d015      	beq.n	8006b52 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b26:	f7fe fa79 	bl	800501c <HAL_GetTick>
 8006b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b2c:	e00a      	b.n	8006b44 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b2e:	f7fe fa75 	bl	800501c <HAL_GetTick>
 8006b32:	4602      	mov	r2, r0
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	1ad3      	subs	r3, r2, r3
 8006b38:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d901      	bls.n	8006b44 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006b40:	2303      	movs	r3, #3
 8006b42:	e0b1      	b.n	8006ca8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b44:	4b4b      	ldr	r3, [pc, #300]	; (8006c74 <HAL_RCC_OscConfig+0x4c4>)
 8006b46:	6a1b      	ldr	r3, [r3, #32]
 8006b48:	f003 0302 	and.w	r3, r3, #2
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d0ee      	beq.n	8006b2e <HAL_RCC_OscConfig+0x37e>
 8006b50:	e014      	b.n	8006b7c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b52:	f7fe fa63 	bl	800501c <HAL_GetTick>
 8006b56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b58:	e00a      	b.n	8006b70 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b5a:	f7fe fa5f 	bl	800501c <HAL_GetTick>
 8006b5e:	4602      	mov	r2, r0
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	1ad3      	subs	r3, r2, r3
 8006b64:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d901      	bls.n	8006b70 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006b6c:	2303      	movs	r3, #3
 8006b6e:	e09b      	b.n	8006ca8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b70:	4b40      	ldr	r3, [pc, #256]	; (8006c74 <HAL_RCC_OscConfig+0x4c4>)
 8006b72:	6a1b      	ldr	r3, [r3, #32]
 8006b74:	f003 0302 	and.w	r3, r3, #2
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d1ee      	bne.n	8006b5a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006b7c:	7dfb      	ldrb	r3, [r7, #23]
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d105      	bne.n	8006b8e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b82:	4b3c      	ldr	r3, [pc, #240]	; (8006c74 <HAL_RCC_OscConfig+0x4c4>)
 8006b84:	69db      	ldr	r3, [r3, #28]
 8006b86:	4a3b      	ldr	r2, [pc, #236]	; (8006c74 <HAL_RCC_OscConfig+0x4c4>)
 8006b88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b8c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	69db      	ldr	r3, [r3, #28]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	f000 8087 	beq.w	8006ca6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006b98:	4b36      	ldr	r3, [pc, #216]	; (8006c74 <HAL_RCC_OscConfig+0x4c4>)
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	f003 030c 	and.w	r3, r3, #12
 8006ba0:	2b08      	cmp	r3, #8
 8006ba2:	d061      	beq.n	8006c68 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	69db      	ldr	r3, [r3, #28]
 8006ba8:	2b02      	cmp	r3, #2
 8006baa:	d146      	bne.n	8006c3a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bac:	4b33      	ldr	r3, [pc, #204]	; (8006c7c <HAL_RCC_OscConfig+0x4cc>)
 8006bae:	2200      	movs	r2, #0
 8006bb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bb2:	f7fe fa33 	bl	800501c <HAL_GetTick>
 8006bb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006bb8:	e008      	b.n	8006bcc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bba:	f7fe fa2f 	bl	800501c <HAL_GetTick>
 8006bbe:	4602      	mov	r2, r0
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	1ad3      	subs	r3, r2, r3
 8006bc4:	2b02      	cmp	r3, #2
 8006bc6:	d901      	bls.n	8006bcc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006bc8:	2303      	movs	r3, #3
 8006bca:	e06d      	b.n	8006ca8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006bcc:	4b29      	ldr	r3, [pc, #164]	; (8006c74 <HAL_RCC_OscConfig+0x4c4>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d1f0      	bne.n	8006bba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6a1b      	ldr	r3, [r3, #32]
 8006bdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006be0:	d108      	bne.n	8006bf4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006be2:	4b24      	ldr	r3, [pc, #144]	; (8006c74 <HAL_RCC_OscConfig+0x4c4>)
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	4921      	ldr	r1, [pc, #132]	; (8006c74 <HAL_RCC_OscConfig+0x4c4>)
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006bf4:	4b1f      	ldr	r3, [pc, #124]	; (8006c74 <HAL_RCC_OscConfig+0x4c4>)
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6a19      	ldr	r1, [r3, #32]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c04:	430b      	orrs	r3, r1
 8006c06:	491b      	ldr	r1, [pc, #108]	; (8006c74 <HAL_RCC_OscConfig+0x4c4>)
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c0c:	4b1b      	ldr	r3, [pc, #108]	; (8006c7c <HAL_RCC_OscConfig+0x4cc>)
 8006c0e:	2201      	movs	r2, #1
 8006c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c12:	f7fe fa03 	bl	800501c <HAL_GetTick>
 8006c16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006c18:	e008      	b.n	8006c2c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c1a:	f7fe f9ff 	bl	800501c <HAL_GetTick>
 8006c1e:	4602      	mov	r2, r0
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	1ad3      	subs	r3, r2, r3
 8006c24:	2b02      	cmp	r3, #2
 8006c26:	d901      	bls.n	8006c2c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006c28:	2303      	movs	r3, #3
 8006c2a:	e03d      	b.n	8006ca8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006c2c:	4b11      	ldr	r3, [pc, #68]	; (8006c74 <HAL_RCC_OscConfig+0x4c4>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d0f0      	beq.n	8006c1a <HAL_RCC_OscConfig+0x46a>
 8006c38:	e035      	b.n	8006ca6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c3a:	4b10      	ldr	r3, [pc, #64]	; (8006c7c <HAL_RCC_OscConfig+0x4cc>)
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c40:	f7fe f9ec 	bl	800501c <HAL_GetTick>
 8006c44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006c46:	e008      	b.n	8006c5a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c48:	f7fe f9e8 	bl	800501c <HAL_GetTick>
 8006c4c:	4602      	mov	r2, r0
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	1ad3      	subs	r3, r2, r3
 8006c52:	2b02      	cmp	r3, #2
 8006c54:	d901      	bls.n	8006c5a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006c56:	2303      	movs	r3, #3
 8006c58:	e026      	b.n	8006ca8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006c5a:	4b06      	ldr	r3, [pc, #24]	; (8006c74 <HAL_RCC_OscConfig+0x4c4>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d1f0      	bne.n	8006c48 <HAL_RCC_OscConfig+0x498>
 8006c66:	e01e      	b.n	8006ca6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	69db      	ldr	r3, [r3, #28]
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d107      	bne.n	8006c80 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006c70:	2301      	movs	r3, #1
 8006c72:	e019      	b.n	8006ca8 <HAL_RCC_OscConfig+0x4f8>
 8006c74:	40021000 	.word	0x40021000
 8006c78:	40007000 	.word	0x40007000
 8006c7c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006c80:	4b0b      	ldr	r3, [pc, #44]	; (8006cb0 <HAL_RCC_OscConfig+0x500>)
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6a1b      	ldr	r3, [r3, #32]
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d106      	bne.n	8006ca2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	d001      	beq.n	8006ca6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	e000      	b.n	8006ca8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006ca6:	2300      	movs	r3, #0
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3718      	adds	r7, #24
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}
 8006cb0:	40021000 	.word	0x40021000

08006cb4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b084      	sub	sp, #16
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d101      	bne.n	8006cc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	e0d0      	b.n	8006e6a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006cc8:	4b6a      	ldr	r3, [pc, #424]	; (8006e74 <HAL_RCC_ClockConfig+0x1c0>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f003 0307 	and.w	r3, r3, #7
 8006cd0:	683a      	ldr	r2, [r7, #0]
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d910      	bls.n	8006cf8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cd6:	4b67      	ldr	r3, [pc, #412]	; (8006e74 <HAL_RCC_ClockConfig+0x1c0>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f023 0207 	bic.w	r2, r3, #7
 8006cde:	4965      	ldr	r1, [pc, #404]	; (8006e74 <HAL_RCC_ClockConfig+0x1c0>)
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ce6:	4b63      	ldr	r3, [pc, #396]	; (8006e74 <HAL_RCC_ClockConfig+0x1c0>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f003 0307 	and.w	r3, r3, #7
 8006cee:	683a      	ldr	r2, [r7, #0]
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	d001      	beq.n	8006cf8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	e0b8      	b.n	8006e6a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f003 0302 	and.w	r3, r3, #2
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d020      	beq.n	8006d46 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f003 0304 	and.w	r3, r3, #4
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d005      	beq.n	8006d1c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006d10:	4b59      	ldr	r3, [pc, #356]	; (8006e78 <HAL_RCC_ClockConfig+0x1c4>)
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	4a58      	ldr	r2, [pc, #352]	; (8006e78 <HAL_RCC_ClockConfig+0x1c4>)
 8006d16:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006d1a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f003 0308 	and.w	r3, r3, #8
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d005      	beq.n	8006d34 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006d28:	4b53      	ldr	r3, [pc, #332]	; (8006e78 <HAL_RCC_ClockConfig+0x1c4>)
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	4a52      	ldr	r2, [pc, #328]	; (8006e78 <HAL_RCC_ClockConfig+0x1c4>)
 8006d2e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006d32:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d34:	4b50      	ldr	r3, [pc, #320]	; (8006e78 <HAL_RCC_ClockConfig+0x1c4>)
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	494d      	ldr	r1, [pc, #308]	; (8006e78 <HAL_RCC_ClockConfig+0x1c4>)
 8006d42:	4313      	orrs	r3, r2
 8006d44:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f003 0301 	and.w	r3, r3, #1
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d040      	beq.n	8006dd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	2b01      	cmp	r3, #1
 8006d58:	d107      	bne.n	8006d6a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d5a:	4b47      	ldr	r3, [pc, #284]	; (8006e78 <HAL_RCC_ClockConfig+0x1c4>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d115      	bne.n	8006d92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	e07f      	b.n	8006e6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	2b02      	cmp	r3, #2
 8006d70:	d107      	bne.n	8006d82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d72:	4b41      	ldr	r3, [pc, #260]	; (8006e78 <HAL_RCC_ClockConfig+0x1c4>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d109      	bne.n	8006d92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	e073      	b.n	8006e6a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d82:	4b3d      	ldr	r3, [pc, #244]	; (8006e78 <HAL_RCC_ClockConfig+0x1c4>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f003 0302 	and.w	r3, r3, #2
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d101      	bne.n	8006d92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	e06b      	b.n	8006e6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006d92:	4b39      	ldr	r3, [pc, #228]	; (8006e78 <HAL_RCC_ClockConfig+0x1c4>)
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	f023 0203 	bic.w	r2, r3, #3
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	4936      	ldr	r1, [pc, #216]	; (8006e78 <HAL_RCC_ClockConfig+0x1c4>)
 8006da0:	4313      	orrs	r3, r2
 8006da2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006da4:	f7fe f93a 	bl	800501c <HAL_GetTick>
 8006da8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006daa:	e00a      	b.n	8006dc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006dac:	f7fe f936 	bl	800501c <HAL_GetTick>
 8006db0:	4602      	mov	r2, r0
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	1ad3      	subs	r3, r2, r3
 8006db6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d901      	bls.n	8006dc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006dbe:	2303      	movs	r3, #3
 8006dc0:	e053      	b.n	8006e6a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dc2:	4b2d      	ldr	r3, [pc, #180]	; (8006e78 <HAL_RCC_ClockConfig+0x1c4>)
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	f003 020c 	and.w	r2, r3, #12
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d1eb      	bne.n	8006dac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006dd4:	4b27      	ldr	r3, [pc, #156]	; (8006e74 <HAL_RCC_ClockConfig+0x1c0>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f003 0307 	and.w	r3, r3, #7
 8006ddc:	683a      	ldr	r2, [r7, #0]
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d210      	bcs.n	8006e04 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006de2:	4b24      	ldr	r3, [pc, #144]	; (8006e74 <HAL_RCC_ClockConfig+0x1c0>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f023 0207 	bic.w	r2, r3, #7
 8006dea:	4922      	ldr	r1, [pc, #136]	; (8006e74 <HAL_RCC_ClockConfig+0x1c0>)
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	4313      	orrs	r3, r2
 8006df0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006df2:	4b20      	ldr	r3, [pc, #128]	; (8006e74 <HAL_RCC_ClockConfig+0x1c0>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f003 0307 	and.w	r3, r3, #7
 8006dfa:	683a      	ldr	r2, [r7, #0]
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d001      	beq.n	8006e04 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006e00:	2301      	movs	r3, #1
 8006e02:	e032      	b.n	8006e6a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f003 0304 	and.w	r3, r3, #4
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d008      	beq.n	8006e22 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e10:	4b19      	ldr	r3, [pc, #100]	; (8006e78 <HAL_RCC_ClockConfig+0x1c4>)
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	68db      	ldr	r3, [r3, #12]
 8006e1c:	4916      	ldr	r1, [pc, #88]	; (8006e78 <HAL_RCC_ClockConfig+0x1c4>)
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f003 0308 	and.w	r3, r3, #8
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d009      	beq.n	8006e42 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006e2e:	4b12      	ldr	r3, [pc, #72]	; (8006e78 <HAL_RCC_ClockConfig+0x1c4>)
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	691b      	ldr	r3, [r3, #16]
 8006e3a:	00db      	lsls	r3, r3, #3
 8006e3c:	490e      	ldr	r1, [pc, #56]	; (8006e78 <HAL_RCC_ClockConfig+0x1c4>)
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006e42:	f000 f821 	bl	8006e88 <HAL_RCC_GetSysClockFreq>
 8006e46:	4602      	mov	r2, r0
 8006e48:	4b0b      	ldr	r3, [pc, #44]	; (8006e78 <HAL_RCC_ClockConfig+0x1c4>)
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	091b      	lsrs	r3, r3, #4
 8006e4e:	f003 030f 	and.w	r3, r3, #15
 8006e52:	490a      	ldr	r1, [pc, #40]	; (8006e7c <HAL_RCC_ClockConfig+0x1c8>)
 8006e54:	5ccb      	ldrb	r3, [r1, r3]
 8006e56:	fa22 f303 	lsr.w	r3, r2, r3
 8006e5a:	4a09      	ldr	r2, [pc, #36]	; (8006e80 <HAL_RCC_ClockConfig+0x1cc>)
 8006e5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006e5e:	4b09      	ldr	r3, [pc, #36]	; (8006e84 <HAL_RCC_ClockConfig+0x1d0>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4618      	mov	r0, r3
 8006e64:	f7fe f898 	bl	8004f98 <HAL_InitTick>

  return HAL_OK;
 8006e68:	2300      	movs	r3, #0
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3710      	adds	r7, #16
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}
 8006e72:	bf00      	nop
 8006e74:	40022000 	.word	0x40022000
 8006e78:	40021000 	.word	0x40021000
 8006e7c:	08008db0 	.word	0x08008db0
 8006e80:	20000074 	.word	0x20000074
 8006e84:	20000080 	.word	0x20000080

08006e88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e88:	b490      	push	{r4, r7}
 8006e8a:	b08a      	sub	sp, #40	; 0x28
 8006e8c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006e8e:	4b29      	ldr	r3, [pc, #164]	; (8006f34 <HAL_RCC_GetSysClockFreq+0xac>)
 8006e90:	1d3c      	adds	r4, r7, #4
 8006e92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006e94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006e98:	f240 2301 	movw	r3, #513	; 0x201
 8006e9c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	61fb      	str	r3, [r7, #28]
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	61bb      	str	r3, [r7, #24]
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	627b      	str	r3, [r7, #36]	; 0x24
 8006eaa:	2300      	movs	r3, #0
 8006eac:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006eb2:	4b21      	ldr	r3, [pc, #132]	; (8006f38 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006eb8:	69fb      	ldr	r3, [r7, #28]
 8006eba:	f003 030c 	and.w	r3, r3, #12
 8006ebe:	2b04      	cmp	r3, #4
 8006ec0:	d002      	beq.n	8006ec8 <HAL_RCC_GetSysClockFreq+0x40>
 8006ec2:	2b08      	cmp	r3, #8
 8006ec4:	d003      	beq.n	8006ece <HAL_RCC_GetSysClockFreq+0x46>
 8006ec6:	e02b      	b.n	8006f20 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006ec8:	4b1c      	ldr	r3, [pc, #112]	; (8006f3c <HAL_RCC_GetSysClockFreq+0xb4>)
 8006eca:	623b      	str	r3, [r7, #32]
      break;
 8006ecc:	e02b      	b.n	8006f26 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006ece:	69fb      	ldr	r3, [r7, #28]
 8006ed0:	0c9b      	lsrs	r3, r3, #18
 8006ed2:	f003 030f 	and.w	r3, r3, #15
 8006ed6:	3328      	adds	r3, #40	; 0x28
 8006ed8:	443b      	add	r3, r7
 8006eda:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006ede:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006ee0:	69fb      	ldr	r3, [r7, #28]
 8006ee2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d012      	beq.n	8006f10 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006eea:	4b13      	ldr	r3, [pc, #76]	; (8006f38 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	0c5b      	lsrs	r3, r3, #17
 8006ef0:	f003 0301 	and.w	r3, r3, #1
 8006ef4:	3328      	adds	r3, #40	; 0x28
 8006ef6:	443b      	add	r3, r7
 8006ef8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006efc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	4a0e      	ldr	r2, [pc, #56]	; (8006f3c <HAL_RCC_GetSysClockFreq+0xb4>)
 8006f02:	fb03 f202 	mul.w	r2, r3, r2
 8006f06:	69bb      	ldr	r3, [r7, #24]
 8006f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f0c:	627b      	str	r3, [r7, #36]	; 0x24
 8006f0e:	e004      	b.n	8006f1a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	4a0b      	ldr	r2, [pc, #44]	; (8006f40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006f14:	fb02 f303 	mul.w	r3, r2, r3
 8006f18:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1c:	623b      	str	r3, [r7, #32]
      break;
 8006f1e:	e002      	b.n	8006f26 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006f20:	4b06      	ldr	r3, [pc, #24]	; (8006f3c <HAL_RCC_GetSysClockFreq+0xb4>)
 8006f22:	623b      	str	r3, [r7, #32]
      break;
 8006f24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006f26:	6a3b      	ldr	r3, [r7, #32]
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3728      	adds	r7, #40	; 0x28
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bc90      	pop	{r4, r7}
 8006f30:	4770      	bx	lr
 8006f32:	bf00      	nop
 8006f34:	08008da0 	.word	0x08008da0
 8006f38:	40021000 	.word	0x40021000
 8006f3c:	007a1200 	.word	0x007a1200
 8006f40:	003d0900 	.word	0x003d0900

08006f44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f44:	b480      	push	{r7}
 8006f46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f48:	4b02      	ldr	r3, [pc, #8]	; (8006f54 <HAL_RCC_GetHCLKFreq+0x10>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bc80      	pop	{r7}
 8006f52:	4770      	bx	lr
 8006f54:	20000074 	.word	0x20000074

08006f58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006f5c:	f7ff fff2 	bl	8006f44 <HAL_RCC_GetHCLKFreq>
 8006f60:	4602      	mov	r2, r0
 8006f62:	4b05      	ldr	r3, [pc, #20]	; (8006f78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	0a1b      	lsrs	r3, r3, #8
 8006f68:	f003 0307 	and.w	r3, r3, #7
 8006f6c:	4903      	ldr	r1, [pc, #12]	; (8006f7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f6e:	5ccb      	ldrb	r3, [r1, r3]
 8006f70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	bd80      	pop	{r7, pc}
 8006f78:	40021000 	.word	0x40021000
 8006f7c:	08008dc0 	.word	0x08008dc0

08006f80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006f84:	f7ff ffde 	bl	8006f44 <HAL_RCC_GetHCLKFreq>
 8006f88:	4602      	mov	r2, r0
 8006f8a:	4b05      	ldr	r3, [pc, #20]	; (8006fa0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	0adb      	lsrs	r3, r3, #11
 8006f90:	f003 0307 	and.w	r3, r3, #7
 8006f94:	4903      	ldr	r1, [pc, #12]	; (8006fa4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f96:	5ccb      	ldrb	r3, [r1, r3]
 8006f98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	bd80      	pop	{r7, pc}
 8006fa0:	40021000 	.word	0x40021000
 8006fa4:	08008dc0 	.word	0x08008dc0

08006fa8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b085      	sub	sp, #20
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006fb0:	4b0a      	ldr	r3, [pc, #40]	; (8006fdc <RCC_Delay+0x34>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a0a      	ldr	r2, [pc, #40]	; (8006fe0 <RCC_Delay+0x38>)
 8006fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8006fba:	0a5b      	lsrs	r3, r3, #9
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	fb02 f303 	mul.w	r3, r2, r3
 8006fc2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006fc4:	bf00      	nop
  }
  while (Delay --);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	1e5a      	subs	r2, r3, #1
 8006fca:	60fa      	str	r2, [r7, #12]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d1f9      	bne.n	8006fc4 <RCC_Delay+0x1c>
}
 8006fd0:	bf00      	nop
 8006fd2:	bf00      	nop
 8006fd4:	3714      	adds	r7, #20
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bc80      	pop	{r7}
 8006fda:	4770      	bx	lr
 8006fdc:	20000074 	.word	0x20000074
 8006fe0:	10624dd3 	.word	0x10624dd3

08006fe4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b086      	sub	sp, #24
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006fec:	2300      	movs	r3, #0
 8006fee:	613b      	str	r3, [r7, #16]
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f003 0301 	and.w	r3, r3, #1
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d07d      	beq.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8007000:	2300      	movs	r3, #0
 8007002:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007004:	4b4f      	ldr	r3, [pc, #316]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007006:	69db      	ldr	r3, [r3, #28]
 8007008:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800700c:	2b00      	cmp	r3, #0
 800700e:	d10d      	bne.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007010:	4b4c      	ldr	r3, [pc, #304]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007012:	69db      	ldr	r3, [r3, #28]
 8007014:	4a4b      	ldr	r2, [pc, #300]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007016:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800701a:	61d3      	str	r3, [r2, #28]
 800701c:	4b49      	ldr	r3, [pc, #292]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800701e:	69db      	ldr	r3, [r3, #28]
 8007020:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007024:	60bb      	str	r3, [r7, #8]
 8007026:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007028:	2301      	movs	r3, #1
 800702a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800702c:	4b46      	ldr	r3, [pc, #280]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007034:	2b00      	cmp	r3, #0
 8007036:	d118      	bne.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007038:	4b43      	ldr	r3, [pc, #268]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a42      	ldr	r2, [pc, #264]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800703e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007042:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007044:	f7fd ffea 	bl	800501c <HAL_GetTick>
 8007048:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800704a:	e008      	b.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800704c:	f7fd ffe6 	bl	800501c <HAL_GetTick>
 8007050:	4602      	mov	r2, r0
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	1ad3      	subs	r3, r2, r3
 8007056:	2b64      	cmp	r3, #100	; 0x64
 8007058:	d901      	bls.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800705a:	2303      	movs	r3, #3
 800705c:	e06d      	b.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800705e:	4b3a      	ldr	r3, [pc, #232]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007066:	2b00      	cmp	r3, #0
 8007068:	d0f0      	beq.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800706a:	4b36      	ldr	r3, [pc, #216]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800706c:	6a1b      	ldr	r3, [r3, #32]
 800706e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007072:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d02e      	beq.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007082:	68fa      	ldr	r2, [r7, #12]
 8007084:	429a      	cmp	r2, r3
 8007086:	d027      	beq.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007088:	4b2e      	ldr	r3, [pc, #184]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800708a:	6a1b      	ldr	r3, [r3, #32]
 800708c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007090:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007092:	4b2e      	ldr	r3, [pc, #184]	; (800714c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007094:	2201      	movs	r2, #1
 8007096:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007098:	4b2c      	ldr	r3, [pc, #176]	; (800714c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800709a:	2200      	movs	r2, #0
 800709c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800709e:	4a29      	ldr	r2, [pc, #164]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f003 0301 	and.w	r3, r3, #1
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d014      	beq.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070ae:	f7fd ffb5 	bl	800501c <HAL_GetTick>
 80070b2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070b4:	e00a      	b.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070b6:	f7fd ffb1 	bl	800501c <HAL_GetTick>
 80070ba:	4602      	mov	r2, r0
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	1ad3      	subs	r3, r2, r3
 80070c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d901      	bls.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80070c8:	2303      	movs	r3, #3
 80070ca:	e036      	b.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070cc:	4b1d      	ldr	r3, [pc, #116]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070ce:	6a1b      	ldr	r3, [r3, #32]
 80070d0:	f003 0302 	and.w	r3, r3, #2
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d0ee      	beq.n	80070b6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80070d8:	4b1a      	ldr	r3, [pc, #104]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070da:	6a1b      	ldr	r3, [r3, #32]
 80070dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	4917      	ldr	r1, [pc, #92]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070e6:	4313      	orrs	r3, r2
 80070e8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80070ea:	7dfb      	ldrb	r3, [r7, #23]
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d105      	bne.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80070f0:	4b14      	ldr	r3, [pc, #80]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070f2:	69db      	ldr	r3, [r3, #28]
 80070f4:	4a13      	ldr	r2, [pc, #76]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80070fa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f003 0302 	and.w	r3, r3, #2
 8007104:	2b00      	cmp	r3, #0
 8007106:	d008      	beq.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007108:	4b0e      	ldr	r3, [pc, #56]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	689b      	ldr	r3, [r3, #8]
 8007114:	490b      	ldr	r1, [pc, #44]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007116:	4313      	orrs	r3, r2
 8007118:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f003 0310 	and.w	r3, r3, #16
 8007122:	2b00      	cmp	r3, #0
 8007124:	d008      	beq.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007126:	4b07      	ldr	r3, [pc, #28]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	68db      	ldr	r3, [r3, #12]
 8007132:	4904      	ldr	r1, [pc, #16]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007134:	4313      	orrs	r3, r2
 8007136:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007138:	2300      	movs	r3, #0
}
 800713a:	4618      	mov	r0, r3
 800713c:	3718      	adds	r7, #24
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}
 8007142:	bf00      	nop
 8007144:	40021000 	.word	0x40021000
 8007148:	40007000 	.word	0x40007000
 800714c:	42420440 	.word	0x42420440

08007150 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b082      	sub	sp, #8
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d101      	bne.n	8007162 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800715e:	2301      	movs	r3, #1
 8007160:	e041      	b.n	80071e6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007168:	b2db      	uxtb	r3, r3
 800716a:	2b00      	cmp	r3, #0
 800716c:	d106      	bne.n	800717c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2200      	movs	r2, #0
 8007172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f7fd f9c0 	bl	80044fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2202      	movs	r2, #2
 8007180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681a      	ldr	r2, [r3, #0]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	3304      	adds	r3, #4
 800718c:	4619      	mov	r1, r3
 800718e:	4610      	mov	r0, r2
 8007190:	f000 fabe 	bl	8007710 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2201      	movs	r2, #1
 8007198:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2201      	movs	r2, #1
 80071a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2201      	movs	r2, #1
 80071a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2201      	movs	r2, #1
 80071b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2201      	movs	r2, #1
 80071b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2201      	movs	r2, #1
 80071c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2201      	movs	r2, #1
 80071d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2201      	movs	r2, #1
 80071d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2201      	movs	r2, #1
 80071e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80071e4:	2300      	movs	r3, #0
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3708      	adds	r7, #8
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}
	...

080071f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b084      	sub	sp, #16
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d109      	bne.n	8007214 <HAL_TIM_PWM_Start+0x24>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007206:	b2db      	uxtb	r3, r3
 8007208:	2b01      	cmp	r3, #1
 800720a:	bf14      	ite	ne
 800720c:	2301      	movne	r3, #1
 800720e:	2300      	moveq	r3, #0
 8007210:	b2db      	uxtb	r3, r3
 8007212:	e022      	b.n	800725a <HAL_TIM_PWM_Start+0x6a>
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	2b04      	cmp	r3, #4
 8007218:	d109      	bne.n	800722e <HAL_TIM_PWM_Start+0x3e>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007220:	b2db      	uxtb	r3, r3
 8007222:	2b01      	cmp	r3, #1
 8007224:	bf14      	ite	ne
 8007226:	2301      	movne	r3, #1
 8007228:	2300      	moveq	r3, #0
 800722a:	b2db      	uxtb	r3, r3
 800722c:	e015      	b.n	800725a <HAL_TIM_PWM_Start+0x6a>
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	2b08      	cmp	r3, #8
 8007232:	d109      	bne.n	8007248 <HAL_TIM_PWM_Start+0x58>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800723a:	b2db      	uxtb	r3, r3
 800723c:	2b01      	cmp	r3, #1
 800723e:	bf14      	ite	ne
 8007240:	2301      	movne	r3, #1
 8007242:	2300      	moveq	r3, #0
 8007244:	b2db      	uxtb	r3, r3
 8007246:	e008      	b.n	800725a <HAL_TIM_PWM_Start+0x6a>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800724e:	b2db      	uxtb	r3, r3
 8007250:	2b01      	cmp	r3, #1
 8007252:	bf14      	ite	ne
 8007254:	2301      	movne	r3, #1
 8007256:	2300      	moveq	r3, #0
 8007258:	b2db      	uxtb	r3, r3
 800725a:	2b00      	cmp	r3, #0
 800725c:	d001      	beq.n	8007262 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	e05e      	b.n	8007320 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d104      	bne.n	8007272 <HAL_TIM_PWM_Start+0x82>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2202      	movs	r2, #2
 800726c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007270:	e013      	b.n	800729a <HAL_TIM_PWM_Start+0xaa>
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	2b04      	cmp	r3, #4
 8007276:	d104      	bne.n	8007282 <HAL_TIM_PWM_Start+0x92>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2202      	movs	r2, #2
 800727c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007280:	e00b      	b.n	800729a <HAL_TIM_PWM_Start+0xaa>
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	2b08      	cmp	r3, #8
 8007286:	d104      	bne.n	8007292 <HAL_TIM_PWM_Start+0xa2>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2202      	movs	r2, #2
 800728c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007290:	e003      	b.n	800729a <HAL_TIM_PWM_Start+0xaa>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2202      	movs	r2, #2
 8007296:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	2201      	movs	r2, #1
 80072a0:	6839      	ldr	r1, [r7, #0]
 80072a2:	4618      	mov	r0, r3
 80072a4:	f000 fc1e 	bl	8007ae4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a1e      	ldr	r2, [pc, #120]	; (8007328 <HAL_TIM_PWM_Start+0x138>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d107      	bne.n	80072c2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80072c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a18      	ldr	r2, [pc, #96]	; (8007328 <HAL_TIM_PWM_Start+0x138>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d00e      	beq.n	80072ea <HAL_TIM_PWM_Start+0xfa>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072d4:	d009      	beq.n	80072ea <HAL_TIM_PWM_Start+0xfa>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a14      	ldr	r2, [pc, #80]	; (800732c <HAL_TIM_PWM_Start+0x13c>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d004      	beq.n	80072ea <HAL_TIM_PWM_Start+0xfa>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a12      	ldr	r2, [pc, #72]	; (8007330 <HAL_TIM_PWM_Start+0x140>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d111      	bne.n	800730e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	689b      	ldr	r3, [r3, #8]
 80072f0:	f003 0307 	and.w	r3, r3, #7
 80072f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2b06      	cmp	r3, #6
 80072fa:	d010      	beq.n	800731e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	681a      	ldr	r2, [r3, #0]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f042 0201 	orr.w	r2, r2, #1
 800730a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800730c:	e007      	b.n	800731e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f042 0201 	orr.w	r2, r2, #1
 800731c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800731e:	2300      	movs	r3, #0
}
 8007320:	4618      	mov	r0, r3
 8007322:	3710      	adds	r7, #16
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}
 8007328:	40012c00 	.word	0x40012c00
 800732c:	40000400 	.word	0x40000400
 8007330:	40000800 	.word	0x40000800

08007334 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b086      	sub	sp, #24
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d101      	bne.n	8007348 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007344:	2301      	movs	r3, #1
 8007346:	e093      	b.n	8007470 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800734e:	b2db      	uxtb	r3, r3
 8007350:	2b00      	cmp	r3, #0
 8007352:	d106      	bne.n	8007362 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2200      	movs	r2, #0
 8007358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f7fd f861 	bl	8004424 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2202      	movs	r2, #2
 8007366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	687a      	ldr	r2, [r7, #4]
 8007372:	6812      	ldr	r2, [r2, #0]
 8007374:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007378:	f023 0307 	bic.w	r3, r3, #7
 800737c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	3304      	adds	r3, #4
 8007386:	4619      	mov	r1, r3
 8007388:	4610      	mov	r0, r2
 800738a:	f000 f9c1 	bl	8007710 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	689b      	ldr	r3, [r3, #8]
 8007394:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	699b      	ldr	r3, [r3, #24]
 800739c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	6a1b      	ldr	r3, [r3, #32]
 80073a4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	697a      	ldr	r2, [r7, #20]
 80073ac:	4313      	orrs	r3, r2
 80073ae:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073b6:	f023 0303 	bic.w	r3, r3, #3
 80073ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	689a      	ldr	r2, [r3, #8]
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	699b      	ldr	r3, [r3, #24]
 80073c4:	021b      	lsls	r3, r3, #8
 80073c6:	4313      	orrs	r3, r2
 80073c8:	693a      	ldr	r2, [r7, #16]
 80073ca:	4313      	orrs	r3, r2
 80073cc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80073d4:	f023 030c 	bic.w	r3, r3, #12
 80073d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80073e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80073e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	68da      	ldr	r2, [r3, #12]
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	69db      	ldr	r3, [r3, #28]
 80073ee:	021b      	lsls	r3, r3, #8
 80073f0:	4313      	orrs	r3, r2
 80073f2:	693a      	ldr	r2, [r7, #16]
 80073f4:	4313      	orrs	r3, r2
 80073f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	691b      	ldr	r3, [r3, #16]
 80073fc:	011a      	lsls	r2, r3, #4
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	6a1b      	ldr	r3, [r3, #32]
 8007402:	031b      	lsls	r3, r3, #12
 8007404:	4313      	orrs	r3, r2
 8007406:	693a      	ldr	r2, [r7, #16]
 8007408:	4313      	orrs	r3, r2
 800740a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007412:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	685a      	ldr	r2, [r3, #4]
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	695b      	ldr	r3, [r3, #20]
 800741c:	011b      	lsls	r3, r3, #4
 800741e:	4313      	orrs	r3, r2
 8007420:	68fa      	ldr	r2, [r7, #12]
 8007422:	4313      	orrs	r3, r2
 8007424:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	697a      	ldr	r2, [r7, #20]
 800742c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	693a      	ldr	r2, [r7, #16]
 8007434:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	68fa      	ldr	r2, [r7, #12]
 800743c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2201      	movs	r2, #1
 8007442:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2201      	movs	r2, #1
 800744a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2201      	movs	r2, #1
 8007452:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2201      	movs	r2, #1
 800745a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2201      	movs	r2, #1
 8007462:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2201      	movs	r2, #1
 800746a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800746e:	2300      	movs	r3, #0
}
 8007470:	4618      	mov	r0, r3
 8007472:	3718      	adds	r7, #24
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}

08007478 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b084      	sub	sp, #16
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007488:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007490:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007498:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80074a0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d110      	bne.n	80074ca <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80074a8:	7bfb      	ldrb	r3, [r7, #15]
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	d102      	bne.n	80074b4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80074ae:	7b7b      	ldrb	r3, [r7, #13]
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	d001      	beq.n	80074b8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80074b4:	2301      	movs	r3, #1
 80074b6:	e069      	b.n	800758c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2202      	movs	r2, #2
 80074bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2202      	movs	r2, #2
 80074c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80074c8:	e031      	b.n	800752e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	2b04      	cmp	r3, #4
 80074ce:	d110      	bne.n	80074f2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80074d0:	7bbb      	ldrb	r3, [r7, #14]
 80074d2:	2b01      	cmp	r3, #1
 80074d4:	d102      	bne.n	80074dc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80074d6:	7b3b      	ldrb	r3, [r7, #12]
 80074d8:	2b01      	cmp	r3, #1
 80074da:	d001      	beq.n	80074e0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80074dc:	2301      	movs	r3, #1
 80074de:	e055      	b.n	800758c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2202      	movs	r2, #2
 80074e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2202      	movs	r2, #2
 80074ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80074f0:	e01d      	b.n	800752e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80074f2:	7bfb      	ldrb	r3, [r7, #15]
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	d108      	bne.n	800750a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80074f8:	7bbb      	ldrb	r3, [r7, #14]
 80074fa:	2b01      	cmp	r3, #1
 80074fc:	d105      	bne.n	800750a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80074fe:	7b7b      	ldrb	r3, [r7, #13]
 8007500:	2b01      	cmp	r3, #1
 8007502:	d102      	bne.n	800750a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007504:	7b3b      	ldrb	r3, [r7, #12]
 8007506:	2b01      	cmp	r3, #1
 8007508:	d001      	beq.n	800750e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800750a:	2301      	movs	r3, #1
 800750c:	e03e      	b.n	800758c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2202      	movs	r2, #2
 8007512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2202      	movs	r2, #2
 800751a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2202      	movs	r2, #2
 8007522:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2202      	movs	r2, #2
 800752a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d003      	beq.n	800753c <HAL_TIM_Encoder_Start+0xc4>
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	2b04      	cmp	r3, #4
 8007538:	d008      	beq.n	800754c <HAL_TIM_Encoder_Start+0xd4>
 800753a:	e00f      	b.n	800755c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	2201      	movs	r2, #1
 8007542:	2100      	movs	r1, #0
 8007544:	4618      	mov	r0, r3
 8007546:	f000 facd 	bl	8007ae4 <TIM_CCxChannelCmd>
      break;
 800754a:	e016      	b.n	800757a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	2201      	movs	r2, #1
 8007552:	2104      	movs	r1, #4
 8007554:	4618      	mov	r0, r3
 8007556:	f000 fac5 	bl	8007ae4 <TIM_CCxChannelCmd>
      break;
 800755a:	e00e      	b.n	800757a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	2201      	movs	r2, #1
 8007562:	2100      	movs	r1, #0
 8007564:	4618      	mov	r0, r3
 8007566:	f000 fabd 	bl	8007ae4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	2201      	movs	r2, #1
 8007570:	2104      	movs	r1, #4
 8007572:	4618      	mov	r0, r3
 8007574:	f000 fab6 	bl	8007ae4 <TIM_CCxChannelCmd>
      break;
 8007578:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	681a      	ldr	r2, [r3, #0]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f042 0201 	orr.w	r2, r2, #1
 8007588:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800758a:	2300      	movs	r3, #0
}
 800758c:	4618      	mov	r0, r3
 800758e:	3710      	adds	r7, #16
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}

08007594 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b084      	sub	sp, #16
 8007598:	af00      	add	r7, sp, #0
 800759a:	60f8      	str	r0, [r7, #12]
 800759c:	60b9      	str	r1, [r7, #8]
 800759e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075a6:	2b01      	cmp	r3, #1
 80075a8:	d101      	bne.n	80075ae <HAL_TIM_PWM_ConfigChannel+0x1a>
 80075aa:	2302      	movs	r3, #2
 80075ac:	e0ac      	b.n	8007708 <HAL_TIM_PWM_ConfigChannel+0x174>
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2201      	movs	r2, #1
 80075b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2b0c      	cmp	r3, #12
 80075ba:	f200 809f 	bhi.w	80076fc <HAL_TIM_PWM_ConfigChannel+0x168>
 80075be:	a201      	add	r2, pc, #4	; (adr r2, 80075c4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80075c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075c4:	080075f9 	.word	0x080075f9
 80075c8:	080076fd 	.word	0x080076fd
 80075cc:	080076fd 	.word	0x080076fd
 80075d0:	080076fd 	.word	0x080076fd
 80075d4:	08007639 	.word	0x08007639
 80075d8:	080076fd 	.word	0x080076fd
 80075dc:	080076fd 	.word	0x080076fd
 80075e0:	080076fd 	.word	0x080076fd
 80075e4:	0800767b 	.word	0x0800767b
 80075e8:	080076fd 	.word	0x080076fd
 80075ec:	080076fd 	.word	0x080076fd
 80075f0:	080076fd 	.word	0x080076fd
 80075f4:	080076bb 	.word	0x080076bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	68b9      	ldr	r1, [r7, #8]
 80075fe:	4618      	mov	r0, r3
 8007600:	f000 f8e8 	bl	80077d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	699a      	ldr	r2, [r3, #24]
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f042 0208 	orr.w	r2, r2, #8
 8007612:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	699a      	ldr	r2, [r3, #24]
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f022 0204 	bic.w	r2, r2, #4
 8007622:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	6999      	ldr	r1, [r3, #24]
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	691a      	ldr	r2, [r3, #16]
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	430a      	orrs	r2, r1
 8007634:	619a      	str	r2, [r3, #24]
      break;
 8007636:	e062      	b.n	80076fe <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	68b9      	ldr	r1, [r7, #8]
 800763e:	4618      	mov	r0, r3
 8007640:	f000 f92e 	bl	80078a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	699a      	ldr	r2, [r3, #24]
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007652:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	699a      	ldr	r2, [r3, #24]
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007662:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	6999      	ldr	r1, [r3, #24]
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	691b      	ldr	r3, [r3, #16]
 800766e:	021a      	lsls	r2, r3, #8
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	430a      	orrs	r2, r1
 8007676:	619a      	str	r2, [r3, #24]
      break;
 8007678:	e041      	b.n	80076fe <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	68b9      	ldr	r1, [r7, #8]
 8007680:	4618      	mov	r0, r3
 8007682:	f000 f977 	bl	8007974 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	69da      	ldr	r2, [r3, #28]
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f042 0208 	orr.w	r2, r2, #8
 8007694:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	69da      	ldr	r2, [r3, #28]
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f022 0204 	bic.w	r2, r2, #4
 80076a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	69d9      	ldr	r1, [r3, #28]
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	691a      	ldr	r2, [r3, #16]
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	430a      	orrs	r2, r1
 80076b6:	61da      	str	r2, [r3, #28]
      break;
 80076b8:	e021      	b.n	80076fe <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	68b9      	ldr	r1, [r7, #8]
 80076c0:	4618      	mov	r0, r3
 80076c2:	f000 f9c1 	bl	8007a48 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	69da      	ldr	r2, [r3, #28]
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80076d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	69da      	ldr	r2, [r3, #28]
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	69d9      	ldr	r1, [r3, #28]
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	691b      	ldr	r3, [r3, #16]
 80076f0:	021a      	lsls	r2, r3, #8
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	430a      	orrs	r2, r1
 80076f8:	61da      	str	r2, [r3, #28]
      break;
 80076fa:	e000      	b.n	80076fe <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80076fc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2200      	movs	r2, #0
 8007702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007706:	2300      	movs	r3, #0
}
 8007708:	4618      	mov	r0, r3
 800770a:	3710      	adds	r7, #16
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}

08007710 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007710:	b480      	push	{r7}
 8007712:	b085      	sub	sp, #20
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	4a29      	ldr	r2, [pc, #164]	; (80077c8 <TIM_Base_SetConfig+0xb8>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d00b      	beq.n	8007740 <TIM_Base_SetConfig+0x30>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800772e:	d007      	beq.n	8007740 <TIM_Base_SetConfig+0x30>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	4a26      	ldr	r2, [pc, #152]	; (80077cc <TIM_Base_SetConfig+0xbc>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d003      	beq.n	8007740 <TIM_Base_SetConfig+0x30>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	4a25      	ldr	r2, [pc, #148]	; (80077d0 <TIM_Base_SetConfig+0xc0>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d108      	bne.n	8007752 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007746:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	68fa      	ldr	r2, [r7, #12]
 800774e:	4313      	orrs	r3, r2
 8007750:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	4a1c      	ldr	r2, [pc, #112]	; (80077c8 <TIM_Base_SetConfig+0xb8>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d00b      	beq.n	8007772 <TIM_Base_SetConfig+0x62>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007760:	d007      	beq.n	8007772 <TIM_Base_SetConfig+0x62>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	4a19      	ldr	r2, [pc, #100]	; (80077cc <TIM_Base_SetConfig+0xbc>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d003      	beq.n	8007772 <TIM_Base_SetConfig+0x62>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	4a18      	ldr	r2, [pc, #96]	; (80077d0 <TIM_Base_SetConfig+0xc0>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d108      	bne.n	8007784 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007778:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	68db      	ldr	r3, [r3, #12]
 800777e:	68fa      	ldr	r2, [r7, #12]
 8007780:	4313      	orrs	r3, r2
 8007782:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	695b      	ldr	r3, [r3, #20]
 800778e:	4313      	orrs	r3, r2
 8007790:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	68fa      	ldr	r2, [r7, #12]
 8007796:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	689a      	ldr	r2, [r3, #8]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	681a      	ldr	r2, [r3, #0]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	4a07      	ldr	r2, [pc, #28]	; (80077c8 <TIM_Base_SetConfig+0xb8>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d103      	bne.n	80077b8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	691a      	ldr	r2, [r3, #16]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2201      	movs	r2, #1
 80077bc:	615a      	str	r2, [r3, #20]
}
 80077be:	bf00      	nop
 80077c0:	3714      	adds	r7, #20
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bc80      	pop	{r7}
 80077c6:	4770      	bx	lr
 80077c8:	40012c00 	.word	0x40012c00
 80077cc:	40000400 	.word	0x40000400
 80077d0:	40000800 	.word	0x40000800

080077d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b087      	sub	sp, #28
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6a1b      	ldr	r3, [r3, #32]
 80077e2:	f023 0201 	bic.w	r2, r3, #1
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6a1b      	ldr	r3, [r3, #32]
 80077ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	685b      	ldr	r3, [r3, #4]
 80077f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	699b      	ldr	r3, [r3, #24]
 80077fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007802:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	f023 0303 	bic.w	r3, r3, #3
 800780a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	68fa      	ldr	r2, [r7, #12]
 8007812:	4313      	orrs	r3, r2
 8007814:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	f023 0302 	bic.w	r3, r3, #2
 800781c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	689b      	ldr	r3, [r3, #8]
 8007822:	697a      	ldr	r2, [r7, #20]
 8007824:	4313      	orrs	r3, r2
 8007826:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	4a1c      	ldr	r2, [pc, #112]	; (800789c <TIM_OC1_SetConfig+0xc8>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d10c      	bne.n	800784a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007830:	697b      	ldr	r3, [r7, #20]
 8007832:	f023 0308 	bic.w	r3, r3, #8
 8007836:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	68db      	ldr	r3, [r3, #12]
 800783c:	697a      	ldr	r2, [r7, #20]
 800783e:	4313      	orrs	r3, r2
 8007840:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	f023 0304 	bic.w	r3, r3, #4
 8007848:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	4a13      	ldr	r2, [pc, #76]	; (800789c <TIM_OC1_SetConfig+0xc8>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d111      	bne.n	8007876 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007858:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007860:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	695b      	ldr	r3, [r3, #20]
 8007866:	693a      	ldr	r2, [r7, #16]
 8007868:	4313      	orrs	r3, r2
 800786a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	699b      	ldr	r3, [r3, #24]
 8007870:	693a      	ldr	r2, [r7, #16]
 8007872:	4313      	orrs	r3, r2
 8007874:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	693a      	ldr	r2, [r7, #16]
 800787a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	68fa      	ldr	r2, [r7, #12]
 8007880:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	685a      	ldr	r2, [r3, #4]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	697a      	ldr	r2, [r7, #20]
 800788e:	621a      	str	r2, [r3, #32]
}
 8007890:	bf00      	nop
 8007892:	371c      	adds	r7, #28
 8007894:	46bd      	mov	sp, r7
 8007896:	bc80      	pop	{r7}
 8007898:	4770      	bx	lr
 800789a:	bf00      	nop
 800789c:	40012c00 	.word	0x40012c00

080078a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b087      	sub	sp, #28
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
 80078a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6a1b      	ldr	r3, [r3, #32]
 80078ae:	f023 0210 	bic.w	r2, r3, #16
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6a1b      	ldr	r3, [r3, #32]
 80078ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	685b      	ldr	r3, [r3, #4]
 80078c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	699b      	ldr	r3, [r3, #24]
 80078c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	021b      	lsls	r3, r3, #8
 80078de:	68fa      	ldr	r2, [r7, #12]
 80078e0:	4313      	orrs	r3, r2
 80078e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	f023 0320 	bic.w	r3, r3, #32
 80078ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	689b      	ldr	r3, [r3, #8]
 80078f0:	011b      	lsls	r3, r3, #4
 80078f2:	697a      	ldr	r2, [r7, #20]
 80078f4:	4313      	orrs	r3, r2
 80078f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	4a1d      	ldr	r2, [pc, #116]	; (8007970 <TIM_OC2_SetConfig+0xd0>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d10d      	bne.n	800791c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007906:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	68db      	ldr	r3, [r3, #12]
 800790c:	011b      	lsls	r3, r3, #4
 800790e:	697a      	ldr	r2, [r7, #20]
 8007910:	4313      	orrs	r3, r2
 8007912:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800791a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	4a14      	ldr	r2, [pc, #80]	; (8007970 <TIM_OC2_SetConfig+0xd0>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d113      	bne.n	800794c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800792a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007932:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	695b      	ldr	r3, [r3, #20]
 8007938:	009b      	lsls	r3, r3, #2
 800793a:	693a      	ldr	r2, [r7, #16]
 800793c:	4313      	orrs	r3, r2
 800793e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	699b      	ldr	r3, [r3, #24]
 8007944:	009b      	lsls	r3, r3, #2
 8007946:	693a      	ldr	r2, [r7, #16]
 8007948:	4313      	orrs	r3, r2
 800794a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	693a      	ldr	r2, [r7, #16]
 8007950:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	68fa      	ldr	r2, [r7, #12]
 8007956:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	685a      	ldr	r2, [r3, #4]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	697a      	ldr	r2, [r7, #20]
 8007964:	621a      	str	r2, [r3, #32]
}
 8007966:	bf00      	nop
 8007968:	371c      	adds	r7, #28
 800796a:	46bd      	mov	sp, r7
 800796c:	bc80      	pop	{r7}
 800796e:	4770      	bx	lr
 8007970:	40012c00 	.word	0x40012c00

08007974 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007974:	b480      	push	{r7}
 8007976:	b087      	sub	sp, #28
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6a1b      	ldr	r3, [r3, #32]
 8007982:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6a1b      	ldr	r3, [r3, #32]
 800798e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	685b      	ldr	r3, [r3, #4]
 8007994:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	69db      	ldr	r3, [r3, #28]
 800799a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	f023 0303 	bic.w	r3, r3, #3
 80079aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	68fa      	ldr	r2, [r7, #12]
 80079b2:	4313      	orrs	r3, r2
 80079b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80079bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	689b      	ldr	r3, [r3, #8]
 80079c2:	021b      	lsls	r3, r3, #8
 80079c4:	697a      	ldr	r2, [r7, #20]
 80079c6:	4313      	orrs	r3, r2
 80079c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	4a1d      	ldr	r2, [pc, #116]	; (8007a44 <TIM_OC3_SetConfig+0xd0>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d10d      	bne.n	80079ee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80079d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	68db      	ldr	r3, [r3, #12]
 80079de:	021b      	lsls	r3, r3, #8
 80079e0:	697a      	ldr	r2, [r7, #20]
 80079e2:	4313      	orrs	r3, r2
 80079e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80079ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	4a14      	ldr	r2, [pc, #80]	; (8007a44 <TIM_OC3_SetConfig+0xd0>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d113      	bne.n	8007a1e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80079fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	695b      	ldr	r3, [r3, #20]
 8007a0a:	011b      	lsls	r3, r3, #4
 8007a0c:	693a      	ldr	r2, [r7, #16]
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	699b      	ldr	r3, [r3, #24]
 8007a16:	011b      	lsls	r3, r3, #4
 8007a18:	693a      	ldr	r2, [r7, #16]
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	693a      	ldr	r2, [r7, #16]
 8007a22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	68fa      	ldr	r2, [r7, #12]
 8007a28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	685a      	ldr	r2, [r3, #4]
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	697a      	ldr	r2, [r7, #20]
 8007a36:	621a      	str	r2, [r3, #32]
}
 8007a38:	bf00      	nop
 8007a3a:	371c      	adds	r7, #28
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bc80      	pop	{r7}
 8007a40:	4770      	bx	lr
 8007a42:	bf00      	nop
 8007a44:	40012c00 	.word	0x40012c00

08007a48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b087      	sub	sp, #28
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
 8007a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6a1b      	ldr	r3, [r3, #32]
 8007a56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6a1b      	ldr	r3, [r3, #32]
 8007a62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	69db      	ldr	r3, [r3, #28]
 8007a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	021b      	lsls	r3, r3, #8
 8007a86:	68fa      	ldr	r2, [r7, #12]
 8007a88:	4313      	orrs	r3, r2
 8007a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	689b      	ldr	r3, [r3, #8]
 8007a98:	031b      	lsls	r3, r3, #12
 8007a9a:	693a      	ldr	r2, [r7, #16]
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	4a0f      	ldr	r2, [pc, #60]	; (8007ae0 <TIM_OC4_SetConfig+0x98>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d109      	bne.n	8007abc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007aae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	695b      	ldr	r3, [r3, #20]
 8007ab4:	019b      	lsls	r3, r3, #6
 8007ab6:	697a      	ldr	r2, [r7, #20]
 8007ab8:	4313      	orrs	r3, r2
 8007aba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	697a      	ldr	r2, [r7, #20]
 8007ac0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	68fa      	ldr	r2, [r7, #12]
 8007ac6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	685a      	ldr	r2, [r3, #4]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	693a      	ldr	r2, [r7, #16]
 8007ad4:	621a      	str	r2, [r3, #32]
}
 8007ad6:	bf00      	nop
 8007ad8:	371c      	adds	r7, #28
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bc80      	pop	{r7}
 8007ade:	4770      	bx	lr
 8007ae0:	40012c00 	.word	0x40012c00

08007ae4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b087      	sub	sp, #28
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	60f8      	str	r0, [r7, #12]
 8007aec:	60b9      	str	r1, [r7, #8]
 8007aee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	f003 031f 	and.w	r3, r3, #31
 8007af6:	2201      	movs	r2, #1
 8007af8:	fa02 f303 	lsl.w	r3, r2, r3
 8007afc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	6a1a      	ldr	r2, [r3, #32]
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	43db      	mvns	r3, r3
 8007b06:	401a      	ands	r2, r3
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	6a1a      	ldr	r2, [r3, #32]
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	f003 031f 	and.w	r3, r3, #31
 8007b16:	6879      	ldr	r1, [r7, #4]
 8007b18:	fa01 f303 	lsl.w	r3, r1, r3
 8007b1c:	431a      	orrs	r2, r3
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	621a      	str	r2, [r3, #32]
}
 8007b22:	bf00      	nop
 8007b24:	371c      	adds	r7, #28
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bc80      	pop	{r7}
 8007b2a:	4770      	bx	lr

08007b2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b085      	sub	sp, #20
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d101      	bne.n	8007b44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007b40:	2302      	movs	r3, #2
 8007b42:	e046      	b.n	8007bd2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2201      	movs	r2, #1
 8007b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2202      	movs	r2, #2
 8007b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	689b      	ldr	r3, [r3, #8]
 8007b62:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	68fa      	ldr	r2, [r7, #12]
 8007b72:	4313      	orrs	r3, r2
 8007b74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	68fa      	ldr	r2, [r7, #12]
 8007b7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4a16      	ldr	r2, [pc, #88]	; (8007bdc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d00e      	beq.n	8007ba6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b90:	d009      	beq.n	8007ba6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	4a12      	ldr	r2, [pc, #72]	; (8007be0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d004      	beq.n	8007ba6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a10      	ldr	r2, [pc, #64]	; (8007be4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d10c      	bne.n	8007bc0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	685b      	ldr	r3, [r3, #4]
 8007bb2:	68ba      	ldr	r2, [r7, #8]
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	68ba      	ldr	r2, [r7, #8]
 8007bbe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007bd0:	2300      	movs	r3, #0
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3714      	adds	r7, #20
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bc80      	pop	{r7}
 8007bda:	4770      	bx	lr
 8007bdc:	40012c00 	.word	0x40012c00
 8007be0:	40000400 	.word	0x40000400
 8007be4:	40000800 	.word	0x40000800

08007be8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b082      	sub	sp, #8
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d101      	bne.n	8007bfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	e03f      	b.n	8007c7a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c00:	b2db      	uxtb	r3, r3
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d106      	bne.n	8007c14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f7fc fcc6 	bl	80045a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2224      	movs	r2, #36	; 0x24
 8007c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	68da      	ldr	r2, [r3, #12]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007c2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f000 f905 	bl	8007e3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	691a      	ldr	r2, [r3, #16]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007c40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	695a      	ldr	r2, [r3, #20]
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007c50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	68da      	ldr	r2, [r3, #12]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007c60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2200      	movs	r2, #0
 8007c66:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2220      	movs	r2, #32
 8007c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2220      	movs	r2, #32
 8007c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007c78:	2300      	movs	r3, #0
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3708      	adds	r7, #8
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}

08007c82 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c82:	b580      	push	{r7, lr}
 8007c84:	b08a      	sub	sp, #40	; 0x28
 8007c86:	af02      	add	r7, sp, #8
 8007c88:	60f8      	str	r0, [r7, #12]
 8007c8a:	60b9      	str	r1, [r7, #8]
 8007c8c:	603b      	str	r3, [r7, #0]
 8007c8e:	4613      	mov	r3, r2
 8007c90:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007c92:	2300      	movs	r3, #0
 8007c94:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c9c:	b2db      	uxtb	r3, r3
 8007c9e:	2b20      	cmp	r3, #32
 8007ca0:	d17c      	bne.n	8007d9c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d002      	beq.n	8007cae <HAL_UART_Transmit+0x2c>
 8007ca8:	88fb      	ldrh	r3, [r7, #6]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d101      	bne.n	8007cb2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007cae:	2301      	movs	r3, #1
 8007cb0:	e075      	b.n	8007d9e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cb8:	2b01      	cmp	r3, #1
 8007cba:	d101      	bne.n	8007cc0 <HAL_UART_Transmit+0x3e>
 8007cbc:	2302      	movs	r3, #2
 8007cbe:	e06e      	b.n	8007d9e <HAL_UART_Transmit+0x11c>
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	2221      	movs	r2, #33	; 0x21
 8007cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007cd6:	f7fd f9a1 	bl	800501c <HAL_GetTick>
 8007cda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	88fa      	ldrh	r2, [r7, #6]
 8007ce0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	88fa      	ldrh	r2, [r7, #6]
 8007ce6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	689b      	ldr	r3, [r3, #8]
 8007cec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cf0:	d108      	bne.n	8007d04 <HAL_UART_Transmit+0x82>
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	691b      	ldr	r3, [r3, #16]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d104      	bne.n	8007d04 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	61bb      	str	r3, [r7, #24]
 8007d02:	e003      	b.n	8007d0c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007d14:	e02a      	b.n	8007d6c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	9300      	str	r3, [sp, #0]
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	2180      	movs	r1, #128	; 0x80
 8007d20:	68f8      	ldr	r0, [r7, #12]
 8007d22:	f000 f840 	bl	8007da6 <UART_WaitOnFlagUntilTimeout>
 8007d26:	4603      	mov	r3, r0
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d001      	beq.n	8007d30 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007d2c:	2303      	movs	r3, #3
 8007d2e:	e036      	b.n	8007d9e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007d30:	69fb      	ldr	r3, [r7, #28]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d10b      	bne.n	8007d4e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007d36:	69bb      	ldr	r3, [r7, #24]
 8007d38:	881b      	ldrh	r3, [r3, #0]
 8007d3a:	461a      	mov	r2, r3
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007d44:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007d46:	69bb      	ldr	r3, [r7, #24]
 8007d48:	3302      	adds	r3, #2
 8007d4a:	61bb      	str	r3, [r7, #24]
 8007d4c:	e007      	b.n	8007d5e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007d4e:	69fb      	ldr	r3, [r7, #28]
 8007d50:	781a      	ldrb	r2, [r3, #0]
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007d58:	69fb      	ldr	r3, [r7, #28]
 8007d5a:	3301      	adds	r3, #1
 8007d5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007d62:	b29b      	uxth	r3, r3
 8007d64:	3b01      	subs	r3, #1
 8007d66:	b29a      	uxth	r2, r3
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007d70:	b29b      	uxth	r3, r3
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d1cf      	bne.n	8007d16 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	9300      	str	r3, [sp, #0]
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	2140      	movs	r1, #64	; 0x40
 8007d80:	68f8      	ldr	r0, [r7, #12]
 8007d82:	f000 f810 	bl	8007da6 <UART_WaitOnFlagUntilTimeout>
 8007d86:	4603      	mov	r3, r0
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d001      	beq.n	8007d90 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007d8c:	2303      	movs	r3, #3
 8007d8e:	e006      	b.n	8007d9e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	2220      	movs	r2, #32
 8007d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	e000      	b.n	8007d9e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007d9c:	2302      	movs	r3, #2
  }
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3720      	adds	r7, #32
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}

08007da6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007da6:	b580      	push	{r7, lr}
 8007da8:	b084      	sub	sp, #16
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	60f8      	str	r0, [r7, #12]
 8007dae:	60b9      	str	r1, [r7, #8]
 8007db0:	603b      	str	r3, [r7, #0]
 8007db2:	4613      	mov	r3, r2
 8007db4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007db6:	e02c      	b.n	8007e12 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007db8:	69bb      	ldr	r3, [r7, #24]
 8007dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dbe:	d028      	beq.n	8007e12 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007dc0:	69bb      	ldr	r3, [r7, #24]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d007      	beq.n	8007dd6 <UART_WaitOnFlagUntilTimeout+0x30>
 8007dc6:	f7fd f929 	bl	800501c <HAL_GetTick>
 8007dca:	4602      	mov	r2, r0
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	1ad3      	subs	r3, r2, r3
 8007dd0:	69ba      	ldr	r2, [r7, #24]
 8007dd2:	429a      	cmp	r2, r3
 8007dd4:	d21d      	bcs.n	8007e12 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	68da      	ldr	r2, [r3, #12]
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007de4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	695a      	ldr	r2, [r3, #20]
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f022 0201 	bic.w	r2, r2, #1
 8007df4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2220      	movs	r2, #32
 8007dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2220      	movs	r2, #32
 8007e02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007e0e:	2303      	movs	r3, #3
 8007e10:	e00f      	b.n	8007e32 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	681a      	ldr	r2, [r3, #0]
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	4013      	ands	r3, r2
 8007e1c:	68ba      	ldr	r2, [r7, #8]
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	bf0c      	ite	eq
 8007e22:	2301      	moveq	r3, #1
 8007e24:	2300      	movne	r3, #0
 8007e26:	b2db      	uxtb	r3, r3
 8007e28:	461a      	mov	r2, r3
 8007e2a:	79fb      	ldrb	r3, [r7, #7]
 8007e2c:	429a      	cmp	r2, r3
 8007e2e:	d0c3      	beq.n	8007db8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007e30:	2300      	movs	r3, #0
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3710      	adds	r7, #16
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}
	...

08007e3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b084      	sub	sp, #16
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	691b      	ldr	r3, [r3, #16]
 8007e4a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	68da      	ldr	r2, [r3, #12]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	430a      	orrs	r2, r1
 8007e58:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	689a      	ldr	r2, [r3, #8]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	691b      	ldr	r3, [r3, #16]
 8007e62:	431a      	orrs	r2, r3
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	695b      	ldr	r3, [r3, #20]
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	68db      	ldr	r3, [r3, #12]
 8007e72:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007e76:	f023 030c 	bic.w	r3, r3, #12
 8007e7a:	687a      	ldr	r2, [r7, #4]
 8007e7c:	6812      	ldr	r2, [r2, #0]
 8007e7e:	68b9      	ldr	r1, [r7, #8]
 8007e80:	430b      	orrs	r3, r1
 8007e82:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	695b      	ldr	r3, [r3, #20]
 8007e8a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	699a      	ldr	r2, [r3, #24]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	430a      	orrs	r2, r1
 8007e98:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4a2c      	ldr	r2, [pc, #176]	; (8007f50 <UART_SetConfig+0x114>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d103      	bne.n	8007eac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007ea4:	f7ff f86c 	bl	8006f80 <HAL_RCC_GetPCLK2Freq>
 8007ea8:	60f8      	str	r0, [r7, #12]
 8007eaa:	e002      	b.n	8007eb2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007eac:	f7ff f854 	bl	8006f58 <HAL_RCC_GetPCLK1Freq>
 8007eb0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007eb2:	68fa      	ldr	r2, [r7, #12]
 8007eb4:	4613      	mov	r3, r2
 8007eb6:	009b      	lsls	r3, r3, #2
 8007eb8:	4413      	add	r3, r2
 8007eba:	009a      	lsls	r2, r3, #2
 8007ebc:	441a      	add	r2, r3
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	009b      	lsls	r3, r3, #2
 8007ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ec8:	4a22      	ldr	r2, [pc, #136]	; (8007f54 <UART_SetConfig+0x118>)
 8007eca:	fba2 2303 	umull	r2, r3, r2, r3
 8007ece:	095b      	lsrs	r3, r3, #5
 8007ed0:	0119      	lsls	r1, r3, #4
 8007ed2:	68fa      	ldr	r2, [r7, #12]
 8007ed4:	4613      	mov	r3, r2
 8007ed6:	009b      	lsls	r3, r3, #2
 8007ed8:	4413      	add	r3, r2
 8007eda:	009a      	lsls	r2, r3, #2
 8007edc:	441a      	add	r2, r3
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	685b      	ldr	r3, [r3, #4]
 8007ee2:	009b      	lsls	r3, r3, #2
 8007ee4:	fbb2 f2f3 	udiv	r2, r2, r3
 8007ee8:	4b1a      	ldr	r3, [pc, #104]	; (8007f54 <UART_SetConfig+0x118>)
 8007eea:	fba3 0302 	umull	r0, r3, r3, r2
 8007eee:	095b      	lsrs	r3, r3, #5
 8007ef0:	2064      	movs	r0, #100	; 0x64
 8007ef2:	fb00 f303 	mul.w	r3, r0, r3
 8007ef6:	1ad3      	subs	r3, r2, r3
 8007ef8:	011b      	lsls	r3, r3, #4
 8007efa:	3332      	adds	r3, #50	; 0x32
 8007efc:	4a15      	ldr	r2, [pc, #84]	; (8007f54 <UART_SetConfig+0x118>)
 8007efe:	fba2 2303 	umull	r2, r3, r2, r3
 8007f02:	095b      	lsrs	r3, r3, #5
 8007f04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007f08:	4419      	add	r1, r3
 8007f0a:	68fa      	ldr	r2, [r7, #12]
 8007f0c:	4613      	mov	r3, r2
 8007f0e:	009b      	lsls	r3, r3, #2
 8007f10:	4413      	add	r3, r2
 8007f12:	009a      	lsls	r2, r3, #2
 8007f14:	441a      	add	r2, r3
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	685b      	ldr	r3, [r3, #4]
 8007f1a:	009b      	lsls	r3, r3, #2
 8007f1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007f20:	4b0c      	ldr	r3, [pc, #48]	; (8007f54 <UART_SetConfig+0x118>)
 8007f22:	fba3 0302 	umull	r0, r3, r3, r2
 8007f26:	095b      	lsrs	r3, r3, #5
 8007f28:	2064      	movs	r0, #100	; 0x64
 8007f2a:	fb00 f303 	mul.w	r3, r0, r3
 8007f2e:	1ad3      	subs	r3, r2, r3
 8007f30:	011b      	lsls	r3, r3, #4
 8007f32:	3332      	adds	r3, #50	; 0x32
 8007f34:	4a07      	ldr	r2, [pc, #28]	; (8007f54 <UART_SetConfig+0x118>)
 8007f36:	fba2 2303 	umull	r2, r3, r2, r3
 8007f3a:	095b      	lsrs	r3, r3, #5
 8007f3c:	f003 020f 	and.w	r2, r3, #15
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	440a      	add	r2, r1
 8007f46:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007f48:	bf00      	nop
 8007f4a:	3710      	adds	r7, #16
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}
 8007f50:	40013800 	.word	0x40013800
 8007f54:	51eb851f 	.word	0x51eb851f

08007f58 <__errno>:
 8007f58:	4b01      	ldr	r3, [pc, #4]	; (8007f60 <__errno+0x8>)
 8007f5a:	6818      	ldr	r0, [r3, #0]
 8007f5c:	4770      	bx	lr
 8007f5e:	bf00      	nop
 8007f60:	20000088 	.word	0x20000088

08007f64 <__libc_init_array>:
 8007f64:	b570      	push	{r4, r5, r6, lr}
 8007f66:	2600      	movs	r6, #0
 8007f68:	4d0c      	ldr	r5, [pc, #48]	; (8007f9c <__libc_init_array+0x38>)
 8007f6a:	4c0d      	ldr	r4, [pc, #52]	; (8007fa0 <__libc_init_array+0x3c>)
 8007f6c:	1b64      	subs	r4, r4, r5
 8007f6e:	10a4      	asrs	r4, r4, #2
 8007f70:	42a6      	cmp	r6, r4
 8007f72:	d109      	bne.n	8007f88 <__libc_init_array+0x24>
 8007f74:	f000 ff06 	bl	8008d84 <_init>
 8007f78:	2600      	movs	r6, #0
 8007f7a:	4d0a      	ldr	r5, [pc, #40]	; (8007fa4 <__libc_init_array+0x40>)
 8007f7c:	4c0a      	ldr	r4, [pc, #40]	; (8007fa8 <__libc_init_array+0x44>)
 8007f7e:	1b64      	subs	r4, r4, r5
 8007f80:	10a4      	asrs	r4, r4, #2
 8007f82:	42a6      	cmp	r6, r4
 8007f84:	d105      	bne.n	8007f92 <__libc_init_array+0x2e>
 8007f86:	bd70      	pop	{r4, r5, r6, pc}
 8007f88:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f8c:	4798      	blx	r3
 8007f8e:	3601      	adds	r6, #1
 8007f90:	e7ee      	b.n	8007f70 <__libc_init_array+0xc>
 8007f92:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f96:	4798      	blx	r3
 8007f98:	3601      	adds	r6, #1
 8007f9a:	e7f2      	b.n	8007f82 <__libc_init_array+0x1e>
 8007f9c:	08008e58 	.word	0x08008e58
 8007fa0:	08008e58 	.word	0x08008e58
 8007fa4:	08008e58 	.word	0x08008e58
 8007fa8:	08008e5c 	.word	0x08008e5c

08007fac <memset>:
 8007fac:	4603      	mov	r3, r0
 8007fae:	4402      	add	r2, r0
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d100      	bne.n	8007fb6 <memset+0xa>
 8007fb4:	4770      	bx	lr
 8007fb6:	f803 1b01 	strb.w	r1, [r3], #1
 8007fba:	e7f9      	b.n	8007fb0 <memset+0x4>

08007fbc <pow>:
 8007fbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fc0:	4614      	mov	r4, r2
 8007fc2:	461d      	mov	r5, r3
 8007fc4:	4680      	mov	r8, r0
 8007fc6:	4689      	mov	r9, r1
 8007fc8:	f000 f862 	bl	8008090 <__ieee754_pow>
 8007fcc:	4622      	mov	r2, r4
 8007fce:	4606      	mov	r6, r0
 8007fd0:	460f      	mov	r7, r1
 8007fd2:	462b      	mov	r3, r5
 8007fd4:	4620      	mov	r0, r4
 8007fd6:	4629      	mov	r1, r5
 8007fd8:	f7f8 fd18 	bl	8000a0c <__aeabi_dcmpun>
 8007fdc:	bbc8      	cbnz	r0, 8008052 <pow+0x96>
 8007fde:	2200      	movs	r2, #0
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	4640      	mov	r0, r8
 8007fe4:	4649      	mov	r1, r9
 8007fe6:	f7f8 fcdf 	bl	80009a8 <__aeabi_dcmpeq>
 8007fea:	b1b8      	cbz	r0, 800801c <pow+0x60>
 8007fec:	2200      	movs	r2, #0
 8007fee:	2300      	movs	r3, #0
 8007ff0:	4620      	mov	r0, r4
 8007ff2:	4629      	mov	r1, r5
 8007ff4:	f7f8 fcd8 	bl	80009a8 <__aeabi_dcmpeq>
 8007ff8:	2800      	cmp	r0, #0
 8007ffa:	d141      	bne.n	8008080 <pow+0xc4>
 8007ffc:	4620      	mov	r0, r4
 8007ffe:	4629      	mov	r1, r5
 8008000:	f000 fe3b 	bl	8008c7a <finite>
 8008004:	b328      	cbz	r0, 8008052 <pow+0x96>
 8008006:	2200      	movs	r2, #0
 8008008:	2300      	movs	r3, #0
 800800a:	4620      	mov	r0, r4
 800800c:	4629      	mov	r1, r5
 800800e:	f7f8 fcd5 	bl	80009bc <__aeabi_dcmplt>
 8008012:	b1f0      	cbz	r0, 8008052 <pow+0x96>
 8008014:	f7ff ffa0 	bl	8007f58 <__errno>
 8008018:	2322      	movs	r3, #34	; 0x22
 800801a:	e019      	b.n	8008050 <pow+0x94>
 800801c:	4630      	mov	r0, r6
 800801e:	4639      	mov	r1, r7
 8008020:	f000 fe2b 	bl	8008c7a <finite>
 8008024:	b9c8      	cbnz	r0, 800805a <pow+0x9e>
 8008026:	4640      	mov	r0, r8
 8008028:	4649      	mov	r1, r9
 800802a:	f000 fe26 	bl	8008c7a <finite>
 800802e:	b1a0      	cbz	r0, 800805a <pow+0x9e>
 8008030:	4620      	mov	r0, r4
 8008032:	4629      	mov	r1, r5
 8008034:	f000 fe21 	bl	8008c7a <finite>
 8008038:	b178      	cbz	r0, 800805a <pow+0x9e>
 800803a:	4632      	mov	r2, r6
 800803c:	463b      	mov	r3, r7
 800803e:	4630      	mov	r0, r6
 8008040:	4639      	mov	r1, r7
 8008042:	f7f8 fce3 	bl	8000a0c <__aeabi_dcmpun>
 8008046:	2800      	cmp	r0, #0
 8008048:	d0e4      	beq.n	8008014 <pow+0x58>
 800804a:	f7ff ff85 	bl	8007f58 <__errno>
 800804e:	2321      	movs	r3, #33	; 0x21
 8008050:	6003      	str	r3, [r0, #0]
 8008052:	4630      	mov	r0, r6
 8008054:	4639      	mov	r1, r7
 8008056:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800805a:	2200      	movs	r2, #0
 800805c:	2300      	movs	r3, #0
 800805e:	4630      	mov	r0, r6
 8008060:	4639      	mov	r1, r7
 8008062:	f7f8 fca1 	bl	80009a8 <__aeabi_dcmpeq>
 8008066:	2800      	cmp	r0, #0
 8008068:	d0f3      	beq.n	8008052 <pow+0x96>
 800806a:	4640      	mov	r0, r8
 800806c:	4649      	mov	r1, r9
 800806e:	f000 fe04 	bl	8008c7a <finite>
 8008072:	2800      	cmp	r0, #0
 8008074:	d0ed      	beq.n	8008052 <pow+0x96>
 8008076:	4620      	mov	r0, r4
 8008078:	4629      	mov	r1, r5
 800807a:	f000 fdfe 	bl	8008c7a <finite>
 800807e:	e7c8      	b.n	8008012 <pow+0x56>
 8008080:	2600      	movs	r6, #0
 8008082:	4f01      	ldr	r7, [pc, #4]	; (8008088 <pow+0xcc>)
 8008084:	e7e5      	b.n	8008052 <pow+0x96>
 8008086:	bf00      	nop
 8008088:	3ff00000 	.word	0x3ff00000
 800808c:	00000000 	.word	0x00000000

08008090 <__ieee754_pow>:
 8008090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008094:	b093      	sub	sp, #76	; 0x4c
 8008096:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800809a:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 800809e:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 80080a2:	4689      	mov	r9, r1
 80080a4:	ea56 0102 	orrs.w	r1, r6, r2
 80080a8:	4680      	mov	r8, r0
 80080aa:	d111      	bne.n	80080d0 <__ieee754_pow+0x40>
 80080ac:	1803      	adds	r3, r0, r0
 80080ae:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 80080b2:	4152      	adcs	r2, r2
 80080b4:	4299      	cmp	r1, r3
 80080b6:	4b82      	ldr	r3, [pc, #520]	; (80082c0 <__ieee754_pow+0x230>)
 80080b8:	4193      	sbcs	r3, r2
 80080ba:	f080 84b9 	bcs.w	8008a30 <__ieee754_pow+0x9a0>
 80080be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80080c2:	4640      	mov	r0, r8
 80080c4:	4649      	mov	r1, r9
 80080c6:	f7f8 f851 	bl	800016c <__adddf3>
 80080ca:	4683      	mov	fp, r0
 80080cc:	468c      	mov	ip, r1
 80080ce:	e06f      	b.n	80081b0 <__ieee754_pow+0x120>
 80080d0:	4b7c      	ldr	r3, [pc, #496]	; (80082c4 <__ieee754_pow+0x234>)
 80080d2:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 80080d6:	429c      	cmp	r4, r3
 80080d8:	464d      	mov	r5, r9
 80080da:	4682      	mov	sl, r0
 80080dc:	dc06      	bgt.n	80080ec <__ieee754_pow+0x5c>
 80080de:	d101      	bne.n	80080e4 <__ieee754_pow+0x54>
 80080e0:	2800      	cmp	r0, #0
 80080e2:	d1ec      	bne.n	80080be <__ieee754_pow+0x2e>
 80080e4:	429e      	cmp	r6, r3
 80080e6:	dc01      	bgt.n	80080ec <__ieee754_pow+0x5c>
 80080e8:	d10f      	bne.n	800810a <__ieee754_pow+0x7a>
 80080ea:	b172      	cbz	r2, 800810a <__ieee754_pow+0x7a>
 80080ec:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80080f0:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80080f4:	ea55 050a 	orrs.w	r5, r5, sl
 80080f8:	d1e1      	bne.n	80080be <__ieee754_pow+0x2e>
 80080fa:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80080fe:	18db      	adds	r3, r3, r3
 8008100:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8008104:	4152      	adcs	r2, r2
 8008106:	429d      	cmp	r5, r3
 8008108:	e7d5      	b.n	80080b6 <__ieee754_pow+0x26>
 800810a:	2d00      	cmp	r5, #0
 800810c:	da39      	bge.n	8008182 <__ieee754_pow+0xf2>
 800810e:	4b6e      	ldr	r3, [pc, #440]	; (80082c8 <__ieee754_pow+0x238>)
 8008110:	429e      	cmp	r6, r3
 8008112:	dc52      	bgt.n	80081ba <__ieee754_pow+0x12a>
 8008114:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8008118:	429e      	cmp	r6, r3
 800811a:	f340 849c 	ble.w	8008a56 <__ieee754_pow+0x9c6>
 800811e:	1533      	asrs	r3, r6, #20
 8008120:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008124:	2b14      	cmp	r3, #20
 8008126:	dd0f      	ble.n	8008148 <__ieee754_pow+0xb8>
 8008128:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800812c:	fa22 f103 	lsr.w	r1, r2, r3
 8008130:	fa01 f303 	lsl.w	r3, r1, r3
 8008134:	4293      	cmp	r3, r2
 8008136:	f040 848e 	bne.w	8008a56 <__ieee754_pow+0x9c6>
 800813a:	f001 0101 	and.w	r1, r1, #1
 800813e:	f1c1 0302 	rsb	r3, r1, #2
 8008142:	9300      	str	r3, [sp, #0]
 8008144:	b182      	cbz	r2, 8008168 <__ieee754_pow+0xd8>
 8008146:	e05d      	b.n	8008204 <__ieee754_pow+0x174>
 8008148:	2a00      	cmp	r2, #0
 800814a:	d159      	bne.n	8008200 <__ieee754_pow+0x170>
 800814c:	f1c3 0314 	rsb	r3, r3, #20
 8008150:	fa46 f103 	asr.w	r1, r6, r3
 8008154:	fa01 f303 	lsl.w	r3, r1, r3
 8008158:	42b3      	cmp	r3, r6
 800815a:	f040 8479 	bne.w	8008a50 <__ieee754_pow+0x9c0>
 800815e:	f001 0101 	and.w	r1, r1, #1
 8008162:	f1c1 0302 	rsb	r3, r1, #2
 8008166:	9300      	str	r3, [sp, #0]
 8008168:	4b58      	ldr	r3, [pc, #352]	; (80082cc <__ieee754_pow+0x23c>)
 800816a:	429e      	cmp	r6, r3
 800816c:	d132      	bne.n	80081d4 <__ieee754_pow+0x144>
 800816e:	2f00      	cmp	r7, #0
 8008170:	f280 846a 	bge.w	8008a48 <__ieee754_pow+0x9b8>
 8008174:	4642      	mov	r2, r8
 8008176:	464b      	mov	r3, r9
 8008178:	2000      	movs	r0, #0
 800817a:	4954      	ldr	r1, [pc, #336]	; (80082cc <__ieee754_pow+0x23c>)
 800817c:	f7f8 fad6 	bl	800072c <__aeabi_ddiv>
 8008180:	e7a3      	b.n	80080ca <__ieee754_pow+0x3a>
 8008182:	2300      	movs	r3, #0
 8008184:	9300      	str	r3, [sp, #0]
 8008186:	2a00      	cmp	r2, #0
 8008188:	d13c      	bne.n	8008204 <__ieee754_pow+0x174>
 800818a:	4b4e      	ldr	r3, [pc, #312]	; (80082c4 <__ieee754_pow+0x234>)
 800818c:	429e      	cmp	r6, r3
 800818e:	d1eb      	bne.n	8008168 <__ieee754_pow+0xd8>
 8008190:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8008194:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8008198:	ea53 030a 	orrs.w	r3, r3, sl
 800819c:	f000 8448 	beq.w	8008a30 <__ieee754_pow+0x9a0>
 80081a0:	4b4b      	ldr	r3, [pc, #300]	; (80082d0 <__ieee754_pow+0x240>)
 80081a2:	429c      	cmp	r4, r3
 80081a4:	dd0b      	ble.n	80081be <__ieee754_pow+0x12e>
 80081a6:	2f00      	cmp	r7, #0
 80081a8:	f2c0 8448 	blt.w	8008a3c <__ieee754_pow+0x9ac>
 80081ac:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 80081b0:	4658      	mov	r0, fp
 80081b2:	4661      	mov	r1, ip
 80081b4:	b013      	add	sp, #76	; 0x4c
 80081b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081ba:	2302      	movs	r3, #2
 80081bc:	e7e2      	b.n	8008184 <__ieee754_pow+0xf4>
 80081be:	2f00      	cmp	r7, #0
 80081c0:	f04f 0b00 	mov.w	fp, #0
 80081c4:	f04f 0c00 	mov.w	ip, #0
 80081c8:	daf2      	bge.n	80081b0 <__ieee754_pow+0x120>
 80081ca:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 80081ce:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 80081d2:	e7ed      	b.n	80081b0 <__ieee754_pow+0x120>
 80081d4:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 80081d8:	d106      	bne.n	80081e8 <__ieee754_pow+0x158>
 80081da:	4642      	mov	r2, r8
 80081dc:	464b      	mov	r3, r9
 80081de:	4640      	mov	r0, r8
 80081e0:	4649      	mov	r1, r9
 80081e2:	f7f8 f979 	bl	80004d8 <__aeabi_dmul>
 80081e6:	e770      	b.n	80080ca <__ieee754_pow+0x3a>
 80081e8:	4b3a      	ldr	r3, [pc, #232]	; (80082d4 <__ieee754_pow+0x244>)
 80081ea:	429f      	cmp	r7, r3
 80081ec:	d10a      	bne.n	8008204 <__ieee754_pow+0x174>
 80081ee:	2d00      	cmp	r5, #0
 80081f0:	db08      	blt.n	8008204 <__ieee754_pow+0x174>
 80081f2:	4640      	mov	r0, r8
 80081f4:	4649      	mov	r1, r9
 80081f6:	b013      	add	sp, #76	; 0x4c
 80081f8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081fc:	f000 bc5e 	b.w	8008abc <__ieee754_sqrt>
 8008200:	2300      	movs	r3, #0
 8008202:	9300      	str	r3, [sp, #0]
 8008204:	4640      	mov	r0, r8
 8008206:	4649      	mov	r1, r9
 8008208:	f000 fd34 	bl	8008c74 <fabs>
 800820c:	4683      	mov	fp, r0
 800820e:	468c      	mov	ip, r1
 8008210:	f1ba 0f00 	cmp.w	sl, #0
 8008214:	d128      	bne.n	8008268 <__ieee754_pow+0x1d8>
 8008216:	b124      	cbz	r4, 8008222 <__ieee754_pow+0x192>
 8008218:	4b2c      	ldr	r3, [pc, #176]	; (80082cc <__ieee754_pow+0x23c>)
 800821a:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800821e:	429a      	cmp	r2, r3
 8008220:	d122      	bne.n	8008268 <__ieee754_pow+0x1d8>
 8008222:	2f00      	cmp	r7, #0
 8008224:	da07      	bge.n	8008236 <__ieee754_pow+0x1a6>
 8008226:	465a      	mov	r2, fp
 8008228:	4663      	mov	r3, ip
 800822a:	2000      	movs	r0, #0
 800822c:	4927      	ldr	r1, [pc, #156]	; (80082cc <__ieee754_pow+0x23c>)
 800822e:	f7f8 fa7d 	bl	800072c <__aeabi_ddiv>
 8008232:	4683      	mov	fp, r0
 8008234:	468c      	mov	ip, r1
 8008236:	2d00      	cmp	r5, #0
 8008238:	daba      	bge.n	80081b0 <__ieee754_pow+0x120>
 800823a:	9b00      	ldr	r3, [sp, #0]
 800823c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008240:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008244:	4323      	orrs	r3, r4
 8008246:	d108      	bne.n	800825a <__ieee754_pow+0x1ca>
 8008248:	465a      	mov	r2, fp
 800824a:	4663      	mov	r3, ip
 800824c:	4658      	mov	r0, fp
 800824e:	4661      	mov	r1, ip
 8008250:	f7f7 ff8a 	bl	8000168 <__aeabi_dsub>
 8008254:	4602      	mov	r2, r0
 8008256:	460b      	mov	r3, r1
 8008258:	e790      	b.n	800817c <__ieee754_pow+0xec>
 800825a:	9b00      	ldr	r3, [sp, #0]
 800825c:	2b01      	cmp	r3, #1
 800825e:	d1a7      	bne.n	80081b0 <__ieee754_pow+0x120>
 8008260:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8008264:	469c      	mov	ip, r3
 8008266:	e7a3      	b.n	80081b0 <__ieee754_pow+0x120>
 8008268:	0feb      	lsrs	r3, r5, #31
 800826a:	3b01      	subs	r3, #1
 800826c:	930c      	str	r3, [sp, #48]	; 0x30
 800826e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008270:	9b00      	ldr	r3, [sp, #0]
 8008272:	4313      	orrs	r3, r2
 8008274:	d104      	bne.n	8008280 <__ieee754_pow+0x1f0>
 8008276:	4642      	mov	r2, r8
 8008278:	464b      	mov	r3, r9
 800827a:	4640      	mov	r0, r8
 800827c:	4649      	mov	r1, r9
 800827e:	e7e7      	b.n	8008250 <__ieee754_pow+0x1c0>
 8008280:	4b15      	ldr	r3, [pc, #84]	; (80082d8 <__ieee754_pow+0x248>)
 8008282:	429e      	cmp	r6, r3
 8008284:	f340 80f6 	ble.w	8008474 <__ieee754_pow+0x3e4>
 8008288:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800828c:	429e      	cmp	r6, r3
 800828e:	4b10      	ldr	r3, [pc, #64]	; (80082d0 <__ieee754_pow+0x240>)
 8008290:	dd09      	ble.n	80082a6 <__ieee754_pow+0x216>
 8008292:	429c      	cmp	r4, r3
 8008294:	dc0c      	bgt.n	80082b0 <__ieee754_pow+0x220>
 8008296:	2f00      	cmp	r7, #0
 8008298:	da0c      	bge.n	80082b4 <__ieee754_pow+0x224>
 800829a:	2000      	movs	r0, #0
 800829c:	b013      	add	sp, #76	; 0x4c
 800829e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082a2:	f000 bce2 	b.w	8008c6a <__math_oflow>
 80082a6:	429c      	cmp	r4, r3
 80082a8:	dbf5      	blt.n	8008296 <__ieee754_pow+0x206>
 80082aa:	4b08      	ldr	r3, [pc, #32]	; (80082cc <__ieee754_pow+0x23c>)
 80082ac:	429c      	cmp	r4, r3
 80082ae:	dd15      	ble.n	80082dc <__ieee754_pow+0x24c>
 80082b0:	2f00      	cmp	r7, #0
 80082b2:	dcf2      	bgt.n	800829a <__ieee754_pow+0x20a>
 80082b4:	2000      	movs	r0, #0
 80082b6:	b013      	add	sp, #76	; 0x4c
 80082b8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082bc:	f000 bcd0 	b.w	8008c60 <__math_uflow>
 80082c0:	fff00000 	.word	0xfff00000
 80082c4:	7ff00000 	.word	0x7ff00000
 80082c8:	433fffff 	.word	0x433fffff
 80082cc:	3ff00000 	.word	0x3ff00000
 80082d0:	3fefffff 	.word	0x3fefffff
 80082d4:	3fe00000 	.word	0x3fe00000
 80082d8:	41e00000 	.word	0x41e00000
 80082dc:	4661      	mov	r1, ip
 80082de:	2200      	movs	r2, #0
 80082e0:	4658      	mov	r0, fp
 80082e2:	4b5f      	ldr	r3, [pc, #380]	; (8008460 <__ieee754_pow+0x3d0>)
 80082e4:	f7f7 ff40 	bl	8000168 <__aeabi_dsub>
 80082e8:	a355      	add	r3, pc, #340	; (adr r3, 8008440 <__ieee754_pow+0x3b0>)
 80082ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ee:	4604      	mov	r4, r0
 80082f0:	460d      	mov	r5, r1
 80082f2:	f7f8 f8f1 	bl	80004d8 <__aeabi_dmul>
 80082f6:	a354      	add	r3, pc, #336	; (adr r3, 8008448 <__ieee754_pow+0x3b8>)
 80082f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082fc:	4606      	mov	r6, r0
 80082fe:	460f      	mov	r7, r1
 8008300:	4620      	mov	r0, r4
 8008302:	4629      	mov	r1, r5
 8008304:	f7f8 f8e8 	bl	80004d8 <__aeabi_dmul>
 8008308:	2200      	movs	r2, #0
 800830a:	4682      	mov	sl, r0
 800830c:	468b      	mov	fp, r1
 800830e:	4620      	mov	r0, r4
 8008310:	4629      	mov	r1, r5
 8008312:	4b54      	ldr	r3, [pc, #336]	; (8008464 <__ieee754_pow+0x3d4>)
 8008314:	f7f8 f8e0 	bl	80004d8 <__aeabi_dmul>
 8008318:	4602      	mov	r2, r0
 800831a:	460b      	mov	r3, r1
 800831c:	a14c      	add	r1, pc, #304	; (adr r1, 8008450 <__ieee754_pow+0x3c0>)
 800831e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008322:	f7f7 ff21 	bl	8000168 <__aeabi_dsub>
 8008326:	4622      	mov	r2, r4
 8008328:	462b      	mov	r3, r5
 800832a:	f7f8 f8d5 	bl	80004d8 <__aeabi_dmul>
 800832e:	4602      	mov	r2, r0
 8008330:	460b      	mov	r3, r1
 8008332:	2000      	movs	r0, #0
 8008334:	494c      	ldr	r1, [pc, #304]	; (8008468 <__ieee754_pow+0x3d8>)
 8008336:	f7f7 ff17 	bl	8000168 <__aeabi_dsub>
 800833a:	4622      	mov	r2, r4
 800833c:	462b      	mov	r3, r5
 800833e:	4680      	mov	r8, r0
 8008340:	4689      	mov	r9, r1
 8008342:	4620      	mov	r0, r4
 8008344:	4629      	mov	r1, r5
 8008346:	f7f8 f8c7 	bl	80004d8 <__aeabi_dmul>
 800834a:	4602      	mov	r2, r0
 800834c:	460b      	mov	r3, r1
 800834e:	4640      	mov	r0, r8
 8008350:	4649      	mov	r1, r9
 8008352:	f7f8 f8c1 	bl	80004d8 <__aeabi_dmul>
 8008356:	a340      	add	r3, pc, #256	; (adr r3, 8008458 <__ieee754_pow+0x3c8>)
 8008358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800835c:	f7f8 f8bc 	bl	80004d8 <__aeabi_dmul>
 8008360:	4602      	mov	r2, r0
 8008362:	460b      	mov	r3, r1
 8008364:	4650      	mov	r0, sl
 8008366:	4659      	mov	r1, fp
 8008368:	f7f7 fefe 	bl	8000168 <__aeabi_dsub>
 800836c:	f04f 0a00 	mov.w	sl, #0
 8008370:	4602      	mov	r2, r0
 8008372:	460b      	mov	r3, r1
 8008374:	4604      	mov	r4, r0
 8008376:	460d      	mov	r5, r1
 8008378:	4630      	mov	r0, r6
 800837a:	4639      	mov	r1, r7
 800837c:	f7f7 fef6 	bl	800016c <__adddf3>
 8008380:	4632      	mov	r2, r6
 8008382:	463b      	mov	r3, r7
 8008384:	4650      	mov	r0, sl
 8008386:	468b      	mov	fp, r1
 8008388:	f7f7 feee 	bl	8000168 <__aeabi_dsub>
 800838c:	4602      	mov	r2, r0
 800838e:	460b      	mov	r3, r1
 8008390:	4620      	mov	r0, r4
 8008392:	4629      	mov	r1, r5
 8008394:	f7f7 fee8 	bl	8000168 <__aeabi_dsub>
 8008398:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800839c:	9b00      	ldr	r3, [sp, #0]
 800839e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80083a0:	3b01      	subs	r3, #1
 80083a2:	4313      	orrs	r3, r2
 80083a4:	f04f 0600 	mov.w	r6, #0
 80083a8:	f04f 0200 	mov.w	r2, #0
 80083ac:	bf0c      	ite	eq
 80083ae:	4b2f      	ldreq	r3, [pc, #188]	; (800846c <__ieee754_pow+0x3dc>)
 80083b0:	4b2b      	ldrne	r3, [pc, #172]	; (8008460 <__ieee754_pow+0x3d0>)
 80083b2:	4604      	mov	r4, r0
 80083b4:	460d      	mov	r5, r1
 80083b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083ba:	e9cd 2300 	strd	r2, r3, [sp]
 80083be:	4632      	mov	r2, r6
 80083c0:	463b      	mov	r3, r7
 80083c2:	f7f7 fed1 	bl	8000168 <__aeabi_dsub>
 80083c6:	4652      	mov	r2, sl
 80083c8:	465b      	mov	r3, fp
 80083ca:	f7f8 f885 	bl	80004d8 <__aeabi_dmul>
 80083ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80083d2:	4680      	mov	r8, r0
 80083d4:	4689      	mov	r9, r1
 80083d6:	4620      	mov	r0, r4
 80083d8:	4629      	mov	r1, r5
 80083da:	f7f8 f87d 	bl	80004d8 <__aeabi_dmul>
 80083de:	4602      	mov	r2, r0
 80083e0:	460b      	mov	r3, r1
 80083e2:	4640      	mov	r0, r8
 80083e4:	4649      	mov	r1, r9
 80083e6:	f7f7 fec1 	bl	800016c <__adddf3>
 80083ea:	4632      	mov	r2, r6
 80083ec:	463b      	mov	r3, r7
 80083ee:	4680      	mov	r8, r0
 80083f0:	4689      	mov	r9, r1
 80083f2:	4650      	mov	r0, sl
 80083f4:	4659      	mov	r1, fp
 80083f6:	f7f8 f86f 	bl	80004d8 <__aeabi_dmul>
 80083fa:	4604      	mov	r4, r0
 80083fc:	460d      	mov	r5, r1
 80083fe:	460b      	mov	r3, r1
 8008400:	4602      	mov	r2, r0
 8008402:	4649      	mov	r1, r9
 8008404:	4640      	mov	r0, r8
 8008406:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800840a:	f7f7 feaf 	bl	800016c <__adddf3>
 800840e:	4b18      	ldr	r3, [pc, #96]	; (8008470 <__ieee754_pow+0x3e0>)
 8008410:	4682      	mov	sl, r0
 8008412:	4299      	cmp	r1, r3
 8008414:	460f      	mov	r7, r1
 8008416:	460e      	mov	r6, r1
 8008418:	f340 82e5 	ble.w	80089e6 <__ieee754_pow+0x956>
 800841c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8008420:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8008424:	4303      	orrs	r3, r0
 8008426:	f000 81df 	beq.w	80087e8 <__ieee754_pow+0x758>
 800842a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800842e:	2200      	movs	r2, #0
 8008430:	2300      	movs	r3, #0
 8008432:	f7f8 fac3 	bl	80009bc <__aeabi_dcmplt>
 8008436:	3800      	subs	r0, #0
 8008438:	bf18      	it	ne
 800843a:	2001      	movne	r0, #1
 800843c:	e72e      	b.n	800829c <__ieee754_pow+0x20c>
 800843e:	bf00      	nop
 8008440:	60000000 	.word	0x60000000
 8008444:	3ff71547 	.word	0x3ff71547
 8008448:	f85ddf44 	.word	0xf85ddf44
 800844c:	3e54ae0b 	.word	0x3e54ae0b
 8008450:	55555555 	.word	0x55555555
 8008454:	3fd55555 	.word	0x3fd55555
 8008458:	652b82fe 	.word	0x652b82fe
 800845c:	3ff71547 	.word	0x3ff71547
 8008460:	3ff00000 	.word	0x3ff00000
 8008464:	3fd00000 	.word	0x3fd00000
 8008468:	3fe00000 	.word	0x3fe00000
 800846c:	bff00000 	.word	0xbff00000
 8008470:	408fffff 	.word	0x408fffff
 8008474:	4bd2      	ldr	r3, [pc, #840]	; (80087c0 <__ieee754_pow+0x730>)
 8008476:	2200      	movs	r2, #0
 8008478:	402b      	ands	r3, r5
 800847a:	b943      	cbnz	r3, 800848e <__ieee754_pow+0x3fe>
 800847c:	4658      	mov	r0, fp
 800847e:	4661      	mov	r1, ip
 8008480:	4bd0      	ldr	r3, [pc, #832]	; (80087c4 <__ieee754_pow+0x734>)
 8008482:	f7f8 f829 	bl	80004d8 <__aeabi_dmul>
 8008486:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800848a:	4683      	mov	fp, r0
 800848c:	460c      	mov	r4, r1
 800848e:	1523      	asrs	r3, r4, #20
 8008490:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008494:	4413      	add	r3, r2
 8008496:	930b      	str	r3, [sp, #44]	; 0x2c
 8008498:	4bcb      	ldr	r3, [pc, #812]	; (80087c8 <__ieee754_pow+0x738>)
 800849a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800849e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80084a2:	429c      	cmp	r4, r3
 80084a4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80084a8:	dd08      	ble.n	80084bc <__ieee754_pow+0x42c>
 80084aa:	4bc8      	ldr	r3, [pc, #800]	; (80087cc <__ieee754_pow+0x73c>)
 80084ac:	429c      	cmp	r4, r3
 80084ae:	f340 8199 	ble.w	80087e4 <__ieee754_pow+0x754>
 80084b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084b4:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80084b8:	3301      	adds	r3, #1
 80084ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80084bc:	2600      	movs	r6, #0
 80084be:	00f3      	lsls	r3, r6, #3
 80084c0:	930d      	str	r3, [sp, #52]	; 0x34
 80084c2:	4bc3      	ldr	r3, [pc, #780]	; (80087d0 <__ieee754_pow+0x740>)
 80084c4:	4658      	mov	r0, fp
 80084c6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80084ca:	e9d3 3400 	ldrd	r3, r4, [r3]
 80084ce:	4629      	mov	r1, r5
 80084d0:	461a      	mov	r2, r3
 80084d2:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80084d6:	4623      	mov	r3, r4
 80084d8:	f7f7 fe46 	bl	8000168 <__aeabi_dsub>
 80084dc:	46da      	mov	sl, fp
 80084de:	462b      	mov	r3, r5
 80084e0:	4652      	mov	r2, sl
 80084e2:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80084e6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80084ea:	f7f7 fe3f 	bl	800016c <__adddf3>
 80084ee:	4602      	mov	r2, r0
 80084f0:	460b      	mov	r3, r1
 80084f2:	2000      	movs	r0, #0
 80084f4:	49b7      	ldr	r1, [pc, #732]	; (80087d4 <__ieee754_pow+0x744>)
 80084f6:	f7f8 f919 	bl	800072c <__aeabi_ddiv>
 80084fa:	4602      	mov	r2, r0
 80084fc:	460b      	mov	r3, r1
 80084fe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008502:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008506:	f7f7 ffe7 	bl	80004d8 <__aeabi_dmul>
 800850a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800850e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8008512:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008516:	2300      	movs	r3, #0
 8008518:	2200      	movs	r2, #0
 800851a:	46ab      	mov	fp, r5
 800851c:	106d      	asrs	r5, r5, #1
 800851e:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8008522:	9304      	str	r3, [sp, #16]
 8008524:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8008528:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800852c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8008530:	4640      	mov	r0, r8
 8008532:	4649      	mov	r1, r9
 8008534:	4614      	mov	r4, r2
 8008536:	461d      	mov	r5, r3
 8008538:	f7f7 ffce 	bl	80004d8 <__aeabi_dmul>
 800853c:	4602      	mov	r2, r0
 800853e:	460b      	mov	r3, r1
 8008540:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008544:	f7f7 fe10 	bl	8000168 <__aeabi_dsub>
 8008548:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800854c:	4606      	mov	r6, r0
 800854e:	460f      	mov	r7, r1
 8008550:	4620      	mov	r0, r4
 8008552:	4629      	mov	r1, r5
 8008554:	f7f7 fe08 	bl	8000168 <__aeabi_dsub>
 8008558:	4602      	mov	r2, r0
 800855a:	460b      	mov	r3, r1
 800855c:	4650      	mov	r0, sl
 800855e:	4659      	mov	r1, fp
 8008560:	f7f7 fe02 	bl	8000168 <__aeabi_dsub>
 8008564:	4642      	mov	r2, r8
 8008566:	464b      	mov	r3, r9
 8008568:	f7f7 ffb6 	bl	80004d8 <__aeabi_dmul>
 800856c:	4602      	mov	r2, r0
 800856e:	460b      	mov	r3, r1
 8008570:	4630      	mov	r0, r6
 8008572:	4639      	mov	r1, r7
 8008574:	f7f7 fdf8 	bl	8000168 <__aeabi_dsub>
 8008578:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800857c:	f7f7 ffac 	bl	80004d8 <__aeabi_dmul>
 8008580:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008584:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008588:	4610      	mov	r0, r2
 800858a:	4619      	mov	r1, r3
 800858c:	f7f7 ffa4 	bl	80004d8 <__aeabi_dmul>
 8008590:	a379      	add	r3, pc, #484	; (adr r3, 8008778 <__ieee754_pow+0x6e8>)
 8008592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008596:	4604      	mov	r4, r0
 8008598:	460d      	mov	r5, r1
 800859a:	f7f7 ff9d 	bl	80004d8 <__aeabi_dmul>
 800859e:	a378      	add	r3, pc, #480	; (adr r3, 8008780 <__ieee754_pow+0x6f0>)
 80085a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a4:	f7f7 fde2 	bl	800016c <__adddf3>
 80085a8:	4622      	mov	r2, r4
 80085aa:	462b      	mov	r3, r5
 80085ac:	f7f7 ff94 	bl	80004d8 <__aeabi_dmul>
 80085b0:	a375      	add	r3, pc, #468	; (adr r3, 8008788 <__ieee754_pow+0x6f8>)
 80085b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085b6:	f7f7 fdd9 	bl	800016c <__adddf3>
 80085ba:	4622      	mov	r2, r4
 80085bc:	462b      	mov	r3, r5
 80085be:	f7f7 ff8b 	bl	80004d8 <__aeabi_dmul>
 80085c2:	a373      	add	r3, pc, #460	; (adr r3, 8008790 <__ieee754_pow+0x700>)
 80085c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085c8:	f7f7 fdd0 	bl	800016c <__adddf3>
 80085cc:	4622      	mov	r2, r4
 80085ce:	462b      	mov	r3, r5
 80085d0:	f7f7 ff82 	bl	80004d8 <__aeabi_dmul>
 80085d4:	a370      	add	r3, pc, #448	; (adr r3, 8008798 <__ieee754_pow+0x708>)
 80085d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085da:	f7f7 fdc7 	bl	800016c <__adddf3>
 80085de:	4622      	mov	r2, r4
 80085e0:	462b      	mov	r3, r5
 80085e2:	f7f7 ff79 	bl	80004d8 <__aeabi_dmul>
 80085e6:	a36e      	add	r3, pc, #440	; (adr r3, 80087a0 <__ieee754_pow+0x710>)
 80085e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ec:	f7f7 fdbe 	bl	800016c <__adddf3>
 80085f0:	4622      	mov	r2, r4
 80085f2:	4606      	mov	r6, r0
 80085f4:	460f      	mov	r7, r1
 80085f6:	462b      	mov	r3, r5
 80085f8:	4620      	mov	r0, r4
 80085fa:	4629      	mov	r1, r5
 80085fc:	f7f7 ff6c 	bl	80004d8 <__aeabi_dmul>
 8008600:	4602      	mov	r2, r0
 8008602:	460b      	mov	r3, r1
 8008604:	4630      	mov	r0, r6
 8008606:	4639      	mov	r1, r7
 8008608:	f7f7 ff66 	bl	80004d8 <__aeabi_dmul>
 800860c:	4604      	mov	r4, r0
 800860e:	460d      	mov	r5, r1
 8008610:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008614:	4642      	mov	r2, r8
 8008616:	464b      	mov	r3, r9
 8008618:	f7f7 fda8 	bl	800016c <__adddf3>
 800861c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008620:	f7f7 ff5a 	bl	80004d8 <__aeabi_dmul>
 8008624:	4622      	mov	r2, r4
 8008626:	462b      	mov	r3, r5
 8008628:	f7f7 fda0 	bl	800016c <__adddf3>
 800862c:	4642      	mov	r2, r8
 800862e:	4606      	mov	r6, r0
 8008630:	460f      	mov	r7, r1
 8008632:	464b      	mov	r3, r9
 8008634:	4640      	mov	r0, r8
 8008636:	4649      	mov	r1, r9
 8008638:	f7f7 ff4e 	bl	80004d8 <__aeabi_dmul>
 800863c:	2200      	movs	r2, #0
 800863e:	4b66      	ldr	r3, [pc, #408]	; (80087d8 <__ieee754_pow+0x748>)
 8008640:	4682      	mov	sl, r0
 8008642:	468b      	mov	fp, r1
 8008644:	f7f7 fd92 	bl	800016c <__adddf3>
 8008648:	4632      	mov	r2, r6
 800864a:	463b      	mov	r3, r7
 800864c:	f7f7 fd8e 	bl	800016c <__adddf3>
 8008650:	2400      	movs	r4, #0
 8008652:	460d      	mov	r5, r1
 8008654:	4622      	mov	r2, r4
 8008656:	460b      	mov	r3, r1
 8008658:	4640      	mov	r0, r8
 800865a:	4649      	mov	r1, r9
 800865c:	f7f7 ff3c 	bl	80004d8 <__aeabi_dmul>
 8008660:	2200      	movs	r2, #0
 8008662:	4680      	mov	r8, r0
 8008664:	4689      	mov	r9, r1
 8008666:	4620      	mov	r0, r4
 8008668:	4629      	mov	r1, r5
 800866a:	4b5b      	ldr	r3, [pc, #364]	; (80087d8 <__ieee754_pow+0x748>)
 800866c:	f7f7 fd7c 	bl	8000168 <__aeabi_dsub>
 8008670:	4652      	mov	r2, sl
 8008672:	465b      	mov	r3, fp
 8008674:	f7f7 fd78 	bl	8000168 <__aeabi_dsub>
 8008678:	4602      	mov	r2, r0
 800867a:	460b      	mov	r3, r1
 800867c:	4630      	mov	r0, r6
 800867e:	4639      	mov	r1, r7
 8008680:	f7f7 fd72 	bl	8000168 <__aeabi_dsub>
 8008684:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008688:	f7f7 ff26 	bl	80004d8 <__aeabi_dmul>
 800868c:	4622      	mov	r2, r4
 800868e:	4606      	mov	r6, r0
 8008690:	460f      	mov	r7, r1
 8008692:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008696:	462b      	mov	r3, r5
 8008698:	f7f7 ff1e 	bl	80004d8 <__aeabi_dmul>
 800869c:	4602      	mov	r2, r0
 800869e:	460b      	mov	r3, r1
 80086a0:	4630      	mov	r0, r6
 80086a2:	4639      	mov	r1, r7
 80086a4:	f7f7 fd62 	bl	800016c <__adddf3>
 80086a8:	2400      	movs	r4, #0
 80086aa:	4606      	mov	r6, r0
 80086ac:	460f      	mov	r7, r1
 80086ae:	4602      	mov	r2, r0
 80086b0:	460b      	mov	r3, r1
 80086b2:	4640      	mov	r0, r8
 80086b4:	4649      	mov	r1, r9
 80086b6:	f7f7 fd59 	bl	800016c <__adddf3>
 80086ba:	a33b      	add	r3, pc, #236	; (adr r3, 80087a8 <__ieee754_pow+0x718>)
 80086bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086c0:	4620      	mov	r0, r4
 80086c2:	460d      	mov	r5, r1
 80086c4:	f7f7 ff08 	bl	80004d8 <__aeabi_dmul>
 80086c8:	4642      	mov	r2, r8
 80086ca:	464b      	mov	r3, r9
 80086cc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80086d0:	4620      	mov	r0, r4
 80086d2:	4629      	mov	r1, r5
 80086d4:	f7f7 fd48 	bl	8000168 <__aeabi_dsub>
 80086d8:	4602      	mov	r2, r0
 80086da:	460b      	mov	r3, r1
 80086dc:	4630      	mov	r0, r6
 80086de:	4639      	mov	r1, r7
 80086e0:	f7f7 fd42 	bl	8000168 <__aeabi_dsub>
 80086e4:	a332      	add	r3, pc, #200	; (adr r3, 80087b0 <__ieee754_pow+0x720>)
 80086e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ea:	f7f7 fef5 	bl	80004d8 <__aeabi_dmul>
 80086ee:	a332      	add	r3, pc, #200	; (adr r3, 80087b8 <__ieee754_pow+0x728>)
 80086f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086f4:	4606      	mov	r6, r0
 80086f6:	460f      	mov	r7, r1
 80086f8:	4620      	mov	r0, r4
 80086fa:	4629      	mov	r1, r5
 80086fc:	f7f7 feec 	bl	80004d8 <__aeabi_dmul>
 8008700:	4602      	mov	r2, r0
 8008702:	460b      	mov	r3, r1
 8008704:	4630      	mov	r0, r6
 8008706:	4639      	mov	r1, r7
 8008708:	f7f7 fd30 	bl	800016c <__adddf3>
 800870c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800870e:	4b33      	ldr	r3, [pc, #204]	; (80087dc <__ieee754_pow+0x74c>)
 8008710:	f04f 0a00 	mov.w	sl, #0
 8008714:	4413      	add	r3, r2
 8008716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800871a:	f7f7 fd27 	bl	800016c <__adddf3>
 800871e:	4680      	mov	r8, r0
 8008720:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008722:	4689      	mov	r9, r1
 8008724:	f7f7 fe6e 	bl	8000404 <__aeabi_i2d>
 8008728:	4604      	mov	r4, r0
 800872a:	460d      	mov	r5, r1
 800872c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800872e:	4b2c      	ldr	r3, [pc, #176]	; (80087e0 <__ieee754_pow+0x750>)
 8008730:	4413      	add	r3, r2
 8008732:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008736:	4642      	mov	r2, r8
 8008738:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800873c:	464b      	mov	r3, r9
 800873e:	f7f7 fd15 	bl	800016c <__adddf3>
 8008742:	4632      	mov	r2, r6
 8008744:	463b      	mov	r3, r7
 8008746:	f7f7 fd11 	bl	800016c <__adddf3>
 800874a:	4622      	mov	r2, r4
 800874c:	462b      	mov	r3, r5
 800874e:	f7f7 fd0d 	bl	800016c <__adddf3>
 8008752:	4622      	mov	r2, r4
 8008754:	462b      	mov	r3, r5
 8008756:	4650      	mov	r0, sl
 8008758:	468b      	mov	fp, r1
 800875a:	f7f7 fd05 	bl	8000168 <__aeabi_dsub>
 800875e:	4632      	mov	r2, r6
 8008760:	463b      	mov	r3, r7
 8008762:	f7f7 fd01 	bl	8000168 <__aeabi_dsub>
 8008766:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800876a:	f7f7 fcfd 	bl	8000168 <__aeabi_dsub>
 800876e:	4602      	mov	r2, r0
 8008770:	460b      	mov	r3, r1
 8008772:	4640      	mov	r0, r8
 8008774:	4649      	mov	r1, r9
 8008776:	e60d      	b.n	8008394 <__ieee754_pow+0x304>
 8008778:	4a454eef 	.word	0x4a454eef
 800877c:	3fca7e28 	.word	0x3fca7e28
 8008780:	93c9db65 	.word	0x93c9db65
 8008784:	3fcd864a 	.word	0x3fcd864a
 8008788:	a91d4101 	.word	0xa91d4101
 800878c:	3fd17460 	.word	0x3fd17460
 8008790:	518f264d 	.word	0x518f264d
 8008794:	3fd55555 	.word	0x3fd55555
 8008798:	db6fabff 	.word	0xdb6fabff
 800879c:	3fdb6db6 	.word	0x3fdb6db6
 80087a0:	33333303 	.word	0x33333303
 80087a4:	3fe33333 	.word	0x3fe33333
 80087a8:	e0000000 	.word	0xe0000000
 80087ac:	3feec709 	.word	0x3feec709
 80087b0:	dc3a03fd 	.word	0xdc3a03fd
 80087b4:	3feec709 	.word	0x3feec709
 80087b8:	145b01f5 	.word	0x145b01f5
 80087bc:	be3e2fe0 	.word	0xbe3e2fe0
 80087c0:	7ff00000 	.word	0x7ff00000
 80087c4:	43400000 	.word	0x43400000
 80087c8:	0003988e 	.word	0x0003988e
 80087cc:	000bb679 	.word	0x000bb679
 80087d0:	08008e28 	.word	0x08008e28
 80087d4:	3ff00000 	.word	0x3ff00000
 80087d8:	40080000 	.word	0x40080000
 80087dc:	08008e48 	.word	0x08008e48
 80087e0:	08008e38 	.word	0x08008e38
 80087e4:	2601      	movs	r6, #1
 80087e6:	e66a      	b.n	80084be <__ieee754_pow+0x42e>
 80087e8:	a39d      	add	r3, pc, #628	; (adr r3, 8008a60 <__ieee754_pow+0x9d0>)
 80087ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ee:	4640      	mov	r0, r8
 80087f0:	4649      	mov	r1, r9
 80087f2:	f7f7 fcbb 	bl	800016c <__adddf3>
 80087f6:	4622      	mov	r2, r4
 80087f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80087fc:	462b      	mov	r3, r5
 80087fe:	4650      	mov	r0, sl
 8008800:	4639      	mov	r1, r7
 8008802:	f7f7 fcb1 	bl	8000168 <__aeabi_dsub>
 8008806:	4602      	mov	r2, r0
 8008808:	460b      	mov	r3, r1
 800880a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800880e:	f7f8 f8f3 	bl	80009f8 <__aeabi_dcmpgt>
 8008812:	2800      	cmp	r0, #0
 8008814:	f47f ae09 	bne.w	800842a <__ieee754_pow+0x39a>
 8008818:	4aa3      	ldr	r2, [pc, #652]	; (8008aa8 <__ieee754_pow+0xa18>)
 800881a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800881e:	4293      	cmp	r3, r2
 8008820:	f340 8101 	ble.w	8008a26 <__ieee754_pow+0x996>
 8008824:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8008828:	2000      	movs	r0, #0
 800882a:	151b      	asrs	r3, r3, #20
 800882c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008830:	fa4a f303 	asr.w	r3, sl, r3
 8008834:	4433      	add	r3, r6
 8008836:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800883a:	4f9c      	ldr	r7, [pc, #624]	; (8008aac <__ieee754_pow+0xa1c>)
 800883c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008840:	4117      	asrs	r7, r2
 8008842:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8008846:	ea23 0107 	bic.w	r1, r3, r7
 800884a:	f1c2 0214 	rsb	r2, r2, #20
 800884e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008852:	460b      	mov	r3, r1
 8008854:	fa4a fa02 	asr.w	sl, sl, r2
 8008858:	2e00      	cmp	r6, #0
 800885a:	4602      	mov	r2, r0
 800885c:	4629      	mov	r1, r5
 800885e:	4620      	mov	r0, r4
 8008860:	bfb8      	it	lt
 8008862:	f1ca 0a00 	rsblt	sl, sl, #0
 8008866:	f7f7 fc7f 	bl	8000168 <__aeabi_dsub>
 800886a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800886e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008872:	2400      	movs	r4, #0
 8008874:	4642      	mov	r2, r8
 8008876:	464b      	mov	r3, r9
 8008878:	f7f7 fc78 	bl	800016c <__adddf3>
 800887c:	a37a      	add	r3, pc, #488	; (adr r3, 8008a68 <__ieee754_pow+0x9d8>)
 800887e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008882:	4620      	mov	r0, r4
 8008884:	460d      	mov	r5, r1
 8008886:	f7f7 fe27 	bl	80004d8 <__aeabi_dmul>
 800888a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800888e:	4606      	mov	r6, r0
 8008890:	460f      	mov	r7, r1
 8008892:	4620      	mov	r0, r4
 8008894:	4629      	mov	r1, r5
 8008896:	f7f7 fc67 	bl	8000168 <__aeabi_dsub>
 800889a:	4602      	mov	r2, r0
 800889c:	460b      	mov	r3, r1
 800889e:	4640      	mov	r0, r8
 80088a0:	4649      	mov	r1, r9
 80088a2:	f7f7 fc61 	bl	8000168 <__aeabi_dsub>
 80088a6:	a372      	add	r3, pc, #456	; (adr r3, 8008a70 <__ieee754_pow+0x9e0>)
 80088a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ac:	f7f7 fe14 	bl	80004d8 <__aeabi_dmul>
 80088b0:	a371      	add	r3, pc, #452	; (adr r3, 8008a78 <__ieee754_pow+0x9e8>)
 80088b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088b6:	4680      	mov	r8, r0
 80088b8:	4689      	mov	r9, r1
 80088ba:	4620      	mov	r0, r4
 80088bc:	4629      	mov	r1, r5
 80088be:	f7f7 fe0b 	bl	80004d8 <__aeabi_dmul>
 80088c2:	4602      	mov	r2, r0
 80088c4:	460b      	mov	r3, r1
 80088c6:	4640      	mov	r0, r8
 80088c8:	4649      	mov	r1, r9
 80088ca:	f7f7 fc4f 	bl	800016c <__adddf3>
 80088ce:	4604      	mov	r4, r0
 80088d0:	460d      	mov	r5, r1
 80088d2:	4602      	mov	r2, r0
 80088d4:	460b      	mov	r3, r1
 80088d6:	4630      	mov	r0, r6
 80088d8:	4639      	mov	r1, r7
 80088da:	f7f7 fc47 	bl	800016c <__adddf3>
 80088de:	4632      	mov	r2, r6
 80088e0:	463b      	mov	r3, r7
 80088e2:	4680      	mov	r8, r0
 80088e4:	4689      	mov	r9, r1
 80088e6:	f7f7 fc3f 	bl	8000168 <__aeabi_dsub>
 80088ea:	4602      	mov	r2, r0
 80088ec:	460b      	mov	r3, r1
 80088ee:	4620      	mov	r0, r4
 80088f0:	4629      	mov	r1, r5
 80088f2:	f7f7 fc39 	bl	8000168 <__aeabi_dsub>
 80088f6:	4642      	mov	r2, r8
 80088f8:	4606      	mov	r6, r0
 80088fa:	460f      	mov	r7, r1
 80088fc:	464b      	mov	r3, r9
 80088fe:	4640      	mov	r0, r8
 8008900:	4649      	mov	r1, r9
 8008902:	f7f7 fde9 	bl	80004d8 <__aeabi_dmul>
 8008906:	a35e      	add	r3, pc, #376	; (adr r3, 8008a80 <__ieee754_pow+0x9f0>)
 8008908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800890c:	4604      	mov	r4, r0
 800890e:	460d      	mov	r5, r1
 8008910:	f7f7 fde2 	bl	80004d8 <__aeabi_dmul>
 8008914:	a35c      	add	r3, pc, #368	; (adr r3, 8008a88 <__ieee754_pow+0x9f8>)
 8008916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800891a:	f7f7 fc25 	bl	8000168 <__aeabi_dsub>
 800891e:	4622      	mov	r2, r4
 8008920:	462b      	mov	r3, r5
 8008922:	f7f7 fdd9 	bl	80004d8 <__aeabi_dmul>
 8008926:	a35a      	add	r3, pc, #360	; (adr r3, 8008a90 <__ieee754_pow+0xa00>)
 8008928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800892c:	f7f7 fc1e 	bl	800016c <__adddf3>
 8008930:	4622      	mov	r2, r4
 8008932:	462b      	mov	r3, r5
 8008934:	f7f7 fdd0 	bl	80004d8 <__aeabi_dmul>
 8008938:	a357      	add	r3, pc, #348	; (adr r3, 8008a98 <__ieee754_pow+0xa08>)
 800893a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800893e:	f7f7 fc13 	bl	8000168 <__aeabi_dsub>
 8008942:	4622      	mov	r2, r4
 8008944:	462b      	mov	r3, r5
 8008946:	f7f7 fdc7 	bl	80004d8 <__aeabi_dmul>
 800894a:	a355      	add	r3, pc, #340	; (adr r3, 8008aa0 <__ieee754_pow+0xa10>)
 800894c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008950:	f7f7 fc0c 	bl	800016c <__adddf3>
 8008954:	4622      	mov	r2, r4
 8008956:	462b      	mov	r3, r5
 8008958:	f7f7 fdbe 	bl	80004d8 <__aeabi_dmul>
 800895c:	4602      	mov	r2, r0
 800895e:	460b      	mov	r3, r1
 8008960:	4640      	mov	r0, r8
 8008962:	4649      	mov	r1, r9
 8008964:	f7f7 fc00 	bl	8000168 <__aeabi_dsub>
 8008968:	4604      	mov	r4, r0
 800896a:	460d      	mov	r5, r1
 800896c:	4602      	mov	r2, r0
 800896e:	460b      	mov	r3, r1
 8008970:	4640      	mov	r0, r8
 8008972:	4649      	mov	r1, r9
 8008974:	f7f7 fdb0 	bl	80004d8 <__aeabi_dmul>
 8008978:	2200      	movs	r2, #0
 800897a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800897e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008982:	4620      	mov	r0, r4
 8008984:	4629      	mov	r1, r5
 8008986:	f7f7 fbef 	bl	8000168 <__aeabi_dsub>
 800898a:	4602      	mov	r2, r0
 800898c:	460b      	mov	r3, r1
 800898e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008992:	f7f7 fecb 	bl	800072c <__aeabi_ddiv>
 8008996:	4632      	mov	r2, r6
 8008998:	4604      	mov	r4, r0
 800899a:	460d      	mov	r5, r1
 800899c:	463b      	mov	r3, r7
 800899e:	4640      	mov	r0, r8
 80089a0:	4649      	mov	r1, r9
 80089a2:	f7f7 fd99 	bl	80004d8 <__aeabi_dmul>
 80089a6:	4632      	mov	r2, r6
 80089a8:	463b      	mov	r3, r7
 80089aa:	f7f7 fbdf 	bl	800016c <__adddf3>
 80089ae:	4602      	mov	r2, r0
 80089b0:	460b      	mov	r3, r1
 80089b2:	4620      	mov	r0, r4
 80089b4:	4629      	mov	r1, r5
 80089b6:	f7f7 fbd7 	bl	8000168 <__aeabi_dsub>
 80089ba:	4642      	mov	r2, r8
 80089bc:	464b      	mov	r3, r9
 80089be:	f7f7 fbd3 	bl	8000168 <__aeabi_dsub>
 80089c2:	4602      	mov	r2, r0
 80089c4:	460b      	mov	r3, r1
 80089c6:	2000      	movs	r0, #0
 80089c8:	4939      	ldr	r1, [pc, #228]	; (8008ab0 <__ieee754_pow+0xa20>)
 80089ca:	f7f7 fbcd 	bl	8000168 <__aeabi_dsub>
 80089ce:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80089d2:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80089d6:	da29      	bge.n	8008a2c <__ieee754_pow+0x99c>
 80089d8:	4652      	mov	r2, sl
 80089da:	f000 f955 	bl	8008c88 <scalbn>
 80089de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80089e2:	f7ff bbfe 	b.w	80081e2 <__ieee754_pow+0x152>
 80089e6:	4b33      	ldr	r3, [pc, #204]	; (8008ab4 <__ieee754_pow+0xa24>)
 80089e8:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80089ec:	429f      	cmp	r7, r3
 80089ee:	f77f af13 	ble.w	8008818 <__ieee754_pow+0x788>
 80089f2:	4b31      	ldr	r3, [pc, #196]	; (8008ab8 <__ieee754_pow+0xa28>)
 80089f4:	440b      	add	r3, r1
 80089f6:	4303      	orrs	r3, r0
 80089f8:	d009      	beq.n	8008a0e <__ieee754_pow+0x97e>
 80089fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80089fe:	2200      	movs	r2, #0
 8008a00:	2300      	movs	r3, #0
 8008a02:	f7f7 ffdb 	bl	80009bc <__aeabi_dcmplt>
 8008a06:	3800      	subs	r0, #0
 8008a08:	bf18      	it	ne
 8008a0a:	2001      	movne	r0, #1
 8008a0c:	e453      	b.n	80082b6 <__ieee754_pow+0x226>
 8008a0e:	4622      	mov	r2, r4
 8008a10:	462b      	mov	r3, r5
 8008a12:	f7f7 fba9 	bl	8000168 <__aeabi_dsub>
 8008a16:	4642      	mov	r2, r8
 8008a18:	464b      	mov	r3, r9
 8008a1a:	f7f7 ffe3 	bl	80009e4 <__aeabi_dcmpge>
 8008a1e:	2800      	cmp	r0, #0
 8008a20:	f43f aefa 	beq.w	8008818 <__ieee754_pow+0x788>
 8008a24:	e7e9      	b.n	80089fa <__ieee754_pow+0x96a>
 8008a26:	f04f 0a00 	mov.w	sl, #0
 8008a2a:	e720      	b.n	800886e <__ieee754_pow+0x7de>
 8008a2c:	4621      	mov	r1, r4
 8008a2e:	e7d6      	b.n	80089de <__ieee754_pow+0x94e>
 8008a30:	f04f 0b00 	mov.w	fp, #0
 8008a34:	f8df c078 	ldr.w	ip, [pc, #120]	; 8008ab0 <__ieee754_pow+0xa20>
 8008a38:	f7ff bbba 	b.w	80081b0 <__ieee754_pow+0x120>
 8008a3c:	f04f 0b00 	mov.w	fp, #0
 8008a40:	f04f 0c00 	mov.w	ip, #0
 8008a44:	f7ff bbb4 	b.w	80081b0 <__ieee754_pow+0x120>
 8008a48:	4640      	mov	r0, r8
 8008a4a:	4649      	mov	r1, r9
 8008a4c:	f7ff bb3d 	b.w	80080ca <__ieee754_pow+0x3a>
 8008a50:	9200      	str	r2, [sp, #0]
 8008a52:	f7ff bb89 	b.w	8008168 <__ieee754_pow+0xd8>
 8008a56:	2300      	movs	r3, #0
 8008a58:	f7ff bb73 	b.w	8008142 <__ieee754_pow+0xb2>
 8008a5c:	f3af 8000 	nop.w
 8008a60:	652b82fe 	.word	0x652b82fe
 8008a64:	3c971547 	.word	0x3c971547
 8008a68:	00000000 	.word	0x00000000
 8008a6c:	3fe62e43 	.word	0x3fe62e43
 8008a70:	fefa39ef 	.word	0xfefa39ef
 8008a74:	3fe62e42 	.word	0x3fe62e42
 8008a78:	0ca86c39 	.word	0x0ca86c39
 8008a7c:	be205c61 	.word	0xbe205c61
 8008a80:	72bea4d0 	.word	0x72bea4d0
 8008a84:	3e663769 	.word	0x3e663769
 8008a88:	c5d26bf1 	.word	0xc5d26bf1
 8008a8c:	3ebbbd41 	.word	0x3ebbbd41
 8008a90:	af25de2c 	.word	0xaf25de2c
 8008a94:	3f11566a 	.word	0x3f11566a
 8008a98:	16bebd93 	.word	0x16bebd93
 8008a9c:	3f66c16c 	.word	0x3f66c16c
 8008aa0:	5555553e 	.word	0x5555553e
 8008aa4:	3fc55555 	.word	0x3fc55555
 8008aa8:	3fe00000 	.word	0x3fe00000
 8008aac:	000fffff 	.word	0x000fffff
 8008ab0:	3ff00000 	.word	0x3ff00000
 8008ab4:	4090cbff 	.word	0x4090cbff
 8008ab8:	3f6f3400 	.word	0x3f6f3400

08008abc <__ieee754_sqrt>:
 8008abc:	f8df c158 	ldr.w	ip, [pc, #344]	; 8008c18 <__ieee754_sqrt+0x15c>
 8008ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ac4:	ea3c 0c01 	bics.w	ip, ip, r1
 8008ac8:	4606      	mov	r6, r0
 8008aca:	460d      	mov	r5, r1
 8008acc:	460c      	mov	r4, r1
 8008ace:	460a      	mov	r2, r1
 8008ad0:	4607      	mov	r7, r0
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	d10f      	bne.n	8008af6 <__ieee754_sqrt+0x3a>
 8008ad6:	4602      	mov	r2, r0
 8008ad8:	460b      	mov	r3, r1
 8008ada:	f7f7 fcfd 	bl	80004d8 <__aeabi_dmul>
 8008ade:	4602      	mov	r2, r0
 8008ae0:	460b      	mov	r3, r1
 8008ae2:	4630      	mov	r0, r6
 8008ae4:	4629      	mov	r1, r5
 8008ae6:	f7f7 fb41 	bl	800016c <__adddf3>
 8008aea:	4606      	mov	r6, r0
 8008aec:	460d      	mov	r5, r1
 8008aee:	4630      	mov	r0, r6
 8008af0:	4629      	mov	r1, r5
 8008af2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008af6:	2900      	cmp	r1, #0
 8008af8:	dc0e      	bgt.n	8008b18 <__ieee754_sqrt+0x5c>
 8008afa:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8008afe:	ea5c 0707 	orrs.w	r7, ip, r7
 8008b02:	d0f4      	beq.n	8008aee <__ieee754_sqrt+0x32>
 8008b04:	b141      	cbz	r1, 8008b18 <__ieee754_sqrt+0x5c>
 8008b06:	4602      	mov	r2, r0
 8008b08:	460b      	mov	r3, r1
 8008b0a:	f7f7 fb2d 	bl	8000168 <__aeabi_dsub>
 8008b0e:	4602      	mov	r2, r0
 8008b10:	460b      	mov	r3, r1
 8008b12:	f7f7 fe0b 	bl	800072c <__aeabi_ddiv>
 8008b16:	e7e8      	b.n	8008aea <__ieee754_sqrt+0x2e>
 8008b18:	1521      	asrs	r1, r4, #20
 8008b1a:	d075      	beq.n	8008c08 <__ieee754_sqrt+0x14c>
 8008b1c:	07cc      	lsls	r4, r1, #31
 8008b1e:	f04f 0400 	mov.w	r4, #0
 8008b22:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8008b26:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 8008b2a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008b2e:	bf5e      	ittt	pl
 8008b30:	0fd9      	lsrpl	r1, r3, #31
 8008b32:	005b      	lslpl	r3, r3, #1
 8008b34:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8008b38:	0fd9      	lsrs	r1, r3, #31
 8008b3a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8008b3e:	2516      	movs	r5, #22
 8008b40:	4620      	mov	r0, r4
 8008b42:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008b46:	107f      	asrs	r7, r7, #1
 8008b48:	005b      	lsls	r3, r3, #1
 8008b4a:	1846      	adds	r6, r0, r1
 8008b4c:	4296      	cmp	r6, r2
 8008b4e:	bfde      	ittt	le
 8008b50:	1b92      	suble	r2, r2, r6
 8008b52:	1870      	addle	r0, r6, r1
 8008b54:	1864      	addle	r4, r4, r1
 8008b56:	0052      	lsls	r2, r2, #1
 8008b58:	3d01      	subs	r5, #1
 8008b5a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8008b5e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008b62:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008b66:	d1f0      	bne.n	8008b4a <__ieee754_sqrt+0x8e>
 8008b68:	4629      	mov	r1, r5
 8008b6a:	f04f 0e20 	mov.w	lr, #32
 8008b6e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008b72:	4282      	cmp	r2, r0
 8008b74:	eb06 0c05 	add.w	ip, r6, r5
 8008b78:	dc02      	bgt.n	8008b80 <__ieee754_sqrt+0xc4>
 8008b7a:	d113      	bne.n	8008ba4 <__ieee754_sqrt+0xe8>
 8008b7c:	459c      	cmp	ip, r3
 8008b7e:	d811      	bhi.n	8008ba4 <__ieee754_sqrt+0xe8>
 8008b80:	f1bc 0f00 	cmp.w	ip, #0
 8008b84:	eb0c 0506 	add.w	r5, ip, r6
 8008b88:	da43      	bge.n	8008c12 <__ieee754_sqrt+0x156>
 8008b8a:	2d00      	cmp	r5, #0
 8008b8c:	db41      	blt.n	8008c12 <__ieee754_sqrt+0x156>
 8008b8e:	f100 0801 	add.w	r8, r0, #1
 8008b92:	1a12      	subs	r2, r2, r0
 8008b94:	4640      	mov	r0, r8
 8008b96:	459c      	cmp	ip, r3
 8008b98:	bf88      	it	hi
 8008b9a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8008b9e:	eba3 030c 	sub.w	r3, r3, ip
 8008ba2:	4431      	add	r1, r6
 8008ba4:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8008ba8:	f1be 0e01 	subs.w	lr, lr, #1
 8008bac:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8008bb0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008bb4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008bb8:	d1db      	bne.n	8008b72 <__ieee754_sqrt+0xb6>
 8008bba:	4313      	orrs	r3, r2
 8008bbc:	d006      	beq.n	8008bcc <__ieee754_sqrt+0x110>
 8008bbe:	1c48      	adds	r0, r1, #1
 8008bc0:	bf0b      	itete	eq
 8008bc2:	4671      	moveq	r1, lr
 8008bc4:	3101      	addne	r1, #1
 8008bc6:	3401      	addeq	r4, #1
 8008bc8:	f021 0101 	bicne.w	r1, r1, #1
 8008bcc:	1063      	asrs	r3, r4, #1
 8008bce:	0849      	lsrs	r1, r1, #1
 8008bd0:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008bd4:	07e2      	lsls	r2, r4, #31
 8008bd6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8008bda:	bf48      	it	mi
 8008bdc:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8008be0:	460e      	mov	r6, r1
 8008be2:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8008be6:	e782      	b.n	8008aee <__ieee754_sqrt+0x32>
 8008be8:	0ada      	lsrs	r2, r3, #11
 8008bea:	3815      	subs	r0, #21
 8008bec:	055b      	lsls	r3, r3, #21
 8008bee:	2a00      	cmp	r2, #0
 8008bf0:	d0fa      	beq.n	8008be8 <__ieee754_sqrt+0x12c>
 8008bf2:	02d5      	lsls	r5, r2, #11
 8008bf4:	d50a      	bpl.n	8008c0c <__ieee754_sqrt+0x150>
 8008bf6:	f1c1 0420 	rsb	r4, r1, #32
 8008bfa:	fa23 f404 	lsr.w	r4, r3, r4
 8008bfe:	1e4d      	subs	r5, r1, #1
 8008c00:	408b      	lsls	r3, r1
 8008c02:	4322      	orrs	r2, r4
 8008c04:	1b41      	subs	r1, r0, r5
 8008c06:	e789      	b.n	8008b1c <__ieee754_sqrt+0x60>
 8008c08:	4608      	mov	r0, r1
 8008c0a:	e7f0      	b.n	8008bee <__ieee754_sqrt+0x132>
 8008c0c:	0052      	lsls	r2, r2, #1
 8008c0e:	3101      	adds	r1, #1
 8008c10:	e7ef      	b.n	8008bf2 <__ieee754_sqrt+0x136>
 8008c12:	4680      	mov	r8, r0
 8008c14:	e7bd      	b.n	8008b92 <__ieee754_sqrt+0xd6>
 8008c16:	bf00      	nop
 8008c18:	7ff00000 	.word	0x7ff00000

08008c1c <with_errno>:
 8008c1c:	b570      	push	{r4, r5, r6, lr}
 8008c1e:	4604      	mov	r4, r0
 8008c20:	460d      	mov	r5, r1
 8008c22:	4616      	mov	r6, r2
 8008c24:	f7ff f998 	bl	8007f58 <__errno>
 8008c28:	4629      	mov	r1, r5
 8008c2a:	6006      	str	r6, [r0, #0]
 8008c2c:	4620      	mov	r0, r4
 8008c2e:	bd70      	pop	{r4, r5, r6, pc}

08008c30 <xflow>:
 8008c30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008c32:	4615      	mov	r5, r2
 8008c34:	461c      	mov	r4, r3
 8008c36:	b180      	cbz	r0, 8008c5a <xflow+0x2a>
 8008c38:	4610      	mov	r0, r2
 8008c3a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008c3e:	e9cd 0100 	strd	r0, r1, [sp]
 8008c42:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c46:	4628      	mov	r0, r5
 8008c48:	4621      	mov	r1, r4
 8008c4a:	f7f7 fc45 	bl	80004d8 <__aeabi_dmul>
 8008c4e:	2222      	movs	r2, #34	; 0x22
 8008c50:	b003      	add	sp, #12
 8008c52:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008c56:	f7ff bfe1 	b.w	8008c1c <with_errno>
 8008c5a:	4610      	mov	r0, r2
 8008c5c:	4619      	mov	r1, r3
 8008c5e:	e7ee      	b.n	8008c3e <xflow+0xe>

08008c60 <__math_uflow>:
 8008c60:	2200      	movs	r2, #0
 8008c62:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008c66:	f7ff bfe3 	b.w	8008c30 <xflow>

08008c6a <__math_oflow>:
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8008c70:	f7ff bfde 	b.w	8008c30 <xflow>

08008c74 <fabs>:
 8008c74:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008c78:	4770      	bx	lr

08008c7a <finite>:
 8008c7a:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8008c7e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8008c82:	0fc0      	lsrs	r0, r0, #31
 8008c84:	4770      	bx	lr
	...

08008c88 <scalbn>:
 8008c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c8a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8008c8e:	4604      	mov	r4, r0
 8008c90:	460d      	mov	r5, r1
 8008c92:	4617      	mov	r7, r2
 8008c94:	460b      	mov	r3, r1
 8008c96:	b996      	cbnz	r6, 8008cbe <scalbn+0x36>
 8008c98:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008c9c:	4303      	orrs	r3, r0
 8008c9e:	d039      	beq.n	8008d14 <scalbn+0x8c>
 8008ca0:	4b33      	ldr	r3, [pc, #204]	; (8008d70 <scalbn+0xe8>)
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	f7f7 fc18 	bl	80004d8 <__aeabi_dmul>
 8008ca8:	4b32      	ldr	r3, [pc, #200]	; (8008d74 <scalbn+0xec>)
 8008caa:	4604      	mov	r4, r0
 8008cac:	429f      	cmp	r7, r3
 8008cae:	460d      	mov	r5, r1
 8008cb0:	da0f      	bge.n	8008cd2 <scalbn+0x4a>
 8008cb2:	a32b      	add	r3, pc, #172	; (adr r3, 8008d60 <scalbn+0xd8>)
 8008cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cb8:	f7f7 fc0e 	bl	80004d8 <__aeabi_dmul>
 8008cbc:	e006      	b.n	8008ccc <scalbn+0x44>
 8008cbe:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8008cc2:	4296      	cmp	r6, r2
 8008cc4:	d10a      	bne.n	8008cdc <scalbn+0x54>
 8008cc6:	4602      	mov	r2, r0
 8008cc8:	f7f7 fa50 	bl	800016c <__adddf3>
 8008ccc:	4604      	mov	r4, r0
 8008cce:	460d      	mov	r5, r1
 8008cd0:	e020      	b.n	8008d14 <scalbn+0x8c>
 8008cd2:	460b      	mov	r3, r1
 8008cd4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8008cd8:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8008cdc:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8008ce0:	19b9      	adds	r1, r7, r6
 8008ce2:	4291      	cmp	r1, r2
 8008ce4:	dd0e      	ble.n	8008d04 <scalbn+0x7c>
 8008ce6:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8008cea:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8008cee:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8008cf2:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8008cf6:	4820      	ldr	r0, [pc, #128]	; (8008d78 <scalbn+0xf0>)
 8008cf8:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8008cfc:	a31a      	add	r3, pc, #104	; (adr r3, 8008d68 <scalbn+0xe0>)
 8008cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d02:	e7d9      	b.n	8008cb8 <scalbn+0x30>
 8008d04:	2900      	cmp	r1, #0
 8008d06:	dd08      	ble.n	8008d1a <scalbn+0x92>
 8008d08:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008d0c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008d10:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8008d14:	4620      	mov	r0, r4
 8008d16:	4629      	mov	r1, r5
 8008d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d1a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8008d1e:	da12      	bge.n	8008d46 <scalbn+0xbe>
 8008d20:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008d24:	429f      	cmp	r7, r3
 8008d26:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8008d2a:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 8008d2e:	dcdc      	bgt.n	8008cea <scalbn+0x62>
 8008d30:	a30b      	add	r3, pc, #44	; (adr r3, 8008d60 <scalbn+0xd8>)
 8008d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d36:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8008d3a:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8008d3e:	480f      	ldr	r0, [pc, #60]	; (8008d7c <scalbn+0xf4>)
 8008d40:	f041 011f 	orr.w	r1, r1, #31
 8008d44:	e7b8      	b.n	8008cb8 <scalbn+0x30>
 8008d46:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008d4a:	3136      	adds	r1, #54	; 0x36
 8008d4c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008d50:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8008d54:	4620      	mov	r0, r4
 8008d56:	4629      	mov	r1, r5
 8008d58:	2200      	movs	r2, #0
 8008d5a:	4b09      	ldr	r3, [pc, #36]	; (8008d80 <scalbn+0xf8>)
 8008d5c:	e7ac      	b.n	8008cb8 <scalbn+0x30>
 8008d5e:	bf00      	nop
 8008d60:	c2f8f359 	.word	0xc2f8f359
 8008d64:	01a56e1f 	.word	0x01a56e1f
 8008d68:	8800759c 	.word	0x8800759c
 8008d6c:	7e37e43c 	.word	0x7e37e43c
 8008d70:	43500000 	.word	0x43500000
 8008d74:	ffff3cb0 	.word	0xffff3cb0
 8008d78:	8800759c 	.word	0x8800759c
 8008d7c:	c2f8f359 	.word	0xc2f8f359
 8008d80:	3c900000 	.word	0x3c900000

08008d84 <_init>:
 8008d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d86:	bf00      	nop
 8008d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d8a:	bc08      	pop	{r3}
 8008d8c:	469e      	mov	lr, r3
 8008d8e:	4770      	bx	lr

08008d90 <_fini>:
 8008d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d92:	bf00      	nop
 8008d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d96:	bc08      	pop	{r3}
 8008d98:	469e      	mov	lr, r3
 8008d9a:	4770      	bx	lr
